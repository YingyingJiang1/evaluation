{"project_name": "jedis", "pair_id": "26", "src_id": "M1291", "code": "\n    private static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n    if (! inclusive) {\n        sb.append(\"(\");\n    }\n    if(n == Double.NEGATIVE_INFINITY) {\n        sb.append(\"-inf\");\n    }\n\nelse\nif(n == Double.POSITIVE_INFINITY) {\n                                                                                     sb.append(\"inf\");\n}\n\nelse {\n                                                                                     sb.append(n);\n}\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "201", "src_id": "M580", "code": "\n    @Override\n    public List < String> hgetex(String key, HGetExParams params, String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "152", "src_id": "M890", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    TSArithByParams < ?> that = (TSArithByParams < ?>) o;\n    return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff&& Double.compare(ignoreMaxValDiff,that.ignoreMaxValDiff) == 0 && Objects.equals(timestamp,that.timestamp)&& Objects.equals(retentionPeriod,that.retentionPeriod)&& encoding == that.encoding&& Objects.equals(chunkSize,that.chunkSize)&& duplicatePolicy == that.duplicatePolicy && Objects.equals(labels,that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "42", "src_id": "M1177", "code": "\n    public static void closeQuietly(AutoCloseable resource) {\n    // It's same thing as Apache Commons - IOUtils.closeQuietly()\n    if (resource != null) {\n        try {\n        resource.close();\n        }\n\n                              catch(Exception e) {\n        // ignored\n        }\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "27", "src_id": "M1292", "code": "\n    @Override\n    public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    appendFrom(sb, inclusiveMin);\n    sb.append(' ');\n    appendTo(sb, inclusiveMax);\n    sb.append(']');\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "202", "src_id": "M237", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    BaseSetExParams setParams = (BaseSetExParams) o;\n    return Objects.equals(expiration, setParams.expiration) &&\n    Objects.equals(expirationValue, setParams.expirationValue);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "121", "src_id": "M580", "code": "\n    @Override\n    public List<String> hgetex(String key, HGetExParams params,String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "72", "src_id": "M890", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    TSArithByParams<?> that = (TSArithByParams<?>) o;\n    return ignore == that.ignore\n           && ignoreMaxTimediff == that.ignoreMaxTimediff && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 && Objects.equals(timestamp, that.timestamp) && Objects.equals(retentionPeriod, that.retentionPeriod) && encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) && duplicatePolicy == that.duplicatePolicy\n           && Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "203", "src_id": "M227", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    HSetExParams setParams = (HSetExParams) o;\n    return Objects.equals(existance, setParams.existance) &&\n    super.equals((BaseSetExParams) o);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "153", "src_id": "M903", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    TSCreateParams that = (TSCreateParams ) o;\n    return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff&& Double.compare(ignoreMaxValDiff,that.ignoreMaxValDiff) == 0 && Objects.equals(retentionPeriod,that.retentionPeriod)&& encoding == that.encoding&& Objects.equals(chunkSize,that.chunkSize)&& duplicatePolicy == that.duplicatePolicy && Objects.equals(labels,that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "94", "src_id": "M284", "code": "\n    @Override\n    public long expireAt(\n        byte[] key, long unixTime,\n        ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "28", "src_id": "M1290", "code": "\n    @Override\n    public String toString(Parenthesize parenMode) {\n    StringBuilder sb = new StringBuilder();\n    StringJoiner sj = new StringJoiner(getJoinString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append('(');\n    }\n    for(Node n :children) {\n                                                       sj.add(n.toString(parenMode));\n    }\n\n    sb.append(sj.toString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append(')');\n    }\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "1", "src_id": "M127", "code": "\n    private void build() {\n    // check build state to prevent recursion\n    if (building) {\n        return;\n    }\n    building = true;\n    try {\n        if (data != null) {\n        if (data instanceof JedisDataException) {\n                              exception = (JedisDataException) data;\n        } else {\n            response = builder.build(data);\n        }\n        }\n        data = null;\n    } finally {\n      building = false;\n      built = true;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "43", "src_id": "M620", "code": "\n    @Override\n    public Set<String> sinter(final String... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sinter(keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "225", "src_id": "M107", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n    if (data == null) return null;\n    List list = (List) data;\n    if (list.isEmpty()) return Collections.emptyList();\n    if(list.get(0) instanceof KeyValue) {\n        return ((List<KeyValue>) list).stream().map(kv-> new KeyValue<>(BINARY.build(kv.getKey()), STREAM_ENTRY_BINARY_LIST.build(kv.getValue()))).collect(Collectors.toList());\n    } else {\n        List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n        for (Object anObj : list) {\n               List<Object> streamObj = (List<Object>) anObj;\n               byte[] streamKey = BINARY.build(streamObj.get(0));\n               List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n               result.add(KeyValue.of(streamKey, streamEntries));\n        }\n        return result;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "154", "src_id": "M907", "code": "\n    @Override\n    public int hashCode() {\n    int result = Boolean.hashCode(latest);\n    result = 31* result + Boolean.hashCode(withLabels);\n    result = 31* result + Arrays.hashCode(selectedLabels);\n    return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "204", "src_id": "M868", "code": "\n    private void safeReAuthenticate(Token token) {\n    try {\n        byte [] rawPass = client.encodeToBytes(token.getValue() .toCharArray());\n        byte [] rawUser = client.encodeToBytes(token.getUser() .toCharArray());\n        Token newToken = pendingTokenRef.getAndSet(token);\n        if (newToken == null) {\n        commandSync.lock();\n        try {\n                                  sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n                                  resultHandler.add(this .authResultHandler);\n        }\n\n        finally {\n            pendingTokenRef.set(null);\n            commandSync.unlock();\n        }\n        }\n    }\n\n    catch(Exception e) {\n                                                     logger.error(\"Error while re-authenticating connection\", e);\n                                                     client.getAuthXManager() .getListener().onConnectionAuthenticationError(e);\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "122", "src_id": "M237", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null ||getClass() != o.getClass()) return false;\n    BaseSetExParams setParams = (BaseSetExParams) o;\n    return Objects.equals(expiration, setParams.expiration)&&Objects.equals(expirationValue, setParams.expirationValue);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "29", "src_id": "M1291", "code": "\n    private static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n    if (!inclusive) {\n        sb.append(\"(\");\n    }\n\n    if (n == Double.NEGATIVE_INFINITY) {\n        sb.append(\"-inf\");\n    } else if (n == Double.POSITIVE_INFINITY) {\n                                                                                     sb.append(\"inf\");\n           } else {\n             sb.append(n);\n           }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "73", "src_id": "M903", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    TSCreateParams that = (TSCreateParams) o;\n    return ignore == that.ignore\n           && ignoreMaxTimediff == that.ignoreMaxTimediff && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 && Objects.equals(retentionPeriod, that.retentionPeriod) && encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) && duplicatePolicy == that.duplicatePolicy\n           && Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "205", "src_id": "M957", "code": "\n    public void setListener(AuthXEventListener listener) {\n    if (listener != null) {\n        this.listener = listener;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "2", "src_id": "M1184", "code": "\n    @Override\n    public int read(byte[] b, int off, int len) throws JedisConnectionException {\n    ensureFill();\n    final int length = Math.min(limit- count, len);\n    System.arraycopy(buf, count, b, off, length);\n    count += length;\n    return length;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "44", "src_id": "M50", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public Map<byte[], byte[]> build(Object data) {\n    final List<Object> list = (List<Object>) data;\n    if (list.isEmpty()) return Collections.emptyMap();\n    if(list.get(0) instanceof KeyValue) {\n        final Map<byte[], byte[]> map = new JedisByteHashMap();\n        final Iterator iterator = list.iterator();\n        while(iterator.hasNext()) {\n                                            KeyValue kv = (KeyValue) iterator.next();\n                                            map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));\n        }\n\n        return map;\n    }\n\nelse {\n        final Map<byte[], byte[]> map = new JedisByteHashMap();\n        final Iterator iterator = list.iterator();\n        while(iterator.hasNext()) {\n         map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n        }\n\n        return map;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "95", "src_id": "M792", "code": "\n    @Override\n    public List<GeoRadiusResponse> geosearch(\n        String key, String member, double width, double height,\n        GeoUnit unit) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "155", "src_id": "M127", "code": "\n    private void build() {\n    // check build state to prevent recursion\n    if (building) {\n        return;\n    }\n    building = true;\n    try {\n                             if (data != null) {\n        if (data instanceof JedisDataException) {\n                                                   exception = (JedisDataException ) data;\n        } else {\n                                                   response = builder.build(data);\n        }\n                             }\n                             data = null;\n    }\n        finally {\n        building = false;\n        built = true;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "226", "src_id": "M1012", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP).add(GROUP).add(groupName).add(consumer).addParams(xReadGroupParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry-> args.key(entry.getKey()));\n    entrySet.forEach(entry-> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "206", "src_id": "M960", "code": "\n    private void processPingReply(Object reply) {\n    byte [] resp = (byte []) reply;\n    if(\"PONG\" .equals(SafeEncoder.encode(resp))) {\n        onPong(null );\n    }\n\nelse {\n        onPong(encode(resp));\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "123", "src_id": "M227", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null ||getClass() != o.getClass()) return false;\n    HSetExParams setParams = (HSetExParams) o;\n    return Objects.equals(existance, setParams.existance)&& super.equals((BaseSetExParams) o);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "207", "src_id": "M581", "code": "\n    @Override\n    public List < String> hgetdel(String key, String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetdel(key, fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "30", "src_id": "M1292", "code": "\n    @Override\n    public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    appendFrom(sb, inclusiveMin);\n    sb.append(' ');\n    appendTo(sb, inclusiveMax);\n    sb.append(']');\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "156", "src_id": "M1184", "code": "\n    @Override\n    public int read(byte[] b, int off, int len)throws JedisConnectionException {\n    ensureFill();\n    final int length = Math.min(limit - count,len);\n    System.arraycopy(buf,count,b,off,length);\n    count += length;\n    return length;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "45", "src_id": "M933", "code": "\n    @Deprecated\n    public static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n    Builder builder = builder();\n    builder.protocol(copy.getRedisProtocol());\n    builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n    builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n    builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n    Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n    if(credentialsProvider != null) {\n        builder.credentialsProvider(credentialsProvider);\n    }\n\nelse {\n        builder.user(copy.getUser());\n        builder.password(copy.getPassword());\n    }\n\n    builder.database(copy.getDatabase());\n    builder.clientName(copy.getClientName());\n    builder.ssl(copy.isSsl());\n    builder.sslSocketFactory(copy.getSslSocketFactory());\n    builder.sslParameters(copy.getSslParameters());\n    builder.hostnameVerifier(copy.getHostnameVerifier());\n    builder.sslOptions(copy.getSslOptions());\n    builder.hostAndPortMapper(copy.getHostAndPortMapper());\n    builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n    if (copy.isReadOnlyForRedisClusterReplicas()) {\n        builder.readOnlyForRedisClusterReplicas();\n    }\n\n    builder.authXManager(copy.getAuthXManager());\n    return builder.build();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "74", "src_id": "M907", "code": "\n    @Override\n    public int hashCode() {\n    int result = Boolean.hashCode(latest);\n    result = 31*result + Boolean.hashCode(withLabels);\n    result = 31*result + Arrays.hashCode(selectedLabels);\n    return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "3", "src_id": "M1128", "code": "\n    private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host, port);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "75", "src_id": "M127", "code": "\n    private void build() {\n    // check build state to prevent recursion\n    if (building) {\n        return;\n    }\n\n    building = true;\n    try {\n                             if (data != null) {\n        if(data instanceof JedisDataException) {\n                                                   exception = (JedisDataException) data;\n        }\n\nelse {\n                                                   response = builder.build(data);\n        }\n                             }\n\n                             data = null;\n    }\n\n    finally {\n        building = false;\n        built = true;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "96", "src_id": "M727", "code": "\n    @Override\n    public Map<String, CommandDocument> commandDocs(String... commands) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "157", "src_id": "M1128", "code": "\n    private HostAndPort toHostAndPort(List < String > getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host,port);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "227", "src_id": "M1172", "code": "\n    @Override\n    public boolean equals(Object other) {\n    if (other == null) return false;\n    if (other == this) return true;\n    if (!(other instanceof ByteArrayWrapper)) return false;\n    return Arrays.equals(data, ((ByteArrayWrapper) other).data);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "31", "src_id": "M1290", "code": "\n    @Override\n    public String toString(Parenthesize parenMode) {\n    StringBuilder sb = new StringBuilder();\n    StringJoiner sj = new StringJoiner(getJoinString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append('(');\n    }\n\n    for(Node n :children) {\n                                                       sj.add(n.toString(parenMode));\n    }\n\n    sb.append(sj.toString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append(')');\n    }\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "208", "src_id": "M890", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n\n    if (o == null ||getClass() != o.getClass()) {\n        return false;\n    }\n\n    TSArithByParams<?> that = (TSArithByParams<?>) o;\n    return ignore == that.ignore&&ignoreMaxTimediff == that.ignoreMaxTimediff&&Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0&&Objects.equals(timestamp, that.timestamp)&&Objects.equals(retentionPeriod, that.retentionPeriod)&&encoding == that.encoding&&Objects.equals(chunkSize, that.chunkSize)&&duplicatePolicy == that.duplicatePolicy&&Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "76", "src_id": "M1184", "code": "\n    @Override\n    public int read(byte [] b, int off,\n                    int len) throws JedisConnectionException {\n    ensureFill();\n    final int length = Math.min(limit - count, len);\n    System.arraycopy(buf, count, b, off, length);\n    count += length;\n    return length;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "124", "src_id": "M868", "code": "\n    private void safeReAuthenticate(Token token) {\n    try {\n        byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n\n        byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n        Token newToken = pendingTokenRef.getAndSet(token);\n        if (newToken == null) {\n        commandSync.lock();\n        try {\n            sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n            resultHandler.add(this.authResultHandler);\n        } finally {\n          pendingTokenRef.set(null);\n          commandSync.unlock();\n        }\n        }\n    } catch (Exception e) {\n      logger.error(\"Error while re-authenticating connection\", e);\n      client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "158", "src_id": "M1154", "code": "\n    public String getElement() {\n    if (null != element) {\n        return SafeEncoder.encode(element);\n    } else {\n        return null;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "46", "src_id": "M1146", "code": "\n    private <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n    JedisRedirectionException redirect = null;\n    int consecutiveConnectionFailures = 0;\n    Exception lastException = null;\n    for(int attemptsLeft = this.maxAttempts;attemptsLeft> 0;\nattemptsLeft--) {\n        Connection connection = null;\n        try {\n                    if(redirect != null) {\n            connection = provider.getConnection(redirect.getTargetNode());\n            if (redirect instanceof JedisAskDataException) {\n            // TODO: Pipeline asking with the original command to make it faster....\n                                             connection.executeCommand(Protocol.Command.ASKING);\n            }\n                    }\n\n                    else {\n            connection = toReplica?provider.getReplicaConnection(commandObject.getArguments()) : provider.getConnection(commandObject.getArguments());\n                    }\n\n                    return execute(connection, commandObject);\n        }\n\n                    catch(JedisClusterOperationException jnrcne) {\n            throw jnrcne;\n        }\n\n            catch(JedisConnectionException jce) {\n                    lastException = jce;\n                    ++ consecutiveConnectionFailures;\n                    log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n        // \"- 1\" because we just did one, but the attemptsLeft counter hasn't been decremented yet\n                    boolean reset = handleConnectionProblem(attemptsLeft -1, consecutiveConnectionFailures, deadline);\n                    if (reset) {\n                        consecutiveConnectionFailures = 0;\n                        redirect = null;\n                    }\n\n        }\n\n            catch(JedisRedirectionException jre) {\n        // avoid updating lastException if it is a connection exception\n            if (lastException == null || lastException instanceof JedisRedirectionException) {\n                        lastException = jre;\n            }\n\n            log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n            consecutiveConnectionFailures = 0;\n            redirect = jre;\n        // if MOVED redirection occurred,\n            if (jre instanceof JedisMovedDataException) {\n          // it rebuilds cluster's slot cache recommended by Redis cluster specification\n                        provider.renewSlotCache(connection);\n            }\n\n        }\n\nfinally {\n            IOUtils.closeQuietly(connection);\n        }\n\n        if (Instant.now().isAfter(deadline)) {\n                    throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n        }\n    }\n\n    JedisClusterOperationException maxAttemptsException = new JedisClusterOperationException(\"No more cluster attempts left.\");\n    maxAttemptsException.addSuppressed(lastException);\n    throw maxAttemptsException;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "4", "src_id": "M1154", "code": "\n    public String getElement() {\n    if (null != element) {\n        return SafeEncoder.encode(element);\n    } else {\n        return null;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "77", "src_id": "M1128", "code": "\n    private HostAndPort toHostAndPort(List < String> getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host, port);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "178", "src_id": "M233", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    XAutoClaimParams that = (XAutoClaimParams) o;\n    return Objects.equals(count, that.count);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "78", "src_id": "M1154", "code": "\n    public String getElement() {\n    if(null != element) {\n        return SafeEncoder.encode(element);\n    }\n\nelse {\n        return null;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "228", "src_id": "M154", "code": "\n    @Override\n    public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "159", "src_id": "M937", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (o == null) return false;\n    if (o == this) return true;\n    if (!(o instanceof GeoCoordinate)) return false;\n    GeoCoordinate that = (GeoCoordinate ) o;\n    if (Double.compare(that.longitude,longitude) != 0) return false;\n    return Double.compare(that.latitude,latitude) == 0;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "97", "src_id": "M728", "code": "\n    @Override\n    public List<String> commandGetKeys(String... command) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "209", "src_id": "M903", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n\n    if (o == null ||getClass() != o.getClass()) {\n        return false;\n    }\n\n    TSCreateParams that = (TSCreateParams) o;\n    return ignore == that.ignore&&ignoreMaxTimediff == that.ignoreMaxTimediff&&Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0&&Objects.equals(retentionPeriod, that.retentionPeriod)&&encoding == that.encoding&&Objects.equals(chunkSize, that.chunkSize)&&duplicatePolicy == that.duplicatePolicy&&Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "125", "src_id": "M957", "code": "\n    public void setListener(AuthXEventListener listener) {\n    if (listener != null) {\n        this.listener = listener;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "79", "src_id": "M937", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (o == null) return false;\n    if (o == this) return true;\n    if (! (o instanceof GeoCoordinate)) return false;\n    GeoCoordinate that = (GeoCoordinate) o;\n    if (Double.compare(that.longitude, longitude) != 0) return false;\n    return Double.compare(that.latitude, latitude) == 0;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "32", "src_id": "M1291", "code": "\n    private static void appendNum(StringBuilder sb,\n        double n, boolean inclusive) {\n    if (!inclusive) {\n        sb.append(\"(\");\n    }\n    if(n == Double.NEGATIVE_INFINITY) {\n        sb.append(\"-inf\");\n    } else if(n == Double.POSITIVE_INFINITY) {\n                                         sb.append(\"inf\");\n           } else {\n                                         sb.append(n);\n           }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "47", "src_id": "M884", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n    if (filters == null) {\n        throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n    }\n\n    if(fromTimestamp == null) {\n        args.add(MINUS);\n    }\n\nelse {\n        args.add(toByteArray(fromTimestamp));\n    }\n\n    if(toTimestamp == null) {\n        args.add(PLUS);\n    }\n\nelse {\n        args.add(toByteArray(toTimestamp));\n    }\n\n    if (latest) {\n        args.add(LATEST);\n    }\n\n    if (filterByTimestamps != null) {\n        args.add(FILTER_BY_TS);\n        for (long ts : filterByTimestamps) {\n                                        args.add(toByteArray(ts));\n        }\n    }\n\n    if (filterByValues != null) {\n        args.add(FILTER_BY_VALUE);\n        for (double value : filterByValues) {\n                                    args.add(toByteArray(value));\n        }\n    }\n\n    if(withLabels) {\n        args.add(WITHLABELS);\n    }\n\nelse if (selectedLabels != null) {\n                                                     args.add(SELECTED_LABELS);\n                                                     for (String label : selectedLabels) {\n                                     args.add(label);\n                                                     }\n     }\n\n    if (count != null) {\n        args.add(COUNT).add(toByteArray(count));\n    }\n\n    if (aggregationType != null) {\n        if (align != null) {\n                                     args.add(ALIGN).add(align);\n        }\n\n        args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n        if (bucketTimestamp != null) {\n                                     args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n        }\n\n        if (empty) {\n                                     args.add(EMPTY);\n        }\n    }\n\n    args.add(FILTER);\n    for (String filter : filters) {\n        args.add(filter);\n    }\n\n    if (groupByLabel != null && groupByReduce != null) {\n        args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "160", "src_id": "M1073", "code": "\n    @SuppressWarnings(\"unchecked\" )\n    public List < byte[]> getBinaryMultiBulkReply() {\n    flush();\n    return (List < byte[]>) readProtocolWithCheckingBroken();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "80", "src_id": "M1073", "code": "\n    @SuppressWarnings(\"unchecked\" )\n    public List < byte []> getBinaryMultiBulkReply() {\n    flush();\n    return (List < byte []>) readProtocolWithCheckingBroken();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "5", "src_id": "M937", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (o == null) return false;\n    if (o == this) return true;\n    if (!(o instanceof GeoCoordinate)) return false;\n    GeoCoordinate that = (GeoCoordinate) o;\n    if (Double.compare(that.longitude, longitude) != 0) return false;\n    return Double.compare(that.latitude, latitude) == 0;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "161", "src_id": "M284", "code": "\n    @Override\n    public long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.expireAt(key,unixTime,expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "210", "src_id": "M907", "code": "\n    @Override\n    public int hashCode() {\n    int result = Boolean.hashCode(latest);\n    result = 31 * result + Boolean.hashCode(withLabels);\n    result = 31 * result + Arrays.hashCode(selectedLabels);\n    return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "229", "src_id": "M1010", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry-> args.key(entry.getKey()));\n    entrySet.forEach(entry-> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "48", "src_id": "M502", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xread(XReadParams xReadParams,Entry<byte[], byte[]> ... streams) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "98", "src_id": "M245", "code": "\n    public GeoSearchParam byBox(\n        double width, double height,\n        GeoUnit unit) {\n        this.byBox= true;\n        this.width= width;\n        this.height= height;\n        this.unit= unit;\n        return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "126", "src_id": "M960", "code": "\n    private void processPingReply(Object reply) {\n    byte[] resp = (byte[]) reply;\n    if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n        onPong(null);\n    } else {\n      onPong(encode(resp));\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "33", "src_id": "M1292", "code": "\n    @Override\n    public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    appendFrom(sb, inclusiveMin);\n    sb.append(' ');\n    appendTo(sb, inclusiveMax);\n    sb.append(']');\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "81", "src_id": "M1291", "code": "\n    private static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n    if (!inclusive) {\n        sb.append(\"(\");\n    }\n    if (n == Double.NEGATIVE_INFINITY) {\n        sb.append(\"-inf\");\n    } else\nif (n == Double.POSITIVE_INFINITY) {\n    sb.append(\"inf\");\n} else {\n    sb.append(n);\n}\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "6", "src_id": "M1073", "code": "\n    @SuppressWarnings(\"unchecked\")\n    public List<byte[]> getBinaryMultiBulkReply() {\n    flush();\n    return (List<byte[]>) readProtocolWithCheckingBroken();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "162", "src_id": "M792", "code": "\n    @Override\n    public List < GeoRadiusResponse > geosearch(String key, String member, double width, double height, GeoUnit unit) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.geosearch(key,member,width,height,unit));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "211", "src_id": "M580", "code": "\n    @Override\n    public List < String > hgetex(String key, HGetExParams params, String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetex(key,params,fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "49", "src_id": "M416", "code": "\n    @Override\n    public List<byte[]> aclLogBinary() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(ACL, LOG);\n    return connection.getBinaryMultiBulkReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "127", "src_id": "M581", "code": "\n    @Override\n    public List<String> hgetdel(String key,String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetdel(key, fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "230", "src_id": "M1009", "code": "\n    public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry-> args.key(entry.getKey()));\n    entrySet.forEach(entry-> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "212", "src_id": "M237", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    BaseSetExParams setParams = (BaseSetExParams ) o;\n    return Objects.equals(expiration,setParams.expiration) && Objects.equals(expirationValue,setParams.expirationValue);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "99", "src_id": "M732", "code": "\n    @Override\n    public List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n    checkIsInMultiOrPipeline();\n    CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n    connection.sendCommand(args);\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "163", "src_id": "M727", "code": "\n    @Override\n    public Map< String, CommandDocument> commandDocs(String... commands) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND,joinParameters(DOCS.name(),commands));\n    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "34", "src_id": "M1290", "code": "\n    @Override\n    public String toString(Parenthesize parenMode) {\n    StringBuilder sb = new StringBuilder();\n    StringJoiner sj = new StringJoiner(getJoinString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append('(');\n    }\n    for (Node n : children) {\n        sj.add(n.toString(parenMode));\n    }\n    sb.append(sj.toString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append(')');\n    }\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "50", "src_id": "M390", "code": "\n    @Override\n    public Long objectFreq(final byte[] key) {\n    connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n    return connection.getIntegerReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "82", "src_id": "M1292", "code": "\n    @Override\n    public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    appendFrom(sb, inclusiveMin);\n    sb.append(' ');\n    appendTo(sb, inclusiveMax);\n    sb.append(']');\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "7", "src_id": "M127", "code": "\n    private void build() {\n    // check build state to prevent recursion\n        if (building) {\n        return;\n        }\n        building= true;\n        try {\n            if (data != null) {\n            if (data instanceof JedisDataException) {\n                exception= (JedisDataException) data;\n            } else {\n                response= builder.build(data);\n            }\n            }\n            data= null;\n        }\n            finally {\n        building= false;\n        built= true;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "213", "src_id": "M227", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    HSetExParams setParams = (HSetExParams ) o;\n    return Objects.equals(existance,setParams.existance) && super.equals((BaseSetExParams ) o);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "51", "src_id": "M231", "code": "\n    public GeoRadiusStoreParam storeDist(String key) {\n    if (key != null) {\n        this.storeDist = true;\n        this.key = key;\n    }\n\n    return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "164", "src_id": "M728", "code": "\n    @Override\n    public List < String > commandGetKeys(String... command) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND,joinParameters(GETKEYS.name(),command));\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "231", "src_id": "M152", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xreadGroup(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "52", "src_id": "M284", "code": "\n    @Override\n    public long expireAt(byte [] key, long unixTime, ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "100", "src_id": "M712", "code": "\n    @Override\n    public LCSMatchResult lcs(\n        final String keyA, final String keyB,\n        final LCSParams params) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "179", "src_id": "M1104", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    return Arrays.equals(raw, ((Raw) o).raw);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "165", "src_id": "M245", "code": "\n    public GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n    this.byBox = true;\n    this.width = width;\n    this.height = height;\n    this.unit = unit;\n    return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "83", "src_id": "M1290", "code": "\n    @Override\n    public String toString(Parenthesize parenMode) {\n    StringBuilder sb = new StringBuilder();\n    StringJoiner sj = new StringJoiner(getJoinString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append('(');\n    }\n    for (Node n : children) {\n                                                       sj.add(n.toString(parenMode));\n    }\n    sb.append(sj.toString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append(')');\n    }\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "128", "src_id": "M107", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n    if (data == null) return null;\n    List list = (List) data;\n    if (list.isEmpty()) return Collections.emptyList();\n    if (list.get(0) instanceof KeyValue) {\n        return ((List<KeyValue>) list).stream().map(kv-> new KeyValue<>(BINARY.build(kv.getKey()), STREAM_ENTRY_BINARY_LIST.build(kv.getValue()))).collect(Collectors.toList());\n    } else {\n      List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n      for(Object anObj :list) {\n               List<Object> streamObj = (List<Object>) anObj;\n\n               byte[] streamKey = BINARY.build(streamObj.get(0));\n               List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n               result.add(KeyValue.of(streamKey, streamEntries));\n      }\n      return result;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "214", "src_id": "M868", "code": "\n    private void safeReAuthenticate(Token token) {\n    try {\n        byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n        byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n        Token newToken = pendingTokenRef.getAndSet(token);\n        if (newToken == null) {\n        commandSync.lock();\n        try {\n            sendAndFlushCommand(Command.AUTH,rawUser,rawPass);\n            resultHandler.add(this .authResultHandler);\n        }\n            finally {\n                                  pendingTokenRef.set(null);\n                                  commandSync.unlock();\n        }\n        }\n    }\n        catch(Exception e ) {\n                                                     logger.error(\"Error while re-authenticating connection\",e);\n                                                     client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "232", "src_id": "M777", "code": "\n    @Override\n    public List < Map<String, Object>> clusterLinks() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(CLUSTER, ClusterKeyword.LINKS);\n    return connection.getObjectMultiBulkReply() .stream() .map(BuilderFactory.ENCODED_OBJECT_MAP::build) .collect(Collectors.toList());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "53", "src_id": "M792", "code": "\n    @Override\n    public List < GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "8", "src_id": "M1184", "code": "\n    @Override\n    public int read(\n        byte[] b, int off,\n        int len) throws JedisConnectionException {\n    ensureFill();\n\n    final int length = Math.min(limit-count, len);\n    System.arraycopy(buf, count, b, off, length);\n    count+= length;\n    return length;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "35", "src_id": "M107", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Map .Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n    if (data == null) return null;\n    List list = (List) data;\n    if (list.isEmpty()) return Collections.emptyList();\n    if (list.get(0) instanceof KeyValue) {\n        return ((List<KeyValue>) list).stream().map(kv -> new KeyValue<>(BINARY.build(kv.getKey()),\n                                          STREAM_ENTRY_BINARY_LIST.build(kv.getValue()))).collect(Collectors.toList());\n    } else {\n        List<Map .Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n        for (Object anObj : list) {\n               List<Object> streamObj = (List<Object>) anObj;\n               byte[] streamKey = BINARY.build(streamObj.get(0));\n               List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n               result.add(KeyValue.of(streamKey, streamEntries));\n        }\n        return result;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "233", "src_id": "M779", "code": "\n    @Override\n    public String clusterDelSlotsRange(int... ranges) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(CLUSTER, joinParameters(ClusterKeyword.DELSLOTSRANGE.getRaw(), joinParameters(ranges)));\n    return connection.getStatusCodeReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "215", "src_id": "M957", "code": "\n    public void setListener(AuthXEventListener listener) {\n    if (listener != null) {\n        this.listener = listener;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "54", "src_id": "M727", "code": "\n    @Override\n    public Map<String, CommandDocument> commandDocs(String... commands) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "166", "src_id": "M732", "code": "\n    @Override\n    public List < String > commandListFilterBy(CommandListFilterByParams filterByParams) {\n    checkIsInMultiOrPipeline();\n    CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n    connection.sendCommand(args);\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "84", "src_id": "M284", "code": "\n    @Override\n    public long expireAt(byte[] key, long unixTime,ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "234", "src_id": "M818", "code": "\n    @Override\n    public Map<String, Object> memoryStats() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(MEMORY, STATS);\n    return BuilderFactory.ENCODED_OBJECT_MAP.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "129", "src_id": "M1012", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP).add(GROUP).add(groupName).add(consumer).addParams(xReadGroupParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry->args.key(entry.getKey()));\n    entrySet.forEach(entry->args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "101", "src_id": "M551", "code": "\n    @Override\n    public long pexpire(\n        final String key, final long milliseconds,\n        final ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "55", "src_id": "M728", "code": "\n    @Override\n    public List < String> commandGetKeys(String... command) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "216", "src_id": "M960", "code": "\n    private void processPingReply(Object reply) {\n    byte[] resp = (byte[]) reply;\n    if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n        onPong(null);\n    } else {\n        onPong(encode(resp));\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "167", "src_id": "M712", "code": "\n    @Override\n    public LCSMatchResult lcs(final String keyA, final String keyB, final LCSParams params) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.lcs(keyA,keyB,params));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "36", "src_id": "M1012", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP).add(GROUP).add(groupName).add(consumer).addParams(xReadGroupParams).add(STREAMS);\n    Set<Map .Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "85", "src_id": "M792", "code": "\n    @Override\n    public List<GeoRadiusResponse> geosearch(String key, String member, double width, double height,GeoUnit unit) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "9", "src_id": "M1128", "code": "\n    private HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n    String host = getMasterAddrByNameResult.get(0);\n    int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n    return new HostAndPort(host, port);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "56", "src_id": "M245", "code": "\n    public GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n    this.byBox = true;\n    this.width = width;\n    this.height = height;\n    this.unit = unit;\n    return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "168", "src_id": "M551", "code": "\n    @Override\n    public long pexpire(final String key, final long milliseconds, final ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.pexpire(key,milliseconds,expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "217", "src_id": "M581", "code": "\n    @Override\n    public List < String > hgetdel(String key, String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetdel(key,fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "130", "src_id": "M1172", "code": "\n    @Override\n    public boolean equals(Object other) {\n    if (other == null) return false;\n    if (other == this) return true;\n    if (!(other instanceof ByteArrayWrapper)) return false;\n    return Arrays.equals(data, ((ByteArrayWrapper) other).data);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "57", "src_id": "M732", "code": "\n    @Override\n    public List < String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n    checkIsInMultiOrPipeline();\n    CommandArguments args = new CommandArguments(COMMAND) .add(LIST) .addParams(filterByParams);\n    connection.sendCommand(args);\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "235", "src_id": "M233", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        XAutoClaimParams that = (XAutoClaimParams) o;\n        return Objects.equals(count, that.count);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "86", "src_id": "M727", "code": "\n    @Override\n    public Map<String, CommandDocument> commandDocs(String... commands) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "102", "src_id": "M844", "code": "\n    @Override\n    public List<Object> functionListBinary() {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.functionListBinary());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "58", "src_id": "M712", "code": "\n    @Override\n    public LCSMatchResult lcs(final String keyA, final String keyB, final LCSParams params) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "169", "src_id": "M844", "code": "\n    @Override\n    public List < Object > functionListBinary() {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.functionListBinary());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "37", "src_id": "M1172", "code": "\n    @Override\n    public boolean equals(Object other) {\n    if (other == null) return false;\n    if (other == this) return true;\n    if (!(other instanceof ByteArrayWrapper)) return false;\n    return Arrays.equals(data, ((ByteArrayWrapper) other).data);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "10", "src_id": "M1154", "code": "\n    public String getElement() {\n        if (null != element) {\n        return SafeEncoder.encode(element);\n        } else {\n        return null;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "59", "src_id": "M551", "code": "\n    @Override\n    public long pexpire(final String key, final long milliseconds, final ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "131", "src_id": "M154", "code": "\n    @Override\n    public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "170", "src_id": "M298", "code": "\n    @Override\n    public long sintercard(int limit, byte[] ... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sintercard(limit,keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "218", "src_id": "M233", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    XAutoClaimParams that = (XAutoClaimParams) o;\n    return Objects.equals(count, that.count);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "87", "src_id": "M728", "code": "\n    @Override\n    public List<String> commandGetKeys(String... command) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "60", "src_id": "M844", "code": "\n    @Override\n    public List < Object> functionListBinary() {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.functionListBinary());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "236", "src_id": "M1104", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        return Arrays.equals(raw, ((Raw) o).raw);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "103", "src_id": "M298", "code": "\n    @Override\n    public long sintercard(int limit,\n        byte[]... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sintercard(limit, keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "61", "src_id": "M298", "code": "\n    @Override\n    public long sintercard(int limit, byte []... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sintercard(limit, keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "38", "src_id": "M154", "code": "\n    @Override\n    public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "88", "src_id": "M245", "code": "\n    public GeoSearchParam byBox(double width, double height,GeoUnit unit) {\n    this.byBox = true;\n    this.width = width;\n    this.height = height;\n    this.unit = unit;\n    return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "132", "src_id": "M1010", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry->args.key(entry.getKey()));\n    entrySet.forEach(entry->args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "11", "src_id": "M937", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (o == null) return false;\n        if (o == this) return true;\n        if (! (o instanceof GeoCoordinate)) return false;\n        GeoCoordinate that = (GeoCoordinate) o;\n        if (Double.compare(that.longitude, longitude)!= 0) return false;\n        return Double.compare(that.latitude, latitude) == 0;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "104", "src_id": "M890", "code": "\n    @Override\n    public boolean equals(Object o) {\n       if (this == o) {\n        return true;\n       }\n       if (o == null || getClass()!= o.getClass()) {\n        return false;\n       }\n\n       TSArithByParams<?> that = (TSArithByParams<?>) o;\n\n       return ignore == that.ignore&& ignoreMaxTimediff == that.ignoreMaxTimediff&& Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0&& Objects.equals(timestamp, that.timestamp)&& Objects.equals(retentionPeriod, that.retentionPeriod)&& encoding == that.encoding&& Objects.equals(chunkSize, that.chunkSize)&& duplicatePolicy == that.duplicatePolicy&& Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "171", "src_id": "M580", "code": "\n    @Override\n    public List<String> hgetex(\n        String key, HGetExParams params,\n        String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "219", "src_id": "M1104", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    return Arrays.equals(raw, ((Raw) o).raw);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "180", "src_id": "M260", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    ZAddParams that = (ZAddParams) o;\n    return change == that.change && existence == that.existence && comparison == that.comparison;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "105", "src_id": "M903", "code": "\n    @Override\n    public boolean equals(Object o) {\n       if (this == o) {\n        return true;\n       }\n       if (o == null || getClass()!= o.getClass()) {\n        return false;\n       }\n\n       TSCreateParams that = (TSCreateParams) o;\n\n       return ignore == that.ignore&& ignoreMaxTimediff == that.ignoreMaxTimediff&& Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0&& Objects.equals(retentionPeriod, that.retentionPeriod)&& encoding == that.encoding&& Objects.equals(chunkSize, that.chunkSize)&& duplicatePolicy == that.duplicatePolicy&& Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "89", "src_id": "M732", "code": "\n    @Override\n    public List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n    checkIsInMultiOrPipeline();\n    CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n    connection.sendCommand(args);\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "237", "src_id": "M260", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        ZAddParams that = (ZAddParams) o;\n        return change == that.change&&existence == that.existence&&comparison == that.comparison;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "39", "src_id": "M1010", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map .Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "133", "src_id": "M1009", "code": "\n    public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry->args.key(entry.getKey()));\n    entrySet.forEach(entry->args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "106", "src_id": "M907", "code": "\n    @Override\n    public int hashCode() {\n       int result = Boolean.hashCode(latest);\n       result= 31* result+ Boolean.hashCode(withLabels);\n       result= 31* result+ Arrays.hashCode(selectedLabels);\n\n       return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "12", "src_id": "M1073", "code": "\n    @SuppressWarnings(\"unchecked\")\n    public List<byte[]> getBinaryMultiBulkReply() {\n    flush();\n    return (List<byte[]>) readProtocolWithCheckingBroken();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "90", "src_id": "M712", "code": "\n    @Override\n    public LCSMatchResult lcs(final String keyA, final String keyB,final LCSParams params) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "220", "src_id": "M260", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    ZAddParams that = (ZAddParams) o;\n    return change == that.change\n        && existence == that.existence\n        && comparison == that.comparison;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "172", "src_id": "M237", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        BaseSetExParams setParams = (BaseSetExParams) o;\n        return Objects.equals(expiration, setParams.expiration)&&Objects.equals(expirationValue, setParams.expirationValue);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "13", "src_id": "M1291", "code": "\n    private static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n    if (! inclusive) {\n        sb.append(\"(\");\n    }\n\n    if(n == Double.NEGATIVE_INFINITY) {\n        sb.append(\"-inf\");\n    }\n\nelse if(n == Double.POSITIVE_INFINITY) {\n                                                                                     sb.append(\"inf\");\n     }\n\nelse {\n                                                                                     sb.append(n);\n     }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "238", "src_id": "M234", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        ClientKillParams that = (ClientKillParams) o;\n        return Objects.equals(params, that.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "91", "src_id": "M551", "code": "\n    @Override\n    public long pexpire(final String key, final long milliseconds,final ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "134", "src_id": "M152", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xreadGroup(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,Map.Entry<byte[], byte[]> ... streams) {\n    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "40", "src_id": "M1009", "code": "\n    public final CommandObject<List<Map .Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map .Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "107", "src_id": "M107", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n    if (data == null) return null;\n    List list = (List) data;\n    if (list.isEmpty()) return Collections.emptyList();\n    if(list.get(0) instanceof KeyValue) {\n        return ((List<KeyValue>) list).stream().map(kv-> new KeyValue<>(BINARY.build(kv.getKey()), STREAM_ENTRY_BINARY_LIST.build(kv.getValue()))).collect(Collectors.toList());\n    }\n\nelse {\n        List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n        for (Object anObj : list) {\n         List<Object> streamObj = (List<Object>) anObj;\n         byte [] streamKey = BINARY.build(streamObj.get(0));\n         List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n         result.add(KeyValue.of(streamKey, streamEntries));\n        }\n\n        return result;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "14", "src_id": "M1292", "code": "\n    @Override\n    public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    appendFrom(sb, inclusiveMin);\n    sb.append(' ');\n    appendTo(sb, inclusiveMax);\n    sb.append(']');\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "221", "src_id": "M234", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    ClientKillParams that = (ClientKillParams) o;\n    return Objects.equals(params, that.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "135", "src_id": "M233", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    XAutoClaimParams that = (XAutoClaimParams ) o;\n    return Objects.equals(count,that.count);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "92", "src_id": "M844", "code": "\n    @Override\n    public List<Object> functionListBinary() {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.functionListBinary());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "173", "src_id": "M227", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        HSetExParams setParams = (HSetExParams) o;\n        return Objects.equals(existance, setParams.existance)&& super.equals((BaseSetExParams) o);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "108", "src_id": "M1012", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP).add(GROUP).add(groupName).add(consumer).addParams(xReadGroupParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry->args.key(entry.getKey()));\n    entrySet.forEach(entry->args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "239", "src_id": "M256", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        ModuleLoadExParams that = (ModuleLoadExParams) o;\n        return Objects.equals(configs, that.configs)&&Objects.equals(args, that.args);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "15", "src_id": "M1290", "code": "\n    @Override\n    public String toString(Parenthesize parenMode) {\n    StringBuilder sb = new StringBuilder();\n    StringJoiner sj = new StringJoiner(getJoinString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append('(');\n    }\n\n    for (Node n : children) {\n        sj.add(n.toString(parenMode));\n    }\n\n    sb.append(sj.toString());\n    if (shouldParenthesize(parenMode)) {\n        sb.append(')');\n    }\n\n    return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "41", "src_id": "M152", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xreadGroup(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "136", "src_id": "M1104", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    return Arrays.equals(raw, ((Raw ) o) .raw);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "93", "src_id": "M298", "code": "\n    @Override\n    public long sintercard(int limit,byte[]... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sintercard(limit, keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "109", "src_id": "M1172", "code": "\n    @Override\n    public boolean equals(Object other) {\n    if (other == null) return false;\n    if (other == this) return true;\n    if (! (other instanceof ByteArrayWrapper)) return false;\n    return Arrays.equals(data, ((ByteArrayWrapper) other) .data);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "222", "src_id": "M256", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    ModuleLoadExParams that = (ModuleLoadExParams) o;\n    return Objects.equals(configs, that.configs)\n    && Objects.equals(args, that.args);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "137", "src_id": "M260", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ZAddParams that = (ZAddParams ) o;\n    return change == that.change && existence == that.existence && comparison == that.comparison;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "62", "src_id": "M107", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n\n    if (data == null) return null;\n    List list = (List) data;\n    if (list.isEmpty()) return Collections.emptyList();\n\n    if (list.get(0) instanceof KeyValue) {\n        return ((List<KeyValue>) list).stream().map(kv -> new KeyValue<>(BINARY.build(kv.getKey()), STREAM_ENTRY_BINARY_LIST.build(kv.getValue()))).collect(Collectors.toList());\n    } else {\n      List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n      for (Object anObj : list) {\n               List<Object> streamObj = (List<Object>) anObj;\n               byte[] streamKey = BINARY.build(streamObj.get(0));\n               List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n               result.add(KeyValue.of(streamKey, streamEntries));\n      }\n      return result;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "174", "src_id": "M868", "code": "\n    private void safeReAuthenticate(Token token) {\n        try {\n        byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n        byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n        Token newToken = pendingTokenRef.getAndSet(token);\n        if (newToken == null) {\n            commandSync.lock();\n            try {\n            sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n            resultHandler.add(this.authResultHandler);\n            }\n                finally {\n            pendingTokenRef.set(null);\n            commandSync.unlock();\n            }\n        }\n        }\n            catch(Exception e) {\n        logger.error(\"Error while re-authenticating connection\", e);\n        client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "240", "src_id": "M238", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        MigrateParams that = (MigrateParams) o;\n        return copy == that.copy&&replace == that.replace&&Objects.equals(username, that.username)&&Objects.equals(password, that.password);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "110", "src_id": "M154", "code": "\n    @Override\n    public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,Map<byte[], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "138", "src_id": "M234", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ClientKillParams that = (ClientKillParams ) o;\n    return Objects.equals(params,that.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "181", "src_id": "M234", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    ClientKillParams that = (ClientKillParams) o;\n    return Objects.equals(params, that.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "223", "src_id": "M238", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    MigrateParams that = (MigrateParams) o;\n    return copy == that.copy\n        && replace == that.replace && Objects.equals(username, that.username)\n        && Objects.equals(password, that.password);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "111", "src_id": "M1010", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams,Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry->args.key(entry.getKey()));\n    entrySet.forEach(entry->args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "139", "src_id": "M256", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ModuleLoadExParams that = (ModuleLoadExParams ) o;\n    return Objects.equals(configs,that.configs) && Objects.equals(args,that.args);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "175", "src_id": "M957", "code": "\n    public void setListener(AuthXEventListener listener) {\n        if (listener != null) {\n        this.listener= listener;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "241", "src_id": "M229", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null||getClass()!= o.getClass()) return false;\n        ZParams zParams = (ZParams) o;\n        return Objects.equals(params, zParams.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "140", "src_id": "M238", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    MigrateParams that = (MigrateParams ) o;\n    return copy == that.copy && replace == that.replace&& Objects.equals(username,that.username)&& Objects.equals(password,that.password);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "112", "src_id": "M1009", "code": "\n    public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams,Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry->args.key(entry.getKey()));\n    entrySet.forEach(entry->args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "224", "src_id": "M229", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null|| getClass() != o.getClass()) return false;\n    ZParams zParams = (ZParams) o;\n    return Objects.equals(params, zParams.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "141", "src_id": "M229", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n    ZParams zParams = (ZParams ) o;\n    return Objects.equals(params,zParams.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "113", "src_id": "M152", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xreadGroup(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,Map .Entry<byte[], byte[]> ... streams) {\n    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "176", "src_id": "M960", "code": "\n    private void processPingReply(Object reply) {\n        byte[] resp = (byte[]) reply;\n        if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n            onPong(null);\n        } else {\n        onPong(encode(resp));\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "242", "src_id": "M890", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n        return true;\n        }\n        if (o == null||getClass()!= o.getClass()) {\n        return false;\n        }\n        TSArithByParams<?> that = (TSArithByParams<?>) o;\n        return ignore == that.ignore&&ignoreMaxTimediff == that.ignoreMaxTimediff&&Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0&&Objects.equals(timestamp, that.timestamp)&&Objects.equals(retentionPeriod, that.retentionPeriod)&&encoding == that.encoding&&Objects.equals(chunkSize, that.chunkSize)&&duplicatePolicy == that.duplicatePolicy&&Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "142", "src_id": "M1177", "code": "\n    public static void closeQuietly(AutoCloseable resource) {\n    // It's same thing as Apache Commons - IOUtils.closeQuietly()\n    if (resource != null) {\n        try {\n                              resource.close();\n        } catch (Exception e) {\n        // ignored\n        }\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "114", "src_id": "M107", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\" )\n    public List < Map.Entry<byte [], List < StreamEntryBinary>>> build(Object data) {\n    if (data == null) return null;\n    List list = (List) data;\n    if (list.isEmpty()) return Collections.emptyList();\n    if(list.get(0)instanceof KeyValue) {\n        return ((List < KeyValue>) list) .stream() .map(kv-> new KeyValue <>(BINARY.build(kv.getKey()), STREAM_ENTRY_BINARY_LIST.build(kv.getValue()))) .collect(Collectors.toList());\n    }\n\nelse {\n        List < Map.Entry<byte [], List < StreamEntryBinary>>> result = new ArrayList <>(list.size());\n        for(Object anObj :list) {\n         List < Object> streamObj = (List < Object>) anObj;\n         byte [] streamKey = BINARY.build(streamObj.get(0));\n         List < StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n         result.add(KeyValue.of(streamKey, streamEntries));\n        }\n        return result;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "16", "src_id": "M284", "code": "\n    @Override\n    public long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "177", "src_id": "M581", "code": "\n    @Override\n    public List<String> hgetdel(String key,\n        String... fields) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.hgetdel(key, fields));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "115", "src_id": "M1012", "code": "\n    public final CommandObject < Map<byte [], List < StreamEntryBinary>>> xreadGroupBinaryAsMap(byte [] groupName, byte [] consumer, XReadGroupParams xReadGroupParams, Map<byte [], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP) .add(GROUP) .add(groupName) .add(consumer) .addParams(xReadGroupParams) .add(STREAMS);\n    Set < Map.Entry<byte [], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry-> args.key(entry.getKey()));\n    entrySet.forEach(entry-> args.add(entry.getValue()));\n    return new CommandObject <>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "243", "src_id": "M903", "code": "\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) {\n        return true;\n        }\n        if (o == null||getClass()!= o.getClass()) {\n        return false;\n        }\n        TSCreateParams that = (TSCreateParams) o;\n        return ignore == that.ignore&&ignoreMaxTimediff == that.ignoreMaxTimediff&&Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0&&Objects.equals(retentionPeriod, that.retentionPeriod)&&encoding == that.encoding&&Objects.equals(chunkSize, that.chunkSize)&&duplicatePolicy == that.duplicatePolicy&&Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "116", "src_id": "M1172", "code": "\n    @Override\n    public boolean equals(Object other) {\n    if (other == null) return false;\n    if (other == this) return true;\n    if (! (other instanceof ByteArrayWrapper)) return false;\n    return Arrays.equals(data, ((ByteArrayWrapper) other) .data);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "143", "src_id": "M620", "code": "\n    @Override\n    public Set<String> sinter(final String... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sinter(keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "117", "src_id": "M154", "code": "\n    @Override\n    public Map<byte [], List < StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte [], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "182", "src_id": "M256", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    ModuleLoadExParams that = (ModuleLoadExParams) o;\n    return Objects.equals(configs, that.configs) && Objects.equals(args, that.args);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "63", "src_id": "M1012", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP).add(GROUP).add(groupName).add(consumer).addParams(xReadGroupParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "118", "src_id": "M1010", "code": "\n    public final CommandObject < Map<byte [], List < StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte [], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD) .addParams(xReadParams) .add(STREAMS);\n    Set < Map.Entry<byte [], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry-> args.key(entry.getKey()));\n    entrySet.forEach(entry-> args.add(entry.getValue()));\n    return new CommandObject <>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "244", "src_id": "M907", "code": "\n    @Override\n    public int hashCode() {\n        int result = Boolean.hashCode(latest);\n        result= 31* result+Boolean.hashCode(withLabels);\n        result= 31* result+Arrays.hashCode(selectedLabels);\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "119", "src_id": "M1009", "code": "\n    public final CommandObject < List < Map.Entry<byte [], List < StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams, Map<byte [], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD) .addParams(xReadParams) .add(STREAMS);\n    Set < Map.Entry<byte [], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry-> args.key(entry.getKey()));\n    entrySet.forEach(entry-> args.add(entry.getValue()));\n    return new CommandObject <>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "144", "src_id": "M50", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public Map<byte[], byte[]> build(Object data) {\n    final List<Object> list = (List<Object>) data;\n    if (list.isEmpty()) return Collections.emptyMap();\n    if(list.get(0) instanceof KeyValue) {\n        final Map<byte[], byte[]> map = new JedisByteHashMap();\n        final Iterator iterator = list.iterator();\n        while(iterator.hasNext()) {\n                                            KeyValue kv = (KeyValue) iterator.next();\n                                            map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));\n        }\n        return map;\n    } else {\n        final Map<byte[], byte[]> map = new JedisByteHashMap();\n        final Iterator iterator = list.iterator();\n        while(iterator.hasNext()) {\n               map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n        }\n        return map;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "120", "src_id": "M152", "code": "\n    @Deprecated\n    @Override\n    public List < Object> xreadGroup(byte [] groupName, byte [] consumer, XReadGroupParams xReadGroupParams, Map.Entry<byte [], byte []>... streams) {\n    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "145", "src_id": "M933", "code": "\n    @Deprecated\n    public static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n    Builder builder = builder();\n    builder.protocol(copy.getRedisProtocol());\n    builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n    builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n    builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n    Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n    if(credentialsProvider != null) {\n        builder.credentialsProvider(credentialsProvider);\n    } else {\n        builder.user(copy.getUser());\n        builder.password(copy.getPassword());\n    }\n    builder.database(copy.getDatabase());\n    builder.clientName(copy.getClientName());\n    builder.ssl(copy.isSsl());\n    builder.sslSocketFactory(copy.getSslSocketFactory());\n    builder.sslParameters(copy.getSslParameters());\n    builder.hostnameVerifier(copy.getHostnameVerifier());\n    builder.sslOptions(copy.getSslOptions());\n    builder.hostAndPortMapper(copy.getHostAndPortMapper());\n    builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n    if (copy.isReadOnlyForRedisClusterReplicas()) {\n        builder.readOnlyForRedisClusterReplicas();\n    }\n    builder.authXManager(copy.getAuthXManager());\n    return builder.build();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "17", "src_id": "M792", "code": "\n    @Override\n    public List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "146", "src_id": "M1146", "code": "\n    private <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n    JedisRedirectionException redirect = null;\n    int consecutiveConnectionFailures = 0;\n    Exception lastException = null;\n    for(int attemptsLeft = this.maxAttempts;\nattemptsLeft> 0;\nattemptsLeft-- ) {\n                                                                                          Connection connection = null;\n                                                                                          try {\n                     if(redirect != null) {\n                                                                                              connection = provider.getConnection(redirect.getTargetNode());\n                                                                                              if (redirect instanceof JedisAskDataException) {\n            // TODO: Pipeline asking with the original command to make it faster....\n                                              connection.executeCommand(Protocol.Command.ASKING);\n                                                                                              }\n                     } else {\n                                                                                              connection = toReplica?provider.getReplicaConnection(commandObject.getArguments()): provider.getConnection(commandObject.getArguments());\n                     }\n                     return execute(connection, commandObject);\n                                                                                          } catch (JedisClusterOperationException jnrcne) {\n                                                                                            throw jnrcne;\n                                                                                          } catch (JedisConnectionException jce) {\n                                                                                            lastException = jce;\n                                                                                            ++ consecutiveConnectionFailures;\n                                                                                            log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n        // \"- 1\" because we just did one, but the attemptsLeft counter hasn't been decremented yet\n                                                                                            boolean reset = handleConnectionProblem(attemptsLeft-1, consecutiveConnectionFailures, deadline);\n                                                                                            if (reset) {\n                                                                                                consecutiveConnectionFailures = 0;\n                                                                                                redirect = null;\n                                                                                            }\n                                                                                          } catch (JedisRedirectionException jre) {\n        // avoid updating lastException if it is a connection exception\n                                                                                            if (lastException == null|| lastException instanceof JedisRedirectionException) {\n                                                                                                lastException = jre;\n                                                                                            }\n                                                                                            log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n                                                                                            consecutiveConnectionFailures = 0;\n                                                                                            redirect = jre;\n        // if MOVED redirection occurred,\n                                                                                            if (jre instanceof JedisMovedDataException) {\n          // it rebuilds cluster's slot cache recommended by Redis cluster specification\n                                                                                                provider.renewSlotCache(connection);\n                                                                                            }\n                                                                                          } finally {\n                                                                                              IOUtils.closeQuietly(connection);\n                                                                                          }\n                                                                                          if (Instant.now().isAfter(deadline)) {\n                     throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n                                                                                          }\n    }\n\n    JedisClusterOperationException maxAttemptsException = new JedisClusterOperationException(\"No more cluster attempts left.\");\n    maxAttemptsException.addSuppressed(lastException);\n    throw maxAttemptsException;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "183", "src_id": "M238", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    MigrateParams that = (MigrateParams) o;\n    return copy == that.copy && replace == that.replace && Objects.equals(username, that.username) && Objects.equals(password, that.password);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "64", "src_id": "M1172", "code": "\n    @Override\n    public boolean equals(Object other) {\n\n    if (other == null) return false;\n\n    if (other == this) return true;\n\n    if (!(other instanceof ByteArrayWrapper)) return false;\n    return Arrays.equals(data, ((ByteArrayWrapper) other).data);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "147", "src_id": "M884", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n    if (filters == null) {\n        throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n    }\n    if(fromTimestamp == null) {\n        args.add(MINUS);\n    } else {\n        args.add(toByteArray(fromTimestamp));\n    }\n    if(toTimestamp == null) {\n        args.add(PLUS);\n    } else {\n        args.add(toByteArray(toTimestamp));\n    }\n    if (latest) {\n        args.add(LATEST);\n    }\n    if (filterByTimestamps != null) {\n        args.add(FILTER_BY_TS);\n        for ( long ts : filterByTimestamps) {\n                                        args.add(toByteArray(ts));\n        }\n    }\n    if (filterByValues != null) {\n        args.add(FILTER_BY_VALUE);\n        for (double value : filterByValues) {\n                                    args.add(toByteArray(value));\n        }\n    }\n    if(withLabels) {\n        args.add(WITHLABELS);\n    } else if (selectedLabels != null) {\n                                                     args.add(SELECTED_LABELS);\n                                                     for (String label : selectedLabels) {\n                                           args.add(label);\n                                                     }\n           }\n    if (count != null) {\n        args.add(COUNT).add(toByteArray(count));\n    }\n    if (aggregationType != null) {\n        if (align != null) {\n                                     args.add(ALIGN).add(align);\n        }\n        args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n        if (bucketTimestamp != null) {\n                                     args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n        }\n        if (empty) {\n                                     args.add(EMPTY);\n        }\n    }\n    args.add(FILTER);\n    for (String filter : filters) {\n        args.add(filter);\n    }\n    if (groupByLabel != null && groupByReduce != null) {\n        args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "148", "src_id": "M502", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xread(XReadParams xReadParams, Entry<byte[], byte[]>... streams) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "18", "src_id": "M727", "code": "\n    @Override\n    public Map<String, CommandDocument> commandDocs(String... commands) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "149", "src_id": "M416", "code": "\n    @Override\n    public List<byte[]> aclLogBinary() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(ACL, LOG);\n    return connection.getBinaryMultiBulkReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "150", "src_id": "M390", "code": "\n    @Override\n    public Long objectFreq(final byte[] key) {\n    connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n    return connection.getIntegerReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "184", "src_id": "M229", "code": "\n    @Override\n    public boolean equals(Object o) {\n\n    if (this == o) return true;\n\n    if (o == null || getClass() != o.getClass()) return false;\n    ZParams zParams = (ZParams) o;\n    return Objects.equals(params, zParams.params);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "65", "src_id": "M154", "code": "\n    @Override\n    public Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "151", "src_id": "M231", "code": "\n    public GeoRadiusStoreParam storeDist(String key) {\n    if (key != null) {\n        this.storeDist = true;\n        this.key = key;\n    }\n    return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "185", "src_id": "M890", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null|| getClass() != o.getClass()) {\n        return false;\n    }\n\n    TSArithByParams<?> that = (TSArithByParams<?>) o;\n    return ignore == that.ignore\n        && ignoreMaxTimediff == that.ignoreMaxTimediff && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n&& Objects.equals(timestamp, that.timestamp) && Objects.equals(retentionPeriod, that.retentionPeriod) && encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) && duplicatePolicy == that.duplicatePolicy\n&& Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "19", "src_id": "M728", "code": "\n    @Override\n    public List<String> commandGetKeys(String... command) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "186", "src_id": "M903", "code": "\n    @Override\n    public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null|| getClass() != o.getClass()) {\n        return false;\n    }\n\n    TSCreateParams that = (TSCreateParams) o;\n    return ignore == that.ignore\n        && ignoreMaxTimediff == that.ignoreMaxTimediff && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n&& Objects.equals(retentionPeriod, that.retentionPeriod) && encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) && duplicatePolicy == that.duplicatePolicy\n&& Objects.equals(labels, that.labels);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "187", "src_id": "M907", "code": "\n    @Override\n    public int hashCode() {\n    int result = Boolean.hashCode(latest);\n    result = 31* result+ Boolean.hashCode(withLabels);\n    result = 31* result+ Arrays.hashCode(selectedLabels);\n    return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "188", "src_id": "M1177", "code": "\n    public static void closeQuietly(AutoCloseable resource) {\n    // It's same thing as Apache Commons - IOUtils.closeQuietly()\n        if (resource != null) {\n        try {\n            resource.close();\n        }\n            catch(Exception e) {\n        // ignored}\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "66", "src_id": "M1010", "code": "\n    public final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "189", "src_id": "M620", "code": "\n    @Override\n    public Set<String> sinter(final String ... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sinter(keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "20", "src_id": "M245", "code": "\n    public GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n    this.byBox = true;\n    this.width = width;\n    this.height = height;\n    this.unit = unit;\n    return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "190", "src_id": "M50", "code": "\n    @Override\n    @SuppressWarnings(\"unchecked\")\n    public Map<byte[], byte[]> build(Object data) {\n        final List<Object> list = (List<Object>) data;\n        if (list.isEmpty()) return Collections.emptyMap();\n        if (list.get(0) instanceof KeyValue) {\n        final Map<byte[], byte[]> map = new JedisByteHashMap();\n        final Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            KeyValue kv = (KeyValue) iterator.next();\n            map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));\n        }\n        return map;\n        } else {\n          final Map<byte[], byte[]> map = new JedisByteHashMap();\n          final Iterator iterator = list.iterator();\n          while (iterator.hasNext()) {\n            map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n          }\n          return map;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "191", "src_id": "M933", "code": "\n    @Deprecated\n    public static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n    Builder builder = builder();\n    builder.protocol(copy.getRedisProtocol());\n    builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n    builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n    builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n    Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n    if (credentialsProvider != null) {\n        builder.credentialsProvider(credentialsProvider);\n    } else {\n        builder.user(copy.getUser());\n        builder.password(copy.getPassword());\n    }\n    builder.database(copy.getDatabase());\n    builder.clientName(copy.getClientName());\n    builder.ssl(copy.isSsl());\n    builder.sslSocketFactory(copy.getSslSocketFactory());\n    builder.sslParameters(copy.getSslParameters());\n    builder.hostnameVerifier(copy.getHostnameVerifier());\n    builder.sslOptions(copy.getSslOptions());\n    builder.hostAndPortMapper(copy.getHostAndPortMapper());\n    builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n    if (copy.isReadOnlyForRedisClusterReplicas()) {\n        builder.readOnlyForRedisClusterReplicas();\n    }\n    builder.authXManager(copy.getAuthXManager());\n    return builder.build();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "67", "src_id": "M1009", "code": "\n    public final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "192", "src_id": "M1146", "code": "\n    private <T> T doExecuteCommand(CommandObject<T> commandObject,\n        boolean toReplica) {\n    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n    JedisRedirectionException redirect = null;\n    int consecutiveConnectionFailures = 0;\n    Exception lastException = null;\n    for(int attemptsLeft = this.maxAttempts;\nattemptsLeft> 0;\nattemptsLeft--) {\n        Connection connection = null;\n        try {\n            if (redirect != null) {\n                connection= provider.getConnection(redirect.getTargetNode());\n                if (redirect instanceof JedisAskDataException) {\n            // TODO: Pipeline asking with the original command to make it faster....\n                connection.executeCommand(Protocol.Command.ASKING);\n                }\n            } else {\n            connection= toReplica? provider.getReplicaConnection(commandObject.getArguments()) : provider.getConnection(commandObject.getArguments());\n            }\n            return execute(connection, commandObject);\n        }\n            catch(JedisClusterOperationException jnrcne) {\n                    throw jnrcne;\n        }\n            catch(JedisConnectionException jce) {\n                    lastException= jce;\n                    ++consecutiveConnectionFailures;\n                    log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n        // \"- 1\" because we just did one, but the attemptsLeft counter hasn't been decremented yet\n\n                    boolean reset = handleConnectionProblem(attemptsLeft-1, consecutiveConnectionFailures, deadline);\n                    if (reset) {\n            consecutiveConnectionFailures= 0;\n            redirect= null;\n                    }\n        }\n            catch(JedisRedirectionException jre) {\n        // avoid updating lastException if it is a connection exception\n                    if (lastException == null||lastException instanceof JedisRedirectionException) {\n            lastException= jre;\n                    }\n                    log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n                    consecutiveConnectionFailures= 0;\n                    redirect= jre;\n        // if MOVED redirection occurred,\n                    if (jre instanceof JedisMovedDataException) {\n          // it rebuilds cluster's slot cache recommended by Redis cluster specification\n            provider.renewSlotCache(connection);\n                    }\n        }\nfinally {\n            IOUtils.closeQuietly(connection);\n        }\n        if (Instant.now().isAfter(deadline)) {\n        throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n        }\n    }\n    JedisClusterOperationException maxAttemptsException = new JedisClusterOperationException(\"No more cluster attempts left.\");\n    maxAttemptsException.addSuppressed(lastException);\n    throw maxAttemptsException;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "21", "src_id": "M732", "code": "\n    @Override\n    public List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n    checkIsInMultiOrPipeline();\n    CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n    connection.sendCommand(args);\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "193", "src_id": "M884", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (filters == null) {\n        throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n        }\n        if (fromTimestamp == null) {\n            args.add(MINUS);\n        } else {\n        args.add(toByteArray(fromTimestamp));\n        }\n        if (toTimestamp == null) {\n            args.add(PLUS);\n        } else {\n        args.add(toByteArray(toTimestamp));\n        }\n        if (latest) {\n        args.add(LATEST);\n        }\n        if (filterByTimestamps != null) {\n        args.add(FILTER_BY_TS);\n        for (long ts : filterByTimestamps) {\n                                            args.add(toByteArray(ts));\n        }\n        }\n        if (filterByValues != null) {\n        args.add(FILTER_BY_VALUE);\n        for (double value : filterByValues) {\n                                        args.add(toByteArray(value));\n        }\n        }\n        if (withLabels) {\n            args.add(WITHLABELS);\n        } else\nif (selectedLabels != null) {\n                                                     args.add(SELECTED_LABELS);\n                                                     for (String label : selectedLabels) {\n                                args.add(label);\n                                                     }\n}\n        if (count != null) {\n        args.add(COUNT).add(toByteArray(count));\n        }\n        if (aggregationType != null) {\n        if (align != null) {\n            args.add(ALIGN).add(align);\n        }\n        args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n        if (bucketTimestamp != null) {\n            args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n        }\n        if (empty) {\n            args.add(EMPTY);\n        }\n        }\n        args.add(FILTER);\n        for (String filter : filters) {\n        args.add(filter);\n        }\n        if (groupByLabel != null&&groupByReduce != null) {\n        args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "194", "src_id": "M502", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xread(XReadParams xReadParams,\n        Entry<byte[], byte[]>... streams) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "68", "src_id": "M152", "code": "\n    @Deprecated\n    @Override\n    public List<Object> xreadGroup(byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]> ... streams) {\n    return executeCommand(commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "69", "src_id": "M1291", "code": "\n    private static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n       if (! inclusive) {\n\n        sb.append(\"(\");\n       }\n       if(n == Double.NEGATIVE_INFINITY) {\n\n        sb.append(\"-inf\");\n       } else if(n == Double.POSITIVE_INFINITY) {\n\nsb.append(\"inf\");\n              } else {\n\nsb.append(n);\n              }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "70", "src_id": "M1292", "code": "\n    @Override\n    public String toString() {\n\n       StringBuilder sb = new StringBuilder();\n       sb.append('[');\n       appendFrom(sb, inclusiveMin);\n       sb.append(' ');\n       appendTo(sb, inclusiveMax);\n       sb.append(']');\n\n       return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "195", "src_id": "M416", "code": "\n    @Override\n    public List<byte[]> aclLogBinary() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(ACL, LOG);\n    return connection.getBinaryMultiBulkReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "71", "src_id": "M1290", "code": "\n    @Override\n    public String toString(Parenthesize parenMode) {\n\n       StringBuilder sb = new StringBuilder();\n       StringJoiner sj = new StringJoiner(\n           getJoinString());\n       if (shouldParenthesize(parenMode)) {\n\n        sb.append('(');\n       }\n       for (Node n : children) {\n\n        sj.add(n.toString(parenMode));\n       }\n\n       sb.append(sj.toString());\n       if (shouldParenthesize(parenMode)) {\n\n        sb.append(')');\n       }\n       return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "22", "src_id": "M712", "code": "\n    @Override\n    public LCSMatchResult lcs(final String keyA, final String keyB, final LCSParams params) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "jedis", "pair_id": "196", "src_id": "M390", "code": "\n    @Override\n    public Long objectFreq(final byte[] key) {\n    connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n    return connection.getIntegerReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "197", "src_id": "M231", "code": "\n    public GeoRadiusStoreParam storeDist(String key) {\n        if (key != null) {\n        this.storeDist= true;\n        this.key= key;\n        }\n        return this;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "198", "src_id": "M777", "code": "\n    @Override\n    public List < Map< String, Object>> clusterLinks() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(CLUSTER,ClusterKeyword.LINKS);\n    return connection.getObjectMultiBulkReply().stream().map(BuilderFactory.ENCODED_OBJECT_MAP::build).collect(Collectors.toList());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "199", "src_id": "M779", "code": "\n    @Override\n    public String clusterDelSlotsRange(int... ranges) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(CLUSTER,joinParameters(ClusterKeyword.DELSLOTSRANGE.getRaw(),joinParameters(ranges)));\n    return connection.getStatusCodeReply();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "200", "src_id": "M818", "code": "\n    @Override\n    public Map< String, Object> memoryStats() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(MEMORY,STATS);\n    return BuilderFactory.ENCODED_OBJECT_MAP.build(connection.getOne());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "23", "src_id": "M551", "code": "\n    @Override\n    public long pexpire(final String key, final long milliseconds, final ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "24", "src_id": "M844", "code": "\n    @Override\n    public List<Object> functionListBinary() {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.functionListBinary());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "jedis", "pair_id": "25", "src_id": "M298", "code": "\n    @Override\n    public long sintercard(int limit, byte[] ... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sintercard(limit, keys));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "46", "src_id": "M79", "code": "\n    private static Stream<?> getValuesStream(Object value) {\n        final Stream<?> valuesStream;\n        if (value instanceof Collection) {\n            final Collection<?> collection = (Collection <?>)\n                                                 value;\n            valuesStream = collection.stream();\n        }\n        else {\n            final Object [] array = (Object [])\n                                        value;\n            valuesStream = Arrays.stream(array);\n        }\n        return valuesStream;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "30", "src_id": "M485", "code": "\n    private static Pattern createPatternFromLine(String line) {\n        final Pattern result;\n        if (line.isEmpty()) {\n            result = BLANK_LINE;\n        }\n        else {\n            result = Pattern.compile(validateRegex(line));\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "128", "src_id": "M347", "code": "\n    @Override\n    public void visitToken(DetailAST ast) {\n        switch(ast.getType()) {\n            case TokenTypes.IDENT:\n            if (collect) {\n                processIdent(ast);\n            }\n            break;\n                              case TokenTypes.IMPORT:\n            processImport(ast);\n            break;\n                              case TokenTypes.STATIC_IMPORT:\n            processStaticImport(ast);\n            break;\n                              case TokenTypes.OBJBLOCK:case TokenTypes.SLIST:\n            currentFrame = currentFrame.push();\n            break;\n                              default:\n            collect = true;\n            if (processJavadoc) {\n                collectReferencesFromJavadoc(ast);\n            }\n            break;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "103", "src_id": "M8", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type, Object value) {\n        return CommonUtil.createPattern(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "165", "src_id": "M697", "code": "\n    @Nullable private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch, DetailAST bound, int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "86", "src_id": "M37", "code": "\n    private ModuleType getModuleType() {\n        final String simpleModuleName = getModuleSimpleName();\n        final ModuleType result;\n\n        if (simpleModuleName.endsWith(\"FileFilter\")) {\n            result = ModuleType.FILEFILTER;\n        }\n        else if (simpleModuleName.endsWith(\"Filter\")) {\n                 result = ModuleType.FILTER;\n             }\n             else {\n                 result = ModuleType.CHECK;\n             }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "71", "src_id": "M284", "code": "\n    private static boolean isSuppressedBeforeEventEnd(\nint line, int column,\n    Entry entry) {\n        return entry.getLastLine() > line\n               || entry.getLastLine() == line && entry.getLastColumn() >= column;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "182", "src_id": "M697", "code": "\n    @Nullable private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch, DetailAST bound,\n                                                                     int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "1", "src_id": "M284", "code": "\n    private static boolean isSuppressedBeforeEventEnd(int line, int column, Entry entry) {\n        return entry.getLastLine()> line\n            || entry.getLastLine() == line\n            && entry.getLastColumn()>= column;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "47", "src_id": "M103", "code": "\n    @Override\n    public void body() {\n        write(\"<?xml version=\\\"1.0\\\" encoding=\\\"\"+ encoding+ \"\\\"?>\");\n        writeEOL();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "149", "src_id": "M347", "code": "\n    @Override\n    public void visitToken(DetailAST ast) {\n        switch(ast.getType()) {\n                              case TokenTypes.IDENT :\n                              if (collect) {\n                                  processIdent(ast);\n                              }\n                              break;\n                              case TokenTypes.IMPORT :\n            processImport(ast);\n            break;\n                              case TokenTypes.STATIC_IMPORT :\n            processStaticImport(ast);\n            break;\n                              case TokenTypes.OBJBLOCK : case TokenTypes.SLIST :\n            currentFrame = currentFrame.push();\n            break;\n                              default:\n            collect = true;\n            if (processJavadoc) {\n                collectReferencesFromJavadoc(ast);\n            }\n            break;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "31", "src_id": "M478", "code": "\n    public String getConfiguredHeaderPaths() {\n        return headerFilesMetadata.stream()\n            .map(HeaderFileMetadata::getHeaderFilePath)\n            .collect(Collectors.joining(\", \"));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "129", "src_id": "M394", "code": "\n    @Override\n    public int [] getRequiredJavadocTokens() {\n        return new\n                   int [] {\n                   JavadocTokenTypes.TEXT, };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "104", "src_id": "M10", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type, Object value) {\n        return SeverityLevel.getInstance(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "166", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token, DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for (DetailAST astNode = previousSibling; astNode != null; astNode = astNode.getLastChild()) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "48", "src_id": "M72", "code": "\n    private static DetailNode getSinceJavadocTag(DetailNode javadoc) {\n        final DetailNode [] children = javadoc.getChildren();\n        DetailNode javadocTagWithSince = null;\n        for(final DetailNode child :children) {\n            if (child.getType() == JavadocTokenTypes.JAVADOC_TAG) {\n                final DetailNode sinceNode = JavadocUtil.findFirstToken(child, JavadocTokenTypes.SINCE_LITERAL);\n                if (sinceNode != null) {\n                    javadocTagWithSince = child;\n                    break;\n                }\n            }\n        }\n        return javadocTagWithSince;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "72", "src_id": "M294", "code": "\n    private static boolean canBeSubclassed(DetailAST classDef) {\n        final DetailAST modifiers = classDef.findFirstToken(TokenTypes.MODIFIERS);\n\n        return classDef.getType() != TokenTypes.ENUM_DEF && modifiers.findFirstToken(TokenTypes.FINAL) == null && hasDefaultOrExplicitNonPrivateCtor(classDef);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "183", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token, DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for (DetailAST astNode = previousSibling; astNode != null; astNode = astNode.getLastChild()) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "87", "src_id": "M28", "code": "\n    private void scrapeContent(DetailNode ast) {\n\n        if (ast.getType() == JavadocTokenTypes.PARAGRAPH) {\n\n            if (isParentText(ast)) {\n                parentSectionStartIdx = getParentIndexOf(ast);\n                moduleDetails.setParent(\n                    getParentText(ast));\n            }\n            else if (isViolationMessagesText(ast)) {\n                     scrapingViolationMessageList = true;\n                 }\n                 else if (exampleSectionStartIdx == - 1 && isExamplesText(ast)) {\n                          exampleSectionStartIdx = getParentIndexOf(ast);\n                      }\n        }\n        else if (ast.getType() == JavadocTokenTypes.LI) {\n\n                 if (isPropertyList(ast)) {\n\n                     if (propertySectionStartIdx == - 1) {\n                         propertySectionStartIdx = getParentIndexOf(ast);\n                     }\n\n                     moduleDetails.addToProperties(\n                         createProperties(ast));\n                 }\n                 else if (scrapingViolationMessageList) {\n                          moduleDetails.addToViolationMessages(\n                              getViolationMessages(ast));\n                      }\n             }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "2", "src_id": "M294", "code": "\n    private static boolean canBeSubclassed(DetailAST classDef) {\n        final DetailAST modifiers = classDef.findFirstToken(TokenTypes.MODIFIERS);\n        return classDef.getType() != TokenTypes.ENUM_DEF\n        && modifiers.findFirstToken(TokenTypes.FINAL) == null\n        && hasDefaultOrExplicitNonPrivateCtor(classDef);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "130", "src_id": "M571", "code": "\n    private static DetailAST getLeftNode(DetailAST node) {\n        DetailAST result;\n        if (node.getFirstChild() == null||isAssignToVariable(node)) {\n            result = node.getPreviousSibling();\n        }\n        else if (isInPatternDefinition(node)) {\n                 result = node.getFirstChild();\n             }\n             else {\n                 result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n             }\n        while(result.getLastChild() != null) {\n            result = result.getLastChild();\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "150", "src_id": "M394", "code": "\n    @Override\n    public int[] getRequiredJavadocTokens() {\n        return new int[] {\n                   JavadocTokenTypes.TEXT, };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "32", "src_id": "M597", "code": "\n    private void checkTypeDefinition(DetailAST ast) {\n\n        if (!ScopeUtil.isOuterMostType(ast) && isSemicolon(ast.getNextSibling())) {\n            log(ast.getNextSibling(), MSG_SEMI);\n        }\n\n        final DetailAST firstMember = ast.findFirstToken(TokenTypes.OBJBLOCK).getFirstChild()\n                                                                             .getNextSibling();\n\n        if (isSemicolon(firstMember) && !ScopeUtil.isInEnumBlock(firstMember)) {\n            log(firstMember, MSG_SEMI);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "105", "src_id": "M1", "code": "\n    private static BeanUtilsBean createBeanUtilsBean() {\n        final ConvertUtilsBean cub = new ConvertUtilsBean();\n        registerIntegralTypes(cub);\n        registerCustomTypes(cub);\n        return new BeanUtilsBean(cub, new PropertyUtilsBean());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "49", "src_id": "M46", "code": "\n    private static String getLinkToParentModule(String parentModule,\n                                                String moduleName) throws MacroExecutionException {\n        final Path templatePath = SiteUtil.getTemplatePath(moduleName);\n        if (templatePath == null) {\n            throw new MacroExecutionException(String.format(Locale.ROOT, \"Could not find template for %s\", moduleName));\n        }\n        final Path templatePathParent = templatePath.getParent();\n        if (templatePathParent == null) {\n            throw new MacroExecutionException(\"Failed to get parent path for \" + templatePath);\n        }\n        return templatePathParent.relativize(Path.of(\"src\", \"site/xdoc\", \"config.xml\"))\n            .toString()\n            .replace(\".xml\", \".html\")\n            .replace('\\\\', '/') + \"#\"+ parentModule;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "167", "src_id": "M695", "code": "\n    private static List<DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List<DetailAST> reassignedVariableIdents = new ArrayList<>();\n        for (DetailAST expressionBranch = branchLeadingToReassignedVar; expressionBranch != null; expressionBranch = traverseUntilNeededBranchType(expressionBranch,\n                                                                                                      branchLeadingToReassignedVar,\n                                                                                                      TokenTypes.EXPR)) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken));\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "73", "src_id": "M714", "code": "\n    private static Set<DetailAST> getAllTokensOfType(DetailAST ast,\n        int tokenType) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n\n        while (vertex != null\n               || !stack.isEmpty()) {\n\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n\n            while (vertex != null) {\n\n                if (vertex.getType() == tokenType) {\n                    result.add(\n                        vertex);\n                }\n\n                if (vertex.getNextSibling() != null) {\n                    stack.push(\n                        vertex.getNextSibling());\n                }\n\n                vertex = vertex.getFirstChild();\n            }\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "131", "src_id": "M697", "code": "\n    @Nullable\n    private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch, DetailAST bound, int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "184", "src_id": "M695", "code": "\n    private static List<DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List<DetailAST> reassignedVariableIdents = new ArrayList<>();\n        for (DetailAST expressionBranch = branchLeadingToReassignedVar; expressionBranch != null; expressionBranch = traverseUntilNeededBranchType(expressionBranch,\n            branchLeadingToReassignedVar,\n            TokenTypes.EXPR)) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken));\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "88", "src_id": "M27", "code": "\n    @Override\n    public void beginJavadocTree(DetailNode rootAst) {\n\n        if (isTopLevelClassJavadoc()) {\n            moduleDetails = new ModuleDetails();\n            toScan = false;\n            scrapingViolationMessageList = false;\n            propertySectionStartIdx = - 1;\n            exampleSectionStartIdx = - 1;\n            parentSectionStartIdx = - 1;\n            String moduleName = getModuleSimpleName();\n            final String checkModuleExtension = \"Check\";\n\n            if (moduleName.endsWith(checkModuleExtension)) {\n                moduleName = moduleName.substring(\n                    0, moduleName.length() - checkModuleExtension.length());\n            }\n\n            moduleDetails.setName(\n                moduleName);\n            moduleDetails.setFullQualifiedName(\n                getPackageName(getFilePath()));\n            moduleDetails.setModuleType(\n                getModuleType());\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "3", "src_id": "M714", "code": "\n    private static Set<DetailAST> getAllTokensOfType(DetailAST ast, int tokenType) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n        while (vertex != null\n            || !stack.isEmpty()) {\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n            while (vertex != null) {\n                if (vertex.getType() == tokenType) {\n                    result.add(vertex);\n                }\n                if (vertex.getNextSibling() != null) {\n                    stack.push(vertex.getNextSibling());\n                }\n\n                vertex = vertex.getFirstChild();\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "168", "src_id": "M624", "code": "\n    private static boolean hasLiteralNull(DetailAST caseAST) {\n        return Optional.ofNullable(caseAST.findFirstToken(TokenTypes.EXPR)).map(exp -> exp.findFirstToken(TokenTypes.LITERAL_NULL))\n                                                                           .isPresent();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "50", "src_id": "M78", "code": "\n    private static String getStringArrayPropertyValue(String propertyName,\n                                                      Object value) {\n        String result;\n        if (value == null) {\n            result = \"\";\n        }\n        else {\n            try (Stream<?> valuesStream = getValuesStream(value)) {\n                result = valuesStream.map(String.class\n                    ::cast)\n                        .sorted()\n                        .collect(Collectors.joining(COMMA_SPACE));\n            }\n        }\n        if (result.isEmpty()) {\n            if (FILE_EXTENSIONS.equals(propertyName)) {\n                result = \"all files\";\n            }\n            else {\n                result = CURLY_BRACKETS;\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "106", "src_id": "M4", "code": "\n    @Override\n    public final void configure(Configuration config)throws CheckstyleException {\n        configuration = config;\n        final String[] attributes = config.getPropertyNames();\n        for (final String key : attributes) {\n            final String value = config.getProperty(key);\n            tryCopyProperty(key, value, true);\n        }\n        finishLocalSetup();\n        final Configuration[] childConfigs = config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "33", "src_id": "M655", "code": "\n    private void checkLambda(DetailAST ast,\n        DetailAST currentStatement) {\n        int countOfSemiInCurrentLambda = countOfSemiInLambda.pop();\n\n        countOfSemiInCurrentLambda++;\n        countOfSemiInLambda.push(\n            countOfSemiInCurrentLambda);\n\n        if (!inForHeader && countOfSemiInCurrentLambda > 1 && isOnTheSameLine(currentStatement, lastStatementEnd, forStatementEnd, lambdaStatementEnd)) {\n            log(ast, MSG_KEY);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "151", "src_id": "M571", "code": "\n    private static DetailAST getLeftNode(DetailAST node) {\n        DetailAST result;\n        if (node.getFirstChild() == null || isAssignToVariable(node)) {\n            result = node.getPreviousSibling();\n        }\n        else if (isInPatternDefinition(node)) {\n            result = node.getFirstChild();\n        }\n        else {\n            result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n        }\n        while (result.getLastChild() != null) {\n            result = result.getLastChild();\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "132", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token, DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for (DetailAST astNode = previousSibling; astNode != null;\n             astNode = astNode.getLastChild()) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "74", "src_id": "M504", "code": "\n    @Override\n    public int [] getAcceptableTokens() {\n        return new int [] {\n            TokenTypes.SINGLE_LINE_COMMENT, TokenTypes.BLOCK_COMMENT_BEGIN,};\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "185", "src_id": "M310", "code": "\n    @Override\n    public int[] getAcceptableTokens() {\n        return new int[] {\n            TokenTypes.CTOR_DEF,\n            TokenTypes.METHOD_DEF,\n            TokenTypes.EXPR,\n            TokenTypes.LAND,\n            TokenTypes.BAND,\n            TokenTypes.LOR,\n            TokenTypes.BOR,\n            TokenTypes.BXOR,\n            TokenTypes.COMPACT_CTOR_DEF,\n        };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "169", "src_id": "M253", "code": "\n    private void checkUnnamedVariables(DetailAST ast) {\n        if (jdkVersion >= JDK_22 && isUnnamedVariable(ast)) {\n            checkForRedundantModifier(ast, TokenTypes.FINAL);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "51", "src_id": "M114", "code": "\n    private static void createListItem(XdocSink sink, Class<?> clss,\n                                       String messageKey) {\n        final String messageKeyUrl = constructMessageKeyUrl(clss, messageKey);\n        final String indentLevel10 = SiteUtil.getNewlineAndIndentSpaces(10);\n        final String indentLevel12 = SiteUtil.getNewlineAndIndentSpaces(12);\n        final String indentLevel14 = SiteUtil.getNewlineAndIndentSpaces(14);\n        // Place the <li>.\n        sink.rawText(indentLevel10);\n        // This is a hack to prevent a newline from being inserted by the default sink.\n        // Once we get rid of the custom parser, we can remove this.\n        // until https://github.com/checkstyle/checkstyle/issues/13426\n        sink.setInsertNewline(false);\n        sink.listItem();\n        sink.setInsertNewline(true);\n\n        // Place an <a>.\n        sink.rawText(indentLevel12);\n        sink.link(messageKeyUrl);\n        // Further indent the text.\n        sink.rawText(indentLevel14);\n        sink.rawText(messageKey);\n\n        // Place closing </a> and </li> tags.\n        sink.rawText(indentLevel12);\n        sink.link_();\n        sink.rawText(indentLevel10);\n        sink.listItem_();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "89", "src_id": "M35", "code": "\n    private static Optional<DetailNode> getFirstChildOfMatchingText(DetailNode node,\n        Pattern pattern) {\n        return Arrays.stream(node.getChildren()).filter(child -> pattern.matcher(child.getText()).matches())\n                                                .findFirst();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "107", "src_id": "M196", "code": "\n    private static String getAnnotationFullIdent(DetailAST annotationNode) {\n        final DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);\n        final String annotationString;\n\n        // If no `IDENT` is found, then we have a `DOT` -> more than 1 qualifier\n        if (identNode == null) {\n            final DetailAST dotNode = annotationNode.findFirstToken(TokenTypes.DOT);\n            annotationString = FullIdent.createFullIdent(dotNode).getText();\n        }\n        else {\n            annotationString = identNode.getText();\n        }\n        return annotationString;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "4", "src_id": "M504", "code": "\n    @Override\n    public int[] getAcceptableTokens() {\n        return new int [] {TokenTypes.SINGLE_LINE_COMMENT, TokenTypes.BLOCK_COMMENT_BEGIN, };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "133", "src_id": "M695", "code": "\n    private static List<DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List<DetailAST> reassignedVariableIdents = new ArrayList<>();\n        for (DetailAST expressionBranch = branchLeadingToReassignedVar; expressionBranch != null;\n             expressionBranch = traverseUntilNeededBranchType(expressionBranch, branchLeadingToReassignedVar, TokenTypes.EXPR)) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken));\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "34", "src_id": "M587", "code": "\n    @Override\n    public void visitToken(DetailAST ast) {\n        final DetailAST enumBlock = ast.findFirstToken(TokenTypes.OBJBLOCK);\n        final DetailAST semicolon = enumBlock.findFirstToken(TokenTypes.SEMI);\n\n        if (semicolon != null && isEndOfEnumerationAfter(semicolon)) {\n            log(semicolon, MSG_SEMI);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "90", "src_id": "M37", "code": "\n    private ModuleType getModuleType() {\n        final String simpleModuleName = getModuleSimpleName();\n        final ModuleType result;\n        if(simpleModuleName.endsWith(\"FileFilter\") ) {\n            result = ModuleType.FILEFILTER;\n        }\nelse if(simpleModuleName.endsWith(\"Filter\") ) {\n         result = ModuleType.FILTER;\n     }\n     else {\n         result = ModuleType.CHECK;\n     }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "152", "src_id": "M310", "code": "\n    @Override\n    public int [] getAcceptableTokens() {\n        return new int [] {\n            TokenTypes.CTOR_DEF, TokenTypes.METHOD_DEF, TokenTypes.EXPR, TokenTypes.LAND, TokenTypes.BAND, TokenTypes.LOR, TokenTypes.BOR, TokenTypes.BXOR, TokenTypes.COMPACT_CTOR_DEF,};\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "75", "src_id": "M207", "code": "\n    public static String getFileExtension(String fileNameWithExtension) {\n        final String fileName = Paths.get(fileNameWithExtension).toString();\n        final int dotIndex = fileName.lastIndexOf('.');\n        final String extension;\n\n        if (dotIndex == - 1) {\n            extension = \"\";\n        }\n        else {\n            extension = fileName.substring(dotIndex\n                + 1);\n        }\n\n        return extension;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "52", "src_id": "M58", "code": "\n    private static Set<Field> getCheckMessageKeys(Class<?> module) throws MacroExecutionException {\n        try {\n            final Set<Field> checkstyleMessages = new HashSet<>();\n\n            // get all fields from current class\n            final Field [] fields = module.getDeclaredFields();\n            for(Field field :fields) {\n                if (field.getName()\n                    .startsWith(\"MSG_\")) {\n                    checkstyleMessages.add(field);\n                }\n            }\n\n            // deep scan class through hierarchy\n            final Class<?> superModule = module.getSuperclass();\n            if (superModule != null) {\n                checkstyleMessages.addAll(getCheckMessageKeys(superModule));\n            }\n\n            // special cases that require additional classes\n            if (module == RegexpMultilineCheck.class) {\n                checkstyleMessages.addAll(getCheckMessageKeys(Class.forName(\"com.puppycrawl.tools.checkstyle.checks.regexp.MultilineDetector\")));\n            }\n            else if (module == RegexpSinglelineCheck.class || module == RegexpSinglelineJavaCheck.class) {\n                     checkstyleMessages.addAll(getCheckMessageKeys(Class.forName(\"com.puppycrawl.tools.checkstyle.checks.regexp.SinglelineDetector\")));\n            }\n            return checkstyleMessages;\n        }\n            catch(ClassNotFoundException exc) {\n            final String message = String.format(Locale.ROOT, \"Couldn't find class: %s\", module.getName());\n            throw new MacroExecutionException(message, exc);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "170", "src_id": "M638", "code": "\n    @Override\n    public void leaveToken(DetailAST ast) {\n        if (ast.getType() == TokenTypes.LITERAL_CATCH) {\n            final Optional<CatchParameterDetails> unusedCatchParameter = Optional.ofNullable(catchParameters.peek()).filter(parameter -> !parameter.isUsed())\n                                                                                                                    .filter(parameter -> !\"_\"\n                                                                                                                        .equals(parameter.getName()));\n            unusedCatchParameter.ifPresent(parameter -> {\n                                               log(parameter.getParameterDefinition(),\n                                                       MSG_UNUSED_CATCH_PARAMETER,\n                                                       parameter.getName());\n                                           });\n            catchParameters.pop();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "91", "src_id": "M28", "code": "\n    private void scrapeContent(DetailNode ast) {\n        if(ast.getType() == JavadocTokenTypes.PARAGRAPH) {\n            if(isParentText(ast) ) {\n                parentSectionStartIdx = getParentIndexOf(ast);\n                moduleDetails.setParent(getParentText(ast) );\n            }\nelse if(isViolationMessagesText(ast) ) {\n         scrapingViolationMessageList = true;\n     }\n     else if(exampleSectionStartIdx == -\n                                           1&& isExamplesText(ast)) {\n              exampleSectionStartIdx = getParentIndexOf(ast);\n          }\n        }\nelse if(ast.getType() == JavadocTokenTypes.LI) {\n         if(isPropertyList(ast) ) {\n             if (propertySectionStartIdx == -\n                                                1) {\n                 propertySectionStartIdx = getParentIndexOf(ast);\n             }\n             moduleDetails.addToProperties(createProperties(ast) );\n         }\nelse if(scrapingViolationMessageList) {\n         moduleDetails.addToViolationMessages(getViolationMessages(ast) );\n     }\n     }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "186", "src_id": "M200", "code": "\n    public static boolean matchesFileExtension(File file, String... fileExtensions) {\n        boolean result = false;\n        if (fileExtensions == null\n|| fileExtensions.length == 0) {\n            result = true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions = new String [fileExtensions.length];\n            for (int i = 0; i < fileExtensions.length; i++) {\n                final String extension = fileExtensions[i];\n                if (extension.startsWith(EXTENSION_SEPARATOR)) {\n                    withDotExtensions[i] = extension;\n                }\n                else {\n                    withDotExtensions[i] = EXTENSION_SEPARATOR + extension;\n                }\n            }\n            final String fileName = file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "35", "src_id": "M202", "code": "\n    public static InputSource sourceFromFilename(String filename)\n           throws CheckstyleException {\n        // figure out if this is a File or a URL\n        final URI uri = getUriByFilename(filename);\n\n        return new InputSource(uri.toASCIIString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "134", "src_id": "M502", "code": "\n    private int expandedTabsColumnNo(DetailAST ast) {\n        final String line = indentCheck.getLine(ast.getLineNo() - 1);\n\n        return CommonUtil.lengthExpandedTabs(\n            line, ast.getColumnNo(), indentCheck.getIndentationTabWidth());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "5", "src_id": "M207", "code": "\n    public static String getFileExtension(String fileNameWithExtension) {\n        final String fileName = Paths.get(fileNameWithExtension).toString();\n        final int dotIndex = fileName.lastIndexOf('.');\n        final String extension;\n        if (dotIndex == -1) {\n            extension = \"\";\n        }\n        else {\n            extension = fileName.substring(dotIndex\n                + 1);\n        }\n        return extension;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "153", "src_id": "M200", "code": "\n    public static boolean matchesFileExtension(File file,\n        String... fileExtensions) {\n        boolean result = false;\n\n        if (fileExtensions == null\n            || fileExtensions.length == 0) {\n            result = true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String [] withDotExtensions = new String [ fileExtensions.length];\n\n            for (int i = 0;\n                 i<fileExtensions.length;\n                 i++) {\n                final String extension = fileExtensions[ i];\n\n                if (extension.startsWith(EXTENSION_SEPARATOR)) {\n                    withDotExtensions[ i] = extension;\n                }\n                else {\n                    withDotExtensions[ i] = EXTENSION_SEPARATOR\n                + extension;\n                }\n            }\n\n            final String fileName = file.getName();\n\n            for ( final String fileExtension : withDotExtensions) {\n\n                if (fileName.endsWith(fileExtension)) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "53", "src_id": "M68", "code": "\n    private static Set<String> getNonExplicitProperties(Object instance,\n                                                        Class<?> clss) {\n        final Set<String> result = new TreeSet<>();\n        if (AbstractCheck.class\n            .isAssignableFrom(clss)) {\n            final AbstractCheck check = (AbstractCheck)\n                                            instance;\n            final int[] acceptableTokens = check.getAcceptableTokens();\n            Arrays.sort(acceptableTokens);\n            final int[] defaultTokens = check.getDefaultTokens();\n            Arrays.sort(defaultTokens);\n            final int[] requiredTokens = check.getRequiredTokens();\n            Arrays.sort(requiredTokens);\n            if (!Arrays.equals(acceptableTokens, defaultTokens)|| !Arrays.equals(acceptableTokens, requiredTokens)) {\n                result.add(TOKENS);\n            }\n        }\n        if (AbstractJavadocCheck.class\n            .isAssignableFrom(clss)) {\n            final AbstractJavadocCheck check = (AbstractJavadocCheck)\n                                                   instance;\n            result.add(\"violateExecutionOnNonTightHtml\");\n            final int[] acceptableJavadocTokens = check.getAcceptableJavadocTokens();\n            Arrays.sort(acceptableJavadocTokens);\n            final int[] defaultJavadocTokens = check.getDefaultJavadocTokens();\n            Arrays.sort(defaultJavadocTokens);\n            final int[] requiredJavadocTokens = check.getRequiredJavadocTokens();\n            Arrays.sort(requiredJavadocTokens);\n            if (!Arrays.equals(acceptableJavadocTokens, defaultJavadocTokens)|| !Arrays.equals(acceptableJavadocTokens, requiredJavadocTokens)) {\n                result.add(JAVADOC_TOKENS);\n            }\n        }\n        if (AbstractFileSetCheck.class\n            .isAssignableFrom(clss)) {\n            result.add(FILE_EXTENSIONS);\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "171", "src_id": "M626", "code": "\n    private static boolean hasStringCaseLabel(DetailAST caseAST) {\n        DetailAST curNode = caseAST;\n        boolean hasStringCaseLabel = false;\n        boolean exitCaseLabelExpression = false;\n        while(!exitCaseLabelExpression) {\n            DetailAST toVisit = curNode.getFirstChild();\n            if (curNode.getType() == TokenTypes.STRING_LITERAL) {\n                hasStringCaseLabel = true;\n                break;\n            }\n            while(toVisit == null) {\n                toVisit = curNode.getNextSibling();\n                curNode = curNode.getParent();\n            }\n            curNode = toVisit;\n            exitCaseLabelExpression = TokenUtil.isOfType(curNode, TokenTypes.COLON, TokenTypes.LAMBDA);\n        }\n        return hasStringCaseLabel;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "76", "src_id": "M716", "code": "\n    private static Set<DetailAST> getAllTokensWhichAreEqualToCurrent(\nDetailAST ast, DetailAST token,\n    int endLineNumber) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n\n        while (vertex != null\n               || !stack.isEmpty()) {\n\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n\n            while (vertex != null) {\n\n                if (isAstSimilar(token, vertex) && vertex.getLineNo() <= endLineNumber) {\n                    result.add(\n                        vertex);\n                }\n\n                if (vertex.getNextSibling() != null) {\n                    stack.push(\n                        vertex.getNextSibling());\n                }\n\n                vertex = vertex.getFirstChild();\n            }\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "93", "src_id": "M35", "code": "\n    private static Optional <DetailNode> getFirstChildOfMatchingText(DetailNode node, Pattern pattern) {\n        return Arrays.stream(node.getChildren()) .filter(child->pattern.matcher(child.getText()) .matches() ) .findFirst();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "187", "src_id": "M201", "code": "\n    public static int lengthMinusTrailingWhitespace(String line) {\n        int len = line.length();\n        for (int i = len - 1; i >= 0; i--) {\n            if (!Character.isWhitespace(line.charAt(i))) {\n                break;\n            }\n            len--;\n        }\n        return len;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "94", "src_id": "M485", "code": "\n    private static Pattern createPatternFromLine(String line) {\n        final Pattern result;\n        if(line.isEmpty() ) {\n            result = BLANK_LINE;\n        }\nelse {\n            result = Pattern.compile(validateRegex(line));\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "108", "src_id": "M697", "code": "\n    @Nullable\n    private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch, DetailAST bound,\n                                                           int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "36", "src_id": "M633", "code": "\n    @Override\n    public int [] getAcceptableTokens() {\n        return new int [] {\n            TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.ENUM_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.RECORD_DEF,};\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "135", "src_id": "M455", "code": "\n    @Override\n    public void init() {\n\n        if (fileNamePattern == null && folderPattern == null) {\n            fileNamePattern = CommonUtil.createPattern(\"\\\\s\");\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "172", "src_id": "M673", "code": "\n    private static boolean isLambdaParameterIdentifierCandidate(DetailAST identifierAst) {\n        // we should ignore the ident if it is in the lambda parameters declaration\n        final boolean isLambdaParameterDeclaration = identifierAst.getParent().getType() == TokenTypes.LAMBDA||identifierAst.getParent().getType() == TokenTypes.PARAMETER_DEF;\n        return !isLambdaParameterDeclaration && (hasValidParentToken(identifierAst)||isMethodInvocation(identifierAst)\n);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "54", "src_id": "M65", "code": "\n    private static void processModule(String moduleName,\n                                      Path modulePath) throws MacroExecutionException {\n        if (!Files.isRegularFile(modulePath)) {\n            final String message = String.format(Locale.ROOT, \"File %s is not a file. Please check the 'modulePath' property.\", modulePath);\n            throw new MacroExecutionException(message);\n        }\n        ClassAndPropertiesSettersJavadocScraper.initialize(moduleName);\n        final Checker checker = new Checker();\n        checker.setModuleClassLoader(Checker.class\n            .getClassLoader());\n        final DefaultConfiguration scraperCheckConfig = new DefaultConfiguration(ClassAndPropertiesSettersJavadocScraper.class\n            .getName());\n        final DefaultConfiguration defaultConfiguration = new DefaultConfiguration(\"configuration\");\n        final DefaultConfiguration treeWalkerConfig = new DefaultConfiguration(TreeWalker.class\n            .getName());\n        defaultConfiguration.addProperty(CHARSET, StandardCharsets.UTF_8.name());\n        defaultConfiguration.addChild(treeWalkerConfig);\n        treeWalkerConfig.addChild(scraperCheckConfig);\n        try {\n            checker.configure(defaultConfiguration);\n            final List<File> filesToProcess = List.of(modulePath.toFile());\n            checker.process(filesToProcess);\n            checker.destroy();\n        }\n            catch(CheckstyleException checkstyleException) {\n            final String message = String.format(Locale.ROOT, \"Failed processing %s\", moduleName);\n            throw new MacroExecutionException(message, checkstyleException);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "95", "src_id": "M478", "code": "\n    public String getConfiguredHeaderPaths() {\n        return headerFilesMetadata.stream() .map(HeaderFileMetadata::getHeaderFilePath) .collect(Collectors.joining(\", \") );\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "6", "src_id": "M716", "code": "\n    private static Set<DetailAST> getAllTokensWhichAreEqualToCurrent(DetailAST ast, DetailAST token, int endLineNumber) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n        while (vertex != null\n            || !stack.isEmpty()) {\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n            while (vertex != null) {\n                if (isAstSimilar(token, vertex)\n                        && vertex.getLineNo()<= endLineNumber) {\n                    result.add(vertex);\n                }\n                if (vertex.getNextSibling() != null) {\n                    stack.push(vertex.getNextSibling());\n                }\n\n                vertex = vertex.getFirstChild();\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "154", "src_id": "M201", "code": "\n    public static int lengthMinusTrailingWhitespace(String line) {\n        int len = line.length();\n\n        for (int i = len - 1;\n             i>= 0;\n             i--) {\n\n            if (!Character.isWhitespace(line.charAt(i))) {\n                break;\n            }\n\n            len--;\n        }\n\n        return len;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "77", "src_id": "M293", "code": "\n    private static DetailAST getNearestClassOrEnumDefinition(DetailAST ast) {\n        DetailAST searchAST = ast;\n\n        while (searchAST.getType() != TokenTypes.CLASS_DEF && searchAST.getType() != TokenTypes.ENUM_DEF) {\n            searchAST = searchAST.getParent();\n        }\n\n        return searchAST;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "188", "src_id": "M255", "code": "\n    private static boolean isAnnotatedWithSafeVarargs(DetailAST methodDef) {\n        boolean result = false;\n        final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);\n        for (DetailAST annotationNode : methodAnnotationsList) {\n            if (\"SafeVarargs\".equals(annotationNode.getLastChild().getText())) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "55", "src_id": "M110", "code": "\n    private static DetailAST getParentAst(DetailAST ast,\n                                          int type) {\n        DetailAST node = ast.getParent();\n        while (node != null && node.getType() != type) {\n            node = node.getParent();\n        }\n        return node;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "173", "src_id": "M251", "code": "\n    public void setJdkVersion(String jdkVersion) {\n        final String singleVersionNumber;\n        if (jdkVersion.startsWith(\"1.\")) {\n            singleVersionNumber = jdkVersion.substring(2);\n        }\n        else {\n            singleVersionNumber = jdkVersion;\n        }\n        this.jdkVersion = Integer.parseInt(singleVersionNumber);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "136", "src_id": "M456", "code": "\n    @Override protected void processFiltered(File file,\n        FileText fileText)\n              throws CheckstyleException {\n        final String fileName = getFileName(file);\n        final String folderPath = getFolderPath(file);\n\n        if (isMatchFolder(folderPath) && isMatchFile(fileName)) {\n            log();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "37", "src_id": "M285", "code": "\n    private static void addSuppressions(List<String> values,\n        DetailAST targetAST) {\n        // get text range of target\n        final int firstLine = targetAST.getLineNo();\n        final int firstColumn = targetAST.getColumnNo();\n        final DetailAST nextAST = targetAST.getNextSibling();\n        final int lastLine;\n        final int lastColumn;\n\n        if (nextAST == null) {\n            lastLine = Integer.MAX_VALUE;\n            lastColumn = Integer.MAX_VALUE;\n        }\n        else {\n            lastLine = nextAST.getLineNo();\n            lastColumn = nextAST.getColumnNo();\n        }\n\n        final List<Entry> entries = ENTRIES.get();\n\n        for (String value : values) {\n            // strip off the checkstyle-only prefix if present\n            final String checkName = removeCheckstylePrefixIfExists(value);\n\n            entries.add(\n                new Entry(\n                checkName, firstLine, firstColumn, lastLine, lastColumn));\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "56", "src_id": "M697", "code": "\n    @Nullable\n    private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch, DetailAST bound, int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "96", "src_id": "M601", "code": "\n    @Override\n    public void beginTree(DetailAST root) {\n        variables.clear();\n        typeDeclarations.clear();\n        typeDeclAstToTypeDeclDesc.clear();\n        anonInnerAstToTypeDeclDesc.clear();\n        anonInnerClassHolders.clear();\n        packageName = null;\n        depth = 0;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "155", "src_id": "M255", "code": "\n    private static boolean isAnnotatedWithSafeVarargs(DetailAST methodDef) {\n        boolean result = false;\n        final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);\n\n        for (DetailAST annotationNode : methodAnnotationsList) {\n\n            if (\"SafeVarargs\".equals(annotationNode.getLastChild().getText())) {\n                result = true;\n                break;\n            }\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "7", "src_id": "M293", "code": "\n    private static DetailAST getNearestClassOrEnumDefinition(DetailAST ast) {\n        DetailAST searchAST = ast;\n        while (searchAST.getType() != TokenTypes.CLASS_DEF\n                   && searchAST.getType() != TokenTypes.ENUM_DEF) {\n            searchAST = searchAST.getParent();\n        }\n        return searchAST;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "57", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token, DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for(DetailAST astNode = previousSibling;astNode != null;\n            astNode = astNode.getLastChild() ) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "78", "src_id": "M704", "code": "\n    private boolean isForwardReference(DetailAST fieldDef) {\n        final DetailAST exprStartIdent = fieldDef.findFirstToken(TokenTypes.IDENT);\n        final Set<DetailAST> exprIdents = getAllTokensOfType(exprStartIdent, TokenTypes.IDENT);\n        boolean forwardReference = false;\n\n        for (DetailAST ident : exprIdents) {\n\n            if (classFieldNames.contains(ident.getText())) {\n                forwardReference = true;\n                break;\n            }\n        }\n\n        return forwardReference;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "174", "src_id": "M675", "code": "\n    private static boolean isLeftHandOfAssignment(DetailAST identAst) {\n        final DetailAST parent = identAst.getParent();\n        return parent.getType() == TokenTypes.ASSIGN && !identAst.equals(parent.getLastChild());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "109", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token, DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for (DetailAST astNode = previousSibling; astNode != null; astNode = astNode.getLastChild()) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "189", "src_id": "M689", "code": "\n    @Override\n    public int[] getRequiredTokens() {\n        return new int[] {\n            TokenTypes.ASSIGN,            // '='\n            TokenTypes.DIV_ASSIGN,        // \"/=\"\n            TokenTypes.PLUS_ASSIGN,       // \"+=\"\n            TokenTypes.MINUS_ASSIGN,      // \"-=\"\n            TokenTypes.STAR_ASSIGN,       // \"*=\"\n            TokenTypes.MOD_ASSIGN,        // \"%=\"\n            TokenTypes.SR_ASSIGN,         // \">>=\"\n            TokenTypes.BSR_ASSIGN,        // \">>>=\"\n            TokenTypes.SL_ASSIGN,         // \"<<=\"\n            TokenTypes.BXOR_ASSIGN,       // \"^=\"\n            TokenTypes.BOR_ASSIGN,        // \"|=\"\n            TokenTypes.BAND_ASSIGN,       // \"&=\"\n        };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "58", "src_id": "M695", "code": "\n    private static List <DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List <DetailAST> reassignedVariableIdents = new ArrayList <>();\n        for(DetailAST expressionBranch = branchLeadingToReassignedVar;expressionBranch != null;\n            expressionBranch = traverseUntilNeededBranchType(expressionBranch, branchLeadingToReassignedVar, TokenTypes.EXPR) ) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken) );\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "38", "src_id": "M276", "code": "\n    @Override\n    public void visitToken(DetailAST ast) {\n\n        if (ast.getParent().getType() != TokenTypes.SWITCH_RULE) {\n            final int length = getLength(ast);\n\n            if (length > max) {\n                log(ast, MSG_KEY, length, max);\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "137", "src_id": "M165", "code": "\n    private AxisIterator getPrecedingSiblingsIterator() {\n        final AxisIterator result;\n\n        if (indexAmongSiblings == 0) {\n            result = EmptyIterator.ofNodes();\n        }\n        else {\n            result = new ReverseListIterator(getPrecedingSiblings());\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "156", "src_id": "M689", "code": "\n    @Override\n    public int [] getRequiredTokens() {\n        return new int [] {\n            TokenTypes.ASSIGN,            // '=' TokenTypes.DIV_ASSIGN,        // \"/=\" TokenTypes.PLUS_ASSIGN,       // \"+=\" TokenTypes.MINUS_ASSIGN,      // \"-=\" TokenTypes.STAR_ASSIGN,       // \"*=\" TokenTypes.MOD_ASSIGN,        // \"%=\" TokenTypes.SR_ASSIGN,         // \">>=\" TokenTypes.BSR_ASSIGN,        // \">>>=\" TokenTypes.SL_ASSIGN,         // \"<<=\" TokenTypes.BXOR_ASSIGN,       // \"^=\" TokenTypes.BOR_ASSIGN,        // \"|=\" TokenTypes.BAND_ASSIGN,       // \"&=\"};\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "97", "src_id": "M600", "code": "\n    @Override\n    public int[] getDefaultTokens() {\n        return new int [] {TokenTypes.DOT, TokenTypes.VARIABLE_DEF, TokenTypes.IDENT, TokenTypes.SLIST, TokenTypes.LITERAL_FOR, TokenTypes.OBJBLOCK, TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.PACKAGE_DEF, TokenTypes.LITERAL_NEW, TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF, TokenTypes.STATIC_INIT, TokenTypes.INSTANCE_INIT, TokenTypes.COMPILATION_UNIT, TokenTypes.LAMBDA, TokenTypes.ENUM_DEF, TokenTypes.RECORD_DEF, TokenTypes.COMPACT_CTOR_DEF, };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "59", "src_id": "M284", "code": "\n    private static boolean isSuppressedBeforeEventEnd(int line, int column,\n                                                      Entry entry) {\n        return entry.getLastLine()> line|| entry.getLastLine() == line && entry.getLastColumn()>= column;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "190", "src_id": "M310", "code": "\n    @Override\n    public int [] getAcceptableTokens() {\n        return new\n                   int [] {TokenTypes.CTOR_DEF, TokenTypes.METHOD_DEF, TokenTypes.EXPR, TokenTypes.LAND, TokenTypes.BAND, TokenTypes.LOR, TokenTypes.BOR, TokenTypes.BXOR, TokenTypes.COMPACT_CTOR_DEF, };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "175", "src_id": "M485", "code": "\n    private static Pattern createPatternFromLine(String line) {\n        final Pattern result;\n\n        if (line.isEmpty()) {\n            result = BLANK_LINE;\n        }\n        else {\n            result = Pattern.compile(validateRegex(line));\n        }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "8", "src_id": "M704", "code": "\n    private boolean isForwardReference(DetailAST fieldDef) {\n        final DetailAST exprStartIdent = fieldDef.findFirstToken(TokenTypes.IDENT);\n        final Set<DetailAST> exprIdents = getAllTokensOfType(exprStartIdent, TokenTypes.IDENT);\n        boolean forwardReference = false;\n        for (DetailAST ident : exprIdents) {\n            if (classFieldNames.contains(ident.getText())) {\n                forwardReference = true;\n                break;\n            }\n        }\n        return forwardReference;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "79", "src_id": "M485", "code": "\n    private static Pattern createPatternFromLine(String line) {\n        final Pattern result;\n\n        if (line.isEmpty()) {\n            result = BLANK_LINE;\n        }\n        else {\n            result = Pattern.compile(validateRegex(line));\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "39", "src_id": "M279", "code": "\n    private static int getFirstNodeLineNumber(DetailAST lambdaBody) {\n        DetailAST node = lambdaBody;\n        int result;\n\n        do {\n            result = node.getLineNo();\n            node = node.getFirstChild();\n        }\n\nwhile(node != null);\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "60", "src_id": "M294", "code": "\n    private static boolean canBeSubclassed(DetailAST classDef) {\n        final DetailAST modifiers = classDef.findFirstToken(TokenTypes.MODIFIERS);\n        return classDef.getType() != TokenTypes.ENUM_DEF && modifiers.findFirstToken(TokenTypes.FINAL) == null && hasDefaultOrExplicitNonPrivateCtor(classDef);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "138", "src_id": "M750", "code": "\n    private static String convertUpperCamelToUpperUnderscore(String text) {\n        final StringBuilder result = new StringBuilder(20);\n        boolean first = true;\n\n        for (char letter : text.toCharArray()) {\n\n            if (!first && Character.isUpperCase(letter)) {\n                result.append(\n                    '_');\n            }\n\n            result.append(\n                Character.toUpperCase(letter));\n            first = false;\n        }\n\n        return result.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "157", "src_id": "M347", "code": "\n    @Override\n    public void visitToken(DetailAST ast) {\n        switch (ast.getType()) {\n            case TokenTypes.IDENT:\n                if (collect) {\n                    processIdent(ast);\n                }\n                break;\n            case TokenTypes.IMPORT:\n                processImport(ast);\n                break;\n            case TokenTypes.STATIC_IMPORT:\n                processStaticImport(ast);\n                break;\n            case TokenTypes.OBJBLOCK:\n            case TokenTypes.SLIST:\n                currentFrame = currentFrame.push();\n                break;\n            default:\n                collect = true;\n                if (processJavadoc) {\n                    collectReferencesFromJavadoc(ast);\n                }\n                break;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "191", "src_id": "M200", "code": "\n    public static boolean matchesFileExtension(File file, String... fileExtensions) {\n        boolean result = false;\n        if (fileExtensions == null||fileExtensions.length == 0) {\n            result = true;\n        }\n        else {\n            // normalize extensions so all of them have a leading dot\n            final String[] withDotExtensions = new String[fileExtensions.length];\n            for (int i = 0; i < fileExtensions.length; i++) {\n                final String extension = fileExtensions[i];\n                if (extension.startsWith(EXTENSION_SEPARATOR)) {\n                    withDotExtensions[i] = extension;\n                }\n                else {\n                    withDotExtensions[i] = EXTENSION_SEPARATOR + extension;\n                }\n            }\n\n            final String fileName = file.getName();\n            for (final String fileExtension : withDotExtensions) {\n                if (fileName.endsWith(fileExtension)) {\n                    result = true;\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "98", "src_id": "M615", "code": "\n    private void iterateOverBlockContainingLocalAnonInnerClass(DetailAST ast, Deque<VariableDesc> variablesStack) {\n        DetailAST currNode = ast;\n        while (currNode != null) {\n            customVisitToken(currNode, variablesStack);\n            DetailAST toVisit = currNode.getFirstChild();\n            while (currNode != ast\n                       && toVisit == null) {\n                customLeaveToken(currNode, variablesStack);\n                toVisit = currNode.getNextSibling();\n                currNode = currNode.getParent();\n            }\n\n            currNode = toVisit;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "176", "src_id": "M478", "code": "\n    public String getConfiguredHeaderPaths() {\n        return headerFilesMetadata.stream()\n            .map(HeaderFileMetadata::getHeaderFilePath)\n            .collect(Collectors.joining(\", \"));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "110", "src_id": "M695", "code": "\n    private static List<DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List<DetailAST> reassignedVariableIdents = new ArrayList<>();\n        for (DetailAST expressionBranch = branchLeadingToReassignedVar; expressionBranch != null; expressionBranch = traverseUntilNeededBranchType(expressionBranch,\n            branchLeadingToReassignedVar,\n                TokenTypes.EXPR)) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken));\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "9", "src_id": "M855", "code": "\n    @Override\n    public DetailAstImpl visitThisExp(JavaLanguageParser.ThisExpContext ctx) {\n        final DetailAstImpl bop = create(ctx.bop);\n\n        bop.addChild(\n            visit(ctx.expr()));\n        bop.addChild(\n            create(ctx.LITERAL_THIS()));\n        return bop;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "40", "src_id": "M697", "code": "\n    @Nullable\n    private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch, DetailAST bound, int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "61", "src_id": "M714", "code": "\n    private static Set<DetailAST> getAllTokensOfType(DetailAST ast,\n                                                     int tokenType) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n        while (vertex != null|| !stack.isEmpty()) {\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n            while (vertex != null) {\n                if (vertex.getType() == tokenType) {\n                    result.add(vertex);\n                }\n                if (vertex.getNextSibling() != null) {\n                    stack.push(vertex.getNextSibling());\n                }\n                vertex = vertex.getFirstChild();\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "158", "src_id": "M394", "code": "\n    @Override\n    public int[] getRequiredJavadocTokens() {\n        return new int[] {\n            JavadocTokenTypes.TEXT\n,\n        };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "192", "src_id": "M201", "code": "\n    public static int lengthMinusTrailingWhitespace(String line) {\n        int len = line.length();\n        for (int i = len - 1; i >= 0; i--) {\n            if (!Character.isWhitespace(line.charAt(i))) {\n                break;\n            }\n            len--;\n        }\n        return len;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "139", "src_id": "M346", "code": "\n    @Override protected boolean matchesExactly(String pkg,\n        String fileName) {\n        final boolean result;\n\n        if (fileName == null) {\n            result = false;\n        }\n        else if (regex) {\n                 result = patternForExactMatch.matcher(fileName).matches();\n             }\n             else {\n                 result = name.equals(fileName);\n             }\n\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "80", "src_id": "M478", "code": "\n    public String getConfiguredHeaderPaths() {\n        return headerFilesMetadata.stream()\n            .map(HeaderFileMetadata::getHeaderFilePath)\n            .collect(Collectors.joining(\", \"));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "177", "src_id": "M8", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type, Object value) {\n        return CommonUtil.createPattern(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "62", "src_id": "M504", "code": "\n    @Override\n    public int[] getAcceptableTokens() {\n        return new int[] {TokenTypes.SINGLE_LINE_COMMENT, TokenTypes.BLOCK_COMMENT_BEGIN,\n        };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "111", "src_id": "M855", "code": "\n    @Override\n    public DetailAstImpl visitThisExp(JavaLanguageParser.ThisExpContext ctx) {\n        final DetailAstImpl bop = create(ctx.bop);\n        bop.addChild(visit(ctx.expr()));\n        bop.addChild(create(ctx.LITERAL_THIS()));\n        return bop;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "41", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token, DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for (DetailAST astNode = previousSibling;\n                astNode != null;\n                astNode = astNode.getLastChild()) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "99", "src_id": "M383", "code": "\n    private static void extractInlineTagContent(DetailNode node, StringBuilder customTagContent) {\n        final DetailNode [] children = node.getChildren();\n        if (children.length == 0) {\n            customTagContent.append(node.getText());\n        }\n        else {\n            for (DetailNode child : children) {\n                if (child.getType() != JavadocTokenTypes.LEADING_ASTERISK) {\n                    extractInlineTagContent(child, customTagContent);\n                }\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "10", "src_id": "M770", "code": "\n    @Override\n    public DetailAstImpl visitInterfaceExtends(JavaLanguageParser.InterfaceExtendsContext ctx) {\n        final DetailAstImpl interfaceExtends = create(ctx.EXTENDS_CLAUSE());\n\n        interfaceExtends.addChild(\n            visit(ctx.typeList()));\n        return interfaceExtends;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "193", "src_id": "M255", "code": "\n    private static boolean isAnnotatedWithSafeVarargs(DetailAST methodDef) {\n        boolean result = false;\n        final List<DetailAST> methodAnnotationsList = getMethodAnnotationsList(methodDef);\n        for (DetailAST annotationNode : methodAnnotationsList) {\n            if (\"SafeVarargs\"\n                .equals(annotationNode.getLastChild().getText())) {\n                result = true;\n                break;\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "159", "src_id": "M571", "code": "\n    private static DetailAST getLeftNode(DetailAST node) {\n        DetailAST result;\n        if (node.getFirstChild() == null || isAssignToVariable(node)) {\n            result = node.getPreviousSibling();\n        }\n        else if (isInPatternDefinition(node)) {\n                 result = node.getFirstChild();\n             }\n        else {\n                 result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n             }\n        while (result.getLastChild() != null) {\n            result = result.getLastChild();\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "178", "src_id": "M10", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type, Object value) {\n        return SeverityLevel.getInstance(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "81", "src_id": "M646", "code": "\n    private static List<DetailAST> getChildList(DetailAST ast) {\n        final List<DetailAST> children = new ArrayList<>();\n        DetailAST child = ast.findFirstToken(TokenTypes.OBJBLOCK).getFirstChild();\n        while(child != null) {\n            children.add(child);\n            child = child.getNextSibling();\n        }\n        return children;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "63", "src_id": "M207", "code": "\n    public static String getFileExtension(String fileNameWithExtension) {\n        final String fileName = Paths.get(fileNameWithExtension)\n            .toString();\n        final int dotIndex = fileName.lastIndexOf('.');\n        final String extension;\n        if (dotIndex == -1) {\n            extension = \"\";\n        }\n        else {\n            extension = fileName.substring(dotIndex + 1);\n        }\n        return extension;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "140", "src_id": "M706", "code": "\n    @Override\n    public void beginTree(DetailAST rootAST) {\n        frames = new HashMap<>();\n        current.clear();\n        final Deque<AbstractFrame> frameStack = new LinkedList<>();\n        DetailAST curNode = rootAST;\n\n        while (curNode != null) {\n            collectDeclarations(frameStack, curNode);\n            DetailAST toVisit = curNode.getFirstChild();\n\n            while (curNode != null && toVisit == null) {\n                endCollectingDeclarations(frameStack, curNode);\n                toVisit = curNode.getNextSibling();\n                curNode = curNode.getParent();\n            }\n\n            curNode = toVisit;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "42", "src_id": "M695", "code": "\n    private static List<DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List<DetailAST> reassignedVariableIdents = new ArrayList<>();\n        for (DetailAST expressionBranch = branchLeadingToReassignedVar;\n                expressionBranch != null;\n                expressionBranch = traverseUntilNeededBranchType(expressionBranch, branchLeadingToReassignedVar, TokenTypes.EXPR)) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken));\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "112", "src_id": "M770", "code": "\n    @Override\n    public DetailAstImpl visitInterfaceExtends(JavaLanguageParser.InterfaceExtendsContext ctx) {\n        final DetailAstImpl interfaceExtends = create(ctx.EXTENDS_CLAUSE());\n        interfaceExtends.addChild(visit(ctx.typeList()));\n        return interfaceExtends;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "194", "src_id": "M689", "code": "\n    @Override\n    public int [] getRequiredTokens() {\n        return new\n                   int [] {TokenTypes.ASSIGN,            // '=' TokenTypes.DIV_ASSIGN,        // \"/=\" TokenTypes.PLUS_ASSIGN,       // \"+=\" TokenTypes.MINUS_ASSIGN,      // \"-=\" TokenTypes.STAR_ASSIGN,       // \"*=\" TokenTypes.MOD_ASSIGN,        // \"%=\" TokenTypes.SR_ASSIGN,         // \">>=\" TokenTypes.BSR_ASSIGN,        // \">>>=\" TokenTypes.SL_ASSIGN,         // \"<<=\" TokenTypes.BXOR_ASSIGN,       // \"^=\" TokenTypes.BOR_ASSIGN,        // \"|=\" TokenTypes.BAND_ASSIGN,       // \"&=\" };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "179", "src_id": "M1", "code": "\n    private static BeanUtilsBean createBeanUtilsBean() {\n        final ConvertUtilsBean cub = new ConvertUtilsBean();\n        registerIntegralTypes(cub);\n        registerCustomTypes(cub);\n        return new BeanUtilsBean(cub, new PropertyUtilsBean());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "100", "src_id": "M593", "code": "\n    private void visitLambdaParameters(DetailAST ast) {\n        if (ast.getType() == TokenTypes.IDENT) {\n            parameterNames.add(ast.getText());\n        }\n        else {\n            visitParameters(ast);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "82", "src_id": "M373", "code": "\n    private void checkParagraphTag(DetailNode tag) {\n        if (!isNestedParagraph(tag)) {\n            final DetailNode newLine = getNearestEmptyLine(tag);\n            if (isFirstParagraph(tag)) {\n                log(tag.getLineNumber(),\n                        tag.getColumnNumber(),\n                        MSG_REDUNDANT_PARAGRAPH);\n            }\n            else if (newLine == null||tag.getLineNumber() - newLine.getLineNumber() != 1) {\n                     log(tag.getLineNumber(), tag.getColumnNumber(), MSG_LINE_BEFORE);\n                 }\n\n            final String blockTagName = findFollowedBlockTagName(tag);\n            if (blockTagName != null) {\n                log(tag.getLineNumber(),\n                        tag.getColumnNumber(),\n                        MSG_PRECEDED_BLOCK_TAG,\n                        blockTagName);\n            }\n            if (!allowNewlineParagraph && isImmediatelyFollowedByNewLine(tag)) {\n                log(tag.getLineNumber(), tag.getColumnNumber(), MSG_MISPLACED_TAG);\n            }\n            if (isImmediatelyFollowedByText(tag)) {\n                log(tag.getLineNumber(), tag.getColumnNumber(), MSG_MISPLACED_TAG);\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "64", "src_id": "M716", "code": "\n    private static Set<DetailAST> getAllTokensWhichAreEqualToCurrent(DetailAST ast, DetailAST token,\n                                                                     int endLineNumber) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n        while (vertex != null|| !stack.isEmpty()) {\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n            while (vertex != null) {\n                if (isAstSimilar(token, vertex) && vertex.getLineNo()<= endLineNumber) {\n                    result.add(vertex);\n                }\n                if (vertex.getNextSibling() != null) {\n                    stack.push(vertex.getNextSibling());\n                }\n                vertex = vertex.getFirstChild();\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "160", "src_id": "M8", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type, Object value) {\n        return CommonUtil.createPattern(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "11", "src_id": "M854", "code": "\n    @Override\n    public DetailAstImpl visitLambdaExp(JavaLanguageParser.LambdaExpContext ctx) {\n        final DetailAstImpl lambda = create(ctx.LAMBDA());\n\n        lambda.addChild(\n            visit(ctx.lambdaParameters()));\n        final JavaLanguageParser.BlockContext blockContext = ctx.block();\n        final DetailAstImpl rightHandLambdaChild;\n\n        if (blockContext != null) {\n            rightHandLambdaChild = visit(blockContext);\n        }\n        else {\n            // Lambda expression child is built the same way that we build\n            // the initial expression node in visitExpression, i.e. with\n            // an imaginary EXPR node. This results in nested EXPR nodes\n            // in the AST.\n            rightHandLambdaChild = buildExpressionNode(ctx.expr());\n        }\n\n        lambda.addChild(\n            rightHandLambdaChild);\n        return lambda;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "141", "src_id": "M308", "code": "\n    @Override\n    public void leaveToken(DetailAST ast) {\n        switch(ast.getType()) {\n                              case TokenTypes.CTOR_DEF: case TokenTypes.METHOD_DEF: case TokenTypes.INSTANCE_INIT: case TokenTypes.STATIC_INIT: case TokenTypes.COMPACT_CTOR_DEF:\n            leaveMethodDef(ast);\n            break;\n                              default:\n            break;\n               }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "180", "src_id": "M4", "code": "\n    @Override\n    public final void configure(Configuration config) throws CheckstyleException {\n        configuration = config;\n        final String[] attributes = config.getPropertyNames();\n        for (final String key : attributes) {\n            final String value = config.getProperty(key);\n            tryCopyProperty(key, value, true);\n        }\n        finishLocalSetup();\n        final Configuration[] childConfigs = config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "195", "src_id": "M8", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type,\n                          Object value) {\n        return CommonUtil.createPattern(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "113", "src_id": "M854", "code": "\n    @Override\n    public DetailAstImpl visitLambdaExp(JavaLanguageParser.LambdaExpContext ctx) {\n        final DetailAstImpl lambda = create(ctx.LAMBDA());\n        lambda.addChild(visit(ctx.lambdaParameters()));\n        final JavaLanguageParser.BlockContext blockContext = ctx.block();\n        final DetailAstImpl rightHandLambdaChild;\n        if (blockContext != null) {\n            rightHandLambdaChild = visit(blockContext);\n        }\n        else {\n            // Lambda expression child is built the same way that we build\n            // the initial expression node in visitExpression, i.e. with\n            // an imaginary EXPR node. This results in nested EXPR nodes\n            // in the AST.\n            rightHandLambdaChild = buildExpressionNode(ctx.expr());\n        }\n        lambda.addChild(rightHandLambdaChild);\n        return lambda;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "65", "src_id": "M293", "code": "\n    private static DetailAST getNearestClassOrEnumDefinition(DetailAST ast) {\n        DetailAST searchAST = ast;\n        while (searchAST.getType() != TokenTypes.CLASS_DEF && searchAST.getType() != TokenTypes.ENUM_DEF) {\n            searchAST = searchAST.getParent();\n        }\n        return searchAST;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "43", "src_id": "M347", "code": "\n    @Override\n    public void visitToken(DetailAST ast) {\n        switch(ast.getType()) {\n            case TokenTypes.IDENT:\n            if (collect) {\n                processIdent(ast);\n            }\n            break;\n                              case TokenTypes.IMPORT:\n            processImport(ast);\n            break;\n                              case TokenTypes.STATIC_IMPORT:\n            processStaticImport(ast);\n            break;\n                              case TokenTypes.OBJBLOCK: case TokenTypes.SLIST:\n            currentFrame = currentFrame.push();\n            break;\n                              default:\n            collect = true;\n            if (processJavadoc) {\n                collectReferencesFromJavadoc(ast);\n            }\n            break;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "83", "src_id": "M406", "code": "\n    @Override\n    public void finishJavadocTree(DetailNode rootAst) {\n        // this method checks the alignment of closing javadoc tag.\n        final DetailAST javadocEndToken = getBlockCommentAst().getLastChild();\n        final String lastLine = fileLines[javadocEndToken.getLineNo() - 1];\n        final Optional<Integer> endingBlockColumnNumber = getAsteriskColumnNumber(lastLine);\n        endingBlockColumnNumber.map(columnNumber -> expandedTabs(lastLine, columnNumber)).filter(columnNumber -> {\n                                                                                                     return !hasValidAlignment(expectedColumnNumberTabsExpanded, columnNumber);\n                                                                                                 }).ifPresent(columnNumber -> {\n                                                                                                                  logViolation(javadocEndToken.getLineNo(),\n                                                                                                                                   columnNumber,\n                                                                                                                                   expectedColumnNumberTabsExpanded);\n                                                                                                              });\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "161", "src_id": "M10", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type, Object value) {\n        return SeverityLevel.getInstance(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "101", "src_id": "M175", "code": "\n    @Override\n    public void auditFinished(AuditEvent event) {\n        errorWriter.flush();\n        if (closeErrorWriter) {\n            errorWriter.close();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "12", "src_id": "M779", "code": "\n    @Override\n    public DetailAstImpl visitInterfaceMethodDeclaration(JavaLanguageParser.InterfaceMethodDeclarationContext ctx) {\n        final DetailAstImpl methodDef = createImaginary(TokenTypes.METHOD_DEF);\n\n        methodDef.addChild(\n            createModifiers(ctx.mods));\n\n        // Process all children except C style array declarators and modifiers\n        final List<ParseTree> children = ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext))\n                                                              .collect(Collectors.toUnmodifiableList());\n\n        processChildren(methodDef, children);\n\n        // We add C style array declarator brackets to TYPE ast\n        final DetailAstImpl typeAst = (DetailAstImpl) methodDef.findFirstToken(TokenTypes.TYPE);\n\n        ctx.cStyleArrDec.forEach(\n            child -> typeAst.addChild(visit(child)));\n        return methodDef;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "142", "src_id": "M167", "code": "\n    private AttributeNode getAttributeNode() {\n\n        if (attributeNode == ATTRIBUTE_NODE_UNINITIALIZED) {\n            attributeNode = createAttributeNode();\n        }\n\n        return attributeNode;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "181", "src_id": "M196", "code": "\n    private static String getAnnotationFullIdent(DetailAST annotationNode) {\n        final DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);\n        final String annotationString;\n\n        // If no `IDENT` is found, then we have a `DOT` -> more than 1 qualifier\n        if (identNode == null) {\n            final DetailAST dotNode = annotationNode.findFirstToken(TokenTypes.DOT);\n            annotationString = FullIdent.createFullIdent(dotNode).getText();\n        }\n        else {\n            annotationString = identNode.getText();\n        }\n        return annotationString;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "66", "src_id": "M704", "code": "\n    private boolean isForwardReference(DetailAST fieldDef) {\n        final DetailAST exprStartIdent = fieldDef.findFirstToken(TokenTypes.IDENT);\n        final Set<DetailAST> exprIdents = getAllTokensOfType(exprStartIdent, TokenTypes.IDENT);\n        boolean forwardReference = false;\n        for(DetailAST ident :exprIdents) {\n            if (classFieldNames.contains(ident.getText())) {\n                forwardReference = true;\n                break;\n            }\n        }\n        return forwardReference;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "196", "src_id": "M10", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type,\n                          Object value) {\n        return SeverityLevel.getInstance(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "114", "src_id": "M779", "code": "\n    @Override\n    public DetailAstImpl visitInterfaceMethodDeclaration(JavaLanguageParser.InterfaceMethodDeclarationContext ctx) {\n        final DetailAstImpl methodDef = createImaginary(TokenTypes.METHOD_DEF);\n        methodDef.addChild(createModifiers(ctx.mods));\n\n        // Process all children except C style array declarators and modifiers\n        final List<ParseTree> children = ctx.children.stream().filter(child -> !(child instanceof JavaLanguageParser.ArrayDeclaratorContext))\n                                                              .collect(Collectors.toUnmodifiableList());\n        processChildren(methodDef, children);\n\n        // We add C style array declarator brackets to TYPE ast\n        final DetailAstImpl typeAst = (DetailAstImpl) methodDef.findFirstToken(TokenTypes.TYPE);\n        ctx.cStyleArrDec.forEach(child -> typeAst.addChild(visit(child)));\n        return methodDef;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "44", "src_id": "M394", "code": "\n    @Override\n    public int[] getRequiredJavadocTokens() {\n        return new int [] {\n                   JavadocTokenTypes.TEXT, };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "84", "src_id": "M485", "code": "\n    private static Pattern createPatternFromLine(String line) {\n        final Pattern result;\n        if (line.isEmpty()) {\n            result = BLANK_LINE;\n        }\n        else {\n            result = Pattern.compile(validateRegex(line));\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "162", "src_id": "M1", "code": "\n    private static BeanUtilsBean createBeanUtilsBean() {\n        final ConvertUtilsBean cub = new ConvertUtilsBean();\n        registerIntegralTypes(cub);\n        registerCustomTypes(cub);\n        return new BeanUtilsBean(cub, new PropertyUtilsBean());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "143", "src_id": "M398", "code": "\n    @Override\n    public int [] getDefaultTokens() {\n        return new int [] {\n                   TokenTypes.BLOCK_COMMENT_BEGIN,};\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "102", "src_id": "M603", "code": "\n    @Override\n    public void leaveToken(DetailAST ast) {\n        if (TokenUtil.isOfType(ast, SCOPES)) {\n            logViolations(ast, variables);\n        }\n        else if (ast.getType() == TokenTypes.COMPILATION_UNIT) {\n                 leaveCompilationUnit();\n             }\n        else if (isNonLocalTypeDeclaration(ast)) {\n                 depth--;\n                 typeDeclarations.pop();\n             }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "197", "src_id": "M1", "code": "\n    private static BeanUtilsBean createBeanUtilsBean() {\n        final ConvertUtilsBean cub = new ConvertUtilsBean();\n        registerIntegralTypes(cub);\n        registerCustomTypes(cub);\n        return new BeanUtilsBean(cub, new PropertyUtilsBean());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "13", "src_id": "M839", "code": "\n    @Override\n    public DetailAstImpl visitForFor(JavaLanguageParser.ForForContext ctx) {\n        final DetailAstImpl dummyRoot = new DetailAstImpl();\n\n        dummyRoot.addChild(\n            create(ctx.LPAREN()));\n\n        if (ctx.forInit() == null) {\n            final DetailAstImpl imaginaryForInitParent = createImaginary(TokenTypes.FOR_INIT);\n\n            dummyRoot.addChild(\n                imaginaryForInitParent);\n        }\n        else {\n            dummyRoot.addChild(\n                visit(ctx.forInit()));\n        }\n\n        dummyRoot.addChild(\n            create(ctx.SEMI(0)));\n        final DetailAstImpl forCondParent = createImaginary(TokenTypes.FOR_CONDITION);\n\n        forCondParent.addChild(\n            visit(ctx.forCond));\n        dummyRoot.addChild(\n            forCondParent);\n        dummyRoot.addChild(\n            create(ctx.SEMI(1)));\n        final DetailAstImpl forItParent = createImaginary(TokenTypes.FOR_ITERATOR);\n\n        forItParent.addChild(\n            visit(ctx.forUpdate));\n        dummyRoot.addChild(\n            forItParent);\n        dummyRoot.addChild(\n            create(ctx.RPAREN()));\n        return dummyRoot.getFirstChild();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "67", "src_id": "M37", "code": "\n    private ModuleType getModuleType() {\n        final String simpleModuleName = getModuleSimpleName();\n        final ModuleType result;\n        if (simpleModuleName.endsWith(\"FileFilter\")) {\n            result = ModuleType.FILEFILTER;\n        }\n        else if (simpleModuleName.endsWith(\"Filter\")) {\n                 result = ModuleType.FILTER;\n             }\n        else {\n                 result = ModuleType.CHECK;\n             }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "115", "src_id": "M839", "code": "\n    @Override\n    public DetailAstImpl visitForFor(JavaLanguageParser.ForForContext ctx) {\n        final DetailAstImpl dummyRoot = new DetailAstImpl();\n        dummyRoot.addChild(create(ctx.LPAREN()));\n        if (ctx.forInit() == null) {\n            final DetailAstImpl imaginaryForInitParent = createImaginary(TokenTypes.FOR_INIT);\n            dummyRoot.addChild(imaginaryForInitParent);\n        }\n        else {\n            dummyRoot.addChild(visit(ctx.forInit()));\n        }\n        dummyRoot.addChild(create(ctx.SEMI(0)));\n        final DetailAstImpl forCondParent = createImaginary(TokenTypes.FOR_CONDITION);\n        forCondParent.addChild(visit(ctx.forCond));\n        dummyRoot.addChild(forCondParent);\n        dummyRoot.addChild(create(ctx.SEMI(1)));\n        final DetailAstImpl forItParent = createImaginary(TokenTypes.FOR_ITERATOR);\n        forItParent.addChild(visit(ctx.forUpdate));\n        dummyRoot.addChild(forItParent);\n        dummyRoot.addChild(create(ctx.RPAREN()));\n        return dummyRoot.getFirstChild();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "144", "src_id": "M8", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type,\n                          Object value) {\n        return CommonUtil.createPattern(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "45", "src_id": "M571", "code": "\n    private static DetailAST getLeftNode(DetailAST node) {\n        DetailAST result;\n        if (node.getFirstChild() == null\n            || isAssignToVariable(node)) {\n            result = node.getPreviousSibling();\n        }\n        else if (isInPatternDefinition(node)) {\n                 result = node.getFirstChild();\n             }\n        else {\n                 result = adjustParens(node.getFirstChild(), DetailAST::getNextSibling);\n             }\n        while (result.getLastChild() != null) {\n            result = result.getLastChild();\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "163", "src_id": "M4", "code": "\n    @Override\n    public final void configure(Configuration config) throws CheckstyleException {\n        configuration = config;\n        final String[] attributes = config.getPropertyNames();\n        for (final String key : attributes) {\n            final String value = config.getProperty(key);\n            tryCopyProperty(key, value, true);\n        }\n        finishLocalSetup();\n        final Configuration[] childConfigs = config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "85", "src_id": "M478", "code": "\n    public String getConfiguredHeaderPaths() {\n        return headerFilesMetadata.stream().map(HeaderFileMetadata::getHeaderFilePath).collect(Collectors.joining(\", \"));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "198", "src_id": "M4", "code": "\n    @Override\n    public final void configure(Configuration config) throws CheckstyleException {\n        configuration = config;\n        final String[] attributes = config.getPropertyNames();\n        for (final String key : attributes) {\n            final String value = config.getProperty(key);\n            tryCopyProperty(key, value, true);\n        }\n        finishLocalSetup();\n        final Configuration[] childConfigs = config.getChildren();\n        for (final Configuration childConfig : childConfigs) {\n            setupChild(childConfig);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "145", "src_id": "M10", "code": "\n    @ SuppressWarnings(\"unchecked\") @Override\n    public Object convert(Class type,\n                          Object value) {\n        return SeverityLevel.getInstance(value.toString());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "116", "src_id": "M228", "code": "\n    private static Map.Entry<Integer, Integer> countLinesColumns(String text, int initialLinesCnt, int initialColumnsCnt) {\n        int lines = initialLinesCnt;\n        int columns = initialColumnsCnt;\n        boolean foundCr = false;\n        for (char c : text.toCharArray()) {\n            if (c == '\\n') {\n                foundCr = false;\n                lines++;\n                columns = 0;\n            }\n            else {\n                if (foundCr) {\n                    foundCr = false;\n                    lines++;\n                    columns = 0;\n                }\n                if (c == '\\r') {\n                    foundCr = true;\n                }\n                columns++;\n            }\n        }\n        if (foundCr) {\n            lines++;\n            columns = 0;\n        }\n        return new AbstractMap . SimpleEntry<>(lines, columns);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "14", "src_id": "M228", "code": "\n    private static Map.Entry<Integer, Integer> countLinesColumns(\nString text, int initialLinesCnt,\n    int initialColumnsCnt) {\n        int lines = initialLinesCnt;\n        int columns = initialColumnsCnt;\n        boolean foundCr = false;\n\n        for (char c : text.toCharArray()) {\n\n            if (c == '\\n') {\n                foundCr = false;\n                lines++;\n                columns = 0;\n            }\n            else {\n\n                if (foundCr) {\n                    foundCr = false;\n                    lines++;\n                    columns = 0;\n                }\n\n                if (c == '\\r') {\n                    foundCr = true;\n                }\n\n                columns++;\n            }\n        }\n\n        if (foundCr) {\n            lines++;\n            columns = 0;\n        }\n\n        return new AbstractMap.SimpleEntry<>(\n            lines, columns);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "68", "src_id": "M28", "code": "\n    private void scrapeContent(DetailNode ast) {\n        if (ast.getType() == JavadocTokenTypes.PARAGRAPH) {\n            if (isParentText(ast)) {\n                parentSectionStartIdx = getParentIndexOf(ast);\n                moduleDetails.setParent(getParentText(ast));\n            }\n            else if (isViolationMessagesText(ast)) {\n                     scrapingViolationMessageList = true;\n                 }\n            else if (exampleSectionStartIdx == -1\n                         && isExamplesText(ast)) {\n                     exampleSectionStartIdx = getParentIndexOf(ast);\n                 }\n        }\n        else if (ast.getType() == JavadocTokenTypes.LI) {\n                 if (isPropertyList(ast)) {\n                     if (propertySectionStartIdx == -1) {\n                         propertySectionStartIdx = getParentIndexOf(ast);\n                     }\n\n                     moduleDetails.addToProperties(createProperties(ast));\n                 }\n                 else if (scrapingViolationMessageList) {\n                          moduleDetails.addToViolationMessages(getViolationMessages(ast));\n                      }\n             }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "146", "src_id": "M1", "code": "\n    private static BeanUtilsBean createBeanUtilsBean() {\n        final ConvertUtilsBean cub = new ConvertUtilsBean();\n        registerIntegralTypes(cub);\n        registerCustomTypes(cub);\n        return new BeanUtilsBean(cub, new PropertyUtilsBean());\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "164", "src_id": "M196", "code": "\n    private static String getAnnotationFullIdent(DetailAST annotationNode) {\n        final DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);\n        final String annotationString;\n\n        // If no `IDENT` is found, then we have a `DOT` -> more than 1 qualifier\n        if (identNode == null) {\n            final DetailAST dotNode = annotationNode.findFirstToken(TokenTypes.DOT);\n            annotationString = FullIdent.createFullIdent(dotNode).getText();\n        }\n        else {\n            annotationString = identNode.getText();\n        }\n        return annotationString;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "199", "src_id": "M196", "code": "\n    private static String getAnnotationFullIdent(DetailAST annotationNode) {\n        final DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);\n        final String annotationString;\n\n        // If no `IDENT` is found, then we have a `DOT` -> more than 1 qualifier\n        if (identNode == null) {\n            final DetailAST dotNode = annotationNode.findFirstToken(TokenTypes.DOT);\n            annotationString = FullIdent.createFullIdent(dotNode).getText();\n        }\n        else {\n            annotationString = identNode.getText();\n        }\n        return annotationString;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "117", "src_id": "M212", "code": "\n    public static Properties getResolvedProperties(Properties properties)throws CheckstyleException {\n        final Set<String> unresolvedPropertyNames = new HashSet<>(properties.stringPropertyNames());\n        Iterator<String> unresolvedPropertyIterator = unresolvedPropertyNames.iterator();\n        final Map<Object, Object> comparisonProperties = new Properties();\n        while (unresolvedPropertyIterator.hasNext()) {\n            final String propertyName = unresolvedPropertyIterator.next();\n            String propertyValue = properties.getProperty(propertyName);\n            final Matcher matcher = PROPERTY_VARIABLE_PATTERN.matcher(propertyValue);\n            while (matcher.find()) {\n                final String propertyVariableExpression = matcher.group();\n                final String unresolvedPropertyName = getPropertyNameFromExpression(propertyVariableExpression);\n                final String resolvedPropertyValue = properties.getProperty(unresolvedPropertyName);\n                if (resolvedPropertyValue != null) {\n                    propertyValue = propertyValue.replace(propertyVariableExpression, resolvedPropertyValue);\n                    properties.setProperty(propertyName, propertyValue);\n                }\n            }\n            if (allChainedPropertiesAreResolved(propertyValue)) {\n                unresolvedPropertyIterator.remove();\n            }\n            if (!unresolvedPropertyIterator.hasNext()) {\n                if (comparisonProperties.equals(properties)) {\n                    // At this point, we will have not resolved any properties in two iterations,\n                    // so unresolvable properties exist.\n                    throw new CheckstyleException(UNDEFINED_PROPERTY_MESSAGE + unresolvedPropertyNames);\n                }\n                comparisonProperties.putAll(properties);\n                unresolvedPropertyIterator = unresolvedPropertyNames.iterator();\n            }\n        }\n        return properties;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "15", "src_id": "M212", "code": "\n    public static Properties getResolvedProperties(Properties properties)\n           throws CheckstyleException {\n        final Set<String> unresolvedPropertyNames = new HashSet<>(properties.stringPropertyNames());\n        Iterator<String> unresolvedPropertyIterator = unresolvedPropertyNames.iterator();\n        final Map<Object, Object> comparisonProperties = new Properties();\n\n        while (unresolvedPropertyIterator.hasNext()) {\n            final String propertyName = unresolvedPropertyIterator.next();\n            String propertyValue = properties.getProperty(propertyName);\n            final Matcher matcher = PROPERTY_VARIABLE_PATTERN.matcher(propertyValue);\n\n            while (matcher.find()) {\n                final String propertyVariableExpression = matcher.group();\n                final String unresolvedPropertyName = getPropertyNameFromExpression(propertyVariableExpression);\n                final String resolvedPropertyValue = properties.getProperty(unresolvedPropertyName);\n\n                if (resolvedPropertyValue != null) {\n                    propertyValue = propertyValue.replace(\n                        propertyVariableExpression, resolvedPropertyValue);\n                    properties.setProperty(\n                        propertyName, propertyValue);\n                }\n            }\n\n            if (allChainedPropertiesAreResolved(propertyValue)) {\n                unresolvedPropertyIterator.remove();\n            }\n\n            if (!unresolvedPropertyIterator.hasNext()) {\n\n                if (comparisonProperties.equals(properties)) {\n                    // At this point, we will have not resolved any properties in two iterations,\n                    // so unresolvable properties exist.\n                    throw new CheckstyleException(UNDEFINED_PROPERTY_MESSAGE\n                        + unresolvedPropertyNames);\n                }\n\n                comparisonProperties.putAll(\n                    properties);\n                unresolvedPropertyIterator = unresolvedPropertyNames.iterator();\n            }\n        }\n\n        return properties;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "147", "src_id": "M4", "code": "\n    @Override\n    public final void configure(Configuration config) throws CheckstyleException {\n        configuration = config;\n        final String [] attributes = config.getPropertyNames();\n        for(final String key :attributes) {\n            final String value = config.getProperty(key);\n            tryCopyProperty(key, value, true);\n        }\n        finishLocalSetup();\n        final Configuration [] childConfigs = config.getChildren();\n        for(final Configuration childConfig :childConfigs) {\n            setupChild(childConfig);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "69", "src_id": "M27", "code": "\n    @Override\n    public void beginJavadocTree(DetailNode rootAst) {\n        if (isTopLevelClassJavadoc()) {\n            moduleDetails = new ModuleDetails();\n            toScan = false;\n            scrapingViolationMessageList = false;\n            propertySectionStartIdx = -1;\n            exampleSectionStartIdx = -1;\n            parentSectionStartIdx = -1;\n            String moduleName = getModuleSimpleName();\n            final String checkModuleExtension = \"Check\";\n            if (moduleName.endsWith(checkModuleExtension)) {\n                moduleName = moduleName.substring(0, moduleName.length()- checkModuleExtension.length());\n            }\n\n            moduleDetails.setName(moduleName);\n            moduleDetails.setFullQualifiedName(getPackageName(getFilePath()));\n            moduleDetails.setModuleType(getModuleType());\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "148", "src_id": "M196", "code": "\n    private static String getAnnotationFullIdent(DetailAST annotationNode) {\n        final DetailAST identNode = annotationNode.findFirstToken(TokenTypes.IDENT);\n        final String annotationString;\n\n        // If no `IDENT` is found, then we have a `DOT` -> more than 1 qualifier\n        if (identNode == null) {\n            final DetailAST dotNode = annotationNode.findFirstToken(TokenTypes.DOT);\n            annotationString = FullIdent.createFullIdent(dotNode)\n                .getText();\n        }\n        else {\n            annotationString = identNode.getText();\n        }\n        return annotationString;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "118", "src_id": "M794", "code": "\n    @Override\n    public DetailAstImpl visitAnnotations(JavaLanguageParser.AnnotationsContext ctx) {\n        final DetailAstImpl annotations;\n        if (!ctx.createImaginaryNode\n                && ctx.anno.isEmpty()) {\n            // There are no annotations, and we don't want to create the empty node\n            annotations = null;\n        }\n        else {\n            // There are annotations, or we just want the empty node\n            annotations = createImaginary(TokenTypes.ANNOTATIONS);\n            processChildren(annotations, ctx.anno);\n        }\n        return annotations;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "16", "src_id": "M794", "code": "\n    @Override\n    public DetailAstImpl visitAnnotations(JavaLanguageParser.AnnotationsContext ctx) {\n        final DetailAstImpl annotations;\n\n        if (!ctx.createImaginaryNode && ctx.anno.isEmpty()) {\n            // There are no annotations, and we don't want to create the empty node\n            annotations = null;\n        }\n        else {\n            // There are annotations, or we just want the empty node\n            annotations = createImaginary(TokenTypes.ANNOTATIONS);\n            processChildren(annotations, ctx.anno);\n        }\n\n        return annotations;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "70", "src_id": "M35", "code": "\n    private static Optional<DetailNode> getFirstChildOfMatchingText(DetailNode node, Pattern pattern) {\n        return Arrays.stream(node.getChildren()).filter(child -> pattern.matcher(child.getText()).matches()).findFirst();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "119", "src_id": "M764", "code": "\n    @Override\n    public DetailAstImpl visitTypeParameter(JavaLanguageParser.TypeParameterContext ctx) {\n        final DetailAstImpl typeParameter = createImaginary(TokenTypes.TYPE_PARAMETER);\n        processChildren(typeParameter, ctx.children);\n        return typeParameter;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "17", "src_id": "M764", "code": "\n    @Override\n    public DetailAstImpl visitTypeParameter(JavaLanguageParser.TypeParameterContext ctx) {\n        final DetailAstImpl typeParameter = createImaginary(TokenTypes.TYPE_PARAMETER);\n\n        processChildren(typeParameter, ctx.children);\n        return typeParameter;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "120", "src_id": "M492", "code": "\n    private void checkYield() {\n        final DetailAST yieldKey = getMainAst();\n        final int columnNo = expandedTabsColumnNo(yieldKey);\n        if (isOnStartOfLine(yieldKey)\n        && !getIndent().isAcceptable(columnNo)) {\n            logError(yieldKey, \"\", columnNo);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "18", "src_id": "M492", "code": "\n    private void checkYield() {\n        final DetailAST yieldKey = getMainAst();\n        final int columnNo = expandedTabsColumnNo(yieldKey);\n\n        if (isOnStartOfLine(yieldKey) && !getIndent().isAcceptable(columnNo)) {\n            logError(yieldKey, \"\", columnNo);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "121", "src_id": "M601", "code": "\n    @Override\n    public void beginTree(DetailAST root) {\n        variables.clear();\n        typeDeclarations.clear();\n        typeDeclAstToTypeDeclDesc.clear();\n        anonInnerAstToTypeDeclDesc.clear();\n        anonInnerClassHolders.clear();\n        packageName = null;\n        depth = 0;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "122", "src_id": "M600", "code": "\n    @Override\n    public int [] getDefaultTokens() {\n        return new int [] {\n            TokenTypes.DOT, TokenTypes.VARIABLE_DEF, TokenTypes.IDENT, TokenTypes.SLIST, TokenTypes.LITERAL_FOR, TokenTypes.OBJBLOCK, TokenTypes.CLASS_DEF, TokenTypes.INTERFACE_DEF, TokenTypes.ANNOTATION_DEF, TokenTypes.PACKAGE_DEF, TokenTypes.LITERAL_NEW, TokenTypes.METHOD_DEF, TokenTypes.CTOR_DEF, TokenTypes.STATIC_INIT, TokenTypes.INSTANCE_INIT, TokenTypes.COMPILATION_UNIT, TokenTypes.LAMBDA, TokenTypes.ENUM_DEF, TokenTypes.RECORD_DEF, TokenTypes.COMPACT_CTOR_DEF,};\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "19", "src_id": "M284", "code": "\n    private static boolean isSuppressedBeforeEventEnd(int line, int column, Entry entry) {\n        return entry.getLastLine() > line\n        || entry.getLastLine() == line\n            && entry.getLastColumn() >= column;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "123", "src_id": "M615", "code": "\n    private void iterateOverBlockContainingLocalAnonInnerClass(DetailAST ast,\n        Deque<VariableDesc> variablesStack) {\n        DetailAST currNode = ast;\n\n        while (currNode != null) {\n            customVisitToken(currNode, variablesStack);\n            DetailAST toVisit = currNode.getFirstChild();\n\n            while (currNode != ast && toVisit == null) {\n                customLeaveToken(currNode, variablesStack);\n                toVisit = currNode.getNextSibling();\n                currNode = currNode.getParent();\n            }\n\n            currNode = toVisit;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "20", "src_id": "M294", "code": "\n    private static boolean canBeSubclassed(DetailAST classDef) {\n        final DetailAST modifiers = classDef.findFirstToken(TokenTypes.MODIFIERS);\n        return classDef.getType() != TokenTypes.ENUM_DEF&& modifiers.findFirstToken(TokenTypes.FINAL) == null&& hasDefaultOrExplicitNonPrivateCtor(classDef);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "124", "src_id": "M383", "code": "\n    private static void extractInlineTagContent(DetailNode node,\n        StringBuilder customTagContent) {\n        final DetailNode [] children = node.getChildren();\n\n        if (children.length == 0) {\n            customTagContent.append(\n                node.getText());\n        }\n        else {\n            for (DetailNode child : children) {\n\n                if (child.getType() != JavadocTokenTypes.LEADING_ASTERISK) {\n                    extractInlineTagContent(child, customTagContent);\n                }\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "125", "src_id": "M593", "code": "\n    private void visitLambdaParameters(DetailAST ast) {\n\n        if (ast.getType() == TokenTypes.IDENT) {\n            parameterNames.add(\n                ast.getText());\n        }\n        else {\n            visitParameters(ast);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "21", "src_id": "M714", "code": "\n    private static Set<DetailAST> getAllTokensOfType(DetailAST ast,\n                                                     int tokenType) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n        while (vertex != null\n        || !stack.isEmpty()) {\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n            while (vertex != null) {\n                if (vertex.getType() == tokenType) {\n                    result.add(vertex);\n                }\n                if (vertex.getNextSibling() != null) {\n                    stack.push(vertex.getNextSibling());\n                }\n                vertex = vertex.getFirstChild();\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "126", "src_id": "M175", "code": "\n    @Override\n    public void auditFinished(AuditEvent event) {\n        errorWriter.flush();\n\n        if (closeErrorWriter) {\n            errorWriter.close();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "127", "src_id": "M603", "code": "\n    @Override\n    public void leaveToken(DetailAST ast) {\n\n        if (TokenUtil.isOfType(\n            ast, SCOPES)) {\n            logViolations(ast, variables);\n        }\n        else if (ast.getType() == TokenTypes.COMPILATION_UNIT) {\n                 leaveCompilationUnit();\n             }\n             else if (isNonLocalTypeDeclaration(ast)) {\n                      depth--;\n                      typeDeclarations.pop();\n                  }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "22", "src_id": "M504", "code": "\n    @Override\n    public int[] getAcceptableTokens() {\n        return new int[] {\n\n            TokenTypes.SINGLE_LINE_COMMENT,\n            TokenTypes.BLOCK_COMMENT_BEGIN,\n        };\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "23", "src_id": "M207", "code": "\n    public static String getFileExtension(String fileNameWithExtension) {\n        final String fileName = Paths.get(fileNameWithExtension).toString();\n        final int dotIndex = fileName.lastIndexOf('.');\n        final String extension;\n        if (dotIndex == -1) {\n            extension = \"\";\n        }\n        else {\n            extension = fileName.substring(dotIndex + 1);\n        }\n        return extension;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "24", "src_id": "M716", "code": "\n    private static Set<DetailAST> getAllTokensWhichAreEqualToCurrent(DetailAST ast, DetailAST token,\n                                                                     int endLineNumber) {\n        DetailAST vertex = ast;\n        final Set<DetailAST> result = new HashSet<>();\n        final Deque<DetailAST> stack = new ArrayDeque<>();\n        while (vertex != null\n        || !stack.isEmpty()) {\n            if (!stack.isEmpty()) {\n                vertex = stack.pop();\n            }\n            while (vertex != null) {\n                if (isAstSimilar(token, vertex)\n                        && vertex.getLineNo() <= endLineNumber) {\n                    result.add(vertex);\n                }\n                if (vertex.getNextSibling() != null) {\n                    stack.push(vertex.getNextSibling());\n                }\n                vertex = vertex.getFirstChild();\n            }\n        }\n        return result;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "25", "src_id": "M293", "code": "\n    private static DetailAST getNearestClassOrEnumDefinition(DetailAST ast) {\n        DetailAST searchAST = ast;\n        while (searchAST.getType() != TokenTypes.CLASS_DEF\n                   && searchAST.getType() != TokenTypes.ENUM_DEF) {\n            searchAST = searchAST.getParent();\n        }\n        return searchAST;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "26", "src_id": "M704", "code": "\n    private boolean isForwardReference(DetailAST fieldDef) {\n        final DetailAST exprStartIdent = fieldDef.findFirstToken(TokenTypes.IDENT);\n        final Set<DetailAST> exprIdents = getAllTokensOfType(exprStartIdent, TokenTypes.IDENT);\n        boolean forwardReference = false;\n        for (DetailAST ident : exprIdents) {\n            if (classFieldNames.contains(ident.getText())) {\n                forwardReference = true;\n                break;\n            }\n        }\n        return forwardReference;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "27", "src_id": "M697", "code": "\n    @Nullable private static DetailAST traverseUntilNeededBranchType(DetailAST startingBranch,\n                                                                     DetailAST bound,\n                                                                     int neededTokenType) {\n        DetailAST match = null;\n        DetailAST iteratedBranch = shiftToNextTraversedBranch(startingBranch, bound);\n        while (iteratedBranch != null) {\n            if (iteratedBranch.getType() == neededTokenType) {\n                match = iteratedBranch;\n                break;\n            }\n            iteratedBranch = shiftToNextTraversedBranch(iteratedBranch, bound);\n        }\n        return match;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "checkstyle", "pair_id": "28", "src_id": "M564", "code": "\n    private static boolean isTokenNotOnPreviousSiblingLines(DetailAST token,\n                                                            DetailAST parentToken) {\n        DetailAST previousSibling = parentToken.getPreviousSibling();\n        for (DetailAST astNode = previousSibling;\n             astNode != null;\n             astNode = astNode.getLastChild()) {\n            previousSibling = astNode;\n        }\n        return token.getLineNo() != previousSibling.getLineNo();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "checkstyle", "pair_id": "29", "src_id": "M695", "code": "\n    private static List<DetailAST> getReassignedVariableIdents(DetailAST ast) {\n        final DetailAST branchLeadingToReassignedVar = getBranchLeadingToReassignedVars(ast);\n        final List<DetailAST> reassignedVariableIdents = new ArrayList<>();\n        for (DetailAST expressionBranch = branchLeadingToReassignedVar;\n             expressionBranch != null;\n             expressionBranch = traverseUntilNeededBranchType(expressionBranch, branchLeadingToReassignedVar, TokenTypes.EXPR)) {\n            final DetailAST assignToken = getMatchedAssignToken(expressionBranch);\n            if (assignToken != null) {\n                reassignedVariableIdents.add(getNeededAssignIdent(assignToken));\n            }\n        }\n        return reassignedVariableIdents;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
