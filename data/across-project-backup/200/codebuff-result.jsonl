{"project_name": "across-project", "pair_id": "85", "src_id": "M900", "code": "\n    @StyleRes public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n        final String selectedTheme = getSelectedThemeKey(context);\n\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } else if (selectedTheme.equals(blackTheme)) {\n                   return R.style.BlackSettingsTheme;\n        } else if (selectedTheme.equals(automaticDeviceTheme)) {\n                   if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                       final String selectedNightTheme = getSelectedNightThemeKey(context);\n\n                       if (selectedNightTheme.equals(blackTheme)) {\n                           return R.style.BlackSettingsTheme;\n                       } else {\n                           return R.style.DarkSettingsTheme;\n                       }\n                   } else {\n                // there is only one day theme\n                       return R.style.LightSettingsTheme;\n                   }\n               } else {\n            // default to dark theme\n                   return R.style.DarkSettingsTheme;\n               }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "64", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    // Apply MIME header decoding\n\n                    return safeMimeDecode(value.toString());\n                }\n\n                if (line.trim().isEmpty()) break;\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n\n        return \"\";\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "106", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n            log.info(\"Decoded certificate payload: {}\", payload);\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n            boolean isValid = processCertificateData(decodedData, context);\n            return isValid;\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "190", "src_id": "M69", "code": "\n    @Override\n    public String toString() {\n       StringBuffer sb = new StringBuffer();\n       List<HystrixEventType> foundEventTypes = new ArrayList<HystrixEventType>();\n       sb.append(getCommandKey().name()).append(\"[\");\n       for (HystrixEventType eventType : ALL_EVENT_TYPES) {\n\n        if (executionResult.getEventCounts().contains(eventType)) {\n                                                              foundEventTypes.add(eventType);\n        }\n       }\n       int i = 0;\n\n       for (HystrixEventType eventType : foundEventTypes) {\n        sb.append(eventType.name());\n        int eventCount = executionResult.getEventCounts().getCount(eventType);\n        if (eventCount > 1) {\n                                                              sb.append(\"x\").append(eventCount);\n        }\n\n        if (i < foundEventTypes.size() - 1) {\n                                                              sb.append(\", \");\n        }\n        i++;\n       }\n       sb.append(\"][\").append(getExecutionLatency()).append(\" ms]\");\n       return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "86", "src_id": "M895", "code": "\n    @Override public Bitmap transform(final Bitmap source) {\n        if (DEBUG) {\n            Log.d(TAG, \"Thumbnail - transform() called\");\n        }\n\n        final float notificationThumbnailWidth = Math.min(context.getResources().getDimension(R.dimen.player_notification_thumbnail_width), source.getWidth());\n        final Bitmap result = BitmapCompat.createScaledBitmap(source, (int) notificationThumbnailWidth, (int) (source.getHeight() / (source.getWidth() / notificationThumbnailWidth)), null, true);\n\n        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n            final Bitmap copied = BitmapCompat.createScaledBitmap(source, (int) notificationThumbnailWidth - 1, (int) (source.getHeight() / (source.getWidth() / (notificationThumbnailWidth - 1))), null, true);\n            source.recycle();\n            return copied;\n        } else {\n            source.recycle();\n            return result;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "65", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(PDDocument document, List < EmailAttachment > attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        List < MarkerPosition > markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\", markerPositions.size(), attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "87", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n                pause();\n                break;\n            case ACTION_CLOSE:\n                service.destroyPlayerAndStopService();\n                break;\n            case ACTION_PLAY_PAUSE:\n                playPause();\n                break;\n            case ACTION_PLAY_PREVIOUS:\n                playPrevious();\n                break;\n            case ACTION_PLAY_NEXT:\n                playNext();\n                break;\n            case ACTION_FAST_REWIND:\n                fastRewind();\n                break;\n            case ACTION_FAST_FORWARD:\n                fastForward();\n                break;\n            case ACTION_REPEAT:\n                cycleNextRepeatMode();\n                break;\n            case ACTION_SHUFFLE:\n                toggleShuffleModeEnabled();\n                break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                }\n\n                break;\n        }\n\n        UIs.call(playerUi->\n            playerUi.onBroadcastReceived(intent));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "107", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)throws IOException {\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n            try (ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n                ZipEntry entry = zipIn.getNextEntry();\n                while(entry != null) {\n                    Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        if (entry.getName().toLowerCase().endsWith(\".html\")|| entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                            Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } // tempUnzippedDir auto-cleaned\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "66", "src_id": "M475", "code": "\n    @Override public void draw(CommandProcess process, JvmModel result) {\n        TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n        for (Map.Entry<String, List < JvmItemVO >> entry : result.getJvmInfo().entrySet()) {\n            String group = entry.getKey();\n            List < JvmItemVO > items = entry.getValue();\n            table.row(true, label(group).style(Decoration.bold.bold()));\n            for (JvmItemVO item : items) {\n                String valueStr;\n\n                if (item.getValue() instanceof Map && item.getName().endsWith(\"MEMORY-USAGE\")) {\n                    valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n                } else {\n                    valueStr = renderItemValue(item.getValue());\n                }\n\n                if (item.getDesc() != null) {\n                    table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n                } else {\n                    table.row(item.getName(), valueStr);\n                }\n            }\n\n            table.row(\"\", \"\");\n        }\n\n        process.write(RenderUtil.render(table, process.width()));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "191", "src_id": "M52", "code": "\n    @Override\n    public void run() {\n       while (true) {\n                    /**\n                     * Since this is a simple example and we know the exact HystrixCommandKeys we are interested in\n                     * we will retrieve the HystrixCommandMetrics objects directly.\n                     *\n                     * Typically you would instead retrieve metrics from where they are published which is by default\n                     * done using Servo: https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring\n                     */\n\n                    // wait 5 seconds on each loop\n        try {\n           Thread.sleep(5000);\n        } catch (Exception e) {\n                        // ignore }\n\n                    // we are using default names so can use class.getSimpleName() to derive the keys\n\n        HystrixCommandMetrics creditCardMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(CreditCardCommand.class.getSimpleName()));\n        HystrixCommandMetrics orderMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(GetOrderCommand.class.getSimpleName()));\n        HystrixCommandMetrics userAccountMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(GetUserAccountCommand.class.getSimpleName()));\n        HystrixCommandMetrics paymentInformationMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(GetPaymentInformationCommand.class.getSimpleName()));\n        if (shouldLog) {\n                        // print out metrics\n                        StringBuilder out = new StringBuilder();\n                        out.append(\"\\n\");\n                        out.append(\"#####################################################################################\").append(\"\\n\");\n                        out.append(\"# CreditCardCommand: \" + getStatsStringFromMetrics(creditCardMetrics)).append(\"\\n\");\n                        out.append(\"# GetOrderCommand: \" + getStatsStringFromMetrics(orderMetrics)).append(\"\\n\");\n                        out.append(\"# GetUserAccountCommand: \" + getStatsStringFromMetrics(userAccountMetrics)).append(\"\\n\");\n                        out.append(\"# GetPaymentInformationCommand: \" + getStatsStringFromMetrics(paymentInformationMetrics)).append(\"\\n\");\n                        out.append(\"#####################################################################################\").append(\"\\n\");\n                        System.out.println(out.toString());\n        }\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "88", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n\n        if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            // Starting ReCaptcha Challenge Activity\n\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } else if (errorInfo.getThrowable() != null && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n                   Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n                   Toast.makeText(context, R.string.restricted_video_no_stream, Toast.LENGTH_LONG).show();\n               } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n                          Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n               } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n                          Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n                      } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n                                 Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n                      } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n                                 Toast.makeText(context, R.string.soundcloud_go_plus_content, Toast.LENGTH_LONG).show();\n                             } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n                                        Toast.makeText(context, R.string.youtube_music_premium_content, Toast.LENGTH_LONG).show();\n                             } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n                                        Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n                                    } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n                                               Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n                                    } else {\n                                        ErrorUtil.createNotification(context, errorInfo);\n                                    }\n\n        if (context instanceof RouterActivity) {\n            ((RouterActivity) context).finish();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "108", "src_id": "M317", "code": "\n    public static void addImageToDocument(PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption)||\"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                       float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                       float pageAspectRatio = pageWidth / pageHeight;\n                       float scaleFactor = 1.0f;\n                       if (imageAspectRatio > pageAspectRatio) {\n                           scaleFactor = pageWidth / image.getWidth();\n                       } else {\n                           scaleFactor = pageHeight / image.getHeight();\n                       }\n                       float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                       float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                       contentStream.drawImage(image, xPos, yPos, image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n                   }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "67", "src_id": "M535", "code": "\n    public static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n        final StringBuilder infoSB = new StringBuilder();\n        List < String > classDumpFiles = affectVO.getClassDumpFiles();\n\n        if (classDumpFiles != null) {\n            for (String classDumpFile : classDumpFiles) {\n                infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n            }\n        }\n\n        List < String > methods = affectVO.getMethods();\n\n        if (methods != null) {\n            for (String method : methods) {\n                infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n            }\n        }\n\n        infoSB.append(format(\"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\", affectVO.getClassCount(), affectVO.getMethodCount(), affectVO.getCost(), affectVO.getListenerId()));\n\n        if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n            infoSB.append(\"\\n\" + affectVO.getOverLimitMsg());\n        }\n\n        if (affectVO.getThrowable() != null) {\n            infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n        }\n\n        infoSB.append(\"\\n\");\n        return infoSB.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "149", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n    try {\n        String encodedPayload = licenseFile;\n            // Remove the header\n        encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n        encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n        encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n        byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n        String payload = new String(payloadBytes);\n        log.info(\"Decoded certificate payload: {}\", payload);\n        String encryptedData = \"\";\n        String encodedSignature = \"\";\n        String algorithm = \"\";\n        try {\n        JSONObject attrs = new JSONObject(payload);\n        encryptedData = (String) attrs.get(\"enc\");\n        encodedSignature = (String) attrs.get(\"sig\");\n        algorithm = (String) attrs.get(\"alg\");\n        } catch (JSONException e) {\n          log.error(\"Failed to parse license file: {}\", e.getMessage());\n          return false;\n        }\n\n            // Verify license file algorithm\n\n        if (!\"base64+ed25519\".equals(algorithm)) {\n        log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n        return false;\n        }\n\n            // Verify signature\n        boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n        if (!isSignatureValid) {\n        log.error(\"License file signature is invalid\");\n        return false;\n        }\n        log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n        String decodedData;\n        try {\n        decodedData = new String(Base64.getDecoder().decode(encryptedData));\n        } catch (IllegalArgumentException e) {\n          log.error(\"Failed to decode license data: {}\", e.getMessage());\n          return false;\n        }\n\n            // Process the certificate data\n        boolean isValid = processCertificateData(decodedData, context);\n        return isValid;\n    } catch (Exception e) {\n      log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n      return false;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "89", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context, @NonNull final FragmentManager fragmentManager, final int serviceId, @Nullable final String url, @NonNull final String title, @Nullable final PlayQueue playQueue, final boolean switchingPlayers) {\n        final boolean autoPlay;\n        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n\n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else if (switchingPlayers) {\n            // switching player to main player\n                   autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n        } else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n                   autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n               } else {\n            // opening new stream while already playing in another player\n                   autoPlay = false;\n               }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment-> {\n                                                                               expandMainPlayer(detailFragment.requireActivity());\n                                                                               detailFragment.setAutoPlay(autoPlay);\n\n                                                                               if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                                                                                   detailFragment.openVideoPlayer(playerType == PlayerType.POPUP || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n                                                                               } else {\n                                                                                   detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n                                                                               }\n\n                                                                               detailFragment.scrollToTop();\n                                                                           };\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n        } else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment.getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n            defaultTransaction(fragmentManager).replace(R.id.fragment_player_holder, instance).runOnCommit(()->\n                                                                                                  onVideoDetailFragmentReady.run(instance)).commit();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "192", "src_id": "M312", "code": "\n    private Observable<R> handleRequestCacheHitAndEmitValues(final HystrixCommandResponseFromCache<R> fromCache,\n                                                             final AbstractCommand<R> _cmd) {\n    try {\n        executionHook.onCacheHit(this);\n    } catch (Throwable hookEx) {\n      logger.warn(\"Error calling HystrixCommandExecutionHook.onCacheHit\", hookEx);\n    }\n    return fromCache.toObservableWithStateCopiedInto(this).doOnTerminate(new Action0() {\n                                                                             @Override\n                                                                             public void call() {\n\n                                                                             if (commandState.compareAndSet(CommandState.OBSERVABLE_CHAIN_CREATED, CommandState.TERMINAL)) {\n                                                                                 cleanUpAfterResponseFromCache(false); //user code never ran\n                                                                             } else if (commandState.compareAndSet(CommandState.USER_CODE_EXECUTED, CommandState.TERMINAL)) {\n                                                                                                    cleanUpAfterResponseFromCache(true); //user code did run\n                                                                                    }\n                                                                             }\n\n}).doOnUnsubscribe(new Action0() {\n                       @Override\n                       public void call() {\n\n                       if (commandState.compareAndSet(CommandState.OBSERVABLE_CHAIN_CREATED, CommandState.UNSUBSCRIBED)) {\n                           cleanUpAfterResponseFromCache(false); //user code never ran\n                       } else if (commandState.compareAndSet(CommandState.USER_CODE_EXECUTED, CommandState.UNSUBSCRIBED)) {\n                                              cleanUpAfterResponseFromCache(true); //user code did run\n                              }\n                       }\n\n});\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "109", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            // Get the MAC address\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while(networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for(int i = 0;i < mac.length;\ni++) {\n                            sb.append(String.format(\"%02X\", mac[ i ]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for(int i = 0;i < mac.length;\ni++) {\n                        sb.append(String.format(\"%02X\", mac[ i ]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "90", "src_id": "M698", "code": "\n    @Override public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG).into(binding.channelBannerImage);\n        } else {\n            // do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n\n        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG).into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG).into(binding.subChannelAvatarView);\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n\n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(Localization.shortSubscriberCount(activity, result.getSubscriberCount()));\n        } else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(String.format(getString(R.string.channel_created_by), currentInfo.getParentChannelName()));\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        disposables.clear();\n\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "68", "src_id": "M753", "code": "\n    public List < ThreadVO > sample(Collection < ThreadVO > originThreads) {\n        List < ThreadVO > threads = new ArrayList < ThreadVO >(originThreads);\n\n        // Sample CPU\n\n        if (lastCpuTimes.isEmpty()) {\n            lastSampleTimeNanos = System.nanoTime();\n            for (ThreadVO thread : threads) {\n                if (thread.getId() > 0) {\n                    long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                    lastCpuTimes.put(thread, cpu);\n                    thread.setTime(cpu / 1000000);\n                }\n            }\n\n            // add internal threads\n\n            Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n\n            if (internalThreadCpuTimes != null) {\n                for (Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n                    String key = entry.getKey();\n                    ThreadVO thread = createThreadVO(key);\n                    thread.setTime(entry.getValue() / 1000000);\n                    threads.add(thread);\n                    lastCpuTimes.put(thread, entry.getValue());\n                }\n            }\n\n            //sort by time\n\n            Collections.sort(threads, new Comparator < ThreadVO >() {\n                                          @Override public int compare(ThreadVO o1, ThreadVO o2) {\n                                              long l1 = o1.getTime();\n                                              long l2 = o2.getTime();\n\n                                              if (l1 < l2) {\n                                                  return 1;\n                                              } else if (l1 > l2) {\n                                                         return - 1;\n                                              } else {\n                                                         return 0;\n                                              }\n                                          }\n\n                                      });\n            return threads;\n        }\n\n        // Resample\n\n        long newSampleTimeNanos = System.nanoTime();\n        Map<ThreadVO, Long> newCpuTimes = new HashMap<ThreadVO, Long>(threads.size());\n        for (ThreadVO thread : threads) {\n            if (thread.getId() > 0) {\n                long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                newCpuTimes.put(thread, cpu);\n            }\n        }\n        // internal threads\n\n        Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n\n        if (newInternalThreadCpuTimes != null) {\n            for (Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n                ThreadVO threadVO = createThreadVO(entry.getKey());\n                threads.add(threadVO);\n                newCpuTimes.put(threadVO, entry.getValue());\n            }\n        }\n\n        // Compute delta time\n\n        final Map<ThreadVO, Long> deltas = new HashMap<ThreadVO, Long>(threads.size());\n        for (ThreadVO thread : newCpuTimes.keySet()) {\n            Long t = lastCpuTimes.get(thread);\n\n            if (t == null) {\n                t = 0L;\n            }\n\n            long time1 = t;\n            long time2 = newCpuTimes.get(thread);\n\n            if (time1 == - 1) {\n                time1 = time2;\n            } else if (time2 == - 1) {\n                       time2 = time1;\n                   }\n\n            long delta = time2 - time1;\n            deltas.put(thread, delta);\n        }\n\n        long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n\n        // Compute cpu usage\n        final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());\n        for (ThreadVO thread : threads) {\n            double cpu = sampleIntervalNanos == 0 ? 0 : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);\n            cpuUsages.put(thread, cpu);\n        }\n\n        // Sort by CPU time : should be a rendering hint...\n\n        Collections.sort(threads, new Comparator < ThreadVO >() {\n                                      @Override public int compare(ThreadVO o1, ThreadVO o2) {\n                                          long l1 = deltas.get(o1);\n                                          long l2 = deltas.get(o2);\n\n                                          if (l1 < l2) {\n                                              return 1;\n                                          } else if (l1 > l2) {\n                                                     return - 1;\n                                          } else {\n                                                     return 0;\n                                          }\n                                      }\n\n                                  });\n        for (ThreadVO thread : threads) {\n            //nanos to mills\n            long timeMills = newCpuTimes.get(thread) / 1000000;\n            long deltaTime = deltas.get(thread) / 1000000;\n            double cpu = cpuUsages.get(thread);\n            thread.setCpu(cpu);\n            thread.setTime(timeMills);\n            thread.setDeltaTime(deltaTime);\n        }\n\n        lastCpuTimes = newCpuTimes;\n        lastSampleTimeNanos = newSampleTimeNanos;\n        return threads;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "150", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n       try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n        try (ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n           ZipEntry entry = zipIn.getNextEntry();\n           while (entry != null) {\n            Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n            if (!entry.isDirectory()) {\n                                     Files.createDirectories(filePath.getParent());\n                                     if (entry.getName().toLowerCase().endsWith(\".html\")|| entry.getName().toLowerCase().endsWith(\".htm\")) {\n                String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                                     } else {\n                                       Files.copy(zipIn, filePath);\n                                     }\n            }\n            zipIn.closeEntry();\n            entry = zipIn.getNextEntry();\n           }\n        }\n\n            // Repack the sanitized files\n        zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n       } // tempUnzippedDir auto-cleaned\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "110", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata() && runningProOrHigher) {\n            author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "91", "src_id": "M379", "code": "\n    @Override public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT) || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n\n        final List < Tracks.Group > textTracks = currentTracks.getGroups().stream().filter(trackGroupInfo->\n                                                                                       C.TRACK_TYPE_TEXT == trackGroupInfo.getType()).collect(Collectors.toList());\n        final List < String > availableLanguages = textTracks.stream().map(Tracks.Group::getMediaTrackGroup).filter(textTrack->\n                                                                                                                textTrack.length > 0).map(textTrack->\n                                                                                                                                         textTrack.getFormat(0).language).collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional < Format > selectedTracks = textTracks.stream().filter(Tracks.Group::isSelected).filter(info->\n                                                                                                           info.getMediaTrackGroup().length >= 1).map(info->\n                                                                                                                                                     info.getMediaTrackGroup().getFormat(0)).findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n\n        if (player.getTrackSelector().getParameters().getRendererDisabled(player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n\n        binding.captionTextView.setVisibility(availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "193", "src_id": "M438", "code": "\n    private static void serializeUtilization(HystrixUtilization utilization, JsonGenerator json) {\n       try {\n        json.writeStartObject();\n        json.writeStringField(\"type\", \"HystrixUtilization\");\n        json.writeObjectFieldStart(\"commands\");\n        for (Map.Entry<HystrixCommandKey, HystrixCommandUtilization> entry : utilization.getCommandUtilizationMap().entrySet()) {\n           final HystrixCommandKey key = entry.getKey();\n           final HystrixCommandUtilization commandUtilization = entry.getValue();\n           writeCommandUtilizationJson(json, key, commandUtilization);\n        }\n        json.writeEndObject();\n        json.writeObjectFieldStart(\"threadpools\");\n        for (Map.Entry<HystrixThreadPoolKey, HystrixThreadPoolUtilization> entry : utilization.getThreadPoolUtilizationMap().entrySet()) {\n           final HystrixThreadPoolKey threadPoolKey = entry.getKey();\n           final HystrixThreadPoolUtilization threadPoolUtilization = entry.getValue();\n           writeThreadPoolUtilizationJson(json, threadPoolKey, threadPoolUtilization);\n        }\n        json.writeEndObject();\n        json.writeEndObject();\n        json.close();\n       } catch (Exception e) {\n         throw new RuntimeException(e);\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "69", "src_id": "M1131", "code": "\n    private ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n        String commandLine = apiRequest.getCommand();\n        Map<String, Object> body = new TreeMap<String, Object>();\n        body.put(\"command\", commandLine);\n        ApiResponse response = new ApiResponse();\n        response.setSessionId(session.getSessionId()).setBody(body);\n\n        if (!session.tryLock()) {\n            response.setState(ApiState.REFUSED).setMessage(\"Another command is executing.\");\n            return response;\n        }\n\n        int lock = session.getLock();\n        try {\n            Job foregroundJob = session.getForegroundJob();\n\n            if (foregroundJob != null) {\n                response.setState(ApiState.REFUSED).setMessage(\"Another job is running.\");\n                logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n                return response;\n            }\n\n            //create job\n\n            Job job = this.createJob(commandLine, session, session.getResultDistributor());\n            body.put(\"jobId\", job.id());\n            body.put(\"jobStatus\", job.status());\n            response.setState(ApiState.SCHEDULED);\n\n            //add command before exec job\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n            commandRequestModel.setJobId(job.id());\n            SharingResultDistributor resultDistributor = session.getResultDistributor();\n\n            if (resultDistributor != null) {\n                resultDistributor.appendResult(commandRequestModel);\n            }\n\n            session.setForegroundJob(job);\n            updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n\n            //run job\n            job.run();\n            return response;\n        } catch (Throwable e) {\n            logger.error(\"Async exec command failed:\" + e.getMessage() + \", command:\" + commandLine, e);\n            response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n            session.getResultDistributor().appendResult(commandRequestModel);\n            return response;\n        }\n\nfinally {\n            if (session.getLock() == lock) {\n                session.unLock();\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "132", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n\n    if (emlBytes == null|| emlBytes.length == 0) {\n        throw new IllegalArgumentException(\"EML file is empty or null\");\n    }\n    String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n    String subject = extractBasicHeader(emlContent, \"Subject:\");\n    String from = extractBasicHeader(emlContent, \"From:\");\n    String to = extractBasicHeader(emlContent, \"To:\");\n    String cc = extractBasicHeader(emlContent, \"Cc:\");\n    String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n    String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n    String htmlBody = extractHtmlBody(emlContent);\n    if (htmlBody == null) {\n        String textBody = extractTextBody(emlContent);\n        htmlBody = convertTextToHtml(textBody != null ? textBody : \"Email content could not be parsed\");\n    }\n\n        // Generate HTML with custom styling based on request\n    StringBuilder html = new StringBuilder();\n    html.append(\"<!DOCTYPE html>\\n\");\n    html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n    html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n    html.append(\"<style>\\n\");\n    appendEnhancedStyles(html);\n    html.append(\"</style>\\n\");\n    html.append(\"</head><body>\\n\");\n    html.append(\"<div class=\\\"email-container\\\">\\n\");\n    html.append(\"<div class=\\\"email-header\\\">\\n\");\n    html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n    html.append(\"<div class=\\\"email-meta\\\">\\n\");\n    html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n    html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n    if (request != null && request.isIncludeAllRecipients()) {\n\n        if (!cc.trim().isEmpty()) {\n                                                                 html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n        }\n\n        if (!bcc.trim().isEmpty()) {\n                                                                 html.append(\"<div><strong>BCC:</strong> \").append(escapeHtml(bcc)).append(\"</div>\\n\");\n        }\n    }\n\n    if (!date.trim().isEmpty()) {\n        html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n    }\n    html.append(\"</div></div>\\n\");\n    html.append(\"<div class=\\\"email-body\\\">\\n\");\n    html.append(processEmailHtmlBody(htmlBody));\n    html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n    String attachmentInfo = extractAttachmentInfo(emlContent);\n    if (!attachmentInfo.isEmpty()) {\n        html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n        html.append(\"<h3>Attachments</h3>\\n\");\n        html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n        if (request != null && request.isIncludeAttachments()) {\n        html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n        html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n        html.append(\"</div>\\n\");\n        } else {\n          html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n          html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n          html.append(\"</div>\\n\");\n        }\n        html.append(\"</div>\\n\");\n    }\n\n        // Show advanced features status if requested\n\n    assert request != null;\n    if (request.getFileInput().isEmpty()) {\n        html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n        html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n        html.append(\"</div>\\n\");\n    }\n    html.append(\"</div>\\n\");\n    html.append(\"</body></html>\");\n    return html.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "151", "src_id": "M317", "code": "\n    public static void addImageToDocument(PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate) throws IOException {\n       boolean imageIsLandscape = image.getWidth() > image.getHeight();\n       PDRectangle pageSize = PDRectangle.A4;\n       if (autoRotate && imageIsLandscape) {\n        pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n       }\n\n       if (\"fitDocumentToImage\".equals(fitOption)) {\n        pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n       }\n       PDPage page = new PDPage(pageSize);\n       doc.addPage(page);\n       float pageWidth = page.getMediaBox().getWidth();\n       float pageHeight = page.getMediaBox().getHeight();\n       try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n\n        if (\"fillPage\".equals(fitOption)||\"fitDocumentToImage\".equals(fitOption)) {\n           contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n        } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                                                                                                                       float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                                                                                                                       float pageAspectRatio = pageWidth / pageHeight;\n                                                                                                                       float scaleFactor = 1.0f;\n                                                                                                                       if (imageAspectRatio > pageAspectRatio) {\n                   scaleFactor = pageWidth / image.getWidth();\n                                                                                                                       } else {\n                                                                                                                         scaleFactor = pageHeight / image.getHeight();\n                                                                                                                       }\n                                                                                                                       float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                                                                                                                       float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                                                                                                                       contentStream.drawImage(image, xPos, yPos, image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n               }\n       } catch (IOException e) {\n                                                                                                                                             log.error(\"Error adding image to PDF\", e);\n                                                                                                                                             throw e;\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "111", "src_id": "M128", "code": "\n    @ Bean(name = \"machineType\" )\n    public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                       return \"Docker\";\n            } else if (isBrowserOpen) {\n                       String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                       if (os.contains(\"win\")) {\n                           return \"Client-windows\";\n                       } else if (os.contains(\"mac\")) {\n                                  return \"Client-mac\";\n                       } else {\n                                  return \"Client-unix\";\n                       }\n                   } else {\n                       return \"Server-jar\";\n                   }\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "92", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context, @NonNull final List < Image > images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images).transform(new Transformation() {\n                                                                 @Override public Bitmap transform(final Bitmap source) {\n                                                                     if (DEBUG) {\n                                                                         Log.d(TAG, \"Thumbnail - transform() called\");\n                                                                     }\n\n                                                                     final float notificationThumbnailWidth = Math.min(context.getResources().getDimension(R.dimen.player_notification_thumbnail_width), source.getWidth());\n                                                                     final Bitmap result = BitmapCompat.createScaledBitmap(source, (int) notificationThumbnailWidth, (int) (source.getHeight() / (source.getWidth() / notificationThumbnailWidth)), null, true);\n\n                                                                     if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                                                                         final Bitmap copied = BitmapCompat.createScaledBitmap(source, (int) notificationThumbnailWidth - 1, (int) (source.getHeight() / (source.getWidth() / (notificationThumbnailWidth - 1))), null, true);\n                                                                         source.recycle();\n                                                                         return copied;\n                                                                     } else {\n                                                                         source.recycle();\n                                                                         return result;\n                                                                     }\n                                                                 }\n                                                                 @Override public String key() {\n                                                                     return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                                                                 }\n\n                                                             });\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "194", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n        notifyPostProcessing(1);\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n        Exception exception = null;\n        try {\n            psAlgorithm.run(this);\n        }\n\n            catch(Exception err ) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n            if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) errCode = ERROR_POSTPROCESSING;\n            exception = err;\n        }\n\nfinally {\n            notifyPostProcessing(errCode == ERROR_NOTHING?2:\n                                                         0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) exception = errObject;\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n        notifyFinished();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "70", "src_id": "M542", "code": "\n    private String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n        StringBuilder sb = new StringBuilder(8192);\n        for (Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n            Map<String, Object> info = entry.getValue();\n            TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n            TableElement appendersTable = new TableElement().rightCellPadding(1);\n            Class < ?> clazz = (Class < ?>) info.get(LoggerHelper.clazz);\n            table.row(label(LoggerHelper.name).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.name))).row(label(LoggerHelper.clazz).style(Decoration.bold.bold()), label(\"\" + clazz.getName())).row(label(LoggerHelper.classLoader).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.classLoader))).row(label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.classLoaderHash))).row(label(LoggerHelper.level).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.level)));\n\n            if (info.get(LoggerHelper.effectiveLevel) != null) {\n                table.row(label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n            }\n\n            if (info.get(LoggerHelper.config) != null) {\n                table.row(label(LoggerHelper.config).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.config)));\n            }\n\n            table.row(label(LoggerHelper.additivity).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.additivity))).row(label(LoggerHelper.codeSource).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.codeSource)));\n\n            @SuppressWarnings(\"unchecked\") List < Map<String, Object>> appenders = (List < Map<String, Object>>) info.get(LoggerHelper.appenders);\n\n            if (appenders != null && !appenders.isEmpty()) {\n                for (Map<String, Object> appenderInfo : appenders) {\n                    Class < ?> appenderClass = (Class < ?>) appenderInfo.get(LoggerHelper.clazz);\n                    appendersTable.row(label(LoggerHelper.name).style(Decoration.bold.bold()), label(\"\" + appenderInfo.get(LoggerHelper.name)));\n                    appendersTable.row(label(LoggerHelper.clazz), label(\"\" + appenderClass.getName()));\n                    appendersTable.row(label(LoggerHelper.classLoader), label(\"\" + info.get(LoggerHelper.classLoader)));\n                    appendersTable.row(label(LoggerHelper.classLoaderHash), label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n\n                    if (appenderInfo.get(LoggerHelper.file) != null) {\n                        appendersTable.row(label(LoggerHelper.file), label(\"\" + appenderInfo.get(LoggerHelper.file)));\n                    }\n\n                    if (appenderInfo.get(LoggerHelper.target) != null) {\n                        appendersTable.row(label(LoggerHelper.target), label(\"\" + appenderInfo.get(LoggerHelper.target)));\n                    }\n\n                    if (appenderInfo.get(LoggerHelper.blocking) != null) {\n                        appendersTable.row(label(LoggerHelper.blocking), label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n                    }\n\n                    if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n                        appendersTable.row(label(LoggerHelper.appenderRef), label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n                    }\n                }\n\n                table.row(label(\"appenders\").style(Decoration.bold.bold()), appendersTable);\n            }\n\n            sb.append(RenderUtil.render(table, width)).append('\\n');\n        }\n\n        return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "175", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n        notifyPostProcessing(1);\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n        Exception exception = null;\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n            if (err instanceof InterruptedIOException|| err instanceof ClosedByInterruptException|| thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n            if (errCode == ERROR_NOTHING) errCode = ERROR_POSTPROCESSING;\n            exception = err;\n        }\nfinally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) exception = errObject;\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n        notifyFinished();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "112", "src_id": "M101", "code": "\n    private void processRequest(int limitPerDay, String identifier, Map<String, Bucket> buckets, HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)throws IOException, ServletException {\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k-> createUserBucket(limitPerDay));\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        if (probe.isConsumed()) {\n            response.setHeader(\"X-Rate-Limit-Remaining\", stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            filterChain.doFilter(request, response);\n        } else {\n            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Newlines.stripAll(String.valueOf(waitForRefill)));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "71", "src_id": "M15", "code": "\n    public static int startArthasClient(String arthasHomeDir, List < String > telnetArgs, OutputStream out) throws Throwable {\n        // start java telnet client\n        // find arthas-client.jar\n        URLClassLoader classLoader = new URLClassLoader(new URL [] {\n                                                            new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n        Class < ?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n        Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n        //redirect System.out/System.err\n        PrintStream originSysOut = System.out;\n        PrintStream originSysErr = System.err;\n        PrintStream newOut = new PrintStream(out);\n        PrintStream newErr = new PrintStream(out);\n\n        // call TelnetConsole.process()\n        // fix https://github.com/alibaba/arthas/issues/833\n        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n        try {\n            System.setOut(newOut);\n            System.setErr(newErr);\n            Thread.currentThread().setContextClassLoader(classLoader);\n            return (Integer) processMethod.invoke(null, new Object [] {\n                                                            telnetArgs.toArray(new String[0])});\n        } catch (Throwable e) {\n            //java.lang.reflect.InvocationTargetException : java.net.ConnectException\n            e = e.getCause();\n\n            if (e instanceof IOException || e instanceof InterruptedException) {\n                // ignore connection error and interrupted error\n                return STATUS_ERROR;\n            } else {\n                // process error\n                AnsiLog.error(\"process error: {}\", e.toString());\n                AnsiLog.error(e);\n                return STATUS_EXEC_ERROR;\n            }\n        }\n\nfinally {\n            Thread.currentThread().setContextClassLoader(tccl);\n\n            //reset System.out/System.err\n            System.setOut(originSysOut);\n            System.setErr(originSysErr);\n            //flush output\n            newOut.flush();\n            newErr.flush();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "133", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n\n    if (multipart == null) return false;\n    try {\n            // Check if the object implements jakarta.mail.Multipart interface\n        Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n        if (!multipartInterface.isInstance(multipart)) {\n        return false;\n        }\n\n            // Additional check for MimeMultipart\n\n        try {\n        Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n        if (mimeMultipartClass.isInstance(multipart)) {\n            log.debug(\"Found MimeMultipart instance for enhanced processing\");\n            return true;\n        }\n        } catch (ClassNotFoundException e) {\n          log.debug(\"MimeMultipart not available, using base Multipart interface\");\n        }\n        return true;\n    } catch (ClassNotFoundException e) {\n      log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n      return false;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "152", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n       try {\n            // Get the MAC address\n        StringBuilder sb = new StringBuilder();\n        InetAddress ip = InetAddress.getLocalHost();\n        NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n        if (network == null) {\n           Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n           while (networks.hasMoreElements()) {\n            NetworkInterface net = networks.nextElement();\n            byte[] mac = net.getHardwareAddress();\n            if (mac != null) {\n                                                  for (int i = 0; i < mac.length; i++) {\n                                 sb.append(String.format(\"%02X\", mac[i]));\n                                                  }\n\n                                                  break; // Use the first network interface with a MAC address\n            }\n           }\n        } else {\n          byte[] mac = network.getHardwareAddress();\n          if (mac != null) {\n                   for (int i = 0; i < mac.length; i++) {\n                               sb.append(String.format(\"%02X\", mac[i]));\n                   }\n          }\n        }\n\n            // Hash the MAC address for privacy and consistency\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n        StringBuilder fingerprint = new StringBuilder();\n\n        for (byte b : hash) {\n           fingerprint.append(String.format(\"%02x\", b));\n        }\n        return fingerprint.toString();\n       } catch (Exception e) {\n         return \"GenericID\";\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "195", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return;// let the download thread handle this error\n            default:\n                if (statusCode < 200\n                        || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "93", "src_id": "M267", "code": "\n    @Override\n    public void startElement(XlsxReadContext xlsxReadContext, String name, Attributes attributes) {\n        String ref = attributes.getValue(ExcelXmlConstants.ATTRIBUTE_REF);\n        if (StringUtils.isEmpty(ref)) {\n            return;\n        }\n        // Hyperlink has 2 case:\n        // case 1，In the 'location' tag\n        String location = attributes.getValue(ExcelXmlConstants.ATTRIBUTE_LOCATION);\n        if (location != null) {\n            CellExtra cellExtra = new CellExtra(CellExtraTypeEnum.HYPERLINK, location, ref);\n            xlsxReadContext.readSheetHolder().setCellExtra(cellExtra);\n            xlsxReadContext.analysisEventProcessor().extra(xlsxReadContext);\n            return;\n        }\n        // case 2, In the 'r:id' tag, Then go to 'PackageRelationshipCollection' to get inside\n        String rId = attributes.getValue(ExcelXmlConstants.ATTRIBUTE_RID);\n        PackageRelationshipCollection packageRelationshipCollection = xlsxReadContext.xlsxReadSheetHolder().getPackageRelationshipCollection();\n        if (rId == null\n                || packageRelationshipCollection == null) {\n            return;\n        }\n        Optional.ofNullable(packageRelationshipCollection.getRelationshipByID(rId)).map(PackageRelationship::getTargetURI).ifPresent(uri -> {\n            CellExtra cellExtra = new CellExtra(CellExtraTypeEnum.HYPERLINK, uri.toString(), ref);\n            xlsxReadContext.readSheetHolder().setCellExtra(cellExtra);\n            xlsxReadContext.analysisEventProcessor().extra(xlsxReadContext);\n        });\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "176", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn)throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n        switch(statusCode) {\n            case 204: case 205: case 207:\n            throw new HttpError(statusCode);\n                           case 416:\n            return;// let the download thread handle this error\n                           default:\n            if (statusCode < 200|| statusCode > 299) {\n                throw new HttpError(statusCode);\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "72", "src_id": "M1469", "code": "\n    public static FieldVO[] getFields(Class clazz, Integer expand) {\n        Field[] fields = clazz.getDeclaredFields();\n\n        if (fields.length == 0) {\n            return new FieldVO[0];\n        }\n\n        List < FieldVO > list = new ArrayList < FieldVO >(fields.length);\n        for (Field field : fields) {\n            FieldVO fieldVO = new FieldVO();\n            fieldVO.setName(field.getName());\n            fieldVO.setType(StringUtils.classname(field.getType()));\n            fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n            fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n\n            if (Modifier.isStatic(field.getModifiers())) {\n                fieldVO.setStatic(true);\n                fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n            } else {\n                fieldVO.setStatic(false);\n            }\n\n            list.add(fieldVO);\n        }\n\n        return list.toArray(new FieldVO[0]);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "113", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n        notifyPostProcessing(1);\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n\n        Exception exception = null;\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n            if (err instanceof InterruptedIOException||err instanceof ClosedByInterruptException||thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n            if (errCode == ERROR_NOTHING) errCode = ERROR_POSTPROCESSING;\n            exception = err;\n        }\n\nfinally {\n            notifyPostProcessing(errCode == ERROR_NOTHING?2:0);\n        }\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) exception = errObject;\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n        notifyFinished();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "196", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) *(DataReader.LONG_SIZE* 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n        obj.bMediaRate = stream.readInt();\n        return obj;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "177", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref)throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n        final Elst obj = new Elst();\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n        obj.bMediaRate = stream.readInt();\n        return obj;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "153", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n       String title = pdfMetadata.getTitle();\n       pdf.getDocumentInformation().setTitle(title);\n       pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n       pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n       pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n       pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n       String author = pdfMetadata.getAuthor();\n       if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata() && runningProOrHigher) {\n        author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n        if (userService != null) {\n                                                                                                                                     author = author.replace(\"username\", userService.getCurrentUsername());\n        }\n       }\n       pdf.getDocumentInformation().setAuthor(author);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "134", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n       try {\n        String[] lines = emlContent.split(\"\\r?\\n\");\n\n        for (int i = 0; i < lines.length; i++) {\n           String line = lines[i];\n           if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                                                   StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n\n                                                   for (int j = i + 1; j < lines.length; j++) {\n\n                                                                            if (lines[j].startsWith(\" \")|| lines[j].startsWith(\"\\t\")) {\n                                                       value.append(\" \").append(lines[j].trim());\n                                                                            } else {\n                                                                              break;\n                                                                            }\n                                                   }\n                    // Apply MIME header decoding\n                                                   return safeMimeDecode(value.toString());\n           }\n\n           if (line.trim().isEmpty()) break;\n        }\n       } catch (RuntimeException e) {\n         log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n       }\n       return \"\";\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "73", "src_id": "M1277", "code": "\n    public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n        Map<String, String> output = new HashMap<>(input.size());\n        for(Map.Entry<String, Object> entry :input.entrySet()) {\n            String key = entry.getKey();\n            Object obj = entry.getValue();\n            if (key == null||obj == null) {\n                throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n            }\n\n\n            String str;\n            if (obj instanceof byte []) {\n                str = SafeEncoder.encode((byte [])obj);\n            } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n                       redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate)obj;\n                       str = geo.getLongitude() + \",\" + geo.getLatitude();\n                   } else if (obj instanceof String) {\n                              str = stringEscape?escape((String)obj):(String)obj;\n                          } else {\n                              str = String.valueOf(obj);\n                          }\n            output.put(key, str);\n        }\n        return output;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "114", "src_id": "M1031", "code": "\n    void establishConnection(int threadId,HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n        switch(statusCode) {\ncase 204: case 205: case 207:\nthrow new HttpError(statusCode);\n                           case 416:\n            return;// let the download thread handle this error\n                           default:\nif (statusCode<200||statusCode> 299) {\n    throw new HttpError(statusCode);\n}\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "94", "src_id": "M248", "code": "\n    @Override\n    public void processRecord(XlsReadContext xlsReadContext, Record record) {\n        LabelSSTRecord lsrec = (LabelSSTRecord) record;\n        ReadCache readCache = xlsReadContext.readWorkbookHolder().getReadCache();\n        Map<Integer, Cell> cellMap = xlsReadContext.xlsReadSheetHolder().getCellMap();\n        if (readCache == null) {\n            cellMap.put((int)lsrec.getColumn(), ReadCellData.newEmptyInstance(lsrec.getRow(), (int)lsrec.getColumn()));\n            return;\n        }\n        String data = readCache.get(lsrec.getSSTIndex());\n        if (data == null) {\n            cellMap.put((int)lsrec.getColumn(), ReadCellData.newEmptyInstance(lsrec.getRow(), (int)lsrec.getColumn()));\n            return;\n        }\n\n        if (xlsReadContext.currentReadHolder().globalConfiguration()\n                                              .getAutoTrim()) {\n            data = data.trim();\n        }\n        cellMap.put((int)lsrec.getColumn(), ReadCellData.newInstance(data, lsrec.getRow(), (int)lsrec.getColumn()));\n        xlsReadContext.xlsReadSheetHolder().setTempRowType(RowTypeEnum.DATA);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "74", "src_id": "M902", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (retentionPeriod != null) {\n            args.add(RETENTION).add(toByteArray(retentionPeriod));\n        }\n        if (encoding != null) {\n            args.add(ENCODING).add(encoding);\n        }\n        if (chunkSize != null) {\n            args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n        }\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n        if (ignore) {\n            args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n        }\n        if (labels != null) {\n            args.add(LABELS);\n            labels.entrySet().forEach((entry)->args.add(entry.getKey()).add(entry.getValue()));\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "115", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n\n        final Elst obj = new Elst();\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n        final int entryCount = stream.readInt();\n        if (entryCount<1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1)*(DataReader.LONG_SIZE*2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n        obj.bMediaRate = stream.readInt();\n        return obj;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "197", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n        try {\n            long rangeStart = (mMission.unknownLength || start < 1) ?- 1: start;\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, - 1);\n            if (mRetryCount == 0 && rangeStart == - 1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n\n            if (!mMission.unknownLength) mMission.unknownLength = Utility.getContentLength(mConn) == - 1;\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current ] - mMission.offsets[0];\n            }\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current ] + start);\n            mIs = mConn.getInputStream();\n\n\n            byte [] buf = new byte [DownloadMission.BUFFER_SIZE];\n            int len = 0;\n            while(mMission.running && (len = mIs.read(buf, 0, buf.length)) != - 1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == - 1;\n        }\n\n            catch(Exception e ) {\n            dispose();\n            mMission.fallbackResumeOffset = start;\n            if (!mMission.running || e instanceof ClosedByInterruptException) return;\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++\n>= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n            run();// try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "178", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n        try {\n            long rangeStart = (mMission.unknownLength|| start < 1) ? -1 : start;\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission. HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            if (mMission.unknownLength|| mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[ mMission.current ] - mMission.offsets[0];\n            }\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[ mMission.current ] + start);\n            mIs = mConn.getInputStream();\n\n            byte[] buf = new byte[ DownloadMission.BUFFER_SIZE];\n            int len = 0;\n            while(mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n            mMission.fallbackResumeOffset = start;\n            if (!mMission.running|| e instanceof ClosedByInterruptException) return;\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n            run();// try again\n            return;\n        }\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "154", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\" )\n    public String determineMachineType() {\n       try {\n        boolean isDocker = runningInDocker();\n        boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n        boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n        if (isKubernetes) {\n           return \"Kubernetes\";\n        } else if (isDocker) {\n          return \"Docker\";\n        } else if (isBrowserOpen) {\n          String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n          if (os.contains(\"win\")) {\n                   return \"Client-windows\";\n          } else if (os.contains(\"mac\")) {\n            return \"Client-mac\";\n          } else {\n            return \"Client-unix\";\n          }\n               } else {\n                 return \"Server-jar\";\n               }\n       } catch (Exception e) {\n         return \"Unknown\";\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "95", "src_id": "M106", "code": "\n    private Row createRowIfNecessary(Sheet sheet, Sheet cachedSheet, Integer lastRowIndex, FillConfig fillConfig, AnalysisCell analysisCell, boolean isOriginalCell, RowWriteHandlerContext rowWriteHandlerContext) {\n        rowWriteHandlerContext.setRowIndex(lastRowIndex);\n        Row row = sheet.getRow(lastRowIndex);\n        if (row != null) {\n            checkRowHeight(analysisCell, fillConfig, isOriginalCell, row);\n            rowWriteHandlerContext.setRow(row);\n            return row;\n        }\n        row = cachedSheet.getRow(lastRowIndex);\n        if (row == null) {\n            rowWriteHandlerContext.setRowIndex(lastRowIndex);\n            WriteHandlerUtils.beforeRowCreate(rowWriteHandlerContext);\n            if (fillConfig.getForceNewRow()) {\n                row = cachedSheet.createRow(lastRowIndex);\n            } else {\n                // The last row of the middle disk inside empty rows, resulting in cachedSheet can not get inside.\n                // Will throw Attempting to write a row[\" + rownum + \"] \" + \"in the range [0,\" + this._sh\n                // .getLastRowNum() + \"] that is already written to disk.\n                try {\n                    row = sheet.createRow(lastRowIndex);\n                }\n\n                    catch(IllegalArgumentException ignore ) {\n                    row = cachedSheet.createRow(lastRowIndex);\n                }\n            }\n            rowWriteHandlerContext.setRow(row);\n            checkRowHeight(analysisCell, fillConfig, isOriginalCell, row);\n            WriteHandlerUtils.afterRowCreate(rowWriteHandlerContext);\n        } else {\n            checkRowHeight(analysisCell, fillConfig, isOriginalCell, row);\n            rowWriteHandlerContext.setRow(row);\n        }\n        return row;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "135", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(PDDocument document, List<EmailAttachment> attachments) throws IOException {\n\n    if (document.getNumberOfPages() == 0 || attachments == null|| attachments.isEmpty()) {\n        return;\n    }\n\n        // 1. Find the screen position of all attachment markers\n    AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n    finder.setSortByPosition(true); // Process pages in order\n    finder.getText(document);\n    List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n    if (markerPositions.size() != attachments.size()) {\n        log.warn(\"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n            markerPositions.size(),\n            attachments.size());\n    }\n\n        // 3. Create an invisible annotation over each found marker\n    int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n\n    for (int i = 0; i < annotationsToAdd; i++) {\n        MarkerPosition position = markerPositions.get(i);\n        EmailAttachment attachment = attachments.get(i);\n        if (attachment.getEmbeddedFilename() != null) {\n                                                   PDPage page = document.getPage(position.getPageIndex());\n                                                   addAttachmentAnnotationToPage(document, page, attachment, position.getX(), position.getY());\n        }\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "8", "src_id": "M95", "code": "\n    public static HealthCountsStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs) {\n        HealthCountsStream initialStream = streams.get(commandKey.name());\n\n        if (initialStream != null) {\n            return initialStream;\n        } else {\n            final HealthCountsStream healthStream;\n            synchronized(HealthCountsStream.class) {\n                                                   HealthCountsStream existingStream = streams.get(commandKey.name());\n\n                                                   if (existingStream == null) {\n                                                       HealthCountsStream newStream = new HealthCountsStream(commandKey, numBuckets, bucketSizeInMs, HystrixCommandMetrics.appendEventToBucket);\n                                                       streams.putIfAbsent(commandKey.name(), newStream);\n                                                       healthStream = newStream;\n                                                   } else {\n                                                       healthStream = existingStream;\n                                                   }\n            }\n\n            healthStream.startCachingStreamValuesIfUnstarted();\n            return healthStream;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "32", "src_id": "M31", "code": "\n    private JsonNode validateLicense(String licenseKey,\n        String machineFingerprint, LicenseContext context) throws Exception {\n        String requestBody = String.format(\"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\", licenseKey, machineFingerprint);\n        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\")).header(\"Content-Type\", \"application/vnd.api+json\").header(\"Accept\", \"application/vnd.api+json\")\n                        // .header(\"Authorization\", \"License \" + licenseKey).POST(HttpRequest.BodyPublishers.ofString(requestBody)).build();\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n                log.info(\"License floating (from license): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n                log.info(\"License floating (from policy): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n\n            int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"isEnterprise\").asBoolean(false);\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        return jsonResponse;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "75", "src_id": "M1131", "code": "\n    private static Object process(final RedisInputStream is) {\n        final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n        switch(b) {\ncase PLUS_BYTE:\nreturn is.readLineBytes();\n                  case DOLLAR_BYTE: case EQUAL_BYTE:\n            return processBulkReply(is);\n                  case ASTERISK_BYTE:\n            return processMultiBulkReply(is);\n                  case UNDERSCORE_BYTE:\n            return is.readNullCrLf();\n                  case HASH_BYTE:\n            return is.readBooleanCrLf();\n                  case COLON_BYTE:\n            return is.readLongCrLf();\n                  case COMMA_BYTE:\n            return is.readDoubleCrLf();\n                  case LEFT_BRACE_BYTE:\n            return is.readBigIntegerCrLf();\n                  case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n            return processMapKeyValueReply(is);\n                  case TILDE_BYTE: // TODO:\n            return processMultiBulkReply(is);\n                  case GREATER_THAN_BYTE:\n            return processMultiBulkReply(is);\n                  case MINUS_BYTE:\n                  processError(is);\n                  return null;\n      // TODO: Blob error '!'\n                  default:\nthrow new JedisConnectionException(\"Unknown reply: \" + (char)b);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "179", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount)throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n        out.flush();\n        aux.flush();\n\n        boolean underflow = aux.offset < aux.length|| out.offset < out.length;\n        byte[] buffer = new byte[ COPY_BUFFER_SIZE];\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while(length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n        out.length += amount;\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n            aux.length -= amount;\n            length = aux.length;\n            while(length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n                aux.target.seek(readOffset);\n            }\n            aux.target.setLength(aux.length);\n            return;\n        }\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n        }\n        aux.reset();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "116", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n        if (DEBUG&&!mMission.unknownLength&&start> 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n        try {\n            long rangeStart = (mMission.unknownLength||start<1)?-1:start;\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n            if (mRetryCount == 0&&rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416&&start> 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission . HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            if (mMission.unknownLength||mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n            mIs = mConn.getInputStream();\n            byte [] buf = new byte [DownloadMission.BUFFER_SIZE];\n            int len = 0;\n            while (mMission.running&&(len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n            mMission.fallbackResumeOffset = start;\n            if (!mMission.running||e instanceof ClosedByInterruptException) return;\n            if (e instanceof HttpError&&((HttpError)e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n            if (mRetryCount++>=mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n            run();// try again\n            return;\n        }\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "198", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n        out.flush();\n        aux.flush();\n\n\n        boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        byte [] buffer = new byte [COPY_BUFFER_SIZE];\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n\n        long length = amount;\n        while(length > 0) {\n            int read = (int)Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n        out.length += amount;\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n            aux.length -= amount;\n            length = aux.length;\n            while(length > 0) {\n                int read = (int)Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n                aux.target.seek(readOffset);\n            }\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n        }\n        aux.reset();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "33", "src_id": "M488", "code": "\n    @ PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\") @Operation(summary = \"Convert a file to a PDF using LibreOffice\", description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\" + \" Output:PDF Type:SISO\") public ResponseEntity<byte []> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n            PDDocument doc = pdfDocumentFactory.load(file);\n            return WebResponseUtils.pdfDocToWebResponse(doc, Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\");\n        }\nfinally {\n            if (file != null) file.delete();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "9", "src_id": "M118", "code": "\n    public Map<ExecutionSignature, List < Integer >> getExecutionsMappedToLatencies() {\n        Map<CommandAndCacheKey, Integer> cachingDetector = new HashMap<CommandAndCacheKey, Integer>();\n        List < HystrixInvokableInfo < ?>> nonCachedExecutions = new ArrayList < HystrixInvokableInfo < ?>>(executions.size());\n        for (HystrixInvokableInfo < ?> execution : executions) {\n            if (execution.getPublicCacheKey() != null) {\n                //eligible for caching - might be the initial, or might be from cache\n                CommandAndCacheKey key = new CommandAndCacheKey(execution.getCommandKey().name(), execution.getPublicCacheKey());\n                Integer count = cachingDetector.get(key);\n\n                if (count != null) {\n                    //key already seen\n                    cachingDetector.put(key, count + 1);\n                } else {\n                    //key not seen yet\n                    cachingDetector.put(key, 0);\n                }\n            }\n\n            if (!execution.isResponseFromCache()) {\n                nonCachedExecutions.add(execution);\n            }\n        }\n\n        Map<ExecutionSignature, List < Integer >> commandDeduper = new HashMap<ExecutionSignature, List < Integer >>();\n        for (HystrixInvokableInfo < ?> execution : nonCachedExecutions) {\n            int cachedCount = 0;\n            String cacheKey = execution.getPublicCacheKey();\n\n            if (cacheKey != null) {\n                CommandAndCacheKey key = new CommandAndCacheKey(execution.getCommandKey().name(), cacheKey);\n                cachedCount = cachingDetector.get(key);\n            }\n\n            ExecutionSignature signature;\n\n            if (cachedCount > 0) {\n                //this has a RESPONSE_FROM_CACHE and needs to get split off\n                signature = ExecutionSignature.from(execution, cacheKey, cachedCount);\n            } else {\n                //nothing cached from this, can collapse further\n                signature = ExecutionSignature.from(execution);\n            }\n\n            List < Integer > currentLatencyList = commandDeduper.get(signature);\n\n            if (currentLatencyList != null) {\n                currentLatencyList.add(execution.getExecutionTimeInMilliseconds());\n            } else {\n                List < Integer > newLatencyList = new ArrayList < Integer >();\n                newLatencyList.add(execution.getExecutionTimeInMilliseconds());\n                commandDeduper.put(signature, newLatencyList);\n            }\n        }\n\n        return commandDeduper;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "76", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n        List list = (List)data;\n        if (list == null||list.isEmpty()) return null;\n        if (list.get(0)instanceof KeyValue) { // RESP3\n            Object resultsData = null, profileData = null;\n            for(KeyValue keyValue :(List<KeyValue>)data) {\n                String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n                switch(keyStr) {\n                                                              case PROFILE_STR_REDIS7: case PROFILE_STR_REDIS8:\n                                                              profileData = keyValue.getValue();\n                                                              break;\n                               case RESULTS_STR_REDIS7:\n                               resultsData = data;\n                               break;\n                               case RESULTS_STR_REDIS8:\n                               resultsData = keyValue.getValue();\n                               break;\n                }\n            }\n            assert resultsData != null: \"Could not detect Results data.\";\n            assert profileData != null: \"Could not detect Profile data.\";\n            return KeyValue.of(resultsBuilder.build(resultsData), ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n        }\n        return KeyValue.of(resultsBuilder.build(list.get(0)), ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "96", "src_id": "M12", "code": "\n    private Object buildNoModel(Map<Integer, ReadCellData <?>> cellDataMap, ReadSheetHolder readSheetHolder, AnalysisContext context) {\n        int index = 0;\n        Map<Integer, Object> map = MapUtils.newLinkedHashMapWithExpectedSize(cellDataMap.size());\n        for(Map.Entry<Integer, ReadCellData <?>> entry :cellDataMap.entrySet()) {\n            Integer key = entry.getKey();\n            ReadCellData<?> cellData = entry.getValue();\n            while(index < key) {\n                map.put(index, null);\n                index++;\n            }\n            index++;\n            ReadDefaultReturnEnum readDefaultReturn = context.readWorkbookHolder().getReadDefaultReturn();\n            if (readDefaultReturn == ReadDefaultReturnEnum.STRING) {\n                // string\n                map.put(key, (String) ConverterUtils.convertToJavaObject(cellData, null, null, readSheetHolder.converterMap(), context, context.readRowHolder().getRowIndex(), key));\n            } else {\n                // retrun ReadCellData\n                ReadCellData<?> convertedReadCellData = convertReadCellData(cellData, context.readWorkbookHolder().getReadDefaultReturn(), readSheetHolder, context, key);\n                if (readDefaultReturn == ReadDefaultReturnEnum.READ_CELL_DATA) {\n                    map.put(key, convertedReadCellData);\n                } else {\n                    map.put(key, convertedReadCellData.getData());\n                }\n            }\n        }\n        // fix https://github.com/alibaba/easyexcel/issues/2014\n\n        int headSize = calculateHeadSize(readSheetHolder);\n        while(index < headSize) {\n            map.put(index, null);\n            index++;\n        }\n        return map;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "155", "src_id": "M101", "code": "\n    private void processRequest(int limitPerDay, String identifier, Map<String, Bucket> buckets, HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n       Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n       ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n       if (probe.isConsumed()) {\n        response.setHeader(\"X-Rate-Limit-Remaining\", stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n        filterChain.doFilter(request, response);\n       } else {\n         long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n         response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n         response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Newlines.stripAll(String.valueOf(waitForRefill)));\n         response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "117", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        if (aux.length<1) {\n            return;\n        }\n        out.flush();\n        aux.flush();\n        boolean underflow = aux.offset<aux.length||out.offset<out.length;\n        byte [] buffer = new byte [COPY_BUFFER_SIZE];\n        aux.target.seek(0);\n        out.target.seek(out.length);\n        long length = amount;\n        while (length> 0) {\n            int read = (int)Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n            if (read<1) {\n                amount -= length;\n                break;\n            }\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n        if (underflow) {\n            if (out.offset>=out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset<amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n        out.length += amount;\n        if (out.length> maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n        if (amount<aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n            aux.length -= amount;\n            length = aux.length;\n            while (length> 0) {\n                int read = (int)Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n                aux.target.seek(readOffset);\n            }\n            aux.target.setLength(aux.length);\n            return;\n        }\n        if (aux.length> THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n        }\n        aux.reset();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "10", "src_id": "M223", "code": "\n    public ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties) {\n        final ThreadFactory threadFactory = getThreadFactory(threadPoolKey);\n        final boolean allowMaximumSizeToDivergeFromCoreSize = threadPoolProperties.getAllowMaximumSizeToDivergeFromCoreSize().get();\n        final int dynamicCoreSize = threadPoolProperties.coreSize().get();\n        final int keepAliveTime = threadPoolProperties.keepAliveTimeMinutes().get();\n        final int maxQueueSize = threadPoolProperties.maxQueueSize().get();\n        final BlockingQueue < Runnable > workQueue = getBlockingQueue(maxQueueSize);\n\n        if (allowMaximumSizeToDivergeFromCoreSize) {\n            final int dynamicMaximumSize = threadPoolProperties.maximumSize().get();\n\n            if (dynamicCoreSize > dynamicMaximumSize) {\n                logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \" + dynamicCoreSize + \" and maximumSize = \" + dynamicMaximumSize + \".  Maximum size will be set to \" + dynamicCoreSize + \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n                return new ThreadPoolExecutor(dynamicCoreSize, dynamicCoreSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n            } else {\n                return new ThreadPoolExecutor(dynamicCoreSize, dynamicMaximumSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n            }\n        } else {\n            return new ThreadPoolExecutor(dynamicCoreSize, dynamicCoreSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "180", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) request.append(' ').append(recovery.toString()).append(' ');\n        }\n        request.append(\"]\");\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n        ErrorUtil.createNotification(mContext, new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action, service, request.toString(), reason));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "52", "src_id": "M1277", "code": "\n    public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n        Map<String, String> output = new HashMap< >(input.size());\n        for (Map.Entry<String, Object> entry : input.entrySet()) {\n            String key = entry.getKey();\n            Object obj = entry.getValue();\n            if (key == null ||obj == null) {\n                throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n            }\n\n            String str;\n            if (obj instanceof byte[]) {\n                str = SafeEncoder.encode((byte[]) obj);\n            } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n                redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n                str = geo.getLongitude() + \",\" + geo.getLatitude();\n            } else if (obj instanceof String) {\n                       str = stringEscape?escape((String) obj): (String) obj;\n                   } else {\n                       str = String.valueOf(obj);\n                   }\n\n            output.put(key, str);\n        }\n\n        return output;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "199", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for(MissionRecoveryInfo recovery :mission.recoveryInfo ) request.append(' ').append(recovery.toString()).append(' ');\n        }\n        request.append(\"]\");\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo()\n                                                             .getName();\n        }\n\n            catch(Exception e ) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n        ErrorUtil.createNotification(mContext, new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action, service, request.toString(), reason));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "77", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager [] keyManagers = null;\n        TrustManager [] trustManagers = null;\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n                   this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n               } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n                          trustManagers = new TrustManager[] {\n                          INSECURE_TRUST_MANAGER};\n                      }\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n        if (trustManagers == null&&truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n        return sslContext;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "118", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action,\n                           @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for(MissionRecoveryInfo recovery :mission.recoveryInfo) request.append(' ').append(recovery.toString()).append(' ');\n        }\n        request.append(\"]\");\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n        ErrorUtil.createNotification(mContext, new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action, service, request.toString(), reason));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "11", "src_id": "M498", "code": "\n    protected static String convertToJson(HystrixUtilization utilization) throws IOException {\n        StringWriter jsonString = new StringWriter();\n        JsonGenerator json = jsonFactory.createGenerator(jsonString);\n        json.writeStartObject();\n        json.writeStringField(\"type\", \"HystrixUtilization\");\n        json.writeObjectFieldStart(\"commands\");\n        for (Map.Entry<HystrixCommandKey, HystrixCommandUtilization> entry : utilization.getCommandUtilizationMap().entrySet()) {\n            final HystrixCommandKey key = entry.getKey();\n            final HystrixCommandUtilization commandUtilization = entry.getValue();\n            writeCommandUtilizationJson(json, key, commandUtilization);\n        }\n\n        json.writeEndObject();\n        json.writeObjectFieldStart(\"threadpools\");\n        for (Map.Entry<HystrixThreadPoolKey, HystrixThreadPoolUtilization> entry : utilization.getThreadPoolUtilizationMap().entrySet()) {\n            final HystrixThreadPoolKey threadPoolKey = entry.getKey();\n            final HystrixThreadPoolUtilization threadPoolUtilization = entry.getValue();\n            writeThreadPoolUtilizationJson(json, threadPoolKey, threadPoolUtilization);\n        }\n\n        json.writeEndObject();\n        json.writeEndObject();\n        json.close();\n        return jsonString.getBuffer().toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "97", "src_id": "M94", "code": "\n    private void fillComment(CellWriteHandlerContext cellWriteHandlerContext, CommentData commentData) {\n        if (commentData == null) {\n            return;\n        }\n        ClientAnchor anchor;\n        Integer rowIndex = cellWriteHandlerContext.getRowIndex();\n        Integer columnIndex = cellWriteHandlerContext.getColumnIndex();\n        Sheet sheet = cellWriteHandlerContext.getWriteSheetHolder().getSheet();\n        Cell cell = cellWriteHandlerContext.getCell();\n        if (writeContext.writeWorkbookHolder().getExcelType() == ExcelTypeEnum.XLSX) {\n            anchor = new XSSFClientAnchor(StyleUtil.getCoordinate(commentData.getLeft()), StyleUtil.getCoordinate(commentData.getTop()), StyleUtil.getCoordinate(commentData.getRight()), StyleUtil.getCoordinate(commentData.getBottom()), StyleUtil.getCellCoordinate(columnIndex, commentData.getFirstColumnIndex(), commentData.getRelativeFirstColumnIndex()), StyleUtil.getCellCoordinate(rowIndex, commentData.getFirstRowIndex(), commentData.getRelativeFirstRowIndex()), StyleUtil.getCellCoordinate(columnIndex, commentData.getLastColumnIndex(), commentData.getRelativeLastColumnIndex()) + 1, StyleUtil.getCellCoordinate(rowIndex, commentData.getLastRowIndex(), commentData.getRelativeLastRowIndex()) + 1);\n        } else {\n            anchor = new HSSFClientAnchor(StyleUtil.getCoordinate(commentData.getLeft()), StyleUtil.getCoordinate(commentData.getTop()), StyleUtil.getCoordinate(commentData.getRight()), StyleUtil.getCoordinate(commentData.getBottom()), (short)StyleUtil.getCellCoordinate(columnIndex, commentData.getFirstColumnIndex(), commentData.getRelativeFirstColumnIndex()), StyleUtil.getCellCoordinate(rowIndex, commentData.getFirstRowIndex(), commentData.getRelativeFirstRowIndex()), (short) (StyleUtil.getCellCoordinate(columnIndex, commentData.getLastColumnIndex(), commentData.getRelativeLastColumnIndex()) + 1), StyleUtil.getCellCoordinate(rowIndex, commentData.getLastRowIndex(), commentData.getRelativeLastRowIndex()) + 1);\n        }\n        Comment comment = sheet.createDrawingPatriarch().createCellComment(anchor);\n        if (commentData.getRichTextStringData() != null) {\n            comment.setString(StyleUtil.buildRichTextString(writeContext.writeWorkbookHolder(), commentData.getRichTextStringData()));\n        }\n\n        if (commentData.getAuthor() != null) {\n            comment.setAuthor(commentData.getAuthor());\n        }\n        cell.setCellComment(comment);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "35", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n            byte [] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n            log.info(\"Decoded certificate payload: {}\", payload);\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String)attrs.get(\"enc\");\n                encodedSignature = (String)attrs.get(\"sig\");\n                algorithm = (String)attrs.get(\"alg\");\n            }\ncatch(JSONException e ) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            }\ncatch(IllegalArgumentException e ) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n\n            boolean isValid = processCertificateData(decodedData, context);\n            return isValid;\n        }\n            catch(Exception e ) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "156", "src_id": "M270", "code": "\n    private static String normalizeArch(String value) {\n       value = normalize(value);\n       if (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n        return \"x86_64\";\n       }\n\n       if (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n        return \"x86_32\";\n       }\n\n       if (value.matches(\"^(ia64w?|itanium64)$\")) {\n        return \"itanium_64\";\n       }\n\n       if (\"ia64n\".equals(value)) {\n        return \"itanium_32\";\n       }\n\n       if (value.matches(\"^(sparc|sparc32)$\")) {\n        return \"sparc_32\";\n       }\n\n       if (value.matches(\"^(sparcv9|sparc64)$\")) {\n        return \"sparc_64\";\n       }\n\n       if (value.matches(\"^(arm|arm32)$\")) {\n        return \"arm_32\";\n       }\n\n       if (\"aarch64\".equals(value)) {\n        return \"aarch_64\";\n       }\n\n       if (value.matches(\"^(mips|mips32)$\")) {\n        return \"mips_32\";\n       }\n\n       if (value.matches(\"^(mipsel|mips32el)$\")) {\n        return \"mipsel_32\";\n       }\n\n       if (\"mips64\".equals(value)) {\n        return \"mips_64\";\n       }\n\n       if (\"mips64el\".equals(value)) {\n        return \"mipsel_64\";\n       }\n\n       if (value.matches(\"^(ppc|ppc32)$\")) {\n        return \"ppc_32\";\n       }\n\n       if (value.matches(\"^(ppcle|ppc32le)$\")) {\n        return \"ppcle_32\";\n       }\n\n       if (\"ppc64\".equals(value)) {\n        return \"ppc_64\";\n       }\n\n       if (\"ppc64le\".equals(value)) {\n        return \"ppcle_64\";\n       }\n\n       if (\"s390\".equals(value)) {\n        return \"s390_32\";\n       }\n\n       if (\"s390x\".equals(value)) {\n        return \"s390_64\";\n       }\n       return value;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "181", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized(this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while(true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) throw new RuntimeException(\"Cant create download metadata file\");\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                return;\n            }\n            boolean start = !mPrefQueueLimit|| getRunningMissionsCount() < 1;\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "53", "src_id": "M902", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (retentionPeriod != null) {\n            args.add(RETENTION).add(toByteArray(retentionPeriod));\n        }\n        if (encoding != null) {\n            args.add(ENCODING).add(encoding);\n        }\n        if (chunkSize != null) {\n            args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n        }\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n        if (ignore) {\n            args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n        }\n        if (labels != null) {\n            args.add(LABELS);\n            labels.entrySet().forEach((entry)->args.add(entry.getKey()).add(entry.getValue()));\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "78", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n        List<KeyValue> list = (List<KeyValue>)data;\n        Map<String, Object> properties = new HashMap<>();\n        Map<String, String> labels = null;\n        Map<String, Rule> rules = null;\n        List<Map<String, Object>> chunks = null;\n        for(KeyValue propertyValue :list) {\n            String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n            Object value = propertyValue.getValue();\n            if (value instanceof List) {\n                switch(prop) {\n                                         case LABELS_PROPERTY:\n                                         labels = BuilderFactory.STRING_MAP.build(value);\n                                         value = labels;\n                                         break;\n                             case RULES_PROPERTY:\n                             List<KeyValue> rulesDataList = (List<KeyValue>)value;\n                             Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n                             rules = new HashMap<>(rulesDataList.size());\n                             for(KeyValue rkv :rulesDataList) {\n                                 String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                                 List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                                 rulesValueMap.put(ruleName, ruleValueList);\n                                 rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                             }\n                             value = rulesValueMap;\n                             break;\n                             case CHUNKS_PROPERTY:\n                             List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>)value;\n                             List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n                             chunks = new ArrayList<>(chunksDataList.size());\n                             for(List<KeyValue> chunkDataAsList :chunksDataList) {\n                                 Map<String, Object> chunk = chunkDataAsList.stream().collect(Collectors.toMap(kv->BuilderFactory.STRING.build(kv.getKey()), kv->BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                                 chunksValueList.add(chunk);\n                                 chunks.add(chunk);\n                             }\n                             value = chunksValueList;\n                             break;\n                             default:\n                             value = SafeEncoder.encodeObject(value);\n                             break;\n                }\n            } else if (value instanceof byte []) {\n                       value = BuilderFactory.STRING.build(value);\n                       if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                           try {\n                               value = DuplicatePolicy.valueOf(((String)value).toUpperCase());\n                           } catch (Exception e) {\n\n                           }\n                       }\n                   }\n            properties.put(prop, value);\n        }\n        return new TSInfo(properties, labels, rules, chunks);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "12", "src_id": "M171", "code": "\n    EventCounts plus(HystrixEventType eventType, int count) {\n        BitSet newBitSet = (BitSet) events.clone();\n        int localNumEmits = numEmissions;\n        int localNumFallbackEmits = numFallbackEmissions;\n        int localNumCollapsed = numCollapsed;\n        switch (eventType) {\n            case EMIT:\n                newBitSet.set(HystrixEventType.EMIT.ordinal());\n                localNumEmits += count;\n                break;\n            case FALLBACK_EMIT:\n                newBitSet.set(HystrixEventType.FALLBACK_EMIT.ordinal());\n                localNumFallbackEmits += count;\n                break;\n            case COLLAPSED:\n                newBitSet.set(HystrixEventType.COLLAPSED.ordinal());\n                localNumCollapsed += count;\n                break;\n            default:\n                newBitSet.set(eventType.ordinal());\n                break;\n        }\n\n        return new EventCounts(newBitSet, localNumEmits, localNumFallbackEmits, localNumCollapsed);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "36", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(Path zipFilePath,\n        boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n            try (ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n                ZipEntry entry = zipIn.getNextEntry();\n                while (entry != null) {\n                    Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        if (entry.getName().toLowerCase().endsWith(\".html\")\n                            || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                            Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } // tempUnzippedDir auto-cleaned\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "119", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized(this) {\n                           mission.timestamp = System.currentTimeMillis();\n                           mission.mHandler = mHandler;\n                           mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n                           while (true) {\n                               mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                               if (!mission.metadata.isFile()&&!mission.metadata.exists()) {\n                                   try {\n                                       if (!mission.metadata.createNewFile()) throw new RuntimeException(\"Cant create download metadata file\");\n                                   } catch (IOException e) {\n                                       throw new RuntimeException(e);\n                                   }\n                                   break;\n                               }\n                               mission.timestamp = System.currentTimeMillis();\n                           }\n                           mSelfMissionsControl = true;\n                           mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n                           Utility.writeToFile(mission.metadata, mission);\n                           if (mission.storage == null) {\n                // noting to do here\n                               mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                               if (mission.errObject != null) mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                               return;\n                           }\n\n\n                           boolean start = !mPrefQueueLimit||getRunningMissionsCount()<1;\n                           if (canDownloadInCurrentNetwork()&&start) {\n                               mission.start();\n                           }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "200", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized(this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while(true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) throw new RuntimeException(\"Cant create download metadata file\");\n                    }\n\n                        catch(IOException e ) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "37", "src_id": "M317", "code": "\n    public static void addImageToDocument(PDDocument doc,\n        PDImageXObject image,\n        String fitOption, boolean autoRotate) throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n        try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption)\n                || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                       float imageAspectRatio = (float)image.getWidth()/(float)image.getHeight();\n                       float pageAspectRatio = pageWidth/pageHeight;\n                       float scaleFactor = 1.0f;\n                       if (imageAspectRatio > pageAspectRatio) {\n                           scaleFactor = pageWidth/image.getWidth();\n                       } else {\n                           scaleFactor = pageHeight/image.getHeight();\n                       }\n\n                       float xPos = (pageWidth - (image.getWidth()*scaleFactor))/ 2;\n                       float yPos = (pageHeight - (image.getHeight()*scaleFactor))/ 2;\n                       contentStream.drawImage(image, xPos, yPos, image.getWidth()*scaleFactor, image.getHeight()*scaleFactor);\n                   }\n        }\n            catch(IOException e ) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "182", "src_id": "M1136", "code": "\n    @Override int process(SharpStream out, SharpStream ... sources)throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n        if (format == null|| format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n                   byte[] buffer = new byte[8 * 1024];\n                   int read;\n                   while((read = sources[0].read(buffer)) > 0) {\n                       out.write(buffer, 0, read);\n                   }\n                   return OK_RESULT;\n               }\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "98", "src_id": "M212", "code": "\n    private Format getFormat(Double data, Short dataFormat, String dataFormatString) {\n\n        // Might be better to separate out the n p and z formats, falling back to p when n and z are not set.\n        // That however would require other code to be re factored.\n        // String[] formatBits = formatStrIn.split(\";\");\n        // int i = cellValue > 0.0 ? 0 : cellValue < 0.0 ? 1 : 2;\n        // String formatStr = (i < formatBits.length) ? formatBits[i] : formatBits[0];\n        String formatStr = dataFormatString;\n\n        // Excel supports 2+ part conditional data formats, eg positive/negative/zero,\n        //  or (>1000),(>0),(0),(negative). As Java doesn't handle these kinds\n        //  of different formats for different ranges, just +ve/-ve, we need to\n        //  handle these ourselves in a special way.\n        // For now, if we detect 2+ parts, we call out to CellFormat to handle it\n        // TODO Going forward, we should really merge the logic between the two classes\n        if (formatStr.contains(\";\") && (formatStr.indexOf(';') != formatStr.lastIndexOf(';')\n                                            || rangeConditionalPattern.matcher(formatStr).matches())) {\n            try {\n                // Ask CellFormat to get a formatter for it\n                CellFormat cfmt = CellFormat.getInstance(locale, formatStr);\n                // CellFormat requires callers to identify date vs not, so do so\n                Object cellValueO = data;\n                if (DateUtils.isADateFormat(dataFormat, formatStr) &&\n                    // don't try to handle Date value 0, let a 3 or 4-part format take care of it data.doubleValue() != 0.0) {\n                    cellValueO = DateUtils.getJavaDate(data, use1904windowing);\n                }\n                // Wrap and return (non-cachable - CellFormat does that)\n                return new CellFormatResultWrapper(cfmt.apply(cellValueO));\n            }\n\n                catch(Exception e ) {\n                LOGGER.warn(\"Formatting failed for format {}, falling back\", formatStr, e);\n            }\n        }\n\n        // See if we already have it cached\n        Format format = formats.get(formatStr);\n        if (format != null) {\n            return format;\n        }\n\n        // Is it one of the special built in types, General or @?\n\n        if (\"General\"\n            .equalsIgnoreCase(formatStr)\n                || \"@\"\n                    .equals(formatStr)) {\n            format = getDefaultFormat();\n            addFormat(formatStr, format);\n            return format;\n        }\n\n        // Build a formatter, and cache it\n        format = createFormat(dataFormat, formatStr);\n        addFormat(formatStr, format);\n        return format;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "54", "src_id": "M1131", "code": "\n    private static Object process(final RedisInputStream is) {\n        final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n        switch(b) {\n                  case PLUS_BYTE:\n                  return is.readLineBytes();\n                  case DOLLAR_BYTE: case EQUAL_BYTE:\n            return processBulkReply(is);\n                  case ASTERISK_BYTE:\n            return processMultiBulkReply(is);\n                  case UNDERSCORE_BYTE:\n            return is.readNullCrLf();\n                  case HASH_BYTE:\n            return is.readBooleanCrLf();\n                  case COLON_BYTE:\n            return is.readLongCrLf();\n                  case COMMA_BYTE:\n            return is.readDoubleCrLf();\n                  case LEFT_BRACE_BYTE:\n            return is.readBigIntegerCrLf();\n                  case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n            return processMapKeyValueReply(is);\n                  case TILDE_BYTE: // TODO:\n            return processMultiBulkReply(is);\n                  case GREATER_THAN_BYTE:\n            return processMultiBulkReply(is);\n                  case MINUS_BYTE:\n            processError(is);\n            return null;\n      // TODO: Blob error '!'\n                  default:\n            throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "157", "src_id": "M928", "code": "\n    private static Map<String, Object> doGetLoggerInfo(Logger logger) {\n       Map<String, Object> info = new HashMap<String, Object>();\n       info.put(LoggerHelper.name, logger.getName());\n       info.put(LoggerHelper.clazz, logger.getClass());\n       CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n       if (codeSource != null) {\n        info.put(LoggerHelper.codeSource, codeSource.getLocation());\n       }\n       info.put(LoggerHelper.additivity, logger.getAdditivity());\n       Level level = logger.getLevel(), effectiveLevel = logger.getEffectiveLevel();\n       if (level != null) {\n        info.put(LoggerHelper.level, level.toString());\n       }\n\n       if (effectiveLevel != null) {\n        info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n       }\n       @SuppressWarnings(\"unchecked\" ) List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n       info.put(LoggerHelper.appenders, result);\n       return info;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "79", "src_id": "M897", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (retentionPeriod != null) {\n            args.add(RETENTION).add(toByteArray(retentionPeriod));\n        }\n        if (encoding != null) {\n            args.add(ENCODING).add(encoding);\n        }\n        if (chunkSize != null) {\n            args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n        }\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n        if (onDuplicate != null) {\n            args.add(ON_DUPLICATE).add(onDuplicate);\n        }\n        if (ignore) {\n            args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n        }\n        if (labels != null) {\n            args.add(LABELS);\n            labels.entrySet().forEach((entry)->args.add(entry.getKey()).add(entry.getValue()));\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "13", "src_id": "M448", "code": "\n    private static void writeThreadPoolMetrics(final HystrixThreadPoolMetrics threadPoolMetrics, JsonGenerator json) throws IOException {\n        HystrixThreadPoolKey key = threadPoolMetrics.getThreadPoolKey();\n        json.writeStartObject();\n        json.writeStringField(\"type\", \"HystrixThreadPool\");\n        json.writeStringField(\"name\", key.name());\n        json.writeNumberField(\"currentTime\", System.currentTimeMillis());\n        json.writeNumberField(\"currentActiveCount\", threadPoolMetrics.getCurrentActiveCount().intValue());\n        json.writeNumberField(\"currentCompletedTaskCount\", threadPoolMetrics.getCurrentCompletedTaskCount().longValue());\n        json.writeNumberField(\"currentCorePoolSize\", threadPoolMetrics.getCurrentCorePoolSize().intValue());\n        json.writeNumberField(\"currentLargestPoolSize\", threadPoolMetrics.getCurrentLargestPoolSize().intValue());\n        json.writeNumberField(\"currentMaximumPoolSize\", threadPoolMetrics.getCurrentMaximumPoolSize().intValue());\n        json.writeNumberField(\"currentPoolSize\", threadPoolMetrics.getCurrentPoolSize().intValue());\n        json.writeNumberField(\"currentQueueSize\", threadPoolMetrics.getCurrentQueueSize().intValue());\n        json.writeNumberField(\"currentTaskCount\", threadPoolMetrics.getCurrentTaskCount().longValue());\n        safelyWriteNumberField(json, \"rollingCountThreadsExecuted\", new Func0 < Long >() {\n                                                                        @Override public Long call() {\n                                                                            return threadPoolMetrics.getRollingCount(HystrixEventType.ThreadPool.EXECUTED);\n                                                                        }\n\n                                                                    });\n        json.writeNumberField(\"rollingMaxActiveThreads\", threadPoolMetrics.getRollingMaxActiveThreads());\n        safelyWriteNumberField(json, \"rollingCountCommandRejections\", new Func0 < Long >() {\n                                                                          @Override public Long call() {\n                                                                              return threadPoolMetrics.getRollingCount(HystrixEventType.ThreadPool.REJECTED);\n                                                                          }\n\n                                                                      });\n        json.writeNumberField(\"propertyValue_queueSizeRejectionThreshold\", threadPoolMetrics.getProperties().queueSizeRejectionThreshold().get());\n        json.writeNumberField(\"propertyValue_metricsRollingStatisticalWindowInMilliseconds\", threadPoolMetrics.getProperties().metricsRollingStatisticalWindowInMilliseconds().get());\n        json.writeNumberField(\"reportingHosts\", 1); // this will get summed across all instances in a cluster\n        json.writeEndObject();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "120", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out,SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n        if (format == null||format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException?1:8;\n            }\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n                   byte [] buffer = new byte [8*1024];\n                   int read;\n                   while ((read = sources[0].read(buffer))> 0) {\n                       out.write(buffer, 0, read);\n                   }\n                   return OK_RESULT;\n               }\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "38", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            // Get the MAC address\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte [] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (int i = 0; i < mac.length; i++) {\n                            sb.append(String.format(\"%02X\", mac[i ]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                byte [] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (int i = 0; i < mac.length; i++) {\n                        sb.append(String.format(\"%02X\", mac[i ]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte [] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        }\n            catch(Exception e ) {\n            return \"GenericID\";\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "201", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n        if (format == null\n                || format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n            try {\n                writer.build(sources[0]);\n            }\n\n                catch(Exception err ) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException?1:\n                    8;\n            }\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n                   byte [] buffer = new byte [8 * 1024];\n                   int read;\n                   while((read = sources[0]\n                       .read(buffer)) > 0) {\n                       out.write(buffer, 0, read);\n                   }\n                   return OK_RESULT;\n               }\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "183", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n        if (init != null&& init != currentThread && init.isAlive()) {\n            init.interrupt();\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n        for (Thread thread : threads) {\n            if (!thread.isAlive()|| thread == Thread.currentThread()) continue;\n            thread.interrupt();\n        }\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) continue;\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) thread.join(millis);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "80", "src_id": "M1213", "code": "\n    @Override\n    public Connection getConnection() {\n        List<ConnectionPool> pools = getShuffledNodesPool();\n        JedisException suppressed = null;\n        for(ConnectionPool pool :pools) {\n            Connection jedis = null;\n            try {\n                jedis = pool.getResource();\n                if (jedis == null) {\n                    continue;\n                }\n                jedis.ping();\n                return jedis;\n            } catch (JedisException ex) {\n                if (suppressed == null) { // remembering first suppressed exception\n                    suppressed = ex;\n                }\n                if (jedis != null) {\n                    jedis.close();\n                }\n            }\n        }\n\n\n        JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n        if (suppressed != null) {\n            noReachableNode.addSuppressed(suppressed);\n        }\n        throw noReachableNode;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "14", "src_id": "M69", "code": "\n    @Override public String toString() {\n        StringBuffer sb = new StringBuffer();\n        List < HystrixEventType > foundEventTypes = new ArrayList < HystrixEventType >();\n        sb.append(getCommandKey().name()).append(\"[\");\n        for (HystrixEventType eventType : ALL_EVENT_TYPES) {\n            if (executionResult.getEventCounts().contains(eventType)) {\n                foundEventTypes.add(eventType);\n            }\n        }\n\n        int i = 0;\n        for (HystrixEventType eventType : foundEventTypes) {\n            sb.append(eventType.name());\n\n            int eventCount = executionResult.getEventCounts().getCount(eventType);\n\n            if (eventCount > 1) {\n                sb.append(\"x\").append(eventCount);\n            }\n\n            if (i < foundEventTypes.size() - 1) {\n                sb.append(\", \");\n            }\n\n            i++;\n        }\n\n        sb.append(\"][\").append(getExecutionLatency()).append(\" ms]\");\n        return sb.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "39", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata() && runningProOrHigher) {\n            author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "55", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n        List list = (List) data;\n        if (list == null ||list.isEmpty()) return null;\n        if (list.get(0) instanceof KeyValue) { // RESP3\n            Object resultsData = null, profileData = null;\n            for (KeyValue keyValue : (List<KeyValue>) data) {\n                String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n                switch(keyStr) {\n                               case PROFILE_STR_REDIS7: case PROFILE_STR_REDIS8:\n                               profileData = keyValue.getValue();\n                               break;\n                               case RESULTS_STR_REDIS7:\n                    resultsData = data;\n                    break;\n                               case RESULTS_STR_REDIS8:\n                    resultsData = keyValue.getValue();\n                    break;\n                }\n            }\n\n            assert resultsData != null: \"Could not detect Results data.\";\n            assert profileData != null: \"Could not detect Profile data.\";\n            return KeyValue.of(resultsBuilder.build(resultsData), ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n        }\n\n        return KeyValue.of(resultsBuilder.build(list.get(0)), ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "99", "src_id": "M35", "code": "\n    private static void buildStyleProperty(StyleProperty styleProperty, WriteCellStyle writeCellStyle) {\n        if (styleProperty == null) {\n            return;\n        }\n\n        if (styleProperty.getDataFormatData() != null) {\n            if (writeCellStyle.getDataFormatData() == null) {\n                writeCellStyle.setDataFormatData(styleProperty.getDataFormatData());\n            } else {\n                DataFormatData.merge(styleProperty.getDataFormatData(), writeCellStyle.getDataFormatData());\n            }\n        }\n\n        if (styleProperty.getHidden() != null) {\n            writeCellStyle.setHidden(styleProperty.getHidden());\n        }\n\n        if (styleProperty.getLocked() != null) {\n            writeCellStyle.setLocked(styleProperty.getLocked());\n        }\n\n        if (styleProperty.getQuotePrefix() != null) {\n            writeCellStyle.setQuotePrefix(styleProperty.getQuotePrefix());\n        }\n\n        if (styleProperty.getHorizontalAlignment() != null) {\n            writeCellStyle.setHorizontalAlignment(styleProperty.getHorizontalAlignment());\n        }\n\n        if (styleProperty.getWrapped() != null) {\n            writeCellStyle.setWrapped(styleProperty.getWrapped());\n        }\n\n        if (styleProperty.getVerticalAlignment() != null) {\n            writeCellStyle.setVerticalAlignment(styleProperty.getVerticalAlignment());\n        }\n\n        if (styleProperty.getRotation() != null) {\n            writeCellStyle.setRotation(styleProperty.getRotation());\n        }\n\n        if (styleProperty.getIndent() != null) {\n            writeCellStyle.setIndent(styleProperty.getIndent());\n        }\n\n        if (styleProperty.getBorderLeft() != null) {\n            writeCellStyle.setBorderLeft(styleProperty.getBorderLeft());\n        }\n\n        if (styleProperty.getBorderRight() != null) {\n            writeCellStyle.setBorderRight(styleProperty.getBorderRight());\n        }\n\n        if (styleProperty.getBorderTop() != null) {\n            writeCellStyle.setBorderTop(styleProperty.getBorderTop());\n        }\n\n        if (styleProperty.getBorderBottom() != null) {\n            writeCellStyle.setBorderBottom(styleProperty.getBorderBottom());\n        }\n\n        if (styleProperty.getLeftBorderColor() != null) {\n            writeCellStyle.setLeftBorderColor(styleProperty.getLeftBorderColor());\n        }\n\n        if (styleProperty.getRightBorderColor() != null) {\n            writeCellStyle.setRightBorderColor(styleProperty.getRightBorderColor());\n        }\n\n        if (styleProperty.getTopBorderColor() != null) {\n            writeCellStyle.setTopBorderColor(styleProperty.getTopBorderColor());\n        }\n\n        if (styleProperty.getBottomBorderColor() != null) {\n            writeCellStyle.setBottomBorderColor(styleProperty.getBottomBorderColor());\n        }\n\n        if (styleProperty.getFillPatternType() != null) {\n            writeCellStyle.setFillPatternType(styleProperty.getFillPatternType());\n        }\n\n        if (styleProperty.getFillBackgroundColor() != null) {\n            writeCellStyle.setFillBackgroundColor(styleProperty.getFillBackgroundColor());\n        }\n\n        if (styleProperty.getFillForegroundColor() != null) {\n            writeCellStyle.setFillForegroundColor(styleProperty.getFillForegroundColor());\n        }\n\n        if (styleProperty.getShrinkToFit() != null) {\n            writeCellStyle.setShrinkToFit(styleProperty.getShrinkToFit());\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "121", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n        if (init != null&&init != currentThread&&init.isAlive()) {\n            init.interrupt();\n            if (millis> 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n        for(Thread thread :threads) {\n            if (!thread.isAlive()||thread == Thread.currentThread()) continue;\n            thread.interrupt();\n        }\n        try {\n            for(Thread thread :threads) {\n                if (!thread.isAlive()) continue;\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis> 0) thread.join(millis);\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "158", "src_id": "M9", "code": "\n    @SuppressWarnings(\"resource\" )\n    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n       Map<Long, String> processMap = listProcessByJps(v);\n        // Put the port that is already listening at the first\n       if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n        String telnetPortProcess = processMap.get(telnetPortPid);\n        processMap.remove(telnetPortPid);\n        Map<Long, String> newProcessMap = new LinkedHashMap<Long, String>();\n        newProcessMap.put(telnetPortPid, telnetPortProcess);\n        newProcessMap.putAll(processMap);\n        processMap = newProcessMap;\n       }\n\n       if (processMap.isEmpty()) {\n        AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n        return -1;\n       }\n\n        // select target process by the '--select' option when match only one process\n\n       if (select != null && !select.trim().isEmpty()) {\n        int matchedSelectCount = 0;\n        Long matchedPid = null;\n\n        for (Entry<Long, String> entry : processMap.entrySet()) {\n\n           if (entry.getValue().contains(select)) {\n                                                                    matchedSelectCount++;\n                                                                    matchedPid = entry.getKey();\n           }\n        }\n\n        if (matchedSelectCount == 1) {\n                                                           return matchedPid;\n        }\n       }\n       AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n        // print list\n       int count = 1;\n\n       for (String process : processMap.values()) {\n\n        if (count == 1) {\n           System.out.println(\"* [\" + count + \"]: \" + process);\n        } else {\n          System.out.println(\"  [\" + count + \"]: \" + process);\n        }\n        count++;\n       }\n\n        // read choice\n       String line = new Scanner(System.in).nextLine();\n       if (line.trim().isEmpty()) {\n            // get the first process id\n        return processMap.keySet().iterator().next();\n       }\n       int choice = new Scanner(line).nextInt();\n       if (choice <= 0 || choice > processMap.size()) {\n        return -1;\n       }\n       Iterator<Long> idIter = processMap.keySet().iterator();\n\n       for (int i = 1; i <= choice; ++\n                                                                                                              i) {\n\n        if (i == choice) {\n                                                                                                                     return idIter.next();\n        }\n        idIter.next();\n       }\n       return -1;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "40", "src_id": "M128", "code": "\n    @ Bean(name = \"machineType\") public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                       return \"Docker\";\n                   } else if (isBrowserOpen) {\n                              String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                              if (os.contains(\"win\")) {\n                                  return \"Client-windows\";\n                              } else if (os.contains(\"mac\")) {\n                                         return \"Client-mac\";\n                                     } else {\n                                         return \"Client-unix\";\n                                     }\n                          } else {\n                              return \"Server-jar\";\n                          }\n        }\n            catch(Exception e ) {\n            return \"Unknown\";\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "202", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                }\n\n                    catch(InterruptedException e ) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n        for(Thread thread :threads ) {\n            if (!thread.isAlive()\n                    || thread == Thread.currentThread()) continue;\n            thread.interrupt();\n        }\n        try {\n            for(Thread thread :threads ) {\n                if (!thread.isAlive()) continue;\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n\n                if (millis > 0) thread.join(millis);\n            }\n        }\n\n            catch(InterruptedException e ) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "15", "src_id": "M52", "code": "\n    @Override public void run() {\n        while(true) {\n                    /**\n                     * Since this is a simple example and we know the exact HystrixCommandKeys we are interested in\n                     * we will retrieve the HystrixCommandMetrics objects directly.\n                     *\n                     * Typically you would instead retrieve metrics from where they are published which is by default\n                     * done using Servo: https://github.com/Netflix/Hystrix/wiki/Metrics-and-Monitoring\n                     */\n\n                    // wait 5 seconds on each loop\n            try {\n                Thread.sleep(5000);\n            } catch (Exception e) {\n                        // ignore\n            }\n\n                    // we are using default names so can use class.getSimpleName() to derive the keys\n\n            HystrixCommandMetrics creditCardMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(CreditCardCommand.class.getSimpleName()));\n            HystrixCommandMetrics orderMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(GetOrderCommand.class.getSimpleName()));\n            HystrixCommandMetrics userAccountMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(GetUserAccountCommand.class.getSimpleName()));\n            HystrixCommandMetrics paymentInformationMetrics = HystrixCommandMetrics.getInstance(HystrixCommandKey.Factory.asKey(GetPaymentInformationCommand.class.getSimpleName()));\n\n            if (shouldLog) {\n                        // print out metrics\n                StringBuilder out = new StringBuilder();\n                out.append(\"\\n\");\n                out.append(\"#####################################################################################\").append(\"\\n\");\n                out.append(\"# CreditCardCommand: \" + getStatsStringFromMetrics(creditCardMetrics)).append(\"\\n\");\n                out.append(\"# GetOrderCommand: \" + getStatsStringFromMetrics(orderMetrics)).append(\"\\n\");\n                out.append(\"# GetUserAccountCommand: \" + getStatsStringFromMetrics(userAccountMetrics)).append(\"\\n\");\n                out.append(\"# GetPaymentInformationCommand: \" + getStatsStringFromMetrics(paymentInformationMetrics)).append(\"\\n\");\n                out.append(\"#####################################################################################\").append(\"\\n\");\n                System.out.println(out.toString());\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "81", "src_id": "M9", "code": "\n    @Override\n    public CacheEntry set(CacheKey cacheKey,CacheEntry entry) {\n        lock.lock();\n        try {\n            entry = putIntoStore(cacheKey, entry);\n            EvictionPolicy policy = getEvictionPolicy();\n            policy.touch(cacheKey);\n            CacheKey evictedKey = policy.evictNext();\n            if (evictedKey != null) {\n                delete(evictedKey);\n                stats.evict();\n            }\n            for(Object redisKey :cacheKey.getRedisKeys()) {\n                ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n                if (redisKeysToCacheKeys.containsKey(mapKey)) {\n                    redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n                } else {\n                    Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n                    set.add(cacheKey);\n                    redisKeysToCacheKeys.put(mapKey, set);\n                }\n            }\n            stats.load();\n            return entry;\n        }\n\nfinally {\n            lock.unlock();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "203", "src_id": "M491", "code": "\n    @ SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe @ResizeMode public static int nextResizeModeAndSaveToPrefs(final Player player, @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n        player.getPrefs().edit().putInt(player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n        return newResizeMode;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "41", "src_id": "M101", "code": "\n    private void processRequest(int limitPerDay,\n        String identifier,\n        Map<String, Bucket> buckets,\n        HttpServletRequest request,\n        HttpServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        if (probe.isConsumed()) {\n            response.setHeader(\"X-Rate-Limit-Remaining\", stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            filterChain.doFilter(request, response);\n        } else {\n            long waitForRefill = probe.getNanosToWaitForRefill()/ 1_000_000_000;\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Newlines.stripAll(String.valueOf(waitForRefill)));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "184", "src_id": "M95", "code": "\n    public static HealthCountsStream getInstance(HystrixCommandKey commandKey, int numBuckets, int bucketSizeInMs) {\n       HealthCountsStream initialStream = streams.get(commandKey.name());\n       if (initialStream != null) {\n        return initialStream;\n       } else {\n         final HealthCountsStream healthStream;\n         synchronized(HealthCountsStream.class) {\n           HealthCountsStream existingStream = streams.get(commandKey.name());\n           if (existingStream == null) {\n             HealthCountsStream newStream = new HealthCountsStream(commandKey, numBuckets, bucketSizeInMs, HystrixCommandMetrics.appendEventToBucket);\n             streams.putIfAbsent(commandKey.name(), newStream);\n             healthStream = newStream;\n           } else {\n             healthStream = existingStream;\n           }\n         }\n         healthStream.startCachingStreamValuesIfUnstarted();\n         return healthStream;\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "56", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n                   trustManagers = new TrustManager[] {\n                                       INSECURE_TRUST_MANAGER};\n               }\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n        return sslContext;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "100", "src_id": "M90", "code": "\n    private void addJavaObjectToExcel(Object oneRowData, Row row, int rowIndex, int relativeRowIndex) {\n        WriteHolder currentWriteHolder = writeContext.currentWriteHolder();\n        BeanMap beanMap = BeanMapUtils.create(oneRowData);\n        // Bean the contains of the Map Key method with poor performance,So to create a keySet here\n        Set<String> beanKeySet = new HashSet <>(beanMap.keySet());\n        Set<String> beanMapHandledSet = new HashSet <>();\n        int maxCellIndex = - 1;\n        // If it's a class it needs to be cast by type\n        if (HeadKindEnum.CLASS.equals(writeContext.currentWriteHolder().excelWriteHeadProperty()\n                                                                       .getHeadKind())) {\n            Map<Integer, Head> headMap = writeContext.currentWriteHolder().excelWriteHeadProperty()\n                                                                          .getHeadMap();\n            for(Map.Entry<Integer, Head> entry :headMap.entrySet()) {\n                int columnIndex = entry.getKey();\n                Head head = entry.getValue();\n                String name = head.getFieldName();\n                if (!beanKeySet.contains(name)) {\n                    continue;\n                }\n                ExcelContentProperty excelContentProperty = ClassUtils.declaredExcelContentProperty(beanMap, currentWriteHolder.excelWriteHeadProperty().getHeadClazz(), name, currentWriteHolder);\n                CellWriteHandlerContext cellWriteHandlerContext = WriteHandlerUtils.createCellWriteHandlerContext(writeContext, row, rowIndex, head, columnIndex, relativeRowIndex, Boolean.FALSE, excelContentProperty);\n                WriteHandlerUtils.beforeCellCreate(cellWriteHandlerContext);\n                Cell cell = WorkBookUtil.createCell(row, columnIndex);\n                cellWriteHandlerContext.setCell(cell);\n                WriteHandlerUtils.afterCellCreate(cellWriteHandlerContext);\n                cellWriteHandlerContext.setOriginalValue(beanMap.get(name));\n                cellWriteHandlerContext.setOriginalFieldClass(head.getField().getType());\n                converterAndSet(cellWriteHandlerContext);\n                WriteHandlerUtils.afterCellDispose(cellWriteHandlerContext);\n                beanMapHandledSet.add(name);\n                maxCellIndex = Math.max(maxCellIndex, columnIndex);\n            }\n        }\n        // Finish\n\n        if (beanMapHandledSet.size() == beanMap.size()) {\n            return;\n        }\n        maxCellIndex++;\n        FieldCache fieldCache = ClassUtils.declaredFields(oneRowData.getClass(), writeContext.currentWriteHolder());\n        for(Map.Entry<Integer, FieldWrapper> entry :fieldCache.getSortedFieldMap().entrySet()) {\n            FieldWrapper field = entry.getValue();\n            String fieldName = field.getFieldName();\n            boolean uselessData = !beanKeySet.contains(fieldName)\n            || beanMapHandledSet.contains(fieldName);\n            if (uselessData) {\n                continue;\n            }\n            Object value = beanMap.get(fieldName);\n            ExcelContentProperty excelContentProperty = ClassUtils.declaredExcelContentProperty(beanMap, currentWriteHolder.excelWriteHeadProperty().getHeadClazz(), fieldName, currentWriteHolder);\n            CellWriteHandlerContext cellWriteHandlerContext = WriteHandlerUtils.createCellWriteHandlerContext(writeContext, row, rowIndex, null, maxCellIndex, relativeRowIndex, Boolean.FALSE, excelContentProperty);\n            WriteHandlerUtils.beforeCellCreate(cellWriteHandlerContext);\n\n            // fix https://github.com/alibaba/easyexcel/issues/1870\n            // If there is data, it is written to the next cell\n            Cell cell = WorkBookUtil.createCell(row, maxCellIndex);\n            cellWriteHandlerContext.setCell(cell);\n            WriteHandlerUtils.afterCellCreate(cellWriteHandlerContext);\n            cellWriteHandlerContext.setOriginalValue(value);\n            cellWriteHandlerContext.setOriginalFieldClass(FieldUtils.getFieldClass(beanMap, fieldName, value));\n            converterAndSet(cellWriteHandlerContext);\n            WriteHandlerUtils.afterCellDispose(cellWriteHandlerContext);\n            maxCellIndex++;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "16", "src_id": "M312", "code": "\n    private Observable < R > handleRequestCacheHitAndEmitValues(final HystrixCommandResponseFromCache < R > fromCache, final AbstractCommand < R > _cmd) {\n        try {\n            executionHook.onCacheHit(this);\n        } catch (Throwable hookEx) {\n            logger.warn(\"Error calling HystrixCommandExecutionHook.onCacheHit\", hookEx);\n        }\n\n        return fromCache.toObservableWithStateCopiedInto(this).doOnTerminate(new Action0() {\n                                                                                 @Override public void call() {\n                                                                                     if (commandState.compareAndSet(CommandState.OBSERVABLE_CHAIN_CREATED, CommandState.TERMINAL)) {\n                                                                                         cleanUpAfterResponseFromCache(false); //user code never ran\n                                                                                     } else if (commandState.compareAndSet(CommandState.USER_CODE_EXECUTED, CommandState.TERMINAL)) {\n                                                                                                cleanUpAfterResponseFromCache(true); //user code did run\n                                                                                            }\n                                                                                 }\n\n                                                                             }).doOnUnsubscribe(new Action0() {\n                                                                                                    @Override public void call() {\n                                                                                                        if (commandState.compareAndSet(CommandState.OBSERVABLE_CHAIN_CREATED, CommandState.UNSUBSCRIBED)) {\n                                                                                                            cleanUpAfterResponseFromCache(false); //user code never ran\n                                                                                                        } else if (commandState.compareAndSet(CommandState.USER_CODE_EXECUTED, CommandState.UNSUBSCRIBED)) {\n                                                                                                                   cleanUpAfterResponseFromCache(true); //user code did run\n                                                                                                               }\n                                                                                                    }\n\n                                                                                                });\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "204", "src_id": "M424", "code": "\n    @ Override public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n                   if (!fragmentIsVisible) {\n                       onFragmentStopped();\n                   }\n               } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n                          fragmentIsVisible = false;\n                          onFragmentStopped();\n                      } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n                                 fragmentIsVisible = true;\n                                 player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n                                 if (!isControlsVisible()) {\n                                     hideSystemUIIfNeeded();\n                                 }\n                             }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "82", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n        if (data == null) return null;\n        String str = STRING.build(data);\n        switch(str) {\ncase \"null\":\nreturn null;\n                    case \"boolean\":\n            return boolean.class;\n                    case \"integer\":\n            return int.class;\n                    case \"number\":\n            return float.class;\n                    case \"string\":\n            return String.class;\n                    case \"object\":\n            return Object.class;\n                    case \"array\":\n            return List.class;\n                    default:\nthrow new JedisException(\"Unknown type: \" + str);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "159", "src_id": "M140", "code": "\n    void _processDo(int option) throws IOException {\n\n    if (debugoptions) {\n        System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n    }\n\n    if (__notifhand != null) {\n        __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DO, option);\n    }\n    boolean acceptNewState = false;\n\n\n        /* open TelnetOptionHandler functionality (start)*/\n    if (optionHandlers[option] != null) {\n        acceptNewState = optionHandlers[option].getAcceptLocal();\n    } else {\n        /* open TelnetOptionHandler functionality (end)*/\n            /* TERMINAL-TYPE option (start)*/\n\n      if (option == TERMINAL_TYPE) {\n\n               if ((terminalType != null) && (terminalType.length() > 0)) {\n                                       acceptNewState = true;\n               }\n      }\n            /* TERMINAL-TYPE option (end)*/\n        /* open TelnetOptionHandler functionality (start)*/\n    }\n        /* open TelnetOptionHandler functionality (end)*/\n\n    if (_willResponse[option] > 0) {\n        -- _willResponse[option];\n        if (_willResponse[option] > 0 && _stateIsWill(option)) {\n                                       -- _willResponse[option];\n        }\n    }\n\n    if (_willResponse[option] == 0) {\n\n        if (_requestedWont(option)) {\n        switch (option) {\n            default:\n            break;\n        }\n\n        if (acceptNewState) {\n            _setWantWill(option);\n            _sendWill(option);\n        } else {\n          ++ _willResponse[option];\n          _sendWont(option);\n        }\n        } else {\n                // Other end has acknowledged option.\n          switch (option) {\n            default:\n              break;\n          }\n        }\n    }\n    _setWill(option);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "205", "src_id": "M900", "code": "\n    @ StyleRes public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n        final String selectedTheme = getSelectedThemeKey(context);\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } else if (selectedTheme.equals(blackTheme)) {\n                   return R.style.BlackSettingsTheme;\n               } else if (selectedTheme.equals(automaticDeviceTheme)) {\n                          if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                              final String selectedNightTheme = getSelectedNightThemeKey(context);\n                              if (selectedNightTheme.equals(blackTheme)) {\n                                  return R.style.BlackSettingsTheme;\n                              } else {\n                                  return R.style.DarkSettingsTheme;\n                              }\n                          } else {\n                // there is only one day theme\n                              return R.style.LightSettingsTheme;\n                          }\n                      } else {\n            // default to dark theme\n                          return R.style.DarkSettingsTheme;\n                      }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "57", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n        List<KeyValue> list = (List<KeyValue>) data;\n        Map<String, Object> properties = new HashMap< >();\n        Map<String, String> labels = null;\n        Map<String, Rule> rules = null;\n        List<Map<String, Object>> chunks = null;\n        for (KeyValue propertyValue : list) {\n            String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n            Object value = propertyValue.getValue();\n            if (value instanceof List) {\n                switch(prop) {\n                             case LABELS_PROPERTY:\n                             labels = BuilderFactory.STRING_MAP.build(value);\n                             value = labels;\n                             break;\n                             case RULES_PROPERTY:\n                    List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                    Map<String, List<Object>> rulesValueMap = new HashMap< >(rulesDataList.size(), 1f);\n                    rules = new HashMap< >(rulesDataList.size());\n                    for (KeyValue rkv : rulesDataList) {\n                        String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                        List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                        rulesValueMap.put(ruleName, ruleValueList);\n                        rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                    }\n\n                    value = rulesValueMap;\n                    break;\n                             case CHUNKS_PROPERTY:\n                    List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                    List<Map<String, Object>> chunksValueList = new ArrayList< >(chunksDataList.size());\n                    chunks = new ArrayList< >(chunksDataList.size());\n                    for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                        Map<String, Object> chunk = chunkDataAsList.stream().collect(Collectors.toMap(kv->BuilderFactory.STRING.build(kv.getKey()), kv->BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                        chunksValueList.add(chunk);\n                        chunks.add(chunk);\n                    }\n\n                    value = chunksValueList;\n                    break;\n                             default:\n                    value = SafeEncoder.encodeObject(value);\n                    break;\n                }\n            } else if (value instanceof byte[]) {\n                       value = BuilderFactory.STRING.build(value);\n                       if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                           try {\n                               value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                           } catch (Exception e) {\n\n                           }\n                       }\n                   }\n\n            properties.put(prop, value);\n        }\n\n        return new TSInfo(properties, labels, rules, chunks);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "83", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe @ResizeMode public static int nextResizeModeAndSaveToPrefs(final Player player, @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n\n        player.getPrefs().edit().putInt(player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n        return newResizeMode;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "17", "src_id": "M438", "code": "\n    private static void serializeUtilization(HystrixUtilization utilization, JsonGenerator json) {\n        try {\n            json.writeStartObject();\n            json.writeStringField(\"type\", \"HystrixUtilization\");\n            json.writeObjectFieldStart(\"commands\");\n            for (Map.Entry<HystrixCommandKey, HystrixCommandUtilization> entry : utilization.getCommandUtilizationMap().entrySet()) {\n                final HystrixCommandKey key = entry.getKey();\n                final HystrixCommandUtilization commandUtilization = entry.getValue();\n                writeCommandUtilizationJson(json, key, commandUtilization);\n            }\n\n            json.writeEndObject();\n            json.writeObjectFieldStart(\"threadpools\");\n            for (Map.Entry<HystrixThreadPoolKey, HystrixThreadPoolUtilization> entry : utilization.getThreadPoolUtilizationMap().entrySet()) {\n                final HystrixThreadPoolKey threadPoolKey = entry.getKey();\n                final HystrixThreadPoolUtilization threadPoolUtilization = entry.getValue();\n                writeThreadPoolUtilizationJson(json, threadPoolKey, threadPoolUtilization);\n            }\n\n            json.writeEndObject();\n            json.writeEndObject();\n            json.close();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "185", "src_id": "M118", "code": "\n    public Map<ExecutionSignature, List<Integer>> getExecutionsMappedToLatencies() {\n       Map<CommandAndCacheKey, Integer> cachingDetector = new HashMap<CommandAndCacheKey, Integer>();\n       List<HystrixInvokableInfo<?>> nonCachedExecutions = new ArrayList<HystrixInvokableInfo<?>>(executions.size());\n\n       for (HystrixInvokableInfo<?> execution : executions) {\n\n        if (execution.getPublicCacheKey() != null) {\n                //eligible for caching - might be the initial, or might be from cache\n                                                                CommandAndCacheKey key = new CommandAndCacheKey(execution.getCommandKey().name(), execution.getPublicCacheKey());\n                                                                Integer count = cachingDetector.get(key);\n                                                                if (count != null) {\n                    //key already seen\n            cachingDetector.put(key, count + 1);\n                                                                } else {\n                    //key not seen yet\n                                                                  cachingDetector.put(key, 0);\n                                                                }\n        }\n\n        if (!execution.isResponseFromCache()) {\n                                                                nonCachedExecutions.add(execution);\n        }\n       }\n       Map<ExecutionSignature, List<Integer>> commandDeduper = new HashMap<ExecutionSignature, List<Integer>>();\n\n       for (HystrixInvokableInfo<?> execution : nonCachedExecutions) {\n        int cachedCount = 0;\n        String cacheKey = execution.getPublicCacheKey();\n        if (cacheKey != null) {\n                                                                         CommandAndCacheKey key = new CommandAndCacheKey(execution.getCommandKey().name(), cacheKey);\n                                                                         cachedCount = cachingDetector.get(key);\n        }\n        ExecutionSignature signature;\n        if (cachedCount > 0) {\n                //this has a RESPONSE_FROM_CACHE and needs to get split off\n           signature = ExecutionSignature.from(execution, cacheKey, cachedCount);\n        } else {\n                //nothing cached from this, can collapse further\n          signature = ExecutionSignature.from(execution);\n        }\n        List<Integer> currentLatencyList = commandDeduper.get(signature);\n        if (currentLatencyList != null) {\n           currentLatencyList.add(execution.getExecutionTimeInMilliseconds());\n        } else {\n          List<Integer> newLatencyList = new ArrayList<Integer>();\n          newLatencyList.add(execution.getExecutionTimeInMilliseconds());\n          commandDeduper.put(signature, newLatencyList);\n        }\n       }\n       return commandDeduper;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "101", "src_id": "M50", "code": "\n    public CellStyle createCellStyle(WriteCellStyle writeCellStyle, CellStyle originCellStyle) {\n        if (writeCellStyle == null) {\n            return originCellStyle;\n        }\n\n        short styleIndex = - 1;\n        Font originFont = null;\n        boolean useCache = true;\n        if (originCellStyle != null) {\n            styleIndex = originCellStyle.getIndex();\n            if (originCellStyle instanceof XSSFCellStyle) {\n                originFont = ((XSSFCellStyle) originCellStyle).getFont();\n            } else if (originCellStyle instanceof HSSFCellStyle) {\n                       originFont = ((HSSFCellStyle) originCellStyle).getFont(workbook);\n                   }\n            useCache = false;\n        }\n        Map<WriteCellStyle, CellStyle> cellStyleMap = cellStyleIndexMap.computeIfAbsent(styleIndex, key -> MapUtils.newHashMap());\n        CellStyle cellStyle = cellStyleMap.get(writeCellStyle);\n        if (cellStyle != null) {\n            return cellStyle;\n        }\n\n        if (log.isDebugEnabled()) {\n            log.info(\"create new style:{},{}\", writeCellStyle, originCellStyle);\n        }\n        WriteCellStyle tempWriteCellStyle = new WriteCellStyle();\n        WriteCellStyle.merge(writeCellStyle, tempWriteCellStyle);\n        cellStyle = StyleUtil.buildCellStyle(workbook, originCellStyle, tempWriteCellStyle);\n        Short dataFormat = createDataFormat(tempWriteCellStyle.getDataFormatData(), useCache);\n        if (dataFormat != null) {\n            cellStyle.setDataFormat(dataFormat);\n        }\n        Font font = createFont(tempWriteCellStyle.getWriteFont(), originFont, useCache);\n        if (font != null) {\n            cellStyle.setFont(font);\n        }\n        cellStyleMap.put(tempWriteCellStyle, cellStyle);\n        return cellStyle;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "206", "src_id": "M895", "code": "\n    @ Override public Bitmap transform(final Bitmap source) {\n        if (DEBUG) {\n            Log.d(TAG, \"Thumbnail - transform() called\");\n        }\n\n        final float notificationThumbnailWidth = Math.min(context.getResources().getDimension(R.dimen.player_notification_thumbnail_width), source.getWidth());\n        final Bitmap result = BitmapCompat.createScaledBitmap(source, (int)notificationThumbnailWidth, (int) (source.getHeight()/(source.getWidth()/notificationThumbnailWidth)), null, true);\n        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n            final Bitmap copied = BitmapCompat.createScaledBitmap(source, (int)notificationThumbnailWidth - 1, (int) (source.getHeight()/(source.getWidth()/(notificationThumbnailWidth - 1))), null, true);\n            source.recycle();\n            return copied;\n        } else {\n            source.recycle();\n            return result;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "84", "src_id": "M424", "code": "\n    @Override public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n\n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n                   if (!fragmentIsVisible) {\n                       onFragmentStopped();\n                   }\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n                   fragmentIsVisible = false;\n                   onFragmentStopped();\n               } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n                          fragmentIsVisible = true;\n                          player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n\n                          if (!isControlsVisible()) {\n                              hideSystemUIIfNeeded();\n                          }\n                      }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "207", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n                pause();\n                break;\n            case ACTION_CLOSE:\n                service.destroyPlayerAndStopService();\n                break;\n            case ACTION_PLAY_PAUSE:\n                playPause();\n                break;\n            case ACTION_PLAY_PREVIOUS:\n                playPrevious();\n                break;\n            case ACTION_PLAY_NEXT:\n                playNext();\n                break;\n            case ACTION_FAST_REWIND:\n                fastRewind();\n                break;\n            case ACTION_FAST_FORWARD:\n                fastForward();\n                break;\n            case ACTION_REPEAT:\n                cycleNextRepeatMode();\n                break;\n            case ACTION_SHUFFLE:\n                toggleShuffleModeEnabled();\n                break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                }\n                break;\n        }\n        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "18", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte [] emlBytes,EmlToPdfRequest request) {\n        if (emlBytes == null||emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(textBody != null?textBody:\"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n\n\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if (request != null&&request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \").append(escapeHtml(bcc)).append(\"</div>\\n\");\n            }\n        }\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n            if (request != null&&request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n        return html.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "58", "src_id": "M897", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (retentionPeriod != null) {\n            args.add(RETENTION).add(toByteArray(retentionPeriod));\n        }\n        if (encoding != null) {\n            args.add(ENCODING).add(encoding);\n        }\n        if (chunkSize != null) {\n            args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n        }\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n        if (onDuplicate != null) {\n            args.add(ON_DUPLICATE).add(onDuplicate);\n        }\n        if (ignore) {\n            args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n        }\n        if (labels != null) {\n            args.add(LABELS);\n            labels.entrySet().forEach((entry)->args.add(entry.getKey()).add(entry.getValue()));\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "208", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n        if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            // Starting ReCaptcha Challenge Activity\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } else if (errorInfo.getThrowable() != null && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n                   Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n               } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n                          Toast.makeText(context, R.string.restricted_video_no_stream, Toast.LENGTH_LONG).show();\n                      } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n                                 Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n                             } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n                                        Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n                                    } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n                                               Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n                                           } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n                                                      Toast.makeText(context, R.string.soundcloud_go_plus_content, Toast.LENGTH_LONG).show();\n                                                  } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n                                                             Toast.makeText(context, R.string.youtube_music_premium_content, Toast.LENGTH_LONG).show();\n                                                         } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n                                                                    Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n                                                                } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n                                                                           Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n                                                                       } else {\n                                                                           ErrorUtil.createNotification(context, errorInfo);\n                                                                       }\n        if (context instanceof RouterActivity) {\n            ((RouterActivity)context).finish();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "102", "src_id": "M21", "code": "\n    private void buildHead(AnalysisContext analysisContext, Map<Integer, ReadCellData <?>> cellDataMap) {\n        // Rule out empty head, and then take the largest column\n        if (MapUtils.isNotEmpty(cellDataMap)) {\n            cellDataMap.entrySet().stream()\n                .filter(entry -> CellDataTypeEnum.EMPTY != entry.getValue().getType()).forEach(entry -> analysisContext.readSheetHolder().setMaxNotEmptyDataHeadSize(entry.getKey()));\n        }\n\n        if (!HeadKindEnum.CLASS.equals(analysisContext.currentReadHolder().excelReadHeadProperty()\n                                                                          .getHeadKind())) {\n            return;\n        }\n        Map<Integer, String> dataMap = ConverterUtils.convertToStringMap(cellDataMap, analysisContext);\n        ExcelReadHeadProperty excelHeadPropertyData = analysisContext.readSheetHolder().excelReadHeadProperty();\n        Map<Integer, Head> headMapData = excelHeadPropertyData.getHeadMap();\n        Map<Integer, Head> tmpHeadMap = new HashMap<Integer, Head>(headMapData.size()* 4 / 3 + 1);\n        for(Map.Entry<Integer, Head> entry :headMapData.entrySet()) {\n            Head headData = entry.getValue();\n            if (headData.getForceIndex()\n                    || !headData.getForceName()) {\n                tmpHeadMap.put(entry.getKey(), headData);\n                continue;\n            }\n            List<String> headNameList = headData.getHeadNameList();\n            String headName = headNameList.get(headNameList.size() - 1);\n            for(Map.Entry<Integer, String> stringEntry :dataMap.entrySet()) {\n                if (stringEntry == null) {\n                    continue;\n                }\n                String headString = stringEntry.getValue();\n                Integer stringKey = stringEntry.getKey();\n                if (StringUtils.isEmpty(headString)) {\n                    continue;\n                }\n\n                if (analysisContext.currentReadHolder().globalConfiguration()\n                                                       .getAutoTrim()) {\n                    headString = headString.trim();\n                }\n\n                if (headName.equals(headString)) {\n                    headData.setColumnIndex(stringKey);\n                    tmpHeadMap.put(stringKey, headData);\n                    break;\n                }\n            }\n        }\n        excelHeadPropertyData.setHeadMap(tmpHeadMap);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "186", "src_id": "M223", "code": "\n    public ThreadPoolExecutor getThreadPool(final HystrixThreadPoolKey threadPoolKey, HystrixThreadPoolProperties threadPoolProperties) {\n    final ThreadFactory threadFactory = getThreadFactory(threadPoolKey);\n    final boolean allowMaximumSizeToDivergeFromCoreSize = threadPoolProperties.getAllowMaximumSizeToDivergeFromCoreSize().get();\n    final int dynamicCoreSize = threadPoolProperties.coreSize().get();\n    final int keepAliveTime = threadPoolProperties.keepAliveTimeMinutes().get();\n    final int maxQueueSize = threadPoolProperties.maxQueueSize().get();\n    final BlockingQueue<Runnable> workQueue = getBlockingQueue(maxQueueSize);\n    if (allowMaximumSizeToDivergeFromCoreSize) {\n        final int dynamicMaximumSize = threadPoolProperties.maximumSize().get();\n        if (dynamicCoreSize > dynamicMaximumSize) {\n        logger.error(\"Hystrix ThreadPool configuration at startup for : \" + threadPoolKey.name() + \" is trying to set coreSize = \" + dynamicCoreSize + \" and maximumSize = \" + dynamicMaximumSize + \".  Maximum size will be set to \" + dynamicCoreSize + \", the coreSize value, since it must be equal to or greater than the coreSize value\");\n        return new ThreadPoolExecutor(dynamicCoreSize, dynamicCoreSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n        } else {\n          return new ThreadPoolExecutor(dynamicCoreSize, dynamicMaximumSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n        }\n    } else {\n      return new ThreadPoolExecutor(dynamicCoreSize, dynamicCoreSize, keepAliveTime, TimeUnit.MINUTES, workQueue, threadFactory);\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "160", "src_id": "M1324", "code": "\n    private void bind(Configure configure) throws Throwable {\n    long start = System.currentTimeMillis();\n    if (!isBindRef.compareAndSet(false, true)) {\n        throw new IllegalStateException(\"already bind\");\n    }\n\n        // init random port\n\n    if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n        int newTelnetPort = SocketUtils.findAvailableTcpPort();\n        configure.setTelnetPort(newTelnetPort);\n        logger().info(\"generate random telnet port: \" + newTelnetPort);\n    }\n\n    if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n        int newHttpPort = SocketUtils.findAvailableTcpPort();\n        configure.setHttpPort(newHttpPort);\n        logger().info(\"generate random http port: \" + newHttpPort);\n    }\n        // try to find appName\n\n    if (configure.getAppName() == null) {\n        configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME, System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n    }\n\n    try {\n\n        if (configure.getTunnelServer() != null) {\n        tunnelClient = new TunnelClient();\n        tunnelClient.setAppName(configure.getAppName());\n        tunnelClient.setId(configure.getAgentId());\n        tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n        tunnelClient.setVersion(ArthasBanner.version());\n        ChannelFuture channelFuture = tunnelClient.start();\n        channelFuture.await(10, TimeUnit.SECONDS);\n        }\n    } catch (Throwable t) {\n      logger().error(\"start tunnel client error\", t);\n    }\n\n    try {\n        ShellServerOptions options = new ShellServerOptions().setInstrumentation(instrumentation).setPid(PidUtils.currentLongPid()).setWelcomeMessage(ArthasBanner.welcome());\n        if (configure.getSessionTimeout() != null) {\n        options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n        }\n\n        this.httpSessionManager = new HttpSessionManager();\n        if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n                // 当 listen 0.0.0.0 时，强制生成密码，防止被远程连接\n        String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \" + \"No password is currently configured. \" + \"Therefore, a default password is generated, \" + \"and clients need to use the password to connect!\";\n        AnsiLog.error(errorMsg);\n        configure.setPassword(StringUtils.randomString(64));\n        AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n        logger().error(errorMsg);\n        logger().info(\"Generated arthas password: \" + configure.getPassword());\n        }\n\n        this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n        shellServer = new ShellServerImpl(options);\n        List<String> disabledCommands = new ArrayList<String>();\n        if (configure.getDisabledCommands() != null) {\n        String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n        if (strings != null) {\n                                                         disabledCommands.addAll(Arrays.asList(strings));\n        }\n        }\n        BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n        List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n        resolvers.add(builtinCommands);\n\n            //worker group\n        workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n            // TODO: discover user provided command resolver\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n        logger().info(\"try to bind telnet server, host: {}, port: {}.\", configure.getIp(), configure.getTelnetPort());\n        shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(), options.getConnectionTimeout(), workerGroup, httpSessionManager));\n        } else {\n          logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n        }\n\n        if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n        logger().info(\"try to bind http server, host: {}, port: {}.\", configure.getIp(), configure.getHttpPort());\n        shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(), options.getConnectionTimeout(), workerGroup, httpSessionManager));\n        } else {\n                // listen local address in VM communication\n\n          if (configure.getTunnelServer() != null) {\n                   shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(), options.getConnectionTimeout(), workerGroup, httpSessionManager));\n          }\n          logger().info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n        }\n\n        for (CommandResolver resolver : resolvers) {\n        shellServer.registerCommandResolver(resolver);\n        }\n        shellServer.listen(new BindHandler(isBindRef));\n        if (!isBind()) {\n        throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \" + String.valueOf(configure.getTelnetPort()) + \", http port: \" + String.valueOf(configure.getHttpPort()));\n        }\n\n            //http api session manager\n        sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n            //http api handler\n        httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n        logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", configure.getIp(), configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n            // 异步回报启动次数\n        if (configure.getStatUrl() != null) {\n        logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n        }\n        UserStatUtil.setStatUrl(configure.getStatUrl());\n        UserStatUtil.setAgentId(configure.getAgentId());\n        UserStatUtil.arthasStart();\n        try {\n        SpyAPI.init();\n        } catch (Throwable e) {\n                // ignore }\n        logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n    } catch (Throwable e) {\n      logger().error(\"Error during start as-server\", e);\n      destroy();\n      throw e;\n    }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "19", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) return false;\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "209", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context,\n        @ NonNull final FragmentManager fragmentManager,\n        final int serviceId,\n        @ Nullable final String url,\n        @ NonNull final String title,\n        @ Nullable final PlayQueue playQueue, final boolean switchingPlayers) {\n        final boolean autoPlay;\n        @ Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else if (switchingPlayers) {\n            // switching player to main player\n                   autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n               } else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n                          autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n                      } else {\n            // opening new stream while already playing in another player\n                          autoPlay = false;\n                      }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n                                                                               expandMainPlayer(detailFragment.requireActivity());\n                                                                               detailFragment.setAutoPlay(autoPlay);\n                                                                               if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                                                                                   detailFragment.openVideoPlayer(playerType == PlayerType.POPUP || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n                                                                               } else {\n                                                                                   detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n                                                                               }\n                                                                               detailFragment.scrollToTop();\n                                                                           };\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment)fragment);\n        } else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment.getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n            defaultTransaction(fragmentManager).replace(R.id.fragment_player_holder, instance).runOnCommit(() -> onVideoDetailFragmentReady.run(instance)).commit();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "59", "src_id": "M1213", "code": "\n    @Override\n    public Connection getConnection() {\n        List<ConnectionPool> pools = getShuffledNodesPool();\n        JedisException suppressed = null;\n        for (ConnectionPool pool : pools) {\n            Connection jedis = null;\n            try {\n                jedis = pool.getResource();\n                if (jedis == null) {\n                    continue;\n                }\n\n                jedis.ping();\n                return jedis;\n            } catch (JedisException ex) {\n                if (suppressed == null) { // remembering first suppressed exception\n                    suppressed = ex;\n                }\n                if (jedis != null) {\n                    jedis.close();\n                }\n            }\n        }\n\n        JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n        if (suppressed != null) {\n            noReachableNode.addSuppressed(suppressed);\n        }\n\n        throw noReachableNode;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "210", "src_id": "M698", "code": "\n    @ Override public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG).into(binding.channelBannerImage);\n        } else {\n            // do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG).into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG).into(binding.subChannelAvatarView);\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(Localization.shortSubscriberCount(activity, result.getSubscriberCount()));\n        } else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(String.format(getString(R.string.channel_created_by), currentInfo.getParentChannelName()));\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n        updateRssButton();\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n        disposables.clear();\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "103", "src_id": "M31", "code": "\n    private JsonNode validateLicense(String licenseKey, String machineFingerprint, LicenseContext context)throws Exception {\n        String requestBody = String.format(\"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\", licenseKey, machineFingerprint);\n        HttpRequest request = HttpRequest.newBuilder().uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\")).header(\"Content-Type\", \"application/vnd.api+json\").header(\"Accept\", \"application/vnd.api+json\")\n                        // .header(\"Authorization\", \"License \" + licenseKey).POST(HttpRequest.BodyPublishers.ofString(requestBody)).build();\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n                log.info(\"License floating (from license): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n                log.info(\"License floating (from policy): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n            int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"isEnterprise\").asBoolean(false);\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        return jsonResponse;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "187", "src_id": "M498", "code": "\n    protected static String convertToJson(HystrixUtilization utilization) throws IOException {\n       StringWriter jsonString = new StringWriter();\n       JsonGenerator json = jsonFactory.createGenerator(jsonString);\n       json.writeStartObject();\n       json.writeStringField(\"type\", \"HystrixUtilization\");\n       json.writeObjectFieldStart(\"commands\");\n       for (Map.Entry<HystrixCommandKey, HystrixCommandUtilization> entry : utilization.getCommandUtilizationMap().entrySet()) {\n        final HystrixCommandKey key = entry.getKey();\n        final HystrixCommandUtilization commandUtilization = entry.getValue();\n        writeCommandUtilizationJson(json, key, commandUtilization);\n       }\n       json.writeEndObject();\n       json.writeObjectFieldStart(\"threadpools\");\n       for (Map.Entry<HystrixThreadPoolKey, HystrixThreadPoolUtilization> entry : utilization.getThreadPoolUtilizationMap().entrySet()) {\n        final HystrixThreadPoolKey threadPoolKey = entry.getKey();\n        final HystrixThreadPoolUtilization threadPoolUtilization = entry.getValue();\n        writeThreadPoolUtilizationJson(json, threadPoolKey, threadPoolUtilization);\n       }\n       json.writeEndObject();\n       json.writeEndObject();\n       json.close();\n       return jsonString.getBuffer().toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "161", "src_id": "M122", "code": "\n    private int __read(boolean mayBlock) throws IOException {\n    int ch;\n    while (true) {\n\n            // If there is no more data AND we were told not to block,\n            // just return WOULD_BLOCK (-2). (More efficient than exception.)\n\n        if (!mayBlock && super.available() == 0) {\n                     return WOULD_BLOCK;\n        }\n\n            // Otherwise, exit only when we reach end of stream.\n\n        if ((ch = super.read()) < 0) {\n                     return EOF;\n        }\n        ch = (ch&0xff);\n\n            /* Code Section added for supporting AYT (start)*/\n        synchronized(__client) {\n        __client._processAYTResponse();\n        }\n            /* Code Section added for supporting AYT (end)*/\n\n            /* Code Section added for supporting spystreams (start)*/\n        __client._spyRead(ch);\n            /* Code Section added for supporting spystreams (end)*/\n        switch (__receiveState) {\n        case _STATE_CR:\n            if (ch == '\\0') {\n                    // Strip null\n            continue;\n            }\n                // How do we handle newline after cr?\n                //  else if (ch == '\\n' && _requestedDont(TelnetOption.ECHO) &&\n\n                // Handle as normal data by falling through to _STATE_DATA case\n\n                //$FALL-THROUGH$\n        case _STATE_DATA:\n            if (ch == TelnetCommand.IAC) {\n            __receiveState = _STATE_IAC;\n            continue;\n            }\n\n            if (ch == '\\r') {\n            synchronized(__client) {\n\n                if (__client._requestedDont(TelnetOption.BINARY)) {\n                __receiveState = _STATE_CR;\n                } else {\n                  __receiveState = _STATE_DATA;\n                }\n            }\n            } else {\n              __receiveState = _STATE_DATA;\n            }\n\n            break;\n        case _STATE_IAC:\n            switch (ch) {\n            case TelnetCommand.WILL:\n                __receiveState = _STATE_WILL;\n                continue;\n            case TelnetCommand.WONT:\n                __receiveState = _STATE_WONT;\n                continue;\n            case TelnetCommand.DO:\n                __receiveState = _STATE_DO;\n                continue;\n            case TelnetCommand.DONT:\n                __receiveState = _STATE_DONT;\n                continue;\n                /* TERMINAL-TYPE option (start)*/\n            case TelnetCommand.SB:\n                __suboption_count = 0;\n                __receiveState = _STATE_SB;\n                continue;\n                /* TERMINAL-TYPE option (end)*/\n            case TelnetCommand.IAC:\n                __receiveState = _STATE_DATA;\n                break; // exit to enclosing switch to return IAC from read\n            case TelnetCommand.SE: // unexpected byte! ignore it (don't send it as a command)\n                __receiveState = _STATE_DATA;\n                continue;\n            default:\n                __receiveState = _STATE_DATA;\n                __client._processCommand(ch); // Notify the user\n                continue; // move on the next char\n            }\n\n            break; // exit and return from read\n        case _STATE_WILL:\n            synchronized(__client) {\n            __client._processWill(ch);\n            __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n        case _STATE_WONT:\n            synchronized(__client) {\n            __client._processWont(ch);\n            __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n        case _STATE_DO:\n            synchronized(__client) {\n            __client._processDo(ch);\n            __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n        case _STATE_DONT:\n            synchronized(__client) {\n            __client._processDont(ch);\n            __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n            /* TERMINAL-TYPE option (start)*/\n        case _STATE_SB:\n            switch (ch) {\n            case TelnetCommand.IAC:\n                __receiveState = _STATE_IAC_SB;\n                continue;\n            default:\n                    // store suboption char\n                if (__suboption_count < __suboption.length) {\n                __suboption[__suboption_count ++] = ch;\n                }\n\n                break;\n            }\n            __receiveState = _STATE_SB;\n            continue;\n        case _STATE_IAC_SB: // IAC received during SB phase\n            switch (ch) {\n            case TelnetCommand.SE:\n                synchronized(__client) {\n                __client._processSuboption(__suboption, __suboption_count);\n                __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n            case TelnetCommand.IAC: // De-dup the duplicated IAC\n                if (__suboption_count < __suboption.length) {\n                __suboption[__suboption_count ++] = ch;\n                }\n\n                break;\n            default:            // unexpected byte! ignore it\n                break;\n            }\n            __receiveState = _STATE_SB;\n            continue;\n            /* TERMINAL-TYPE option (end)*/\n        }\n\n        break;\n    }\n    return ch;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "20", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent,String headerName) {\n        try {\n            String [] lines = emlContent.split(\"\\r?\\n\");\n            for(int i = 0;\ni<lines.length;\ni++) {\n                String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for(int j = i + 1;\nj<lines.length;\nj++) {\n                        if (lines[j].startsWith(\" \")||lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    // Apply MIME header decoding\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) break;\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "60", "src_id": "M9", "code": "\n    @Override\n    public CacheEntry set(CacheKey cacheKey,CacheEntry entry) {\n        lock.lock();\n        try {\n            entry = putIntoStore(cacheKey, entry);\n            EvictionPolicy policy = getEvictionPolicy();\n            policy.touch(cacheKey);\n            CacheKey evictedKey = policy.evictNext();\n            if (evictedKey != null) {\n                delete(evictedKey);\n                stats.evict();\n            }\n\n            for (Object redisKey : cacheKey.getRedisKeys()) {\n                ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n                if (redisKeysToCacheKeys.containsKey(mapKey)) {\n                    redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n                } else {\n                    Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n                    set.add(cacheKey);\n                    redisKeysToCacheKeys.put(mapKey, set);\n                }\n            }\n\n            stats.load();\n            return entry;\n        } finally {\n            lock.unlock();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "211", "src_id": "M379", "code": "\n    @ Override public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n               || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n\n        final List<Tracks.Group> textTracks = currentTracks.getGroups().stream().filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType()).collect(Collectors.toList());\n        final List<String> availableLanguages = textTracks.stream().map(Tracks.Group::getMediaTrackGroup).filter(textTrack -> textTrack.length > 0).map(textTrack -> textTrack.getFormat(0).language).collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional<Format> selectedTracks = textTracks.stream().filter(Tracks.Group::isSelected).filter(info -> info.getMediaTrackGroup().length >= 1).map(info -> info.getMediaTrackGroup().getFormat(0)).findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(player.getCaptionRendererIndex())\n            || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n        binding.captionTextView.setVisibility(availableLanguages.isEmpty()?View.GONE : View.VISIBLE);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "104", "src_id": "M488", "code": "\n    @ PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\") @ Operation(summary = \"Convert a file to a PDF using LibreOffice\", description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\" + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n            PDDocument doc = pdfDocumentFactory.load(file);\n            return WebResponseUtils.pdfDocToWebResponse(doc, Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\")\n                                    + \"_convertedToPDF.pdf\");\n        }\nfinally {\n            if (file != null) file.delete();\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "188", "src_id": "M171", "code": "\n    EventCounts plus(HystrixEventType eventType, int count) {\n       BitSet newBitSet = (BitSet) events.clone();\n       int localNumEmits = numEmissions;\n       int localNumFallbackEmits = numFallbackEmissions;\n       int localNumCollapsed = numCollapsed;\n       switch (eventType) {\n        case EMIT:\n           newBitSet.set(HystrixEventType.EMIT.ordinal());\n           localNumEmits += count;\n           break;\n        case FALLBACK_EMIT:\n           newBitSet.set(HystrixEventType.FALLBACK_EMIT.ordinal());\n           localNumFallbackEmits += count;\n           break;\n        case COLLAPSED:\n           newBitSet.set(HystrixEventType.COLLAPSED.ordinal());\n           localNumCollapsed += count;\n           break;\n        default:\n           newBitSet.set(eventType.ordinal());\n           break;\n       }\n       return new EventCounts(newBitSet, localNumEmits, localNumFallbackEmits, localNumCollapsed);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "162", "src_id": "M8", "code": "\n    private static String formatFileSize(long size) {\n       String hrSize;\n       double b = size;\n       double k = size / 1024.0;\n       double m = ((size / 1024.0) / 1024.0);\n       double g = (((size / 1024.0) / 1024.0) / 1024.0);\n       double t = ((((size / 1024.0) / 1024.0) / 1024.0) / 1024.0);\n       DecimalFormat dec = new DecimalFormat(\"0.00\");\n       if (t > 1) {\n        hrSize = dec.format(t).concat(\" TB\");\n       } else if (g > 1) {\n         hrSize = dec.format(g).concat(\" GB\");\n       } else if (m > 1) {\n         hrSize = dec.format(m).concat(\" MB\");\n              } else if (k > 1) {\n                hrSize = dec.format(k).concat(\" KB\");\n              } else {\n                hrSize = dec.format(b).concat(\" Bytes\");\n              }\n       return hrSize;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "21", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(PDDocument document,List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0||attachments == null||attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n\n\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\", markerPositions.size(), attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n\n\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for(int i = 0;\ni<annotationsToAdd;\ni++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "212", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context, @NonNull final List<Image> images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images).transform(new Transformation() {\n                                                                 @ Override public Bitmap transform(final Bitmap source) {\n                                                                     if (DEBUG) {\n                                                                         Log.d(TAG, \"Thumbnail - transform() called\");\n                                                                     }\n\n                                                                     final float notificationThumbnailWidth = Math.min(context.getResources().getDimension(R.dimen.player_notification_thumbnail_width), source.getWidth());\n                                                                     final Bitmap result = BitmapCompat.createScaledBitmap(source, (int)notificationThumbnailWidth, (int) (source.getHeight()/(source.getWidth()/notificationThumbnailWidth)), null, true);\n                                                                     if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                                                                         final Bitmap copied = BitmapCompat.createScaledBitmap(source, (int)notificationThumbnailWidth - 1, (int) (source.getHeight()/(source.getWidth()/(notificationThumbnailWidth - 1))), null, true);\n                                                                         source.recycle();\n                                                                         return copied;\n                                                                     } else {\n                                                                         source.recycle();\n                                                                         return result;\n                                                                     }\n                                                                 }\n                                                                 @ Override public String key() {\n                                                                     return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                                                                 }\n\n});\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "61", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n        if (data == null) return null;\n        String str = STRING.build(data);\n        switch(str) {\n                    case \"null\":\n                    return null;\n                    case \"boolean\":\n            return boolean.class;\n                    case \"integer\":\n            return int.class;\n                    case \"number\":\n            return float.class;\n                    case \"string\":\n            return String.class;\n                    case \"object\":\n            return Object.class;\n                    case \"array\":\n            return List.class;\n                    default:\n            throw new JedisException(\"Unknown type: \" + str);\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "62", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \").append(escapeHtml(bcc)).append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n\n        html.append(\"</div></div>\\n\");\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n\n        assert request != null;\n\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n        return html.toString();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "163", "src_id": "M790", "code": "\n    @Override\n    public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined, ProtectionDomain protectionDomain,byte[] classfileBuffer) throws IllegalClassFormatException {\n\n    if (className == null) {\n        return null;\n    }\n    className = className.replace('/', '.');\n    List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n            // 倒序，因为要执行的配置生效\n    ListIterator<RetransformEntry> listIterator = allRetransformEntries.listIterator(allRetransformEntries.size());\n    while (listIterator.hasPrevious()) {\n        RetransformEntry retransformEntry = listIterator.previous();\n        int id = retransformEntry.getId();\n                // 判断类名是否一致\n        boolean updateFlag = false;\n                // 类名一致，则看是否要比较 loader，如果不需要比较 loader，则认为成功\n        if (className.equals(retransformEntry.getClassName())) {\n\n                                           if (retransformEntry.getClassLoaderClass() != null|| retransformEntry.getHashCode() != null) {\n            updateFlag = isLoaderMatch(retransformEntry, loader);\n                                           } else {\n                                             updateFlag = true;\n                                           }\n        }\n\n        if (updateFlag) {\n                                           logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\", className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n                                           retransformEntry.incTransformCount();\n                                           return retransformEntry.getBytes();\n        }\n    }\n    return null;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "189", "src_id": "M448", "code": "\n    private static void writeThreadPoolMetrics(final HystrixThreadPoolMetrics threadPoolMetrics, JsonGenerator json) throws IOException {\n       HystrixThreadPoolKey key = threadPoolMetrics.getThreadPoolKey();\n       json.writeStartObject();\n       json.writeStringField(\"type\", \"HystrixThreadPool\");\n       json.writeStringField(\"name\", key.name());\n       json.writeNumberField(\"currentTime\", System.currentTimeMillis());\n       json.writeNumberField(\"currentActiveCount\", threadPoolMetrics.getCurrentActiveCount().intValue());\n       json.writeNumberField(\"currentCompletedTaskCount\", threadPoolMetrics.getCurrentCompletedTaskCount().longValue());\n       json.writeNumberField(\"currentCorePoolSize\", threadPoolMetrics.getCurrentCorePoolSize().intValue());\n       json.writeNumberField(\"currentLargestPoolSize\", threadPoolMetrics.getCurrentLargestPoolSize().intValue());\n       json.writeNumberField(\"currentMaximumPoolSize\", threadPoolMetrics.getCurrentMaximumPoolSize().intValue());\n       json.writeNumberField(\"currentPoolSize\", threadPoolMetrics.getCurrentPoolSize().intValue());\n       json.writeNumberField(\"currentQueueSize\", threadPoolMetrics.getCurrentQueueSize().intValue());\n       json.writeNumberField(\"currentTaskCount\", threadPoolMetrics.getCurrentTaskCount().longValue());\n       safelyWriteNumberField(json, \"rollingCountThreadsExecuted\", new Func0<Long>() {\n                                                                       @Override\n                                                                       public Long call() {\n                                                                       return threadPoolMetrics.getRollingCount(HystrixEventType.ThreadPool.EXECUTED);\n                                                                       }\n\n                                                                   });\n       json.writeNumberField(\"rollingMaxActiveThreads\", threadPoolMetrics.getRollingMaxActiveThreads());\n       safelyWriteNumberField(json, \"rollingCountCommandRejections\", new Func0<Long>() {\n                                                                         @Override\n                                                                         public Long call() {\n                                                                         return threadPoolMetrics.getRollingCount(HystrixEventType.ThreadPool.REJECTED);\n                                                                         }\n\n                                                                     });\n       json.writeNumberField(\"propertyValue_queueSizeRejectionThreshold\",\n           threadPoolMetrics.getProperties().queueSizeRejectionThreshold().get());\n       json.writeNumberField(\"propertyValue_metricsRollingStatisticalWindowInMilliseconds\",\n           threadPoolMetrics.getProperties().metricsRollingStatisticalWindowInMilliseconds().get());\n       json.writeNumberField(\"reportingHosts\", 1); // this will get summed across all instances in a cluster\n       json.writeEndObject();\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "63", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) return false;\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            Class < ?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n\n            try {\n                Class < ?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "164", "src_id": "M716", "code": "\n    public static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n        // 执行失败:输出失败状态\n       table.row(\"IS-RETURN\", \"\" + false);\n       table.row(\"IS-EXCEPTION\", \"\" + true);\n\n        // 执行失败:输出失败异常信息\n       Throwable cause;\n       Throwable t = (Throwable) throwableVO.getObject();\n       if (t instanceof InvocationTargetException) {\n        cause = t.getCause();\n       } else {\n         cause = t;\n       }\n\n       if (throwableVO.needExpand()) {\n        table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n       } else {\n         StringWriter stringWriter = new StringWriter();\n         PrintWriter printWriter = new PrintWriter(stringWriter);\n         try {\n           cause.printStackTrace(printWriter);\n           table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n         }\n\nfinally {\n                  printWriter.close();\n         }\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "146", "src_id": "M31", "code": "\n    private JsonNode validateLicense(String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n       String requestBody = String.format(\"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\", licenseKey, machineFingerprint);\n       HttpRequest request = HttpRequest.newBuilder().uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\")).header(\"Content-Type\", \"application/vnd.api+json\").header(\"Accept\", \"application/vnd.api+json\")\n                        // .header(\"Authorization\", \"License \" + licenseKey).POST(HttpRequest.BodyPublishers.ofString(requestBody)).build();\n       HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n       log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n       JsonNode jsonResponse = objectMapper.readTree(response.body());\n       if (response.statusCode() == 200) {\n        JsonNode metaNode = jsonResponse.path(\"meta\");\n        boolean isValid = metaNode.path(\"valid\").asBoolean();\n        String detail = metaNode.path(\"detail\").asText();\n        String code = metaNode.path(\"code\").asText();\n        log.info(\"License validity: {}\", isValid);\n        log.info(\"Validation detail: {}\", detail);\n        log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n        JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n        if (!licenseAttrs.isMissingNode()) {\n                                             context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                                             context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n                                             log.info(\"License floating (from license): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n        }\n\n            // Also check the policy for floating license support if included\n        JsonNode includedNode = jsonResponse.path(\"included\");\n        JsonNode policyNode = null;\n        if (includedNode.isArray()) {\n                                             for (JsonNode node : includedNode) {\n\n            if (\"policies\".equals(node.path(\"type\").asText())) {\n                                                                                    policyNode = node;\n                                                                                    break;\n            }\n                                             }\n        }\n\n        if (policyNode != null) {\n                // Check if this is a floating license from policy\n                                             boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                                             int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                                             if (policyFloating) {\n                                    context.isFloatingLicense = true;\n                                    context.maxMachines = policyMaxMachines;\n                                             }\n                                             log.info(\"License floating (from policy): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n        }\n\n            // Extract user count, default to 1 if not specified\n        int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n        applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n        context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"isEnterprise\").asBoolean(false);\n        log.debug(applicationProperties.toString());\n       } else {\n         log.error(\"Error validating license. Status code: {}\", response.statusCode());\n       }\n       return jsonResponse;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "165", "src_id": "M602", "code": "\n    private AsyncProfiler profilerInstance() {\n\n    if (profiler != null) {\n        return profiler;\n    }\n\n        // try to load from special path\n\n    if (ProfilerAction.load.toString().equals(action)) {\n        profiler = AsyncProfiler.getInstance(this.actionArg);\n    }\n\n    if (libPath != null) {\n            // load from arthas directory\n            // 尝试把lib文件复制到临时文件里，避免多次attach时出现 Native Library already loaded in another classloader\n        FileOutputStream tmpLibOutputStream = null;\n        FileInputStream libInputStream = null;\n        try {\n        File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n        tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n        libInputStream = new FileInputStream(libPath);\n        IOUtils.copy(libInputStream, tmpLibOutputStream);\n        libPath = tmpLibFile.getAbsolutePath();\n        logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n        } catch (Throwable e) {\n          logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n        }\n\nfinally {\n                             IOUtils.close(libInputStream);\n                             IOUtils.close(tmpLibOutputStream);\n        }\n        profiler = AsyncProfiler.getInstance(libPath);\n    } else {\n\n      if (OSUtils.isLinux()|| OSUtils.isMac()) {\n        throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n      } else {\n        throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n      }\n    }\n    return profiler;\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "147", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\") @Operation(summary = \"Convert a file to a PDF using LibreOffice\", description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\" + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n       MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n       File file = null;\n       try {\n        file = convertToPdf(inputFile);\n        PDDocument doc = pdfDocumentFactory.load(file);\n        return WebResponseUtils.pdfDocToWebResponse(doc,\n                                                    Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\");\n       }\n\nfinally {\n\n        if (file != null) file.delete();\n       }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": true}
