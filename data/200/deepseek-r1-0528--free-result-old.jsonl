{"project_name": "jedis", "pair_id": "1", "src_id": "M127", "code": "\nprivate void build() {\n  // check build state to prevent recursion\n  if (building) {\n    return;\n  }\n\n  building = true;\n  try {\n    if (data != null) {\n      if (data instanceof JedisDataException) {\n        exception = (JedisDataException) data;\n      } else {\n        response = builder.build(data);\n      }\n    }\n\n    data = null;\n  } finally {\n    building = false;\n    built = true;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "2", "src_id": "M1184", "code": "\n@Override\npublic int read(byte[] b, int off, int len) throws JedisConnectionException {\n  ensureFill();\n  \n  int length = Math.min(limit - count, len);\n  System.arraycopy(buf, count, b, off, length);\n  count += length;\n  return length;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "3", "src_id": "M1128", "code": "\nprivate HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n  String host = getMasterAddrByNameResult.get(0);\n  int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n  return new HostAndPort(host, port);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "4", "src_id": "M1154", "code": "\npublic String getElement() {\n  if (element != null) {\n    return SafeEncoder.encode(element);\n  }\n  return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "5", "src_id": "M937", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (!(o instanceof GeoCoordinate)) return false;\n  \n  GeoCoordinate that = (GeoCoordinate) o;\n  return Double.compare(that.longitude, longitude) == 0 \n      && Double.compare(that.latitude, latitude) == 0;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "6", "src_id": "M1073", "code": "\n@SuppressWarnings(\"unchecked\")\npublic List<byte[]> getBinaryMultiBulkReply() {\n  flush();\n  return (List<byte[]>) readProtocolWithCheckingBroken();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "7", "src_id": "M127", "code": "\nprivate void build() {\n  // check build state to prevent recursion\n  if (building) return;\n\n  building = true;\n  try {\n    if (data != null) {\n      if (data instanceof JedisDataException) {\n        exception = (JedisDataException) data;\n      } else {\n        response = builder.build(data);\n      }\n    }\n\n    data = null;\n  } finally {\n    building = false;\n    built = true;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "8", "src_id": "M1184", "code": "\n@Override\npublic int read(byte[] b, int off, int len) throws JedisConnectionException {\n  ensureFill();\n\n  final int length = Math.min(limit - count, len);\n  System.arraycopy(buf, count, b, off, length);\n  count += length;\n  return length;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "9", "src_id": "M1128", "code": "\nprivate HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n  String host = getMasterAddrByNameResult.get(0);\n  int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n\n  return new HostAndPort(host, port);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "10", "src_id": "M1154", "code": "\npublic String getElement() {\n  if (element != null) return SafeEncoder.encode(element);\n  else return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "11", "src_id": "M937", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (o == null) return false;\n  if (o == this) return true;\n  if (!(o instanceof GeoCoordinate)) return false;\n\n  GeoCoordinate that = (GeoCoordinate) o;\n\n  if (Double.compare(that.longitude, longitude) != 0) return false;\n  return Double.compare(that.latitude, latitude) == 0;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "12", "src_id": "M1073", "code": "\n@SuppressWarnings(\"unchecked\")\npublic List<byte[]> getBinaryMultiBulkReply() {\n  flush();\n  return (List<byte[]>) readProtocolWithCheckingBroken();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "13", "src_id": "M1291", "code": "\nprivate static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n  if (!inclusive) {\n    sb.append('(');\n  }\n  if (n == Double.NEGATIVE_INFINITY) {\n    sb.append(\"-inf\");\n  } else if (n == Double.POSITIVE_INFINITY) {\n    sb.append(\"inf\");\n  } else {\n    sb.append(n);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "14", "src_id": "M1292", "code": "\n@Override\npublic String toString() {\n  StringBuilder sb = new StringBuilder();\n  sb.append('[');\n  appendFrom(sb, inclusiveMin);\n  sb.append(' ');\n  appendTo(sb, inclusiveMax);\n  sb.append(']');\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "15", "src_id": "M1290", "code": "\n@Override\npublic String toString(Parenthesize parenMode) {\n  StringBuilder sb = new StringBuilder();\n  StringJoiner sj = new StringJoiner(getJoinString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append('(');\n  }\n  for (Node n : children) {\n    sj.add(n.toString(parenMode));\n  }\n  sb.append(sj);\n  if (shouldParenthesize(parenMode)) {\n    sb.append(')');\n  }\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "16", "src_id": "M284", "code": "\n@Override\npublic long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "17", "src_id": "M792", "code": "\n@Override\npublic List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "18", "src_id": "M727", "code": "\n@Override\npublic Map<String, CommandDocument> commandDocs(String... commands) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n  return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "19", "src_id": "M728", "code": "\n@Override\npublic List<String> commandGetKeys(String... command) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "20", "src_id": "M245", "code": "\npublic GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n  this.byBox = true;\n  this.width = width;\n  this.height = height;\n  this.unit = unit;\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "21", "src_id": "M732", "code": "\n@Override\npublic List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n  connection.sendCommand(args);\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "22", "src_id": "M712", "code": "\n@Override\npublic LCSMatchResult lcs(String keyA, String keyB, LCSParams params) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "23", "src_id": "M551", "code": "\n@Override\npublic long pexpire(String key, long milliseconds, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "24", "src_id": "M844", "code": "\n@Override\npublic List<Object> functionListBinary() {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.functionListBinary());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "25", "src_id": "M298", "code": "\n@Override\npublic long sintercard(int limit, byte[]... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sintercard(limit, keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "26", "src_id": "M1291", "code": "\nprivate static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n  if (!inclusive) {\n    sb.append(\"(\");\n  }\n  if (n == Double.NEGATIVE_INFINITY) {\n    sb.append(\"-inf\");\n  } else if (n == Double.POSITIVE_INFINITY) {\n    sb.append(\"inf\");\n  } else {\n    sb.append(n);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "27", "src_id": "M1292", "code": "\n@Override\npublic String toString() {\n  StringBuilder sb = new StringBuilder();\n  sb.append('[');\n  appendFrom(sb, inclusiveMin);\n  sb.append(' ');\n  appendTo(sb, inclusiveMax);\n  sb.append(']');\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "28", "src_id": "M1290", "code": "\n@Override\npublic String toString(Parenthesize parenMode) {\n  StringBuilder sb = new StringBuilder();\n  StringJoiner sj = new StringJoiner(getJoinString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append('(');\n  }\n  for (Node n : children) {\n    sj.add(n.toString(parenMode));\n  }\n  sb.append(sj.toString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append(')');\n  }\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "29", "src_id": "M1291", "code": "\nprivate static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n  if (!inclusive) {\n    sb.append(\"(\");\n  }\n  if (n == Double.NEGATIVE_INFINITY) {\n    sb.append(\"-inf\");\n  } else if (n == Double.POSITIVE_INFINITY) {\n    sb.append(\"inf\");\n  } else {\n    sb.append(n);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "30", "src_id": "M1292", "code": "\n@Override\npublic String toString() {\n  final StringBuilder sb = new StringBuilder();\n  sb.append('[');\n  appendFrom(sb, inclusiveMin);\n  sb.append(' ');\n  appendTo(sb, inclusiveMax);\n  sb.append(']');\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "31", "src_id": "M1290", "code": "\n@Override\npublic String toString(Parenthesize parenMode) {\n  final StringBuilder sb = new StringBuilder();\n  final StringJoiner sj = new StringJoiner(getJoinString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append('(');\n  }\n  for (Node n : children) {\n    sj.add(n.toString(parenMode));\n  }\n  sb.append(sj.toString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append(')');\n  }\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "32", "src_id": "M1291", "code": "\n  private static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n    if (!inclusive) {\n      sb.append('(');\n    }\n    if (n == Double.NEGATIVE_INFINITY) {\n      sb.append(\"-inf\");\n    } else if (n == Double.POSITIVE_INFINITY) {\n      sb.append(\"inf\");\n    } else {\n      sb.append(n);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "33", "src_id": "M1292", "code": "\n  @Override\n  public String toString() {\n    StringBuilder sb = new StringBuilder();\n    sb.append('[');\n    appendFrom(sb, inclusiveMin);\n    sb.append(' ');\n    appendTo(sb, inclusiveMax);\n    sb.append(']');\n    return sb.toString();\n  }\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "34", "src_id": "M1290", "code": "\n  @Override\n  public String toString(Parenthesize parenMode) {\n    StringBuilder sb = new StringBuilder();\n    StringJoiner sj = new StringJoiner(getJoinString());\n    if (shouldParenthesize(parenMode)) {\n      sb.append('(');\n    }\n    for (Node n : children) {\n      sj.add(n.toString(parenMode));\n    }\n    sb.append(sj.toString());\n    if (shouldParenthesize(parenMode)) {\n      sb.append(')');\n    }\n    return sb.toString();\n  }\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "35", "src_id": "M107", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n  if (data == null) return null;\n  List list = (List) data;\n  if (list.isEmpty()) return Collections.emptyList();\n\n  if (list.get(0) instanceof KeyValue) {\n    return ((List<KeyValue>) list).stream()\n            .map(kv -> new KeyValue<>(BINARY.build(kv.getKey()),\n                STREAM_ENTRY_BINARY_LIST.build(kv.getValue())))\n            .collect(Collectors.toList());\n  } else {\n    List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n    for (Object anObj : list) {\n      List<Object> streamObj = (List<Object>) anObj;\n      byte[] streamKey = BINARY.build(streamObj.get(0));\n      List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n      result.add(KeyValue.of(streamKey, streamEntries));\n    }\n    return result;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "36", "src_id": "M1012", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(\n        byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,\n        Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP)\n            .add(GROUP).add(groupName).add(consumer)\n            .addParams(xReadGroupParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "37", "src_id": "M1172", "code": "\n@Override\npublic boolean equals(Object o) {\n    if (o == null) return false;\n    if (o == this) return true;\n    if (!(o instanceof ByteArrayWrapper)) return false;\n\n    return Arrays.equals(data, ((ByteArrayWrapper) o).data);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "38", "src_id": "M154", "code": "\n@Override\npublic Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,\n    Map<byte[], StreamEntryID> streams) {\n  return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "39", "src_id": "M1010", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(\n        XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n    entrySet.forEach(entry -> args.key(entry.getKey()));\n    entrySet.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "40", "src_id": "M1009", "code": "\npublic final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(\n        XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "41", "src_id": "M152", "code": "\n@Deprecated\n@Override\npublic List<Object> xreadGroup(byte[] groupName, byte[] consumer,\n  XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n  return executeCommand(\n      commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "42", "src_id": "M1177", "code": "\npublic static void closeQuietly(AutoCloseable resource) {\n    // It's same thing as Apache Commons - IOUtils.closeQuietly()\n    if (resource != null) {\n        try {\n            resource.close();\n        } catch (Exception e) {\n            // ignored\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "43", "src_id": "M620", "code": "\n@Override\npublic Set<String> sinter(final String... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sinter(keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "44", "src_id": "M50", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic Map<byte[], byte[]> build(Object data) {\n    List<Object> list = (List<Object>) data;\n    if (list.isEmpty()) {\n        return Collections.emptyMap();\n    }\n\n    if (list.get(0) instanceof KeyValue) {\n        Map<byte[], byte[]> map = new JedisByteHashMap<>();\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            KeyValue kv = (KeyValue) iterator.next();\n            map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));\n        }\n        return map;\n    } else {\n        Map<byte[], byte[]> map = new JedisByteHashMap<>();\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n        }\n        return map;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "45", "src_id": "M933", "code": "\n@Deprecated\npublic static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n    Builder builder = builder();\n    builder.protocol(copy.getRedisProtocol());\n    builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n    builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n    builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n\n    Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n    if (credentialsProvider != null) {\n        builder.credentialsProvider(credentialsProvider);\n    } else {\n        builder.user(copy.getUser());\n        builder.password(copy.getPassword());\n    }\n\n    builder.database(copy.getDatabase());\n    builder.clientName(copy.getClientName());\n\n    builder.ssl(copy.isSsl());\n    builder.sslSocketFactory(copy.getSslSocketFactory());\n    builder.sslParameters(copy.getSslParameters());\n    builder.hostnameVerifier(copy.getHostnameVerifier());\n    builder.sslOptions(copy.getSslOptions());\n    builder.hostAndPortMapper(copy.getHostAndPortMapper());\n\n    builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n    if (copy.isReadOnlyForRedisClusterReplicas()) {\n        builder.readOnlyForRedisClusterReplicas();\n    }\n\n    builder.authXManager(copy.getAuthXManager());\n\n    return builder.build();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "46", "src_id": "M1146", "code": "\nprivate <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n\n    JedisRedirectionException redirect = null;\n    int consecutiveConnectionFailures = 0;\n    Exception lastException = null;\n    for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {\n        Connection connection = null;\n        try {\n            if (redirect != null) {\n                connection = provider.getConnection(redirect.getTargetNode());\n                if (redirect instanceof JedisAskDataException) {\n                    // TODO: Pipeline asking with the original command to make it faster....\n                    connection.executeCommand(Protocol.Command.ASKING);\n                }\n            } else {\n                connection = toReplica ? provider.getReplicaConnection(commandObject.getArguments())\n                    : provider.getConnection(commandObject.getArguments());\n            }\n\n            return execute(connection, commandObject);\n\n        } catch (JedisClusterOperationException jnrcne) {\n            throw jnrcne;\n        } catch (JedisConnectionException jce) {\n            lastException = jce;\n            ++consecutiveConnectionFailures;\n            log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n            // \"- 1\" because we just did one, but the attemptsLeft counter hasn't been decremented yet\n            boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);\n            if (reset) {\n                consecutiveConnectionFailures = 0;\n                redirect = null;\n            }\n        } catch (JedisRedirectionException jre) {\n            // avoid updating lastException if it is a connection exception\n            if (lastException == null || lastException instanceof JedisRedirectionException) {\n                lastException = jre;\n            }\n            log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n            consecutiveConnectionFailures = 0;\n            redirect = jre;\n            // if MOVED redirection occurred,\n            if (jre instanceof JedisMovedDataException) {\n                // it rebuilds cluster's slot cache recommended by Redis cluster specification\n                provider.renewSlotCache(connection);\n            }\n        } finally {\n            IOUtils.closeQuietly(connection);\n        }\n        if (Instant.now().isAfter(deadline)) {\n            throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n        }\n    }\n\n    JedisClusterOperationException maxAttemptsException\n        = new JedisClusterOperationException(\"No more cluster attempts left.\");\n    maxAttemptsException.addSuppressed(lastException);\n    throw maxAttemptsException;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "47", "src_id": "M884", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n\n    if (filters == null) {\n        throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n    }\n\n    if (fromTimestamp == null) {\n        args.add(MINUS);\n    } else {\n        args.add(toByteArray(fromTimestamp));\n    }\n\n    if (toTimestamp == null) {\n        args.add(PLUS);\n    } else {\n        args.add(toByteArray(toTimestamp));\n    }\n\n    if (latest) {\n        args.add(LATEST);\n    }\n\n    if (filterByTimestamps != null) {\n        args.add(FILTER_BY_TS);\n        for (long ts : filterByTimestamps) {\n            args.add(toByteArray(ts));\n        }\n    }\n\n    if (filterByValues != null) {\n        args.add(FILTER_BY_VALUE);\n        for (double value : filterByValues) {\n            args.add(toByteArray(value));\n        }\n    }\n\n    if (withLabels) {\n        args.add(WITHLABELS);\n    } else if (selectedLabels != null) {\n        args.add(SELECTED_LABELS);\n        for (String label : selectedLabels) {\n            args.add(label);\n        }\n    }\n\n    if (count != null) {\n        args.add(COUNT).add(toByteArray(count));\n    }\n\n    if (aggregationType != null) {\n\n        if (align != null) {\n            args.add(ALIGN).add(align);\n        }\n\n        args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n\n        if (bucketTimestamp != null) {\n            args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n        }\n\n        if (empty) {\n            args.add(EMPTY);\n        }\n    }\n\n    args.add(FILTER);\n    for (String filter : filters) {\n        args.add(filter);\n    }\n\n    if (groupByLabel != null && groupByReduce != null) {\n        args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "48", "src_id": "M502", "code": "\n@Deprecated\n@Override\npublic List<Object> xread(XReadParams xReadParams, Entry<byte[], byte[]>... streams) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "49", "src_id": "M416", "code": "\n@Override\npublic List<byte[]> aclLogBinary() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(ACL, LOG);\n    return connection.getBinaryMultiBulkReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "50", "src_id": "M390", "code": "\n@Override\npublic Long objectFreq(final byte[] key) {\n    connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n    return connection.getIntegerReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "51", "src_id": "M231", "code": "\npublic GeoRadiusStoreParam storeDist(String key) {\n    if (key != null) {\n        this.storeDist = true;\n        this.key = key;\n    }\n    return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "52", "src_id": "M284", "code": "\n@Override\npublic long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "53", "src_id": "M792", "code": "\n@Override\npublic List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "54", "src_id": "M727", "code": "\n@Override\npublic Map<String, CommandDocument> commandDocs(String... commands) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n  return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "55", "src_id": "M728", "code": "\n@Override\npublic List<String> commandGetKeys(String... command) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "56", "src_id": "M245", "code": "\npublic GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n  this.byBox = true;\n  this.width = width;\n  this.height = height;\n  this.unit = unit;\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "57", "src_id": "M732", "code": "\n@Override\npublic List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n  connection.sendCommand(args);\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "58", "src_id": "M712", "code": "\n@Override\npublic LCSMatchResult lcs(String keyA, String keyB, LCSParams params) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "59", "src_id": "M551", "code": "\n@Override\npublic long pexpire(String key, long milliseconds, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "60", "src_id": "M844", "code": "\n@Override\npublic List<Object> functionListBinary() {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.functionListBinary());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "61", "src_id": "M298", "code": "\n@Override\npublic long sintercard(int limit, byte[]... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sintercard(limit, keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "62", "src_id": "M107", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n  if (data == null) return null;\n  List list = (List) data;\n  if (list.isEmpty()) return Collections.emptyList();\n\n  if (list.get(0) instanceof KeyValue) {\n    return ((List<KeyValue>) list).stream()\n        .map(kv -> new KeyValue<>(BINARY.build(kv.getKey()),\n            STREAM_ENTRY_BINARY_LIST.build(kv.getValue())))\n        .collect(Collectors.toList());\n  } else {\n    List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n    for (Object anObj : list) {\n      List<Object> streamObj = (List<Object>) anObj;\n      byte[] streamKey = BINARY.build(streamObj.get(0));\n      List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n      result.add(KeyValue.of(streamKey, streamEntries));\n    }\n    return result;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "63", "src_id": "M1012", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(\n    byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,\n    Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREADGROUP)\n      .add(GROUP).add(groupName).add(consumer)\n      .addParams(xReadGroupParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "64", "src_id": "M1172", "code": "\n@Override\npublic boolean equals(Object other) {\n  if (other == null) return false;\n  if (other == this) return true;\n  if (!(other instanceof ByteArrayWrapper)) return false;\n\n  return Arrays.equals(data, ((ByteArrayWrapper) other).data);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "65", "src_id": "M154", "code": "\n@Override\npublic Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,\n    Map<byte[], StreamEntryID> streams) {\n  return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "66", "src_id": "M1010", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(\n    XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "67", "src_id": "M1009", "code": "\npublic final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(\n    XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "68", "src_id": "M152", "code": "\n@Deprecated\n@Override\npublic List<Object> xreadGroup(byte[] groupName, byte[] consumer,\n    XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n  return executeCommand(\n      commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "69", "src_id": "M1291", "code": "\nprivate static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n  if (!inclusive) {\n    sb.append(\"(\");\n  }\n  if (n == Double.NEGATIVE_INFINITY) {\n    sb.append(\"-inf\");\n  } else if (n == Double.POSITIVE_INFINITY) {\n    sb.append(\"inf\");\n  } else {\n    sb.append(n);\n  }\n}\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "70", "src_id": "M1292", "code": "\n@Override\npublic String toString() {\n  StringBuilder sb = new StringBuilder();\n  sb.append('[');\n  appendFrom(sb, inclusiveMin);\n  sb.append(' ');\n  appendTo(sb, inclusiveMax);\n  sb.append(']');\n  return sb.toString();\n}\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "71", "src_id": "M1290", "code": "\n@Override\npublic String toString(Parenthesize parenMode) {\n  StringBuilder sb = new StringBuilder();\n  StringJoiner sj = new StringJoiner(getJoinString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append('(');\n  }\n  for (Node n : children) {\n    sj.add(n.toString(parenMode));\n  }\n  sb.append(sj.toString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append(')');\n  }\n  return sb.toString();\n}\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "72", "src_id": "M1177", "code": "\npublic static void closeQuietly(AutoCloseable resource) {\n    if (resource != null) {\n        try {\n            resource.close();\n        } catch (Exception e) {\n            // ignored\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "73", "src_id": "M620", "code": "\n@Override\npublic Set<String> sinter(String... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sinter(keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "74", "src_id": "M50", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic Map<byte[], byte[]> build(Object data) {\n    List<Object> list = (List<Object>) data;\n    if (list.isEmpty()) return Collections.emptyMap();\n\n    if (list.get(0) instanceof KeyValue) {\n        Map<byte[], byte[]> map = new JedisByteHashMap();\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            KeyValue kv = (KeyValue) iterator.next();\n            map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));\n        }\n        return map;\n    } else {\n        Map<byte[], byte[]> map = new JedisByteHashMap();\n        Iterator iterator = list.iterator();\n        while (iterator.hasNext()) {\n            map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n        }\n        return map;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "75", "src_id": "M933", "code": "\n@Deprecated\npublic static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n    Builder builder = builder();\n    builder.protocol(copy.getRedisProtocol());\n    builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n    builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n    builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n\n    Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n    if (credentialsProvider != null) {\n        builder.credentialsProvider(credentialsProvider);\n    } else {\n        builder.user(copy.getUser());\n        builder.password(copy.getPassword());\n    }\n\n    builder.database(copy.getDatabase());\n    builder.clientName(copy.getClientName());\n\n    builder.ssl(copy.isSsl());\n    builder.sslSocketFactory(copy.getSslSocketFactory());\n    builder.sslParameters(copy.getSslParameters());\n    builder.hostnameVerifier(copy.getHostnameVerifier());\n    builder.sslOptions(copy.getSslOptions());\n    builder.hostAndPortMapper(copy.getHostAndPortMapper());\n\n    builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n    if (copy.isReadOnlyForRedisClusterReplicas()) {\n        builder.readOnlyForRedisClusterReplicas();\n    }\n\n    builder.authXManager(copy.getAuthXManager());\n\n    return builder.build();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "76", "src_id": "M1146", "code": "\nprivate <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n    Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n\n    JedisRedirectionException redirect = null;\n    int consecutiveConnectionFailures = 0;\n    Exception lastException = null;\n    for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {\n        Connection connection = null;\n        try {\n            if (redirect != null) {\n                connection = provider.getConnection(redirect.getTargetNode());\n                if (redirect instanceof JedisAskDataException) {\n                    connection.executeCommand(Protocol.Command.ASKING);\n                }\n            } else {\n                connection = toReplica ? provider.getReplicaConnection(commandObject.getArguments())\n                    : provider.getConnection(commandObject.getArguments());\n            }\n\n            return execute(connection, commandObject);\n\n        } catch (JedisClusterOperationException jnrcne) {\n            throw jnrcne;\n        } catch (JedisConnectionException jce) {\n            lastException = jce;\n            ++consecutiveConnectionFailures;\n            log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n            boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);\n            if (reset) {\n                consecutiveConnectionFailures = 0;\n                redirect = null;\n            }\n        } catch (JedisRedirectionException jre) {\n            if (lastException == null || lastException instanceof JedisRedirectionException) {\n                lastException = jre;\n            }\n            log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n            consecutiveConnectionFailures = 0;\n            redirect = jre;\n            if (jre instanceof JedisMovedDataException) {\n                provider.renewSlotCache(connection);\n            }\n        } finally {\n            IOUtils.closeQuietly(connection);\n        }\n        if (Instant.now().isAfter(deadline)) {\n            throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n        }\n    }\n\n    JedisClusterOperationException maxAttemptsException\n        = new JedisClusterOperationException(\"No more cluster attempts left.\");\n    maxAttemptsException.addSuppressed(lastException);\n    throw maxAttemptsException;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "77", "src_id": "M884", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (filters == null) {\n        throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n    }\n\n    if (fromTimestamp == null) {\n        args.add(MINUS);\n    } else {\n        args.add(toByteArray(fromTimestamp));\n    }\n\n    if (toTimestamp == null) {\n        args.add(PLUS);\n    } else {\n        args.add(toByteArray(toTimestamp));\n    }\n\n    if (latest) {\n        args.add(LATEST);\n    }\n\n    if (filterByTimestamps != null) {\n        args.add(FILTER_BY_TS);\n        for (long ts : filterByTimestamps) {\n            args.add(toByteArray(ts));\n        }\n    }\n\n    if (filterByValues != null) {\n        args.add(FILTER_BY_VALUE);\n        for (double value : filterByValues) {\n            args.add(toByteArray(value));\n        }\n    }\n\n    if (withLabels) {\n        args.add(WITHLABELS);\n    } else if (selectedLabels != null) {\n        args.add(SELECTED_LABELS);\n        for (String label : selectedLabels) {\n            args.add(label);\n        }\n    }\n\n    if (count != null) {\n        args.add(COUNT).add(toByteArray(count));\n    }\n\n    if (aggregationType != null) {\n        if (align != null) {\n            args.add(ALIGN).add(align);\n        }\n\n        args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n\n        if (bucketTimestamp != null) {\n            args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n        }\n\n        if (empty) {\n            args.add(EMPTY);\n        }\n    }\n\n    args.add(FILTER);\n    for (String filter : filters) {\n        args.add(filter);\n    }\n\n    if (groupByLabel != null && groupByReduce != null) {\n        args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "78", "src_id": "M502", "code": "\n@Deprecated\n@Override\npublic List<Object> xread(XReadParams xReadParams, Entry<byte[], byte[]>... streams) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "79", "src_id": "M416", "code": "\n@Override\npublic List<byte[]> aclLogBinary() {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(ACL, LOG);\n    return connection.getBinaryMultiBulkReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "80", "src_id": "M390", "code": "\n@Override\npublic Long objectFreq(byte[] key) {\n    connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n    return connection.getIntegerReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "81", "src_id": "M231", "code": "\npublic GeoRadiusStoreParam storeDist(String key) {\n    if (key != null) {\n        this.storeDist = true;\n        this.key = key;\n    }\n    return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "82", "src_id": "M890", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  TSArithByParams<?> that = (TSArithByParams<?>) o;\n  return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff &&\n      Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 &&\n      Objects.equals(timestamp, that.timestamp) &&\n      Objects.equals(retentionPeriod, that.retentionPeriod) &&\n      encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) &&\n      duplicatePolicy == that.duplicatePolicy && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "83", "src_id": "M903", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  TSCreateParams that = (TSCreateParams) o;\n  return ignore == that.ignore && ignoreMaxTimediff == that.ignoreMaxTimediff &&\n      Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 &&\n      Objects.equals(retentionPeriod, that.retentionPeriod) &&\n      encoding == that.encoding && Objects.equals(chunkSize, that.chunkSize) &&\n      duplicatePolicy == that.duplicatePolicy && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "84", "src_id": "M907", "code": "\n@Override\npublic int hashCode() {\n  int result = Boolean.hashCode(latest);\n  result = 31 * result + Boolean.hashCode(withLabels);\n  result = 31 * result + Arrays.hashCode(selectedLabels);\n  return result;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "85", "src_id": "M127", "code": "\nprivate void build() {\n  // check build state to prevent recursion\n  if (building) {\n    return;\n  }\n\n  building = true;\n  try {\n    if (data != null) {\n      if (data instanceof JedisDataException) {\n        exception = (JedisDataException) data;\n      } else {\n        response = builder.build(data);\n      }\n    }\n\n    data = null;\n  } finally {\n    building = false;\n    built = true;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "86", "src_id": "M1184", "code": "\n@Override\npublic int read(byte[] b, int off, int len) throws JedisConnectionException {\n  ensureFill();\n\n  final int length = Math.min(limit - count, len);\n  System.arraycopy(buf, count, b, off, length);\n  count += length;\n  return length;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "87", "src_id": "M1128", "code": "\nprivate HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n  String host = getMasterAddrByNameResult.get(0);\n  int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n\n  return new HostAndPort(host, port);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "88", "src_id": "M1154", "code": "\npublic String getElement() {\n  if (element != null) {\n    return SafeEncoder.encode(element);\n  } else {\n    return null;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "89", "src_id": "M937", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  GeoCoordinate that = (GeoCoordinate) o;\n\n  return Double.compare(that.longitude, longitude) == 0 \n      && Double.compare(that.latitude, latitude) == 0;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "90", "src_id": "M1073", "code": "\n@SuppressWarnings(\"unchecked\")\npublic List<byte[]> getBinaryMultiBulkReply() {\n  flush();\n  return (List<byte[]>) readProtocolWithCheckingBroken();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "91", "src_id": "M1291", "code": "\nprivate static void appendNum(StringBuilder sb, double n, boolean inclusive) {\n  if (!inclusive) {\n    sb.append(\"(\");\n  }\n  if (n == Double.NEGATIVE_INFINITY) {\n    sb.append(\"-inf\");\n  } else if (n == Double.POSITIVE_INFINITY) {\n    sb.append(\"inf\");\n  } else {\n    sb.append(n);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "92", "src_id": "M1292", "code": "\n@Override\npublic String toString() {\n  StringBuilder sb = new StringBuilder();\n  sb.append('[');\n  appendFrom(sb, inclusiveMin);\n  sb.append(' ');\n  appendTo(sb, inclusiveMax);\n  sb.append(']');\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "93", "src_id": "M1290", "code": "\n@Override\npublic String toString(Parenthesize parenMode) {\n  StringBuilder sb = new StringBuilder();\n  StringJoiner sj = new StringJoiner(getJoinString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append('(');\n  }\n  for (Node n : children) {\n    sj.add(n.toString(parenMode));\n  }\n  sb.append(sj.toString());\n  if (shouldParenthesize(parenMode)) {\n    sb.append(')');\n  }\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "94", "src_id": "M233", "code": "\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    XAutoClaimParams that = (XAutoClaimParams) o;\n    return Objects.equals(count, that.count);\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "95", "src_id": "M1104", "code": "\n    @Override\n    public boolean equals(Object o) {\n      if (this == o) {\n        return true;\n      }\n      if (o == null || getClass() != o.getClass()) {\n        return false;\n      }\n      return Arrays.equals(raw, ((Raw) o).raw);\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "96", "src_id": "M260", "code": "\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ZAddParams that = (ZAddParams) o;\n    return change == that.change && existence == that.existence && comparison == that.comparison;\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "97", "src_id": "M234", "code": "\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ClientKillParams that = (ClientKillParams) o;\n    return Objects.equals(params, that.params);\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "98", "src_id": "M256", "code": "\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ModuleLoadExParams that = (ModuleLoadExParams) o;\n    return Objects.equals(configs, that.configs) && Objects.equals(args, that.args);\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "99", "src_id": "M238", "code": "\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    MigrateParams that = (MigrateParams) o;\n    return copy == that.copy && replace == that.replace && Objects.equals(username, that.username) && Objects.equals(password, that.password);\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "100", "src_id": "M229", "code": "\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n    ZParams zParams = (ZParams) o;\n    return Objects.equals(params, zParams.params);\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "101", "src_id": "M284", "code": "\n@Override\npublic long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "102", "src_id": "M792", "code": "\n@Override\npublic List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "103", "src_id": "M727", "code": "\n@Override\npublic Map<String, CommandDocument> commandDocs(String... commands) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n  return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "104", "src_id": "M728", "code": "\n@Override\npublic List<String> commandGetKeys(String... command) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "105", "src_id": "M245", "code": "\npublic GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n  this.byBox = true;\n  this.width = width;\n  this.height = height;\n  this.unit = unit;\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "106", "src_id": "M732", "code": "\n@Override\npublic List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n  connection.sendCommand(args);\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "107", "src_id": "M712", "code": "\n@Override\npublic LCSMatchResult lcs(String keyA, String keyB, LCSParams params) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "108", "src_id": "M551", "code": "\n@Override\npublic long pexpire(String key, long milliseconds, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "109", "src_id": "M844", "code": "\n@Override\npublic List<Object> functionListBinary() {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.functionListBinary());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "110", "src_id": "M298", "code": "\n@Override\npublic long sintercard(int limit, byte[]... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sintercard(limit, keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "111", "src_id": "M284", "code": "\n@Override\npublic long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "112", "src_id": "M792", "code": "\n@Override\npublic List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "113", "src_id": "M727", "code": "\n@Override\npublic Map<String, CommandDocument> commandDocs(String... commands) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(DOCS.name());\n  args.addObjects(commands);\n  connection.sendCommand(args);\n  return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "114", "src_id": "M728", "code": "\n@Override\npublic List<String> commandGetKeys(String... command) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(GETKEYS.name());\n  args.addObjects(command);\n  connection.sendCommand(args);\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "115", "src_id": "M245", "code": "\npublic GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n  this.byBox = true;\n  this.width = width;\n  this.height = height;\n  this.unit = unit;\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "116", "src_id": "M732", "code": "\n@Override\npublic List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n  connection.sendCommand(args);\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "117", "src_id": "M712", "code": "\n@Override\npublic LCSMatchResult lcs(String keyA, String keyB, LCSParams params) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "118", "src_id": "M551", "code": "\n@Override\npublic long pexpire(String key, long milliseconds, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "119", "src_id": "M844", "code": "\n@Override\npublic List<Object> functionListBinary() {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.functionListBinary());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "120", "src_id": "M298", "code": "\n@Override\npublic long sintercard(int limit, byte[]... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sintercard(limit, keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "121", "src_id": "M284", "code": "\n  @Override\n  public long expireAt(\n      byte[] key, \n      long unixTime, \n      ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "122", "src_id": "M792", "code": "\n  @Override\n  public List<GeoRadiusResponse> geosearch(\n      String key, \n      String member, \n      double width, \n      double height, \n      GeoUnit unit) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "123", "src_id": "M727", "code": "\n  @Override\n  public Map<String, CommandDocument> commandDocs(String... commands) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n    return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "124", "src_id": "M728", "code": "\n  @Override\n  public List<String> commandGetKeys(String... command) {\n    checkIsInMultiOrPipeline();\n    connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "125", "src_id": "M245", "code": "\n  public GeoSearchParam byBox(\n      double width, \n      double height, \n      GeoUnit unit) {\n    this.byBox = true;\n    this.width = width;\n    this.height = height;\n    this.unit = unit;\n    return this;\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "126", "src_id": "M732", "code": "\n  @Override\n  public List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n    checkIsInMultiOrPipeline();\n    CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n    connection.sendCommand(args);\n    return BuilderFactory.STRING_LIST.build(connection.getOne());\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "127", "src_id": "M712", "code": "\n  @Override\n  public LCSMatchResult lcs(\n      final String keyA, \n      final String keyB, \n      final LCSParams params) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "128", "src_id": "M551", "code": "\n  @Override\n  public long pexpire(\n      final String key, \n      final long milliseconds, \n      final ExpiryOption expiryOption) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "129", "src_id": "M844", "code": "\n  @Override\n  public List<Object> functionListBinary() {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.functionListBinary());\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "130", "src_id": "M298", "code": "\n  @Override\n  public long sintercard(int limit, \n      byte[]... keys) {\n    checkIsInMultiOrPipeline();\n    return connection.executeCommand(commandObjects.sintercard(limit, keys));\n  }\n\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "131", "src_id": "M890", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  TSArithByParams<?> that = (TSArithByParams<?>) o;\n  return ignore == that.ignore\n      && ignoreMaxTimediff == that.ignoreMaxTimediff\n      && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n      && Objects.equals(timestamp, that.timestamp)\n      && Objects.equals(retentionPeriod, that.retentionPeriod)\n      && encoding == that.encoding\n      && Objects.equals(chunkSize, that.chunkSize)\n      && duplicatePolicy == that.duplicatePolicy\n      && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "132", "src_id": "M903", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  TSCreateParams that = (TSCreateParams) o;\n  return ignore == that.ignore\n      && ignoreMaxTimediff == that.ignoreMaxTimediff\n      && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n      && Objects.equals(retentionPeriod, that.retentionPeriod)\n      && encoding == that.encoding\n      && Objects.equals(chunkSize, that.chunkSize)\n      && duplicatePolicy == that.duplicatePolicy\n      && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "133", "src_id": "M907", "code": "\n@Override\npublic int hashCode() {\n  int result = Boolean.hashCode(latest);\n  result = 31 * result + Boolean.hashCode(withLabels);\n  result = 31 * result + Arrays.hashCode(selectedLabels);\n  return result;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "134", "src_id": "M107", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n    if (data == null) {\n        return null;\n    }\n    \n    List<?> rawData = (List<?>) data;\n    if (rawData.isEmpty()) {\n        return Collections.emptyList();\n    }\n\n    if (rawData.get(0) instanceof KeyValue) {\n        return ((List<KeyValue>) rawData).stream()\n                .map(kv -> new KeyValue<>(\n                        BINARY.build(kv.getKey()),\n                        STREAM_ENTRY_BINARY_LIST.build(kv.getValue())\n                ))\n                .collect(Collectors.toList());\n    } else {\n        List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(rawData.size());\n        for (Object rawEntry : rawData) {\n            List<?> entryList = (List<?>) rawEntry;\n            byte[] streamKey = BINARY.build(entryList.get(0));\n            List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(entryList.get(1));\n            result.add(KeyValue.of(streamKey, streamEntries));\n        }\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "135", "src_id": "M1012", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(\n        byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,\n        Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREADGROUP)\n            .add(GROUP).add(groupName).add(consumer)\n            .addParams(xReadGroupParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entries = streams.entrySet();\n    entries.forEach(entry -> args.key(entry.getKey()));\n    entries.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "136", "src_id": "M1172", "code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    ByteArrayWrapper that = (ByteArrayWrapper) o;\n    return Arrays.equals(data, that.data);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "137", "src_id": "M154", "code": "\n@Override\npublic Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(\n        XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "138", "src_id": "M1010", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(\n        XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entries = streams.entrySet();\n    entries.forEach(entry -> args.key(entry.getKey()));\n    entries.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "139", "src_id": "M1009", "code": "\npublic final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(\n        XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n    CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n    Set<Map.Entry<byte[], StreamEntryID>> entries = streams.entrySet();\n    entries.forEach(entry -> args.key(entry.getKey()));\n    entries.forEach(entry -> args.add(entry.getValue()));\n    return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "140", "src_id": "M152", "code": "\n@Deprecated\n@Override\npublic List<Object> xreadGroup(byte[] groupName, byte[] consumer,\n        XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n    return executeCommand(\n            commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "141", "src_id": "M107", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n  if (data == null) {\n    return null;\n  }\n  List list = (List) data;\n  if (list.isEmpty()) {\n    return Collections.emptyList();\n  }\n\n  if (list.get(0) instanceof KeyValue) {\n    return ((List<KeyValue>) list).stream()\n        .map(kv -> new KeyValue<>(BINARY.build(kv.getKey()),\n            STREAM_ENTRY_BINARY_LIST.build(kv.getValue())))\n        .collect(Collectors.toList());\n  } else {\n    List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n    for (Object anObj : list) {\n      List<Object> streamObj = (List<Object>) anObj;\n      byte[] streamKey = BINARY.build(streamObj.get(0));\n      List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n      result.add(KeyValue.of(streamKey, streamEntries));\n    }\n    return result;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "142", "src_id": "M1012", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(\n    byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,\n    Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREADGROUP)\n      .add(GROUP).add(groupName).add(consumer)\n      .addParams(xReadGroupParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "143", "src_id": "M1172", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (o == null) {\n    return false;\n  }\n  if (o == this) {\n    return true;\n  }\n  if (!(o instanceof ByteArrayWrapper)) {\n    return false;\n  }\n\n  ByteArrayWrapper that = (ByteArrayWrapper) o;\n  return Arrays.equals(data, that.data);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "144", "src_id": "M154", "code": "\n@Override\npublic Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,\n    Map<byte[], StreamEntryID> streams) {\n  return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "145", "src_id": "M1010", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(\n    XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "146", "src_id": "M1009", "code": "\npublic final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(\n    XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "147", "src_id": "M152", "code": "\n@Deprecated\n@Override\npublic List<Object> xreadGroup(byte[] groupName, byte[] consumer,\n    XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n  return executeCommand(\n      commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "148", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "149", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration)\n      && Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "150", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  HSetExParams setParams = (HSetExParams) o;\n  return Objects.equals(existance, setParams.existance)\n      && super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "151", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "152", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n  if (listener != null) {\n    this.listener = listener;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "153", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "154", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "155", "src_id": "M107", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic List<Map.Entry<byte[], List<StreamEntryBinary>>> build(Object data) {\n  if (data == null) {\n    return null;\n  }\n  final List list = (List) data;\n  if (list.isEmpty()) {\n    return Collections.emptyList();\n  }\n\n  if (list.get(0) instanceof KeyValue) {\n    return ((List<KeyValue>) list).stream()\n        .map(kv -> new KeyValue<>(\n            BINARY.build(kv.getKey()),\n            STREAM_ENTRY_BINARY_LIST.build(kv.getValue())\n        ))\n        .collect(Collectors.toList());\n  } else {\n    final List<Map.Entry<byte[], List<StreamEntryBinary>>> result = new ArrayList<>(list.size());\n    for (final Object anObj : list) {\n      final List<Object> streamObj = (List<Object>) anObj;\n      final byte[] streamKey = BINARY.build(streamObj.get(0));\n      final List<StreamEntryBinary> streamEntries = STREAM_ENTRY_BINARY_LIST.build(streamObj.get(1));\n      result.add(KeyValue.of(streamKey, streamEntries));\n    }\n    return result;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "156", "src_id": "M1012", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadGroupBinaryAsMap(\n    byte[] groupName, byte[] consumer, XReadGroupParams xReadGroupParams,\n    Map<byte[], StreamEntryID> streams) {\n  final CommandArguments args = commandArguments(XREADGROUP)\n      .add(GROUP).add(groupName).add(consumer)\n      .addParams(xReadGroupParams).add(STREAMS);\n  final Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "157", "src_id": "M1172", "code": "\n@Override\npublic boolean equals(Object other) {\n  if (other == null) {\n    return false;\n  }\n  if (other == this) {\n    return true;\n  }\n  if (!(other instanceof ByteArrayWrapper)) {\n    return false;\n  }\n  return Arrays.equals(data, ((ByteArrayWrapper) other).data);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "158", "src_id": "M154", "code": "\n@Override\npublic Map<byte[], List<StreamEntryBinary>> xreadBinaryAsMap(XReadParams xReadParams,\n    Map<byte[], StreamEntryID> streams) {\n  return executeCommand(commandObjects.xreadBinaryAsMap(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "159", "src_id": "M1010", "code": "\npublic final CommandObject<Map<byte[], List<StreamEntryBinary>>> xreadBinaryAsMap(\n    XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  final CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  final Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_MAP_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "160", "src_id": "M1009", "code": "\npublic final CommandObject<List<Map.Entry<byte[], List<StreamEntryBinary>>>> xreadBinary(\n    XReadParams xReadParams, Map<byte[], StreamEntryID> streams) {\n  final CommandArguments args = commandArguments(XREAD).addParams(xReadParams).add(STREAMS);\n  final Set<Map.Entry<byte[], StreamEntryID>> entrySet = streams.entrySet();\n  entrySet.forEach(entry -> args.key(entry.getKey()));\n  entrySet.forEach(entry -> args.add(entry.getValue()));\n  return new CommandObject<>(args, BuilderFactory.STREAM_READ_BINARY_RESPONSE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "161", "src_id": "M152", "code": "\n@Deprecated\n@Override\npublic List<Object> xreadGroup(byte[] groupName, byte[] consumer,\n    XReadGroupParams xReadGroupParams, Map.Entry<byte[], byte[]>... streams) {\n  return executeCommand(\n      commandObjects.xreadGroup(groupName, consumer, xReadGroupParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "162", "src_id": "M233", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  XAutoClaimParams that = (XAutoClaimParams) o;\n  return Objects.equals(count, that.count);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "163", "src_id": "M1104", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  Raw that = (Raw) o;\n  return Arrays.equals(raw, that.raw);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "164", "src_id": "M260", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ZAddParams that = (ZAddParams) o;\n  return change == that.change \n      && existence == that.existence \n      && comparison == that.comparison;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "165", "src_id": "M234", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ClientKillParams that = (ClientKillParams) o;\n  return Objects.equals(params, that.params);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "166", "src_id": "M256", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ModuleLoadExParams that = (ModuleLoadExParams) o;\n  return Objects.equals(configs, that.configs) \n      && Objects.equals(args, that.args);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "167", "src_id": "M238", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  MigrateParams that = (MigrateParams) o;\n  return copy == that.copy \n      && replace == that.replace \n      && Objects.equals(username, that.username) \n      && Objects.equals(password, that.password);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "168", "src_id": "M229", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ZParams zParams = (ZParams) o;\n  return Objects.equals(params, zParams.params);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "169", "src_id": "M1177", "code": "\npublic static void closeQuietly(AutoCloseable resource) {\n  if (resource != null) {\n    try {\n      resource.close();\n    } catch (Exception e) {\n      // ignored\n    }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "170", "src_id": "M620", "code": "\n@Override\npublic Set<String> sinter(String... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sinter(keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "171", "src_id": "M50", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic Map<byte[], byte[]> build(Object data) {\n  List<Object> list = (List<Object>) data;\n  if (list.isEmpty()) return Collections.emptyMap();\n\n  if (list.get(0) instanceof KeyValue) {\n    Map<byte[], byte[]> map = new JedisByteHashMap();\n    Iterator iterator = list.iterator();\n    while (iterator.hasNext()) {\n      KeyValue kv = (KeyValue) iterator.next();\n      map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue()));\n    }\n    return map;\n  } else {\n    Map<byte[], byte[]> map = new JedisByteHashMap();\n    Iterator iterator = list.iterator();\n    while (iterator.hasNext()) {\n      map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n    }\n    return map;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "172", "src_id": "M933", "code": "\n@Deprecated\npublic static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n  Builder builder = builder();\n  builder.protocol(copy.getRedisProtocol());\n  builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n  builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n  builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n\n  Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n  if (credentialsProvider != null) {\n    builder.credentialsProvider(credentialsProvider);\n  } else {\n    builder.user(copy.getUser());\n    builder.password(copy.getPassword());\n  }\n\n  builder.database(copy.getDatabase());\n  builder.clientName(copy.getClientName());\n\n  builder.ssl(copy.isSsl());\n  builder.sslSocketFactory(copy.getSslSocketFactory());\n  builder.sslParameters(copy.getSslParameters());\n  builder.hostnameVerifier(copy.getHostnameVerifier());\n  builder.sslOptions(copy.getSslOptions());\n  builder.hostAndPortMapper(copy.getHostAndPortMapper());\n\n  builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n  if (copy.isReadOnlyForRedisClusterReplicas()) {\n    builder.readOnlyForRedisClusterReplicas();\n  }\n\n  builder.authXManager(copy.getAuthXManager());\n\n  return builder.build();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "173", "src_id": "M1146", "code": "\nprivate <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n  Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n\n  JedisRedirectionException redirect = null;\n  int consecutiveConnectionFailures = 0;\n  Exception lastException = null;\n  for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {\n    Connection connection = null;\n    try {\n      if (redirect != null) {\n        connection = provider.getConnection(redirect.getTargetNode());\n        if (redirect instanceof JedisAskDataException) {\n          connection.executeCommand(Protocol.Command.ASKING);\n        }\n      } else {\n        connection = toReplica ? provider.getReplicaConnection(commandObject.getArguments())\n            : provider.getConnection(commandObject.getArguments());\n      }\n\n      return execute(connection, commandObject);\n\n    } catch (JedisClusterOperationException jnrcne) {\n      throw jnrcne;\n    } catch (JedisConnectionException jce) {\n      lastException = jce;\n      ++consecutiveConnectionFailures;\n      log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n      boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);\n      if (reset) {\n        consecutiveConnectionFailures = 0;\n        redirect = null;\n      }\n    } catch (JedisRedirectionException jre) {\n      if (lastException == null || lastException instanceof JedisRedirectionException) {\n        lastException = jre;\n      }\n      log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n      consecutiveConnectionFailures = 0;\n      redirect = jre;\n      if (jre instanceof JedisMovedDataException) {\n        provider.renewSlotCache(connection);\n      }\n    } finally {\n      IOUtils.closeQuietly(connection);\n    }\n    if (Instant.now().isAfter(deadline)) {\n      throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n    }\n  }\n\n  JedisClusterOperationException maxAttemptsException\n      = new JedisClusterOperationException(\"No more cluster attempts left.\");\n  maxAttemptsException.addSuppressed(lastException);\n  throw maxAttemptsException;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "174", "src_id": "M884", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n\n  if (filters == null) {\n    throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n  }\n\n  if (fromTimestamp == null) {\n    args.add(MINUS);\n  } else {\n    args.add(toByteArray(fromTimestamp));\n  }\n\n  if (toTimestamp == null) {\n    args.add(PLUS);\n  } else {\n    args.add(toByteArray(toTimestamp));\n  }\n\n  if (latest) {\n    args.add(LATEST);\n  }\n\n  if (filterByTimestamps != null) {\n    args.add(FILTER_BY_TS);\n    for (long ts : filterByTimestamps) {\n      args.add(toByteArray(ts));\n    }\n  }\n\n  if (filterByValues != null) {\n    args.add(FILTER_BY_VALUE);\n    for (double value : filterByValues) {\n      args.add(toByteArray(value));\n    }\n  }\n\n  if (withLabels) {\n    args.add(WITHLABELS);\n  } else if (selectedLabels != null) {\n    args.add(SELECTED_LABELS);\n    for (String label : selectedLabels) {\n      args.add(label);\n    }\n  }\n\n  if (count != null) {\n    args.add(COUNT).add(toByteArray(count));\n  }\n\n  if (aggregationType != null) {\n\n    if (align != null) {\n      args.add(ALIGN).add(align);\n    }\n\n    args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n\n    if (bucketTimestamp != null) {\n      args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n    }\n\n    if (empty) {\n      args.add(EMPTY);\n    }\n  }\n\n  args.add(FILTER);\n  for (String filter : filters) {\n    args.add(filter);\n  }\n\n  if (groupByLabel != null && groupByReduce != null) {\n    args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "175", "src_id": "M502", "code": "\n@Deprecated\n@Override\npublic List<Object> xread(XReadParams xReadParams, Entry<byte[], byte[]>... streams) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "176", "src_id": "M416", "code": "\n@Override\npublic List<byte[]> aclLogBinary() {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(ACL, LOG);\n  return connection.getBinaryMultiBulkReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "177", "src_id": "M390", "code": "\n@Override\npublic Long objectFreq(byte[] key) {\n  connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n  return connection.getIntegerReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "178", "src_id": "M231", "code": "\npublic GeoRadiusStoreParam storeDist(String key) {\n  if (key != null) {\n    this.storeDist = true;\n    this.key = key;\n  }\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "179", "src_id": "M890", "code": "\n@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    TSArithByParams<?> that = (TSArithByParams<?>) o;\n    return ignore == that.ignore \n        && ignoreMaxTimediff == that.ignoreMaxTimediff\n        && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n        && Objects.equals(timestamp, that.timestamp)\n        && Objects.equals(retentionPeriod, that.retentionPeriod)\n        && encoding == that.encoding\n        && Objects.equals(chunkSize, that.chunkSize)\n        && duplicatePolicy == that.duplicatePolicy\n        && Objects.equals(labels, that.labels);\n  }\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "180", "src_id": "M903", "code": "\n@Override\n  public boolean equals(Object o) {\n    if (this == o) {\n      return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    TSCreateParams that = (TSCreateParams) o;\n    return ignore == that.ignore \n        && ignoreMaxTimediff == that.ignoreMaxTimediff\n        && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n        && Objects.equals(retentionPeriod, that.retentionPeriod)\n        && encoding == that.encoding\n        && Objects.equals(chunkSize, that.chunkSize)\n        && duplicatePolicy == that.duplicatePolicy\n        && Objects.equals(labels, that.labels);\n  }\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "181", "src_id": "M907", "code": "\n  @Override\n  public int hashCode() {\n    int result = Boolean.hashCode(latest);\n    result = 31 * result + Boolean.hashCode(withLabels);\n    result = 31 * result + Arrays.hashCode(selectedLabels);\n    return result;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "182", "src_id": "M127", "code": "\nprivate void build() {\n  // check build state to prevent recursion\n  if (building) {\n    return;\n  }\n\n  building = true;\n  try {\n    if (data != null) {\n      if (data instanceof JedisDataException) {\n        exception = (JedisDataException) data;\n      } else {\n        response = builder.build(data);\n      }\n    }\n\n    data = null;\n  } finally {\n    building = false;\n    built = true;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "183", "src_id": "M1184", "code": "\n@Override\npublic int read(byte[] b, int off, int len) throws JedisConnectionException {\n  ensureFill();\n\n  int length = Math.min(limit - count, len);\n  System.arraycopy(buf, count, b, off, length);\n  count += length;\n  return length;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "184", "src_id": "M1128", "code": "\nprivate HostAndPort toHostAndPort(List<String> getMasterAddrByNameResult) {\n  String host = getMasterAddrByNameResult.get(0);\n  int port = Integer.parseInt(getMasterAddrByNameResult.get(1));\n  return new HostAndPort(host, port);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "185", "src_id": "M1154", "code": "\npublic String getElement() {\n  if (element != null) {\n    return SafeEncoder.encode(element);\n  }\n  return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "186", "src_id": "M937", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (o == null) {\n    return false;\n  }\n  if (o == this) {\n    return true;\n  }\n  if (!(o instanceof GeoCoordinate)) {\n    return false;\n  }\n\n  GeoCoordinate that = (GeoCoordinate) o;\n\n  if (Double.compare(that.longitude, longitude) != 0) {\n    return false;\n  }\n  return Double.compare(that.latitude, latitude) == 0;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "187", "src_id": "M1073", "code": "\n@SuppressWarnings(\"unchecked\")\npublic List<byte[]> getBinaryMultiBulkReply() {\n  flush();\n  return (List<byte[]>) readProtocolWithCheckingBroken();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "188", "src_id": "M284", "code": "\n@Override\npublic long expireAt(byte[] key, long unixTime, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.expireAt(key, unixTime, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "189", "src_id": "M792", "code": "\n@Override\npublic List<GeoRadiusResponse> geosearch(String key, String member, double width, double height, GeoUnit unit) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.geosearch(key, member, width, height, unit));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "190", "src_id": "M727", "code": "\n@Override\npublic Map<String, CommandDocument> commandDocs(String... commands) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(DOCS.name(), commands));\n  return BuilderFactory.COMMAND_DOCS_RESPONSE.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "191", "src_id": "M728", "code": "\n@Override\npublic List<String> commandGetKeys(String... command) {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(COMMAND, joinParameters(GETKEYS.name(), command));\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "192", "src_id": "M245", "code": "\npublic GeoSearchParam byBox(double width, double height, GeoUnit unit) {\n  this.byBox = true;\n  this.width = width;\n  this.height = height;\n  this.unit = unit;\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "193", "src_id": "M732", "code": "\n@Override\npublic List<String> commandListFilterBy(CommandListFilterByParams filterByParams) {\n  checkIsInMultiOrPipeline();\n  CommandArguments args = new CommandArguments(COMMAND).add(LIST).addParams(filterByParams);\n  connection.sendCommand(args);\n  return BuilderFactory.STRING_LIST.build(connection.getOne());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "194", "src_id": "M712", "code": "\n@Override\npublic LCSMatchResult lcs(String keyA, String keyB, LCSParams params) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.lcs(keyA, keyB, params));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "195", "src_id": "M551", "code": "\n@Override\npublic long pexpire(String key, long milliseconds, ExpiryOption expiryOption) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.pexpire(key, milliseconds, expiryOption));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "196", "src_id": "M844", "code": "\n@Override\npublic List<Object> functionListBinary() {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.functionListBinary());\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "197", "src_id": "M298", "code": "\n@Override\npublic long sintercard(int limit, byte[]... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sintercard(limit, keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "198", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "199", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration) \n      && Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "200", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  HSetExParams setParams = (HSetExParams) o;\n  return Objects.equals(existance, setParams.existance) && super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "201", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "202", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n  if (listener != null) {\n    this.listener = listener;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "203", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "204", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "205", "src_id": "M233", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  XAutoClaimParams that = (XAutoClaimParams) o;\n  return Objects.equals(count, that.count);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "206", "src_id": "M1104", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  return Arrays.equals(raw, ((Raw) o).raw);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "207", "src_id": "M260", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  ZAddParams that = (ZAddParams) o;\n  return change == that.change \n      && existence == that.existence \n      && comparison == that.comparison;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "208", "src_id": "M234", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  ClientKillParams that = (ClientKillParams) o;\n  return Objects.equals(params, that.params);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "209", "src_id": "M256", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  ModuleLoadExParams that = (ModuleLoadExParams) o;\n  return Objects.equals(configs, that.configs) \n      && Objects.equals(args, that.args);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "210", "src_id": "M238", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  MigrateParams that = (MigrateParams) o;\n  return copy == that.copy \n      && replace == that.replace \n      && Objects.equals(username, that.username) \n      && Objects.equals(password, that.password);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "211", "src_id": "M229", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  ZParams zParams = (ZParams) o;\n  return Objects.equals(params, zParams.params);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "212", "src_id": "M890", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (o == this) {\n    return true;\n  }\n\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  TSArithByParams<?> that = (TSArithByParams<?>) o;\n  return ignore == that.ignore \n      && ignoreMaxTimediff == that.ignoreMaxTimediff \n      && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n      && Objects.equals(timestamp, that.timestamp) \n      && Objects.equals(retentionPeriod, that.retentionPeriod) \n      && encoding == that.encoding \n      && Objects.equals(chunkSize, that.chunkSize) \n      && duplicatePolicy == that.duplicatePolicy \n      && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "213", "src_id": "M903", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (o == this) {\n    return true;\n  }\n\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  TSCreateParams that = (TCreateParams) o;\n  return ignore == that.ignore \n      && ignoreMaxTimediff == that.ignoreMaxTimediff \n      && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0\n      && Objects.equals(retentionPeriod, that.retentionPeriod) \n      && encoding == that.encoding \n      && Objects.equals(chunkSize, that.chunkSize) \n      && duplicatePolicy == that.duplicatePolicy \n      && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "214", "src_id": "M907", "code": "\n@Override\npublic int hashCode() {\n  int result = Boolean.hashCode(latest);\n  result = 31 * result + Boolean.hashCode(withLabels);\n  result = 31 * result + Arrays.hashCode(selectedLabels);\n  return result;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "215", "src_id": "M1177", "code": "\npublic static void closeQuietly(AutoCloseable resource) {\n  if (resource != null) {\n    try {\n      resource.close();\n    } catch (Exception e) {\n      // ignored\n    }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "216", "src_id": "M620", "code": "\n@Override\npublic Set<String> sinter(String... keys) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.sinter(keys));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "217", "src_id": "M50", "code": "\n@Override\n@SuppressWarnings(\"unchecked\")\npublic Map<byte[], byte[]> build(Object data) {\n  List<Object> list = (List<Object>) data;\n  if (list.isEmpty()) return Collections.emptyMap();\n\n  if (list.get(0) instanceof KeyValue) {\n    Map<byte[], byte[]> map = new JedisByteHashMap();\n    ((List<KeyValue>) list).forEach(kv -> \n        map.put(BINARY.build(kv.getKey()), BINARY.build(kv.getValue())));\n    return map;\n  } else {\n    Map<byte[], byte[]> map = new JedisByteHashMap();\n    Iterator iterator = list.iterator();\n    while (iterator.hasNext()) {\n      map.put(BINARY.build(iterator.next()), BINARY.build(iterator.next()));\n    }\n    return map;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "218", "src_id": "M933", "code": "\n@Deprecated\npublic static DefaultJedisClientConfig copyConfig(JedisClientConfig copy) {\n  Builder builder = builder();\n  builder.protocol(copy.getRedisProtocol());\n  builder.connectionTimeoutMillis(copy.getConnectionTimeoutMillis());\n  builder.socketTimeoutMillis(copy.getSocketTimeoutMillis());\n  builder.blockingSocketTimeoutMillis(copy.getBlockingSocketTimeoutMillis());\n\n  Supplier<RedisCredentials> credentialsProvider = copy.getCredentialsProvider();\n  if (credentialsProvider != null) {\n    builder.credentialsProvider(credentialsProvider);\n  } else {\n    builder.user(copy.getUser());\n    builder.password(copy.getPassword());\n  }\n\n  builder.database(copy.getDatabase());\n  builder.clientName(copy.getClientName());\n\n  builder.ssl(copy.isSsl());\n  builder.sslSocketFactory(copy.getSslSocketFactory());\n  builder.sslParameters(copy.getSslParameters());\n  builder.hostnameVerifier(copy.getHostnameVerifier());\n  builder.sslOptions(copy.getSslOptions());\n  builder.hostAndPortMapper(copy.getHostAndPortMapper());\n\n  builder.clientSetInfoConfig(copy.getClientSetInfoConfig());\n  if (copy.isReadOnlyForRedisClusterReplicas()) {\n    builder.readOnlyForRedisClusterReplicas();\n  }\n\n  builder.authXManager(copy.getAuthXManager());\n\n  return builder.build();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "219", "src_id": "M1146", "code": "\nprivate <T> T doExecuteCommand(CommandObject<T> commandObject, boolean toReplica) {\n  Instant deadline = Instant.now().plus(maxTotalRetriesDuration);\n\n  JedisRedirectionException redirect = null;\n  int consecutiveConnectionFailures = 0;\n  Exception lastException = null;\n  for (int attemptsLeft = this.maxAttempts; attemptsLeft > 0; attemptsLeft--) {\n    Connection connection = null;\n    try {\n      if (redirect != null) {\n        connection = provider.getConnection(redirect.getTargetNode());\n        if (redirect instanceof JedisAskDataException) {\n          connection.executeCommand(Protocol.Command.ASKING);\n        }\n      } else {\n        connection = toReplica ? provider.getReplicaConnection(commandObject.getArguments())\n            : provider.getConnection(commandObject.getArguments());\n      }\n\n      return execute(connection, commandObject);\n\n    } catch (JedisClusterOperationException jnrcne) {\n      throw jnrcne;\n    } catch (JedisConnectionException jce) {\n      lastException = jce;\n      ++consecutiveConnectionFailures;\n      log.debug(\"Failed connecting to Redis: {}\", connection, jce);\n      boolean reset = handleConnectionProblem(attemptsLeft - 1, consecutiveConnectionFailures, deadline);\n      if (reset) {\n        consecutiveConnectionFailures = 0;\n        redirect = null;\n      }\n    } catch (JedisRedirectionException jre) {\n      if (lastException == null || lastException instanceof JedisRedirectionException) {\n        lastException = jre;\n      }\n      log.debug(\"Redirected by server to {}\", jre.getTargetNode());\n      consecutiveConnectionFailures = 0;\n      redirect = jre;\n      if (jre instanceof JedisMovedDataException) {\n        provider.renewSlotCache(connection);\n      }\n    } finally {\n      IOUtils.closeQuietly(connection);\n    }\n    if (Instant.now().isAfter(deadline)) {\n      throw new JedisClusterOperationException(\"Cluster retry deadline exceeded.\", lastException);\n    }\n  }\n\n  JedisClusterOperationException maxAttemptsException\n      = new JedisClusterOperationException(\"No more cluster attempts left.\");\n  maxAttemptsException.addSuppressed(lastException);\n  throw maxAttemptsException;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "220", "src_id": "M884", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n  if (filters == null) {\n    throw new IllegalArgumentException(\"FILTER arguments must be set.\");\n  }\n\n  if (fromTimestamp == null) {\n    args.add(MINUS);\n  } else {\n    args.add(toByteArray(fromTimestamp));\n  }\n\n  if (toTimestamp == null) {\n    args.add(PLUS);\n  } else {\n    args.add(toByteArray(toTimestamp));\n  }\n\n  if (latest) {\n    args.add(LATEST);\n  }\n\n  if (filterByTimestamps != null) {\n    args.add(FILTER_BY_TS);\n    for (long ts : filterByTimestamps) {\n      args.add(toByteArray(ts));\n    }\n  }\n\n  if (filterByValues != null) {\n    args.add(FILTER_BY_VALUE);\n    for (double value : filterByValues) {\n      args.add(toByteArray(value));\n    }\n  }\n\n  if (withLabels) {\n    args.add(WITHLABELS);\n  } else if (selectedLabels != null) {\n    args.add(SELECTED_LABELS);\n    for (String label : selectedLabels) {\n      args.add(label);\n    }\n  }\n\n  if (count != null) {\n    args.add(COUNT).add(toByteArray(count));\n  }\n\n  if (aggregationType != null) {\n    if (align != null) {\n      args.add(ALIGN).add(align);\n    }\n\n    args.add(AGGREGATION).add(aggregationType).add(toByteArray(bucketDuration));\n\n    if (bucketTimestamp != null) {\n      args.add(BUCKETTIMESTAMP).add(bucketTimestamp);\n    }\n\n    if (empty) {\n      args.add(EMPTY);\n    }\n  }\n\n  args.add(FILTER);\n  for (String filter : filters) {\n    args.add(filter);\n  }\n\n  if (groupByLabel != null && groupByReduce != null) {\n    args.add(GROUPBY).add(groupByLabel).add(REDUCE).add(groupByReduce);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "221", "src_id": "M502", "code": "\n@Deprecated\n@Override\npublic List<Object> xread(XReadParams xReadParams, Entry<byte[], byte[]>... streams) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.xread(xReadParams, streams));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "222", "src_id": "M416", "code": "\n@Override\npublic List<byte[]> aclLogBinary() {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(ACL, LOG);\n  return connection.getBinaryMultiBulkReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "223", "src_id": "M390", "code": "\n@Override\npublic Long objectFreq(byte[] key) {\n  connection.sendCommand(OBJECT, FREQ.getRaw(), key);\n  return connection.getIntegerReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "224", "src_id": "M231", "code": "\npublic GeoRadiusStoreParam storeDist(String key) {\n  if (key != null) {\n    this.storeDist = true;\n    this.key = key;\n  }\n  return this;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "225", "src_id": "M777", "code": "\n@Override\npublic List<Map<String, Object>> clusterLinks() {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(CLUSTER, ClusterKeyword.LINKS);\n  List<Object> replies = connection.getObjectMultiBulkReply();\n  List<Map<String, Object>> result = new ArrayList<>();\n  for (Object reply : replies) {\n    result.add(BuilderFactory.ENCODED_OBJECT_MAP.build(reply));\n  }\n  return result;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "226", "src_id": "M779", "code": "\n@Override\npublic String clusterDelSlotsRange(int... ranges) {\n  checkIsInMultiOrPipeline();\n  String subCommand = ClusterKeyword.DELSLOTSRANGE.getRaw();\n  String joinedRanges = joinParameters(ranges);\n  String fullCommand = joinParameters(subCommand, joinedRanges);\n  connection.sendCommand(CLUSTER, fullCommand);\n  return connection.getStatusCodeReply();\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "227", "src_id": "M818", "code": "\n@Override\npublic Map<String, Object> memoryStats() {\n  checkIsInMultiOrPipeline();\n  connection.sendCommand(MEMORY, STATS);\n  Object response = connection.getOne();\n  return BuilderFactory.ENCODED_OBJECT_MAP.build(response);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "228", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "229", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration)\n    && Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "230", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  HSetExParams setParams = (HSetExParams) o;\n  return Objects.equals(existance, setParams.existance) && super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "231", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "232", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n  if (listener != null) {\n    this.listener = listener;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "233", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "234", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "235", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "236", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration) &&\n      Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "237", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  HSetExParams setParams = (HSetExParams) o;\n  return Objects.equals(existance, setParams.existance) &&\n      super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "238", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "239", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n  if (listener != null) {\n    this.listener = listener;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "240", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "241", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "242", "src_id": "M890", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  final TSArithByParams<?> that = (TSArithByParams<?>) o;\n  return ignore == that.ignore \n    && ignoreMaxTimediff == that.ignoreMaxTimediff \n    && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 \n    && Objects.equals(timestamp, that.timestamp) \n    && Objects.equals(retentionPeriod, that.retentionPeriod) \n    && encoding == that.encoding \n    && Objects.equals(chunkSize, that.chunkSize) \n    && duplicatePolicy == that.duplicatePolicy \n    && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "243", "src_id": "M903", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  final TSCreateParams that = (TSCreateParams) o;\n  return ignore == that.ignore \n    && ignoreMaxTimediff == that.ignoreMaxTimediff \n    && Double.compare(ignoreMaxValDiff, that.ignoreMaxValDiff) == 0 \n    && Objects.equals(retentionPeriod, that.retentionPeriod) \n    && encoding == that.encoding \n    && Objects.equals(chunkSize, that.chunkSize) \n    && duplicatePolicy == that.duplicatePolicy \n    && Objects.equals(labels, that.labels);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "244", "src_id": "M907", "code": "\n@Override\npublic int hashCode() {\n  int result = Boolean.hashCode(latest);\n  result = 31 * result + Boolean.hashCode(withLabels);\n  result = 31 * result + Arrays.hashCode(selectedLabels);\n  return result;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "245", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "246", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration) &&\n      Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "247", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n        return false;\n    }\n    HSetExParams setParams = (HSetExParams) o;\n    return Objects.equals(existance, setParams.existance) &&\n        super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "248", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager()\n        .getListener()\n        .onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "249", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n    if (listener != null) {\n        this.listener = listener;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "250", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "251", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "252", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "253", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration) && Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "254", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  HSetExParams setParams = (HSetExParams) o;\n  return Objects.equals(existance, setParams.existance) && super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "255", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "256", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n  if (listener != null) {\n    this.listener = listener;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "257", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "258", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "259", "src_id": "M233", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  XAutoClaimParams that = (XAutoClaimParams) o;\n  return Objects.equals(count, that.count);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "260", "src_id": "M1104", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  return Arrays.equals(raw, ((Raw) o).raw);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "261", "src_id": "M260", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ZAddParams that = (ZAddParams) o;\n  return change == that.change\n      && existence == that.existence\n      && comparison == that.comparison;\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "262", "src_id": "M234", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ClientKillParams that = (ClientKillParams) o;\n  return Objects.equals(params, that.params);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "263", "src_id": "M256", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ModuleLoadExParams that = (ModuleLoadExParams) o;\n  return Objects.equals(configs, that.configs)\n      && Objects.equals(args, that.args);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "264", "src_id": "M238", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  MigrateParams that = (MigrateParams) o;\n  return copy == that.copy\n      && replace == that.replace\n      && Objects.equals(username, that.username)\n      && Objects.equals(password, that.password);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "265", "src_id": "M229", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) return true;\n  if (o == null || getClass() != o.getClass()) return false;\n  ZParams zParams = (ZParams) o;\n  return Objects.equals(params, zParams.params);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "266", "src_id": "M580", "code": "\n@Override\npublic List<String> hgetex(String key, HGetExParams params, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetex(key, params, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "267", "src_id": "M237", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  BaseSetExParams setParams = (BaseSetExParams) o;\n  return Objects.equals(expiration, setParams.expiration) \n          && Objects.equals(expirationValue, setParams.expirationValue);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "268", "src_id": "M227", "code": "\n@Override\npublic boolean equals(Object o) {\n  if (this == o) {\n    return true;\n  }\n\n  if (o == null || getClass() != o.getClass()) {\n    return false;\n  }\n\n  HSetExParams setParams = (HSetExParams) o;\n  return Objects.equals(existance, setParams.existance) && super.equals((BaseSetExParams) o);\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "269", "src_id": "M868", "code": "\nprivate void safeReAuthenticate(Token token) {\n  try {\n    byte[] rawPass = client.encodeToBytes(token.getValue().toCharArray());\n    byte[] rawUser = client.encodeToBytes(token.getUser().toCharArray());\n\n    Token newToken = pendingTokenRef.getAndSet(token);\n    if (newToken == null) {\n      commandSync.lock();\n      try {\n        sendAndFlushCommand(Command.AUTH, rawUser, rawPass);\n        resultHandler.add(this.authResultHandler);\n      } finally {\n        pendingTokenRef.set(null);\n        commandSync.unlock();\n      }\n    }\n  } catch (Exception e) {\n    logger.error(\"Error while re-authenticating connection\", e);\n    client.getAuthXManager().getListener().onConnectionAuthenticationError(e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "270", "src_id": "M957", "code": "\npublic void setListener(AuthXEventListener listener) {\n  if (listener != null) {\n    this.listener = listener;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "271", "src_id": "M960", "code": "\nprivate void processPingReply(Object reply) {\n  byte[] resp = (byte[]) reply;\n  if (\"PONG\".equals(SafeEncoder.encode(resp))) {\n    onPong(null);\n  } else {\n    onPong(encode(resp));\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
{"project_name": "jedis", "pair_id": "272", "src_id": "M581", "code": "\n@Override\npublic List<String> hgetdel(String key, String... fields) {\n  checkIsInMultiOrPipeline();\n  return connection.executeCommand(commandObjects.hgetdel(key, fields));\n}\n", "compilable": "", "test_passed": "", "successful_trans": ""}
