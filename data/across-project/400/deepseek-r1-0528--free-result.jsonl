{"project_name": "across-project", "pair_id": "1", "src_id": "M270", "code": "\nprivate static String normalizeArch(String value) {\n    value = normalize(value);\n    if (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n        return \"x86_64\";\n    }\n    if (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n        return \"x86_32\";\n    }\n    if (value.matches(\"^(ia64w?|itanium64)$\")) {\n        return \"itanium_64\";\n    }\n    if (\"ia64n\".equals(value)) {\n        return \"itanium_32\";\n    }\n    if (value.matches(\"^(sparc|sparc32)$\")) {\n        return \"sparc_32\";\n    }\n    if (value.matches(\"^(sparcv9|sparc64)$\")) {\n        return \"sparc_64\";\n    }\n    if (value.matches(\"^(arm|arm32)$\")) {\n        return \"arm_32\";\n    }\n    if (\"aarch64\".equals(value)) {\n        return \"aarch_64\";\n    }\n    if (value.matches(\"^(mips|mips32)$\")) {\n        return \"mips_32\";\n    }\n    if (value.matches(\"^(mipsel|mips32el)$\")) {\n        return \"mipsel_32\";\n    }\n    if (\"mips64\".equals(value)) {\n        return \"mips_64\";\n    }\n    if (\"mips64el\".equals(value)) {\n        return \"mipsel_64\";\n    }\n    if (value.matches(\"^(ppc|ppc32)$\")) {\n        return \"ppc_32\";\n    }\n    if (value.matches(\"^(ppcle|ppc32le)$\")) {\n        return \"ppcle_32\";\n    }\n    if (\"ppc64\".equals(value)) {\n        return \"ppc_64\";\n    }\n    if (\"ppc64le\".equals(value)) {\n        return \"ppcle_64\";\n    }\n    if (\"s390\".equals(value)) {\n        return \"s390_32\";\n    }\n    if (\"s390x\".equals(value)) {\n        return \"s390_64\";\n    }\n    return value;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "2", "src_id": "M928", "code": "\nprivate static Map<String, Object> doGetLoggerInfo(Logger logger) {\n    Map<String, Object> info = new HashMap<>();\n    info.put(LoggerHelper.name, logger.getName());\n    info.put(LoggerHelper.clazz, logger.getClass());\n    \n    CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n    if (codeSource != null) {\n        info.put(LoggerHelper.codeSource, codeSource.getLocation());\n    }\n    info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n    Level level = logger.getLevel();\n    Level effectiveLevel = logger.getEffectiveLevel();\n    if (level != null) {\n        info.put(LoggerHelper.level, level.toString());\n    }\n    if (effectiveLevel != null) {\n        info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n    info.put(LoggerHelper.appenders, result);\n    return info;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "3", "src_id": "M9", "code": "\n@SuppressWarnings(\"resource\")\npublic static long select(boolean v, long telnetPortPid, String select) \n        throws InputMismatchException {\n        \n    Map<Long, String> processMap = listProcessByJps(v);\n    \n    // Put the port that is already listening at the first\n    if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n        String telnetPortProcess = processMap.get(telnetPortPid);\n        processMap.remove(telnetPortPid);\n        Map<Long, String> newProcessMap = new LinkedHashMap<>();\n        newProcessMap.put(telnetPortPid, telnetPortProcess);\n        newProcessMap.putAll(processMap);\n        processMap = newProcessMap;\n    }\n\n    if (processMap.isEmpty()) {\n        AnsiLog.info(\"Can not find java process. Try to run `jps` command lists \"\n                + \"the instrumented Java HotSpot VMs on the target system.\");\n        return -1;\n    }\n\n    // Select target process by the '--select' option when match only one process\n    if (select != null && !select.trim().isEmpty()) {\n        int matchedSelectCount = 0;\n        Long matchedPid = null;\n        for (Entry<Long, String> entry : processMap.entrySet()) {\n            if (entry.getValue().contains(select)) {\n                matchedSelectCount++;\n                matchedPid = entry.getKey();\n            }\n        }\n        if (matchedSelectCount == 1) {\n            return matchedPid;\n        }\n    }\n\n    AnsiLog.info(\"Found existing java process, please choose one and input the \"\n            + \"serial number of the process, eg : 1. Then hit ENTER.\");\n    \n    // Print list\n    int count = 1;\n    for (String process : processMap.values()) {\n        if (count == 1) {\n            System.out.println(\"* [\" + count + \"]: \" + process);\n        } else {\n            System.out.println(\"  [\" + count + \"]: \" + process);\n        }\n        count++;\n    }\n\n    // Read choice\n    String line = new Scanner(System.in).nextLine();\n    if (line.trim().isEmpty()) {\n        // Get the first process id\n        return processMap.keySet().iterator().next();\n    }\n\n    int choice;\n    try (Scanner scanner = new Scanner(line)) {\n        choice = scanner.nextInt();\n    }\n\n    if (choice <= 0 || choice > processMap.size()) {\n        return -1;\n    }\n\n    Iterator<Long> idIter = processMap.keySet().iterator();\n    for (int i = 1; i <= choice; ++i) {\n        if (i == choice) {\n            return idIter.next();\n        }\n        idIter.next();\n    }\n\n    return -1;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "4", "src_id": "M140", "code": "\nvoid _processDo(int option) throws IOException {\n    if (debugoptions) {\n        System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n    }\n\n    if (__notifhand != null) {\n        __notifhand.receivedNegotiation(\n            TelnetNotificationHandler.RECEIVED_DO, \n            option\n        );\n    }\n\n    boolean acceptNewState = false;\n\n    if (optionHandlers[option] != null) {\n        acceptNewState = optionHandlers[option].getAcceptLocal();\n    } else if (option == TERMINAL_TYPE) {\n        if (terminalType != null && terminalType.length() > 0) {\n            acceptNewState = true;\n        }\n    }\n\n    if (_willResponse[option] > 0) {\n        --_willResponse[option];\n        if (_willResponse[option] > 0 && _stateIsWill(option)) {\n            --_willResponse[option];\n        }\n    }\n\n    if (_willResponse[option] == 0) {\n        if (_requestedWont(option)) {\n            if (acceptNewState) {\n                _setWantWill(option);\n                _sendWill(option);\n            } else {\n                ++_willResponse[option];\n                _sendWont(option);\n            }\n        } else {\n            // Other end has acknowledged option\n        }\n    }\n\n    _setWill(option);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "5", "src_id": "M1324", "code": "\nprivate void bind(Configure configure) throws Throwable {\n    long start = System.currentTimeMillis();\n\n    if (!isBindRef.compareAndSet(false, true)) {\n        throw new IllegalStateException(\"already bind\");\n    }\n\n    // Init random port\n    if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n        int newTelnetPort = SocketUtils.findAvailableTcpPort();\n        configure.setTelnetPort(newTelnetPort);\n        logger().info(\"generate random telnet port: \" + newTelnetPort);\n    }\n    if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n        int newHttpPort = SocketUtils.findAvailableTcpPort();\n        configure.setHttpPort(newHttpPort);\n        logger().info(\"generate random http port: \" + newHttpPort);\n    }\n    \n    // Try to find appName\n    if (configure.getAppName() == null) {\n        configure.setAppName(System.getProperty(\n            ArthasConstants.PROJECT_NAME,\n            System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)\n        ));\n    }\n\n    try {\n        if (configure.getTunnelServer() != null) {\n            tunnelClient = new TunnelClient();\n            tunnelClient.setAppName(configure.getAppName());\n            tunnelClient.setId(configure.getAgentId());\n            tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n            tunnelClient.setVersion(ArthasBanner.version());\n            ChannelFuture channelFuture = tunnelClient.start();\n            channelFuture.await(10, TimeUnit.SECONDS);\n        }\n    } catch (Throwable t) {\n        logger().error(\"start tunnel client error\", t);\n    }\n\n    try {\n        ShellServerOptions options = new ShellServerOptions()\n            .setInstrumentation(instrumentation)\n            .setPid(PidUtils.currentLongPid())\n            .setWelcomeMessage(ArthasBanner.welcome());\n            \n        if (configure.getSessionTimeout() != null) {\n            options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n        }\n\n        this.httpSessionManager = new HttpSessionManager();\n        if (IPUtils.isAllZeroIP(configure.getIp()) \n                && StringUtils.isBlank(configure.getPassword())) {\n            String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect \"\n                + \"to your machine! No password is currently configured. Therefore, a default \"\n                + \"password is generated, and clients need to use the password to connect!\";\n            AnsiLog.error(errorMsg);\n            configure.setPassword(StringUtils.randomString(64));\n            AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n            \n            logger().error(errorMsg);\n            logger().info(\"Generated arthas password: \" + configure.getPassword());\n        }\n\n        this.securityAuthenticator = new SecurityAuthenticatorImpl(\n            configure.getUsername(), \n            configure.getPassword()\n        );\n\n        shellServer = new ShellServerImpl(options);\n\n        List<String> disabledCommands = new ArrayList<>();\n        if (configure.getDisabledCommands() != null) {\n            String[] strings = StringUtils.tokenizeToStringArray(\n                configure.getDisabledCommands(), \n                \",\"\n            );\n            if (strings != null) {\n                disabledCommands.addAll(Arrays.asList(strings));\n            }\n        }\n        BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n        List<CommandResolver> resolvers = new ArrayList<>();\n        resolvers.add(builtinCommands);\n\n        // Worker group\n        workerGroup = new NioEventLoopGroup(\n            new DefaultThreadFactory(\"arthas-TermServer\", true)\n        );\n\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n            logger().info(\"try to bind telnet server, host: {}, port: {}.\", \n                configure.getIp(), configure.getTelnetPort());\n            shellServer.registerTermServer(new HttpTelnetTermServer(\n                configure.getIp(), \n                configure.getTelnetPort(),\n                options.getConnectionTimeout(), \n                workerGroup, \n                httpSessionManager\n            ));\n        } else {\n            logger().info(\"telnet port is {}, skip bind telnet server.\", \n                configure.getTelnetPort());\n        }\n        \n        if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n            logger().info(\"try to bind http server, host: {}, port: {}.\", \n                configure.getIp(), configure.getHttpPort());\n            shellServer.registerTermServer(new HttpTermServer(\n                configure.getIp(), \n                configure.getHttpPort(),\n                options.getConnectionTimeout(), \n                workerGroup, \n                httpSessionManager\n            ));\n        } else if (configure.getTunnelServer() != null) {\n            shellServer.registerTermServer(new HttpTermServer(\n                configure.getIp(), \n                configure.getHttpPort(),\n                options.getConnectionTimeout(), \n                workerGroup, \n                httpSessionManager\n            ));\n            logger().info(\"http port is {}, skip bind http server.\", \n                configure.getHttpPort());\n        }\n\n        for (CommandResolver resolver : resolvers) {\n            shellServer.registerCommandResolver(resolver);\n        }\n\n        shellServer.listen(new BindHandler(isBindRef));\n        if (!isBind()) {\n            throw new IllegalStateException(\"Arthas failed to bind telnet or http port! \"\n                + \"Telnet port: \" + configure.getTelnetPort() + \", \"\n                + \"http port: \" + configure.getHttpPort());\n        }\n\n        // HTTP API session manager\n        sessionManager = new SessionManagerImpl(\n            options, \n            shellServer.getCommandManager(), \n            shellServer.getJobController()\n        );\n        \n        // HTTP API handler\n        httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n        logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", \n            configure.getIp(), configure.getTelnetPort(), \n            configure.getHttpPort(), options.getConnectionTimeout());\n\n        // Asynchronously report startup count\n        if (configure.getStatUrl() != null) {\n            logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n        }\n        UserStatUtil.setStatUrl(configure.getStatUrl());\n        UserStatUtil.setAgentId(configure.getAgentId());\n        UserStatUtil.arthasStart();\n\n        try {\n            SpyAPI.init();\n        } catch (Throwable e) {\n            // Ignore\n        }\n\n        logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n    } catch (Throwable e) {\n        logger().error(\"Error during start as-server\", e);\n        destroy();\n        throw e;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "6", "src_id": "M122", "code": "\nprivate int __read(boolean mayBlock) throws IOException {\n    int ch;\n\n    while (true) {\n        // If there is no more data AND we were told not to block,\n        // just return WOULD_BLOCK (-2). (More efficient than exception.)\n        if (!mayBlock && super.available() == 0) {\n            return WOULD_BLOCK;\n        }\n\n        // Otherwise, exit only when we reach end of stream.\n        if ((ch = super.read()) < 0) {\n            return EOF;\n        }\n\n        ch = (ch & 0xff);\n\n        synchronized (__client) {\n            __client._processAYTResponse();\n        }\n\n        __client._spyRead(ch);\n\n        switch (__receiveState) {\n            case _STATE_CR:\n                if (ch == '\\0') {\n                    // Strip null\n                    continue;\n                }\n                //$FALL-THROUGH$\n                \n            case _STATE_DATA:\n                if (ch == TelnetCommand.IAC) {\n                    __receiveState = _STATE_IAC;\n                    continue;\n                }\n\n                if (ch == '\\r') {\n                    synchronized (__client) {\n                        if (__client._requestedDont(TelnetOption.BINARY)) {\n                            __receiveState = _STATE_CR;\n                        } else {\n                            __receiveState = _STATE_DATA;\n                        }\n                    }\n                } else {\n                    __receiveState = _STATE_DATA;\n                }\n                break;\n\n            case _STATE_IAC:\n                switch (ch) {\n                    case TelnetCommand.WILL:\n                        __receiveState = _STATE_WILL;\n                        continue;\n                    case TelnetCommand.WONT:\n                        __receiveState = _STATE_WONT;\n                        continue;\n                    case TelnetCommand.DO:\n                        __receiveState = _STATE_DO;\n                        continue;\n                    case TelnetCommand.DONT:\n                        __receiveState = _STATE_DONT;\n                        continue;\n                    case TelnetCommand.SB:\n                        __suboption_count = 0;\n                        __receiveState = _STATE_SB;\n                        continue;\n                    case TelnetCommand.IAC:\n                        __receiveState = _STATE_DATA;\n                        break;\n                    case TelnetCommand.SE:\n                        __receiveState = _STATE_DATA;\n                        continue;\n                    default:\n                        __receiveState = _STATE_DATA;\n                        __client._processCommand(ch);\n                        continue;\n                }\n                break;\n                \n            case _STATE_WILL:\n                synchronized (__client) {\n                    __client._processWill(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_WONT:\n                synchronized (__client) {\n                    __client._processWont(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_DO:\n                synchronized (__client) {\n                    __client._processDo(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_DONT:\n                synchronized (__client) {\n                    __client._processDont(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_SB:\n                switch (ch) {\n                    case TelnetCommand.IAC:\n                        __receiveState = _STATE_IAC_SB;\n                        continue;\n                    default:\n                        if (__suboption_count < __suboption.length) {\n                            __suboption[__suboption_count++] = ch;\n                        }\n                        break;\n                }\n                __receiveState = _STATE_SB;\n                continue;\n                \n            case _STATE_IAC_SB:\n                switch (ch) {\n                    case TelnetCommand.SE:\n                        synchronized (__client) {\n                            __client._processSuboption(__suboption, __suboption_count);\n                            __client._flushOutputStream();\n                        }\n                        __receiveState = _STATE_DATA;\n                        continue;\n                    case TelnetCommand.IAC:\n                        if (__suboption_count < __suboption.length) {\n                            __suboption[__suboption_count++] = ch;\n                        }\n                        break;\n                    default:\n                        break;\n                }\n                __receiveState = _STATE_SB;\n                continue;\n        }\n\n        break;\n    }\n\n    return ch;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "7", "src_id": "M8", "code": "\nprivate static String formatFileSize(long size) {\n    String hrSize;\n\n    double b = size;\n    double k = size / 1024.0;\n    double m = k / 1024.0;\n    double g = m / 1024.0;\n    double t = g / 1024.0;\n\n    DecimalFormat dec = new DecimalFormat(\"0.00\");\n\n    if (t > 1) {\n        hrSize = dec.format(t).concat(\" TB\");\n    } else if (g > 1) {\n        hrSize = dec.format(g).concat(\" GB\");\n    } else if (m > 1) {\n        hrSize = dec.format(m).concat(\" MB\");\n    } else if (k > 1) {\n        hrSize = dec.format(k).concat(\" KB\");\n    } else {\n        hrSize = dec.format(b).concat(\" Bytes\");\n    }\n\n    return hrSize;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "8", "src_id": "M790", "code": "\n@Override\npublic byte[] transform(\n        ClassLoader loader, \n        String className, \n        Class<?> classBeingRedefined,\n        ProtectionDomain protectionDomain, \n        byte[] classfileBuffer\n) throws IllegalClassFormatException {\n\n    if (className == null) {\n        return null;\n    }\n\n    className = className.replace('/', '.');\n\n    List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n    // Reverse order for configuration priority\n    ListIterator<RetransformEntry> listIterator = allRetransformEntries\n        .listIterator(allRetransformEntries.size());\n        \n    while (listIterator.hasPrevious()) {\n        RetransformEntry retransformEntry = listIterator.previous();\n        int id = retransformEntry.getId();\n        boolean updateFlag = false;\n        \n        if (className.equals(retransformEntry.getClassName())) {\n            if (retransformEntry.getClassLoaderClass() != null \n                    || retransformEntry.getHashCode() != null) {\n                updateFlag = isLoaderMatch(retransformEntry, loader);\n            } else {\n                updateFlag = true;\n            }\n        }\n\n        if (updateFlag) {\n            logger.info(\"RetransformCommand match class: {}, id: {}, \"\n                    + \"classLoaderClass: {}, hashCode: {}\",\n                className, id, retransformEntry.getClassLoaderClass(), \n                retransformEntry.getHashCode());\n            retransformEntry.incTransformCount();\n            return retransformEntry.getBytes();\n        }\n    }\n\n    return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "9", "src_id": "M716", "code": "\npublic static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n    // Execution failed: output failure status\n    table.row(\"IS-RETURN\", \"\" + false);\n    table.row(\"IS-EXCEPTION\", \"\" + true);\n\n    // Execution failed: output exception information\n    Throwable cause;\n    Throwable t = (Throwable) throwableVO.getObject();\n    if (t instanceof InvocationTargetException) {\n        cause = t.getCause();\n    } else {\n        cause = t;\n    }\n\n    if (throwableVO.needExpand()) {\n        table.row(\"THROW-EXCEPTION\", \n            new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n    } else {\n        try (StringWriter stringWriter = new StringWriter();\n             PrintWriter printWriter = new PrintWriter(stringWriter)) {\n            cause.printStackTrace(printWriter);\n            table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "10", "src_id": "M602", "code": "\nprivate AsyncProfiler profilerInstance() {\n    if (profiler != null) {\n        return profiler;\n    }\n\n    // Try to load from special path\n    if (ProfilerAction.load.toString().equals(action)) {\n        profiler = AsyncProfiler.getInstance(this.actionArg);\n    }\n\n    if (libPath != null) {\n        // Load from arthas directory\n        File tmpLibFile = null;\n        try {\n            tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n            try (FileInputStream libInputStream = new FileInputStream(libPath);\n                 FileOutputStream tmpLibOutputStream = new FileOutputStream(tmpLibFile)) {\n                IOUtils.copy(libInputStream, tmpLibOutputStream);\n                libPath = tmpLibFile.getAbsolutePath();\n                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n            }\n        } catch (Throwable e) {\n            logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n        }\n        profiler = AsyncProfiler.getInstance(libPath);\n    } else {\n        if (OSUtils.isLinux() || OSUtils.isMac()) {\n            throw new IllegalStateException(\n                \"Can not find libasyncProfiler so, please check the arthas directory.\");\n        } else {\n            throw new IllegalStateException(\n                \"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n        }\n    }\n\n    return profiler;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "11", "src_id": "M1043", "code": "\nprivate void doPostprocessing() {\n    errCode = ERROR_NOTHING;\n    errObject = null;\n    Thread thread = Thread.currentThread();\n\n    notifyPostProcessing(1);\n\n    if (DEBUG) {\n        thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n    }\n\n    Exception exception = null;\n\n    try {\n        psAlgorithm.run(this);\n    } catch (Exception err) {\n        Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n        if (err instanceof InterruptedIOException \n                || err instanceof ClosedByInterruptException \n                || thread.isInterrupted()) {\n            notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n            return;\n        }\n\n        if (errCode == ERROR_NOTHING) {\n            errCode = ERROR_POSTPROCESSING;\n        }\n\n        exception = err;\n    } finally {\n        notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n    }\n\n    if (errCode != ERROR_NOTHING) {\n        if (exception == null) {\n            exception = errObject;\n        }\n        notifyError(ERROR_POSTPROCESSING, exception);\n        return;\n    }\n\n    notifyFinished();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "12", "src_id": "M1031", "code": "\nvoid establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n    int statusCode = conn.getResponseCode();\n\n    if (DEBUG) {\n        Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n        Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n        Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n        Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n    }\n\n    switch (statusCode) {\n        case 204:\n        case 205:\n        case 207:\n            throw new HttpError(statusCode);\n        case 416:\n            return;  // let download thread handle error\n        default:\n            if (statusCode < 200 || statusCode > 299) {\n                throw new HttpError(statusCode);\n            }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "13", "src_id": "M827", "code": "\nprivate Elst parseEdts(final Box ref) throws IOException {\n    final Box b = untilBox(ref, ATOM_ELST);\n    if (b == null) {\n        return null;\n    }\n\n    final Elst obj = new Elst();\n    final boolean v1 = stream.read() == 1;\n    stream.skipBytes(3);  // flags\n\n    final int entryCount = stream.readInt();\n    if (entryCount < 1) {\n        obj.bMediaRate = 0x00010000;  // default media rate\n        return obj;\n    }\n\n    if (v1) {\n        stream.skipBytes(DataReader.LONG_SIZE);  // segment duration\n        obj.mediaTime = stream.readLong();\n        // ignore remaining entries\n        stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n    } else {\n        stream.skipBytes(DataReader.INTEGER_SIZE);  // segment duration\n        obj.mediaTime = stream.readInt();\n    }\n\n    obj.bMediaRate = stream.readInt();\n    return obj;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "14", "src_id": "M1048", "code": "\n@Override\npublic void run() {\n    boolean done;\n    long start = mMission.fallbackResumeOffset;\n\n    if (DEBUG && !mMission.unknownLength && start > 0) {\n        Log.i(TAG, \"Resuming a single-thread download at \" + start);\n    }\n\n    try {\n        long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n        int mId = 1;\n        mConn = mMission.openConnection(false, rangeStart, -1);\n\n        if (mRetryCount == 0 && rangeStart == -1) {\n            // workaround: bypass android connection pool\n            mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n        }\n\n        mMission.establishConnection(mId, mConn);\n\n        if (mConn.getResponseCode() == 416 && start > 0) {\n            mMission.notifyProgress(-start);\n            start = 0;\n            mRetryCount--;\n            throw new DownloadMission.HttpError(416);\n        }\n\n        if (!mMission.unknownLength) {\n            mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n        }\n\n        if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n            mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n        }\n\n        mF = mMission.storage.getStream();\n        mF.seek(mMission.offsets[mMission.current] + start);\n        mIs = mConn.getInputStream();\n        byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n        int len = 0;\n\n        while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n            mF.write(buf, 0, len);\n            start += len;\n            mMission.notifyProgress(len);\n        }\n\n        dispose();\n        done = len == -1;  // check if completed\n    } catch (Exception e) {\n        dispose();\n        mMission.fallbackResumeOffset = start;\n\n        if (!mMission.running || e instanceof ClosedByInterruptException) {\n            return;\n        }\n\n        if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n            dispose();\n            mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n            return;\n        }\n\n        if (mRetryCount++ >= mMission.maxRetry) {\n            mMission.notifyError(e);\n            return;\n        }\n\n        if (DEBUG) {\n            Log.e(TAG, \"got exception, retrying...\", e);\n        }\n\n        run();  // retry\n        return;\n    }\n\n    if (done) {\n        mMission.notifyFinished();\n    } else {\n        mMission.fallbackResumeOffset = start;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "15", "src_id": "M1141", "code": "\nprivate void flushAuxiliar(long amount) throws IOException {\n    if (aux.length < 1) {\n        return;\n    }\n\n    out.flush();\n    aux.flush();\n    boolean underflow = aux.offset < aux.length || out.offset < out.length;\n    byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n    aux.target.seek(0);\n    out.target.seek(out.length);\n    long length = amount;\n\n    while (length > 0) {\n        int read = (int) Math.min(length, Integer.MAX_VALUE);\n        read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n        if (read < 1) {\n            amount -= length;\n            break;\n        }\n\n        out.writeProof(buffer, read);\n        length -= read;\n    }\n\n    if (underflow) {\n        if (out.offset >= out.length) {\n            if (aux.offset < amount) {\n                out.offset += aux.offset;\n                aux.offset = 0;\n                out.target.seek(out.offset);\n            } else {\n                aux.offset -= amount;\n                out.offset = out.length + amount;\n            }\n        } else {\n            aux.offset = 0;\n        }\n    } else {\n        out.offset += amount;\n        aux.offset -= amount;\n    }\n\n    out.length += amount;\n    if (out.length > maxLengthKnown) {\n        maxLengthKnown = out.length;\n    }\n\n    if (amount < aux.length) {\n        // move excess data to beginning\n        long readOffset = amount;\n        long writeOffset = 0;\n        aux.length -= amount;\n        length = aux.length;\n\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n            aux.target.seek(writeOffset);\n            aux.writeProof(buffer, read);\n            writeOffset += read;\n            readOffset += read;\n            length -= read;\n            aux.target.seek(readOffset);\n        }\n\n        aux.target.setLength(aux.length);\n        return;\n    }\n\n    if (aux.length > THRESHOLD_AUX_LENGTH) {\n        aux.target.setLength(THRESHOLD_AUX_LENGTH);\n    }\n    aux.reset();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "16", "src_id": "M1106", "code": "\nprivate void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n    StringBuilder request = new StringBuilder(256);\n    request.append(mission.source);\n    request.append(\" [\");\n\n    if (mission.recoveryInfo != null) {\n        for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n            request.append(' ').append(recovery.toString()).append(' ');\n        }\n    }\n    request.append(\"]\");\n\n    String service;\n    try {\n        service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n    } catch (Exception e) {\n        service = ErrorInfo.SERVICE_NONE;\n    }\n\n    ErrorUtil.createNotification(mContext,\n        new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), \n        action, service, request.toString(), reason));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "17", "src_id": "M1067", "code": "\nsynchronized void startMission(DownloadMission mission) {\n    mission.timestamp = System.currentTimeMillis();\n    mission.mHandler = mHandler;\n    mission.maxRetry = mPrefMaxRetry;\n\n    while (true) {\n        mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n        if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n            try {\n                if (!mission.metadata.createNewFile()) {\n                    throw new RuntimeException(\"Cant create download metadata file\");\n                }\n            } catch (IOException e) {\n                throw new RuntimeException(e);\n            }\n            break;\n        }\n        mission.timestamp = System.currentTimeMillis();\n    }\n\n    mSelfMissionsControl = true;\n    mMissionsPending.add(mission);\n    Utility.writeToFile(mission.metadata, mission);  // save metadata\n\n    if (mission.storage == null) {\n        mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n        if (mission.errObject != null) {\n            mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n        }\n        return;\n    }\n\n    boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n    if (canDownloadInCurrentNetwork() && start) {\n        mission.start();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "18", "src_id": "M1136", "code": "\n@Override\nint process(SharpStream out, SharpStream... sources) throws IOException {\n    String format = getArgumentAt(0, null);\n    boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n    if (format == null || format.equals(\"ttml\")) {\n        SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n        try {\n            writer.build(sources[0]);\n        } catch (Exception err) {\n            Log.e(TAG, \"subtitle parse failed\", err);\n            return err instanceof IOException ? 1 : 8;\n        }\n        return OK_RESULT;\n    } else if (format.equals(\"srt\")) {\n        byte[] buffer = new byte[8 * 1024];\n        int read;\n        while ((read = sources[0].read(buffer)) > 0) {\n            out.write(buffer, 0, read);\n        }\n        return OK_RESULT;\n    }\n\n    throw new UnsupportedOperationException(\n        \"Can't convert this subtitle, unimplemented format: \" + format);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "19", "src_id": "M1047", "code": "\nprivate void joinForThreads(int millis) {\n    final Thread currentThread = Thread.currentThread();\n\n    if (init != null && init != currentThread && init.isAlive()) {\n        init.interrupt();\n        if (millis > 0) {\n            try {\n                init.join(millis);\n            } catch (InterruptedException e) {\n                Log.w(TAG, \"Initializer thread is still running\", e);\n                return;\n            }\n        }\n    }\n\n    for (Thread thread : threads) {\n        if (!thread.isAlive() || thread == Thread.currentThread()) {\n            continue;\n        }\n        thread.interrupt();\n    }\n\n    try {\n        for (Thread thread : threads) {\n            if (!thread.isAlive()) {\n                continue;\n            }\n            if (DEBUG) {\n                Log.w(TAG, \"thread alive: \" + thread.getName());\n            }\n            if (millis > 0) {\n                thread.join(millis);\n            }\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"A download thread is still running\", e);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "20", "src_id": "M491", "code": "\n@SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n@ResizeMode\npublic static int nextResizeModeAndSaveToPrefs(Player player,\n                                               @ResizeMode int resizeMode) {\n    int newResizeMode;\n    switch (resizeMode) {\n        case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n        default:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n            break;\n    }\n\n    // save the new resize mode so it can be restored in a future session\n    player.getPrefs().edit().putInt(\n            player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n    return newResizeMode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "21", "src_id": "M424", "code": "\n@Override\npublic void onBroadcastReceived(Intent intent) {\n    super.onBroadcastReceived(intent);\n    if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n        // Close it because when changing orientation from portrait\n        // (in fullscreen mode) the size of queue layout can be larger than the screen size\n        closeItemsList();\n    } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n        // Ensure that we have audio-only stream playing when a user\n        // started to play from notification's play button from outside of the app\n        if (!fragmentIsVisible) {\n            onFragmentStopped();\n        }\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n        fragmentIsVisible = false;\n        onFragmentStopped();\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n        // Restore video source when user returns to the fragment\n        fragmentIsVisible = true;\n        player.useVideoSource(true);\n\n        // When a user returns from background, the system UI will always be shown even if\n        // controls are invisible: hide it in that case\n        if (!isControlsVisible()) {\n            hideSystemUIIfNeeded();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "22", "src_id": "M900", "code": "\n@StyleRes\npublic static int getSettingsThemeStyle(Context context) {\n    Resources res = context.getResources();\n    String lightTheme = res.getString(R.string.light_theme_key);\n    String blackTheme = res.getString(R.string.black_theme_key);\n    String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n    String selectedTheme = getSelectedThemeKey(context);\n\n    if (selectedTheme.equals(lightTheme)) {\n        return R.style.LightSettingsTheme;\n    } else if (selectedTheme.equals(blackTheme)) {\n        return R.style.BlackSettingsTheme;\n    } else if (selectedTheme.equals(automaticDeviceTheme)) {\n        if (isDeviceDarkThemeEnabled(context)) {\n            // use the dark theme variant preferred by the user\n            String selectedNightTheme = getSelectedNightThemeKey(context);\n            if (selectedNightTheme.equals(blackTheme)) {\n                return R.style.BlackSettingsTheme;\n            } else {\n                return R.style.DarkSettingsTheme;\n            }\n        } else {\n            // there is only one day theme\n            return R.style.LightSettingsTheme;\n        }\n    } else {\n        // default to dark theme\n        return R.style.DarkSettingsTheme;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "23", "src_id": "M895", "code": "\n@Override\npublic Bitmap transform(Bitmap source) {\n    if (DEBUG) {\n        Log.d(TAG, \"Thumbnail - transform() called\");\n    }\n\n    float notificationThumbnailWidth = Math.min(\n            context.getResources()\n                    .getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth());\n\n    Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight()\n                    / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true);\n\n    if (result == source || !result.isMutable()) {\n        // create a new mutable bitmap to prevent strange crashes on some\n        // devices (see #4638)\n        Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight() / (source.getWidth()\n                        / (notificationThumbnailWidth - 1))),\n                null,\n                true);\n        source.recycle();\n        return copied;\n    } else {\n        source.recycle();\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "24", "src_id": "M225", "code": "\nprivate void onBroadcastReceived(Intent intent) {\n    if (intent == null || intent.getAction() == null) {\n        return;\n    }\n\n    if (DEBUG) {\n        Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n    }\n\n    switch (intent.getAction()) {\n        case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n            pause();\n            break;\n        case ACTION_CLOSE:\n            service.destroyPlayerAndStopService();\n            break;\n        case ACTION_PLAY_PAUSE:\n            playPause();\n            break;\n        case ACTION_PLAY_PREVIOUS:\n            playPrevious();\n            break;\n        case ACTION_PLAY_NEXT:\n            playNext();\n            break;\n        case ACTION_FAST_REWIND:\n            fastRewind();\n            break;\n        case ACTION_FAST_FORWARD:\n            fastForward();\n            break;\n        case ACTION_REPEAT:\n            cycleNextRepeatMode();\n            break;\n        case ACTION_SHUFFLE:\n            toggleShuffleModeEnabled();\n            break;\n        case Intent.ACTION_CONFIGURATION_CHANGED:\n            if (DEBUG) {\n                Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n            }\n            break;\n    }\n\n    UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "25", "src_id": "M749", "code": "\nprivate static void handleError(Context context, ErrorInfo errorInfo) {\n    if (errorInfo.getThrowable() != null) {\n        errorInfo.getThrowable().printStackTrace();\n    }\n\n    if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n        Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n        // Starting ReCaptcha Challenge Activity\n        Intent intent = new Intent(context, ReCaptchaActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    } else if (errorInfo.getThrowable() != null\n            && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n        Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n        Toast.makeText(context, R.string.restricted_video_no_stream,\n                Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n        Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n        Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n        Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n        Toast.makeText(context, R.string.soundcloud_go_plus_content,\n                Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n        Toast.makeText(context, R.string.youtube_music_premium_content,\n                Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n        Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n        Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n    } else {\n        ErrorUtil.createNotification(context, errorInfo);\n    }\n\n    if (context instanceof RouterActivity) {\n        ((RouterActivity) context).finish();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "26", "src_id": "M999", "code": "\npublic static void openVideoDetailFragment(@NonNull Context context,\n                                           @NonNull FragmentManager fragmentManager,\n                                           int serviceId,\n                                           @Nullable String url,\n                                           @NonNull String title,\n                                           @Nullable PlayQueue playQueue,\n                                           boolean switchingPlayers) {\n\n    boolean autoPlay;\n    @Nullable PlayerType playerType = PlayerHolder.getInstance().getType();\n    if (playerType == null) {\n        // no player open\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else if (switchingPlayers) {\n        // switching player to main player\n        autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n    } else if (playerType == PlayerType.MAIN) {\n        // opening new stream while already playing in main player\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else {\n        // opening new stream while already playing in another player\n        autoPlay = false;\n    }\n\n    RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n        expandMainPlayer(detailFragment.requireActivity());\n        detailFragment.setAutoPlay(autoPlay);\n        if (switchingPlayers) {\n            // Situation when user switches from players to main player. All needed data is\n            // here, we can start watching (assuming newQueue equals playQueue).\n            // Starting directly in fullscreen if the previous player type was popup.\n            detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                    || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n        } else {\n            detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n        }\n        detailFragment.scrollToTop();\n    };\n\n    Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n    if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n        onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n    } else {\n        // Specify no url here, otherwise the VideoDetailFragment will start loading the\n        // stream automatically if it's the first time it is being opened, but then\n        // onVideoDetailFragmentReady will kick in and start another loading process.\n        // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n        VideoDetailFragment instance = VideoDetailFragment\n                .getInstance(serviceId, null, title, playQueue);\n        instance.setAutoPlay(autoPlay);\n\n        defaultTransaction(fragmentManager)\n                .replace(R.id.fragment_player_holder, instance)\n                .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                .commit();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "27", "src_id": "M698", "code": "\n@Override\npublic void handleResult(@NonNull ChannelInfo result) {\n    super.handleResult(result);\n    currentInfo = result;\n    setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n    if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n        PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelBannerImage);\n    } else {\n        // do not waste space for the banner, if the user disabled images or there is not one\n        binding.channelBannerImage.setImageDrawable(null);\n    }\n\n    PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.channelAvatarView);\n    PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.subChannelAvatarView);\n\n    binding.channelTitleView.setText(result.getName());\n    binding.channelSubscriberView.setVisibility(View.VISIBLE);\n    if (result.getSubscriberCount() >= 0) {\n        binding.channelSubscriberView.setText(Localization\n                .shortSubscriberCount(activity, result.getSubscriberCount()));\n    } else {\n        binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n    }\n\n    if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n        binding.subChannelTitleView.setText(String.format(\n                getString(R.string.channel_created_by),\n                currentInfo.getParentChannelName())\n        );\n        binding.subChannelTitleView.setVisibility(View.VISIBLE);\n        binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n    }\n\n    updateRssButton();\n\n    channelContentNotSupported = false;\n    for (Throwable throwable : result.getErrors()) {\n        if (throwable instanceof ContentNotSupportedException) {\n            channelContentNotSupported = true;\n            showContentNotSupportedIfNeeded();\n            break;\n        }\n    }\n\n    disposables.clear();\n    if (subscribeButtonMonitor != null) {\n        subscribeButtonMonitor.dispose();\n    }\n\n    updateTabs();\n    updateSubscription(result);\n    monitorSubscription(result);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "28", "src_id": "M379", "code": "\n@Override\npublic void onTextTracksChanged(@NonNull Tracks currentTracks) {\n    super.onTextTracksChanged(currentTracks);\n\n    boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n            || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n    if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n            || !trackTypeTextSupported) {\n        binding.captionTextView.setVisibility(View.GONE);\n        return;\n    }\n\n    // Extract all loaded languages\n    List<Tracks.Group> textTracks = currentTracks\n            .getGroups()\n            .stream()\n            .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n            .collect(Collectors.toList());\n    List<String> availableLanguages = textTracks.stream()\n            .map(Tracks.Group::getMediaTrackGroup)\n            .filter(textTrack -> textTrack.length > 0)\n            .map(textTrack -> textTrack.getFormat(0).language)\n            .collect(Collectors.toList());\n\n    // Find selected text track\n    Optional<Format> selectedTracks = textTracks.stream()\n            .filter(Tracks.Group::isSelected)\n            .filter(info -> info.getMediaTrackGroup().length >= 1)\n            .map(info -> info.getMediaTrackGroup().getFormat(0))\n            .findFirst();\n\n    // Build UI\n    buildCaptionMenu(availableLanguages);\n    if (player.getTrackSelector().getParameters().getRendererDisabled(\n            player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n        binding.captionTextView.setText(R.string.caption_none);\n    } else {\n        binding.captionTextView.setText(selectedTracks.get().language);\n    }\n    binding.captionTextView.setVisibility(\n            availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "29", "src_id": "M894", "code": "\npublic static RequestCreator loadScaledDownThumbnail(Context context,\n                                                     @NonNull List<Image> images) {\n    // scale down the notification thumbnail for performance\n    return PicassoHelper.loadThumbnail(images)\n            .transform(new Transformation() {\n                @Override\n                public Bitmap transform(Bitmap source) {\n                    if (DEBUG) {\n                        Log.d(TAG, \"Thumbnail - transform() called\");\n                    }\n\n                    float notificationThumbnailWidth = Math.min(\n                            context.getResources()\n                                    .getDimension(R.dimen.player_notification_thumbnail_width),\n                            source.getWidth());\n\n                    Bitmap result = BitmapCompat.createScaledBitmap(\n                            source,\n                            (int) notificationThumbnailWidth,\n                            (int) (source.getHeight()\n                                    / (source.getWidth() / notificationThumbnailWidth)),\n                            null,\n                            true);\n\n                    if (result == source || !result.isMutable()) {\n                        // create a new mutable bitmap to prevent strange crashes on some\n                        // devices (see #4638)\n                        Bitmap copied = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth - 1,\n                                (int) (source.getHeight() / (source.getWidth()\n                                        / (notificationThumbnailWidth - 1))),\n                                null,\n                                true);\n                        source.recycle();\n                        return copied;\n                    } else {\n                        source.recycle();\n                        return result;\n                    }\n                }\n\n                @Override\n                public String key() {\n                    return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                }\n            });\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "30", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Extract headers\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Process body content\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(\n                textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML output\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Conditionally include CC/BCC\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                    .append(escapeHtml(bcc))\n                    .append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Handle attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\n                    \"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\n                    \"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show dependency notice\n        if (request != null && request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\n                \"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "31", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) return false;\n\n        try {\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "32", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) break;\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "33", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // Locate attachment markers\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true);\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // Validate marker count\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\n                \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                markerPositions.size(),\n                attachments.size());\n        }\n\n        // Create annotations\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                    document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "34", "src_id": "M342", "code": "\nprivate static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n    if (emlBytes == null || emlBytes.length == 0) throw new IllegalArgumentException(\"EML file is empty or null\");\n    \n    String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n    String subject = extractBasicHeader(emlContent, \"Subject:\");\n    String from = extractBasicHeader(emlContent, \"From:\");\n    String to = extractBasicHeader(emlContent, \"To:\");\n    String cc = extractBasicHeader(emlContent, \"Cc:\");\n    String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n    String date = extractBasicHeader(emlContent, \"Date:\");\n    String htmlBody = extractHtmlBody(emlContent);\n    \n    if (htmlBody == null) {\n        String textBody = extractTextBody(emlContent);\n        htmlBody = convertTextToHtml(textBody != null ? textBody : \"Email content could not be parsed\");\n    }\n\n    StringBuilder html = new StringBuilder()\n        .append(\"<!DOCTYPE html>\\n\")\n        .append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\")\n        .append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\")\n        .append(\"<style>\\n\");\n    appendEnhancedStyles(html);\n    html.append(\"</style>\\n</head><body>\\n<div class=\\\"email-container\\\">\\n\")\n        .append(\"<div class=\\\"email-header\\\">\\n\")\n        .append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\")\n        .append(\"<div class=\\\"email-meta\\\">\\n\")\n        .append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\")\n        .append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n    if (request != null && request.isIncludeAllRecipients()) {\n        if (!cc.trim().isEmpty()) html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n        if (!bcc.trim().isEmpty()) html.append(\"<div><strong>BCC:</strong> \").append(escapeHtml(bcc)).append(\"</div>\\n\");\n    }\n\n    if (!date.trim().isEmpty()) html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n    html.append(\"</div></div>\\n<div class=\\\"email-body\\\">\\n\")\n        .append(processEmailHtmlBody(htmlBody))\n        .append(\"</div>\\n\");\n\n    String attachmentInfo = extractAttachmentInfo(emlContent);\n    if (!attachmentInfo.isEmpty()) {\n        html.append(\"<div class=\\\"attachment-section\\\">\\n<h3>Attachments</h3>\\n\")\n            .append(attachmentInfo);\n        \n        if (request != null && request.isIncludeAttachments()) {\n            html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\")\n                .append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\")\n                .append(\"</div>\\n\");\n        } else {\n            html.append(\"<div class=\\\"attachment-info-note\\\">\\n\")\n                .append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\")\n                .append(\"</div>\\n\");\n        }\n        html.append(\"</div>\\n\");\n    }\n\n    if (request != null && request.getFileInput().isEmpty()) {\n        html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\")\n            .append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\")\n            .append(\"</div>\\n\");\n    }\n\n    return html.append(\"</div>\\n</body></html>\").toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "35", "src_id": "M371", "code": "\nprivate static boolean isValidJakartaMailMultipart(Object multipart) {\n    if (multipart == null) return false;\n    \n    try {\n        Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n        if (!multipartInterface.isInstance(multipart)) return false;\n\n        try {\n            Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n            if (mimeMultipartClass.isInstance(multipart)) {\n                log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                return true;\n            }\n        } catch (ClassNotFoundException e) {\n            log.debug(\"MimeMultipart not available, using base Multipart interface\");\n        }\n        return true;\n    } catch (ClassNotFoundException e) {\n        log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n        return false;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "36", "src_id": "M348", "code": "\nprivate static String extractBasicHeader(String emlContent, String headerName) {\n    try {\n        String[] lines = emlContent.split(\"\\r?\\n\");\n        for (int i = 0; i < lines.length; i++) {\n            String line = lines[i];\n            if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                for (int j = i + 1; j < lines.length; j++) {\n                    if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                        value.append(\" \").append(lines[j].trim());\n                    } else break;\n                }\n                return safeMimeDecode(value.toString());\n            }\n            if (line.trim().isEmpty()) break;\n        }\n    } catch (RuntimeException e) {\n        log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n    }\n    return \"\";\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "37", "src_id": "M364", "code": "\nprivate static void addAttachmentAnnotationsToDocument(\n        PDDocument document, List<EmailAttachment> attachments) throws IOException {\n    if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) return;\n\n    AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n    finder.setSortByPosition(true);\n    finder.getText(document);\n    List<MarkerPosition> markerPositions = finder.getPositions();\n\n    if (markerPositions.size() != attachments.size()) {\n        log.warn(\"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                markerPositions.size(), attachments.size());\n    }\n\n    int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n    for (int i = 0; i < annotationsToAdd; i++) {\n        MarkerPosition position = markerPositions.get(i);\n        EmailAttachment attachment = attachments.get(i);\n        if (attachment.getEmbeddedFilename() != null) {\n            PDPage page = document.getPage(position.getPageIndex());\n            addAttachmentAnnotationToPage(document, page, attachment, position.getX(), position.getY());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "38", "src_id": "M1277", "code": "\npublic static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n        String key = entry.getKey();\n        Object obj = entry.getValue();\n        if (key == null || obj == null) {\n            throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n        }\n        String str;\n        if (obj instanceof byte[]) {\n            str = SafeEncoder.encode((byte[]) obj);\n        } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n            redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n            str = geo.getLongitude() + \",\" + geo.getLatitude();\n        } else if (obj instanceof String) {\n            str = stringEscape ? escape((String) obj) : (String) obj;\n        } else {\n            str = String.valueOf(obj);\n        }\n        output.put(key, str);\n    }\n    return output;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "39", "src_id": "M902", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n        args.add(LABELS);\n        for (Map.Entry<String, String> entry : labels.entrySet()) {\n            args.add(entry.getKey()).add(entry.getValue());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "40", "src_id": "M1131", "code": "\nprivate static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    switch (b) {\n        case PLUS_BYTE:\n            return is.readLineBytes();\n        case DOLLAR_BYTE:\n        case EQUAL_BYTE:\n            return processBulkReply(is);\n        case ASTERISK_BYTE:\n            return processMultiBulkReply(is);\n        case UNDERSCORE_BYTE:\n            return is.readNullCrLf();\n        case HASH_BYTE:\n            return is.readBooleanCrLf();\n        case COLON_BYTE:\n            return is.readLongCrLf();\n        case COMMA_BYTE:\n            return is.readDoubleCrLf();\n        case LEFT_BRACE_BYTE:\n            return is.readBigIntegerCrLf();\n        case PERCENT_BYTE:  // TODO: Implement full RESP3 map handling\n            return processMapKeyValueReply(is);\n        case TILDE_BYTE:    // TODO: Implement RESP3 set handling\n        case GREATER_THAN_BYTE:\n            return processMultiBulkReply(is);\n        case MINUS_BYTE:\n            processError(is);\n            return null;\n        default:\n            throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "41", "src_id": "M1057", "code": "\n@Override\npublic Map.Entry<T, ProfilingInfo> build(Object data) {\n    List<?> list = (List<?>) data;\n    if (list == null || list.isEmpty()) {\n        return null;\n    }\n\n    if (list.get(0) instanceof KeyValue) {\n        Object resultsData = null;\n        Object profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n            String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n            switch (keyStr) {\n                case PROFILE_STR_REDIS7:\n                case PROFILE_STR_REDIS8:\n                    profileData = keyValue.getValue();\n                    break;\n                case RESULTS_STR_REDIS7:\n                    resultsData = data;\n                    break;\n                case RESULTS_STR_REDIS8:\n                    resultsData = keyValue.getValue();\n                    break;\n            }\n        }\n\n        if (resultsData == null || profileData == null) {\n            throw new IllegalStateException(\n                resultsData == null \n                    ? \"Could not detect Results data\" \n                    : \"Could not detect Profile data\"\n            );\n        }\n        return KeyValue.of(\n            resultsBuilder.build(resultsData),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData)\n        );\n    }\n\n    return KeyValue.of(\n        resultsBuilder.build(list.get(0)),\n        ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1))\n    );\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "42", "src_id": "M1229", "code": "\npublic SSLContext createSslContext() throws IOException, GeneralSecurityException {\n    KeyManager[] keyManagers = null;\n    TrustManager[] trustManagers = null;\n\n    if (sslVerifyMode == SslVerifyMode.FULL) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n    } else if (sslVerifyMode == SslVerifyMode.CA) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"\");\n    } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n        trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n    }\n\n    if (keystoreResource != null) {\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        try (InputStream keystoreStream = keystoreResource.get()) {\n            keyStore.load(keystoreStream, keystorePassword);\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n        keyManagerFactory.init(keyStore, keystorePassword);\n        keyManagers = keyManagerFactory.getKeyManagers();\n    }\n\n    if (trustManagers == null && truststoreResource != null) {\n        KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n        try (InputStream truststoreStream = truststoreResource.get()) {\n            trustStore.load(truststoreStream, truststorePassword);\n        }\n        TrustManagerFactory trustManagerFactory = \n            TrustManagerFactory.getInstance(trustManagerAlgorithm);\n        trustManagerFactory.init(trustStore);\n        trustManagers = trustManagerFactory.getTrustManagers();\n    }\n\n    SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n    sslContext.init(keyManagers, trustManagers, null);\n    return sslContext;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "43", "src_id": "M894", "code": "\n@Override\npublic TSInfo build(Object data) {\n    List<KeyValue> list = (List<KeyValue>) data;\n    Map<String, Object> properties = new HashMap<>();\n    Map<String, String> labels = null;\n    Map<String, Rule> rules = null;\n    List<Map<String, Object>> chunks = null;\n\n    for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        if (value instanceof List) {\n            switch (prop) {\n                case LABELS_PROPERTY:\n                    labels = BuilderFactory.STRING_MAP.build(value);\n                    break;\n                case RULES_PROPERTY:\n                    List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                    rules = new HashMap<>(rulesDataList.size());\n                    for (KeyValue rkv : rulesDataList) {\n                        String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                        List<Object> ruleValueList = \n                            BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                        rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                    }\n                    break;\n                case CHUNKS_PROPERTY:\n                    List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                    chunks = new ArrayList<>(chunksDataList.size());\n                    for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                        Map<String, Object> chunk = new HashMap<>();\n                        for (KeyValue kv : chunkDataAsList) {\n                            String key = BuilderFactory.STRING.build(kv.getKey());\n                            Object val = BuilderFactory.ENCODED_OBJECT.build(kv.getValue());\n                            chunk.put(key, val);\n                        }\n                        chunks.add(chunk);\n                    }\n                    break;\n                default:\n                    value = SafeEncoder.encodeObject(value);\n                    break;\n            }\n        } else if (value instanceof byte[]) {\n            value = BuilderFactory.STRING.build(value);\n            if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                try {\n                    value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                } catch (Exception e) {\n                    // Ignore conversion failure\n                }\n            }\n        }\n        properties.put(prop, value);\n    }\n    return new TSInfo(properties, labels, rules, chunks);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "44", "src_id": "M897", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n        args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n        args.add(LABELS);\n        for (Map.Entry<String, String> entry : labels.entrySet()) {\n            args.add(entry.getKey()).add(entry.getValue());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "45", "src_id": "M1213", "code": "\n@Override\npublic Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n    JedisException suppressed = null;\n\n    for (ConnectionPool pool : pools) {\n        Connection jedis = null;\n        try {\n            jedis = pool.getResource();\n            if (jedis == null) {\n                continue;\n            }\n            jedis.ping();\n            return jedis;\n        } catch (JedisException ex) {\n            if (suppressed == null) {\n                suppressed = ex;\n            }\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n        noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "46", "src_id": "M9", "code": "\n@Override\npublic CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n        entry = putIntoStore(cacheKey, entry);\n        EvictionPolicy policy = getEvictionPolicy();\n        policy.touch(cacheKey);\n        \n        CacheKey evictedKey = policy.evictNext();\n        if (evictedKey != null) {\n            delete(evictedKey);\n            stats.evict();\n        }\n\n        for (Object redisKey : cacheKey.getRedisKeys()) {\n            ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n            Set<CacheKey<?>> keySet = redisKeysToCacheKeys.get(mapKey);\n            if (keySet == null) {\n                keySet = ConcurrentHashMap.newKeySet();\n                redisKeysToCacheKeys.put(mapKey, keySet);\n            }\n            keySet.add(cacheKey);\n        }\n        \n        stats.load();\n        return entry;\n    } finally {\n        lock.unlock();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "47", "src_id": "M1105", "code": "\n@Override\npublic Class<?> build(Object data) {\n    if (data == null) {\n        return null;\n    }\n    String str = STRING.build(data);\n    switch (str) {\n        case \"null\":\n            return null;\n        case \"boolean\":\n            return boolean.class;\n        case \"integer\":\n            return int.class;\n        case \"number\":\n            return float.class;\n        case \"string\":\n            return String.class;\n        case \"object\":\n            return Object.class;\n        case \"array\":\n            return List.class;\n        default:\n            throw new JedisException(\"Unknown type: \" + str);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "48", "src_id": "M270", "code": "\nprivate static String normalizeArch(String value) {\n    value = normalize(value);\n    if (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n        return \"x86_64\";\n    }\n    if (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n        return \"x86_32\";\n    }\n    if (value.matches(\"^(ia64w?|itanium64)$\")) {\n        return \"itanium_64\";\n    }\n    if (\"ia64n\".equals(value)) {\n        return \"itanium_32\";\n    }\n    if (value.matches(\"^(sparc|sparc32)$\")) {\n        return \"sparc_32\";\n    }\n    if (value.matches(\"^(sparcv9|sparc64)$\")) {\n        return \"sparc_64\";\n    }\n    if (value.matches(\"^(arm|arm32)$\")) {\n        return \"arm_32\";\n    }\n    if (\"aarch64\".equals(value)) {\n        return \"aarch_64\";\n    }\n    if (value.matches(\"^(mips|mips32)$\")) {\n        return \"mips_32\";\n    }\n    if (value.matches(\"^(mipsel|mips32el)$\")) {\n        return \"mipsel_32\";\n    }\n    if (\"mips64\".equals(value)) {\n        return \"mips_64\";\n    }\n    if (\"mips64el\".equals(value)) {\n        return \"mipsel_64\";\n    }\n    if (value.matches(\"^(ppc|ppc32)$\")) {\n        return \"ppc_32\";\n    }\n    if (value.matches(\"^(ppcle|ppc32le)$\")) {\n        return \"ppcle_32\";\n    }\n    if (\"ppc64\".equals(value)) {\n        return \"ppc_64\";\n    }\n    if (\"ppc64le\".equals(value)) {\n        return \"ppcle_64\";\n    }\n    if (\"s390\".equals(value)) {\n        return \"s390_32\";\n    }\n    if (\"s390x\".equals(value)) {\n        return \"s390_64\";\n    }\n    return value;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "49", "src_id": "M928", "code": "\nprivate static Map<String, Object> doGetLoggerInfo(Logger logger) {\n    Map<String, Object> info = new HashMap<String, Object>();\n    info.put(LoggerHelper.name, logger.getName());\n    info.put(LoggerHelper.clazz, logger.getClass());\n    CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n    if (codeSource != null) {\n        info.put(LoggerHelper.codeSource, codeSource.getLocation());\n    }\n    info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n    Level level = logger.getLevel();\n    Level effectiveLevel = logger.getEffectiveLevel();\n    if (level != null) {\n        info.put(LoggerHelper.level, level.toString());\n    }\n    if (effectiveLevel != null) {\n        info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n    }\n\n    @SuppressWarnings(\"unchecked\")\n    List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n    info.put(LoggerHelper.appenders, result);\n    return info;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "50", "src_id": "M9", "code": "\n@SuppressWarnings(\"resource\")\npublic static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n    Map<Long, String> processMap = listProcessByJps(v);\n    if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n        String telnetPortProcess = processMap.get(telnetPortPid);\n        processMap.remove(telnetPortPid);\n        Map<Long, String> newProcessMap = new LinkedHashMap<Long, String>();\n        newProcessMap.put(telnetPortPid, telnetPortProcess);\n        newProcessMap.putAll(processMap);\n        processMap = newProcessMap;\n    }\n\n    if (processMap.isEmpty()) {\n        AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n        return -1;\n    }\n\n    if (select != null && !select.trim().isEmpty()) {\n        int matchedSelectCount = 0;\n        Long matchedPid = null;\n        for (Entry<Long, String> entry : processMap.entrySet()) {\n            if (entry.getValue().contains(select)) {\n                matchedSelectCount++;\n                matchedPid = entry.getKey();\n            }\n        }\n        if (matchedSelectCount == 1) {\n            return matchedPid;\n        }\n    }\n\n    AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n    int count = 1;\n    for (String process : processMap.values()) {\n        if (count == 1) {\n            System.out.println(\"* [\" + count + \"]: \" + process);\n        } else {\n            System.out.println(\"  [\" + count + \"]: \" + process);\n        }\n        count++;\n    }\n\n    String line = new Scanner(System.in).nextLine();\n    if (line.trim().isEmpty()) {\n        return processMap.keySet().iterator().next();\n    }\n\n    int choice = new Scanner(line).nextInt();\n    if (choice <= 0 || choice > processMap.size()) {\n        return -1;\n    }\n\n    Iterator<Long> idIter = processMap.keySet().iterator();\n    for (int i = 1; i <= choice; ++i) {\n        if (i == choice) {\n            return idIter.next();\n        }\n        idIter.next();\n    }\n    return -1;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "51", "src_id": "M140", "code": "\nvoid _processDo(int option) throws IOException {\n    if (debugoptions) {\n        System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n    }\n\n    if (__notifhand != null) {\n        __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DO, option);\n    }\n\n    boolean acceptNewState = false;\n    if (optionHandlers[option] != null) {\n        acceptNewState = optionHandlers[option].getAcceptLocal();\n    } else {\n        if (option == TERMINAL_TYPE) {\n            if (terminalType != null && terminalType.length() > 0) {\n                acceptNewState = true;\n            }\n        }\n    }\n\n    if (_willResponse[option] > 0) {\n        --_willResponse[option];\n        if (_willResponse[option] > 0 && _stateIsWill(option)) {\n            --_willResponse[option];\n        }\n    }\n\n    if (_willResponse[option] == 0) {\n        if (_requestedWont(option)) {\n            if (acceptNewState) {\n                _setWantWill(option);\n                _sendWill(option);\n            } else {\n                ++_willResponse[option];\n                _sendWont(option);\n            }\n        } else {\n        }\n    }\n    _setWill(option);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "52", "src_id": "M1324", "code": "\nprivate void bind(Configure configure) throws Throwable {\n    long start = System.currentTimeMillis();\n    if (!isBindRef.compareAndSet(false, true)) {\n        throw new IllegalStateException(\"already bind\");\n    }\n\n    if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n        int newTelnetPort = SocketUtils.findAvailableTcpPort();\n        configure.setTelnetPort(newTelnetPort);\n        logger().info(\"generate random telnet port: \" + newTelnetPort);\n    }\n    if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n        int newHttpPort = SocketUtils.findAvailableTcpPort();\n        configure.setHttpPort(newHttpPort);\n        logger().info(\"generate random http port: \" + newHttpPort);\n    }\n    if (configure.getAppName() == null) {\n        configure.setAppName(System.getProperty(\n            ArthasConstants.PROJECT_NAME,\n            System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)\n        ));\n    }\n\n    try {\n        if (configure.getTunnelServer() != null) {\n            tunnelClient = new TunnelClient();\n            tunnelClient.setAppName(configure.getAppName());\n            tunnelClient.setId(configure.getAgentId());\n            tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n            tunnelClient.setVersion(ArthasBanner.version());\n            ChannelFuture channelFuture = tunnelClient.start();\n            channelFuture.await(10, TimeUnit.SECONDS);\n        }\n    } catch (Throwable t) {\n        logger().error(\"start tunnel client error\", t);\n    }\n\n    try {\n        ShellServerOptions options = new ShellServerOptions()\n            .setInstrumentation(instrumentation)\n            .setPid(PidUtils.currentLongPid())\n            .setWelcomeMessage(ArthasBanner.welcome());\n        if (configure.getSessionTimeout() != null) {\n            options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n        }\n\n        httpSessionManager = new HttpSessionManager();\n        if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n            String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n                + \"No password is currently configured. Therefore, a default password is generated, \"\n                + \"and clients need to use the password to connect!\";\n            AnsiLog.error(errorMsg);\n            configure.setPassword(StringUtils.randomString(64));\n            AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n            logger().error(errorMsg);\n            logger().info(\"Generated arthas password: \" + configure.getPassword());\n        }\n\n        securityAuthenticator = new SecurityAuthenticatorImpl(\n            configure.getUsername(), configure.getPassword()\n        );\n        shellServer = new ShellServerImpl(options);\n\n        List<String> disabledCommands = new ArrayList<String>();\n        if (configure.getDisabledCommands() != null) {\n            String[] strings = StringUtils.tokenizeToStringArray(\n                configure.getDisabledCommands(), \",\"\n            );\n            if (strings != null) {\n                disabledCommands.addAll(Arrays.asList(strings));\n            }\n        }\n        BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n        List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n        resolvers.add(builtinCommands);\n\n        workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n            logger().info(\"try to bind telnet server, host: {}, port: {}.\",\n                configure.getIp(), configure.getTelnetPort());\n            shellServer.registerTermServer(new HttpTelnetTermServer(\n                configure.getIp(), configure.getTelnetPort(),\n                options.getConnectionTimeout(), workerGroup, httpSessionManager\n            ));\n        } else {\n            logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n        }\n        if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n            logger().info(\"try to bind http server, host: {}, port: {}.\",\n                configure.getIp(), configure.getHttpPort());\n            shellServer.registerTermServer(new HttpTermServer(\n                configure.getIp(), configure.getHttpPort(),\n                options.getConnectionTimeout(), workerGroup, httpSessionManager\n            ));\n        } else {\n            if (configure.getTunnelServer() != null) {\n                shellServer.registerTermServer(new HttpTermServer(\n                    configure.getIp(), configure.getHttpPort(),\n                    options.getConnectionTimeout(), workerGroup, httpSessionManager\n                ));\n            }\n            logger().info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n        }\n\n        for (CommandResolver resolver : resolvers) {\n            shellServer.registerCommandResolver(resolver);\n        }\n\n        shellServer.listen(new BindHandler(isBindRef));\n        if (!isBind()) {\n            throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n                + configure.getTelnetPort() + \", http port: \" + configure.getHttpPort());\n        }\n\n        sessionManager = new SessionManagerImpl(\n            options, shellServer.getCommandManager(), shellServer.getJobController()\n        );\n        httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n        logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\",\n            configure.getIp(), configure.getTelnetPort(), configure.getHttpPort(),\n            options.getConnectionTimeout());\n\n        if (configure.getStatUrl() != null) {\n            logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n        }\n        UserStatUtil.setStatUrl(configure.getStatUrl());\n        UserStatUtil.setAgentId(configure.getAgentId());\n        UserStatUtil.arthasStart();\n\n        try {\n            SpyAPI.init();\n        } catch (Throwable e) {\n        }\n\n        logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n    } catch (Throwable e) {\n        logger().error(\"Error during start as-server\", e);\n        destroy();\n        throw e;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "53", "src_id": "M122", "code": "\nprivate int __read(boolean mayBlock) throws IOException {\n    int ch;\n    for (;;) {\n        if (!mayBlock && super.available() == 0) {\n            return WOULD_BLOCK;\n        }\n\n        if ((ch = super.read()) < 0) {\n            return EOF;\n        }\n        ch = (ch & 0xff);\n\n        synchronized (__client) {\n            __client._processAYTResponse();\n        }\n        __client._spyRead(ch);\n\n        switch (__receiveState) {\n        case _STATE_CR:\n            if (ch == '\\0') {\n                continue;\n            }\n        case _STATE_DATA:\n            if (ch == TelnetCommand.IAC) {\n                __receiveState = _STATE_IAC;\n                continue;\n            }\n            if (ch == '\\r') {\n                synchronized (__client) {\n                    if (__client._requestedDont(TelnetOption.BINARY)) {\n                        __receiveState = _STATE_CR;\n                    } else {\n                        __receiveState = _STATE_DATA;\n                    }\n                }\n            } else {\n                __receiveState = _STATE_DATA;\n            }\n            break;\n\n        case _STATE_IAC:\n            switch (ch) {\n            case TelnetCommand.WILL:\n                __receiveState = _STATE_WILL;\n                continue;\n            case TelnetCommand.WONT:\n                __receiveState = _STATE_WONT;\n                continue;\n            case TelnetCommand.DO:\n                __receiveState = _STATE_DO;\n                continue;\n            case TelnetCommand.DONT:\n                __receiveState = _STATE_DONT;\n                continue;\n            case TelnetCommand.SB:\n                __suboption_count = 0;\n                __receiveState = _STATE_SB;\n                continue;\n            case TelnetCommand.IAC:\n                __receiveState = _STATE_DATA;\n                break;\n            case TelnetCommand.SE:\n                __receiveState = _STATE_DATA;\n                continue;\n            default:\n                __receiveState = _STATE_DATA;\n                __client._processCommand(ch);\n                continue;\n            }\n            break;\n\n        case _STATE_WILL:\n            synchronized (__client) {\n                __client._processWill(ch);\n                __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n\n        case _STATE_WONT:\n            synchronized (__client) {\n                __client._processWont(ch);\n                __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n\n        case _STATE_DO:\n            synchronized (__client) {\n                __client._processDo(ch);\n                __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n\n        case _STATE_DONT:\n            synchronized (__client) {\n                __client._processDont(ch);\n                __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n\n        case _STATE_SB:\n            switch (ch) {\n            case TelnetCommand.IAC:\n                __receiveState = _STATE_IAC_SB;\n                continue;\n            default:\n                if (__suboption_count < __suboption.length) {\n                    __suboption[__suboption_count++] = ch;\n                }\n                break;\n            }\n            __receiveState = _STATE_SB;\n            continue;\n\n        case _STATE_IAC_SB:\n            switch (ch) {\n            case TelnetCommand.SE:\n                synchronized (__client) {\n                    __client._processSuboption(__suboption, __suboption_count);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n            case TelnetCommand.IAC:\n                if (__suboption_count < __suboption.length) {\n                    __suboption[__suboption_count++] = ch;\n                }\n                break;\n            default:\n                break;\n            }\n            __receiveState = _STATE_SB;\n            continue;\n        }\n        break;\n    }\n    return ch;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "54", "src_id": "M8", "code": "\nprivate static String formatFileSize(long size) {\n    String hrSize;\n    double b = size;\n    double k = size / 1024.0;\n    double m = k / 1024.0;\n    double g = m / 1024.0;\n    double t = g / 1024.0;\n\n    DecimalFormat dec = new DecimalFormat(\"0.00\");\n    if (t > 1) {\n        hrSize = dec.format(t).concat(\" TB\");\n    } else if (g > 1) {\n        hrSize = dec.format(g).concat(\" GB\");\n    } else if (m > 1) {\n        hrSize = dec.format(m).concat(\" MB\");\n    } else if (k > 1) {\n        hrSize = dec.format(k).concat(\" KB\");\n    } else {\n        hrSize = dec.format(b).concat(\" Bytes\");\n    }\n    return hrSize;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "55", "src_id": "M790", "code": "\n@Override\npublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n        ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n    if (className == null) {\n        return null;\n    }\n    className = className.replace('/', '.');\n\n    List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n    ListIterator<RetransformEntry> listIterator = allRetransformEntries\n        .listIterator(allRetransformEntries.size());\n    while (listIterator.hasPrevious()) {\n        RetransformEntry retransformEntry = listIterator.previous();\n        int id = retransformEntry.getId();\n        boolean updateFlag = false;\n        if (className.equals(retransformEntry.getClassName())) {\n            if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n                updateFlag = isLoaderMatch(retransformEntry, loader);\n            } else {\n                updateFlag = true;\n            }\n        }\n\n        if (updateFlag) {\n            logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n                className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n            retransformEntry.incTransformCount();\n            return retransformEntry.getBytes();\n        }\n    }\n    return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "56", "src_id": "M716", "code": "\npublic static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n    table.row(\"IS-RETURN\", Boolean.toString(false));\n    table.row(\"IS-EXCEPTION\", Boolean.toString(true));\n\n    Throwable cause;\n    Throwable t = (Throwable) throwableVO.getObject();\n    if (t instanceof InvocationTargetException) {\n        cause = t.getCause();\n    } else {\n        cause = t;\n    }\n\n    if (throwableVO.needExpand()) {\n        table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n    } else {\n        StringWriter stringWriter = new StringWriter();\n        try (PrintWriter printWriter = new PrintWriter(stringWriter)) {\n            cause.printStackTrace(printWriter);\n            table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "57", "src_id": "M602", "code": "\nprivate AsyncProfiler profilerInstance() {\n    if (profiler != null) {\n        return profiler;\n    }\n\n    if (ProfilerAction.load.toString().equals(action)) {\n        profiler = AsyncProfiler.getInstance(actionArg);\n    }\n\n    if (libPath != null) {\n        FileOutputStream tmpLibOutputStream = null;\n        FileInputStream libInputStream = null;\n        try {\n            File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n            tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n            libInputStream = new FileInputStream(libPath);\n            IOUtils.copy(libInputStream, tmpLibOutputStream);\n            libPath = tmpLibFile.getAbsolutePath();\n            logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n        } catch (Throwable e) {\n            logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n        } finally {\n            IOUtils.close(libInputStream);\n            IOUtils.close(tmpLibOutputStream);\n        }\n        profiler = AsyncProfiler.getInstance(libPath);\n    } else {\n        if (OSUtils.isLinux() || OSUtils.isMac()) {\n            throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n        } else {\n            throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n        }\n    }\n    return profiler;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "58", "src_id": "M475", "code": "\n@Override\npublic void draw(CommandProcess process, JvmModel result) {\n    TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n\n    for (Map.Entry<String, List<JvmItemVO>> entry : result.getJvmInfo().entrySet()) {\n        String group = entry.getKey();\n        List<JvmItemVO> items = entry.getValue();\n\n        table.row(true, label(group).style(Decoration.bold.bold()));\n        for (JvmItemVO item : items) {\n            String valueStr;\n            if (item.getValue() instanceof Map && item.getName().endsWith(\"MEMORY-USAGE\")) {\n                valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n            } else {\n                valueStr = renderItemValue(item.getValue());\n            }\n            if (item.getDesc() != null) {\n                table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n            } else {\n                table.row(item.getName(), valueStr);\n            }\n        }\n        table.row(\"\", \"\");\n    }\n\n    process.write(RenderUtil.render(table, process.width()));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "59", "src_id": "M535", "code": "\npublic static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n    final StringBuilder infoSB = new StringBuilder();\n    List<String> classDumpFiles = affectVO.getClassDumpFiles();\n    if (classDumpFiles != null) {\n        for (String classDumpFile : classDumpFiles) {\n            infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n        }\n    }\n\n    List<String> methods = affectVO.getMethods();\n    if (methods != null) {\n        for (String method : methods) {\n            infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n        }\n    }\n\n    infoSB.append(format(\n        \"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\",\n        affectVO.getClassCount(),\n        affectVO.getMethodCount(),\n        affectVO.getCost(),\n        affectVO.getListenerId()));\n    if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n        infoSB.append(\"\\n\" + affectVO.getOverLimitMsg());\n    }\n    if (affectVO.getThrowable() != null) {\n        infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n    }\n    infoSB.append(\"\\n\");\n\n    return infoSB.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "60", "src_id": "M753", "code": "\npublic List<ThreadVO> sample(Collection<ThreadVO> originThreads) {\n    List<ThreadVO> threads = new ArrayList<ThreadVO>(originThreads);\n\n    if (lastCpuTimes.isEmpty()) {\n        lastSampleTimeNanos = System.nanoTime();\n        for (ThreadVO thread : threads) {\n            if (thread.getId() > 0) {\n                long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                lastCpuTimes.put(thread, cpu);\n                thread.setTime(cpu / 1000000);\n            }\n        }\n\n        Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n        if (internalThreadCpuTimes != null) {\n            for (Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n                String key = entry.getKey();\n                ThreadVO thread = createThreadVO(key);\n                thread.setTime(entry.getValue() / 1000000);\n                threads.add(thread);\n                lastCpuTimes.put(thread, entry.getValue());\n            }\n        }\n\n        Collections.sort(threads, new Comparator<ThreadVO>() {\n            @Override\n            public int compare(ThreadVO o1, ThreadVO o2) {\n                long l1 = o1.getTime();\n                long l2 = o2.getTime();\n                if (l1 < l2) return 1;\n                else if (l1 > l2) return -1;\n                else return 0;\n            }\n        });\n        return threads;\n    }\n\n    long newSampleTimeNanos = System.nanoTime();\n    Map<ThreadVO, Long> newCpuTimes = new HashMap<ThreadVO, Long>(threads.size());\n    for (ThreadVO thread : threads) {\n        if (thread.getId() > 0) {\n            long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n            newCpuTimes.put(thread, cpu);\n        }\n    }\n    Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n    if (newInternalThreadCpuTimes != null) {\n        for (Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n            ThreadVO threadVO = createThreadVO(entry.getKey());\n            threads.add(threadVO);\n            newCpuTimes.put(threadVO, entry.getValue());\n        }\n    }\n\n    final Map<ThreadVO, Long> deltas = new HashMap<ThreadVO, Long>(threads.size());\n    for (ThreadVO thread : newCpuTimes.keySet()) {\n        Long t = lastCpuTimes.get(thread);\n        if (t == null) t = 0L;\n        long time1 = t;\n        long time2 = newCpuTimes.get(thread);\n        if (time1 == -1) time1 = time2;\n        else if (time2 == -1) time2 = time1;\n        long delta = time2 - time1;\n        deltas.put(thread, delta);\n    }\n\n    long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n\n    final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());\n    for (ThreadVO thread : threads) {\n        double cpu = sampleIntervalNanos == 0 ? 0 : \n            (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);\n        cpuUsages.put(thread, cpu);\n    }\n\n    Collections.sort(threads, new Comparator<ThreadVO>() {\n        @Override\n        public int compare(ThreadVO o1, ThreadVO o2) {\n            long l1 = deltas.get(o1);\n            long l2 = deltas.get(o2);\n            if (l1 < l2) return 1;\n            else if (l1 > l2) return -1;\n            else return 0;\n        }\n    });\n\n    for (ThreadVO thread : threads) {\n        long timeMills = newCpuTimes.get(thread) / 1000000;\n        long deltaTime = deltas.get(thread) / 1000000;\n        double cpu = cpuUsages.get(thread);\n\n        thread.setCpu(cpu);\n        thread.setTime(timeMills);\n        thread.setDeltaTime(deltaTime);\n    }\n    lastCpuTimes = newCpuTimes;\n    lastSampleTimeNanos = newSampleTimeNanos;\n\n    return threads;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "61", "src_id": "M1131", "code": "\nprivate ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n    String commandLine = apiRequest.getCommand();\n    Map<String, Object> body = new TreeMap<String, Object>();\n    body.put(\"command\", commandLine);\n\n    ApiResponse response = new ApiResponse();\n    response.setSessionId(session.getSessionId())\n            .setBody(body);\n\n    if (!session.tryLock()) {\n        response.setState(ApiState.REFUSED)\n                .setMessage(\"Another command is executing.\");\n        return response;\n    }\n    int lock = session.getLock();\n    try {\n        Job foregroundJob = session.getForegroundJob();\n        if (foregroundJob != null) {\n            response.setState(ApiState.REFUSED)\n                    .setMessage(\"Another job is running.\");\n            logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n            return response;\n        }\n\n        Job job = this.createJob(commandLine, session, session.getResultDistributor());\n        body.put(\"jobId\", job.id());\n        body.put(\"jobStatus\", job.status());\n        response.setState(ApiState.SCHEDULED);\n\n        CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n        commandRequestModel.setJobId(job.id());\n        SharingResultDistributor resultDistributor = session.getResultDistributor();\n        if (resultDistributor != null) {\n            resultDistributor.appendResult(commandRequestModel);\n        }\n        session.setForegroundJob(job);\n        updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n\n        job.run();\n\n        return response;\n    } catch (Throwable e) {\n        logger.error(\"Async exec command failed:\" + e.getMessage() + \", command:\" + commandLine, e);\n        response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n        CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n        session.getResultDistributor().appendResult(commandRequestModel);\n        return response;\n    } finally {\n        if (session.getLock() == lock) {\n            session.unLock();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "62", "src_id": "M542", "code": "\nprivate String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n    StringBuilder sb = new StringBuilder(8192);\n\n    for (Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n        Map<String, Object> info = entry.getValue();\n\n        TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n        TableElement appendersTable = new TableElement().rightCellPadding(1);\n\n        Class<?> clazz = (Class<?>) info.get(LoggerHelper.clazz);\n        table.row(label(LoggerHelper.name).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.name)))\n             .row(label(LoggerHelper.clazz).style(Decoration.bold.bold()), label(\"\" + clazz.getName()))\n             .row(label(LoggerHelper.classLoader).style(Decoration.bold.bold()),\n                  label(\"\" + info.get(LoggerHelper.classLoader)))\n             .row(label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()),\n                  label(\"\" + info.get(LoggerHelper.classLoaderHash)))\n             .row(label(LoggerHelper.level).style(Decoration.bold.bold()),\n                  label(\"\" + info.get(LoggerHelper.level)));\n        if (info.get(LoggerHelper.effectiveLevel) != null) {\n            table.row(label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()),\n                     label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n        }\n        if (info.get(LoggerHelper.config) != null) {\n            table.row(label(LoggerHelper.config).style(Decoration.bold.bold()),\n                     label(\"\" + info.get(LoggerHelper.config)));\n        }\n        table.row(label(LoggerHelper.additivity).style(Decoration.bold.bold()),\n                 label(\"\" + info.get(LoggerHelper.additivity)))\n             .row(label(LoggerHelper.codeSource).style(Decoration.bold.bold()),\n                  label(\"\" + info.get(LoggerHelper.codeSource)));\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> appenders = (List<Map<String, Object>>) info.get(LoggerHelper.appenders);\n        if (appenders != null && !appenders.isEmpty()) {\n            for (Map<String, Object> appenderInfo : appenders) {\n                Class<?> appenderClass = (Class<?>) appenderInfo.get(LoggerHelper.clazz);\n\n                appendersTable.row(label(LoggerHelper.name).style(Decoration.bold.bold()),\n                                  label(\"\" + appenderInfo.get(LoggerHelper.name)));\n                appendersTable.row(label(LoggerHelper.clazz), label(\"\" + appenderClass.getName()));\n                appendersTable.row(label(LoggerHelper.classLoader), label(\"\" + info.get(LoggerHelper.classLoader)));\n                appendersTable.row(label(LoggerHelper.classLoaderHash),\n                                  label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n                if (appenderInfo.get(LoggerHelper.file) != null) {\n                    appendersTable.row(label(LoggerHelper.file), label(\"\" + appenderInfo.get(LoggerHelper.file)));\n                }\n                if (appenderInfo.get(LoggerHelper.target) != null) {\n                    appendersTable.row(label(LoggerHelper.target),\n                                      label(\"\" + appenderInfo.get(LoggerHelper.target)));\n                }\n                if (appenderInfo.get(LoggerHelper.blocking) != null) {\n                    appendersTable.row(label(LoggerHelper.blocking),\n                                      label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n                }\n                if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n                    appendersTable.row(label(LoggerHelper.appenderRef),\n                                      label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n                }\n            }\n            table.row(label(\"appenders\").style(Decoration.bold.bold()), appendersTable);\n        }\n\n        sb.append(RenderUtil.render(table, width)).append('\\n');\n    }\n    return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "63", "src_id": "M15", "code": "\npublic static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {\n    URLClassLoader classLoader = new URLClassLoader(\n        new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n    Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n    Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n    PrintStream originSysOut = System.out;\n    PrintStream originSysErr = System.err;\n    PrintStream newOut = new PrintStream(out);\n    PrintStream newErr = new PrintStream(out);\n\n    ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n    try {\n        System.setOut(newOut);\n        System.setErr(newErr);\n        Thread.currentThread().setContextClassLoader(classLoader);\n        return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});\n    } catch (Throwable e) {\n        e = e.getCause();\n        if (e instanceof IOException || e instanceof InterruptedException) {\n            return STATUS_ERROR;\n        } else {\n            AnsiLog.error(\"process error: \" + e.toString());\n            AnsiLog.error(e);\n            return STATUS_EXEC_ERROR;\n        }\n    } finally {\n        Thread.currentThread().setContextClassLoader(tccl);\n        System.setOut(originSysOut);\n        System.setErr(originSysErr);\n        newOut.flush();\n        newErr.flush();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "64", "src_id": "M1469", "code": "\npublic static FieldVO[] getFields(Class clazz, Integer expand) {\n    Field[] fields = clazz.getDeclaredFields();\n    if (fields.length == 0) {\n        return new FieldVO[0];\n    }\n\n    List<FieldVO> list = new ArrayList<FieldVO>(fields.length);\n    for (Field field : fields) {\n        FieldVO fieldVO = new FieldVO();\n        fieldVO.setName(field.getName());\n        fieldVO.setType(StringUtils.classname(field.getType()));\n        fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n        fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n        if (Modifier.isStatic(field.getModifiers())) {\n            fieldVO.setStatic(true);\n            fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n        } else {\n            fieldVO.setStatic(false);\n        }\n        list.add(fieldVO);\n    }\n    return list.toArray(new FieldVO[0]);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "65", "src_id": "M1277", "code": "\npublic static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n        String key = entry.getKey();\n        Object obj = entry.getValue();\n        if (key == null || obj == null) {\n            throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n        }\n        String str;\n        if (obj instanceof byte[]) {\n            str = SafeEncoder.encode((byte[]) obj);\n        } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n            redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n            str = geo.getLongitude() + \",\" + geo.getLatitude();\n        } else if (obj instanceof String) {\n            str = stringEscape ? escape((String) obj) : (String) obj;\n        } else {\n            str = String.valueOf(obj);\n        }\n        output.put(key, str);\n    }\n    return output;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "66", "src_id": "M902", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (retentionPeriod != null) args.add(RETENTION).add(toByteArray(retentionPeriod));\n    if (encoding != null) args.add(ENCODING).add(encoding);\n    if (chunkSize != null) args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    if (duplicatePolicy != null) args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    if (ignore) args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    if (labels != null) {\n        args.add(LABELS);\n        labels.entrySet().forEach(entry -> {\n            args.add(entry.getKey());\n            args.add(entry.getValue());\n        });\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "67", "src_id": "M1131", "code": "\nprivate static Object process(RedisInputStream is) {\n    byte b = is.readByte();\n    switch (b) {\n        case PLUS_BYTE: return is.readLineBytes();\n        case DOLLAR_BYTE:\n        case EQUAL_BYTE: return processBulkReply(is);\n        case ASTERISK_BYTE: return processMultiBulkReply(is);\n        case UNDERSCORE_BYTE: return is.readNullCrLf();\n        case HASH_BYTE: return is.readBooleanCrLf();\n        case COLON_BYTE: return is.readLongCrLf();\n        case COMMA_BYTE: return is.readDoubleCrLf();\n        case LEFT_BRACE_BYTE: return is.readBigIntegerCrLf();\n        case PERCENT_BYTE: return processMapKeyValueReply(is);\n        case TILDE_BYTE: \n        case GREATER_THAN_BYTE: return processMultiBulkReply(is);\n        case MINUS_BYTE: \n            processError(is);\n            return null;\n        default: throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "68", "src_id": "M1057", "code": "\n@Override\npublic Map.Entry<T, ProfilingInfo> build(Object data) {\n    List list = (List) data;\n    if (list == null || list.isEmpty()) return null;\n\n    if (list.get(0) instanceof KeyValue) {\n        Object resultsData = null;\n        Object profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n            String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n            switch (keyStr) {\n                case PROFILE_STR_REDIS7:\n                case PROFILE_STR_REDIS8: profileData = keyValue.getValue(); break;\n                case RESULTS_STR_REDIS7: resultsData = data; break;\n                case RESULTS_STR_REDIS8: resultsData = keyValue.getValue(); break;\n            }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n    }\n\n    return KeyValue.of(resultsBuilder.build(list.get(0)),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "69", "src_id": "M1229", "code": "\npublic SSLContext createSslContext() throws IOException, GeneralSecurityException {\n    KeyManager[] keyManagers = null;\n    TrustManager[] trustManagers = null;\n\n    if (sslVerifyMode == SslVerifyMode.FULL) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n    } else if (sslVerifyMode == SslVerifyMode.CA) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"\");\n    } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n        trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n    }\n\n    if (keystoreResource != null) {\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        try (InputStream keystoreStream = keystoreResource.get()) {\n            keyStore.load(keystoreStream, keystorePassword);\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n        keyManagerFactory.init(keyStore, keystorePassword);\n        keyManagers = keyManagerFactory.getKeyManagers();\n    }\n\n    if (trustManagers == null && truststoreResource != null) {\n        KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n        try (InputStream truststoreStream = truststoreResource.get()) {\n            trustStore.load(truststoreStream, truststorePassword);\n        }\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n        trustManagerFactory.init(trustStore);\n        trustManagers = trustManagerFactory.getTrustManagers();\n    }\n\n    SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n    sslContext.init(keyManagers, trustManagers, null);\n    return sslContext;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "70", "src_id": "M894", "code": "\n@Override\npublic TSInfo build(Object data) {\n    List<KeyValue> list = (List<KeyValue>) data;\n    Map<String, Object> properties = new HashMap<>();\n    Map<String, String> labels = null;\n    Map<String, Rule> rules = null;\n    List<Map<String, Object>> chunks = null;\n\n    for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        if (value instanceof List) {\n            switch (prop) {\n                case LABELS_PROPERTY:\n                    labels = BuilderFactory.STRING_MAP.build(value);\n                    value = labels;\n                    break;\n                case RULES_PROPERTY:\n                    List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                    rules = new HashMap<>(rulesDataList.size());\n                    for (KeyValue rkv : rulesDataList) {\n                        String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                        List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                        rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                    }\n                    break;\n                case CHUNKS_PROPERTY:\n                    List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                    chunks = new ArrayList<>(chunksDataList.size());\n                    for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                        Map<String, Object> chunk = chunkDataAsList.stream()\n                            .collect(Collectors.toMap(\n                                kv -> BuilderFactory.STRING.build(kv.getKey()),\n                                kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())\n                            ));\n                        chunks.add(chunk);\n                    }\n                    break;\n                default: value = SafeEncoder.encodeObject(value);\n            }\n        } else if (value instanceof byte[]) {\n            value = BuilderFactory.STRING.build(value);\n            if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                try {\n                    value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                } catch (Exception e) {}\n            }\n        }\n        properties.put(prop, value);\n    }\n    return new TSInfo(properties, labels, rules, chunks);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "71", "src_id": "M897", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (retentionPeriod != null) args.add(RETENTION).add(toByteArray(retentionPeriod));\n    if (encoding != null) args.add(ENCODING).add(encoding);\n    if (chunkSize != null) args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    if (duplicatePolicy != null) args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    if (onDuplicate != null) args.add(ON_DUPLICATE).add(onDuplicate);\n    if (ignore) args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    if (labels != null) {\n        args.add(LABELS);\n        labels.entrySet().forEach(entry -> {\n            args.add(entry.getKey());\n            args.add(entry.getValue());\n        });\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "72", "src_id": "M1213", "code": "\n@Override\npublic Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n    JedisException suppressed = null;\n\n    for (ConnectionPool pool : pools) {\n        Connection jedis = null;\n        try {\n            jedis = pool.getResource();\n            if (jedis == null) continue;\n            jedis.ping();\n            return jedis;\n        } catch (JedisException ex) {\n            if (suppressed == null) suppressed = ex;\n            if (jedis != null) jedis.close();\n        }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) noReachableNode.addSuppressed(suppressed);\n    throw noReachableNode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "73", "src_id": "M9", "code": "\n@Override\npublic CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n        entry = putIntoStore(cacheKey, entry);\n        EvictionPolicy policy = getEvictionPolicy();\n        policy.touch(cacheKey);\n        CacheKey evictedKey = policy.evictNext();\n        if (evictedKey != null) {\n            delete(evictedKey);\n            stats.evict();\n        }\n        for (Object redisKey : cacheKey.getRedisKeys()) {\n            ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n            if (redisKeysToCacheKeys.containsKey(mapKey)) {\n                redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n            } else {\n                Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n                set.add(cacheKey);\n                redisKeysToCacheKeys.put(mapKey, set);\n            }\n        }\n        stats.load();\n        return entry;\n    } finally {\n        lock.unlock();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "74", "src_id": "M1105", "code": "\n@Override\npublic Class<?> build(Object data) {\n    if (data == null) return null;\n    String str = STRING.build(data);\n    switch (str) {\n        case \"null\": return null;\n        case \"boolean\": return boolean.class;\n        case \"integer\": return int.class;\n        case \"number\": return float.class;\n        case \"string\": return String.class;\n        case \"object\": return Object.class;\n        case \"array\": return List.class;\n        default: throw new JedisException(\"Unknown type: \" + str);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "75", "src_id": "M1277", "code": "\npublic static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n        String key = entry.getKey();\n        Object obj = entry.getValue();\n        if (key == null || obj == null) {\n            throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n        }\n        String str;\n        if (obj instanceof byte[]) {\n            str = SafeEncoder.encode((byte[]) obj);\n        } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n            redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n            str = geo.getLongitude() + \",\" + geo.getLatitude();\n        } else if (obj instanceof String) {\n            str = stringEscape ? escape((String) obj) : (String) obj;\n        } else {\n            str = String.valueOf(obj);\n        }\n        output.put(key, str);\n    }\n    return output;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "76", "src_id": "M902", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n        args.add(LABELS);\n        labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "77", "src_id": "M1131", "code": "\nprivate static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    switch (b) {\n        case PLUS_BYTE:\n            return is.readLineBytes();\n        case DOLLAR_BYTE:\n        case EQUAL_BYTE:\n            return processBulkReply(is);\n        case ASTERISK_BYTE:\n            return processMultiBulkReply(is);\n        case UNDERSCORE_BYTE:\n            return is.readNullCrLf();\n        case HASH_BYTE:\n            return is.readBooleanCrLf();\n        case COLON_BYTE:\n            return is.readLongCrLf();\n        case COMMA_BYTE:\n            return is.readDoubleCrLf();\n        case LEFT_BRACE_BYTE:\n            return is.readBigIntegerCrLf();\n        case PERCENT_BYTE:\n            return processMapKeyValueReply(is);\n        case TILDE_BYTE:\n        case GREATER_THAN_BYTE:\n            return processMultiBulkReply(is);\n        case MINUS_BYTE:\n            processError(is);\n            return null;\n        default:\n            throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "78", "src_id": "M1057", "code": "\n@Override\npublic Map.Entry<T, ProfilingInfo> build(Object data) {\n    List list = (List) data;\n    if (list == null || list.isEmpty()) return null;\n\n    if (list.get(0) instanceof KeyValue) {\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n            String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n            switch (keyStr) {\n                case PROFILE_STR_REDIS7:\n                case PROFILE_STR_REDIS8:\n                    profileData = keyValue.getValue();\n                    break;\n                case RESULTS_STR_REDIS7:\n                    resultsData = data;\n                    break;\n                case RESULTS_STR_REDIS8:\n                    resultsData = keyValue.getValue();\n                    break;\n            }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n    }\n\n    return KeyValue.of(resultsBuilder.build(list.get(0)),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "79", "src_id": "M1229", "code": "\npublic SSLContext createSslContext() throws IOException, GeneralSecurityException {\n    KeyManager[] keyManagers = null;\n    TrustManager[] trustManagers = null;\n\n    if (sslVerifyMode == SslVerifyMode.FULL) {\n        this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n    } else if (sslVerifyMode == SslVerifyMode.CA) {\n        this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n    } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n        trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n    }\n\n    if (keystoreResource != null) {\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        try (InputStream keystoreStream = keystoreResource.get()) {\n            keyStore.load(keystoreStream, keystorePassword);\n        }\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n        keyManagerFactory.init(keyStore, keystorePassword);\n        keyManagers = keyManagerFactory.getKeyManagers();\n    }\n\n    if (trustManagers == null && truststoreResource != null) {\n        KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n        try (InputStream truststoreStream = truststoreResource.get()) {\n            trustStore.load(truststoreStream, truststorePassword);\n        }\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n        trustManagerFactory.init(trustStore);\n        trustManagers = trustManagerFactory.getTrustManagers();\n    }\n\n    SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n    sslContext.init(keyManagers, trustManagers, null);\n    return sslContext;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "80", "src_id": "M894", "code": "\n@Override\npublic TSInfo build(Object data) {\n    List<KeyValue> list = (List<KeyValue>) data;\n    Map<String, Object> properties = new HashMap<>();\n    Map<String, String> labels = null;\n    Map<String, Rule> rules = null;\n    List<Map<String, Object>> chunks = null;\n\n    for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        if (value instanceof List) {\n            switch (prop) {\n                case LABELS_PROPERTY:\n                    labels = BuilderFactory.STRING_MAP.build(value);\n                    value = labels;\n                    break;\n                case RULES_PROPERTY:\n                    List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                    Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n                    rules = new HashMap<>(rulesDataList.size());\n                    for (KeyValue rkv : rulesDataList) {\n                        String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                        List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                        rulesValueMap.put(ruleName, ruleValueList);\n                        rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                    }\n                    value = rulesValueMap;\n                    break;\n                case CHUNKS_PROPERTY:\n                    List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                    List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n                    chunks = new ArrayList<>(chunksDataList.size());\n                    for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                        Map<String, Object> chunk = chunkDataAsList.stream()\n                                .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                        chunksValueList.add(chunk);\n                        chunks.add(chunk);\n                    }\n                    value = chunksValueList;\n                    break;\n                default:\n                    value = SafeEncoder.encodeObject(value);\n                    break;\n            }\n        } else if (value instanceof byte[]) {\n            value = BuilderFactory.STRING.build(value);\n            if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                try {\n                    value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                } catch (Exception e) { }\n            }\n        }\n        properties.put(prop, value);\n    }\n\n    return new TSInfo(properties, labels, rules, chunks);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "81", "src_id": "M897", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n        args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n        args.add(LABELS);\n        labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "82", "src_id": "M1213", "code": "\n@Override\npublic Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n    JedisException suppressed = null;\n\n    for (ConnectionPool pool : pools) {\n        Connection jedis = null;\n        try {\n            jedis = pool.getResource();\n            if (jedis == null) {\n                continue;\n            }\n            jedis.ping();\n            return jedis;\n        } catch (JedisException ex) {\n            if (suppressed == null) {\n                suppressed = ex;\n            }\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n        noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "83", "src_id": "M9", "code": "\n@Override\npublic CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n        entry = putIntoStore(cacheKey, entry);\n        EvictionPolicy policy = getEvictionPolicy();\n        policy.touch(cacheKey);\n        CacheKey evictedKey = policy.evictNext();\n        if (evictedKey != null) {\n            delete(evictedKey);\n            stats.evict();\n        }\n        for (Object redisKey : cacheKey.getRedisKeys()) {\n            ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n            if (redisKeysToCacheKeys.containsKey(mapKey)) {\n                redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n            } else {\n                Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n                set.add(cacheKey);\n                redisKeysToCacheKeys.put(mapKey, set);\n            }\n        }\n        stats.load();\n        return entry;\n    } finally {\n        lock.unlock();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "84", "src_id": "M1105", "code": "\n@Override\npublic Class<?> build(Object data) {\n    if (data == null) return null;\n    String str = STRING.build(data);\n    switch (str) {\n        case \"null\":\n            return null;\n        case \"boolean\":\n            return boolean.class;\n        case \"integer\":\n            return int.class;\n        case \"number\":\n            return float.class;\n        case \"string\":\n            return String.class;\n        case \"object\":\n            return Object.class;\n        case \"array\":\n            return List.class;\n        default:\n            throw new JedisException(\"Unknown type: \" + str);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "85", "src_id": "M1277", "code": "\npublic static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    // Preallocate output map with initial capacity matching input size\n    Map<String, String> output = new HashMap<>(input.size());\n\n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n        String key = entry.getKey();\n        Object obj = entry.getValue();\n\n        // Validate key and value presence\n        if (key == null || obj == null) {\n            throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n        }\n\n        String str;\n        // Process different value types\n        if (obj instanceof byte[]) {\n            // Convert byte array to string\n            str = SafeEncoder.encode((byte[]) obj);\n        } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n            // Format GeoCoordinate as longitude,latitude\n            redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n            str = geo.getLongitude() + \",\" + geo.getLatitude();\n        } else if (obj instanceof String) {\n            // Apply escaping if requested\n            str = stringEscape ? escape((String) obj) : (String) obj;\n        } else {\n            // Use default string conversion\n            str = String.valueOf(obj);\n        }\n\n        output.put(key, str);\n    }\n    return output;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "86", "src_id": "M902", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    // Add retention period parameter if set\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    // Add encoding parameter if specified\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    // Include chunk size if configured\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    // Handle duplicate policy setting\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    // Process ignore parameters when flag is enabled\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    // Add labels if present\n    if (labels != null) {\n        args.add(LABELS);\n        // Include each label key-value pair\n        for (Map.Entry<String, String> entry : labels.entrySet()) {\n            args.add(entry.getKey());\n            args.add(entry.getValue());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "87", "src_id": "M1131", "code": "\nprivate static Object process(final RedisInputStream is) {\n    // Read initial byte to determine response type\n    final byte b = is.readByte();\n\n    // Process based on response indicator byte\n    switch (b) {\n        case PLUS_BYTE:  // Simple string\n            return is.readLineBytes();\n        case DOLLAR_BYTE:  // Bulk string\n        case EQUAL_BYTE:   // Verbatim string\n            return processBulkReply(is);\n        case ASTERISK_BYTE:  // Array response\n            return processMultiBulkReply(is);\n        case UNDERSCORE_BYTE:  // Null\n            return is.readNullCrLf();\n        case HASH_BYTE:  // Boolean\n            return is.readBooleanCrLf();\n        case COLON_BYTE:  // Integer\n            return is.readLongCrLf();\n        case COMMA_BYTE:  // Double\n            return is.readDoubleCrLf();\n        case LEFT_BRACE_BYTE:  // Big integer\n            return is.readBigIntegerCrLf();\n        case PERCENT_BYTE:  // Map response\n            return processMapKeyValueReply(is);\n        case TILDE_BYTE:    // Set response\n        case GREATER_THAN_BYTE:  // Push data\n            return processMultiBulkReply(is);\n        case MINUS_BYTE:  // Error response\n            processError(is);\n            return null;\n        default:  // Unknown response type\n            throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "88", "src_id": "M1057", "code": "\n@Override\npublic Map.Entry<T, ProfilingInfo> build(Object data) {\n    List<?> list = (List<?>) data;\n    if (list == null || list.isEmpty()) {\n        return null;\n    }\n\n    // Handle RESP3 format (list of KeyValue pairs)\n    if (list.get(0) instanceof KeyValue) {\n        Object resultsData = null;\n        Object profileData = null;\n\n        // Extract results and profile data from key-value pairs\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n            String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n            switch (keyStr) {\n                case PROFILE_STR_REDIS7:\n                case PROFILE_STR_REDIS8:\n                    profileData = keyValue.getValue();\n                    break;\n                case RESULTS_STR_REDIS7:\n                    resultsData = data;\n                    break;\n                case RESULTS_STR_REDIS8:\n                    resultsData = keyValue.getValue();\n                    break;\n            }\n        }\n\n        // Validate required data presence\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n\n        // Build final result\n        return KeyValue.of(\n            resultsBuilder.build(resultsData),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData)\n        );\n    }\n\n    // Handle legacy format (direct values)\n    return KeyValue.of(\n        resultsBuilder.build(list.get(0)),\n        ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1))\n    );\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "89", "src_id": "M1229", "code": "\npublic SSLContext createSslContext() throws IOException, GeneralSecurityException {\n    KeyManager[] keyManagers = null;\n    TrustManager[] trustManagers = null;\n\n    // Configure SSL parameters based on verification mode\n    if (sslVerifyMode == SslVerifyMode.FULL) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n    } else if (sslVerifyMode == SslVerifyMode.CA) {\n        sslParameters.setEndpointIdentificationAlgorithm(\"\");\n    } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n        trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n    }\n\n    // Load keystore if provided\n    if (keystoreResource != null) {\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        try (InputStream keystoreStream = keystoreResource.get()) {\n            keyStore.load(keystoreStream, keystorePassword);\n        }\n\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n        keyManagerFactory.init(keyStore, keystorePassword);\n        keyManagers = keyManagerFactory.getKeyManagers();\n    }\n\n    // Load truststore if not set by insecure mode\n    if (trustManagers == null && truststoreResource != null) {\n        KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n        try (InputStream truststoreStream = truststoreResource.get()) {\n            trustStore.load(truststoreStream, truststorePassword);\n        }\n\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n        trustManagerFactory.init(trustStore);\n        trustManagers = trustManagerFactory.getTrustManagers();\n    }\n\n    // Initialize SSL context\n    SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n    sslContext.init(keyManagers, trustManagers, null);\n    return sslContext;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "90", "src_id": "M894", "code": "\n@Override\npublic TSInfo build(Object data) {\n    List<KeyValue> list = (List<KeyValue>) data;\n    Map<String, Object> properties = new HashMap<>();\n    Map<String, String> labels = null;\n    Map<String, Rule> rules = null;\n    List<Map<String, Object>> chunks = null;\n\n    // Process each property key-value pair\n    for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n\n        // Handle complex property types\n        if (value instanceof List) {\n            switch (prop) {\n                case LABELS_PROPERTY:\n                    // Build labels map\n                    labels = BuilderFactory.STRING_MAP.build(value);\n                    value = labels;\n                    break;\n                case RULES_PROPERTY:\n                    // Process rules structure\n                    List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                    Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size());\n                    rules = new HashMap<>(rulesDataList.size());\n                    for (KeyValue rkv : rulesDataList) {\n                        String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                        List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                        rulesValueMap.put(ruleName, ruleValueList);\n                        rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                    }\n                    value = rulesValueMap;\n                    break;\n                case CHUNKS_PROPERTY:\n                    // Process chunk data\n                    List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                    List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n                    chunks = new ArrayList<>(chunksDataList.size());\n                    for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                        Map<String, Object> chunk = new HashMap<>();\n                        for (KeyValue kv : chunkDataAsList) {\n                            String key = BuilderFactory.STRING.build(kv.getKey());\n                            Object val = BuilderFactory.ENCODED_OBJECT.build(kv.getValue());\n                            chunk.put(key, val);\n                        }\n                        chunksValueList.add(chunk);\n                        chunks.add(chunk);\n                    }\n                    value = chunksValueList;\n                    break;\n                default:\n                    // Default handling for list types\n                    value = SafeEncoder.encodeObject(value);\n                    break;\n            }\n        } else if (value instanceof byte[]) {\n            // Handle byte array conversion\n            value = BuilderFactory.STRING.build(value);\n            // Special handling for duplicate policy property\n            if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                try {\n                    value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                } catch (Exception e) {\n                    // Preserve original value on conversion failure\n                }\n            }\n        }\n        properties.put(prop, value);\n    }\n\n    return new TSInfo(properties, labels, rules, chunks);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "91", "src_id": "M897", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n    // Retention period parameter\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    // Encoding parameter\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    // Chunk size setting\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    // Duplicate policy (first occurrence)\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    // Duplicate policy (second occurrence)\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    // On-duplicate handling\n    if (onDuplicate != null) {\n        args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    // Ignore parameters\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    // Label processing\n    if (labels != null) {\n        args.add(LABELS);\n        for (Map.Entry<String, String> entry : labels.entrySet()) {\n            args.add(entry.getKey());\n            args.add(entry.getValue());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "92", "src_id": "M1213", "code": "\n@Override\npublic Connection getConnection() {\n    // Retrieve shuffled connection pools\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    // Attempt connection from each pool\n    for (ConnectionPool pool : pools) {\n        Connection jedis = null;\n        try {\n            // Acquire connection resource\n            jedis = pool.getResource();\n            if (jedis == null) {\n                continue; // Skip unavailable connections\n            }\n\n            // Validate connection\n            jedis.ping();\n            return jedis;\n\n        } catch (JedisException ex) {\n            // Capture first exception for error reporting\n            if (suppressed == null) {\n                suppressed = ex;\n            }\n            // Cleanup invalid connection\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    // Handle no reachable nodes\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n        noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "93", "src_id": "M9", "code": "\n@Override\npublic CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n        // Store entry in underlying storage\n        entry = putIntoStore(cacheKey, entry);\n\n        // Update eviction policy\n        EvictionPolicy policy = getEvictionPolicy();\n        policy.touch(cacheKey);\n\n        // Perform eviction if required\n        CacheKey evictedKey = policy.evictNext();\n        if (evictedKey != null) {\n            delete(evictedKey);\n            stats.evict();\n        }\n\n        // Update reverse index mapping\n        for (Object redisKey : cacheKey.getRedisKeys()) {\n            ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n            Set<CacheKey<?>> cacheKeysSet = redisKeysToCacheKeys.get(mapKey);\n            if (cacheKeysSet != null) {\n                cacheKeysSet.add(cacheKey);\n            } else {\n                // Initialize new mapping entry\n                Set<CacheKey<?>> newSet = ConcurrentHashMap.newKeySet();\n                newSet.add(cacheKey);\n                redisKeysToCacheKeys.put(mapKey, newSet);\n            }\n        }\n\n        // Update statistics\n        stats.load();\n        return entry;\n    } finally {\n        lock.unlock();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "94", "src_id": "M1105", "code": "\n@Override\npublic Class<?> build(Object data) {\n    if (data == null) {\n        return null;\n    }\n\n    // Convert input to string representation\n    String str = STRING.build(data);\n\n    // Map type string to Java class\n    switch (str) {\n        case \"null\":\n            return null;\n        case \"boolean\":\n            return boolean.class;\n        case \"integer\":\n            return int.class;\n        case \"number\":\n            return float.class;\n        case \"string\":\n            return String.class;\n        case \"object\":\n            return Object.class;\n        case \"array\":\n            return List.class;\n        default:\n            throw new JedisException(\"Unknown type: \" + str);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "95", "src_id": "M270", "code": "\n    private static String normalizeArch(String value) {\n        value = normalize(value);\n        if (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n            return \"x86_64\";\n        }\n        if (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n            return \"x86_32\";\n        }\n        if (value.matches(\"^(ia64w?|itanium64)$\")) {\n            return \"itanium_64\";\n        }\n        if (\"ia64n\".equals(value)) {\n            return \"itanium_32\";\n        }\n        if (value.matches(\"^(sparc|sparc32)$\")) {\n            return \"sparc_32\";\n        }\n        if (value.matches(\"^(sparcv9|sparc64)$\")) {\n            return \"sparc_64\";\n        }\n        if (value.matches(\"^(arm|arm32)$\")) {\n            return \"arm_32\";\n        }\n        if (\"aarch64\".equals(value)) {\n            return \"aarch_64\";\n        }\n        if (value.matches(\"^(mips|mips32)$\")) {\n            return \"mips_32\";\n        }\n        if (value.matches(\"^(mipsel|mips32el)$\")) {\n            return \"mipsel_32\";\n        }\n        if (\"mips64\".equals(value)) {\n            return \"mips_64\";\n        }\n        if (\"mips64el\".equals(value)) {\n            return \"mipsel_64\";\n        }\n        if (value.matches(\"^(ppc|ppc32)$\")) {\n            return \"ppc_32\";\n        }\n        if (value.matches(\"^(ppcle|ppc32le)$\")) {\n            return \"ppcle_32\";\n        }\n        if (\"ppc64\".equals(value)) {\n            return \"ppc_64\";\n        }\n        if (\"ppc64le\".equals(value)) {\n            return \"ppcle_64\";\n        }\n        if (\"s390\".equals(value)) {\n            return \"s390_32\";\n        }\n        if (\"s390x\".equals(value)) {\n            return \"s390_64\";\n        }\n        return value;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "96", "src_id": "M928", "code": "\n    private static Map<String, Object> doGetLoggerInfo(Logger logger) {\n        Map<String, Object> info = new HashMap<>();\n        info.put(LoggerHelper.name, logger.getName());\n        info.put(LoggerHelper.clazz, logger.getClass());\n        CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n        if (codeSource != null) {\n            info.put(LoggerHelper.codeSource, codeSource.getLocation());\n        }\n        info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n        Level level = logger.getLevel();\n        Level effectiveLevel = logger.getEffectiveLevel();\n        if (level != null) {\n            info.put(LoggerHelper.level, level.toString());\n        }\n        if (effectiveLevel != null) {\n            info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n        info.put(LoggerHelper.appenders, result);\n        return info;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "97", "src_id": "M9", "code": "\n    @SuppressWarnings(\"resource\")\n    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n        Map<Long, String> processMap = listProcessByJps(v);\n        if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n            String telnetPortProcess = processMap.get(telnetPortPid);\n            processMap.remove(telnetPortPid);\n            Map<Long, String> newProcessMap = new LinkedHashMap<>();\n            newProcessMap.put(telnetPortPid, telnetPortProcess);\n            newProcessMap.putAll(processMap);\n            processMap = newProcessMap;\n        }\n\n        if (processMap.isEmpty()) {\n            AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented \"\n                    + \"Java HotSpot VMs on the target system.\");\n            return -1;\n        }\n\n        if (select != null && !select.trim().isEmpty()) {\n            int matchedSelectCount = 0;\n            Long matchedPid = null;\n            for (Entry<Long, String> entry : processMap.entrySet()) {\n                if (entry.getValue().contains(select)) {\n                    matchedSelectCount++;\n                    matchedPid = entry.getKey();\n                }\n            }\n            if (matchedSelectCount == 1) {\n                return matchedPid;\n            }\n        }\n\n        AnsiLog.info(\"Found existing java process, please choose one and input the serial number \"\n                + \"of the process, eg : 1. Then hit ENTER.\");\n        int count = 1;\n        for (String process : processMap.values()) {\n            if (count == 1) {\n                System.out.println(\"* [\" + count + \"]: \" + process);\n            } else {\n                System.out.println(\"  [\" + count + \"]: \" + process);\n            }\n            count++;\n        }\n\n        String line = new Scanner(System.in).nextLine();\n        if (line.trim().isEmpty()) {\n            return processMap.keySet().iterator().next();\n        }\n\n        int choice = new Scanner(line).nextInt();\n        if (choice <= 0 || choice > processMap.size()) {\n            return -1;\n        }\n\n        Iterator<Long> idIter = processMap.keySet().iterator();\n        for (int i = 1; i <= choice; ++i) {\n            if (i == choice) {\n                return idIter.next();\n            }\n            idIter.next();\n        }\n\n        return -1;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "98", "src_id": "M140", "code": "\n    void _processDo(int option) throws IOException {\n        if (debugoptions) {\n            System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n        }\n\n        if (__notifhand != null) {\n            __notifhand.receivedNegotiation(\n                    TelnetNotificationHandler.RECEIVED_DO,\n                    option);\n        }\n\n        boolean acceptNewState = false;\n        if (optionHandlers[option] != null) {\n            acceptNewState = optionHandlers[option].getAcceptLocal();\n        } else {\n            if (option == TERMINAL_TYPE) {\n                if ((terminalType != null) && (terminalType.length() > 0)) {\n                    acceptNewState = true;\n                }\n            }\n        }\n\n        if (_willResponse[option] > 0) {\n            --_willResponse[option];\n            if (_willResponse[option] > 0 && _stateIsWill(option)) {\n                --_willResponse[option];\n            }\n        }\n\n        if (_willResponse[option] == 0) {\n            if (_requestedWont(option)) {\n                switch (option) {\n                default:\n                    break;\n                }\n\n                if (acceptNewState) {\n                    _setWantWill(option);\n                    _sendWill(option);\n                } else {\n                    ++_willResponse[option];\n                    _sendWont(option);\n                }\n            } else {\n                switch (option) {\n                default:\n                    break;\n                }\n            }\n        }\n\n        _setWill(option);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "99", "src_id": "M1324", "code": "\n    private void bind(Configure configure) throws Throwable {\n        long start = System.currentTimeMillis();\n\n        if (!isBindRef.compareAndSet(false, true)) {\n            throw new IllegalStateException(\"already bind\");\n        }\n\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n            int newTelnetPort = SocketUtils.findAvailableTcpPort();\n            configure.setTelnetPort(newTelnetPort);\n            logger().info(\"generate random telnet port: {}\", newTelnetPort);\n        }\n        if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n            int newHttpPort = SocketUtils.findAvailableTcpPort();\n            configure.setHttpPort(newHttpPort);\n            logger().info(\"generate random http port: {}\", newHttpPort);\n        }\n        if (configure.getAppName() == null) {\n            configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME,\n                    System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n        }\n\n        try {\n            if (configure.getTunnelServer() != null) {\n                tunnelClient = new TunnelClient();\n                tunnelClient.setAppName(configure.getAppName());\n                tunnelClient.setId(configure.getAgentId());\n                tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n                tunnelClient.setVersion(ArthasBanner.version());\n                ChannelFuture channelFuture = tunnelClient.start();\n                channelFuture.await(10, TimeUnit.SECONDS);\n            }\n        } catch (Throwable t) {\n            logger().error(\"start tunnel client error\", t);\n        }\n\n        try {\n            ShellServerOptions options = new ShellServerOptions()\n                    .setInstrumentation(instrumentation)\n                    .setPid(PidUtils.currentLongPid())\n                    .setWelcomeMessage(ArthasBanner.welcome());\n            if (configure.getSessionTimeout() != null) {\n                options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n            }\n\n            this.httpSessionManager = new HttpSessionManager();\n            if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n                String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n                        + \"No password is currently configured. Therefore, a default password is generated, \"\n                        + \"and clients need to use the password to connect!\";\n                AnsiLog.error(errorMsg);\n                configure.setPassword(StringUtils.randomString(64));\n                AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n                logger().error(errorMsg);\n                logger().info(\"Generated arthas password: {}\", configure.getPassword());\n            }\n\n            this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n            shellServer = new ShellServerImpl(options);\n\n            List<String> disabledCommands = new ArrayList<>();\n            if (configure.getDisabledCommands() != null) {\n                String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n                if (strings != null) {\n                    disabledCommands.addAll(Arrays.asList(strings));\n                }\n            }\n            BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n            List<CommandResolver> resolvers = new ArrayList<>();\n            resolvers.add(builtinCommands);\n\n            workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n            if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n                logger().info(\"try to bind telnet server, host: {}, port: {}\", \n                        configure.getIp(), configure.getTelnetPort());\n                shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                logger().info(\"telnet port is {}, skip bind telnet server\", configure.getTelnetPort());\n            }\n            if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n                logger().info(\"try to bind http server, host: {}, port: {}\",\n                        configure.getIp(), configure.getHttpPort());\n                shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else if (configure.getTunnelServer() != null) {\n                shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n                logger().info(\"http port is {}, skip bind http server\", configure.getHttpPort());\n            }\n\n            for (CommandResolver resolver : resolvers) {\n                shellServer.registerCommandResolver(resolver);\n            }\n\n            shellServer.listen(new BindHandler(isBindRef));\n            if (!isBind()) {\n                throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n                        + configure.getTelnetPort() + \", http port: \" + configure.getHttpPort());\n            }\n\n            sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n            httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n            logger().info(\"as-server listening on network={};telnet={};http={};timeout={}\",\n                    configure.getIp(), configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n            if (configure.getStatUrl() != null) {\n                logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n            }\n            UserStatUtil.setStatUrl(configure.getStatUrl());\n            UserStatUtil.setAgentId(configure.getAgentId());\n            UserStatUtil.arthasStart();\n\n            try {\n                SpyAPI.init();\n            } catch (Throwable e) {\n                // ignore\n            }\n\n            logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n        } catch (Throwable e) {\n            logger().error(\"Error during start as-server\", e);\n            destroy();\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "100", "src_id": "M122", "code": "\n    private int __read(boolean mayBlock) throws IOException {\n        int ch;\n\n        while (true) {\n            if (!mayBlock && super.available() == 0) {\n                return WOULD_BLOCK;\n            }\n\n            if ((ch = super.read()) < 0) {\n                return EOF;\n            }\n\n            ch = (ch & 0xff);\n\n            synchronized (__client) {\n                __client._processAYTResponse();\n            }\n            __client._spyRead(ch);\n\n            switch (__receiveState) {\n            case _STATE_CR:\n                if (ch == '\\0') {\n                    continue;\n                }\n                //$FALL-THROUGH$\n            case _STATE_DATA:\n                if (ch == TelnetCommand.IAC) {\n                    __receiveState = _STATE_IAC;\n                    continue;\n                }\n                if (ch == '\\r') {\n                    synchronized (__client) {\n                        if (__client._requestedDont(TelnetOption.BINARY)) {\n                            __receiveState = _STATE_CR;\n                        } else {\n                            __receiveState = _STATE_DATA;\n                        }\n                    }\n                } else {\n                    __receiveState = _STATE_DATA;\n                }\n                break;\n\n            case _STATE_IAC:\n                switch (ch) {\n                case TelnetCommand.WILL:\n                    __receiveState = _STATE_WILL;\n                    continue;\n                case TelnetCommand.WONT:\n                    __receiveState = _STATE_WONT;\n                    continue;\n                case TelnetCommand.DO:\n                    __receiveState = _STATE_DO;\n                    continue;\n                case TelnetCommand.DONT:\n                    __receiveState = _STATE_DONT;\n                    continue;\n                case TelnetCommand.SB:\n                    __suboption_count = 0;\n                    __receiveState = _STATE_SB;\n                    continue;\n                case TelnetCommand.IAC:\n                    __receiveState = _STATE_DATA;\n                    break;\n                case TelnetCommand.SE:\n                    __receiveState = _STATE_DATA;\n                    continue;\n                default:\n                    __receiveState = _STATE_DATA;\n                    __client._processCommand(ch);\n                    continue;\n                }\n                break;\n                \n            case _STATE_WILL:\n                synchronized (__client) {\n                    __client._processWill(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_WONT:\n                synchronized (__client) {\n                    __client._processWont(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_DO:\n                synchronized (__client) {\n                    __client._processDo(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_DONT:\n                synchronized (__client) {\n                    __client._processDont(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_SB:\n                switch (ch) {\n                case TelnetCommand.IAC:\n                    __receiveState = _STATE_IAC_SB;\n                    continue;\n                default:\n                    if (__suboption_count < __suboption.length) {\n                        __suboption[__suboption_count++] = ch;\n                    }\n                    break;\n                }\n                __receiveState = _STATE_SB;\n                continue;\n                \n            case _STATE_IAC_SB:\n                switch (ch) {\n                case TelnetCommand.SE:\n                    synchronized (__client) {\n                        __client._processSuboption(__suboption, __suboption_count);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                case TelnetCommand.IAC:\n                    if (__suboption_count < __suboption.length) {\n                        __suboption[__suboption_count++] = ch;\n                    }\n                    break;\n                default:\n                    break;\n                }\n                __receiveState = _STATE_SB;\n                continue;\n            }\n\n            break;\n        }\n\n        return ch;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "101", "src_id": "M8", "code": "\n    private static String formatFileSize(long size) {\n        String hrSize;\n        double b = size;\n        double k = size / 1024.0;\n        double m = k / 1024.0;\n        double g = m / 1024.0;\n        double t = g / 1024.0;\n\n        DecimalFormat dec = new DecimalFormat(\"0.00\");\n        if (t > 1) {\n            hrSize = dec.format(t).concat(\" TB\");\n        } else if (g > 1) {\n            hrSize = dec.format(g).concat(\" GB\");\n        } else if (m > 1) {\n            hrSize = dec.format(m).concat(\" MB\");\n        } else if (k > 1) {\n            hrSize = dec.format(k).concat(\" KB\");\n        } else {\n            hrSize = dec.format(b).concat(\" Bytes\");\n        }\n        return hrSize;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "102", "src_id": "M790", "code": "\n        @Override\n        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n            if (className == null) {\n                return null;\n            }\n\n            className = className.replace('/', '.');\n            List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n            ListIterator<RetransformEntry> listIterator = allRetransformEntries\n                    .listIterator(allRetransformEntries.size());\n                    \n            while (listIterator.hasPrevious()) {\n                RetransformEntry retransformEntry = listIterator.previous();\n                int id = retransformEntry.getId();\n                boolean updateFlag = false;\n                \n                if (className.equals(retransformEntry.getClassName())) {\n                    if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n                        updateFlag = isLoaderMatch(retransformEntry, loader);\n                    } else {\n                        updateFlag = true;\n                    }\n                }\n\n                if (updateFlag) {\n                    logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n                            className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n                    retransformEntry.incTransformCount();\n                    return retransformEntry.getBytes();\n                }\n            }\n            return null;\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "103", "src_id": "M716", "code": "\n    public static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n        table.row(\"IS-RETURN\", Boolean.FALSE.toString());\n        table.row(\"IS-EXCEPTION\", Boolean.TRUE.toString());\n\n        Throwable cause;\n        Throwable t = (Throwable) throwableVO.getObject();\n        if (t instanceof InvocationTargetException) {\n            cause = t.getCause();\n        } else {\n            cause = t;\n        }\n\n        if (throwableVO.needExpand()) {\n            table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n        } else {\n            StringWriter stringWriter = new StringWriter();\n            try (PrintWriter printWriter = new PrintWriter(stringWriter)) {\n                cause.printStackTrace(printWriter);\n                table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "104", "src_id": "M602", "code": "\n    private AsyncProfiler profilerInstance() {\n        if (profiler != null) {\n            return profiler;\n        }\n\n        if (ProfilerAction.load.toString().equals(action)) {\n            profiler = AsyncProfiler.getInstance(this.actionArg);\n        }\n\n        if (libPath != null) {\n            try {\n                File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n                try (FileOutputStream tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n                     FileInputStream libInputStream = new FileInputStream(libPath)) {\n                    IOUtils.copy(libInputStream, tmpLibOutputStream);\n                }\n                libPath = tmpLibFile.getAbsolutePath();\n                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n            } catch (Throwable e) {\n                logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n            }\n            profiler = AsyncProfiler.getInstance(libPath);\n        } else {\n            if (OSUtils.isLinux() || OSUtils.isMac()) {\n                throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n            } else {\n                throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n            }\n        }\n        return profiler;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "105", "src_id": "M1277", "code": "\n    public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n        Map<String, String> output = new HashMap<>(input.size());\n        for (Map.Entry<String, Object> entry : input.entrySet()) {\n            String key = entry.getKey();\n            Object obj = entry.getValue();\n            if (key == null || obj == null) {\n                throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n            }\n            String str;\n            if (obj instanceof byte[]) {\n                str = SafeEncoder.encode((byte[]) obj);\n            } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n                redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n                str = geo.getLongitude() + \",\" + geo.getLatitude();\n            } else if (obj instanceof String) {\n                str = stringEscape ? escape((String) obj) : (String) obj;\n            } else {\n                str = String.valueOf(obj);\n            }\n            output.put(key, str);\n        }\n        return output;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "106", "src_id": "M902", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (retentionPeriod != null) {\n            args.add(RETENTION).add(toByteArray(retentionPeriod));\n        }\n\n        if (encoding != null) {\n            args.add(ENCODING).add(encoding);\n        }\n\n        if (chunkSize != null) {\n            args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n        }\n\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n\n        if (ignore) {\n            args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n        }\n\n        if (labels != null) {\n            args.add(LABELS);\n            labels.entrySet().forEach((entry) -> {\n                args.add(entry.getKey()).add(entry.getValue());\n            });\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "107", "src_id": "M1131", "code": "\n    private static Object process(final RedisInputStream is) {\n        final byte b = is.readByte();\n        switch (b) {\n            case PLUS_BYTE:\n                return is.readLineBytes();\n            case DOLLAR_BYTE:\n            case EQUAL_BYTE:\n                return processBulkReply(is);\n            case ASTERISK_BYTE:\n                return processMultiBulkReply(is);\n            case UNDERSCORE_BYTE:\n                return is.readNullCrLf();\n            case HASH_BYTE:\n                return is.readBooleanCrLf();\n            case COLON_BYTE:\n                return is.readLongCrLf();\n            case COMMA_BYTE:\n                return is.readDoubleCrLf();\n            case LEFT_BRACE_BYTE:\n                return is.readBigIntegerCrLf();\n            case PERCENT_BYTE:\n                return processMapKeyValueReply(is);\n            case TILDE_BYTE:\n            case GREATER_THAN_BYTE:\n                return processMultiBulkReply(is);\n            case MINUS_BYTE:\n                processError(is);\n                return null;\n            default:\n                throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "108", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n        List list = (List) data;\n        if (list == null || list.isEmpty()) {\n            return null;\n        }\n\n        if (list.get(0) instanceof KeyValue) {\n            Object resultsData = null;\n            Object profileData = null;\n\n            for (KeyValue keyValue : (List<KeyValue>) data) {\n                String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n                switch (keyStr) {\n                    case PROFILE_STR_REDIS7:\n                    case PROFILE_STR_REDIS8:\n                        profileData = keyValue.getValue();\n                        break;\n                    case RESULTS_STR_REDIS7:\n                        resultsData = data;\n                        break;\n                    case RESULTS_STR_REDIS8:\n                        resultsData = keyValue.getValue();\n                        break;\n                }\n            }\n\n            assert resultsData != null : \"Could not detect Results data.\";\n            assert profileData != null : \"Could not detect Profile data.\";\n            return KeyValue.of(\n                resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData)\n            );\n        }\n\n        return KeyValue.of(\n            resultsBuilder.build(list.get(0)),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1))\n        );\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "109", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "110", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n        List<KeyValue> list = (List<KeyValue>) data;\n        Map<String, Object> properties = new HashMap<>();\n        Map<String, String> labels = null;\n        Map<String, Rule> rules = null;\n        List<Map<String, Object>> chunks = null;\n\n        for (KeyValue propertyValue : list) {\n            String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n            Object value = propertyValue.getValue();\n            if (value instanceof List) {\n                switch (prop) {\n                    case LABELS_PROPERTY:\n                        labels = BuilderFactory.STRING_MAP.build(value);\n                        value = labels;\n                        break;\n                    case RULES_PROPERTY:\n                        List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                        Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n                        rules = new HashMap<>(rulesDataList.size());\n                        for (KeyValue rkv : rulesDataList) {\n                            String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                            List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                            rulesValueMap.put(ruleName, ruleValueList);\n                            rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                        }\n                        value = rulesValueMap;\n                        break;\n                    case CHUNKS_PROPERTY:\n                        List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                        List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n                        chunks = new ArrayList<>(chunksDataList.size());\n                        for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                            Map<String, Object> chunk = chunkDataAsList.stream()\n                                .collect(Collectors.toMap(\n                                    kv -> BuilderFactory.STRING.build(kv.getKey()),\n                                    kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())\n                                ));\n                            chunksValueList.add(chunk);\n                            chunks.add(chunk);\n                        }\n                        value = chunksValueList;\n                        break;\n                    default:\n                        value = SafeEncoder.encodeObject(value);\n                        break;\n                }\n            } else if (value instanceof byte[]) {\n                value = BuilderFactory.STRING.build(value);\n                if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                    try {\n                        value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                    } catch (Exception e) {\n                        // Ignore\n                    }\n                }\n            }\n            properties.put(prop, value);\n        }\n\n        return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "111", "src_id": "M897", "code": "\n    @Override\n    public void addParams(CommandArguments args) {\n        if (retentionPeriod != null) {\n            args.add(RETENTION).add(toByteArray(retentionPeriod));\n        }\n\n        if (encoding != null) {\n            args.add(ENCODING).add(encoding);\n        }\n\n        if (chunkSize != null) {\n            args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n        }\n\n        if (duplicatePolicy != null) {\n            args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n        }\n\n        if (onDuplicate != null) {\n            args.add(ON_DUPLICATE).add(onDuplicate);\n        }\n\n        if (ignore) {\n            args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n        }\n\n        if (labels != null) {\n            args.add(LABELS);\n            labels.entrySet().forEach((entry) -> {\n                args.add(entry.getKey()).add(entry.getValue());\n            });\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "112", "src_id": "M1213", "code": "\n    @Override\n    public Connection getConnection() {\n        List<ConnectionPool> pools = getShuffledNodesPool();\n        JedisException suppressed = null;\n\n        for (ConnectionPool pool : pools) {\n            Connection jedis = null;\n            try {\n                jedis = pool.getResource();\n                if (jedis == null) {\n                    continue;\n                }\n\n                jedis.ping();\n                return jedis;\n\n            } catch (JedisException ex) {\n                if (suppressed == null) {\n                    suppressed = ex;\n                }\n                if (jedis != null) {\n                    jedis.close();\n                }\n            }\n        }\n\n        JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n        if (suppressed != null) {\n            noReachableNode.addSuppressed(suppressed);\n        }\n        throw noReachableNode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "113", "src_id": "M9", "code": "\n    @Override\n    public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n        lock.lock();\n        try {\n            entry = putIntoStore(cacheKey, entry);\n            EvictionPolicy policy = getEvictionPolicy();\n            policy.touch(cacheKey);\n            CacheKey evictedKey = policy.evictNext();\n            if (evictedKey != null) {\n                delete(evictedKey);\n                stats.evict();\n            }\n            for (Object redisKey : cacheKey.getRedisKeys()) {\n                ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n                if (redisKeysToCacheKeys.containsKey(mapKey)) {\n                    redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n                } else {\n                    Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n                    set.add(cacheKey);\n                    redisKeysToCacheKeys.put(mapKey, set);\n                }\n            }\n            stats.load();\n            return entry;\n        } finally {\n            lock.unlock();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "114", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n        if (data == null) {\n            return null;\n        }\n        String str = STRING.build(data);\n        switch (str) {\n            case \"null\":\n                return null;\n            case \"boolean\":\n                return boolean.class;\n            case \"integer\":\n                return int.class;\n            case \"number\":\n                return float.class;\n            case \"string\":\n                return String.class;\n            case \"object\":\n                return Object.class;\n            case \"array\":\n                return List.class;\n            default:\n                throw new JedisException(\"Unknown type: \" + str);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "115", "src_id": "M1277", "code": "\npublic static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<String, String>(input.size());\n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n        String key = entry.getKey();\n        Object obj = entry.getValue();\n        if (key == null || obj == null) {\n            throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n        }\n        String str;\n        if (obj instanceof byte[]) {\n            str = SafeEncoder.encode((byte[]) obj);\n        } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n            redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n            str = geo.getLongitude() + \",\" + geo.getLatitude();\n        } else if (obj instanceof String) {\n            str = stringEscape ? escape((String) obj) : (String) obj;\n        } else {\n            str = String.valueOf(obj);\n        }\n        output.put(key, str);\n    }\n    return output;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "116", "src_id": "M902", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n        args.add(LABELS);\n        labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "117", "src_id": "M1131", "code": "\nprivate static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    switch (b) {\n        case PLUS_BYTE:\n            return is.readLineBytes();\n        case DOLLAR_BYTE:\n        case EQUAL_BYTE:\n            return processBulkReply(is);\n        case ASTERISK_BYTE:\n            return processMultiBulkReply(is);\n        case UNDERSCORE_BYTE:\n            return is.readNullCrLf();\n        case HASH_BYTE:\n            return is.readBooleanCrLf();\n        case COLON_BYTE:\n            return is.readLongCrLf();\n        case COMMA_BYTE:\n            return is.readDoubleCrLf();\n        case LEFT_BRACE_BYTE:\n            return is.readBigIntegerCrLf();\n        case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n            return processMapKeyValueReply(is);\n        case TILDE_BYTE: // TODO:\n            return processMultiBulkReply(is);\n        case GREATER_THAN_BYTE:\n            return processMultiBulkReply(is);\n        case MINUS_BYTE:\n            processError(is);\n            return null;\n        // TODO: Blob error '!'\n        default:\n            throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "118", "src_id": "M1057", "code": "\n@Override\npublic Map.Entry<T, ProfilingInfo> build(Object data) {\n    List list = (List) data;\n    if (list == null || list.isEmpty()) {\n        return null;\n    }\n\n    if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n            String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n            switch (keyStr) {\n                case PROFILE_STR_REDIS7:\n                case PROFILE_STR_REDIS8:\n                    profileData = keyValue.getValue();\n                    break;\n                case RESULTS_STR_REDIS7:\n                    resultsData = data;\n                    break;\n                case RESULTS_STR_REDIS8:\n                    resultsData = keyValue.getValue();\n                    break;\n            }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n    }\n\n    return KeyValue.of(resultsBuilder.build(list.get(0)),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "119", "src_id": "M1229", "code": "\npublic SSLContext createSslContext() throws IOException, GeneralSecurityException {\n\n    KeyManager[] keyManagers = null;\n    TrustManager[] trustManagers = null;\n\n    if (sslVerifyMode == SslVerifyMode.FULL) {\n        this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n    } else if (sslVerifyMode == SslVerifyMode.CA) {\n        this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n    } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n        trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n    }\n\n    if (keystoreResource != null) {\n\n        KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n        try (InputStream keystoreStream = keystoreResource.get()) {\n            keyStore.load(keystoreStream, keystorePassword);\n        }\n\n        KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n        keyManagerFactory.init(keyStore, keystorePassword);\n        keyManagers = keyManagerFactory.getKeyManagers();\n    }\n\n    if (trustManagers == null && truststoreResource != null) {\n\n        KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n        try (InputStream truststoreStream = truststoreResource.get()) {\n            trustStore.load(truststoreStream, truststorePassword);\n        }\n\n        TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n        trustManagerFactory.init(trustStore);\n        trustManagers = trustManagerFactory.getTrustManagers();\n    }\n\n    SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n    sslContext.init(keyManagers, trustManagers, null);\n\n    return sslContext;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "120", "src_id": "M894", "code": "\n@Override\npublic TSInfo build(Object data) {\n    List<KeyValue> list = (List<KeyValue>) data;\n    Map<String, Object> properties = new HashMap<String, Object>();\n    Map<String, String> labels = null;\n    Map<String, Rule> rules = null;\n    List<Map<String, Object>> chunks = null;\n\n    for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        if (value instanceof List) {\n            switch (prop) {\n                case LABELS_PROPERTY:\n                    labels = BuilderFactory.STRING_MAP.build(value);\n                    value = labels;\n                    break;\n                case RULES_PROPERTY:\n                    List<KeyValue> rulesDataList = (List<KeyValue>) value;\n                    Map<String, List<Object>> rulesValueMap = new HashMap<String, List<Object>>(rulesDataList.size(), 1f);\n                    rules = new HashMap<String, Rule>(rulesDataList.size());\n                    for (KeyValue rkv : rulesDataList) {\n                        String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                        List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                        rulesValueMap.put(ruleName, ruleValueList);\n                        rules.put(ruleName, new Rule(ruleName, ruleValueList));\n                    }\n                    value = rulesValueMap;\n                    break;\n                case CHUNKS_PROPERTY:\n                    List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n                    List<Map<String, Object>> chunksValueList = new ArrayList<Map<String, Object>>(chunksDataList.size());\n                    chunks = new ArrayList<Map<String, Object>>(chunksDataList.size());\n                    for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                        Map<String, Object> chunk = chunkDataAsList.stream()\n                                .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                        chunksValueList.add(chunk);\n                        chunks.add(chunk);\n                    }\n                    value = chunksValueList;\n                    break;\n                default:\n                    value = SafeEncoder.encodeObject(value);\n                    break;\n            }\n        } else if (value instanceof byte[]) {\n            value = BuilderFactory.STRING.build(value);\n            if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n                try {\n                    value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n                } catch (Exception e) { }\n            }\n        }\n        properties.put(prop, value);\n    }\n\n    return new TSInfo(properties, labels, rules, chunks);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "121", "src_id": "M897", "code": "\n@Override\npublic void addParams(CommandArguments args) {\n\n    if (retentionPeriod != null) {\n        args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n        args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n        args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n        args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n        args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n        args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n        args.add(LABELS);\n        labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "122", "src_id": "M1213", "code": "\n@Override\npublic Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n        Connection jedis = null;\n        try {\n            jedis = pool.getResource();\n            if (jedis == null) {\n                continue;\n            }\n\n            jedis.ping();\n            return jedis;\n\n        } catch (JedisException ex) {\n            if (suppressed == null) { // remembering first suppressed exception\n                suppressed = ex;\n            }\n            if (jedis != null) {\n                jedis.close();\n            }\n        }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n        noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "123", "src_id": "M9", "code": "\n@Override\npublic CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n        entry = putIntoStore(cacheKey, entry);\n        EvictionPolicy policy = getEvictionPolicy();\n        policy.touch(cacheKey);\n        CacheKey evictedKey = policy.evictNext();\n        if (evictedKey != null) {\n            delete(evictedKey);\n            stats.evict();\n        }\n        for (Object redisKey : cacheKey.getRedisKeys()) {\n            ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n            if (redisKeysToCacheKeys.containsKey(mapKey)) {\n                redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n            } else {\n                Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n                set.add(cacheKey);\n                redisKeysToCacheKeys.put(mapKey, set);\n            }\n        }\n        stats.load();\n        return entry;\n    } finally {\n        lock.unlock();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "124", "src_id": "M1105", "code": "\n@Override\npublic Class<?> build(Object data) {\n    if (data == null) {\n        return null;\n    }\n    String str = STRING.build(data);\n    switch (str) {\n        case \"null\":\n            return null;\n        case \"boolean\":\n            return boolean.class;\n        case \"integer\":\n            return int.class;\n        case \"number\":\n            return float.class;\n        case \"string\":\n            return String.class;\n        case \"object\":\n            return Object.class;\n        case \"array\":\n            return List.class;\n        default:\n            throw new JedisException(\"Unknown type: \" + str);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "125", "src_id": "M342", "code": "\nprivate static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n    if (emlBytes == null || emlBytes.length == 0) {\n        throw new IllegalArgumentException(\"EML file is empty or null\");\n    }\n    String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n    String subject = extractBasicHeader(emlContent, \"Subject:\");\n    String from = extractBasicHeader(emlContent, \"From:\");\n    String to = extractBasicHeader(emlContent, \"To:\");\n    String cc = extractBasicHeader(emlContent, \"Cc:\");\n    String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n    String date = extractBasicHeader(emlContent, \"Date:\");\n    String htmlBody = extractHtmlBody(emlContent);\n    if (htmlBody == null) {\n        String textBody = extractTextBody(emlContent);\n        htmlBody = convertTextToHtml(textBody != null ? textBody : \"Email content could not be parsed\");\n    }\n    StringBuilder html = new StringBuilder();\n    html.append(\"<!DOCTYPE html>\\n\");\n    html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n    html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n    html.append(\"<style>\\n\");\n    appendEnhancedStyles(html);\n    html.append(\"</style>\\n\");\n    html.append(\"</head><body>\\n\");\n    html.append(\"<div class=\\\"email-container\\\">\\n\");\n    html.append(\"<div class=\\\"email-header\\\">\\n\");\n    html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n    html.append(\"<div class=\\\"email-meta\\\">\\n\");\n    html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n    html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n    if (request != null && request.isIncludeAllRecipients()) {\n        if (!cc.trim().isEmpty()) {\n            html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n        }\n        if (!bcc.trim().isEmpty()) {\n            html.append(\"<div><strong>BCC:</strong> \").append(escapeHtml(bcc)).append(\"</div>\\n\");\n        }\n    }\n    if (!date.trim().isEmpty()) {\n        html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n    }\n    html.append(\"</div></div>\\n\");\n    html.append(\"<div class=\\\"email-body\\\">\\n\");\n    html.append(processEmailHtmlBody(htmlBody));\n    html.append(\"</div>\\n\");\n    String attachmentInfo = extractAttachmentInfo(emlContent);\n    if (!attachmentInfo.isEmpty()) {\n        html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n        html.append(\"<h3>Attachments</h3>\\n\");\n        html.append(attachmentInfo);\n        if (request != null && request.isIncludeAttachments()) {\n            html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n            html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n            html.append(\"</div>\\n\");\n        } else {\n            html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n            html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n        html.append(\"</div>\\n\");\n    }\n    assert request != null;\n    if (request.getFileInput().isEmpty()) {\n        html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n        html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n        html.append(\"</div>\\n\");\n    }\n    html.append(\"</div>\\n\");\n    html.append(\"</body></html>\");\n    return html.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "126", "src_id": "M371", "code": "\nprivate static boolean isValidJakartaMailMultipart(Object multipart) {\n    if (multipart == null) return false;\n    try {\n        Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n        if (!multipartInterface.isInstance(multipart)) {\n            return false;\n        }\n        try {\n            Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n            if (mimeMultipartClass.isInstance(multipart)) {\n                log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                return true;\n            }\n        } catch (ClassNotFoundException e) {\n            log.debug(\"MimeMultipart not available, using base Multipart interface\");\n        }\n        return true;\n    } catch (ClassNotFoundException e) {\n        log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n        return false;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "127", "src_id": "M348", "code": "\nprivate static String extractBasicHeader(String emlContent, String headerName) {\n    try {\n        String[] lines = emlContent.split(\"\\r?\\n\");\n        for (int i = 0; i < lines.length; i++) {\n            String line = lines[i];\n            if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                for (int j = i + 1; j < lines.length; j++) {\n                    if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                        value.append(\" \").append(lines[j].trim());\n                    } else {\n                        break;\n                    }\n                }\n                return safeMimeDecode(value.toString());\n            }\n            if (line.trim().isEmpty()) break;\n        }\n    } catch (RuntimeException e) {\n        log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n    }\n    return \"\";\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "128", "src_id": "M364", "code": "\nprivate static void addAttachmentAnnotationsToDocument(PDDocument document, List<EmailAttachment> attachments) throws IOException {\n    if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n        return;\n    }\n    AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n    finder.setSortByPosition(true);\n    finder.getText(document);\n    List<MarkerPosition> markerPositions = finder.getPositions();\n    if (markerPositions.size() != attachments.size()) {\n        log.warn(\"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\", markerPositions.size(), attachments.size());\n    }\n    int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n    for (int i = 0; i < annotationsToAdd; i++) {\n        MarkerPosition position = markerPositions.get(i);\n        EmailAttachment attachment = attachments.get(i);\n        if (attachment.getEmbeddedFilename() != null) {\n            PDPage page = document.getPage(position.getPageIndex());\n            addAttachmentAnnotationToPage(document, page, attachment, position.getX(), position.getY());\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "129", "src_id": "M31", "code": "\nprivate JsonNode validateLicense(String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n    String requestBody = String.format(\"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}\", licenseKey, machineFingerprint);\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n        .header(\"Content-Type\", \"application/vnd.api+json\")\n        .header(\"Accept\", \"application/vnd.api+json\")\n        .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n        .build();\n\n    HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n    JsonNode jsonResponse = objectMapper.readTree(response.body());\n    \n    if (response.statusCode() != 200) {\n        log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        return jsonResponse;\n    }\n\n    JsonNode metaNode = jsonResponse.path(\"meta\");\n    boolean isValid = metaNode.path(\"valid\").asBoolean();\n    String detail = metaNode.path(\"detail\").asText();\n    String code = metaNode.path(\"code\").asText();\n\n    log.info(\"License validity: {}\", isValid);\n    log.info(\"Validation detail: {}\", detail);\n    log.info(\"Validation code: {}\", code);\n\n    JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n    if (!licenseAttrs.isMissingNode()) {\n        context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n        context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n        log.info(\"License floating (from license): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n    }\n\n    JsonNode includedNode = jsonResponse.path(\"included\");\n    JsonNode policyNode = null;\n    if (includedNode.isArray()) {\n        for (JsonNode node : includedNode) {\n            if (\"policies\".equals(node.path(\"type\").asText())) {\n                policyNode = node;\n                break;\n            }\n        }\n    }\n\n    if (policyNode != null) {\n        boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n        int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n        if (policyFloating) {\n            context.isFloatingLicense = true;\n            context.maxMachines = policyMaxMachines;\n        }\n        log.info(\"License floating (from policy): {}, maxMachines: {}\", context.isFloatingLicense, context.maxMachines);\n    }\n\n    int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n    applicationProperties.getPremium().setMaxUsers(users);\n\n    context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"isEnterprise\").asBoolean(false);\n    log.debug(applicationProperties.toString());\n    \n    return jsonResponse;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "130", "src_id": "M488", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n@Operation(summary = \"Convert a file to a PDF using LibreOffice\", description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO\")\npublic ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n    MultipartFile inputFile = generalFile.getFileInput();\n    File file = null;\n    try {\n        file = convertToPdf(inputFile);\n        PDDocument doc = pdfDocumentFactory.load(file);\n        return WebResponseUtils.pdfDocToWebResponse(doc, Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\");\n    } finally {\n        if (file != null && !file.delete()) log.error(\"Failed to delete temp file\");\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "131", "src_id": "M625", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n@Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\npublic ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n    MultipartFile inputFile = request.getFileInput();\n    try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, true)) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n        PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n        ObjectNode metadata = addMetadata(objectMapper, info);\n        jsonOutput.set(\"Metadata\", metadata);\n\n        ObjectNode basicInfo = createBasicInfo(objectMapper, inputFile, pdfBoxDoc);\n        ObjectNode docInfoNode = createDocInfo(objectMapper, pdfBoxDoc, info);\n        ObjectNode compliancy = createCompliancyInfo(pdfBoxDoc);\n        ObjectNode encryption = createEncryptionInfo(pdfBoxDoc);\n        ObjectNode permissionsNode = objectMapper.createObjectNode();\n        setNodePermissions(pdfBoxDoc, permissionsNode);\n        ObjectNode other = createOtherInfo(objectMapper, pdfBoxDoc);\n\n        jsonOutput.set(\"BasicInfo\", basicInfo);\n        jsonOutput.set(\"DocumentInfo\", docInfoNode);\n        jsonOutput.set(\"Compliancy\", compliancy);\n        jsonOutput.set(\"Encryption\", encryption);\n        jsonOutput.set(\"Permissions\", permissionsNode);\n        jsonOutput.set(\"Other\", other);\n\n        String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n        return WebResponseUtils.bytesToWebResponse(jsonString.getBytes(StandardCharsets.UTF_8), \"response.json\", MediaType.APPLICATION_JSON);\n    } catch (Exception e) {\n        log.error(\"Error processing PDF info\", e);\n        return null;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "132", "src_id": "M24", "code": "\nprivate boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n    try {\n        String encodedPayload = licenseFile.replace(CERT_PREFIX, \"\").replace(CERT_SUFFIX, \"\").replaceAll(\"\\\\r?\\\\n\", \"\");\n        byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n        String payload = new String(payloadBytes);\n        log.info(\"Decoded certificate payload: {}\", payload);\n\n        JSONObject attrs = new JSONObject(payload);\n        String encryptedData = attrs.getString(\"enc\");\n        String encodedSignature = attrs.getString(\"sig\");\n        String algorithm = attrs.getString(\"alg\");\n\n        if (!\"base64+ed25519\".equals(algorithm)) {\n            log.error(\"Unsupported algorithm: {}. Only base64+ed25519 supported\", algorithm);\n            return false;\n        }\n\n        if (!verifyEd25519Signature(encryptedData, encodedSignature)) {\n            log.error(\"License file signature invalid\");\n            return false;\n        }\n\n        String decodedData = new String(Base64.getDecoder().decode(encryptedData));\n        return processCertificateData(decodedData, context);\n    } catch (JSONException e) {\n        log.error(\"Failed parsing license file\", e);\n        return false;\n    } catch (IllegalArgumentException e) {\n        log.error(\"Failed decoding license data\", e);\n        return false;\n    } catch (Exception e) {\n        log.error(\"Error verifying certificate\", e);\n        return false;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "133", "src_id": "M403", "code": "\nprivate static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n    try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager);\n         ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n        \n        ZipEntry entry;\n        while ((entry = zipIn.getNextEntry()) != null) {\n            Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n            if (entry.isDirectory()) continue;\n            \n            Files.createDirectories(filePath.getParent());\n            String name = entry.getName().toLowerCase();\n            if (name.endsWith(\".html\") || name.endsWith(\".htm\")) {\n                String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                Files.write(filePath, sanitizeHtmlContent(content, disableSanitize).getBytes(StandardCharsets.UTF_8));\n            } else {\n                Files.copy(zipIn, filePath);\n            }\n            zipIn.closeEntry();\n        }\n        zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "134", "src_id": "M317", "code": "\npublic static void addImageToDocument(PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate) throws IOException {\n    PDRectangle pageSize = PDRectangle.A4;\n    if (autoRotate && image.getWidth() > image.getHeight()) {\n        pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n    }\n    if (\"fitDocumentToImage\".equals(fitOption)) {\n        pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n    }\n\n    PDPage page = new PDPage(pageSize);\n    doc.addPage(page);\n    float pageWidth = page.getMediaBox().getWidth();\n    float pageHeight = page.getMediaBox().getHeight();\n\n    try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n        if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n            contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n        } else if (\"maintainAspectRatio\".equals(fitOption)) {\n            float imgRatio = (float) image.getWidth() / image.getHeight();\n            float pageRatio = pageWidth / pageHeight;\n            float scaleFactor = imgRatio > pageRatio ? pageWidth / image.getWidth() : pageHeight / image.getHeight();\n            float xPos = (pageWidth - image.getWidth() * scaleFactor) / 2;\n            float yPos = (pageHeight - image.getHeight() * scaleFactor) / 2;\n            contentStream.drawImage(image, xPos, yPos, image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n        }\n    } catch (IOException e) {\n        log.error(\"Error adding image\", e);\n        throw e;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "135", "src_id": "M307", "code": "\npublic static String generateMachineFingerprint() {\n    try {\n        StringBuilder sb = new StringBuilder();\n        Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n        while (networks.hasMoreElements()) {\n            NetworkInterface net = networks.nextElement();\n            byte[] mac = net.getHardwareAddress();\n            if (mac == null) continue;\n            for (byte b : mac) sb.append(String.format(\"%02X\", b));\n            break;\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n        StringBuilder fingerprint = new StringBuilder();\n        for (byte b : hash) fingerprint.append(String.format(\"%02x\", b));\n        return fingerprint.toString();\n    } catch (Exception e) {\n        return \"GenericID\";\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "136", "src_id": "M135", "code": "\nprivate void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n    pdf.getDocumentInformation().setTitle(pdfMetadata.getTitle());\n    pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n    pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n    pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n    pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n    String author = pdfMetadata.getAuthor();\n    if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata() && runningProOrHigher) {\n        author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n        if (userService != null) author = author.replace(\"username\", userService.getCurrentUsername());\n    }\n    pdf.getDocumentInformation().setAuthor(author);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "137", "src_id": "M128", "code": "\n@Bean(name = \"machineType\")\npublic String determineMachineType() {\n    try {\n        if (System.getenv(\"KUBERNETES_SERVICE_HOST\") != null) return \"Kubernetes\";\n        if (runningInDocker()) return \"Docker\";\n        if (\"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"))) {\n            String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n            if (os.contains(\"win\")) return \"Client-windows\";\n            if (os.contains(\"mac\")) return \"Client-mac\";\n            return \"Client-unix\";\n        }\n        return \"Server-jar\";\n    } catch (Exception e) {\n        return \"Unknown\";\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "138", "src_id": "M101", "code": "\nprivate void processRequest(int limitPerDay, String identifier, Map<String, Bucket> buckets, HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws IOException, ServletException {\n    Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n    ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n    \n    if (probe.isConsumed()) {\n        response.setHeader(\"X-Rate-Limit-Remaining\", Long.toString(probe.getRemainingTokens()));\n        filterChain.doFilter(request, response);\n    } else {\n        response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n        response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Long.toString(probe.getNanosToWaitForRefill() / 1_000_000_000));\n        response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "139", "src_id": "M475", "code": "\n@Override\npublic void draw(CommandProcess process, JvmModel result) {\n    TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n\n    for (Map.Entry<String, List<JvmItemVO>> entry : result.getJvmInfo().entrySet()) {\n        String group = entry.getKey();\n        List<JvmItemVO> items = entry.getValue();\n\n        table.row(true, label(group).style(Decoration.bold.bold()));\n        for (JvmItemVO item : items) {\n            String valueStr;\n            if (item.getValue() instanceof Map \n                    && item.getName().endsWith(\"MEMORY-USAGE\")) {\n                valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n            } else {\n                valueStr = renderItemValue(item.getValue());\n            }\n            if (item.getDesc() != null) {\n                table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n            } else {\n                table.row(item.getName(), valueStr);\n            }\n        }\n        table.row(\"\", \"\");\n    }\n\n    process.write(RenderUtil.render(table, process.width()));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "140", "src_id": "M535", "code": "\npublic static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n    final StringBuilder infoSB = new StringBuilder();\n    List<String> classDumpFiles = affectVO.getClassDumpFiles();\n    if (classDumpFiles != null) {\n        for (String classDumpFile : classDumpFiles) {\n            infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n        }\n    }\n\n    List<String> methods = affectVO.getMethods();\n    if (methods != null) {\n        for (String method : methods) {\n            infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n        }\n    }\n\n    infoSB.append(format(\n            \"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\",\n            affectVO.getClassCount(),\n            affectVO.getMethodCount(),\n            affectVO.getCost(),\n            affectVO.getListenerId()));\n    if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n        infoSB.append(\"\\n\" + affectVO.getOverLimitMsg());\n    }\n    if (affectVO.getThrowable() != null) {\n        infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n    }\n    infoSB.append(\"\\n\");\n\n    return infoSB.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "141", "src_id": "M753", "code": "\npublic List<ThreadVO> sample(Collection<ThreadVO> originThreads) {\n    List<ThreadVO> threads = new ArrayList<>(originThreads);\n\n    // Sample CPU\n    if (lastCpuTimes.isEmpty()) {\n        lastSampleTimeNanos = System.nanoTime();\n        for (ThreadVO thread : threads) {\n            if (thread.getId() > 0) {\n                long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                lastCpuTimes.put(thread, cpu);\n                thread.setTime(cpu / 1000000);\n            }\n        }\n\n        // Add internal threads\n        Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n        if (internalThreadCpuTimes != null) {\n            for (Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n                String key = entry.getKey();\n                ThreadVO thread = createThreadVO(key);\n                thread.setTime(entry.getValue() / 1000000);\n                threads.add(thread);\n                lastCpuTimes.put(thread, entry.getValue());\n            }\n        }\n\n        // Sort by time\n        threads.sort((o1, o2) -> Long.compare(o2.getTime(), o1.getTime()));\n        return threads;\n    }\n\n    // Resample\n    long newSampleTimeNanos = System.nanoTime();\n    Map<ThreadVO, Long> newCpuTimes = new HashMap<>(threads.size());\n    for (ThreadVO thread : threads) {\n        if (thread.getId() > 0) {\n            long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n            newCpuTimes.put(thread, cpu);\n        }\n    }\n    // Internal threads\n    Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n    if (newInternalThreadCpuTimes != null) {\n        for (Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n            ThreadVO threadVO = createThreadVO(entry.getKey());\n            threads.add(threadVO);\n            newCpuTimes.put(threadVO, entry.getValue());\n        }\n    }\n\n    // Compute delta time\n    final Map<ThreadVO, Long> deltas = new HashMap<>(threads.size());\n    for (ThreadVO thread : newCpuTimes.keySet()) {\n        Long t = lastCpuTimes.get(thread);\n        if (t == null) {\n            t = 0L;\n        }\n        long time1 = t;\n        long time2 = newCpuTimes.get(thread);\n        if (time1 == -1) {\n            time1 = time2;\n        } else if (time2 == -1) {\n            time2 = time1;\n        }\n        long delta = time2 - time1;\n        deltas.put(thread, delta);\n    }\n\n    long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n\n    // Compute CPU usage\n    final Map<ThreadVO, Double> cpuUsages = new HashMap<>(threads.size());\n    for (ThreadVO thread : threads) {\n        double cpu = sampleIntervalNanos == 0 \n                ? 0 \n                : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0;\n        cpuUsages.put(thread, cpu);\n    }\n\n    // Sort by CPU time\n    threads.sort((o1, o2) -> Long.compare(deltas.get(o2), deltas.get(o1)));\n\n    for (ThreadVO thread : threads) {\n        // Nanos to mills\n        long timeMills = newCpuTimes.get(thread) / 1000000;\n        long deltaTime = deltas.get(thread) / 1000000;\n        double cpu = cpuUsages.get(thread);\n\n        thread.setCpu(cpu);\n        thread.setTime(timeMills);\n        thread.setDeltaTime(deltaTime);\n    }\n    lastCpuTimes = newCpuTimes;\n    lastSampleTimeNanos = newSampleTimeNanos;\n\n    return threads;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "142", "src_id": "M1131", "code": "\nprivate ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n    String commandLine = apiRequest.getCommand();\n    Map<String, Object> body = new TreeMap<>();\n    body.put(\"command\", commandLine);\n\n    ApiResponse response = new ApiResponse();\n    response.setSessionId(session.getSessionId())\n            .setBody(body);\n\n    if (!session.tryLock()) {\n        response.setState(ApiState.REFUSED)\n                .setMessage(\"Another command is executing.\");\n        return response;\n    }\n    int lock = session.getLock();\n    try {\n        Job foregroundJob = session.getForegroundJob();\n        if (foregroundJob != null) {\n            response.setState(ApiState.REFUSED)\n                    .setMessage(\"Another job is running.\");\n            logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n            return response;\n        }\n\n        // Create job\n        Job job = this.createJob(commandLine, session, session.getResultDistributor());\n        body.put(\"jobId\", job.id());\n        body.put(\"jobStatus\", job.status());\n        response.setState(ApiState.SCHEDULED);\n\n        // Add command before exec job\n        CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n        commandRequestModel.setJobId(job.id());\n        SharingResultDistributor resultDistributor = session.getResultDistributor();\n        if (resultDistributor != null) {\n            resultDistributor.appendResult(commandRequestModel);\n        }\n        session.setForegroundJob(job);\n        updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n\n        // Run job\n        job.run();\n\n        return response;\n    } catch (Throwable e) {\n        logger.error(\"Async exec command failed: {}, command: {}\", e.getMessage(), commandLine, e);\n        response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n        CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n        session.getResultDistributor().appendResult(commandRequestModel);\n        return response;\n    } finally {\n        if (session.getLock() == lock) {\n            session.unLock();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "143", "src_id": "M542", "code": "\nprivate String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n    StringBuilder sb = new StringBuilder(8192);\n\n    for (Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n        Map<String, Object> info = entry.getValue();\n\n        TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n        TableElement appendersTable = new TableElement().rightCellPadding(1);\n\n        Class<?> clazz = (Class<?>) info.get(LoggerHelper.clazz);\n        table.row(\n                label(LoggerHelper.name).style(Decoration.bold.bold()), \n                label(\"\" + info.get(LoggerHelper.name)))\n            .row(\n                label(LoggerHelper.clazz).style(Decoration.bold.bold()), \n                label(\"\" + clazz.getName()))\n            .row(\n                label(LoggerHelper.classLoader).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.classLoader)))\n            .row(\n                label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.classLoaderHash)))\n            .row(\n                label(LoggerHelper.level).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.level)));\n        if (info.get(LoggerHelper.effectiveLevel) != null) {\n            table.row(\n                label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n        }\n\n        if (info.get(LoggerHelper.config) != null) {\n            table.row(\n                label(LoggerHelper.config).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.config)));\n        }\n\n        table.row(\n                label(LoggerHelper.additivity).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.additivity)))\n            .row(\n                label(LoggerHelper.codeSource).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.codeSource)));\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> appenders = (List<Map<String, Object>>) info.get(LoggerHelper.appenders);\n        if (appenders != null && !appenders.isEmpty()) {\n            for (Map<String, Object> appenderInfo : appenders) {\n                Class<?> appenderClass = (Class<?>) appenderInfo.get(LoggerHelper.clazz);\n\n                appendersTable.row(\n                    label(LoggerHelper.name).style(Decoration.bold.bold()),\n                    label(\"\" + appenderInfo.get(LoggerHelper.name)));\n                appendersTable.row(\n                    label(LoggerHelper.clazz), \n                    label(\"\" + appenderClass.getName()));\n                appendersTable.row(\n                    label(LoggerHelper.classLoader), \n                    label(\"\" + info.get(LoggerHelper.classLoader)));\n                appendersTable.row(\n                    label(LoggerHelper.classLoaderHash),\n                    label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n                if (appenderInfo.get(LoggerHelper.file) != null) {\n                    appendersTable.row(\n                        label(LoggerHelper.file), \n                        label(\"\" + appenderInfo.get(LoggerHelper.file)));\n                }\n                if (appenderInfo.get(LoggerHelper.target) != null) {\n                    appendersTable.row(\n                        label(LoggerHelper.target),\n                        label(\"\" + appenderInfo.get(LoggerHelper.target)));\n                }\n                if (appenderInfo.get(LoggerHelper.blocking) != null) {\n                    appendersTable.row(\n                        label(LoggerHelper.blocking),\n                        label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n                }\n                if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n                    appendersTable.row(\n                        label(LoggerHelper.appenderRef),\n                        label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n                }\n            }\n\n            table.row(\n                label(\"appenders\").style(Decoration.bold.bold()), \n                appendersTable);\n        }\n\n        sb.append(RenderUtil.render(table, width)).append('\\n');\n    }\n    return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "144", "src_id": "M15", "code": "\npublic static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {\n    // Start Java telnet client\n    URLClassLoader classLoader = new URLClassLoader(\n            new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n    Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n    Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n    // Redirect System.out/System.err\n    PrintStream originSysOut = System.out;\n    PrintStream originSysErr = System.err;\n    PrintStream newOut = new PrintStream(out);\n    PrintStream newErr = new PrintStream(out);\n\n    // Call TelnetConsole.process()\n    ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n    try {\n        System.setOut(newOut);\n        System.setErr(newErr);\n        Thread.currentThread().setContextClassLoader(classLoader);\n        return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});\n    } catch (Throwable e) {\n        // Handle connection and interrupted errors\n        e = e.getCause();\n        if (e instanceof IOException || e instanceof InterruptedException) {\n            return STATUS_ERROR;\n        } else {\n            // Log processing error\n            AnsiLog.error(\"process error: {}\", e.toString());\n            AnsiLog.error(e);\n            return STATUS_EXEC_ERROR;\n        }\n    } finally {\n        Thread.currentThread().setContextClassLoader(tccl);\n\n        // Reset System.out/System.err\n        System.setOut(originSysOut);\n        System.setErr(originSysErr);\n        // Flush output\n        newOut.flush();\n        newErr.flush();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "145", "src_id": "M1469", "code": "\npublic static FieldVO[] getFields(Class clazz, Integer expand) {\n    Field[] fields = clazz.getDeclaredFields();\n    if (fields.length == 0) {\n        return new FieldVO[0];\n    }\n\n    List<FieldVO> list = new ArrayList<>(fields.length);\n    for (Field field : fields) {\n        FieldVO fieldVO = new FieldVO();\n        fieldVO.setName(field.getName());\n        fieldVO.setType(StringUtils.classname(field.getType()));\n        fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n        fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n        if (Modifier.isStatic(field.getModifiers())) {\n            fieldVO.setStatic(true);\n            fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n        } else {\n            fieldVO.setStatic(false);\n        }\n        list.add(fieldVO);\n    }\n    return list.toArray(new FieldVO[0]);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "146", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(final byte[] emlBytes, final EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        final String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        final String subject = extractBasicHeader(emlContent, \"Subject:\");\n        final String from = extractBasicHeader(emlContent, \"From:\");\n        final String to = extractBasicHeader(emlContent, \"To:\");\n        final String cc = extractBasicHeader(emlContent, \"Cc:\");\n        final String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        final String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        final String extractedHtmlBody = extractHtmlBody(emlContent);\n        final String htmlBody;\n        if (extractedHtmlBody == null) {\n            final String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(\n                    textBody != null ? textBody : \"Email content could not be parsed\");\n        } else {\n            htmlBody = extractedHtmlBody;\n        }\n\n        // Generate HTML with custom styling\n        final StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\")\n            .append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\")\n            .append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\")\n            .append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\")\n            .append(\"</head><body>\\n\")\n            .append(\"<div class=\\\"email-container\\\">\\n\")\n            .append(\"<div class=\\\"email-header\\\">\\n\")\n            .append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\")\n            .append(\"<div class=\\\"email-meta\\\">\\n\")\n            .append(\"<div><strong>From:</strong> \")\n            .append(escapeHtml(from)).append(\"</div>\\n\")\n            .append(\"<div><strong>To:</strong> \")\n            .append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \")\n                    .append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                    .append(escapeHtml(bcc)).append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \")\n                .append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\")\n            .append(\"<div class=\\\"email-body\\\">\\n\")\n            .append(processEmailHtmlBody(htmlBody))\n            .append(\"</div>\\n\");\n\n        // Add attachment information\n        final String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\")\n                .append(\"<h3>Attachments</h3>\\n\")\n                .append(attachmentInfo);\n\n            // Add status message about attachments\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\")\n                    .append(\"<p><strong>Note:</strong> Attachments are saved as external files \")\n                    .append(\"and linked in this PDF. Click the links to open files externally.</p>\\n\")\n                    .append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\")\n                    .append(\"<p><em>Attachment information displayed - files not included in PDF. \")\n                    .append(\"Enable 'Include attachments' to embed files.</em></p>\\n\")\n                    .append(\"</div>\\n\");\n            }\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\")\n                .append(\"<p><em>Note: Some advanced features require \")\n                .append(\"Jakarta Mail dependencies.</em></p>\\n\")\n                .append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\")\n            .append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "147", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(final Object multipart) {\n        if (multipart == null) {\n            return false;\n        }\n\n        try {\n            final Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            try {\n                final Class<?> mimeMultipartClass = Class.forName(\n                        \"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "148", "src_id": "M348", "code": "\n    private static String extractBasicHeader(\n            final String emlContent, final String headerName) {\n        try {\n            final String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                final String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    final StringBuilder value = new StringBuilder(\n                            line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) {\n                    break;\n                }\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "149", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            final PDDocument document, final List<EmailAttachment> attachments) \n            throws IOException {\n        if (document.getNumberOfPages() == 0 \n                || attachments == null \n                || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find attachment marker positions\n        final AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true);\n        finder.getText(document);\n        final List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn on count mismatch\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\"Found {} attachment markers, but there are {} attachments. \"\n                    + \"Annotation count may be incorrect.\",\n                    markerPositions.size(), attachments.size());\n        }\n\n        // 3. Create invisible annotations\n        final int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            final MarkerPosition position = markerPositions.get(i);\n            final EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                final PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                        document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "150", "src_id": "M491", "code": "\n@SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n@ResizeMode\npublic static int nextResizeModeAndSaveToPrefs(final Player player,\n                                               @ResizeMode final int resizeMode) {\n    final int newResizeMode;\n    switch (resizeMode) {\n        case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n        default:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n            break;\n    }\n\n    // save the new resize mode so it can be restored in a future session\n    player.getPrefs().edit().putInt(\n            player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n    return newResizeMode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "151", "src_id": "M424", "code": "\n@Override\npublic void onBroadcastReceived(final Intent intent) {\n    super.onBroadcastReceived(intent);\n    if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n        // Close it because when changing orientation from portrait\n        // (in fullscreen mode) the size of queue layout can be larger than the screen size\n        closeItemsList();\n    } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n        // Ensure that we have audio-only stream playing when a user\n        // started to play from notification's play button from outside of the app\n        if (!fragmentIsVisible) {\n            onFragmentStopped();\n        }\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n        fragmentIsVisible = false;\n        onFragmentStopped();\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n        // Restore video source when user returns to the fragment\n        fragmentIsVisible = true;\n        player.useVideoSource(true);\n\n        // When a user returns from background, the system UI will always be shown even if\n        // controls are invisible: hide it in that case\n        if (!isControlsVisible()) {\n            hideSystemUIIfNeeded();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "152", "src_id": "M900", "code": "\n@StyleRes\npublic static int getSettingsThemeStyle(final Context context) {\n    final Resources res = context.getResources();\n    final String lightTheme = res.getString(R.string.light_theme_key);\n    final String blackTheme = res.getString(R.string.black_theme_key);\n    final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n    final String selectedTheme = getSelectedThemeKey(context);\n\n    if (selectedTheme.equals(lightTheme)) {\n        return R.style.LightSettingsTheme;\n    } else if (selectedTheme.equals(blackTheme)) {\n        return R.style.BlackSettingsTheme;\n    } else if (selectedTheme.equals(automaticDeviceTheme)) {\n        if (isDeviceDarkThemeEnabled(context)) {\n            // use the dark theme variant preferred by the user\n            final String selectedNightTheme = getSelectedNightThemeKey(context);\n            if (selectedNightTheme.equals(blackTheme)) {\n                return R.style.BlackSettingsTheme;\n            } else {\n                return R.style.DarkSettingsTheme;\n            }\n        } else {\n            // there is only one day theme\n            return R.style.LightSettingsTheme;\n        }\n    } else {\n        // default to dark theme\n        return R.style.DarkSettingsTheme;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "153", "src_id": "M895", "code": "\n@Override\npublic Bitmap transform(final Bitmap source) {\n    if (DEBUG) Log.d(TAG, \"Thumbnail - transform() called\");\n\n    final float notificationThumbnailWidth = Math.min(\n            context.getResources()\n                    .getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth());\n\n    final Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight() \n                   / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true);\n\n    if (result == source || !result.isMutable()) {\n        // create a new mutable bitmap to prevent strange crashes on some\n        // devices (see #4638)\n        final Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight() / (source.getWidth()\n                        / (notificationThumbnailWidth - 1))),\n                null,\n                true);\n        source.recycle();\n        return copied;\n    } else {\n        source.recycle();\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "154", "src_id": "M225", "code": "\nprivate void onBroadcastReceived(final Intent intent) {\n    if (intent == null || intent.getAction() == null) return;\n    \n    if (DEBUG) Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n\n    switch (intent.getAction()) {\n        case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n            pause();\n            break;\n        case ACTION_CLOSE:\n            service.destroyPlayerAndStopService();\n            break;\n        case ACTION_PLAY_PAUSE:\n            playPause();\n            break;\n        case ACTION_PLAY_PREVIOUS:\n            playPrevious();\n            break;\n        case ACTION_PLAY_NEXT:\n            playNext();\n            break;\n        case ACTION_FAST_REWIND:\n            fastRewind();\n            break;\n        case ACTION_FAST_FORWARD:\n            fastForward();\n            break;\n        case ACTION_REPEAT:\n            cycleNextRepeatMode();\n            break;\n        case ACTION_SHUFFLE:\n            toggleShuffleModeEnabled();\n            break;\n        case Intent.ACTION_CONFIGURATION_CHANGED:\n            if (DEBUG) Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n            break;\n    }\n\n    UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "155", "src_id": "M749", "code": "\nprivate static void handleError(final Context context, final ErrorInfo errorInfo) {\n    if (errorInfo.getThrowable() != null) {\n        errorInfo.getThrowable().printStackTrace();\n    }\n\n    if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n        Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n        // Starting ReCaptcha Challenge Activity\n        final Intent intent = new Intent(context, ReCaptchaActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    } else if (errorInfo.getThrowable() != null\n            && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n        Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n        Toast.makeText(context, R.string.restricted_video_no_stream, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n        Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n        Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n        Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n        Toast.makeText(context, R.string.soundcloud_go_plus_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n        Toast.makeText(context, R.string.youtube_music_premium_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n        Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n        Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n    } else {\n        ErrorUtil.createNotification(context, errorInfo);\n    }\n\n    if (context instanceof RouterActivity) {\n        ((RouterActivity) context).finish();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "156", "src_id": "M999", "code": "\npublic static void openVideoDetailFragment(@NonNull final Context context,\n                                           @NonNull final FragmentManager fragmentManager,\n                                           final int serviceId,\n                                           @Nullable final String url,\n                                           @NonNull final String title,\n                                           @Nullable final PlayQueue playQueue,\n                                           final boolean switchingPlayers) {\n    final boolean autoPlay;\n    @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n    if (playerType == null) {\n        // no player open\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else if (switchingPlayers) {\n        // switching player to main player\n        autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n    } else if (playerType == PlayerType.MAIN) {\n        // opening new stream while already playing in main player\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else {\n        // opening new stream while already playing in another player\n        autoPlay = false;\n    }\n\n    final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n        expandMainPlayer(detailFragment.requireActivity());\n        detailFragment.setAutoPlay(autoPlay);\n        if (switchingPlayers) {\n            // Situation when user switches from players to main player. All needed data is\n            // here, we can start watching (assuming newQueue equals playQueue).\n            // Starting directly in fullscreen if the previous player type was popup.\n            detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                    || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n        } else {\n            detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n        }\n        detailFragment.scrollToTop();\n    };\n\n    final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n    if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n        onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n    } else {\n        // Specify no url here, otherwise the VideoDetailFragment will start loading the\n        // stream automatically if it's the first time it is being opened, but then\n        // onVideoDetailFragmentReady will kick in and start another loading process.\n        // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n        final VideoDetailFragment instance = VideoDetailFragment\n                .getInstance(serviceId, null, title, playQueue);\n        instance.setAutoPlay(autoPlay);\n\n        defaultTransaction(fragmentManager)\n                .replace(R.id.fragment_player_holder, instance)\n                .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                .commit();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "157", "src_id": "M698", "code": "\n@Override\npublic void handleResult(@NonNull final ChannelInfo result) {\n    super.handleResult(result);\n    currentInfo = result;\n    setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n    if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n        PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelBannerImage);\n    } else {\n        // do not waste space for the banner, if the user disabled images or there is not one\n        binding.channelBannerImage.setImageDrawable(null);\n    }\n\n    PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.channelAvatarView);\n    PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.subChannelAvatarView);\n\n    binding.channelTitleView.setText(result.getName());\n    binding.channelSubscriberView.setVisibility(View.VISIBLE);\n    if (result.getSubscriberCount() >= 0) {\n        binding.channelSubscriberView.setText(Localization\n                .shortSubscriberCount(activity, result.getSubscriberCount()));\n    } else {\n        binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n    }\n\n    if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n        binding.subChannelTitleView.setText(String.format(\n                getString(R.string.channel_created_by),\n                currentInfo.getParentChannelName())\n        );\n        binding.subChannelTitleView.setVisibility(View.VISIBLE);\n        binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n    }\n\n    updateRssButton();\n\n    channelContentNotSupported = false;\n    for (final Throwable throwable : result.getErrors()) {\n        if (throwable instanceof ContentNotSupportedException) {\n            channelContentNotSupported = true;\n            showContentNotSupportedIfNeeded();\n            break;\n        }\n    }\n\n    disposables.clear();\n    if (subscribeButtonMonitor != null) {\n        subscribeButtonMonitor.dispose();\n    }\n\n    updateTabs();\n    updateSubscription(result);\n    monitorSubscription(result);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "158", "src_id": "M379", "code": "\n@Override\npublic void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n    super.onTextTracksChanged(currentTracks);\n\n    final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n            || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n    if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n            || !trackTypeTextSupported) {\n        binding.captionTextView.setVisibility(View.GONE);\n        return;\n    }\n\n    // Extract all loaded languages\n    final List<Tracks.Group> textTracks = currentTracks\n            .getGroups()\n            .stream()\n            .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n            .collect(Collectors.toList());\n    final List<String> availableLanguages = textTracks.stream()\n            .map(Tracks.Group::getMediaTrackGroup)\n            .filter(textTrack -> textTrack.length > 0)\n            .map(textTrack -> textTrack.getFormat(0).language)\n            .collect(Collectors.toList());\n\n    // Find selected text track\n    final Optional<Format> selectedTracks = textTracks.stream()\n            .filter(Tracks.Group::isSelected)\n            .filter(info -> info.getMediaTrackGroup().length >= 1)\n            .map(info -> info.getMediaTrackGroup().getFormat(0))\n            .findFirst();\n\n    // Build UI\n    buildCaptionMenu(availableLanguages);\n    if (player.getTrackSelector().getParameters().getRendererDisabled(\n            player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n        binding.captionTextView.setText(R.string.caption_none);\n    } else {\n        binding.captionTextView.setText(selectedTracks.get().language);\n    }\n    binding.captionTextView.setVisibility(\n            availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "159", "src_id": "M894", "code": "\npublic static RequestCreator loadScaledDownThumbnail(final Context context,\n                                                     @NonNull final List<Image> images) {\n    // scale down the notification thumbnail for performance\n    return PicassoHelper.loadThumbnail(images)\n            .transform(new Transformation() {\n                @Override\n                public Bitmap transform(final Bitmap source) {\n                    if (DEBUG) Log.d(TAG, \"Thumbnail - transform() called\");\n\n                    final float notificationThumbnailWidth = Math.min(\n                            context.getResources()\n                                    .getDimension(R.dimen.player_notification_thumbnail_width),\n                            source.getWidth());\n\n                    final Bitmap result = BitmapCompat.createScaledBitmap(\n                            source,\n                            (int) notificationThumbnailWidth,\n                            (int) (source.getHeight()\n                                    / (source.getWidth() / notificationThumbnailWidth)),\n                            null,\n                            true);\n\n                    if (result == source || !result.isMutable()) {\n                        // create a new mutable bitmap to prevent strange crashes on some\n                        // devices (see #4638)\n                        final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth - 1,\n                                (int) (source.getHeight() / (source.getWidth()\n                                        / (notificationThumbnailWidth - 1))),\n                                null,\n                                true);\n                        source.recycle();\n                        return copied;\n                    } else {\n                        source.recycle();\n                        return result;\n                    }\n                }\n\n                @Override\n                public String key() {\n                    return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                }\n            });\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "160", "src_id": "M66", "code": "\nvoid drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    Observer<? super R> downstream = this.downstream;\n    AtomicThrowable errors = this.errors;\n    AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n    for (;;) {\n        for (;;) {\n            if (cancelled) {\n                return;\n            }\n\n            if (errors.get() != null) {\n                if (!delayErrors) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n            }\n\n            boolean d = done;\n            SwitchMapMaybeObserver<R> current = inner.get();\n            boolean empty = current == null;\n\n            if (d && empty) {\n                errors.tryTerminateConsumer(downstream);\n                return;\n            }\n\n            if (empty || current.item == null) {\n                break;\n            }\n\n            inner.compareAndSet(current, null);\n            downstream.onNext(current.item);\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "161", "src_id": "M1333", "code": "\n@Override\npublic void onNext(T t) {\n    if (done) {\n        return;\n    }\n    boolean b;\n    try {\n        b = predicate.test(t);\n    } catch (Throwable e) {\n        Exceptions.throwIfFatal(e);\n        upstream.cancel();\n        upstream = SubscriptionHelper.CANCELLED;\n        onError(e);\n        return;\n    }\n    if (!b) {\n        done = true;\n        upstream.cancel();\n        upstream = SubscriptionHelper.CANCELLED;\n        downstream.onSuccess(false);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "162", "src_id": "M522", "code": "\nvoid drainLoop() {\n    Observer<? super T> actual = this.downstream;\n    int missed = 1;\n    for (;;) {\n        for (;;) {\n            if (disposed) {\n                singleItem = null;\n                queue = null;\n                return;\n            }\n\n            if (errors.get() != null) {\n                singleItem = null;\n                queue = null;\n                errors.tryTerminateConsumer(actual);\n                return;\n            }\n\n            int os = otherState;\n            if (os == OTHER_STATE_HAS_VALUE) {\n                T v = singleItem;\n                singleItem = null;\n                otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                actual.onNext(v);\n            }\n\n            boolean d = mainDone;\n            SimplePlainQueue<T> q = queue;\n            T v = q != null ? q.poll() : null;\n            boolean empty = v == null;\n\n            if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                queue = null;\n                actual.onComplete();\n                return;\n            }\n\n            if (empty) {\n                break;\n            }\n            actual.onNext(v);\n        }\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "163", "src_id": "M1163", "code": "\n@Override\nvoid drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    final SimplePlainQueue<Object> queue = this.queue;\n    final Subscriber<? super Flowable<T>> downstream = this.downstream;\n    UnicastProcessor<T> window = this.window;\n\n    for (;;) {\n        if (upstreamCancelled) {\n            queue.clear();\n            window = null;\n            this.window = null;\n        } else {\n            boolean isDone = done;\n            Object o = queue.poll();\n            boolean isEmpty = o == null;\n\n            if (isDone && isEmpty) {\n                Throwable ex = error;\n                if (ex != null) {\n                    if (window != null) {\n                        window.onError(ex);\n                    }\n                    downstream.onError(ex);\n                } else {\n                    if (window != null) {\n                        window.onComplete();\n                    }\n                    downstream.onComplete();\n                }\n                cleanupResources();\n                upstreamCancelled = true;\n                continue;\n            } else if (!isEmpty) {\n                if (o instanceof WindowBoundaryRunnable) {\n                    WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                    if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                        this.count = 0;\n                        window = createNewWindow(window);\n                    }\n                } else if (window != null) {\n                    @SuppressWarnings(\"unchecked\")\n                    T item = (T) o;\n                    window.onNext(item);\n\n                    long count = this.count + 1;\n                    if (count == maxSize) {\n                        this.count = 0;\n                        window = createNewWindow(window);\n                    } else {\n                        this.count = count;\n                    }\n                }\n                continue;\n            }\n        }\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "164", "src_id": "M478", "code": "\nvoid drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    EqualObserver<T>[] as = observers;\n\n    final EqualObserver<T> observer1 = as[0];\n    final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n    final EqualObserver<T> observer2 = as[1];\n    final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n    for (;;) {\n        for (;;) {\n            if (cancelled) {\n                q1.clear();\n                q2.clear();\n                return;\n            }\n\n            boolean d1 = observer1.done;\n            if (d1) {\n                Throwable e = observer1.error;\n                if (e != null) {\n                    cancel(q1, q2);\n                    downstream.onError(e);\n                    return;\n                }\n            }\n\n            boolean d2 = observer2.done;\n            if (d2) {\n                Throwable e = observer2.error;\n                if (e != null) {\n                    cancel(q1, q2);\n                    downstream.onError(e);\n                    return;\n                }\n            }\n\n            if (v1 == null) {\n                v1 = q1.poll();\n            }\n            boolean e1 = v1 == null;\n\n            if (v2 == null) {\n                v2 = q2.poll();\n            }\n            boolean e2 = v2 == null;\n\n            if (d1 && d2 && e1 && e2) {\n                downstream.onSuccess(true);\n                return;\n            }\n            if ((d1 && d2) && (e1 != e2)) {\n                cancel(q1, q2);\n                downstream.onSuccess(false);\n                return;\n            }\n\n            if (!e1 && !e2) {\n                boolean c;\n                try {\n                    c = comparer.test(v1, v2);\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    cancel(q1, q2);\n                    downstream.onError(ex);\n                    return;\n                }\n\n                if (!c) {\n                    cancel(q1, q2);\n                    downstream.onSuccess(false);\n                    return;\n                }\n                v1 = null;\n                v2 = null;\n            }\n\n            if (e1 || e2) {\n                break;\n            }\n        }\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "165", "src_id": "M885", "code": "\nvoid drainLoop() {\n    int missed = 1;\n    JoinInnerSubscriber<T>[] s = this.subscribers;\n    int n = s.length;\n    Subscriber<? super T> a = this.downstream;\n\n    for (;;) {\n        long r = requested.get();\n        long e = 0;\n\n        middle:\n        while (e != r) {\n            if (cancelled) {\n                cleanup();\n                return;\n            }\n\n            Throwable ex = errors.get();\n            if (ex != null) {\n                cleanup();\n                a.onError(ex);\n                return;\n            }\n\n            boolean d = done.get() == 0;\n            boolean empty = true;\n\n            for (int i = 0; i < s.length; i++) {\n                JoinInnerSubscriber<T> inner = s[i];\n                SimplePlainQueue<T> q = inner.queue;\n                if (q != null) {\n                    T v = q.poll();\n                    if (v != null) {\n                        empty = false;\n                        a.onNext(v);\n                        inner.requestOne();\n                        if (++e == r) {\n                            break middle;\n                        }\n                    }\n                }\n            }\n\n            if (d && empty) {\n                a.onComplete();\n                return;\n            }\n\n            if (empty) {\n                break;\n            }\n        }\n\n        if (e == r) {\n            if (cancelled) {\n                cleanup();\n                return;\n            }\n\n            Throwable ex = errors.get();\n            if (ex != null) {\n                cleanup();\n                a.onError(ex);\n                return;\n            }\n\n            boolean d = done.get() == 0;\n            boolean empty = true;\n\n            for (int i = 0; i < n; i++) {\n                JoinInnerSubscriber<T> inner = s[i];\n                SimpleQueue<T> q = inner.queue;\n                if (q != null && !q.isEmpty()) {\n                    empty = false;\n                    break;\n                }\n            }\n\n            if (d && empty) {\n                a.onComplete();\n                return;\n            }\n        }\n\n        if (e != 0) {\n            BackpressureHelper.produced(requested, e);\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "166", "src_id": "M1399", "code": "\n@Override\npublic void drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    InnerQueuedSubscriber<R> inner = current;\n    Subscriber<? super R> a = downstream;\n    ErrorMode em = errorMode;\n\n    for (;;) {\n        long r = requested.get();\n        long e = 0L;\n\n        if (inner == null) {\n            if (em != ErrorMode.END) {\n                Throwable ex = errors.get();\n                if (ex != null) {\n                    cancelAll();\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n            }\n\n            boolean outerDone = done;\n            inner = subscribers.poll();\n\n            if (outerDone && inner == null) {\n                errors.tryTerminateConsumer(downstream);\n                return;\n            }\n\n            if (inner != null) {\n                current = inner;\n            }\n        }\n\n        boolean continueNextSource = false;\n\n        if (inner != null) {\n            SimpleQueue<R> q = inner.queue();\n            if (q != null) {\n                while (e != r) {\n                    if (cancelled) {\n                        cancelAll();\n                        return;\n                    }\n\n                    if (em == ErrorMode.IMMEDIATE) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            current = null;\n                            inner.cancel();\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = inner.isDone();\n                    R v;\n                    try {\n                        v = q.poll();\n                    } catch (Throwable ex) {\n                        Exceptions.throwIfFatal(ex);\n                        current = null;\n                        inner.cancel();\n                        cancelAll();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean empty = v == null;\n                    if (d && empty) {\n                        inner = null;\n                        current = null;\n                        upstream.request(1);\n                        continueNextSource = true;\n                        break;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    a.onNext(v);\n                    e++;\n                    inner.request(1L);\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cancelAll();\n                        return;\n                    }\n\n                    if (em == ErrorMode.IMMEDIATE) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            current = null;\n                            inner.cancel();\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = inner.isDone();\n                    boolean empty = q.isEmpty();\n                    if (d && empty) {\n                        inner = null;\n                        current = null;\n                        upstream.request(1);\n                        continueNextSource = true;\n                    }\n                }\n            }\n        }\n\n        if (e != 0L && r != Long.MAX_VALUE) {\n            requested.addAndGet(-e);\n        }\n\n        if (continueNextSource) {\n            continue;\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "167", "src_id": "M469", "code": "\n@SuppressWarnings(\"unchecked\")\nvoid remove(CacheDisposable<T> consumer) {\n    for (;;) {\n        CacheDisposable<T>[] current = observers.get();\n        int n = current.length;\n        if (n == 0) {\n            return;\n        }\n\n        int j = -1;\n        for (int i = 0; i < n; i++) {\n            if (current[i] == consumer) {\n                j = i;\n                break;\n            }\n        }\n\n        if (j < 0) {\n            return;\n        }\n        CacheDisposable<T>[] next;\n\n        if (n == 1) {\n            next = EMPTY;\n        } else {\n            next = new CacheDisposable[n - 1];\n            System.arraycopy(current, 0, next, 0, j);\n            System.arraycopy(current, j + 1, next, j, n - j - 1);\n        }\n\n        if (observers.compareAndSet(current, next)) {\n            return;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "168", "src_id": "M362", "code": "\nvoid drainFused() {\n    int missed = 1;\n    for (;;) {\n        if (disposed) {\n            return;\n        }\n\n        boolean d = done;\n        Throwable ex = error;\n\n        if (!delayError && d && ex != null) {\n            disposed = true;\n            downstream.onError(error);\n            worker.dispose();\n            return;\n        }\n\n        downstream.onNext(null);\n\n        if (d) {\n            disposed = true;\n            ex = error;\n            if (ex != null) {\n                downstream.onError(ex);\n            } else {\n                downstream.onComplete();\n            }\n            worker.dispose();\n            return;\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "169", "src_id": "M2247", "code": "\n@SuppressWarnings(\"unchecked\")\nvoid remove(PublishSubscription<T> ps) {\n    for (;;) {\n        PublishSubscription<T>[] a = subscribers.get();\n        if (a == TERMINATED || a == EMPTY) {\n            return;\n        }\n\n        int n = a.length;\n        int j = -1;\n        for (int i = 0; i < n; i++) {\n            if (a[i] == ps) {\n                j = i;\n                break;\n            }\n        }\n\n        if (j < 0) {\n            return;\n        }\n\n        PublishSubscription<T>[] b;\n        if (n == 1) {\n            b = EMPTY;\n        } else {\n            b = new PublishSubscription[n - 1];\n            System.arraycopy(a, 0, b, 0, j);\n            System.arraycopy(a, j + 1, b, j, n - j - 1);\n        }\n        if (subscribers.compareAndSet(a, b)) {\n            return;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "170", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n        String requestBody = String.format(\n                \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}\",\n                licenseKey, machineFingerprint);\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n                .header(\"Content-Type\", \"application/vnd.api+json\")\n                .header(\"Accept\", \"application/vnd.api+json\")\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n                log.info(\"License floating (from license): {}, maxMachines: {}\",\n                        context.isFloatingLicense, context.maxMachines);\n            }\n\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n\n            if (policyNode != null) {\n                boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n                log.info(\"License floating (from policy): {}, maxMachines: {}\",\n                        context.isFloatingLicense, context.maxMachines);\n            }\n\n            int users = jsonResponse.path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"users\")\n                    .asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            context.isEnterpriseLicense = jsonResponse.path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"isEnterprise\")\n                    .asBoolean(false);\n\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "171", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(summary = \"Convert a file to a PDF using LibreOffice\",\n            description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n            try (PDDocument doc = pdfDocumentFactory.load(file)) {\n                return WebResponseUtils.pdfDocToWebResponse(\n                        doc,\n                        Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                                .replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\");\n            }\n        } finally {\n            if (file != null) file.delete();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "172", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n        MultipartFile inputFile = request.getFileInput();\n        boolean readonly = true;\n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            ObjectNode metadata = objectMapper.createObjectNode();\n            ObjectNode basicInfo = objectMapper.createObjectNode();\n            ObjectNode docInfoNode = objectMapper.createObjectNode();\n            ObjectNode compliancy = objectMapper.createObjectNode();\n            ObjectNode encryption = objectMapper.createObjectNode();\n            ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            String[] words = fullText.split(\"\\\\s+\");\n            int wordCount = words.length;\n            int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            boolean hasCompression = false;\n            String compressionType = \"None\";\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) basicInfo.put(\"CompressionType\", compressionType);\n\n            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            String pageMode = catalog.getPageMode().name();\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            PDAcroForm acroForm = catalog.getAcroForm();\n            ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            if (catalog.getNames() != null) {\n                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength());\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            PDDocumentNameDictionary namesDict = catalog.getNames();\n            ArrayNode javascriptArray = objectMapper.createArrayNode();\n            if (namesDict != null) {\n                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n                            PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            PDOptionalContentProperties ocProperties = catalog.getOCProperties();\n            ArrayNode layersArray = objectMapper.createArrayNode();\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n            other.set(\"Layers\", layersArray);\n\n            PDStructureTreeRoot structureTreeRoot = catalog.getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                log.error(\"exception\", e);\n            }\n\n            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            boolean isPdfBCompliant = checkForStandard(pdfBoxDoc, \"PDF/B\");\n            boolean isPdfSECCompliant = checkForStandard(pdfBoxDoc, \"PDF/SEC\");\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            PDOutlineNode root = catalog.getDocumentOutline();\n            ArrayNode bookmarksArray = objectMapper.createArrayNode();\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            PDMetadata pdMetadata = catalog.getMetadata();\n            String xmpString = null;\n            if (pdMetadata != null) {\n                try (COSInputStream is = pdMetadata.createInputStream()) {\n                    DomXmpParser domXmpParser = new DomXmpParser();\n                    XMPMetadata xmpMeta = domXmpParser.parse(is);\n                    ByteArrayOutputStream os = new ByteArrayOutputStream();\n                    new XmpSerializer().serialize(xmpMeta, os, true);\n                    xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                } catch (XmpParsingException e) {\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                ObjectNode pageInfo = objectMapper.createObjectNode();\n                PDPage page = pdfBoxDoc.getPage(pageNum);\n                PDRectangle mediaBox = page.getMediaBox();\n                float width = mediaBox.getWidth();\n                float height = mediaBox.getHeight();\n                ObjectNode sizeInfo = objectMapper.createObjectNode();\n                getDimensionInfo(sizeInfo, width, height);\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n                PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n                PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n                PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n                PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                String pageText = textStripper.getText(pdfBoxDoc);\n                pageInfo.put(\"Text Characters Count\", pageText.length());\n\n                List<PDAnnotation> annotations = page.getAnnotations();\n                int subtypeCount = 0;\n                int contentsCount = 0;\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) subtypeCount++;\n                    if (annotation.getContents() != null) contentsCount++;\n                }\n                ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                PDResources resources = page.getResources();\n                ArrayNode imagesArray = objectMapper.createArrayNode();\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                ArrayNode linksArray = objectMapper.createArrayNode();\n                Set<String> uniqueURIs = new HashSet<>();\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            uniqueURIs.add(uriAction.getURI());\n                        }\n                    }\n                }\n                for (String uri : uniqueURIs) {\n                    ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                ArrayNode fontsArray = objectMapper.createArrayNode();\n                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n                for (COSName fontName : resources.getFontNames()) {\n                    PDFont font = resources.getFont(fontName);\n                    ObjectNode fontNode = objectMapper.createObjectNode();\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n                    fontNode.put(\"Name\", font.getName());\n                    fontNode.put(\"Subtype\", font.getType());\n                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n                    String uniqueKey = fontNode.toString();\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        PDStream iccData = iccBased.getPDStream();\n                        byte[] iccBytes = iccData.toByteArray();\n                        ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                Map<String, Integer> xObjectCountMap = new HashMap<>();\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    String xObjectType = xObject instanceof PDImageXObject ? \"Image\"\n                            : xObject instanceof PDFormXObject ? \"Form\" : \"Other\";\n                    xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n                ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                ArrayNode multimediaArray = objectMapper.createArrayNode();\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode);\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n            return null;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "173", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile\n                    .replace(CERT_PREFIX, \"\")\n                    .replace(CERT_SUFFIX, \"\")\n                    .replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n            log.info(\"License file signature is valid\");\n\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            return processCertificateData(decodedData, context);\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "174", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager);\n             ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(\n                     new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n            ZipEntry entry = zipIn.getNextEntry();\n            while (entry != null) {\n                Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                if (!entry.isDirectory()) {\n                    Files.createDirectories(filePath.getParent());\n                    if (entry.getName().toLowerCase().endsWith(\".html\")\n                            || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                        String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                        String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                        Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                    } else {\n                        Files.copy(zipIn, filePath);\n                    }\n                }\n                zipIn.closeEntry();\n                entry = zipIn.getNextEntry();\n            }\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "175", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate) throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n\n        try (PDPageContentStream contentStream = new PDPageContentStream(\n                doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                float imageAspectRatio = (float) image.getWidth() / image.getHeight();\n                float pageAspectRatio = pageWidth / pageHeight;\n                float scaleFactor = imageAspectRatio > pageAspectRatio\n                        ? pageWidth / image.getWidth()\n                        : pageHeight / image.getHeight();\n                float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                contentStream.drawImage(\n                        image, xPos, yPos,\n                        image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n            }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "176", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (byte b : mac) {\n                            sb.append(String.format(\"%02X\", b));\n                        }\n                        break;\n                    }\n                }\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (byte b : mac) {\n                        sb.append(String.format(\"%02X\", b));\n                    }\n                }\n            }\n\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "177", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata()\n                && runningProOrHigher) {\n            author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "178", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n            if (isKubernetes) return \"Kubernetes\";\n            else if (isDocker) return \"Docker\";\n            else if (isBrowserOpen) {\n                String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                if (os.contains(\"win\")) return \"Client-windows\";\n                else if (os.contains(\"mac\")) return \"Client-mac\";\n                else return \"Client-unix\";\n            } else return \"Server-jar\";\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "179", "src_id": "M101", "code": "\n    private void processRequest(\n            int limitPerDay,\n            String identifier,\n            Map<String, Bucket> buckets,\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain) throws IOException, ServletException {\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        if (probe.isConsumed()) {\n            response.setHeader(\"X-Rate-Limit-Remaining\",\n                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            filterChain.doFilter(request, response);\n        } else {\n            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\",\n                    Newlines.stripAll(String.valueOf(waitForRefill)));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "180", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            final String licenseKey, final String machineFingerprint, final LicenseContext context)\n            throws Exception {\n        final String requestBody = String.format(\n                \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                licenseKey, machineFingerprint);\n        final HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n                .header(\"Content-Type\", \"application/vnd.api+json\")\n                .header(\"Accept\", \"application/vnd.api+json\")\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        final HttpResponse<String> response = httpClient.send(\n                request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        final JsonNode jsonResponse = objectMapper.readTree(response.body());\n        \n        if (response.statusCode() != 200) {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n            return jsonResponse;\n        }\n\n        final JsonNode metaNode = jsonResponse.path(\"meta\");\n        final boolean isValid = metaNode.path(\"valid\").asBoolean();\n        final String detail = metaNode.path(\"detail\").asText();\n        final String code = metaNode.path(\"code\").asText();\n\n        log.info(\"License validity: {}\", isValid);\n        log.info(\"Validation detail: {}\", detail);\n        log.info(\"Validation code: {}\", code);\n\n        final JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n        if (!licenseAttrs.isMissingNode()) {\n            context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n            context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n            log.info(\"License floating (from license): {}, maxMachines: {}\",\n                    context.isFloatingLicense, context.maxMachines);\n        }\n\n        JsonNode policyNode = null;\n        final JsonNode includedNode = jsonResponse.path(\"included\");\n        if (includedNode.isArray()) {\n            for (final JsonNode node : includedNode) {\n                if (\"policies\".equals(node.path(\"type\").asText())) {\n                    policyNode = node;\n                    break;\n                }\n            }\n        }\n\n        if (policyNode != null) {\n            final boolean policyFloating = policyNode.path(\"attributes\")\n                    .path(\"floating\").asBoolean(false);\n            final int policyMaxMachines = policyNode.path(\"attributes\")\n                    .path(\"maxMachines\").asInt(1);\n            if (policyFloating) {\n                context.isFloatingLicense = true;\n                context.maxMachines = policyMaxMachines;\n            }\n            log.info(\"License floating (from policy): {}, maxMachines: {}\",\n                    context.isFloatingLicense, context.maxMachines);\n        }\n\n        final int users = jsonResponse.path(\"data\").path(\"attributes\")\n                .path(\"metadata\").path(\"users\").asInt(1);\n        applicationProperties.getPremium().setMaxUsers(users);\n\n        context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\")\n                .path(\"metadata\").path(\"isEnterprise\").asBoolean(false);\n\n        log.debug(applicationProperties.toString());\n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "181", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(\n            @ModelAttribute final GeneralFile generalFile) throws Exception {\n        final MultipartFile inputFile = generalFile.getFileInput();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n            final PDDocument doc = pdfDocumentFactory.load(file);\n            return WebResponseUtils.pdfDocToWebResponse(\n                    doc,\n                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                            .replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\");\n        } finally {\n            if (file != null) file.delete();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "182", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute final PDFFile request)\n            throws IOException {\n        final MultipartFile inputFile = request.getFileInput();\n        final boolean readonly = true;\n        try (final PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            final ObjectMapper objectMapper = new ObjectMapper();\n            final ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            final PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            final ObjectNode metadata = objectMapper.createObjectNode();\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            final long fileSizeInBytes = inputFile.getSize();\n            final ObjectNode basicInfo = objectMapper.createObjectNode();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            final String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            final String[] words = fullText.split(\"\\\\s+\");\n            basicInfo.put(\"WordCount\", words.length);\n            basicInfo.put(\"ParagraphCount\", fullText.split(\"\\r\\n|\\r|\\n\").length);\n            basicInfo.put(\"CharacterCount\", fullText.length());\n\n            boolean hasCompression = false;\n            final String compressionType = \"None\";\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) basicInfo.put(\"CompressionType\", compressionType);\n\n            final PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            basicInfo.put(\"Language\", catalog.getLanguage());\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            final ObjectNode docInfoNode = objectMapper.createObjectNode();\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(catalog.getPageMode().name()));\n\n            final ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            final PDAcroForm acroForm = catalog.getAcroForm();\n            if (acroForm != null) {\n                for (final PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            final ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            final ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n            if (catalog.getNames() != null) {\n                final PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n                if (efTree != null) {\n                    final Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (final Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            final ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            final PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength());\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n            }\n\n            final ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (final PDPage page : pdfBoxDoc.getPages()) {\n                for (final PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        final ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n\n            final ArrayNode javascriptArray = objectMapper.createArrayNode();\n            final PDDocumentNameDictionary namesDict = catalog.getNames();\n            if (namesDict != null) {\n                final PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        final Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n                        for (final Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            final ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n                            final PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null && jsAction.getAction() != null) {\n                                jsNode.put(\"JS Script Length\", jsAction.getAction().length());\n                            }\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (final IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n\n            final ArrayNode layersArray = objectMapper.createArrayNode();\n            final PDOptionalContentProperties ocProperties = catalog.getOCProperties();\n            if (ocProperties != null) {\n                for (final PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    final ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            final ObjectNode compliancy = objectMapper.createObjectNode();\n            compliancy.put(\"IsPDF/ACompliant\", checkForStandard(pdfBoxDoc, \"PDF/A\"));\n            compliancy.put(\"IsPDF/XCompliant\", checkForStandard(pdfBoxDoc, \"PDF/X\"));\n            compliancy.put(\"IsPDF/ECompliant\", checkForStandard(pdfBoxDoc, \"PDF/E\"));\n            compliancy.put(\"IsPDF/VTCompliant\", checkForStandard(pdfBoxDoc, \"PDF/VT\"));\n            compliancy.put(\"IsPDF/UACompliant\", checkForStandard(pdfBoxDoc, \"PDF/UA\"));\n            compliancy.put(\"IsPDF/BCompliant\", checkForStandard(pdfBoxDoc, \"PDF/B\"));\n            compliancy.put(\"IsPDF/SECCompliant\", checkForStandard(pdfBoxDoc, \"PDF/SEC\"));\n\n            final ArrayNode bookmarksArray = objectMapper.createArrayNode();\n            final PDOutlineNode root = catalog.getDocumentOutline();\n            if (root != null) {\n                for (final PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            String xmpString = null;\n            final PDMetadata pdMetadata = catalog.getMetadata();\n            if (pdMetadata != null) {\n                try (final COSInputStream is = pdMetadata.createInputStream()) {\n                    final DomXmpParser domXmpParser = new DomXmpParser();\n                    try {\n                        final XMPMetadata xmpMeta = domXmpParser.parse(is);\n                        final ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    } catch (final XmpParsingException e) {\n                        log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                        final byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (final IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            final ObjectNode encryption = objectMapper.createObjectNode();\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n                final PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            final ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            final ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                final ObjectNode pageInfo = objectMapper.createObjectNode();\n                final PDPage page = pdfBoxDoc.getPage(pageNum);\n                final PDRectangle mediaBox = page.getMediaBox();\n\n                final float width = mediaBox.getWidth();\n                final float height = mediaBox.getHeight();\n                final ObjectNode sizeInfo = objectMapper.createObjectNode();\n                getDimensionInfo(sizeInfo, width, height);\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n                pageInfo.put(\"CropBox\", page.getCropBox() != null ? page.getCropBox().toString() : \"Undefined\");\n                pageInfo.put(\"BleedBox\", page.getBleedBox() != null ? page.getBleedBox().toString() : \"Undefined\");\n                pageInfo.put(\"TrimBox\", page.getTrimBox() != null ? page.getTrimBox().toString() : \"Undefined\");\n                pageInfo.put(\"ArtBox\", page.getArtBox() != null ? page.getArtBox().toString() : \"Undefined\");\n\n                final PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                final String pageText = textStripper.getText(pdfBoxDoc);\n                pageInfo.put(\"Text Characters Count\", pageText.length());\n\n                final List<PDAnnotation> annotations = page.getAnnotations();\n                int subtypeCount = 0;\n                int contentsCount = 0;\n                for (final PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) subtypeCount++;\n                    if (annotation.getContents() != null) contentsCount++;\n                }\n                final ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                final ArrayNode imagesArray = objectMapper.createArrayNode();\n                final PDResources resources = page.getResources();\n                for (final COSName name : resources.getXObjectNames()) {\n                    final PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        final ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null && image.getMetadata().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                final ArrayNode linksArray = objectMapper.createArrayNode();\n                final Set<String> uniqueURIs = new HashSet<>();\n                for (final PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            uniqueURIs.add(uriAction.getURI());\n                        }\n                    }\n                }\n                for (final String uri : uniqueURIs) {\n                    final ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                final ArrayNode fontsArray = objectMapper.createArrayNode();\n                final Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n                for (final COSName fontName : resources.getFontNames()) {\n                    final PDFont font = resources.getFont(fontName);\n                    final ObjectNode fontNode = objectMapper.createObjectNode();\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n                    fontNode.put(\"Name\", font.getName());\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    final PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        final int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    final String uniqueKey = fontNode.toString();\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        final ObjectNode existing = uniqueFontsMap.get(uniqueKey);\n                        existing.put(\"Count\", existing.get(\"Count\").asInt() + 1);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n                for (final ObjectNode fontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(fontNode);\n                }\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                final ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n                for (final COSName name : resources.getColorSpaceNames()) {\n                    final PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        final PDStream iccData = iccBased.getPDStream();\n                        final byte[] iccBytes = iccData.toByteArray();\n                        final ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                final Map<String, Integer> xObjectCountMap = new HashMap<>();\n                for (final COSName name : resources.getXObjectNames()) {\n                    final PDXObject xObject = resources.getXObject(name);\n                    final String type = xObject instanceof PDImageXObject ? \"Image\"\n                         : xObject instanceof PDFormXObject ? \"Form\" : \"Other\";\n                    xObjectCountMap.put(type, xObjectCountMap.getOrDefault(type, 0) + 1);\n                }\n                final ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                xObjectCountMap.forEach(xObjectCountNode::put);\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                final ArrayNode multimediaArray = objectMapper.createArrayNode();\n                for (final PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        multimediaArray.add(objectMapper.createObjectNode());\n                    }\n                }\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            final ObjectNode other = objectMapper.createObjectNode();\n            other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            other.set(\"Attachments\", attachmentsArray);\n            other.set(\"JavaScript\", javascriptArray);\n            other.set(\"Layers\", layersArray);\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n            other.put(\"XMPMetadata\", xmpString);\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode);\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            final String jsonString = objectMapper.writerWithDefaultPrettyPrinter()\n                    .writeValueAsString(jsonOutput);\n            \n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n        } catch (final Exception e) {\n            log.error(\"exception\", e);\n            return null;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "183", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(final String licenseFile, final LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            final byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            final String payload = new String(payloadBytes);\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n\n            try {\n                final JSONObject attrs = new JSONObject(payload);\n                encryptedData = attrs.getString(\"enc\");\n                encodedSignature = attrs.getString(\"sig\");\n                algorithm = attrs.getString(\"alg\");\n            } catch (final JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            if (!verifyEd25519Signature(encryptedData, encodedSignature)) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n\n            log.info(\"License file signature is valid\");\n\n            final String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (final IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            return processCertificateData(decodedData, context);\n        } catch (final Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "184", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            final Path zipFilePath, final boolean disableSanitize, final TempFileManager tempFileManager)\n            throws IOException {\n        try (final TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager);\n             final ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(\n                     new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n            ZipEntry entry;\n            while ((entry = zipIn.getNextEntry()) != null) {\n                final Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                if (entry.isDirectory()) {\n                    Files.createDirectories(filePath);\n                    continue;\n                }\n                Files.createDirectories(filePath.getParent());\n                if (entry.getName().toLowerCase().endsWith(\".html\") || \n                    entry.getName().toLowerCase().endsWith(\".htm\")) {\n                    final String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                    Files.write(filePath, sanitizeHtmlContent(content, disableSanitize).getBytes(StandardCharsets.UTF_8));\n                } else {\n                    Files.copy(zipIn, filePath);\n                }\n                zipIn.closeEntry();\n            }\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "185", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            final PDDocument doc, final PDImageXObject image, final String fitOption, final boolean autoRotate)\n            throws IOException {\n        PDRectangle pageSize = PDRectangle.A4;\n        final boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        final PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n        final float pageWidth = page.getMediaBox().getWidth();\n        final float pageHeight = page.getMediaBox().getHeight();\n\n        try (final PDPageContentStream contentStream =\n                new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                final float imageAspectRatio = (float) image.getWidth() / image.getHeight();\n                final float pageAspectRatio = pageWidth / pageHeight;\n                final float scaleFactor = imageAspectRatio > pageAspectRatio\n                        ? pageWidth / image.getWidth()\n                        : pageHeight / image.getHeight();\n                final float xPos = (pageWidth - image.getWidth() * scaleFactor) / 2;\n                final float yPos = (pageHeight - image.getHeight() * scaleFactor) / 2;\n                contentStream.drawImage(image, xPos, yPos,\n                        image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n            }\n        } catch (final IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "186", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            final StringBuilder sb = new StringBuilder();\n            final InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n            if (network == null) {\n                final Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    final NetworkInterface net = networks.nextElement();\n                    final byte[] mac = net.getHardwareAddress();\n                    if (mac == null) continue;\n                    for (final byte b : mac) {\n                        sb.append(String.format(\"%02X\", b));\n                    }\n                    break;\n                }\n            } else {\n                final byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (final byte b : mac) {\n                        sb.append(String.format(\"%02X\", b));\n                    }\n                }\n            }\n\n            final MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            final byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            final StringBuilder fingerprint = new StringBuilder();\n            for (final byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (final Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "187", "src_id": "M135", "code": "\n    private void setCommonMetadata(final PDDocument pdf, final PdfMetadata pdfMetadata) {\n        pdf.getDocumentInformation().setTitle(pdfMetadata.getTitle());\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata()\n                && runningProOrHigher) {\n            author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "188", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            final boolean isDocker = runningInDocker();\n            final boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            final boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n            if (isKubernetes) return \"Kubernetes\";\n            if (isDocker) return \"Docker\";\n            if (!isBrowserOpen) return \"Server-jar\";\n\n            final String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n            if (os.contains(\"win\")) return \"Client-windows\";\n            if (os.contains(\"mac\")) return \"Client-mac\";\n            return \"Client-unix\";\n        } catch (final Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "189", "src_id": "M101", "code": "\n    private void processRequest(\n            final int limitPerDay,\n            final String identifier,\n            final Map<String, Bucket> buckets,\n            final HttpServletRequest request,\n            final HttpServletResponse response,\n            final FilterChain filterChain)\n            throws IOException, ServletException {\n        final Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        final ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        if (!probe.isConsumed()) {\n            final long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", String.valueOf(waitForRefill));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n            return;\n        }\n        response.setHeader(\"X-Rate-Limit-Remaining\", String.valueOf(probe.getRemainingTokens()));\n        filterChain.doFilter(request, response);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "190", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\")\n    @ResizeMode\n    public static int nextResizeModeAndSaveToPrefs(Player player, @ResizeMode int resizeMode) {\n        int newResizeMode;\n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n        }\n        player.getPrefs().edit().putInt(\n                player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n        return newResizeMode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "191", "src_id": "M424", "code": "\n    @Override\n    public void onBroadcastReceived(Intent intent) {\n        super.onBroadcastReceived(intent);\n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            closeItemsList();  // Prevent oversized layout after orientation change\n        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            if (!fragmentIsVisible) onFragmentStopped();  // Handle external play commands\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n            fragmentIsVisible = false;\n            onFragmentStopped();\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            fragmentIsVisible = true;\n            player.useVideoSource(true);  // Restore video source\n            if (!isControlsVisible()) hideSystemUIIfNeeded();  // Hide system UI if needed\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "192", "src_id": "M900", "code": "\n    @StyleRes\n    public static int getSettingsThemeStyle(Context context) {\n        Resources res = context.getResources();\n        String lightTheme = res.getString(R.string.light_theme_key);\n        String blackTheme = res.getString(R.string.black_theme_key);\n        String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n        String selectedTheme = getSelectedThemeKey(context);\n        if (selectedTheme.equals(lightTheme)) return R.style.LightSettingsTheme;\n        else if (selectedTheme.equals(blackTheme)) return R.style.BlackSettingsTheme;\n        else if (selectedTheme.equals(automaticDeviceTheme)) {\n            if (isDeviceDarkThemeEnabled(context)) {\n                String selectedNightTheme = getSelectedNightThemeKey(context);\n                return selectedNightTheme.equals(blackTheme) \n                    ? R.style.BlackSettingsTheme \n                    : R.style.DarkSettingsTheme;\n            } else return R.style.LightSettingsTheme;\n        } else return R.style.DarkSettingsTheme;  // Default\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "193", "src_id": "M895", "code": "\n    public Bitmap transform(Bitmap source) {\n        if (DEBUG) Log.d(TAG, \"Thumbnail - transform() called\");\n        \n        float notificationThumbnailWidth = Math.min(\n            context.getResources().getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth()\n        );\n        \n        Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight() / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true\n        );\n\n        if (result == source || !result.isMutable()) {\n            Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight() / (source.getWidth() / (notificationThumbnailWidth - 1))),\n                null,\n                true\n            );\n            source.recycle();\n            return copied;\n        } else {\n            source.recycle();\n            return result;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "194", "src_id": "M225", "code": "\n    private void onBroadcastReceived(Intent intent) {\n        if (intent == null || intent.getAction() == null) return;\n        if (DEBUG) Log.d(TAG, \"onBroadcastReceived: intent = [\" + intent + \"]\");\n\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY: pause(); break;\n            case ACTION_CLOSE: service.destroyPlayerAndStopService(); break;\n            case ACTION_PLAY_PAUSE: playPause(); break;\n            case ACTION_PLAY_PREVIOUS: playPrevious(); break;\n            case ACTION_PLAY_NEXT: playNext(); break;\n            case ACTION_FAST_REWIND: fastRewind(); break;\n            case ACTION_FAST_FORWARD: fastForward(); break;\n            case ACTION_REPEAT: cycleNextRepeatMode(); break;\n            case ACTION_SHUFFLE: toggleShuffleModeEnabled(); break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n                if (DEBUG) Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                break;\n        }\n        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "195", "src_id": "M749", "code": "\n    private static void handleError(Context context, ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) errorInfo.getThrowable().printStackTrace();\n\n        Throwable t = errorInfo.getThrowable();\n        if (t instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            context.startActivity(new Intent(context, ReCaptchaActivity.class)\n                .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK));\n        } else if (t != null && ExceptionUtils.isNetworkRelated(t)) {\n            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } else if (t instanceof AgeRestrictedContentException) {\n            Toast.makeText(context, R.string.restricted_video_no_stream, Toast.LENGTH_LONG).show();\n        } else if (t instanceof GeographicRestrictionException) {\n            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n        } else if (t instanceof PaidContentException) {\n            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n        } else if (t instanceof PrivateContentException) {\n            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n        } else if (t instanceof SoundCloudGoPlusContentException) {\n            Toast.makeText(context, R.string.soundcloud_go_plus_content, Toast.LENGTH_LONG).show();\n        } else if (t instanceof YoutubeMusicPremiumContentException) {\n            Toast.makeText(context, R.string.youtube_music_premium_content, Toast.LENGTH_LONG).show();\n        } else if (t instanceof ContentNotAvailableException) {\n            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n        } else if (t instanceof ContentNotSupportedException) {\n            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n        } else ErrorUtil.createNotification(context, errorInfo);\n\n        if (context instanceof RouterActivity) ((RouterActivity) context).finish();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "196", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull Context context,\n                                              @NonNull FragmentManager fragmentManager,\n                                              int serviceId,\n                                              @Nullable String url,\n                                              @NonNull String title,\n                                              @Nullable PlayQueue playQueue,\n                                              boolean switchingPlayers) {\n        \n        boolean autoPlay;\n        PlayerType playerType = PlayerHolder.getInstance().getType();\n        if (playerType == null) autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        else if (switchingPlayers) autoPlay = PlayerHolder.getInstance().isPlaying();\n        else if (playerType == PlayerType.MAIN) autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        else autoPlay = false;\n\n        RunnableWithVideoDetailFragment onReady = detailFragment -> {\n            expandMainPlayer(detailFragment.requireActivity());\n            detailFragment.setAutoPlay(autoPlay);\n            if (switchingPlayers) {\n                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP || \n                    PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n            } else detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n            detailFragment.scrollToTop();\n        };\n\n        Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onReady.run((VideoDetailFragment) fragment);\n        } else {\n            VideoDetailFragment instance = VideoDetailFragment\n                .getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n            defaultTransaction(fragmentManager)\n                .replace(R.id.fragment_player_holder, instance)\n                .runOnCommit(() -> onReady.run(instance))\n                .commit();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "197", "src_id": "M698", "code": "\n    @Override\n    public void handleResult(@NonNull ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelBannerImage);\n        } else binding.channelBannerImage.setImageDrawable(null);  // Conserve space\n\n        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.subChannelAvatarView);\n\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        binding.channelSubscriberView.setText(result.getSubscriberCount() >= 0 \n            ? Localization.shortSubscriberCount(activity, result.getSubscriberCount())\n            : getString(R.string.subscribers_count_not_available));\n\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(getString(R.string.channel_created_by, \n                currentInfo.getParentChannelName()));\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n        channelContentNotSupported = false;\n        for (Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        disposables.clear();\n        if (subscribeButtonMonitor != null) subscribeButtonMonitor.dispose();\n        \n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "198", "src_id": "M379", "code": "\n    @Override\n    public void onTextTracksChanged(@NonNull Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT) || \n            currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null || \n            !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        List<Tracks.Group> textTracks = currentTracks.getGroups().stream()\n            .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n            .collect(Collectors.toList());\n        List<String> availableLanguages = textTracks.stream()\n            .map(Tracks.Group::getMediaTrackGroup)\n            .filter(textTrack -> textTrack.length > 0)\n            .map(textTrack -> textTrack.getFormat(0).language)\n            .collect(Collectors.toList());\n\n        Optional<Format> selectedTracks = textTracks.stream()\n            .filter(Tracks.Group::isSelected)\n            .filter(info -> info.getMediaTrackGroup().length >= 1)\n            .map(info -> info.getMediaTrackGroup().getFormat(0))\n            .findFirst();\n\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(\n                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else binding.captionTextView.setText(selectedTracks.get().language);\n        binding.captionTextView.setVisibility(\n            availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "199", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(Context context, @NonNull List<Image> images) {\n        return PicassoHelper.loadThumbnail(images).transform(new Transformation() {\n            @Override\n            public Bitmap transform(Bitmap source) {\n                if (DEBUG) Log.d(TAG, \"Thumbnail - transform() called\");\n                \n                float notificationThumbnailWidth = Math.min(\n                    context.getResources().getDimension(R.dimen.player_notification_thumbnail_width),\n                    source.getWidth());\n                \n                Bitmap result = BitmapCompat.createScaledBitmap(\n                    source,\n                    (int) notificationThumbnailWidth,\n                    (int) (source.getHeight() / (source.getWidth() / notificationThumbnailWidth)),\n                    null,\n                    true);\n\n                if (result == source || !result.isMutable()) {\n                    Bitmap copied = BitmapCompat.createScaledBitmap(\n                        source,\n                        (int) notificationThumbnailWidth - 1,\n                        (int) (source.getHeight() / (source.getWidth() / (notificationThumbnailWidth - 1))),\n                        null,\n                        true);\n                    source.recycle();\n                    return copied;\n                } else {\n                    source.recycle();\n                    return result;\n                }\n            }\n\n            @Override\n            public String key() {\n                return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n            }\n        });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "200", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        final Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (final Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "201", "src_id": "M1031", "code": "\n    void establishConnection(final int threadId, @NonNull final HttpURLConnection conn) throws IOException, HttpError {\n        final int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "202", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "203", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done = false;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            final long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            final int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            final byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // if thread goes interrupted check if the last part is written\n            done = len == -1;\n        } catch (final Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams: recover expired URL\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run(); // try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "204", "src_id": "M1141", "code": "\n    private void flushAuxiliar(final long amount) throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        final boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        final byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move excess data to beginning of file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "205", "src_id": "M1106", "code": "\n    private void showError(@NonNull final DownloadMission mission, @NonNull final UserAction action, @StringRes final int reason) {\n        final StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (final MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                       .append(recovery.toString())\n                       .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        final String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (final Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(\n            mContext,\n            new ErrorInfo(\n                ErrorInfo.Companion.throwableToStringList(mission.errObject),\n                action,\n                service,\n                request.toString(),\n                reason\n            )\n        );\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "206", "src_id": "M1067", "code": "\n    void startMission(@NonNull final DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            for (;;) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cannot create download metadata file\");\n                        }\n                    } catch (final IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Save metadata before continuing\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            final boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "207", "src_id": "M1136", "code": "\n    @Override\n    int process(@NonNull final SharpStream out, @NonNull final SharpStream... sources) throws IOException {\n        // check if subtitle is already in srt\n        final String format = getArgumentAt(0, null);\n        final boolean ignoreEmptyFrames = Objects.requireNonNull(getArgumentAt(1, \"true\")).equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            final SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (final Exception err) {\n                Log.e(TAG, \"Subtitle parse failed\", err);\n                return (err instanceof IOException) ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            final byte[] buffer = new byte[8 * 1024];\n            int read;\n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\"Unimplemented subtitle format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "208", "src_id": "M1047", "code": "\n    private void joinForThreads(final int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (final InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // Handle cases where threads might still be alive\n        for (final Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        try {\n            for (final Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                if (DEBUG) {\n                    Log.w(TAG, \"Thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (final InterruptedException e) {\n            throw new RuntimeException(\"Download thread still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "209", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(\n                textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                    .append(escapeHtml(bcc))\n                    .append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "210", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) {\n            return false;\n        }\n\n        try {\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "211", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) {\n                    break;\n                }\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "212", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true);\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\n                \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                markerPositions.size(),\n                attachments.size());\n        }\n\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                    document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "213", "src_id": "M1086", "code": "\npublic static AdminServer createAdminServer() {\n    if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n        try {\n            Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n            Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n            return (AdminServer) adminServer;\n        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | \n                InvocationTargetException | NoSuchMethodException e) {\n            LOG.warn(\"Unable to start JettyAdminServer\", e);\n        } catch (NoClassDefFoundError e) {\n            LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n        }\n    }\n    return new DummyAdminServer();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "214", "src_id": "M1149", "code": "\npublic void run() {\n    try {\n        while (!stopped) {\n            try {\n                select();\n                processAcceptedConnections();\n                processInterestOpsUpdateRequests();\n            } catch (Exception e) {\n                LOG.warn(\"Ignoring unexpected exception\", e);\n            }\n        }\n\n        for (SelectionKey key : selector.keys()) {\n            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n            if (cnxn.isSelectable()) {\n                cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n            }\n            cleanupSelectionKey(key);\n        }\n        SocketChannel accepted;\n        while ((accepted = acceptedQueue.poll()) != null) {\n            fastCloseSock(accepted);\n        }\n        updateQueue.clear();\n    } finally {\n        closeSelector();\n        NIOServerCnxnFactory.this.stop();\n        LOG.info(\"selector thread exited run method\");\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "215", "src_id": "M219", "code": "\npublic static synchronized ZooKeeper getClient(String contextPath,\n        String session, int expireTime) throws IOException {\n    final String connectionId = concat(contextPath, session);\n\n    ZooKeeper zk = zkMap.get(connectionId);\n    if (zk == null) {\n        if (LOG.isInfoEnabled()) {\n            LOG.info(String.format(\"creating new connection for : '%s'\", connectionId));\n        }\n        Endpoint e = contextMap.get(contextPath);\n        zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n        \n        for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n            zk.addAuthInfo(\"digest\", String.format(\"%s:%s\", p.getKey(), p.getValue()).getBytes());\n        }\n        \n        zkMap.put(connectionId, zk);\n\n        if (session != null) {\n            zkSessionTimers.put(connectionId, new SessionTimerTask(expireTime, session, contextPath, timer));\n        }\n    }\n    return zk;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "216", "src_id": "M192", "code": "\nprivate void init() throws IOException {\n    File f = new File(file);\n    SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n    Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n    String lastentry = null;\n\n    try (RandomAccessFileReader in = new RandomAccessFileReader(f)) {\n        long lastFp = in.getPosition();\n        String line = in.readLine();\n        Matcher m;\n\n        if (line != null && (m = timep.matcher(line)).lookingAt()) {\n            starttime = timestampFromText(dateformat, m.group(1));\n            lastentry = line;\n        } else {\n            throw new IOException(\"Invalid log format. First line doesn't start with time\");\n        }\n\n        while (line != null) {\n            m = timep.matcher(line);\n            if (m.lookingAt()) {\n                if (size % skipN == 0) {\n                    long time = timestampFromText(dateformat, m.group(1));\n                    skiplist.addMark(time, lastFp, size);\n                }\n                size++;\n                lastentry = line;\n            }\n            if (serverid == 0) {\n                Matcher idMatcher = idp.matcher(line);\n                if (idMatcher.find()) {\n                    serverid = Integer.valueOf(idMatcher.group(1));\n                }\n            }\n\n            lastFp = in.getPosition();\n            line = in.readLine();\n        }\n    } catch (EOFException eof) {\n        // ignore\n    }\n\n    if (lastentry == null) {\n        throw new IOException(\"No entries found\");\n    }\n\n    Matcher endMatcher = timep.matcher(lastentry);\n    if (endMatcher.lookingAt()) {\n        endtime = timestampFromText(dateformat, endMatcher.group(1));\n    } else {\n        throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "217", "src_id": "M235", "code": "\n@POST\n@Produces({ MediaType.APPLICATION_JSON, \"application/javascript\", MediaType.APPLICATION_XML })\npublic Response createSession(@QueryParam(\"op\") String op,\n        @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n        @Context UriInfo ui) {\n    if (!\"create\".equals(op)) {\n        throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\n                .entity(new ZError(ui.getRequestUri().toString(), \"\")).build());\n    }\n\n    int expireInSeconds;\n    try {\n        expireInSeconds = Integer.parseInt(expire);\n    } catch (NumberFormatException e) {\n        throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).build());\n    }\n\n    String uuid = UUID.randomUUID().toString();\n    while (ZooKeeperService.isConnected(contextPath, uuid)) {\n        uuid = UUID.randomUUID().toString();\n    }\n\n    try {\n        ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n    } catch (IOException e) {\n        LOG.error(\"Failed while trying to create a new session\", e);\n        throw new WebApplicationException(Response.status(Response.Status.INTERNAL_SERVER_ERROR).build());\n    }\n\n    URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n    return Response.created(uri)\n            .entity(new JSONWithPadding(new ZSession(uuid, uri.toString())))\n            .build();\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "218", "src_id": "M942", "code": "\npublic void schedule(WorkRequest workRequest, long id) {\n    if (stopped) {\n        workRequest.cleanup();\n        return;\n    }\n\n    ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n    int size = workers.size();\n    if (size > 0) {\n        try {\n            int workerNum = ((int) (id % size) + size) % size;\n            ExecutorService worker = workers.get(workerNum);\n            worker.execute(scheduledWorkRequest);\n        } catch (RejectedExecutionException e) {\n            LOG.warn(\"ExecutorService rejected execution\", e);\n            workRequest.cleanup();\n        }\n    } else {\n        scheduledWorkRequest.run();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "219", "src_id": "M520", "code": "\n@Override\npublic void close() throws IOException {\n    boolean triedToClose = false, success = false;\n    try {\n        flush();\n        ((FileOutputStream) out).getFD().sync();\n\n        triedToClose = true;\n        super.close();\n        success = true;\n    } finally {\n        if (success) {\n            boolean renamed = tmpFile.renameTo(origFile);\n            if (!renamed) {\n                if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                    throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                }\n            }\n        } else {\n            if (!triedToClose) {\n                IOUtils.closeStream(out);\n            }\n            if (!tmpFile.delete()) {\n                LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n            }\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "220", "src_id": "M186", "code": "\nprivate synchronized LogEntry readNextEntry() {\n    try {\n        try {\n            while (true) {\n                String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                Matcher m = src.timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (buf.length() > 0) {\n                        LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                        buf = line;\n                        return e;\n                    }\n                    buf = line;\n                } else if (buf.length() > 0) {\n                    buf += line + \"\\n\";\n                }\n            }\n        } catch (EOFException eof) {\n            // ignore\n        }\n        if (buf.length() > 0) {\n            LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n            buf = \"\";\n            return e;\n        }\n    } catch (Exception e) {\n        LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n        return null;\n    }\n    return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "221", "src_id": "M478", "code": "\npublic static void main(String[] args) {\n    if (args.length < 3) {\n        usage();\n        return;\n    }\n    String host = args[0];\n    int port = Integer.parseInt(args[1]);\n    String op = args[2].toLowerCase();\n\n    switch (op) {\n        case \"gettracemask\":\n            getTraceMask(host, port);\n            break;\n        case \"settracemask\":\n            setTraceMask(host, port, args[3]);\n            break;\n        case \"ruok\":\n            ruok(host, port);\n            break;\n        case \"kill\":\n            kill(host, port);\n            break;\n        case \"stat\":\n            stat(host, port);\n            break;\n        case \"dump\":\n            dump(host, port);\n            break;\n        default:\n            System.out.println(\"Unrecognized op: \" + op);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "222", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            return new DummyAdminServer();\n        }\n\n        try {\n            final Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n            final Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n            return (AdminServer) adminServer;\n        } catch (ClassNotFoundException | NoClassDefFoundError e) {\n            LOG.warn(\"Unable to load JettyAdminServer\", e);\n        } catch (InstantiationException | IllegalAccessException | \n                 InvocationTargetException | NoSuchMethodException e) {\n            LOG.warn(\"Unable to instantiate JettyAdminServer\", e);\n        }\n        \n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "223", "src_id": "M1149", "code": "\n        @Override\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections pending on selector\n                for (final SelectionKey key : selector.keys()) {\n                    final NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                \n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"Selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "224", "src_id": "M219", "code": "\n    synchronized public static ZooKeeper getClient(final String contextPath,\n            final String session, final int expireTime) throws IOException {\n        final String connectionId = concat(contextPath, session);\n        ZooKeeper zk = zkMap.get(connectionId);\n        if (zk != null) {\n            return zk;\n        }\n\n        if (LOG.isInfoEnabled()) {\n            LOG.info(String.format(\"Creating new connection for: '%s'\", connectionId));\n        }\n        final Endpoint e = contextMap.get(contextPath);\n        zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n        \n        for (final Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n            zk.addAuthInfo(\"digest\", String.format(\"%s:%s\", p.getKey(), p.getValue()).getBytes());\n        }\n        \n        zkMap.put(connectionId, zk);\n\n        if (session != null) {\n            zkSessionTimers.put(connectionId, new SessionTimerTask(\n                    expireTime, session, contextPath, timer));\n        }\n        return zk;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "225", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        final File f = new File(file);\n        try (final RandomAccessFileReader in = new RandomAccessFileReader(f)) {\n            final SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n            final Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n            long lastFp = in.getPosition();\n            String line = in.readLine();\n            Matcher m = null;\n\n            if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n                starttime = timestampFromText(dateformat, m.group(1));\n            } else {\n                throw new IOException(\"Invalid log format. First line doesn't start with time\");\n            }\n\n            // Count log entries\n            String lastentry = line;\n            try {\n                while (line != null) {\n                    m = timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (size % skipN == 0) {\n                            final long time = timestampFromText(dateformat, m.group(1));\n                            skiplist.addMark(time, lastFp, size);\n                        }\n                        size++;\n                        lastentry = line;\n                    } \n                    if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                        serverid = Integer.valueOf(m.group(1));\n                    }\n\n                    lastFp = in.getPosition();\n                    line = in.readLine();\n                }\n            } catch (EOFException eof) {\n                // End of file\n            }\n            \n            m = timep.matcher(lastentry);\n            if (m.lookingAt()) {\n                endtime = timestampFromText(dateformat, m.group(1));\n            } else {\n                throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "226", "src_id": "M235", "code": "\n    @POST\n    @Produces({ MediaType.APPLICATION_JSON, \"application/javascript\", MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") final String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") final String expire,\n            @Context final UriInfo ui) {\n        if (!\"create\".equals(op)) {\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\n                    .entity(new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed to create new session\", e);\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        final URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri)\n                .entity(new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "227", "src_id": "M942", "code": "\n    public void schedule(final WorkRequest workRequest, final long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        final ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n        final int size = workers.size();\n        if (size == 0) {\n            scheduledWorkRequest.run();\n            return;\n        }\n\n        try {\n            final int workerNum = ((int) (id % size) + size) % size;\n            final ExecutorService worker = workers.get(workerNum);\n            worker.execute(scheduledWorkRequest);\n        } catch (RejectedExecutionException e) {\n            LOG.warn(\"ExecutorService rejected execution\", e);\n            workRequest.cleanup();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "228", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false;\n        boolean success = false;\n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                if (!tmpFile.renameTo(origFile) && \n                    (!origFile.delete() || !tmpFile.renameTo(origFile))) {\n                    throw new IOException(String.format(\n                        \"Could not rename temporary file %s to %s\", tmpFile, origFile));\n                }\n            } else {\n                if (!triedToClose) {\n                    IOUtils.closeStream(out);\n                }\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file: {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "229", "src_id": "M186", "code": "\n    synchronized private LogEntry readNextEntry() {\n        try {\n            while (true) {\n                final String line = in.readLine();\n                if (line == null) {\n                    break;\n                }\n\n                final Matcher m = src.timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (buf.length() > 0) {\n                        final LogEntry e = new Log4JEntry(\n                            src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                        buf = line;\n                        return e;\n                    }\n                    buf = line;\n                } else if (buf.length() > 0) {\n                    buf += line + \"\\n\";\n                }\n            }\n            \n            if (buf.length() > 0) {\n                return new Log4JEntry(\n                    src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n            }\n        } catch (EOFException eof) {\n            // End of file\n        } catch (Exception e) {\n            LOG.error(\"Error reading next entry in file {}: {}\", src.file, e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "230", "src_id": "M478", "code": "\n    public static void main(final String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        final String host = args[0];\n        final int port = Integer.parseInt(args[1]);\n        final String op = args[2];\n        \n        switch (op.toLowerCase()) {\n            case \"gettracemask\":\n                getTraceMask(host, port);\n                break;\n            case \"settracemask\":\n                setTraceMask(host, port, args[3]);\n                break;\n            case \"ruok\":\n                ruok(host, port);\n                break;\n            case \"kill\":\n                kill(host, port);\n                break;\n            case \"stat\":\n                stat(host, port);\n                break;\n            case \"dump\":\n                dump(host, port);\n                break;\n            default:\n                System.out.println(String.format(\"Unrecognized op: %s\", op));\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "231", "src_id": "M1043", "code": "\nprivate void doPostprocessing() {\n    errCode = ERROR_NOTHING;\n    errObject = null;\n    final Thread thread = Thread.currentThread();\n\n    notifyPostProcessing(1);\n\n    if (DEBUG) {\n        thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n    }\n\n    Exception exception = null;\n\n    try {\n        psAlgorithm.run(this);\n    } catch (Exception err) {\n        Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n        if (err instanceof InterruptedIOException \n                || err instanceof ClosedByInterruptException \n                || thread.isInterrupted()) {\n            notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n            return;\n        }\n\n        if (errCode == ERROR_NOTHING) {\n            errCode = ERROR_POSTPROCESSING;\n        }\n\n        exception = err;\n    } finally {\n        notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n    }\n\n    if (errCode != ERROR_NOTHING) {\n        if (exception == null) {\n            exception = errObject;\n        }\n        notifyError(ERROR_POSTPROCESSING, exception);\n        return;\n    }\n\n    notifyFinished();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "232", "src_id": "M1031", "code": "\nvoid establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n    int statusCode = conn.getResponseCode();\n\n    if (DEBUG) {\n        Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n        Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n        Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n        Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n    }\n\n    switch (statusCode) {\n        case 204:\n        case 205:\n        case 207:\n            throw new HttpError(statusCode);\n        case 416:\n            return; // let the download thread handle this error\n        default:\n            if (statusCode < 200 || statusCode > 299) {\n                throw new HttpError(statusCode);\n            }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "233", "src_id": "M827", "code": "\nprivate Elst parseEdts(final Box ref) throws IOException {\n    final Box b = untilBox(ref, ATOM_ELST);\n    if (b == null) {\n        return null;\n    }\n\n    final Elst obj = new Elst();\n\n    final boolean v1 = stream.read() == 1;\n    stream.skipBytes(3); // flags\n\n    final int entryCount = stream.readInt();\n    if (entryCount < 1) {\n        obj.bMediaRate = 0x00010000; // default media rate (1.0)\n        return obj;\n    }\n\n    if (v1) {\n        stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n        obj.mediaTime = stream.readLong();\n        // ignore all remaining entries\n        stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n    } else {\n        stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n        obj.mediaTime = stream.readInt();\n    }\n\n    obj.bMediaRate = stream.readInt();\n\n    return obj;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "234", "src_id": "M1048", "code": "\n@Override\npublic void run() {\n    boolean done;\n    long start = mMission.fallbackResumeOffset;\n\n    if (DEBUG && !mMission.unknownLength && start > 0) {\n        Log.i(TAG, \"Resuming a single-thread download at \" + start);\n    }\n\n    try {\n        long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n        int mId = 1;\n        mConn = mMission.openConnection(false, rangeStart, -1);\n\n        if (mRetryCount == 0 && rangeStart == -1) {\n            // workaround: bypass Android connection pool\n            mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n        }\n\n        mMission.establishConnection(mId, mConn);\n\n        // check if the download can be resumed\n        if (mConn.getResponseCode() == 416 && start > 0) {\n            mMission.notifyProgress(-start);\n            start = 0;\n            mRetryCount--;\n            throw new DownloadMission.HttpError(416);\n        }\n\n        // secondary check for the file length\n        if (!mMission.unknownLength) {\n            mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n        }\n\n        if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n            // restart amount of bytes downloaded\n            mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n        }\n\n        mF = mMission.storage.getStream();\n        mF.seek(mMission.offsets[mMission.current] + start);\n\n        mIs = mConn.getInputStream();\n\n        byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n        int len = 0;\n\n        while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n            mF.write(buf, 0, len);\n            start += len;\n            mMission.notifyProgress(len);\n        }\n\n        dispose();\n\n        // if thread goes interrupted check if last part is written\n        done = len == -1;\n    } catch (Exception e) {\n        dispose();\n\n        mMission.fallbackResumeOffset = start;\n\n        if (!mMission.running || e instanceof ClosedByInterruptException) {\n            return;\n        }\n\n        if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n            // for YouTube streams: URL expired, recover\n            dispose();\n            mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n            return;\n        }\n\n        if (mRetryCount++ >= mMission.maxRetry) {\n            mMission.notifyError(e);\n            return;\n        }\n\n        if (DEBUG) {\n            Log.e(TAG, \"got exception, retrying...\", e);\n        }\n\n        run(); // try again\n        return;\n    }\n\n    if (done) {\n        mMission.notifyFinished();\n    } else {\n        mMission.fallbackResumeOffset = start;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "235", "src_id": "M1141", "code": "\nprivate void flushAuxiliar(long amount) throws IOException {\n    if (aux.length < 1) {\n        return;\n    }\n\n    out.flush();\n    aux.flush();\n\n    boolean underflow = aux.offset < aux.length || out.offset < out.length;\n    byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n    aux.target.seek(0);\n    out.target.seek(out.length);\n\n    long length = amount;\n    while (length > 0) {\n        int read = (int) Math.min(length, Integer.MAX_VALUE);\n        read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n        if (read < 1) {\n            amount -= length;\n            break;\n        }\n\n        out.writeProof(buffer, read);\n        length -= read;\n    }\n\n    if (underflow) {\n        if (out.offset >= out.length) {\n            // calculate aux underflow pointer\n            if (aux.offset < amount) {\n                out.offset += aux.offset;\n                aux.offset = 0;\n                out.target.seek(out.offset);\n            } else {\n                aux.offset -= amount;\n                out.offset = out.length + amount;\n            }\n        } else {\n            aux.offset = 0;\n        }\n    } else {\n        out.offset += amount;\n        aux.offset -= amount;\n    }\n\n    out.length += amount;\n\n    if (out.length > maxLengthKnown) {\n        maxLengthKnown = out.length;\n    }\n\n    if (amount < aux.length) {\n        // move excess data to beginning of file\n        long readOffset = amount;\n        long writeOffset = 0;\n\n        aux.length -= amount;\n        length = aux.length;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            aux.target.seek(writeOffset);\n            aux.writeProof(buffer, read);\n\n            writeOffset += read;\n            readOffset += read;\n            length -= read;\n\n            aux.target.seek(readOffset);\n        }\n\n        aux.target.setLength(aux.length);\n        return;\n    }\n\n    if (aux.length > THRESHOLD_AUX_LENGTH) {\n        aux.target.setLength(THRESHOLD_AUX_LENGTH); // or setLength(0)\n    }\n\n    aux.reset();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "236", "src_id": "M1106", "code": "\nprivate void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n    StringBuilder request = new StringBuilder(256);\n    request.append(mission.source);\n\n    request.append(\" [\");\n    if (mission.recoveryInfo != null) {\n        for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n            request.append(' ')\n                    .append(recovery.toString())\n                    .append(' ');\n        }\n    }\n    request.append(\"]\");\n\n    String service;\n    try {\n        service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n    } catch (Exception e) {\n        service = ErrorInfo.SERVICE_NONE;\n    }\n\n    ErrorUtil.createNotification(\n            mContext,\n            new ErrorInfo(\n                    ErrorInfo.Companion.throwableToStringList(mission.errObject),\n                    action,\n                    service,\n                    request.toString(),\n                    reason\n            )\n    );\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "237", "src_id": "M1067", "code": "\nvoid startMission(DownloadMission mission) {\n    synchronized (this) {\n        mission.timestamp = System.currentTimeMillis();\n        mission.mHandler = mHandler;\n        mission.maxRetry = mPrefMaxRetry;\n\n        // create metadata file\n        while (true) {\n            mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n            if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                try {\n                    if (!mission.metadata.createNewFile()) {\n                        throw new RuntimeException(\"Cannot create download metadata file\");\n                    }\n                } catch (IOException e) {\n                    throw new RuntimeException(e);\n                }\n                break;\n            }\n            mission.timestamp = System.currentTimeMillis();\n        }\n\n        mSelfMissionsControl = true;\n        mMissionsPending.add(mission);\n\n        // save metadata before continuing\n        Utility.writeToFile(mission.metadata, mission);\n\n        if (mission.storage == null) {\n            // nothing to do here\n            mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n            if (mission.errObject != null) {\n                mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n            }\n            return;\n        }\n\n        boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n        if (canDownloadInCurrentNetwork() && start) {\n            mission.start();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "238", "src_id": "M1136", "code": "\n@Override\nint process(SharpStream out, SharpStream... sources) throws IOException {\n    // check if subtitle is already in SRT format\n    String format = getArgumentAt(0, null);\n    boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n    if (format == null || format.equals(\"ttml\")) {\n        SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n        try {\n            writer.build(sources[0]);\n        } catch (Exception err) {\n            Log.e(TAG, \"Subtitle parse failed\", err);\n            return err instanceof IOException ? 1 : 8;\n        }\n\n        return OK_RESULT;\n    } else if (format.equals(\"srt\")) {\n        byte[] buffer = new byte[8 * 1024];\n        int read;\n        while ((read = sources[0].read(buffer)) > 0) {\n            out.write(buffer, 0, read);\n        }\n        return OK_RESULT;\n    }\n\n    throw new UnsupportedOperationException(\"Unimplemented subtitle format: \" + format);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "239", "src_id": "M1047", "code": "\nprivate void joinForThreads(int millis) {\n    final Thread currentThread = Thread.currentThread();\n\n    if (init != null && init != currentThread && init.isAlive()) {\n        init.interrupt();\n\n        if (millis > 0) {\n            try {\n                init.join(millis);\n            } catch (InterruptedException e) {\n                Log.w(TAG, \"Initializer thread is still running\", e);\n                return;\n            }\n        }\n    }\n\n    // if thread alive, possible reasons:\n    //   - slow device\n    //   - user spamming start/pause\n    //   - start() called quickly after pause()\n    for (Thread thread : threads) {\n        if (!thread.isAlive() || thread == Thread.currentThread()) {\n            continue;\n        }\n        thread.interrupt();\n    }\n\n    try {\n        for (Thread thread : threads) {\n            if (!thread.isAlive()) {\n                continue;\n            }\n            if (DEBUG) {\n                Log.w(TAG, \"Thread alive: \" + thread.getName());\n            }\n            if (millis > 0) {\n                thread.join(millis);\n            }\n        }\n    } catch (InterruptedException e) {\n        throw new RuntimeException(\"Download thread still running\", e);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "240", "src_id": "M66", "code": "\nvoid drain() {\n    // Early exit if drain operation already in progress\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missedCounter = 1;\n    Observer<? super R> currentDownstream = this.downstream;\n    AtomicThrowable errorContainer = this.errors;\n    AtomicReference<SwitchMapMaybeObserver<R>> innerObserverRef = this.inner;\n\n    for (;;) {\n        for (;;) {\n            // Terminate immediately if cancellation requested\n            if (cancelled) {\n                return;\n            }\n\n            // Handle errors based on delay strategy\n            if (errorContainer.get() != null) {\n                if (!delayErrors) {\n                    errorContainer.tryTerminateConsumer(currentDownstream);\n                    return;\n                }\n            }\n\n            boolean isDone = done;\n            SwitchMapMaybeObserver<R> currentInner = innerObserverRef.get();\n            boolean noInnerData = currentInner == null;\n\n            // Terminate when upstream completes and no inner values remain\n            if (isDone && noInnerData) {\n                errorContainer.tryTerminateConsumer(currentDownstream);\n                return;\n            }\n\n            // Skip processing if no valid inner item\n            if (noInnerData || currentInner.item == null) {\n                break;\n            }\n\n            // Clear processed inner reference\n            innerObserverRef.compareAndSet(currentInner, null);\n\n            // Emit value downstream\n            currentDownstream.onNext(currentInner.item);\n        }\n\n        // Update missed counter and exit if drained\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "241", "src_id": "M1333", "code": "\n@Override\npublic void onNext(T inputValue) {\n    // Skip processing if completion already signaled\n    if (done) {\n        return;\n    }\n    \n    boolean predicateResult;\n    try {\n        // Apply predicate to current value\n        predicateResult = predicate.test(inputValue);\n    } catch (Throwable error) {\n        // Handle predicate errors\n        Exceptions.throwIfFatal(error);\n        upstream.cancel();\n        upstream = SubscriptionHelper.CANCELLED;\n        onError(error);\n        return;\n    }\n\n    // Handle failed predicate condition\n    if (!predicateResult) {\n        done = true;\n        upstream.cancel();\n        upstream = SubscriptionHelper.CANCELLED;\n        downstream.onSuccess(false);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "242", "src_id": "M522", "code": "\nvoid drainLoop() {\n    Observer<? super T> downstreamObserver = this.downstream;\n    int missedCounter = 1;\n    \n    for (;;) {\n        for (;;) {\n            // Clean resources and exit on cancellation\n            if (disposed) {\n                singleItem = null;\n                queue = null;\n                return;\n            }\n\n            // Propagate errors immediately\n            if (errors.get() != null) {\n                singleItem = null;\n                queue = null;\n                errors.tryTerminateConsumer(downstreamObserver);\n                return;\n            }\n\n            // Process inner state values\n            int otherValueState = otherState;\n            if (otherValueState == OTHER_STATE_HAS_VALUE) {\n                T currentValue = singleItem;\n                singleItem = null;\n                otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                otherValueState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                downstreamObserver.onNext(currentValue);\n            }\n\n            // Check main completion and queue state\n            boolean mainCompletion = mainDone;\n            SimplePlainQueue<T> valueQueue = queue;\n            T nextValue = valueQueue != null ? valueQueue.poll() : null;\n            boolean queueEmpty = nextValue == null;\n\n            // Final completion check\n            if (mainCompletion && queueEmpty && otherValueState == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                queue = null;\n                downstreamObserver.onComplete();\n                return;\n            }\n\n            // Break loop if no values available\n            if (queueEmpty) {\n                break;\n            }\n\n            // Emit next value\n            downstreamObserver.onNext(nextValue);\n        }\n\n        // Update missed counter and exit if drained\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "243", "src_id": "M1163", "code": "\n@Override\nvoid drain() {\n    // Skip if drain already in progress\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missedCounter = 1;\n    final SimplePlainQueue<Object> eventQueue = this.queue;\n    final Subscriber<? super Flowable<T>> downstreamSubscriber = this.downstream;\n    UnicastProcessor<T> currentWindow = this.window;\n\n    for (;;) {\n        // Handle cancellation cleanup\n        if (upstreamCancelled) {\n            eventQueue.clear();\n            currentWindow = null;\n            this.window = null;\n        } else {\n            // Process queue items\n            boolean upstreamComplete = done;\n            Object event = eventQueue.poll();\n            boolean noEvents = event == null;\n\n            // Final termination check\n            if (upstreamComplete && noEvents) {\n                Throwable errorCause = error;\n                if (errorCause != null) {\n                    if (currentWindow != null) {\n                        currentWindow.onError(errorCause);\n                    }\n                    downstreamSubscriber.onError(errorCause);\n                } else {\n                    if (currentWindow != null) {\n                        currentWindow.onComplete();\n                    }\n                    downstreamSubscriber.onComplete();\n                }\n                cleanupResources();\n                upstreamCancelled = true;\n                continue;\n            } else if (!noEvents) {\n                // Handle boundary events\n                if (event instanceof WindowBoundaryRunnable) {\n                    WindowBoundaryRunnable boundaryEvent = (WindowBoundaryRunnable) event;\n                    if (boundaryEvent.index == emitted || !restartTimerOnMaxSize) {\n                        this.count = 0;\n                        currentWindow = createNewWindow(currentWindow);\n                    }\n                } else if (currentWindow != null) {\n                    // Process data items\n                    @SuppressWarnings(\"unchecked\")\n                    T itemValue = (T) event;\n                    currentWindow.onNext(itemValue);\n\n                    // Update window size counter\n                    long newCount = this.count + 1;\n                    if (newCount == maxSize) {\n                        this.count = 0;\n                        currentWindow = createNewWindow(currentWindow);\n                    } else {\n                        this.count = newCount;\n                    }\n                }\n                continue;\n            }\n        }\n\n        // Update missed counter and exit if drained\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "244", "src_id": "M478", "code": "\nvoid drain() {\n    // Skip if drain already in progress\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missedCounter = 1;\n    EqualObserver<T>[] allObservers = observers;\n\n    final EqualObserver<T> firstObserver = allObservers[0];\n    final SpscLinkedArrayQueue<T> firstQueue = firstObserver.queue;\n    final EqualObserver<T> secondObserver = allObservers[1];\n    final SpscLinkedArrayQueue<T> secondQueue = secondObserver.queue;\n\n    for (;;) {\n        for (;;) {\n            // Cleanup queues on cancellation\n            if (cancelled) {\n                firstQueue.clear();\n                secondQueue.clear();\n                return;\n            }\n\n            // Check observer completion states\n            boolean firstCompleted = firstObserver.done;\n            if (firstCompleted) {\n                Throwable firstError = firstObserver.error;\n                if (firstError != null) {\n                    cancel(firstQueue, secondQueue);\n                    downstream.onError(firstError);\n                    return;\n                }\n            }\n\n            boolean secondCompleted = secondObserver.done;\n            if (secondCompleted) {\n                Throwable secondError = secondObserver.error;\n                if (secondError != null) {\n                    cancel(firstQueue, secondQueue);\n                    downstream.onError(secondError);\n                    return;\n                }\n            }\n\n            // Poll values from queues\n            if (v1 == null) {\n                v1 = firstQueue.poll();\n            }\n            boolean firstEmpty = v1 == null;\n\n            if (v2 == null) {\n                v2 = secondQueue.poll();\n            }\n            boolean secondEmpty = v2 == null;\n\n            // Handle termination conditions\n            if (firstCompleted && secondCompleted && firstEmpty && secondEmpty) {\n                downstream.onSuccess(true);\n                return;\n            }\n            if ((firstCompleted && secondCompleted) && (firstEmpty != secondEmpty)) {\n                cancel(firstQueue, secondQueue);\n                downstream.onSuccess(false);\n                return;\n            }\n\n            // Process available values\n            if (!firstEmpty && !secondEmpty) {\n                boolean comparisonResult;\n                try {\n                    // Compare values using provided comparer\n                    comparisonResult = comparer.test(v1, v2);\n                } catch (Throwable comparisonError) {\n                    Exceptions.throwIfFatal(comparisonError);\n                    cancel(firstQueue, secondQueue);\n                    downstream.onError(comparisonError);\n                    return;\n                }\n\n                // Handle comparison failure\n                if (!comparisonResult) {\n                    cancel(firstQueue, secondQueue);\n                    downstream.onSuccess(false);\n                    return;\n                }\n\n                // Reset values after successful comparison\n                v1 = null;\n                v2 = null;\n            }\n\n            // Break if either queue exhausted\n            if (firstEmpty || secondEmpty) {\n                break;\n            }\n        }\n\n        // Update missed counter and exit if drained\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "245", "src_id": "M885", "code": "\nvoid drainLoop() {\n    int missedCounter = 1;\n    JoinInnerSubscriber<T>[] subscribersArray = this.subscribers;\n    int subscribersCount = subscribersArray.length;\n    Subscriber<? super T> downstreamSubscriber = this.downstream;\n\n    for (;;) {\n        long requestCount = requested.get();\n        long emittedCount = 0L;\n\n        // Inner processing loop\n        middle: while (emittedCount != requestCount) {\n            // Cleanup on cancellation\n            if (cancelled) {\n                cleanup();\n                return;\n            }\n\n            // Propagate errors immediately\n            Throwable errorCause = errors.get();\n            if (errorCause != null) {\n                cleanup();\n                downstreamSubscriber.onError(errorCause);\n                return;\n            }\n\n            boolean upstreamComplete = done.get() == 0;\n            boolean allQueuesEmpty = true;\n\n            // Process values from subscribers\n            for (int i = 0; i < subscribersArray.length; i++) {\n                JoinInnerSubscriber<T> currentSubscriber = subscribersArray[i];\n                SimplePlainQueue<T> subscriberQueue = currentSubscriber.queue;\n                if (subscriberQueue != null) {\n                    T value = subscriberQueue.poll();\n                    if (value != null) {\n                        allQueuesEmpty = false;\n                        downstreamSubscriber.onNext(value);\n                        currentSubscriber.requestOne();\n                        if (++emittedCount == requestCount) {\n                            break middle;\n                        }\n                    }\n                }\n            }\n\n            // Final completion check\n            if (upstreamComplete && allQueuesEmpty) {\n                downstreamSubscriber.onComplete();\n                return;\n            }\n\n            if (allQueuesEmpty) {\n                break;\n            }\n        }\n\n        // Post-emission checks\n        if (emittedCount == requestCount) {\n            // Re-check cancellation and errors\n            if (cancelled) {\n                cleanup();\n                return;\n            }\n\n            Throwable errorCause = errors.get();\n            if (errorCause != null) {\n                cleanup();\n                downstreamSubscriber.onError(errorCause);\n                return;\n            }\n\n            // Check for final completion\n            boolean upstreamComplete = done.get() == 0;\n            boolean allQueuesEmpty = true;\n            for (int i = 0; i < subscribersCount; i++) {\n                JoinInnerSubscriber<T> currentSubscriber = subscribersArray[i];\n                SimpleQueue<T> subscriberQueue = currentSubscriber.queue;\n                if (subscriberQueue != null && !subscriberQueue.isEmpty()) {\n                    allQueuesEmpty = false;\n                    break;\n                }\n            }\n\n            if (upstreamComplete && allQueuesEmpty) {\n                downstreamSubscriber.onComplete();\n                return;\n            }\n        }\n\n        // Update request count if values emitted\n        if (emittedCount != 0L) {\n            BackpressureHelper.produced(requested, emittedCount);\n        }\n\n        // Update missed counter and exit if drained\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "246", "src_id": "M1399", "code": "\n@Override\npublic void drain() {\n    // Skip if drain already in progress\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missedCounter = 1;\n    InnerQueuedSubscriber<R> currentInner = current;\n    Subscriber<? super R> downstreamSubscriber = downstream;\n    ErrorMode errorHandlingMode = errorMode;\n\n    for (;;) {\n        long requestCount = requested.get();\n        long emittedCount = 0L;\n\n        if (currentInner == null) {\n            // Handle errors when no active inner subscriber\n            if (errorHandlingMode != ErrorMode.END) {\n                Throwable errorCause = errors.get();\n                if (errorCause != null) {\n                    cancelAll();\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n            }\n\n            // Check outer completion state\n            boolean outerComplete = done;\n            currentInner = subscribers.poll();\n\n            if (outerComplete && currentInner == null) {\n                errors.tryTerminateConsumer(downstream);\n                return;\n            }\n\n            if (currentInner != null) {\n                current = currentInner;\n            }\n        }\n\n        boolean switchToNextSource = false;\n\n        if (currentInner != null) {\n            SimpleQueue<R> innerQueue = currentInner.queue();\n            if (innerQueue != null) {\n                while (emittedCount != requestCount) {\n                    // Handle cancellation during emission\n                    if (cancelled) {\n                        cancelAll();\n                        return;\n                    }\n\n                    // Immediate error mode handling\n                    if (errorHandlingMode == ErrorMode.IMMEDIATE) {\n                        Throwable errorCause = errors.get();\n                        if (errorCause != null) {\n                            current = null;\n                            currentInner.cancel();\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    // Poll next item from queue\n                    boolean innerComplete = currentInner.isDone();\n                    R value;\n                    try {\n                        value = innerQueue.poll();\n                    } catch (Throwable pollError) {\n                        Exceptions.throwIfFatal(pollError);\n                        current = null;\n                        currentInner.cancel();\n                        cancelAll();\n                        downstreamSubscriber.onError(pollError);\n                        return;\n                    }\n\n                    boolean noValue = value == null;\n\n                    // Handle inner completion\n                    if (innerComplete && noValue) {\n                        currentInner = null;\n                        current = null;\n                        upstream.request(1);\n                        switchToNextSource = true;\n                        break;\n                    }\n\n                    // Break loop if queue empty\n                    if (noValue) {\n                        break;\n                    }\n\n                    // Emit value and request next\n                    downstreamSubscriber.onNext(value);\n                    emittedCount++;\n                    currentInner.request(1L);\n                }\n\n                // Post-emission checks\n                if (emittedCount == requestCount) {\n                    if (cancelled) {\n                        cancelAll();\n                        return;\n                    }\n\n                    // Immediate error re-check\n                    if (errorHandlingMode == ErrorMode.IMMEDIATE) {\n                        Throwable errorCause = errors.get();\n                        if (errorCause != null) {\n                            current = null;\n                            currentInner.cancel();\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    // Handle inner completion after full emission\n                    boolean innerComplete = currentInner.isDone();\n                    boolean queueEmpty = innerQueue.isEmpty();\n                    if (innerComplete && queueEmpty) {\n                        currentInner = null;\n                        current = null;\n                        upstream.request(1);\n                        switchToNextSource = true;\n                    }\n                }\n            }\n        }\n\n        // Update request count if values emitted\n        if (emittedCount != 0L && requestCount != Long.MAX_VALUE) {\n            requested.addAndGet(-emittedCount);\n        }\n\n        if (switchToNextSource) {\n            continue;\n        }\n\n        // Update missed counter and exit if drained\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "247", "src_id": "M469", "code": "\n@SuppressWarnings(\"unchecked\")\nvoid remove(CacheDisposable<T> targetConsumer) {\n    for (;;) {\n        CacheDisposable<T>[] currentConsumers = observers.get();\n        int consumerCount = currentConsumers.length;\n        if (consumerCount == 0) {\n            return;\n        }\n\n        // Find target consumer index\n        int targetIndex = -1;\n        for (int i = 0; i < consumerCount; i++) {\n            if (currentConsumers[i] == targetConsumer) {\n                targetIndex = i;\n                break;\n            }\n        }\n\n        if (targetIndex < 0) {\n            return;\n        }\n\n        // Create new array without target\n        CacheDisposable<T>[] updatedConsumers;\n        if (consumerCount == 1) {\n            updatedConsumers = EMPTY;\n        } else {\n            updatedConsumers = new CacheDisposable[consumerCount - 1];\n            System.arraycopy(currentConsumers, 0, updatedConsumers, 0, targetIndex);\n            System.arraycopy(\n                currentConsumers, \n                targetIndex + 1, \n                updatedConsumers, \n                targetIndex, \n                consumerCount - targetIndex - 1\n            );\n        }\n\n        // Atomic update\n        if (observers.compareAndSet(currentConsumers, updatedConsumers)) {\n            return;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "248", "src_id": "M362", "code": "\nvoid drainFused() {\n    int missedCounter = 1;\n\n    for (;;) {\n        // Exit if disposed\n        if (disposed) {\n            return;\n        }\n\n        // Check completion state\n        boolean upstreamComplete = done;\n        Throwable errorCause = error;\n\n        // Handle immediate errors\n        if (!delayError && upstreamComplete && errorCause != null) {\n            disposed = true;\n            downstream.onError(errorCause);\n            worker.dispose();\n            return;\n        }\n\n        // Signal null for fused mode\n        downstream.onNext(null);\n\n        // Final termination handling\n        if (upstreamComplete) {\n            disposed = true;\n            if (errorCause != null) {\n                downstream.onError(errorCause);\n            } else {\n                downstream.onComplete();\n            }\n            worker.dispose();\n            return;\n        }\n\n        // Update missed counter\n        missedCounter = addAndGet(-missedCounter);\n        if (missedCounter == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "249", "src_id": "M2247", "code": "\n@SuppressWarnings(\"unchecked\")\nvoid remove(PublishSubscription<T> targetSubscription) {\n    for (;;) {\n        PublishSubscription<T>[] currentSubscriptions = subscribers.get();\n        if (currentSubscriptions == TERMINATED || currentSubscriptions == EMPTY) {\n            return;\n        }\n\n        // Find target subscription index\n        int targetIndex = -1;\n        int subscriptionCount = currentSubscriptions.length;\n        for (int i = 0; i < subscriptionCount; i++) {\n            if (currentSubscriptions[i] == targetSubscription) {\n                targetIndex = i;\n                break;\n            }\n        }\n\n        if (targetIndex < 0) {\n            return;\n        }\n\n        // Create updated subscription array\n        PublishSubscription<T>[] updatedSubscriptions;\n        if (subscriptionCount == 1) {\n            updatedSubscriptions = EMPTY;\n        } else {\n            updatedSubscriptions = new PublishSubscription[subscriptionCount - 1];\n            System.arraycopy(currentSubscriptions, 0, updatedSubscriptions, 0, targetIndex);\n            System.arraycopy(\n                currentSubscriptions, \n                targetIndex + 1, \n                updatedSubscriptions, \n                targetIndex, \n                subscriptionCount - targetIndex - 1\n            );\n        }\n\n        // Atomic update\n        if (subscribers.compareAndSet(currentSubscriptions, updatedSubscriptions)) {\n            return;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "250", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n      if (emlBytes == null || emlBytes.length == 0) throw new IllegalArgumentException(\"EML file is empty or null\");\n\n      String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n      String subject = extractBasicHeader(emlContent, \"Subject:\");\n      String from = extractBasicHeader(emlContent, \"From:\");\n      String to = extractBasicHeader(emlContent, \"To:\");\n      String cc = extractBasicHeader(emlContent, \"Cc:\");\n      String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n      String date = extractBasicHeader(emlContent, \"Date:\");\n\n      String htmlBody = extractHtmlBody(emlContent);\n      if (htmlBody == null) {\n        String textBody = extractTextBody(emlContent);\n        htmlBody = convertTextToHtml(textBody != null ? textBody : \"Email content could not be parsed\");\n      }\n\n      StringBuilder html = new StringBuilder();\n      html.append(\"<!DOCTYPE html>\\n\");\n      html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n      html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n      html.append(\"<style>\\n\");\n      appendEnhancedStyles(html);\n      html.append(\"</style>\\n\");\n      html.append(\"</head><body>\\n\");\n\n      html.append(\"<div class=\\\"email-container\\\">\\n\");\n      html.append(\"<div class=\\\"email-header\\\">\\n\");\n      html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n      html.append(\"<div class=\\\"email-meta\\\">\\n\");\n      html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n      html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n      if (request != null && request.isIncludeAllRecipients()) {\n        if (!cc.trim().isEmpty()) {\n          html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n        }\n        if (!bcc.trim().isEmpty()) {\n          html.append(\"<div><strong>BCC:</strong> \")\n              .append(escapeHtml(bcc))\n              .append(\"</div>\\n\");\n        }\n      }\n\n      if (!date.trim().isEmpty()) {\n        html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n      }\n      html.append(\"</div></div>\\n\");\n\n      html.append(\"<div class=\\\"email-body\\\">\\n\");\n      html.append(processEmailHtmlBody(htmlBody));\n      html.append(\"</div>\\n\");\n\n      String attachmentInfo = extractAttachmentInfo(emlContent);\n      if (!attachmentInfo.isEmpty()) {\n        html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n        html.append(\"<h3>Attachments</h3>\\n\");\n        html.append(attachmentInfo);\n\n        if (request != null && request.isIncludeAttachments()) {\n          html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n          html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n          html.append(\"</div>\\n\");\n        } else {\n          html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n          html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n          html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n      }\n\n      assert request != null;\n      if (request.getFileInput().isEmpty()) {\n        html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n        html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n        html.append(\"</div>\\n\");\n      }\n\n      html.append(\"</div>\\n\");\n      html.append(\"</body></html>\");\n\n      return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "251", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n      if (multipart == null) return false;\n\n      try {\n        Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n        if (!multipartInterface.isInstance(multipart)) return false;\n\n        try {\n          Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n          if (mimeMultipartClass.isInstance(multipart)) {\n            log.debug(\"Found MimeMultipart instance for enhanced processing\");\n            return true;\n          }\n        } catch (ClassNotFoundException e) {\n          log.debug(\"MimeMultipart not available, using base Multipart interface\");\n        }\n\n        return true;\n      } catch (ClassNotFoundException e) {\n        log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n        return false;\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "252", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n      try {\n        String[] lines = emlContent.split(\"\\r?\\n\");\n        for (int i = 0; i < lines.length; i++) {\n          String line = lines[i];\n          if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n            StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n            for (int j = i + 1; j < lines.length; j++) {\n              if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                value.append(\" \").append(lines[j].trim());\n              } else {\n                break;\n              }\n            }\n            return safeMimeDecode(value.toString());\n          }\n          if (line.trim().isEmpty()) break;\n        }\n      } catch (RuntimeException e) {\n        log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n      }\n      return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "253", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n        PDDocument document, List<EmailAttachment> attachments) throws IOException {\n      if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) return;\n\n      AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n      finder.setSortByPosition(true);\n      finder.getText(document);\n      List<MarkerPosition> markerPositions = finder.getPositions();\n\n      if (markerPositions.size() != attachments.size()) {\n        log.warn(\n            \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n            markerPositions.size(),\n            attachments.size());\n      }\n\n      int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n      for (int i = 0; i < annotationsToAdd; i++) {\n        MarkerPosition position = markerPositions.get(i);\n        EmailAttachment attachment = attachments.get(i);\n\n        if (attachment.getEmbeddedFilename() != null) {\n          PDPage page = document.getPage(position.getPageIndex());\n          addAttachmentAnnotationToPage(\n              document, page, attachment, position.getX(), position.getY());\n        }\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "282", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) return;\n\n            int missed = 1;\n            final Observer<? super R> downstream = this.downstream;\n            final AtomicThrowable errors = this.errors;\n            final AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) return;\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    final boolean d = done;\n                    final SwitchMapMaybeObserver<R> current = inner.get();\n                    final boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) break;\n\n                    inner.compareAndSet(current, null);\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "283", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) return;\n\n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "284", "src_id": "M522", "code": "\n        void drainLoop() {\n            final Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        final T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    final boolean d = mainDone;\n                    final SimplePlainQueue<T> q = queue;\n                    final T v = q != null ? q.poll() : null;\n                    final boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) break;\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "285", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) return;\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    final boolean isDone = done;\n                    final Object o = queue.poll();\n                    final boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        final Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) window.onError(ex);\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) window.onComplete();\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            final WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            final T item = (T)o;\n                            window.onNext(item);\n\n                            final long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "286", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) return;\n\n            int missed = 1;\n            final EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    final boolean d1 = observer1.done;\n                    if (d1) {\n                        final Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    final boolean d2 = observer2.done;\n                    if (d2) {\n                        final Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) v1 = q1.poll();\n                    final boolean e1 = v1 == null;\n\n                    if (v2 == null) v2 = q2.poll();\n                    final boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) break;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "287", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n            final JoinInnerSubscriber<T>[] s = this.subscribers;\n            final int n = s.length;\n            final Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                final long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    final Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    final boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        final JoinInnerSubscriber<T> inner = s[i];\n                        final SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            final T v = q.poll();\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) break middle;\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) break;\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    final Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    final boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        final JoinInnerSubscriber<T> inner = s[i];\n                        final SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) BackpressureHelper.produced(requested, e);\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "288", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) return;\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            final Subscriber<? super R> a = downstream;\n            final ErrorMode em = errorMode;\n\n            for (;;) {\n                final long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        final Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    final boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) current = inner;\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    final SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                final Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            final boolean d = inner.isDone();\n                            R v;\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            final boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) break;\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                final Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            final boolean d = inner.isDone();\n                            final boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) requested.addAndGet(-e);\n                if (continueNextSource) continue;\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "289", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            final int n = current.length;\n            if (n == 0) return;\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) return;\n\n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) return;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "290", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            for (;;) {\n                if (disposed) return;\n\n                final boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) downstream.onError(ex);\n                    else downstream.onComplete();\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) break;\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "291", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) return;\n\n            final int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) return;\n\n            PublishSubscription<T>[] b;\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) return;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "292", "src_id": "M31", "code": "\nprivate JsonNode validateLicense(\n    String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n  String requestBody = String.format(\n      \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n      licenseKey, machineFingerprint);\n  \n  HttpRequest request = HttpRequest.newBuilder()\n      .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n      .header(\"Content-Type\", \"application/vnd.api+json\")\n      .header(\"Accept\", \"application/vnd.api+json\")\n      .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n      .build();\n\n  HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n  log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n  JsonNode jsonResponse = objectMapper.readTree(response.body());\n  \n  if (response.statusCode() == 200) {\n    JsonNode metaNode = jsonResponse.path(\"meta\");\n    boolean isValid = metaNode.path(\"valid\").asBoolean();\n    String detail = metaNode.path(\"detail\").asText();\n    String code = metaNode.path(\"code\").asText();\n\n    log.info(\"License validity: {}\", isValid);\n    log.info(\"Validation detail: {}\", detail);\n    log.info(\"Validation code: {}\", code);\n\n    JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n    if (!licenseAttrs.isMissingNode()) {\n      context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n      context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n      log.info(\n          \"License floating (from license): {}, maxMachines: {}\",\n          context.isFloatingLicense,\n          context.maxMachines);\n    }\n\n    JsonNode includedNode = jsonResponse.path(\"included\");\n    JsonNode policyNode = null;\n    if (includedNode.isArray()) {\n      for (JsonNode node : includedNode) {\n        if (\"policies\".equals(node.path(\"type\").asText())) {\n          policyNode = node;\n          break;\n        }\n      }\n    }\n\n    if (policyNode != null) {\n      boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n      int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n      if (policyFloating) {\n        context.isFloatingLicense = true;\n        context.maxMachines = policyMaxMachines;\n      }\n      log.info(\n          \"License floating (from policy): {}, maxMachines: {}\",\n          context.isFloatingLicense,\n          context.maxMachines);\n    }\n\n    int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n    applicationProperties.getPremium().setMaxUsers(users);\n\n    context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\")\n        .path(\"isEnterprise\").asBoolean(false);\n\n    log.debug(applicationProperties.toString());\n  } else {\n    log.error(\"Error validating license. Status code: {}\", response.statusCode());\n  }\n  return jsonResponse;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "293", "src_id": "M488", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n@Operation(\n    summary = \"Convert a file to a PDF using LibreOffice\",\n    description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO\")\npublic ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n  MultipartFile inputFile = generalFile.getFileInput();\n  File file = null;\n  try {\n    file = convertToPdf(inputFile);\n    PDDocument doc = pdfDocumentFactory.load(file);\n    return WebResponseUtils.pdfDocToWebResponse(\n        doc,\n        Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\") \n            + \"_convertedToPDF.pdf\");\n  } finally {\n    if (file != null) file.delete();\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "294", "src_id": "M625", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n@Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\npublic ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n  MultipartFile inputFile = request.getFileInput();\n  boolean readonly = true;\n  try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n    ObjectMapper objectMapper = new ObjectMapper();\n    ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n    PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n    ObjectNode metadata = objectMapper.createObjectNode();\n    ObjectNode basicInfo = objectMapper.createObjectNode();\n    ObjectNode docInfoNode = objectMapper.createObjectNode();\n    ObjectNode compliancy = objectMapper.createObjectNode();\n    ObjectNode encryption = objectMapper.createObjectNode();\n    ObjectNode other = objectMapper.createObjectNode();\n\n    metadata.put(\"Title\", info.getTitle());\n    metadata.put(\"Author\", info.getAuthor());\n    metadata.put(\"Subject\", info.getSubject());\n    metadata.put(\"Keywords\", info.getKeywords());\n    metadata.put(\"Producer\", info.getProducer());\n    metadata.put(\"Creator\", info.getCreator());\n    metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n    metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n    jsonOutput.set(\"Metadata\", metadata);\n\n    long fileSizeInBytes = inputFile.getSize();\n    basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n    String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n    String[] words = fullText.split(\"\\\\s+\");\n    int wordCount = words.length;\n    int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n    basicInfo.put(\"WordCount\", wordCount);\n    basicInfo.put(\"ParagraphCount\", paragraphCount);\n    int charCount = fullText.length();\n    basicInfo.put(\"CharacterCount\", charCount);\n\n    boolean hasCompression = false;\n    String compressionType = \"None\";\n    basicInfo.put(\"Compression\", hasCompression);\n    if (hasCompression) basicInfo.put(\"CompressionType\", compressionType);\n\n    String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n    basicInfo.put(\"Language\", language);\n    basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n    PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n    String pageMode = catalog.getPageMode().name();\n    docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n    docInfoNode.put(\"Trapped\", info.getTrapped());\n    docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n    PDAcroForm acroForm = catalog.getAcroForm();\n    ObjectNode formFieldsNode = objectMapper.createObjectNode();\n    if (acroForm != null) {\n      for (PDField field : acroForm.getFieldTree()) {\n        formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n      }\n    }\n    jsonOutput.set(\"FormFields\", formFieldsNode);\n\n    ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n    if (summaryData != null && summaryData.size() > 0) {\n      jsonOutput.set(\"SummaryData\", summaryData);\n    }\n\n    if (catalog.getNames() != null) {\n      PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n      ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n      if (efTree != null) {\n        Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n        if (efMap != null) {\n          for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n            embeddedFileNode.put(\"Name\", entry.getKey());\n            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n            if (embeddedFile != null) {\n              embeddedFileNode.put(\"FileSize\", embeddedFile.getLength());\n            }\n            embeddedFilesArray.add(embeddedFileNode);\n          }\n        }\n      }\n      other.set(\"EmbeddedFiles\", embeddedFilesArray);\n    }\n\n    ArrayNode attachmentsArray = objectMapper.createArrayNode();\n    for (PDPage page : pdfBoxDoc.getPages()) {\n      for (PDAnnotation annotation : page.getAnnotations()) {\n        if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n          ObjectNode attachmentNode = objectMapper.createObjectNode();\n          attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n          attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n          attachmentsArray.add(attachmentNode);\n        }\n      }\n    }\n    other.set(\"Attachments\", attachmentsArray);\n\n    PDDocumentNameDictionary namesDict = catalog.getNames();\n    ArrayNode javascriptArray = objectMapper.createArrayNode();\n    if (namesDict != null) {\n      PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n      if (javascriptDict != null) {\n        try {\n          Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n          for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n            ObjectNode jsNode = objectMapper.createObjectNode();\n            jsNode.put(\"JS Name\", entry.getKey());\n            PDActionJavaScript jsAction = entry.getValue();\n            if (jsAction != null) {\n              String jsCodeStr = jsAction.getAction();\n              if (jsCodeStr != null) {\n                jsNode.put(\"JS Script Length\", jsCodeStr.length());\n              }\n            }\n            javascriptArray.add(jsNode);\n          }\n        } catch (IOException e) {\n          log.error(\"exception\", e);\n        }\n      }\n    }\n    other.set(\"JavaScript\", javascriptArray);\n\n    PDOptionalContentProperties ocProperties = catalog.getOCProperties();\n    ArrayNode layersArray = objectMapper.createArrayNode();\n    if (ocProperties != null) {\n      for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n        ObjectNode layerNode = objectMapper.createObjectNode();\n        layerNode.put(\"Name\", ocg.getName());\n        layersArray.add(layerNode);\n      }\n    }\n    other.set(\"Layers\", layersArray);\n\n    PDStructureTreeRoot structureTreeRoot = catalog.getStructureTreeRoot();\n    try {\n      if (structureTreeRoot != null) {\n        ArrayNode structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n        other.set(\"StructureTree\", structureTreeArray);\n      }\n    } catch (Exception e) {\n      log.error(\"exception\", e);\n    }\n\n    compliancy.put(\"IsPDF/ACompliant\", checkForStandard(pdfBoxDoc, \"PDF/A\"));\n    compliancy.put(\"IsPDF/XCompliant\", checkForStandard(pdfBoxDoc, \"PDF/X\"));\n    compliancy.put(\"IsPDF/ECompliant\", checkForStandard(pdfBoxDoc, \"PDF/E\"));\n    compliancy.put(\"IsPDF/VTCompliant\", checkForStandard(pdfBoxDoc, \"PDF/VT\"));\n    compliancy.put(\"IsPDF/UACompliant\", checkForStandard(pdfBoxDoc, \"PDF/UA\"));\n    compliancy.put(\"IsPDF/BCompliant\", checkForStandard(pdfBoxDoc, \"PDF/B\"));\n    compliancy.put(\"IsPDF/SECCompliant\", checkForStandard(pdfBoxDoc, \"PDF/SEC\"));\n\n    PDOutlineNode root = catalog.getDocumentOutline();\n    ArrayNode bookmarksArray = objectMapper.createArrayNode();\n    if (root != null) {\n      for (PDOutlineItem child : root.children()) {\n        addOutlinesToArray(child, bookmarksArray);\n      }\n    }\n    other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n    PDMetadata pdMetadata = catalog.getMetadata();\n    String xmpString = null;\n    if (pdMetadata != null) {\n      try (COSInputStream is = pdMetadata.createInputStream()) {\n        DomXmpParser domXmpParser = new DomXmpParser();\n        XMPMetadata xmpMeta = domXmpParser.parse(is);\n        ByteArrayOutputStream os = new ByteArrayOutputStream();\n        new XmpSerializer().serialize(xmpMeta, os, true);\n        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n      } catch (XmpParsingException e) {\n        log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n        try (COSInputStream is = pdMetadata.createInputStream()) {\n          byte[] metadataBytes = is.readAllBytes();\n          xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n        }\n      } catch (IOException e) {\n        log.error(\"exception\", e);\n      }\n    }\n    other.put(\"XMPMetadata\", xmpString);\n\n    if (pdfBoxDoc.isEncrypted()) {\n      encryption.put(\"IsEncrypted\", true);\n      PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n      encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n      encryption.put(\"KeyLength\", pdfEncryption.getLength());\n    } else {\n      encryption.put(\"IsEncrypted\", false);\n    }\n\n    ObjectNode permissionsNode = objectMapper.createObjectNode();\n    setNodePermissions(pdfBoxDoc, permissionsNode);\n\n    ObjectNode pageInfoParent = objectMapper.createObjectNode();\n    for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n      ObjectNode pageInfo = objectMapper.createObjectNode();\n      PDPage page = pdfBoxDoc.getPage(pageNum);\n      PDRectangle mediaBox = page.getMediaBox();\n      float width = mediaBox.getWidth();\n      float height = mediaBox.getHeight();\n\n      ObjectNode sizeInfo = objectMapper.createObjectNode();\n      getDimensionInfo(sizeInfo, width, height);\n      sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n      pageInfo.set(\"Size\", sizeInfo);\n\n      pageInfo.put(\"Rotation\", page.getRotation());\n      pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n      pageInfo.put(\"MediaBox\", mediaBox.toString());\n      pageInfo.put(\"CropBox\", page.getCropBox() == null ? \"Undefined\" : page.getCropBox().toString());\n      pageInfo.put(\"BleedBox\", page.getBleedBox() == null ? \"Undefined\" : page.getBleedBox().toString());\n      pageInfo.put(\"TrimBox\", page.getTrimBox() == null ? \"Undefined\" : page.getTrimBox().toString());\n      pageInfo.put(\"ArtBox\", page.getArtBox() == null ? \"Undefined\" : page.getArtBox().toString());\n\n      PDFTextStripper textStripper = new PDFTextStripper();\n      textStripper.setStartPage(pageNum + 1);\n      textStripper.setEndPage(pageNum + 1);\n      String pageText = textStripper.getText(pdfBoxDoc);\n      pageInfo.put(\"Text Characters Count\", pageText.length());\n\n      List<PDAnnotation> annotations = page.getAnnotations();\n      int subtypeCount = 0;\n      int contentsCount = 0;\n      for (PDAnnotation annotation : annotations) {\n        if (annotation.getSubtype() != null) subtypeCount++;\n        if (annotation.getContents() != null) contentsCount++;\n      }\n      ObjectNode annotationsObject = objectMapper.createObjectNode();\n      annotationsObject.put(\"AnnotationsCount\", annotations.size());\n      annotationsObject.put(\"SubtypeCount\", subtypeCount);\n      annotationsObject.put(\"ContentsCount\", contentsCount);\n      pageInfo.set(\"Annotations\", annotationsObject);\n\n      PDResources resources = page.getResources();\n      ArrayNode imagesArray = objectMapper.createArrayNode();\n      for (COSName name : resources.getXObjectNames()) {\n        PDXObject xObject = resources.getXObject(name);\n        if (xObject instanceof PDImageXObject image) {\n          ObjectNode imageNode = objectMapper.createObjectNode();\n          imageNode.put(\"Width\", image.getWidth());\n          imageNode.put(\"Height\", image.getHeight());\n          if (image.getMetadata() != null\n              && image.getMetadata().getFile() != null\n              && image.getMetadata().getFile().getFile() != null) {\n            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n          }\n          if (image.getColorSpace() != null) {\n            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n          }\n          imagesArray.add(imageNode);\n        }\n      }\n      pageInfo.set(\"Images\", imagesArray);\n\n      ArrayNode linksArray = objectMapper.createArrayNode();\n      Set<String> uniqueURIs = new HashSet<>();\n      for (PDAnnotation annotation : annotations) {\n        if (annotation instanceof PDAnnotationLink linkAnnotation) {\n          if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n            uniqueURIs.add(uriAction.getURI());\n          }\n        }\n      }\n      for (String uri : uniqueURIs) {\n        ObjectNode linkNode = objectMapper.createObjectNode();\n        linkNode.put(\"URI\", uri);\n        linksArray.add(linkNode);\n      }\n      pageInfo.set(\"Links\", linksArray);\n\n      ArrayNode fontsArray = objectMapper.createArrayNode();\n      Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n      for (COSName fontName : resources.getFontNames()) {\n        PDFont font = resources.getFont(fontName);\n        ObjectNode fontNode = objectMapper.createObjectNode();\n        fontNode.put(\"IsEmbedded\", font.isEmbedded());\n        fontNode.put(\"Name\", font.getName());\n        fontNode.put(\"Subtype\", font.getType());\n        PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n        if (fontDescriptor != null) {\n          fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n          int flags = fontDescriptor.getFlags();\n          fontNode.put(\"IsItalic\", (flags & 1) != 0);\n          fontNode.put(\"IsBold\", (flags & 64) != 0);\n          fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n          fontNode.put(\"IsSerif\", (flags & 4) != 0);\n          fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n          fontNode.put(\"IsScript\", (flags & 16) != 0);\n          fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n          fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n          fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n        }\n        String uniqueKey = fontNode.toString();\n        if (uniqueFontsMap.containsKey(uniqueKey)) {\n          ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n          int count = existingFontNode.get(\"Count\").asInt() + 1;\n          existingFontNode.put(\"Count\", count);\n        } else {\n          fontNode.put(\"Count\", 1);\n          uniqueFontsMap.put(uniqueKey, fontNode);\n        }\n      }\n      for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n        fontsArray.add(uniqueFontNode);\n      }\n      pageInfo.set(\"Fonts\", fontsArray);\n\n      ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n      for (COSName name : resources.getColorSpaceNames()) {\n        PDColorSpace colorSpace = resources.getColorSpace(name);\n        if (colorSpace instanceof PDICCBased iccBased) {\n          PDStream iccData = iccBased.getPDStream();\n          byte[] iccBytes = iccData.toByteArray();\n          ObjectNode iccProfileNode = objectMapper.createObjectNode();\n          iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n          colorSpacesArray.add(iccProfileNode);\n        }\n      }\n      pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n      Map<String, Integer> xObjectCountMap = new HashMap<>();\n      for (COSName name : resources.getXObjectNames()) {\n        PDXObject xObject = resources.getXObject(name);\n        String xObjectType = xObject instanceof PDImageXObject ? \"Image\"\n          : xObject instanceof PDFormXObject ? \"Form\" : \"Other\";\n        xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n      }\n      ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n      for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n        xObjectCountNode.put(entry.getKey(), entry.getValue());\n      }\n      pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n      ArrayNode multimediaArray = objectMapper.createArrayNode();\n      for (PDAnnotation annotation : annotations) {\n        if (\"RichMedia\".equals(annotation.getSubtype())) {\n          multimediaArray.add(objectMapper.createObjectNode());\n        }\n      }\n      pageInfo.set(\"Multimedia\", multimediaArray);\n\n      pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n    }\n\n    jsonOutput.set(\"BasicInfo\", basicInfo);\n    jsonOutput.set(\"DocumentInfo\", docInfoNode);\n    jsonOutput.set(\"Compliancy\", compliancy);\n    jsonOutput.set(\"Encryption\", encryption);\n    jsonOutput.set(\"Permissions\", permissionsNode);\n    jsonOutput.set(\"Other\", other);\n    jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n    String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n    return WebResponseUtils.bytesToWebResponse(\n        jsonString.getBytes(StandardCharsets.UTF_8),\n        \"response.json\",\n        MediaType.APPLICATION_JSON);\n  } catch (Exception e) {\n    log.error(\"exception\", e);\n  }\n  return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "295", "src_id": "M24", "code": "\nprivate boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n  try {\n    String encodedPayload = licenseFile;\n    encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\")\n        .replace(CERT_SUFFIX, \"\")\n        .replaceAll(\"\\\\r?\\\\n\", \"\");\n\n    byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n    String payload = new String(payloadBytes);\n    log.info(\"Decoded certificate payload: {}\", payload);\n\n    String encryptedData = \"\";\n    String encodedSignature = \"\";\n    String algorithm = \"\";\n\n    try {\n      JSONObject attrs = new JSONObject(payload);\n      encryptedData = (String) attrs.get(\"enc\");\n      encodedSignature = (String) attrs.get(\"sig\");\n      algorithm = (String) attrs.get(\"alg\");\n    } catch (JSONException e) {\n      log.error(\"Failed to parse license file: {}\", e.getMessage());\n      return false;\n    }\n\n    if (!\"base64+ed25519\".equals(algorithm)) {\n      log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n      return false;\n    }\n\n    boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n    if (!isSignatureValid) {\n      log.error(\"License file signature is invalid\");\n      return false;\n    }\n    log.info(\"License file signature is valid\");\n\n    String decodedData;\n    try {\n      decodedData = new String(Base64.getDecoder().decode(encryptedData));\n    } catch (IllegalArgumentException e) {\n      log.error(\"Failed to decode license data: {}\", e.getMessage());\n      return false;\n    }\n\n    return processCertificateData(decodedData, context);\n  } catch (Exception e) {\n    log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n    return false;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "296", "src_id": "M403", "code": "\nprivate static void sanitizeHtmlFilesInZip(\n    Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n  try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n    try (ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(\n        new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n      ZipEntry entry = zipIn.getNextEntry();\n      while (entry != null) {\n        Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n        if (!entry.isDirectory()) {\n          Files.createDirectories(filePath.getParent());\n          if (entry.getName().toLowerCase().endsWith(\".html\")\n              || entry.getName().toLowerCase().endsWith(\".htm\")) {\n            String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n            Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n          } else {\n            Files.copy(zipIn, filePath);\n          }\n        }\n        zipIn.closeEntry();\n        entry = zipIn.getNextEntry();\n      }\n    }\n    zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "297", "src_id": "M317", "code": "\npublic static void addImageToDocument(\n    PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate) throws IOException {\n  boolean imageIsLandscape = image.getWidth() > image.getHeight();\n  PDRectangle pageSize = PDRectangle.A4;\n\n  if (autoRotate && imageIsLandscape) {\n    pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n  }\n\n  if (\"fitDocumentToImage\".equals(fitOption)) {\n    pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n  }\n\n  PDPage page = new PDPage(pageSize);\n  doc.addPage(page);\n\n  float pageWidth = page.getMediaBox().getWidth();\n  float pageHeight = page.getMediaBox().getHeight();\n\n  try (PDPageContentStream contentStream = \n        new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n    if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n      contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n    } else if (\"maintainAspectRatio\".equals(fitOption)) {\n      float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n      float pageAspectRatio = pageWidth / pageHeight;\n      float scaleFactor = (imageAspectRatio > pageAspectRatio)\n          ? pageWidth / image.getWidth()\n          : pageHeight / image.getHeight();\n\n      float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n      float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n      contentStream.drawImage(\n          image,\n          xPos,\n          yPos,\n          image.getWidth() * scaleFactor,\n          image.getHeight() * scaleFactor);\n    }\n  } catch (IOException e) {\n    log.error(\"Error adding image to PDF\", e);\n    throw e;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "298", "src_id": "M307", "code": "\npublic static String generateMachineFingerprint() {\n  try {\n    StringBuilder sb = new StringBuilder();\n    InetAddress ip = InetAddress.getLocalHost();\n    NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n    if (network == null) {\n      Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n      while (networks.hasMoreElements()) {\n        NetworkInterface net = networks.nextElement();\n        byte[] mac = net.getHardwareAddress();\n        if (mac != null) {\n          for (byte b : mac) {\n            sb.append(String.format(\"%02X\", b));\n          }\n          break;\n        }\n      }\n    } else {\n      byte[] mac = network.getHardwareAddress();\n      if (mac != null) {\n        for (byte b : mac) {\n          sb.append(String.format(\"%02X\", b));\n        }\n      }\n    }\n\n    MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n    byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n    StringBuilder fingerprint = new StringBuilder();\n    for (byte b : hash) {\n      fingerprint.append(String.format(\"%02x\", b));\n    }\n    return fingerprint.toString();\n  } catch (Exception e) {\n    return \"GenericID\";\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "299", "src_id": "M135", "code": "\nprivate void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n  String title = pdfMetadata.getTitle();\n  pdf.getDocumentInformation().setTitle(title);\n  pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n  pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n  pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n  pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n  String author = pdfMetadata.getAuthor();\n  if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata()\n      && runningProOrHigher) {\n    author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n    if (userService != null) {\n      author = author.replace(\"username\", userService.getCurrentUsername());\n    }\n  }\n  pdf.getDocumentInformation().setAuthor(author);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "300", "src_id": "M128", "code": "\n@Bean(name = \"machineType\")\npublic String determineMachineType() {\n  try {\n    boolean isDocker = runningInDocker();\n    boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n    boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n    if (isKubernetes) {\n      return \"Kubernetes\";\n    } else if (isDocker) {\n      return \"Docker\";\n    } else if (isBrowserOpen) {\n      String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n      if (os.contains(\"win\")) {\n        return \"Client-windows\";\n      } else if (os.contains(\"mac\")) {\n        return \"Client-mac\";\n      } else {\n        return \"Client-unix\";\n      }\n    } else {\n      return \"Server-jar\";\n    }\n  } catch (Exception e) {\n    return \"Unknown\";\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "301", "src_id": "M101", "code": "\nprivate void processRequest(\n    int limitPerDay,\n    String identifier,\n    Map<String, Bucket> buckets,\n    HttpServletRequest request,\n    HttpServletResponse response,\n    FilterChain filterChain)\n    throws IOException, ServletException {\n  Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n  ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n  if (probe.isConsumed()) {\n    response.setHeader(\"X-Rate-Limit-Remaining\", Long.toString(probe.getRemainingTokens()));\n    filterChain.doFilter(request, response);\n  } else {\n    long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n    response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n    response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Long.toString(waitForRefill));\n    response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "302", "src_id": "M31", "code": "\nprivate JsonNode validateLicense(String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n    String requestBody = format(\n        \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n        licenseKey, machineFingerprint\n    );\n    HttpRequest request = HttpRequest.newBuilder()\n        .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n        .header(\"Content-Type\", \"application/vnd.api+json\")\n        .header(\"Accept\", \"application/vnd.api+json\")\n        .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n        .build();\n\n    HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n    JsonNode jsonResponse = objectMapper.readTree(response.body());\n    if (response.statusCode() == 200) {\n        JsonNode metaNode = jsonResponse.path(\"meta\");\n        boolean isValid = metaNode.path(\"valid\").asBoolean();\n        String detail = metaNode.path(\"detail\").asText();\n        String code = metaNode.path(\"code\").asText();\n\n        log.info(\"License validity: {}\", isValid);\n        log.info(\"Validation detail: {}\", detail);\n        log.info(\"Validation code: {}\", code);\n\n        JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n        if (!licenseAttrs.isMissingNode()) {\n            context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n            context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n            log.info(\"License floating (from license): {}, maxMachines: {}\", \n                    context.isFloatingLicense, context.maxMachines);\n        }\n\n        JsonNode includedNode = jsonResponse.path(\"included\");\n        JsonNode policyNode = null;\n        if (includedNode.isArray()) {\n            for (JsonNode node : includedNode) {\n                if (\"policies\".equals(node.path(\"type\").asText())) {\n                    policyNode = node;\n                    break;\n                }\n            }\n        }\n\n        if (policyNode != null) {\n            boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n            int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n            if (policyFloating) {\n                context.isFloatingLicense = true;\n                context.maxMachines = policyMaxMachines;\n            }\n            log.info(\"License floating (from policy): {}, maxMachines: {}\", \n                    context.isFloatingLicense, context.maxMachines);\n        }\n\n        int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n        applicationProperties.getPremium().setMaxUsers(users);\n        context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"isEnterprise\").asBoolean(false);\n        log.debug(applicationProperties.toString());\n    } else {\n        log.error(\"Error validating license. Status code: {}\", response.statusCode());\n    }\n    return jsonResponse;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "303", "src_id": "M488", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n@Operation(\n    summary = \"Convert a file to a PDF using LibreOffice\",\n    description = \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY Output:PDF Type:SISO\"\n)\npublic ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n    MultipartFile inputFile = generalFile.getFileInput();\n    File file = null;\n    try {\n        file = convertToPdf(inputFile);\n        PDDocument doc = pdfDocumentFactory.load(file);\n        return WebResponseUtils.pdfDocToWebResponse(\n            doc,\n            Filenames.toSimpleFileName(inputFile.getOriginalFilename()).replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\"\n        );\n    } finally {\n        if (file != null) {\n            file.delete();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "304", "src_id": "M625", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n@Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\npublic ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n    MultipartFile inputFile = request.getFileInput();\n    boolean readonly = true;\n    try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        ObjectNode jsonOutput = objectMapper.createObjectNode();\n        PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n        ObjectNode metadata = objectMapper.createObjectNode();\n        ObjectNode basicInfo = objectMapper.createObjectNode();\n        ObjectNode docInfoNode = objectMapper.createObjectNode();\n        ObjectNode compliancy = objectMapper.createObjectNode();\n        ObjectNode encryption = objectMapper.createObjectNode();\n        ObjectNode other = objectMapper.createObjectNode();\n\n        metadata.put(\"Title\", info.getTitle());\n        metadata.put(\"Author\", info.getAuthor());\n        metadata.put(\"Subject\", info.getSubject());\n        metadata.put(\"Keywords\", info.getKeywords());\n        metadata.put(\"Producer\", info.getProducer());\n        metadata.put(\"Creator\", info.getCreator());\n        metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n        metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n        jsonOutput.set(\"Metadata\", metadata);\n\n        long fileSizeInBytes = inputFile.getSize();\n        basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n        String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n        String[] words = fullText.split(\"\\\\s+\");\n        int wordCount = words.length;\n        int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n        basicInfo.put(\"WordCount\", wordCount);\n        basicInfo.put(\"ParagraphCount\", paragraphCount);\n        int charCount = fullText.length();\n        basicInfo.put(\"CharacterCount\", charCount);\n\n        boolean hasCompression = false;\n        String compressionType = \"None\";\n        basicInfo.put(\"Compression\", hasCompression);\n        if (hasCompression) {\n            basicInfo.put(\"CompressionType\", compressionType);\n        }\n\n        String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n        basicInfo.put(\"Language\", language);\n        basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n        PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n        String pageMode = catalog.getPageMode().name();\n        docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n        docInfoNode.put(\"Trapped\", info.getTrapped());\n        docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n        PDAcroForm acroForm = catalog.getAcroForm();\n        ObjectNode formFieldsNode = objectMapper.createObjectNode();\n        if (acroForm != null) {\n            for (PDField field : acroForm.getFieldTree()) {\n                formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n            }\n        }\n        jsonOutput.set(\"FormFields\", formFieldsNode);\n\n        ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n        if (summaryData != null && summaryData.size() > 0) {\n            jsonOutput.set(\"SummaryData\", summaryData);\n        }\n\n        if (catalog.getNames() != null) {\n            PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n            ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n            if (efTree != null) {\n                Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                if (efMap != null) {\n                    for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                        ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                        embeddedFileNode.put(\"Name\", entry.getKey());\n                        PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                        if (embeddedFile != null) {\n                            embeddedFileNode.put(\"FileSize\", embeddedFile.getLength());\n                        }\n                        embeddedFilesArray.add(embeddedFileNode);\n                    }\n                }\n            }\n            other.set(\"EmbeddedFiles\", embeddedFilesArray);\n        }\n\n        ArrayNode attachmentsArray = objectMapper.createArrayNode();\n        for (PDPage page : pdfBoxDoc.getPages()) {\n            for (PDAnnotation annotation : page.getAnnotations()) {\n                if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                    ObjectNode attachmentNode = objectMapper.createObjectNode();\n                    attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                    attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n                    attachmentsArray.add(attachmentNode);\n                }\n            }\n        }\n        other.set(\"Attachments\", attachmentsArray);\n\n        PDDocumentNameDictionary namesDict = catalog.getNames();\n        ArrayNode javascriptArray = objectMapper.createArrayNode();\n        if (namesDict != null) {\n            PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n            if (javascriptDict != null) {\n                try {\n                    Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n                    for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                        ObjectNode jsNode = objectMapper.createObjectNode();\n                        jsNode.put(\"JS Name\", entry.getKey());\n                        PDActionJavaScript jsAction = entry.getValue();\n                        if (jsAction != null) {\n                            String jsCodeStr = jsAction.getAction();\n                            if (jsCodeStr != null) {\n                                jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                            }\n                        }\n                        javascriptArray.add(jsNode);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n        }\n        other.set(\"JavaScript\", javascriptArray);\n\n        PDOptionalContentProperties ocProperties = catalog.getOCProperties();\n        ArrayNode layersArray = objectMapper.createArrayNode();\n        if (ocProperties != null) {\n            for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                ObjectNode layerNode = objectMapper.createObjectNode();\n                layerNode.put(\"Name\", ocg.getName());\n                layersArray.add(layerNode);\n            }\n        }\n        other.set(\"Layers\", layersArray);\n\n        PDStructureTreeRoot structureTreeRoot = catalog.getStructureTreeRoot();\n        ArrayNode structureTreeArray;\n        try {\n            if (structureTreeRoot != null) {\n                structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                other.set(\"StructureTree\", structureTreeArray);\n            }\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n\n        compliancy.put(\"IsPDF/ACompliant\", checkForStandard(pdfBoxDoc, \"PDF/A\"));\n        compliancy.put(\"IsPDF/XCompliant\", checkForStandard(pdfBoxDoc, \"PDF/X\"));\n        compliancy.put(\"IsPDF/ECompliant\", checkForStandard(pdfBoxDoc, \"PDF/E\"));\n        compliancy.put(\"IsPDF/VTCompliant\", checkForStandard(pdfBoxDoc, \"PDF/VT\"));\n        compliancy.put(\"IsPDF/UACompliant\", checkForStandard(pdfBoxDoc, \"PDF/UA\"));\n        compliancy.put(\"IsPDF/BCompliant\", checkForStandard(pdfBoxDoc, \"PDF/B\"));\n        compliancy.put(\"IsPDF/SECCompliant\", checkForStandard(pdfBoxDoc, \"PDF/SEC\"));\n\n        PDOutlineNode root = catalog.getDocumentOutline();\n        ArrayNode bookmarksArray = objectMapper.createArrayNode();\n        if (root != null) {\n            for (PDOutlineItem child : root.children()) {\n                addOutlinesToArray(child, bookmarksArray);\n            }\n        }\n        other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n        PDMetadata pdMetadata = catalog.getMetadata();\n        String xmpString = null;\n        if (pdMetadata != null) {\n            try (COSInputStream is = pdMetadata.createInputStream()) {\n                DomXmpParser domXmpParser = new DomXmpParser();\n                XMPMetadata xmpMeta = domXmpParser.parse(is);\n                ByteArrayOutputStream os = new ByteArrayOutputStream();\n                new XmpSerializer().serialize(xmpMeta, os, true);\n                xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n            } catch (XmpParsingException e) {\n                log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                try (COSInputStream is = pdMetadata.createInputStream()) {\n                    byte[] metadataBytes = is.readAllBytes();\n                    xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                }\n            } catch (IOException e) {\n                log.error(\"exception\", e);\n            }\n        }\n        other.put(\"XMPMetadata\", xmpString);\n\n        if (pdfBoxDoc.isEncrypted()) {\n            encryption.put(\"IsEncrypted\", true);\n            PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n            encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n            encryption.put(\"KeyLength\", pdfEncryption.getLength());\n        } else {\n            encryption.put(\"IsEncrypted\", false);\n        }\n\n        ObjectNode permissionsNode = objectMapper.createObjectNode();\n        setNodePermissions(pdfBoxDoc, permissionsNode);\n\n        ObjectNode pageInfoParent = objectMapper.createObjectNode();\n        for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n            ObjectNode pageInfo = objectMapper.createObjectNode();\n            PDPage page = pdfBoxDoc.getPage(pageNum);\n            PDRectangle mediaBox = page.getMediaBox();\n            float width = mediaBox.getWidth();\n            float height = mediaBox.getHeight();\n            ObjectNode sizeInfo = objectMapper.createObjectNode();\n            getDimensionInfo(sizeInfo, width, height);\n            sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n            pageInfo.set(\"Size\", sizeInfo);\n            pageInfo.put(\"Rotation\", page.getRotation());\n            pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n            pageInfo.put(\"MediaBox\", mediaBox.toString());\n            pageInfo.put(\"CropBox\", page.getCropBox() == null ? \"Undefined\" : page.getCropBox().toString());\n            pageInfo.put(\"BleedBox\", page.getBleedBox() == null ? \"Undefined\" : page.getBleedBox().toString());\n            pageInfo.put(\"TrimBox\", page.getTrimBox() == null ? \"Undefined\" : page.getTrimBox().toString());\n            pageInfo.put(\"ArtBox\", page.getArtBox() == null ? \"Undefined\" : page.getArtBox().toString());\n\n            PDFTextStripper textStripper = new PDFTextStripper();\n            textStripper.setStartPage(pageNum + 1);\n            textStripper.setEndPage(pageNum + 1);\n            String pageText = textStripper.getText(pdfBoxDoc);\n            pageInfo.put(\"Text Characters Count\", pageText.length());\n\n            List<PDAnnotation> annotations = page.getAnnotations();\n            int subtypeCount = 0;\n            int contentsCount = 0;\n            for (PDAnnotation annotation : annotations) {\n                if (annotation.getSubtype() != null) {\n                    subtypeCount++;\n                }\n                if (annotation.getContents() != null) {\n                    contentsCount++;\n                }\n            }\n            ObjectNode annotationsObject = objectMapper.createObjectNode();\n            annotationsObject.put(\"AnnotationsCount\", annotations.size());\n            annotationsObject.put(\"SubtypeCount\", subtypeCount);\n            annotationsObject.put(\"ContentsCount\", contentsCount);\n            pageInfo.set(\"Annotations\", annotationsObject);\n\n            PDResources resources = page.getResources();\n            ArrayNode imagesArray = objectMapper.createArrayNode();\n            for (COSName name : resources.getXObjectNames()) {\n                PDXObject xObject = resources.getXObject(name);\n                if (xObject instanceof PDImageXObject image) {\n                    ObjectNode imageNode = objectMapper.createObjectNode();\n                    imageNode.put(\"Width\", image.getWidth());\n                    imageNode.put(\"Height\", image.getHeight());\n                    if (image.getMetadata() != null && image.getMetadata().getFile() != null && image.getMetadata().getFile().getFile() != null) {\n                        imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                    }\n                    if (image.getColorSpace() != null) {\n                        imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                    }\n                    imagesArray.add(imageNode);\n                }\n            }\n            pageInfo.set(\"Images\", imagesArray);\n\n            ArrayNode linksArray = objectMapper.createArrayNode();\n            Set<String> uniqueURIs = new HashSet<>();\n            for (PDAnnotation annotation : annotations) {\n                if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                    if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                        uniqueURIs.add(uriAction.getURI());\n                    }\n                }\n            }\n            for (String uri : uniqueURIs) {\n                ObjectNode linkNode = objectMapper.createObjectNode();\n                linkNode.put(\"URI\", uri);\n                linksArray.add(linkNode);\n            }\n            pageInfo.set(\"Links\", linksArray);\n\n            ArrayNode fontsArray = objectMapper.createArrayNode();\n            Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n            for (COSName fontName : resources.getFontNames()) {\n                PDFont font = resources.getFont(fontName);\n                ObjectNode fontNode = objectMapper.createObjectNode();\n                fontNode.put(\"IsEmbedded\", font.isEmbedded());\n                fontNode.put(\"Name\", font.getName());\n                fontNode.put(\"Subtype\", font.getType());\n                PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n                if (fontDescriptor != null) {\n                    fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                    int flags = fontDescriptor.getFlags();\n                    fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                    fontNode.put(\"IsBold\", (flags & 64) != 0);\n                    fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                    fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                    fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                    fontNode.put(\"IsScript\", (flags & 16) != 0);\n                    fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n                    fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                    fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                }\n                String uniqueKey = fontNode.toString();\n                if (uniqueFontsMap.containsKey(uniqueKey)) {\n                    ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                    existingFontNode.put(\"Count\", existingFontNode.get(\"Count\").asInt() + 1);\n                } else {\n                    fontNode.put(\"Count\", 1);\n                    uniqueFontsMap.put(uniqueKey, fontNode);\n                }\n            }\n            for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                fontsArray.add(uniqueFontNode);\n            }\n            pageInfo.set(\"Fonts\", fontsArray);\n\n            ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n            for (COSName name : resources.getColorSpaceNames()) {\n                PDColorSpace colorSpace = resources.getColorSpace(name);\n                if (colorSpace instanceof PDICCBased iccBased) {\n                    PDStream iccData = iccBased.getPDStream();\n                    byte[] iccBytes = iccData.toByteArray();\n                    ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                    iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                    colorSpacesArray.add(iccProfileNode);\n                }\n            }\n            pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n            Map<String, Integer> xObjectCountMap = new HashMap<>();\n            for (COSName name : resources.getXObjectNames()) {\n                PDXObject xObject = resources.getXObject(name);\n                String xObjectType = \"Other\";\n                if (xObject instanceof PDImageXObject) {\n                    xObjectType = \"Image\";\n                } else if (xObject instanceof PDFormXObject) {\n                    xObjectType = \"Form\";\n                }\n                xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n            }\n            ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n            for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                xObjectCountNode.put(entry.getKey(), entry.getValue());\n            }\n            pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n            ArrayNode multimediaArray = objectMapper.createArrayNode();\n            for (PDAnnotation annotation : annotations) {\n                if (\"RichMedia\".equals(annotation.getSubtype())) {\n                    multimediaArray.add(objectMapper.createObjectNode());\n                }\n            }\n            pageInfo.set(\"Multimedia\", multimediaArray);\n\n            pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n        }\n\n        jsonOutput.set(\"BasicInfo\", basicInfo);\n        jsonOutput.set(\"DocumentInfo\", docInfoNode);\n        jsonOutput.set(\"Compliancy\", compliancy);\n        jsonOutput.set(\"Encryption\", encryption);\n        jsonOutput.set(\"Permissions\", permissionsNode);\n        jsonOutput.set(\"Other\", other);\n        jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n        String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n        return WebResponseUtils.bytesToWebResponse(\n            jsonString.getBytes(StandardCharsets.UTF_8),\n            \"response.json\",\n            MediaType.APPLICATION_JSON\n        );\n    } catch (Exception e) {\n        log.error(\"exception\", e);\n    }\n    return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "305", "src_id": "M24", "code": "\nprivate boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n    try {\n        String encodedPayload = licenseFile.replace(CERT_PREFIX, \"\")\n            .replace(CERT_SUFFIX, \"\")\n            .replaceAll(\"\\\\r?\\\\n\", \"\");\n        byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n        String payload = new String(payloadBytes);\n        log.info(\"Decoded certificate payload: {}\", payload);\n\n        String encryptedData = \"\";\n        String encodedSignature = \"\";\n        String algorithm = \"\";\n        try {\n            JSONObject attrs = new JSONObject(payload);\n            encryptedData = (String) attrs.get(\"enc\");\n            encodedSignature = (String) attrs.get(\"sig\");\n            algorithm = (String) attrs.get(\"alg\");\n        } catch (JSONException e) {\n            log.error(\"Failed to parse license file: {}\", e.getMessage());\n            return false;\n        }\n\n        if (!\"base64+ed25519\".equals(algorithm)) {\n            log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n            return false;\n        }\n\n        boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n        if (!isSignatureValid) {\n            log.error(\"License file signature is invalid\");\n            return false;\n        }\n        log.info(\"License file signature is valid\");\n\n        String decodedData;\n        try {\n            decodedData = new String(Base64.getDecoder().decode(encryptedData));\n        } catch (IllegalArgumentException e) {\n            log.error(\"Failed to decode license data: {}\", e.getMessage());\n            return false;\n        }\n\n        return processCertificateData(decodedData, context);\n    } catch (Exception e) {\n        log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n        return false;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "306", "src_id": "M403", "code": "\nprivate static void sanitizeHtmlFilesInZip(Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n    try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n        try (ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n            ZipEntry entry = zipIn.getNextEntry();\n            while (entry != null) {\n                Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                if (!entry.isDirectory()) {\n                    Files.createDirectories(filePath.getParent());\n                    if (entry.getName().toLowerCase().endsWith(\".html\") || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                        String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                        String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                        Files.write(filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                    } else {\n                        Files.copy(zipIn, filePath);\n                    }\n                }\n                zipIn.closeEntry();\n                entry = zipIn.getNextEntry();\n            }\n        }\n        zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "307", "src_id": "M317", "code": "\npublic static void addImageToDocument(PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate) throws IOException {\n    boolean imageIsLandscape = image.getWidth() > image.getHeight();\n    PDRectangle pageSize = PDRectangle.A4;\n    if (autoRotate && imageIsLandscape) {\n        pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n    }\n    if (\"fitDocumentToImage\".equals(fitOption)) {\n        pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n    }\n\n    PDPage page = new PDPage(pageSize);\n    doc.addPage(page);\n    float pageWidth = page.getMediaBox().getWidth();\n    float pageHeight = page.getMediaBox().getHeight();\n\n    try (PDPageContentStream contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n        if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n            contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n        } else if (\"maintainAspectRatio\".equals(fitOption)) {\n            float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n            float pageAspectRatio = pageWidth / pageHeight;\n            float scaleFactor = (imageAspectRatio > pageAspectRatio) \n                ? pageWidth / image.getWidth() \n                : pageHeight / image.getHeight();\n            float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n            float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n            contentStream.drawImage(image, xPos, yPos, image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n        }\n    } catch (IOException e) {\n        log.error(\"Error adding image to PDF\", e);\n        throw e;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "308", "src_id": "M307", "code": "\npublic static String generateMachineFingerprint() {\n    try {\n        StringBuilder sb = new StringBuilder();\n        InetAddress ip = InetAddress.getLocalHost();\n        NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n        if (network == null) {\n            Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n            while (networks.hasMoreElements()) {\n                NetworkInterface net = networks.nextElement();\n                byte[] mac = net.getHardwareAddress();\n                if (mac != null) {\n                    for (byte b : mac) {\n                        sb.append(String.format(\"%02X\", b));\n                    }\n                    break;\n                }\n            }\n        } else {\n            byte[] mac = network.getHardwareAddress();\n            if (mac != null) {\n                for (byte b : mac) {\n                    sb.append(String.format(\"%02X\", b));\n                }\n            }\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n        StringBuilder fingerprint = new StringBuilder();\n        for (byte b : hash) {\n            fingerprint.append(String.format(\"%02x\", b));\n        }\n        return fingerprint.toString();\n    } catch (Exception e) {\n        return \"GenericID\";\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "309", "src_id": "M135", "code": "\nprivate void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n    String title = pdfMetadata.getTitle();\n    pdf.getDocumentInformation().setTitle(title);\n    pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n    pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n    pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n    pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n    String author = pdfMetadata.getAuthor();\n    if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata() && runningProOrHigher) {\n        author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n        if (userService != null) {\n            author = author.replace(\"username\", userService.getCurrentUsername());\n        }\n    }\n    pdf.getDocumentInformation().setAuthor(author);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "310", "src_id": "M128", "code": "\n@Bean(name = \"machineType\")\npublic String determineMachineType() {\n    try {\n        boolean isDocker = runningInDocker();\n        boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n        boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n        if (isKubernetes) {\n            return \"Kubernetes\";\n        } else if (isDocker) {\n            return \"Docker\";\n        } else if (isBrowserOpen) {\n            String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n            if (os.contains(\"win\")) {\n                return \"Client-windows\";\n            } else if (os.contains(\"mac\")) {\n                return \"Client-mac\";\n            } else {\n                return \"Client-unix\";\n            }\n        } else {\n            return \"Server-jar\";\n        }\n    } catch (Exception e) {\n        return \"Unknown\";\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "311", "src_id": "M101", "code": "\nprivate void processRequest(int limitPerDay, String identifier, Map<String, Bucket> buckets,\n                            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)\n        throws IOException, ServletException {\n    Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n    ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n    if (probe.isConsumed()) {\n        response.setHeader(\"X-Rate-Limit-Remaining\", stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n        filterChain.doFilter(request, response);\n    } else {\n        long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n        response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n        response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", Newlines.stripAll(String.valueOf(waitForRefill)));\n        response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "312", "src_id": "M475", "code": "\n@Override\npublic void draw(CommandProcess process, JvmModel result) {\n  TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n\n  for (final Map.Entry<String, List<JvmItemVO>> entry : result.getJvmInfo().entrySet()) {\n    final String group = entry.getKey();\n    final List<JvmItemVO> items = entry.getValue();\n\n    table.row(true, label(group).style(Decoration.bold.bold()));\n    for (final JvmItemVO item : items) {\n      final String valueStr;\n      if (item.getValue() instanceof Map && item.getName().endsWith(\"MEMORY-USAGE\")) {\n        valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n      } else {\n        valueStr = renderItemValue(item.getValue());\n      }\n      if (item.getDesc() != null) {\n        table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n      } else {\n        table.row(item.getName(), valueStr);\n      }\n    }\n    table.row(\"\", \"\");\n  }\n\n  process.write(RenderUtil.render(table, process.width()));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "313", "src_id": "M535", "code": "\npublic static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n  final StringBuilder infoSB = new StringBuilder();\n  final List<String> classDumpFiles = affectVO.getClassDumpFiles();\n  if (classDumpFiles != null) {\n    for (final String classDumpFile : classDumpFiles) {\n      infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n    }\n  }\n\n  final List<String> methods = affectVO.getMethods();\n  if (methods != null) {\n    for (final String method : methods) {\n      infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n    }\n  }\n\n  infoSB.append(format(\"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\",\n      affectVO.getClassCount(),\n      affectVO.getMethodCount(),\n      affectVO.getCost(),\n      affectVO.getListenerId()));\n  if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n    infoSB.append('\\n').append(affectVO.getOverLimitMsg());\n  }\n  if (affectVO.getThrowable() != null) {\n    infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n  }\n  infoSB.append('\\n');\n\n  return infoSB.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "314", "src_id": "M753", "code": "\npublic List<ThreadVO> sample(Collection<ThreadVO> originThreads) {\n  final List<ThreadVO> threads = new ArrayList<>(originThreads);\n\n  if (lastCpuTimes.isEmpty()) {\n    lastSampleTimeNanos = System.nanoTime();\n    for (final ThreadVO thread : threads) {\n      if (thread.getId() > 0) {\n        final long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n        lastCpuTimes.put(thread, cpu);\n        thread.setTime(cpu / 1000000);\n      }\n    }\n\n    final Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n    if (internalThreadCpuTimes != null) {\n      for (final Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n        final ThreadVO thread = createThreadVO(entry.getKey());\n        thread.setTime(entry.getValue() / 1000000);\n        threads.add(thread);\n        lastCpuTimes.put(thread, entry.getValue());\n      }\n    }\n\n    Collections.sort(threads, new Comparator<ThreadVO>() {\n      @Override\n      public int compare(ThreadVO o1, ThreadVO o2) {\n        final long l1 = o1.getTime();\n        final long l2 = o2.getTime();\n        if (l1 < l2) return 1;\n        if (l1 > l2) return -1;\n        return 0;\n      }\n    });\n    return threads;\n  }\n\n  final long newSampleTimeNanos = System.nanoTime();\n  final Map<ThreadVO, Long> newCpuTimes = new HashMap<>(threads.size(), 1f);\n  for (final ThreadVO thread : threads) {\n    if (thread.getId() > 0) {\n      final long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n      newCpuTimes.put(thread, cpu);\n    }\n  }\n\n  final Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n  if (newInternalThreadCpuTimes != null) {\n    for (final Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n      final ThreadVO threadVO = createThreadVO(entry.getKey());\n      threads.add(threadVO);\n      newCpuTimes.put(threadVO, entry.getValue());\n    }\n  }\n\n  final Map<ThreadVO, Long> deltas = new HashMap<>(threads.size(), 1f);\n  for (final ThreadVO thread : newCpuTimes.keySet()) {\n    Long t = lastCpuTimes.get(thread);\n    if (t == null) t = 0L;\n    final long time1 = t;\n    final long time2 = newCpuTimes.get(thread);\n    final long delta = (time1 == -1 ? time2 : time2 == -1 ? time1 : time2) - time1;\n    deltas.put(thread, delta);\n  }\n\n  final long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n  final Map<ThreadVO, Double> cpuUsages = new HashMap<>(threads.size(), 1f);\n  for (final ThreadVO thread : threads) {\n    final double cpu = sampleIntervalNanos == 0 ? 0 \n        : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0;\n    cpuUsages.put(thread, cpu);\n  }\n\n  Collections.sort(threads, new Comparator<ThreadVO>() {\n    @Override\n    public int compare(ThreadVO o1, ThreadVO o2) {\n      final long l1 = deltas.get(o1);\n      final long l2 = deltas.get(o2);\n      if (l1 < l2) return 1;\n      if (l1 > l2) return -1;\n      return 0;\n    }\n  });\n\n  for (final ThreadVO thread : threads) {\n    final long timeMills = newCpuTimes.get(thread) / 1000000;\n    final long deltaTime = deltas.get(thread) / 1000000;\n    final double cpu = cpuUsages.get(thread);\n    thread.setCpu(cpu);\n    thread.setTime(timeMills);\n    thread.setDeltaTime(deltaTime);\n  }\n  \n  lastCpuTimes = newCpuTimes;\n  lastSampleTimeNanos = newSampleTimeNanos;\n  return threads;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "315", "src_id": "M1131", "code": "\nprivate ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n  final String commandLine = apiRequest.getCommand();\n  final Map<String, Object> body = new TreeMap<>();\n  body.put(\"command\", commandLine);\n\n  final ApiResponse response = new ApiResponse();\n  response.setSessionId(session.getSessionId()).setBody(body);\n\n  if (!session.tryLock()) {\n    return response.setState(ApiState.REFUSED)\n        .setMessage(\"Another command is executing.\");\n  }\n  \n  final int lock = session.getLock();\n  try {\n    final Job foregroundJob = session.getForegroundJob();\n    if (foregroundJob != null) {\n      logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n      return response.setState(ApiState.REFUSED)\n          .setMessage(\"Another job is running.\");\n    }\n\n    final Job job = createJob(commandLine, session, session.getResultDistributor());\n    body.put(\"jobId\", job.id());\n    body.put(\"jobStatus\", job.status());\n    response.setState(ApiState.SCHEDULED);\n\n    final CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n    commandRequestModel.setJobId(job.id());\n    final SharingResultDistributor resultDistributor = session.getResultDistributor();\n    if (resultDistributor != null) {\n      resultDistributor.appendResult(commandRequestModel);\n    }\n    session.setForegroundJob(job);\n    updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n    job.run();\n    return response;\n  } catch (final Throwable e) {\n    logger.error(\"Async exec command failed:\" + e.getMessage() + \", command:\" + commandLine, e);\n    response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n    final CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n    session.getResultDistributor().appendResult(commandRequestModel);\n    return response;\n  } finally {\n    if (session.getLock() == lock) {\n      session.unLock();\n    }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "316", "src_id": "M542", "code": "\nprivate String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n  final StringBuilder sb = new StringBuilder(8192);\n\n  for (final Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n    final Map<String, Object> info = entry.getValue();\n    final TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n    final TableElement appendersTable = new TableElement().rightCellPadding(1);\n\n    final Class<?> clazz = (Class<?>) info.get(LoggerHelper.clazz);\n    table.row(label(LoggerHelper.name).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.name)))\n        .row(label(LoggerHelper.clazz).style(Decoration.bold.bold()), label(\"\" + clazz.getName()))\n        .row(label(LoggerHelper.classLoader).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.classLoader)))\n        .row(label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.classLoaderHash)))\n        .row(label(LoggerHelper.level).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.level)));\n    \n    if (info.get(LoggerHelper.effectiveLevel) != null) {\n      table.row(label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n    }\n    if (info.get(LoggerHelper.config) != null) {\n      table.row(label(LoggerHelper.config).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.config)));\n    }\n\n    table.row(label(LoggerHelper.additivity).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.additivity)))\n        .row(label(LoggerHelper.codeSource).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.codeSource)));\n\n    @SuppressWarnings(\"unchecked\")\n    final List<Map<String, Object>> appenders = (List<Map<String, Object>>) info.get(LoggerHelper.appenders);\n    if (appenders != null && !appenders.isEmpty()) {\n      for (final Map<String, Object> appenderInfo : appenders) {\n        final Class<?> appenderClass = (Class<?>) appenderInfo.get(LoggerHelper.clazz);\n        appendersTable.row(label(LoggerHelper.name).style(Decoration.bold.bold()), label(\"\" + appenderInfo.get(LoggerHelper.name)))\n            .row(label(LoggerHelper.clazz), label(\"\" + appenderClass.getName()))\n            .row(label(LoggerHelper.classLoader), label(\"\" + info.get(LoggerHelper.classLoader)))\n            .row(label(LoggerHelper.classLoaderHash), label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n        \n        if (appenderInfo.get(LoggerHelper.file) != null) {\n          appendersTable.row(label(LoggerHelper.file), label(\"\" + appenderInfo.get(LoggerHelper.file)));\n        }\n        if (appenderInfo.get(LoggerHelper.target) != null) {\n          appendersTable.row(label(LoggerHelper.target), label(\"\" + appenderInfo.get(LoggerHelper.target)));\n        }\n        if (appenderInfo.get(LoggerHelper.blocking) != null) {\n          appendersTable.row(label(LoggerHelper.blocking), label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n        }\n        if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n          appendersTable.row(label(LoggerHelper.appenderRef), label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n        }\n      }\n      table.row(label(\"appenders\").style(Decoration.bold.bold()), appendersTable);\n    }\n    sb.append(RenderUtil.render(table, width)).append('\\n');\n  }\n  return sb.toString();\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "317", "src_id": "M15", "code": "\npublic static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {\n  final URLClassLoader classLoader = new URLClassLoader(\n      new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n  final Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n  final Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n  final PrintStream originSysOut = System.out;\n  final PrintStream originSysErr = System.err;\n  final PrintStream newOut = new PrintStream(out);\n  final PrintStream newErr = new PrintStream(out);\n\n  final ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n  try {\n    System.setOut(newOut);\n    System.setErr(newErr);\n    Thread.currentThread().setContextClassLoader(classLoader);\n    return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});\n  } catch (final Throwable e) {\n    final Throwable cause = e.getCause();\n    if (cause instanceof IOException || cause instanceof InterruptedException) {\n      return STATUS_ERROR;\n    } else {\n      AnsiLog.error(\"process error: {}\", cause.toString());\n      AnsiLog.error(cause);\n      return STATUS_EXEC_ERROR;\n    }\n  } finally {\n    Thread.currentThread().setContextClassLoader(tccl);\n    System.setOut(originSysOut);\n    System.setErr(originSysErr);\n    newOut.flush();\n    newErr.flush();\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "318", "src_id": "M1469", "code": "\npublic static FieldVO[] getFields(Class clazz, Integer expand) {\n  final Field[] fields = clazz.getDeclaredFields();\n  if (fields.length == 0) {\n    return new FieldVO[0];\n  }\n\n  final List<FieldVO> list = new ArrayList<>(fields.length);\n  for (final Field field : fields) {\n    final FieldVO fieldVO = new FieldVO();\n    fieldVO.setName(field.getName());\n    fieldVO.setType(StringUtils.classname(field.getType()));\n    fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n    fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n    \n    if (Modifier.isStatic(field.getModifiers())) {\n      fieldVO.setStatic(true);\n      fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n    } else {\n      fieldVO.setStatic(false);\n    }\n    list.add(fieldVO);\n  }\n  return list.toArray(new FieldVO[0]);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "329", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException\n                     | InvocationTargetException | NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "330", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections still pending on the selector\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n\n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // Shutdown sequence\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "331", "src_id": "M219", "code": "\n    public static synchronized ZooKeeper getClient(\n            String contextPath,\n            String session,\n            int expireTime) throws IOException {\n        final String connectionId = concat(contextPath, session);\n\n        ZooKeeper zk = zkMap.get(connectionId);\n        if (zk == null) {\n            if (LOG.isInfoEnabled()) {\n                LOG.info(String.format(\n                        \"creating new connection for: '%s'\", connectionId));\n            }\n            Endpoint e = contextMap.get(contextPath);\n            zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n            \n            for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n                zk.addAuthInfo(\n                        \"digest\",\n                        String.format(\"%s:%s\", p.getKey(), p.getValue()).getBytes());\n            }\n            \n            zkMap.put(connectionId, zk);\n\n            if (session != null) {\n                zkSessionTimers.put(\n                        connectionId,\n                        new SessionTimerTask(expireTime, session, contextPath, timer));\n            }\n        }\n        return zk;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "332", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        File f = new File(file);\n        try (RandomAccessFileReader in = new RandomAccessFileReader(f)) {\n            SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n            Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n            long lastFp = in.getPosition();\n            String line = in.readLine();\n            Matcher m = null;\n\n            if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n                starttime = timestampFromText(dateformat, m.group(1));\n            } else {\n                throw new IOException(\"Invalid log format. First line doesn't start with time\");\n            }\n\n            String lastentry = line;\n            try {\n                while (line != null) {\n                    m = timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (size % skipN == 0) {\n                            long time = timestampFromText(dateformat, m.group(1));\n                            skiplist.addMark(time, lastFp, size);\n                        }\n                        size++;\n                        lastentry = line;\n                    } \n                    if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                        serverid = Integer.valueOf(m.group(1));\n                    }\n\n                    lastFp = in.getPosition();\n                    line = in.readLine();\n                }\n            } catch (EOFException eof) {\n                // End of file\n            }\n            m = timep.matcher(lastentry);\n            if (m.lookingAt()) {\n                endtime = timestampFromText(dateformat, m.group(1));\n            } else {\n                throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "333", "src_id": "M235", "code": "\n    @POST\n    @Produces({ \n            MediaType.APPLICATION_JSON, \n            \"application/javascript\",\n            MediaType.APPLICATION_XML \n    })\n    public Response createSession(\n            @QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "334", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "335", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false;\n        boolean success = false;\n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                if (!tmpFile.renameTo(origFile)) {\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\n                                \"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    IOUtils.closeStream(out);\n                }\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "336", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n        try {\n            try {\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) {\n                        break;\n                    }\n\n                    Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            LogEntry e = new Log4JEntry(\n                                    src.timestampFromText(dateformat, buf), \n                                    src.getServerId(), \n                                    buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n            } catch (EOFException eof) {\n                // End of file\n            }\n            if (buf.length() > 0) {\n                LogEntry e = new Log4JEntry(\n                        src.timestampFromText(dateformat, buf), \n                        src.getServerId(), \n                        buf);\n                buf = \"\";\n                return e;\n            }\n        } catch (Exception e) {\n            LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n            return null;\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "337", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2];\n        if (op.equalsIgnoreCase(\"gettracemask\")) {\n            getTraceMask(host, port);\n        } else if (op.equalsIgnoreCase(\"settracemask\")) {\n            setTraceMask(host, port, args[3]);\n        } else if (op.equalsIgnoreCase(\"ruok\")) {\n            ruok(host, port);\n        } else if (op.equalsIgnoreCase(\"kill\")) {\n            kill(host, port);\n        } else if (op.equalsIgnoreCase(\"stat\")) {\n            stat(host, port);\n        } else if (op.equalsIgnoreCase(\"dump\")) {\n            dump(host, port);\n        } else {\n            System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "338", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception e) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), e);\n\n            if (e instanceof InterruptedIOException || e instanceof ClosedByInterruptException || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = e;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "339", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "340", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "341", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run(); // try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "342", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH); // or setLength(0);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "343", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(mContext,\n                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action,\n                        service, request.toString(), reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "344", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Can't create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // nothing to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "345", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (Exception e) {\n                Log.e(TAG, \"subtitle parse failed\", e);\n                return e instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            byte[] buffer = new byte[8 * 1024];\n            int read;\n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "346", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "347", "src_id": "M31", "code": "\nprivate JsonNode validateLicense(\n        String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n    String requestBody = String.format(\n            \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}\",\n            licenseKey, machineFingerprint);\n    \n    HttpRequest request = HttpRequest.newBuilder()\n            .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n            .header(\"Content-Type\", \"application/vnd.api+json\")\n            .header(\"Accept\", \"application/vnd.api+json\")\n            .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n            .build();\n\n    HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n    log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n    \n    JsonNode jsonResponse = objectMapper.readTree(response.body());\n    if (response.statusCode() != 200) {\n        log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        return jsonResponse;\n    }\n\n    JsonNode metaNode = jsonResponse.path(\"meta\");\n    boolean isValid = metaNode.path(\"valid\").asBoolean();\n    String detail = metaNode.path(\"detail\").asText();\n    String code = metaNode.path(\"code\").asText();\n\n    log.info(\"License validity: {}\", isValid);\n    log.info(\"Validation detail: {}\", detail);\n    log.info(\"Validation code: {}\", code);\n\n    JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n    if (!licenseAttrs.isMissingNode()) {\n        context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n        context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n        log.info(\"License floating (from license): {}, maxMachines: {}\", \n                context.isFloatingLicense, context.maxMachines);\n    }\n\n    JsonNode includedNode = jsonResponse.path(\"included\");\n    JsonNode policyNode = null;\n    if (includedNode.isArray()) {\n        for (JsonNode node : includedNode) {\n            if (\"policies\".equals(node.path(\"type\").asText())) {\n                policyNode = node;\n                break;\n            }\n        }\n    }\n\n    if (policyNode != null) {\n        boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n        int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n        if (policyFloating) {\n            context.isFloatingLicense = true;\n            context.maxMachines = policyMaxMachines;\n        }\n        log.info(\"License floating (from policy): {}, maxMachines: {}\", \n                context.isFloatingLicense, context.maxMachines);\n    }\n\n    int users = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\").path(\"users\").asInt(1);\n    applicationProperties.getPremium().setMaxUsers(users);\n\n    context.isEnterpriseLicense = jsonResponse.path(\"data\").path(\"attributes\").path(\"metadata\")\n            .path(\"isEnterprise\").asBoolean(false);\n\n    log.debug(applicationProperties.toString());\n    return jsonResponse;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "348", "src_id": "M488", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n@Operation(\n        summary = \"Convert a file to a PDF using LibreOffice\",\n        description = \"This endpoint converts a given file to a PDF using LibreOffice API Input:ANY Output:PDF Type:SISO\")\npublic ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile) throws Exception {\n    MultipartFile inputFile = generalFile.getFileInput();\n    File file = null;\n    try {\n        file = convertToPdf(inputFile);\n        PDDocument doc = pdfDocumentFactory.load(file);\n        return WebResponseUtils.pdfDocToWebResponse(\n                doc,\n                Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                        .replaceFirst(\"[.][^.]+$\", \"\") + \"_convertedToPDF.pdf\");\n    } finally {\n        if (file != null) {\n            file.delete();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "349", "src_id": "M625", "code": "\n@PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n@Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\npublic ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n    MultipartFile inputFile = request.getFileInput();\n    boolean readonly = true;\n    try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n        ObjectMapper objectMapper = new ObjectMapper();\n        ObjectNode jsonOutput = objectMapper.createObjectNode();\n        PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n\n        ObjectNode metadata = objectMapper.createObjectNode();\n        metadata.put(\"Title\", info.getTitle());\n        metadata.put(\"Author\", info.getAuthor());\n        metadata.put(\"Subject\", info.getSubject());\n        metadata.put(\"Keywords\", info.getKeywords());\n        metadata.put(\"Producer\", info.getProducer());\n        metadata.put(\"Creator\", info.getCreator());\n        metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n        metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n        jsonOutput.set(\"Metadata\", metadata);\n\n        ObjectNode basicInfo = objectMapper.createObjectNode();\n        basicInfo.put(\"FileSizeInBytes\", inputFile.getSize());\n        \n        String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n        String[] words = fullText.split(\"\\\\s+\");\n        basicInfo.put(\"WordCount\", words.length);\n        basicInfo.put(\"ParagraphCount\", fullText.split(\"\\r\\n|\\r|\\n\").length);\n        basicInfo.put(\"CharacterCount\", fullText.length());\n        \n        String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n        basicInfo.put(\"Language\", language);\n        basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n        ObjectNode docInfoNode = objectMapper.createObjectNode();\n        docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n        docInfoNode.put(\"Trapped\", info.getTrapped());\n        docInfoNode.put(\"Page Mode\", getPageModeDescription(catalog.getPageMode().name()));\n\n        PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n        ObjectNode formFieldsNode = objectMapper.createObjectNode();\n        if (acroForm != null) {\n            for (PDField field : acroForm.getFieldTree()) {\n                formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n            }\n        }\n        jsonOutput.set(\"FormFields\", formFieldsNode);\n\n        ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n        if (summaryData != null && summaryData.size() > 0) {\n            jsonOutput.set(\"SummaryData\", summaryData);\n        }\n\n        ObjectNode other = objectMapper.createObjectNode();\n        processEmbeddedFiles(pdfBoxDoc, other, objectMapper);\n        processAttachments(pdfBoxDoc, other, objectMapper);\n        processJavaScript(pdfBoxDoc, other, objectMapper);\n        processLayers(pdfBoxDoc, other, objectMapper);\n        processStructureTree(pdfBoxDoc, other, objectMapper);\n        processCompliancy(pdfBoxDoc, other);\n        processBookmarks(pdfBoxDoc, other, objectMapper);\n        processXMPMetadata(pdfBoxDoc, other);\n        processEncryption(pdfBoxDoc, other, objectMapper);\n        processPermissions(pdfBoxDoc, objectMapper, jsonOutput);\n        processPageInfo(pdfBoxDoc, objectMapper, jsonOutput);\n\n        jsonOutput.set(\"BasicInfo\", basicInfo);\n        jsonOutput.set(\"DocumentInfo\", docInfoNode);\n        jsonOutput.set(\"Other\", other);\n\n        String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n        return WebResponseUtils.bytesToWebResponse(\n                jsonString.getBytes(StandardCharsets.UTF_8),\n                \"response.json\",\n                MediaType.APPLICATION_JSON);\n    } catch (Exception e) {\n        log.error(\"Error processing PDF info\", e);\n        return null;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "350", "src_id": "M24", "code": "\nprivate boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n    try {\n        String encodedPayload = licenseFile\n                .replace(CERT_PREFIX, \"\")\n                .replace(CERT_SUFFIX, \"\")\n                .replaceAll(\"\\\\r?\\\\n\", \"\");\n        \n        byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n        String payload = new String(payloadBytes);\n        log.info(\"Decoded certificate payload: {}\", payload);\n\n        JSONObject attrs = new JSONObject(payload);\n        String encryptedData = attrs.getString(\"enc\");\n        String encodedSignature = attrs.getString(\"sig\");\n        String algorithm = attrs.getString(\"alg\");\n\n        if (!\"base64+ed25519\".equals(algorithm)) {\n            log.error(\"Unsupported algorithm: {}. Only base64+ed25519 supported\", algorithm);\n            return false;\n        }\n\n        if (!verifyEd25519Signature(encryptedData, encodedSignature)) {\n            log.error(\"License file signature invalid\");\n            return false;\n        }\n        log.info(\"License file signature valid\");\n\n        String decodedData = new String(Base64.getDecoder().decode(encryptedData));\n        return processCertificateData(decodedData, context);\n    } catch (JSONException e) {\n        log.error(\"Failed parsing license file: {}\", e.getMessage());\n        return false;\n    } catch (IllegalArgumentException e) {\n        log.error(\"Failed decoding license data: {}\", e.getMessage());\n        return false;\n    } catch (Exception e) {\n        log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n        return false;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "351", "src_id": "M403", "code": "\nprivate static void sanitizeHtmlFilesInZip(\n        Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager) throws IOException {\n    try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager);\n         ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(\n                 new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n        \n        ZipEntry entry;\n        while ((entry = zipIn.getNextEntry()) != null) {\n            Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n            if (entry.isDirectory()) {\n                continue;\n            }\n            \n            Files.createDirectories(filePath.getParent());\n            if (entry.getName().toLowerCase().endsWith(\".html\") || \n                entry.getName().toLowerCase().endsWith(\".htm\")) {\n                String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                Files.write(filePath, sanitizeHtmlContent(content, disableSanitize).getBytes(StandardCharsets.UTF_8));\n            } else {\n                Files.copy(zipIn, filePath);\n            }\n            zipIn.closeEntry();\n        }\n        zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "352", "src_id": "M317", "code": "\npublic static void addImageToDocument(\n        PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate) throws IOException {\n    boolean imageIsLandscape = image.getWidth() > image.getHeight();\n    PDRectangle pageSize = PDRectangle.A4;\n\n    if (autoRotate && imageIsLandscape) {\n        pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n    }\n\n    if (\"fitDocumentToImage\".equals(fitOption)) {\n        pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n    }\n\n    PDPage page = new PDPage(pageSize);\n    doc.addPage(page);\n\n    float pageWidth = page.getMediaBox().getWidth();\n    float pageHeight = page.getMediaBox().getHeight();\n\n    try (PDPageContentStream contentStream = new PDPageContentStream(\n            doc, page, AppendMode.APPEND, true, true)) {\n        \n        if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n            contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n        } else if (\"maintainAspectRatio\".equals(fitOption)) {\n            float imageAspectRatio = (float) image.getWidth() / image.getHeight();\n            float pageAspectRatio = pageWidth / pageHeight;\n            float scaleFactor = (imageAspectRatio > pageAspectRatio) \n                    ? pageWidth / image.getWidth() \n                    : pageHeight / image.getHeight();\n\n            float xPos = (pageWidth - image.getWidth() * scaleFactor) / 2;\n            float yPos = (pageHeight - image.getHeight() * scaleFactor) / 2;\n            contentStream.drawImage(image, xPos, yPos, \n                    image.getWidth() * scaleFactor, image.getHeight() * scaleFactor);\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "353", "src_id": "M307", "code": "\npublic static String generateMachineFingerprint() {\n    try {\n        StringBuilder sb = new StringBuilder();\n        InetAddress ip = InetAddress.getLocalHost();\n        NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n        if (network == null) {\n            Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n            while (networks.hasMoreElements()) {\n                NetworkInterface net = networks.nextElement();\n                byte[] mac = net.getHardwareAddress();\n                if (mac == null) continue;\n                for (byte b : mac) {\n                    sb.append(String.format(\"%02X\", b));\n                }\n                break;\n            }\n        } else {\n            byte[] mac = network.getHardwareAddress();\n            if (mac != null) {\n                for (byte b : mac) {\n                    sb.append(String.format(\"%02X\", b));\n                }\n            }\n        }\n\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n        StringBuilder fingerprint = new StringBuilder();\n        for (byte b : hash) {\n            fingerprint.append(String.format(\"%02x\", b));\n        }\n        return fingerprint.toString();\n    } catch (Exception e) {\n        return \"GenericID\";\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "354", "src_id": "M135", "code": "\nprivate void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n    String title = pdfMetadata.getTitle();\n    pdf.getDocumentInformation().setTitle(title);\n    pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n    pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n    pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n    pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n    String author = pdfMetadata.getAuthor();\n    if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata()\n            && runningProOrHigher) {\n        author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n        if (userService != null) {\n            author = author.replace(\"username\", userService.getCurrentUsername());\n        }\n    }\n    pdf.getDocumentInformation().setAuthor(author);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "355", "src_id": "M128", "code": "\n@Bean(name = \"machineType\")\npublic String determineMachineType() {\n    try {\n        boolean isDocker = runningInDocker();\n        boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n        boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n        if (isKubernetes) {\n            return \"Kubernetes\";\n        }\n        if (isDocker) {\n            return \"Docker\";\n        }\n        if (isBrowserOpen) {\n            String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n            if (os.contains(\"win\")) {\n                return \"Client-windows\";\n            }\n            if (os.contains(\"mac\")) {\n                return \"Client-mac\";\n            }\n            return \"Client-unix\";\n        }\n        return \"Server-jar\";\n    } catch (Exception e) {\n        return \"Unknown\";\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "356", "src_id": "M101", "code": "\nprivate void processRequest(\n        int limitPerDay,\n        String identifier,\n        Map<String, Bucket> buckets,\n        HttpServletRequest request,\n        HttpServletResponse response,\n        FilterChain filterChain) throws IOException, ServletException {\n    \n    Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n    ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n    \n    if (probe.isConsumed()) {\n        response.setHeader(\"X-Rate-Limit-Remaining\", \n                stripNewlines(Long.toString(probe.getRemainingTokens())));\n        filterChain.doFilter(request, response);\n    } else {\n        long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n        response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n        response.setHeader(\"X-Rate-Limit-Retry-After-Seconds\", String.valueOf(waitForRefill));\n        response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "357", "src_id": "M491", "code": "\n@SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n@ResizeMode\npublic static int nextResizeModeAndSaveToPrefs(\n        Player player,\n        @ResizeMode int resizeMode) {\n    int newResizeMode;\n    switch (resizeMode) {\n        case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n        default:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n            break;\n    }\n\n    // save the new resize mode so it can be restored in a future session\n    player.getPrefs().edit()\n            .putInt(\n                    player.getContext().getString(R.string.last_resize_mode),\n                    newResizeMode)\n            .apply();\n    return newResizeMode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "358", "src_id": "M424", "code": "\n@Override\npublic void onBroadcastReceived(Intent intent) {\n    super.onBroadcastReceived(intent);\n    if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n        // Close it because when changing orientation from portrait\n        // (in fullscreen mode) the size of queue layout can be larger than the screen size\n        closeItemsList();\n    } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n        // Ensure that we have audio-only stream playing when a user\n        // started to play from notification's play button from outside of the app\n        if (!fragmentIsVisible) {\n            onFragmentStopped();\n        }\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n        fragmentIsVisible = false;\n        onFragmentStopped();\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n        // Restore video source when user returns to the fragment\n        fragmentIsVisible = true;\n        player.useVideoSource(true);\n\n        // When a user returns from background, the system UI will always be shown even if\n        // controls are invisible: hide it in that case\n        if (!isControlsVisible()) {\n            hideSystemUIIfNeeded();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "359", "src_id": "M900", "code": "\n@StyleRes\npublic static int getSettingsThemeStyle(Context context) {\n    Resources res = context.getResources();\n    String lightTheme = res.getString(R.string.light_theme_key);\n    String blackTheme = res.getString(R.string.black_theme_key);\n    String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n    String selectedTheme = getSelectedThemeKey(context);\n\n    if (selectedTheme.equals(lightTheme)) {\n        return R.style.LightSettingsTheme;\n    } else if (selectedTheme.equals(blackTheme)) {\n        return R.style.BlackSettingsTheme;\n    } else if (selectedTheme.equals(automaticDeviceTheme)) {\n        if (isDeviceDarkThemeEnabled(context)) {\n            // use the dark theme variant preferred by the user\n            String selectedNightTheme = getSelectedNightThemeKey(context);\n            if (selectedNightTheme.equals(blackTheme)) {\n                return R.style.BlackSettingsTheme;\n            } else {\n                return R.style.DarkSettingsTheme;\n            }\n        } else {\n            // there is only one day theme\n            return R.style.LightSettingsTheme;\n        }\n    } else {\n        // default to dark theme\n        return R.style.DarkSettingsTheme;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "360", "src_id": "M895", "code": "\n@Override\npublic Bitmap transform(Bitmap source) {\n    if (DEBUG) {\n        Log.d(TAG, \"Thumbnail - transform() called\");\n    }\n\n    float notificationThumbnailWidth = Math.min(\n            context.getResources().getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth());\n\n    Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight()\n                    / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true);\n\n    if (result == source || !result.isMutable()) {\n        // create a new mutable bitmap to prevent strange crashes on some\n        // devices (see #4638)\n        Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight()\n                        / (source.getWidth() / (notificationThumbnailWidth - 1))),\n                null,\n                true);\n        source.recycle();\n        return copied;\n    } else {\n        source.recycle();\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "361", "src_id": "M225", "code": "\nprivate void onBroadcastReceived(Intent intent) {\n    if (intent == null || intent.getAction() == null) {\n        return;\n    }\n\n    if (DEBUG) {\n        Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n    }\n\n    switch (intent.getAction()) {\n        case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n            pause();\n            break;\n        case ACTION_CLOSE:\n            service.destroyPlayerAndStopService();\n            break;\n        case ACTION_PLAY_PAUSE:\n            playPause();\n            break;\n        case ACTION_PLAY_PREVIOUS:\n            playPrevious();\n            break;\n        case ACTION_PLAY_NEXT:\n            playNext();\n            break;\n        case ACTION_FAST_REWIND:\n            fastRewind();\n            break;\n        case ACTION_FAST_FORWARD:\n            fastForward();\n            break;\n        case ACTION_REPEAT:\n            cycleNextRepeatMode();\n            break;\n        case ACTION_SHUFFLE:\n            toggleShuffleModeEnabled();\n            break;\n        case Intent.ACTION_CONFIGURATION_CHANGED:\n            if (DEBUG) {\n                Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n            }\n            break;\n    }\n\n    UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "362", "src_id": "M749", "code": "\nprivate static void handleError(Context context, ErrorInfo errorInfo) {\n    if (errorInfo.getThrowable() != null) {\n        errorInfo.getThrowable().printStackTrace();\n    }\n\n    if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n        Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n        // Starting ReCaptcha Challenge Activity\n        Intent intent = new Intent(context, ReCaptchaActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    } else if (errorInfo.getThrowable() != null\n            && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n        Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n        Toast.makeText(context, R.string.restricted_video_no_stream, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n        Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n        Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n        Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n        Toast.makeText(context, R.string.soundcloud_go_plus_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n        Toast.makeText(context, R.string.youtube_music_premium_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n        Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n        Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n    } else {\n        ErrorUtil.createNotification(context, errorInfo);\n    }\n\n    if (context instanceof RouterActivity) {\n        ((RouterActivity) context).finish();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "363", "src_id": "M999", "code": "\npublic static void openVideoDetailFragment(\n        @NonNull Context context,\n        @NonNull FragmentManager fragmentManager,\n        int serviceId,\n        @Nullable String url,\n        @NonNull String title,\n        @Nullable PlayQueue playQueue,\n        boolean switchingPlayers) {\n\n    boolean autoPlay;\n    @Nullable PlayerType playerType = PlayerHolder.getInstance().getType();\n    if (playerType == null) {\n        // no player open\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else if (switchingPlayers) {\n        // switching player to main player\n        autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n    } else if (playerType == PlayerType.MAIN) {\n        // opening new stream while already playing in main player\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else {\n        // opening new stream while already playing in another player\n        autoPlay = false;\n    }\n\n    RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n        expandMainPlayer(detailFragment.requireActivity());\n        detailFragment.setAutoPlay(autoPlay);\n        if (switchingPlayers) {\n            // Situation when user switches from players to main player. All needed data is\n            // here, we can start watching (assuming newQueue equals playQueue).\n            // Starting directly in fullscreen if the previous player type was popup.\n            detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                    || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n        } else {\n            detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n        }\n        detailFragment.scrollToTop();\n    };\n\n    Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n    if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n        onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n    } else {\n        // Specify no url here, otherwise the VideoDetailFragment will start loading the\n        // stream automatically if it's the first time it is being opened, but then\n        // onVideoDetailFragmentReady will kick in and start another loading process.\n        // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n        VideoDetailFragment instance = VideoDetailFragment\n                .getInstance(serviceId, null, title, playQueue);\n        instance.setAutoPlay(autoPlay);\n\n        defaultTransaction(fragmentManager)\n                .replace(R.id.fragment_player_holder, instance)\n                .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                .commit();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "364", "src_id": "M698", "code": "\n@Override\npublic void handleResult(@NonNull ChannelInfo result) {\n    super.handleResult(result);\n    currentInfo = result;\n    setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n    if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n        PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelBannerImage);\n    } else {\n        // do not waste space for the banner, if the user disabled images or there is not one\n        binding.channelBannerImage.setImageDrawable(null);\n    }\n\n    PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.channelAvatarView);\n    PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n            .into(binding.subChannelAvatarView);\n\n    binding.channelTitleView.setText(result.getName());\n    binding.channelSubscriberView.setVisibility(View.VISIBLE);\n    if (result.getSubscriberCount() >= 0) {\n        binding.channelSubscriberView.setText(Localization\n                .shortSubscriberCount(activity, result.getSubscriberCount()));\n    } else {\n        binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n    }\n\n    if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n        binding.subChannelTitleView.setText(String.format(\n                getString(R.string.channel_created_by),\n                currentInfo.getParentChannelName())\n        );\n        binding.subChannelTitleView.setVisibility(View.VISIBLE);\n        binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n    }\n\n    updateRssButton();\n\n    channelContentNotSupported = false;\n    for (Throwable throwable : result.getErrors()) {\n        if (throwable instanceof ContentNotSupportedException) {\n            channelContentNotSupported = true;\n            showContentNotSupportedIfNeeded();\n            break;\n        }\n    }\n\n    disposables.clear();\n    if (subscribeButtonMonitor != null) {\n        subscribeButtonMonitor.dispose();\n    }\n\n    updateTabs();\n    updateSubscription(result);\n    monitorSubscription(result);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "365", "src_id": "M379", "code": "\n@Override\npublic void onTextTracksChanged(@NonNull Tracks currentTracks) {\n    super.onTextTracksChanged(currentTracks);\n\n    boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n            || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n    if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n            || !trackTypeTextSupported) {\n        binding.captionTextView.setVisibility(View.GONE);\n        return;\n    }\n\n    // Extract all loaded languages\n    List<Tracks.Group> textTracks = currentTracks\n            .getGroups()\n            .stream()\n            .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n            .collect(Collectors.toList());\n    List<String> availableLanguages = textTracks.stream()\n            .map(Tracks.Group::getMediaTrackGroup)\n            .filter(textTrack -> textTrack.length > 0)\n            .map(textTrack -> textTrack.getFormat(0).language)\n            .collect(Collectors.toList());\n\n    // Find selected text track\n    Optional<Format> selectedTracks = textTracks.stream()\n            .filter(Tracks.Group::isSelected)\n            .filter(info -> info.getMediaTrackGroup().length >= 1)\n            .map(info -> info.getMediaTrackGroup().getFormat(0))\n            .findFirst();\n\n    // Build UI\n    buildCaptionMenu(availableLanguages);\n    if (player.getTrackSelector().getParameters().getRendererDisabled(\n            player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n        binding.captionTextView.setText(R.string.caption_none);\n    } else {\n        binding.captionTextView.setText(selectedTracks.get().language);\n    }\n    binding.captionTextView.setVisibility(\n            availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "366", "src_id": "M894", "code": "\npublic static RequestCreator loadScaledDownThumbnail(\n        Context context,\n        @NonNull List<Image> images) {\n    // scale down the notification thumbnail for performance\n    return PicassoHelper.loadThumbnail(images)\n            .transform(new Transformation() {\n                @Override\n                public Bitmap transform(Bitmap source) {\n                    if (DEBUG) {\n                        Log.d(TAG, \"Thumbnail - transform() called\");\n                    }\n\n                    float notificationThumbnailWidth = Math.min(\n                            context.getResources()\n                                    .getDimension(R.dimen.player_notification_thumbnail_width),\n                            source.getWidth());\n\n                    Bitmap result = BitmapCompat.createScaledBitmap(\n                            source,\n                            (int) notificationThumbnailWidth,\n                            (int) (source.getHeight()\n                                    / (source.getWidth() / notificationThumbnailWidth)),\n                            null,\n                            true);\n\n                    if (result == source || !result.isMutable()) {\n                        // create a new mutable bitmap to prevent strange crashes on some\n                        // devices (see #4638)\n                        Bitmap copied = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth - 1,\n                                (int) (source.getHeight() / (source.getWidth()\n                                        / (notificationThumbnailWidth - 1))),\n                                null,\n                                true);\n                        source.recycle();\n                        return copied;\n                    } else {\n                        source.recycle();\n                        return result;\n                    }\n                }\n\n                @Override\n                public String key() {\n                    return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                }\n            });\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "367", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        if (DEBUG) {\n            Log.d(TAG, \"doPostprocessing() called\");\n        }\n\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        final Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "368", "src_id": "M1031", "code": "\n    void establishConnection(final int threadId, final HttpURLConnection conn) throws IOException, HttpError {\n        if (DEBUG) {\n            Log.d(TAG, \"establishConnection() called with: threadId = [\" + threadId + \"], conn = [\" + conn + \"]\");\n        }\n\n        final int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "369", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"parseEdts() called with: ref = [\" + ref + \"]\");\n        }\n\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "370", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        if (DEBUG) {\n            Log.d(TAG, \"run() called for thread\");\n        }\n\n        boolean done = false;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            final long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            final int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            final byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run(); // try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "371", "src_id": "M1141", "code": "\n    private void flushAuxiliar(final long amount) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"flushAuxiliar() called with: amount = [\" + amount + \"]\");\n        }\n\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        final boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        final byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH); // or setLength(0);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "372", "src_id": "M1106", "code": "\n    private void showError(final DownloadMission mission, final UserAction action, @StringRes final int reason) {\n        if (DEBUG) {\n            Log.d(TAG, \"showError() called\");\n        }\n\n        final StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (final MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(mContext,\n                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action,\n                        service, request.toString(), reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "373", "src_id": "M1067", "code": "\n    void startMission(final DownloadMission mission) {\n        if (DEBUG) {\n            Log.d(TAG, \"startMission() called with: mission = [\" + mission + \"]\");\n        }\n\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // nothing to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            final boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "374", "src_id": "M1136", "code": "\n    @Override\n    int process(final SharpStream out, final SharpStream... sources) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"process() called\");\n        }\n\n        // check if the subtitle is already in srt and copy, this should never happen\n        final String format = getArgumentAt(0, null);\n        final boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            final SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            final byte[] buffer = new byte[8 * 1024];\n            int read;\n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "375", "src_id": "M1047", "code": "\n    private void joinForThreads(final int millis) {\n        if (DEBUG) {\n            Log.d(TAG, \"joinForThreads() called with: millis = [\" + millis + \"]\");\n        }\n\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (final Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) continue;\n            thread.interrupt();\n        }\n\n        try {\n            for (final Thread thread : threads) {\n                if (!thread.isAlive()) continue;\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "376", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                return (AdminServer) jettyAdminServerC.getConstructor().newInstance();\n            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | \n                     InvocationTargetException | NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "377", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "378", "src_id": "M219", "code": "\n    synchronized public static ZooKeeper getClient(String contextPath,\n            String session, int expireTime) throws IOException {\n        final String connectionId = concat(contextPath, session);\n\n        ZooKeeper zk = zkMap.get(connectionId);\n        if (zk == null) {\n            LOG.info(\"creating new connection for : '{}'\", connectionId);\n            Endpoint e = contextMap.get(contextPath);\n            zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n            \n            for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n                zk.addAuthInfo(\"digest\", (p.getKey() + \":\" + p.getValue()).getBytes());\n            }\n            \n            zkMap.put(connectionId, zk);\n\n            if (session != null) {\n                zkSessionTimers.put(connectionId, new SessionTimerTask(\n                        expireTime, session, contextPath, timer));\n            }\n        }\n        return zk;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "379", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        File f = new File(file);\n        try (RandomAccessFileReader in = new RandomAccessFileReader(f)) {\n            SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n            Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n            long lastFp = in.getPosition();\n            String line = in.readLine();\n            Matcher m;\n\n            if (line != null && (m = timep.matcher(line)).lookingAt()) {\n                starttime = timestampFromText(dateformat, m.group(1));\n            } else {\n                throw new IOException(\"Invalid log format. First line doesn't start with time\");\n            }\n\n            String lastentry = line;\n            try {\n                while (line != null) {\n                    m = timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (size % skipN == 0) {\n                            long time = timestampFromText(dateformat, m.group(1));\n                            skiplist.addMark(time, lastFp, size);\n                        }\n                        size++;\n                        lastentry = line;\n                    } \n                    if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                        serverid = Integer.valueOf(m.group(1));\n                    }\n\n                    lastFp = in.getPosition();\n                    line = in.readLine();\n                }\n            } catch (EOFException eof) {\n                // ignore\n            }\n\n            m = timep.matcher(lastentry);\n            if (m.lookingAt()) {\n                endtime = timestampFromText(dateformat, m.group(1));\n            } else {\n                throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "380", "src_id": "M235", "code": "\n    @POST\n    @Produces( { MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!\"create\".equals(op)) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "381", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                int workerNum = ((int) (id % size) + size) % size;\n                workers.get(workerNum).execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "382", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false;\n        boolean success = false;\n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                if (!tmpFile.renameTo(origFile)) {\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    IOUtils.closeStream(out);\n                }\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "383", "src_id": "M186", "code": "\n\tsynchronized private LogEntry readNextEntry() {\n\t    try {\n                String line;\n                while ((line = in.readLine()) != null) {\n                    Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n\t\tif (buf.length() > 0) {\n\t\t    LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n\t\t    buf = \"\";\n\t\t    return e;\n\t\t}\n\t    } catch (EOFException eof) {\n\t\t// ignore\n\t    } catch (Exception e) {\n\t\tLOG.error(\"Error reading next entry in file ({}): {}\", src.file, e);\n\t\treturn null;\n\t    }\n\t    return null;\n\t}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "384", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2].toLowerCase();\n        \n        switch (op) {\n            case \"gettracemask\":\n                getTraceMask(host, port);\n                break;\n            case \"settracemask\":\n                setTraceMask(host, port, args[3]);\n                break;\n            case \"ruok\":\n                ruok(host, port);\n                break;\n            case \"kill\":\n                kill(host, port);\n                break;\n            case \"stat\":\n                stat(host, port);\n                break;\n            case \"dump\":\n                dump(host, port);\n                break;\n            default:\n                System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "385", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            // Main processing loop\n            for (;;) {\n\n                // Inner item processing\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    // Check completion state\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    // Process current item\n                    inner.compareAndSet(current, null);\n                    downstream.onNext(current.item);\n                }\n\n                // Update missed count\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "386", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n\n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n\n            // Handle predicate result\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "387", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n\n            // Main drain loop\n            for (;;) {\n\n                // Inner processing loop\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    // Process other state\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    // Check main completion\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                // Update missed count\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "388", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            // Window processing loop\n            for (;;) {\n\n                if (upstreamCancelled) {\n                    // Cleanup resources\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    // Process queue items\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    // Handle completion\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        // Handle boundary events\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            // Process data item\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            // Update window count\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n                        continue;\n                    }\n                }\n\n                // Update missed count\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "389", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            // Main comparison loop\n            for (;;) {\n\n                // Item processing\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    // Check observer states\n                    boolean d1 = observer1.done;\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    // Poll items\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    // Handle completion\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    // Compare items\n                    if (!e1 && !e2) {\n                        boolean c;\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                // Update missed count\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "390", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            // Main request processing loop\n            for (;;) {\n\n                long r = requested.get();\n                long e = 0;\n\n                // Middle processing block\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    // Process subscribers\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    // Check completion\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                // Post-processing checks\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    // Check remaining items\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                // Update counters\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "391", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            // Main drain loop\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    // Handle inner subscriber transition\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        // Process queued items\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            // Check inner completion\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                // Update counters\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "392", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        // Handle removal from observers array\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            \n            // Create new array without the consumer\n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "393", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            // Fused processing loop\n            for (;;) {\n                if (disposed) {\n                    return;\n                }\n\n                // Check completion state\n                boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                // Handle termination\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) {\n                        downstream.onError(ex);\n                    } else {\n                        downstream.onComplete();\n                    }\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "394", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        // Remove subscription from subscribers array\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            // Create new array without the subscription\n            PublishSubscription<T>[] b;\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            \n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "395", "src_id": "M491", "code": "\n@SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n@ResizeMode\npublic static int nextResizeModeAndSaveToPrefs(final Player player,\n        @ResizeMode final int resizeMode) {\n    final int newResizeMode;\n    switch (resizeMode) {\n        case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n            break;\n        case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n        default:\n            newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n            break;\n    }\n\n    // save the new resize mode so it can be restored in a future session\n    player.getPrefs().edit()\n            .putInt(player.getContext().getString(R.string.last_resize_mode), newResizeMode)\n            .apply();\n    return newResizeMode;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "396", "src_id": "M424", "code": "\n@Override\npublic void onBroadcastReceived(final Intent intent) {\n    super.onBroadcastReceived(intent);\n    if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n        // Close it because when changing orientation from portrait\n        // (in fullscreen mode) the size of queue layout can be larger than the screen size\n        closeItemsList();\n    } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n        // Ensure that we have audio-only stream playing when a user\n        // started to play from notification's play button from outside of the app\n        if (!fragmentIsVisible) {\n            onFragmentStopped();\n        }\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n        fragmentIsVisible = false;\n        onFragmentStopped();\n    } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n        // Restore video source when user returns to the fragment\n        fragmentIsVisible = true;\n        player.useVideoSource(true);\n\n        // When a user returns from background, the system UI will always be shown even if\n        // controls are invisible: hide it in that case\n        if (!isControlsVisible()) {\n            hideSystemUIIfNeeded();\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "397", "src_id": "M900", "code": "\n@StyleRes\npublic static int getSettingsThemeStyle(final Context context) {\n    final Resources res = context.getResources();\n    final String lightTheme = res.getString(R.string.light_theme_key);\n    final String blackTheme = res.getString(R.string.black_theme_key);\n    final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n    final String selectedTheme = getSelectedThemeKey(context);\n\n    if (selectedTheme.equals(lightTheme)) {\n        return R.style.LightSettingsTheme;\n    } else if (selectedTheme.equals(blackTheme)) {\n        return R.style.BlackSettingsTheme;\n    } else if (selectedTheme.equals(automaticDeviceTheme)) {\n        if (isDeviceDarkThemeEnabled(context)) {\n            // use the dark theme variant preferred by the user\n            final String selectedNightTheme = getSelectedNightThemeKey(context);\n            if (selectedNightTheme.equals(blackTheme)) {\n                return R.style.BlackSettingsTheme;\n            } else {\n                return R.style.DarkSettingsTheme;\n            }\n        } else {\n            // there is only one day theme\n            return R.style.LightSettingsTheme;\n        }\n    } else {\n        // default to dark theme\n        return R.style.DarkSettingsTheme;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "398", "src_id": "M895", "code": "\n@Override\npublic Bitmap transform(final Bitmap source) {\n    if (DEBUG) {\n        Log.d(TAG, \"Thumbnail - transform() called\");\n    }\n\n    final float notificationThumbnailWidth = Math.min(\n            context.getResources().getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth());\n\n    final Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight() / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true);\n\n    if (result == source || !result.isMutable()) {\n        // create a new mutable bitmap to prevent strange crashes on some\n        // devices (see #4638)\n        final Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight() / (source.getWidth() / (notificationThumbnailWidth - 1))),\n                null,\n                true);\n        source.recycle();\n        return copied;\n    } else {\n        source.recycle();\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "399", "src_id": "M225", "code": "\nprivate void onBroadcastReceived(final Intent intent) {\n    if (intent == null || intent.getAction() == null) {\n        return;\n    }\n\n    if (DEBUG) {\n        Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n    }\n\n    switch (intent.getAction()) {\n        case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n            pause();\n            break;\n        case ACTION_CLOSE:\n            service.destroyPlayerAndStopService();\n            break;\n        case ACTION_PLAY_PAUSE:\n            playPause();\n            break;\n        case ACTION_PLAY_PREVIOUS:\n            playPrevious();\n            break;\n        case ACTION_PLAY_NEXT:\n            playNext();\n            break;\n        case ACTION_FAST_REWIND:\n            fastRewind();\n            break;\n        case ACTION_FAST_FORWARD:\n            fastForward();\n            break;\n        case ACTION_REPEAT:\n            cycleNextRepeatMode();\n            break;\n        case ACTION_SHUFFLE:\n            toggleShuffleModeEnabled();\n            break;\n        case Intent.ACTION_CONFIGURATION_CHANGED:\n            if (DEBUG) {\n                Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n            }\n            break;\n    }\n\n    UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "400", "src_id": "M749", "code": "\nprivate static void handleError(final Context context, final ErrorInfo errorInfo) {\n    if (errorInfo.getThrowable() != null) {\n        errorInfo.getThrowable().printStackTrace();\n    }\n\n    if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n        Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n        // Starting ReCaptcha Challenge Activity\n        final Intent intent = new Intent(context, ReCaptchaActivity.class);\n        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n        context.startActivity(intent);\n    } else if (errorInfo.getThrowable() != null\n            && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n        Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n        Toast.makeText(context, R.string.restricted_video_no_stream, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n        Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n        Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n        Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n        Toast.makeText(context, R.string.soundcloud_go_plus_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n        Toast.makeText(context, R.string.youtube_music_premium_content, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n        Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n    } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n        Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n    } else {\n        ErrorUtil.createNotification(context, errorInfo);\n    }\n\n    if (context instanceof RouterActivity) {\n        ((RouterActivity) context).finish();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "401", "src_id": "M999", "code": "\npublic static void openVideoDetailFragment(@NonNull final Context context,\n        @NonNull final FragmentManager fragmentManager,\n        final int serviceId,\n        @Nullable final String url,\n        @NonNull final String title,\n        @Nullable final PlayQueue playQueue,\n        final boolean switchingPlayers) {\n\n    final boolean autoPlay;\n    @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n    if (playerType == null) {\n        // no player open\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else if (switchingPlayers) {\n        // switching player to main player\n        autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n    } else if (playerType == PlayerType.MAIN) {\n        // opening new stream while already playing in main player\n        autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n    } else {\n        // opening new stream while already playing in another player\n        autoPlay = false;\n    }\n\n    final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n        expandMainPlayer(detailFragment.requireActivity());\n        detailFragment.setAutoPlay(autoPlay);\n        if (switchingPlayers) {\n            // Situation when user switches from players to main player. All needed data is\n            // here, we can start watching (assuming newQueue equals playQueue).\n            // Starting directly in fullscreen if the previous player type was popup.\n            detailFragment.openVideoPlayer(\n                    playerType == PlayerType.POPUP\n                            || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n        } else {\n            detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n        }\n        detailFragment.scrollToTop();\n    };\n\n    final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n    if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n        onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n    } else {\n        // Specify no url here, otherwise the VideoDetailFragment will start loading the\n        // stream automatically if it's the first time it is being opened, but then\n        // onVideoDetailFragmentReady will kick in and start another loading process.\n        // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n        final VideoDetailFragment instance = VideoDetailFragment\n                .getInstance(serviceId, null, title, playQueue);\n        instance.setAutoPlay(autoPlay);\n\n        defaultTransaction(fragmentManager)\n                .replace(R.id.fragment_player_holder, instance)\n                .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                .commit();\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "402", "src_id": "M698", "code": "\n@Override\npublic void handleResult(@NonNull final ChannelInfo result) {\n    super.handleResult(result);\n    currentInfo = result;\n    setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n    if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n        PicassoHelper.loadBanner(result.getBanners())\n                .tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelBannerImage);\n    } else {\n        // do not waste space for the banner, if the user disabled images or there is not one\n        binding.channelBannerImage.setImageDrawable(null);\n    }\n\n    PicassoHelper.loadAvatar(result.getAvatars())\n            .tag(PICASSO_CHANNEL_TAG)\n            .into(binding.channelAvatarView);\n    PicassoHelper.loadAvatar(result.getParentChannelAvatars())\n            .tag(PICASSO_CHANNEL_TAG)\n            .into(binding.subChannelAvatarView);\n\n    binding.channelTitleView.setText(result.getName());\n    binding.channelSubscriberView.setVisibility(View.VISIBLE);\n    if (result.getSubscriberCount() >= 0) {\n        binding.channelSubscriberView.setText(\n                Localization.shortSubscriberCount(activity, result.getSubscriberCount()));\n    } else {\n        binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n    }\n\n    if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n        binding.subChannelTitleView.setText(\n                String.format(getString(R.string.channel_created_by),\n                        currentInfo.getParentChannelName()));\n        binding.subChannelTitleView.setVisibility(View.VISIBLE);\n        binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n    }\n\n    updateRssButton();\n\n    channelContentNotSupported = false;\n    for (final Throwable throwable : result.getErrors()) {\n        if (throwable instanceof ContentNotSupportedException) {\n            channelContentNotSupported = true;\n            showContentNotSupportedIfNeeded();\n            break;\n        }\n    }\n\n    disposables.clear();\n    if (subscribeButtonMonitor != null) {\n        subscribeButtonMonitor.dispose();\n    }\n\n    updateTabs();\n    updateSubscription(result);\n    monitorSubscription(result);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "403", "src_id": "M379", "code": "\n@Override\npublic void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n    super.onTextTracksChanged(currentTracks);\n\n    final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n            || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n    if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n            || !trackTypeTextSupported) {\n        binding.captionTextView.setVisibility(View.GONE);\n        return;\n    }\n\n    // Extract all loaded languages\n    final List<Tracks.Group> textTracks = currentTracks\n            .getGroups()\n            .stream()\n            .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n            .collect(Collectors.toList());\n    final List<String> availableLanguages = textTracks.stream()\n            .map(Tracks.Group::getMediaTrackGroup)\n            .filter(textTrack -> textTrack.length > 0)\n            .map(textTrack -> textTrack.getFormat(0).language)\n            .collect(Collectors.toList());\n\n    // Find selected text track\n    final Optional<Format> selectedTracks = textTracks.stream()\n            .filter(Tracks.Group::isSelected)\n            .filter(info -> info.getMediaTrackGroup().length >= 1)\n            .map(info -> info.getMediaTrackGroup().getFormat(0))\n            .findFirst();\n\n    // Build UI\n    buildCaptionMenu(availableLanguages);\n    if (player.getTrackSelector().getParameters().getRendererDisabled(\n            player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n        binding.captionTextView.setText(R.string.caption_none);\n    } else {\n        binding.captionTextView.setText(selectedTracks.get().language);\n    }\n    binding.captionTextView.setVisibility(\n            availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "404", "src_id": "M894", "code": "\npublic static RequestCreator loadScaledDownThumbnail(final Context context,\n        @NonNull final List<Image> images) {\n    // scale down the notification thumbnail for performance\n    return PicassoHelper.loadThumbnail(images)\n            .transform(new Transformation() {\n                @Override\n                public Bitmap transform(final Bitmap source) {\n                    if (DEBUG) {\n                        Log.d(TAG, \"Thumbnail - transform() called\");\n                    }\n\n                    final float notificationThumbnailWidth = Math.min(\n                            context.getResources().getDimension(\n                                    R.dimen.player_notification_thumbnail_width),\n                            source.getWidth());\n\n                    final Bitmap result = BitmapCompat.createScaledBitmap(\n                            source,\n                            (int) notificationThumbnailWidth,\n                            (int) (source.getHeight()\n                                    / (source.getWidth() / notificationThumbnailWidth)),\n                            null,\n                            true);\n\n                    if (result == source || !result.isMutable()) {\n                        // create a new mutable bitmap to prevent strange crashes on some\n                        // devices (see #4638)\n                        final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth - 1,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / (notificationThumbnailWidth - 1))),\n                                null,\n                                true);\n                        source.recycle();\n                        return copied;\n                    } else {\n                        source.recycle();\n                        return result;\n                    }\n                }\n\n                @Override\n                public String key() {\n                    return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                }\n            });\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "405", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final Observer<? super R> downstream = this.downstream;\n            final AtomicThrowable errors = this.errors;\n            final AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "406", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "407", "src_id": "M522", "code": "\n        void drainLoop() {\n            final Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "408", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "409", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    boolean d1 = observer1.done;\n\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "410", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            final JoinInnerSubscriber<T>[] s = this.subscribers;\n            final int n = s.length;\n            final Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "411", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            final Subscriber<? super R> a = downstream;\n            final ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n\n                            e++;\n\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "412", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            CacheDisposable<T>[] next;\n\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "413", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            for (;;) {\n                if (disposed) {\n                    return;\n                }\n\n                boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) {\n                        downstream.onError(ex);\n                    } else {\n                        downstream.onComplete();\n                    }\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "414", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "415", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "416", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            \n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "417", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            \n            for (;;) {\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "418", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "419", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    boolean d1 = observer1.done;\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "420", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "421", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "422", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "423", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            for (;;) {\n                if (disposed) {\n                    return;\n                }\n\n                boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) {\n                        downstream.onError(ex);\n                    } else {\n                        downstream.onComplete();\n                    }\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "424", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            \n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "254", "src_id": "M66", "code": "\nvoid drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    Observer<? super R> downstream = this.downstream;\n    AtomicThrowable errors = this.errors;\n    AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n    for (;;) {\n\n        for (;;) {\n            if (cancelled) {\n                return;\n            }\n\n            if (errors.get() != null) {\n                if (!delayErrors) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n            }\n\n            boolean d = done;\n            SwitchMapMaybeObserver<R> current = inner.get();\n            boolean empty = current == null;\n\n            if (d && empty) {\n                errors.tryTerminateConsumer(downstream);\n                return;\n            }\n\n            if (empty || current.item == null) {\n                break;\n            }\n\n            inner.compareAndSet(current, null);\n\n            downstream.onNext(current.item);\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "255", "src_id": "M1333", "code": "\n@Override\npublic void onNext(T t) {\n    if (done) {\n        return;\n    }\n    boolean b;\n    try {\n        b = predicate.test(t);\n    } catch (Throwable e) {\n        Exceptions.throwIfFatal(e);\n        upstream.cancel();\n        upstream = SubscriptionHelper.CANCELLED;\n        onError(e);\n        return;\n    }\n    if (!b) {\n        done = true;\n        upstream.cancel();\n        upstream = SubscriptionHelper.CANCELLED;\n        downstream.onSuccess(false);\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "256", "src_id": "M522", "code": "\nvoid drainLoop() {\n    Observer<? super T> actual = this.downstream;\n    int missed = 1;\n    for (;;) {\n\n        for (;;) {\n            if (disposed) {\n                singleItem = null;\n                queue = null;\n                return;\n            }\n\n            if (errors.get() != null) {\n                singleItem = null;\n                queue = null;\n                errors.tryTerminateConsumer(actual);\n                return;\n            }\n\n            int os = otherState;\n            if (os == OTHER_STATE_HAS_VALUE) {\n                T v = singleItem;\n                singleItem = null;\n                otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                actual.onNext(v);\n            }\n\n            boolean d = mainDone;\n            SimplePlainQueue<T> q = queue;\n            T v = q != null ? q.poll() : null;\n            boolean empty = v == null;\n\n            if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                queue = null;\n                actual.onComplete();\n                return;\n            }\n\n            if (empty) {\n                break;\n            }\n\n            actual.onNext(v);\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "257", "src_id": "M1163", "code": "\n@Override\nvoid drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    final SimplePlainQueue<Object> queue = this.queue;\n    final Subscriber<? super Flowable<T>> downstream = this.downstream;\n    UnicastProcessor<T> window = this.window;\n\n    for (;;) {\n\n        if (upstreamCancelled) {\n            queue.clear();\n            window = null;\n            this.window = null;\n        } else {\n\n            boolean isDone = done;\n            Object o = queue.poll();\n            boolean isEmpty = o == null;\n\n            if (isDone && isEmpty) {\n                Throwable ex = error;\n                if (ex != null) {\n                    if (window != null) {\n                        window.onError(ex);\n                    }\n                    downstream.onError(ex);\n                } else {\n                    if (window != null) {\n                        window.onComplete();\n                    }\n                    downstream.onComplete();\n                }\n                cleanupResources();\n                upstreamCancelled = true;\n                continue;\n            } else if (!isEmpty) {\n                if (o instanceof WindowBoundaryRunnable) {\n                    WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                    if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                        this.count = 0;\n                        window = createNewWindow(window);\n                    }\n                } else if (window != null) {\n                    @SuppressWarnings(\"unchecked\")\n                    T item = (T)o;\n                    window.onNext(item);\n\n                    long count = this.count + 1;\n                    if (count == maxSize) {\n                        this.count = 0;\n                        window = createNewWindow(window);\n                    } else {\n                        this.count = count;\n                    }\n                }\n\n                continue;\n            }\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "258", "src_id": "M478", "code": "\nvoid drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    EqualObserver<T>[] as = observers;\n\n    final EqualObserver<T> observer1 = as[0];\n    final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n    final EqualObserver<T> observer2 = as[1];\n    final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n    for (;;) {\n\n        for (;;) {\n            if (cancelled) {\n                q1.clear();\n                q2.clear();\n                return;\n            }\n\n            boolean d1 = observer1.done;\n\n            if (d1) {\n                Throwable e = observer1.error;\n                if (e != null) {\n                    cancel(q1, q2);\n\n                    downstream.onError(e);\n                    return;\n                }\n            }\n\n            boolean d2 = observer2.done;\n            if (d2) {\n                Throwable e = observer2.error;\n                if (e != null) {\n                    cancel(q1, q2);\n\n                    downstream.onError(e);\n                    return;\n                }\n            }\n\n            if (v1 == null) {\n                v1 = q1.poll();\n            }\n            boolean e1 = v1 == null;\n\n            if (v2 == null) {\n                v2 = q2.poll();\n            }\n            boolean e2 = v2 == null;\n\n            if (d1 && d2 && e1 && e2) {\n                downstream.onSuccess(true);\n                return;\n            }\n            if ((d1 && d2) && (e1 != e2)) {\n                cancel(q1, q2);\n\n                downstream.onSuccess(false);\n                return;\n            }\n\n            if (!e1 && !e2) {\n                boolean c;\n\n                try {\n                    c = comparer.test(v1, v2);\n                } catch (Throwable ex) {\n                    Exceptions.throwIfFatal(ex);\n                    cancel(q1, q2);\n\n                    downstream.onError(ex);\n                    return;\n                }\n\n                if (!c) {\n                    cancel(q1, q2);\n\n                    downstream.onSuccess(false);\n                    return;\n                }\n\n                v1 = null;\n                v2 = null;\n            }\n\n            if (e1 || e2) {\n                break;\n            }\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "259", "src_id": "M885", "code": "\nvoid drainLoop() {\n    int missed = 1;\n\n    JoinInnerSubscriber<T>[] s = this.subscribers;\n    int n = s.length;\n    Subscriber<? super T> a = this.downstream;\n\n    for (;;) {\n\n        long r = requested.get();\n        long e = 0;\n\n        middle:\n        while (e != r) {\n            if (cancelled) {\n                cleanup();\n                return;\n            }\n\n            Throwable ex = errors.get();\n            if (ex != null) {\n                cleanup();\n                a.onError(ex);\n                return;\n            }\n\n            boolean d = done.get() == 0;\n\n            boolean empty = true;\n\n            for (int i = 0; i < s.length; i++) {\n                JoinInnerSubscriber<T> inner = s[i];\n                SimplePlainQueue<T> q = inner.queue;\n                if (q != null) {\n                    T v = q.poll();\n\n                    if (v != null) {\n                        empty = false;\n                        a.onNext(v);\n                        inner.requestOne();\n                        if (++e == r) {\n                            break middle;\n                        }\n                    }\n                }\n            }\n\n            if (d && empty) {\n                a.onComplete();\n                return;\n            }\n\n            if (empty) {\n                break;\n            }\n        }\n\n        if (e == r) {\n            if (cancelled) {\n                cleanup();\n                return;\n            }\n\n            Throwable ex = errors.get();\n            if (ex != null) {\n                cleanup();\n                a.onError(ex);\n                return;\n            }\n\n            boolean d = done.get() == 0;\n\n            boolean empty = true;\n\n            for (int i = 0; i < n; i++) {\n                JoinInnerSubscriber<T> inner = s[i];\n\n                SimpleQueue<T> q = inner.queue;\n                if (q != null && !q.isEmpty()) {\n                    empty = false;\n                    break;\n                }\n            }\n\n            if (d && empty) {\n                a.onComplete();\n                return;\n            }\n        }\n\n        if (e != 0) {\n            BackpressureHelper.produced(requested, e);\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "260", "src_id": "M1399", "code": "\n@Override\npublic void drain() {\n    if (getAndIncrement() != 0) {\n        return;\n    }\n\n    int missed = 1;\n    InnerQueuedSubscriber<R> inner = current;\n    Subscriber<? super R> a = downstream;\n    ErrorMode em = errorMode;\n\n    for (;;) {\n        long r = requested.get();\n        long e = 0L;\n\n        if (inner == null) {\n\n            if (em != ErrorMode.END) {\n                Throwable ex = errors.get();\n                if (ex != null) {\n                    cancelAll();\n\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n            }\n\n            boolean outerDone = done;\n\n            inner = subscribers.poll();\n\n            if (outerDone && inner == null) {\n                errors.tryTerminateConsumer(downstream);\n                return;\n            }\n\n            if (inner != null) {\n                current = inner;\n            }\n        }\n\n        boolean continueNextSource = false;\n\n        if (inner != null) {\n            SimpleQueue<R> q = inner.queue();\n            if (q != null) {\n                while (e != r) {\n                    if (cancelled) {\n                        cancelAll();\n                        return;\n                    }\n\n                    if (em == ErrorMode.IMMEDIATE) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            current = null;\n                            inner.cancel();\n                            cancelAll();\n\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = inner.isDone();\n\n                    R v;\n\n                    try {\n                        v = q.poll();\n                    } catch (Throwable ex) {\n                        Exceptions.throwIfFatal(ex);\n                        current = null;\n                        inner.cancel();\n                        cancelAll();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean empty = v == null;\n\n                    if (d && empty) {\n                        inner = null;\n                        current = null;\n                        upstream.request(1);\n                        continueNextSource = true;\n                        break;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    a.onNext(v);\n\n                    e++;\n\n                    inner.request(1L);\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cancelAll();\n                        return;\n                    }\n\n                    if (em == ErrorMode.IMMEDIATE) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            current = null;\n                            inner.cancel();\n                            cancelAll();\n\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = inner.isDone();\n\n                    boolean empty = q.isEmpty();\n\n                    if (d && empty) {\n                        inner = null;\n                        current = null;\n                        upstream.request(1);\n                        continueNextSource = true;\n                    }\n                }\n            }\n        }\n\n        if (e != 0L && r != Long.MAX_VALUE) {\n            requested.addAndGet(-e);\n        }\n\n        if (continueNextSource) {\n            continue;\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "261", "src_id": "M469", "code": "\n@SuppressWarnings(\"unchecked\")\nvoid remove(CacheDisposable<T> consumer) {\n    for (;;) {\n        CacheDisposable<T>[] current = observers.get();\n        int n = current.length;\n        if (n == 0) {\n            return;\n        }\n\n        int j = -1;\n        for (int i = 0; i < n; i++) {\n            if (current[i] == consumer) {\n                j = i;\n                break;\n            }\n        }\n\n        if (j < 0) {\n            return;\n        }\n        CacheDisposable<T>[] next;\n\n        if (n == 1) {\n            next = EMPTY;\n        } else {\n            next = new CacheDisposable[n - 1];\n            System.arraycopy(current, 0, next, 0, j);\n            System.arraycopy(current, j + 1, next, j, n - j - 1);\n        }\n\n        if (observers.compareAndSet(current, next)) {\n            return;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "262", "src_id": "M362", "code": "\nvoid drainFused() {\n    int missed = 1;\n\n    for (;;) {\n        if (disposed) {\n            return;\n        }\n\n        boolean d = done;\n        Throwable ex = error;\n\n        if (!delayError && d && ex != null) {\n            disposed = true;\n            downstream.onError(error);\n            worker.dispose();\n            return;\n        }\n\n        downstream.onNext(null);\n\n        if (d) {\n            disposed = true;\n            ex = error;\n            if (ex != null) {\n                downstream.onError(ex);\n            } else {\n                downstream.onComplete();\n            }\n            worker.dispose();\n            return;\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n            break;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "263", "src_id": "M2247", "code": "\n@SuppressWarnings(\"unchecked\")\nvoid remove(PublishSubscription<T> ps) {\n    for (;;) {\n        PublishSubscription<T>[] a = subscribers.get();\n        if (a == TERMINATED || a == EMPTY) {\n            return;\n        }\n\n        int n = a.length;\n        int j = -1;\n        for (int i = 0; i < n; i++) {\n            if (a[i] == ps) {\n                j = i;\n                break;\n            }\n        }\n\n        if (j < 0) {\n            return;\n        }\n\n        PublishSubscription<T>[] b;\n\n        if (n == 1) {\n            b = EMPTY;\n        } else {\n            b = new PublishSubscription[n - 1];\n            System.arraycopy(a, 0, b, 0, j);\n            System.arraycopy(a, j + 1, b, j, n - j - 1);\n        }\n        if (subscribers.compareAndSet(a, b)) {\n            return;\n        }\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "264", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n            } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | \n                     InvocationTargetException | NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "265", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "266", "src_id": "M219", "code": "\n   public synchronized static ZooKeeper getClient(String contextPath,\n           String session, int expireTime) throws IOException {\n       final String connectionId = concat(contextPath, session);\n\n       ZooKeeper zk = zkMap.get(connectionId);\n       if (zk == null) {\n\n           if (LOG.isInfoEnabled()) {\n               LOG.info(String.format(\"creating new connection for : '%s'\", connectionId));\n           }\n           Endpoint e = contextMap.get(contextPath);\n           zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n           \n           for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n               zk.addAuthInfo(\"digest\", String.format(\"%s:%s\", p.getKey(), p.getValue()).getBytes());\n           }\n           \n           zkMap.put(connectionId, zk);\n\n           if (session != null) {\n               zkSessionTimers.put(connectionId, new SessionTimerTask(\n                       expireTime, session, contextPath, timer));\n           }\n       }\n       return zk;\n   }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "267", "src_id": "M192", "code": "\n    private void init() throws IOException {\n\tFile f = new File(file);\n\tRandomAccessFileReader in = new RandomAccessFileReader(f);\n\tSimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n\tPattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n\tlong lastFp = in.getPosition();\n\tString line = in.readLine();\n\tMatcher m = null;\n\n\tif ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n\t    starttime = timestampFromText(dateformat, m.group(1));\n\t} else {\n\t    throw new IOException(\"Invalid log format. First line doesn't start with time\");\n\t}\n\n\tString lastentry = line;\n\ttry {\n\t    while (line != null) {\n\t\tm = timep.matcher(line);\n\t\tif (m.lookingAt()) {\n\t\t    if (size % skipN == 0) {\n\t\t\tlong time = timestampFromText(dateformat, m.group(1));\n\t\t\tskiplist.addMark(time, lastFp, size);\n\t\t    }\n\t\t    size++;\n\t\t    lastentry = line;\n\t\t} \n\t\tif (serverid == 0 && (m = idp.matcher(line)).find()) {\n\t\t    serverid = Integer.valueOf(m.group(1));\n\t\t}\n\n\t\tlastFp = in.getPosition();\n\t\tline = in.readLine();\n\t    }\n\t} catch (EOFException eof) {\n\t} finally {\n\t    in.close();\n\t}\n\n\tm = timep.matcher(lastentry);\n\tif (m.lookingAt()) {\n\t    endtime = timestampFromText(dateformat, m.group(1));\n\t} else {\n\t    throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n\t}\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "268", "src_id": "M235", "code": "\n    @POST\n    @Produces( { MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "269", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "270", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false, success = false;\n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                boolean renamed = tmpFile.renameTo(origFile);\n                if (!renamed) {\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    IOUtils.closeStream(out);\n                }\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "271", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n\t    try {\n\t\ttry {\n\t\t    while (true) {\n\t\t\tString line = in.readLine();\n\t\t\tif (line == null) {\n\t\t\t    break;\n\t\t\t}\n\n\t\t\tMatcher m = src.timep.matcher(line);\n\t\t\tif (m.lookingAt()) {\n\t\t\t    if (buf.length() > 0) {\n\t\t\t\tLogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n\t\t\t\tbuf = line;\n\t\t\t\treturn e;\n\t\t\t    }\n\t\t\t    buf = line;\n\t\t\t} else if (buf.length() > 0) {\n\t\t\t    buf += line + \"\\n\";\n\t\t\t}\n\t\t    }\n\t\t} catch (EOFException eof) {\n\t\t}\n\t\tif (buf.length() > 0) {\n\t\t    LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n\t\t    buf = \"\";\n\t\t    return e;\n\t\t}\n\t    } catch (Exception e) {\n\t\tLOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n\t\treturn null;\n\t    }\n\t    return null;\n\t}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "272", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2].toLowerCase();\n        switch (op) {\n            case \"gettracemask\":\n                getTraceMask(host, port);\n                break;\n            case \"settracemask\":\n                setTraceMask(host, port, args[3]);\n                break;\n            case \"ruok\":\n                ruok(host, port);\n                break;\n            case \"kill\":\n                kill(host, port);\n                break;\n            case \"stat\":\n                stat(host, port);\n                break;\n            case \"dump\":\n                dump(host, port);\n                break;\n            default:\n                System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "273", "src_id": "M1043", "code": "\nprivate void doPostprocessing() {\n  errCode = ERROR_NOTHING;\n  errObject = null;\n  Thread thread = Thread.currentThread();\n\n  notifyPostProcessing(1);\n\n  if (DEBUG) {\n    thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n  }\n\n  Exception exception = null;\n\n  try {\n    psAlgorithm.run(this);\n  } catch (Exception err) {\n    Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n    if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException || thread.isInterrupted()) {\n      notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n      return;\n    }\n\n    if (errCode == ERROR_NOTHING) {\n      errCode = ERROR_POSTPROCESSING;\n    }\n\n    exception = err;\n  } finally {\n    notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n  }\n\n  if (errCode != ERROR_NOTHING) {\n    if (exception == null) {\n      exception = errObject;\n    }\n    notifyError(ERROR_POSTPROCESSING, exception);\n    return;\n  }\n\n  notifyFinished();\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "274", "src_id": "M1031", "code": "\nvoid establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n  int statusCode = conn.getResponseCode();\n\n  if (DEBUG) {\n    Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n    Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n    Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n    Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n  }\n\n  switch (statusCode) {\n    case 204:\n    case 205:\n    case 207:\n      throw new HttpError(statusCode);\n    case 416:\n      return; // let the download thread handle this error\n    default:\n      if (statusCode < 200 || statusCode > 299) {\n        throw new HttpError(statusCode);\n      }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "275", "src_id": "M827", "code": "\nprivate Elst parseEdts(final Box ref) throws IOException {\n  final Box b = untilBox(ref, ATOM_ELST);\n  if (b == null) {\n    return null;\n  }\n\n  final Elst obj = new Elst();\n\n  final boolean v1 = stream.read() == 1;\n  stream.skipBytes(3); // flags\n\n  final int entryCount = stream.readInt();\n  if (entryCount < 1) {\n    obj.bMediaRate = 0x00010000; // default media rate (1.0)\n    return obj;\n  }\n\n  if (v1) {\n    stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n    obj.mediaTime = stream.readLong();\n    // ignore all remain entries\n    stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n  } else {\n    stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n    obj.mediaTime = stream.readInt();\n  }\n\n  obj.bMediaRate = stream.readInt();\n\n  return obj;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "276", "src_id": "M1048", "code": "\n@Override\npublic void run() {\n  boolean done;\n  long start = mMission.fallbackResumeOffset;\n\n  if (DEBUG && !mMission.unknownLength && start > 0) {\n    Log.i(TAG, \"Resuming a single-thread download at \" + start);\n  }\n\n  try {\n    long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n    int mId = 1;\n    mConn = mMission.openConnection(false, rangeStart, -1);\n\n    if (mRetryCount == 0 && rangeStart == -1) {\n      // workaround: bypass android connection pool\n      mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n    }\n\n    mMission.establishConnection(mId, mConn);\n\n    // check if the download can be resumed\n    if (mConn.getResponseCode() == 416 && start > 0) {\n      mMission.notifyProgress(-start);\n      start = 0;\n      mRetryCount--;\n      throw new DownloadMission.HttpError(416);\n    }\n\n    // secondary check for the file length\n    if (!mMission.unknownLength) {\n      mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n    }\n\n    if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n      // restart amount of bytes downloaded\n      mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n    }\n\n    mF = mMission.storage.getStream();\n    mF.seek(mMission.offsets[mMission.current] + start);\n\n    mIs = mConn.getInputStream();\n\n    byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n    int len = 0;\n\n    while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n      mF.write(buf, 0, len);\n      start += len;\n      mMission.notifyProgress(len);\n    }\n\n    dispose();\n\n    // if thread goes interrupted check if last part is written\n    done = len == -1;\n  } catch (Exception e) {\n    dispose();\n\n    mMission.fallbackResumeOffset = start;\n\n    if (!mMission.running || e instanceof ClosedByInterruptException) {\n      return;\n    }\n\n    if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n      // for youtube streams: recover expired URL\n      dispose();\n      mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n      return;\n    }\n\n    if (mRetryCount++ >= mMission.maxRetry) {\n      mMission.notifyError(e);\n      return;\n    }\n\n    if (DEBUG) {\n      Log.e(TAG, \"got exception, retrying...\", e);\n    }\n\n    run(); // try again\n    return;\n  }\n\n  if (done) {\n    mMission.notifyFinished();\n  } else {\n    mMission.fallbackResumeOffset = start;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "277", "src_id": "M1141", "code": "\nprivate void flushAuxiliar(long amount) throws IOException {\n  if (aux.length < 1) {\n    return;\n  }\n\n  out.flush();\n  aux.flush();\n\n  boolean underflow = aux.offset < aux.length || out.offset < out.length;\n  byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n  aux.target.seek(0);\n  out.target.seek(out.length);\n\n  long length = amount;\n  while (length > 0) {\n    int read = (int) Math.min(length, Integer.MAX_VALUE);\n    read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n    if (read < 1) {\n      amount -= length;\n      break;\n    }\n\n    out.writeProof(buffer, read);\n    length -= read;\n  }\n\n  if (underflow) {\n    if (out.offset >= out.length) {\n      // calculate aux underflow pointer\n      if (aux.offset < amount) {\n        out.offset += aux.offset;\n        aux.offset = 0;\n        out.target.seek(out.offset);\n      } else {\n        aux.offset -= amount;\n        out.offset = out.length + amount;\n      }\n    } else {\n      aux.offset = 0;\n    }\n  } else {\n    out.offset += amount;\n    aux.offset -= amount;\n  }\n\n  out.length += amount;\n\n  if (out.length > maxLengthKnown) {\n    maxLengthKnown = out.length;\n  }\n\n  if (amount < aux.length) {\n    // move excess data to beginning\n    long readOffset = amount;\n    long writeOffset = 0;\n\n    aux.length -= amount;\n    length = aux.length;\n    while (length > 0) {\n      int read = (int) Math.min(length, Integer.MAX_VALUE);\n      read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n      aux.target.seek(writeOffset);\n      aux.writeProof(buffer, read);\n\n      writeOffset += read;\n      readOffset += read;\n      length -= read;\n\n      aux.target.seek(readOffset);\n    }\n\n    aux.target.setLength(aux.length);\n    return;\n  }\n\n  if (aux.length > THRESHOLD_AUX_LENGTH) {\n    aux.target.setLength(THRESHOLD_AUX_LENGTH); // or setLength(0);\n  }\n\n  aux.reset();\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "278", "src_id": "M1106", "code": "\nprivate void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n  StringBuilder request = new StringBuilder(256);\n  request.append(mission.source);\n\n  request.append(\" [\");\n  if (mission.recoveryInfo != null) {\n    for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n      request.append(' ')\n             .append(recovery.toString())\n             .append(' ');\n    }\n  }\n  request.append(\"]\");\n\n  String service;\n  try {\n    service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n  } catch (Exception e) {\n    service = ErrorInfo.SERVICE_NONE;\n  }\n\n  ErrorUtil.createNotification(mContext,\n      new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action,\n          service, request.toString(), reason));\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "279", "src_id": "M1067", "code": "\nvoid startMission(DownloadMission mission) {\n  synchronized (this) {\n    mission.timestamp = System.currentTimeMillis();\n    mission.mHandler = mHandler;\n    mission.maxRetry = mPrefMaxRetry;\n\n    // create metadata file\n    while (true) {\n      mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n      if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n        try {\n          if (!mission.metadata.createNewFile()) {\n            throw new RuntimeException(\"Cant create download metadata file\");\n          }\n        } catch (IOException e) {\n          throw new RuntimeException(e);\n        }\n        break;\n      }\n      mission.timestamp = System.currentTimeMillis();\n    }\n\n    mSelfMissionsControl = true;\n    mMissionsPending.add(mission);\n\n    // Save metadata before continuing\n    Utility.writeToFile(mission.metadata, mission);\n\n    if (mission.storage == null) {\n      mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n      if (mission.errObject != null) {\n        mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n      }\n      return;\n    }\n\n    boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n    if (canDownloadInCurrentNetwork() && start) {\n      mission.start();\n    }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "280", "src_id": "M1136", "code": "\n@Override\nint process(SharpStream out, SharpStream... sources) throws IOException {\n  // check if subtitle is already in srt\n  String format = getArgumentAt(0, null);\n  boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n  if (format == null || format.equals(\"ttml\")) {\n    SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n    try {\n      writer.build(sources[0]);\n    } catch (Exception err) {\n      Log.e(TAG, \"subtitle parse failed\", err);\n      return err instanceof IOException ? 1 : 8;\n    }\n\n    return OK_RESULT;\n  } else if (format.equals(\"srt\")) {\n    byte[] buffer = new byte[8 * 1024];\n    int read;\n    while ((read = sources[0].read(buffer)) > 0) {\n      out.write(buffer, 0, read);\n    }\n    return OK_RESULT;\n  }\n\n  throw new UnsupportedOperationException(\"Can't convert this subtitle: \" + format);\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "281", "src_id": "M1047", "code": "\nprivate void joinForThreads(int millis) {\n  final Thread currentThread = Thread.currentThread();\n\n  if (init != null && init != currentThread && init.isAlive()) {\n    init.interrupt();\n\n    if (millis > 0) {\n      try {\n        init.join(millis);\n      } catch (InterruptedException e) {\n        Log.w(TAG, \"Initializer thread is still running\", e);\n        return;\n      }\n    }\n  }\n\n  // Possible reasons for alive threads:\n  //   Slow device\n  //   User spamming start/pause buttons\n  //   Rapid start() after pause()\n\n  for (Thread thread : threads) {\n    if (!thread.isAlive() || thread == Thread.currentThread()) {\n      continue;\n    }\n    thread.interrupt();\n  }\n\n  try {\n    for (Thread thread : threads) {\n      if (!thread.isAlive()) {\n        continue;\n      }\n      if (DEBUG) {\n        Log.w(TAG, \"thread alive: \" + thread.getName());\n      }\n      if (millis > 0) {\n        thread.join(millis);\n      }\n    }\n  } catch (InterruptedException e) {\n    throw new RuntimeException(\"Download thread still running\", e);\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "319", "src_id": "M270", "code": "\nprivate static String normalizeArch(String value) {\n  value = normalize(value);\n  if (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n    return \"x86_64\";\n  }\n  if (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n    return \"x86_32\";\n  }\n  if (value.matches(\"^(ia64w?|itanium64)$\")) {\n    return \"itanium_64\";\n  }\n  if (\"ia64n\".equals(value)) {\n    return \"itanium_32\";\n  }\n  if (value.matches(\"^(sparc|sparc32)$\")) {\n    return \"sparc_32\";\n  }\n  if (value.matches(\"^(sparcv9|sparc64)$\")) {\n    return \"sparc_64\";\n  }\n  if (value.matches(\"^(arm|arm32)$\")) {\n    return \"arm_32\";\n  }\n  if (\"aarch64\".equals(value)) {\n    return \"aarch_64\";\n  }\n  if (value.matches(\"^(mips|mips32)$\")) {\n    return \"mips_32\";\n  }\n  if (value.matches(\"^(mipsel|mips32el)$\")) {\n    return \"mipsel_32\";\n  }\n  if (\"mips64\".equals(value)) {\n    return \"mips_64\";\n  }\n  if (\"mips64el\".equals(value)) {\n    return \"mipsel_64\";\n  }\n  if (value.matches(\"^(ppc|ppc32)$\")) {\n    return \"ppc_32\";\n  }\n  if (value.matches(\"^(ppcle|ppc32le)$\")) {\n    return \"ppcle_32\";\n  }\n  if (\"ppc64\".equals(value)) {\n    return \"ppc_64\";\n  }\n  if (\"ppc64le\".equals(value)) {\n    return \"ppcle_64\";\n  }\n  if (\"s390\".equals(value)) {\n    return \"s390_32\";\n  }\n  if (\"s390x\".equals(value)) {\n    return \"s390_64\";\n  }\n  return value;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "320", "src_id": "M928", "code": "\nprivate static Map<String, Object> doGetLoggerInfo(Logger logger) {\n  Map<String, Object> info = new HashMap<>();\n  info.put(LoggerHelper.name, logger.getName());\n  info.put(LoggerHelper.clazz, logger.getClass());\n  CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n  if (codeSource != null) {\n    info.put(LoggerHelper.codeSource, codeSource.getLocation());\n  }\n  info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n  Level level = logger.getLevel(), effectiveLevel = logger.getEffectiveLevel();\n  if (level != null) {\n    info.put(LoggerHelper.level, level.toString());\n  }\n  if (effectiveLevel != null) {\n    info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n  }\n\n  @SuppressWarnings(\"unchecked\")\n  List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n  info.put(LoggerHelper.appenders, result);\n  return info;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "321", "src_id": "M9", "code": "\n@SuppressWarnings(\"resource\")\npublic static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n  Map<Long, String> processMap = listProcessByJps(v);\n  if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n    String telnetPortProcess = processMap.get(telnetPortPid);\n    processMap.remove(telnetPortPid);\n    Map<Long, String> newProcessMap = new LinkedHashMap<>();\n    newProcessMap.put(telnetPortPid, telnetPortProcess);\n    newProcessMap.putAll(processMap);\n    processMap = newProcessMap;\n  }\n\n  if (processMap.isEmpty()) {\n    AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n    return -1;\n  }\n\n  if (select != null && !select.trim().isEmpty()) {\n    int matchedSelectCount = 0;\n    Long matchedPid = null;\n    for (Entry<Long, String> entry : processMap.entrySet()) {\n      if (entry.getValue().contains(select)) {\n        matchedSelectCount++;\n        matchedPid = entry.getKey();\n      }\n    }\n    if (matchedSelectCount == 1) {\n      return matchedPid;\n    }\n  }\n\n  AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n  int count = 1;\n  for (String process : processMap.values()) {\n    if (count == 1) {\n      System.out.println(\"* [\" + count + \"]: \" + process);\n    } else {\n      System.out.println(\"  [\" + count + \"]: \" + process);\n    }\n    count++;\n  }\n\n  String line = new Scanner(System.in).nextLine();\n  if (line.trim().isEmpty()) {\n    return processMap.keySet().iterator().next();\n  }\n\n  int choice = new Scanner(line).nextInt();\n  if (choice <= 0 || choice > processMap.size()) {\n    return -1;\n  }\n\n  Iterator<Long> idIter = processMap.keySet().iterator();\n  for (int i = 1; i <= choice; ++i) {\n    if (i == choice) {\n      return idIter.next();\n    }\n    idIter.next();\n  }\n\n  return -1;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "322", "src_id": "M140", "code": "\nvoid _processDo(int option) throws IOException {\n  if (debugoptions) {\n    System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n  }\n\n  if (__notifhand != null) {\n    __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DO, option);\n  }\n\n  boolean acceptNewState = false;\n  if (optionHandlers[option] != null) {\n    acceptNewState = optionHandlers[option].getAcceptLocal();\n  } else if (option == TERMINAL_TYPE) {\n    if (terminalType != null && terminalType.length() > 0) {\n      acceptNewState = true;\n    }\n  }\n\n  if (_willResponse[option] > 0) {\n    --_willResponse[option];\n    if (_willResponse[option] > 0 && _stateIsWill(option)) {\n      --_willResponse[option];\n    }\n  }\n\n  if (_willResponse[option] == 0) {\n    if (_requestedWont(option)) {\n      if (acceptNewState) {\n        _setWantWill(option);\n        _sendWill(option);\n      } else {\n        ++_willResponse[option];\n        _sendWont(option);\n      }\n    } else {\n      // Option acknowledged\n    }\n  }\n\n  _setWill(option);\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "323", "src_id": "M1324", "code": "\nprivate void bind(Configure configure) throws Throwable {\n  long start = System.currentTimeMillis();\n  if (!isBindRef.compareAndSet(false, true)) {\n    throw new IllegalStateException(\"already bind\");\n  }\n\n  if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n    int newTelnetPort = SocketUtils.findAvailableTcpPort();\n    configure.setTelnetPort(newTelnetPort);\n    logger().info(\"generate random telnet port: {}\", newTelnetPort);\n  }\n  if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n    int newHttpPort = SocketUtils.findAvailableTcpPort();\n    configure.setHttpPort(newHttpPort);\n    logger().info(\"generate random http port: {}\", newHttpPort);\n  }\n  if (configure.getAppName() == null) {\n    configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME,\n        System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n  }\n\n  try {\n    if (configure.getTunnelServer() != null) {\n      tunnelClient = new TunnelClient();\n      tunnelClient.setAppName(configure.getAppName());\n      tunnelClient.setId(configure.getAgentId());\n      tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n      tunnelClient.setVersion(ArthasBanner.version());\n      ChannelFuture channelFuture = tunnelClient.start();\n      channelFuture.await(10, TimeUnit.SECONDS);\n    }\n  } catch (Throwable t) {\n    logger().error(\"start tunnel client error\", t);\n  }\n\n  try {\n    ShellServerOptions options = new ShellServerOptions()\n      .setInstrumentation(instrumentation)\n      .setPid(PidUtils.currentLongPid())\n      .setWelcomeMessage(ArthasBanner.welcome());\n    if (configure.getSessionTimeout() != null) {\n      options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n    }\n\n    httpSessionManager = new HttpSessionManager();\n    if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n      String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n          + \"No password is currently configured. Therefore, a default password is generated, \"\n          + \"and clients need to use the password to connect!\";\n      AnsiLog.error(errorMsg);\n      configure.setPassword(StringUtils.randomString(64));\n      AnsiLog.error(\"Generated arthas password: {}\", configure.getPassword());\n      logger().error(errorMsg);\n      logger().info(\"Generated arthas password: {}\", configure.getPassword());\n    }\n\n    securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n    shellServer = new ShellServerImpl(options);\n\n    List<String> disabledCommands = new ArrayList<>();\n    if (configure.getDisabledCommands() != null) {\n      String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n      if (strings != null) {\n        disabledCommands.addAll(Arrays.asList(strings));\n      }\n    }\n    BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n    List<CommandResolver> resolvers = new ArrayList<>();\n    resolvers.add(builtinCommands);\n\n    workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n    if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n      logger().info(\"try to bind telnet server, host: {}, port: {}\", configure.getIp(), configure.getTelnetPort());\n      shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n          options.getConnectionTimeout(), workerGroup, httpSessionManager));\n    } else {\n      logger().info(\"telnet port is {}, skip bind telnet server\", configure.getTelnetPort());\n    }\n    if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n      logger().info(\"try to bind http server, host: {}, port: {}\", configure.getIp(), configure.getHttpPort());\n      shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n          options.getConnectionTimeout(), workerGroup, httpSessionManager));\n    } else if (configure.getTunnelServer() != null) {\n      shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n          options.getConnectionTimeout(), workerGroup, httpSessionManager));\n      logger().info(\"http port is {}, skip bind http server\", configure.getHttpPort());\n    }\n\n    for (CommandResolver resolver : resolvers) {\n      shellServer.registerCommandResolver(resolver);\n    }\n\n    shellServer.listen(new BindHandler(isBindRef));\n    if (!isBind()) {\n      throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n          + configure.getTelnetPort() + \", http port: \" + configure.getHttpPort());\n    }\n\n    sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n    httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n    logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", \n        configure.getIp(), configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n    if (configure.getStatUrl() != null) {\n      logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n    }\n    UserStatUtil.setStatUrl(configure.getStatUrl());\n    UserStatUtil.setAgentId(configure.getAgentId());\n    UserStatUtil.arthasStart();\n\n    try {\n      SpyAPI.init();\n    } catch (Throwable e) {\n      // Ignore\n    }\n\n    logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n  } catch (Throwable e) {\n    logger().error(\"Error during start as-server\", e);\n    destroy();\n    throw e;\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "324", "src_id": "M122", "code": "\nprivate int __read(boolean mayBlock) throws IOException {\n  int ch;\n  while (true) {\n    if (!mayBlock && super.available() == 0) {\n      return WOULD_BLOCK;\n    }\n    if ((ch = super.read()) < 0) {\n      return EOF;\n    }\n\n    ch = (ch & 0xff);\n    synchronized (__client) {\n      __client._processAYTResponse();\n    }\n    __client._spyRead(ch);\n\n    switch (__receiveState) {\n      case _STATE_CR:\n        if (ch == '\\0') continue;\n      case _STATE_DATA:\n        if (ch == TelnetCommand.IAC) {\n          __receiveState = _STATE_IAC;\n          continue;\n        }\n        if (ch == '\\r') {\n          synchronized (__client) {\n            __receiveState = __client._requestedDont(TelnetOption.BINARY) ? _STATE_CR : _STATE_DATA;\n          }\n        } else {\n          __receiveState = _STATE_DATA;\n        }\n        break;\n\n      case _STATE_IAC:\n        switch (ch) {\n          case TelnetCommand.WILL:\n            __receiveState = _STATE_WILL;\n            continue;\n          case TelnetCommand.WONT:\n            __receiveState = _STATE_WONT;\n            continue;\n          case TelnetCommand.DO:\n            __receiveState = _STATE_DO;\n            continue;\n          case TelnetCommand.DONT:\n            __receiveState = _STATE_DONT;\n            continue;\n          case TelnetCommand.SB:\n            __suboption_count = 0;\n            __receiveState = _STATE_SB;\n            continue;\n          case TelnetCommand.IAC:\n            __receiveState = _STATE_DATA;\n            break;\n          case TelnetCommand.SE:\n            __receiveState = _STATE_DATA;\n            continue;\n          default:\n            __receiveState = _STATE_DATA;\n            __client._processCommand(ch);\n            continue;\n        }\n        break;\n\n      case _STATE_WILL:\n        synchronized (__client) {\n          __client._processWill(ch);\n          __client._flushOutputStream();\n        }\n        __receiveState = _STATE_DATA;\n        continue;\n      case _STATE_WONT:\n        synchronized (__client) {\n          __client._processWont(ch);\n          __client._flushOutputStream();\n        }\n        __receiveState = _STATE_DATA;\n        continue;\n      case _STATE_DO:\n        synchronized (__client) {\n          __client._processDo(ch);\n          __client._flushOutputStream();\n        }\n        __receiveState = _STATE_DATA;\n        continue;\n      case _STATE_DONT:\n        synchronized (__client) {\n          __client._processDont(ch);\n          __client._flushOutputStream();\n        }\n        __receiveState = _STATE_DATA;\n        continue;\n\n      case _STATE_SB:\n        switch (ch) {\n          case TelnetCommand.IAC:\n            __receiveState = _STATE_IAC_SB;\n            continue;\n          default:\n            if (__suboption_count < __suboption.length) {\n              __suboption[__suboption_count++] = ch;\n            }\n        }\n        __receiveState = _STATE_SB;\n        continue;\n\n      case _STATE_IAC_SB:\n        switch (ch) {\n          case TelnetCommand.SE:\n            synchronized (__client) {\n              __client._processSuboption(__suboption, __suboption_count);\n              __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n          case TelnetCommand.IAC:\n            if (__suboption_count < __suboption.length) {\n              __suboption[__suboption_count++] = ch;\n            }\n            break;\n        }\n        __receiveState = _STATE_SB;\n        continue;\n    }\n    break;\n  }\n  return ch;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "325", "src_id": "M8", "code": "\nprivate static String formatFileSize(long size) {\n  String hrSize;\n  double b = size;\n  double k = size / 1024.0;\n  double m = k / 1024.0;\n  double g = m / 1024.0;\n  double t = g / 1024.0;\n\n  DecimalFormat dec = new DecimalFormat(\"0.00\");\n  if (t > 1) {\n    hrSize = dec.format(t).concat(\" TB\");\n  } else if (g > 1) {\n    hrSize = dec.format(g).concat(\" GB\");\n  } else if (m > 1) {\n    hrSize = dec.format(m).concat(\" MB\");\n  } else if (k > 1) {\n    hrSize = dec.format(k).concat(\" KB\");\n  } else {\n    hrSize = dec.format(b).concat(\" Bytes\");\n  }\n  return hrSize;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "326", "src_id": "M790", "code": "\n@Override\npublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n    ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n  if (className == null) return null;\n  className = className.replace('/', '.');\n\n  List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n  ListIterator<RetransformEntry> listIterator = allRetransformEntries.listIterator(allRetransformEntries.size());\n  while (listIterator.hasPrevious()) {\n    RetransformEntry retransformEntry = listIterator.previous();\n    int id = retransformEntry.getId();\n    boolean updateFlag = false;\n    \n    if (className.equals(retransformEntry.getClassName())) {\n      if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n        updateFlag = isLoaderMatch(retransformEntry, loader);\n      } else {\n        updateFlag = true;\n      }\n    }\n\n    if (updateFlag) {\n      logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n          className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n      retransformEntry.incTransformCount();\n      return retransformEntry.getBytes();\n    }\n  }\n  return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "327", "src_id": "M716", "code": "\npublic static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n  table.row(\"IS-RETURN\", Boolean.FALSE.toString());\n  table.row(\"IS-EXCEPTION\", Boolean.TRUE.toString());\n\n  Throwable cause;\n  Throwable t = (Throwable) throwableVO.getObject();\n  if (t instanceof InvocationTargetException) {\n    cause = t.getCause();\n  } else {\n    cause = t;\n  }\n\n  if (throwableVO.needExpand()) {\n    table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n  } else {\n    StringWriter stringWriter = new StringWriter();\n    PrintWriter printWriter = new PrintWriter(stringWriter);\n    try {\n      cause.printStackTrace(printWriter);\n      table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n    } finally {\n      printWriter.close();\n    }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "328", "src_id": "M602", "code": "\nprivate AsyncProfiler profilerInstance() {\n  if (profiler != null) return profiler;\n\n  if (ProfilerAction.load.toString().equals(action)) {\n    profiler = AsyncProfiler.getInstance(actionArg);\n  }\n\n  if (libPath != null) {\n    FileOutputStream tmpLibOutputStream = null;\n    FileInputStream libInputStream = null;\n    try {\n      File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n      tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n      libInputStream = new FileInputStream(libPath);\n      IOUtils.copy(libInputStream, tmpLibOutputStream);\n      libPath = tmpLibFile.getAbsolutePath();\n      logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n    } catch (Throwable e) {\n      logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n    } finally {\n      IOUtils.close(libInputStream);\n      IOUtils.close(tmpLibOutputStream);\n    }\n    profiler = AsyncProfiler.getInstance(libPath);\n  } else {\n    if (OSUtils.isLinux() || OSUtils.isMac()) {\n      throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n    } else {\n      throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n    }\n  }\n  return profiler;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
