{"project_name": "across-project", "pair_id": "1", "src_id": "M270", "code": "\n\tprivate static String normalizeArch(String value) {\n\t\tvalue = normalize(value);\n\t\t\n\t\t// Check for x86_64 variants\n\t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n\t\t\treturn \"x86_64\";\n\t\t}\n\t\t\n\t\t// Check for x86_32 variants\n\t\tif (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n\t\t\treturn \"x86_32\";\n\t\t}\n\t\t\n\t\t// Check for itanium_64 variants\n\t\tif (value.matches(\"^(ia64w?|itanium64)$\")) {\n\t\t\treturn \"itanium_64\";\n\t\t}\n\t\t\n\t\t// Check for itanium_32\n\t\tif (\"ia64n\".equals(value)) {\n\t\t\treturn \"itanium_32\";\n\t\t}\n\t\t\n\t\t// Check for sparc_32 variants\n\t\tif (value.matches(\"^(sparc|sparc32)$\")) {\n\t\t\treturn \"sparc_32\";\n\t\t}\n\t\t\n\t\t// Check for sparc_64 variants\n\t\tif (value.matches(\"^(sparcv9|sparc64)$\")) {\n\t\t\treturn \"sparc_64\";\n\t\t}\n\t\t\n\t\t// Check for arm_32 variants\n\t\tif (value.matches(\"^(arm|arm32)$\")) {\n\t\t\treturn \"arm_32\";\n\t\t}\n\t\t\n\t\t// Check for aarch_64\n\t\tif (\"aarch64\".equals(value)) {\n\t\t\treturn \"aarch_64\";\n\t\t}\n\t\t\n\t\t// Check for mips_32 variants\n\t\tif (value.matches(\"^(mips|mips32)$\")) {\n\t\t\treturn \"mips_32\";\n\t\t}\n\t\t\n\t\t// Check for mipsel_32 variants\n\t\tif (value.matches(\"^(mipsel|mips32el)$\")) {\n\t\t\treturn \"mipsel_32\";\n\t\t}\n\t\t\n\t\t// Check for mips_64\n\t\tif (\"mips64\".equals(value)) {\n\t\t\treturn \"mips_64\";\n\t\t}\n\t\t\n\t\t// Check for mipsel_64\n\t\tif (\"mips64el\".equals(value)) {\n\t\t\treturn \"mipsel_64\";\n\t\t}\n\t\t\n\t\t// Check for ppc_32 variants\n\t\tif (value.matches(\"^(ppc|ppc32)$\")) {\n\t\t\treturn \"ppc_32\";\n\t\t}\n\t\t\n\t\t// Check for ppcle_32 variants\n\t\tif (value.matches(\"^(ppcle|ppc32le)$\")) {\n\t\t\treturn \"ppcle_32\";\n\t\t}\n\t\t\n\t\t// Check for ppc_64\n\t\tif (\"ppc64\".equals(value)) {\n\t\t\treturn \"ppc_64\";\n\t\t}\n\t\t\n\t\t// Check for ppcle_64\n\t\tif (\"ppc64le\".equals(value)) {\n\t\t\treturn \"ppcle_64\";\n\t\t}\n\t\t\n\t\t// Check for s390_32\n\t\tif (\"s390\".equals(value)) {\n\t\t\treturn \"s390_32\";\n\t\t}\n\t\t\n\t\t// Check for s390_64\n\t\tif (\"s390x\".equals(value)) {\n\t\t\treturn \"s390_64\";\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "2", "src_id": "M928", "code": "\n    private static Map<String, Object> doGetLoggerInfo(Logger logger) {\n        Map<String, Object> info = new HashMap<String, Object>();\n        \n        // Add basic logger info\n        info.put(LoggerHelper.name, logger.getName());\n        info.put(LoggerHelper.clazz, logger.getClass());\n        \n        // Add code source location if available\n        CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n        if (codeSource != null) {\n            info.put(LoggerHelper.codeSource, codeSource.getLocation());\n        }\n        \n        // Add additivity setting\n        info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n        // Add level information if available\n        Level level = logger.getLevel();\n        Level effectiveLevel = logger.getEffectiveLevel();\n        \n        if (level != null) {\n            info.put(LoggerHelper.level, level.toString());\n        }\n        \n        if (effectiveLevel != null) {\n            info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n        }\n\n        // Add appenders information\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n        info.put(LoggerHelper.appenders, result);\n        \n        return info;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "3", "src_id": "M9", "code": "\n    @SuppressWarnings(\"resource\")\n    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n        Map<Long, String> processMap = listProcessByJps(v);\n        \n        // Put the port that is already listening at the first\n        if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n            String telnetPortProcess = processMap.get(telnetPortPid);\n            processMap.remove(telnetPortPid);\n            \n            Map<Long, String> newProcessMap = new LinkedHashMap<Long, String>();\n            newProcessMap.put(telnetPortPid, telnetPortProcess);\n            newProcessMap.putAll(processMap);\n            processMap = newProcessMap;\n        }\n\n        // Handle empty process list\n        if (processMap.isEmpty()) {\n            AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n            return -1;\n        }\n\n        // Select target process by the '--select' option when match only one process\n        if (select != null && !select.trim().isEmpty()) {\n            int matchedSelectCount = 0;\n            Long matchedPid = null;\n            \n            for (Entry<Long, String> entry : processMap.entrySet()) {\n                if (entry.getValue().contains(select)) {\n                    matchedSelectCount++;\n                    matchedPid = entry.getKey();\n                }\n            }\n            \n            if (matchedSelectCount == 1) {\n                return matchedPid;\n            }\n        }\n\n        // Display process selection prompt\n        AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n        \n        // Print list of processes\n        int count = 1;\n        for (String process : processMap.values()) {\n            if (count == 1) {\n                System.out.println(\"* [\" + count + \"]: \" + process);\n            } else {\n                System.out.println(\"  [\" + count + \"]: \" + process);\n            }\n            count++;\n        }\n\n        // Read user's choice\n        String line = new Scanner(System.in).nextLine();\n        \n        // Default to first process if user just hits enter\n        if (line.trim().isEmpty()) {\n            return processMap.keySet().iterator().next();\n        }\n\n        // Parse user's numeric choice\n        int choice = new Scanner(line).nextInt();\n\n        // Validate choice\n        if (choice <= 0 || choice > processMap.size()) {\n            return -1;\n        }\n\n        // Find the selected process ID\n        Iterator<Long> idIter = processMap.keySet().iterator();\n        for (int i = 1; i <= choice; ++i) {\n            if (i == choice) {\n                return idIter.next();\n            }\n            idIter.next();\n        }\n\n        return -1;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "4", "src_id": "M140", "code": "\n    void _processDo(int option) throws IOException {\n        if (debugoptions) {\n            System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n        }\n\n        // Notify handler if available\n        if (__notifhand != null) {\n            __notifhand.receivedNegotiation(\n                TelnetNotificationHandler.RECEIVED_DO,\n                option);\n        }\n\n        boolean acceptNewState = false;\n\n        // Check if option handler is available\n        if (optionHandlers[option] != null) {\n            acceptNewState = optionHandlers[option].getAcceptLocal();\n        } else {\n            // Handle special case for TERMINAL-TYPE option\n            if (option == TERMINAL_TYPE) {\n                if ((terminalType != null) && (terminalType.length() > 0)) {\n                    acceptNewState = true;\n                }\n            }\n        }\n\n        // Process response tracking\n        if (_willResponse[option] > 0) {\n            --_willResponse[option];\n            if (_willResponse[option] > 0 && _stateIsWill(option)) {\n                --_willResponse[option];\n            }\n        }\n\n        // Handle negotiation response\n        if (_willResponse[option] == 0) {\n            if (_requestedWont(option)) {\n                // Handle special cases based on option\n                switch (option) {\n                    default:\n                        break;\n                }\n\n                // Send appropriate response\n                if (acceptNewState) {\n                    _setWantWill(option);\n                    _sendWill(option);\n                } else {\n                    ++_willResponse[option];\n                    _sendWont(option);\n                }\n            } else {\n                // Other end has acknowledged option\n                switch (option) {\n                    default:\n                        break;\n                }\n            }\n        }\n\n        // Update option state\n        _setWill(option);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "5", "src_id": "M1324", "code": "\n    private void bind(Configure configure) throws Throwable {\n        long start = System.currentTimeMillis();\n\n        // Prevent multiple binds\n        if (!isBindRef.compareAndSet(false, true)) {\n            throw new IllegalStateException(\"already bind\");\n        }\n\n        // Initialize random ports if needed\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n            int newTelnetPort = SocketUtils.findAvailableTcpPort();\n            configure.setTelnetPort(newTelnetPort);\n            logger().info(\"generate random telnet port: \" + newTelnetPort);\n        }\n        \n        if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n            int newHttpPort = SocketUtils.findAvailableTcpPort();\n            configure.setHttpPort(newHttpPort);\n            logger().info(\"generate random http port: \" + newHttpPort);\n        }\n        \n        // Try to find appName\n        if (configure.getAppName() == null) {\n            configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME,\n                    System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n        }\n\n        // Initialize tunnel client if configured\n        try {\n            if (configure.getTunnelServer() != null) {\n                tunnelClient = new TunnelClient();\n                tunnelClient.setAppName(configure.getAppName());\n                tunnelClient.setId(configure.getAgentId());\n                tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n                tunnelClient.setVersion(ArthasBanner.version());\n                ChannelFuture channelFuture = tunnelClient.start();\n                channelFuture.await(10, TimeUnit.SECONDS);\n            }\n        } catch (Throwable t) {\n            logger().error(\"start tunnel client error\", t);\n        }\n\n        try {\n            // Configure shell server options\n            ShellServerOptions options = new ShellServerOptions()\n                            .setInstrumentation(instrumentation)\n                            .setPid(PidUtils.currentLongPid())\n                            .setWelcomeMessage(ArthasBanner.welcome());\n                            \n            if (configure.getSessionTimeout() != null) {\n                options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n            }\n\n            // Initialize HTTP session manager\n            this.httpSessionManager = new HttpSessionManager();\n            \n            // Handle security configuration for 0.0.0.0 binding\n            if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n                // Force password generation when listening on all interfaces\n                String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n                        + \"No password is currently configured. \" + \"Therefore, a default password is generated, \"\n                        + \"and clients need to use the password to connect!\";\n                AnsiLog.error(errorMsg);\n                configure.setPassword(StringUtils.randomString(64));\n                AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n\n                logger().error(errorMsg);\n                logger().info(\"Generated arthas password: \" + configure.getPassword());\n            }\n\n            // Initialize security authenticator\n            this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n\n            // Create shell server\n            shellServer = new ShellServerImpl(options);\n\n            // Process disabled commands configuration\n            List<String> disabledCommands = new ArrayList<String>();\n            if (configure.getDisabledCommands() != null) {\n                String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n                if (strings != null) {\n                    disabledCommands.addAll(Arrays.asList(strings));\n                }\n            }\n            \n            // Initialize command resolvers\n            BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n            List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n            resolvers.add(builtinCommands);\n\n            // Initialize worker group for network servers\n            workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n            // Configure telnet server if enabled\n            if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n                logger().info(\"try to bind telnet server, host: {}, port: {}.\", configure.getIp(), configure.getTelnetPort());\n                shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n            }\n            \n            // Configure HTTP server if enabled\n            if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n                logger().info(\"try to bind http server, host: {}, port: {}.\", configure.getIp(), configure.getHttpPort());\n                shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                // Listen local address in VM communication if tunnel server is configured\n                if (configure.getTunnelServer() != null) {\n                    shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                            options.getConnectionTimeout(), workerGroup, httpSessionManager));\n                }\n                logger().info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n            }\n\n            // Register command resolvers\n            for (CommandResolver resolver : resolvers) {\n                shellServer.registerCommandResolver(resolver);\n            }\n\n            // Start listening\n            shellServer.listen(new BindHandler(isBindRef));\n            \n            // Verify binding was successful\n            if (!isBind()) {\n                throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n                        + String.valueOf(configure.getTelnetPort()) + \", http port: \"\n                        + String.valueOf(configure.getHttpPort()));\n            }\n\n            // Initialize HTTP API components\n            sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n            httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n            // Log successful startup\n            logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", configure.getIp(),\n                    configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n            // Initialize statistics reporting\n            if (configure.getStatUrl() != null) {\n                logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n            }\n            UserStatUtil.setStatUrl(configure.getStatUrl());\n            UserStatUtil.setAgentId(configure.getAgentId());\n            UserStatUtil.arthasStart();\n\n            // Initialize SpyAPI\n            try {\n                SpyAPI.init();\n            } catch (Throwable e) {\n                // ignore\n            }\n\n            // Log startup time\n            logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n        } catch (Throwable e) {\n            logger().error(\"Error during start as-server\", e);\n            destroy();\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "6", "src_id": "M122", "code": "\n    private int __read(boolean mayBlock) throws IOException {\n        int ch;\n\n        while (true) {\n            // If there is no more data AND we were told not to block,\n            // just return WOULD_BLOCK (-2). (More efficient than exception.)\n            if(!mayBlock && super.available() == 0) {\n                return WOULD_BLOCK;\n            }\n\n            // Otherwise, exit only when we reach end of stream.\n            if ((ch = super.read()) < 0) {\n                return EOF;\n            }\n\n            ch = (ch & 0xff);\n\n            // Process AYT response if needed\n            synchronized (__client) {\n                __client._processAYTResponse();\n            }\n\n            // Handle spy stream reading\n            __client._spyRead(ch);\n\n            // Process received data based on current state\n            switch (__receiveState) {\n                case _STATE_CR:\n                    if (ch == '\\0') {\n                        // Strip null\n                        continue;\n                    }\n                    // Fall through to _STATE_DATA for normal processing\n                    //$FALL-THROUGH$\n                case _STATE_DATA:\n                    if (ch == TelnetCommand.IAC) {\n                        __receiveState = _STATE_IAC;\n                        continue;\n                    }\n\n                    // Handle CR character\n                    if (ch == '\\r') {\n                        synchronized (__client) {\n                            if (__client._requestedDont(TelnetOption.BINARY)) {\n                                __receiveState = _STATE_CR;\n                            } else {\n                                __receiveState = _STATE_DATA;\n                            }\n                        }\n                    } else {\n                        __receiveState = _STATE_DATA;\n                    }\n                    break;\n\n                case _STATE_IAC:\n                    switch (ch) {\n                        case TelnetCommand.WILL:\n                            __receiveState = _STATE_WILL;\n                            continue;\n                        case TelnetCommand.WONT:\n                            __receiveState = _STATE_WONT;\n                            continue;\n                        case TelnetCommand.DO:\n                            __receiveState = _STATE_DO;\n                            continue;\n                        case TelnetCommand.DONT:\n                            __receiveState = _STATE_DONT;\n                            continue;\n                        case TelnetCommand.SB:\n                            __suboption_count = 0;\n                            __receiveState = _STATE_SB;\n                            continue;\n                        case TelnetCommand.IAC:\n                            __receiveState = _STATE_DATA;\n                            break; // Exit to enclosing switch to return IAC from read\n                        case TelnetCommand.SE: \n                            // Unexpected byte! Ignore it (don't send it as a command)\n                            __receiveState = _STATE_DATA;\n                            continue;\n                        default:\n                            __receiveState = _STATE_DATA;\n                            __client._processCommand(ch); // Notify the user\n                            continue; // Move on to the next char\n                    }\n                    break; // Exit and return from read\n                    \n                case _STATE_WILL:\n                    synchronized (__client) {\n                        __client._processWill(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                    \n                case _STATE_WONT:\n                    synchronized (__client) {\n                        __client._processWont(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                    \n                case _STATE_DO:\n                    synchronized (__client) {\n                        __client._processDo(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                    \n                case _STATE_DONT:\n                    synchronized (__client) {\n                        __client._processDont(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                    \n                case _STATE_SB:\n                    switch (ch) {\n                        case TelnetCommand.IAC:\n                            __receiveState = _STATE_IAC_SB;\n                            continue;\n                        default:\n                            // Store suboption char\n                            if (__suboption_count < __suboption.length) {\n                                __suboption[__suboption_count++] = ch;\n                            }\n                            break;\n                    }\n                    __receiveState = _STATE_SB;\n                    continue;\n                    \n                case _STATE_IAC_SB: // IAC received during SB phase\n                    switch (ch) {\n                        case TelnetCommand.SE:\n                            synchronized (__client) {\n                                __client._processSuboption(__suboption, __suboption_count);\n                                __client._flushOutputStream();\n                            }\n                            __receiveState = _STATE_DATA;\n                            continue;\n                        case TelnetCommand.IAC: \n                            // De-dup the duplicated IAC\n                            if (__suboption_count < __suboption.length) {\n                                __suboption[__suboption_count++] = ch;\n                            }\n                            break;\n                        default:\n                            // Unexpected byte! Ignore it\n                            break;\n                    }\n                    __receiveState = _STATE_SB;\n                    continue;\n            }\n\n            break;\n        }\n\n        return ch;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "7", "src_id": "M8", "code": "\n    private static String formatFileSize(long size) {\n        String hrSize;\n        DecimalFormat dec = new DecimalFormat(\"0.00\");\n\n        // Calculate size in different units\n        double b = size;\n        double k = size / 1024.0;\n        double m = ((size / 1024.0) / 1024.0);\n        double g = (((size / 1024.0) / 1024.0) / 1024.0);\n        double t = ((((size / 1024.0) / 1024.0) / 1024.0) / 1024.0);\n\n        // Format with appropriate unit\n        if (t > 1) {\n            hrSize = dec.format(t).concat(\" TB\");\n        } else if (g > 1) {\n            hrSize = dec.format(g).concat(\" GB\");\n        } else if (m > 1) {\n            hrSize = dec.format(m).concat(\" MB\");\n        } else if (k > 1) {\n            hrSize = dec.format(k).concat(\" KB\");\n        } else {\n            hrSize = dec.format(b).concat(\" Bytes\");\n        }\n\n        return hrSize;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "8", "src_id": "M790", "code": "\n        @Override\n        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n            // Skip processing for null class names\n            if (className == null) {\n                return null;\n            }\n\n            // Convert internal name format to Java format\n            className = className.replace('/', '.');\n\n            // Get all retransform entries and process in reverse order\n            List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n            // Process in reverse order to apply most recent configurations first\n            ListIterator<RetransformEntry> listIterator = allRetransformEntries\n                    .listIterator(allRetransformEntries.size());\n            \n            while (listIterator.hasPrevious()) {\n                RetransformEntry retransformEntry = listIterator.previous();\n                int id = retransformEntry.getId();\n                boolean updateFlag = false;\n                \n                // Check if class name matches\n                if (className.equals(retransformEntry.getClassName())) {\n                    // Check if loader needs to be matched\n                    if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n                        updateFlag = isLoaderMatch(retransformEntry, loader);\n                    } else {\n                        updateFlag = true;\n                    }\n                }\n\n                // If all conditions match, apply the transformation\n                if (updateFlag) {\n                    logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n                            className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n                    retransformEntry.incTransformCount();\n                    return retransformEntry.getBytes();\n                }\n            }\n\n            return null;\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "9", "src_id": "M716", "code": "\n    public static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n        // Mark execution as failed\n        table.row(\"IS-RETURN\", \"\" + false);\n        table.row(\"IS-EXCEPTION\", \"\" + true);\n\n        // Extract the actual exception cause\n        Throwable cause;\n        Throwable t = (Throwable) throwableVO.getObject();\n        \n        if (t instanceof InvocationTargetException) {\n            cause = t.getCause();\n        } else {\n            cause = t;\n        }\n\n        // Display exception details based on expansion settings\n        if (throwableVO.needExpand()) {\n            // Use object view for expanded display\n            table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n        } else {\n            // Use stack trace for compact display\n            StringWriter stringWriter = new StringWriter();\n            PrintWriter printWriter = new PrintWriter(stringWriter);\n            \n            try {\n                cause.printStackTrace(printWriter);\n                table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n            } finally {\n                printWriter.close();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "10", "src_id": "M602", "code": "\n    private AsyncProfiler profilerInstance() {\n        if (profiler != null) {\n            return profiler;\n        }\n\n        // Try to load from special path if specified\n        if (ProfilerAction.load.toString().equals(action)) {\n            profiler = AsyncProfiler.getInstance(this.actionArg);\n        }\n\n        // Handle library path if specified\n        if (libPath != null) {\n            // Create a temporary copy of the library file to avoid classloader conflicts\n            FileOutputStream tmpLibOutputStream = null;\n            FileInputStream libInputStream = null;\n            \n            try {\n                // Create temporary file for the library\n                File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n                tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n                libInputStream = new FileInputStream(libPath);\n\n                // Copy library to temporary file\n                IOUtils.copy(libInputStream, tmpLibOutputStream);\n                libPath = tmpLibFile.getAbsolutePath();\n                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n            } catch (Throwable e) {\n                logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n            } finally {\n                IOUtils.close(libInputStream);\n                IOUtils.close(tmpLibOutputStream);\n            }\n            \n            // Load profiler with the library path\n            profiler = AsyncProfiler.getInstance(libPath);\n        } else {\n            // Check OS compatibility\n            if (OSUtils.isLinux() || OSUtils.isMac()) {\n                throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n            } else {\n                throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n            }\n        }\n\n        return profiler;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "11", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException || \n                err instanceof ClosedByInterruptException || \n                thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "12", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return;// let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "13", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "14", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run();// try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "15", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "16", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                      .append(recovery.toString())\n                      .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(mContext,\n                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), \n                              action,\n                              service, \n                              request.toString(), \n                              reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "17", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "18", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            byte[] buffer = new byte[8 * 1024];\n            int read;\n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "19", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "20", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n    @ResizeMode\n    public static int nextResizeModeAndSaveToPrefs(final Player player,\n                                                   @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n        player.getPrefs().edit().putInt(\n                player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n        return newResizeMode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "21", "src_id": "M424", "code": "\n    @Override\n    public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n            if (!fragmentIsVisible) {\n                onFragmentStopped();\n            }\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n            fragmentIsVisible = false;\n            onFragmentStopped();\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n            fragmentIsVisible = true;\n            player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n            if (!isControlsVisible()) {\n                hideSystemUIIfNeeded();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "22", "src_id": "M900", "code": "\n    @StyleRes\n    public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n        final String selectedTheme = getSelectedThemeKey(context);\n\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } else if (selectedTheme.equals(blackTheme)) {\n            return R.style.BlackSettingsTheme;\n        } else if (selectedTheme.equals(automaticDeviceTheme)) {\n            if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                final String selectedNightTheme = getSelectedNightThemeKey(context);\n                if (selectedNightTheme.equals(blackTheme)) {\n                    return R.style.BlackSettingsTheme;\n                } else {\n                    return R.style.DarkSettingsTheme;\n                }\n            } else {\n                // there is only one day theme\n                return R.style.LightSettingsTheme;\n            }\n        } else {\n            // default to dark theme\n            return R.style.DarkSettingsTheme;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "23", "src_id": "M895", "code": "\n    @Override\n    public Bitmap transform(final Bitmap source) {\n        if (DEBUG) {\n            Log.d(TAG, \"Thumbnail - transform() called\");\n        }\n\n        final float notificationThumbnailWidth = Math.min(\n                context.getResources()\n                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                source.getWidth());\n\n        final Bitmap result = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth,\n                (int) (source.getHeight()\n                        / (source.getWidth() / notificationThumbnailWidth)),\n                null,\n                true);\n\n        if (result == source || !result.isMutable()) {\n            // create a new mutable bitmap to prevent strange crashes on some\n            // devices (see #4638)\n            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                    source,\n                    (int) notificationThumbnailWidth - 1,\n                    (int) (source.getHeight() / (source.getWidth()\n                            / (notificationThumbnailWidth - 1))),\n                    null,\n                    true);\n            source.recycle();\n            return copied;\n        } else {\n            source.recycle();\n            return result;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "24", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n                pause();\n                break;\n            case ACTION_CLOSE:\n                service.destroyPlayerAndStopService();\n                break;\n            case ACTION_PLAY_PAUSE:\n                playPause();\n                break;\n            case ACTION_PLAY_PREVIOUS:\n                playPrevious();\n                break;\n            case ACTION_PLAY_NEXT:\n                playNext();\n                break;\n            case ACTION_FAST_REWIND:\n                fastRewind();\n                break;\n            case ACTION_FAST_FORWARD:\n                fastForward();\n                break;\n            case ACTION_REPEAT:\n                cycleNextRepeatMode();\n                break;\n            case ACTION_SHUFFLE:\n                toggleShuffleModeEnabled();\n                break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                }\n                break;\n        }\n\n        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "25", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n\n        if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            // Starting ReCaptcha Challenge Activity\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } else if (errorInfo.getThrowable() != null\n                && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n            Toast.makeText(context, R.string.restricted_video_no_stream,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n            Toast.makeText(context, R.string.soundcloud_go_plus_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n            Toast.makeText(context, R.string.youtube_music_premium_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n        } else {\n            ErrorUtil.createNotification(context, errorInfo);\n        }\n\n        if (context instanceof RouterActivity) {\n            ((RouterActivity) context).finish();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "26", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context,\n                                               @NonNull final FragmentManager fragmentManager,\n                                               final int serviceId,\n                                               @Nullable final String url,\n                                               @NonNull final String title,\n                                               @Nullable final PlayQueue playQueue,\n                                               final boolean switchingPlayers) {\n\n        final boolean autoPlay;\n        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else if (switchingPlayers) {\n            // switching player to main player\n            autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n        } else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else {\n            // opening new stream while already playing in another player\n            autoPlay = false;\n        }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n            expandMainPlayer(detailFragment.requireActivity());\n            detailFragment.setAutoPlay(autoPlay);\n            if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                        || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n            } else {\n                detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n            }\n            detailFragment.scrollToTop();\n        };\n\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n        } else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment\n                    .getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n\n            defaultTransaction(fragmentManager)\n                    .replace(R.id.fragment_player_holder, instance)\n                    .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                    .commit();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "27", "src_id": "M698", "code": "\n    @Override\n    public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                    .into(binding.channelBannerImage);\n        } else {\n            // do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n\n        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.subChannelAvatarView);\n\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(Localization\n                    .shortSubscriberCount(activity, result.getSubscriberCount()));\n        } else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(String.format(\n                    getString(R.string.channel_created_by),\n                    currentInfo.getParentChannelName())\n            );\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        disposables.clear();\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "28", "src_id": "M379", "code": "\n    @Override\n    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n                || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n                || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n        final List<Tracks.Group> textTracks = currentTracks\n                .getGroups()\n                .stream()\n                .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n                .collect(Collectors.toList());\n        final List<String> availableLanguages = textTracks.stream()\n                .map(Tracks.Group::getMediaTrackGroup)\n                .filter(textTrack -> textTrack.length > 0)\n                .map(textTrack -> textTrack.getFormat(0).language)\n                .collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional<Format> selectedTracks = textTracks.stream()\n                .filter(Tracks.Group::isSelected)\n                .filter(info -> info.getMediaTrackGroup().length >= 1)\n                .map(info -> info.getMediaTrackGroup().getFormat(0))\n                .findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(\n                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n        binding.captionTextView.setVisibility(\n                availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "29", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context,\n                                                         @NonNull final List<Image> images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images)\n                .transform(new Transformation() {\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n\n                    @Override\n                    public String key() {\n                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                    }\n                });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "30", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(\n                    textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                        .append(escapeHtml(bcc))\n                        .append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\n                        \"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\n                        \"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\n                    \"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "31", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) return false;\n\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "32", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    // Apply MIME header decoding\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) break;\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "33", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\n                    \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                    markerPositions.size(),\n                    attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                        document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "34", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody =\n                    convertTextToHtml(\n                            textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                        .append(escapeHtml(bcc))\n                        .append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\n                        \"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\n                        \"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\n                    \"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "35", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) {\n            return false;\n        }\n\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "36", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            \n            for (int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n                \n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value =\n                            new StringBuilder(line.substring(headerName.length()).trim());\n                    \n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    \n                    // Apply MIME header decoding\n                    return safeMimeDecode(value.toString());\n                }\n                \n                if (line.trim().isEmpty()) {\n                    break;\n                }\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        \n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "37", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\n                    \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                    markerPositions.size(),\n                    attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        \n        for (int i = 0; i < annotationsToAdd; i++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                        document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "38", "src_id": "M1277", "code": "\n  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    \n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n      String key = entry.getKey();\n      Object obj = entry.getValue();\n      \n      if (key == null || obj == null) {\n        throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n      }\n      \n      String str;\n      if (obj instanceof byte[]) {\n        str = SafeEncoder.encode((byte[]) obj);\n      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n        str = geo.getLongitude() + \",\" + geo.getLatitude();\n      } else if (obj instanceof String) {\n        str = stringEscape ? escape((String) obj) : (String) obj;\n      } else {\n        str = String.valueOf(obj);\n      }\n      \n      output.put(key, str);\n    }\n    \n    return output;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "39", "src_id": "M902", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "40", "src_id": "M1131", "code": "\n  private static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    \n    switch (b) {\n      case PLUS_BYTE:\n        return is.readLineBytes();\n      case DOLLAR_BYTE:\n      case EQUAL_BYTE:\n        return processBulkReply(is);\n      case ASTERISK_BYTE:\n        return processMultiBulkReply(is);\n      case UNDERSCORE_BYTE:\n        return is.readNullCrLf();\n      case HASH_BYTE:\n        return is.readBooleanCrLf();\n      case COLON_BYTE:\n        return is.readLongCrLf();\n      case COMMA_BYTE:\n        return is.readDoubleCrLf();\n      case LEFT_BRACE_BYTE:\n        return is.readBigIntegerCrLf();\n      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n        return processMapKeyValueReply(is);\n      case TILDE_BYTE: // TODO:\n        return processMultiBulkReply(is);\n      case GREATER_THAN_BYTE:\n        return processMultiBulkReply(is);\n      case MINUS_BYTE:\n        processError(is);\n        return null;\n      // TODO: Blob error '!'\n      default:\n        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "41", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n      List list = (List) data;\n      if (list == null || list.isEmpty()) return null;\n\n      if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n          switch (keyStr) {\n            case PROFILE_STR_REDIS7:\n            case PROFILE_STR_REDIS8:\n              profileData = keyValue.getValue();\n              break;\n            case RESULTS_STR_REDIS7:\n              resultsData = data;\n              break;\n            case RESULTS_STR_REDIS8:\n              resultsData = keyValue.getValue();\n              break;\n          }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        \n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n      }\n\n      return KeyValue.of(resultsBuilder.build(list.get(0)),\n          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "42", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "43", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n      List<KeyValue> list = (List<KeyValue>) data;\n      Map<String, Object> properties = new HashMap<>();\n      Map<String, String> labels = null;\n      Map<String, Rule> rules = null;\n      List<Map<String, Object>> chunks = null;\n\n      for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        \n        if (value instanceof List) {\n          switch (prop) {\n            case LABELS_PROPERTY:\n              labels = BuilderFactory.STRING_MAP.build(value);\n              value = labels;\n              break;\n            case RULES_PROPERTY:\n              List<KeyValue> rulesDataList = (List<KeyValue>) value;\n              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n              rules = new HashMap<>(rulesDataList.size());\n              \n              for (KeyValue rkv : rulesDataList) {\n                String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                rulesValueMap.put(ruleName, ruleValueList);\n                rules.put(ruleName, new Rule(ruleName, ruleValueList));\n              }\n              \n              value = rulesValueMap;\n              break;\n            case CHUNKS_PROPERTY:\n              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n              chunks = new ArrayList<>(chunksDataList.size());\n              \n              for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                Map<String, Object> chunk = chunkDataAsList.stream()\n                    .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                chunksValueList.add(chunk);\n                chunks.add(chunk);\n              }\n              \n              value = chunksValueList;\n              break;\n            default:\n              value = SafeEncoder.encodeObject(value);\n              break;\n          }\n        } else if (value instanceof byte[]) {\n          value = BuilderFactory.STRING.build(value);\n          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n            try {\n              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n            } catch (Exception e) { }\n          }\n        }\n        \n        properties.put(prop, value);\n      }\n\n      return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "44", "src_id": "M897", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n      args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "45", "src_id": "M1213", "code": "\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    \n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) { // remembering first suppressed exception\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    \n    throw noReachableNode;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "46", "src_id": "M9", "code": "\n  @Override\n  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    \n    try {\n      entry = putIntoStore(cacheKey, entry);\n      EvictionPolicy policy = getEvictionPolicy();\n      policy.touch(cacheKey);\n      \n      CacheKey evictedKey = policy.evictNext();\n      if (evictedKey != null) {\n        delete(evictedKey);\n        stats.evict();\n      }\n      \n      for (Object redisKey : cacheKey.getRedisKeys()) {\n        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n        if (redisKeysToCacheKeys.containsKey(mapKey)) {\n          redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n        } else {\n          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n          set.add(cacheKey);\n          redisKeysToCacheKeys.put(mapKey, set);\n        }\n      }\n      \n      stats.load();\n      return entry;\n    } finally {\n      lock.unlock();\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "47", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n      if (data == null) return null;\n      \n      String str = STRING.build(data);\n      switch (str) {\n        case \"null\":\n          return null;\n        case \"boolean\":\n          return boolean.class;\n        case \"integer\":\n          return int.class;\n        case \"number\":\n          return float.class;\n        case \"string\":\n          return String.class;\n        case \"object\":\n          return Object.class;\n        case \"array\":\n          return List.class;\n        default:\n          throw new JedisException(\"Unknown type: \" + str);\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "48", "src_id": "M270", "code": "\n\tprivate static String normalizeArch(String value) {\n\t\tvalue = normalize(value);\n\t\t\n\t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n\t\t\treturn \"x86_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n\t\t\treturn \"x86_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(ia64w?|itanium64)$\")) {\n\t\t\treturn \"itanium_64\";\n\t\t}\n\t\t\n\t\tif (\"ia64n\".equals(value)) {\n\t\t\treturn \"itanium_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(sparc|sparc32)$\")) {\n\t\t\treturn \"sparc_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(sparcv9|sparc64)$\")) {\n\t\t\treturn \"sparc_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(arm|arm32)$\")) {\n\t\t\treturn \"arm_32\";\n\t\t}\n\t\t\n\t\tif (\"aarch64\".equals(value)) {\n\t\t\treturn \"aarch_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(mips|mips32)$\")) {\n\t\t\treturn \"mips_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(mipsel|mips32el)$\")) {\n\t\t\treturn \"mipsel_32\";\n\t\t}\n\t\t\n\t\tif (\"mips64\".equals(value)) {\n\t\t\treturn \"mips_64\";\n\t\t}\n\t\t\n\t\tif (\"mips64el\".equals(value)) {\n\t\t\treturn \"mipsel_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(ppc|ppc32)$\")) {\n\t\t\treturn \"ppc_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(ppcle|ppc32le)$\")) {\n\t\t\treturn \"ppcle_32\";\n\t\t}\n\t\t\n\t\tif (\"ppc64\".equals(value)) {\n\t\t\treturn \"ppc_64\";\n\t\t}\n\t\t\n\t\tif (\"ppc64le\".equals(value)) {\n\t\t\treturn \"ppcle_64\";\n\t\t}\n\t\t\n\t\tif (\"s390\".equals(value)) {\n\t\t\treturn \"s390_32\";\n\t\t}\n\t\t\n\t\tif (\"s390x\".equals(value)) {\n\t\t\treturn \"s390_64\";\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "49", "src_id": "M928", "code": "\n    private static Map<String, Object> doGetLoggerInfo(Logger logger) {\n        Map<String, Object> info = new HashMap<String, Object>();\n        info.put(LoggerHelper.name, logger.getName());\n        info.put(LoggerHelper.clazz, logger.getClass());\n        \n        CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n        if (codeSource != null) {\n            info.put(LoggerHelper.codeSource, codeSource.getLocation());\n        }\n        \n        info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n        Level level = logger.getLevel(), effectiveLevel = logger.getEffectiveLevel();\n        if (level != null) {\n            info.put(LoggerHelper.level, level.toString());\n        }\n        \n        if (effectiveLevel != null) {\n            info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n        info.put(LoggerHelper.appenders, result);\n        \n        return info;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "50", "src_id": "M9", "code": "\n    @SuppressWarnings(\"resource\")\n    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n        Map<Long, String> processMap = listProcessByJps(v);\n        \n        // Put the port that is already listening at the first\n        if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n            String telnetPortProcess = processMap.get(telnetPortPid);\n            processMap.remove(telnetPortPid);\n            \n            Map<Long, String> newProcessMap = new LinkedHashMap<Long, String>();\n            newProcessMap.put(telnetPortPid, telnetPortProcess);\n            newProcessMap.putAll(processMap);\n            processMap = newProcessMap;\n        }\n\n        if (processMap.isEmpty()) {\n            AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n            return -1;\n        }\n\n\t\t// select target process by the '--select' option when match only one process\n\t\tif (select != null && !select.trim().isEmpty()) {\n\t\t\tint matchedSelectCount = 0;\n\t\t\tLong matchedPid = null;\n\t\t\t\n\t\t\tfor (Entry<Long, String> entry : processMap.entrySet()) {\n\t\t\t\tif (entry.getValue().contains(select)) {\n\t\t\t\t\tmatchedSelectCount++;\n\t\t\t\t\tmatchedPid = entry.getKey();\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\tif (matchedSelectCount == 1) {\n\t\t\t\treturn matchedPid;\n\t\t\t}\n\t\t}\n\n        AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n        \n        // print list\n        int count = 1;\n        for (String process : processMap.values()) {\n            if (count == 1) {\n                System.out.println(\"* [\" + count + \"]: \" + process);\n            } else {\n                System.out.println(\"  [\" + count + \"]: \" + process);\n            }\n            count++;\n        }\n\n        // read choice\n        String line = new Scanner(System.in).nextLine();\n        if (line.trim().isEmpty()) {\n            // get the first process id\n            return processMap.keySet().iterator().next();\n        }\n\n        int choice = new Scanner(line).nextInt();\n\n        if (choice <= 0 || choice > processMap.size()) {\n            return -1;\n        }\n\n        Iterator<Long> idIter = processMap.keySet().iterator();\n        for (int i = 1; i <= choice; ++i) {\n            if (i == choice) {\n                return idIter.next();\n            }\n            idIter.next();\n        }\n\n        return -1;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "51", "src_id": "M140", "code": "\n    void _processDo(int option) throws IOException {\n        if (debugoptions) {\n            System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n        }\n\n        if (__notifhand != null) {\n            __notifhand.receivedNegotiation(\n                TelnetNotificationHandler.RECEIVED_DO,\n                option);\n        }\n\n        boolean acceptNewState = false;\n\n        /* open TelnetOptionHandler functionality (start)*/\n        if (optionHandlers[option] != null) {\n            acceptNewState = optionHandlers[option].getAcceptLocal();\n        } else {\n        /* open TelnetOptionHandler functionality (end)*/\n            /* TERMINAL-TYPE option (start)*/\n            if (option == TERMINAL_TYPE) {\n                if ((terminalType != null) && (terminalType.length() > 0)) {\n                    acceptNewState = true;\n                }\n            }\n            /* TERMINAL-TYPE option (end)*/\n        /* open TelnetOptionHandler functionality (start)*/\n        }\n        /* open TelnetOptionHandler functionality (end)*/\n\n        if (_willResponse[option] > 0) {\n            --_willResponse[option];\n            if (_willResponse[option] > 0 && _stateIsWill(option)) {\n                --_willResponse[option];\n            }\n        }\n\n        if (_willResponse[option] == 0) {\n            if (_requestedWont(option)) {\n                switch (option) {\n                default:\n                    break;\n                }\n\n                if (acceptNewState) {\n                    _setWantWill(option);\n                    _sendWill(option);\n                } else {\n                    ++_willResponse[option];\n                    _sendWont(option);\n                }\n            } else {\n                // Other end has acknowledged option.\n                switch (option) {\n                default:\n                    break;\n                }\n            }\n        }\n\n        _setWill(option);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "52", "src_id": "M1324", "code": "\n    private void bind(Configure configure) throws Throwable {\n        long start = System.currentTimeMillis();\n\n        if (!isBindRef.compareAndSet(false, true)) {\n            throw new IllegalStateException(\"already bind\");\n        }\n\n        // init random port\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n            int newTelnetPort = SocketUtils.findAvailableTcpPort();\n            configure.setTelnetPort(newTelnetPort);\n            logger().info(\"generate random telnet port: \" + newTelnetPort);\n        }\n        \n        if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n            int newHttpPort = SocketUtils.findAvailableTcpPort();\n            configure.setHttpPort(newHttpPort);\n            logger().info(\"generate random http port: \" + newHttpPort);\n        }\n        \n        // try to find appName\n        if (configure.getAppName() == null) {\n            configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME,\n                    System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n        }\n\n        try {\n            if (configure.getTunnelServer() != null) {\n                tunnelClient = new TunnelClient();\n                tunnelClient.setAppName(configure.getAppName());\n                tunnelClient.setId(configure.getAgentId());\n                tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n                tunnelClient.setVersion(ArthasBanner.version());\n                ChannelFuture channelFuture = tunnelClient.start();\n                channelFuture.await(10, TimeUnit.SECONDS);\n            }\n        } catch (Throwable t) {\n            logger().error(\"start tunnel client error\", t);\n        }\n\n        try {\n            ShellServerOptions options = new ShellServerOptions()\n                            .setInstrumentation(instrumentation)\n                            .setPid(PidUtils.currentLongPid())\n                            .setWelcomeMessage(ArthasBanner.welcome());\n            \n            if (configure.getSessionTimeout() != null) {\n                options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n            }\n\n            this.httpSessionManager = new HttpSessionManager();\n            \n            if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n                // 当 listen 0.0.0.0 时，强制生成密码，防止被远程连接\n                String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n                        + \"No password is currently configured. \" + \"Therefore, a default password is generated, \"\n                        + \"and clients need to use the password to connect!\";\n                AnsiLog.error(errorMsg);\n                configure.setPassword(StringUtils.randomString(64));\n                AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n\n                logger().error(errorMsg);\n                logger().info(\"Generated arthas password: \" + configure.getPassword());\n            }\n\n            this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n\n            shellServer = new ShellServerImpl(options);\n\n            List<String> disabledCommands = new ArrayList<String>();\n            if (configure.getDisabledCommands() != null) {\n                String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n                if (strings != null) {\n                    disabledCommands.addAll(Arrays.asList(strings));\n                }\n            }\n            \n            BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n            List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n            resolvers.add(builtinCommands);\n\n            //worker group\n            workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n            // TODO: discover user provided command resolver\n            if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n                logger().info(\"try to bind telnet server, host: {}, port: {}.\", configure.getIp(), configure.getTelnetPort());\n                shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n            }\n            \n            if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n                logger().info(\"try to bind http server, host: {}, port: {}.\", configure.getIp(), configure.getHttpPort());\n                shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                // listen local address in VM communication\n                if (configure.getTunnelServer() != null) {\n                    shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                            options.getConnectionTimeout(), workerGroup, httpSessionManager));\n                }\n                logger().info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n            }\n\n            for (CommandResolver resolver : resolvers) {\n                shellServer.registerCommandResolver(resolver);\n            }\n\n            shellServer.listen(new BindHandler(isBindRef));\n            \n            if (!isBind()) {\n                throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n                        + String.valueOf(configure.getTelnetPort()) + \", http port: \"\n                        + String.valueOf(configure.getHttpPort()));\n            }\n\n            //http api session manager\n            sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n            //http api handler\n            httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n            logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", configure.getIp(),\n                    configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n            // 异步回报启动次数\n            if (configure.getStatUrl() != null) {\n                logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n            }\n            \n            UserStatUtil.setStatUrl(configure.getStatUrl());\n            UserStatUtil.setAgentId(configure.getAgentId());\n            UserStatUtil.arthasStart();\n\n            try {\n                SpyAPI.init();\n            } catch (Throwable e) {\n                // ignore\n            }\n\n            logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n        } catch (Throwable e) {\n            logger().error(\"Error during start as-server\", e);\n            destroy();\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "53", "src_id": "M122", "code": "\n    private int __read(boolean mayBlock) throws IOException {\n        int ch;\n\n        for (;;) {\n            // If there is no more data AND we were told not to block,\n            // just return WOULD_BLOCK (-2). (More efficient than exception.)\n            if(!mayBlock && super.available() == 0) {\n                return WOULD_BLOCK;\n            }\n\n            // Otherwise, exit only when we reach end of stream.\n            if ((ch = super.read()) < 0) {\n                return EOF;\n            }\n\n            ch = (ch & 0xff);\n\n            /* Code Section added for supporting AYT (start)*/\n            synchronized (__client) {\n                __client._processAYTResponse();\n            }\n            /* Code Section added for supporting AYT (end)*/\n\n            /* Code Section added for supporting spystreams (start)*/\n            __client._spyRead(ch);\n            /* Code Section added for supporting spystreams (end)*/\n\n            switch (__receiveState) {\n            case _STATE_CR:\n                if (ch == '\\0') {\n                    // Strip null\n                    continue;\n                }\n                // How do we handle newline after cr?\n                //  else if (ch == '\\n' && _requestedDont(TelnetOption.ECHO) &&\n\n                // Handle as normal data by falling through to _STATE_DATA case\n\n                //$FALL-THROUGH$\n            case _STATE_DATA:\n                if (ch == TelnetCommand.IAC) {\n                    __receiveState = _STATE_IAC;\n                    continue;\n                }\n\n                if (ch == '\\r') {\n                    synchronized (__client) {\n                        if (__client._requestedDont(TelnetOption.BINARY)) {\n                            __receiveState = _STATE_CR;\n                        } else {\n                            __receiveState = _STATE_DATA;\n                        }\n                    }\n                } else {\n                    __receiveState = _STATE_DATA;\n                }\n                break;\n\n            case _STATE_IAC:\n                switch (ch) {\n                case TelnetCommand.WILL:\n                    __receiveState = _STATE_WILL;\n                    continue;\n                case TelnetCommand.WONT:\n                    __receiveState = _STATE_WONT;\n                    continue;\n                case TelnetCommand.DO:\n                    __receiveState = _STATE_DO;\n                    continue;\n                case TelnetCommand.DONT:\n                    __receiveState = _STATE_DONT;\n                    continue;\n                /* TERMINAL-TYPE option (start)*/\n                case TelnetCommand.SB:\n                    __suboption_count = 0;\n                    __receiveState = _STATE_SB;\n                    continue;\n                /* TERMINAL-TYPE option (end)*/\n                case TelnetCommand.IAC:\n                    __receiveState = _STATE_DATA;\n                    break; // exit to enclosing switch to return IAC from read\n                case TelnetCommand.SE: // unexpected byte! ignore it (don't send it as a command)\n                    __receiveState = _STATE_DATA;\n                    continue;\n                default:\n                    __receiveState = _STATE_DATA;\n                    __client._processCommand(ch); // Notify the user\n                    continue; // move on the next char\n                }\n                break; // exit and return from read\n                \n            case _STATE_WILL:\n                synchronized (__client) {\n                    __client._processWill(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_WONT:\n                synchronized (__client) {\n                    __client._processWont(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_DO:\n                synchronized (__client) {\n                    __client._processDo(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            case _STATE_DONT:\n                synchronized (__client) {\n                    __client._processDont(ch);\n                    __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n                \n            /* TERMINAL-TYPE option (start)*/\n            case _STATE_SB:\n                switch (ch) {\n                case TelnetCommand.IAC:\n                    __receiveState = _STATE_IAC_SB;\n                    continue;\n                default:\n                    // store suboption char\n                    if (__suboption_count < __suboption.length) {\n                        __suboption[__suboption_count++] = ch;\n                    }\n                    break;\n                }\n                __receiveState = _STATE_SB;\n                continue;\n                \n            case _STATE_IAC_SB: // IAC received during SB phase\n                switch (ch) {\n                case TelnetCommand.SE:\n                    synchronized (__client) {\n                        __client._processSuboption(__suboption, __suboption_count);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                case TelnetCommand.IAC: // De-dup the duplicated IAC\n                    if (__suboption_count < __suboption.length) {\n                        __suboption[__suboption_count++] = ch;\n                    }\n                    break;\n                default:            // unexpected byte! ignore it\n                    break;\n                }\n                __receiveState = _STATE_SB;\n                continue;\n            /* TERMINAL-TYPE option (end)*/\n            }\n\n            break;\n        }\n\n        return ch;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "54", "src_id": "M8", "code": "\n    private static String formatFileSize(long size) {\n        String hrSize;\n\n        double b = size;\n        double k = size / 1024.0;\n        double m = ((size / 1024.0) / 1024.0);\n        double g = (((size / 1024.0) / 1024.0) / 1024.0);\n        double t = ((((size / 1024.0) / 1024.0) / 1024.0) / 1024.0);\n\n        DecimalFormat dec = new DecimalFormat(\"0.00\");\n\n        if (t > 1) {\n            hrSize = dec.format(t).concat(\" TB\");\n        } else if (g > 1) {\n            hrSize = dec.format(g).concat(\" GB\");\n        } else if (m > 1) {\n            hrSize = dec.format(m).concat(\" MB\");\n        } else if (k > 1) {\n            hrSize = dec.format(k).concat(\" KB\");\n        } else {\n            hrSize = dec.format(b).concat(\" Bytes\");\n        }\n\n        return hrSize;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "55", "src_id": "M790", "code": "\n        @Override\n        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n            if (className == null) {\n                return null;\n            }\n\n            className = className.replace('/', '.');\n\n            List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n            // 倒序，因为要执行的配置生效\n            ListIterator<RetransformEntry> listIterator = allRetransformEntries\n                    .listIterator(allRetransformEntries.size());\n                    \n            while (listIterator.hasPrevious()) {\n                RetransformEntry retransformEntry = listIterator.previous();\n                int id = retransformEntry.getId();\n                // 判断类名是否一致\n                boolean updateFlag = false;\n                \n                // 类名一致，则看是否要比较 loader，如果不需要比较 loader，则认为成功\n                if (className.equals(retransformEntry.getClassName())) {\n                    if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n                        updateFlag = isLoaderMatch(retransformEntry, loader);\n                    } else {\n                        updateFlag = true;\n                    }\n                }\n\n                if (updateFlag) {\n                    logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n                            className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n                    retransformEntry.incTransformCount();\n                    return retransformEntry.getBytes();\n                }\n            }\n\n            return null;\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "56", "src_id": "M716", "code": "\n    public static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n        // 执行失败:输出失败状态\n        table.row(\"IS-RETURN\", \"\" + false);\n        table.row(\"IS-EXCEPTION\", \"\" + true);\n\n        // 执行失败:输出失败异常信息\n        Throwable cause;\n        Throwable t = (Throwable) throwableVO.getObject();\n        \n        if (t instanceof InvocationTargetException) {\n            cause = t.getCause();\n        } else {\n            cause = t;\n        }\n\n        if (throwableVO.needExpand()) {\n            table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n        } else {\n            StringWriter stringWriter = new StringWriter();\n            PrintWriter printWriter = new PrintWriter(stringWriter);\n            \n            try {\n                cause.printStackTrace(printWriter);\n                table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n            } finally {\n                printWriter.close();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "57", "src_id": "M602", "code": "\n    private AsyncProfiler profilerInstance() {\n        if (profiler != null) {\n            return profiler;\n        }\n\n        // try to load from special path\n        if (ProfilerAction.load.toString().equals(action)) {\n            profiler = AsyncProfiler.getInstance(this.actionArg);\n        }\n\n        if (libPath != null) {\n            // load from arthas directory\n            // 尝试把lib文件复制到临时文件里，避免多次attach时出现 Native Library already loaded in another classloader\n            FileOutputStream tmpLibOutputStream = null;\n            FileInputStream libInputStream = null;\n            \n            try {\n                File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n                tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n                libInputStream = new FileInputStream(libPath);\n\n                IOUtils.copy(libInputStream, tmpLibOutputStream);\n                libPath = tmpLibFile.getAbsolutePath();\n                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n            } catch (Throwable e) {\n                logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n            } finally {\n                IOUtils.close(libInputStream);\n                IOUtils.close(tmpLibOutputStream);\n            }\n            \n            profiler = AsyncProfiler.getInstance(libPath);\n        } else {\n            if (OSUtils.isLinux() || OSUtils.isMac()) {\n                throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n            } else {\n                throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n            }\n        }\n\n        return profiler;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "58", "src_id": "M475", "code": "\n    @Override\n    public void draw(CommandProcess process, JvmModel result) {\n        TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n\n        for (Map.Entry<String, List<JvmItemVO>> entry : result.getJvmInfo().entrySet()) {\n            String group = entry.getKey();\n            List<JvmItemVO> items = entry.getValue();\n\n            table.row(true, label(group).style(Decoration.bold.bold()));\n            for (JvmItemVO item : items) {\n                String valueStr;\n                if (item.getValue() instanceof Map && item.getName().endsWith(\"MEMORY-USAGE\")) {\n                    valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n                } else {\n                    valueStr = renderItemValue(item.getValue());\n                }\n                if (item.getDesc() != null) {\n                    table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n                } else {\n                    table.row(item.getName(), valueStr);\n                }\n            }\n            table.row(\"\", \"\");\n        }\n\n        process.write(RenderUtil.render(table, process.width()));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "59", "src_id": "M535", "code": "\n    public static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n        final StringBuilder infoSB = new StringBuilder();\n        \n        List<String> classDumpFiles = affectVO.getClassDumpFiles();\n        if (classDumpFiles != null) {\n            for (String classDumpFile : classDumpFiles) {\n                infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n            }\n        }\n\n        List<String> methods = affectVO.getMethods();\n        if (methods != null) {\n            for (String method : methods) {\n                infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n            }\n        }\n\n        infoSB.append(format(\"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\",\n                affectVO.getClassCount(),\n                affectVO.getMethodCount(),\n                affectVO.getCost(),\n                affectVO.getListenerId()));\n                \n        if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n            infoSB.append(\"\\n\" + affectVO.getOverLimitMsg());\n        }\n        \n        if (affectVO.getThrowable() != null) {\n            infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n        }\n        \n        infoSB.append(\"\\n\");\n\n        return infoSB.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "60", "src_id": "M753", "code": "\n    public List<ThreadVO> sample(Collection<ThreadVO> originThreads) {\n        List<ThreadVO> threads = new ArrayList<ThreadVO>(originThreads);\n\n        // Sample CPU\n        if (lastCpuTimes.isEmpty()) {\n            lastSampleTimeNanos = System.nanoTime();\n            for (ThreadVO thread : threads) {\n                if (thread.getId() > 0) {\n                    long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                    lastCpuTimes.put(thread, cpu);\n                    thread.setTime(cpu / 1000000);\n                }\n            }\n\n            // add internal threads\n            Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n            if (internalThreadCpuTimes != null) {\n                for (Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n                    String key = entry.getKey();\n                    ThreadVO thread = createThreadVO(key);\n                    thread.setTime(entry.getValue() / 1000000);\n                    threads.add(thread);\n                    lastCpuTimes.put(thread, entry.getValue());\n                }\n            }\n\n            //sort by time\n            Collections.sort(threads, new Comparator<ThreadVO>() {\n                @Override\n                public int compare(ThreadVO o1, ThreadVO o2) {\n                    long l1 = o1.getTime();\n                    long l2 = o2.getTime();\n                    if (l1 < l2) {\n                        return 1;\n                    } else if (l1 > l2) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                }\n            });\n            return threads;\n        }\n\n        // Resample\n        long newSampleTimeNanos = System.nanoTime();\n        Map<ThreadVO, Long> newCpuTimes = new HashMap<ThreadVO, Long>(threads.size());\n        \n        for (ThreadVO thread : threads) {\n            if (thread.getId() > 0) {\n                long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                newCpuTimes.put(thread, cpu);\n            }\n        }\n        \n        // internal threads\n        Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n        if (newInternalThreadCpuTimes != null) {\n            for (Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n                ThreadVO threadVO = createThreadVO(entry.getKey());\n                threads.add(threadVO);\n                newCpuTimes.put(threadVO, entry.getValue());\n            }\n        }\n\n        // Compute delta time\n        final Map<ThreadVO, Long> deltas = new HashMap<ThreadVO, Long>(threads.size());\n        for (ThreadVO thread : newCpuTimes.keySet()) {\n            Long t = lastCpuTimes.get(thread);\n            if (t == null) {\n                t = 0L;\n            }\n            long time1 = t;\n            long time2 = newCpuTimes.get(thread);\n            if (time1 == -1) {\n                time1 = time2;\n            } else if (time2 == -1) {\n                time2 = time1;\n            }\n            long delta = time2 - time1;\n            deltas.put(thread, delta);\n        }\n\n        long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n\n        // Compute cpu usage\n        final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());\n        for (ThreadVO thread : threads) {\n            double cpu = sampleIntervalNanos == 0 ? 0 : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);\n            cpuUsages.put(thread, cpu);\n        }\n\n        // Sort by CPU time : should be a rendering hint...\n        Collections.sort(threads, new Comparator<ThreadVO>() {\n            @Override\n            public int compare(ThreadVO o1, ThreadVO o2) {\n                long l1 = deltas.get(o1);\n                long l2 = deltas.get(o2);\n                if (l1 < l2) {\n                    return 1;\n                } else if (l1 > l2) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n\n        for (ThreadVO thread : threads) {\n            //nanos to mills\n            long timeMills = newCpuTimes.get(thread) / 1000000;\n            long deltaTime = deltas.get(thread) / 1000000;\n            double cpu = cpuUsages.get(thread);\n\n            thread.setCpu(cpu);\n            thread.setTime(timeMills);\n            thread.setDeltaTime(deltaTime);\n        }\n        \n        lastCpuTimes = newCpuTimes;\n        lastSampleTimeNanos = newSampleTimeNanos;\n\n        return threads;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "61", "src_id": "M1131", "code": "\n    private ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n        String commandLine = apiRequest.getCommand();\n        Map<String, Object> body = new TreeMap<String, Object>();\n        body.put(\"command\", commandLine);\n\n        ApiResponse response = new ApiResponse();\n        response.setSessionId(session.getSessionId())\n                .setBody(body);\n\n        if (!session.tryLock()) {\n            response.setState(ApiState.REFUSED)\n                    .setMessage(\"Another command is executing.\");\n            return response;\n        }\n        \n        int lock = session.getLock();\n        try {\n            Job foregroundJob = session.getForegroundJob();\n            if (foregroundJob != null) {\n                response.setState(ApiState.REFUSED)\n                        .setMessage(\"Another job is running.\");\n                logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n                return response;\n            }\n\n            //create job\n            Job job = this.createJob(commandLine, session, session.getResultDistributor());\n            body.put(\"jobId\", job.id());\n            body.put(\"jobStatus\", job.status());\n            response.setState(ApiState.SCHEDULED);\n\n            //add command before exec job\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n            commandRequestModel.setJobId(job.id());\n            SharingResultDistributor resultDistributor = session.getResultDistributor();\n            if (resultDistributor != null) {\n                resultDistributor.appendResult(commandRequestModel);\n            }\n            \n            session.setForegroundJob(job);\n            updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n\n            //run job\n            job.run();\n\n            return response;\n        } catch (Throwable e) {\n            logger.error(\"Async exec command failed:\" + e.getMessage() + \", command:\" + commandLine, e);\n            response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n            session.getResultDistributor().appendResult(commandRequestModel);\n            return response;\n        } finally {\n            if (session.getLock() == lock) {\n                session.unLock();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "62", "src_id": "M542", "code": "\n    private String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n        StringBuilder sb = new StringBuilder(8192);\n\n        for (Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n            Map<String, Object> info = entry.getValue();\n\n            TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n            TableElement appendersTable = new TableElement().rightCellPadding(1);\n\n            Class<?> clazz = (Class<?>) info.get(LoggerHelper.clazz);\n            \n            table.row(label(LoggerHelper.name).style(Decoration.bold.bold()), \n                    label(\"\" + info.get(LoggerHelper.name)))\n                 .row(label(LoggerHelper.clazz).style(Decoration.bold.bold()), \n                    label(\"\" + clazz.getName()))\n                 .row(label(LoggerHelper.classLoader).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.classLoader)))\n                 .row(label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.classLoaderHash)))\n                 .row(label(LoggerHelper.level).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.level)));\n                    \n            if (info.get(LoggerHelper.effectiveLevel) != null) {\n                table.row(label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n            }\n\n            if (info.get(LoggerHelper.config) != null) {\n                table.row(label(LoggerHelper.config).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.config)));\n            }\n\n            table.row(label(LoggerHelper.additivity).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.additivity)))\n                 .row(label(LoggerHelper.codeSource).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.codeSource)));\n\n            @SuppressWarnings(\"unchecked\")\n            List<Map<String, Object>> appenders = (List<Map<String, Object>>) info.get(LoggerHelper.appenders);\n            if (appenders != null && !appenders.isEmpty()) {\n                for (Map<String, Object> appenderInfo : appenders) {\n                    Class<?> appenderClass = (Class<?>) appenderInfo.get(LoggerHelper.clazz);\n\n                    appendersTable.row(label(LoggerHelper.name).style(Decoration.bold.bold()),\n                            label(\"\" + appenderInfo.get(LoggerHelper.name)));\n                    appendersTable.row(label(LoggerHelper.clazz), \n                            label(\"\" + appenderClass.getName()));\n                    appendersTable.row(label(LoggerHelper.classLoader), \n                            label(\"\" + info.get(LoggerHelper.classLoader)));\n                    appendersTable.row(label(LoggerHelper.classLoaderHash),\n                            label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n                            \n                    if (appenderInfo.get(LoggerHelper.file) != null) {\n                        appendersTable.row(label(LoggerHelper.file), \n                                label(\"\" + appenderInfo.get(LoggerHelper.file)));\n                    }\n                    \n                    if (appenderInfo.get(LoggerHelper.target) != null) {\n                        appendersTable.row(label(LoggerHelper.target),\n                                label(\"\" + appenderInfo.get(LoggerHelper.target)));\n                    }\n                    \n                    if (appenderInfo.get(LoggerHelper.blocking) != null) {\n                        appendersTable.row(label(LoggerHelper.blocking),\n                                label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n                    }\n                    \n                    if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n                        appendersTable.row(label(LoggerHelper.appenderRef),\n                                label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n                    }\n                }\n\n                table.row(label(\"appenders\").style(Decoration.bold.bold()), appendersTable);\n            }\n\n            sb.append(RenderUtil.render(table, width)).append('\\n');\n        }\n        \n        return sb.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "63", "src_id": "M15", "code": "\n    public static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {\n        // start java telnet client\n        // find arthas-client.jar\n        URLClassLoader classLoader = new URLClassLoader(\n                new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n        Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n        Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n        //redirect System.out/System.err\n        PrintStream originSysOut = System.out;\n        PrintStream originSysErr = System.err;\n        PrintStream newOut = new PrintStream(out);\n        PrintStream newErr = new PrintStream(out);\n\n        // call TelnetConsole.process()\n        // fix https://github.com/alibaba/arthas/issues/833\n        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n        try {\n            System.setOut(newOut);\n            System.setErr(newErr);\n            Thread.currentThread().setContextClassLoader(classLoader);\n            return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});\n        } catch (Throwable e) {\n            //java.lang.reflect.InvocationTargetException : java.net.ConnectException\n            e = e.getCause();\n            if (e instanceof IOException || e instanceof InterruptedException) {\n                // ignore connection error and interrupted error\n                return STATUS_ERROR;\n            } else {\n                // process error\n                AnsiLog.error(\"process error: {}\", e.toString());\n                AnsiLog.error(e);\n                return STATUS_EXEC_ERROR;\n            }\n        } finally {\n            Thread.currentThread().setContextClassLoader(tccl);\n\n            //reset System.out/System.err\n            System.setOut(originSysOut);\n            System.setErr(originSysErr);\n            \n            //flush output\n            newOut.flush();\n            newErr.flush();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "64", "src_id": "M1469", "code": "\n    public static FieldVO[] getFields(Class clazz, Integer expand) {\n        Field[] fields = clazz.getDeclaredFields();\n        if (fields.length == 0) {\n            return new FieldVO[0];\n        }\n\n        List<FieldVO> list = new ArrayList<FieldVO>(fields.length);\n        for (Field field : fields) {\n            FieldVO fieldVO = new FieldVO();\n            fieldVO.setName(field.getName());\n            fieldVO.setType(StringUtils.classname(field.getType()));\n            fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n            fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n            \n            if (Modifier.isStatic(field.getModifiers())) {\n                fieldVO.setStatic(true);\n                fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n            } else {\n                fieldVO.setStatic(false);\n            }\n            \n            list.add(fieldVO);\n        }\n        \n        return list.toArray(new FieldVO[0]);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "65", "src_id": "M1277", "code": "\n  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    \n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n      String key = entry.getKey();\n      Object obj = entry.getValue();\n      \n      if (key == null || obj == null) {\n        throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n      }\n      \n      String str;\n      if (obj instanceof byte[]) {\n        str = SafeEncoder.encode((byte[]) obj);\n      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n        str = geo.getLongitude() + \",\" + geo.getLatitude();\n      } else if (obj instanceof String) {\n        str = stringEscape ? escape((String) obj) : (String) obj;\n      } else {\n        str = String.valueOf(obj);\n      }\n      \n      output.put(key, str);\n    }\n    \n    return output;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "66", "src_id": "M902", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "67", "src_id": "M1131", "code": "\n  private static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    \n    switch (b) {\n      case PLUS_BYTE:\n        return is.readLineBytes();\n      case DOLLAR_BYTE:\n      case EQUAL_BYTE:\n        return processBulkReply(is);\n      case ASTERISK_BYTE:\n        return processMultiBulkReply(is);\n      case UNDERSCORE_BYTE:\n        return is.readNullCrLf();\n      case HASH_BYTE:\n        return is.readBooleanCrLf();\n      case COLON_BYTE:\n        return is.readLongCrLf();\n      case COMMA_BYTE:\n        return is.readDoubleCrLf();\n      case LEFT_BRACE_BYTE:\n        return is.readBigIntegerCrLf();\n      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n        return processMapKeyValueReply(is);\n      case TILDE_BYTE: // TODO:\n        return processMultiBulkReply(is);\n      case GREATER_THAN_BYTE:\n        return processMultiBulkReply(is);\n      case MINUS_BYTE:\n        processError(is);\n        return null;\n      // TODO: Blob error '!'\n      default:\n        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "68", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n      List list = (List) data;\n      if (list == null || list.isEmpty()) return null;\n\n      if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n          switch (keyStr) {\n            case PROFILE_STR_REDIS7:\n            case PROFILE_STR_REDIS8:\n              profileData = keyValue.getValue();\n              break;\n            case RESULTS_STR_REDIS7:\n              resultsData = data;\n              break;\n            case RESULTS_STR_REDIS8:\n              resultsData = keyValue.getValue();\n              break;\n          }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        \n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n      }\n\n      return KeyValue.of(resultsBuilder.build(list.get(0)),\n          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "69", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "70", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n      List<KeyValue> list = (List<KeyValue>) data;\n      Map<String, Object> properties = new HashMap<>();\n      Map<String, String> labels = null;\n      Map<String, Rule> rules = null;\n      List<Map<String, Object>> chunks = null;\n\n      for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        \n        if (value instanceof List) {\n          switch (prop) {\n            case LABELS_PROPERTY:\n              labels = BuilderFactory.STRING_MAP.build(value);\n              value = labels;\n              break;\n            case RULES_PROPERTY:\n              List<KeyValue> rulesDataList = (List<KeyValue>) value;\n              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n              rules = new HashMap<>(rulesDataList.size());\n              \n              for (KeyValue rkv : rulesDataList) {\n                String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                rulesValueMap.put(ruleName, ruleValueList);\n                rules.put(ruleName, new Rule(ruleName, ruleValueList));\n              }\n              \n              value = rulesValueMap;\n              break;\n            case CHUNKS_PROPERTY:\n              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n              chunks = new ArrayList<>(chunksDataList.size());\n              \n              for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                Map<String, Object> chunk = chunkDataAsList.stream()\n                    .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                chunksValueList.add(chunk);\n                chunks.add(chunk);\n              }\n              \n              value = chunksValueList;\n              break;\n            default:\n              value = SafeEncoder.encodeObject(value);\n              break;\n          }\n        } else if (value instanceof byte[]) {\n          value = BuilderFactory.STRING.build(value);\n          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n            try {\n              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n            } catch (Exception e) { }\n          }\n        }\n        \n        properties.put(prop, value);\n      }\n\n      return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "71", "src_id": "M897", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n      args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "72", "src_id": "M1213", "code": "\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) { // remembering first suppressed exception\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    \n    throw noReachableNode;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "73", "src_id": "M9", "code": "\n  @Override\n  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n      entry = putIntoStore(cacheKey, entry);\n      \n      EvictionPolicy policy = getEvictionPolicy();\n      policy.touch(cacheKey);\n      \n      CacheKey evictedKey = policy.evictNext();\n      if (evictedKey != null) {\n        delete(evictedKey);\n        stats.evict();\n      }\n      \n      for (Object redisKey : cacheKey.getRedisKeys()) {\n        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n        if (redisKeysToCacheKeys.containsKey(mapKey)) {\n          redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n        } else {\n          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n          set.add(cacheKey);\n          redisKeysToCacheKeys.put(mapKey, set);\n        }\n      }\n      \n      stats.load();\n      return entry;\n    } finally {\n      lock.unlock();\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "74", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n      if (data == null) return null;\n      \n      String str = STRING.build(data);\n      switch (str) {\n        case \"null\":\n          return null;\n        case \"boolean\":\n          return boolean.class;\n        case \"integer\":\n          return int.class;\n        case \"number\":\n          return float.class;\n        case \"string\":\n          return String.class;\n        case \"object\":\n          return Object.class;\n        case \"array\":\n          return List.class;\n        default:\n          throw new JedisException(\"Unknown type: \" + str);\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "75", "src_id": "M1277", "code": "\n  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    \n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n      String key = entry.getKey();\n      Object obj = entry.getValue();\n      \n      if (key == null || obj == null) {\n        throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n      }\n      \n      String str;\n      \n      if (obj instanceof byte[]) {\n        str = SafeEncoder.encode((byte[]) obj);\n      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n        str = geo.getLongitude() + \",\" + geo.getLatitude();\n      } else if (obj instanceof String) {\n        str = stringEscape ? escape((String) obj) : (String) obj;\n      } else {\n        str = String.valueOf(obj);\n      }\n      \n      output.put(key, str);\n    }\n    \n    return output;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "76", "src_id": "M902", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "77", "src_id": "M1131", "code": "\n  private static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    \n    switch (b) {\n      case PLUS_BYTE:\n        return is.readLineBytes();\n      case DOLLAR_BYTE:\n      case EQUAL_BYTE:\n        return processBulkReply(is);\n      case ASTERISK_BYTE:\n        return processMultiBulkReply(is);\n      case UNDERSCORE_BYTE:\n        return is.readNullCrLf();\n      case HASH_BYTE:\n        return is.readBooleanCrLf();\n      case COLON_BYTE:\n        return is.readLongCrLf();\n      case COMMA_BYTE:\n        return is.readDoubleCrLf();\n      case LEFT_BRACE_BYTE:\n        return is.readBigIntegerCrLf();\n      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n        return processMapKeyValueReply(is);\n      case TILDE_BYTE: // TODO:\n        return processMultiBulkReply(is);\n      case GREATER_THAN_BYTE:\n        return processMultiBulkReply(is);\n      case MINUS_BYTE:\n        processError(is);\n        return null;\n      // TODO: Blob error '!'\n      default:\n        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "78", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n      List list = (List) data;\n      if (list == null || list.isEmpty()) return null;\n\n      if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n          \n          switch (keyStr) {\n            case PROFILE_STR_REDIS7:\n            case PROFILE_STR_REDIS8:\n              profileData = keyValue.getValue();\n              break;\n            case RESULTS_STR_REDIS7:\n              resultsData = data;\n              break;\n            case RESULTS_STR_REDIS8:\n              resultsData = keyValue.getValue();\n              break;\n          }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        \n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n      }\n\n      return KeyValue.of(resultsBuilder.build(list.get(0)),\n          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "79", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            \n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            \n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "80", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n      List<KeyValue> list = (List<KeyValue>) data;\n      Map<String, Object> properties = new HashMap<>();\n      Map<String, String> labels = null;\n      Map<String, Rule> rules = null;\n      List<Map<String, Object>> chunks = null;\n\n      for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        \n        if (value instanceof List) {\n          switch (prop) {\n            case LABELS_PROPERTY:\n              labels = BuilderFactory.STRING_MAP.build(value);\n              value = labels;\n              break;\n              \n            case RULES_PROPERTY:\n              List<KeyValue> rulesDataList = (List<KeyValue>) value;\n              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n              rules = new HashMap<>(rulesDataList.size());\n              \n              for (KeyValue rkv : rulesDataList) {\n                String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                rulesValueMap.put(ruleName, ruleValueList);\n                rules.put(ruleName, new Rule(ruleName, ruleValueList));\n              }\n              \n              value = rulesValueMap;\n              break;\n              \n            case CHUNKS_PROPERTY:\n              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n              chunks = new ArrayList<>(chunksDataList.size());\n              \n              for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                Map<String, Object> chunk = chunkDataAsList.stream()\n                    .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                chunksValueList.add(chunk);\n                chunks.add(chunk);\n              }\n              \n              value = chunksValueList;\n              break;\n              \n            default:\n              value = SafeEncoder.encodeObject(value);\n              break;\n          }\n        } else if (value instanceof byte[]) {\n          value = BuilderFactory.STRING.build(value);\n          \n          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n            try {\n              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n            } catch (Exception e) { }\n          }\n        }\n        \n        properties.put(prop, value);\n      }\n\n      return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "81", "src_id": "M897", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n      args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "82", "src_id": "M1213", "code": "\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    \n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      \n      try {\n        jedis = pool.getResource();\n        \n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) { // remembering first suppressed exception\n          suppressed = ex;\n        }\n        \n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    \n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    \n    throw noReachableNode;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "83", "src_id": "M9", "code": "\n  @Override\n  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    \n    try {\n      entry = putIntoStore(cacheKey, entry);\n      EvictionPolicy policy = getEvictionPolicy();\n      policy.touch(cacheKey);\n      \n      CacheKey evictedKey = policy.evictNext();\n      if (evictedKey != null) {\n        delete(evictedKey);\n        stats.evict();\n      }\n      \n      for (Object redisKey : cacheKey.getRedisKeys()) {\n        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n        \n        if (redisKeysToCacheKeys.containsKey(mapKey)) {\n          redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n        } else {\n          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n          set.add(cacheKey);\n          redisKeysToCacheKeys.put(mapKey, set);\n        }\n      }\n      \n      stats.load();\n      return entry;\n    } finally {\n      lock.unlock();\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "84", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n      if (data == null) return null;\n      String str = STRING.build(data);\n      \n      switch (str) {\n        case \"null\":\n          return null;\n        case \"boolean\":\n          return boolean.class;\n        case \"integer\":\n          return int.class;\n        case \"number\":\n          return float.class;\n        case \"string\":\n          return String.class;\n        case \"object\":\n          return Object.class;\n        case \"array\":\n          return List.class;\n        default:\n          throw new JedisException(\"Unknown type: \" + str);\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "85", "src_id": "M1277", "code": "\n  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    \n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n      String key = entry.getKey();\n      Object obj = entry.getValue();\n      \n      if (key == null || obj == null) {\n        throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n      }\n      \n      String str;\n      if (obj instanceof byte[]) {\n        str = SafeEncoder.encode((byte[]) obj);\n      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n        str = geo.getLongitude() + \",\" + geo.getLatitude();\n      } else if (obj instanceof String) {\n        str = stringEscape ? escape((String) obj) : (String) obj;\n      } else {\n        str = String.valueOf(obj);\n      }\n      \n      output.put(key, str);\n    }\n    \n    return output;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "86", "src_id": "M902", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "87", "src_id": "M1131", "code": "\n  private static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    \n    switch (b) {\n      case PLUS_BYTE:\n        return is.readLineBytes();\n      case DOLLAR_BYTE:\n      case EQUAL_BYTE:\n        return processBulkReply(is);\n      case ASTERISK_BYTE:\n        return processMultiBulkReply(is);\n      case UNDERSCORE_BYTE:\n        return is.readNullCrLf();\n      case HASH_BYTE:\n        return is.readBooleanCrLf();\n      case COLON_BYTE:\n        return is.readLongCrLf();\n      case COMMA_BYTE:\n        return is.readDoubleCrLf();\n      case LEFT_BRACE_BYTE:\n        return is.readBigIntegerCrLf();\n      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n        return processMapKeyValueReply(is);\n      case TILDE_BYTE: // TODO:\n        return processMultiBulkReply(is);\n      case GREATER_THAN_BYTE:\n        return processMultiBulkReply(is);\n      case MINUS_BYTE:\n        processError(is);\n        return null;\n      // TODO: Blob error '!'\n      default:\n        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "88", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n      List list = (List) data;\n      if (list == null || list.isEmpty()) return null;\n\n      if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n          switch (keyStr) {\n            case PROFILE_STR_REDIS7:\n            case PROFILE_STR_REDIS8:\n              profileData = keyValue.getValue();\n              break;\n            case RESULTS_STR_REDIS7:\n              resultsData = data;\n              break;\n            case RESULTS_STR_REDIS8:\n              resultsData = keyValue.getValue();\n              break;\n          }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        \n        return KeyValue.of(\n            resultsBuilder.build(resultsData),\n            ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n      }\n\n      return KeyValue.of(\n          resultsBuilder.build(list.get(0)),\n          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "89", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "90", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n      List<KeyValue> list = (List<KeyValue>) data;\n      Map<String, Object> properties = new HashMap<>();\n      Map<String, String> labels = null;\n      Map<String, Rule> rules = null;\n      List<Map<String, Object>> chunks = null;\n\n      for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        \n        if (value instanceof List) {\n          switch (prop) {\n            case LABELS_PROPERTY:\n              labels = BuilderFactory.STRING_MAP.build(value);\n              value = labels;\n              break;\n              \n            case RULES_PROPERTY:\n              List<KeyValue> rulesDataList = (List<KeyValue>) value;\n              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n              rules = new HashMap<>(rulesDataList.size());\n              \n              for (KeyValue rkv : rulesDataList) {\n                String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                rulesValueMap.put(ruleName, ruleValueList);\n                rules.put(ruleName, new Rule(ruleName, ruleValueList));\n              }\n              \n              value = rulesValueMap;\n              break;\n              \n            case CHUNKS_PROPERTY:\n              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n              chunks = new ArrayList<>(chunksDataList.size());\n              \n              for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                Map<String, Object> chunk = chunkDataAsList.stream()\n                    .collect(Collectors.toMap(\n                        kv -> BuilderFactory.STRING.build(kv.getKey()),\n                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                        \n                chunksValueList.add(chunk);\n                chunks.add(chunk);\n              }\n              \n              value = chunksValueList;\n              break;\n              \n            default:\n              value = SafeEncoder.encodeObject(value);\n              break;\n          }\n        } else if (value instanceof byte[]) {\n          value = BuilderFactory.STRING.build(value);\n          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n            try {\n              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n            } catch (Exception e) { }\n          }\n        }\n        \n        properties.put(prop, value);\n      }\n\n      return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "91", "src_id": "M897", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n      args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "92", "src_id": "M1213", "code": "\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) { // remembering first suppressed exception\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    \n    throw noReachableNode;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "93", "src_id": "M9", "code": "\n  @Override\n  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n      entry = putIntoStore(cacheKey, entry);\n      \n      EvictionPolicy policy = getEvictionPolicy();\n      policy.touch(cacheKey);\n      \n      CacheKey evictedKey = policy.evictNext();\n      if (evictedKey != null) {\n        delete(evictedKey);\n        stats.evict();\n      }\n      \n      for (Object redisKey : cacheKey.getRedisKeys()) {\n        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n        if (redisKeysToCacheKeys.containsKey(mapKey)) {\n          redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n        } else {\n          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n          set.add(cacheKey);\n          redisKeysToCacheKeys.put(mapKey, set);\n        }\n      }\n      \n      stats.load();\n      return entry;\n    } finally {\n      lock.unlock();\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "94", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n      if (data == null) return null;\n      \n      String str = STRING.build(data);\n      switch (str) {\n        case \"null\":\n          return null;\n        case \"boolean\":\n          return boolean.class;\n        case \"integer\":\n          return int.class;\n        case \"number\":\n          return float.class;\n        case \"string\":\n          return String.class;\n        case \"object\":\n          return Object.class;\n        case \"array\":\n          return List.class;\n        default:\n          throw new JedisException(\"Unknown type: \" + str);\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "95", "src_id": "M270", "code": "\n\tprivate static String normalizeArch(String value) {\n\t\tvalue = normalize(value);\n\t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n\t\t\treturn \"x86_64\";\n\t\t}\n\t\tif (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n\t\t\treturn \"x86_32\";\n\t\t}\n\t\tif (value.matches(\"^(ia64w?|itanium64)$\")) {\n\t\t\treturn \"itanium_64\";\n\t\t}\n\t\tif (\"ia64n\".equals(value)) {\n\t\t\treturn \"itanium_32\";\n\t\t}\n\t\tif (value.matches(\"^(sparc|sparc32)$\")) {\n\t\t\treturn \"sparc_32\";\n\t\t}\n\t\tif (value.matches(\"^(sparcv9|sparc64)$\")) {\n\t\t\treturn \"sparc_64\";\n\t\t}\n\t\tif (value.matches(\"^(arm|arm32)$\")) {\n\t\t\treturn \"arm_32\";\n\t\t}\n\t\tif (\"aarch64\".equals(value)) {\n\t\t\treturn \"aarch_64\";\n\t\t}\n\t\tif (value.matches(\"^(mips|mips32)$\")) {\n\t\t\treturn \"mips_32\";\n\t\t}\n\t\tif (value.matches(\"^(mipsel|mips32el)$\")) {\n\t\t\treturn \"mipsel_32\";\n\t\t}\n\t\tif (\"mips64\".equals(value)) {\n\t\t\treturn \"mips_64\";\n\t\t}\n\t\tif (\"mips64el\".equals(value)) {\n\t\t\treturn \"mipsel_64\";\n\t\t}\n\t\tif (value.matches(\"^(ppc|ppc32)$\")) {\n\t\t\treturn \"ppc_32\";\n\t\t}\n\t\tif (value.matches(\"^(ppcle|ppc32le)$\")) {\n\t\t\treturn \"ppcle_32\";\n\t\t}\n\t\tif (\"ppc64\".equals(value)) {\n\t\t\treturn \"ppc_64\";\n\t\t}\n\t\tif (\"ppc64le\".equals(value)) {\n\t\t\treturn \"ppcle_64\";\n\t\t}\n\t\tif (\"s390\".equals(value)) {\n\t\t\treturn \"s390_32\";\n\t\t}\n\t\tif (\"s390x\".equals(value)) {\n\t\t\treturn \"s390_64\";\n\t\t}\n\t\treturn value;\n\t}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "96", "src_id": "M928", "code": "\n    private static Map<String, Object> doGetLoggerInfo(Logger logger) {\n        Map<String, Object> info = new HashMap<String, Object>();\n        info.put(LoggerHelper.name, logger.getName());\n        info.put(LoggerHelper.clazz, logger.getClass());\n        \n        CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n        if (codeSource != null) {\n            info.put(LoggerHelper.codeSource, codeSource.getLocation());\n        }\n        info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n        Level level = logger.getLevel();\n        Level effectiveLevel = logger.getEffectiveLevel();\n        \n        if (level != null) {\n            info.put(LoggerHelper.level, level.toString());\n        }\n        if (effectiveLevel != null) {\n            info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n        }\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n        info.put(LoggerHelper.appenders, result);\n        return info;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "97", "src_id": "M9", "code": "\n    @SuppressWarnings(\"resource\")\n    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n        Map<Long, String> processMap = listProcessByJps(v);\n        \n        // Put the port that is already listening at the first\n        if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n            String telnetPortProcess = processMap.get(telnetPortPid);\n            processMap.remove(telnetPortPid);\n            Map<Long, String> newProcessMap = new LinkedHashMap<Long, String>();\n            newProcessMap.put(telnetPortPid, telnetPortProcess);\n            newProcessMap.putAll(processMap);\n            processMap = newProcessMap;\n        }\n\n        if (processMap.isEmpty()) {\n            AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n            return -1;\n        }\n\n        // select target process by the '--select' option when match only one process\n        if (select != null && !select.trim().isEmpty()) {\n            int matchedSelectCount = 0;\n            Long matchedPid = null;\n            for (Entry<Long, String> entry : processMap.entrySet()) {\n                if (entry.getValue().contains(select)) {\n                    matchedSelectCount++;\n                    matchedPid = entry.getKey();\n                }\n            }\n            if (matchedSelectCount == 1) {\n                return matchedPid;\n            }\n        }\n\n        AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n        \n        // print list\n        int count = 1;\n        for (String process : processMap.values()) {\n            if (count == 1) {\n                System.out.println(\"* [\" + count + \"]: \" + process);\n            } else {\n                System.out.println(\"  [\" + count + \"]: \" + process);\n            }\n            count++;\n        }\n\n        // read choice\n        String line = new Scanner(System.in).nextLine();\n        if (line.trim().isEmpty()) {\n            // get the first process id\n            return processMap.keySet().iterator().next();\n        }\n\n        int choice = new Scanner(line).nextInt();\n\n        if (choice <= 0 || choice > processMap.size()) {\n            return -1;\n        }\n\n        Iterator<Long> idIter = processMap.keySet().iterator();\n        for (int i = 1; i <= choice; ++i) {\n            if (i == choice) {\n                return idIter.next();\n            }\n            idIter.next();\n        }\n\n        return -1;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "98", "src_id": "M140", "code": "\n    void _processDo(int option) throws IOException {\n        if (debugoptions) {\n            System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n        }\n\n        if (__notifhand != null) {\n            __notifhand.receivedNegotiation(\n                TelnetNotificationHandler.RECEIVED_DO,\n                option);\n        }\n\n        boolean acceptNewState = false;\n\n        /* open TelnetOptionHandler functionality (start)*/\n        if (optionHandlers[option] != null) {\n            acceptNewState = optionHandlers[option].getAcceptLocal();\n        } else {\n            /* open TelnetOptionHandler functionality (end)*/\n            /* TERMINAL-TYPE option (start)*/\n            if (option == TERMINAL_TYPE) {\n                if ((terminalType != null) && (terminalType.length() > 0)) {\n                    acceptNewState = true;\n                }\n            }\n            /* TERMINAL-TYPE option (end)*/\n            /* open TelnetOptionHandler functionality (start)*/\n        }\n        /* open TelnetOptionHandler functionality (end)*/\n\n        if (_willResponse[option] > 0) {\n            --_willResponse[option];\n            if (_willResponse[option] > 0 && _stateIsWill(option)) {\n                --_willResponse[option];\n            }\n        }\n\n        if (_willResponse[option] == 0) {\n            if (_requestedWont(option)) {\n                switch (option) {\n                    default:\n                        break;\n                }\n\n                if (acceptNewState) {\n                    _setWantWill(option);\n                    _sendWill(option);\n                } else {\n                    ++_willResponse[option];\n                    _sendWont(option);\n                }\n            } else {\n                // Other end has acknowledged option.\n                switch (option) {\n                    default:\n                        break;\n                }\n            }\n        }\n\n        _setWill(option);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "99", "src_id": "M1324", "code": "\n    private void bind(Configure configure) throws Throwable {\n        long start = System.currentTimeMillis();\n\n        if (!isBindRef.compareAndSet(false, true)) {\n            throw new IllegalStateException(\"already bind\");\n        }\n\n        // init random port\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n            int newTelnetPort = SocketUtils.findAvailableTcpPort();\n            configure.setTelnetPort(newTelnetPort);\n            logger().info(\"generate random telnet port: \" + newTelnetPort);\n        }\n        if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n            int newHttpPort = SocketUtils.findAvailableTcpPort();\n            configure.setHttpPort(newHttpPort);\n            logger().info(\"generate random http port: \" + newHttpPort);\n        }\n        \n        // try to find appName\n        if (configure.getAppName() == null) {\n            configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME,\n                    System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n        }\n\n        try {\n            if (configure.getTunnelServer() != null) {\n                tunnelClient = new TunnelClient();\n                tunnelClient.setAppName(configure.getAppName());\n                tunnelClient.setId(configure.getAgentId());\n                tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n                tunnelClient.setVersion(ArthasBanner.version());\n                ChannelFuture channelFuture = tunnelClient.start();\n                channelFuture.await(10, TimeUnit.SECONDS);\n            }\n        } catch (Throwable t) {\n            logger().error(\"start tunnel client error\", t);\n        }\n\n        try {\n            ShellServerOptions options = new ShellServerOptions()\n                    .setInstrumentation(instrumentation)\n                    .setPid(PidUtils.currentLongPid())\n                    .setWelcomeMessage(ArthasBanner.welcome());\n                    \n            if (configure.getSessionTimeout() != null) {\n                options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n            }\n\n            this.httpSessionManager = new HttpSessionManager();\n            if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n                // 当 listen 0.0.0.0 时，强制生成密码，防止被远程连接\n                String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n                        + \"No password is currently configured. \" + \"Therefore, a default password is generated, \"\n                        + \"and clients need to use the password to connect!\";\n                AnsiLog.error(errorMsg);\n                configure.setPassword(StringUtils.randomString(64));\n                AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n\n                logger().error(errorMsg);\n                logger().info(\"Generated arthas password: \" + configure.getPassword());\n            }\n\n            this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n\n            shellServer = new ShellServerImpl(options);\n\n            List<String> disabledCommands = new ArrayList<String>();\n            if (configure.getDisabledCommands() != null) {\n                String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n                if (strings != null) {\n                    disabledCommands.addAll(Arrays.asList(strings));\n                }\n            }\n            BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n            List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n            resolvers.add(builtinCommands);\n\n            //worker group\n            workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n            // TODO: discover user provided command resolver\n            if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n                logger().info(\"try to bind telnet server, host: {}, port: {}.\", configure.getIp(), configure.getTelnetPort());\n                shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n            }\n            \n            if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n                logger().info(\"try to bind http server, host: {}, port: {}.\", configure.getIp(), configure.getHttpPort());\n                shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                        options.getConnectionTimeout(), workerGroup, httpSessionManager));\n            } else {\n                // listen local address in VM communication\n                if (configure.getTunnelServer() != null) {\n                    shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                            options.getConnectionTimeout(), workerGroup, httpSessionManager));\n                }\n                logger().info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n            }\n\n            for (CommandResolver resolver : resolvers) {\n                shellServer.registerCommandResolver(resolver);\n            }\n\n            shellServer.listen(new BindHandler(isBindRef));\n            if (!isBind()) {\n                throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n                        + String.valueOf(configure.getTelnetPort()) + \", http port: \"\n                        + String.valueOf(configure.getHttpPort()));\n            }\n\n            //http api session manager\n            sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n            //http api handler\n            httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n            logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", configure.getIp(),\n                    configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n            // 异步回报启动次数\n            if (configure.getStatUrl() != null) {\n                logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n            }\n            UserStatUtil.setStatUrl(configure.getStatUrl());\n            UserStatUtil.setAgentId(configure.getAgentId());\n            UserStatUtil.arthasStart();\n\n            try {\n                SpyAPI.init();\n            } catch (Throwable e) {\n                // ignore\n            }\n\n            logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n        } catch (Throwable e) {\n            logger().error(\"Error during start as-server\", e);\n            destroy();\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "100", "src_id": "M122", "code": "\n    private int __read(boolean mayBlock) throws IOException {\n        int ch;\n\n        while (true) {\n            // If there is no more data AND we were told not to block,\n            // just return WOULD_BLOCK (-2). (More efficient than exception.)\n            if(!mayBlock && super.available() == 0) {\n                return WOULD_BLOCK;\n            }\n\n            // Otherwise, exit only when we reach end of stream.\n            if ((ch = super.read()) < 0) {\n                return EOF;\n            }\n\n            ch = (ch & 0xff);\n\n            /* Code Section added for supporting AYT (start)*/\n            synchronized (__client) {\n                __client._processAYTResponse();\n            }\n            /* Code Section added for supporting AYT (end)*/\n\n            /* Code Section added for supporting spystreams (start)*/\n            __client._spyRead(ch);\n            /* Code Section added for supporting spystreams (end)*/\n\n            switch (__receiveState) {\n                case _STATE_CR:\n                    if (ch == '\\0') {\n                        // Strip null\n                        continue;\n                    }\n                    // How do we handle newline after cr?\n                    //  else if (ch == '\\n' && _requestedDont(TelnetOption.ECHO) &&\n\n                    // Handle as normal data by falling through to _STATE_DATA case\n\n                    //$FALL-THROUGH$\n                case _STATE_DATA:\n                    if (ch == TelnetCommand.IAC) {\n                        __receiveState = _STATE_IAC;\n                        continue;\n                    }\n\n                    if (ch == '\\r') {\n                        synchronized (__client) {\n                            if (__client._requestedDont(TelnetOption.BINARY)) {\n                                __receiveState = _STATE_CR;\n                            } else {\n                                __receiveState = _STATE_DATA;\n                            }\n                        }\n                    } else {\n                        __receiveState = _STATE_DATA;\n                    }\n                    break;\n\n                case _STATE_IAC:\n                    switch (ch) {\n                        case TelnetCommand.WILL:\n                            __receiveState = _STATE_WILL;\n                            continue;\n                        case TelnetCommand.WONT:\n                            __receiveState = _STATE_WONT;\n                            continue;\n                        case TelnetCommand.DO:\n                            __receiveState = _STATE_DO;\n                            continue;\n                        case TelnetCommand.DONT:\n                            __receiveState = _STATE_DONT;\n                            continue;\n                        /* TERMINAL-TYPE option (start)*/\n                        case TelnetCommand.SB:\n                            __suboption_count = 0;\n                            __receiveState = _STATE_SB;\n                            continue;\n                        /* TERMINAL-TYPE option (end)*/\n                        case TelnetCommand.IAC:\n                            __receiveState = _STATE_DATA;\n                            break; // exit to enclosing switch to return IAC from read\n                        case TelnetCommand.SE: // unexpected byte! ignore it (don't send it as a command)\n                            __receiveState = _STATE_DATA;\n                            continue;\n                        default:\n                            __receiveState = _STATE_DATA;\n                            __client._processCommand(ch); // Notify the user\n                            continue; // move on the next char\n                    }\n                    break; // exit and return from read\n                \n                case _STATE_WILL:\n                    synchronized (__client) {\n                        __client._processWill(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                \n                case _STATE_WONT:\n                    synchronized (__client) {\n                        __client._processWont(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                \n                case _STATE_DO:\n                    synchronized (__client) {\n                        __client._processDo(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                \n                case _STATE_DONT:\n                    synchronized (__client) {\n                        __client._processDont(ch);\n                        __client._flushOutputStream();\n                    }\n                    __receiveState = _STATE_DATA;\n                    continue;\n                \n                /* TERMINAL-TYPE option (start)*/\n                case _STATE_SB:\n                    switch (ch) {\n                        case TelnetCommand.IAC:\n                            __receiveState = _STATE_IAC_SB;\n                            continue;\n                        default:\n                            // store suboption char\n                            if (__suboption_count < __suboption.length) {\n                                __suboption[__suboption_count++] = ch;\n                            }\n                            break;\n                    }\n                    __receiveState = _STATE_SB;\n                    continue;\n                \n                case _STATE_IAC_SB: // IAC received during SB phase\n                    switch (ch) {\n                        case TelnetCommand.SE:\n                            synchronized (__client) {\n                                __client._processSuboption(__suboption, __suboption_count);\n                                __client._flushOutputStream();\n                            }\n                            __receiveState = _STATE_DATA;\n                            continue;\n                        case TelnetCommand.IAC: // De-dup the duplicated IAC\n                            if (__suboption_count < __suboption.length) {\n                                __suboption[__suboption_count++] = ch;\n                            }\n                            break;\n                        default:            // unexpected byte! ignore it\n                            break;\n                    }\n                    __receiveState = _STATE_SB;\n                    continue;\n                /* TERMINAL-TYPE option (end)*/\n            }\n\n            break;\n        }\n\n        return ch;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "101", "src_id": "M8", "code": "\n    private static String formatFileSize(long size) {\n        String hrSize;\n\n        double b = size;\n        double k = size / 1024.0;\n        double m = ((size / 1024.0) / 1024.0);\n        double g = (((size / 1024.0) / 1024.0) / 1024.0);\n        double t = ((((size / 1024.0) / 1024.0) / 1024.0) / 1024.0);\n\n        DecimalFormat dec = new DecimalFormat(\"0.00\");\n\n        if (t > 1) {\n            hrSize = dec.format(t).concat(\" TB\");\n        } else if (g > 1) {\n            hrSize = dec.format(g).concat(\" GB\");\n        } else if (m > 1) {\n            hrSize = dec.format(m).concat(\" MB\");\n        } else if (k > 1) {\n            hrSize = dec.format(k).concat(\" KB\");\n        } else {\n            hrSize = dec.format(b).concat(\" Bytes\");\n        }\n\n        return hrSize;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "102", "src_id": "M790", "code": "\n        @Override\n        public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n                ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n            if (className == null) {\n                return null;\n            }\n\n            className = className.replace('/', '.');\n\n            List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n            // 倒序，因为要执行的配置生效\n            ListIterator<RetransformEntry> listIterator = allRetransformEntries\n                    .listIterator(allRetransformEntries.size());\n                    \n            while (listIterator.hasPrevious()) {\n                RetransformEntry retransformEntry = listIterator.previous();\n                int id = retransformEntry.getId();\n                // 判断类名是否一致\n                boolean updateFlag = false;\n                // 类名一致，则看是否要比较 loader，如果不需要比较 loader，则认为成功\n                if (className.equals(retransformEntry.getClassName())) {\n                    if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n                        updateFlag = isLoaderMatch(retransformEntry, loader);\n                    } else {\n                        updateFlag = true;\n                    }\n                }\n\n                if (updateFlag) {\n                    logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n                            className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n                    retransformEntry.incTransformCount();\n                    return retransformEntry.getBytes();\n                }\n            }\n\n            return null;\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "103", "src_id": "M716", "code": "\n    public static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n        // 执行失败:输出失败状态\n        table.row(\"IS-RETURN\", \"\" + false);\n        table.row(\"IS-EXCEPTION\", \"\" + true);\n\n        // 执行失败:输出失败异常信息\n        Throwable cause;\n        Throwable t = (Throwable) throwableVO.getObject();\n        \n        if (t instanceof InvocationTargetException) {\n            cause = t.getCause();\n        } else {\n            cause = t;\n        }\n\n        if (throwableVO.needExpand()) {\n            table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n        } else {\n            StringWriter stringWriter = new StringWriter();\n            PrintWriter printWriter = new PrintWriter(stringWriter);\n            try {\n                cause.printStackTrace(printWriter);\n                table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n            } finally {\n                printWriter.close();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "104", "src_id": "M602", "code": "\n    private AsyncProfiler profilerInstance() {\n        if (profiler != null) {\n            return profiler;\n        }\n\n        // try to load from special path\n        if (ProfilerAction.load.toString().equals(action)) {\n            profiler = AsyncProfiler.getInstance(this.actionArg);\n        }\n\n        if (libPath != null) {\n            // load from arthas directory\n            // 尝试把lib文件复制到临时文件里，避免多次attach时出现 Native Library already loaded in another classloader\n            FileOutputStream tmpLibOutputStream = null;\n            FileInputStream libInputStream = null;\n            \n            try {\n                File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n                tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n                libInputStream = new FileInputStream(libPath);\n\n                IOUtils.copy(libInputStream, tmpLibOutputStream);\n                libPath = tmpLibFile.getAbsolutePath();\n                logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n            } catch (Throwable e) {\n                logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n            } finally {\n                IOUtils.close(libInputStream);\n                IOUtils.close(tmpLibOutputStream);\n            }\n            \n            profiler = AsyncProfiler.getInstance(libPath);\n        } else {\n            if (OSUtils.isLinux() || OSUtils.isMac()) {\n                throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n            } else {\n                throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n            }\n        }\n\n        return profiler;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "105", "src_id": "M1277", "code": "\n  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    \n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n      String key = entry.getKey();\n      Object obj = entry.getValue();\n      \n      if (key == null || obj == null) {\n        throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n      }\n      \n      String str;\n      if (obj instanceof byte[]) {\n        str = SafeEncoder.encode((byte[]) obj);\n      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n        str = geo.getLongitude() + \",\" + geo.getLatitude();\n      } else if (obj instanceof String) {\n        str = stringEscape ? escape((String) obj) : (String) obj;\n      } else {\n        str = String.valueOf(obj);\n      }\n      \n      output.put(key, str);\n    }\n    \n    return output;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "106", "src_id": "M902", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "107", "src_id": "M1131", "code": "\n  private static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    \n    switch (b) {\n      case PLUS_BYTE:\n        return is.readLineBytes();\n      case DOLLAR_BYTE:\n      case EQUAL_BYTE:\n        return processBulkReply(is);\n      case ASTERISK_BYTE:\n        return processMultiBulkReply(is);\n      case UNDERSCORE_BYTE:\n        return is.readNullCrLf();\n      case HASH_BYTE:\n        return is.readBooleanCrLf();\n      case COLON_BYTE:\n        return is.readLongCrLf();\n      case COMMA_BYTE:\n        return is.readDoubleCrLf();\n      case LEFT_BRACE_BYTE:\n        return is.readBigIntegerCrLf();\n      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n        return processMapKeyValueReply(is);\n      case TILDE_BYTE: // TODO:\n        return processMultiBulkReply(is);\n      case GREATER_THAN_BYTE:\n        return processMultiBulkReply(is);\n      case MINUS_BYTE:\n        processError(is);\n        return null;\n      // TODO: Blob error '!'\n      default:\n        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "108", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n      List list = (List) data;\n      if (list == null || list.isEmpty()) return null;\n\n      if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n          switch (keyStr) {\n            case PROFILE_STR_REDIS7:\n            case PROFILE_STR_REDIS8:\n              profileData = keyValue.getValue();\n              break;\n            case RESULTS_STR_REDIS7:\n              resultsData = data;\n              break;\n            case RESULTS_STR_REDIS8:\n              resultsData = keyValue.getValue();\n              break;\n          }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        \n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n      }\n\n      return KeyValue.of(resultsBuilder.build(list.get(0)),\n          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "109", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "110", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n      List<KeyValue> list = (List<KeyValue>) data;\n      Map<String, Object> properties = new HashMap<>();\n      Map<String, String> labels = null;\n      Map<String, Rule> rules = null;\n      List<Map<String, Object>> chunks = null;\n\n      for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        \n        if (value instanceof List) {\n          switch (prop) {\n            case LABELS_PROPERTY:\n              labels = BuilderFactory.STRING_MAP.build(value);\n              value = labels;\n              break;\n            case RULES_PROPERTY:\n              List<KeyValue> rulesDataList = (List<KeyValue>) value;\n              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n              rules = new HashMap<>(rulesDataList.size());\n              \n              for (KeyValue rkv : rulesDataList) {\n                String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                rulesValueMap.put(ruleName, ruleValueList);\n                rules.put(ruleName, new Rule(ruleName, ruleValueList));\n              }\n              \n              value = rulesValueMap;\n              break;\n            case CHUNKS_PROPERTY:\n              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n              chunks = new ArrayList<>(chunksDataList.size());\n              \n              for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                Map<String, Object> chunk = chunkDataAsList.stream()\n                    .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                chunksValueList.add(chunk);\n                chunks.add(chunk);\n              }\n              \n              value = chunksValueList;\n              break;\n            default:\n              value = SafeEncoder.encodeObject(value);\n              break;\n          }\n        } else if (value instanceof byte[]) {\n          value = BuilderFactory.STRING.build(value);\n          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n            try {\n              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n            } catch (Exception e) { }\n          }\n        }\n        \n        properties.put(prop, value);\n      }\n\n      return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "111", "src_id": "M897", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n      args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "112", "src_id": "M1213", "code": "\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) { // remembering first suppressed exception\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    \n    throw noReachableNode;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "113", "src_id": "M9", "code": "\n  @Override\n  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n      entry = putIntoStore(cacheKey, entry);\n      EvictionPolicy policy = getEvictionPolicy();\n      policy.touch(cacheKey);\n      \n      CacheKey evictedKey = policy.evictNext();\n      if (evictedKey != null) {\n        delete(evictedKey);\n        stats.evict();\n      }\n      \n      for (Object redisKey : cacheKey.getRedisKeys()) {\n        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n        if (redisKeysToCacheKeys.containsKey(mapKey)) {\n          redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n        } else {\n          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n          set.add(cacheKey);\n          redisKeysToCacheKeys.put(mapKey, set);\n        }\n      }\n      \n      stats.load();\n      return entry;\n    } finally {\n      lock.unlock();\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "114", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n      if (data == null) return null;\n      \n      String str = STRING.build(data);\n      switch (str) {\n        case \"null\":\n          return null;\n        case \"boolean\":\n          return boolean.class;\n        case \"integer\":\n          return int.class;\n        case \"number\":\n          return float.class;\n        case \"string\":\n          return String.class;\n        case \"object\":\n          return Object.class;\n        case \"array\":\n          return List.class;\n        default:\n          throw new JedisException(\"Unknown type: \" + str);\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "115", "src_id": "M1277", "code": "\n  public static Map<String, String> toStringMap(Map<String, Object> input, boolean stringEscape) {\n    Map<String, String> output = new HashMap<>(input.size());\n    for (Map.Entry<String, Object> entry : input.entrySet()) {\n      String key = entry.getKey();\n      Object obj = entry.getValue();\n      if (key == null || obj == null) {\n        throw new NullPointerException(\"A null argument cannot be sent to Redis.\");\n      }\n      String str;\n      if (obj instanceof byte[]) {\n        str = SafeEncoder.encode((byte[]) obj);\n      } else if (obj instanceof redis.clients.jedis.GeoCoordinate) {\n        redis.clients.jedis.GeoCoordinate geo = (redis.clients.jedis.GeoCoordinate) obj;\n        str = geo.getLongitude() + \",\" + geo.getLatitude();\n      } else if (obj instanceof String) {\n        str = stringEscape ? escape((String) obj) : (String) obj;\n      } else {\n        str = String.valueOf(obj);\n      }\n      output.put(key, str);\n    }\n    return output;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "116", "src_id": "M902", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "117", "src_id": "M1131", "code": "\n  private static Object process(final RedisInputStream is) {\n    final byte b = is.readByte();\n    // System.out.println(\"BYTE: \" + (char) b);\n    switch (b) {\n      case PLUS_BYTE:\n        return is.readLineBytes();\n      case DOLLAR_BYTE:\n      case EQUAL_BYTE:\n        return processBulkReply(is);\n      case ASTERISK_BYTE:\n        return processMultiBulkReply(is);\n      case UNDERSCORE_BYTE:\n        return is.readNullCrLf();\n      case HASH_BYTE:\n        return is.readBooleanCrLf();\n      case COLON_BYTE:\n        return is.readLongCrLf();\n      case COMMA_BYTE:\n        return is.readDoubleCrLf();\n      case LEFT_BRACE_BYTE:\n        return is.readBigIntegerCrLf();\n      case PERCENT_BYTE: // TODO: currently just to start working with HELLO\n        return processMapKeyValueReply(is);\n      case TILDE_BYTE: // TODO:\n        return processMultiBulkReply(is);\n      case GREATER_THAN_BYTE:\n        return processMultiBulkReply(is);\n      case MINUS_BYTE:\n        processError(is);\n        return null;\n      // TODO: Blob error '!'\n      default:\n        throw new JedisConnectionException(\"Unknown reply: \" + (char) b);\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "118", "src_id": "M1057", "code": "\n    @Override\n    public Map.Entry<T, ProfilingInfo> build(Object data) {\n      List list = (List) data;\n      if (list == null || list.isEmpty()) return null;\n\n      if (list.get(0) instanceof KeyValue) { // RESP3\n        Object resultsData = null, profileData = null;\n\n        for (KeyValue keyValue : (List<KeyValue>) data) {\n          String keyStr = BuilderFactory.STRING.build(keyValue.getKey());\n          switch (keyStr) {\n            case PROFILE_STR_REDIS7:\n            case PROFILE_STR_REDIS8:\n              profileData = keyValue.getValue();\n              break;\n            case RESULTS_STR_REDIS7:\n              resultsData = data;\n              break;\n            case RESULTS_STR_REDIS8:\n              resultsData = keyValue.getValue();\n              break;\n          }\n        }\n\n        assert resultsData != null : \"Could not detect Results data.\";\n        assert profileData != null : \"Could not detect Profile data.\";\n        return KeyValue.of(resultsBuilder.build(resultsData),\n                ProfilingInfo.PROFILING_INFO_BUILDER.build(profileData));\n      }\n\n      return KeyValue.of(resultsBuilder.build(list.get(0)),\n          ProfilingInfo.PROFILING_INFO_BUILDER.build(list.get(1)));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "119", "src_id": "M1229", "code": "\n    public SSLContext createSslContext() throws IOException, GeneralSecurityException {\n        KeyManager[] keyManagers = null;\n        TrustManager[] trustManagers = null;\n\n        if (sslVerifyMode == SslVerifyMode.FULL) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"HTTPS\");\n        } else if (sslVerifyMode == SslVerifyMode.CA) {\n            this.sslParameters.setEndpointIdentificationAlgorithm(\"\");\n        } else if (sslVerifyMode == SslVerifyMode.INSECURE) {\n            trustManagers = new TrustManager[] { INSECURE_TRUST_MANAGER };\n        }\n\n        if (keystoreResource != null) {\n            KeyStore keyStore = KeyStore.getInstance(keyStoreType);\n            try (InputStream keystoreStream = keystoreResource.get()) {\n                keyStore.load(keystoreStream, keystorePassword);\n            }\n\n            KeyManagerFactory keyManagerFactory = KeyManagerFactory.getInstance(keyManagerAlgorithm);\n            keyManagerFactory.init(keyStore, keystorePassword);\n            keyManagers = keyManagerFactory.getKeyManagers();\n        }\n\n        if (trustManagers == null && truststoreResource != null) {\n            KeyStore trustStore = KeyStore.getInstance(trustStoreType);\n            try (InputStream truststoreStream = truststoreResource.get()) {\n                trustStore.load(truststoreStream, truststorePassword);\n            }\n\n            TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(trustManagerAlgorithm);\n            trustManagerFactory.init(trustStore);\n            trustManagers = trustManagerFactory.getTrustManagers();\n        }\n\n        SSLContext sslContext = SSLContext.getInstance(sslProtocol);\n        sslContext.init(keyManagers, trustManagers, null);\n\n        return sslContext;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "120", "src_id": "M894", "code": "\n    @Override\n    public TSInfo build(Object data) {\n      List<KeyValue> list = (List<KeyValue>) data;\n      Map<String, Object> properties = new HashMap<>();\n      Map<String, String> labels = null;\n      Map<String, Rule> rules = null;\n      List<Map<String, Object>> chunks = null;\n\n      for (KeyValue propertyValue : list) {\n        String prop = BuilderFactory.STRING.build(propertyValue.getKey());\n        Object value = propertyValue.getValue();\n        if (value instanceof List) {\n          switch (prop) {\n            case LABELS_PROPERTY:\n              labels = BuilderFactory.STRING_MAP.build(value);\n              value = labels;\n              break;\n            case RULES_PROPERTY:\n              List<KeyValue> rulesDataList = (List<KeyValue>) value;\n              Map<String, List<Object>> rulesValueMap = new HashMap<>(rulesDataList.size(), 1f);\n              rules = new HashMap<>(rulesDataList.size());\n              for (KeyValue rkv : rulesDataList) {\n                String ruleName = BuilderFactory.STRING.build(rkv.getKey());\n                List<Object> ruleValueList = BuilderFactory.ENCODED_OBJECT_LIST.build(rkv.getValue());\n                rulesValueMap.put(ruleName, ruleValueList);\n                rules.put(ruleName, new Rule(ruleName, ruleValueList));\n              }\n              value = rulesValueMap;\n              break;\n            case CHUNKS_PROPERTY:\n              List<List<KeyValue>> chunksDataList = (List<List<KeyValue>>) value;\n              List<Map<String, Object>> chunksValueList = new ArrayList<>(chunksDataList.size());\n              chunks = new ArrayList<>(chunksDataList.size());\n              for (List<KeyValue> chunkDataAsList : chunksDataList) {\n                Map<String, Object> chunk = chunkDataAsList.stream()\n                    .collect(Collectors.toMap(kv -> BuilderFactory.STRING.build(kv.getKey()),\n                        kv -> BuilderFactory.ENCODED_OBJECT.build(kv.getValue())));\n                chunksValueList.add(chunk);\n                chunks.add(chunk);\n              }\n              value = chunksValueList;\n              break;\n            default:\n              value = SafeEncoder.encodeObject(value);\n              break;\n          }\n        } else if (value instanceof byte[]) {\n          value = BuilderFactory.STRING.build(value);\n          if (DUPLICATE_POLICY_PROPERTY.equals(prop)) {\n            try {\n              value = DuplicatePolicy.valueOf(((String) value).toUpperCase());\n            } catch (Exception e) { }\n          }\n        }\n        properties.put(prop, value);\n      }\n\n      return new TSInfo(properties, labels, rules, chunks);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "121", "src_id": "M897", "code": "\n  @Override\n  public void addParams(CommandArguments args) {\n    if (retentionPeriod != null) {\n      args.add(RETENTION).add(toByteArray(retentionPeriod));\n    }\n\n    if (encoding != null) {\n      args.add(ENCODING).add(encoding);\n    }\n\n    if (chunkSize != null) {\n      args.add(CHUNK_SIZE).add(toByteArray(chunkSize));\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (duplicatePolicy != null) {\n      args.add(DUPLICATE_POLICY).add(duplicatePolicy);\n    }\n\n    if (onDuplicate != null) {\n      args.add(ON_DUPLICATE).add(onDuplicate);\n    }\n\n    if (ignore) {\n      args.add(IGNORE).add(ignoreMaxTimediff).add(ignoreMaxValDiff);\n    }\n\n    if (labels != null) {\n      args.add(LABELS);\n      labels.entrySet().forEach((entry) -> args.add(entry.getKey()).add(entry.getValue()));\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "122", "src_id": "M1213", "code": "\n  @Override\n  public Connection getConnection() {\n    List<ConnectionPool> pools = getShuffledNodesPool();\n\n    JedisException suppressed = null;\n    for (ConnectionPool pool : pools) {\n      Connection jedis = null;\n      try {\n        jedis = pool.getResource();\n        if (jedis == null) {\n          continue;\n        }\n\n        jedis.ping();\n        return jedis;\n\n      } catch (JedisException ex) {\n        if (suppressed == null) { // remembering first suppressed exception\n          suppressed = ex;\n        }\n        if (jedis != null) {\n          jedis.close();\n        }\n      }\n    }\n\n    JedisException noReachableNode = new JedisException(\"No reachable shard.\");\n    if (suppressed != null) {\n      noReachableNode.addSuppressed(suppressed);\n    }\n    throw noReachableNode;\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "123", "src_id": "M9", "code": "\n  @Override\n  public CacheEntry set(CacheKey cacheKey, CacheEntry entry) {\n    lock.lock();\n    try {\n      entry = putIntoStore(cacheKey, entry);\n      EvictionPolicy policy = getEvictionPolicy();\n      policy.touch(cacheKey);\n      CacheKey evictedKey = policy.evictNext();\n      if (evictedKey != null) {\n        delete(evictedKey);\n        stats.evict();\n      }\n      for (Object redisKey : cacheKey.getRedisKeys()) {\n        ByteBuffer mapKey = makeKeyForRedisKeysToCacheKeys(redisKey);\n        if (redisKeysToCacheKeys.containsKey(mapKey)) {\n          redisKeysToCacheKeys.get(mapKey).add(cacheKey);\n        } else {\n          Set<CacheKey<?>> set = ConcurrentHashMap.newKeySet();\n          set.add(cacheKey);\n          redisKeysToCacheKeys.put(mapKey, set);\n        }\n      }\n      stats.load();\n      return entry;\n    } finally {\n      lock.unlock();\n    }\n  }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "124", "src_id": "M1105", "code": "\n    @Override\n    public Class<?> build(Object data) {\n      if (data == null) return null;\n      String str = STRING.build(data);\n      switch (str) {\n        case \"null\":\n          return null;\n        case \"boolean\":\n          return boolean.class;\n        case \"integer\":\n          return int.class;\n        case \"number\":\n          return float.class;\n        case \"string\":\n          return String.class;\n        case \"object\":\n          return Object.class;\n        case \"array\":\n          return List.class;\n        default:\n          throw new JedisException(\"Unknown type: \" + str);\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "125", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(\n                    textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                    .append(escapeHtml(bcc))\n                    .append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\n                    \"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\n                    \"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\n                \"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "126", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if (multipart == null) return false;\n\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "127", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    // Apply MIME header decoding\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) break;\n            }\n        } catch (RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "128", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\n                \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                markerPositions.size(),\n                attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                    document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "129", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n        String requestBody = String.format(\n                \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                licenseKey, machineFingerprint);\n        \n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n                .header(\"Content-Type\", \"application/vnd.api+json\")\n                .header(\"Accept\", \"application/vnd.api+json\")\n                // .header(\"Authorization\", \"License \" + licenseKey)\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        \n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        \n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n\n                log.info(\"License floating (from license): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n\n                log.info(\"License floating (from policy): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n            int users = jsonResponse\n                    .path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"users\")\n                    .asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense = jsonResponse\n                    .path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"isEnterprise\")\n                    .asBoolean(false);\n\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        \n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "130", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description =\n                    \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\"\n                            + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)\n            throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        \n        try {\n            file = convertToPdf(inputFile);\n\n            PDDocument doc = pdfDocumentFactory.load(file);\n            \n            return WebResponseUtils.pdfDocToWebResponse(\n                    doc,\n                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                            .replaceFirst(\"[.][^.]+$\", \"\")\n                            + \"_convertedToPDF.pdf\");\n        } finally {\n            if (file != null) {\n                file.delete();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "131", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n        MultipartFile inputFile = request.getFileInput();\n        boolean readonly = true;\n        \n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            // Metadata using PDFBox\n            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            ObjectNode metadata = objectMapper.createObjectNode();\n            ObjectNode basicInfo = objectMapper.createObjectNode();\n            ObjectNode docInfoNode = objectMapper.createObjectNode();\n            ObjectNode compliancy = objectMapper.createObjectNode();\n            ObjectNode encryption = objectMapper.createObjectNode();\n            ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            // Total file size of the PDF\n            long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            // Number of words, paragraphs, and images in the entire document\n            String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            String[] words = fullText.split(\"\\\\s+\");\n            int wordCount = words.length;\n            int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            // Number of characters in the entire document (including spaces and special characters)\n            int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            // Initialize the flags and types\n            boolean hasCompression = false;\n            String compressionType = \"None\";\n\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) basicInfo.put(\"CompressionType\", compressionType);\n\n            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            String pageMode = catalog.getPageMode().name();\n\n            // Document Information using PDFBox\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n\n            ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            // Generate structured summary data about PDF characteristics\n            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            // embeed files TODO size\n            if (catalog.getNames() != null) {\n                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n\n                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength()); // size in bytes\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            // attachments TODO size\n            ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            // Javascript\n            PDDocumentNameDictionary namesDict = catalog.getNames();\n            ArrayNode javascriptArray = objectMapper.createArrayNode();\n\n            if (namesDict != null) {\n                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n\n                            PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            // TODO size\n            PDOptionalContentProperties ocProperties = pdfBoxDoc.getDocumentCatalog().getOCProperties();\n            ArrayNode layersArray = objectMapper.createArrayNode();\n\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            other.set(\"Layers\", layersArray);\n\n            // TODO Security\n\n            PDStructureTreeRoot structureTreeRoot = pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                log.error(\"exception\", e);\n            }\n\n            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            boolean isPdfBCompliant = checkForStandard(pdfBoxDoc, \"PDF/B\"); // If you want to check for PDF/Broadcast, though this isn't an official ISO standard.\n            boolean isPdfSECCompliant = checkForStandard(pdfBoxDoc, \"PDF/SEC\"); // This might not be effective since PDF/SEC was under development in 2021.\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();\n            ArrayNode bookmarksArray = objectMapper.createArrayNode();\n\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();\n            String xmpString = null;\n\n            if (pdMetadata != null) {\n                try {\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        DomXmpParser domXmpParser = new DomXmpParser();\n                        XMPMetadata xmpMeta = domXmpParser.parse(is);\n\n                        ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    }\n                } catch (XmpParsingException e) {\n                    // XMP parsing failed, try to read raw metadata instead\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n\n                // Retrieve encryption details using getEncryption()\n                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n                // Add other encryption-related properties as needed\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                ObjectNode pageInfo = objectMapper.createObjectNode();\n\n                // Retrieve the page\n                PDPage page = pdfBoxDoc.getPage(pageNum);\n\n                // Page-level Information\n                PDRectangle mediaBox = page.getMediaBox();\n\n                float width = mediaBox.getWidth();\n                float height = mediaBox.getHeight();\n\n                ObjectNode sizeInfo = objectMapper.createObjectNode();\n                getDimensionInfo(sizeInfo, width, height);\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                // Boxes\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n\n                // Assuming the following boxes are defined for your document; if not, you may get null values.\n                PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n\n                PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n\n                PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n\n                PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                // Content Extraction\n                PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                String pageText = textStripper.getText(pdfBoxDoc);\n\n                pageInfo.put(\"Text Characters Count\", pageText.length());\n\n                // Annotations\n                List<PDAnnotation> annotations = page.getAnnotations();\n                int subtypeCount = 0;\n                int contentsCount = 0;\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) {\n                        subtypeCount++; // Increase subtype count\n                    }\n                    if (annotation.getContents() != null) {\n                        contentsCount++; // Increase contents count\n                    }\n                }\n\n                ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                // Images (simplified)\n                // This part is non-trivial as images can be embedded in multiple ways in a PDF.\n                // Here is a basic structure to recognize image XObjects on a page.\n                ArrayNode imagesArray = objectMapper.createArrayNode();\n                PDResources resources = page.getResources();\n\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                // Links\n                ArrayNode linksArray = objectMapper.createArrayNode();\n                Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            String uri = uriAction.getURI();\n                            uniqueURIs.add(uri); // Add to set to ensure uniqueness\n                        }\n                    }\n                }\n\n                // Add unique URIs to linksArray\n                for (String uri : uniqueURIs) {\n                    ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                // Fonts\n                ArrayNode fontsArray = objectMapper.createArrayNode();\n                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n\n                for (COSName fontName : resources.getFontNames()) {\n                    PDFont font = resources.getFont(fontName);\n                    ObjectNode fontNode = objectMapper.createObjectNode();\n\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n                    fontNode.put(\"Name\", font.getName());\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    // Create a unique key for this font node based on its attributes\n                    String uniqueKey = fontNode.toString();\n\n                    // Increment count if this font exists, or initialize it if new\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n\n                // Add unique font entries to fontsArray\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                // Access resources dictionary\n                ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n\n                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        PDStream iccData = iccBased.getPDStream();\n                        byte[] iccBytes = iccData.toByteArray();\n\n                        // TODO: Further decode and analyze the ICC data if needed\n                        ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                // Other XObjects\n                Map<String, Integer> xObjectCountMap = new HashMap<>(); // To store the count for each type\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    String xObjectType;\n\n                    if (xObject instanceof PDImageXObject) {\n                        xObjectType = \"Image\";\n                    } else if (xObject instanceof PDFormXObject) {\n                        xObjectType = \"Form\";\n                    } else {\n                        xObjectType = \"Other\";\n                    }\n\n                    // Increment the count for this type in the map\n                    xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n\n                // Add the count map to pageInfo (or wherever you want to store it)\n                ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                ArrayNode multimediaArray = objectMapper.createArrayNode();\n\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        // Extract details from the annotation as needed\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode);\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            // Save JSON to file\n            String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n\n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "132", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n            boolean isValid = processCertificateData(decodedData, context);\n\n            return isValid;\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "133", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)\n            throws IOException {\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n            try (ZipInputStream zipIn =\n                    ZipSecurity.createHardenedInputStream(\n                            new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n                ZipEntry entry = zipIn.getNextEntry();\n                \n                while (entry != null) {\n                    Path filePath =\n                            tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                    \n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        \n                        if (entry.getName().toLowerCase().endsWith(\".html\")\n                                || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            String content =\n                                    new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                            Files.write(\n                                    filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    \n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } // tempUnzippedDir auto-cleaned\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "134", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)\n            throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n\n        try (PDPageContentStream contentStream =\n                new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                float pageAspectRatio = pageWidth / pageHeight;\n\n                float scaleFactor = 1.0f;\n                if (imageAspectRatio > pageAspectRatio) {\n                    scaleFactor = pageWidth / image.getWidth();\n                } else {\n                    scaleFactor = pageHeight / image.getHeight();\n                }\n\n                float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                contentStream.drawImage(\n                        image,\n                        xPos,\n                        yPos,\n                        image.getWidth() * scaleFactor,\n                        image.getHeight() * scaleFactor);\n            }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "135", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            // Get the MAC address\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (int i = 0; i < mac.length; i++) {\n                            sb.append(String.format(\"%02X\", mac[i]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (int i = 0; i < mac.length; i++) {\n                        sb.append(String.format(\"%02X\", mac[i]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            \n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            \n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "136", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties\n                .getPremium()\n                .getProFeatures()\n                .getCustomMetadata()\n                .isAutoUpdateMetadata()\n                && runningProOrHigher) {\n            \n            author = applicationProperties\n                    .getPremium()\n                    .getProFeatures()\n                    .getCustomMetadata()\n                    .getAuthor();\n\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        \n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "137", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                return \"Docker\";\n            } else if (isBrowserOpen) {\n                String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                if (os.contains(\"win\")) {\n                    return \"Client-windows\";\n                } else if (os.contains(\"mac\")) {\n                    return \"Client-mac\";\n                } else {\n                    return \"Client-unix\";\n                }\n            } else {\n                return \"Server-jar\";\n            }\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "138", "src_id": "M101", "code": "\n    private void processRequest(\n            int limitPerDay,\n            String identifier,\n            Map<String, Bucket> buckets,\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain)\n            throws IOException, ServletException {\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        \n        if (probe.isConsumed()) {\n            response.setHeader(\n                    \"X-Rate-Limit-Remaining\",\n                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            filterChain.doFilter(request, response);\n        } else {\n            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            \n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\n                    \"X-Rate-Limit-Retry-After-Seconds\",\n                    Newlines.stripAll(String.valueOf(waitForRefill)));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "139", "src_id": "M475", "code": "\n    @Override\n    public void draw(CommandProcess process, JvmModel result) {\n        TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n\n        for (Map.Entry<String, List<JvmItemVO>> entry : result.getJvmInfo().entrySet()) {\n            String group = entry.getKey();\n            List<JvmItemVO> items = entry.getValue();\n\n            table.row(true, label(group).style(Decoration.bold.bold()));\n            \n            for (JvmItemVO item : items) {\n                String valueStr;\n                if (item.getValue() instanceof Map && item.getName().endsWith(\"MEMORY-USAGE\")) {\n                    valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n                } else {\n                    valueStr = renderItemValue(item.getValue());\n                }\n                \n                if (item.getDesc() != null) {\n                    table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n                } else {\n                    table.row(item.getName(), valueStr);\n                }\n            }\n            \n            table.row(\"\", \"\");\n        }\n\n        process.write(RenderUtil.render(table, process.width()));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "140", "src_id": "M535", "code": "\n    public static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n        final StringBuilder infoSB = new StringBuilder();\n        \n        List<String> classDumpFiles = affectVO.getClassDumpFiles();\n        if (classDumpFiles != null) {\n            for (String classDumpFile : classDumpFiles) {\n                infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n            }\n        }\n\n        List<String> methods = affectVO.getMethods();\n        if (methods != null) {\n            for (String method : methods) {\n                infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n            }\n        }\n\n        infoSB.append(format(\"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\",\n                affectVO.getClassCount(),\n                affectVO.getMethodCount(),\n                affectVO.getCost(),\n                affectVO.getListenerId()));\n                \n        if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n            infoSB.append(\"\\n\" + affectVO.getOverLimitMsg());\n        }\n        \n        if (affectVO.getThrowable() != null) {\n            infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n        }\n        \n        infoSB.append(\"\\n\");\n\n        return infoSB.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "141", "src_id": "M753", "code": "\n    public List<ThreadVO> sample(Collection<ThreadVO> originThreads) {\n        List<ThreadVO> threads = new ArrayList<ThreadVO>(originThreads);\n\n        // Sample CPU\n        if (lastCpuTimes.isEmpty()) {\n            lastSampleTimeNanos = System.nanoTime();\n            \n            for (ThreadVO thread : threads) {\n                if (thread.getId() > 0) {\n                    long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                    lastCpuTimes.put(thread, cpu);\n                    thread.setTime(cpu / 1000000);\n                }\n            }\n\n            // add internal threads\n            Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n            if (internalThreadCpuTimes != null) {\n                for (Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n                    String key = entry.getKey();\n                    ThreadVO thread = createThreadVO(key);\n                    thread.setTime(entry.getValue() / 1000000);\n                    threads.add(thread);\n                    lastCpuTimes.put(thread, entry.getValue());\n                }\n            }\n\n            // sort by time\n            Collections.sort(threads, new Comparator<ThreadVO>() {\n                @Override\n                public int compare(ThreadVO o1, ThreadVO o2) {\n                    long l1 = o1.getTime();\n                    long l2 = o2.getTime();\n                    if (l1 < l2) {\n                        return 1;\n                    } else if (l1 > l2) {\n                        return -1;\n                    } else {\n                        return 0;\n                    }\n                }\n            });\n            \n            return threads;\n        }\n\n        // Resample\n        long newSampleTimeNanos = System.nanoTime();\n        Map<ThreadVO, Long> newCpuTimes = new HashMap<ThreadVO, Long>(threads.size());\n        \n        for (ThreadVO thread : threads) {\n            if (thread.getId() > 0) {\n                long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n                newCpuTimes.put(thread, cpu);\n            }\n        }\n        \n        // internal threads\n        Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n        if (newInternalThreadCpuTimes != null) {\n            for (Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n                ThreadVO threadVO = createThreadVO(entry.getKey());\n                threads.add(threadVO);\n                newCpuTimes.put(threadVO, entry.getValue());\n            }\n        }\n\n        // Compute delta time\n        final Map<ThreadVO, Long> deltas = new HashMap<ThreadVO, Long>(threads.size());\n        for (ThreadVO thread : newCpuTimes.keySet()) {\n            Long t = lastCpuTimes.get(thread);\n            if (t == null) {\n                t = 0L;\n            }\n            \n            long time1 = t;\n            long time2 = newCpuTimes.get(thread);\n            \n            if (time1 == -1) {\n                time1 = time2;\n            } else if (time2 == -1) {\n                time2 = time1;\n            }\n            \n            long delta = time2 - time1;\n            deltas.put(thread, delta);\n        }\n\n        long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n\n        // Compute cpu usage\n        final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());\n        for (ThreadVO thread : threads) {\n            double cpu = sampleIntervalNanos == 0 ? 0 : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);\n            cpuUsages.put(thread, cpu);\n        }\n\n        // Sort by CPU time : should be a rendering hint...\n        Collections.sort(threads, new Comparator<ThreadVO>() {\n            @Override\n            public int compare(ThreadVO o1, ThreadVO o2) {\n                long l1 = deltas.get(o1);\n                long l2 = deltas.get(o2);\n                if (l1 < l2) {\n                    return 1;\n                } else if (l1 > l2) {\n                    return -1;\n                } else {\n                    return 0;\n                }\n            }\n        });\n\n        for (ThreadVO thread : threads) {\n            // nanos to mills\n            long timeMills = newCpuTimes.get(thread) / 1000000;\n            long deltaTime = deltas.get(thread) / 1000000;\n            double cpu = cpuUsages.get(thread);\n\n            thread.setCpu(cpu);\n            thread.setTime(timeMills);\n            thread.setDeltaTime(deltaTime);\n        }\n        \n        lastCpuTimes = newCpuTimes;\n        lastSampleTimeNanos = newSampleTimeNanos;\n\n        return threads;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "142", "src_id": "M1131", "code": "\n    private ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n        String commandLine = apiRequest.getCommand();\n        Map<String, Object> body = new TreeMap<String, Object>();\n        body.put(\"command\", commandLine);\n\n        ApiResponse response = new ApiResponse();\n        response.setSessionId(session.getSessionId())\n                .setBody(body);\n\n        if (!session.tryLock()) {\n            response.setState(ApiState.REFUSED)\n                    .setMessage(\"Another command is executing.\");\n            return response;\n        }\n        \n        int lock = session.getLock();\n        try {\n            Job foregroundJob = session.getForegroundJob();\n            if (foregroundJob != null) {\n                response.setState(ApiState.REFUSED)\n                        .setMessage(\"Another job is running.\");\n                logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n                return response;\n            }\n\n            // create job\n            Job job = this.createJob(commandLine, session, session.getResultDistributor());\n            body.put(\"jobId\", job.id());\n            body.put(\"jobStatus\", job.status());\n            response.setState(ApiState.SCHEDULED);\n\n            // add command before exec job\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n            commandRequestModel.setJobId(job.id());\n            SharingResultDistributor resultDistributor = session.getResultDistributor();\n            if (resultDistributor != null) {\n                resultDistributor.appendResult(commandRequestModel);\n            }\n            \n            session.setForegroundJob(job);\n            updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n\n            // run job\n            job.run();\n\n            return response;\n        } catch (Throwable e) {\n            logger.error(\"Async exec command failed:\" + e.getMessage() + \", command:\" + commandLine, e);\n            response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n            session.getResultDistributor().appendResult(commandRequestModel);\n            return response;\n        } finally {\n            if (session.getLock() == lock) {\n                session.unLock();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "143", "src_id": "M542", "code": "\n    private String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n        StringBuilder sb = new StringBuilder(8192);\n\n        for (Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n            Map<String, Object> info = entry.getValue();\n\n            TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n            TableElement appendersTable = new TableElement().rightCellPadding(1);\n\n            Class<?> clazz = (Class<?>) info.get(LoggerHelper.clazz);\n            \n            table.row(label(LoggerHelper.name).style(Decoration.bold.bold()), \n                    label(\"\" + info.get(LoggerHelper.name)))\n                .row(label(LoggerHelper.clazz).style(Decoration.bold.bold()), \n                    label(\"\" + clazz.getName()))\n                .row(label(LoggerHelper.classLoader).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.classLoader)))\n                .row(label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.classLoaderHash)))\n                .row(label(LoggerHelper.level).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.level)));\n                    \n            if (info.get(LoggerHelper.effectiveLevel) != null) {\n                table.row(label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n            }\n\n            if (info.get(LoggerHelper.config) != null) {\n                table.row(label(LoggerHelper.config).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.config)));\n            }\n\n            table.row(label(LoggerHelper.additivity).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.additivity)))\n                .row(label(LoggerHelper.codeSource).style(Decoration.bold.bold()),\n                    label(\"\" + info.get(LoggerHelper.codeSource)));\n\n            @SuppressWarnings(\"unchecked\")\n            List<Map<String, Object>> appenders = (List<Map<String, Object>>) info.get(LoggerHelper.appenders);\n            if (appenders != null && !appenders.isEmpty()) {\n                for (Map<String, Object> appenderInfo : appenders) {\n                    Class<?> appenderClass = (Class<?>) appenderInfo.get(LoggerHelper.clazz);\n\n                    appendersTable.row(label(LoggerHelper.name).style(Decoration.bold.bold()),\n                            label(\"\" + appenderInfo.get(LoggerHelper.name)));\n                    appendersTable.row(label(LoggerHelper.clazz), \n                            label(\"\" + appenderClass.getName()));\n                    appendersTable.row(label(LoggerHelper.classLoader), \n                            label(\"\" + info.get(LoggerHelper.classLoader)));\n                    appendersTable.row(label(LoggerHelper.classLoaderHash),\n                            label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n                            \n                    if (appenderInfo.get(LoggerHelper.file) != null) {\n                        appendersTable.row(label(LoggerHelper.file), \n                                label(\"\" + appenderInfo.get(LoggerHelper.file)));\n                    }\n                    if (appenderInfo.get(LoggerHelper.target) != null) {\n                        appendersTable.row(label(LoggerHelper.target),\n                                label(\"\" + appenderInfo.get(LoggerHelper.target)));\n                    }\n                    if (appenderInfo.get(LoggerHelper.blocking) != null) {\n                        appendersTable.row(label(LoggerHelper.blocking),\n                                label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n                    }\n                    if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n                        appendersTable.row(label(LoggerHelper.appenderRef),\n                                label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n                    }\n                }\n\n                table.row(label(\"appenders\").style(Decoration.bold.bold()), appendersTable);\n            }\n\n            sb.append(RenderUtil.render(table, width)).append('\\n');\n        }\n        \n        return sb.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "144", "src_id": "M15", "code": "\n    public static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {\n        // start java telnet client\n        // find arthas-client.jar\n        URLClassLoader classLoader = new URLClassLoader(\n                new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n        Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n        Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n        // redirect System.out/System.err\n        PrintStream originSysOut = System.out;\n        PrintStream originSysErr = System.err;\n        PrintStream newOut = new PrintStream(out);\n        PrintStream newErr = new PrintStream(out);\n\n        // call TelnetConsole.process()\n        // fix https://github.com/alibaba/arthas/issues/833\n        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n        try {\n            System.setOut(newOut);\n            System.setErr(newErr);\n            Thread.currentThread().setContextClassLoader(classLoader);\n            return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});\n        } catch (Throwable e) {\n            // java.lang.reflect.InvocationTargetException : java.net.ConnectException\n            e = e.getCause();\n            if (e instanceof IOException || e instanceof InterruptedException) {\n                // ignore connection error and interrupted error\n                return STATUS_ERROR;\n            } else {\n                // process error\n                AnsiLog.error(\"process error: {}\", e.toString());\n                AnsiLog.error(e);\n                return STATUS_EXEC_ERROR;\n            }\n        } finally {\n            Thread.currentThread().setContextClassLoader(tccl);\n\n            // reset System.out/System.err\n            System.setOut(originSysOut);\n            System.setErr(originSysErr);\n            // flush output\n            newOut.flush();\n            newErr.flush();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "145", "src_id": "M1469", "code": "\n    public static FieldVO[] getFields(Class clazz, Integer expand) {\n        Field[] fields = clazz.getDeclaredFields();\n        if (fields.length == 0) {\n            return new FieldVO[0];\n        }\n\n        List<FieldVO> list = new ArrayList<FieldVO>(fields.length);\n        \n        for (Field field : fields) {\n            FieldVO fieldVO = new FieldVO();\n            fieldVO.setName(field.getName());\n            fieldVO.setType(StringUtils.classname(field.getType()));\n            fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n            fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n            \n            if (Modifier.isStatic(field.getModifiers())) {\n                fieldVO.setStatic(true);\n                fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n            } else {\n                fieldVO.setStatic(false);\n            }\n            \n            list.add(fieldVO);\n        }\n        \n        return list.toArray(new FieldVO[0]);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "146", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(final byte[] emlBytes, final EmlToPdfRequest request) {\n        if (emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        final String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        final String subject = extractBasicHeader(emlContent, \"Subject:\");\n        final String from = extractBasicHeader(emlContent, \"From:\");\n        final String to = extractBasicHeader(emlContent, \"To:\");\n        final String cc = extractBasicHeader(emlContent, \"Cc:\");\n        final String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        final String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n        if (htmlBody == null) {\n            final String textBody = extractTextBody(emlContent);\n            htmlBody = convertTextToHtml(\n                    textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n        final StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if (request != null && request.isIncludeAllRecipients()) {\n            if (!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if (!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                        .append(escapeHtml(bcc))\n                        .append(\"</div>\\n\");\n            }\n        }\n\n        if (!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        final String attachmentInfo = extractAttachmentInfo(emlContent);\n        if (!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n            if (request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\n                        \"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\n                        \"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if (request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\n                    \"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "147", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(final Object multipart) {\n        if (multipart == null) {\n            return false;\n        }\n\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            final Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if (!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n            try {\n                final Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if (mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch (final ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch (final ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "148", "src_id": "M348", "code": "\n    private static String extractBasicHeader(final String emlContent, final String headerName) {\n        if (emlContent == null || headerName == null) {\n            return \"\";\n        }\n\n        try {\n            final String[] lines = emlContent.split(\"\\r?\\n\");\n            for (int i = 0; i < lines.length; i++) {\n                final String line = lines[i];\n                if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    final StringBuilder value =\n                            new StringBuilder(line.substring(headerName.length()).trim());\n                    // Handle multi-line headers\n                    for (int j = i + 1; j < lines.length; j++) {\n                        if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    // Apply MIME header decoding\n                    return safeMimeDecode(value.toString());\n                }\n                if (line.trim().isEmpty()) {\n                    break;\n                }\n            }\n        } catch (final RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "149", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            final PDDocument document, final List<EmailAttachment> attachments) throws IOException {\n        if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n        final AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        final List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n        if (markerPositions.size() != attachments.size()) {\n            log.warn(\n                    \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                    markerPositions.size(),\n                    attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n        final int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for (int i = 0; i < annotationsToAdd; i++) {\n            final MarkerPosition position = markerPositions.get(i);\n            final EmailAttachment attachment = attachments.get(i);\n\n            if (attachment.getEmbeddedFilename() != null) {\n                final PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                        document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "150", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n    @ResizeMode\n    public static int nextResizeModeAndSaveToPrefs(final Player player,\n                                                   @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        \n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n        player.getPrefs().edit().putInt(\n                player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n        \n        return newResizeMode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "151", "src_id": "M424", "code": "\n    @Override\n    public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n        \n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } \n        else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n            if (!fragmentIsVisible) {\n                onFragmentStopped();\n            }\n        } \n        else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n            fragmentIsVisible = false;\n            onFragmentStopped();\n        } \n        else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n            fragmentIsVisible = true;\n            player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n            if (!isControlsVisible()) {\n                hideSystemUIIfNeeded();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "152", "src_id": "M900", "code": "\n    @StyleRes\n    public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n        final String selectedTheme = getSelectedThemeKey(context);\n\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } \n        else if (selectedTheme.equals(blackTheme)) {\n            return R.style.BlackSettingsTheme;\n        } \n        else if (selectedTheme.equals(automaticDeviceTheme)) {\n            if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                final String selectedNightTheme = getSelectedNightThemeKey(context);\n                if (selectedNightTheme.equals(blackTheme)) {\n                    return R.style.BlackSettingsTheme;\n                } else {\n                    return R.style.DarkSettingsTheme;\n                }\n            } else {\n                // there is only one day theme\n                return R.style.LightSettingsTheme;\n            }\n        } \n        else {\n            // default to dark theme\n            return R.style.DarkSettingsTheme;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "153", "src_id": "M895", "code": "\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } \n                        else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "154", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n                pause();\n                break;\n            case ACTION_CLOSE:\n                service.destroyPlayerAndStopService();\n                break;\n            case ACTION_PLAY_PAUSE:\n                playPause();\n                break;\n            case ACTION_PLAY_PREVIOUS:\n                playPrevious();\n                break;\n            case ACTION_PLAY_NEXT:\n                playNext();\n                break;\n            case ACTION_FAST_REWIND:\n                fastRewind();\n                break;\n            case ACTION_FAST_FORWARD:\n                fastForward();\n                break;\n            case ACTION_REPEAT:\n                cycleNextRepeatMode();\n                break;\n            case ACTION_SHUFFLE:\n                toggleShuffleModeEnabled();\n                break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                }\n                break;\n        }\n\n        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "155", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n\n        if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            // Starting ReCaptcha Challenge Activity\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } \n        else if (errorInfo.getThrowable() != null\n                && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n            Toast.makeText(context, R.string.restricted_video_no_stream,\n                    Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof PaidContentException) {\n            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n            Toast.makeText(context, R.string.soundcloud_go_plus_content,\n                    Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n            Toast.makeText(context, R.string.youtube_music_premium_content,\n                    Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n        } \n        else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n        } \n        else {\n            ErrorUtil.createNotification(context, errorInfo);\n        }\n\n        if (context instanceof RouterActivity) {\n            ((RouterActivity) context).finish();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "156", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context,\n                                               @NonNull final FragmentManager fragmentManager,\n                                               final int serviceId,\n                                               @Nullable final String url,\n                                               @NonNull final String title,\n                                               @Nullable final PlayQueue playQueue,\n                                               final boolean switchingPlayers) {\n\n        final boolean autoPlay;\n        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n        \n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } \n        else if (switchingPlayers) {\n            // switching player to main player\n            autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n        } \n        else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } \n        else {\n            // opening new stream while already playing in another player\n            autoPlay = false;\n        }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n            expandMainPlayer(detailFragment.requireActivity());\n            detailFragment.setAutoPlay(autoPlay);\n            if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                        || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n            } else {\n                detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n            }\n            detailFragment.scrollToTop();\n        };\n\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n        } \n        else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment\n                    .getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n\n            defaultTransaction(fragmentManager)\n                    .replace(R.id.fragment_player_holder, instance)\n                    .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                    .commit();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "157", "src_id": "M698", "code": "\n    @Override\n    public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                    .into(binding.channelBannerImage);\n        } \n        else {\n            // do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n\n        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.subChannelAvatarView);\n\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        \n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(Localization\n                    .shortSubscriberCount(activity, result.getSubscriberCount()));\n        } \n        else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(String.format(\n                    getString(R.string.channel_created_by),\n                    currentInfo.getParentChannelName())\n            );\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        disposables.clear();\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "158", "src_id": "M379", "code": "\n    @Override\n    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n                || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n                || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n        final List<Tracks.Group> textTracks = currentTracks\n                .getGroups()\n                .stream()\n                .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n                .collect(Collectors.toList());\n        final List<String> availableLanguages = textTracks.stream()\n                .map(Tracks.Group::getMediaTrackGroup)\n                .filter(textTrack -> textTrack.length > 0)\n                .map(textTrack -> textTrack.getFormat(0).language)\n                .collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional<Format> selectedTracks = textTracks.stream()\n                .filter(Tracks.Group::isSelected)\n                .filter(info -> info.getMediaTrackGroup().length >= 1)\n                .map(info -> info.getMediaTrackGroup().getFormat(0))\n                .findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(\n                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } \n        else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n        binding.captionTextView.setVisibility(\n                availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "159", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context,\n                                                         @NonNull final List<Image> images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images)\n                .transform(new Transformation() {\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } \n                        else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n\n                    @Override\n                    public String key() {\n                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                    }\n                });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "160", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "161", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            \n            boolean predicateResult;\n            \n            try {\n                predicateResult = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!predicateResult) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "162", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "163", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "164", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    boolean d1 = observer1.done;\n\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "165", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "166", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "167", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            \n            CacheDisposable<T>[] next;\n\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n\n\n    void handleRequest(JsonRequest request) throws Exception {\n        long starttime = 0;\n        long endtime = 0;\n        long period = 0;\n        FilterOp fo = null;\n\n        starttime = request.getNumber(\"start\", 0);\n        endtime = request.getNumber(\"end\", 0);\n        period = request.getNumber(\"period\", 0);\n        String filterstr = request.getString(\"filter\", \"\");\n\n        if (filterstr.length() > 0) {\n            fo = new FilterParser(filterstr).parse();\n        }\n        \n        if (starttime == 0) { \n            starttime = source.getStartTime(); \n        }\n        \n        if (endtime == 0) { \n            if (period > 0) {\n                endtime = starttime + period;\n            } else {\n                endtime = starttime + DEFAULT_PERIOD; \n            }\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"handle(start= \" + starttime + \", end=\" + endtime + \", period=\" + period + \")\");\n        }\n        \n        LogIterator iterator = (fo != null) ? \n            source.iterator(starttime, endtime, fo) : source.iterator(starttime, endtime);\n        return new JsonGenerator(iterator).toString();\n    }\n\n\n    synchronized public long size() throws IOException {\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"size() called\");\n        }\n\n        if (this.endtime >= src.getEndTime()) {\n            return src.size() - skippedAtStart;\n        }\n        \n        long pos = in.getPosition();\n        \n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"saved pos () = \" + pos);\n        }\n        \n        LogEntry e;\n      \n        LogSkipList.Mark lastseg = src.getSkipList().findMarkBefore(this.endtime);\n        in.seek(lastseg.getBytes());\n        buf = \"\";  // clear the buf so we don't get something we read before we sought\n        // number of entries skipped to get to the end of the iterator, less the number skipped to get to the start\n        long count = lastseg.getEntriesSkipped() - skippedAtStart; \n\n        while ((e = readNextEntry()) != null) {\n            if (LOG.isTraceEnabled()) {\n                //LOG.trace(e);\n            }\n            if (e.getTimestamp() > this.endtime) {\n                break;\n            }\n            count++;\n        }\n        in.seek(pos);\n        buf = \"\";\n\n        if (LOG.isTraceEnabled()) {\n            LOG.trace(\"size() = \" + count);\n        }\n        \n        return count;\n    }\n\n\n    public boolean matches(LogEntry entry) throws FilterException {\n        Arg first = args.get(0);\n        \n        if (first != null) {\n            FilterOp.ArgType type = first.getType();\n            if (type == FilterOp.ArgType.SYMBOL) {\n                String key = (String)first.getValue();\n                Object v = entry.getAttribute(key);\n                if (v instanceof String) {\n                    type = FilterOp.ArgType.STRING;\n                } else if (v instanceof Double || v instanceof Long || v instanceof Integer || v instanceof Short) {\n                    type = FilterOp.ArgType.NUMBER;\n                } else {\n                    throw new FilterException(\"LessThanOp: Invalid argument, first argument resolves to neither a String nor a Number\");\n                }\n            }\n            \n            Object last = null;\n            for (Arg a : args) {\n                Object v = a.getValue();\n                if (a.getType() == FilterOp.ArgType.SYMBOL) {\n                    String key = (String)a.getValue();\n                    v = entry.getAttribute(key);\n                }\n\n                if (last != null) {\n                    if (type == FilterOp.ArgType.STRING) {\n                        if (((String)last).compareTo((String)v) >= 0) {\n                            return false;\n                        }\n                    } else if (type == FilterOp.ArgType.NUMBER) {\n                        if (((Number)last).doubleValue() >= ((Number)v).doubleValue()) {\n                            return false;\n                        }\n                    }\n                }\n                last = v;\n            }\n            return true;\n        } else { \n            return true; \n        }\n    }\n\n\n    public void run() {\n        try {\n            boolean animateFromBottom = true;\n            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();\n            Rectangle screenRect = ge.getMaximumWindowBounds();\n\n            int screenHeight = (int) screenRect.height;\n\n            int startYPosition;\n            int stopYPosition;\n\n            if (screenRect.y > 0) {\n                animateFromBottom = false; // Animate from top!\n            }\n\n            maxToasterInSceen = screenHeight / toasterHeight;\n\n            int posx = (int) screenRect.width - toasterWidth - 1;\n\n            toaster.setLocation(posx, screenHeight);\n            toaster.setVisible(true);\n            if (useAlwaysOnTop) {\n                toaster.setAlwaysOnTop(true);\n            }\n\n            if (animateFromBottom) {\n                startYPosition = screenHeight;\n                stopYPosition = startYPosition - toasterHeight - 1;\n                if (currentNumberOfToaster > 0) {\n                    stopYPosition = stopYPosition - (maxToaster % maxToasterInSceen * toasterHeight);\n                } else {\n                    maxToaster = 0;\n                }\n            } else {\n                startYPosition = screenRect.y - toasterHeight;\n                stopYPosition = screenRect.y;\n\n                if (currentNumberOfToaster > 0) {\n                    stopYPosition = stopYPosition + (maxToaster % maxToasterInSceen * toasterHeight);\n                } else {\n                    maxToaster = 0;\n                }\n            }\n\n            currentNumberOfToaster++;\n            maxToaster++;\n\n            animateVertically(posx, startYPosition, stopYPosition);\n            Thread.sleep(displayTime);\n            animateVertically(posx, stopYPosition, startYPosition);\n\n            currentNumberOfToaster--;\n            toaster.setVisible(false);\n            toaster.dispose();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "168", "src_id": "M362", "code": "\n    void drainFused() {\n        int missed = 1;\n\n        for (;;) {\n            if (disposed) {\n                return;\n            }\n\n            boolean d = done;\n            Throwable ex = error;\n\n            if (!delayError && d && ex != null) {\n                disposed = true;\n                downstream.onError(error);\n                worker.dispose();\n                return;\n            }\n\n            downstream.onNext(null);\n\n            if (d) {\n                disposed = true;\n                ex = error;\n                if (ex != null) {\n                    downstream.onError(ex);\n                } else {\n                    downstream.onComplete();\n                }\n                worker.dispose();\n                return;\n            }\n\n            missed = addAndGet(-missed);\n            if (missed == 0) {\n                break;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "169", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "170", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n        String requestBody =\n                String.format(\n                        \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                        licenseKey, machineFingerprint);\n        HttpRequest request =\n                HttpRequest.newBuilder()\n                        .uri(\n                                URI.create(\n                                        BASE_URL\n                                                + \"/\"\n                                                + ACCOUNT_ID\n                                                + \"/licenses/actions/validate-key\"))\n                        .header(\"Content-Type\", \"application/vnd.api+json\")\n                        .header(\"Accept\", \"application/vnd.api+json\")\n                        // .header(\"Authorization\", \"License \" + licenseKey)\n                        .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                        .build();\n\n        HttpResponse<String> response =\n                httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        \n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n\n                log.info(\n                        \"License floating (from license): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                boolean policyFloating =\n                        policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n\n                log.info(\n                        \"License floating (from policy): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n            int users =\n                    jsonResponse\n                            .path(\"data\")\n                            .path(\"attributes\")\n                            .path(\"metadata\")\n                            .path(\"users\")\n                            .asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense =\n                    jsonResponse\n                            .path(\"data\")\n                            .path(\"attributes\")\n                            .path(\"metadata\")\n                            .path(\"isEnterprise\")\n                            .asBoolean(false);\n\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        \n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "171", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description =\n                    \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\"\n                            + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)\n            throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        \n        try {\n            file = convertToPdf(inputFile);\n            \n            PDDocument doc = pdfDocumentFactory.load(file);\n            \n            return WebResponseUtils.pdfDocToWebResponse(\n                    doc,\n                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                            .replaceFirst(\"[.][^.]+$\", \"\")\n                            + \"_convertedToPDF.pdf\");\n        } finally {\n            if (file != null) {\n                file.delete();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "172", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n        MultipartFile inputFile = request.getFileInput();\n        boolean readonly = true;\n        \n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            // Metadata using PDFBox\n            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            ObjectNode metadata = objectMapper.createObjectNode();\n            ObjectNode basicInfo = objectMapper.createObjectNode();\n            ObjectNode docInfoNode = objectMapper.createObjectNode();\n            ObjectNode compliancy = objectMapper.createObjectNode();\n            ObjectNode encryption = objectMapper.createObjectNode();\n            ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            // Total file size of the PDF\n            long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            // Number of words, paragraphs, and images in the entire document\n            String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            String[] words = fullText.split(\"\\\\s+\");\n            int wordCount = words.length;\n            int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            // Number of characters in the entire document (including spaces and special characters)\n            int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            // Initialize the flags and types\n            boolean hasCompression = false;\n            String compressionType = \"None\";\n\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) {\n                basicInfo.put(\"CompressionType\", compressionType);\n            }\n\n            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            String pageMode = catalog.getPageMode().name();\n\n            // Document Information using PDFBox\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n\n            ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            // Generate structured summary data about PDF characteristics\n            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            // embeed files TODO size\n            if (catalog.getNames() != null) {\n                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n\n                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength()); // size in bytes\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            // attachments TODO size\n            ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            // Javascript\n            PDDocumentNameDictionary namesDict = catalog.getNames();\n            ArrayNode javascriptArray = objectMapper.createArrayNode();\n\n            if (namesDict != null) {\n                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n\n                            PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            // TODO size\n            PDOptionalContentProperties ocProperties = pdfBoxDoc.getDocumentCatalog().getOCProperties();\n            ArrayNode layersArray = objectMapper.createArrayNode();\n\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            other.set(\"Layers\", layersArray);\n\n            // TODO Security\n\n            PDStructureTreeRoot structureTreeRoot = pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                log.error(\"exception\", e);\n            }\n\n            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            boolean isPdfBCompliant = checkForStandard(pdfBoxDoc, \"PDF/B\"); // If you want to check for PDF/Broadcast, though this isn't an official ISO standard.\n            boolean isPdfSECCompliant = checkForStandard(pdfBoxDoc, \"PDF/SEC\"); // This might not be effective since PDF/SEC was under development in 2021.\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();\n            ArrayNode bookmarksArray = objectMapper.createArrayNode();\n\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();\n\n            String xmpString = null;\n\n            if (pdMetadata != null) {\n                try {\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        DomXmpParser domXmpParser = new DomXmpParser();\n                        XMPMetadata xmpMeta = domXmpParser.parse(is);\n\n                        ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    }\n                } catch (XmpParsingException e) {\n                    // XMP parsing failed, try to read raw metadata instead\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n\n                // Retrieve encryption details using getEncryption()\n                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n                // Add other encryption-related properties as needed\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                ObjectNode pageInfo = objectMapper.createObjectNode();\n\n                // Retrieve the page\n                PDPage page = pdfBoxDoc.getPage(pageNum);\n\n                // Page-level Information\n                PDRectangle mediaBox = page.getMediaBox();\n\n                float width = mediaBox.getWidth();\n                float height = mediaBox.getHeight();\n\n                ObjectNode sizeInfo = objectMapper.createObjectNode();\n\n                getDimensionInfo(sizeInfo, width, height);\n\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                // Boxes\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n\n                // Assuming the following boxes are defined for your document; if not, you may get null values.\n                PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n\n                PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n\n                PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n\n                PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                // Content Extraction\n                PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                String pageText = textStripper.getText(pdfBoxDoc);\n\n                pageInfo.put(\"Text Characters Count\", pageText.length()); //\n\n                // Annotations\n                List<PDAnnotation> annotations = page.getAnnotations();\n\n                int subtypeCount = 0;\n                int contentsCount = 0;\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) {\n                        subtypeCount++; // Increase subtype count\n                    }\n                    if (annotation.getContents() != null) {\n                        contentsCount++; // Increase contents count\n                    }\n                }\n\n                ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                // Images (simplified)\n                // This part is non-trivial as images can be embedded in multiple ways in a PDF.\n                // Here is a basic structure to recognize image XObjects on a page.\n                ArrayNode imagesArray = objectMapper.createArrayNode();\n                PDResources resources = page.getResources();\n\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                // Links\n                ArrayNode linksArray = objectMapper.createArrayNode();\n                Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            String uri = uriAction.getURI();\n                            uniqueURIs.add(uri); // Add to set to ensure uniqueness\n                        }\n                    }\n                }\n\n                // Add unique URIs to linksArray\n                for (String uri : uniqueURIs) {\n                    ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                // Fonts\n                ArrayNode fontsArray = objectMapper.createArrayNode();\n                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n\n                for (COSName fontName : resources.getFontNames()) {\n                    PDFont font = resources.getFont(fontName);\n                    ObjectNode fontNode = objectMapper.createObjectNode();\n\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n\n                    // PDFBox provides Font's BaseFont (i.e., the font name) directly\n                    fontNode.put(\"Name\", font.getName());\n\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        // Font stretch and BBox are not directly available in PDFBox's API, so these are omitted for simplicity\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    // Create a unique key for this font node based on its attributes\n                    String uniqueKey = fontNode.toString();\n\n                    // Increment count if this font exists, or initialize it if new\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n\n                // Add unique font entries to fontsArray\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                // Access resources dictionary\n                ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n\n                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        PDStream iccData = iccBased.getPDStream();\n                        byte[] iccBytes = iccData.toByteArray();\n\n                        // TODO: Further decode and analyze the ICC data if needed\n                        ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                // Other XObjects\n                Map<String, Integer> xObjectCountMap = new HashMap<>(); // To store the count for each type\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    String xObjectType;\n\n                    if (xObject instanceof PDImageXObject) {\n                        xObjectType = \"Image\";\n                    } else if (xObject instanceof PDFormXObject) {\n                        xObjectType = \"Form\";\n                    } else {\n                        xObjectType = \"Other\";\n                    }\n\n                    // Increment the count for this type in the map\n                    xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n\n                // Add the count map to pageInfo (or wherever you want to store it)\n                ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                ArrayNode multimediaArray = objectMapper.createArrayNode();\n\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        // Extract details from the annotation as needed\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            // Save JSON to file\n            String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n\n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "173", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\n                        \"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n            boolean isValid = processCertificateData(decodedData, context);\n\n            return isValid;\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "174", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)\n            throws IOException {\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n            try (ZipInputStream zipIn =\n                    ZipSecurity.createHardenedInputStream(\n                            new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n                ZipEntry entry = zipIn.getNextEntry();\n                \n                for (;;) {\n                    if (entry == null) {\n                        break;\n                    }\n                    \n                    Path filePath =\n                            tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                    \n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        \n                        if (entry.getName().toLowerCase().endsWith(\".html\")\n                                || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            String content =\n                                    new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                            Files.write(\n                                    filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    \n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } // tempUnzippedDir auto-cleaned\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "175", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)\n            throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n\n        try (PDPageContentStream contentStream =\n                new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                float pageAspectRatio = pageWidth / pageHeight;\n\n                float scaleFactor = 1.0f;\n                if (imageAspectRatio > pageAspectRatio) {\n                    scaleFactor = pageWidth / image.getWidth();\n                } else {\n                    scaleFactor = pageHeight / image.getHeight();\n                }\n\n                float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                contentStream.drawImage(\n                        image,\n                        xPos,\n                        yPos,\n                        image.getWidth() * scaleFactor,\n                        image.getHeight() * scaleFactor);\n            }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "176", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            // Get the MAC address\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (int i = 0; i < mac.length; i++) {\n                            sb.append(String.format(\"%02X\", mac[i]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (int i = 0; i < mac.length; i++) {\n                        sb.append(String.format(\"%02X\", mac[i]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "177", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties\n                .getPremium()\n                .getProFeatures()\n                .getCustomMetadata()\n                .isAutoUpdateMetadata()\n            && runningProOrHigher) {\n            \n            author = applicationProperties\n                    .getPremium()\n                    .getProFeatures()\n                    .getCustomMetadata()\n                    .getAuthor();\n\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "178", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                return \"Docker\";\n            } else if (isBrowserOpen) {\n                String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                if (os.contains(\"win\")) {\n                    return \"Client-windows\";\n                } else if (os.contains(\"mac\")) {\n                    return \"Client-mac\";\n                } else {\n                    return \"Client-unix\";\n                }\n            } else {\n                return \"Server-jar\";\n            }\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "179", "src_id": "M101", "code": "\n    private void processRequest(\n            int limitPerDay,\n            String identifier,\n            Map<String, Bucket> buckets,\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain)\n            throws IOException, ServletException {\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        \n        if (probe.isConsumed()) {\n            response.setHeader(\n                    \"X-Rate-Limit-Remaining\",\n                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            \n            filterChain.doFilter(request, response);\n            return;\n        }\n        \n        long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n        response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n        response.setHeader(\n                \"X-Rate-Limit-Retry-After-Seconds\",\n                Newlines.stripAll(String.valueOf(waitForRefill)));\n        \n        response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "180", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            final String licenseKey,\n            final String machineFingerprint,\n            final LicenseContext context) throws Exception {\n        if (DEBUG) {\n            Log.d(TAG, \"validateLicense() called with: licenseKey = [\" + licenseKey \n                    + \"], machineFingerprint = [\" + machineFingerprint + \"]\");\n        }\n\n        final String requestBody = String.format(\n                \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                licenseKey, machineFingerprint);\n\n        final HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n                .header(\"Content-Type\", \"application/vnd.api+json\")\n                .header(\"Accept\", \"application/vnd.api+json\")\n                // .header(\"Authorization\", \"License \" + licenseKey)\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        final HttpResponse<String> response = httpClient.send(\n                request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        \n        final JsonNode jsonResponse = objectMapper.readTree(response.body());\n        \n        if (response.statusCode() == 200) {\n            final JsonNode metaNode = jsonResponse.path(\"meta\");\n            final boolean isValid = metaNode.path(\"valid\").asBoolean();\n\n            final String detail = metaNode.path(\"detail\").asText();\n            final String code = metaNode.path(\"code\").asText();\n\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            final JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n\n                log.info(\n                        \"License floating (from license): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n            final JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n\n            if (includedNode.isArray()) {\n                for (final JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                final boolean policyFloating =\n                        policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                final int policyMaxMachines = \n                        policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n\n                log.info(\n                        \"License floating (from policy): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n            final int users = jsonResponse\n                    .path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"users\")\n                    .asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense = jsonResponse\n                    .path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"isEnterprise\")\n                    .asBoolean(false);\n\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        \n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "181", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description =\n                    \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\"\n                            + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute final GeneralFile generalFile)\n            throws Exception {\n        final MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n\n            final PDDocument doc = pdfDocumentFactory.load(file);\n            return WebResponseUtils.pdfDocToWebResponse(\n                    doc,\n                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                            .replaceFirst(\"[.][^.]+$\", \"\")\n                            + \"_convertedToPDF.pdf\");\n        } finally {\n            if (file != null) {\n                file.delete();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "182", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute final PDFFile request) \n            throws IOException {\n        final MultipartFile inputFile = request.getFileInput();\n        final boolean readonly = true;\n        \n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            final ObjectMapper objectMapper = new ObjectMapper();\n            final ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            // Metadata using PDFBox\n            final PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            final ObjectNode metadata = objectMapper.createObjectNode();\n            final ObjectNode basicInfo = objectMapper.createObjectNode();\n            final ObjectNode docInfoNode = objectMapper.createObjectNode();\n            final ObjectNode compliancy = objectMapper.createObjectNode();\n            final ObjectNode encryption = objectMapper.createObjectNode();\n            final ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            // Total file size of the PDF\n            final long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            // Number of words, paragraphs, and images in the entire document\n            final String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            final String[] words = fullText.split(\"\\\\s+\");\n            final int wordCount = words.length;\n            final int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            // Number of characters in the entire document (including spaces and special characters)\n            final int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            // Initialize the flags and types\n            final boolean hasCompression = false;\n            final String compressionType = \"None\";\n\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) {\n                basicInfo.put(\"CompressionType\", compressionType);\n            }\n\n            final String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            final PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            final String pageMode = catalog.getPageMode().name();\n\n            // Document Information using PDFBox\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            final PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n\n            final ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            // Generate structured summary data about PDF characteristics\n            final ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            // embeed files TODO size\n            if (catalog.getNames() != null) {\n                final PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n\n                final ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    final Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry :\n                                efMap.entrySet()) {\n                            final ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            final PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\n                                        \"FileSize\", embeddedFile.getLength()); // size in bytes\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            // attachments TODO size\n            final ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        final ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            // Javascript\n            final PDDocumentNameDictionary namesDict = catalog.getNames();\n            final ArrayNode javascriptArray = objectMapper.createArrayNode();\n\n            if (namesDict != null) {\n                final PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        final Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            final ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n\n                            final PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                final String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            // TODO size\n            final PDOptionalContentProperties ocProperties =\n                    pdfBoxDoc.getDocumentCatalog().getOCProperties();\n            final ArrayNode layersArray = objectMapper.createArrayNode();\n\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    final ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            other.set(\"Layers\", layersArray);\n\n            // TODO Security\n\n            final PDStructureTreeRoot structureTreeRoot =\n                    pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                log.error(\"exception\", e);\n            }\n\n            final boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            final boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            final boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            final boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            final boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            final boolean isPdfBCompliant =\n                    checkForStandard(\n                            pdfBoxDoc,\n                            \"PDF/B\"); // If you want to check for PDF/Broadcast, though this isn't\n            // an official ISO standard.\n            final boolean isPdfSECCompliant =\n                    checkForStandard(\n                            pdfBoxDoc,\n                            \"PDF/SEC\"); // This might not be effective since PDF/SEC was under\n            // development in 2021.\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            final PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();\n            final ArrayNode bookmarksArray = objectMapper.createArrayNode();\n\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            final PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();\n\n            String xmpString = null;\n\n            if (pdMetadata != null) {\n                try {\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        final DomXmpParser domXmpParser = new DomXmpParser();\n                        final XMPMetadata xmpMeta = domXmpParser.parse(is);\n\n                        final ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    }\n                } catch (XmpParsingException e) {\n                    // XMP parsing failed, try to read raw metadata instead\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        final byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n\n                // Retrieve encryption details using getEncryption()\n                final PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n                // Add other encryption-related properties as needed\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            final ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            final ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                final ObjectNode pageInfo = objectMapper.createObjectNode();\n\n                // Retrieve the page\n                final PDPage page = pdfBoxDoc.getPage(pageNum);\n\n                // Page-level Information\n                final PDRectangle mediaBox = page.getMediaBox();\n\n                final float width = mediaBox.getWidth();\n                final float height = mediaBox.getHeight();\n\n                final ObjectNode sizeInfo = objectMapper.createObjectNode();\n\n                getDimensionInfo(sizeInfo, width, height);\n\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                // Boxes\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n\n                // Assuming the following boxes are defined for your document; if not, you may get\n                // null values.\n                final PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n\n                final PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n\n                final PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n\n                final PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                // Content Extraction\n                final PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                final String pageText = textStripper.getText(pdfBoxDoc);\n\n                pageInfo.put(\"Text Characters Count\", pageText.length()); //\n\n                // Annotations\n                final List<PDAnnotation> annotations = page.getAnnotations();\n\n                int subtypeCount = 0;\n                int contentsCount = 0;\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) {\n                        subtypeCount++; // Increase subtype count\n                    }\n                    if (annotation.getContents() != null) {\n                        contentsCount++; // Increase contents count\n                    }\n                }\n\n                final ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                // Images (simplified)\n                // This part is non-trivial as images can be embedded in multiple ways in a PDF.\n                // Here is a basic structure to recognize image XObjects on a page.\n                final ArrayNode imagesArray = objectMapper.createArrayNode();\n                final PDResources resources = page.getResources();\n\n                for (COSName name : resources.getXObjectNames()) {\n                    final PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        final ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                // Links\n                final ArrayNode linksArray = objectMapper.createArrayNode();\n                final Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            final String uri = uriAction.getURI();\n                            uniqueURIs.add(uri); // Add to set to ensure uniqueness\n                        }\n                    }\n                }\n\n                // Add unique URIs to linksArray\n                for (String uri : uniqueURIs) {\n                    final ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                // Fonts\n                final ArrayNode fontsArray = objectMapper.createArrayNode();\n                final Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n\n                for (COSName fontName : resources.getFontNames()) {\n                    final PDFont font = resources.getFont(fontName);\n                    final ObjectNode fontNode = objectMapper.createObjectNode();\n\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n\n                    // PDFBox provides Font's BaseFont (i.e., the font name) directly\n                    fontNode.put(\"Name\", font.getName());\n\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    final PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        final int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        // Font stretch and BBox are not directly available in PDFBox's API, so\n                        // these are omitted for simplicity\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    // Create a unique key for this font node based on its attributes\n                    final String uniqueKey = fontNode.toString();\n\n                    // Increment count if this font exists, or initialize it if new\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        final ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        final int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n\n                // Add unique font entries to fontsArray\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                // Access resources dictionary\n                final ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n\n                final Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    final PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        final PDStream iccData = iccBased.getPDStream();\n                        final byte[] iccBytes = iccData.toByteArray();\n\n                        // TODO: Further decode and analyze the ICC data if needed\n                        final ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                // Other XObjects\n                final Map<String, Integer> xObjectCountMap =\n                        new HashMap<>(); // To store the count for each type\n                for (COSName name : resources.getXObjectNames()) {\n                    final PDXObject xObject = resources.getXObject(name);\n                    String xObjectType;\n\n                    if (xObject instanceof PDImageXObject) {\n                        xObjectType = \"Image\";\n                    } else if (xObject instanceof PDFormXObject) {\n                        xObjectType = \"Form\";\n                    } else {\n                        xObjectType = \"Other\";\n                    }\n\n                    // Increment the count for this type in the map\n                    xObjectCountMap.put(\n                            xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n\n                // Add the count map to pageInfo (or wherever you want to store it)\n                final ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                final ArrayNode multimediaArray = objectMapper.createArrayNode();\n\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        final ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        // Extract details from the annotation as needed\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            // Save JSON to file\n            final String jsonString =\n                    objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n\n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "183", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(final String licenseFile, final LicenseContext context) {\n        if (DEBUG) {\n            Log.d(TAG, \"verifyCertificateLicense() called with: licenseFile = [\" + licenseFile \n                    + \"], context = [\" + context + \"]\");\n        }\n\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            final byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            final String payload = new String(payloadBytes);\n\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n\n            try {\n                final JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\n                        \"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n            final boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n            final boolean isValid = processCertificateData(decodedData, context);\n\n            return isValid;\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "184", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            final Path zipFilePath,\n            final boolean disableSanitize,\n            final TempFileManager tempFileManager) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"sanitizeHtmlFilesInZip() called with: zipFilePath = [\" + zipFilePath \n                    + \"], disableSanitize = [\" + disableSanitize + \"]\");\n        }\n\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n            try (ZipInputStream zipIn = ZipSecurity.createHardenedInputStream(\n                    new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n                \n                ZipEntry entry = zipIn.getNextEntry();\n                while (entry != null) {\n                    final Path filePath = tempUnzippedDir.getPath()\n                            .resolve(sanitizeZipFilename(entry.getName()));\n                    \n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        \n                        if (entry.getName().toLowerCase().endsWith(\".html\")\n                                || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            final String content = new String(\n                                    zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            final String sanitizedContent = sanitizeHtmlContent(\n                                    content, disableSanitize);\n                            Files.write(filePath, \n                                    sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    \n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } // tempUnzippedDir auto-cleaned\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "185", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            final PDDocument doc,\n            final PDImageXObject image,\n            final String fitOption,\n            final boolean autoRotate) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"addImageToDocument() called with: fitOption = [\" + fitOption \n                    + \"], autoRotate = [\" + autoRotate + \"]\");\n        }\n\n        final boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        final PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n\n        final float pageWidth = page.getMediaBox().getWidth();\n        final float pageHeight = page.getMediaBox().getHeight();\n\n        try (PDPageContentStream contentStream =\n                new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                final float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                final float pageAspectRatio = pageWidth / pageHeight;\n\n                float scaleFactor = 1.0f;\n                if (imageAspectRatio > pageAspectRatio) {\n                    scaleFactor = pageWidth / image.getWidth();\n                } else {\n                    scaleFactor = pageHeight / image.getHeight();\n                }\n\n                final float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                final float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                contentStream.drawImage(\n                        image,\n                        xPos,\n                        yPos,\n                        image.getWidth() * scaleFactor,\n                        image.getHeight() * scaleFactor);\n            }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "186", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        if (DEBUG) {\n            Log.d(TAG, \"generateMachineFingerprint() called\");\n        }\n\n        try {\n            // Get the MAC address\n            final StringBuilder sb = new StringBuilder();\n            final InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n            if (network == null) {\n                final Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    final NetworkInterface net = networks.nextElement();\n                    final byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (int i = 0; i < mac.length; i++) {\n                            sb.append(String.format(\"%02X\", mac[i]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                final byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (int i = 0; i < mac.length; i++) {\n                        sb.append(String.format(\"%02X\", mac[i]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n            final MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            final byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            final StringBuilder fingerprint = new StringBuilder();\n            for (final byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "187", "src_id": "M135", "code": "\n    private void setCommonMetadata(final PDDocument pdf, final PdfMetadata pdfMetadata) {\n        if (DEBUG) {\n            Log.d(TAG, \"setCommonMetadata() called with pdf and pdfMetadata\");\n        }\n\n        final String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties\n                .getPremium()\n                .getProFeatures()\n                .getCustomMetadata()\n                .isAutoUpdateMetadata()\n                && runningProOrHigher) {\n            author =\n                    applicationProperties\n                            .getPremium()\n                            .getProFeatures()\n                            .getCustomMetadata()\n                            .getAuthor();\n\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "188", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            final boolean isDocker = runningInDocker();\n            final boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            final boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                return \"Docker\";\n            } else if (isBrowserOpen) {\n                final String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                if (os.contains(\"win\")) {\n                    return \"Client-windows\";\n                } else if (os.contains(\"mac\")) {\n                    return \"Client-mac\";\n                } else {\n                    return \"Client-unix\";\n                }\n            } else {\n                return \"Server-jar\";\n            }\n        } catch (final Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "189", "src_id": "M101", "code": "\n    private void processRequest(\n            final int limitPerDay,\n            final String identifier,\n            final Map<String, Bucket> buckets,\n            final HttpServletRequest request,\n            final HttpServletResponse response,\n            final FilterChain filterChain)\n            throws IOException, ServletException {\n        final Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        final ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        \n        if (probe.isConsumed()) {\n            response.setHeader(\n                    \"X-Rate-Limit-Remaining\",\n                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            filterChain.doFilter(request, response);\n        } else {\n            final long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\n                    \"X-Rate-Limit-Retry-After-Seconds\",\n                    Newlines.stripAll(String.valueOf(waitForRefill)));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "190", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n    @ResizeMode\n    public static int nextResizeModeAndSaveToPrefs(final Player player,\n                                                   @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        \n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n        player.getPrefs().edit().putInt(\n                player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();\n        \n        return newResizeMode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "191", "src_id": "M424", "code": "\n    @Override\n    public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n        \n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } \n        else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n            if (!fragmentIsVisible) {\n                onFragmentStopped();\n            }\n        } \n        else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n            fragmentIsVisible = false;\n            onFragmentStopped();\n        } \n        else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n            fragmentIsVisible = true;\n            player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n            if (!isControlsVisible()) {\n                hideSystemUIIfNeeded();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "192", "src_id": "M900", "code": "\n    @StyleRes\n    public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n        final String selectedTheme = getSelectedThemeKey(context);\n\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } else if (selectedTheme.equals(blackTheme)) {\n            return R.style.BlackSettingsTheme;\n        } else if (selectedTheme.equals(automaticDeviceTheme)) {\n            if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                final String selectedNightTheme = getSelectedNightThemeKey(context);\n                if (selectedNightTheme.equals(blackTheme)) {\n                    return R.style.BlackSettingsTheme;\n                } else {\n                    return R.style.DarkSettingsTheme;\n                }\n            } else {\n                // there is only one day theme\n                return R.style.LightSettingsTheme;\n            }\n        } else {\n            // default to dark theme\n            return R.style.DarkSettingsTheme;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "193", "src_id": "M895", "code": "\n@Override\npublic Bitmap transform(final Bitmap source) {\n    if (DEBUG) {\n        Log.d(TAG, \"Thumbnail - transform() called\");\n    }\n\n    final float notificationThumbnailWidth = Math.min(\n            context.getResources()\n                    .getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth());\n\n    final Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight() \n                    / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true);\n\n    if (result == source || !result.isMutable()) {\n        // create a new mutable bitmap to prevent strange crashes on some\n        // devices (see #4638)\n        final Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight() / (source.getWidth()\n                        / (notificationThumbnailWidth - 1))),\n                null,\n                true);\n        source.recycle();\n        return copied;\n    } else {\n        source.recycle();\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "194", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n\n        String action = intent.getAction();\n        \n        if (action.equals(AudioManager.ACTION_AUDIO_BECOMING_NOISY)) {\n            pause();\n        } else if (action.equals(ACTION_CLOSE)) {\n            service.destroyPlayerAndStopService();\n        } else if (action.equals(ACTION_PLAY_PAUSE)) {\n            playPause();\n        } else if (action.equals(ACTION_PLAY_PREVIOUS)) {\n            playPrevious();\n        } else if (action.equals(ACTION_PLAY_NEXT)) {\n            playNext();\n        } else if (action.equals(ACTION_FAST_REWIND)) {\n            fastRewind();\n        } else if (action.equals(ACTION_FAST_FORWARD)) {\n            fastForward();\n        } else if (action.equals(ACTION_REPEAT)) {\n            cycleNextRepeatMode();\n        } else if (action.equals(ACTION_SHUFFLE)) {\n            toggleShuffleModeEnabled();\n        } else if (action.equals(Intent.ACTION_CONFIGURATION_CHANGED)) {\n            if (DEBUG) {\n                Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n            }\n        }\n\n        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "195", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n\n        Throwable ex = errorInfo.getThrowable();\n        \n        if (ex instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            // Starting ReCaptcha Challenge Activity\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } else if (ex != null && ExceptionUtils.isNetworkRelated(ex)) {\n            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } else if (ex instanceof AgeRestrictedContentException) {\n            Toast.makeText(context, R.string.restricted_video_no_stream,\n                    Toast.LENGTH_LONG).show();\n        } else if (ex instanceof GeographicRestrictionException) {\n            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n        } else if (ex instanceof PaidContentException) {\n            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n        } else if (ex instanceof PrivateContentException) {\n            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n        } else if (ex instanceof SoundCloudGoPlusContentException) {\n            Toast.makeText(context, R.string.soundcloud_go_plus_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (ex instanceof YoutubeMusicPremiumContentException) {\n            Toast.makeText(context, R.string.youtube_music_premium_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (ex instanceof ContentNotAvailableException) {\n            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n        } else if (ex instanceof ContentNotSupportedException) {\n            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n        } else {\n            ErrorUtil.createNotification(context, errorInfo);\n        }\n\n        if (context instanceof RouterActivity) {\n            ((RouterActivity) context).finish();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "196", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context,\n                                               @NonNull final FragmentManager fragmentManager,\n                                               final int serviceId,\n                                               @Nullable final String url,\n                                               @NonNull final String title,\n                                               @Nullable final PlayQueue playQueue,\n                                               final boolean switchingPlayers) {\n\n        final boolean autoPlay;\n        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else if (switchingPlayers) {\n            // switching player to main player\n            autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n        } else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else {\n            // opening new stream while already playing in another player\n            autoPlay = false;\n        }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n            expandMainPlayer(detailFragment.requireActivity());\n            detailFragment.setAutoPlay(autoPlay);\n            if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                        || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n            } else {\n                detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n            }\n            detailFragment.scrollToTop();\n        };\n\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n        } else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment\n                    .getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n\n            defaultTransaction(fragmentManager)\n                    .replace(R.id.fragment_player_holder, instance)\n                    .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                    .commit();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "197", "src_id": "M698", "code": "\n    @Override\n    public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)\n                    .into(binding.channelBannerImage);\n        } else {\n            // do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n\n        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)\n                .into(binding.subChannelAvatarView);\n\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        \n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(Localization\n                    .shortSubscriberCount(activity, result.getSubscriberCount()));\n        } else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(String.format(\n                    getString(R.string.channel_created_by),\n                    currentInfo.getParentChannelName())\n            );\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        disposables.clear();\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "198", "src_id": "M379", "code": "\n    @Override\n    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n                || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n                || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n        final List<Tracks.Group> textTracks = currentTracks\n                .getGroups()\n                .stream()\n                .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n                .collect(Collectors.toList());\n        final List<String> availableLanguages = textTracks.stream()\n                .map(Tracks.Group::getMediaTrackGroup)\n                .filter(textTrack -> textTrack.length > 0)\n                .map(textTrack -> textTrack.getFormat(0).language)\n                .collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional<Format> selectedTracks = textTracks.stream()\n                .filter(Tracks.Group::isSelected)\n                .filter(info -> info.getMediaTrackGroup().length >= 1)\n                .map(info -> info.getMediaTrackGroup().getFormat(0))\n                .findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(\n                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n        binding.captionTextView.setVisibility(\n                availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "199", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context,\n                                                         @NonNull final List<Image> images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images)\n                .transform(new Transformation() {\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n\n                    @Override\n                    public String key() {\n                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                    }\n                });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "200", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "201", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "202", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "203", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run(); // try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "204", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            \n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "205", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        \n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(mContext,\n                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), \n                        action,\n                        service, \n                        request.toString(), \n                        reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "206", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            for (;;) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "207", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            byte[] buffer = new byte[8 * 1024];\n            int read;\n            \n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            \n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "208", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                \n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                \n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "209", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n        if(emlBytes == null || emlBytes.length == 0) {\n            throw new IllegalArgumentException(\"EML file is empty or null\");\n        }\n\n        String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n        // Basic email parsing\n        String subject = extractBasicHeader(emlContent, \"Subject:\");\n        String from = extractBasicHeader(emlContent, \"From:\");\n        String to = extractBasicHeader(emlContent, \"To:\");\n        String cc = extractBasicHeader(emlContent, \"Cc:\");\n        String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n        String date = extractBasicHeader(emlContent, \"Date:\");\n\n        // Try to extract HTML content\n        String htmlBody = extractHtmlBody(emlContent);\n        if(htmlBody == null) {\n            String textBody = extractTextBody(emlContent);\n            htmlBody =\n                    convertTextToHtml(\n                            textBody != null ? textBody : \"Email content could not be parsed\");\n        }\n\n        // Generate HTML with custom styling based on request\n        StringBuilder html = new StringBuilder();\n        html.append(\"<!DOCTYPE html>\\n\");\n        html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n        html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n        html.append(\"<style>\\n\");\n        appendEnhancedStyles(html);\n        html.append(\"</style>\\n\");\n        html.append(\"</head><body>\\n\");\n\n        html.append(\"<div class=\\\"email-container\\\">\\n\");\n        html.append(\"<div class=\\\"email-header\\\">\\n\");\n        html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n        html.append(\"<div class=\\\"email-meta\\\">\\n\");\n        html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n        html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n        // Include CC and BCC if present and requested\n        if(request != null && request.isIncludeAllRecipients()) {\n            if(!cc.trim().isEmpty()) {\n                html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n            }\n            if(!bcc.trim().isEmpty()) {\n                html.append(\"<div><strong>BCC:</strong> \")\n                        .append(escapeHtml(bcc))\n                        .append(\"</div>\\n\");\n            }\n        }\n\n        if(!date.trim().isEmpty()) {\n            html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n        }\n        html.append(\"</div></div>\\n\");\n\n        html.append(\"<div class=\\\"email-body\\\">\\n\");\n        html.append(processEmailHtmlBody(htmlBody));\n        html.append(\"</div>\\n\");\n\n        // Add attachment information - always check for and display attachments\n        String attachmentInfo = extractAttachmentInfo(emlContent);\n        if(!attachmentInfo.isEmpty()) {\n            html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n            html.append(\"<h3>Attachments</h3>\\n\");\n            html.append(attachmentInfo);\n\n            // Add a status message about attachment inclusion\n            if(request != null && request.isIncludeAttachments()) {\n                html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n                html.append(\n                        \"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n                html.append(\"</div>\\n\");\n            } else {\n                html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n                html.append(\n                        \"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n                html.append(\"</div>\\n\");\n            }\n\n            html.append(\"</div>\\n\");\n        }\n\n        // Show advanced features status if requested\n        assert request != null;\n        if(request.getFileInput().isEmpty()) {\n            html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n            html.append(\n                    \"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n            html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n        html.append(\"</body></html>\");\n\n        return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "210", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n        if(multipart == null) {\n            return false;\n        }\n\n        try {\n            // Check if the object implements jakarta.mail.Multipart interface\n            Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n            if(!multipartInterface.isInstance(multipart)) {\n                return false;\n            }\n\n            // Additional check for MimeMultipart\n            try {\n                Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n                if(mimeMultipartClass.isInstance(multipart)) {\n                    log.debug(\"Found MimeMultipart instance for enhanced processing\");\n                    return true;\n                }\n            } catch(ClassNotFoundException e) {\n                log.debug(\"MimeMultipart not available, using base Multipart interface\");\n            }\n\n            return true;\n        } catch(ClassNotFoundException e) {\n            log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "211", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n        try {\n            String[] lines = emlContent.split(\"\\r?\\n\");\n            \n            for(int i = 0; i < lines.length; i++) {\n                String line = lines[i];\n                if(line.toLowerCase().startsWith(headerName.toLowerCase())) {\n                    StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n                    \n                    // Handle multi-line headers\n                    for(int j = i + 1; j < lines.length; j++) {\n                        if(lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                            value.append(\" \").append(lines[j].trim());\n                        } else {\n                            break;\n                        }\n                    }\n                    \n                    // Apply MIME header decoding\n                    return safeMimeDecode(value.toString());\n                }\n                \n                if(line.trim().isEmpty()) {\n                    break;\n                }\n            }\n        } catch(RuntimeException e) {\n            log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n        }\n        \n        return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "212", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n        if(document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n            return;\n        }\n\n        // 1. Find the screen position of all attachment markers\n        AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n        finder.setSortByPosition(true); // Process pages in order\n        finder.getText(document);\n        List<MarkerPosition> markerPositions = finder.getPositions();\n\n        // 2. Warn if the number of markers and attachments don't match\n        if(markerPositions.size() != attachments.size()) {\n            log.warn(\n                    \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n                    markerPositions.size(),\n                    attachments.size());\n        }\n\n        // 3. Create an invisible annotation over each found marker\n        int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n        for(int i = 0; i < annotationsToAdd; ++i) {\n            MarkerPosition position = markerPositions.get(i);\n            EmailAttachment attachment = attachments.get(i);\n\n            if(attachment.getEmbeddedFilename() != null) {\n                PDPage page = document.getPage(position.getPageIndex());\n                addAttachmentAnnotationToPage(\n                        document, page, attachment, position.getX(), position.getY());\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "213", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n            } catch (ClassNotFoundException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InstantiationException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (IllegalAccessException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InvocationTargetException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        \n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "214", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                \n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                \n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "215", "src_id": "M219", "code": "\n   public synchronized static ZooKeeper getClient(String contextPath, String session, int expireTime) throws IOException {\n       final String connectionId = concat(contextPath, session);\n\n       ZooKeeper zk = zkMap.get(connectionId);\n       if (zk == null) {\n           if (LOG.isInfoEnabled()) {\n               LOG.info(String.format(\"creating new connection for : '%s'\", connectionId));\n           }\n           \n           Endpoint e = contextMap.get(contextPath);\n           zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n           \n           for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n               zk.addAuthInfo(\"digest\", String.format(\"%s:%s\", p.getKey(), p.getValue()).getBytes());\n           }\n           \n           zkMap.put(connectionId, zk);\n\n           // a session should automatically expire after an amount of time\n           if (session != null) {\n               zkSessionTimers.put(connectionId, new SessionTimerTask(expireTime, session, contextPath, timer));\n           }\n       }\n       \n       return zk;\n   }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "216", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        File f = new File(file);\n        RandomAccessFileReader in = new RandomAccessFileReader(f);\n        SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n        Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n        long lastFp = in.getPosition();\n        String line = in.readLine();\n        Matcher m = null;\n\n        // if we have read data from the file, and it matches the timep pattern\n        if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n            starttime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. First line doesn't start with time\");\n        }\n\n        /*\n          Count number of log entries. Any line starting with a timestamp counts as an entry\n        */\n        String lastentry = line;\n        try {\n            while (line != null) {\n                m = timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (size % skipN == 0) {\n                        long time = timestampFromText(dateformat, m.group(1));\n                        skiplist.addMark(time, lastFp, size);\n                    }\n                    size++;\n                    lastentry = line;\n                } \n                if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                    serverid = Integer.valueOf(m.group(1));\n                }\n\n                lastFp = in.getPosition();\n                line = in.readLine();\n            }\n        } catch (EOFException eof) {\n            // ignore, simply end of file, though really (line!=null) should have caught this\n        } finally {\n            in.close();\n        }\n\n        m = timep.matcher(lastentry);\n        if (m.lookingAt()) {\n            endtime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "217", "src_id": "M235", "code": "\n    @POST\n    @Produces( { MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        // establish the connection to the ZooKeeper cluster\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "218", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work\n        // directly.\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "219", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false, success = false;\n        \n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                boolean renamed = tmpFile.renameTo(origFile);\n                \n                if (!renamed) {\n                    // On windows, renameTo does not replace.\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    // If we failed when flushing, try to close it to not leak\n                    // an FD\n                    IOUtils.closeStream(out);\n                }\n                \n                // close wasn't successful, try to delete the tmp file\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "220", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n        try {\n            try {\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) {\n                        break;\n                    }\n\n                    Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n            } catch (EOFException eof) {\n                // ignore, we've simply come to the end of the file\n            }\n            \n            if (buf.length() > 0) {\n                LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                buf = \"\";\n                return e;\n            }\n        } catch (Exception e) {\n            LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n            return null;\n        }\n        \n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "221", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        \n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2];\n        \n        if (op.equalsIgnoreCase(\"gettracemask\")) {\n            getTraceMask(host, port);\n        } else if (op.equalsIgnoreCase(\"settracemask\")) {\n            setTraceMask(host, port, args[3]);\n        } else if (op.equalsIgnoreCase(\"ruok\")) {\n            ruok(host, port);\n        } else if (op.equalsIgnoreCase(\"kill\")) {\n            kill(host, port);\n        } else if (op.equalsIgnoreCase(\"stat\")) {\n            stat(host, port);\n        } else if (op.equalsIgnoreCase(\"dump\")) {\n            dump(host, port);\n        } else {\n            System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "222", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                final Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                final Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n\n            } catch (final ClassNotFoundException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (final InstantiationException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (final IllegalAccessException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (final InvocationTargetException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (final NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (final NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "223", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (final RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (final Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (final SelectionKey key : selector.keys()) {\n                    final NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                \n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "224", "src_id": "M219", "code": "\nsynchronized public static ZooKeeper getClient(final String contextPath,\n        final String session, final int expireTime) throws IOException {\n    final String connectionId = concat(contextPath, session);\n\n    ZooKeeper zk = zkMap.get(connectionId);\n    if (zk == null) {\n        if (LOG.isInfoEnabled()) {\n            LOG.info(String.format(\"creating new \"\n                    + \"connection for : '%s'\", connectionId));\n        }\n        \n        final Endpoint e = contextMap.get(contextPath);\n        zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n        \n        for (final Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n            zk.addAuthInfo(\"digest\", String.format(\"%s:%s\", p.getKey(),\n                    p.getValue()).getBytes());\n        }\n        \n        zkMap.put(connectionId, zk);\n\n        // a session should automatically expire after an amount of time\n        if (session != null) {\n            zkSessionTimers.put(connectionId, new SessionTimerTask(\n                    expireTime, session, contextPath, timer));\n        }\n    }\n    \n    return zk;\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "225", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        final File f = new File(file);\n        final RandomAccessFileReader in = new RandomAccessFileReader(f);\n        final SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n        final Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n        long lastFp = in.getPosition();\n        String line = in.readLine();\n        Matcher m = null;\n\n        // if we have read data from the file, and it matches the timep pattern\n        if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n            starttime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. First line doesn't start with time\");\n        }\n\n        /*\n          Count number of log entries. Any line starting with a timestamp counts as an entry\n        */\n        String lastentry = line;\n        try {\n            while (line != null) {\n                m = timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (size % skipN == 0) {\n                        final long time = timestampFromText(dateformat, m.group(1));\n                        skiplist.addMark(time, lastFp, size);\n                    }\n                    size++;\n                    lastentry = line;\n                } \n                if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                    serverid = Integer.valueOf(m.group(1));\n                }\n\n                lastFp = in.getPosition();\n                line = in.readLine();\n            }\n        } catch (EOFException eof) {\n            // ignore, simply end of file, though really (line!=null) should have caught this\n        } finally {\n            in.close();\n        }\n\n        m = timep.matcher(lastentry);\n        if (m.lookingAt()) {\n            endtime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "226", "src_id": "M235", "code": "\n    @POST\n    @Produces({MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML})\n    public Response createSession(@QueryParam(\"op\") String op,\n                                  @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n                                  @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (final NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        // establish the connection to the ZooKeeper cluster\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (final IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        final URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "227", "src_id": "M942", "code": "\n    public void schedule(final WorkRequest workRequest, final long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        final ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work\n        // directly.\n        final int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                final int workerNum = ((int) (id % size) + size) % size;\n                final ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (final RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "228", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        final boolean triedToClose = false;\n        boolean success = false;\n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            final boolean triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                final boolean renamed = tmpFile.renameTo(origFile);\n                if (!renamed) {\n                    // On windows, renameTo does not replace.\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    // If we failed when flushing, try to close it to not leak\n                    // an FD\n                    IOUtils.closeStream(out);\n                }\n                // close wasn't successful, try to delete the tmp file\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "229", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n        try {\n            try {\n                while (true) {\n                    final String line = in.readLine();\n                    if (line == null) {\n                        break;\n                    }\n\n                    final Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            final LogEntry e = new Log4JEntry(\n                                    src.timestampFromText(dateformat, buf),\n                                    src.getServerId(),\n                                    buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n            } catch (final EOFException eof) {\n                // ignore, we've simply come to the end of the file\n            }\n            if (buf.length() > 0) {\n                final LogEntry e = new Log4JEntry(\n                        src.timestampFromText(dateformat, buf),\n                        src.getServerId(),\n                        buf);\n                buf = \"\";\n                return e;\n            }\n        } catch (final Exception e) {\n            LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n            return null;\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "230", "src_id": "M478", "code": "\n    public static void main(final String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n\n        final String host = args[0];\n        final int port = Integer.parseInt(args[1]);\n        final String op = args[2];\n\n        if (op.equalsIgnoreCase(\"gettracemask\")) {\n            getTraceMask(host, port);\n        } else if (op.equalsIgnoreCase(\"settracemask\")) {\n            setTraceMask(host, port, args[3]);\n        } else if (op.equalsIgnoreCase(\"ruok\")) {\n            ruok(host, port);\n        } else if (op.equalsIgnoreCase(\"kill\")) {\n            kill(host, port);\n        } else if (op.equalsIgnoreCase(\"stat\")) {\n            stat(host, port);\n        } else if (op.equalsIgnoreCase(\"dump\")) {\n            dump(host, port);\n        } else {\n            System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "231", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            // Check if the operation was interrupted\n            if (err instanceof InterruptedIOException \n                    || err instanceof ClosedByInterruptException \n                    || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            // Set error code if not already set\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        // Handle errors if any occurred\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "232", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "233", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        // Check version\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        // Read entry count\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        // Process based on version\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "234", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            // Determine range start position\n            long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            // Establish connection\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            // Workaround: bypass android connection pool on first attempt\n            if (mRetryCount == 0 && rangeStart == -1) {\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // Check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // Secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            // Reset download progress if needed\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // Restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            // Prepare file stream and position\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            // Download data\n            byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // If thread goes interrupted check if the last part is written\n            // This avoids re-downloading the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // For youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            // Try again\n            run();\n            return;\n        }\n\n        // Finalize download\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "235", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        // Return early if no data to flush\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        // Position file pointers\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        // Copy data from auxiliary to output\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        // Update offset positions based on underflow condition\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // Calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        // Update max length if needed\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        // Handle remaining data in auxiliary file\n        if (amount < aux.length) {\n            // Move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        // Truncate auxiliary file if it's too large\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "236", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(\n                mContext,\n                new ErrorInfo(\n                        ErrorInfo.Companion.throwableToStringList(mission.errObject),\n                        action,\n                        service,\n                        request.toString(),\n                        reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "237", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // Create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // Nothing to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "238", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            byte[] buffer = new byte[8 * 1024];\n            int read;\n            \n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            \n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\n                \"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "239", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        // Handle initialization thread\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        // Interrupt all active threads except current thread\n        for (Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        // Join all active threads\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                \n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                \n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "240", "src_id": "M66", "code": "\n    void drain() {\n        if (getAndIncrement() != 0) {\n            return;\n        }\n\n        int missed = 1;\n        Observer<? super R> downstream = this.downstream;\n        AtomicThrowable errors = this.errors;\n        AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n        for (;;) {\n            for (;;) {\n                // Check if operation was cancelled\n                if (cancelled) {\n                    return;\n                }\n\n                // Handle errors based on error delay configuration\n                if (errors.get() != null) {\n                    if (!delayErrors) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n                }\n\n                boolean d = done;\n                SwitchMapMaybeObserver<R> current = inner.get();\n                boolean empty = current == null;\n\n                // If done and no current observer, terminate with any errors\n                if (d && empty) {\n                    errors.tryTerminateConsumer(downstream);\n                    return;\n                }\n\n                // Break inner loop if no item to process\n                if (empty || current.item == null) {\n                    break;\n                }\n\n                // Clear the current observer and emit its item\n                inner.compareAndSet(current, null);\n                downstream.onNext(current.item);\n            }\n\n            // Manage the missed counter for work coordination\n            missed = addAndGet(-missed);\n            if (missed == 0) {\n                break;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "241", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            \n            boolean b;\n            \n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "242", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            \n            for (;;) {\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n                    \n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n                    \n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n                    \n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n                    \n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n                    \n                    if (empty) {\n                        break;\n                    }\n                    \n                    actual.onNext(v);\n                }\n                \n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "243", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                // Handle upstream cancellation case\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    // Check for terminal conditions and process queue items\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    // Handle terminal state with empty queue\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            // Propagate error to window and downstream\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            // Complete window and downstream normally\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        // Process non-empty queue\n                        if (o instanceof WindowBoundaryRunnable) {\n                            // Handle window boundary event\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            // Process regular item\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            // Check if we've reached max size for the window\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n\n                        continue;\n                    }\n                }\n\n                // Check if we should continue draining\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "244", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    // Check if operation was cancelled\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    // Check first observer's status\n                    boolean d1 = observer1.done;\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    // Check second observer's status\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    // Get values from queues if needed\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    // Both streams are done and empty - they're equal\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n\n                    // Both streams are done but one has more items than the other\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    // Compare values if both queues have items\n                    if (!e1 && !e2) {\n                        boolean c;\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        // Items don't match\n                        if (!c) {\n                            cancel(q1, q2);\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        // Items match, clear them for next iteration\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    // If either queue is empty, break inner loop\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                // Check if we should continue processing\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "245", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    // Check for cancellation\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    // Check for errors\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    // Check if all queues are empty\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    // Complete if done and all queues are empty\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                // Update requested count if items were emitted\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                // Check if we should continue the drain loop\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "246", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    // Check for errors if not in END mode\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        // Process the queue while respecting request amount\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            // Handle errors in IMMEDIATE mode\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            // If inner source is done and queue is empty, move to next source\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            // Emit the item\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        // Check completion condition after delivering requested amount\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            // Handle errors in IMMEDIATE mode\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            // If inner source is done and queue is empty, move to next source\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                // Adjust the request counter\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                // Exit loop if no more work\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "247", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            // Find the index of the consumer\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            // If consumer not found, return\n            if (j < 0) {\n                return;\n            }\n\n            // Create new array without the consumer\n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            // Try to update the observers array\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "248", "src_id": "M362", "code": "\n    void drainFused() {\n        int missed = 1;\n\n        for (;;) {\n            if (disposed) {\n                return;\n            }\n\n            boolean d = done;\n            Throwable ex = error;\n\n            // Handle error case with higher priority if not delaying errors\n            if (!delayError && d && ex != null) {\n                disposed = true;\n                downstream.onError(error);\n                worker.dispose();\n                return;\n            }\n\n            // Emit the item to downstream\n            downstream.onNext(null);\n\n            // Check for completion after emission\n            if (d) {\n                disposed = true;\n                ex = error;\n                if (ex != null) {\n                    downstream.onError(ex);\n                } else {\n                    downstream.onComplete();\n                }\n                worker.dispose();\n                return;\n            }\n\n            // Manage the request accounting\n            missed = addAndGet(-missed);\n            if (missed == 0) {\n                break;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "249", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            \n            // Find the subscription in the array\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            // If subscription not found, return\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            // Create new array without the subscription\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            \n            // Try to update the subscribers atomically\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "250", "src_id": "M342", "code": "\n    private static String convertEmlToHtmlBasic(byte[] emlBytes, EmlToPdfRequest request) {\n      if (emlBytes == null || emlBytes.length == 0) {\n        throw new IllegalArgumentException(\"EML file is empty or null\");\n      }\n\n      String emlContent = new String(emlBytes, StandardCharsets.UTF_8);\n\n      // Basic email parsing\n      String subject = extractBasicHeader(emlContent, \"Subject:\");\n      String from = extractBasicHeader(emlContent, \"From:\");\n      String to = extractBasicHeader(emlContent, \"To:\");\n      String cc = extractBasicHeader(emlContent, \"Cc:\");\n      String bcc = extractBasicHeader(emlContent, \"Bcc:\");\n      String date = extractBasicHeader(emlContent, \"Date:\");\n\n      // Try to extract HTML content\n      String htmlBody = extractHtmlBody(emlContent);\n      if (htmlBody == null) {\n        String textBody = extractTextBody(emlContent);\n        htmlBody = convertTextToHtml(textBody != null ? textBody : \"Email content could not be parsed\");\n      }\n\n      // Generate HTML with custom styling based on request\n      StringBuilder html = new StringBuilder();\n      html.append(\"<!DOCTYPE html>\\n\");\n      html.append(\"<html><head><meta charset=\\\"UTF-8\\\">\\n\");\n      html.append(\"<title>\").append(escapeHtml(subject)).append(\"</title>\\n\");\n      html.append(\"<style>\\n\");\n      appendEnhancedStyles(html);\n      html.append(\"</style>\\n\");\n      html.append(\"</head><body>\\n\");\n\n      html.append(\"<div class=\\\"email-container\\\">\\n\");\n      html.append(\"<div class=\\\"email-header\\\">\\n\");\n      html.append(\"<h1>\").append(escapeHtml(subject)).append(\"</h1>\\n\");\n      html.append(\"<div class=\\\"email-meta\\\">\\n\");\n      html.append(\"<div><strong>From:</strong> \").append(escapeHtml(from)).append(\"</div>\\n\");\n      html.append(\"<div><strong>To:</strong> \").append(escapeHtml(to)).append(\"</div>\\n\");\n\n      // Include CC and BCC if present and requested\n      if (request != null && request.isIncludeAllRecipients()) {\n        if (!cc.trim().isEmpty()) {\n          html.append(\"<div><strong>CC:</strong> \").append(escapeHtml(cc)).append(\"</div>\\n\");\n        }\n        if (!bcc.trim().isEmpty()) {\n          html.append(\"<div><strong>BCC:</strong> \").append(escapeHtml(bcc)).append(\"</div>\\n\");\n        }\n      }\n\n      if (!date.trim().isEmpty()) {\n        html.append(\"<div><strong>Date:</strong> \").append(escapeHtml(date)).append(\"</div>\\n\");\n      }\n      html.append(\"</div></div>\\n\");\n\n      html.append(\"<div class=\\\"email-body\\\">\\n\");\n      html.append(processEmailHtmlBody(htmlBody));\n      html.append(\"</div>\\n\");\n\n      // Add attachment information - always check for and display attachments\n      String attachmentInfo = extractAttachmentInfo(emlContent);\n      if (!attachmentInfo.isEmpty()) {\n        html.append(\"<div class=\\\"attachment-section\\\">\\n\");\n        html.append(\"<h3>Attachments</h3>\\n\");\n        html.append(attachmentInfo);\n\n        // Add a status message about attachment inclusion\n        if (request != null && request.isIncludeAttachments()) {\n          html.append(\"<div class=\\\"attachment-inclusion-note\\\">\\n\");\n          html.append(\"<p><strong>Note:</strong> Attachments are saved as external files and linked in this PDF. Click the links to open files externally.</p>\\n\");\n          html.append(\"</div>\\n\");\n        } else {\n          html.append(\"<div class=\\\"attachment-info-note\\\">\\n\");\n          html.append(\"<p><em>Attachment information displayed - files not included in PDF. Enable 'Include attachments' to embed files.</em></p>\\n\");\n          html.append(\"</div>\\n\");\n        }\n\n        html.append(\"</div>\\n\");\n      }\n\n      // Show advanced features status if requested\n      assert request != null;\n      if (request.getFileInput().isEmpty()) {\n        html.append(\"<div class=\\\"advanced-features-notice\\\">\\n\");\n        html.append(\"<p><em>Note: Some advanced features require Jakarta Mail dependencies.</em></p>\\n\");\n        html.append(\"</div>\\n\");\n      }\n\n      html.append(\"</div>\\n\");\n      html.append(\"</body></html>\");\n\n      return html.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "251", "src_id": "M371", "code": "\n    private static boolean isValidJakartaMailMultipart(Object multipart) {\n      if (multipart == null) return false;\n\n      try {\n        // Check if the object implements jakarta.mail.Multipart interface\n        Class<?> multipartInterface = Class.forName(\"jakarta.mail.Multipart\");\n        if (!multipartInterface.isInstance(multipart)) {\n          return false;\n        }\n\n        // Additional check for MimeMultipart\n        try {\n          Class<?> mimeMultipartClass = Class.forName(\"jakarta.mail.internet.MimeMultipart\");\n          if (mimeMultipartClass.isInstance(multipart)) {\n            log.debug(\"Found MimeMultipart instance for enhanced processing\");\n            return true;\n          }\n        } catch (ClassNotFoundException e) {\n          log.debug(\"MimeMultipart not available, using base Multipart interface\");\n        }\n\n        return true;\n      } catch (ClassNotFoundException e) {\n        log.debug(\"Jakarta Mail Multipart interface not available for validation\");\n        return false;\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "252", "src_id": "M348", "code": "\n    private static String extractBasicHeader(String emlContent, String headerName) {\n      try {\n        String[] lines = emlContent.split(\"\\r?\\n\");\n        for (int i = 0; i < lines.length; i++) {\n          String line = lines[i];\n          if (line.toLowerCase().startsWith(headerName.toLowerCase())) {\n            StringBuilder value = new StringBuilder(line.substring(headerName.length()).trim());\n            // Handle multi-line headers\n            for (int j = i + 1; j < lines.length; j++) {\n              if (lines[j].startsWith(\" \") || lines[j].startsWith(\"\\t\")) {\n                value.append(\" \").append(lines[j].trim());\n              } else {\n                break;\n              }\n            }\n            // Apply MIME header decoding\n            return safeMimeDecode(value.toString());\n          }\n          if (line.trim().isEmpty()) break;\n        }\n      } catch (RuntimeException e) {\n        log.warn(\"Error extracting header '{}': {}\", headerName, e.getMessage());\n      }\n      return \"\";\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "253", "src_id": "M364", "code": "\n    private static void addAttachmentAnnotationsToDocument(\n            PDDocument document, List<EmailAttachment> attachments) throws IOException {\n      if (document.getNumberOfPages() == 0 || attachments == null || attachments.isEmpty()) {\n        return;\n      }\n\n      // 1. Find the screen position of all attachment markers\n      AttachmentMarkerPositionFinder finder = new AttachmentMarkerPositionFinder();\n      finder.setSortByPosition(true); // Process pages in order\n      finder.getText(document);\n      List<MarkerPosition> markerPositions = finder.getPositions();\n\n      // 2. Warn if the number of markers and attachments don't match\n      if (markerPositions.size() != attachments.size()) {\n        log.warn(\n            \"Found {} attachment markers, but there are {} attachments. Annotation count may be incorrect.\",\n            markerPositions.size(),\n            attachments.size());\n      }\n\n      // 3. Create an invisible annotation over each found marker\n      int annotationsToAdd = Math.min(markerPositions.size(), attachments.size());\n      for (int i = 0; i < annotationsToAdd; i++) {\n        MarkerPosition position = markerPositions.get(i);\n        EmailAttachment attachment = attachments.get(i);\n\n        if (attachment.getEmbeddedFilename() != null) {\n          PDPage page = document.getPage(position.getPageIndex());\n          addAttachmentAnnotationToPage(\n              document, page, attachment, position.getX(), position.getY());\n        }\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "254", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "255", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "256", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "257", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "258", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    boolean d1 = observer1.done;\n\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "259", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "260", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "261", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            \n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "262", "src_id": "M362", "code": "\n    void drainFused() {\n        int missed = 1;\n\n        for (;;) {\n            if (disposed) {\n                return;\n            }\n\n            boolean d = done;\n            Throwable ex = error;\n\n            if (!delayError && d && ex != null) {\n                disposed = true;\n                downstream.onError(error);\n                worker.dispose();\n                return;\n            }\n\n            downstream.onNext(null);\n\n            if (d) {\n                disposed = true;\n                ex = error;\n                if (ex != null) {\n                    downstream.onError(ex);\n                } else {\n                    downstream.onComplete();\n                }\n                worker.dispose();\n                return;\n            }\n\n            missed = addAndGet(-missed);\n            if (missed == 0) {\n                break;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "263", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "264", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n            } catch (ClassNotFoundException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InstantiationException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (IllegalAccessException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InvocationTargetException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "265", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                \n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "266", "src_id": "M219", "code": "\n   public static synchronized ZooKeeper getClient(String contextPath,\n           String session, int expireTime) throws IOException {\n       final String connectionId = concat(contextPath, session);\n\n       ZooKeeper zk = zkMap.get(connectionId);\n       if (zk == null) {\n           if (LOG.isInfoEnabled()) {\n               LOG.info(String.format(\"creating new \"\n                       + \"connection for : '%s'\", connectionId));\n           }\n           Endpoint e = contextMap.get(contextPath);\n           zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(\n                   connectionId));\n           \n           for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n               zk.addAuthInfo(\"digest\", String.format(\"%s:%s\", p.getKey(),\n                       p.getValue()).getBytes());\n           }\n           \n           zkMap.put(connectionId, zk);\n\n           // a session should automatically expire after an amount of time\n           if (session != null) {\n               zkSessionTimers.put(connectionId, new SessionTimerTask(\n                       expireTime, session, contextPath, timer));\n           }\n       }\n       return zk;\n   }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "267", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        File f = new File(file);\n        RandomAccessFileReader in = new RandomAccessFileReader(f);\n        SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n        Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n        long lastFp = in.getPosition();\n        String line = in.readLine();\n        Matcher m = null;\n\n        // if we have read data from the file, and it matches the timep pattern\n        if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n            starttime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. First line doesn't start with time\");\n        }\n\n        /*\n          Count number of log entries. Any line starting with a timestamp counts as an entry\n        */\n        String lastentry = line;\n        try {\n            while (line != null) {\n                m = timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (size % skipN == 0) {\n                        long time = timestampFromText(dateformat, m.group(1));\n                        skiplist.addMark(time, lastFp, size);\n                    }\n                    size++;\n                    lastentry = line;\n                } \n                if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                    serverid = Integer.valueOf(m.group(1));\n                }\n\n                lastFp = in.getPosition();\n                line = in.readLine();\n            }\n        } catch (EOFException eof) {\n            // ignore, simply end of file, though really (line!=null) should have caught this\n        } finally {\n            in.close();\n        }\n\n        m = timep.matcher(lastentry);\n        if (m.lookingAt()) {\n            endtime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "268", "src_id": "M235", "code": "\n    @POST\n    @Produces( { MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        // establish the connection to the ZooKeeper cluster\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "269", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work\n        // directly.\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "270", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false;\n        boolean success = false;\n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                boolean renamed = tmpFile.renameTo(origFile);\n                if (!renamed) {\n                    // On windows, renameTo does not replace.\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    // If we failed when flushing, try to close it to not leak\n                    // an FD\n                    IOUtils.closeStream(out);\n                }\n                // close wasn't successful, try to delete the tmp file\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "271", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n        try {\n            try {\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) {\n                        break;\n                    }\n\n                    Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n            } catch (EOFException eof) {\n                // ignore, we've simply come to the end of the file\n            }\n            if (buf.length() > 0) {\n                LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                buf = \"\";\n                return e;\n            }\n        } catch (Exception e) {\n            LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n            return null;\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "272", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2];\n        \n        if (op.equalsIgnoreCase(\"gettracemask\")) {\n            getTraceMask(host, port);\n        } else if (op.equalsIgnoreCase(\"settracemask\")) {\n            setTraceMask(host, port, args[3]);\n        } else if (op.equalsIgnoreCase(\"ruok\")) {\n            ruok(host, port);\n        } else if (op.equalsIgnoreCase(\"kill\")) {\n            kill(host, port);\n        } else if (op.equalsIgnoreCase(\"stat\")) {\n            stat(host, port);\n        } else if (op.equalsIgnoreCase(\"dump\")) {\n            dump(host, port);\n        } else {\n            System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "273", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException \n                || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "274", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n      int statusCode = conn.getResponseCode();\n\n      if (DEBUG) {\n        Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n        Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n        Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n        Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n      }\n\n      switch (statusCode) {\n        case 204:\n        case 205:\n        case 207:\n          throw new HttpError(statusCode);\n        case 416:\n          return; // let the download thread handle this error\n        default:\n          if (statusCode < 200 || statusCode > 299) {\n            throw new HttpError(statusCode);\n          }\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "275", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n      final Box b = untilBox(ref, ATOM_ELST);\n      if (b == null) {\n        return null;\n      }\n\n      final Elst obj = new Elst();\n\n      final boolean v1 = stream.read() == 1;\n      stream.skipBytes(3); // flags\n\n      final int entryCount = stream.readInt();\n      if (entryCount < 1) {\n        obj.bMediaRate = 0x00010000; // default media rate (1.0)\n        return obj;\n      }\n\n      if (v1) {\n        stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n        obj.mediaTime = stream.readLong();\n        // ignore all remain entries\n        stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n      } else {\n        stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n        obj.mediaTime = stream.readInt();\n      }\n\n      obj.bMediaRate = stream.readInt();\n\n      return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "276", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n      boolean done;\n      long start = mMission.fallbackResumeOffset;\n\n      if (DEBUG && !mMission.unknownLength && start > 0) {\n        Log.i(TAG, \"Resuming a single-thread download at \" + start);\n      }\n\n      try {\n        long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n        int mId = 1;\n        mConn = mMission.openConnection(false, rangeStart, -1);\n\n        if (mRetryCount == 0 && rangeStart == -1) {\n          // workaround: bypass android connection pool\n          mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n        }\n\n        mMission.establishConnection(mId, mConn);\n\n        // check if the download can be resumed\n        if (mConn.getResponseCode() == 416 && start > 0) {\n          mMission.notifyProgress(-start);\n          start = 0;\n          mRetryCount--;\n          throw new DownloadMission.HttpError(416);\n        }\n\n        // secondary check for the file length\n        if (!mMission.unknownLength) {\n          mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n        }\n\n        if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n          // restart amount of bytes downloaded\n          mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n        }\n\n        mF = mMission.storage.getStream();\n        mF.seek(mMission.offsets[mMission.current] + start);\n\n        mIs = mConn.getInputStream();\n\n        byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n        int len = 0;\n\n        while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n          mF.write(buf, 0, len);\n          start += len;\n          mMission.notifyProgress(len);\n        }\n\n        dispose();\n\n        // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n        done = len == -1;\n      } catch (Exception e) {\n        dispose();\n\n        mMission.fallbackResumeOffset = start;\n\n        if (!mMission.running || e instanceof ClosedByInterruptException) return;\n\n        if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n          // for youtube streams. The url has expired, recover\n          dispose();\n          mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n          return;\n        }\n\n        if (mRetryCount++ >= mMission.maxRetry) {\n          mMission.notifyError(e);\n          return;\n        }\n\n        if (DEBUG) {\n          Log.e(TAG, \"got exception, retrying...\", e);\n        }\n\n        run(); // try again\n        return;\n      }\n\n      if (done) {\n        mMission.notifyFinished();\n      } else {\n        mMission.fallbackResumeOffset = start;\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "277", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n      if (aux.length < 1) {\n        return;\n      }\n\n      out.flush();\n      aux.flush();\n\n      boolean underflow = aux.offset < aux.length || out.offset < out.length;\n      byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n      aux.target.seek(0);\n      out.target.seek(out.length);\n\n      long length = amount;\n      while (length > 0) {\n        int read = (int) Math.min(length, Integer.MAX_VALUE);\n        read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n        if (read < 1) {\n          amount -= length;\n          break;\n        }\n\n        out.writeProof(buffer, read);\n        length -= read;\n      }\n\n      if (underflow) {\n        if (out.offset >= out.length) {\n          // calculate the aux underflow pointer\n          if (aux.offset < amount) {\n            out.offset += aux.offset;\n            aux.offset = 0;\n            out.target.seek(out.offset);\n          } else {\n            aux.offset -= amount;\n            out.offset = out.length + amount;\n          }\n        } else {\n          aux.offset = 0;\n        }\n      } else {\n        out.offset += amount;\n        aux.offset -= amount;\n      }\n\n      out.length += amount;\n\n      if (out.length > maxLengthKnown) {\n        maxLengthKnown = out.length;\n      }\n\n      if (amount < aux.length) {\n        // move the excess data to the beginning of the file\n        long readOffset = amount;\n        long writeOffset = 0;\n\n        aux.length -= amount;\n        length = aux.length;\n        while (length > 0) {\n          int read = (int) Math.min(length, Integer.MAX_VALUE);\n          read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n          aux.target.seek(writeOffset);\n          aux.writeProof(buffer, read);\n\n          writeOffset += read;\n          readOffset += read;\n          length -= read;\n\n          aux.target.seek(readOffset);\n        }\n\n        aux.target.setLength(aux.length);\n        return;\n      }\n\n      if (aux.length > THRESHOLD_AUX_LENGTH) {\n        aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n      }\n\n      aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "278", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(mContext,\n                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action,\n                        service, request.toString(), reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "279", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "280", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n      // check if the subtitle is already in srt and copy, this should never happen\n      String format = getArgumentAt(0, null);\n      boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n      if (format == null || format.equals(\"ttml\")) {\n        SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n        try {\n          writer.build(sources[0]);\n        } catch (Exception err) {\n          Log.e(TAG, \"subtitle parse failed\", err);\n          return err instanceof IOException ? 1 : 8;\n        }\n\n        return OK_RESULT;\n      } else if (format.equals(\"srt\")) {\n        byte[] buffer = new byte[8 * 1024];\n        int read;\n        while ((read = sources[0].read(buffer)) > 0) {\n          out.write(buffer, 0, read);\n        }\n        return OK_RESULT;\n      }\n\n      throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "281", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) continue;\n            thread.interrupt();\n        }\n\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) continue;\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "282", "src_id": "M66", "code": "\nvoid drain() {\n  if (getAndIncrement() != 0) {\n    return;\n  }\n\n  int missed = 1;\n  Observer<? super R> downstream = this.downstream;\n  AtomicThrowable errors = this.errors;\n  AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n  for (;;) {\n\n    for (;;) {\n      if (cancelled) {\n        return;\n      }\n\n      if (errors.get() != null) {\n        if (!delayErrors) {\n          errors.tryTerminateConsumer(downstream);\n          return;\n        }\n      }\n\n      boolean d = done;\n      SwitchMapMaybeObserver<R> current = inner.get();\n      boolean empty = current == null;\n\n      if (d && empty) {\n        errors.tryTerminateConsumer(downstream);\n        return;\n      }\n\n      if (empty || current.item == null) {\n        break;\n      }\n\n      inner.compareAndSet(current, null);\n\n      downstream.onNext(current.item);\n    }\n\n    missed = addAndGet(-missed);\n    if (missed == 0) {\n      break;\n    }\n  }\n}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "283", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) return;\n            \n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "284", "src_id": "M522", "code": "\n    void drainLoop() {\n      Observer<? super T> actual = this.downstream;\n      int missed = 1;\n      for (;;) {\n\n        for (;;) {\n          if (disposed) {\n            singleItem = null;\n            queue = null;\n            return;\n          }\n\n          if (errors.get() != null) {\n            singleItem = null;\n            queue = null;\n            errors.tryTerminateConsumer(actual);\n            return;\n          }\n\n          int os = otherState;\n          if (os == OTHER_STATE_HAS_VALUE) {\n            T v = singleItem;\n            singleItem = null;\n            otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n            os = OTHER_STATE_CONSUMED_OR_EMPTY;\n            actual.onNext(v);\n          }\n\n          boolean d = mainDone;\n          SimplePlainQueue<T> q = queue;\n          T v = q != null ? q.poll() : null;\n          boolean empty = v == null;\n\n          if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n            queue = null;\n            actual.onComplete();\n            return;\n          }\n\n          if (empty) {\n            break;\n          }\n\n          actual.onNext(v);\n        }\n\n        missed = addAndGet(-missed);\n        if (missed == 0) {\n          break;\n        }\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "285", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "286", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    boolean d1 = observer1.done;\n\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "287", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "288", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "289", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            \n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "290", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            for (;;) {\n                if (disposed) {\n                    return;\n                }\n\n                boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) {\n                        downstream.onError(ex);\n                    } else {\n                        downstream.onComplete();\n                    }\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "291", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n      for (;;) {\n        PublishSubscription<T>[] a = subscribers.get();\n        if (a == TERMINATED || a == EMPTY) {\n          return;\n        }\n\n        int n = a.length;\n        int j = -1;\n        for (int i = 0; i < n; i++) {\n          if (a[i] == ps) {\n            j = i;\n            break;\n          }\n        }\n\n        if (j < 0) {\n          return;\n        }\n\n        PublishSubscription<T>[] b;\n\n        if (n == 1) {\n          b = EMPTY;\n        } else {\n          b = new PublishSubscription[n - 1];\n          System.arraycopy(a, 0, b, 0, j);\n          System.arraycopy(a, j + 1, b, j, n - j - 1);\n        }\n        if (subscribers.compareAndSet(a, b)) {\n          return;\n        }\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "292", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n      String requestBody =\n              String.format(\n                      \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                      licenseKey, machineFingerprint);\n      HttpRequest request =\n              HttpRequest.newBuilder()\n                      .uri(\n                              URI.create(\n                                      BASE_URL\n                                              + \"/\"\n                                              + ACCOUNT_ID\n                                              + \"/licenses/actions/validate-key\"))\n                      .header(\"Content-Type\", \"application/vnd.api+json\")\n                      .header(\"Accept\", \"application/vnd.api+json\")\n                      // .header(\"Authorization\", \"License \" + licenseKey)\n                      .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                      .build();\n\n      HttpResponse<String> response =\n              httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n      log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n      JsonNode jsonResponse = objectMapper.readTree(response.body());\n      if (response.statusCode() == 200) {\n        JsonNode metaNode = jsonResponse.path(\"meta\");\n        boolean isValid = metaNode.path(\"valid\").asBoolean();\n\n        String detail = metaNode.path(\"detail\").asText();\n        String code = metaNode.path(\"code\").asText();\n\n        log.info(\"License validity: {}\", isValid);\n        log.info(\"Validation detail: {}\", detail);\n        log.info(\"Validation code: {}\", code);\n\n        // Check if the license itself has floating attribute\n        JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n        if (!licenseAttrs.isMissingNode()) {\n          context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n          context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n\n          log.info(\n                  \"License floating (from license): {}, maxMachines: {}\",\n                  context.isFloatingLicense,\n                  context.maxMachines);\n        }\n\n        // Also check the policy for floating license support if included\n        JsonNode includedNode = jsonResponse.path(\"included\");\n        JsonNode policyNode = null;\n\n        if (includedNode.isArray()) {\n          for (JsonNode node : includedNode) {\n            if (\"policies\".equals(node.path(\"type\").asText())) {\n              policyNode = node;\n              break;\n            }\n          }\n        }\n\n        if (policyNode != null) {\n          // Check if this is a floating license from policy\n          boolean policyFloating =\n                  policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n          int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n          // Policy takes precedence over license attributes\n          if (policyFloating) {\n            context.isFloatingLicense = true;\n            context.maxMachines = policyMaxMachines;\n          }\n\n          log.info(\n                  \"License floating (from policy): {}, maxMachines: {}\",\n                  context.isFloatingLicense,\n                  context.maxMachines);\n        }\n\n        // Extract user count, default to 1 if not specified\n        int users =\n                jsonResponse\n                        .path(\"data\")\n                        .path(\"attributes\")\n                        .path(\"metadata\")\n                        .path(\"users\")\n                        .asInt(1);\n        applicationProperties.getPremium().setMaxUsers(users);\n\n        // Extract isEnterprise flag\n        context.isEnterpriseLicense =\n                jsonResponse\n                        .path(\"data\")\n                        .path(\"attributes\")\n                        .path(\"metadata\")\n                        .path(\"isEnterprise\")\n                        .asBoolean(false);\n\n        log.debug(applicationProperties.toString());\n\n      } else {\n        log.error(\"Error validating license. Status code: {}\", response.statusCode());\n      }\n      return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "293", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description =\n                    \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\"\n                            + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)\n            throws Exception {\n      MultipartFile inputFile = generalFile.getFileInput();\n      // unused but can start server instance if startup time is to long\n      // LibreOfficeListener.getInstance().start();\n      File file = null;\n      try {\n        file = convertToPdf(inputFile);\n\n        PDDocument doc = pdfDocumentFactory.load(file);\n        return WebResponseUtils.pdfDocToWebResponse(\n            doc,\n            Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                            .replaceFirst(\"[.][^.]+$\", \"\")\n                    + \"_convertedToPDF.pdf\");\n      } finally {\n        if (file != null) file.delete();\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "294", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n        MultipartFile inputFile = request.getFileInput();\n        boolean readonly = true;\n        \n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            // Metadata using PDFBox\n            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            ObjectNode metadata = objectMapper.createObjectNode();\n            ObjectNode basicInfo = objectMapper.createObjectNode();\n            ObjectNode docInfoNode = objectMapper.createObjectNode();\n            ObjectNode compliancy = objectMapper.createObjectNode();\n            ObjectNode encryption = objectMapper.createObjectNode();\n            ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            // Total file size of the PDF\n            long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            // Number of words, paragraphs, and images in the entire document\n            String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            String[] words = fullText.split(\"\\\\s+\");\n            int wordCount = words.length;\n            int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            // Number of characters in the entire document (including spaces and special characters)\n            int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            // Initialize the flags and types\n            boolean hasCompression = false;\n            String compressionType = \"None\";\n\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) basicInfo.put(\"CompressionType\", compressionType);\n\n            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            String pageMode = catalog.getPageMode().name();\n\n            // Document Information using PDFBox\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n\n            ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            // Generate structured summary data about PDF characteristics\n            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            // embeed files TODO size\n            if (catalog.getNames() != null) {\n                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n\n                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength()); // size in bytes\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            // attachments TODO size\n            ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            // Javascript\n            PDDocumentNameDictionary namesDict = catalog.getNames();\n            ArrayNode javascriptArray = objectMapper.createArrayNode();\n\n            if (namesDict != null) {\n                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n\n                            PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            // TODO size\n            PDOptionalContentProperties ocProperties = pdfBoxDoc.getDocumentCatalog().getOCProperties();\n            ArrayNode layersArray = objectMapper.createArrayNode();\n\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            other.set(\"Layers\", layersArray);\n\n            // TODO Security\n\n            PDStructureTreeRoot structureTreeRoot = pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                log.error(\"exception\", e);\n            }\n\n            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            boolean isPdfBCompliant = checkForStandard(pdfBoxDoc, \"PDF/B\"); // If you want to check for PDF/Broadcast, though this isn't an official ISO standard.\n            boolean isPdfSECCompliant = checkForStandard(pdfBoxDoc, \"PDF/SEC\"); // This might not be effective since PDF/SEC was under development in 2021.\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();\n            ArrayNode bookmarksArray = objectMapper.createArrayNode();\n\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();\n\n            String xmpString = null;\n\n            if (pdMetadata != null) {\n                try {\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        DomXmpParser domXmpParser = new DomXmpParser();\n                        XMPMetadata xmpMeta = domXmpParser.parse(is);\n\n                        ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    }\n                } catch (XmpParsingException e) {\n                    // XMP parsing failed, try to read raw metadata instead\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n\n                // Retrieve encryption details using getEncryption()\n                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n                // Add other encryption-related properties as needed\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                ObjectNode pageInfo = objectMapper.createObjectNode();\n\n                // Retrieve the page\n                PDPage page = pdfBoxDoc.getPage(pageNum);\n\n                // Page-level Information\n                PDRectangle mediaBox = page.getMediaBox();\n\n                float width = mediaBox.getWidth();\n                float height = mediaBox.getHeight();\n\n                ObjectNode sizeInfo = objectMapper.createObjectNode();\n\n                getDimensionInfo(sizeInfo, width, height);\n\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                // Boxes\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n\n                // Assuming the following boxes are defined for your document; if not, you may get null values.\n                PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n\n                PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n\n                PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n\n                PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                // Content Extraction\n                PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                String pageText = textStripper.getText(pdfBoxDoc);\n\n                pageInfo.put(\"Text Characters Count\", pageText.length()); //\n\n                // Annotations\n                List<PDAnnotation> annotations = page.getAnnotations();\n\n                int subtypeCount = 0;\n                int contentsCount = 0;\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) {\n                        subtypeCount++; // Increase subtype count\n                    }\n                    if (annotation.getContents() != null) {\n                        contentsCount++; // Increase contents count\n                    }\n                }\n\n                ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                // Images (simplified)\n                // This part is non-trivial as images can be embedded in multiple ways in a PDF.\n                // Here is a basic structure to recognize image XObjects on a page.\n                ArrayNode imagesArray = objectMapper.createArrayNode();\n                PDResources resources = page.getResources();\n\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                // Links\n                ArrayNode linksArray = objectMapper.createArrayNode();\n                Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            String uri = uriAction.getURI();\n                            uniqueURIs.add(uri); // Add to set to ensure uniqueness\n                        }\n                    }\n                }\n\n                // Add unique URIs to linksArray\n                for (String uri : uniqueURIs) {\n                    ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                // Fonts\n                ArrayNode fontsArray = objectMapper.createArrayNode();\n                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n\n                for (COSName fontName : resources.getFontNames()) {\n                    PDFont font = resources.getFont(fontName);\n                    ObjectNode fontNode = objectMapper.createObjectNode();\n\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n\n                    // PDFBox provides Font's BaseFont (i.e., the font name) directly\n                    fontNode.put(\"Name\", font.getName());\n\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        // Font stretch and BBox are not directly available in PDFBox's API, so these are omitted for simplicity\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    // Create a unique key for this font node based on its attributes\n                    String uniqueKey = fontNode.toString();\n\n                    // Increment count if this font exists, or initialize it if new\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n\n                // Add unique font entries to fontsArray\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                // Access resources dictionary\n                ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n\n                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        PDStream iccData = iccBased.getPDStream();\n                        byte[] iccBytes = iccData.toByteArray();\n\n                        // TODO: Further decode and analyze the ICC data if needed\n                        ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                // Other XObjects\n                Map<String, Integer> xObjectCountMap = new HashMap<>(); // To store the count for each type\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    String xObjectType;\n\n                    if (xObject instanceof PDImageXObject) {\n                        xObjectType = \"Image\";\n                    } else if (xObject instanceof PDFormXObject) {\n                        xObjectType = \"Form\";\n                    } else {\n                        xObjectType = \"Other\";\n                    }\n\n                    // Increment the count for this type in the map\n                    xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n\n                // Add the count map to pageInfo (or wherever you want to store it)\n                ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                ArrayNode multimediaArray = objectMapper.createArrayNode();\n\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        // Extract details from the annotation as needed\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            // Save JSON to file\n            String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n\n            return WebResponseUtils.bytesToWebResponse(\n                jsonString.getBytes(StandardCharsets.UTF_8),\n                \"response.json\",\n                MediaType.APPLICATION_JSON);\n\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "295", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n      try {\n        String encodedPayload = licenseFile;\n        // Remove the header\n        encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n        // Remove the footer\n        encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n        // Remove all newlines\n        encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n        byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n        String payload = new String(payloadBytes);\n\n        log.info(\"Decoded certificate payload: {}\", payload);\n\n        String encryptedData = \"\";\n        String encodedSignature = \"\";\n        String algorithm = \"\";\n\n        try {\n          JSONObject attrs = new JSONObject(payload);\n          encryptedData = (String) attrs.get(\"enc\");\n          encodedSignature = (String) attrs.get(\"sig\");\n          algorithm = (String) attrs.get(\"alg\");\n        } catch (JSONException e) {\n          log.error(\"Failed to parse license file: {}\", e.getMessage());\n          return false;\n        }\n\n        // Verify license file algorithm\n        if (!\"base64+ed25519\".equals(algorithm)) {\n          log.error(\n              \"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n          return false;\n        }\n\n        // Verify signature\n        boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n        if (!isSignatureValid) {\n          log.error(\"License file signature is invalid\");\n          return false;\n        }\n\n        log.info(\"License file signature is valid\");\n\n        // Decode the base64 data\n        String decodedData;\n        try {\n          decodedData = new String(Base64.getDecoder().decode(encryptedData));\n        } catch (IllegalArgumentException e) {\n          log.error(\"Failed to decode license data: {}\", e.getMessage());\n          return false;\n        }\n\n        // Process the certificate data\n        boolean isValid = processCertificateData(decodedData, context);\n\n        return isValid;\n      } catch (Exception e) {\n        log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n        return false;\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "296", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)\n            throws IOException {\n      try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n        try (ZipInputStream zipIn =\n                ZipSecurity.createHardenedInputStream(\n                        new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n          ZipEntry entry = zipIn.getNextEntry();\n          while (entry != null) {\n            Path filePath =\n                    tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n            if (!entry.isDirectory()) {\n              Files.createDirectories(filePath.getParent());\n              if (entry.getName().toLowerCase().endsWith(\".html\")\n                      || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                String content =\n                        new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                Files.write(\n                        filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n              } else {\n                Files.copy(zipIn, filePath);\n              }\n            }\n            zipIn.closeEntry();\n            entry = zipIn.getNextEntry();\n          }\n        }\n\n        // Repack the sanitized files\n        zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n      } // tempUnzippedDir auto-cleaned\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "297", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)\n            throws IOException {\n      boolean imageIsLandscape = image.getWidth() > image.getHeight();\n      PDRectangle pageSize = PDRectangle.A4;\n\n      if (autoRotate && imageIsLandscape) {\n        pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n      }\n\n      if (\"fitDocumentToImage\".equals(fitOption)) {\n        pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n      }\n\n      PDPage page = new PDPage(pageSize);\n      doc.addPage(page);\n\n      float pageWidth = page.getMediaBox().getWidth();\n      float pageHeight = page.getMediaBox().getHeight();\n\n      try (PDPageContentStream contentStream =\n              new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n        if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n          contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n        } else if (\"maintainAspectRatio\".equals(fitOption)) {\n          float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n          float pageAspectRatio = pageWidth / pageHeight;\n\n          float scaleFactor = 1.0f;\n          if (imageAspectRatio > pageAspectRatio) {\n            scaleFactor = pageWidth / image.getWidth();\n          } else {\n            scaleFactor = pageHeight / image.getHeight();\n          }\n\n          float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n          float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n          contentStream.drawImage(\n                  image,\n                  xPos,\n                  yPos,\n                  image.getWidth() * scaleFactor,\n                  image.getHeight() * scaleFactor);\n        }\n      } catch (IOException e) {\n        log.error(\"Error adding image to PDF\", e);\n        throw e;\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "298", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n      try {\n        // Get the MAC address\n        StringBuilder sb = new StringBuilder();\n        InetAddress ip = InetAddress.getLocalHost();\n        NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n        if (network == null) {\n          Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n          while (networks.hasMoreElements()) {\n            NetworkInterface net = networks.nextElement();\n            byte[] mac = net.getHardwareAddress();\n            if (mac != null) {\n              for (int i = 0; i < mac.length; i++) {\n                sb.append(String.format(\"%02X\", mac[i]));\n              }\n              break; // Use the first network interface with a MAC address\n            }\n          }\n        } else {\n          byte[] mac = network.getHardwareAddress();\n          if (mac != null) {\n            for (int i = 0; i < mac.length; i++) {\n              sb.append(String.format(\"%02X\", mac[i]));\n            }\n          }\n        }\n\n        // Hash the MAC address for privacy and consistency\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n        StringBuilder fingerprint = new StringBuilder();\n        for (byte b : hash) {\n          fingerprint.append(String.format(\"%02x\", b));\n        }\n        return fingerprint.toString();\n      } catch (Exception e) {\n        return \"GenericID\";\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "299", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n      String title = pdfMetadata.getTitle();\n      pdf.getDocumentInformation().setTitle(title);\n      pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n      pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n      pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n      pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n      String author = pdfMetadata.getAuthor();\n      if (applicationProperties\n              .getPremium()\n              .getProFeatures()\n              .getCustomMetadata()\n              .isAutoUpdateMetadata()\n          && runningProOrHigher) {\n        author =\n            applicationProperties\n                .getPremium()\n                .getProFeatures()\n                .getCustomMetadata()\n                .getAuthor();\n\n        if (userService != null) {\n          author = author.replace(\"username\", userService.getCurrentUsername());\n        }\n      }\n      pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "300", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n      try {\n        boolean isDocker = runningInDocker();\n        boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n        boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n        if (isKubernetes) return \"Kubernetes\";\n        if (isDocker) return \"Docker\";\n        \n        if (isBrowserOpen) {\n          String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n          if (os.contains(\"win\")) return \"Client-windows\";\n          if (os.contains(\"mac\")) return \"Client-mac\";\n          return \"Client-unix\";\n        }\n        \n        return \"Server-jar\";\n      } catch (Exception e) {\n        return \"Unknown\";\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "301", "src_id": "M101", "code": "\n    private void processRequest(\n            int limitPerDay,\n            String identifier,\n            Map<String, Bucket> buckets,\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain)\n            throws IOException, ServletException {\n      Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n      ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n      \n      if (probe.isConsumed()) {\n        response.setHeader(\n            \"X-Rate-Limit-Remaining\",\n            stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n        filterChain.doFilter(request, response);\n      } else {\n        long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n        response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n        response.setHeader(\n            \"X-Rate-Limit-Retry-After-Seconds\",\n            Newlines.stripAll(String.valueOf(waitForRefill)));\n        response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "302", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n        String requestBody =\n                String.format(\n                        \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                        licenseKey, machineFingerprint);\n        HttpRequest request =\n                HttpRequest.newBuilder()\n                        .uri(\n                                URI.create(\n                                        BASE_URL\n                                                + \"/\"\n                                                + ACCOUNT_ID\n                                                + \"/licenses/actions/validate-key\"))\n                        .header(\"Content-Type\", \"application/vnd.api+json\")\n                        .header(\"Accept\", \"application/vnd.api+json\")\n                        // .header(\"Authorization\", \"License \" + licenseKey)\n                        .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                        .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n\n                log.info(\n                        \"License floating (from license): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                boolean policyFloating =\n                        policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n\n                log.info(\n                        \"License floating (from policy): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n            int users =\n                    jsonResponse\n                            .path(\"data\")\n                            .path(\"attributes\")\n                            .path(\"metadata\")\n                            .path(\"users\")\n                            .asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense =\n                    jsonResponse\n                            .path(\"data\")\n                            .path(\"attributes\")\n                            .path(\"metadata\")\n                            .path(\"isEnterprise\")\n                            .asBoolean(false);\n\n            log.debug(applicationProperties.toString());\n\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "303", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description =\n                    \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\"\n                            + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)\n            throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n\n            PDDocument doc = pdfDocumentFactory.load(file);\n            return WebResponseUtils.pdfDocToWebResponse(\n                    doc,\n                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                                    .replaceFirst(\"[.][^.]+$\", \"\")\n                            + \"_convertedToPDF.pdf\");\n        } finally {\n            if (file != null) {\n                file.delete();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "304", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n        MultipartFile inputFile = request.getFileInput();\n        boolean readonly = true;\n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            // Metadata using PDFBox\n            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            ObjectNode metadata = objectMapper.createObjectNode();\n            ObjectNode basicInfo = objectMapper.createObjectNode();\n            ObjectNode docInfoNode = objectMapper.createObjectNode();\n            ObjectNode compliancy = objectMapper.createObjectNode();\n            ObjectNode encryption = objectMapper.createObjectNode();\n            ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            // Total file size of the PDF\n            long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            // Number of words, paragraphs, and images in the entire document\n            String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            String[] words = fullText.split(\"\\\\s+\");\n            int wordCount = words.length;\n            int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            // Number of characters in the entire document (including spaces and special characters)\n            int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            // Initialize the flags and types\n            boolean hasCompression = false;\n            String compressionType = \"None\";\n\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) {\n                basicInfo.put(\"CompressionType\", compressionType);\n            }\n\n            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            String pageMode = catalog.getPageMode().name();\n\n            // Document Information using PDFBox\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n\n            ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            // Generate structured summary data about PDF characteristics\n            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            // embeed files TODO size\n            if (catalog.getNames() != null) {\n                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n\n                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength()); // size in bytes\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            // attachments TODO size\n            ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            // Javascript\n            PDDocumentNameDictionary namesDict = catalog.getNames();\n            ArrayNode javascriptArray = objectMapper.createArrayNode();\n\n            if (namesDict != null) {\n                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n\n                            PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            // TODO size\n            PDOptionalContentProperties ocProperties = pdfBoxDoc.getDocumentCatalog().getOCProperties();\n            ArrayNode layersArray = objectMapper.createArrayNode();\n\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            other.set(\"Layers\", layersArray);\n\n            // TODO Security\n\n            PDStructureTreeRoot structureTreeRoot = pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                log.error(\"exception\", e);\n            }\n\n            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            boolean isPdfBCompliant = checkForStandard(pdfBoxDoc, \"PDF/B\"); // If you want to check for PDF/Broadcast, though this isn't an official ISO standard.\n            boolean isPdfSECCompliant = checkForStandard(pdfBoxDoc, \"PDF/SEC\"); // This might not be effective since PDF/SEC was under development in 2021.\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();\n            ArrayNode bookmarksArray = objectMapper.createArrayNode();\n\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();\n\n            String xmpString = null;\n\n            if (pdMetadata != null) {\n                try {\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        DomXmpParser domXmpParser = new DomXmpParser();\n                        XMPMetadata xmpMeta = domXmpParser.parse(is);\n\n                        ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    }\n                } catch (XmpParsingException e) {\n                    // XMP parsing failed, try to read raw metadata instead\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n\n                // Retrieve encryption details using getEncryption()\n                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n                // Add other encryption-related properties as needed\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                ObjectNode pageInfo = objectMapper.createObjectNode();\n\n                // Retrieve the page\n                PDPage page = pdfBoxDoc.getPage(pageNum);\n\n                // Page-level Information\n                PDRectangle mediaBox = page.getMediaBox();\n\n                float width = mediaBox.getWidth();\n                float height = mediaBox.getHeight();\n\n                ObjectNode sizeInfo = objectMapper.createObjectNode();\n\n                getDimensionInfo(sizeInfo, width, height);\n\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                // Boxes\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n\n                // Assuming the following boxes are defined for your document; if not, you may get null values.\n                PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n\n                PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n\n                PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n\n                PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                // Content Extraction\n                PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                String pageText = textStripper.getText(pdfBoxDoc);\n\n                pageInfo.put(\"Text Characters Count\", pageText.length()); //\n\n                // Annotations\n                List<PDAnnotation> annotations = page.getAnnotations();\n\n                int subtypeCount = 0;\n                int contentsCount = 0;\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) {\n                        subtypeCount++; // Increase subtype count\n                    }\n                    if (annotation.getContents() != null) {\n                        contentsCount++; // Increase contents count\n                    }\n                }\n\n                ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                // Images (simplified)\n                // This part is non-trivial as images can be embedded in multiple ways in a PDF.\n                // Here is a basic structure to recognize image XObjects on a page.\n                ArrayNode imagesArray = objectMapper.createArrayNode();\n                PDResources resources = page.getResources();\n\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                // Links\n                ArrayNode linksArray = objectMapper.createArrayNode();\n                Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            String uri = uriAction.getURI();\n                            uniqueURIs.add(uri); // Add to set to ensure uniqueness\n                        }\n                    }\n                }\n\n                // Add unique URIs to linksArray\n                for (String uri : uniqueURIs) {\n                    ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                // Fonts\n                ArrayNode fontsArray = objectMapper.createArrayNode();\n                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n\n                for (COSName fontName : resources.getFontNames()) {\n                    PDFont font = resources.getFont(fontName);\n                    ObjectNode fontNode = objectMapper.createObjectNode();\n\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n\n                    // PDFBox provides Font's BaseFont (i.e., the font name) directly\n                    fontNode.put(\"Name\", font.getName());\n\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        // Font stretch and BBox are not directly available in PDFBox's API, so\n                        // these are omitted for simplicity\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    // Create a unique key for this font node based on its attributes\n                    String uniqueKey = fontNode.toString();\n\n                    // Increment count if this font exists, or initialize it if new\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n\n                // Add unique font entries to fontsArray\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                // Access resources dictionary\n                ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n\n                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        PDStream iccData = iccBased.getPDStream();\n                        byte[] iccBytes = iccData.toByteArray();\n\n                        // TODO: Further decode and analyze the ICC data if needed\n                        ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                // Other XObjects\n                Map<String, Integer> xObjectCountMap = new HashMap<>(); // To store the count for each type\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    String xObjectType;\n\n                    if (xObject instanceof PDImageXObject) {\n                        xObjectType = \"Image\";\n                    } else if (xObject instanceof PDFormXObject) {\n                        xObjectType = \"Form\";\n                    } else {\n                        xObjectType = \"Other\";\n                    }\n\n                    // Increment the count for this type in the map\n                    xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n\n                // Add the count map to pageInfo (or wherever you want to store it)\n                ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                ArrayNode multimediaArray = objectMapper.createArrayNode();\n\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        // Extract details from the annotation as needed\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            // Save JSON to file\n            String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n\n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "305", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\n                        \"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n            boolean isValid = processCertificateData(decodedData, context);\n\n            return isValid;\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "306", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)\n            throws IOException {\n        TempDirectory tempUnzippedDir = null;\n        try {\n            tempUnzippedDir = new TempDirectory(tempFileManager);\n            \n            ZipInputStream zipIn = null;\n            try {\n                zipIn = ZipSecurity.createHardenedInputStream(\n                        new ByteArrayInputStream(Files.readAllBytes(zipFilePath)));\n                ZipEntry entry = zipIn.getNextEntry();\n                while (entry != null) {\n                    Path filePath = tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        if (entry.getName().toLowerCase().endsWith(\".html\") \n                                || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            String content = new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                            Files.write(\n                                    filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            } catch (IOException e) {\n                e.printStackTrace();\n            } finally {\n                if (zipIn != null) {\n                    try {\n                        zipIn.close();\n                    } catch (IOException e) {\n                        // ignore\n                    }\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } finally {\n            if (tempUnzippedDir != null) {\n                try {\n                    tempUnzippedDir.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "307", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)\n            throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n\n        PDPageContentStream contentStream = null;\n        try {\n            contentStream = new PDPageContentStream(doc, page, AppendMode.APPEND, true, true);\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                float pageAspectRatio = pageWidth / pageHeight;\n\n                float scaleFactor = 1.0f;\n                if (imageAspectRatio > pageAspectRatio) {\n                    scaleFactor = pageWidth / image.getWidth();\n                } else {\n                    scaleFactor = pageHeight / image.getHeight();\n                }\n\n                float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                contentStream.drawImage(\n                        image,\n                        xPos,\n                        yPos,\n                        image.getWidth() * scaleFactor,\n                        image.getHeight() * scaleFactor);\n            }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        } finally {\n            if (contentStream != null) {\n                try {\n                    contentStream.close();\n                } catch (IOException e) {\n                    // ignore\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "308", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            // Get the MAC address\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (int i = 0; i < mac.length; i++) {\n                            sb.append(String.format(\"%02X\", mac[i]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (int i = 0; i < mac.length; i++) {\n                        sb.append(String.format(\"%02X\", mac[i]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "309", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata()\n                && runningProOrHigher) {\n            author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "310", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n            \n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                return \"Docker\";\n            } else if (isBrowserOpen) {\n                String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                if (os.contains(\"win\")) {\n                    return \"Client-windows\";\n                } else if (os.contains(\"mac\")) {\n                    return \"Client-mac\";\n                } else {\n                    return \"Client-unix\";\n                }\n            } else {\n                return \"Server-jar\";\n            }\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "311", "src_id": "M101", "code": "\n    private void processRequest(\n            int limitPerDay,\n            String identifier,\n            Map<String, Bucket> buckets,\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain)\n            throws IOException, ServletException {\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        if (probe.isConsumed()) {\n            response.setHeader(\n                    \"X-Rate-Limit-Remaining\",\n                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            filterChain.doFilter(request, response);\n        } else {\n            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\n                    \"X-Rate-Limit-Retry-After-Seconds\",\n                    Newlines.stripAll(String.valueOf(waitForRefill)));\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "312", "src_id": "M475", "code": "\n    @Override\n    public void draw(CommandProcess process, JvmModel result) {\n        TableElement table = new TableElement(2, 5).leftCellPadding(1).rightCellPadding(1);\n\n        for (Map.Entry<String, List<JvmItemVO>> entry : result.getJvmInfo().entrySet()) {\n            String group = entry.getKey();\n            List<JvmItemVO> items = entry.getValue();\n\n            table.row(true, label(group).style(Decoration.bold.bold()));\n            \n            for (JvmItemVO item : items) {\n                String valueStr;\n                if (item.getValue() instanceof Map && item.getName().endsWith(\"MEMORY-USAGE\")) {\n                    valueStr = renderMemoryUsage((Map<String, Object>) item.getValue());\n                } else {\n                    valueStr = renderItemValue(item.getValue());\n                }\n                \n                if (item.getDesc() != null) {\n                    table.row(item.getName() + \"\\n[\" + item.getDesc() + \"]\", valueStr);\n                } else {\n                    table.row(item.getName(), valueStr);\n                }\n            }\n            \n            table.row(\"\", \"\");\n        }\n\n        process.write(RenderUtil.render(table, process.width()));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "313", "src_id": "M535", "code": "\n    public static String renderEnhancerAffect(EnhancerAffectVO affectVO) {\n        final StringBuilder infoSB = new StringBuilder();\n        \n        List<String> classDumpFiles = affectVO.getClassDumpFiles();\n        if (classDumpFiles != null) {\n            for (String classDumpFile : classDumpFiles) {\n                infoSB.append(\"[dump: \").append(classDumpFile).append(\"]\\n\");\n            }\n        }\n\n        List<String> methods = affectVO.getMethods();\n        if (methods != null) {\n            for (String method : methods) {\n                infoSB.append(\"[Affect method: \").append(method).append(\"]\\n\");\n            }\n        }\n\n        infoSB.append(format(\"Affect(class count: %d , method count: %d) cost in %s ms, listenerId: %d\",\n                affectVO.getClassCount(),\n                affectVO.getMethodCount(),\n                affectVO.getCost(),\n                affectVO.getListenerId()));\n                \n        if (!StringUtils.isEmpty(affectVO.getOverLimitMsg())) {\n            infoSB.append(\"\\n\").append(affectVO.getOverLimitMsg());\n        }\n        \n        if (affectVO.getThrowable() != null) {\n            infoSB.append(\"\\nEnhance error! exception: \").append(affectVO.getThrowable());\n        }\n        \n        infoSB.append(\"\\n\");\n\n        return infoSB.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "314", "src_id": "M753", "code": "\n    public List<ThreadVO> sample(Collection<ThreadVO> originThreads) {\n      List<ThreadVO> threads = new ArrayList<ThreadVO>(originThreads);\n\n      // Sample CPU\n      if (lastCpuTimes.isEmpty()) {\n        lastSampleTimeNanos = System.nanoTime();\n        for (ThreadVO thread : threads) {\n          if (thread.getId() > 0) {\n            long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n            lastCpuTimes.put(thread, cpu);\n            thread.setTime(cpu / 1000000);\n          }\n        }\n\n        // add internal threads\n        Map<String, Long> internalThreadCpuTimes = getInternalThreadCpuTimes();\n        if (internalThreadCpuTimes != null) {\n          for (Map.Entry<String, Long> entry : internalThreadCpuTimes.entrySet()) {\n            String key = entry.getKey();\n            ThreadVO thread = createThreadVO(key);\n            thread.setTime(entry.getValue() / 1000000);\n            threads.add(thread);\n            lastCpuTimes.put(thread, entry.getValue());\n          }\n        }\n\n        //sort by time\n        Collections.sort(threads, new Comparator<ThreadVO>() {\n          @Override\n          public int compare(ThreadVO o1, ThreadVO o2) {\n            long l1 = o1.getTime();\n            long l2 = o2.getTime();\n            if (l1 < l2) {\n              return 1;\n            } else if (l1 > l2) {\n              return -1;\n            } else {\n              return 0;\n            }\n          }\n        });\n        return threads;\n      }\n\n      // Resample\n      long newSampleTimeNanos = System.nanoTime();\n      Map<ThreadVO, Long> newCpuTimes = new HashMap<ThreadVO, Long>(threads.size());\n      for (ThreadVO thread : threads) {\n        if (thread.getId() > 0) {\n          long cpu = threadMXBean.getThreadCpuTime(thread.getId());\n          newCpuTimes.put(thread, cpu);\n        }\n      }\n      // internal threads\n      Map<String, Long> newInternalThreadCpuTimes = getInternalThreadCpuTimes();\n      if (newInternalThreadCpuTimes != null) {\n        for (Map.Entry<String, Long> entry : newInternalThreadCpuTimes.entrySet()) {\n          ThreadVO threadVO = createThreadVO(entry.getKey());\n          threads.add(threadVO);\n          newCpuTimes.put(threadVO, entry.getValue());\n        }\n      }\n\n      // Compute delta time\n      final Map<ThreadVO, Long> deltas = new HashMap<ThreadVO, Long>(threads.size());\n      for (ThreadVO thread : newCpuTimes.keySet()) {\n        Long t = lastCpuTimes.get(thread);\n        if (t == null) {\n          t = 0L;\n        }\n        long time1 = t;\n        long time2 = newCpuTimes.get(thread);\n        if (time1 == -1) {\n          time1 = time2;\n        } else if (time2 == -1) {\n          time2 = time1;\n        }\n        long delta = time2 - time1;\n        deltas.put(thread, delta);\n      }\n\n      long sampleIntervalNanos = newSampleTimeNanos - lastSampleTimeNanos;\n\n      // Compute cpu usage\n      final HashMap<ThreadVO, Double> cpuUsages = new HashMap<ThreadVO, Double>(threads.size());\n      for (ThreadVO thread : threads) {\n        double cpu = sampleIntervalNanos == 0 ? 0 : (Math.rint(deltas.get(thread) * 10000.0 / sampleIntervalNanos) / 100.0);\n        cpuUsages.put(thread, cpu);\n      }\n\n      // Sort by CPU time : should be a rendering hint...\n      Collections.sort(threads, new Comparator<ThreadVO>() {\n        @Override\n        public int compare(ThreadVO o1, ThreadVO o2) {\n          long l1 = deltas.get(o1);\n          long l2 = deltas.get(o2);\n          if (l1 < l2) {\n            return 1;\n          } else if (l1 > l2) {\n            return -1;\n          } else {\n            return 0;\n          }\n        }\n      });\n\n      for (ThreadVO thread : threads) {\n        //nanos to mills\n        long timeMills = newCpuTimes.get(thread) / 1000000;\n        long deltaTime = deltas.get(thread) / 1000000;\n        double cpu = cpuUsages.get(thread);\n\n        thread.setCpu(cpu);\n        thread.setTime(timeMills);\n        thread.setDeltaTime(deltaTime);\n      }\n      lastCpuTimes = newCpuTimes;\n      lastSampleTimeNanos = newSampleTimeNanos;\n\n      return threads;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "315", "src_id": "M1131", "code": "\n    private ApiResponse processAsyncExecRequest(ApiRequest apiRequest, Session session) {\n        String commandLine = apiRequest.getCommand();\n        Map<String, Object> body = new TreeMap<>();\n        body.put(\"command\", commandLine);\n\n        ApiResponse response = new ApiResponse();\n        response.setSessionId(session.getSessionId())\n                .setBody(body);\n\n        if (!session.tryLock()) {\n            response.setState(ApiState.REFUSED)\n                    .setMessage(\"Another command is executing.\");\n            return response;\n        }\n        \n        int lock = session.getLock();\n        try {\n            Job foregroundJob = session.getForegroundJob();\n            if (foregroundJob != null) {\n                response.setState(ApiState.REFUSED)\n                        .setMessage(\"Another job is running.\");\n                logger.info(\"Another job is running, jobId: {}\", foregroundJob.id());\n                return response;\n            }\n\n            // create job\n            Job job = this.createJob(commandLine, session, session.getResultDistributor());\n            body.put(\"jobId\", job.id());\n            body.put(\"jobStatus\", job.status());\n            response.setState(ApiState.SCHEDULED);\n\n            // add command before exec job\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState());\n            commandRequestModel.setJobId(job.id());\n            SharingResultDistributor resultDistributor = session.getResultDistributor();\n            if (resultDistributor != null) {\n                resultDistributor.appendResult(commandRequestModel);\n            }\n            session.setForegroundJob(job);\n            updateSessionInputStatus(session, InputStatus.ALLOW_INTERRUPT);\n\n            // run job\n            job.run();\n\n            return response;\n        } catch (Throwable e) {\n            logger.error(\"Async exec command failed:\" + e.getMessage() + \", command:\" + commandLine, e);\n            response.setState(ApiState.FAILED).setMessage(\"Async exec command failed:\" + e.getMessage());\n            CommandRequestModel commandRequestModel = new CommandRequestModel(commandLine, response.getState(), response.getMessage());\n            session.getResultDistributor().appendResult(commandRequestModel);\n            return response;\n        } finally {\n            if (session.getLock() == lock) {\n                session.unLock();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "316", "src_id": "M542", "code": "\n    private String renderLoggerInfo(Map<String, Map<String, Object>> loggerInfos, int width) {\n      StringBuilder sb = new StringBuilder(8192);\n\n      for (Map.Entry<String, Map<String, Object>> entry : loggerInfos.entrySet()) {\n        Map<String, Object> info = entry.getValue();\n\n        TableElement table = new TableElement(2, 10).leftCellPadding(1).rightCellPadding(1);\n        TableElement appendersTable = new TableElement().rightCellPadding(1);\n\n        Class<?> clazz = (Class<?>) info.get(LoggerHelper.clazz);\n        table.row(label(LoggerHelper.name).style(Decoration.bold.bold()), label(\"\" + info.get(LoggerHelper.name)))\n            .row(label(LoggerHelper.clazz).style(Decoration.bold.bold()), label(\"\" + clazz.getName()))\n            .row(label(LoggerHelper.classLoader).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.classLoader)))\n            .row(label(LoggerHelper.classLoaderHash).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.classLoaderHash)))\n            .row(label(LoggerHelper.level).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.level)));\n        \n        if (info.get(LoggerHelper.effectiveLevel) != null) {\n          table.row(label(LoggerHelper.effectiveLevel).style(Decoration.bold.bold()),\n              label(\"\" + info.get(LoggerHelper.effectiveLevel)));\n        }\n\n        if (info.get(LoggerHelper.config) != null) {\n          table.row(label(LoggerHelper.config).style(Decoration.bold.bold()),\n              label(\"\" + info.get(LoggerHelper.config)));\n        }\n\n        table.row(label(LoggerHelper.additivity).style(Decoration.bold.bold()),\n            label(\"\" + info.get(LoggerHelper.additivity)))\n            .row(label(LoggerHelper.codeSource).style(Decoration.bold.bold()),\n                label(\"\" + info.get(LoggerHelper.codeSource)));\n\n        @SuppressWarnings(\"unchecked\")\n        List<Map<String, Object>> appenders = (List<Map<String, Object>>) info.get(LoggerHelper.appenders);\n        if (appenders != null && !appenders.isEmpty()) {\n\n          for (Map<String, Object> appenderInfo : appenders) {\n            Class<?> appenderClass = (Class<?>) appenderInfo.get(LoggerHelper.clazz);\n\n            appendersTable.row(label(LoggerHelper.name).style(Decoration.bold.bold()),\n                label(\"\" + appenderInfo.get(LoggerHelper.name)));\n            appendersTable.row(label(LoggerHelper.clazz), label(\"\" + appenderClass.getName()));\n            appendersTable.row(label(LoggerHelper.classLoader), label(\"\" + info.get(LoggerHelper.classLoader)));\n            appendersTable.row(label(LoggerHelper.classLoaderHash),\n                label(\"\" + info.get(LoggerHelper.classLoaderHash)));\n            \n            if (appenderInfo.get(LoggerHelper.file) != null) {\n              appendersTable.row(label(LoggerHelper.file), label(\"\" + appenderInfo.get(LoggerHelper.file)));\n            }\n            \n            if (appenderInfo.get(LoggerHelper.target) != null) {\n              appendersTable.row(label(LoggerHelper.target),\n                  label(\"\" + appenderInfo.get(LoggerHelper.target)));\n            }\n            \n            if (appenderInfo.get(LoggerHelper.blocking) != null) {\n              appendersTable.row(label(LoggerHelper.blocking),\n                  label(\"\" + appenderInfo.get(LoggerHelper.blocking)));\n            }\n            \n            if (appenderInfo.get(LoggerHelper.appenderRef) != null) {\n              appendersTable.row(label(LoggerHelper.appenderRef),\n                  label(\"\" + appenderInfo.get(LoggerHelper.appenderRef)));\n            }\n          }\n\n          table.row(label(\"appenders\").style(Decoration.bold.bold()), appendersTable);\n        }\n\n        sb.append(RenderUtil.render(table, width)).append('\\n');\n      }\n      return sb.toString();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "317", "src_id": "M15", "code": "\n    public static int startArthasClient(String arthasHomeDir, List<String> telnetArgs, OutputStream out) throws Throwable {\n        // start java telnet client\n        // find arthas-client.jar\n        URLClassLoader classLoader = new URLClassLoader(\n                new URL[]{new File(arthasHomeDir, \"arthas-client.jar\").toURI().toURL()});\n        Class<?> telnetConsoleClass = classLoader.loadClass(\"com.taobao.arthas.client.TelnetConsole\");\n        Method processMethod = telnetConsoleClass.getMethod(\"process\", String[].class);\n\n        // redirect System.out/System.err\n        PrintStream originSysOut = System.out;\n        PrintStream originSysErr = System.err;\n        PrintStream newOut = new PrintStream(out);\n        PrintStream newErr = new PrintStream(out);\n\n        // call TelnetConsole.process()\n        // fix https://github.com/alibaba/arthas/issues/833\n        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n        try {\n            System.setOut(newOut);\n            System.setErr(newErr);\n            Thread.currentThread().setContextClassLoader(classLoader);\n            return (Integer) processMethod.invoke(null, new Object[]{telnetArgs.toArray(new String[0])});\n        } catch (Throwable e) {\n            // java.lang.reflect.InvocationTargetException : java.net.ConnectException\n            e = e.getCause();\n            if (e instanceof IOException || e instanceof InterruptedException) {\n                // ignore connection error and interrupted error\n                return STATUS_ERROR;\n            } else {\n                // process error\n                AnsiLog.error(\"process error: {}\", e.toString());\n                AnsiLog.error(e);\n                return STATUS_EXEC_ERROR;\n            }\n        } finally {\n            Thread.currentThread().setContextClassLoader(tccl);\n\n            // reset System.out/System.err\n            System.setOut(originSysOut);\n            System.setErr(originSysErr);\n            // flush output\n            newOut.flush();\n            newErr.flush();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "318", "src_id": "M1469", "code": "\n    public static FieldVO[] getFields(Class clazz, Integer expand) {\n      final Field[] fields = clazz.getDeclaredFields();\n      if (fields.length == 0) return new FieldVO[0];\n\n      final List<FieldVO> list = new ArrayList<FieldVO>(fields.length);\n      for (Field field : fields) {\n        final FieldVO fieldVO = new FieldVO();\n        fieldVO.setName(field.getName());\n        fieldVO.setType(StringUtils.classname(field.getType()));\n        fieldVO.setModifier(StringUtils.modifier(field.getModifiers(), ','));\n        fieldVO.setAnnotations(getAnnotations(field.getAnnotations()));\n        \n        if (Modifier.isStatic(field.getModifiers())) {\n          fieldVO.setStatic(true);\n          fieldVO.setValue(new ObjectVO(getFieldValue(field), expand));\n        } else {\n          fieldVO.setStatic(false);\n        }\n        \n        list.add(fieldVO);\n      }\n      \n      return list.toArray(new FieldVO[0]);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "319", "src_id": "M270", "code": "\n\tprivate static String normalizeArch(String value) {\n\t\tvalue = normalize(value);\n\t\t\n\t\tif (value.matches(\"^(x8664|amd64|ia32e|em64t|x64)$\")) {\n\t\t\treturn \"x86_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(x8632|x86|i[3-6]86|ia32|x32)$\")) {\n\t\t\treturn \"x86_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(ia64w?|itanium64)$\")) {\n\t\t\treturn \"itanium_64\";\n\t\t}\n\t\t\n\t\tif (\"ia64n\".equals(value)) {\n\t\t\treturn \"itanium_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(sparc|sparc32)$\")) {\n\t\t\treturn \"sparc_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(sparcv9|sparc64)$\")) {\n\t\t\treturn \"sparc_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(arm|arm32)$\")) {\n\t\t\treturn \"arm_32\";\n\t\t}\n\t\t\n\t\tif (\"aarch64\".equals(value)) {\n\t\t\treturn \"aarch_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(mips|mips32)$\")) {\n\t\t\treturn \"mips_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(mipsel|mips32el)$\")) {\n\t\t\treturn \"mipsel_32\";\n\t\t}\n\t\t\n\t\tif (\"mips64\".equals(value)) {\n\t\t\treturn \"mips_64\";\n\t\t}\n\t\t\n\t\tif (\"mips64el\".equals(value)) {\n\t\t\treturn \"mipsel_64\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(ppc|ppc32)$\")) {\n\t\t\treturn \"ppc_32\";\n\t\t}\n\t\t\n\t\tif (value.matches(\"^(ppcle|ppc32le)$\")) {\n\t\t\treturn \"ppcle_32\";\n\t\t}\n\t\t\n\t\tif (\"ppc64\".equals(value)) {\n\t\t\treturn \"ppc_64\";\n\t\t}\n\t\t\n\t\tif (\"ppc64le\".equals(value)) {\n\t\t\treturn \"ppcle_64\";\n\t\t}\n\t\t\n\t\tif (\"s390\".equals(value)) {\n\t\t\treturn \"s390_32\";\n\t\t}\n\t\t\n\t\tif (\"s390x\".equals(value)) {\n\t\t\treturn \"s390_64\";\n\t\t}\n\t\t\n\t\treturn value;\n\t}\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "320", "src_id": "M928", "code": "\n    private static Map<String, Object> doGetLoggerInfo(Logger logger) {\n      Map<String, Object> info = new HashMap<>();\n      info.put(LoggerHelper.name, logger.getName());\n      info.put(LoggerHelper.clazz, logger.getClass());\n      \n      CodeSource codeSource = logger.getClass().getProtectionDomain().getCodeSource();\n      if (codeSource != null) {\n        info.put(LoggerHelper.codeSource, codeSource.getLocation());\n      }\n      info.put(LoggerHelper.additivity, logger.getAdditivity());\n\n      Level level = logger.getLevel(), effectiveLevel = logger.getEffectiveLevel();\n      if (level != null) {\n        info.put(LoggerHelper.level, level.toString());\n      }\n      if (effectiveLevel != null) {\n        info.put(LoggerHelper.effectiveLevel, effectiveLevel.toString());\n      }\n\n      @SuppressWarnings(\"unchecked\")\n      List<Map<String, Object>> result = doGetLoggerAppenders(logger.getAllAppenders());\n      info.put(LoggerHelper.appenders, result);\n      return info;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "321", "src_id": "M9", "code": "\n    @SuppressWarnings(\"resource\")\n    public static long select(boolean v, long telnetPortPid, String select) throws InputMismatchException {\n      Map<Long, String> processMap = listProcessByJps(v);\n      // Put the port that is already listening at the first\n      if (telnetPortPid > 0 && processMap.containsKey(telnetPortPid)) {\n        String telnetPortProcess = processMap.get(telnetPortPid);\n        processMap.remove(telnetPortPid);\n        Map<Long, String> newProcessMap = new LinkedHashMap<Long, String>();\n        newProcessMap.put(telnetPortPid, telnetPortProcess);\n        newProcessMap.putAll(processMap);\n        processMap = newProcessMap;\n      }\n\n      if (processMap.isEmpty()) {\n        AnsiLog.info(\"Can not find java process. Try to run `jps` command lists the instrumented Java HotSpot VMs on the target system.\");\n        return -1;\n      }\n\n      // select target process by the '--select' option when match only one process\n      if (select != null && !select.trim().isEmpty()) {\n        int matchedSelectCount = 0;\n        Long matchedPid = null;\n        for (Entry<Long, String> entry : processMap.entrySet()) {\n          if (entry.getValue().contains(select)) {\n            matchedSelectCount++;\n            matchedPid = entry.getKey();\n          }\n        }\n        if (matchedSelectCount == 1) {\n          return matchedPid;\n        }\n      }\n\n      AnsiLog.info(\"Found existing java process, please choose one and input the serial number of the process, eg : 1. Then hit ENTER.\");\n      // print list\n      int count = 1;\n      for (String process : processMap.values()) {\n        if (count == 1) {\n          System.out.println(\"* [\" + count + \"]: \" + process);\n        } else {\n          System.out.println(\"  [\" + count + \"]: \" + process);\n        }\n        count++;\n      }\n\n      // read choice\n      String line = new Scanner(System.in).nextLine();\n      if (line.trim().isEmpty()) {\n        // get the first process id\n        return processMap.keySet().iterator().next();\n      }\n\n      int choice = new Scanner(line).nextInt();\n\n      if (choice <= 0 || choice > processMap.size()) {\n        return -1;\n      }\n\n      Iterator<Long> idIter = processMap.keySet().iterator();\n      for (int i = 1; i <= choice; ++i) {\n        if (i == choice) {\n          return idIter.next();\n        }\n        idIter.next();\n      }\n\n      return -1;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "322", "src_id": "M140", "code": "\n    void _processDo(int option) throws IOException {\n      if (debugoptions) {\n        System.err.println(\"RECEIVED DO: \" + TelnetOption.getOption(option));\n      }\n\n      if (__notifhand != null) {\n        __notifhand.receivedNegotiation(TelnetNotificationHandler.RECEIVED_DO, option);\n      }\n\n      boolean acceptNewState = false;\n\n      /* open TelnetOptionHandler functionality (start)*/\n      if (optionHandlers[option] != null) {\n        acceptNewState = optionHandlers[option].getAcceptLocal();\n      } else {\n      /* open TelnetOptionHandler functionality (end)*/\n        /* TERMINAL-TYPE option (start)*/\n        if (option == TERMINAL_TYPE) {\n          if ((terminalType != null) && (terminalType.length() > 0)) {\n            acceptNewState = true;\n          }\n        }\n        /* TERMINAL-TYPE option (end)*/\n      /* open TelnetOptionHandler functionality (start)*/\n      }\n      /* open TelnetOptionHandler functionality (end)*/\n\n      if (_willResponse[option] > 0) {\n        --_willResponse[option];\n        if (_willResponse[option] > 0 && _stateIsWill(option)) {\n          --_willResponse[option];\n        }\n      }\n\n      if (_willResponse[option] == 0) {\n        if (_requestedWont(option)) {\n          switch (option) {\n          default:\n            break;\n          }\n\n          if (acceptNewState) {\n            _setWantWill(option);\n            _sendWill(option);\n          } else {\n            ++_willResponse[option];\n            _sendWont(option);\n          }\n        } else {\n          // Other end has acknowledged option.\n          switch (option) {\n          default:\n            break;\n          }\n        }\n      }\n\n      _setWill(option);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "323", "src_id": "M1324", "code": "\n    private void bind(Configure configure) throws Throwable {\n\n      long start = System.currentTimeMillis();\n\n      if (!isBindRef.compareAndSet(false, true)) {\n        throw new IllegalStateException(\"already bind\");\n      }\n\n      // init random port\n      if (configure.getTelnetPort() != null && configure.getTelnetPort() == 0) {\n        int newTelnetPort = SocketUtils.findAvailableTcpPort();\n        configure.setTelnetPort(newTelnetPort);\n        logger().info(\"generate random telnet port: \" + newTelnetPort);\n      }\n      if (configure.getHttpPort() != null && configure.getHttpPort() == 0) {\n        int newHttpPort = SocketUtils.findAvailableTcpPort();\n        configure.setHttpPort(newHttpPort);\n        logger().info(\"generate random http port: \" + newHttpPort);\n      }\n      // try to find appName\n      if (configure.getAppName() == null) {\n        configure.setAppName(System.getProperty(ArthasConstants.PROJECT_NAME,\n            System.getProperty(ArthasConstants.SPRING_APPLICATION_NAME, null)));\n      }\n\n      try {\n        if (configure.getTunnelServer() != null) {\n          tunnelClient = new TunnelClient();\n          tunnelClient.setAppName(configure.getAppName());\n          tunnelClient.setId(configure.getAgentId());\n          tunnelClient.setTunnelServerUrl(configure.getTunnelServer());\n          tunnelClient.setVersion(ArthasBanner.version());\n          ChannelFuture channelFuture = tunnelClient.start();\n          channelFuture.await(10, TimeUnit.SECONDS);\n        }\n      } catch (Throwable t) {\n        logger().error(\"start tunnel client error\", t);\n      }\n\n      try {\n        ShellServerOptions options = new ShellServerOptions()\n            .setInstrumentation(instrumentation)\n            .setPid(PidUtils.currentLongPid())\n            .setWelcomeMessage(ArthasBanner.welcome());\n        if (configure.getSessionTimeout() != null) {\n          options.setSessionTimeout(configure.getSessionTimeout() * 1000);\n        }\n\n        this.httpSessionManager = new HttpSessionManager();\n        if (IPUtils.isAllZeroIP(configure.getIp()) && StringUtils.isBlank(configure.getPassword())) {\n          // 当 listen 0.0.0.0 时，强制生成密码，防止被远程连接\n          String errorMsg = \"Listening on 0.0.0.0 is very dangerous! External users can connect to your machine! \"\n              + \"No password is currently configured. \" + \"Therefore, a default password is generated, \"\n              + \"and clients need to use the password to connect!\";\n          AnsiLog.error(errorMsg);\n          configure.setPassword(StringUtils.randomString(64));\n          AnsiLog.error(\"Generated arthas password: \" + configure.getPassword());\n\n          logger().error(errorMsg);\n          logger().info(\"Generated arthas password: \" + configure.getPassword());\n        }\n\n        this.securityAuthenticator = new SecurityAuthenticatorImpl(configure.getUsername(), configure.getPassword());\n\n        shellServer = new ShellServerImpl(options);\n\n        List<String> disabledCommands = new ArrayList<String>();\n        if (configure.getDisabledCommands() != null) {\n          String[] strings = StringUtils.tokenizeToStringArray(configure.getDisabledCommands(), \",\");\n          if (strings != null) {\n            disabledCommands.addAll(Arrays.asList(strings));\n          }\n        }\n        BuiltinCommandPack builtinCommands = new BuiltinCommandPack(disabledCommands);\n        List<CommandResolver> resolvers = new ArrayList<CommandResolver>();\n        resolvers.add(builtinCommands);\n\n        //worker group\n        workerGroup = new NioEventLoopGroup(new DefaultThreadFactory(\"arthas-TermServer\", true));\n\n        // TODO: discover user provided command resolver\n        if (configure.getTelnetPort() != null && configure.getTelnetPort() > 0) {\n          logger().info(\"try to bind telnet server, host: {}, port: {}.\", configure.getIp(), configure.getTelnetPort());\n          shellServer.registerTermServer(new HttpTelnetTermServer(configure.getIp(), configure.getTelnetPort(),\n              options.getConnectionTimeout(), workerGroup, httpSessionManager));\n        } else {\n          logger().info(\"telnet port is {}, skip bind telnet server.\", configure.getTelnetPort());\n        }\n        if (configure.getHttpPort() != null && configure.getHttpPort() > 0) {\n          logger().info(\"try to bind http server, host: {}, port: {}.\", configure.getIp(), configure.getHttpPort());\n          shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n              options.getConnectionTimeout(), workerGroup, httpSessionManager));\n        } else {\n          // listen local address in VM communication\n          if (configure.getTunnelServer() != null) {\n            shellServer.registerTermServer(new HttpTermServer(configure.getIp(), configure.getHttpPort(),\n                options.getConnectionTimeout(), workerGroup, httpSessionManager));\n          }\n          logger().info(\"http port is {}, skip bind http server.\", configure.getHttpPort());\n        }\n\n        for (CommandResolver resolver : resolvers) {\n          shellServer.registerCommandResolver(resolver);\n        }\n\n        shellServer.listen(new BindHandler(isBindRef));\n        if (!isBind()) {\n          throw new IllegalStateException(\"Arthas failed to bind telnet or http port! Telnet port: \"\n              + String.valueOf(configure.getTelnetPort()) + \", http port: \"\n              + String.valueOf(configure.getHttpPort()));\n        }\n\n        //http api session manager\n        sessionManager = new SessionManagerImpl(options, shellServer.getCommandManager(), shellServer.getJobController());\n        //http api handler\n        httpApiHandler = new HttpApiHandler(historyManager, sessionManager);\n\n        logger().info(\"as-server listening on network={};telnet={};http={};timeout={};\", configure.getIp(),\n            configure.getTelnetPort(), configure.getHttpPort(), options.getConnectionTimeout());\n\n        // 异步回报启动次数\n        if (configure.getStatUrl() != null) {\n          logger().info(\"arthas stat url: {}\", configure.getStatUrl());\n        }\n        UserStatUtil.setStatUrl(configure.getStatUrl());\n        UserStatUtil.setAgentId(configure.getAgentId());\n        UserStatUtil.arthasStart();\n\n        try {\n          SpyAPI.init();\n        } catch (Throwable e) {\n          // ignore\n        }\n\n        logger().info(\"as-server started in {} ms\", System.currentTimeMillis() - start);\n      } catch (Throwable e) {\n        logger().error(\"Error during start as-server\", e);\n        destroy();\n        throw e;\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "324", "src_id": "M122", "code": "\n    private int __read(boolean mayBlock) throws IOException {\n      int ch;\n\n      while (true) {\n        // If there is no more data AND we were told not to block,\n        // just return WOULD_BLOCK (-2). (More efficient than exception.)\n        if (!mayBlock && super.available() == 0) {\n          return WOULD_BLOCK;\n        }\n\n        // Otherwise, exit only when we reach end of stream.\n        if ((ch = super.read()) < 0) {\n          return EOF;\n        }\n\n        ch = (ch & 0xff);\n\n        /* Code Section added for supporting AYT (start)*/\n        synchronized (__client) {\n          __client._processAYTResponse();\n        }\n        /* Code Section added for supporting AYT (end)*/\n\n        /* Code Section added for supporting spystreams (start)*/\n        __client._spyRead(ch);\n        /* Code Section added for supporting spystreams (end)*/\n\n        switch (__receiveState) {\n          case _STATE_CR:\n            if (ch == '\\0') {\n              // Strip null\n              continue;\n            }\n            // How do we handle newline after cr?\n            //  else if (ch == '\\n' && _requestedDont(TelnetOption.ECHO) &&\n\n            // Handle as normal data by falling through to _STATE_DATA case\n\n            //$FALL-THROUGH$\n          case _STATE_DATA:\n            if (ch == TelnetCommand.IAC) {\n              __receiveState = _STATE_IAC;\n              continue;\n            }\n\n            if (ch == '\\r') {\n              synchronized (__client) {\n                if (__client._requestedDont(TelnetOption.BINARY)) {\n                  __receiveState = _STATE_CR;\n                } else {\n                  __receiveState = _STATE_DATA;\n                }\n              }\n            } else {\n              __receiveState = _STATE_DATA;\n            }\n            break;\n\n          case _STATE_IAC:\n            switch (ch) {\n              case TelnetCommand.WILL:\n                __receiveState = _STATE_WILL;\n                continue;\n              case TelnetCommand.WONT:\n                __receiveState = _STATE_WONT;\n                continue;\n              case TelnetCommand.DO:\n                __receiveState = _STATE_DO;\n                continue;\n              case TelnetCommand.DONT:\n                __receiveState = _STATE_DONT;\n                continue;\n              /* TERMINAL-TYPE option (start)*/\n              case TelnetCommand.SB:\n                __suboption_count = 0;\n                __receiveState = _STATE_SB;\n                continue;\n              /* TERMINAL-TYPE option (end)*/\n              case TelnetCommand.IAC:\n                __receiveState = _STATE_DATA;\n                break; // exit to enclosing switch to return IAC from read\n              case TelnetCommand.SE: // unexpected byte! ignore it (don't send it as a command)\n                __receiveState = _STATE_DATA;\n                continue;\n              default:\n                __receiveState = _STATE_DATA;\n                __client._processCommand(ch); // Notify the user\n                continue; // move on the next char\n            }\n            break; // exit and return from read\n          case _STATE_WILL:\n            synchronized (__client) {\n              __client._processWill(ch);\n              __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n          case _STATE_WONT:\n            synchronized (__client) {\n              __client._processWont(ch);\n              __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n          case _STATE_DO:\n            synchronized (__client) {\n              __client._processDo(ch);\n              __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n          case _STATE_DONT:\n            synchronized (__client) {\n              __client._processDont(ch);\n              __client._flushOutputStream();\n            }\n            __receiveState = _STATE_DATA;\n            continue;\n          /* TERMINAL-TYPE option (start)*/\n          case _STATE_SB:\n            switch (ch) {\n              case TelnetCommand.IAC:\n                __receiveState = _STATE_IAC_SB;\n                continue;\n              default:\n                // store suboption char\n                if (__suboption_count < __suboption.length) {\n                  __suboption[__suboption_count++] = ch;\n                }\n                break;\n            }\n            __receiveState = _STATE_SB;\n            continue;\n          case _STATE_IAC_SB: // IAC received during SB phase\n            switch (ch) {\n              case TelnetCommand.SE:\n                synchronized (__client) {\n                  __client._processSuboption(__suboption, __suboption_count);\n                  __client._flushOutputStream();\n                }\n                __receiveState = _STATE_DATA;\n                continue;\n              case TelnetCommand.IAC: // De-dup the duplicated IAC\n                if (__suboption_count < __suboption.length) {\n                  __suboption[__suboption_count++] = ch;\n                }\n                break;\n              default:            // unexpected byte! ignore it\n                break;\n            }\n            __receiveState = _STATE_SB;\n            continue;\n          /* TERMINAL-TYPE option (end)*/\n        }\n\n        break;\n      }\n\n      return ch;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "325", "src_id": "M8", "code": "\n    private static String formatFileSize(long size) {\n      String hrSize;\n\n      double b = size;\n      double k = size / 1024.0;\n      double m = ((size / 1024.0) / 1024.0);\n      double g = (((size / 1024.0) / 1024.0) / 1024.0);\n      double t = ((((size / 1024.0) / 1024.0) / 1024.0) / 1024.0);\n\n      DecimalFormat dec = new DecimalFormat(\"0.00\");\n\n      if (t > 1) {\n        hrSize = dec.format(t).concat(\" TB\");\n      } else if (g > 1) {\n        hrSize = dec.format(g).concat(\" GB\");\n      } else if (m > 1) {\n        hrSize = dec.format(m).concat(\" MB\");\n      } else if (k > 1) {\n        hrSize = dec.format(k).concat(\" KB\");\n      } else {\n        hrSize = dec.format(b).concat(\" Bytes\");\n      }\n\n      return hrSize;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "326", "src_id": "M790", "code": "\n@Override\npublic byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,\n    ProtectionDomain protectionDomain, byte[] classfileBuffer) throws IllegalClassFormatException {\n\n  if (className == null) return null;\n\n  className = className.replace('/', '.');\n\n  List<RetransformEntry> allRetransformEntries = allRetransformEntries();\n  // 倒序，因为要执行的配置生效\n  ListIterator<RetransformEntry> listIterator = allRetransformEntries\n      .listIterator(allRetransformEntries.size());\n  \n  while (listIterator.hasPrevious()) {\n    RetransformEntry retransformEntry = listIterator.previous();\n    int id = retransformEntry.getId();\n    // 判断类名是否一致\n    boolean updateFlag = false;\n    \n    // 类名一致，则看是否要比较 loader，如果不需要比较 loader，则认为成功\n    if (className.equals(retransformEntry.getClassName())) {\n      if (retransformEntry.getClassLoaderClass() != null || retransformEntry.getHashCode() != null) {\n        updateFlag = isLoaderMatch(retransformEntry, loader);\n      } else {\n        updateFlag = true;\n      }\n    }\n\n    if (updateFlag) {\n      logger.info(\"RetransformCommand match class: {}, id: {}, classLoaderClass: {}, hashCode: {}\",\n          className, id, retransformEntry.getClassLoaderClass(), retransformEntry.getHashCode());\n      retransformEntry.incTransformCount();\n      return retransformEntry.getBytes();\n    }\n  }\n\n  return null;\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "327", "src_id": "M716", "code": "\n    public static void drawPlayException(TableElement table, ObjectVO throwableVO) {\n      // 执行失败:输出失败状态\n      table.row(\"IS-RETURN\", \"\" + false);\n      table.row(\"IS-EXCEPTION\", \"\" + true);\n\n      // 执行失败:输出失败异常信息\n      Throwable cause;\n      Throwable t = (Throwable) throwableVO.getObject();\n      if (t instanceof InvocationTargetException) {\n        cause = t.getCause();\n      } else {\n        cause = t;\n      }\n\n      if (throwableVO.needExpand()) {\n        table.row(\"THROW-EXCEPTION\", new ObjectView(cause, throwableVO.expandOrDefault()).draw());\n      } else {\n        StringWriter stringWriter = new StringWriter();\n        PrintWriter printWriter = new PrintWriter(stringWriter);\n        try {\n          cause.printStackTrace(printWriter);\n          table.row(\"THROW-EXCEPTION\", stringWriter.toString());\n        } finally {\n          printWriter.close();\n        }\n      }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "328", "src_id": "M602", "code": "\n    private AsyncProfiler profilerInstance() {\n      if (profiler != null) {\n        return profiler;\n      }\n\n      // try to load from special path\n      if (ProfilerAction.load.toString().equals(action)) {\n        profiler = AsyncProfiler.getInstance(this.actionArg);\n      }\n\n      if (libPath != null) {\n        // load from arthas directory\n        // 尝试把lib文件复制到临时文件里，避免多次attach时出现 Native Library already loaded in another classloader\n        FileOutputStream tmpLibOutputStream = null;\n        FileInputStream libInputStream = null;\n        try {\n          File tmpLibFile = File.createTempFile(VmTool.JNI_LIBRARY_NAME, null);\n          tmpLibOutputStream = new FileOutputStream(tmpLibFile);\n          libInputStream = new FileInputStream(libPath);\n\n          IOUtils.copy(libInputStream, tmpLibOutputStream);\n          libPath = tmpLibFile.getAbsolutePath();\n          logger.debug(\"copy {} to {}\", libPath, tmpLibFile);\n        } catch (Throwable e) {\n          logger.error(\"try to copy lib error! libPath: {}\", libPath, e);\n        } finally {\n          IOUtils.close(libInputStream);\n          IOUtils.close(tmpLibOutputStream);\n        }\n        profiler = AsyncProfiler.getInstance(libPath);\n      } else {\n        if (OSUtils.isLinux() || OSUtils.isMac()) {\n          throw new IllegalStateException(\"Can not find libasyncProfiler so, please check the arthas directory.\");\n        } else {\n          throw new IllegalStateException(\"Current OS do not support AsyncProfiler, Only support Linux/Mac.\");\n        }\n      }\n\n      return profiler;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "329", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                // Attempt to load and instantiate JettyAdminServer\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n            } catch (ClassNotFoundException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InstantiationException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (IllegalAccessException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InvocationTargetException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        \n        // Return dummy server if admin server is disabled or creation fails\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "330", "src_id": "M1149", "code": "\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                \n                // Process any remaining accepted connections\n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                \n                // Clear the update queue\n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "331", "src_id": "M219", "code": "\n    public synchronized static ZooKeeper getClient(String contextPath,\n            String session, int expireTime) throws IOException {\n        final String connectionId = concat(contextPath, session);\n\n        // Check if client already exists in the map\n        ZooKeeper zk = zkMap.get(connectionId);\n        if (zk == null) {\n            // Create a new connection if none exists\n            if (LOG.isInfoEnabled()) {\n                LOG.info(String.format(\"creating new connection for : '%s'\", connectionId));\n            }\n            \n            // Get endpoint configuration\n            Endpoint endpoint = contextMap.get(contextPath);\n            zk = new ZooKeeper(endpoint.getHostPort(), 30000, \n                    new MyWatcher(connectionId));\n            \n            // Apply authentication information\n            for (Map.Entry<String, String> authEntry : endpoint.getZooKeeperAuthInfo().entrySet()) {\n                zk.addAuthInfo(\"digest\", \n                        String.format(\"%s:%s\", authEntry.getKey(), authEntry.getValue()).getBytes());\n            }\n            \n            // Store the new connection\n            zkMap.put(connectionId, zk);\n\n            // Set up session expiration if session is provided\n            if (session != null) {\n                zkSessionTimers.put(connectionId, \n                        new SessionTimerTask(expireTime, session, contextPath, timer));\n            }\n        }\n        \n        return zk;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "332", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        File f = new File(file);\n        RandomAccessFileReader in = new RandomAccessFileReader(f);\n        SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n        Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n        long lastFp = in.getPosition();\n        String line = in.readLine();\n        Matcher m = null;\n\n        // if we have read data from the file, and it matches the timep pattern\n        if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n            starttime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. First line doesn't start with time\");\n        }\n\n        /*\n          Count number of log entries. Any line starting with a timestamp counts as an entry\n        */\n        String lastentry = line;\n        try {\n            while (line != null) {\n                m = timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (size % skipN == 0) {\n                        long time = timestampFromText(dateformat, m.group(1));\n                        skiplist.addMark(time, lastFp, size);\n                    }\n                    size++;\n                    lastentry = line;\n                } \n                if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                    serverid = Integer.valueOf(m.group(1));\n                }\n\n                lastFp = in.getPosition();\n                line = in.readLine();\n            }\n        } catch (EOFException eof) {\n            // ignore, simply end of file, though really (line!=null) should have caught this\n        } finally {\n            in.close();\n        }\n\n        m = timep.matcher(lastentry);\n        if (m.lookingAt()) {\n            endtime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "333", "src_id": "M235", "code": "\n    @POST\n    @Produces( { MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        // establish the connection to the ZooKeeper cluster\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "334", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work directly.\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "335", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false;\n        boolean success = false;\n        \n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                boolean renamed = tmpFile.renameTo(origFile);\n                if (!renamed) {\n                    // On windows, renameTo does not replace.\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\n                                \"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    // If we failed when flushing, try to close it to not leak an FD\n                    IOUtils.closeStream(out);\n                }\n                \n                // close wasn't successful, try to delete the tmp file\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "336", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n        try {\n            try {\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) {\n                        break;\n                    }\n\n                    Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            LogEntry e = new Log4JEntry(\n                                    src.timestampFromText(dateformat, buf),\n                                    src.getServerId(),\n                                    buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n            } catch (EOFException eof) {\n                // ignore, we've simply come to the end of the file\n            }\n            \n            if (buf.length() > 0) {\n                LogEntry e = new Log4JEntry(\n                        src.timestampFromText(dateformat, buf),\n                        src.getServerId(),\n                        buf);\n                buf = \"\";\n                return e;\n            }\n        } catch (Exception e) {\n            LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n            return null;\n        }\n        \n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "337", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n        \n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2];\n        \n        if (op.equalsIgnoreCase(\"gettracemask\")) {\n            getTraceMask(host, port);\n        } else if (op.equalsIgnoreCase(\"settracemask\")) {\n            setTraceMask(host, port, args[3]);\n        } else if (op.equalsIgnoreCase(\"ruok\")) {\n            ruok(host, port);\n        } else if (op.equalsIgnoreCase(\"kill\")) {\n            kill(host, port);\n        } else if (op.equalsIgnoreCase(\"stat\")) {\n            stat(host, port);\n        } else if (op.equalsIgnoreCase(\"dump\")) {\n            dump(host, port);\n        } else {\n            System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "338", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException \n                    || err instanceof ClosedByInterruptException \n                    || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "339", "src_id": "M1031", "code": "\n    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {\n        int statusCode = conn.getResponseCode();\n\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + statusCode);\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "340", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "341", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n\n        if (DEBUG && !mMission.unknownLength && start > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + start);\n        }\n\n        try {\n            long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run(); // try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "342", "src_id": "M1141", "code": "\n    private void flushAuxiliar(long amount) throws IOException {\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            int read = (int) Math.min(length, Integer.MAX_VALUE);\n            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (read < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, read);\n            length -= read;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                int read = (int) Math.min(length, Integer.MAX_VALUE);\n                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, read);\n\n                writeOffset += read;\n                readOffset += read;\n                length -= read;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH); // or setLength(0);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "343", "src_id": "M1106", "code": "\n    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {\n        StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(\n                mContext,\n                new ErrorInfo(\n                        ErrorInfo.Companion.throwableToStringList(mission.errObject),\n                        action,\n                        service,\n                        request.toString(),\n                        reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "344", "src_id": "M1067", "code": "\n    void startMission(DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // Create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "345", "src_id": "M1136", "code": "\n    @Override\n    int process(SharpStream out, SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        String format = getArgumentAt(0, null);\n        boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            byte[] buffer = new byte[8 * 1024];\n            int read;\n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\n                \"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "346", "src_id": "M1047", "code": "\n    private void joinForThreads(int millis) {\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        try {\n            for (Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "347", "src_id": "M31", "code": "\n    private JsonNode validateLicense(\n            String licenseKey, String machineFingerprint, LicenseContext context) throws Exception {\n        String requestBody = String.format(\n                \"{\\\"meta\\\":{\\\"key\\\":\\\"%s\\\",\\\"scope\\\":{\\\"fingerprint\\\":\\\"%s\\\"}}}\",\n                licenseKey, machineFingerprint);\n        HttpRequest request = HttpRequest.newBuilder()\n                .uri(URI.create(BASE_URL + \"/\" + ACCOUNT_ID + \"/licenses/actions/validate-key\"))\n                .header(\"Content-Type\", \"application/vnd.api+json\")\n                .header(\"Accept\", \"application/vnd.api+json\")\n                // .header(\"Authorization\", \"License \" + licenseKey)\n                .POST(HttpRequest.BodyPublishers.ofString(requestBody))\n                .build();\n\n        HttpResponse<String> response = httpClient.send(request, HttpResponse.BodyHandlers.ofString());\n        log.debug(\"ValidateLicenseResponse body: {}\", response.body());\n        JsonNode jsonResponse = objectMapper.readTree(response.body());\n        if (response.statusCode() == 200) {\n            JsonNode metaNode = jsonResponse.path(\"meta\");\n            boolean isValid = metaNode.path(\"valid\").asBoolean();\n\n            String detail = metaNode.path(\"detail\").asText();\n            String code = metaNode.path(\"code\").asText();\n\n            log.info(\"License validity: {}\", isValid);\n            log.info(\"Validation detail: {}\", detail);\n            log.info(\"Validation code: {}\", code);\n\n            // Check if the license itself has floating attribute\n            JsonNode licenseAttrs = jsonResponse.path(\"data\").path(\"attributes\");\n            if (!licenseAttrs.isMissingNode()) {\n                context.isFloatingLicense = licenseAttrs.path(\"floating\").asBoolean(false);\n                context.maxMachines = licenseAttrs.path(\"maxMachines\").asInt(1);\n\n                log.info(\n                        \"License floating (from license): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Also check the policy for floating license support if included\n            JsonNode includedNode = jsonResponse.path(\"included\");\n            JsonNode policyNode = null;\n\n            if (includedNode.isArray()) {\n                for (JsonNode node : includedNode) {\n                    if (\"policies\".equals(node.path(\"type\").asText())) {\n                        policyNode = node;\n                        break;\n                    }\n                }\n            }\n\n            if (policyNode != null) {\n                // Check if this is a floating license from policy\n                boolean policyFloating = policyNode.path(\"attributes\").path(\"floating\").asBoolean(false);\n                int policyMaxMachines = policyNode.path(\"attributes\").path(\"maxMachines\").asInt(1);\n\n                // Policy takes precedence over license attributes\n                if (policyFloating) {\n                    context.isFloatingLicense = true;\n                    context.maxMachines = policyMaxMachines;\n                }\n\n                log.info(\n                        \"License floating (from policy): {}, maxMachines: {}\",\n                        context.isFloatingLicense,\n                        context.maxMachines);\n            }\n\n            // Extract user count, default to 1 if not specified\n            int users = jsonResponse\n                    .path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"users\")\n                    .asInt(1);\n            applicationProperties.getPremium().setMaxUsers(users);\n\n            // Extract isEnterprise flag\n            context.isEnterpriseLicense = jsonResponse\n                    .path(\"data\")\n                    .path(\"attributes\")\n                    .path(\"metadata\")\n                    .path(\"isEnterprise\")\n                    .asBoolean(false);\n\n            log.debug(applicationProperties.toString());\n        } else {\n            log.error(\"Error validating license. Status code: {}\", response.statusCode());\n        }\n        return jsonResponse;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "348", "src_id": "M488", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/file/pdf\")\n    @Operation(\n            summary = \"Convert a file to a PDF using LibreOffice\",\n            description =\n                    \"This endpoint converts a given file to a PDF using LibreOffice API  Input:ANY\"\n                            + \" Output:PDF Type:SISO\")\n    public ResponseEntity<byte[]> processFileToPDF(@ModelAttribute GeneralFile generalFile)\n            throws Exception {\n        MultipartFile inputFile = generalFile.getFileInput();\n        // unused but can start server instance if startup time is to long\n        // LibreOfficeListener.getInstance().start();\n        File file = null;\n        try {\n            file = convertToPdf(inputFile);\n            \n            PDDocument doc = pdfDocumentFactory.load(file);\n            return WebResponseUtils.pdfDocToWebResponse(\n                    doc,\n                    Filenames.toSimpleFileName(inputFile.getOriginalFilename())\n                                    .replaceFirst(\"[.][^.]+$\", \"\")\n                            + \"_convertedToPDF.pdf\");\n        } finally {\n            if (file != null) {\n                file.delete();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "349", "src_id": "M625", "code": "\n    @PostMapping(consumes = \"multipart/form-data\", value = \"/get-info-on-pdf\")\n    @Operation(summary = \"Summary here\", description = \"desc. Input:PDF Output:JSON Type:SISO\")\n    public ResponseEntity<byte[]> getPdfInfo(@ModelAttribute PDFFile request) throws IOException {\n        MultipartFile inputFile = request.getFileInput();\n        boolean readonly = true;\n        try (PDDocument pdfBoxDoc = pdfDocumentFactory.load(inputFile, readonly)) {\n            ObjectMapper objectMapper = new ObjectMapper();\n            ObjectNode jsonOutput = objectMapper.createObjectNode();\n\n            // Metadata using PDFBox\n            PDDocumentInformation info = pdfBoxDoc.getDocumentInformation();\n            ObjectNode metadata = objectMapper.createObjectNode();\n            ObjectNode basicInfo = objectMapper.createObjectNode();\n            ObjectNode docInfoNode = objectMapper.createObjectNode();\n            ObjectNode compliancy = objectMapper.createObjectNode();\n            ObjectNode encryption = objectMapper.createObjectNode();\n            ObjectNode other = objectMapper.createObjectNode();\n\n            metadata.put(\"Title\", info.getTitle());\n            metadata.put(\"Author\", info.getAuthor());\n            metadata.put(\"Subject\", info.getSubject());\n            metadata.put(\"Keywords\", info.getKeywords());\n            metadata.put(\"Producer\", info.getProducer());\n            metadata.put(\"Creator\", info.getCreator());\n            metadata.put(\"CreationDate\", formatDate(info.getCreationDate()));\n            metadata.put(\"ModificationDate\", formatDate(info.getModificationDate()));\n            jsonOutput.set(\"Metadata\", metadata);\n\n            // Total file size of the PDF\n            long fileSizeInBytes = inputFile.getSize();\n            basicInfo.put(\"FileSizeInBytes\", fileSizeInBytes);\n\n            // Number of words, paragraphs, and images in the entire document\n            String fullText = new PDFTextStripper().getText(pdfBoxDoc);\n            String[] words = fullText.split(\"\\\\s+\");\n            int wordCount = words.length;\n            int paragraphCount = fullText.split(\"\\r\\n|\\r|\\n\").length;\n            basicInfo.put(\"WordCount\", wordCount);\n            basicInfo.put(\"ParagraphCount\", paragraphCount);\n            // Number of characters in the entire document (including spaces and special characters)\n            int charCount = fullText.length();\n            basicInfo.put(\"CharacterCount\", charCount);\n\n            // Initialize the flags and types\n            boolean hasCompression = false;\n            String compressionType = \"None\";\n\n            basicInfo.put(\"Compression\", hasCompression);\n            if (hasCompression) {\n                basicInfo.put(\"CompressionType\", compressionType);\n            }\n\n            String language = pdfBoxDoc.getDocumentCatalog().getLanguage();\n            basicInfo.put(\"Language\", language);\n            basicInfo.put(\"Number of pages\", pdfBoxDoc.getNumberOfPages());\n\n            PDDocumentCatalog catalog = pdfBoxDoc.getDocumentCatalog();\n            String pageMode = catalog.getPageMode().name();\n\n            // Document Information using PDFBox\n            docInfoNode.put(\"PDF version\", pdfBoxDoc.getVersion());\n            docInfoNode.put(\"Trapped\", info.getTrapped());\n            docInfoNode.put(\"Page Mode\", getPageModeDescription(pageMode));\n\n            PDAcroForm acroForm = pdfBoxDoc.getDocumentCatalog().getAcroForm();\n\n            ObjectNode formFieldsNode = objectMapper.createObjectNode();\n            if (acroForm != null) {\n                for (PDField field : acroForm.getFieldTree()) {\n                    formFieldsNode.put(field.getFullyQualifiedName(), field.getValueAsString());\n                }\n            }\n            jsonOutput.set(\"FormFields\", formFieldsNode);\n\n            // Generate structured summary data about PDF characteristics\n            ObjectNode summaryData = generatePDFSummaryData(pdfBoxDoc);\n            if (summaryData != null && summaryData.size() > 0) {\n                jsonOutput.set(\"SummaryData\", summaryData);\n            }\n\n            // embeed files TODO size\n            if (catalog.getNames() != null) {\n                PDEmbeddedFilesNameTreeNode efTree = catalog.getNames().getEmbeddedFiles();\n\n                ArrayNode embeddedFilesArray = objectMapper.createArrayNode();\n                if (efTree != null) {\n                    Map<String, PDComplexFileSpecification> efMap = efTree.getNames();\n                    if (efMap != null) {\n                        for (Map.Entry<String, PDComplexFileSpecification> entry : efMap.entrySet()) {\n                            ObjectNode embeddedFileNode = objectMapper.createObjectNode();\n                            embeddedFileNode.put(\"Name\", entry.getKey());\n                            PDEmbeddedFile embeddedFile = entry.getValue().getEmbeddedFile();\n                            if (embeddedFile != null) {\n                                embeddedFileNode.put(\"FileSize\", embeddedFile.getLength()); // size in bytes\n                            }\n                            embeddedFilesArray.add(embeddedFileNode);\n                        }\n                    }\n                }\n                other.set(\"EmbeddedFiles\", embeddedFilesArray);\n            }\n\n            // attachments TODO size\n            ArrayNode attachmentsArray = objectMapper.createArrayNode();\n            for (PDPage page : pdfBoxDoc.getPages()) {\n                for (PDAnnotation annotation : page.getAnnotations()) {\n                    if (annotation instanceof PDAnnotationFileAttachment fileAttachmentAnnotation) {\n                        ObjectNode attachmentNode = objectMapper.createObjectNode();\n                        attachmentNode.put(\"Name\", fileAttachmentAnnotation.getAttachmentName());\n                        attachmentNode.put(\"Description\", fileAttachmentAnnotation.getContents());\n\n                        attachmentsArray.add(attachmentNode);\n                    }\n                }\n            }\n            other.set(\"Attachments\", attachmentsArray);\n\n            // Javascript\n            PDDocumentNameDictionary namesDict = catalog.getNames();\n            ArrayNode javascriptArray = objectMapper.createArrayNode();\n\n            if (namesDict != null) {\n                PDJavascriptNameTreeNode javascriptDict = namesDict.getJavaScript();\n                if (javascriptDict != null) {\n                    try {\n                        Map<String, PDActionJavaScript> jsEntries = javascriptDict.getNames();\n\n                        for (Map.Entry<String, PDActionJavaScript> entry : jsEntries.entrySet()) {\n                            ObjectNode jsNode = objectMapper.createObjectNode();\n                            jsNode.put(\"JS Name\", entry.getKey());\n\n                            PDActionJavaScript jsAction = entry.getValue();\n                            if (jsAction != null) {\n                                String jsCodeStr = jsAction.getAction();\n                                if (jsCodeStr != null) {\n                                    jsNode.put(\"JS Script Length\", jsCodeStr.length());\n                                }\n                            }\n\n                            javascriptArray.add(jsNode);\n                        }\n                    } catch (IOException e) {\n                        log.error(\"exception\", e);\n                    }\n                }\n            }\n            other.set(\"JavaScript\", javascriptArray);\n\n            // TODO size\n            PDOptionalContentProperties ocProperties = pdfBoxDoc.getDocumentCatalog().getOCProperties();\n            ArrayNode layersArray = objectMapper.createArrayNode();\n\n            if (ocProperties != null) {\n                for (PDOptionalContentGroup ocg : ocProperties.getOptionalContentGroups()) {\n                    ObjectNode layerNode = objectMapper.createObjectNode();\n                    layerNode.put(\"Name\", ocg.getName());\n                    layersArray.add(layerNode);\n                }\n            }\n\n            other.set(\"Layers\", layersArray);\n\n            // TODO Security\n\n            PDStructureTreeRoot structureTreeRoot = pdfBoxDoc.getDocumentCatalog().getStructureTreeRoot();\n            ArrayNode structureTreeArray;\n            try {\n                if (structureTreeRoot != null) {\n                    structureTreeArray = exploreStructureTree(structureTreeRoot.getKids());\n                    other.set(\"StructureTree\", structureTreeArray);\n                }\n            } catch (Exception e) {\n                // TODO Auto-generated catch block\n                log.error(\"exception\", e);\n            }\n\n            boolean isPdfACompliant = checkForStandard(pdfBoxDoc, \"PDF/A\");\n            boolean isPdfXCompliant = checkForStandard(pdfBoxDoc, \"PDF/X\");\n            boolean isPdfECompliant = checkForStandard(pdfBoxDoc, \"PDF/E\");\n            boolean isPdfVTCompliant = checkForStandard(pdfBoxDoc, \"PDF/VT\");\n            boolean isPdfUACompliant = checkForStandard(pdfBoxDoc, \"PDF/UA\");\n            boolean isPdfBCompliant = checkForStandard(pdfBoxDoc, \"PDF/B\"); // If you want to check for PDF/Broadcast, though this isn't an official ISO standard.\n            boolean isPdfSECCompliant = checkForStandard(pdfBoxDoc, \"PDF/SEC\"); // This might not be effective since PDF/SEC was under development in 2021.\n\n            compliancy.put(\"IsPDF/ACompliant\", isPdfACompliant);\n            compliancy.put(\"IsPDF/XCompliant\", isPdfXCompliant);\n            compliancy.put(\"IsPDF/ECompliant\", isPdfECompliant);\n            compliancy.put(\"IsPDF/VTCompliant\", isPdfVTCompliant);\n            compliancy.put(\"IsPDF/UACompliant\", isPdfUACompliant);\n            compliancy.put(\"IsPDF/BCompliant\", isPdfBCompliant);\n            compliancy.put(\"IsPDF/SECCompliant\", isPdfSECCompliant);\n\n            PDOutlineNode root = pdfBoxDoc.getDocumentCatalog().getDocumentOutline();\n            ArrayNode bookmarksArray = objectMapper.createArrayNode();\n\n            if (root != null) {\n                for (PDOutlineItem child : root.children()) {\n                    addOutlinesToArray(child, bookmarksArray);\n                }\n            }\n\n            other.set(\"Bookmarks/Outline/TOC\", bookmarksArray);\n\n            PDMetadata pdMetadata = pdfBoxDoc.getDocumentCatalog().getMetadata();\n\n            String xmpString = null;\n\n            if (pdMetadata != null) {\n                try {\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        DomXmpParser domXmpParser = new DomXmpParser();\n                        XMPMetadata xmpMeta = domXmpParser.parse(is);\n\n                        ByteArrayOutputStream os = new ByteArrayOutputStream();\n                        new XmpSerializer().serialize(xmpMeta, os, true);\n                        xmpString = new String(os.toByteArray(), StandardCharsets.UTF_8);\n                    }\n                } catch (XmpParsingException e) {\n                    // XMP parsing failed, try to read raw metadata instead\n                    log.debug(\"XMP parsing failed, reading raw metadata: {}\", e.getMessage());\n                    try (COSInputStream is = pdMetadata.createInputStream()) {\n                        byte[] metadataBytes = is.readAllBytes();\n                        xmpString = new String(metadataBytes, StandardCharsets.UTF_8);\n                    }\n                } catch (IOException e) {\n                    log.error(\"exception\", e);\n                }\n            }\n\n            other.put(\"XMPMetadata\", xmpString);\n\n            if (pdfBoxDoc.isEncrypted()) {\n                encryption.put(\"IsEncrypted\", true);\n\n                // Retrieve encryption details using getEncryption()\n                PDEncryption pdfEncryption = pdfBoxDoc.getEncryption();\n                encryption.put(\"EncryptionAlgorithm\", pdfEncryption.getFilter());\n                encryption.put(\"KeyLength\", pdfEncryption.getLength());\n                // Add other encryption-related properties as needed\n            } else {\n                encryption.put(\"IsEncrypted\", false);\n            }\n\n            ObjectNode permissionsNode = objectMapper.createObjectNode();\n            setNodePermissions(pdfBoxDoc, permissionsNode);\n\n            ObjectNode pageInfoParent = objectMapper.createObjectNode();\n            for (int pageNum = 0; pageNum < pdfBoxDoc.getNumberOfPages(); pageNum++) {\n                ObjectNode pageInfo = objectMapper.createObjectNode();\n\n                // Retrieve the page\n                PDPage page = pdfBoxDoc.getPage(pageNum);\n\n                // Page-level Information\n                PDRectangle mediaBox = page.getMediaBox();\n\n                float width = mediaBox.getWidth();\n                float height = mediaBox.getHeight();\n\n                ObjectNode sizeInfo = objectMapper.createObjectNode();\n\n                getDimensionInfo(sizeInfo, width, height);\n\n                sizeInfo.put(\"Standard Page\", getPageSize(width, height));\n                pageInfo.set(\"Size\", sizeInfo);\n\n                pageInfo.put(\"Rotation\", page.getRotation());\n                pageInfo.put(\"Page Orientation\", getPageOrientation(width, height));\n\n                // Boxes\n                pageInfo.put(\"MediaBox\", mediaBox.toString());\n\n                // Assuming the following boxes are defined for your document; if not, you may get null values.\n                PDRectangle cropBox = page.getCropBox();\n                pageInfo.put(\"CropBox\", cropBox == null ? \"Undefined\" : cropBox.toString());\n\n                PDRectangle bleedBox = page.getBleedBox();\n                pageInfo.put(\"BleedBox\", bleedBox == null ? \"Undefined\" : bleedBox.toString());\n\n                PDRectangle trimBox = page.getTrimBox();\n                pageInfo.put(\"TrimBox\", trimBox == null ? \"Undefined\" : trimBox.toString());\n\n                PDRectangle artBox = page.getArtBox();\n                pageInfo.put(\"ArtBox\", artBox == null ? \"Undefined\" : artBox.toString());\n\n                // Content Extraction\n                PDFTextStripper textStripper = new PDFTextStripper();\n                textStripper.setStartPage(pageNum + 1);\n                textStripper.setEndPage(pageNum + 1);\n                String pageText = textStripper.getText(pdfBoxDoc);\n\n                pageInfo.put(\"Text Characters Count\", pageText.length()); //\n\n                // Annotations\n                List<PDAnnotation> annotations = page.getAnnotations();\n\n                int subtypeCount = 0;\n                int contentsCount = 0;\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation.getSubtype() != null) {\n                        subtypeCount++; // Increase subtype count\n                    }\n                    if (annotation.getContents() != null) {\n                        contentsCount++; // Increase contents count\n                    }\n                }\n\n                ObjectNode annotationsObject = objectMapper.createObjectNode();\n                annotationsObject.put(\"AnnotationsCount\", annotations.size());\n                annotationsObject.put(\"SubtypeCount\", subtypeCount);\n                annotationsObject.put(\"ContentsCount\", contentsCount);\n                pageInfo.set(\"Annotations\", annotationsObject);\n\n                // Images (simplified)\n                // This part is non-trivial as images can be embedded in multiple ways in a PDF.\n                // Here is a basic structure to recognize image XObjects on a page.\n                ArrayNode imagesArray = objectMapper.createArrayNode();\n                PDResources resources = page.getResources();\n\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    if (xObject instanceof PDImageXObject image) {\n                        ObjectNode imageNode = objectMapper.createObjectNode();\n                        imageNode.put(\"Width\", image.getWidth());\n                        imageNode.put(\"Height\", image.getHeight());\n                        if (image.getMetadata() != null\n                                && image.getMetadata().getFile() != null\n                                && image.getMetadata().getFile().getFile() != null) {\n                            imageNode.put(\"Name\", image.getMetadata().getFile().getFile());\n                        }\n                        if (image.getColorSpace() != null) {\n                            imageNode.put(\"ColorSpace\", image.getColorSpace().getName());\n                        }\n\n                        imagesArray.add(imageNode);\n                    }\n                }\n                pageInfo.set(\"Images\", imagesArray);\n\n                // Links\n                ArrayNode linksArray = objectMapper.createArrayNode();\n                Set<String> uniqueURIs = new HashSet<>(); // To store unique URIs\n\n                for (PDAnnotation annotation : annotations) {\n                    if (annotation instanceof PDAnnotationLink linkAnnotation) {\n                        if (linkAnnotation.getAction() instanceof PDActionURI uriAction) {\n                            String uri = uriAction.getURI();\n                            uniqueURIs.add(uri); // Add to set to ensure uniqueness\n                        }\n                    }\n                }\n\n                // Add unique URIs to linksArray\n                for (String uri : uniqueURIs) {\n                    ObjectNode linkNode = objectMapper.createObjectNode();\n                    linkNode.put(\"URI\", uri);\n                    linksArray.add(linkNode);\n                }\n                pageInfo.set(\"Links\", linksArray);\n\n                // Fonts\n                ArrayNode fontsArray = objectMapper.createArrayNode();\n                Map<String, ObjectNode> uniqueFontsMap = new HashMap<>();\n\n                for (COSName fontName : resources.getFontNames()) {\n                    PDFont font = resources.getFont(fontName);\n                    ObjectNode fontNode = objectMapper.createObjectNode();\n\n                    fontNode.put(\"IsEmbedded\", font.isEmbedded());\n\n                    // PDFBox provides Font's BaseFont (i.e., the font name) directly\n                    fontNode.put(\"Name\", font.getName());\n\n                    fontNode.put(\"Subtype\", font.getType());\n\n                    PDFontDescriptor fontDescriptor = font.getFontDescriptor();\n\n                    if (fontDescriptor != null) {\n                        fontNode.put(\"ItalicAngle\", fontDescriptor.getItalicAngle());\n                        int flags = fontDescriptor.getFlags();\n                        fontNode.put(\"IsItalic\", (flags & 1) != 0);\n                        fontNode.put(\"IsBold\", (flags & 64) != 0);\n                        fontNode.put(\"IsFixedPitch\", (flags & 2) != 0);\n                        fontNode.put(\"IsSerif\", (flags & 4) != 0);\n                        fontNode.put(\"IsSymbolic\", (flags & 8) != 0);\n                        fontNode.put(\"IsScript\", (flags & 16) != 0);\n                        fontNode.put(\"IsNonsymbolic\", (flags & 32) != 0);\n\n                        fontNode.put(\"FontFamily\", fontDescriptor.getFontFamily());\n                        // Font stretch and BBox are not directly available in PDFBox's API, so\n                        // these are omitted for simplicity\n                        fontNode.put(\"FontWeight\", fontDescriptor.getFontWeight());\n                    }\n\n                    // Create a unique key for this font node based on its attributes\n                    String uniqueKey = fontNode.toString();\n\n                    // Increment count if this font exists, or initialize it if new\n                    if (uniqueFontsMap.containsKey(uniqueKey)) {\n                        ObjectNode existingFontNode = uniqueFontsMap.get(uniqueKey);\n                        int count = existingFontNode.get(\"Count\").asInt() + 1;\n                        existingFontNode.put(\"Count\", count);\n                    } else {\n                        fontNode.put(\"Count\", 1);\n                        uniqueFontsMap.put(uniqueKey, fontNode);\n                    }\n                }\n\n                // Add unique font entries to fontsArray\n                for (ObjectNode uniqueFontNode : uniqueFontsMap.values()) {\n                    fontsArray.add(uniqueFontNode);\n                }\n\n                pageInfo.set(\"Fonts\", fontsArray);\n\n                // Access resources dictionary\n                ArrayNode colorSpacesArray = objectMapper.createArrayNode();\n\n                Iterable<COSName> colorSpaceNames = resources.getColorSpaceNames();\n                for (COSName name : colorSpaceNames) {\n                    PDColorSpace colorSpace = resources.getColorSpace(name);\n                    if (colorSpace instanceof PDICCBased iccBased) {\n                        PDStream iccData = iccBased.getPDStream();\n                        byte[] iccBytes = iccData.toByteArray();\n\n                        // TODO: Further decode and analyze the ICC data if needed\n                        ObjectNode iccProfileNode = objectMapper.createObjectNode();\n                        iccProfileNode.put(\"ICC Profile Length\", iccBytes.length);\n                        colorSpacesArray.add(iccProfileNode);\n                    }\n                }\n                pageInfo.set(\"Color Spaces & ICC Profiles\", colorSpacesArray);\n\n                // Other XObjects\n                Map<String, Integer> xObjectCountMap = new HashMap<>(); // To store the count for each type\n                for (COSName name : resources.getXObjectNames()) {\n                    PDXObject xObject = resources.getXObject(name);\n                    String xObjectType;\n\n                    if (xObject instanceof PDImageXObject) {\n                        xObjectType = \"Image\";\n                    } else if (xObject instanceof PDFormXObject) {\n                        xObjectType = \"Form\";\n                    } else {\n                        xObjectType = \"Other\";\n                    }\n\n                    // Increment the count for this type in the map\n                    xObjectCountMap.put(xObjectType, xObjectCountMap.getOrDefault(xObjectType, 0) + 1);\n                }\n\n                // Add the count map to pageInfo (or wherever you want to store it)\n                ObjectNode xObjectCountNode = objectMapper.createObjectNode();\n                for (Map.Entry<String, Integer> entry : xObjectCountMap.entrySet()) {\n                    xObjectCountNode.put(entry.getKey(), entry.getValue());\n                }\n                pageInfo.set(\"XObjectCounts\", xObjectCountNode);\n\n                ArrayNode multimediaArray = objectMapper.createArrayNode();\n\n                for (PDAnnotation annotation : annotations) {\n                    if (\"RichMedia\".equals(annotation.getSubtype())) {\n                        ObjectNode multimediaNode = objectMapper.createObjectNode();\n                        // Extract details from the annotation as needed\n                        multimediaArray.add(multimediaNode);\n                    }\n                }\n\n                pageInfo.set(\"Multimedia\", multimediaArray);\n\n                pageInfoParent.set(\"Page \" + (pageNum + 1), pageInfo);\n            }\n\n            jsonOutput.set(\"BasicInfo\", basicInfo);\n            jsonOutput.set(\"DocumentInfo\", docInfoNode);\n            jsonOutput.set(\"Compliancy\", compliancy);\n            jsonOutput.set(\"Encryption\", encryption);\n            jsonOutput.set(\"Permissions\", permissionsNode); // set the node under \"Permissions\"\n            jsonOutput.set(\"Other\", other);\n            jsonOutput.set(\"PerPageInfo\", pageInfoParent);\n\n            // Save JSON to file\n            String jsonString = objectMapper.writerWithDefaultPrettyPrinter().writeValueAsString(jsonOutput);\n\n            return WebResponseUtils.bytesToWebResponse(\n                    jsonString.getBytes(StandardCharsets.UTF_8),\n                    \"response.json\",\n                    MediaType.APPLICATION_JSON);\n\n        } catch (Exception e) {\n            log.error(\"exception\", e);\n        }\n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "350", "src_id": "M24", "code": "\n    private boolean verifyCertificateLicense(String licenseFile, LicenseContext context) {\n        try {\n            String encodedPayload = licenseFile;\n            // Remove the header\n            encodedPayload = encodedPayload.replace(CERT_PREFIX, \"\");\n            // Remove the footer\n            encodedPayload = encodedPayload.replace(CERT_SUFFIX, \"\");\n            // Remove all newlines\n            encodedPayload = encodedPayload.replaceAll(\"\\\\r?\\\\n\", \"\");\n\n            byte[] payloadBytes = Base64.getDecoder().decode(encodedPayload);\n            String payload = new String(payloadBytes);\n\n            log.info(\"Decoded certificate payload: {}\", payload);\n\n            String encryptedData = \"\";\n            String encodedSignature = \"\";\n            String algorithm = \"\";\n\n            try {\n                JSONObject attrs = new JSONObject(payload);\n                encryptedData = (String) attrs.get(\"enc\");\n                encodedSignature = (String) attrs.get(\"sig\");\n                algorithm = (String) attrs.get(\"alg\");\n            } catch (JSONException e) {\n                log.error(\"Failed to parse license file: {}\", e.getMessage());\n                return false;\n            }\n\n            // Verify license file algorithm\n            if (!\"base64+ed25519\".equals(algorithm)) {\n                log.error(\"Unsupported algorithm: {}. Only base64+ed25519 is supported.\", algorithm);\n                return false;\n            }\n\n            // Verify signature\n            boolean isSignatureValid = verifyEd25519Signature(encryptedData, encodedSignature);\n            if (!isSignatureValid) {\n                log.error(\"License file signature is invalid\");\n                return false;\n            }\n\n            log.info(\"License file signature is valid\");\n\n            // Decode the base64 data\n            String decodedData;\n            try {\n                decodedData = new String(Base64.getDecoder().decode(encryptedData));\n            } catch (IllegalArgumentException e) {\n                log.error(\"Failed to decode license data: {}\", e.getMessage());\n                return false;\n            }\n\n            // Process the certificate data\n            boolean isValid = processCertificateData(decodedData, context);\n\n            return isValid;\n        } catch (Exception e) {\n            log.error(\"Error verifying certificate license: {}\", e.getMessage(), e);\n            return false;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "351", "src_id": "M403", "code": "\n    private static void sanitizeHtmlFilesInZip(\n            Path zipFilePath, boolean disableSanitize, TempFileManager tempFileManager)\n            throws IOException {\n        try (TempDirectory tempUnzippedDir = new TempDirectory(tempFileManager)) {\n            try (ZipInputStream zipIn =\n                    ZipSecurity.createHardenedInputStream(\n                            new ByteArrayInputStream(Files.readAllBytes(zipFilePath)))) {\n                ZipEntry entry = zipIn.getNextEntry();\n                while (entry != null) {\n                    Path filePath =\n                            tempUnzippedDir.getPath().resolve(sanitizeZipFilename(entry.getName()));\n                    if (!entry.isDirectory()) {\n                        Files.createDirectories(filePath.getParent());\n                        if (entry.getName().toLowerCase().endsWith(\".html\")\n                                || entry.getName().toLowerCase().endsWith(\".htm\")) {\n                            String content =\n                                    new String(zipIn.readAllBytes(), StandardCharsets.UTF_8);\n                            String sanitizedContent = sanitizeHtmlContent(content, disableSanitize);\n                            Files.write(\n                                    filePath, sanitizedContent.getBytes(StandardCharsets.UTF_8));\n                        } else {\n                            Files.copy(zipIn, filePath);\n                        }\n                    }\n                    zipIn.closeEntry();\n                    entry = zipIn.getNextEntry();\n                }\n            }\n\n            // Repack the sanitized files\n            zipDirectory(tempUnzippedDir.getPath(), zipFilePath);\n        } // tempUnzippedDir auto-cleaned\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "352", "src_id": "M317", "code": "\n    public static void addImageToDocument(\n            PDDocument doc, PDImageXObject image, String fitOption, boolean autoRotate)\n            throws IOException {\n        boolean imageIsLandscape = image.getWidth() > image.getHeight();\n        PDRectangle pageSize = PDRectangle.A4;\n\n        if (autoRotate && imageIsLandscape) {\n            pageSize = new PDRectangle(pageSize.getHeight(), pageSize.getWidth());\n        }\n\n        if (\"fitDocumentToImage\".equals(fitOption)) {\n            pageSize = new PDRectangle(image.getWidth(), image.getHeight());\n        }\n\n        PDPage page = new PDPage(pageSize);\n        doc.addPage(page);\n\n        float pageWidth = page.getMediaBox().getWidth();\n        float pageHeight = page.getMediaBox().getHeight();\n\n        try (PDPageContentStream contentStream =\n                new PDPageContentStream(doc, page, AppendMode.APPEND, true, true)) {\n            if (\"fillPage\".equals(fitOption) || \"fitDocumentToImage\".equals(fitOption)) {\n                contentStream.drawImage(image, 0, 0, pageWidth, pageHeight);\n            } else if (\"maintainAspectRatio\".equals(fitOption)) {\n                float imageAspectRatio = (float) image.getWidth() / (float) image.getHeight();\n                float pageAspectRatio = pageWidth / pageHeight;\n\n                float scaleFactor = 1.0f;\n                if (imageAspectRatio > pageAspectRatio) {\n                    scaleFactor = pageWidth / image.getWidth();\n                } else {\n                    scaleFactor = pageHeight / image.getHeight();\n                }\n\n                float xPos = (pageWidth - (image.getWidth() * scaleFactor)) / 2;\n                float yPos = (pageHeight - (image.getHeight() * scaleFactor)) / 2;\n                contentStream.drawImage(\n                        image,\n                        xPos,\n                        yPos,\n                        image.getWidth() * scaleFactor,\n                        image.getHeight() * scaleFactor);\n            }\n        } catch (IOException e) {\n            log.error(\"Error adding image to PDF\", e);\n            throw e;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "353", "src_id": "M307", "code": "\n    public static String generateMachineFingerprint() {\n        try {\n            // Get the MAC address\n            StringBuilder sb = new StringBuilder();\n            InetAddress ip = InetAddress.getLocalHost();\n            NetworkInterface network = NetworkInterface.getByInetAddress(ip);\n\n            if (network == null) {\n                Enumeration<NetworkInterface> networks = NetworkInterface.getNetworkInterfaces();\n                while (networks.hasMoreElements()) {\n                    NetworkInterface net = networks.nextElement();\n                    byte[] mac = net.getHardwareAddress();\n                    if (mac != null) {\n                        for (int i = 0; i < mac.length; i++) {\n                            sb.append(String.format(\"%02X\", mac[i]));\n                        }\n                        break; // Use the first network interface with a MAC address\n                    }\n                }\n            } else {\n                byte[] mac = network.getHardwareAddress();\n                if (mac != null) {\n                    for (int i = 0; i < mac.length; i++) {\n                        sb.append(String.format(\"%02X\", mac[i]));\n                    }\n                }\n            }\n\n            // Hash the MAC address for privacy and consistency\n            MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n            byte[] hash = md.digest(sb.toString().getBytes(StandardCharsets.UTF_8));\n            StringBuilder fingerprint = new StringBuilder();\n            for (byte b : hash) {\n                fingerprint.append(String.format(\"%02x\", b));\n            }\n            return fingerprint.toString();\n        } catch (Exception e) {\n            return \"GenericID\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "354", "src_id": "M135", "code": "\n    private void setCommonMetadata(PDDocument pdf, PdfMetadata pdfMetadata) {\n        String title = pdfMetadata.getTitle();\n        pdf.getDocumentInformation().setTitle(title);\n        pdf.getDocumentInformation().setProducer(stirlingPDFLabel);\n        pdf.getDocumentInformation().setSubject(pdfMetadata.getSubject());\n        pdf.getDocumentInformation().setKeywords(pdfMetadata.getKeywords());\n        pdf.getDocumentInformation().setModificationDate(Calendar.getInstance());\n\n        String author = pdfMetadata.getAuthor();\n        if (applicationProperties.getPremium().getProFeatures().getCustomMetadata().isAutoUpdateMetadata()\n                && runningProOrHigher) {\n            author = applicationProperties.getPremium().getProFeatures().getCustomMetadata().getAuthor();\n\n            if (userService != null) {\n                author = author.replace(\"username\", userService.getCurrentUsername());\n            }\n        }\n        pdf.getDocumentInformation().setAuthor(author);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "355", "src_id": "M128", "code": "\n    @Bean(name = \"machineType\")\n    public String determineMachineType() {\n        try {\n            boolean isDocker = runningInDocker();\n            boolean isKubernetes = System.getenv(\"KUBERNETES_SERVICE_HOST\") != null;\n            boolean isBrowserOpen = \"true\".equalsIgnoreCase(env.getProperty(\"BROWSER_OPEN\"));\n\n            if (isKubernetes) {\n                return \"Kubernetes\";\n            } else if (isDocker) {\n                return \"Docker\";\n            } else if (isBrowserOpen) {\n                String os = System.getProperty(\"os.name\").toLowerCase(Locale.ROOT);\n                if (os.contains(\"win\")) {\n                    return \"Client-windows\";\n                } else if (os.contains(\"mac\")) {\n                    return \"Client-mac\";\n                } else {\n                    return \"Client-unix\";\n                }\n            } else {\n                return \"Server-jar\";\n            }\n        } catch (Exception e) {\n            return \"Unknown\";\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "356", "src_id": "M101", "code": "\n    private void processRequest(\n            int limitPerDay,\n            String identifier,\n            Map<String, Bucket> buckets,\n            HttpServletRequest request,\n            HttpServletResponse response,\n            FilterChain filterChain)\n            throws IOException, ServletException {\n        // Get or create bucket for the user\n        Bucket userBucket = buckets.computeIfAbsent(identifier, k -> createUserBucket(limitPerDay));\n        \n        // Try to consume a token from the bucket\n        ConsumptionProbe probe = userBucket.tryConsumeAndReturnRemaining(1);\n        \n        if (probe.isConsumed()) {\n            // Request is allowed, set remaining tokens in header\n            response.setHeader(\n                    \"X-Rate-Limit-Remaining\",\n                    stripNewlines(Newlines.stripAll(Long.toString(probe.getRemainingTokens()))));\n            \n            // Continue with the filter chain\n            filterChain.doFilter(request, response);\n        } else {\n            // Request is denied due to rate limiting\n            long waitForRefill = probe.getNanosToWaitForRefill() / 1_000_000_000;\n            \n            // Set appropriate response status and headers\n            response.setStatus(HttpStatus.TOO_MANY_REQUESTS.value());\n            response.setHeader(\n                    \"X-Rate-Limit-Retry-After-Seconds\",\n                    Newlines.stripAll(String.valueOf(waitForRefill)));\n            \n            // Write error message to response\n            response.getWriter().write(\"Rate limit exceeded for POST requests.\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "357", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n    @ResizeMode\n    public static int nextResizeModeAndSaveToPrefs(final Player player,\n                                                   @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        \n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n        player.getPrefs().edit()\n                .putInt(player.getContext().getString(R.string.last_resize_mode), newResizeMode)\n                .apply();\n                \n        return newResizeMode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "358", "src_id": "M424", "code": "\n    @Override\n    public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n        \n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n            if (!fragmentIsVisible) {\n                onFragmentStopped();\n            }\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n            fragmentIsVisible = false;\n            onFragmentStopped();\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n            fragmentIsVisible = true;\n            player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n            if (!isControlsVisible()) {\n                hideSystemUIIfNeeded();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "359", "src_id": "M900", "code": "\n    @StyleRes\n    public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n        final String selectedTheme = getSelectedThemeKey(context);\n\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } else if (selectedTheme.equals(blackTheme)) {\n            return R.style.BlackSettingsTheme;\n        } else if (selectedTheme.equals(automaticDeviceTheme)) {\n            if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                final String selectedNightTheme = getSelectedNightThemeKey(context);\n                if (selectedNightTheme.equals(blackTheme)) {\n                    return R.style.BlackSettingsTheme;\n                } else {\n                    return R.style.DarkSettingsTheme;\n                }\n            } else {\n                // there is only one day theme\n                return R.style.LightSettingsTheme;\n            }\n        } else {\n            // default to dark theme\n            return R.style.DarkSettingsTheme;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "360", "src_id": "M895", "code": "\n@Override\npublic Bitmap transform(final Bitmap source) {\n    if (DEBUG) {\n        Log.d(TAG, \"Thumbnail - transform() called\");\n    }\n\n    // Calculate the notification thumbnail width based on resources and source width\n    final float notificationThumbnailWidth = Math.min(\n            context.getResources().getDimension(R.dimen.player_notification_thumbnail_width),\n            source.getWidth());\n\n    // Create scaled bitmap with the calculated dimensions\n    final Bitmap result = BitmapCompat.createScaledBitmap(\n            source,\n            (int) notificationThumbnailWidth,\n            (int) (source.getHeight() / (source.getWidth() / notificationThumbnailWidth)),\n            null,\n            true);\n\n    if (result == source || !result.isMutable()) {\n        // Create a new mutable bitmap to prevent strange crashes on some devices (see #4638)\n        final Bitmap copied = BitmapCompat.createScaledBitmap(\n                source,\n                (int) notificationThumbnailWidth - 1,\n                (int) (source.getHeight() / (source.getWidth() / (notificationThumbnailWidth - 1))),\n                null,\n                true);\n        source.recycle();\n        return copied;\n    } else {\n        source.recycle();\n        return result;\n    }\n}\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "361", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n                pause();\n                break;\n            case ACTION_CLOSE:\n                service.destroyPlayerAndStopService();\n                break;\n            case ACTION_PLAY_PAUSE:\n                playPause();\n                break;\n            case ACTION_PLAY_PREVIOUS:\n                playPrevious();\n                break;\n            case ACTION_PLAY_NEXT:\n                playNext();\n                break;\n            case ACTION_FAST_REWIND:\n                fastRewind();\n                break;\n            case ACTION_FAST_FORWARD:\n                fastForward();\n                break;\n            case ACTION_REPEAT:\n                cycleNextRepeatMode();\n                break;\n            case ACTION_SHUFFLE:\n                toggleShuffleModeEnabled();\n                break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                }\n                break;\n        }\n\n        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "362", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n\n        // Handle different error types with appropriate user messages\n        if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            \n            // Starting ReCaptcha Challenge Activity\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } else if (errorInfo.getThrowable() != null\n                && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n            Toast.makeText(context, R.string.restricted_video_no_stream,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n            Toast.makeText(context, R.string.soundcloud_go_plus_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n            Toast.makeText(context, R.string.youtube_music_premium_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n        } else {\n            ErrorUtil.createNotification(context, errorInfo);\n        }\n\n        // Close the activity if it's a RouterActivity\n        if (context instanceof RouterActivity) {\n            ((RouterActivity) context).finish();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "363", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context,\n                                               @NonNull final FragmentManager fragmentManager,\n                                               final int serviceId,\n                                               @Nullable final String url,\n                                               @NonNull final String title,\n                                               @Nullable final PlayQueue playQueue,\n                                               final boolean switchingPlayers) {\n\n        final boolean autoPlay;\n        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n        \n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else if (switchingPlayers) {\n            // switching player to main player\n            autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n        } else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else {\n            // opening new stream while already playing in another player\n            autoPlay = false;\n        }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n            expandMainPlayer(detailFragment.requireActivity());\n            detailFragment.setAutoPlay(autoPlay);\n            \n            if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                        || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n            } else {\n                detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n            }\n            \n            detailFragment.scrollToTop();\n        };\n\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        \n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n        } else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment\n                    .getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n\n            defaultTransaction(fragmentManager)\n                    .replace(R.id.fragment_player_holder, instance)\n                    .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                    .commit();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "364", "src_id": "M698", "code": "\n    @Override\n    public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        // Handle banner image loading\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners())\n                    .tag(PICASSO_CHANNEL_TAG)\n                    .into(binding.channelBannerImage);\n        } else {\n            // Do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n\n        // Load avatar images\n        PicassoHelper.loadAvatar(result.getAvatars())\n                .tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars())\n                .tag(PICASSO_CHANNEL_TAG)\n                .into(binding.subChannelAvatarView);\n\n        // Set channel information\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        \n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(\n                    Localization.shortSubscriberCount(activity, result.getSubscriberCount()));\n        } else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n\n        // Handle parent channel information if available\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(\n                    String.format(getString(R.string.channel_created_by),\n                            currentInfo.getParentChannelName()));\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n\n        // Check for content support errors\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        // Clean up existing disposables and monitors\n        disposables.clear();\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n\n        // Update UI components\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "365", "src_id": "M379", "code": "\n    @Override\n    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n                || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n                || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n        final List<Tracks.Group> textTracks = currentTracks\n                .getGroups()\n                .stream()\n                .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n                .collect(Collectors.toList());\n        final List<String> availableLanguages = textTracks.stream()\n                .map(Tracks.Group::getMediaTrackGroup)\n                .filter(textTrack -> textTrack.length > 0)\n                .map(textTrack -> textTrack.getFormat(0).language)\n                .collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional<Format> selectedTracks = textTracks.stream()\n                .filter(Tracks.Group::isSelected)\n                .filter(info -> info.getMediaTrackGroup().length >= 1)\n                .map(info -> info.getMediaTrackGroup().getFormat(0))\n                .findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(\n                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n        binding.captionTextView.setVisibility(\n                availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "366", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context,\n                                                         @NonNull final List<Image> images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images)\n                .transform(new Transformation() {\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        // Calculate appropriate thumbnail width based on resources\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        // Create scaled bitmap with calculated dimensions\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // Create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n\n                    @Override\n                    public String key() {\n                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                    }\n                });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "367", "src_id": "M1043", "code": "\n    private void doPostprocessing() {\n        if (DEBUG) {\n            Log.d(TAG, \"doPostprocessing() called\");\n        }\n\n        errCode = ERROR_NOTHING;\n        errObject = null;\n        final Thread thread = Thread.currentThread();\n\n        notifyPostProcessing(1);\n\n        if (DEBUG) {\n            thread.setName(\"[\" + TAG + \"]  ps = \" + psAlgorithm + \"  filename = \" + storage.getName());\n        }\n\n        Exception exception = null;\n\n        try {\n            psAlgorithm.run(this);\n        } catch (Exception err) {\n            Log.e(TAG, \"Post-processing failed. \" + psAlgorithm.toString(), err);\n\n            if (err instanceof InterruptedIOException \n                    || err instanceof ClosedByInterruptException \n                    || thread.isInterrupted()) {\n                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);\n                return;\n            }\n\n            if (errCode == ERROR_NOTHING) {\n                errCode = ERROR_POSTPROCESSING;\n            }\n\n            exception = err;\n        } finally {\n            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);\n        }\n\n        if (errCode != ERROR_NOTHING) {\n            if (exception == null) {\n                exception = errObject;\n            }\n            notifyError(ERROR_POSTPROCESSING, exception);\n            return;\n        }\n\n        notifyFinished();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "368", "src_id": "M1031", "code": "\n    void establishConnection(final int threadId, final HttpURLConnection conn)\n            throws IOException, HttpError {\n        if (DEBUG) {\n            Log.d(TAG, threadId + \":[request]  Range=\" + conn.getRequestProperty(\"Range\"));\n            Log.d(TAG, threadId + \":[response] Code=\" + conn.getResponseCode());\n            Log.d(TAG, threadId + \":[response] Content-Length=\" + conn.getContentLength());\n            Log.d(TAG, threadId + \":[response] Content-Range=\" + conn.getHeaderField(\"Content-Range\"));\n        }\n\n        final int statusCode = conn.getResponseCode();\n\n        switch (statusCode) {\n            case 204:\n            case 205:\n            case 207:\n                throw new HttpError(statusCode);\n            case 416:\n                return; // let the download thread handle this error\n            default:\n                if (statusCode < 200 || statusCode > 299) {\n                    throw new HttpError(statusCode);\n                }\n                break;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "369", "src_id": "M827", "code": "\n    private Elst parseEdts(final Box ref) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"parseEdts() called with: ref = [\" + ref + \"]\");\n        }\n\n        final Box b = untilBox(ref, ATOM_ELST);\n        if (b == null) {\n            return null;\n        }\n\n        final Elst obj = new Elst();\n\n        final boolean v1 = stream.read() == 1;\n        stream.skipBytes(3); // flags\n\n        final int entryCount = stream.readInt();\n        if (entryCount < 1) {\n            obj.bMediaRate = 0x00010000; // default media rate (1.0)\n            return obj;\n        }\n\n        if (v1) {\n            stream.skipBytes(DataReader.LONG_SIZE); // segment duration\n            obj.mediaTime = stream.readLong();\n            // ignore all remain entries\n            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));\n        } else {\n            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration\n            obj.mediaTime = stream.readInt();\n        }\n\n        obj.bMediaRate = stream.readInt();\n\n        return obj;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "370", "src_id": "M1048", "code": "\n    @Override\n    public void run() {\n        if (DEBUG && !mMission.unknownLength && mMission.fallbackResumeOffset > 0) {\n            Log.i(TAG, \"Resuming a single-thread download at \" + mMission.fallbackResumeOffset);\n        }\n\n        boolean done;\n        long start = mMission.fallbackResumeOffset;\n\n        try {\n            final long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;\n\n            final int mId = 1;\n            mConn = mMission.openConnection(false, rangeStart, -1);\n\n            if (mRetryCount == 0 && rangeStart == -1) {\n                // workaround: bypass android connection pool\n                mConn.setRequestProperty(\"Range\", \"bytes=0-\");\n            }\n\n            mMission.establishConnection(mId, mConn);\n\n            // check if the download can be resumed\n            if (mConn.getResponseCode() == 416 && start > 0) {\n                mMission.notifyProgress(-start);\n                start = 0;\n                mRetryCount--;\n                throw new DownloadMission.HttpError(416);\n            }\n\n            // secondary check for the file length\n            if (!mMission.unknownLength) {\n                mMission.unknownLength = Utility.getContentLength(mConn) == -1;\n            }\n\n            if (mMission.unknownLength || mConn.getResponseCode() == 200) {\n                // restart amount of bytes downloaded\n                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];\n            }\n\n            mF = mMission.storage.getStream();\n            mF.seek(mMission.offsets[mMission.current] + start);\n\n            mIs = mConn.getInputStream();\n\n            final byte[] buf = new byte[DownloadMission.BUFFER_SIZE];\n            int len = 0;\n\n            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {\n                mF.write(buf, 0, len);\n                start += len;\n                mMission.notifyProgress(len);\n            }\n\n            dispose();\n\n            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file\n            done = len == -1;\n        } catch (Exception e) {\n            dispose();\n\n            mMission.fallbackResumeOffset = start;\n\n            if (!mMission.running || e instanceof ClosedByInterruptException) {\n                return;\n            }\n\n            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {\n                // for youtube streams. The url has expired, recover\n                dispose();\n                mMission.doRecover(ERROR_HTTP_FORBIDDEN);\n                return;\n            }\n\n            if (mRetryCount++ >= mMission.maxRetry) {\n                mMission.notifyError(e);\n                return;\n            }\n\n            if (DEBUG) {\n                Log.e(TAG, \"got exception, retrying...\", e);\n            }\n\n            run(); // try again\n            return;\n        }\n\n        if (done) {\n            mMission.notifyFinished();\n        } else {\n            mMission.fallbackResumeOffset = start;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "371", "src_id": "M1141", "code": "\n    private void flushAuxiliar(final long amount) throws IOException {\n        if (DEBUG) {\n            Log.d(TAG, \"flushAuxiliar() called with: amount = [\" + amount + \"]\");\n        }\n\n        if (aux.length < 1) {\n            return;\n        }\n\n        out.flush();\n        aux.flush();\n\n        final boolean underflow = aux.offset < aux.length || out.offset < out.length;\n        final byte[] buffer = new byte[COPY_BUFFER_SIZE];\n\n        aux.target.seek(0);\n        out.target.seek(out.length);\n\n        long length = amount;\n        while (length > 0) {\n            final int read = (int) Math.min(length, Integer.MAX_VALUE);\n            final int actualRead = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n            if (actualRead < 1) {\n                amount -= length;\n                break;\n            }\n\n            out.writeProof(buffer, actualRead);\n            length -= actualRead;\n        }\n\n        if (underflow) {\n            if (out.offset >= out.length) {\n                // calculate the aux underflow pointer\n                if (aux.offset < amount) {\n                    out.offset += aux.offset;\n                    aux.offset = 0;\n                    out.target.seek(out.offset);\n                } else {\n                    aux.offset -= amount;\n                    out.offset = out.length + amount;\n                }\n            } else {\n                aux.offset = 0;\n            }\n        } else {\n            out.offset += amount;\n            aux.offset -= amount;\n        }\n\n        out.length += amount;\n\n        if (out.length > maxLengthKnown) {\n            maxLengthKnown = out.length;\n        }\n\n        if (amount < aux.length) {\n            // move the excess data to the beginning of the file\n            long readOffset = amount;\n            long writeOffset = 0;\n\n            aux.length -= amount;\n            length = aux.length;\n            while (length > 0) {\n                final int read = (int) Math.min(length, Integer.MAX_VALUE);\n                final int actualRead = aux.target.read(buffer, 0, Math.min(read, buffer.length));\n\n                aux.target.seek(writeOffset);\n                aux.writeProof(buffer, actualRead);\n\n                writeOffset += actualRead;\n                readOffset += actualRead;\n                length -= actualRead;\n\n                aux.target.seek(readOffset);\n            }\n\n            aux.target.setLength(aux.length);\n            return;\n        }\n\n        if (aux.length > THRESHOLD_AUX_LENGTH) {\n            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);\n        }\n\n        aux.reset();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "372", "src_id": "M1106", "code": "\n    private void showError(final DownloadMission mission, final UserAction action,\n            @StringRes final int reason) {\n        if (DEBUG) {\n            Log.d(TAG, \"showError() called with: mission = [\" + mission + \"], action = [\"\n                    + action + \"], reason = [\" + reason + \"]\");\n        }\n\n        final StringBuilder request = new StringBuilder(256);\n        request.append(mission.source);\n\n        request.append(\" [\");\n        if (mission.recoveryInfo != null) {\n            for (final MissionRecoveryInfo recovery : mission.recoveryInfo) {\n                request.append(' ')\n                        .append(recovery.toString())\n                        .append(' ');\n            }\n        }\n        request.append(\"]\");\n\n        String service;\n        try {\n            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();\n        } catch (final Exception e) {\n            service = ErrorInfo.SERVICE_NONE;\n        }\n\n        ErrorUtil.createNotification(mContext,\n                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action,\n                        service, request.toString(), reason));\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "373", "src_id": "M1067", "code": "\n    void startMission(final DownloadMission mission) {\n        synchronized (this) {\n            mission.timestamp = System.currentTimeMillis();\n            mission.mHandler = mHandler;\n            mission.maxRetry = mPrefMaxRetry;\n\n            // create metadata file\n            while (true) {\n                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));\n                if (!mission.metadata.isFile() && !mission.metadata.exists()) {\n                    try {\n                        if (!mission.metadata.createNewFile()) {\n                            throw new RuntimeException(\"Cant create download metadata file\");\n                        }\n                    } catch (final IOException e) {\n                        throw new RuntimeException(e);\n                    }\n                    break;\n                }\n                mission.timestamp = System.currentTimeMillis();\n            }\n\n            mSelfMissionsControl = true;\n            mMissionsPending.add(mission);\n\n            // Before continue, save the metadata in case the internet connection is not available\n            Utility.writeToFile(mission.metadata, mission);\n\n            if (mission.storage == null) {\n                // noting to do here\n                mission.errCode = DownloadMission.ERROR_FILE_CREATION;\n                if (mission.errObject != null) {\n                    mission.errObject = new IOException(\"DownloadMission.storage == NULL\");\n                }\n                return;\n            }\n\n            final boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;\n\n            if (canDownloadInCurrentNetwork() && start) {\n                mission.start();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "374", "src_id": "M1136", "code": "\n    @Override\n    int process(final SharpStream out, final SharpStream... sources) throws IOException {\n        // check if the subtitle is already in srt and copy, this should never happen\n        final String format = getArgumentAt(0, null);\n        final boolean ignoreEmptyFrames = getArgumentAt(1, \"true\").equals(\"true\");\n\n        if (format == null || format.equals(\"ttml\")) {\n            final SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);\n\n            try {\n                writer.build(sources[0]);\n            } catch (final Exception err) {\n                Log.e(TAG, \"subtitle parse failed\", err);\n                return err instanceof IOException ? 1 : 8;\n            }\n\n            return OK_RESULT;\n        } else if (format.equals(\"srt\")) {\n            final byte[] buffer = new byte[8 * 1024];\n            int read;\n            while ((read = sources[0].read(buffer)) > 0) {\n                out.write(buffer, 0, read);\n            }\n            return OK_RESULT;\n        }\n\n        throw new UnsupportedOperationException(\"Can't convert this subtitle, unimplemented format: \" + format);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "375", "src_id": "M1047", "code": "\n    private void joinForThreads(final int millis) {\n        if (DEBUG) {\n            Log.d(TAG, \"joinForThreads() called with: millis = [\" + millis + \"]\");\n        }\n\n        final Thread currentThread = Thread.currentThread();\n\n        if (init != null && init != currentThread && init.isAlive()) {\n            init.interrupt();\n\n            if (millis > 0) {\n                try {\n                    init.join(millis);\n                } catch (final InterruptedException e) {\n                    Log.w(TAG, \"Initializer thread is still running\", e);\n                    return;\n                }\n            }\n        }\n\n        // if a thread is still alive, possible reasons:\n        //      slow device\n        //      the user is spamming start/pause buttons\n        //      start() method called quickly after pause()\n\n        for (final Thread thread : threads) {\n            if (!thread.isAlive() || thread == Thread.currentThread()) {\n                continue;\n            }\n            thread.interrupt();\n        }\n\n        try {\n            for (final Thread thread : threads) {\n                if (!thread.isAlive()) {\n                    continue;\n                }\n                if (DEBUG) {\n                    Log.w(TAG, \"thread alive: \" + thread.getName());\n                }\n                if (millis > 0) {\n                    thread.join(millis);\n                }\n            }\n        } catch (final InterruptedException e) {\n            throw new RuntimeException(\"A download thread is still running\", e);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "376", "src_id": "M1086", "code": "\n    public static AdminServer createAdminServer() {\n        if (!\"false\".equals(System.getProperty(\"zookeeper.admin.enableServer\"))) {\n            try {\n                Class<?> jettyAdminServerC = Class.forName(\"org.apache.zookeeper.server.admin.JettyAdminServer\");\n                Object adminServer = jettyAdminServerC.getConstructor().newInstance();\n                return (AdminServer) adminServer;\n            } catch (ClassNotFoundException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InstantiationException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (IllegalAccessException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (InvocationTargetException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoSuchMethodException e) {\n                LOG.warn(\"Unable to start JettyAdminServer\", e);\n            } catch (NoClassDefFoundError e) {\n                LOG.warn(\"Unable to load jetty, not starting JettyAdminServer\", e);\n            }\n        }\n        return new DummyAdminServer();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "377", "src_id": "M1149", "code": "\n        @Override\n        public void run() {\n            try {\n                while (!stopped) {\n                    try {\n                        select();\n                        processAcceptedConnections();\n                        processInterestOpsUpdateRequests();\n                    } catch (RuntimeException e) {\n                        LOG.warn(\"Ignoring unexpected runtime exception\", e);\n                    } catch (Exception e) {\n                        LOG.warn(\"Ignoring unexpected exception\", e);\n                    }\n                }\n\n                // Close connections still pending on the selector. Any others\n                // with in-flight work, let drain out of the work queue.\n                for (SelectionKey key : selector.keys()) {\n                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();\n                    if (cnxn.isSelectable()) {\n                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);\n                    }\n                    cleanupSelectionKey(key);\n                }\n                \n                SocketChannel accepted;\n                while ((accepted = acceptedQueue.poll()) != null) {\n                    fastCloseSock(accepted);\n                }\n                \n                updateQueue.clear();\n            } finally {\n                closeSelector();\n                // This will wake up the accept thread and the other selector\n                // threads, and tell the worker thread pool to begin shutdown.\n                NIOServerCnxnFactory.this.stop();\n                LOG.info(\"selector thread exited run method\");\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "378", "src_id": "M219", "code": "\n    synchronized public static ZooKeeper getClient(String contextPath, String session, int expireTime) throws IOException {\n        final String connectionId = concat(contextPath, session);\n\n        ZooKeeper zk = zkMap.get(connectionId);\n        if (zk == null) {\n            if (LOG.isInfoEnabled()) {\n                LOG.info(String.format(\"creating new connection for : '%s'\", connectionId));\n            }\n            \n            Endpoint e = contextMap.get(contextPath);\n            zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(connectionId));\n            \n            for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {\n                String authInfo = String.format(\"%s:%s\", p.getKey(), p.getValue());\n                zk.addAuthInfo(\"digest\", authInfo.getBytes());\n            }\n            \n            zkMap.put(connectionId, zk);\n\n            // a session should automatically expire after an amount of time\n            if (session != null) {\n                zkSessionTimers.put(connectionId, new SessionTimerTask(expireTime, session, contextPath, timer));\n            }\n        }\n        \n        return zk;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "379", "src_id": "M192", "code": "\n    private void init() throws IOException {\n        File f = new File(file);\n        RandomAccessFileReader in = new RandomAccessFileReader(f);\n        SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);\n        Pattern idp = Pattern.compile(\"\\\\[myid:(\\\\d+)\\\\]\");\n\n        long lastFp = in.getPosition();\n        String line = in.readLine();\n        Matcher m = null;\n\n        // if we have read data from the file, and it matches the timep pattern\n        if ((line != null) && (m = timep.matcher(line)).lookingAt()) {\n            starttime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. First line doesn't start with time\");\n        }\n\n        /*\n          Count number of log entries. Any line starting with a timestamp counts as an entry\n        */\n        String lastentry = line;\n        try {\n            while (line != null) {\n                m = timep.matcher(line);\n                if (m.lookingAt()) {\n                    if (size % skipN == 0) {\n                        long time = timestampFromText(dateformat, m.group(1));\n                        skiplist.addMark(time, lastFp, size);\n                    }\n                    size++;\n                    lastentry = line;\n                } \n                if (serverid == 0 && (m = idp.matcher(line)).find()) {\n                    serverid = Integer.valueOf(m.group(1));\n                }\n\n                lastFp = in.getPosition();\n                line = in.readLine();\n            }\n        } catch (EOFException eof) {\n            // ignore, simply end of file, though really (line!=null) should have caught this\n        } finally {\n            in.close();\n        }\n\n        m = timep.matcher(lastentry);\n        if (m.lookingAt()) {\n            endtime = timestampFromText(dateformat, m.group(1));\n        } else {\n            throw new IOException(\"Invalid log format. Last line doesn't start with time\");\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "380", "src_id": "M235", "code": "\n    @POST\n    @Produces({ MediaType.APPLICATION_JSON, \"application/javascript\",\n            MediaType.APPLICATION_XML })\n    public Response createSession(@QueryParam(\"op\") String op,\n            @DefaultValue(\"5\") @QueryParam(\"expire\") String expire,\n            @Context UriInfo ui) {\n        if (!op.equals(\"create\")) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).entity(\n                    new ZError(ui.getRequestUri().toString(), \"\")).build());\n        }\n\n        int expireInSeconds;\n        try {\n            expireInSeconds = Integer.parseInt(expire);\n        } catch (NumberFormatException e) {\n            throw new WebApplicationException(Response.status(\n                    Response.Status.BAD_REQUEST).build());\n        }\n\n        String uuid = UUID.randomUUID().toString();\n        while (ZooKeeperService.isConnected(contextPath, uuid)) {\n            uuid = UUID.randomUUID().toString();\n        }\n\n        try {\n            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);\n        } catch (IOException e) {\n            LOG.error(\"Failed while trying to create a new session\", e);\n\n            throw new WebApplicationException(Response.status(\n                    Response.Status.INTERNAL_SERVER_ERROR).build());\n        }\n\n        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();\n        return Response.created(uri).entity(\n                new JSONWithPadding(new ZSession(uuid, uri.toString())))\n                .build();\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "381", "src_id": "M942", "code": "\n    public void schedule(WorkRequest workRequest, long id) {\n        if (stopped) {\n            workRequest.cleanup();\n            return;\n        }\n\n        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);\n\n        // If we have a worker thread pool, use that; otherwise, do the work\n        // directly.\n        int size = workers.size();\n        if (size > 0) {\n            try {\n                // make sure to map negative ids as well to [0, size-1]\n                int workerNum = ((int) (id % size) + size) % size;\n                ExecutorService worker = workers.get(workerNum);\n                worker.execute(scheduledWorkRequest);\n            } catch (RejectedExecutionException e) {\n                LOG.warn(\"ExecutorService rejected execution\", e);\n                workRequest.cleanup();\n            }\n        } else {\n            // When there is no worker thread pool, do the work directly\n            // and wait for its completion\n            scheduledWorkRequest.run();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "382", "src_id": "M520", "code": "\n    @Override\n    public void close() throws IOException {\n        boolean triedToClose = false;\n        boolean success = false;\n        \n        try {\n            flush();\n            ((FileOutputStream) out).getFD().sync();\n\n            triedToClose = true;\n            super.close();\n            success = true;\n        } finally {\n            if (success) {\n                boolean renamed = tmpFile.renameTo(origFile);\n                \n                if (!renamed) {\n                    // On windows, renameTo does not replace.\n                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {\n                        throw new IOException(\"Could not rename temporary file \" + tmpFile + \" to \" + origFile);\n                    }\n                }\n            } else {\n                if (!triedToClose) {\n                    // If we failed when flushing, try to close it to not leak\n                    // an FD\n                    IOUtils.closeStream(out);\n                }\n                \n                // close wasn't successful, try to delete the tmp file\n                if (!tmpFile.delete()) {\n                    LOG.warn(\"Unable to delete tmp file {}\", tmpFile);\n                }\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "383", "src_id": "M186", "code": "\n    private synchronized LogEntry readNextEntry() {\n        try {\n            try {\n                while (true) {\n                    String line = in.readLine();\n                    if (line == null) {\n                        break;\n                    }\n\n                    Matcher m = src.timep.matcher(line);\n                    if (m.lookingAt()) {\n                        if (buf.length() > 0) {\n                            LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                            buf = line;\n                            return e;\n                        }\n                        buf = line;\n                    } else if (buf.length() > 0) {\n                        buf += line + \"\\n\";\n                    }\n                }\n            } catch (EOFException eof) {\n                // ignore, we've simply come to the end of the file\n            }\n            \n            if (buf.length() > 0) {\n                LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);\n                buf = \"\";\n                return e;\n            }\n        } catch (Exception e) {\n            LOG.error(\"Error reading next entry in file (\" + src.file + \"): \" + e);\n            return null;\n        }\n        \n        return null;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "384", "src_id": "M478", "code": "\n    public static void main(String[] args) {\n        if (args.length < 3) {\n            usage();\n            return;\n        }\n\n        String host = args[0];\n        int port = Integer.parseInt(args[1]);\n        String op = args[2];\n\n        if (op.equalsIgnoreCase(\"gettracemask\")) {\n            getTraceMask(host, port);\n        } \n        else if (op.equalsIgnoreCase(\"settracemask\")) {\n            setTraceMask(host, port, args[3]);\n        } \n        else if (op.equalsIgnoreCase(\"ruok\")) {\n            ruok(host, port);\n        } \n        else if (op.equalsIgnoreCase(\"kill\")) {\n            kill(host, port);\n        } \n        else if (op.equalsIgnoreCase(\"stat\")) {\n            stat(host, port);\n        } \n        else if (op.equalsIgnoreCase(\"dump\")) {\n            dump(host, port);\n        } \n        else {\n            System.out.println(\"Unrecognized op: \" + op);\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "385", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "386", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            \n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "387", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "388", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T) o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "389", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    boolean d1 = observer1.done;\n\n                    if (d1) {\n                        Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    boolean d2 = observer2.done;\n                    if (d2) {\n                        Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    \n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "390", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "391", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n                            e++;\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "392", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            \n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "393", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            for (;;) {\n                if (disposed) {\n                    return;\n                }\n\n                boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) {\n                        downstream.onError(ex);\n                    } else {\n                        downstream.onComplete();\n                    }\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "394", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            \n            // Find the subscription in the array\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            // Create new array without the subscription\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            \n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "395", "src_id": "M491", "code": "\n    @SuppressLint(\"SwitchIntDef\") // only fit, fill and zoom are supported by NewPipe\n    @ResizeMode\n    public static int nextResizeModeAndSaveToPrefs(\n            final Player player,\n            @ResizeMode final int resizeMode) {\n        final int newResizeMode;\n        switch (resizeMode) {\n            case AspectRatioFrameLayout.RESIZE_MODE_FIT:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_FILL:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;\n                break;\n            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:\n            default:\n                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;\n                break;\n        }\n\n        // save the new resize mode so it can be restored in a future session\n        player.getPrefs().edit()\n                .putInt(player.getContext().getString(R.string.last_resize_mode), newResizeMode)\n                .apply();\n        return newResizeMode;\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "396", "src_id": "M424", "code": "\n    @Override\n    public void onBroadcastReceived(final Intent intent) {\n        super.onBroadcastReceived(intent);\n        \n        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {\n            // Close it because when changing orientation from portrait\n            // (in fullscreen mode) the size of queue layout can be larger than the screen size\n            closeItemsList();\n        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {\n            // Ensure that we have audio-only stream playing when a user\n            // started to play from notification's play button from outside of the app\n            if (!fragmentIsVisible) {\n                onFragmentStopped();\n            }\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {\n            fragmentIsVisible = false;\n            onFragmentStopped();\n        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {\n            // Restore video source when user returns to the fragment\n            fragmentIsVisible = true;\n            player.useVideoSource(true);\n\n            // When a user returns from background, the system UI will always be shown even if\n            // controls are invisible: hide it in that case\n            if (!isControlsVisible()) {\n                hideSystemUIIfNeeded();\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "397", "src_id": "M900", "code": "\n    @StyleRes\n    public static int getSettingsThemeStyle(final Context context) {\n        final Resources res = context.getResources();\n        final String lightTheme = res.getString(R.string.light_theme_key);\n        final String blackTheme = res.getString(R.string.black_theme_key);\n        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);\n\n        final String selectedTheme = getSelectedThemeKey(context);\n\n        if (selectedTheme.equals(lightTheme)) {\n            return R.style.LightSettingsTheme;\n        } else if (selectedTheme.equals(blackTheme)) {\n            return R.style.BlackSettingsTheme;\n        } else if (selectedTheme.equals(automaticDeviceTheme)) {\n            if (isDeviceDarkThemeEnabled(context)) {\n                // use the dark theme variant preferred by the user\n                final String selectedNightTheme = getSelectedNightThemeKey(context);\n                if (selectedNightTheme.equals(blackTheme)) {\n                    return R.style.BlackSettingsTheme;\n                } else {\n                    return R.style.DarkSettingsTheme;\n                }\n            } else {\n                // there is only one day theme\n                return R.style.LightSettingsTheme;\n            }\n        } else {\n            // default to dark theme\n            return R.style.DarkSettingsTheme;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "398", "src_id": "M895", "code": "\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "399", "src_id": "M225", "code": "\n    private void onBroadcastReceived(final Intent intent) {\n        if (intent == null || intent.getAction() == null) {\n            return;\n        }\n\n        if (DEBUG) {\n            Log.d(TAG, \"onBroadcastReceived() called with: intent = [\" + intent + \"]\");\n        }\n\n        switch (intent.getAction()) {\n            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:\n                pause();\n                break;\n            case ACTION_CLOSE:\n                service.destroyPlayerAndStopService();\n                break;\n            case ACTION_PLAY_PAUSE:\n                playPause();\n                break;\n            case ACTION_PLAY_PREVIOUS:\n                playPrevious();\n                break;\n            case ACTION_PLAY_NEXT:\n                playNext();\n                break;\n            case ACTION_FAST_REWIND:\n                fastRewind();\n                break;\n            case ACTION_FAST_FORWARD:\n                fastForward();\n                break;\n            case ACTION_REPEAT:\n                cycleNextRepeatMode();\n                break;\n            case ACTION_SHUFFLE:\n                toggleShuffleModeEnabled();\n                break;\n            case Intent.ACTION_CONFIGURATION_CHANGED:\n                if (DEBUG) {\n                    Log.d(TAG, \"ACTION_CONFIGURATION_CHANGED received\");\n                }\n                break;\n        }\n\n        UIs.call(\n                playerUi -> {\n                    playerUi.onBroadcastReceived(intent);\n                });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "400", "src_id": "M749", "code": "\n    private static void handleError(final Context context, final ErrorInfo errorInfo) {\n        if (errorInfo.getThrowable() != null) {\n            errorInfo.getThrowable().printStackTrace();\n        }\n\n        if (errorInfo.getThrowable() instanceof ReCaptchaException) {\n            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();\n            // Starting ReCaptcha Challenge Activity\n            final Intent intent = new Intent(context, ReCaptchaActivity.class);\n            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);\n            context.startActivity(intent);\n        } else if (errorInfo.getThrowable() != null\n                && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {\n            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {\n            Toast.makeText(context, \n                    R.string.restricted_video_no_stream,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {\n            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof PaidContentException) {\n            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof PrivateContentException) {\n            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {\n            Toast.makeText(context, \n                    R.string.soundcloud_go_plus_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {\n            Toast.makeText(context, \n                    R.string.youtube_music_premium_content,\n                    Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {\n            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();\n        } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {\n            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();\n        } else {\n            ErrorUtil.createNotification(context, errorInfo);\n        }\n\n        if (context instanceof RouterActivity) {\n            ((RouterActivity) context).finish();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "401", "src_id": "M999", "code": "\n    public static void openVideoDetailFragment(@NonNull final Context context,\n                                               @NonNull final FragmentManager fragmentManager,\n                                               final int serviceId,\n                                               @Nullable final String url,\n                                               @NonNull final String title,\n                                               @Nullable final PlayQueue playQueue,\n                                               final boolean switchingPlayers) {\n        final boolean autoPlay;\n        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();\n        \n        if (playerType == null) {\n            // no player open\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else if (switchingPlayers) {\n            // switching player to main player\n            autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state\n        } else if (playerType == PlayerType.MAIN) {\n            // opening new stream while already playing in main player\n            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);\n        } else {\n            // opening new stream while already playing in another player\n            autoPlay = false;\n        }\n\n        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {\n            expandMainPlayer(detailFragment.requireActivity());\n            detailFragment.setAutoPlay(autoPlay);\n            \n            if (switchingPlayers) {\n                // Situation when user switches from players to main player. All needed data is\n                // here, we can start watching (assuming newQueue equals playQueue).\n                // Starting directly in fullscreen if the previous player type was popup.\n                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP\n                        || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));\n            } else {\n                detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);\n            }\n            detailFragment.scrollToTop();\n        };\n\n        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);\n        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {\n            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);\n        } else {\n            // Specify no url here, otherwise the VideoDetailFragment will start loading the\n            // stream automatically if it's the first time it is being opened, but then\n            // onVideoDetailFragmentReady will kick in and start another loading process.\n            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().\n            final VideoDetailFragment instance = VideoDetailFragment\n                    .getInstance(serviceId, null, title, playQueue);\n            instance.setAutoPlay(autoPlay);\n\n            defaultTransaction(fragmentManager)\n                    .replace(R.id.fragment_player_holder, instance)\n                    .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))\n                    .commit();\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "402", "src_id": "M698", "code": "\n    @Override\n    public void handleResult(@NonNull final ChannelInfo result) {\n        super.handleResult(result);\n        currentInfo = result;\n        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());\n\n        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {\n            PicassoHelper.loadBanner(result.getBanners())\n                    .tag(PICASSO_CHANNEL_TAG)\n                    .into(binding.channelBannerImage);\n        } else {\n            // Do not waste space for the banner, if the user disabled images or there is not one\n            binding.channelBannerImage.setImageDrawable(null);\n        }\n\n        PicassoHelper.loadAvatar(result.getAvatars())\n                .tag(PICASSO_CHANNEL_TAG)\n                .into(binding.channelAvatarView);\n        PicassoHelper.loadAvatar(result.getParentChannelAvatars())\n                .tag(PICASSO_CHANNEL_TAG)\n                .into(binding.subChannelAvatarView);\n\n        binding.channelTitleView.setText(result.getName());\n        binding.channelSubscriberView.setVisibility(View.VISIBLE);\n        \n        if (result.getSubscriberCount() >= 0) {\n            binding.channelSubscriberView.setText(Localization\n                    .shortSubscriberCount(activity, result.getSubscriberCount()));\n        } else {\n            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);\n        }\n\n        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {\n            binding.subChannelTitleView.setText(\n                    String.format(\n                            getString(R.string.channel_created_by),\n                            currentInfo.getParentChannelName())\n            );\n            binding.subChannelTitleView.setVisibility(View.VISIBLE);\n            binding.subChannelAvatarView.setVisibility(View.VISIBLE);\n        }\n\n        updateRssButton();\n\n        channelContentNotSupported = false;\n        for (final Throwable throwable : result.getErrors()) {\n            if (throwable instanceof ContentNotSupportedException) {\n                channelContentNotSupported = true;\n                showContentNotSupportedIfNeeded();\n                break;\n            }\n        }\n\n        disposables.clear();\n        if (subscribeButtonMonitor != null) {\n            subscribeButtonMonitor.dispose();\n        }\n\n        updateTabs();\n        updateSubscription(result);\n        monitorSubscription(result);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "403", "src_id": "M379", "code": "\n    @Override\n    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {\n        super.onTextTracksChanged(currentTracks);\n\n        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)\n                || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);\n        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null\n                || !trackTypeTextSupported) {\n            binding.captionTextView.setVisibility(View.GONE);\n            return;\n        }\n\n        // Extract all loaded languages\n        final List<Tracks.Group> textTracks = currentTracks\n                .getGroups()\n                .stream()\n                .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())\n                .collect(Collectors.toList());\n        final List<String> availableLanguages = textTracks.stream()\n                .map(Tracks.Group::getMediaTrackGroup)\n                .filter(textTrack -> textTrack.length > 0)\n                .map(textTrack -> textTrack.getFormat(0).language)\n                .collect(Collectors.toList());\n\n        // Find selected text track\n        final Optional<Format> selectedTracks = textTracks.stream()\n                .filter(Tracks.Group::isSelected)\n                .filter(info -> info.getMediaTrackGroup().length >= 1)\n                .map(info -> info.getMediaTrackGroup().getFormat(0))\n                .findFirst();\n\n        // Build UI\n        buildCaptionMenu(availableLanguages);\n        if (player.getTrackSelector().getParameters().getRendererDisabled(\n                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {\n            binding.captionTextView.setText(R.string.caption_none);\n        } else {\n            binding.captionTextView.setText(selectedTracks.get().language);\n        }\n        binding.captionTextView.setVisibility(\n                availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "404", "src_id": "M894", "code": "\n    public static RequestCreator loadScaledDownThumbnail(final Context context,\n            @NonNull final List<Image> images) {\n        // scale down the notification thumbnail for performance\n        return PicassoHelper.loadThumbnail(images)\n                .transform(new Transformation() {\n                    @Override\n                    public Bitmap transform(final Bitmap source) {\n                        if (DEBUG) {\n                            Log.d(TAG, \"Thumbnail - transform() called\");\n                        }\n\n                        final float notificationThumbnailWidth = Math.min(\n                                context.getResources()\n                                        .getDimension(R.dimen.player_notification_thumbnail_width),\n                                source.getWidth());\n\n                        final Bitmap result = BitmapCompat.createScaledBitmap(\n                                source,\n                                (int) notificationThumbnailWidth,\n                                (int) (source.getHeight()\n                                        / (source.getWidth() / notificationThumbnailWidth)),\n                                null,\n                                true);\n\n                        if (result == source || !result.isMutable()) {\n                            // create a new mutable bitmap to prevent strange crashes on some\n                            // devices (see #4638)\n                            final Bitmap copied = BitmapCompat.createScaledBitmap(\n                                    source,\n                                    (int) notificationThumbnailWidth - 1,\n                                    (int) (source.getHeight() / (source.getWidth()\n                                            / (notificationThumbnailWidth - 1))),\n                                    null,\n                                    true);\n                            source.recycle();\n                            return copied;\n                        } else {\n                            source.recycle();\n                            return result;\n                        }\n                    }\n\n                    @Override\n                    public String key() {\n                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;\n                    }\n                });\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "405", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    final boolean d = done;\n                    final SwitchMapMaybeObserver<R> current = inner.get();\n                    final boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "406", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(final T t) {\n            if (done) {\n                return;\n            }\n            \n            boolean b;\n            try {\n                b = predicate.test(t);\n            } catch (final Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "407", "src_id": "M522", "code": "\n        private void drainLoop() {\n            final Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    final int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        final T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        final int newOs = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    final boolean d = mainDone;\n                    final SimplePlainQueue<T> q = queue;\n                    final T v = q != null ? q.poll() : null;\n                    final boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "408", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (DEBUG) {\n                Log.d(TAG, \"drain() called\");\n            }\n\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T) o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "409", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    final boolean d1 = observer1.done;\n\n                    if (d1) {\n                        final Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    final boolean d2 = observer2.done;\n                    if (d2) {\n                        final Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    final boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    final boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "410", "src_id": "M885", "code": "\n        void drainLoop() {\n            if (DEBUG) {\n                Log.d(TAG, \"drainLoop() called\");\n            }\n\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "411", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n\n                            e++;\n\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "412", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(final CacheDisposable<T> consumer) {\n        for (;;) {\n            final CacheDisposable<T>[] current = observers.get();\n            final int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n            \n            CacheDisposable<T>[] next;\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "413", "src_id": "M362", "code": "\n    void drainFused() {\n        int missed = 1;\n\n        for (;;) {\n            if (disposed) {\n                return;\n            }\n\n            final boolean d = done;\n            final Throwable ex = error;\n\n            if (!delayError && d && ex != null) {\n                disposed = true;\n                downstream.onError(error);\n                worker.dispose();\n                return;\n            }\n\n            downstream.onNext(null);\n\n            if (d) {\n                disposed = true;\n                final Throwable finalEx = error;\n                if (finalEx != null) {\n                    downstream.onError(finalEx);\n                } else {\n                    downstream.onComplete();\n                }\n                worker.dispose();\n                return;\n            }\n\n            missed = addAndGet(-missed);\n            if (missed == 0) {\n                break;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "414", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(final PublishSubscription<T> ps) {\n        if (DEBUG) {\n            Log.d(TAG, \"remove() called with: ps = [\" + ps + \"]\");\n        }\n\n        for (;;) {\n            final PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            final int n = a.length;\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            \n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "415", "src_id": "M66", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            Observer<? super R> downstream = this.downstream;\n            AtomicThrowable errors = this.errors;\n            AtomicReference<SwitchMapMaybeObserver<R>> inner = this.inner;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        if (!delayErrors) {\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean d = done;\n                    SwitchMapMaybeObserver<R> current = inner.get();\n                    boolean empty = current == null;\n\n                    if (d && empty) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (empty || current.item == null) {\n                        break;\n                    }\n\n                    inner.compareAndSet(current, null);\n\n                    downstream.onNext(current.item);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n\n\n        private void showPopupMenu() {\n            retry.setVisible(false);\n            cancel.setVisible(false);\n            start.setVisible(false);\n            pause.setVisible(false);\n            open.setVisible(false);\n            queue.setVisible(false);\n            showError.setVisible(false);\n            delete.setVisible(false);\n            source.setVisible(false);\n            checksum.setVisible(false);\n\n            DownloadMission mission = item.mission instanceof DownloadMission ? (DownloadMission) item.mission : null;\n\n            if (mission != null) {\n                if (mission.hasInvalidStorage()) {\n                    retry.setVisible(true);\n                    delete.setVisible(true);\n                    showError.setVisible(true);\n                } else if (mission.isPsRunning()) {\n                    switch (mission.errCode) {\n                        case ERROR_INSUFFICIENT_STORAGE:\n                        case ERROR_POSTPROCESSING_HOLD:\n                            retry.setVisible(true);\n                            cancel.setVisible(true);\n                            showError.setVisible(true);\n                            break;\n                    }\n                } else {\n                    if (mission.running) {\n                        pause.setVisible(true);\n                    } else {\n                        if (mission.errCode != ERROR_NOTHING) {\n                            showError.setVisible(true);\n                        }\n\n                        queue.setChecked(mission.enqueued);\n\n                        delete.setVisible(true);\n\n                        boolean flag = !mission.isPsFailed() && mission.urls.length > 0;\n                        start.setVisible(flag);\n                        queue.setVisible(flag);\n                    }\n                }\n            } else {\n                open.setVisible(true);\n                delete.setVisible(true);\n                checksum.setVisible(true);\n            }\n\n            if (item.mission.source != null && !item.mission.source.isEmpty()) {\n                source.setVisible(true);\n            }\n\n            popupMenu.show();\n        }\n\n\n    private void loadPendingMissions(Context ctx) {\n        File[] subs = mPendingMissionsDir.listFiles();\n\n        if (subs == null) {\n            Log.e(TAG, \"listFiles() returned null\");\n            return;\n        }\n        if (subs.length < 1) {\n            return;\n        }\n        if (DEBUG) {\n            Log.d(TAG, \"Loading pending downloads from directory: \" + mPendingMissionsDir.getAbsolutePath());\n        }\n\n        File tempDir = pickAvailableTemporalDir(ctx);\n        Log.i(TAG, \"using '\" + tempDir + \"' as temporal directory\");\n\n        for (File sub : subs) {\n            if (!sub.isFile()) continue;\n            if (sub.getName().equals(\".tmp\")) continue;\n\n            DownloadMission mis = Utility.readFromFile(sub);\n            if (mis == null || mis.isFinished() || mis.hasInvalidStorage()) {\n                //noinspection ResultOfMethodCallIgnored\n                sub.delete();\n                continue;\n            }\n\n            mis.threads = new Thread[0];\n\n            boolean exists;\n            try {\n                mis.storage = StoredFileHelper.deserialize(mis.storage, ctx);\n                exists = !mis.storage.isInvalid() && mis.storage.existsAsFile();\n            } catch (Exception ex) {\n                Log.e(TAG, \"Failed to load the file source of \" + mis.storage.toString(), ex);\n                mis.storage.invalidate();\n                exists = false;\n            }\n\n            if (mis.isPsRunning()) {\n                if (mis.psAlgorithm.worksOnSameFile) {\n                    // Incomplete post-processing results in a corrupted download file\n                    // because the selected algorithm works on the same file to save space.\n                    // the file will be deleted if the storage API\n                    // is Java IO (avoid showing the \"Save as...\" dialog)\n                    if (exists && mis.storage.isDirect() && !mis.storage.delete())\n                        Log.w(TAG, \"Unable to delete incomplete download file: \" + sub.getPath());\n                }\n\n                mis.psState = 0;\n                mis.errCode = DownloadMission.ERROR_POSTPROCESSING_STOPPED;\n            } else if (!exists) {\n                tryRecover(mis);\n\n                // the progress is lost, reset mission state\n                if (mis.isInitialized())\n                    mis.resetState(true, true, DownloadMission.ERROR_PROGRESS_LOST);\n            }\n\n            if (mis.psAlgorithm != null) {\n                mis.psAlgorithm.cleanupTemporalDir();\n                mis.psAlgorithm.setTemporalDir(tempDir);\n            }\n\n            mis.metadata = sub;\n            mis.maxRetry = mPrefMaxRetry;\n            mis.mHandler = mHandler;\n\n            mMissionsPending.add(mis);\n        }\n\n        if (mMissionsPending.size() > 1)\n            Collections.sort(mMissionsPending, Comparator.comparingLong(Mission::getTimestamp));\n    }\n\n\n    @SuppressLint(\"DefaultLocale\")\n    private void updateProgress(ViewHolderItem h) {\n        if (h == null || h.item == null || h.item.mission instanceof FinishedMission) return;\n\n        DownloadMission mission = (DownloadMission) h.item.mission;\n        double done = mission.done;\n        long length = mission.getLength();\n        long now = System.currentTimeMillis();\n        boolean hasError = mission.errCode != ERROR_NOTHING;\n\n        // hide on error\n        // show if current resource length is not fetched\n        // show if length is unknown\n        h.progress.setMarquee(mission.isRecovering() || !hasError && (!mission.isInitialized() || mission.unknownLength));\n\n        double progress;\n        if (mission.unknownLength) {\n            progress = Double.NaN;\n            h.progress.setProgress(0.0f);\n        } else {\n            progress = done / length;\n        }\n\n        if (hasError) {\n            h.progress.setProgress(isNotFinite(progress) ? 1d : progress);\n            h.status.setText(R.string.msg_error);\n        } else if (isNotFinite(progress)) {\n            h.status.setText(UNDEFINED_PROGRESS);\n        } else {\n            h.status.setText(String.format(\"%.2f%%\", progress * 100));\n            h.progress.setProgress(progress);\n        }\n\n        @StringRes int state;\n        String sizeStr = Utility.formatBytes(length).concat(\"  \");\n\n        if (mission.isPsFailed() || mission.errCode == ERROR_POSTPROCESSING_HOLD) {\n            h.size.setText(sizeStr);\n            return;\n        } else if (!mission.running) {\n            state = mission.enqueued ? R.string.queued : R.string.paused;\n        } else if (mission.isPsRunning()) {\n            state = R.string.post_processing;\n        } else if (mission.isRecovering()) {\n            state = R.string.recovering;\n        } else {\n            state = 0;\n        }\n\n        if (state != 0) {\n            // update state without download speed\n            h.size.setText(sizeStr.concat(\"(\").concat(mContext.getString(state)).concat(\")\"));\n            h.resetSpeedMeasure();\n            return;\n        }\n\n        if (h.lastTimestamp < 0) {\n            h.size.setText(sizeStr);\n            h.lastTimestamp = now;\n            h.lastDone = done;\n            return;\n        }\n\n        long deltaTime = now - h.lastTimestamp;\n        double deltaDone = done - h.lastDone;\n\n        if (h.lastDone > done) {\n            h.lastDone = done;\n            h.size.setText(sizeStr);\n            return;\n        }\n\n        if (deltaDone > 0 && deltaTime > 0) {\n            float speed = (float) ((deltaDone * 1000d) / deltaTime);\n            float averageSpeed = speed;\n\n            if (h.lastSpeedIdx < 0) {\n                Arrays.fill(h.lastSpeed, speed);\n                h.lastSpeedIdx = 0;\n            } else {\n                for (int i = 0; i < h.lastSpeed.length; i++) {\n                    averageSpeed += h.lastSpeed[i];\n                }\n                averageSpeed /= h.lastSpeed.length + 1.0f;\n            }\n\n            String speedStr = Utility.formatSpeed(averageSpeed);\n            String etaStr;\n\n            if (mission.unknownLength) {\n                etaStr = \"\";\n            } else {\n                long eta = (long) Math.ceil((length - done) / averageSpeed);\n                etaStr = Utility.formatBytes((long) done) + \"/\" + Utility.stringifySeconds(eta) + \"  \";\n            }\n\n            h.size.setText(sizeStr.concat(etaStr).concat(speedStr));\n\n            h.lastTimestamp = now;\n            h.lastDone = done;\n            h.lastSpeed[h.lastSpeedIdx++] = speed;\n\n            if (h.lastSpeedIdx >= h.lastSpeed.length) h.lastSpeedIdx = 0;\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": true}
{"project_name": "across-project", "pair_id": "416", "src_id": "M1333", "code": "\n        @Override\n        public void onNext(T t) {\n            if (done) {\n                return;\n            }\n            \n            boolean b;\n            \n            try {\n                b = predicate.test(t);\n            } catch (Throwable e) {\n                Exceptions.throwIfFatal(e);\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                onError(e);\n                return;\n            }\n            \n            if (!b) {\n                done = true;\n                upstream.cancel();\n                upstream = SubscriptionHelper.CANCELLED;\n                downstream.onSuccess(false);\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "417", "src_id": "M522", "code": "\n        void drainLoop() {\n            Observer<? super T> actual = this.downstream;\n            int missed = 1;\n            for (;;) {\n\n                for (;;) {\n                    if (disposed) {\n                        singleItem = null;\n                        queue = null;\n                        return;\n                    }\n\n                    if (errors.get() != null) {\n                        singleItem = null;\n                        queue = null;\n                        errors.tryTerminateConsumer(actual);\n                        return;\n                    }\n\n                    int os = otherState;\n                    if (os == OTHER_STATE_HAS_VALUE) {\n                        T v = singleItem;\n                        singleItem = null;\n                        otherState = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        os = OTHER_STATE_CONSUMED_OR_EMPTY;\n                        actual.onNext(v);\n                    }\n\n                    boolean d = mainDone;\n                    SimplePlainQueue<T> q = queue;\n                    T v = q != null ? q.poll() : null;\n                    boolean empty = v == null;\n\n                    if (d && empty && os == OTHER_STATE_CONSUMED_OR_EMPTY) {\n                        queue = null;\n                        actual.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n\n                    actual.onNext(v);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "418", "src_id": "M1163", "code": "\n        @Override\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final SimplePlainQueue<Object> queue = this.queue;\n            final Subscriber<? super Flowable<T>> downstream = this.downstream;\n            UnicastProcessor<T> window = this.window;\n\n            for (;;) {\n                if (upstreamCancelled) {\n                    queue.clear();\n                    window = null;\n                    this.window = null;\n                } else {\n                    boolean isDone = done;\n                    Object o = queue.poll();\n                    boolean isEmpty = o == null;\n\n                    if (isDone && isEmpty) {\n                        Throwable ex = error;\n                        if (ex != null) {\n                            if (window != null) {\n                                window.onError(ex);\n                            }\n                            downstream.onError(ex);\n                        } else {\n                            if (window != null) {\n                                window.onComplete();\n                            }\n                            downstream.onComplete();\n                        }\n                        cleanupResources();\n                        upstreamCancelled = true;\n                        continue;\n                    } else if (!isEmpty) {\n                        if (o instanceof WindowBoundaryRunnable) {\n                            WindowBoundaryRunnable boundary = (WindowBoundaryRunnable) o;\n                            if (boundary.index == emitted || !restartTimerOnMaxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            }\n                        } else if (window != null) {\n                            @SuppressWarnings(\"unchecked\")\n                            T item = (T)o;\n                            window.onNext(item);\n\n                            long count = this.count + 1;\n                            if (count == maxSize) {\n                                this.count = 0;\n                                window = createNewWindow(window);\n                            } else {\n                                this.count = count;\n                            }\n                        }\n\n                        continue;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "419", "src_id": "M478", "code": "\n        void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            final EqualObserver<T>[] as = observers;\n\n            final EqualObserver<T> observer1 = as[0];\n            final SpscLinkedArrayQueue<T> q1 = observer1.queue;\n            final EqualObserver<T> observer2 = as[1];\n            final SpscLinkedArrayQueue<T> q2 = observer2.queue;\n\n            for (;;) {\n                for (;;) {\n                    if (cancelled) {\n                        q1.clear();\n                        q2.clear();\n                        return;\n                    }\n\n                    final boolean d1 = observer1.done;\n\n                    if (d1) {\n                        final Throwable e = observer1.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    final boolean d2 = observer2.done;\n                    if (d2) {\n                        final Throwable e = observer2.error;\n                        if (e != null) {\n                            cancel(q1, q2);\n\n                            downstream.onError(e);\n                            return;\n                        }\n                    }\n\n                    if (v1 == null) {\n                        v1 = q1.poll();\n                    }\n                    final boolean e1 = v1 == null;\n\n                    if (v2 == null) {\n                        v2 = q2.poll();\n                    }\n                    final boolean e2 = v2 == null;\n\n                    if (d1 && d2 && e1 && e2) {\n                        downstream.onSuccess(true);\n                        return;\n                    }\n                    if ((d1 && d2) && (e1 != e2)) {\n                        cancel(q1, q2);\n\n                        downstream.onSuccess(false);\n                        return;\n                    }\n\n                    if (!e1 && !e2) {\n                        boolean c;\n\n                        try {\n                            c = comparer.test(v1, v2);\n                        } catch (Throwable ex) {\n                            Exceptions.throwIfFatal(ex);\n                            cancel(q1, q2);\n\n                            downstream.onError(ex);\n                            return;\n                        }\n\n                        if (!c) {\n                            cancel(q1, q2);\n\n                            downstream.onSuccess(false);\n                            return;\n                        }\n\n                        v1 = null;\n                        v2 = null;\n                    }\n\n                    if (e1 || e2) {\n                        break;\n                    }\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "420", "src_id": "M885", "code": "\n        void drainLoop() {\n            int missed = 1;\n\n            JoinInnerSubscriber<T>[] s = this.subscribers;\n            int n = s.length;\n            Subscriber<? super T> a = this.downstream;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0;\n\n                middle:\n                while (e != r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < s.length; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimplePlainQueue<T> q = inner.queue;\n                        if (q != null) {\n                            T v = q.poll();\n\n                            if (v != null) {\n                                empty = false;\n                                a.onNext(v);\n                                inner.requestOne();\n                                if (++e == r) {\n                                    break middle;\n                                }\n                            }\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n\n                    if (empty) {\n                        break;\n                    }\n                }\n\n                if (e == r) {\n                    if (cancelled) {\n                        cleanup();\n                        return;\n                    }\n\n                    Throwable ex = errors.get();\n                    if (ex != null) {\n                        cleanup();\n                        a.onError(ex);\n                        return;\n                    }\n\n                    boolean d = done.get() == 0;\n                    boolean empty = true;\n\n                    for (int i = 0; i < n; i++) {\n                        JoinInnerSubscriber<T> inner = s[i];\n                        SimpleQueue<T> q = inner.queue;\n                        if (q != null && !q.isEmpty()) {\n                            empty = false;\n                            break;\n                        }\n                    }\n\n                    if (d && empty) {\n                        a.onComplete();\n                        return;\n                    }\n                }\n\n                if (e != 0) {\n                    BackpressureHelper.produced(requested, e);\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "421", "src_id": "M1399", "code": "\n        @Override\n        public void drain() {\n            if (getAndIncrement() != 0) {\n                return;\n            }\n\n            int missed = 1;\n            InnerQueuedSubscriber<R> inner = current;\n            Subscriber<? super R> a = downstream;\n            ErrorMode em = errorMode;\n\n            for (;;) {\n                long r = requested.get();\n                long e = 0L;\n\n                if (inner == null) {\n                    if (em != ErrorMode.END) {\n                        Throwable ex = errors.get();\n                        if (ex != null) {\n                            cancelAll();\n\n                            errors.tryTerminateConsumer(downstream);\n                            return;\n                        }\n                    }\n\n                    boolean outerDone = done;\n\n                    inner = subscribers.poll();\n\n                    if (outerDone && inner == null) {\n                        errors.tryTerminateConsumer(downstream);\n                        return;\n                    }\n\n                    if (inner != null) {\n                        current = inner;\n                    }\n                }\n\n                boolean continueNextSource = false;\n\n                if (inner != null) {\n                    SimpleQueue<R> q = inner.queue();\n                    if (q != null) {\n                        while (e != r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n\n                            R v;\n\n                            try {\n                                v = q.poll();\n                            } catch (Throwable ex) {\n                                Exceptions.throwIfFatal(ex);\n                                current = null;\n                                inner.cancel();\n                                cancelAll();\n                                a.onError(ex);\n                                return;\n                            }\n\n                            boolean empty = v == null;\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                                break;\n                            }\n\n                            if (empty) {\n                                break;\n                            }\n\n                            a.onNext(v);\n\n                            e++;\n\n                            inner.request(1L);\n                        }\n\n                        if (e == r) {\n                            if (cancelled) {\n                                cancelAll();\n                                return;\n                            }\n\n                            if (em == ErrorMode.IMMEDIATE) {\n                                Throwable ex = errors.get();\n                                if (ex != null) {\n                                    current = null;\n                                    inner.cancel();\n                                    cancelAll();\n\n                                    errors.tryTerminateConsumer(downstream);\n                                    return;\n                                }\n                            }\n\n                            boolean d = inner.isDone();\n                            boolean empty = q.isEmpty();\n\n                            if (d && empty) {\n                                inner = null;\n                                current = null;\n                                upstream.request(1);\n                                continueNextSource = true;\n                            }\n                        }\n                    }\n                }\n\n                if (e != 0L && r != Long.MAX_VALUE) {\n                    requested.addAndGet(-e);\n                }\n\n                if (continueNextSource) {\n                    continue;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "422", "src_id": "M469", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(CacheDisposable<T> consumer) {\n        for (;;) {\n            CacheDisposable<T>[] current = observers.get();\n            int n = current.length;\n            if (n == 0) {\n                return;\n            }\n\n            int j = -1;\n            for (int i = 0; i < n; i++) {\n                if (current[i] == consumer) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            CacheDisposable<T>[] next;\n\n            if (n == 1) {\n                next = EMPTY;\n            } else {\n                next = new CacheDisposable[n - 1];\n                System.arraycopy(current, 0, next, 0, j);\n                System.arraycopy(current, j + 1, next, j, n - j - 1);\n            }\n\n            if (observers.compareAndSet(current, next)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "423", "src_id": "M362", "code": "\n        void drainFused() {\n            int missed = 1;\n\n            for (;;) {\n                if (disposed) {\n                    return;\n                }\n\n                boolean d = done;\n                Throwable ex = error;\n\n                if (!delayError && d && ex != null) {\n                    disposed = true;\n                    downstream.onError(error);\n                    worker.dispose();\n                    return;\n                }\n\n                downstream.onNext(null);\n\n                if (d) {\n                    disposed = true;\n                    ex = error;\n                    if (ex != null) {\n                        downstream.onError(ex);\n                    } else {\n                        downstream.onComplete();\n                    }\n                    worker.dispose();\n                    return;\n                }\n\n                missed = addAndGet(-missed);\n                if (missed == 0) {\n                    break;\n                }\n            }\n        }\n", "compilable": "", "test_passed": "", "successful_trans": false}
{"project_name": "across-project", "pair_id": "424", "src_id": "M2247", "code": "\n    @SuppressWarnings(\"unchecked\")\n    void remove(PublishSubscription<T> ps) {\n        for (;;) {\n            PublishSubscription<T>[] a = subscribers.get();\n            if (a == TERMINATED || a == EMPTY) {\n                return;\n            }\n\n            int n = a.length;\n            int j = -1;\n            \n            for (int i = 0; i < n; i++) {\n                if (a[i] == ps) {\n                    j = i;\n                    break;\n                }\n            }\n\n            if (j < 0) {\n                return;\n            }\n\n            PublishSubscription<T>[] b;\n\n            if (n == 1) {\n                b = EMPTY;\n            } else {\n                b = new PublishSubscription[n - 1];\n                System.arraycopy(a, 0, b, 0, j);\n                System.arraycopy(a, j + 1, b, j, n - j - 1);\n            }\n            \n            if (subscribers.compareAndSet(a, b)) {\n                return;\n            }\n        }\n    }\n", "compilable": "", "test_passed": "", "successful_trans": false}
