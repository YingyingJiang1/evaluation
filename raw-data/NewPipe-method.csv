package,filepath,class_path,method_name,signature,line_range,author_lines_map,author_edit_ratio_map,dominant_author,test_class,code
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,onRequestChildRectangleOnScreen,"boolean onRequestChildRectangleOnScreen(CoordinatorLayout,AppBarLayout,Rect,boolean)","[33, 63]","{'A289': [(33, 33)], 'A292': [(37, 40), (42, 47), (49, 59), (61, 63)], 'A294': [(41, 41), (48, 48), (60, 60)], 'A297': [(34, 36)]}","{'A289': 0.03225806451612903, 'A292': 0.7741935483870968, 'A294': 0.0967741935483871, 'A297': 0.0967741935483871}",A292,,"    @Override
    public boolean onRequestChildRectangleOnScreen(
            @NonNull final CoordinatorLayout coordinatorLayout, @NonNull final AppBarLayout child,
            @NonNull final Rect rectangle, final boolean immediate) {
        focusScrollRect.set(rectangle);

        coordinatorLayout.offsetDescendantRectToMyCoords(child, focusScrollRect);

        final int height = coordinatorLayout.getHeight();

        if (focusScrollRect.top <= 0 && focusScrollRect.bottom >= height) {
            // the child is too big to fit inside ourselves completely, ignore request
            return false;
        }

        final int dy;

        if (focusScrollRect.bottom > height) {
            dy =  focusScrollRect.top;
        } else if (focusScrollRect.top < 0) {
            // scrolling up
            dy = -(height - focusScrollRect.bottom);
        } else {
            // nothing to do
            return false;
        }

        final int consumed = scroll(coordinatorLayout, child, dy, getMaxDragOffset(child), 0);

        return consumed == dy;
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,onInterceptTouchEvent,"boolean onInterceptTouchEvent(CoordinatorLayout,AppBarLayout,MotionEvent)","[65, 91]","{'A289': [(89, 89), (91, 91)], 'A290': [(70, 79)], 'A291': [(80, 88), (90, 90)], 'A295': [(69, 69)], 'A298': [(65, 65)], 'A299': [(66, 68)]}","{'A289': 0.07407407407407407, 'A290': 0.37037037037037035, 'A291': 0.37037037037037035, 'A295': 0.037037037037037035, 'A298': 0.037037037037037035, 'A299': 0.1111111111111111}",A290,,"    @Override
    public boolean onInterceptTouchEvent(@NonNull final CoordinatorLayout parent,
                                         @NonNull final AppBarLayout child,
                                         @NonNull final MotionEvent ev) {
        for (final int element : skipInterceptionOfElements) {
            final View view = child.findViewById(element);
            if (view != null) {
                final boolean visible = view.getGlobalVisibleRect(globalRect);
                if (visible && globalRect.contains((int) ev.getRawX(), (int) ev.getRawY())) {
                    allowScroll = false;
                    return false;
                }
            }
        }
        allowScroll = true;
        switch (ev.getActionMasked()) {
            case MotionEvent.ACTION_DOWN:
                // remove reference to old nested scrolling child
                resetNestedScrollingChild();
                // Stop fling when your finger touches the screen
                stopAppBarLayoutFling();
                break;
            default:
                break;
        }
        return super.onInterceptTouchEvent(parent, child, ev);
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,onStartNestedScroll,"boolean onStartNestedScroll(CoordinatorLayout,AppBarLayout,View,View,int,int)","[93, 102]","{'A290': [(93, 102)]}",{'A290': 1.0},A290,,"    @Override
    public boolean onStartNestedScroll(@NonNull final CoordinatorLayout parent,
                                       @NonNull final AppBarLayout child,
                                       @NonNull final View directTargetChild,
                                       final View target,
                                       final int nestedScrollAxes,
                                       final int type) {
        return allowScroll && super.onStartNestedScroll(
                parent, child, directTargetChild, target, nestedScrollAxes, type);
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,onNestedFling,"boolean onNestedFling(CoordinatorLayout,AppBarLayout,View,float,float,boolean)","[104, 111]","{'A290': [(104, 111)]}",{'A290': 1.0},A290,,"    @Override
    public boolean onNestedFling(@NonNull final CoordinatorLayout coordinatorLayout,
                                 @NonNull final AppBarLayout child,
                                 @NonNull final View target, final float velocityX,
                                 final float velocityY, final boolean consumed) {
        return allowScroll && super.onNestedFling(
                coordinatorLayout, child, target, velocityX, velocityY, consumed);
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,getScrollerField,OverScroller getScrollerField(),"[113, 127]","{'A289': [(122, 122), (125, 125), (127, 127)], 'A291': [(113, 115), (118, 118), (120, 121), (124, 124), (126, 126)], 'A294': [(116, 117), (119, 119), (123, 123)]}","{'A289': 0.2, 'A291': 0.5333333333333333, 'A294': 0.26666666666666666}",A291,,"    @Nullable
    private OverScroller getScrollerField() {
        try {
            final Class<?> headerBehaviorType = this.getClass()
                    .getSuperclass().getSuperclass().getSuperclass();
            if (headerBehaviorType != null) {
                final Field field = headerBehaviorType.getDeclaredField(""scroller"");
                field.setAccessible(true);
                return ((OverScroller) field.get(this));
            }
        } catch (final NoSuchFieldException | IllegalAccessException e) {
            // ?
        }
        return null;
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,getLastNestedScrollingChildRefField,Field getLastNestedScrollingChildRefField(),"[129, 143]","{'A289': [(141, 141), (143, 143)], 'A291': [(129, 131), (133, 133), (136, 138), (140, 140), (142, 142)], 'A294': [(132, 132), (139, 139)], 'A300': [(134, 135)]}","{'A289': 0.13333333333333333, 'A291': 0.6, 'A294': 0.13333333333333333, 'A300': 0.13333333333333333}",A291,,"    @Nullable
    private Field getLastNestedScrollingChildRefField() {
        try {
            final Class<?> headerBehaviorType = this.getClass().getSuperclass().getSuperclass();
            if (headerBehaviorType != null) {
                final Field field =
                        headerBehaviorType.getDeclaredField(""lastNestedScrollingChildRef"");
                field.setAccessible(true);
                return field;
            }
        } catch (final NoSuchFieldException e) {
            // ?
        }
        return null;
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,resetNestedScrollingChild,void resetNestedScrollingChild(),"[145, 157]","{'A289': [(155, 156)], 'A291': [(148, 148), (154, 154), (157, 157)], 'A294': [(145, 147), (149, 153)]}","{'A289': 0.15384615384615385, 'A291': 0.23076923076923078, 'A294': 0.6153846153846154}",A294,,"    private void resetNestedScrollingChild() {
        final Field field = getLastNestedScrollingChildRefField();
        if (field != null) {
            try {
                final Object value = field.get(this);
                if (value != null) {
                    field.set(this, null);
                }
            } catch (final IllegalAccessException e) {
                // ?
            }
        }
    }
"
com.google.android.material.appbar,../projects/NewPipe/app/src/main/java/com/google/android/material/appbar/FlingBehavior.java,FlingBehavior,stopAppBarLayoutFling,void stopAppBarLayoutFling(),"[159, 164]","{'A289': [(164, 164)], 'A291': [(159, 159)], 'A294': [(160, 163)]}","{'A289': 0.16666666666666666, 'A291': 0.16666666666666666, 'A294': 0.6666666666666666}",A294,,"    private void stopAppBarLayoutFling() {
        final OverScroller scroller = getScrollerField();
        if (scroller != null) {
            scroller.forceFinished(true);
        }
    }
"
org.apache.commons.text.similarity,../projects/NewPipe/app/src/main/java/org/apache/commons/text/similarity/FuzzyScore.java,FuzzyScore,fuzzyScore,"Integer fuzzyScore(CharSequence,CharSequence)","[87, 137]","{'A300': [(87, 137)]}",{'A300': 1.0},A300,,"    public Integer fuzzyScore(final CharSequence term, final CharSequence query) {
        if (term == null || query == null) {
            throw new IllegalArgumentException(""CharSequences must not be null"");
        }

        // fuzzy logic is case insensitive. We normalize the Strings to lower
        // case right from the start. Turning characters to lower case
        // via Character.toLowerCase(char) is unfortunately insufficient
        // as it does not accept a locale.
        final String termLowerCase = term.toString().toLowerCase(locale);
        final String queryLowerCase = query.toString().toLowerCase(locale);

        // the resulting score
        int score = 0;

        // the position in the term which will be scanned next for potential
        // query character matches
        int termIndex = 0;

        // index of the previously matched character in the term
        int previousMatchingCharacterIndex = Integer.MIN_VALUE;

        for (int queryIndex = 0; queryIndex < queryLowerCase.length(); queryIndex++) {
            final char queryChar = queryLowerCase.charAt(queryIndex);

            boolean termCharacterMatchFound = false;
            for (; termIndex < termLowerCase.length()
                    && !termCharacterMatchFound; termIndex++) {
                final char termChar = termLowerCase.charAt(termIndex);

                if (queryChar == termChar) {
                    // simple character matches result in one point
                    score++;

                    // subsequent character matches further improve
                    // the score.
                    if (previousMatchingCharacterIndex + 1 == termIndex) {
                        score += 2;
                    }

                    previousMatchingCharacterIndex = termIndex;

                    // we can leave the nested loop. Every character in the
                    // query can match at most one character in the term.
                    termCharacterMatchFound = true;
                }
            }
        }

        return score;
    }
"
org.apache.commons.text.similarity,../projects/NewPipe/app/src/main/java/org/apache/commons/text/similarity/FuzzyScore.java,FuzzyScore,getLocale,Locale getLocale(),"[144, 146]","{'A300': [(144, 146)]}",{'A300': 1.0},A300,,"    public Locale getLocale() {
        return locale;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onCreate,void onCreate(Bundle),"[136, 199]","{'A301': [(142, 142), (145, 146), (160, 160), (170, 170), (172, 174), (199, 199)], 'A302': [(136, 136)], 'A290': [(181, 181)], 'A304': [(147, 159), (161, 162)], 'A305': [(179, 179), (184, 184), (186, 191), (193, 194)], 'A295': [(143, 143), (163, 169), (175, 175)], 'A306': [(176, 177), (180, 180)], 'A298': [(185, 185)], 'A308': [(198, 198)], 'A309': [(192, 192), (195, 196)], 'A292': [(182, 183)], 'A294': [(137, 141), (178, 178)], 'A312': [(144, 144)], 'A299': [(171, 171)], 'A313': [(197, 197)]}","{'A301': 0.140625, 'A302': 0.015625, 'A290': 0.015625, 'A304': 0.234375, 'A305': 0.15625, 'A295': 0.140625, 'A306': 0.046875, 'A298': 0.015625, 'A308': 0.015625, 'A309': 0.046875, 'A292': 0.03125, 'A294': 0.09375, 'A312': 0.015625, 'A299': 0.015625, 'A313': 0.015625}",A304,,"    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        if (DEBUG) {
            Log.d(TAG, ""onCreate() called with: ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }

        Localization.migrateAppLanguageSettingIfNecessary(getApplicationContext());
        ThemeHelper.setDayNightMode(this);
        ThemeHelper.setTheme(this, ServiceHelper.getSelectedServiceId(this));

        // Fixes text color turning black in dark/black mode:
        // https://github.com/TeamNewPipe/NewPipe/issues/12016
        // For further reference see: https://issuetracker.google.com/issues/37124582
        if (DeviceUtils.supportsWebView()) {
            try {
                new WebView(this);
            } catch (final Throwable e) {
                if (DEBUG) {
                    Log.e(TAG, ""Failed to create WebView"", e);
                }
            }
        }

        super.onCreate(savedInstanceState);
        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(this);
        sharedPrefEditor = sharedPreferences.edit();

        mainBinding = ActivityMainBinding.inflate(getLayoutInflater());
        drawerLayoutBinding = mainBinding.drawerLayout;
        drawerHeaderBinding = DrawerHeaderBinding.bind(drawerLayoutBinding.navigation
                .getHeaderView(0));
        toolbarLayoutBinding = mainBinding.toolbarLayout;
        setContentView(mainBinding.getRoot());

        if (getSupportFragmentManager().getBackStackEntryCount() == 0) {
            initFragments();
        }

        setSupportActionBar(toolbarLayoutBinding.toolbar);
        try {
            setupDrawer();
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(this, ""Setting up drawer"", e);
        }
        if (DeviceUtils.isTv(this)) {
            FocusOverlayView.setupFocusObserver(this);
        }
        openMiniPlayerUponPlayerStarted();

        if (PermissionHelper.checkPostNotificationsPermission(this,
                PermissionHelper.POST_NOTIFICATIONS_REQUEST_CODE)) {
            // Schedule worker for checking for new streams and creating corresponding notifications
            // if this is enabled by the user.
            NotificationWorker.initialize(this);
        }
        if (!UpdateSettingsFragment.wasUserAskedForConsent(this)
                && !App.getApp().isFirstRun()
                && ReleaseVersionUtil.INSTANCE.isReleaseApk()) {
            UpdateSettingsFragment.askForConsentToUpdateChecks(this);
        }

        SettingMigrations.showUserInfoIfPresent(this);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onPostCreate,void onPostCreate(Bundle),"[201, 214]","{'A301': [(214, 214)], 'A304': [(207, 209)], 'A295': [(212, 212)], 'A298': [(201, 203)], 'A299': [(210, 210)], 'A314': [(204, 206), (211, 211), (213, 213)]}","{'A301': 0.07142857142857142, 'A304': 0.21428571428571427, 'A295': 0.07142857142857142, 'A298': 0.21428571428571427, 'A299': 0.07142857142857142, 'A314': 0.35714285714285715}",A314,,"    @Override
    protected void onPostCreate(final Bundle savedInstanceState) {
        super.onPostCreate(savedInstanceState);

        final App app = App.getApp();

        if (sharedPreferences.getBoolean(app.getString(R.string.update_app_key), false)
                && sharedPreferences
                .getBoolean(app.getString(R.string.update_check_consent_key), false)) {
            // Start the worker which is checking all conditions
            // and eventually searching for a new version.
            NewVersionWorker.enqueueNewVersionCheckingWork(app, false);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onStart,void onStart(),"[216, 221]","{'A304': [(216, 221)]}",{'A304': 1.0},A304,,"    @Override
    protected void onStart() {
        super.onStart();
        sharedPrefEditor.putBoolean(KEY_IS_IN_BACKGROUND, false).apply();
        Log.d(TAG, ""App moved to foreground"");
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onStop,void onStop(),"[223, 228]","{'A304': [(223, 228)]}",{'A304': 1.0},A304,,"    @Override
    protected void onStop() {
        super.onStop();
        sharedPrefEditor.putBoolean(KEY_IS_IN_BACKGROUND, true).apply();
        Log.d(TAG, ""App moved to background"");
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,setupDrawer,void setupDrawer(),"[229, 257]","{'A300': [(229, 257)]}",{'A300': 1.0},A300,,"    private void setupDrawer() throws ExtractionException {
        addDrawerMenuForCurrentService();

        toggle = new ActionBarDrawerToggle(this, mainBinding.getRoot(),
                toolbarLayoutBinding.toolbar, R.string.drawer_open, R.string.drawer_close);
        toggle.syncState();
        mainBinding.getRoot().addDrawerListener(toggle);
        mainBinding.getRoot().addDrawerListener(new DrawerLayout.SimpleDrawerListener() {
            private int lastService;

            @Override
            public void onDrawerOpened(final View drawerView) {
                lastService = ServiceHelper.getSelectedServiceId(MainActivity.this);
            }

            @Override
            public void onDrawerClosed(final View drawerView) {
                if (servicesShown) {
                    toggleServices();
                }
                if (lastService != ServiceHelper.getSelectedServiceId(MainActivity.this)) {
                    ActivityCompat.recreate(MainActivity.this);
                }
            }
        });

        drawerLayoutBinding.navigation.setNavigationItemSelectedListener(this::drawerItemSelected);
        setupDrawerHeader();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onDrawerOpened,void onDrawerOpened(View),"[239, 242]","{'A300': [(239, 242)]}",{'A300': 1.0},A300,,"            @Override
            public void onDrawerOpened(final View drawerView) {
                lastService = ServiceHelper.getSelectedServiceId(MainActivity.this);
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onDrawerClosed,void onDrawerClosed(View),"[244, 252]","{'A300': [(244, 252)]}",{'A300': 1.0},A300,,"            @Override
            public void onDrawerClosed(final View drawerView) {
                if (servicesShown) {
                    toggleServices();
                }
                if (lastService != ServiceHelper.getSelectedServiceId(MainActivity.this)) {
                    ActivityCompat.recreate(MainActivity.this);
                }
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,addDrawerMenuForCurrentService,void addDrawerMenuForCurrentService(),"[264, 307]","{'A301': [(284, 284)], 'A302': [(300, 303)], 'A295': [(272, 272), (279, 279), (283, 283), (286, 286), (289, 289), (292, 292), (297, 297), (304, 304)], 'A306': [(265, 265), (268, 268), (270, 271), (277, 278), (287, 287), (290, 290), (293, 293), (295, 296), (298, 298), (305, 305)], 'A298': [(269, 269), (273, 273), (276, 276)], 'A311': [(307, 307)], 'A294': [(266, 267), (274, 274), (280, 281)], 'A312': [(282, 282), (288, 288), (291, 291), (294, 294), (299, 299), (306, 306)], 'A299': [(275, 275)], 'A300': [(264, 264)], 'A315': [(285, 285)]}","{'A301': 0.022727272727272728, 'A302': 0.09090909090909091, 'A295': 0.18181818181818182, 'A306': 0.29545454545454547, 'A298': 0.06818181818181818, 'A311': 0.022727272727272728, 'A294': 0.11363636363636363, 'A312': 0.13636363636363635, 'A299': 0.022727272727272728, 'A300': 0.022727272727272728, 'A315': 0.022727272727272728}",A306,,"    private void addDrawerMenuForCurrentService() throws ExtractionException {
        //Tabs
        final int currentServiceId = ServiceHelper.getSelectedServiceId(this);
        final StreamingService service = NewPipe.getService(currentServiceId);

        int kioskMenuItemId = 0;

        for (final String ks : service.getKioskList().getAvailableKiosks()) {
            drawerLayoutBinding.navigation.getMenu()
                    .add(R.id.menu_tabs_group, kioskMenuItemId, 0, KioskTranslator
                            .getTranslatedKioskName(ks, this))
                    .setIcon(KioskTranslator.getKioskIcon(ks));
            kioskMenuItemId++;
        }

        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_tabs_group, ITEM_ID_SUBSCRIPTIONS, ORDER,
                        R.string.tab_subscriptions)
                .setIcon(R.drawable.ic_tv);
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_tabs_group, ITEM_ID_FEED, ORDER, R.string.fragment_feed_title)
                .setIcon(R.drawable.ic_subscriptions);
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_tabs_group, ITEM_ID_BOOKMARKS, ORDER, R.string.tab_bookmarks)
                .setIcon(R.drawable.ic_bookmark);
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_tabs_group, ITEM_ID_DOWNLOADS, ORDER, R.string.downloads)
                .setIcon(R.drawable.ic_file_download);
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_tabs_group, ITEM_ID_HISTORY, ORDER, R.string.action_history)
                .setIcon(R.drawable.ic_history);

        //Settings and About
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_options_about_group, ITEM_ID_SETTINGS, ORDER, R.string.settings)
                .setIcon(R.drawable.ic_settings);
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_options_about_group, ITEM_ID_DONATION, ORDER,
                        R.string.donation_title)
                .setIcon(R.drawable.volunteer_activism_ic);
        drawerLayoutBinding.navigation.getMenu()
                .add(R.id.menu_options_about_group, ITEM_ID_ABOUT, ORDER, R.string.tab_about)
                .setIcon(R.drawable.ic_info_outline);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,drawerItemSelected,boolean drawerItemSelected(MenuItem),"[309, 330]","{'A302': [(327, 327)], 'A305': [(318, 318)], 'A295': [(328, 328)], 'A306': [(310, 316), (319, 326), (329, 330)], 'A294': [(309, 309), (317, 317)]}","{'A302': 0.045454545454545456, 'A305': 0.045454545454545456, 'A295': 0.045454545454545456, 'A306': 0.7727272727272727, 'A294': 0.09090909090909091}",A306,,"    private boolean drawerItemSelected(final MenuItem item) {
        switch (item.getGroupId()) {
            case R.id.menu_services_group:
                changeService(item);
                break;
            case R.id.menu_tabs_group:
                try {
                    tabSelected(item);
                } catch (final Exception e) {
                    ErrorUtil.showUiErrorSnackbar(this, ""Selecting main page tab"", e);
                }
                break;
            case R.id.menu_options_about_group:
                optionsAboutSelected(item);
                break;
            default:
                return false;
        }

        mainBinding.getRoot().closeDrawers();
        return true;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,changeService,void changeService(MenuItem),"[332, 340]","{'A302': [(340, 340)], 'A295': [(333, 334), (337, 338)], 'A294': [(332, 332), (335, 335), (339, 339)], 'A316': [(336, 336)]}","{'A302': 0.1111111111111111, 'A295': 0.4444444444444444, 'A294': 0.3333333333333333, 'A316': 0.1111111111111111}",A295,,"    private void changeService(final MenuItem item) {
        drawerLayoutBinding.navigation.getMenu()
                .getItem(ServiceHelper.getSelectedServiceId(this))
                .setChecked(false);
        ServiceHelper.setSelectedServiceId(this, item.getItemId());
        drawerLayoutBinding.navigation.getMenu()
                .getItem(ServiceHelper.getSelectedServiceId(this))
                .setChecked(true);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,tabSelected,void tabSelected(MenuItem),"[342, 372]","{'A301': [(348, 348)], 'A306': [(344, 347), (349, 359), (367, 367), (369, 372)], 'A298': [(360, 366), (368, 368)], 'A294': [(342, 343)]}","{'A301': 0.03225806451612903, 'A306': 0.6451612903225806, 'A298': 0.25806451612903225, 'A294': 0.06451612903225806}",A306,,"    private void tabSelected(final MenuItem item) throws ExtractionException {
        switch (item.getItemId()) {
            case ITEM_ID_SUBSCRIPTIONS:
                NavigationHelper.openSubscriptionFragment(getSupportFragmentManager());
                break;
            case ITEM_ID_FEED:
                NavigationHelper.openFeedFragment(getSupportFragmentManager());
                break;
            case ITEM_ID_BOOKMARKS:
                NavigationHelper.openBookmarksFragment(getSupportFragmentManager());
                break;
            case ITEM_ID_DOWNLOADS:
                NavigationHelper.openDownloads(this);
                break;
            case ITEM_ID_HISTORY:
                NavigationHelper.openStatisticFragment(getSupportFragmentManager());
                break;
            default:
                final StreamingService currentService = ServiceHelper.getSelectedService(this);
                int kioskMenuItemId = 0;
                for (final String kioskId : currentService.getKioskList().getAvailableKiosks()) {
                    if (kioskMenuItemId == item.getItemId()) {
                        NavigationHelper.openKioskFragment(getSupportFragmentManager(),
                                currentService.getServiceId(), kioskId);
                        break;
                    }
                    kioskMenuItemId++;
                }
                break;
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,optionsAboutSelected,void optionsAboutSelected(MenuItem),"[374, 386]","{'A302': [(379, 381), (386, 386)], 'A306': [(376, 378), (382, 385)], 'A294': [(374, 375)]}","{'A302': 0.3076923076923077, 'A306': 0.5384615384615384, 'A294': 0.15384615384615385}",A306,,"    private void optionsAboutSelected(final MenuItem item) {
        switch (item.getItemId()) {
            case ITEM_ID_SETTINGS:
                NavigationHelper.openSettings(this);
                break;
            case ITEM_ID_DONATION:
                ShareUtils.openUrlInBrowser(this, getString(R.string.donation_url));
                break;
            case ITEM_ID_ABOUT:
                NavigationHelper.openAbout(this);
                break;
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,setupDrawerHeader,void setupDrawerHeader(),"[388, 404]","{'A301': [(390, 393), (396, 396), (400, 400), (402, 403)], 'A302': [(388, 388), (404, 404)], 'A295': [(389, 389), (394, 395), (397, 399), (401, 401)]}","{'A301': 0.47058823529411764, 'A302': 0.11764705882352941, 'A295': 0.4117647058823529}",A301,,"    private void setupDrawerHeader() {
        drawerHeaderBinding.drawerHeaderActionButton.setOnClickListener(view -> toggleServices());

        // If the current app name is bigger than the default ""NewPipe"" (7 chars),
        // let the text view grow a little more as well.
        if (getString(R.string.app_name).length() > ""NewPipe"".length()) {
            final ViewGroup.LayoutParams layoutParams =
                    drawerHeaderBinding.drawerHeaderNewpipeTitle.getLayoutParams();
            layoutParams.width = ViewGroup.LayoutParams.WRAP_CONTENT;
            drawerHeaderBinding.drawerHeaderNewpipeTitle.setLayoutParams(layoutParams);
            drawerHeaderBinding.drawerHeaderNewpipeTitle.setMaxLines(2);
            drawerHeaderBinding.drawerHeaderNewpipeTitle.setMinWidth(getResources()
                    .getDimensionPixelSize(R.dimen.drawer_header_newpipe_title_default_width));
            drawerHeaderBinding.drawerHeaderNewpipeTitle.setMaxWidth(getResources()
                    .getDimensionPixelSize(R.dimen.drawer_header_newpipe_title_max_width));
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,toggleServices,void toggleServices(),"[406, 426]","{'A305': [(423, 423)], 'A295': [(409, 411)], 'A306': [(406, 408), (412, 412), (418, 420), (424, 426)], 'A294': [(417, 417), (422, 422)], 'A300': [(413, 416), (421, 421)]}","{'A305': 0.047619047619047616, 'A295': 0.14285714285714285, 'A306': 0.47619047619047616, 'A294': 0.09523809523809523, 'A300': 0.23809523809523808}",A306,,"    private void toggleServices() {
        servicesShown = !servicesShown;

        drawerLayoutBinding.navigation.getMenu().removeGroup(R.id.menu_services_group);
        drawerLayoutBinding.navigation.getMenu().removeGroup(R.id.menu_tabs_group);
        drawerLayoutBinding.navigation.getMenu().removeGroup(R.id.menu_options_about_group);

        // Show up or down arrow
        drawerHeaderBinding.drawerArrow.setImageResource(
                servicesShown ? R.drawable.ic_arrow_drop_up : R.drawable.ic_arrow_drop_down);

        if (servicesShown) {
            showServices();
        } else {
            try {
                addDrawerMenuForCurrentService();
            } catch (final Exception e) {
                ErrorUtil.showUiErrorSnackbar(this, ""Showing main page tabs"", e);
            }
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,showServices,void showServices(),"[428, 444]","{'A295': [(432, 432), (441, 442)], 'A291': [(435, 436), (439, 439)], 'A306': [(428, 428), (431, 431), (433, 434), (440, 440), (444, 444)], 'A294': [(429, 429), (437, 437), (443, 443)], 'A300': [(430, 430), (438, 438)]}","{'A295': 0.17647058823529413, 'A291': 0.17647058823529413, 'A306': 0.35294117647058826, 'A294': 0.17647058823529413, 'A300': 0.11764705882352941}",A306,,"    private void showServices() {
        for (final StreamingService s : NewPipe.getServices()) {
            final String title = s.getServiceInfo().getName();

            final MenuItem menuItem = drawerLayoutBinding.navigation.getMenu()
                    .add(R.id.menu_services_group, s.getServiceId(), ORDER, title)
                    .setIcon(ServiceHelper.getIcon(s.getServiceId()));

            // peertube specifics
            if (s.getServiceId() == 3) {
                enhancePeertubeMenu(menuItem);
            }
        }
        drawerLayoutBinding.navigation.getMenu()
                .getItem(ServiceHelper.getSelectedServiceId(this))
                .setChecked(true);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,enhancePeertubeMenu,void enhancePeertubeMenu(MenuItem),"[446, 489]","{'A295': [(449, 450), (475, 475)], 'A291': [(453, 453), (455, 455), (458, 459), (462, 466), (473, 474), (476, 476), (480, 483), (485, 489)], 'A294': [(451, 452), (454, 454), (457, 457), (460, 461), (467, 472), (477, 478), (484, 484)], 'A299': [(479, 479)], 'A300': [(446, 446), (448, 448)], 'A317': [(447, 447), (456, 456)]}","{'A295': 0.06818181818181818, 'A291': 0.4772727272727273, 'A294': 0.3409090909090909, 'A299': 0.022727272727272728, 'A300': 0.045454545454545456, 'A317': 0.045454545454545456}",A291,,"    private void enhancePeertubeMenu(final MenuItem menuItem) {
        final PeertubeInstance currentInstance = PeertubeHelper.getCurrentInstance();
        menuItem.setTitle(currentInstance.getName());
        final Spinner spinner = InstanceSpinnerLayoutBinding.inflate(LayoutInflater.from(this))
                .getRoot();
        final List<PeertubeInstance> instances = PeertubeHelper.getInstanceList(this);
        final List<String> items = new ArrayList<>();
        int defaultSelect = 0;
        for (final PeertubeInstance instance : instances) {
            items.add(instance.getName());
            if (instance.getUrl().equals(currentInstance.getUrl())) {
                defaultSelect = items.size() - 1;
            }
        }
        final ArrayAdapter<String> adapter = new ArrayAdapter<>(this,
                R.layout.instance_spinner_item, items);
        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        spinner.setAdapter(adapter);
        spinner.setSelection(defaultSelect, false);
        spinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(final AdapterView<?> parent, final View view,
                                       final int position, final long id) {
                final PeertubeInstance newInstance = instances.get(position);
                if (newInstance.getUrl().equals(PeertubeHelper.getCurrentInstance().getUrl())) {
                    return;
                }
                PeertubeHelper.selectInstance(newInstance, getApplicationContext());
                changeService(menuItem);
                mainBinding.getRoot().closeDrawers();
                new Handler(Looper.getMainLooper()).postDelayed(() -> {
                    getSupportFragmentManager().popBackStack(null,
                            FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    ActivityCompat.recreate(MainActivity.this);
                }, 300);
            }

            @Override
            public void onNothingSelected(final AdapterView<?> parent) {

            }
        });
        menuItem.setActionView(spinner);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onItemSelected,"void onItemSelected(AdapterView<?>,View,int,long)","[466, 481]","{'A295': [(475, 475)], 'A291': [(466, 466), (473, 474), (476, 476), (480, 481)], 'A294': [(467, 472), (477, 478)], 'A299': [(479, 479)]}","{'A295': 0.0625, 'A291': 0.375, 'A294': 0.5, 'A299': 0.0625}",A294,,"            @Override
            public void onItemSelected(final AdapterView<?> parent, final View view,
                                       final int position, final long id) {
                final PeertubeInstance newInstance = instances.get(position);
                if (newInstance.getUrl().equals(PeertubeHelper.getCurrentInstance().getUrl())) {
                    return;
                }
                PeertubeHelper.selectInstance(newInstance, getApplicationContext());
                changeService(menuItem);
                mainBinding.getRoot().closeDrawers();
                new Handler(Looper.getMainLooper()).postDelayed(() -> {
                    getSupportFragmentManager().popBackStack(null,
                            FragmentManager.POP_BACK_STACK_INCLUSIVE);
                    ActivityCompat.recreate(MainActivity.this);
                }, 300);
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onNothingSelected,void onNothingSelected(AdapterView<?>),"[483, 486]","{'A291': [(483, 483), (485, 486)], 'A294': [(484, 484)]}","{'A291': 0.75, 'A294': 0.25}",A291,,"            @Override
            public void onNothingSelected(final AdapterView<?> parent) {

            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onDestroy,void onDestroy(),"[491, 500]","{'A301': [(494, 496), (500, 500)], 'A290': [(497, 499)], 'A311': [(491, 493)]}","{'A301': 0.4, 'A290': 0.3, 'A311': 0.3}",A301,,"    @Override
    protected void onDestroy() {
        super.onDestroy();
        if (!isChangingConfigurations()) {
            StateSaver.clearStateFiles();
        }
        if (broadcastReceiver != null) {
            unregisterReceiver(broadcastReceiver);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onResume,void onResume(),"[502, 547]","{'A301': [(502, 503), (506, 507), (512, 512), (518, 518), (527, 527), (533, 535), (547, 547)], 'A302': [(511, 511), (522, 522), (525, 526), (540, 541)], 'A304': [(531, 531), (539, 539)], 'A305': [(524, 524), (543, 544)], 'A295': [(505, 505), (510, 510), (515, 517), (519, 521), (532, 532), (545, 546)], 'A294': [(504, 504), (508, 509), (513, 514), (523, 523), (528, 530), (536, 538)], 'A318': [(542, 542)]}","{'A301': 0.2391304347826087, 'A302': 0.13043478260869565, 'A304': 0.043478260869565216, 'A305': 0.06521739130434782, 'A295': 0.2391304347826087, 'A294': 0.2608695652173913, 'A318': 0.021739130434782608}",A294,,"    @Override
    protected void onResume() {
        // Change the date format to match the selected language on resume
        Localization.initPrettyTime(Localization.resolvePrettyTime());
        super.onResume();

        // Close drawer on return, and don't show animation,
        // so it looks like the drawer isn't open when the user returns to MainActivity
        mainBinding.getRoot().closeDrawer(GravityCompat.START, false);
        try {
            final int selectedServiceId = ServiceHelper.getSelectedServiceId(this);
            final String selectedServiceName = NewPipe.getService(selectedServiceId)
                    .getServiceInfo().getName();
            drawerHeaderBinding.drawerHeaderServiceView.setText(selectedServiceName);
            drawerHeaderBinding.drawerHeaderServiceIcon.setImageResource(ServiceHelper
                    .getIcon(selectedServiceId));

            drawerHeaderBinding.drawerHeaderServiceView.post(() -> drawerHeaderBinding
                    .drawerHeaderServiceView.setSelected(true));
            drawerHeaderBinding.drawerHeaderActionButton.setContentDescription(
                    getString(R.string.drawer_header_description) + selectedServiceName);
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(this, ""Setting up service toggle"", e);
        }

        if (sharedPreferences.getBoolean(Constants.KEY_THEME_CHANGE, false)) {
            if (DEBUG) {
                Log.d(TAG, ""Theme has changed, recreating activity..."");
            }
            sharedPrefEditor.putBoolean(Constants.KEY_THEME_CHANGE, false).apply();
            ActivityCompat.recreate(this);
        }

        if (sharedPreferences.getBoolean(Constants.KEY_MAIN_PAGE_CHANGE, false)) {
            if (DEBUG) {
                Log.d(TAG, ""main page has changed, recreating main fragment..."");
            }
            sharedPrefEditor.putBoolean(Constants.KEY_MAIN_PAGE_CHANGE, false).apply();
            NavigationHelper.openMainActivity(this);
        }

        final boolean isHistoryEnabled = sharedPreferences.getBoolean(
                getString(R.string.enable_watch_history_key), true);
        drawerLayoutBinding.navigation.getMenu().findItem(ITEM_ID_HISTORY)
                .setVisible(isHistoryEnabled);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onNewIntent,void onNewIntent(Intent),"[549, 567]","{'A301': [(549, 549), (554, 556), (562, 567)], 'A294': [(550, 553), (557, 561)]}","{'A301': 0.5263157894736842, 'A294': 0.47368421052631576}",A301,,"    @Override
    protected void onNewIntent(final Intent intent) {
        if (DEBUG) {
            Log.d(TAG, ""onNewIntent() called with: intent = ["" + intent + ""]"");
        }
        if (intent != null) {
            // Return if launched from a launcher (e.g. Nova Launcher, Pixel Launcher ...)
            // to not destroy the already created backstack
            final String action = intent.getAction();
            if ((action != null && action.equals(Intent.ACTION_MAIN))
                    && intent.hasCategory(Intent.CATEGORY_LAUNCHER)) {
                return;
            }
        }

        super.onNewIntent(intent);
        setIntent(intent);
        handleIntent(intent);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onKeyDown,"boolean onKeyDown(int,KeyEvent)","[569, 581]","{'A290': [(569, 581)]}",{'A290': 1.0},A290,,"    @Override
    public boolean onKeyDown(final int keyCode, final KeyEvent event) {
        final Fragment fragment = getSupportFragmentManager()
                .findFragmentById(R.id.fragment_player_holder);
        if (fragment instanceof OnKeyDownListener
                && !bottomSheetHiddenOrCollapsed()) {
            // Provide keyDown event to fragment which then sends this event
            // to the main player service
            return ((OnKeyDownListener) fragment).onKeyDown(keyCode)
                    || super.onKeyDown(keyCode, event);
        }
        return super.onKeyDown(keyCode, event);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onBackPressed,void onBackPressed(),"[583, 636]","{'A301': [(583, 584), (588, 588), (595, 595), (630, 632)], 'A302': [(636, 636)], 'A290': [(589, 589), (596, 599), (602, 607), (615, 623), (625, 629)], 'A305': [(614, 614)], 'A295': [(590, 591), (624, 624)], 'A298': [(600, 601), (608, 613)], 'A292': [(592, 594)], 'A294': [(585, 587), (633, 635)]}","{'A301': 0.12962962962962962, 'A302': 0.018518518518518517, 'A290': 0.46296296296296297, 'A305': 0.018518518518518517, 'A295': 0.05555555555555555, 'A298': 0.14814814814814814, 'A292': 0.05555555555555555, 'A294': 0.1111111111111111}",A290,,"    @Override
    public void onBackPressed() {
        if (DEBUG) {
            Log.d(TAG, ""onBackPressed() called"");
        }

        if (DeviceUtils.isTv(this)) {
            if (mainBinding.getRoot().isDrawerOpen(drawerLayoutBinding.navigation)) {
                mainBinding.getRoot().closeDrawers();
                return;
            }
        }

        // In case bottomSheet is not visible on the screen or collapsed we can assume that the user
        // interacts with a fragment inside fragment_holder so all back presses should be
        // handled by it
        if (bottomSheetHiddenOrCollapsed()) {
            final FragmentManager fm = getSupportFragmentManager();
            final Fragment fragment = fm.findFragmentById(R.id.fragment_holder);
            // If current fragment implements BackPressable (i.e. can/wanna handle back press)
            // delegate the back press to it
            if (fragment instanceof BackPressable) {
                if (((BackPressable) fragment).onBackPressed()) {
                    return;
                }
            } else if (fragment instanceof CommentRepliesFragment) {
                // expand DetailsFragment if CommentRepliesFragment was opened
                // to show the top level comments again
                // Expand DetailsFragment if CommentRepliesFragment was opened
                // and no other CommentRepliesFragments are on top of the back stack
                // to show the top level comments again.
                openDetailFragmentFromCommentReplies(fm, false);
            }

        } else {
            final Fragment fragmentPlayer = getSupportFragmentManager()
                    .findFragmentById(R.id.fragment_player_holder);
            // If current fragment implements BackPressable (i.e. can/wanna handle back press)
            // delegate the back press to it
            if (fragmentPlayer instanceof BackPressable) {
                if (!((BackPressable) fragmentPlayer).onBackPressed()) {
                    BottomSheetBehavior.from(mainBinding.fragmentPlayerHolder)
                            .setState(BottomSheetBehavior.STATE_COLLAPSED);
                }
                return;
            }
        }

        if (getSupportFragmentManager().getBackStackEntryCount() == 1) {
            finish();
        } else {
            super.onBackPressed();
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onRequestPermissionsResult,"void onRequestPermissionsResult(int,String[],int[])","[638, 663]","{'A290': [(654, 654)], 'A303': [(638, 638), (645, 652), (655, 658), (662, 663)], 'A305': [(659, 661)], 'A294': [(639, 641), (643, 644), (653, 653)], 'A299': [(642, 642)]}","{'A290': 0.038461538461538464, 'A303': 0.5769230769230769, 'A305': 0.11538461538461539, 'A294': 0.23076923076923078, 'A299': 0.038461538461538464}",A303,,"    @Override
    public void onRequestPermissionsResult(final int requestCode,
                                           @NonNull final String[] permissions,
                                           @NonNull final int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        for (final int i : grantResults) {
            if (i == PackageManager.PERMISSION_DENIED) {
                return;
            }
        }
        switch (requestCode) {
            case PermissionHelper.DOWNLOADS_REQUEST_CODE:
                NavigationHelper.openDownloads(this);
                break;
            case PermissionHelper.DOWNLOAD_DIALOG_REQUEST_CODE:
                final Fragment fragment = getSupportFragmentManager()
                        .findFragmentById(R.id.fragment_player_holder);
                if (fragment instanceof VideoDetailFragment) {
                    ((VideoDetailFragment) fragment).openDownloadDialog();
                }
                break;
            case PermissionHelper.POST_NOTIFICATIONS_REQUEST_CODE:
                NotificationWorker.initialize(this);
                break;
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onHomeButtonPressed,void onHomeButtonPressed(),"[689, 702]","{'A301': [(689, 689), (701, 702)], 'A305': [(697, 697)], 'A298': [(690, 696), (698, 700)]}","{'A301': 0.21428571428571427, 'A305': 0.07142857142857142, 'A298': 0.7142857142857143}",A298,,"    private void onHomeButtonPressed() {
        final FragmentManager fm = getSupportFragmentManager();
        final Fragment fragment = fm.findFragmentById(R.id.fragment_holder);

        if (fragment instanceof CommentRepliesFragment) {
            // Expand DetailsFragment if CommentRepliesFragment was opened
            // and no other CommentRepliesFragments are on top of the back stack
            // to show the top level comments again.
            openDetailFragmentFromCommentReplies(fm, true);
        } else if (!NavigationHelper.tryGotoSearchFragment(fm)) {
            // If search fragment wasn't found in the backstack go to the main fragment
            NavigationHelper.gotoMainFragment(fm);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onCreateOptionsMenu,boolean onCreateOptionsMenu(Menu),"[708, 729]","{'A301': [(714, 714), (717, 717), (719, 720), (722, 727)], 'A302': [(713, 713), (728, 729)], 'A295': [(718, 718)], 'A294': [(709, 712), (721, 721)], 'A300': [(715, 716)], 'A319': [(708, 708)]}","{'A301': 0.45454545454545453, 'A302': 0.13636363636363635, 'A295': 0.045454545454545456, 'A294': 0.22727272727272727, 'A300': 0.09090909090909091, 'A319': 0.045454545454545456}",A301,,"    @Override
    public boolean onCreateOptionsMenu(final Menu menu) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateOptionsMenu() called with: menu = ["" + menu + ""]"");
        }
        super.onCreateOptionsMenu(menu);

        final Fragment fragment =
                getSupportFragmentManager().findFragmentById(R.id.fragment_holder);
        if (!(fragment instanceof SearchFragment)) {
            toolbarLayoutBinding.toolbarSearchContainer.getRoot().setVisibility(View.GONE);
        }

        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(false);
        }

        updateDrawerNavigation();

        return true;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[731, 742]","{'A302': [(731, 731), (736, 736), (740, 740), (742, 742)], 'A305': [(732, 732), (737, 739), (741, 741)], 'A294': [(733, 735)]}","{'A302': 0.3333333333333333, 'A305': 0.4166666666666667, 'A294': 0.25}",A305,,"    @Override
    public boolean onOptionsItemSelected(@NonNull final MenuItem item) {
        if (DEBUG) {
            Log.d(TAG, ""onOptionsItemSelected() called with: item = ["" + item + ""]"");
        }

        if (item.getItemId() == android.R.id.home) {
            onHomeButtonPressed();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,initFragments,void initFragments(),"[748, 765]","{'A301': [(748, 748), (752, 753), (761, 761), (765, 765)], 'A290': [(754, 760)], 'A294': [(749, 751), (762, 764)]}","{'A301': 0.2777777777777778, 'A290': 0.3888888888888889, 'A294': 0.3333333333333333}",A290,,"    private void initFragments() {
        if (DEBUG) {
            Log.d(TAG, ""initFragments() called"");
        }
        StateSaver.clearStateFiles();
        if (getIntent() != null && getIntent().hasExtra(Constants.KEY_LINK_TYPE)) {
            // When user watch a video inside popup and then tries to open the video in main player
            // while the app is closed he will see a blank fragment on place of kiosk.
            // Let's open it first
            if (getSupportFragmentManager().getBackStackEntryCount() == 0) {
                NavigationHelper.openMainFragment(getSupportFragmentManager());
            }

            handleIntent(getIntent());
        } else {
            NavigationHelper.gotoMainFragment(getSupportFragmentManager());
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,updateDrawerNavigation,void updateDrawerNavigation(),"[771, 791]","{'A301': [(771, 771), (775, 775), (778, 781), (785, 786), (788, 788), (790, 791)], 'A295': [(782, 782), (784, 784), (787, 787), (789, 789)], 'A294': [(772, 774), (776, 777)], 'A299': [(783, 783)]}","{'A301': 0.5238095238095238, 'A295': 0.19047619047619047, 'A294': 0.23809523809523808, 'A299': 0.047619047619047616}",A301,,"    private void updateDrawerNavigation() {
        if (getSupportActionBar() == null) {
            return;
        }

        final Fragment fragment = getSupportFragmentManager()
                .findFragmentById(R.id.fragment_holder);
        if (fragment instanceof MainFragment) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(false);
            if (toggle != null) {
                toggle.syncState();
                toolbarLayoutBinding.toolbar.setNavigationOnClickListener(v -> mainBinding.getRoot()
                        .open());
                mainBinding.getRoot().setDrawerLockMode(DrawerLayout.LOCK_MODE_UNDEFINED);
            }
        } else {
            mainBinding.getRoot().setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED);
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            toolbarLayoutBinding.toolbar.setNavigationOnClickListener(v -> onHomeButtonPressed());
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,handleIntent,void handleIntent(Intent),"[793, 851]","{'A301': [(847, 847), (850, 851)], 'A302': [(794, 794), (798, 799), (811, 811), (824, 826), (828, 830), (832, 835), (840, 846)], 'A290': [(814, 817)], 'A305': [(802, 810), (812, 813), (818, 823), (827, 827), (831, 831), (849, 849)], 'A294': [(793, 793), (795, 797), (800, 801), (836, 839), (848, 848)]}","{'A301': 0.05084745762711865, 'A302': 0.3559322033898305, 'A290': 0.06779661016949153, 'A305': 0.3389830508474576, 'A294': 0.1864406779661017}",A302,,"    private void handleIntent(final Intent intent) {
        try {
            if (DEBUG) {
                Log.d(TAG, ""handleIntent() called with: intent = ["" + intent + ""]"");
            }

            if (intent.hasExtra(Constants.KEY_LINK_TYPE)) {
                final String url = intent.getStringExtra(Constants.KEY_URL);
                final int serviceId = intent.getIntExtra(Constants.KEY_SERVICE_ID, 0);
                String title = intent.getStringExtra(Constants.KEY_TITLE);
                if (title == null) {
                    title = """";
                }

                final StreamingService.LinkType linkType = ((StreamingService.LinkType) intent
                        .getSerializableExtra(Constants.KEY_LINK_TYPE));
                assert linkType != null;
                switch (linkType) {
                    case STREAM:
                        final String intentCacheKey = intent.getStringExtra(
                                Player.PLAY_QUEUE_KEY);
                        final PlayQueue playQueue = intentCacheKey != null
                                ? SerializedCache.getInstance()
                                .take(intentCacheKey, PlayQueue.class)
                                : null;

                        final boolean switchingPlayers = intent.getBooleanExtra(
                                VideoDetailFragment.KEY_SWITCHING_PLAYERS, false);
                        NavigationHelper.openVideoDetailFragment(
                                getApplicationContext(), getSupportFragmentManager(),
                                serviceId, url, title, playQueue, switchingPlayers);
                        break;
                    case CHANNEL:
                        NavigationHelper.openChannelFragment(getSupportFragmentManager(),
                                serviceId, url, title);
                        break;
                    case PLAYLIST:
                        NavigationHelper.openPlaylistFragment(getSupportFragmentManager(),
                                serviceId, url, title);
                        break;
                }
            } else if (intent.hasExtra(Constants.KEY_OPEN_SEARCH)) {
                String searchString = intent.getStringExtra(Constants.KEY_SEARCH_STRING);
                if (searchString == null) {
                    searchString = """";
                }
                final int serviceId = intent.getIntExtra(Constants.KEY_SERVICE_ID, 0);
                NavigationHelper.openSearchFragment(
                        getSupportFragmentManager(),
                        serviceId,
                        searchString);

            } else {
                NavigationHelper.gotoMainFragment(getSupportFragmentManager());
            }
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(this, ""Handling intent"", e);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,openMiniPlayerIfMissing,void openMiniPlayerIfMissing(),"[853, 862]","{'A305': [(853, 862)]}",{'A305': 1.0},A305,,"    private void openMiniPlayerIfMissing() {
        final Fragment fragmentPlayer = getSupportFragmentManager()
                .findFragmentById(R.id.fragment_player_holder);
        if (fragmentPlayer == null) {
            // We still don't have a fragment attached to the activity. It can happen when a user
            // started popup or background players without opening a stream inside the fragment.
            // Adding it in a collapsed state (only mini player will be visible).
            NavigationHelper.showMiniPlayer(getSupportFragmentManager());
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,openMiniPlayerUponPlayerStarted,void openMiniPlayerUponPlayerStarted(),"[864, 899]","{'A290': [(888, 889), (899, 899)], 'A305': [(864, 871), (873, 887), (890, 898)], 'A320': [(872, 872)]}","{'A290': 0.08333333333333333, 'A305': 0.8888888888888888, 'A320': 0.027777777777777776}",A305,,"    private void openMiniPlayerUponPlayerStarted() {
        if (getIntent().getSerializableExtra(Constants.KEY_LINK_TYPE)
                == StreamingService.LinkType.STREAM) {
            // handleIntent() already takes care of opening video detail fragment
            // due to an intent containing a STREAM link
            return;
        }

        if (PlayerHolder.getInstance().isPlayerOpen()) {
            // if the player is already open, no need for a broadcast receiver
            openMiniPlayerIfMissing();
        } else {
            // listen for player start intent being sent around
            broadcastReceiver = new BroadcastReceiver() {
                @Override
                public void onReceive(final Context context, final Intent intent) {
                    if (Objects.equals(intent.getAction(),
                            VideoDetailFragment.ACTION_PLAYER_STARTED)
                            && PlayerHolder.getInstance().isPlayerOpen()) {
                        openMiniPlayerIfMissing();
                        // At this point the player is added 100%, we can unregister. Other actions
                        // are useless since the fragment will not be removed after that.
                        unregisterReceiver(broadcastReceiver);
                        broadcastReceiver = null;
                    }
                }
            };
            final IntentFilter intentFilter = new IntentFilter();
            intentFilter.addAction(VideoDetailFragment.ACTION_PLAYER_STARTED);
            registerReceiver(broadcastReceiver, intentFilter);

            // If the PlayerHolder is not bound yet, but the service is running, try to bind to it.
            // Once the connection is established, the ACTION_PLAYER_STARTED will be sent.
            PlayerHolder.getInstance().tryBindIfNeeded(this);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onReceive,"void onReceive(Context,Intent)","[878, 889]","{'A290': [(888, 889)], 'A305': [(878, 887)]}","{'A290': 0.16666666666666666, 'A305': 0.8333333333333334}",A305,,"                @Override
                public void onReceive(final Context context, final Intent intent) {
                    if (Objects.equals(intent.getAction(),
                            VideoDetailFragment.ACTION_PLAYER_STARTED)
                            && PlayerHolder.getInstance().isPlayerOpen()) {
                        openMiniPlayerIfMissing();
                        // At this point the player is added 100%, we can unregister. Other actions
                        // are useless since the fragment will not be removed after that.
                        unregisterReceiver(broadcastReceiver);
                        broadcastReceiver = null;
                    }
                }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,openDetailFragmentFromCommentReplies,"void openDetailFragmentFromCommentReplies(FragmentManager,boolean)","[901, 961]","{'A305': [(903, 948), (950, 950), (952, 952), (954, 960)], 'A298': [(901, 902), (949, 949), (951, 951), (953, 953), (961, 961)]}","{'A305': 0.9016393442622951, 'A298': 0.09836065573770492}",A305,,"    private void openDetailFragmentFromCommentReplies(
            @NonNull final FragmentManager fm,
            final boolean popBackStack
    ) {
        // obtain the name of the fragment under the replies fragment that's going to be popped
        @Nullable final String fragmentUnderEntryName;
        if (fm.getBackStackEntryCount() < 2) {
            fragmentUnderEntryName = null;
        } else {
            fragmentUnderEntryName = fm.getBackStackEntryAt(fm.getBackStackEntryCount() - 2)
                    .getName();
        }

        // the root comment is the comment for which the user opened the replies page
        @Nullable final CommentRepliesFragment repliesFragment =
                (CommentRepliesFragment) fm.findFragmentByTag(CommentRepliesFragment.TAG);
        @Nullable final CommentsInfoItem rootComment =
                repliesFragment == null ? null : repliesFragment.getCommentsInfoItem();

        // sometimes this function pops the backstack, other times it's handled by the system
        if (popBackStack) {
            fm.popBackStackImmediate();
        }

        // only expand the bottom sheet back if there are no more nested comment replies fragments
        // stacked under the one that is currently being popped
        if (CommentRepliesFragment.TAG.equals(fragmentUnderEntryName)) {
            return;
        }

        final BottomSheetBehavior<FragmentContainerView> behavior = BottomSheetBehavior
                .from(mainBinding.fragmentPlayerHolder);
        // do not return to the comment if the details fragment was closed
        if (behavior.getState() == BottomSheetBehavior.STATE_HIDDEN) {
            return;
        }

        // scroll to the root comment once the bottom sheet expansion animation is finished
        behavior.addBottomSheetCallback(new BottomSheetBehavior.BottomSheetCallback() {
            @Override
            public void onStateChanged(@NonNull final View bottomSheet,
                                       final int newState) {
                if (newState == BottomSheetBehavior.STATE_EXPANDED) {
                    final Fragment detailFragment = fm.findFragmentById(
                            R.id.fragment_player_holder);
                    if (detailFragment instanceof VideoDetailFragment && rootComment != null) {
                        // should always be the case
                        ((VideoDetailFragment) detailFragment).scrollToComment(rootComment);
                    }
                    behavior.removeBottomSheetCallback(this);
                }
            }

            @Override
            public void onSlide(@NonNull final View bottomSheet, final float slideOffset) {
                // not needed, listener is removed once the sheet is expanded
            }
        });

        behavior.setState(BottomSheetBehavior.STATE_EXPANDED);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onStateChanged,"void onStateChanged(View,int)","[940, 952]","{'A305': [(940, 948), (950, 950), (952, 952)], 'A298': [(949, 949), (951, 951)]}","{'A305': 0.8461538461538461, 'A298': 0.15384615384615385}",A305,,"            @Override
            public void onStateChanged(@NonNull final View bottomSheet,
                                       final int newState) {
                if (newState == BottomSheetBehavior.STATE_EXPANDED) {
                    final Fragment detailFragment = fm.findFragmentById(
                            R.id.fragment_player_holder);
                    if (detailFragment instanceof VideoDetailFragment && rootComment != null) {
                        // should always be the case
                        ((VideoDetailFragment) detailFragment).scrollToComment(rootComment);
                    }
                    behavior.removeBottomSheetCallback(this);
                }
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,onSlide,"void onSlide(View,float)","[954, 957]","{'A305': [(954, 957)]}",{'A305': 1.0},A305,,"            @Override
            public void onSlide(@NonNull final View bottomSheet, final float slideOffset) {
                // not needed, listener is removed once the sheet is expanded
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/MainActivity.java,MainActivity,bottomSheetHiddenOrCollapsed,boolean bottomSheetHiddenOrCollapsed(),"[963, 970]","{'A290': [(963, 964), (966, 970)], 'A295': [(965, 965)]}","{'A290': 0.875, 'A295': 0.125}",A290,,"    private boolean bottomSheetHiddenOrCollapsed() {
        final BottomSheetBehavior<FrameLayout> bottomSheetBehavior =
                BottomSheetBehavior.from(mainBinding.fragmentPlayerHolder);

        final int sheetState = bottomSheetBehavior.getState();
        return sheetState == BottomSheetBehavior.STATE_HIDDEN
                || sheetState == BottomSheetBehavior.STATE_COLLAPSED;
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,onCreate,void onCreate(Bundle),"[78, 125]","{'A305': [(110, 111), (118, 119), (122, 122)], 'A302': [(78, 78), (80, 80), (87, 87), (89, 89), (94, 98), (100, 100), (106, 106), (112, 112), (115, 117), (120, 120), (123, 125)], 'A294': [(79, 79), (88, 88), (92, 92)], 'A299': [(99, 99), (108, 108), (114, 114)], 'A295': [(84, 86), (90, 90), (107, 107), (113, 113)], 'A298': [(102, 102), (109, 109), (121, 121)], 'A323': [(103, 105)], 'A301': [(83, 83), (91, 91), (93, 93)], 'A324': [(101, 101)], 'A312': [(81, 82)]}","{'A305': 0.10416666666666667, 'A302': 0.3958333333333333, 'A294': 0.0625, 'A299': 0.0625, 'A295': 0.125, 'A298': 0.0625, 'A323': 0.0625, 'A301': 0.0625, 'A324': 0.020833333333333332, 'A312': 0.041666666666666664}",A302,,"    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        ThemeHelper.setDayNightMode(this);
        ThemeHelper.setTheme(this);

        activityErrorBinding = ActivityErrorBinding.inflate(getLayoutInflater());
        setContentView(activityErrorBinding.getRoot());

        final Intent intent = getIntent();

        setSupportActionBar(activityErrorBinding.toolbarLayout.toolbar);

        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
            actionBar.setTitle(R.string.error_report_title);
            actionBar.setDisplayShowTitleEnabled(true);
        }

        errorInfo = IntentCompat.getParcelableExtra(intent, ERROR_INFO, ErrorInfo.class);

        // important add guru meditation
        addGuruMeditation();
        // print current time, as zoned ISO8601 timestamp
        final ZonedDateTime now = ZonedDateTime.now();
        currentTimeStamp = now.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME);

        activityErrorBinding.errorReportEmailButton.setOnClickListener(v ->
                openPrivacyPolicyDialog(this, ""EMAIL""));

        activityErrorBinding.errorReportCopyButton.setOnClickListener(v ->
                ShareUtils.copyToClipboard(this, buildMarkdown()));

        activityErrorBinding.errorReportGitHubButton.setOnClickListener(v ->
                openPrivacyPolicyDialog(this, ""GITHUB""));

        // normal bugreport
        buildInfo(errorInfo);
        activityErrorBinding.errorMessageView.setText(errorInfo.getMessageStringId());
        activityErrorBinding.errorView.setText(formErrorText(errorInfo.getStackTraces()));

        // print stack trace once again for debugging:
        for (final String e : errorInfo.getStackTraces()) {
            Log.e(TAG, e);
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,onCreateOptionsMenu,boolean onCreateOptionsMenu(Menu),"[127, 132]","{'A302': [(127, 127), (130, 132)], 'A294': [(128, 129)]}","{'A302': 0.6666666666666666, 'A294': 0.3333333333333333}",A302,,"    @Override
    public boolean onCreateOptionsMenu(final Menu menu) {
        final MenuInflater inflater = getMenuInflater();
        inflater.inflate(R.menu.error_menu, menu);
        return true;
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[134, 147]","{'A302': [(134, 134), (146, 147)], 'A294': [(135, 135)], 'A325': [(136, 136), (138, 140), (143, 145)], 'A326': [(137, 137)], 'A293': [(141, 142)]}","{'A302': 0.21428571428571427, 'A294': 0.07142857142857142, 'A325': 0.5, 'A326': 0.07142857142857142, 'A293': 0.14285714285714285}",A325,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
            case R.id.menu_item_share_error:
                ShareUtils.shareText(getApplicationContext(),
                        getString(R.string.error_report_title), buildJson());
                return true;
            default:
                return false;
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,openPrivacyPolicyDialog,"void openPrivacyPolicyDialog(Context,String)","[149, 174]","{'A305': [(156, 156), (163, 165), (167, 167), (169, 169)], 'A299': [(155, 155), (157, 157), (172, 172)], 'A298': [(149, 154), (158, 162), (166, 166), (168, 168), (170, 171), (173, 174)]}","{'A305': 0.23076923076923078, 'A299': 0.11538461538461539, 'A298': 0.6538461538461539}",A298,,"    private void openPrivacyPolicyDialog(final Context context, final String action) {
        new AlertDialog.Builder(context)
                .setIcon(android.R.drawable.ic_dialog_alert)
                .setTitle(R.string.privacy_policy_title)
                .setMessage(R.string.start_accept_privacy_policy)
                .setCancelable(false)
                .setNeutralButton(R.string.read_privacy_policy, (dialog, which) ->
                        ShareUtils.openUrlInApp(context,
                                context.getString(R.string.privacy_policy_url)))
                .setPositiveButton(R.string.accept, (dialog, which) -> {
                    if (action.equals(""EMAIL"")) { // send on email
                        final Intent i = new Intent(Intent.ACTION_SENDTO)
                                .setData(Uri.parse(""mailto:"")) // only email apps should handle this
                                .putExtra(Intent.EXTRA_EMAIL, new String[]{ERROR_EMAIL_ADDRESS})
                                .putExtra(Intent.EXTRA_SUBJECT, ERROR_EMAIL_SUBJECT
                                        + getString(R.string.app_name) + "" ""
                                        + BuildConfig.VERSION_NAME)
                                .putExtra(Intent.EXTRA_TEXT, buildJson());
                        ShareUtils.openIntentInApp(context, i);
                    } else if (action.equals(""GITHUB"")) { // open the NewPipe issue page on GitHub
                        ShareUtils.openUrlInApp(this, ERROR_GITHUB_ISSUE_URL);
                    }
                })
                .setNegativeButton(R.string.decline, null)
                .show();
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,formErrorText,String formErrorText(String[]),"[176, 180]","{'A302': [(180, 180)], 'A294': [(176, 176)], 'A295': [(177, 179)]}","{'A302': 0.2, 'A294': 0.2, 'A295': 0.6}",A295,,"    private String formErrorText(final String[] el) {
        final String separator = ""-------------------------------------"";
        return Arrays.stream(el)
                .collect(Collectors.joining(separator + ""\n"", separator + ""\n"", separator));
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,buildInfo,void buildInfo(ErrorInfo),"[182, 200]","{'A302': [(183, 184), (187, 187), (198, 198), (200, 200)], 'A294': [(182, 182), (194, 197)], 'A295': [(185, 186), (188, 189), (193, 193), (199, 199)], 'A298': [(190, 192)]}","{'A302': 0.2631578947368421, 'A294': 0.2631578947368421, 'A295': 0.3157894736842105, 'A298': 0.15789473684210525}",A295,,"    private void buildInfo(final ErrorInfo info) {
        String text = """";

        activityErrorBinding.errorInfoLabelsView.setText(getString(R.string.info_labels)
                .replace(""\\n"", ""\n""));

        text += getUserActionString(info.getUserAction()) + ""\n""
                + info.getRequest() + ""\n""
                + getContentLanguageString() + ""\n""
                + getContentCountryString() + ""\n""
                + getAppLanguage() + ""\n""
                + info.getServiceName() + ""\n""
                + currentTimeStamp + ""\n""
                + getPackageName() + ""\n""
                + BuildConfig.VERSION_NAME + ""\n""
                + getOsString();

        activityErrorBinding.errorInfosView.setText(text);
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,buildJson,String buildJson(),"[202, 227]","{'A305': [(216, 216)], 'A302': [(202, 203), (222, 227)], 'A294': [(221, 221)], 'A322': [(204, 205), (212, 215), (219, 220)], 'A295': [(206, 207), (211, 211), (217, 218)], 'A298': [(208, 210)]}","{'A305': 0.038461538461538464, 'A302': 0.3076923076923077, 'A294': 0.038461538461538464, 'A322': 0.3076923076923077, 'A295': 0.19230769230769232, 'A298': 0.11538461538461539}",A302,,"    private String buildJson() {
        try {
            return JsonWriter.string()
                    .object()
                    .value(""user_action"", getUserActionString(errorInfo.getUserAction()))
                    .value(""request"", errorInfo.getRequest())
                    .value(""content_language"", getContentLanguageString())
                    .value(""content_country"", getContentCountryString())
                    .value(""app_language"", getAppLanguage())
                    .value(""service"", errorInfo.getServiceName())
                    .value(""package"", getPackageName())
                    .value(""version"", BuildConfig.VERSION_NAME)
                    .value(""os"", getOsString())
                    .value(""time"", currentTimeStamp)
                    .array(""exceptions"", Arrays.asList(errorInfo.getStackTraces()))
                    .value(""user_comment"", activityErrorBinding.errorCommentBox.getText()
                            .toString())
                    .end()
                    .done();
        } catch (final Throwable e) {
            Log.e(TAG, ""Error while erroring: Could not build json"");
            e.printStackTrace();
        }

        return """";
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,buildMarkdown,String buildMarkdown(),"[229, 287]","{'A305': [(257, 257), (260, 260), (265, 265), (267, 267), (272, 272), (277, 277)], 'A294': [(282, 282)], 'A295': [(233, 233), (242, 243), (247, 247)], 'A298': [(229, 232), (234, 241), (244, 246), (251, 256), (258, 259), (261, 264), (266, 266), (268, 271), (273, 276), (278, 281), (283, 287)], 'A327': [(248, 250)]}","{'A305': 0.1016949152542373, 'A294': 0.01694915254237288, 'A295': 0.06779661016949153, 'A298': 0.7627118644067796, 'A327': 0.05084745762711865}",A298,,"    private String buildMarkdown() {
        try {
            final StringBuilder htmlErrorReport = new StringBuilder();

            final String userComment = activityErrorBinding.errorCommentBox.getText().toString();
            if (!userComment.isEmpty()) {
                htmlErrorReport.append(userComment).append(""\n"");
            }

            // basic error info
            htmlErrorReport
                    .append(""## Exception"")
                    .append(""\n* __User Action:__ "")
                        .append(getUserActionString(errorInfo.getUserAction()))
                    .append(""\n* __Request:__ "").append(errorInfo.getRequest())
                    .append(""\n* __Content Country:__ "").append(getContentCountryString())
                    .append(""\n* __Content Language:__ "").append(getContentLanguageString())
                    .append(""\n* __App Language:__ "").append(getAppLanguage())
                    .append(""\n* __Service:__ "").append(errorInfo.getServiceName())
                    .append(""\n* __Timestamp:__ "").append(currentTimeStamp)
                    .append(""\n* __Package:__ "").append(getPackageName())
                    .append(""\n* __Service:__ "").append(errorInfo.getServiceName())
                    .append(""\n* __Version:__ "").append(BuildConfig.VERSION_NAME)
                    .append(""\n* __OS:__ "").append(getOsString()).append(""\n"");


            // Collapse all logs to a single paragraph when there are more than one
            // to keep the GitHub issue clean.
            if (errorInfo.getStackTraces().length > 1) {
                htmlErrorReport
                        .append(""<details><summary><b>Exceptions ("")
                        .append(errorInfo.getStackTraces().length)
                        .append("")</b></summary><p>\n"");
            }

            // add the logs
            for (int i = 0; i < errorInfo.getStackTraces().length; i++) {
                htmlErrorReport.append(""<details><summary><b>Crash log "");
                if (errorInfo.getStackTraces().length > 1) {
                    htmlErrorReport.append(i + 1);
                }
                htmlErrorReport.append(""</b>"")
                        .append(""</summary><p>\n"")
                        .append(""\n```\n"").append(errorInfo.getStackTraces()[i]).append(""\n```\n"")
                        .append(""</details>\n"");
            }

            // make sure to close everything
            if (errorInfo.getStackTraces().length > 1) {
                htmlErrorReport.append(""</p></details>\n"");
            }
            htmlErrorReport.append(""<hr>\n"");
            return htmlErrorReport.toString();
        } catch (final Throwable e) {
            Log.e(TAG, ""Error while erroring: Could not build markdown"");
            e.printStackTrace();
            return """";
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,getUserActionString,String getUserActionString(UserAction),"[289, 295]","{'A302': [(294, 295)], 'A294': [(289, 289)], 'A301': [(290, 290)], 'A324': [(291, 293)]}","{'A302': 0.2857142857142857, 'A294': 0.14285714285714285, 'A301': 0.14285714285714285, 'A324': 0.42857142857142855}",A324,,"    private String getUserActionString(final UserAction userAction) {
        if (userAction == null) {
            return ""Your description is in another castle."";
        } else {
            return userAction.getMessage();
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,getContentCountryString,String getContentCountryString(),"[297, 299]","{'A298': [(297, 299)]}",{'A298': 1.0},A298,,"    private String getContentCountryString() {
        return Localization.getPreferredContentCountry(this).getCountryCode();
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,getContentLanguageString,String getContentLanguageString(),"[301, 303]","{'A298': [(301, 303)]}",{'A298': 1.0},A298,,"    private String getContentLanguageString() {
        return Localization.getPreferredLocalization(this).getLocalizationCode();
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,getAppLanguage,String getAppLanguage(),"[305, 307]","{'A302': [(307, 307)], 'A295': [(306, 306)], 'A298': [(305, 305)]}","{'A302': 0.3333333333333333, 'A295': 0.3333333333333333, 'A298': 0.3333333333333333}",A302,,"    private String getAppLanguage() {
        return Localization.getAppLocale().toString();
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,getOsString,String getOsString(),"[309, 316]","{'A302': [(309, 309), (312, 314), (316, 316)], 'A294': [(315, 315)], 'A299': [(310, 311)]}","{'A302': 0.625, 'A294': 0.125, 'A299': 0.25}",A302,,"    private String getOsString() {
        final String osBase = Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
                ? Build.VERSION.BASE_OS : ""Android"";
        return System.getProperty(""os.name"")
                + "" "" + (osBase.isEmpty() ? ""Android"" : osBase)
                + "" "" + Build.VERSION.RELEASE
                + "" - "" + Build.VERSION.SDK_INT;
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java,ErrorActivity,addGuruMeditation,void addGuruMeditation(),"[318, 323]","{'A302': [(319, 319), (321, 321), (323, 323)], 'A295': [(320, 320), (322, 322)], 'A298': [(318, 318)]}","{'A302': 0.5, 'A295': 0.3333333333333333, 'A298': 0.16666666666666666}",A302,,"    private void addGuruMeditation() {
        //just an easter egg
        String text = activityErrorBinding.errorSorryView.getText().toString();
        text += ""\n"" + getString(R.string.guru_meditation);
        activityErrorBinding.errorSorryView.setText(text);
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/UserAction.java,UserAction,getMessage,String getMessage(),"[44, 46]","{'A324': [(44, 46)]}",{'A324': 1.0},A324,,"    public String getMessage() {
        return message;
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/AcraReportSender.java,AcraReportSender,send,"void send(Context,CrashReportData)","[34, 42]","{'A305': [(36, 41)], 'A302': [(34, 34), (42, 42)], 'A294': [(35, 35)]}","{'A305': 0.6666666666666666, 'A302': 0.2222222222222222, 'A294': 0.1111111111111111}",A305,,"    @Override
    public void send(@NonNull final Context context, @NonNull final CrashReportData report) {
        ErrorUtil.openActivity(context, new ErrorInfo(
                new String[]{report.getString(ReportField.STACK_TRACE)},
                UserAction.UI_ERROR,
                ErrorInfo.SERVICE_NONE,
                ""ACRA report"",
                R.string.app_ui_crash));
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/AcraReportSenderFactory.java,AcraReportSenderFactory,create,"ReportSender create(Context,CoreConfiguration)","[39, 43]","{'A302': [(42, 43)], 'A294': [(40, 41)], 'A324': [(39, 39)]}","{'A302': 0.4, 'A294': 0.4, 'A324': 0.2}",A302,,"    @NonNull
    public ReportSender create(@NonNull final Context context,
                               @NonNull final CoreConfiguration config) {
        return new AcraReportSender();
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,sanitizeRecaptchaUrl,String sanitizeRecaptchaUrl(String),"[56, 63]","{'A305': [(56, 63)]}",{'A305': 1.0},A305,,"    public static String sanitizeRecaptchaUrl(@Nullable final String url) {
        if (url == null || url.trim().isEmpty()) {
            return YT_URL; // YouTube is the most likely service to have thrown a recaptcha
        } else {
            // remove ""pbj=1"" parameter from YouYube urls, as it makes the page JSON and not HTML
            return url.replace(""&pbj=1"", """").replace(""pbj=1&"", """").replace(""?pbj=1"", """");
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,onCreate,void onCreate(Bundle),"[68, 112]","{'A305': [(71, 71), (78, 79), (82, 82), (85, 85), (88, 88), (91, 91), (93, 94), (96, 99), (101, 104), (106, 106)], 'A319': [(69, 69), (72, 72), (77, 77), (80, 81), (84, 84), (86, 86), (105, 105), (110, 110), (112, 112)], 'A298': [(68, 68)], 'A299': [(87, 87), (89, 90), (92, 92), (95, 95)], 'A294': [(70, 70), (100, 100)], 'A295': [(73, 76), (83, 83), (107, 108), (111, 111)], 'A300': [(109, 109)]}","{'A305': 0.4, 'A319': 0.2222222222222222, 'A298': 0.022222222222222223, 'A299': 0.1111111111111111, 'A294': 0.044444444444444446, 'A295': 0.17777777777777778, 'A300': 0.022222222222222223}",A305,,"    @SuppressLint(""SetJavaScriptEnabled"")
    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        ThemeHelper.setTheme(this);
        super.onCreate(savedInstanceState);

        recaptchaBinding = ActivityRecaptchaBinding.inflate(getLayoutInflater());
        setContentView(recaptchaBinding.getRoot());
        setSupportActionBar(recaptchaBinding.toolbar);

        final String url = sanitizeRecaptchaUrl(getIntent().getStringExtra(RECAPTCHA_URL_EXTRA));
        // set return to Cancel by default
        setResult(RESULT_CANCELED);

        // enable Javascript
        final WebSettings webSettings = recaptchaBinding.reCaptchaWebView.getSettings();
        webSettings.setJavaScriptEnabled(true);
        webSettings.setUserAgentString(DownloaderImpl.USER_AGENT);

        recaptchaBinding.reCaptchaWebView.setWebViewClient(new WebViewClient() {
            @Override
            public boolean shouldOverrideUrlLoading(final WebView view,
                                                    final WebResourceRequest request) {
                if (MainActivity.DEBUG) {
                    Log.d(TAG, ""shouldOverrideUrlLoading: url="" + request.getUrl().toString());
                }

                handleCookiesFromUrl(request.getUrl().toString());
                return false;
            }

            @Override
            public void onPageFinished(final WebView view, final String url) {
                super.onPageFinished(view, url);
                handleCookiesFromUrl(url);
            }
        });

        // cleaning cache, history and cookies from webView
        recaptchaBinding.reCaptchaWebView.clearCache(true);
        recaptchaBinding.reCaptchaWebView.clearHistory();
        CookieManager.getInstance().removeAllCookies(null);

        recaptchaBinding.reCaptchaWebView.loadUrl(url);
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,shouldOverrideUrlLoading,"boolean shouldOverrideUrlLoading(WebView,WebResourceRequest)","[88, 97]","{'A305': [(88, 88), (91, 91), (93, 94), (96, 97)], 'A299': [(89, 90), (92, 92), (95, 95)]}","{'A305': 0.6, 'A299': 0.4}",A305,,"            @Override
            public boolean shouldOverrideUrlLoading(final WebView view,
                                                    final WebResourceRequest request) {
                if (MainActivity.DEBUG) {
                    Log.d(TAG, ""shouldOverrideUrlLoading: url="" + request.getUrl().toString());
                }

                handleCookiesFromUrl(request.getUrl().toString());
                return false;
            }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,onPageFinished,"void onPageFinished(WebView,String)","[99, 103]","{'A305': [(99, 99), (101, 103)], 'A294': [(100, 100)]}","{'A305': 0.8, 'A294': 0.2}",A305,,"            @Override
            public void onPageFinished(final WebView view, final String url) {
                super.onPageFinished(view, url);
                handleCookiesFromUrl(url);
            }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,onCreateOptionsMenu,boolean onCreateOptionsMenu(Menu),"[114, 126]","{'A305': [(114, 114), (116, 116), (119, 122), (125, 126)], 'A319': [(117, 117), (123, 124)], 'A294': [(115, 115), (118, 118)]}","{'A305': 0.6153846153846154, 'A319': 0.23076923076923078, 'A294': 0.15384615384615385}",A305,,"    @Override
    public boolean onCreateOptionsMenu(final Menu menu) {
        getMenuInflater().inflate(R.menu.menu_recaptcha, menu);

        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(false);
            actionBar.setTitle(R.string.title_activity_recaptcha);
            actionBar.setSubtitle(R.string.subtitle_activity_recaptcha);
        }

        return true;
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,onBackPressed,void onBackPressed(),"[128, 131]","{'A305': [(128, 131)]}",{'A305': 1.0},A305,,"    @Override
    public void onBackPressed() {
        saveCookiesAndFinish();
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[133, 140]","{'A305': [(133, 133), (135, 137), (139, 140)], 'A319': [(138, 138)], 'A294': [(134, 134)]}","{'A305': 0.75, 'A319': 0.125, 'A294': 0.125}",A305,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        if (item.getItemId() == R.id.menu_item_done) {
            saveCookiesAndFinish();
            return true;
        }
        return false;
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,saveCookiesAndFinish,void saveCookiesAndFinish(),"[142, 167]","{'A305': [(142, 142), (145, 156), (158, 159), (165, 167)], 'A319': [(160, 160)], 'A294': [(164, 164)], 'A295': [(143, 144)], 'A330': [(157, 157)], 'A331': [(161, 161), (163, 163)], 'A332': [(162, 162)]}","{'A305': 0.6923076923076923, 'A319': 0.038461538461538464, 'A294': 0.038461538461538464, 'A295': 0.07692307692307693, 'A330': 0.038461538461538464, 'A331': 0.07692307692307693, 'A332': 0.038461538461538464}",A305,,"    private void saveCookiesAndFinish() {
        // try to get cookies of unclosed page
        handleCookiesFromUrl(recaptchaBinding.reCaptchaWebView.getUrl());
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""saveCookiesAndFinish: foundCookies="" + foundCookies);
        }

        if (!foundCookies.isEmpty()) {
            // save cookies to preferences
            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                    getApplicationContext());
            final String key = getApplicationContext().getString(R.string.recaptcha_cookies_key);
            prefs.edit().putString(key, foundCookies).apply();

            // give cookies to Downloader class
            DownloaderImpl.getInstance().setCookie(RECAPTCHA_COOKIES_KEY, foundCookies);
            setResult(RESULT_OK);
        }

        // Navigate to blank page (unloads youtube to prevent background playback)
        recaptchaBinding.reCaptchaWebView.loadUrl(""about:blank"");

        final Intent intent = new Intent(this, org.schabi.newpipe.MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
        NavUtils.navigateUpTo(this, intent);
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,handleCookiesFromUrl,void handleCookiesFromUrl(String),"[170, 196]","{'A305': [(170, 178), (180, 182), (184, 184), (186, 187), (190, 196)], 'A294': [(179, 179), (183, 183), (185, 185)], 'A295': [(188, 189)]}","{'A305': 0.8148148148148148, 'A294': 0.1111111111111111, 'A295': 0.07407407407407407}",A305,,"    private void handleCookiesFromUrl(@Nullable final String url) {
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""handleCookiesFromUrl: url="" + (url == null ? ""null"" : url));
        }

        if (url == null) {
            return;
        }

        final String cookies = CookieManager.getInstance().getCookie(url);
        handleCookies(cookies);

        // sometimes cookies are inside the url
        final int abuseStart = url.indexOf(""google_abuse="");
        if (abuseStart != -1) {
            final int abuseEnd = url.indexOf(""+path"");

            try {
                handleCookies(Utils.decodeUrlUtf8(url.substring(abuseStart + 13, abuseEnd)));
            } catch (final StringIndexOutOfBoundsException e) {
                if (MainActivity.DEBUG) {
                    Log.e(TAG, ""handleCookiesFromUrl: invalid google abuse starting at ""
                            + abuseStart + "" and ending at "" + abuseEnd + "" for url "" + url, e);
                }
            }
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,handleCookies,void handleCookies(String),"[198, 209]","{'A305': [(198, 198), (200, 200), (202, 203), (206, 209)], 'A294': [(199, 199), (201, 201), (204, 205)]}","{'A305': 0.6666666666666666, 'A294': 0.3333333333333333}",A305,,"    private void handleCookies(@Nullable final String cookies) {
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""handleCookies: cookies="" + (cookies == null ? ""null"" : cookies));
        }

        if (cookies == null) {
            return;
        }

        addYoutubeCookies(cookies);
        // add here methods to extract cookies for other services
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,addYoutubeCookies,void addYoutubeCookies(String),"[211, 218]","{'A305': [(211, 211), (213, 216)], 'A319': [(217, 218)], 'A294': [(212, 212)]}","{'A305': 0.625, 'A319': 0.25, 'A294': 0.125}",A305,,"    private void addYoutubeCookies(@NonNull final String cookies) {
        if (cookies.contains(""s_gl="") || cookies.contains(""goojf="")
                || cookies.contains(""VISITOR_INFO1_LIVE="")
                || cookies.contains(""GOOGLE_ABUSE_EXEMPTION="")) {
            // youtube seems to also need the other cookies:
            addCookie(cookies);
        }
    }
"
org.schabi.newpipe.error,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/error/ReCaptchaActivity.java,ReCaptchaActivity,addCookie,void addCookie(String),"[220, 232]","{'A305': [(221, 230)], 'A319': [(231, 232)], 'A294': [(220, 220)]}","{'A305': 0.7692307692307693, 'A319': 0.15384615384615385, 'A294': 0.07692307692307693}",A305,,"    private void addCookie(final String cookie) {
        if (foundCookies.contains(cookie)) {
            return;
        }

        if (foundCookies.isEmpty() || foundCookies.endsWith(""; "")) {
            foundCookies += cookie;
        } else if (foundCookies.endsWith("";"")) {
            foundCookies += "" "" + cookie;
        } else {
            foundCookies += ""; "" + cookie;
        }
    }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog,show,void show(),"[85, 87]","{'A310': [(85, 87)]}",{'A310': 1.0},A310,,"    public void show() {
        dialog.show();
    }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addEntry,Builder addEntry(StreamDialogDefaultEntry),"[213, 216]","{'A298': [(213, 216)]}",{'A298': 1.0},A298,,"        public Builder addEntry(@NonNull final StreamDialogDefaultEntry entry) {
            entries.add(entry.toStreamDialogEntry());
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addAllEntries,Builder addAllEntries(),"[223, 226]","{'A298': [(223, 226)]}",{'A298': 1.0},A298,,"        public Builder addAllEntries(@NonNull final StreamDialogDefaultEntry... newEntries) {
            Stream.of(newEntries).forEach(this::addEntry);
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,setAction,"Builder setAction(StreamDialogDefaultEntry,StreamDialogEntry.StreamDialogEntryAction)","[237, 246]","{'A298': [(237, 246)]}",{'A298': 1.0},A298,,"        public Builder setAction(@NonNull final StreamDialogDefaultEntry entry,
                              @NonNull final StreamDialogEntry.StreamDialogEntryAction action) {
            for (int i = 0; i < entries.size(); i++) {
                if (entries.get(i).resource == entry.resource) {
                    entries.set(i, new StreamDialogEntry(entry.resource, action));
                    return this;
                }
            }
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addEnqueueEntriesIfNeeded,Builder addEnqueueEntriesIfNeeded(),"[254, 264]","{'A298': [(254, 254), (257, 258), (260, 264)], 'A331': [(255, 256), (259, 259)]}","{'A298': 0.7272727272727273, 'A331': 0.2727272727272727}",A298,,"        public Builder addEnqueueEntriesIfNeeded() {
            final PlayerHolder holder = PlayerHolder.getInstance();
            if (holder.isPlayQueueReady()) {
                addEntry(StreamDialogDefaultEntry.ENQUEUE);

                if (holder.getQueuePosition() < holder.getQueueSize() - 1) {
                    addEntry(StreamDialogDefaultEntry.ENQUEUE_NEXT);
                }
            }
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addStartHereEntries,Builder addStartHereEntries(),"[272, 278]","{'A298': [(272, 273), (275, 278)], 'A333': [(274, 274)]}","{'A298': 0.8571428571428571, 'A333': 0.14285714285714285}",A298,,"        public Builder addStartHereEntries() {
            addEntry(StreamDialogDefaultEntry.START_HERE_ON_BACKGROUND);
            if (!StreamTypeUtil.isAudio(infoItem.getStreamType())) {
                addEntry(StreamDialogDefaultEntry.START_HERE_ON_POPUP);
            }
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addMarkAsWatchedEntryIfNeeded,Builder addMarkAsWatchedEntryIfNeeded(),"[285, 293]","{'A298': [(285, 288), (290, 293)], 'A333': [(289, 289)]}","{'A298': 0.8888888888888888, 'A333': 0.1111111111111111}",A298,,"        public Builder addMarkAsWatchedEntryIfNeeded() {
            final boolean isWatchHistoryEnabled = PreferenceManager
                    .getDefaultSharedPreferences(context)
                    .getBoolean(context.getString(R.string.enable_watch_history_key), false);
            if (isWatchHistoryEnabled && !StreamTypeUtil.isLiveStream(infoItem.getStreamType())) {
                addEntry(StreamDialogDefaultEntry.MARK_AS_WATCHED);
            }
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addPlayWithKodiEntryIfNeeded,Builder addPlayWithKodiEntryIfNeeded(),"[299, 304]","{'A298': [(299, 304)]}",{'A298': 1.0},A298,,"        public Builder addPlayWithKodiEntryIfNeeded() {
            if (KoreUtils.shouldShowPlayWithKodi(context, infoItem.getServiceId())) {
                addEntry(StreamDialogDefaultEntry.PLAY_WITH_KODI);
            }
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addDefaultBeginningEntries,Builder addDefaultBeginningEntries(),"[313, 317]","{'A298': [(313, 317)]}",{'A298': 1.0},A298,,"        public Builder addDefaultBeginningEntries() {
            addEnqueueEntriesIfNeeded();
            addStartHereEntries();
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,addDefaultEndEntries,Builder addDefaultEndEntries(),"[323, 334]","{'A298': [(323, 324), (326, 334)], 'A334': [(325, 325)]}","{'A298': 0.9166666666666666, 'A334': 0.08333333333333333}",A298,,"        public Builder addDefaultEndEntries() {
            addAllEntries(
                    StreamDialogDefaultEntry.DOWNLOAD,
                    StreamDialogDefaultEntry.APPEND_PLAYLIST,
                    StreamDialogDefaultEntry.SHARE,
                    StreamDialogDefaultEntry.OPEN_IN_BROWSER
            );
            addPlayWithKodiEntryIfNeeded();
            addMarkAsWatchedEntryIfNeeded();
            addEntry(StreamDialogDefaultEntry.SHOW_CHANNEL_DETAILS);
            return this;
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,create,InfoItemDialog create(),"[340, 345]","{'A298': [(340, 345)]}",{'A298': 1.0},A298,,"        public InfoItemDialog create() {
            if (addDefaultEntriesAutomatically) {
                addDefaultEndEntries();
            }
            return new InfoItemDialog(this.activity, this.fragment, this.infoItem, this.entries);
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/InfoItemDialog.java,InfoItemDialog.Builder,reportErrorDuringInitialization,"void reportErrorDuringInitialization(Throwable,InfoItem)","[347, 354]","{'A298': [(347, 354)]}",{'A298': 1.0},A298,,"        public static void reportErrorDuringInitialization(final Throwable throwable,
                                                           final InfoItem item) {
            ErrorUtil.showSnackbar(App.getApp().getBaseContext(), new ErrorInfo(
                    throwable,
                    UserAction.OPEN_INFO_ITEM_DIALOG,
                    ""none"",
                    item.getServiceId()));
        }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/StreamDialogDefaultEntry.java,StreamDialogDefaultEntry,toStreamDialogEntry,StreamDialogEntry toStreamDialogEntry(),"[152, 155]","{'A298': [(152, 155)]}",{'A298': 1.0},A298,,"    @NonNull
    public StreamDialogEntry toStreamDialogEntry() {
        return new StreamDialogEntry(resource, action);
    }
"
org.schabi.newpipe.info_list.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/dialog/StreamDialogEntry.java,StreamDialogEntry,getString,String getString(Context),"[24, 26]","{'A298': [(24, 25)], 'A294': [(26, 26)]}","{'A298': 0.6666666666666666, 'A294': 0.3333333333333333}",A298,,"    public String getString(@NonNull final Context context) {
        return context.getString(resource);
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setOnStreamSelectedListener,void setOnStreamSelectedListener(OnClickGesture<StreamInfoItem>),"[102, 104]","{'A294': [(102, 102)], 'A301': [(103, 104)]}","{'A294': 0.3333333333333333, 'A301': 0.6666666666666666}",A301,,"    public void setOnStreamSelectedListener(final OnClickGesture<StreamInfoItem> listener) {
        infoItemBuilder.setOnStreamSelectedListener(listener);
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setOnChannelSelectedListener,void setOnChannelSelectedListener(OnClickGesture<ChannelInfoItem>),"[106, 108]","{'A302': [(108, 108)], 'A294': [(106, 106)], 'A301': [(107, 107)]}","{'A302': 0.3333333333333333, 'A294': 0.3333333333333333, 'A301': 0.3333333333333333}",A302,,"    public void setOnChannelSelectedListener(final OnClickGesture<ChannelInfoItem> listener) {
        infoItemBuilder.setOnChannelSelectedListener(listener);
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setOnPlaylistSelectedListener,void setOnPlaylistSelectedListener(OnClickGesture<PlaylistInfoItem>),"[110, 112]","{'A294': [(110, 110)], 'A301': [(111, 112)]}","{'A294': 0.3333333333333333, 'A301': 0.6666666666666666}",A301,,"    public void setOnPlaylistSelectedListener(final OnClickGesture<PlaylistInfoItem> listener) {
        infoItemBuilder.setOnPlaylistSelectedListener(listener);
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setOnCommentsSelectedListener,void setOnCommentsSelectedListener(OnClickGesture<CommentsInfoItem>),"[114, 116]","{'A294': [(114, 114)], 'A289': [(115, 116)]}","{'A294': 0.3333333333333333, 'A289': 0.6666666666666666}",A289,,"    public void setOnCommentsSelectedListener(final OnClickGesture<CommentsInfoItem> listener) {
        infoItemBuilder.setOnCommentsSelectedListener(listener);
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setUseMiniVariant,void setUseMiniVariant(boolean),"[118, 120]","{'A302': [(120, 120)], 'A294': [(118, 118)], 'A301': [(119, 119)]}","{'A302': 0.3333333333333333, 'A294': 0.3333333333333333, 'A301': 0.3333333333333333}",A302,,"    public void setUseMiniVariant(final boolean useMiniVariant) {
        this.useMiniVariant = useMiniVariant;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setItemViewMode,void setItemViewMode(ItemViewMode),"[122, 124]","{'A339': [(122, 123)], 'A341': [(124, 124)]}","{'A339': 0.6666666666666666, 'A341': 0.3333333333333333}",A339,,"    public void setItemViewMode(final ItemViewMode itemViewMode) {
        this.itemMode = itemViewMode;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,addInfoItemList,void addInfoItemList(List<? extends InfoItem>),"[126, 155]","{'A302': [(154, 155)], 'A305': [(127, 128)], 'A294': [(130, 133), (135, 135), (138, 140), (142, 143), (147, 147), (150, 153)], 'A300': [(141, 141), (146, 146)], 'A301': [(126, 126), (134, 134), (137, 137), (145, 145), (149, 149)], 'A340': [(129, 129), (136, 136), (144, 144), (148, 148)]}","{'A302': 0.06666666666666667, 'A305': 0.06666666666666667, 'A294': 0.5, 'A300': 0.06666666666666667, 'A301': 0.16666666666666666, 'A340': 0.13333333333333333}",A294,,"    public void addInfoItemList(@Nullable final List<? extends InfoItem> data) {
        if (data == null) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, ""addInfoItemList() before > infoItemList.size() = ""
                    + infoItemList.size() + "", data.size() = "" + data.size());
        }

        final int offsetStart = sizeConsideringHeaderOffset();
        infoItemList.addAll(data);

        if (DEBUG) {
            Log.d(TAG, ""addInfoItemList() after > offsetStart = "" + offsetStart + "", ""
                    + ""infoItemList.size() = "" + infoItemList.size() + "", ""
                    + ""hasHeader = "" + hasHeader() + "", ""
                    + ""showFooter = "" + showFooter);
        }
        notifyItemRangeInserted(offsetStart, data.size());

        if (showFooter) {
            final int footerNow = sizeConsideringHeaderOffset();
            notifyItemMoved(offsetStart, footerNow);

            if (DEBUG) {
                Log.d(TAG, ""addInfoItemList() footer from "" + offsetStart
                        + "" to "" + footerNow);
            }
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,clearStreamItemList,void clearStreamItemList(),"[157, 163]","{'A302': [(161, 163)], 'A301': [(157, 158)], 'A324': [(159, 160)]}","{'A302': 0.42857142857142855, 'A301': 0.2857142857142857, 'A324': 0.2857142857142857}",A302,,"    public void clearStreamItemList() {
        if (infoItemList.isEmpty()) {
            return;
        }
        infoItemList.clear();
        notifyDataSetChanged();
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,setHeaderSupplier,void setHeaderSupplier(Supplier<View>),"[165, 171]","{'A302': [(171, 171)], 'A294': [(168, 170)], 'A300': [(165, 167)]}","{'A302': 0.14285714285714285, 'A294': 0.42857142857142855, 'A300': 0.42857142857142855}",A294,,"    public void setHeaderSupplier(@Nullable final Supplier<View> headerSupplier) {
        final boolean changed = headerSupplier != this.headerSupplier;
        this.headerSupplier = headerSupplier;
        if (changed) {
            notifyDataSetChanged();
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,hasHeader,boolean hasHeader(),"[173, 175]","{'A300': [(173, 174)], 'A301': [(175, 175)]}","{'A300': 0.6666666666666666, 'A301': 0.3333333333333333}",A300,,"    protected boolean hasHeader() {
        return this.headerSupplier != null;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,showFooter,void showFooter(boolean),"[177, 191]","{'A294': [(177, 183), (186, 190)], 'A301': [(184, 185), (191, 191)]}","{'A294': 0.8, 'A301': 0.2}",A294,,"    public void showFooter(final boolean show) {
        if (DEBUG) {
            Log.d(TAG, ""showFooter() called with: show = ["" + show + ""]"");
        }
        if (show == showFooter) {
            return;
        }

        showFooter = show;
        if (show) {
            notifyItemInserted(sizeConsideringHeaderOffset());
        } else {
            notifyItemRemoved(sizeConsideringHeaderOffset());
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,sizeConsideringHeaderOffset,int sizeConsideringHeaderOffset(),"[193, 199]","{'A302': [(199, 199)], 'A294': [(195, 197)], 'A300': [(194, 194)], 'A301': [(193, 193), (198, 198)]}","{'A302': 0.14285714285714285, 'A294': 0.42857142857142855, 'A300': 0.14285714285714285, 'A301': 0.2857142857142857}",A294,,"    private int sizeConsideringHeaderOffset() {
        final int i = infoItemList.size() + (hasHeader() ? 1 : 0);
        if (DEBUG) {
            Log.d(TAG, ""sizeConsideringHeaderOffset() called → "" + i);
        }
        return i;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,getItemsList,List<InfoItem> getItemsList(),"[201, 203]","{'A300': [(201, 201)], 'A301': [(202, 203)]}","{'A300': 0.3333333333333333, 'A301': 0.6666666666666666}",A301,,"    public List<InfoItem> getItemsList() {
        return infoItemList;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,getItemCount,int getItemCount(),"[205, 222]","{'A302': [(205, 206), (222, 222)], 'A294': [(209, 210), (212, 213), (216, 217), (219, 219)], 'A300': [(208, 208), (211, 211), (218, 218)], 'A301': [(207, 207), (214, 215), (220, 221)]}","{'A302': 0.16666666666666666, 'A294': 0.3888888888888889, 'A300': 0.16666666666666666, 'A301': 0.2777777777777778}",A294,,"    @Override
    public int getItemCount() {
        int count = infoItemList.size();
        if (hasHeader()) {
            count++;
        }
        if (showFooter) {
            count++;
        }

        if (DEBUG) {
            Log.d(TAG, ""getItemCount() called with: ""
                    + ""count = "" + count + "", infoItemList.size() = "" + infoItemList.size() + "", ""
                    + ""hasHeader = "" + hasHeader() + "", ""
                    + ""showFooter = "" + showFooter);
        }
        return count;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,getItemViewType,int getItemViewType(int),"[224, 276]","{'A302': [(225, 226), (234, 235), (238, 238), (240, 241), (251, 251), (261, 261), (273, 276)], 'A305': [(272, 272)], 'A294': [(227, 229)], 'A300': [(224, 224), (231, 231), (233, 233), (236, 236)], 'A289': [(271, 271)], 'A301': [(230, 230), (232, 232), (237, 237)], 'A339': [(242, 250), (252, 260), (262, 270)], 'A310': [(239, 239)]}","{'A302': 0.24528301886792453, 'A305': 0.018867924528301886, 'A294': 0.05660377358490566, 'A300': 0.07547169811320754, 'A289': 0.018867924528301886, 'A301': 0.05660377358490566, 'A339': 0.5094339622641509, 'A310': 0.018867924528301886}",A339,,"    @SuppressWarnings(""FinalParameters"")
    @Override
    public int getItemViewType(int position) {
        if (DEBUG) {
            Log.d(TAG, ""getItemViewType() called with: position = ["" + position + ""]"");
        }

        if (hasHeader() && position == 0) {
            return HEADER_TYPE;
        } else if (hasHeader()) {
            position--;
        }
        if (position == infoItemList.size() && showFooter) {
            return FOOTER_TYPE;
        }
        final InfoItem item = infoItemList.get(position);
        switch (item.getInfoType()) {
            case STREAM:
                if (itemMode == ItemViewMode.CARD) {
                    return CARD_STREAM_HOLDER_TYPE;
                } else if (itemMode == ItemViewMode.GRID) {
                    return GRID_STREAM_HOLDER_TYPE;
                } else if (useMiniVariant) {
                    return MINI_STREAM_HOLDER_TYPE;
                } else {
                    return STREAM_HOLDER_TYPE;
                }
            case CHANNEL:
                if (itemMode == ItemViewMode.CARD) {
                    return CARD_CHANNEL_HOLDER_TYPE;
                } else if (itemMode == ItemViewMode.GRID) {
                    return GRID_CHANNEL_HOLDER_TYPE;
                } else if (useMiniVariant) {
                    return MINI_CHANNEL_HOLDER_TYPE;
                } else {
                    return CHANNEL_HOLDER_TYPE;
                }
            case PLAYLIST:
                if (itemMode == ItemViewMode.CARD) {
                    return CARD_PLAYLIST_HOLDER_TYPE;
                } else if (itemMode == ItemViewMode.GRID) {
                    return GRID_PLAYLIST_HOLDER_TYPE;
                } else if (useMiniVariant) {
                    return MINI_PLAYLIST_HOLDER_TYPE;
                } else {
                    return PLAYLIST_HOLDER_TYPE;
                }
            case COMMENT:
                return COMMENT_HOLDER_TYPE;
            default:
                return -1;
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,onCreateViewHolder,"RecyclerView.ViewHolder onCreateViewHolder(ViewGroup,int)","[278, 326]","{'A302': [(279, 279), (323, 323), (325, 326)], 'A305': [(322, 322)], 'A294': [(280, 285)], 'A300': [(287, 289), (291, 291), (293, 296)], 'A289': [(321, 321)], 'A301': [(286, 286), (290, 290), (292, 292), (297, 300), (305, 308), (315, 316)], 'A339': [(303, 304), (309, 310), (319, 320)], 'A340': [(278, 278)], 'A341': [(301, 302), (311, 312), (317, 318)], 'A310': [(313, 314)], 'A342': [(324, 324)]}","{'A302': 0.08163265306122448, 'A305': 0.02040816326530612, 'A294': 0.12244897959183673, 'A300': 0.16326530612244897, 'A289': 0.02040816326530612, 'A301': 0.2653061224489796, 'A339': 0.12244897959183673, 'A340': 0.02040816326530612, 'A341': 0.12244897959183673, 'A310': 0.04081632653061224, 'A342': 0.02040816326530612}",A301,,"    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                      final int type) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateViewHolder() called with: ""
                    + ""parent = ["" + parent + ""], type = ["" + type + ""]"");
        }
        switch (type) {
            // #4475 and #3368
            // Always create a new instance otherwise the same instance
            // is sometimes reused which causes a crash
            case HEADER_TYPE:
                return new HFHolder(headerSupplier.get());
            case FOOTER_TYPE:
                return new HFHolder(PignateFooterBinding
                        .inflate(layoutInflater, parent, false)
                        .getRoot()
                );
            case MINI_STREAM_HOLDER_TYPE:
                return new StreamMiniInfoItemHolder(infoItemBuilder, parent);
            case STREAM_HOLDER_TYPE:
                return new StreamInfoItemHolder(infoItemBuilder, parent);
            case GRID_STREAM_HOLDER_TYPE:
                return new StreamGridInfoItemHolder(infoItemBuilder, parent);
            case CARD_STREAM_HOLDER_TYPE:
                return new StreamCardInfoItemHolder(infoItemBuilder, parent);
            case MINI_CHANNEL_HOLDER_TYPE:
                return new ChannelMiniInfoItemHolder(infoItemBuilder, parent);
            case CHANNEL_HOLDER_TYPE:
                return new ChannelInfoItemHolder(infoItemBuilder, parent);
            case CARD_CHANNEL_HOLDER_TYPE:
                return new ChannelCardInfoItemHolder(infoItemBuilder, parent);
            case GRID_CHANNEL_HOLDER_TYPE:
                return new ChannelGridInfoItemHolder(infoItemBuilder, parent);
            case MINI_PLAYLIST_HOLDER_TYPE:
                return new PlaylistMiniInfoItemHolder(infoItemBuilder, parent);
            case PLAYLIST_HOLDER_TYPE:
                return new PlaylistInfoItemHolder(infoItemBuilder, parent);
            case GRID_PLAYLIST_HOLDER_TYPE:
                return new PlaylistGridInfoItemHolder(infoItemBuilder, parent);
            case CARD_PLAYLIST_HOLDER_TYPE:
                return new PlaylistCardInfoItemHolder(infoItemBuilder, parent);
            case COMMENT_HOLDER_TYPE:
                return new CommentInfoItemHolder(infoItemBuilder, parent);
            default:
                return new FallbackViewHolder(new View(parent.getContext()));
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,onBindViewHolder,"void onBindViewHolder(RecyclerView.ViewHolder,int)","[328, 341]","{'A302': [(328, 328), (340, 341)], 'A294': [(331, 335)], 'A300': [(329, 330), (337, 339)], 'A301': [(336, 336)]}","{'A302': 0.21428571428571427, 'A294': 0.35714285714285715, 'A300': 0.35714285714285715, 'A301': 0.07142857142857142}",A294,,"    @Override
    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder holder,
                                 final int position) {
        if (DEBUG) {
            Log.d(TAG, ""onBindViewHolder() called with: ""
                    + ""holder = ["" + holder.getClass().getSimpleName() + ""], ""
                    + ""position = ["" + position + ""]"");
        }
        if (holder instanceof InfoItemHolder) {
            ((InfoItemHolder) holder).updateFromItem(
                    // If header is present, offset the items by -1
                    infoItemList.get(hasHeader() ? position - 1 : position), recordManager);
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,getSpanSizeLookup,GridLayoutManager.SpanSizeLookup getSpanSizeLookup(int),"[343, 351]","{'A294': [(346, 346)], 'A341': [(343, 345), (347, 351)]}","{'A294': 0.1111111111111111, 'A341': 0.8888888888888888}",A341,,"    public GridLayoutManager.SpanSizeLookup getSpanSizeLookup(final int spanCount) {
        return new GridLayoutManager.SpanSizeLookup() {
            @Override
            public int getSpanSize(final int position) {
                final int type = getItemViewType(position);
                return type == HEADER_TYPE || type == FOOTER_TYPE ? spanCount : 1;
            }
        };
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoListAdapter.java,InfoListAdapter,getSpanSize,int getSpanSize(int),"[345, 349]","{'A294': [(346, 346)], 'A341': [(345, 345), (347, 349)]}","{'A294': 0.2, 'A341': 0.8}",A341,,"            @Override
            public int getSpanSize(final int position) {
                final int type = getItemViewType(position);
                return type == HEADER_TYPE || type == FOOTER_TYPE ? spanCount : 1;
            }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,buildView,"View buildView(ViewGroup,InfoItem,HistoryRecordManager)","[61, 64]","{'A305': [(61, 64)]}",{'A305': 1.0},A305,,"    public View buildView(@NonNull final ViewGroup parent, @NonNull final InfoItem infoItem,
                          final HistoryRecordManager historyRecordManager) {
        return buildView(parent, infoItem, historyRecordManager, false);
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,buildView,"View buildView(ViewGroup,InfoItem,HistoryRecordManager,boolean)","[66, 73]","{'A305': [(66, 73)]}",{'A305': 1.0},A305,,"    public View buildView(@NonNull final ViewGroup parent, @NonNull final InfoItem infoItem,
                          final HistoryRecordManager historyRecordManager,
                          final boolean useMiniVariant) {
        final InfoItemHolder holder =
                holderFromInfoType(parent, infoItem.getInfoType(), useMiniVariant);
        holder.updateFromItem(infoItem, historyRecordManager);
        return holder.itemView;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,holderFromInfoType,"InfoItemHolder holderFromInfoType(ViewGroup,InfoItem.InfoType,boolean)","[75, 93]","{'A305': [(75, 93)]}",{'A305': 1.0},A305,,"    private InfoItemHolder holderFromInfoType(@NonNull final ViewGroup parent,
                                              @NonNull final InfoItem.InfoType infoType,
                                              final boolean useMiniVariant) {
        switch (infoType) {
            case STREAM:
                return useMiniVariant ? new StreamMiniInfoItemHolder(this, parent)
                        : new StreamInfoItemHolder(this, parent);
            case CHANNEL:
                return useMiniVariant ? new ChannelMiniInfoItemHolder(this, parent)
                        : new ChannelInfoItemHolder(this, parent);
            case PLAYLIST:
                return useMiniVariant ? new PlaylistMiniInfoItemHolder(this, parent)
                        : new PlaylistInfoItemHolder(this, parent);
            case COMMENT:
                return new CommentInfoItemHolder(this, parent);
            default:
                throw new RuntimeException(""InfoType not expected = "" + infoType.name());
        }
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,getContext,Context getContext(),"[95, 97]","{'A301': [(95, 96)], 'A324': [(97, 97)]}","{'A301': 0.6666666666666666, 'A324': 0.3333333333333333}",A301,,"    public Context getContext() {
        return context;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,getOnStreamSelectedListener,OnClickGesture<StreamInfoItem> getOnStreamSelectedListener(),"[99, 101]","{'A302': [(101, 101)], 'A301': [(100, 100)], 'A310': [(99, 99)]}","{'A302': 0.3333333333333333, 'A301': 0.3333333333333333, 'A310': 0.3333333333333333}",A302,,"    public OnClickGesture<StreamInfoItem> getOnStreamSelectedListener() {
        return onStreamSelectedListener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,setOnStreamSelectedListener,void setOnStreamSelectedListener(OnClickGesture<StreamInfoItem>),"[103, 105]","{'A301': [(104, 104)], 'A294': [(103, 103)], 'A324': [(105, 105)]}","{'A301': 0.3333333333333333, 'A294': 0.3333333333333333, 'A324': 0.3333333333333333}",A301,,"    public void setOnStreamSelectedListener(final OnClickGesture<StreamInfoItem> listener) {
        this.onStreamSelectedListener = listener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,getOnChannelSelectedListener,OnClickGesture<ChannelInfoItem> getOnChannelSelectedListener(),"[107, 109]","{'A302': [(109, 109)], 'A301': [(108, 108)], 'A310': [(107, 107)]}","{'A302': 0.3333333333333333, 'A301': 0.3333333333333333, 'A310': 0.3333333333333333}",A302,,"    public OnClickGesture<ChannelInfoItem> getOnChannelSelectedListener() {
        return onChannelSelectedListener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,setOnChannelSelectedListener,void setOnChannelSelectedListener(OnClickGesture<ChannelInfoItem>),"[111, 113]","{'A302': [(113, 113)], 'A301': [(112, 112)], 'A294': [(111, 111)]}","{'A302': 0.3333333333333333, 'A301': 0.3333333333333333, 'A294': 0.3333333333333333}",A302,,"    public void setOnChannelSelectedListener(final OnClickGesture<ChannelInfoItem> listener) {
        this.onChannelSelectedListener = listener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,getOnPlaylistSelectedListener,OnClickGesture<PlaylistInfoItem> getOnPlaylistSelectedListener(),"[115, 117]","{'A302': [(117, 117)], 'A301': [(116, 116)], 'A310': [(115, 115)]}","{'A302': 0.3333333333333333, 'A301': 0.3333333333333333, 'A310': 0.3333333333333333}",A302,,"    public OnClickGesture<PlaylistInfoItem> getOnPlaylistSelectedListener() {
        return onPlaylistSelectedListener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,setOnPlaylistSelectedListener,void setOnPlaylistSelectedListener(OnClickGesture<PlaylistInfoItem>),"[119, 121]","{'A302': [(121, 121)], 'A301': [(120, 120)], 'A294': [(119, 119)]}","{'A302': 0.3333333333333333, 'A301': 0.3333333333333333, 'A294': 0.3333333333333333}",A302,,"    public void setOnPlaylistSelectedListener(final OnClickGesture<PlaylistInfoItem> listener) {
        this.onPlaylistSelectedListener = listener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,getOnCommentsSelectedListener,OnClickGesture<CommentsInfoItem> getOnCommentsSelectedListener(),"[123, 125]","{'A289': [(123, 125)]}",{'A289': 1.0},A289,,"    public OnClickGesture<CommentsInfoItem> getOnCommentsSelectedListener() {
        return onCommentsSelectedListener;
    }
"
org.schabi.newpipe.info_list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/InfoItemBuilder.java,InfoItemBuilder,setOnCommentsSelectedListener,void setOnCommentsSelectedListener(OnClickGesture<CommentsInfoItem>),"[127, 130]","{'A289': [(129, 130)], 'A294': [(127, 128)]}","{'A289': 0.5, 'A294': 0.5}",A289,,"    public void setOnCommentsSelectedListener(
            final OnClickGesture<CommentsInfoItem> onCommentsSelectedListener) {
        this.onCommentsSelectedListener = onCommentsSelectedListener;
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/ChannelMiniInfoItemHolder.java,ChannelMiniInfoItemHolder,updateFromItem,"void updateFromItem(InfoItem,HistoryRecordManager)","[40, 88]","{'A301': [(40, 40), (46, 47), (58, 58), (60, 60), (64, 65), (88, 88)], 'A315': [(50, 57), (73, 80), (86, 87)], 'A305': [(59, 59)], 'A294': [(41, 45)], 'A324': [(48, 48)], 'A339': [(49, 49), (81, 85)], 'A302': [(61, 63)], 'A306': [(66, 72)]}","{'A301': 0.16326530612244897, 'A315': 0.3673469387755102, 'A305': 0.02040816326530612, 'A294': 0.10204081632653061, 'A324': 0.02040816326530612, 'A339': 0.12244897959183673, 'A302': 0.061224489795918366, 'A306': 0.14285714285714285}",A315,,"    @Override
    public void updateFromItem(final InfoItem infoItem,
                               final HistoryRecordManager historyRecordManager) {
        if (!(infoItem instanceof ChannelInfoItem)) {
            return;
        }
        final ChannelInfoItem item = (ChannelInfoItem) infoItem;

        itemTitleView.setText(item.getName());
        itemTitleView.setSelected(true);

        final String detailLine = getDetailLine(item);
        if (detailLine == null) {
            itemAdditionalDetailView.setVisibility(View.GONE);
        } else {
            itemAdditionalDetailView.setVisibility(View.VISIBLE);
            itemAdditionalDetailView.setText(getDetailLine(item));
        }

        PicassoHelper.loadAvatar(item.getThumbnails()).into(itemThumbnailView);

        itemView.setOnClickListener(view -> {
            if (itemBuilder.getOnChannelSelectedListener() != null) {
                itemBuilder.getOnChannelSelectedListener().selected(item);
            }
        });

        itemView.setOnLongClickListener(view -> {
            if (itemBuilder.getOnChannelSelectedListener() != null) {
                itemBuilder.getOnChannelSelectedListener().held(item);
            }
            return true;
        });

        if (itemChannelDescriptionView != null) {
            // itemChannelDescriptionView will be null in the mini variant
            if (Utils.isBlank(item.getDescription())) {
                itemChannelDescriptionView.setVisibility(View.GONE);
            } else {
                itemChannelDescriptionView.setVisibility(View.VISIBLE);
                itemChannelDescriptionView.setText(item.getDescription());
                // setMaxLines utilize the line space for description if the additional details
                // (sub / video count) are not present.
                // Case1: 2 lines of description + 1 line additional details
                // Case2: 3 lines of description (additionalDetails is GONE)
                itemChannelDescriptionView.setMaxLines(getDescriptionMaxLineCount(detailLine));
            }
        }
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/ChannelMiniInfoItemHolder.java,ChannelMiniInfoItemHolder,getDescriptionMaxLineCount,int getDescriptionMaxLineCount(String),"[95, 97]","{'A339': [(95, 97)]}",{'A339': 1.0},A339,,"    protected int getDescriptionMaxLineCount(@Nullable final String content) {
        return content == null ? 3 : 2;
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/ChannelMiniInfoItemHolder.java,ChannelMiniInfoItemHolder,getDetailLine,String getDetailLine(ChannelInfoItem),"[99, 116]","{'A301': [(115, 116)], 'A315': [(99, 111), (113, 114)], 'A302': [(112, 112)]}","{'A301': 0.1111111111111111, 'A315': 0.8333333333333334, 'A302': 0.05555555555555555}",A315,,"    @Nullable
    private String getDetailLine(final ChannelInfoItem item) {
        if (item.getStreamCount() >= 0 && item.getSubscriberCount() >= 0) {
            return Localization.concatenateStrings(
                    Localization.shortSubscriberCount(itemBuilder.getContext(),
                            item.getSubscriberCount()),
                    Localization.localizeStreamCount(itemBuilder.getContext(),
                            item.getStreamCount()));
        } else if (item.getStreamCount() >= 0) {
            return Localization.localizeStreamCount(itemBuilder.getContext(),
                    item.getStreamCount());
        } else if (item.getSubscriberCount() >= 0) {
            return Localization.shortSubscriberCount(itemBuilder.getContext(),
                    item.getSubscriberCount());
        } else {
            return null;
        }
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/StreamMiniInfoItemHolder.java,StreamMiniInfoItemHolder,updateFromItem,"void updateFromItem(InfoItem,HistoryRecordManager)","[47, 112]","{'A301': [(47, 47), (53, 54), (57, 57), (62, 62), (79, 79), (82, 82), (84, 85), (87, 89), (91, 91), (95, 96)], 'A294': [(48, 52), (73, 73)], 'A340': [(71, 72), (75, 77), (83, 83), (86, 86)], 'A305': [(63, 63), (70, 70), (74, 74), (90, 90)], 'A343': [(64, 69)], 'A333': [(78, 78), (103, 104)], 'A324': [(55, 55)], 'A302': [(56, 56), (58, 61), (80, 81), (98, 98)], 'A310': [(92, 94), (97, 97), (99, 102), (105, 112)]}","{'A301': 0.22727272727272727, 'A294': 0.09090909090909091, 'A340': 0.10606060606060606, 'A305': 0.06060606060606061, 'A343': 0.09090909090909091, 'A333': 0.045454545454545456, 'A324': 0.015151515151515152, 'A302': 0.12121212121212122, 'A310': 0.24242424242424243}",A310,,"    @Override
    public void updateFromItem(final InfoItem infoItem,
                               final HistoryRecordManager historyRecordManager) {
        if (!(infoItem instanceof StreamInfoItem)) {
            return;
        }
        final StreamInfoItem item = (StreamInfoItem) infoItem;

        itemVideoTitleView.setText(item.getName());
        itemUploaderView.setText(item.getUploaderName());

        if (item.getDuration() > 0) {
            itemDurationView.setText(Localization.getDurationString(item.getDuration()));
            itemDurationView.setBackgroundColor(ContextCompat.getColor(itemBuilder.getContext(),
                    R.color.duration_background_color));
            itemDurationView.setVisibility(View.VISIBLE);

            StreamStateEntity state2 = null;
            if (DependentPreferenceHelper
                    .getPositionsInListsEnabled(itemProgressView.getContext())) {
                state2 = historyRecordManager.loadStreamState(infoItem)
                        .blockingGet()[0];
            }
            if (state2 != null) {
                itemProgressView.setVisibility(View.VISIBLE);
                itemProgressView.setMax((int) item.getDuration());
                itemProgressView.setProgress((int) TimeUnit.MILLISECONDS
                        .toSeconds(state2.getProgressMillis()));
            } else {
                itemProgressView.setVisibility(View.GONE);
            }
        } else if (StreamTypeUtil.isLiveStream(item.getStreamType())) {
            itemDurationView.setText(R.string.duration_live);
            itemDurationView.setBackgroundColor(ContextCompat.getColor(itemBuilder.getContext(),
                    R.color.live_duration_background_color));
            itemDurationView.setVisibility(View.VISIBLE);
            itemProgressView.setVisibility(View.GONE);
        } else {
            itemDurationView.setVisibility(View.GONE);
            itemProgressView.setVisibility(View.GONE);
        }

        // Default thumbnail is shown on error, while loading and if the url is empty
        PicassoHelper.loadThumbnail(item.getThumbnails()).into(itemThumbnailView);

        itemView.setOnClickListener(view -> {
            if (itemBuilder.getOnStreamSelectedListener() != null) {
                itemBuilder.getOnStreamSelectedListener().selected(item);
            }
        });

        switch (item.getStreamType()) {
            case AUDIO_STREAM:
            case VIDEO_STREAM:
            case LIVE_STREAM:
            case AUDIO_LIVE_STREAM:
            case POST_LIVE_STREAM:
            case POST_LIVE_AUDIO_STREAM:
                enableLongClick(item);
                break;
            case NONE:
            default:
                disableLongClick();
                break;
        }
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/StreamMiniInfoItemHolder.java,StreamMiniInfoItemHolder,updateState,"void updateState(InfoItem,HistoryRecordManager)","[114, 139]","{'A294': [(115, 116), (125, 125), (129, 129), (132, 132)], 'A340': [(114, 114), (117, 117), (127, 128), (131, 131), (135, 136), (138, 139)], 'A295': [(134, 134), (137, 137)], 'A305': [(118, 118), (130, 130), (133, 133)], 'A343': [(119, 124)], 'A333': [(126, 126)]}","{'A294': 0.19230769230769232, 'A340': 0.34615384615384615, 'A295': 0.07692307692307693, 'A305': 0.11538461538461539, 'A343': 0.23076923076923078, 'A333': 0.038461538461538464}",A340,,"    @Override
    public void updateState(final InfoItem infoItem,
                            final HistoryRecordManager historyRecordManager) {
        final StreamInfoItem item = (StreamInfoItem) infoItem;

        StreamStateEntity state = null;
        if (DependentPreferenceHelper.getPositionsInListsEnabled(itemProgressView.getContext())) {
            state = historyRecordManager
                    .loadStreamState(infoItem)
                    .blockingGet()[0];
        }
        if (state != null && item.getDuration() > 0
                && !StreamTypeUtil.isLiveStream(item.getStreamType())) {
            itemProgressView.setMax((int) item.getDuration());
            if (itemProgressView.getVisibility() == View.VISIBLE) {
                itemProgressView.setProgressAnimated((int) TimeUnit.MILLISECONDS
                        .toSeconds(state.getProgressMillis()));
            } else {
                itemProgressView.setProgress((int) TimeUnit.MILLISECONDS
                        .toSeconds(state.getProgressMillis()));
                ViewUtils.animate(itemProgressView, true, 500);
            }
        } else if (itemProgressView.getVisibility() == View.VISIBLE) {
            ViewUtils.animate(itemProgressView, false, 500);
        }
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/StreamMiniInfoItemHolder.java,StreamMiniInfoItemHolder,enableLongClick,void enableLongClick(StreamInfoItem),"[141, 149]","{'A310': [(141, 149)]}",{'A310': 1.0},A310,,"    private void enableLongClick(final StreamInfoItem item) {
        itemView.setLongClickable(true);
        itemView.setOnLongClickListener(view -> {
            if (itemBuilder.getOnStreamSelectedListener() != null) {
                itemBuilder.getOnStreamSelectedListener().held(item);
            }
            return true;
        });
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/StreamMiniInfoItemHolder.java,StreamMiniInfoItemHolder,disableLongClick,void disableLongClick(),"[151, 154]","{'A301': [(154, 154)], 'A310': [(151, 153)]}","{'A301': 0.25, 'A310': 0.75}",A310,,"    private void disableLongClick() {
        itemView.setLongClickable(false);
        itemView.setOnLongClickListener(null);
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,updateFromItem,"void updateFromItem(InfoItem,HistoryRecordManager)","[82, 175]","{'A289': [(82, 82), (88, 89), (119, 119), (134, 134), (156, 157), (159, 162)], 'A305': [(90, 93), (102, 102), (104, 105), (112, 112), (114, 118), (120, 129), (135, 135)], 'A295': [(136, 155)], 'A344': [(168, 171)], 'A294': [(83, 87), (164, 164), (166, 166), (173, 173), (175, 175)], 'A345': [(94, 101), (103, 103), (113, 113)], 'A298': [(130, 133), (158, 158)], 'A346': [(106, 111)], 'A347': [(163, 163), (172, 172), (174, 174)], 'A290': [(165, 165)], 'A348': [(167, 167)]}","{'A289': 0.11702127659574468, 'A305': 0.2553191489361702, 'A295': 0.2127659574468085, 'A344': 0.0425531914893617, 'A294': 0.09574468085106383, 'A345': 0.10638297872340426, 'A298': 0.05319148936170213, 'A346': 0.06382978723404255, 'A347': 0.031914893617021274, 'A290': 0.010638297872340425, 'A348': 0.010638297872340425}",A305,,"    @Override
    public void updateFromItem(final InfoItem infoItem,
                               final HistoryRecordManager historyRecordManager) {
        if (!(infoItem instanceof CommentsInfoItem)) {
            return;
        }
        final CommentsInfoItem item = (CommentsInfoItem) infoItem;


        // load the author avatar
        PicassoHelper.loadAvatar(item.getUploaderAvatars()).into(itemThumbnailView);
        if (ImageStrategy.shouldLoadImages()) {
            itemThumbnailView.setVisibility(View.VISIBLE);
            itemRoot.setPadding(commentVerticalPadding, commentVerticalPadding,
                    commentVerticalPadding, commentVerticalPadding);
        } else {
            itemThumbnailView.setVisibility(View.GONE);
            itemRoot.setPadding(commentHorizontalPadding, commentVerticalPadding,
                    commentHorizontalPadding, commentVerticalPadding);
        }
        itemThumbnailView.setOnClickListener(view -> openCommentAuthor(item));

        // setup the top row, with pinned icon, author name and comment date
        itemPinnedView.setVisibility(item.isPinned() ? View.VISIBLE : View.GONE);
        final String uploaderName = Localization.localizeUserName(item.getUploaderName());
        itemTitleView.setText(Localization.concatenateStrings(
                uploaderName,
                Localization.relativeTimeOrTextual(
                        itemBuilder.getContext(),
                        item.getUploadDate(),
                        item.getTextualUploadDate())));

        // setup bottom row, with likes, heart and replies button
        itemLikesCountView.setText(
                Localization.likeCount(itemBuilder.getContext(), item.getLikeCount()));

        itemHeartView.setVisibility(item.isHeartedByUploader() ? View.VISIBLE : View.GONE);

        final boolean hasReplies = item.getReplies() != null;
        repliesButton.setOnClickListener(hasReplies ? v -> openCommentReplies(item) : null);
        repliesButton.setVisibility(hasReplies ? View.VISIBLE : View.GONE);
        repliesButton.setText(hasReplies
                ? Localization.replyCount(itemBuilder.getContext(), item.getReplyCount()) : """");
        ((RelativeLayout.LayoutParams) itemThumbsUpView.getLayoutParams()).topMargin =
                hasReplies ? 0 : DeviceUtils.dpToPx(6, itemBuilder.getContext());


        // setup comment content and click listeners to expand/ellipsize it
        textEllipsizer.setStreamingService(getServiceById(item.getServiceId()));
        textEllipsizer.setStreamUrl(item.getUrl());
        textEllipsizer.setContent(item.getCommentText());
        textEllipsizer.ellipsize();

        //noinspection ClickableViewAccessibility
        itemContentView.setOnTouchListener((v, event) -> {
            final CharSequence text = itemContentView.getText();
            if (text instanceof Spanned buffer) {
                final int action = event.getAction();

                if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) {
                    final int offset = getOffsetForHorizontalLine(itemContentView, event);
                    final var links = buffer.getSpans(offset, offset, ClickableSpan.class);

                    if (links.length != 0) {
                        if (action == MotionEvent.ACTION_UP) {
                            links[0].onClick(itemContentView);
                        }
                        // we handle events that intersect links, so return true
                        return true;
                    }
                }
            }
            return false;
        });

        itemView.setOnClickListener(view -> {
            textEllipsizer.toggle();
            if (itemBuilder.getOnCommentsSelectedListener() != null) {
                itemBuilder.getOnCommentsSelectedListener().selected(item);
            }
        });

        itemView.setOnLongClickListener(view -> {
            if (DeviceUtils.isTv(itemBuilder.getContext())) {
                openCommentAuthor(item);
            } else {
                final CharSequence text = itemContentView.getText();
                if (text != null) {
                    ShareUtils.copyToClipboard(itemBuilder.getContext(), text.toString());
                }
            }
            return true;
        });
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,openCommentAuthor,void openCommentAuthor(CommentsInfoItem),"[177, 180]","{'A305': [(177, 180)]}",{'A305': 1.0},A305,,"    private void openCommentAuthor(@NonNull final CommentsInfoItem item) {
        NavigationHelper.openCommentAuthorIfPresent((FragmentActivity) itemBuilder.getContext(),
                item);
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,openCommentReplies,void openCommentReplies(CommentsInfoItem),"[182, 185]","{'A289': [(185, 185)], 'A305': [(182, 184)]}","{'A289': 0.25, 'A305': 0.75}",A305,,"    private void openCommentReplies(@NonNull final CommentsInfoItem item) {
        NavigationHelper.openCommentRepliesFragment((FragmentActivity) itemBuilder.getContext(),
                item);
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,allowLinkFocus,void allowLinkFocus(),"[187, 189]","{'A292': [(187, 187)], 'A297': [(188, 189)]}","{'A292': 0.3333333333333333, 'A297': 0.6666666666666666}",A297,,"    private void allowLinkFocus() {
        itemContentView.setMovementMethod(LinkMovementMethod.getInstance());
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,denyLinkFocus,void denyLinkFocus(),"[191, 193]","{'A297': [(191, 193)]}",{'A297': 1.0},A297,,"    private void denyLinkFocus() {
        itemContentView.setMovementMethod(null);
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,shouldFocusLinks,boolean shouldFocusLinks(),"[195, 203]","{'A294': [(200, 200)], 'A292': [(196, 196), (198, 199), (201, 201)], 'A297': [(195, 195), (197, 197), (202, 203)]}","{'A294': 0.1111111111111111, 'A292': 0.4444444444444444, 'A297': 0.4444444444444444}",A292,,"    private boolean shouldFocusLinks() {
        if (itemView.isInTouchMode()) {
            return false;
        }

        final URLSpan[] urls = itemContentView.getUrls();

        return urls != null && urls.length != 0;
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/CommentInfoItemHolder.java,CommentInfoItemHolder,determineMovementMethod,void determineMovementMethod(),"[205, 211]","{'A305': [(205, 205)], 'A292': [(210, 211)], 'A297': [(206, 209)]}","{'A305': 0.14285714285714285, 'A292': 0.2857142857142857, 'A297': 0.5714285714285714}",A297,,"    private void determineMovementMethod() {
        if (shouldFocusLinks()) {
            allowLinkFocus();
        } else {
            denyLinkFocus();
        }
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/InfoItemHolder.java,InfoItemHolder,updateState,"void updateState(InfoItem,HistoryRecordManager)","[44, 45]","{'A294': [(44, 45)]}",{'A294': 1.0},A294,,"    public void updateState(final InfoItem infoItem,
                            final HistoryRecordManager historyRecordManager) { }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/StreamInfoItemHolder.java,StreamInfoItemHolder,updateFromItem,"void updateFromItem(InfoItem,HistoryRecordManager)","[52, 63]","{'A301': [(52, 52), (56, 56), (60, 63)], 'A305': [(55, 55)], 'A294': [(53, 54), (57, 59)]}","{'A301': 0.5, 'A305': 0.08333333333333333, 'A294': 0.4166666666666667}",A301,,"    @Override
    public void updateFromItem(final InfoItem infoItem,
                               final HistoryRecordManager historyRecordManager) {
        super.updateFromItem(infoItem, historyRecordManager);

        if (!(infoItem instanceof StreamInfoItem)) {
            return;
        }
        final StreamInfoItem item = (StreamInfoItem) infoItem;

        itemAdditionalDetails.setText(getStreamInfoDetailLine(item));
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/StreamInfoItemHolder.java,StreamInfoItemHolder,getStreamInfoDetailLine,String getStreamInfoDetailLine(StreamInfoItem),"[65, 92]","{'A301': [(65, 66), (68, 68), (71, 71), (74, 74), (77, 79), (83, 92)], 'A305': [(80, 82)], 'A294': [(69, 70), (72, 73), (75, 76)], 'A302': [(67, 67)]}","{'A301': 0.6428571428571429, 'A305': 0.10714285714285714, 'A294': 0.21428571428571427, 'A302': 0.03571428571428571}",A301,,"    private String getStreamInfoDetailLine(final StreamInfoItem infoItem) {
        String viewsAndDate = """";
        if (infoItem.getViewCount() >= 0) {
            if (infoItem.getStreamType().equals(StreamType.AUDIO_LIVE_STREAM)) {
                viewsAndDate = Localization
                        .listeningCount(itemBuilder.getContext(), infoItem.getViewCount());
            } else if (infoItem.getStreamType().equals(StreamType.LIVE_STREAM)) {
                viewsAndDate = Localization
                        .shortWatchingCount(itemBuilder.getContext(), infoItem.getViewCount());
            } else {
                viewsAndDate = Localization
                        .shortViewCount(itemBuilder.getContext(), infoItem.getViewCount());
            }
        }

        final String uploadDate = Localization.relativeTimeOrTextual(itemBuilder.getContext(),
                infoItem.getUploadDate(),
                infoItem.getTextualUploadDate());
        if (!TextUtils.isEmpty(uploadDate)) {
            if (viewsAndDate.isEmpty()) {
                return uploadDate;
            }

            return Localization.concatenateStrings(viewsAndDate, uploadDate);
        }

        return viewsAndDate;
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/ChannelCardInfoItemHolder.java,ChannelCardInfoItemHolder,getDescriptionMaxLineCount,int getDescriptionMaxLineCount(String),"[16, 21]","{'A339': [(16, 21)]}",{'A339': 1.0},A339,,"    @Override
    protected int getDescriptionMaxLineCount(@Nullable final String content) {
        // Based on `list_channel_card_item` left side content (thumbnail 100dp
        // + additional details), Right side description can grow up to 8 lines.
        return 8;
    }
"
org.schabi.newpipe.info_list.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/info_list/holder/PlaylistMiniInfoItemHolder.java,PlaylistMiniInfoItemHolder,updateFromItem,"void updateFromItem(InfoItem,HistoryRecordManager)","[36, 64]","{'A310': [(36, 36), (42, 44), (47, 48), (50, 64)], 'A305': [(45, 46), (49, 49)], 'A294': [(37, 41)]}","{'A310': 0.7241379310344828, 'A305': 0.10344827586206896, 'A294': 0.1724137931034483}",A310,,"    @Override
    public void updateFromItem(final InfoItem infoItem,
                               final HistoryRecordManager historyRecordManager) {
        if (!(infoItem instanceof PlaylistInfoItem)) {
            return;
        }
        final PlaylistInfoItem item = (PlaylistInfoItem) infoItem;

        itemTitleView.setText(item.getName());
        itemStreamCountView.setText(Localization
                .localizeStreamCountMini(itemStreamCountView.getContext(), item.getStreamCount()));
        itemUploaderView.setText(item.getUploaderName());

        PicassoHelper.loadPlaylistThumbnail(item.getThumbnails()).into(itemThumbnailView);

        itemView.setOnClickListener(view -> {
            if (itemBuilder.getOnPlaylistSelectedListener() != null) {
                itemBuilder.getOnPlaylistSelectedListener().selected(item);
            }
        });

        itemView.setLongClickable(true);
        itemView.setOnLongClickListener(view -> {
            if (itemBuilder.getOnPlaylistSelectedListener() != null) {
                itemBuilder.getOnPlaylistSelectedListener().held(item);
            }
            return true;
        });
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/QueueItemMenuUtil.java,QueueItemMenuUtil,openPopupMenu,"void openPopupMenu(PlayQueue,PlayQueueItem,View,boolean,FragmentManager,Context)","[27, 93]","{'A349': [(27, 55), (63, 63), (65, 66), (69, 77), (79, 79), (88, 93)], 'A350': [(80, 80), (83, 84), (86, 87)], 'A300': [(56, 57), (59, 62), (64, 64)], 'A305': [(67, 68), (78, 78), (81, 82), (85, 85)], 'A295': [(58, 58)]}","{'A349': 0.7164179104477612, 'A350': 0.07462686567164178, 'A300': 0.1044776119402985, 'A305': 0.08955223880597014, 'A295': 0.014925373134328358}",A349,,"    public static void openPopupMenu(final PlayQueue playQueue,
                                     final PlayQueueItem item,
                                     final View view,
                                     final boolean hideDetails,
                                     final FragmentManager fragmentManager,
                                     final Context context) {
        final ContextThemeWrapper themeWrapper =
                new ContextThemeWrapper(context, R.style.DarkPopupMenu);

        final PopupMenu popupMenu = new PopupMenu(themeWrapper, view);
        popupMenu.inflate(R.menu.menu_play_queue_item);

        if (hideDetails) {
            popupMenu.getMenu().findItem(R.id.menu_item_details).setVisible(false);
        }

        popupMenu.setOnMenuItemClickListener(menuItem -> {
            switch (menuItem.getItemId()) {
                case R.id.menu_item_remove:
                    final int index = playQueue.indexOf(item);
                    playQueue.remove(index);
                    return true;
                case R.id.menu_item_details:
                    // playQueue is null since we don't want any queue change
                    NavigationHelper.openVideoDetail(context, item.getServiceId(),
                            item.getUrl(), item.getTitle(), null,
                            false);
                    return true;
                case R.id.menu_item_append_playlist:
                    PlaylistDialog.createCorrespondingDialog(
                            context,
                            List.of(new StreamEntity(item)),
                            dialog -> dialog.show(
                                    fragmentManager,
                                    ""QueueItemMenuUtil@append_playlist""
                            )
                    );

                    return true;
                case R.id.menu_item_channel_details:
                    SparseItemUtil.fetchUploaderUrlIfSparse(context, item.getServiceId(),
                            item.getUrl(), item.getUploaderUrl(),
                            // An intent must be used here.
                            // Opening with FragmentManager transactions is not working,
                            // as PlayQueueActivity doesn't use fragments.
                            uploaderUrl -> NavigationHelper.openChannelFragmentUsingIntent(
                                    context, item.getServiceId(), uploaderUrl, item.getUploader()
                            ));
                    return true;
                case R.id.menu_item_share:
                    shareText(context, item.getTitle(), item.getUrl(),
                            item.getThumbnails());
                    return true;
                case R.id.menu_item_download:
                    fetchStreamInfoAndSaveToDatabase(context, item.getServiceId(), item.getUrl(),
                            info -> {
                                final DownloadDialog downloadDialog = new DownloadDialog(context,
                                        info);
                                downloadDialog.show(fragmentManager, ""downloadDialog"");
                            });
                    return true;
            }
            return false;
        });

        popupMenu.show();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/PanicResponderActivity.java,PanicResponderActivity,onCreate,void onCreate(Bundle),"[29, 43]","{'A351': [(29, 30), (32, 32), (34, 34), (39, 41), (43, 43)], 'A294': [(31, 31), (33, 33), (35, 38)], 'A300': [(42, 42)]}","{'A351': 0.5333333333333333, 'A294': 0.4, 'A300': 0.06666666666666667}",A351,,"    @SuppressLint(""NewApi"")
    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        final Intent intent = getIntent();
        if (intent != null && PANIC_TRIGGER_ACTION.equals(intent.getAction())) {
            // TODO: Explicitly clear the search results
            //  once they are restored when the app restarts
            //  or if the app reloads the current video after being killed,
            //  that should be cleared also
            ExitActivity.exitAndRemoveFromRecentApps(this);
        }

        finishAndRemoveTask();
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,onCreate,void onCreate(Bundle),"[43, 47]","{'A310': [(43, 43), (45, 47)], 'A294': [(44, 44)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        savedState = StateSaver.tryToRestore(savedInstanceState, this);
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,onDestroy,void onDestroy(),"[49, 53]","{'A310': [(49, 53)]}",{'A310': 1.0},A310,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        StateSaver.onDestroy(savedState);
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,getStreamEntities,List<StreamEntity> getStreamEntities(),"[55, 57]","{'A300': [(55, 57)]}",{'A300': 1.0},A300,,"    public List<StreamEntity> getStreamEntities() {
        return streamEntities;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,onCreateDialog,Dialog onCreateDialog(Bundle),"[59, 69]","{'A341': [(59, 60), (62, 69)], 'A294': [(61, 61)]}","{'A341': 0.9090909090909091, 'A294': 0.09090909090909091}",A341,,"    @NonNull
    @Override
    public Dialog onCreateDialog(final Bundle savedInstanceState) {
        final Dialog dialog = super.onCreateDialog(savedInstanceState);
        //remove title
        final Window window = dialog.getWindow();
        if (window != null) {
            window.requestFeature(Window.FEATURE_NO_TITLE);
        }
        return dialog;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,onDismiss,void onDismiss(DialogInterface),"[71, 77]","{'A300': [(71, 77)]}",{'A300': 1.0},A300,,"    @Override
    public void onDismiss(@NonNull final DialogInterface dialog) {
        super.onDismiss(dialog);
        if (onDismissListener != null) {
            onDismissListener.onDismiss(dialog);
        }
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,generateSuffix,String generateSuffix(),"[83, 87]","{'A310': [(83, 87)]}",{'A310': 1.0},A310,,"    @Override
    public String generateSuffix() {
        final int size = streamEntities == null ? 0 : streamEntities.size();
        return ""."" + size + "".list"";
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,writeTo,void writeTo(Queue<Object>),"[89, 92]","{'A310': [(89, 89), (91, 92)], 'A294': [(90, 90)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"    @Override
    public void writeTo(final Queue<Object> objectsToSave) {
        objectsToSave.add(streamEntities);
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,readFrom,void readFrom(Queue<Object>),"[94, 98]","{'A310': [(94, 95), (97, 98)], 'A294': [(96, 96)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    @SuppressWarnings(""unchecked"")
    public void readFrom(@NonNull final Queue<Object> savedObjects) {
        streamEntities = (List<StreamEntity>) savedObjects.poll();
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,onSaveInstanceState,void onSaveInstanceState(Bundle),"[100, 107]","{'A310': [(100, 100), (102, 107)], 'A299': [(101, 101)]}","{'A310': 0.875, 'A299': 0.125}",A310,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        if (getActivity() != null) {
            savedState = StateSaver.tryToSave(getActivity().isChangingConfigurations(),
                    savedState, outState, this);
        }
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,getOnDismissListener,DialogInterface.OnDismissListener getOnDismissListener(),"[113, 116]","{'A300': [(113, 116)]}",{'A300': 1.0},A300,,"    @Nullable
    public DialogInterface.OnDismissListener getOnDismissListener() {
        return onDismissListener;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,setOnDismissListener,void setOnDismissListener(DialogInterface.OnDismissListener),"[118, 122]","{'A300': [(118, 122)]}",{'A300': 1.0},A300,,"    public void setOnDismissListener(
            @Nullable final DialogInterface.OnDismissListener onDismissListener
    ) {
        this.onDismissListener = onDismissListener;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,setStreamEntities,void setStreamEntities(List<StreamEntity>),"[124, 126]","{'A352': [(124, 126)]}",{'A352': 1.0},A352,,"    protected void setStreamEntities(final List<StreamEntity> streamEntities) {
        this.streamEntities = streamEntities;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,createCorrespondingDialog,"Disposable createCorrespondingDialog(Context,List<StreamEntity>,Consumer<PlaylistDialog>)","[141, 154]","{'A300': [(141, 143), (146, 150), (153, 154)], 'A305': [(144, 145)], 'A352': [(151, 152)]}","{'A300': 0.7142857142857143, 'A305': 0.14285714285714285, 'A352': 0.14285714285714285}",A300,,"    public static Disposable createCorrespondingDialog(
            final Context context,
            final List<StreamEntity> streamEntities,
            final Consumer<PlaylistDialog> onExec) {

        return new LocalPlaylistManager(NewPipeDatabase.getInstance(context))
                .hasPlaylists()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(hasPlaylists ->
                        onExec.accept(hasPlaylists
                                ? PlaylistAppendDialog.newInstance(streamEntities)
                                : PlaylistCreationDialog.newInstance(streamEntities))
                );
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistDialog.java,PlaylistDialog,showForPlayQueue,"Disposable showForPlayQueue(Player,FragmentManager)","[165, 180]","{'A305': [(165, 180)]}",{'A305': 1.0},A305,,"    public static Disposable showForPlayQueue(
            final Player player,
            @NonNull final FragmentManager fragmentManager) {

        final List<StreamEntity> streamEntities = Stream.of(player.getPlayQueue())
                .filter(Objects::nonNull)
                .flatMap(playQueue -> playQueue.getStreams().stream())
                .map(StreamEntity::new)
                .collect(Collectors.toList());
        if (streamEntities.isEmpty()) {
            return Disposable.empty();
        }

        return PlaylistDialog.createCorrespondingDialog(player.getContext(), streamEntities,
                dialog -> dialog.show(fragmentManager, ""PlaylistDialog""));
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,newInstance,PlaylistAppendDialog newInstance(List<StreamEntity>),"[43, 47]","{'A352': [(43, 46)], 'A353': [(47, 47)]}","{'A352': 0.8, 'A353': 0.2}",A352,,"    public static PlaylistAppendDialog newInstance(final List<StreamEntity> streamEntities) {
        final PlaylistAppendDialog dialog = new PlaylistAppendDialog();
        dialog.setStreamEntities(streamEntities);
        return dialog;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[53, 57]","{'A310': [(53, 53), (56, 57)], 'A294': [(54, 55)]}","{'A310': 0.6, 'A294': 0.4}",A310,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.dialog_playlists, container);
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,onViewCreated,"void onViewCreated(View,Bundle)","[59, 88]","{'A310': [(59, 59), (61, 63), (65, 66), (72, 75), (77, 78), (81, 83), (86, 86), (88, 88)], 'A305': [(64, 64), (69, 71), (76, 76), (79, 80), (84, 85), (87, 87)], 'A294': [(60, 60)], 'A295': [(67, 68)]}","{'A310': 0.5666666666666667, 'A305': 0.3333333333333333, 'A294': 0.03333333333333333, 'A295': 0.06666666666666667}",A310,,"    @Override
    public void onViewCreated(@NonNull final View view, @Nullable final Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);

        final LocalPlaylistManager playlistManager =
                new LocalPlaylistManager(NewPipeDatabase.getInstance(requireContext()));

        playlistAdapter = new LocalItemListAdapter(getActivity());
        playlistAdapter.setSelectedListener(selectedItem -> {
            final List<StreamEntity> entities = getStreamEntities();
            if (selectedItem instanceof PlaylistDuplicatesEntry && entities != null) {
                onPlaylistSelected(playlistManager,
                        (PlaylistDuplicatesEntry) selectedItem, entities);
            }
        });

        playlistRecyclerView = view.findViewById(R.id.playlist_list);
        playlistRecyclerView.setLayoutManager(new LinearLayoutManager(requireContext()));
        playlistRecyclerView.setAdapter(playlistAdapter);

        playlistDuplicateIndicator = view.findViewById(R.id.playlist_duplicate);

        final View newPlaylistButton = view.findViewById(R.id.newPlaylist);
        newPlaylistButton.setOnClickListener(ignored -> openCreatePlaylistDialog());

        playlistDisposables.add(playlistManager
                .getPlaylistDuplicates(getStreamEntities().get(0).getUrl())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(this::onPlaylistsReceived));
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,onDestroyView,void onDestroyView(),"[94, 105]","{'A310': [(94, 96), (101, 101), (103, 105)], 'A305': [(97, 97), (102, 102)], 'A340': [(98, 100)]}","{'A310': 0.5833333333333334, 'A305': 0.16666666666666666, 'A340': 0.25}",A310,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        playlistDisposables.dispose();
        if (playlistAdapter != null) {
            playlistAdapter.unsetSelectedListener();
        }

        playlistDisposables.clear();
        playlistRecyclerView = null;
        playlistAdapter = null;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,openCreatePlaylistDialog,void openCreatePlaylistDialog(),"[112, 125]","{'A310': [(112, 112), (116, 116), (125, 125)], 'A305': [(124, 124)], 'A352': [(118, 118)], 'A353': [(119, 119), (122, 122)], 'A294': [(114, 115)], 'A300': [(113, 113), (117, 117), (120, 121), (123, 123)]}","{'A310': 0.21428571428571427, 'A305': 0.07142857142857142, 'A352': 0.07142857142857142, 'A353': 0.14285714285714285, 'A294': 0.14285714285714285, 'A300': 0.35714285714285715}",A300,,"    public void openCreatePlaylistDialog() {
        if (getStreamEntities() == null || !isAdded()) {
            return;
        }

        final PlaylistCreationDialog playlistCreationDialog =
                PlaylistCreationDialog.newInstance(getStreamEntities());
        // Move the dismissListener to the new dialog.
        playlistCreationDialog.setOnDismissListener(this.getOnDismissListener());
        this.setOnDismissListener(null);

        playlistCreationDialog.show(getParentFragmentManager(), TAG);
        requireDialog().dismiss();
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,onPlaylistsReceived,void onPlaylistsReceived(List<PlaylistDuplicatesEntry>),"[127, 137]","{'A310': [(131, 133), (136, 137)], 'A305': [(127, 130), (134, 135)]}","{'A310': 0.45454545454545453, 'A305': 0.5454545454545454}",A305,,"    private void onPlaylistsReceived(@NonNull final List<PlaylistDuplicatesEntry> playlists) {
        if (playlistAdapter != null
                && playlistRecyclerView != null
                && playlistDuplicateIndicator != null) {
            playlistAdapter.clearStreamItemList();
            playlistAdapter.addItems(playlists);
            playlistRecyclerView.setVisibility(View.VISIBLE);
            playlistDuplicateIndicator.setVisibility(
                    anyPlaylistContainsDuplicates(playlists) ? View.VISIBLE : View.GONE);
        }
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,anyPlaylistContainsDuplicates,boolean anyPlaylistContainsDuplicates(List<PlaylistDuplicatesEntry>),"[139, 142]","{'A305': [(139, 141)], 'A350': [(142, 142)]}","{'A305': 0.75, 'A350': 0.25}",A305,,"    private boolean anyPlaylistContainsDuplicates(final List<PlaylistDuplicatesEntry> playlists) {
        return playlists.stream()
                .anyMatch(playlist -> playlist.timesStreamIsContained > 0);
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistAppendDialog.java,PlaylistAppendDialog,onPlaylistSelected,"void onPlaylistSelected(LocalPlaylistManager,PlaylistDuplicatesEntry,List<StreamEntity>)","[144, 174]","{'A310': [(147, 147), (155, 155), (157, 157), (174, 174)], 'A305': [(145, 145), (148, 153), (166, 166), (173, 173)], 'A350': [(156, 156), (160, 162), (165, 165), (167, 171)], 'A352': [(158, 158)], 'A294': [(144, 144), (146, 146)], 'A354': [(154, 154), (159, 159), (172, 172)], 'A355': [(163, 164)]}","{'A310': 0.12903225806451613, 'A305': 0.2903225806451613, 'A350': 0.3225806451612903, 'A352': 0.03225806451612903, 'A294': 0.06451612903225806, 'A354': 0.0967741935483871, 'A355': 0.06451612903225806}",A350,,"    private void onPlaylistSelected(@NonNull final LocalPlaylistManager manager,
                                    @NonNull final PlaylistDuplicatesEntry playlist,
                                    @NonNull final List<StreamEntity> streams) {

        final String toastText;
        if (playlist.timesStreamIsContained > 0) {
            toastText = getString(R.string.playlist_add_stream_success_duplicate,
                    playlist.timesStreamIsContained);
        } else {
            toastText = getString(R.string.playlist_add_stream_success);
        }

        final Toast successToast = Toast.makeText(getContext(), toastText, Toast.LENGTH_SHORT);

        playlistDisposables.add(manager.appendToPlaylist(playlist.getUid(), streams)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> {
                    successToast.show();

                    if (playlist.thumbnailUrl != null
                            && playlist.thumbnailUrl.equals(PlaylistEntity.DEFAULT_THUMBNAIL)) {
                        playlistDisposables.add(manager
                                .changePlaylistThumbnail(playlist.getUid(), streams.get(0).getUid(),
                                        false)
                                .observeOn(AndroidSchedulers.mainThread())
                                .subscribe(ignore -> successToast.show()));
                    }
                }));

        requireDialog().dismiss();
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistCreationDialog.java,PlaylistCreationDialog,newInstance,PlaylistCreationDialog newInstance(List<StreamEntity>),"[31, 35]","{'A353': [(35, 35)], 'A352': [(31, 34)]}","{'A353': 0.2, 'A352': 0.8}",A352,,"    public static PlaylistCreationDialog newInstance(final List<StreamEntity> streamEntities) {
        final PlaylistCreationDialog dialog = new PlaylistCreationDialog();
        dialog.setStreamEntities(streamEntities);
        return dialog;
    }
"
org.schabi.newpipe.local.dialog,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/dialog/PlaylistCreationDialog.java,PlaylistCreationDialog,onCreateDialog,Dialog onCreateDialog(Bundle),"[41, 73]","{'A310': [(41, 42), (47, 47), (53, 53), (56, 56), (58, 60), (62, 62), (64, 67), (69, 73)], 'A299': [(51, 52), (57, 57), (61, 61), (63, 63)], 'A294': [(43, 43), (45, 46)], 'A353': [(50, 50), (54, 55)], 'A300': [(44, 44), (48, 49), (68, 68)]}","{'A310': 0.5454545454545454, 'A299': 0.15151515151515152, 'A294': 0.09090909090909091, 'A353': 0.09090909090909091, 'A300': 0.12121212121212122}",A310,,"    @NonNull
    @Override
    public Dialog onCreateDialog(@Nullable final Bundle savedInstanceState) {
        if (getStreamEntities() == null) {
            return super.onCreateDialog(savedInstanceState);
        }

        final DialogEditTextBinding dialogBinding =
                DialogEditTextBinding.inflate(getLayoutInflater());
        dialogBinding.getRoot().getContext().setTheme(ThemeHelper.getDialogTheme(requireContext()));
        dialogBinding.dialogEditText.setHint(R.string.name);
        dialogBinding.dialogEditText.setInputType(InputType.TYPE_CLASS_TEXT);

        final Builder dialogBuilder = new Builder(requireContext(),
                ThemeHelper.getDialogTheme(requireContext()))
                .setTitle(R.string.create_playlist)
                .setView(dialogBinding.getRoot())
                .setCancelable(true)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.create, (dialogInterface, i) -> {
                    final String name = dialogBinding.dialogEditText.getText().toString();
                    final LocalPlaylistManager playlistManager =
                            new LocalPlaylistManager(NewPipeDatabase.getInstance(requireContext()));
                    final Toast successToast = Toast.makeText(getActivity(),
                            R.string.playlist_creation_success,
                            Toast.LENGTH_SHORT);

                    playlistManager.createPlaylist(name, getStreamEntities())
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(longs -> successToast.show());
                });
        return dialogBuilder.create();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onCreate,void onCreate(Bundle),"[80, 95]","{'A310': [(80, 80), (82, 82), (86, 89), (95, 95)], 'A352': [(90, 94)], 'A294': [(81, 81), (83, 85)]}","{'A310': 0.4375, 'A352': 0.3125, 'A294': 0.25}",A310,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (activity == null) {
            return;
        }
        final AppDatabase database = NewPipeDatabase.getInstance(activity);
        localPlaylistManager = new LocalPlaylistManager(database);
        remotePlaylistManager = new RemotePlaylistManager(database);
        disposables = new CompositeDisposable();

        isLoadingComplete = new AtomicBoolean();
        debounceSaver = new DebounceSaver(3000, this);

        deletedItems = new ArrayList<>();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[97, 107]","{'A310': [(97, 98), (102, 102), (106, 107)], 'A294': [(99, 101), (103, 103)], 'A306': [(104, 105)]}","{'A310': 0.45454545454545453, 'A294': 0.36363636363636365, 'A306': 0.18181818181818182}",A310,,"    @Nullable
    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             final Bundle savedInstanceState) {

        if (!useAsFrontPage) {
            setTitle(activity.getString(R.string.tab_bookmarks));
        }
        return inflater.inflate(R.layout.fragment_bookmarks, container, false);
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onResume,void onResume(),"[109, 115]","{'A310': [(109, 109), (113, 115)], 'A299': [(110, 112)]}","{'A310': 0.5714285714285714, 'A299': 0.42857142857142855}",A310,,"    @Override
    public void onResume() {
        super.onResume();
        if (activity != null) {
            setTitle(activity.getString(R.string.tab_bookmarks));
        }
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,initViews,"void initViews(View,Bundle)","[121, 126]","{'A310': [(121, 121), (123, 123), (126, 126)], 'A352': [(124, 125)], 'A294': [(122, 122)]}","{'A310': 0.5, 'A352': 0.3333333333333333, 'A294': 0.16666666666666666}",A310,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        itemListAdapter.setUseItemHandle(true);
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,initListeners,void initListeners(),"[128, 172]","{'A310': [(128, 131), (136, 136), (152, 155), (157, 157), (159, 162), (171, 172)], 'A352': [(132, 134), (142, 142), (163, 170)], 'A356': [(158, 158)], 'A294': [(137, 137), (156, 156)], 'A306': [(138, 141), (143, 151)], 'A295': [(135, 135)]}","{'A310': 0.35555555555555557, 'A352': 0.26666666666666666, 'A356': 0.022222222222222223, 'A294': 0.044444444444444446, 'A306': 0.28888888888888886, 'A295': 0.022222222222222223}",A310,,"    @Override
    protected void initListeners() {
        super.initListeners();

        itemTouchHelper = new ItemTouchHelper(getItemTouchCallback());
        itemTouchHelper.attachToRecyclerView(itemsList);

        itemListAdapter.setSelectedListener(new OnClickGesture<>() {
            @Override
            public void selected(final LocalItem selectedItem) {
                final FragmentManager fragmentManager = getFM();

                if (selectedItem instanceof PlaylistMetadataEntry) {
                    final PlaylistMetadataEntry entry = ((PlaylistMetadataEntry) selectedItem);
                    NavigationHelper.openLocalPlaylistFragment(fragmentManager, entry.getUid(),
                            entry.name);

                } else if (selectedItem instanceof PlaylistRemoteEntity) {
                    final PlaylistRemoteEntity entry = ((PlaylistRemoteEntity) selectedItem);
                    NavigationHelper.openPlaylistFragment(
                            fragmentManager,
                            entry.getServiceId(),
                            entry.getUrl(),
                            entry.getName());
                }
            }

            @Override
            public void held(final LocalItem selectedItem) {
                if (selectedItem instanceof PlaylistMetadataEntry) {
                    showLocalDialog((PlaylistMetadataEntry) selectedItem);
                } else if (selectedItem instanceof PlaylistRemoteEntity) {
                    showRemoteDeleteDialog((PlaylistRemoteEntity) selectedItem);
                }
            }

            @Override
            public void drag(final LocalItem selectedItem,
                             final RecyclerView.ViewHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
        });
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,selected,void selected(LocalItem),"[136, 153]","{'A310': [(136, 136), (152, 153)], 'A352': [(142, 142)], 'A294': [(137, 137)], 'A306': [(138, 141), (143, 151)]}","{'A310': 0.16666666666666666, 'A352': 0.05555555555555555, 'A294': 0.05555555555555555, 'A306': 0.7222222222222222}",A306,,"            @Override
            public void selected(final LocalItem selectedItem) {
                final FragmentManager fragmentManager = getFM();

                if (selectedItem instanceof PlaylistMetadataEntry) {
                    final PlaylistMetadataEntry entry = ((PlaylistMetadataEntry) selectedItem);
                    NavigationHelper.openLocalPlaylistFragment(fragmentManager, entry.getUid(),
                            entry.name);

                } else if (selectedItem instanceof PlaylistRemoteEntity) {
                    final PlaylistRemoteEntity entry = ((PlaylistRemoteEntity) selectedItem);
                    NavigationHelper.openPlaylistFragment(
                            fragmentManager,
                            entry.getServiceId(),
                            entry.getUrl(),
                            entry.getName());
                }
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,held,void held(LocalItem),"[155, 162]","{'A310': [(155, 155), (157, 157), (159, 162)], 'A356': [(158, 158)], 'A294': [(156, 156)]}","{'A310': 0.75, 'A356': 0.125, 'A294': 0.125}",A310,,"            @Override
            public void held(final LocalItem selectedItem) {
                if (selectedItem instanceof PlaylistMetadataEntry) {
                    showLocalDialog((PlaylistMetadataEntry) selectedItem);
                } else if (selectedItem instanceof PlaylistRemoteEntity) {
                    showRemoteDeleteDialog((PlaylistRemoteEntity) selectedItem);
                }
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,drag,"void drag(LocalItem,RecyclerView.ViewHolder)","[164, 170]","{'A352': [(164, 170)]}",{'A352': 1.0},A352,,"            @Override
            public void drag(final LocalItem selectedItem,
                             final RecyclerView.ViewHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,startLoading,void startLoading(boolean),"[178, 192]","{'A310': [(178, 178), (180, 181), (192, 192)], 'A305': [(188, 188)], 'A352': [(182, 187)], 'A294': [(179, 179), (189, 191)]}","{'A310': 0.26666666666666666, 'A305': 0.06666666666666667, 'A352': 0.4, 'A294': 0.26666666666666666}",A352,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);

        if (debounceSaver != null) {
            disposables.add(debounceSaver.getDebouncedSaver());
            debounceSaver.setNoChangesToSave();
        }
        isLoadingComplete.set(false);

        getMergedOrderedPlaylists(localPlaylistManager, remotePlaylistManager)
                .onBackpressureLatest()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getPlaylistsSubscriber());
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onPause,void onPause(),"[198, 205]","{'A310': [(198, 201), (205, 205)], 'A352': [(202, 204)]}","{'A310': 0.625, 'A352': 0.375}",A310,,"    @Override
    public void onPause() {
        super.onPause();
        itemsListState = itemsList.getLayoutManager().onSaveInstanceState();

        // Save on exit
        saveImmediate();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onDestroyView,void onDestroyView(),"[207, 220]","{'A310': [(207, 210), (217, 218), (220, 220)], 'A352': [(219, 219)], 'A294': [(211, 216)]}","{'A310': 0.5, 'A352': 0.07142857142857142, 'A294': 0.42857142857142855}",A310,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();

        if (disposables != null) {
            disposables.clear();
        }
        if (databaseSubscription != null) {
            databaseSubscription.cancel();
        }

        databaseSubscription = null;
        itemTouchHelper = null;
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onDestroy,void onDestroy(),"[222, 240]","{'A310': [(222, 224), (231, 231), (233, 236), (240, 240)], 'A352': [(225, 227), (232, 232), (237, 239)], 'A294': [(228, 230)]}","{'A310': 0.47368421052631576, 'A352': 0.3684210526315789, 'A294': 0.15789473684210525}",A310,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (debounceSaver != null) {
            debounceSaver.getDebouncedSaveSignal().onComplete();
        }
        if (disposables != null) {
            disposables.dispose();
        }

        debounceSaver = null;
        disposables = null;
        localPlaylistManager = null;
        remotePlaylistManager = null;
        itemsListState = null;

        isLoadingComplete = null;
        deletedItems = null;
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,getPlaylistsSubscriber,Subscriber<List<PlaylistLocalItem>> getPlaylistsSubscriber(),"[246, 281]","{'A310': [(246, 246), (248, 248), (250, 250), (256, 260), (269, 271), (275, 277), (280, 281)], 'A305': [(247, 247), (273, 274)], 'A352': [(251, 252), (262, 265), (278, 279)], 'A294': [(249, 249), (253, 255), (261, 261), (266, 268), (272, 272)]}","{'A310': 0.4444444444444444, 'A305': 0.08333333333333333, 'A352': 0.2222222222222222, 'A294': 0.25}",A310,,"    private Subscriber<List<PlaylistLocalItem>> getPlaylistsSubscriber() {
        return new Subscriber<>() {
            @Override
            public void onSubscribe(final Subscription s) {
                showLoading();
                isLoadingComplete.set(false);

                if (databaseSubscription != null) {
                    databaseSubscription.cancel();
                }
                databaseSubscription = s;
                databaseSubscription.request(1);
            }

            @Override
            public void onNext(final List<PlaylistLocalItem> subscriptions) {
                if (debounceSaver == null || !debounceSaver.getIsModified()) {
                    handleResult(subscriptions);
                    isLoadingComplete.set(true);
                }
                if (databaseSubscription != null) {
                    databaseSubscription.request(1);
                }
            }

            @Override
            public void onError(final Throwable exception) {
                showError(new ErrorInfo(exception,
                        UserAction.REQUESTED_BOOKMARK, ""Loading playlists""));
            }

            @Override
            public void onComplete() {
            }
        };
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onSubscribe,void onSubscribe(Subscription),"[248, 258]","{'A310': [(248, 248), (250, 250), (256, 258)], 'A352': [(251, 252)], 'A294': [(249, 249), (253, 255)]}","{'A310': 0.45454545454545453, 'A352': 0.18181818181818182, 'A294': 0.36363636363636365}",A310,,"            @Override
            public void onSubscribe(final Subscription s) {
                showLoading();
                isLoadingComplete.set(false);

                if (databaseSubscription != null) {
                    databaseSubscription.cancel();
                }
                databaseSubscription = s;
                databaseSubscription.request(1);
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onNext,void onNext(List<PlaylistLocalItem>),"[260, 269]","{'A310': [(260, 260), (269, 269)], 'A352': [(262, 265)], 'A294': [(261, 261), (266, 268)]}","{'A310': 0.2, 'A352': 0.4, 'A294': 0.4}",A352,,"            @Override
            public void onNext(final List<PlaylistLocalItem> subscriptions) {
                if (debounceSaver == null || !debounceSaver.getIsModified()) {
                    handleResult(subscriptions);
                    isLoadingComplete.set(true);
                }
                if (databaseSubscription != null) {
                    databaseSubscription.request(1);
                }
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onError,void onError(Throwable),"[271, 275]","{'A310': [(271, 271), (275, 275)], 'A305': [(273, 274)], 'A294': [(272, 272)]}","{'A310': 0.4, 'A305': 0.4, 'A294': 0.2}",A310,,"            @Override
            public void onError(final Throwable exception) {
                showError(new ErrorInfo(exception,
                        UserAction.REQUESTED_BOOKMARK, ""Loading playlists""));
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onComplete,void onComplete(),"[277, 279]","{'A310': [(277, 277)], 'A352': [(278, 279)]}","{'A310': 0.3333333333333333, 'A352': 0.6666666666666666}",A352,,"            @Override
            public void onComplete() {
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,handleResult,void handleResult(List<PlaylistLocalItem>),"[283, 300]","{'A310': [(283, 283), (285, 300)], 'A294': [(284, 284)]}","{'A310': 0.9444444444444444, 'A294': 0.05555555555555555}",A310,,"    @Override
    public void handleResult(@NonNull final List<PlaylistLocalItem> result) {
        super.handleResult(result);

        itemListAdapter.clearStreamItemList();

        if (result.isEmpty()) {
            showEmptyState();
            return;
        }

        itemListAdapter.addItems(result);
        if (itemsListState != null) {
            itemsList.getLayoutManager().onRestoreInstanceState(itemsListState);
            itemsListState = null;
        }
        hideLoading();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,resetFragment,void resetFragment(),"[306, 312]","{'A310': [(306, 308), (312, 312)], 'A294': [(309, 311)]}","{'A310': 0.5714285714285714, 'A294': 0.42857142857142855}",A310,,"    @Override
    protected void resetFragment() {
        super.resetFragment();
        if (disposables != null) {
            disposables.clear();
        }
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,changeLocalPlaylistName,"void changeLocalPlaylistName(long,String)","[318, 335]","{'A305': [(330, 333)], 'A356': [(319, 323), (326, 328), (334, 335)], 'A294': [(318, 318), (324, 325), (329, 329)]}","{'A305': 0.2222222222222222, 'A356': 0.5555555555555556, 'A294': 0.2222222222222222}",A356,,"    private void changeLocalPlaylistName(final long id, final String name) {
        if (localPlaylistManager == null) {
            return;
        }

        if (DEBUG) {
            Log.d(TAG, ""Updating playlist id=["" + id + ""] ""
                    + ""with new name=["" + name + ""] items"");
        }

        final Disposable disposable = localPlaylistManager.renamePlaylist(id, name)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(longs -> { /*Do nothing on success*/ }, throwable -> showError(
                        new ErrorInfo(throwable,
                                UserAction.REQUESTED_BOOKMARK,
                                ""Changing playlist name"")));
        disposables.add(disposable);
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,deleteItem,void deleteItem(PlaylistLocalItem),"[337, 355]","{'A305': [(351, 351), (353, 353)], 'A352': [(337, 350), (352, 352), (354, 355)]}","{'A305': 0.10526315789473684, 'A352': 0.8947368421052632}",A352,,"    private void deleteItem(final PlaylistLocalItem item) {
        if (itemListAdapter == null) {
            return;
        }
        itemListAdapter.removeItem(item);

        if (item instanceof PlaylistMetadataEntry) {
            deletedItems.add(new Pair<>(item.getUid(),
                    LocalItem.LocalItemType.PLAYLIST_LOCAL_ITEM));
        } else if (item instanceof PlaylistRemoteEntity) {
            deletedItems.add(new Pair<>(item.getUid(),
                    LocalItem.LocalItemType.PLAYLIST_REMOTE_ITEM));
        }

        if (debounceSaver != null) {
            debounceSaver.setHasChangesToSave();
            saveImmediate();
        }
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,saveImmediate,void saveImmediate(),"[357, 417]","{'A305': [(379, 386)], 'A352': [(357, 378), (387, 417)]}","{'A305': 0.13114754098360656, 'A352': 0.8688524590163934}",A352,,"    @Override
    public void saveImmediate() {
        if (itemListAdapter == null) {
            return;
        }

        // List must be loaded and modified in order to save
        if (isLoadingComplete == null || debounceSaver == null
                || !isLoadingComplete.get() || !debounceSaver.getIsModified()) {
            return;
        }

        final List<LocalItem> items = itemListAdapter.getItemsList();
        final List<PlaylistMetadataEntry> localItemsUpdate = new ArrayList<>();
        final List<Long> localItemsDeleteUid = new ArrayList<>();
        final List<PlaylistRemoteEntity> remoteItemsUpdate = new ArrayList<>();
        final List<Long> remoteItemsDeleteUid = new ArrayList<>();

        // Calculate display index
        for (int i = 0; i < items.size(); i++) {
            final LocalItem item = items.get(i);

            if (item instanceof PlaylistMetadataEntry
                    && ((PlaylistMetadataEntry) item).getDisplayIndex() != i) {
                ((PlaylistMetadataEntry) item).setDisplayIndex(i);
                localItemsUpdate.add((PlaylistMetadataEntry) item);
            } else if (item instanceof PlaylistRemoteEntity
                    && ((PlaylistRemoteEntity) item).getDisplayIndex() != i) {
                ((PlaylistRemoteEntity) item).setDisplayIndex(i);
                remoteItemsUpdate.add((PlaylistRemoteEntity) item);
            }
        }

        // Find deleted items
        for (final Pair<Long, LocalItem.LocalItemType> item : deletedItems) {
            if (item.second.equals(LocalItem.LocalItemType.PLAYLIST_LOCAL_ITEM)) {
                localItemsDeleteUid.add(item.first);
            } else if (item.second.equals(LocalItem.LocalItemType.PLAYLIST_REMOTE_ITEM)) {
                remoteItemsDeleteUid.add(item.first);
            }
        }

        deletedItems.clear();

        // 1. Update local playlists
        // 2. Update remote playlists
        // 3. Set NoChangesToSave
        disposables.add(localPlaylistManager.updatePlaylists(localItemsUpdate, localItemsDeleteUid)
                .mergeWith(remotePlaylistManager.updatePlaylists(
                        remoteItemsUpdate, remoteItemsDeleteUid))
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(() -> {
                            if (debounceSaver != null) {
                                debounceSaver.setNoChangesToSave();
                            }
                        },
                        throwable -> showError(new ErrorInfo(throwable,
                                UserAction.REQUESTED_BOOKMARK, ""Saving playlist""))
                ));

    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,getItemTouchCallback,ItemTouchHelper.SimpleCallback getItemTouchCallback(),"[419, 483]","{'A305': [(420, 422), (461, 461)], 'A352': [(419, 419), (423, 460), (462, 483)]}","{'A305': 0.06153846153846154, 'A352': 0.9384615384615385}",A352,,"    private ItemTouchHelper.SimpleCallback getItemTouchCallback() {
        // if adding grid layout, also include ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT
        // with an `if (shouldUseGridLayout()) ...`
        return new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN,
                ItemTouchHelper.ACTION_STATE_IDLE) {
            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView,
                        viewSize, viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(MINIMUM_INITIAL_DRAG_VELOCITY,
                        Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }

            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {

                // Allow swap LocalBookmarkPlaylistItemHolder and RemoteBookmarkPlaylistItemHolder.
                if (itemListAdapter == null
                        || source.getItemViewType() != target.getItemViewType()
                        && !(
                        (
                                (source instanceof LocalBookmarkPlaylistItemHolder)
                                        || (source instanceof RemoteBookmarkPlaylistItemHolder)
                        )
                                && (
                                (target instanceof LocalBookmarkPlaylistItemHolder)
                                        || (target instanceof RemoteBookmarkPlaylistItemHolder)
                        ))
                ) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                final boolean isSwapped = itemListAdapter.swapItems(sourceIndex, targetIndex);
                if (isSwapped && debounceSaver != null) {
                    debounceSaver.setHasChangesToSave();
                }
                return isSwapped;
            }

            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }

            @Override
            public boolean isItemViewSwipeEnabled() {
                return false;
            }

            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
                // Do nothing.
            }
        };
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,interpolateOutOfBoundsScroll,"int interpolateOutOfBoundsScroll(RecyclerView,int,int,int,long)","[424, 435]","{'A352': [(424, 435)]}",{'A352': 1.0},A352,,"            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView,
                        viewSize, viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(MINIMUM_INITIAL_DRAG_VELOCITY,
                        Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onMove,"boolean onMove(RecyclerView,RecyclerView.ViewHolder,RecyclerView.ViewHolder)","[437, 465]","{'A305': [(461, 461)], 'A352': [(437, 460), (462, 465)]}","{'A305': 0.034482758620689655, 'A352': 0.9655172413793104}",A352,,"            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {

                // Allow swap LocalBookmarkPlaylistItemHolder and RemoteBookmarkPlaylistItemHolder.
                if (itemListAdapter == null
                        || source.getItemViewType() != target.getItemViewType()
                        && !(
                        (
                                (source instanceof LocalBookmarkPlaylistItemHolder)
                                        || (source instanceof RemoteBookmarkPlaylistItemHolder)
                        )
                                && (
                                (target instanceof LocalBookmarkPlaylistItemHolder)
                                        || (target instanceof RemoteBookmarkPlaylistItemHolder)
                        ))
                ) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                final boolean isSwapped = itemListAdapter.swapItems(sourceIndex, targetIndex);
                if (isSwapped && debounceSaver != null) {
                    debounceSaver.setHasChangesToSave();
                }
                return isSwapped;
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,isLongPressDragEnabled,boolean isLongPressDragEnabled(),"[467, 470]","{'A352': [(467, 470)]}",{'A352': 1.0},A352,,"            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,isItemViewSwipeEnabled,boolean isItemViewSwipeEnabled(),"[472, 475]","{'A352': [(472, 475)]}",{'A352': 1.0},A352,,"            @Override
            public boolean isItemViewSwipeEnabled() {
                return false;
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,onSwiped,"void onSwiped(RecyclerView.ViewHolder,int)","[477, 481]","{'A352': [(477, 481)]}",{'A352': 1.0},A352,,"            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
                // Do nothing.
            }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,showRemoteDeleteDialog,void showRemoteDeleteDialog(PlaylistRemoteEntity),"[489, 491]","{'A352': [(489, 491)]}",{'A352': 1.0},A352,,"    private void showRemoteDeleteDialog(final PlaylistRemoteEntity item) {
        showDeleteDialog(item.getName(), item);
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,showLocalDialog,void showLocalDialog(PlaylistMetadataEntry),"[493, 525]","{'A305': [(498, 498), (511, 511), (514, 514), (516, 516)], 'A352': [(493, 493)], 'A350': [(494, 497), (499, 510), (512, 513), (515, 515), (517, 521), (525, 525)], 'A299': [(522, 524)]}","{'A305': 0.12121212121212122, 'A352': 0.030303030303030304, 'A350': 0.7575757575757576, 'A299': 0.09090909090909091}",A350,,"    private void showLocalDialog(final PlaylistMetadataEntry selectedItem) {
        final String rename = getString(R.string.rename);
        final String delete = getString(R.string.delete);
        final String unsetThumbnail = getString(R.string.unset_playlist_thumbnail);
        final boolean isThumbnailPermanent = localPlaylistManager
                .getIsPlaylistThumbnailPermanent(selectedItem.getUid());

        final ArrayList<String> items = new ArrayList<>();
        items.add(rename);
        items.add(delete);
        if (isThumbnailPermanent) {
            items.add(unsetThumbnail);
        }

        final DialogInterface.OnClickListener action = (d, index) -> {
            if (items.get(index).equals(rename)) {
                showRenameDialog(selectedItem);
            } else if (items.get(index).equals(delete)) {
                showDeleteDialog(selectedItem.name, selectedItem);
            } else if (isThumbnailPermanent && items.get(index).equals(unsetThumbnail)) {
                final long thumbnailStreamId = localPlaylistManager
                        .getAutomaticPlaylistThumbnailStreamId(selectedItem.getUid());
                localPlaylistManager
                        .changePlaylistThumbnail(selectedItem.getUid(), thumbnailStreamId, false)
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe();
            }
        };

        new AlertDialog.Builder(activity)
                .setItems(items.toArray(new String[0]), action)
                .show();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,showRenameDialog,void showRenameDialog(PlaylistMetadataEntry),"[527, 542]","{'A352': [(530, 533), (536, 542)], 'A350': [(527, 527)], 'A299': [(534, 535)], 'A300': [(528, 529)]}","{'A352': 0.6875, 'A350': 0.0625, 'A299': 0.125, 'A300': 0.125}",A352,,"    private void showRenameDialog(final PlaylistMetadataEntry selectedItem) {
        final DialogEditTextBinding dialogBinding =
                DialogEditTextBinding.inflate(getLayoutInflater());
        dialogBinding.dialogEditText.setHint(R.string.name);
        dialogBinding.dialogEditText.setInputType(InputType.TYPE_CLASS_TEXT);
        dialogBinding.dialogEditText.setText(selectedItem.name);

        new AlertDialog.Builder(activity)
                .setView(dialogBinding.getRoot())
                .setPositiveButton(R.string.rename_playlist, (dialog, which) ->
                        changeLocalPlaylistName(
                                selectedItem.getUid(),
                                dialogBinding.dialogEditText.getText().toString()))
                .setNegativeButton(R.string.cancel, null)
                .show();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/BookmarkFragment.java,BookmarkFragment,showDeleteDialog,"void showDeleteDialog(String,PlaylistLocalItem)","[544, 556]","{'A352': [(544, 556)]}",{'A352': 1.0},A352,,"    private void showDeleteDialog(final String name, final PlaylistLocalItem item) {
        if (activity == null || disposables == null) {
            return;
        }

        new AlertDialog.Builder(activity)
                .setTitle(name)
                .setMessage(R.string.delete_playlist_prompt)
                .setCancelable(true)
                .setPositiveButton(R.string.delete, (dialog, i) -> deleteItem(item))
                .setNegativeButton(R.string.cancel, null)
                .show();
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/MergedPlaylistManager.java,MergedPlaylistManager,getMergedOrderedPlaylists,"Flowable<List<PlaylistLocalItem>> getMergedOrderedPlaylists(LocalPlaylistManager,RemotePlaylistManager)","[24, 32]","{'A305': [(24, 32)]}",{'A305': 1.0},A305,,"    public static Flowable<List<PlaylistLocalItem>> getMergedOrderedPlaylists(
            final LocalPlaylistManager localPlaylistManager,
            final RemotePlaylistManager remotePlaylistManager) {
        return Flowable.combineLatest(
                localPlaylistManager.getPlaylists(),
                remotePlaylistManager.getPlaylists(),
                MergedPlaylistManager::merge
        );
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/MergedPlaylistManager.java,MergedPlaylistManager,merge,"List<PlaylistLocalItem> merge(List<PlaylistMetadataEntry>,List<PlaylistRemoteEntity>)","[42, 73]","{'A305': [(42, 73)]}",{'A305': 1.0},A305,,"    public static List<PlaylistLocalItem> merge(
            final List<PlaylistMetadataEntry> localPlaylists,
            final List<PlaylistRemoteEntity> remotePlaylists) {

        // This algorithm is similar to the merge operation in merge sort.
        final List<PlaylistLocalItem> result = new ArrayList<>(
                localPlaylists.size() + remotePlaylists.size());
        final List<PlaylistLocalItem> itemsWithSameIndex = new ArrayList<>();

        int i = 0;
        int j = 0;
        while (i < localPlaylists.size()) {
            while (j < remotePlaylists.size()) {
                if (remotePlaylists.get(j).getDisplayIndex()
                        <= localPlaylists.get(i).getDisplayIndex()) {
                    addItem(result, remotePlaylists.get(j), itemsWithSameIndex);
                    j++;
                } else {
                    break;
                }
            }
            addItem(result, localPlaylists.get(i), itemsWithSameIndex);
            i++;
        }
        while (j < remotePlaylists.size()) {
            addItem(result, remotePlaylists.get(j), itemsWithSameIndex);
            j++;
        }
        addItemsWithSameIndex(result, itemsWithSameIndex);

        return result;
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/MergedPlaylistManager.java,MergedPlaylistManager,addItem,"void addItem(List<PlaylistLocalItem>,PlaylistLocalItem,List<PlaylistLocalItem>)","[75, 86]","{'A305': [(75, 86)]}",{'A305': 1.0},A305,,"    private static void addItem(final List<PlaylistLocalItem> result,
                                final PlaylistLocalItem item,
                                final List<PlaylistLocalItem> itemsWithSameIndex) {
        if (!itemsWithSameIndex.isEmpty()
                && itemsWithSameIndex.get(0).getDisplayIndex() != item.getDisplayIndex()) {
            // The new item has a different display index, add previous items with same
            // index to the result.
            addItemsWithSameIndex(result, itemsWithSameIndex);
            itemsWithSameIndex.clear();
        }
        itemsWithSameIndex.add(item);
    }
"
org.schabi.newpipe.local.bookmark,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/bookmark/MergedPlaylistManager.java,MergedPlaylistManager,addItemsWithSameIndex,"void addItemsWithSameIndex(List<PlaylistLocalItem>,List<PlaylistLocalItem>)","[88, 94]","{'A305': [(88, 94)]}",{'A305': 1.0},A305,,"    private static void addItemsWithSameIndex(final List<PlaylistLocalItem> result,
                                              final List<PlaylistLocalItem> itemsWithSameIndex) {
        Collections.sort(itemsWithSameIndex,
                Comparator.comparing(PlaylistLocalItem::getOrderingName,
                        Comparator.nullsLast(String.CASE_INSENSITIVE_ORDER)));
        result.addAll(itemsWithSameIndex);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,onCreate,void onCreate(Bundle),"[61, 67]","{'A310': [(61, 61), (63, 64)], 'A341': [(65, 67)], 'A294': [(62, 62)]}","{'A310': 0.42857142857142855, 'A341': 0.42857142857142855, 'A294': 0.14285714285714285}",A310,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);
        PreferenceManager.getDefaultSharedPreferences(activity)
                .registerOnSharedPreferenceChangeListener(this);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,onDestroy,void onDestroy(),"[69, 74]","{'A341': [(69, 74)]}",{'A341': 1.0},A341,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        PreferenceManager.getDefaultSharedPreferences(activity)
                .unregisterOnSharedPreferenceChangeListener(this);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,onResume,void onResume(),"[76, 85]","{'A310': [(85, 85)], 'A341': [(76, 80), (82, 84)], 'A339': [(81, 81)]}","{'A310': 0.1, 'A341': 0.8, 'A339': 0.1}",A341,,"    @Override
    public void onResume() {
        super.onResume();
        if (updateFlags != 0) {
            if ((updateFlags & LIST_MODE_UPDATE_FLAG) != 0) {
                refreshItemViewMode();
            }
            updateFlags = 0;
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,refreshItemViewMode,void refreshItemViewMode(),"[90, 96]","{'A339': [(90, 96)]}",{'A339': 1.0},A339,,"    private void refreshItemViewMode() {
        final ItemViewMode itemViewMode = getItemViewMode(requireContext());
        itemsList.setLayoutManager((itemViewMode == ItemViewMode.GRID)
                ? getGridLayoutManager() : getListLayoutManager());
        itemListAdapter.setItemViewMode(itemViewMode);
        itemListAdapter.notifyDataSetChanged();
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,getListHeader,ViewBinding getListHeader(),"[102, 105]","{'A310': [(104, 105)], 'A295': [(102, 103)]}","{'A310': 0.5, 'A295': 0.5}",A310,,"    @Nullable
    protected ViewBinding getListHeader() {
        return null;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,getListFooter,ViewBinding getListFooter(),"[107, 109]","{'A310': [(109, 109)], 'A295': [(107, 108)]}","{'A310': 0.3333333333333333, 'A295': 0.6666666666666666}",A295,,"    protected ViewBinding getListFooter() {
        return PignateFooterBinding.inflate(activity.getLayoutInflater(), itemsList, false);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,getGridLayoutManager,RecyclerView.LayoutManager getGridLayoutManager(),"[111, 119]","{'A341': [(111, 114), (116, 119)], 'A295': [(115, 115)]}","{'A341': 0.8888888888888888, 'A295': 0.1111111111111111}",A341,,"    protected RecyclerView.LayoutManager getGridLayoutManager() {
        final Resources resources = activity.getResources();
        int width = resources.getDimensionPixelSize(R.dimen.video_item_grid_thumbnail_image_width);
        width += (24 * resources.getDisplayMetrics().density);
        final int spanCount = Math.floorDiv(resources.getDisplayMetrics().widthPixels, width);
        final GridLayoutManager lm = new GridLayoutManager(activity, spanCount);
        lm.setSpanSizeLookup(itemListAdapter.getSpanSizeLookup(spanCount));
        return lm;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,getListLayoutManager,RecyclerView.LayoutManager getListLayoutManager(),"[121, 123]","{'A310': [(121, 123)]}",{'A310': 1.0},A310,,"    protected RecyclerView.LayoutManager getListLayoutManager() {
        return new LinearLayoutManager(activity);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,initViews,"void initViews(View,Bundle)","[125, 142]","{'A310': [(125, 125), (127, 128), (131, 131), (133, 133), (140, 142)], 'A341': [(129, 130)], 'A294': [(126, 126)], 'A295': [(134, 139)], 'A339': [(132, 132)]}","{'A310': 0.4444444444444444, 'A341': 0.1111111111111111, 'A294': 0.05555555555555555, 'A295': 0.3333333333333333, 'A339': 0.05555555555555555}",A310,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        itemListAdapter = new LocalItemListAdapter(activity);

        itemsList = rootView.findViewById(R.id.items_list);
        refreshItemViewMode();

        headerRootBinding = getListHeader();
        if (headerRootBinding != null) {
            itemListAdapter.setHeader(headerRootBinding.getRoot());
        }
        footerRootBinding = getListFooter();
        itemListAdapter.setFooter(footerRootBinding.getRoot());

        itemsList.setAdapter(itemListAdapter);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,initListeners,void initListeners(),"[144, 147]","{'A310': [(144, 147)]}",{'A310': 1.0},A310,,"    @Override
    protected void initListeners() {
        super.initListeners();
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[153, 168]","{'A310': [(153, 153), (156, 156), (161, 162), (166, 168)], 'A299': [(154, 155)], 'A294': [(157, 160), (163, 165)]}","{'A310': 0.4375, 'A299': 0.125, 'A294': 0.4375}",A310,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        if (DEBUG) {
            Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                    + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
        }

        final ActionBar supportActionBar = activity.getSupportActionBar();
        if (supportActionBar == null) {
            return;
        }

        supportActionBar.setDisplayShowTitleEnabled(true);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,onDestroyView,void onDestroyView(),"[174, 179]","{'A310': [(174, 179)]}",{'A310': 1.0},A310,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        itemsList = null;
        itemListAdapter = null;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,startLoading,void startLoading(boolean),"[185, 189]","{'A310': [(185, 185), (187, 189)], 'A294': [(186, 186)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);
        resetFragment();
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,showLoading,void showLoading(),"[191, 197]","{'A310': [(191, 193), (197, 197)], 'A294': [(194, 194), (196, 196)], 'A305': [(195, 195)]}","{'A310': 0.5714285714285714, 'A294': 0.2857142857142857, 'A305': 0.14285714285714285}",A310,,"    @Override
    public void showLoading() {
        super.showLoading();
        if (itemsList != null) {
            animateHideRecyclerViewAllowingScrolling(itemsList);
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,hideLoading,void hideLoading(),"[199, 205]","{'A310': [(199, 201), (205, 205)], 'A294': [(202, 202), (204, 204)], 'A295': [(203, 203)]}","{'A310': 0.5714285714285714, 'A294': 0.2857142857142857, 'A295': 0.14285714285714285}",A310,,"    @Override
    public void hideLoading() {
        super.hideLoading();
        if (itemsList != null) {
            animate(itemsList, true, 200);
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,showEmptyState,void showEmptyState(),"[207, 211]","{'A310': [(207, 211)]}",{'A310': 1.0},A310,,"    @Override
    public void showEmptyState() {
        super.showEmptyState();
        showListFooter(false);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,showListFooter,void showListFooter(boolean),"[213, 223]","{'A310': [(213, 214), (218, 218), (222, 223)], 'A294': [(215, 217), (219, 221)]}","{'A310': 0.45454545454545453, 'A294': 0.5454545454545454}",A294,,"    @Override
    public void showListFooter(final boolean show) {
        if (itemsList == null) {
            return;
        }
        itemsList.post(() -> {
            if (itemListAdapter != null) {
                itemListAdapter.showFooter(show);
            }
        });
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,handleNextItems,void handleNextItems(N),"[225, 228]","{'A310': [(225, 225), (227, 228)], 'A294': [(226, 226)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"    @Override
    public void handleNextItems(final N result) {
        isLoading.set(false);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,resetFragment,void resetFragment(),"[234, 238]","{'A310': [(234, 234), (238, 238)], 'A294': [(235, 237)]}","{'A310': 0.4, 'A294': 0.6}",A294,,"    protected void resetFragment() {
        if (itemListAdapter != null) {
            itemListAdapter.clearStreamItemList();
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,handleError,void handleError(),"[240, 250]","{'A310': [(240, 240), (243, 243), (250, 250)], 'A305': [(241, 242), (244, 249)]}","{'A310': 0.2727272727272727, 'A305': 0.7272727272727273}",A305,,"    @Override
    public void handleError() {
        super.handleError();
        resetFragment();

        showListFooter(false);

        if (itemsList != null) {
            animateHideRecyclerViewAllowingScrolling(itemsList);
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/BaseLocalListFragment.java,BaseLocalListFragment,onSharedPreferenceChanged,"void onSharedPreferenceChanged(SharedPreferences,String)","[252, 258]","{'A341': [(252, 252), (256, 258)], 'A294': [(253, 254)], 'A305': [(255, 255)]}","{'A341': 0.5714285714285714, 'A294': 0.2857142857142857, 'A305': 0.14285714285714285}",A341,,"    @Override
    public void onSharedPreferenceChanged(final SharedPreferences sharedPreferences,
                                          final String key) {
        if (getString(R.string.list_view_mode_key).equals(key)) {
            updateFlags |= LIST_MODE_UPDATE_FLAG;
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getInstance,"LocalPlaylistFragment getInstance(long,String)","[113, 117]","{'A310': [(115, 117)], 'A294': [(113, 114)]}","{'A310': 0.6, 'A294': 0.4}",A310,,"    public static LocalPlaylistFragment getInstance(final long playlistId, final String name) {
        final LocalPlaylistFragment instance = new LocalPlaylistFragment();
        instance.setInitialData(playlistId, name);
        return instance;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onCreate,void onCreate(Bundle),"[123, 132]","{'A310': [(123, 123), (125, 125), (127, 130), (132, 132)], 'A305': [(126, 126)], 'A352': [(131, 131)], 'A294': [(124, 124)]}","{'A310': 0.7, 'A305': 0.1, 'A352': 0.1, 'A294': 0.1}",A310,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        playlistManager = new LocalPlaylistManager(NewPipeDatabase.getInstance(requireContext()));

        disposables = new CompositeDisposable();

        isLoadingComplete = new AtomicBoolean();
        debounceSaver = new DebounceSaver(this);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[134, 139]","{'A310': [(134, 134), (138, 139)], 'A294': [(135, 137)]}","{'A310': 0.5, 'A294': 0.5}",A310,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_playlist, container, false);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,setTitle,void setTitle(String),"[145, 152]","{'A310': [(145, 148), (151, 152)], 'A295': [(149, 150)]}","{'A310': 0.75, 'A295': 0.25}",A310,,"    @Override
    public void setTitle(final String title) {
        super.setTitle(title);

        if (headerBinding != null) {
            headerBinding.playlistTitleView.setText(title);
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,initViews,"void initViews(View,Bundle)","[154, 158]","{'A310': [(154, 154), (156, 158)], 'A294': [(155, 155)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);
        setTitle(name);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getListHeader,ViewBinding getListHeader(),"[160, 169]","{'A310': [(160, 160), (165, 165), (167, 167), (169, 169)], 'A295': [(161, 164), (166, 166), (168, 168)]}","{'A310': 0.4, 'A295': 0.6}",A295,,"    @Override
    protected ViewBinding getListHeader() {
        headerBinding = LocalPlaylistHeaderBinding.inflate(activity.getLayoutInflater(), itemsList,
                false);
        playlistControlBinding = headerBinding.playlistControl;

        headerBinding.playlistTitleView.setSelected(true);

        return headerBinding;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,initListeners,void initListeners(),"[171, 206]","{'A310': [(171, 174), (176, 179), (181, 181), (183, 183), (188, 191), (193, 193), (195, 198), (204, 206)], 'A298': [(194, 194)], 'A295': [(175, 175), (180, 180)], 'A305': [(184, 187)], 'A294': [(182, 182), (192, 192), (199, 203)]}","{'A310': 0.6111111111111112, 'A298': 0.027777777777777776, 'A295': 0.05555555555555555, 'A305': 0.1111111111111111, 'A294': 0.19444444444444445}",A310,,"    @Override
    protected void initListeners() {
        super.initListeners();

        headerBinding.playlistTitleView.setOnClickListener(view -> createRenameDialog());

        itemTouchHelper = new ItemTouchHelper(getItemTouchCallback());
        itemTouchHelper.attachToRecyclerView(itemsList);

        itemListAdapter.setSelectedListener(new OnClickGesture<>() {
            @Override
            public void selected(final LocalItem selectedItem) {
                if (selectedItem instanceof PlaylistStreamEntry) {
                    final StreamEntity item =
                            ((PlaylistStreamEntry) selectedItem).getStreamEntity();
                    NavigationHelper.openVideoDetailFragment(requireContext(), getFM(),
                            item.getServiceId(), item.getUrl(), item.getTitle(), null, false);
                }
            }

            @Override
            public void held(final LocalItem selectedItem) {
                if (selectedItem instanceof PlaylistStreamEntry) {
                    showInfoItemDialog((PlaylistStreamEntry) selectedItem);
                }
            }

            @Override
            public void drag(final LocalItem selectedItem,
                             final RecyclerView.ViewHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
        });
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,selected,void selected(LocalItem),"[181, 189]","{'A310': [(181, 181), (183, 183), (188, 189)], 'A305': [(184, 187)], 'A294': [(182, 182)]}","{'A310': 0.4444444444444444, 'A305': 0.4444444444444444, 'A294': 0.1111111111111111}",A310,,"            @Override
            public void selected(final LocalItem selectedItem) {
                if (selectedItem instanceof PlaylistStreamEntry) {
                    final StreamEntity item =
                            ((PlaylistStreamEntry) selectedItem).getStreamEntity();
                    NavigationHelper.openVideoDetailFragment(requireContext(), getFM(),
                            item.getServiceId(), item.getUrl(), item.getTitle(), null, false);
                }
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,held,void held(LocalItem),"[191, 196]","{'A310': [(191, 191), (193, 193), (195, 196)], 'A298': [(194, 194)], 'A294': [(192, 192)]}","{'A310': 0.6666666666666666, 'A298': 0.16666666666666666, 'A294': 0.16666666666666666}",A310,,"            @Override
            public void held(final LocalItem selectedItem) {
                if (selectedItem instanceof PlaylistStreamEntry) {
                    showInfoItemDialog((PlaylistStreamEntry) selectedItem);
                }
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,drag,"void drag(LocalItem,RecyclerView.ViewHolder)","[198, 204]","{'A310': [(198, 198), (204, 204)], 'A294': [(199, 203)]}","{'A310': 0.2857142857142857, 'A294': 0.7142857142857143}",A294,,"            @Override
            public void drag(final LocalItem selectedItem,
                             final RecyclerView.ViewHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,showLoading,void showLoading(),"[212, 219]","{'A310': [(212, 214), (219, 219)], 'A295': [(215, 217)], 'A294': [(218, 218)]}","{'A310': 0.5, 'A295': 0.375, 'A294': 0.125}",A310,,"    @Override
    public void showLoading() {
        super.showLoading();
        if (headerBinding != null) {
            animate(headerBinding.getRoot(), false, 200);
            animate(playlistControlBinding.getRoot(), false, 200);
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,hideLoading,void hideLoading(),"[221, 228]","{'A310': [(221, 223), (228, 228)], 'A295': [(224, 226)], 'A294': [(227, 227)]}","{'A310': 0.5, 'A295': 0.375, 'A294': 0.125}",A310,,"    @Override
    public void hideLoading() {
        super.hideLoading();
        if (headerBinding != null) {
            animate(headerBinding.getRoot(), true, 200);
            animate(playlistControlBinding.getRoot(), true, 200);
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,startLoading,void startLoading(boolean),"[230, 249]","{'A310': [(230, 230), (232, 233), (242, 249)], 'A352': [(237, 241)], 'A294': [(231, 231), (234, 236)]}","{'A310': 0.55, 'A352': 0.25, 'A294': 0.2}",A310,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);

        if (disposables != null) {
            disposables.clear();
        }

        if (debounceSaver != null) {
            disposables.add(debounceSaver.getDebouncedSaver());
            debounceSaver.setNoChangesToSave();
        }

        isLoadingComplete.set(false);

        playlistManager.getPlaylistStreams(playlistId)
                .onBackpressureLatest()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getPlaylistObserver());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onPause,void onPause(),"[255, 262]","{'A310': [(255, 262)]}",{'A310': 1.0},A310,,"    @Override
    public void onPause() {
        super.onPause();
        itemsListState = itemsList.getLayoutManager().onSaveInstanceState();

        // Save on exit
        saveImmediate();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[264, 273]","{'A299': [(265, 266)], 'A359': [(264, 264), (268, 269), (271, 273)], 'A305': [(267, 267), (270, 270)]}","{'A299': 0.2, 'A359': 0.6, 'A305': 0.2}",A359,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                    + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
        }
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.menu_local_playlist, menu);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onDestroyView,void onDestroyView(),"[275, 296]","{'A310': [(275, 278), (286, 286), (293, 296)], 'A298': [(283, 285)], 'A295': [(282, 282)], 'A294': [(279, 281), (287, 292)]}","{'A310': 0.4090909090909091, 'A298': 0.13636363636363635, 'A295': 0.045454545454545456, 'A294': 0.4090909090909091}",A310,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();

        if (itemListAdapter != null) {
            itemListAdapter.unsetSelectedListener();
        }

        headerBinding = null;
        playlistControlBinding = null;


        if (databaseSubscription != null) {
            databaseSubscription.cancel();
        }
        if (disposables != null) {
            disposables.clear();
        }

        databaseSubscription = null;
        itemTouchHelper = null;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onDestroy,void onDestroy(),"[298, 316]","{'A310': [(298, 300), (310, 310), (312, 316)], 'A298': [(307, 309)], 'A352': [(301, 302), (311, 311)], 'A294': [(303, 306)]}","{'A310': 0.47368421052631576, 'A298': 0.15789473684210525, 'A352': 0.15789473684210525, 'A294': 0.21052631578947367}",A310,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (debounceSaver != null) {
            debounceSaver.getDebouncedSaveSignal().onComplete();
        }
        if (disposables != null) {
            disposables.dispose();
        }
        if (tabsPagerAdapter != null) {
            tabsPagerAdapter.getLocalPlaylistFragments().remove(this);
        }

        debounceSaver = null;
        playlistManager = null;
        disposables = null;

        isLoadingComplete = null;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getPlaylistObserver,Subscriber<List<PlaylistStreamEntry>> getPlaylistObserver(),"[322, 359]","{'A310': [(322, 322), (324, 324), (326, 328), (332, 336), (338, 338), (340, 343), (347, 349), (353, 355), (358, 359)], 'A295': [(323, 323)], 'A305': [(351, 352)], 'A352': [(339, 339)], 'A294': [(325, 325), (329, 331), (337, 337), (344, 346), (350, 350)], 'A361': [(356, 357)]}","{'A310': 0.6052631578947368, 'A295': 0.02631578947368421, 'A305': 0.05263157894736842, 'A352': 0.02631578947368421, 'A294': 0.23684210526315788, 'A361': 0.05263157894736842}",A310,,"    private Subscriber<List<PlaylistStreamEntry>> getPlaylistObserver() {
        return new Subscriber<>() {
            @Override
            public void onSubscribe(final Subscription s) {
                showLoading();
                isLoadingComplete.set(false);

                if (databaseSubscription != null) {
                    databaseSubscription.cancel();
                }
                databaseSubscription = s;
                databaseSubscription.request(1);
            }

            @Override
            public void onNext(final List<PlaylistStreamEntry> streams) {
                // Skip handling the result after it has been modified
                if (debounceSaver == null || !debounceSaver.getIsModified()) {
                    handleResult(streams);
                    isLoadingComplete.set(true);
                }

                if (databaseSubscription != null) {
                    databaseSubscription.request(1);
                }
            }

            @Override
            public void onError(final Throwable exception) {
                showError(new ErrorInfo(exception, UserAction.REQUESTED_BOOKMARK,
                        ""Loading local playlist""));
            }

            @Override
            public void onComplete() {
            }
        };
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onSubscribe,void onSubscribe(Subscription),"[324, 334]","{'A310': [(324, 324), (326, 328), (332, 334)], 'A294': [(325, 325), (329, 331)]}","{'A310': 0.6363636363636364, 'A294': 0.36363636363636365}",A310,,"            @Override
            public void onSubscribe(final Subscription s) {
                showLoading();
                isLoadingComplete.set(false);

                if (databaseSubscription != null) {
                    databaseSubscription.cancel();
                }
                databaseSubscription = s;
                databaseSubscription.request(1);
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onNext,void onNext(List<PlaylistStreamEntry>),"[336, 347]","{'A310': [(336, 336), (338, 338), (340, 343), (347, 347)], 'A352': [(339, 339)], 'A294': [(337, 337), (344, 346)]}","{'A310': 0.5833333333333334, 'A352': 0.08333333333333333, 'A294': 0.3333333333333333}",A310,,"            @Override
            public void onNext(final List<PlaylistStreamEntry> streams) {
                // Skip handling the result after it has been modified
                if (debounceSaver == null || !debounceSaver.getIsModified()) {
                    handleResult(streams);
                    isLoadingComplete.set(true);
                }

                if (databaseSubscription != null) {
                    databaseSubscription.request(1);
                }
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onError,void onError(Throwable),"[349, 353]","{'A310': [(349, 349), (353, 353)], 'A305': [(351, 352)], 'A294': [(350, 350)]}","{'A310': 0.4, 'A305': 0.4, 'A294': 0.2}",A310,,"            @Override
            public void onError(final Throwable exception) {
                showError(new ErrorInfo(exception, UserAction.REQUESTED_BOOKMARK,
                        ""Loading local playlist""));
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onComplete,void onComplete(),"[355, 357]","{'A310': [(355, 355)], 'A361': [(356, 357)]}","{'A310': 0.3333333333333333, 'A361': 0.6666666666666666}",A361,,"            @Override
            public void onComplete() {
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[361, 389]","{'A310': [(361, 361)], 'A358': [(363, 363), (365, 367)], 'A299': [(372, 373), (376, 376), (378, 378)], 'A359': [(387, 389)], 'A350': [(368, 368), (381, 384)], 'A305': [(362, 362), (369, 371), (374, 375), (377, 377), (379, 380), (385, 386)], 'A360': [(364, 364)]}","{'A310': 0.034482758620689655, 'A358': 0.13793103448275862, 'A299': 0.13793103448275862, 'A359': 0.10344827586206896, 'A350': 0.1724137931034483, 'A305': 0.3793103448275862, 'A360': 0.034482758620689655}",A305,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        if (item.getItemId() == R.id.menu_item_share_playlist) {
            createShareConfirmationDialog();
        } else if (item.getItemId() == R.id.menu_item_rename_playlist) {
            createRenameDialog();
        } else if (item.getItemId() == R.id.menu_item_remove_watched) {
            if (!isRewritingPlaylist) {
                new AlertDialog.Builder(requireContext())
                        .setMessage(R.string.remove_watched_popup_warning)
                        .setTitle(R.string.remove_watched_popup_title)
                        .setPositiveButton(R.string.ok, (d, id) ->
                                removeWatchedStreams(false))
                        .setNeutralButton(
                                R.string.remove_watched_popup_yes_and_partially_watched_videos,
                                (d, id) -> removeWatchedStreams(true))
                        .setNegativeButton(R.string.cancel,
                                (d, id) -> d.cancel())
                        .show();
            }
        } else if (item.getItemId() == R.id.menu_item_remove_duplicates) {
            if (!isRewritingPlaylist) {
                openRemoveDuplicatesDialog();
            }
        } else {
            return super.onOptionsItemSelected(item);
        }
        return true;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,sharePlaylist,void sharePlaylist(PlayListShareMode),"[401, 427]","{'A358': [(404, 404)], 'A357': [(401, 401), (405, 427)], 'A360': [(402, 403)]}","{'A358': 0.037037037037037035, 'A357': 0.8888888888888888, 'A360': 0.07407407407407407}",A357,,"    private void sharePlaylist(final PlayListShareMode shareMode) {
        final Context context = requireContext();

        disposables.add(playlistManager.getPlaylistStreams(playlistId)
            .flatMapSingle(playlist -> Single.just(export(

                shareMode,
                playlist,
                context
            )))
            .observeOn(AndroidSchedulers.mainThread())
            .subscribe(
                urlsText -> {

                    final String content = shareMode == WITH_TITLES
                        ? context.getString(R.string.share_playlist_content_details,
                                            name,
                                            urlsText
                                           )
                        : urlsText;

                    ShareUtils.shareText(context, name, content);
                },
                throwable -> showUiErrorSnackbar(this, ""Sharing playlist"", throwable)
            )
        );
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,removeWatchedStreams,void removeWatchedStreams(boolean),"[429, 514]","{'A295': [(436, 444), (452, 452), (465, 470), (488, 490), (494, 494)], 'A359': [(429, 429), (432, 432), (435, 435), (445, 445), (449, 451), (454, 456), (461, 464), (471, 473), (482, 484), (491, 491), (495, 495), (499, 499), (503, 504), (509, 509), (514, 514)], 'A350': [(430, 430), (433, 433), (446, 448), (457, 460), (478, 481), (487, 487), (493, 493), (497, 497), (511, 511)], 'A305': [(431, 431), (434, 434), (475, 475), (485, 486), (492, 492), (496, 496), (500, 502), (506, 508), (510, 510), (512, 513)], 'A352': [(498, 498)], 'A294': [(453, 453)], 'A362': [(474, 474), (476, 477)], 'A363': [(505, 505)]}","{'A295': 0.23255813953488372, 'A359': 0.313953488372093, 'A350': 0.19767441860465115, 'A305': 0.18604651162790697, 'A352': 0.011627906976744186, 'A294': 0.011627906976744186, 'A362': 0.03488372093023256, 'A363': 0.011627906976744186}",A359,,"    public void removeWatchedStreams(final boolean removePartiallyWatched) {
        if (isRewritingPlaylist) {
            return;
        }
        isRewritingPlaylist = true;
        showLoading();

        final var recordManager = new HistoryRecordManager(getContext());
        final var historyIdsMaybe = recordManager.getStreamHistorySortedById()
                .firstElement()
                // already sorted by ^ getStreamHistorySortedById(), binary search can be used
                .map(historyList -> historyList.stream().map(StreamHistoryEntry::getStreamId)
                        .collect(Collectors.toList()));
        final var streamsMaybe = playlistManager.getPlaylistStreams(playlistId)
                .firstElement()
                .zipWith(historyIdsMaybe, (playlist, historyStreamIds) -> {
                    // Remove Watched, Functionality data
                    final List<PlaylistStreamEntry> itemsToKeep = new ArrayList<>();
                    final boolean isThumbnailPermanent = playlistManager
                            .getIsPlaylistThumbnailPermanent(playlistId);
                    boolean thumbnailVideoRemoved = false;

                    if (removePartiallyWatched) {
                        for (final var playlistItem : playlist) {
                            final int indexInHistory = Collections.binarySearch(historyStreamIds,
                                    playlistItem.getStreamId());

                            if (indexInHistory < 0) {
                                itemsToKeep.add(playlistItem);
                            } else if (!isThumbnailPermanent && !thumbnailVideoRemoved
                                    && playlistManager.getPlaylistThumbnailStreamId(playlistId)
                                    == playlistItem.getStreamEntity().getUid()) {
                                thumbnailVideoRemoved = true;
                            }
                        }
                    } else {
                        final var streamStates = recordManager
                                .loadLocalStreamStateBatch(playlist).blockingGet();

                        for (int i = 0; i < playlist.size(); i++) {
                            final var playlistItem = playlist.get(i);
                            final var streamStateEntity = streamStates.get(i);

                            final int indexInHistory = Collections.binarySearch(historyStreamIds,
                                    playlistItem.getStreamId());
                            final long duration = playlistItem.toStreamInfoItem().getDuration();

                            if (indexInHistory < 0 || (streamStateEntity != null
                                    && !streamStateEntity.isFinished(duration))) {
                                itemsToKeep.add(playlistItem);
                            } else if (!isThumbnailPermanent && !thumbnailVideoRemoved
                                    && playlistManager.getPlaylistThumbnailStreamId(playlistId)
                                    == playlistItem.getStreamEntity().getUid()) {
                                thumbnailVideoRemoved = true;
                            }
                        }
                    }

                    return new Pair<>(itemsToKeep, thumbnailVideoRemoved);
                });

        disposables.add(streamsMaybe.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(flow -> {
                    final List<PlaylistStreamEntry> itemsToKeep = flow.first;
                    final boolean thumbnailVideoRemoved = flow.second;

                    itemListAdapter.clearStreamItemList();
                    itemListAdapter.addItems(itemsToKeep);
                    debounceSaver.setHasChangesToSave();

                    if (thumbnailVideoRemoved) {
                        updateThumbnailUrl();
                    }

                    final long videoCount = itemListAdapter.getItemsList().size();
                    setStreamCountAndOverallDuration(itemListAdapter.getItemsList());
                    if (videoCount == 0) {
                        showEmptyState();
                    }

                    hideLoading();
                    isRewritingPlaylist = false;
                }, throwable -> showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                        ""Removing watched videos, partially watched="" + removePartiallyWatched))));
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,handleResult,void handleResult(List<PlaylistStreamEntry>),"[516, 540]","{'A310': [(516, 516), (518, 518), (522, 534), (536, 536), (539, 540)], 'A298': [(537, 537)], 'A294': [(517, 517), (519, 521)], 'A363': [(535, 535)], 'A364': [(538, 538)]}","{'A310': 0.72, 'A298': 0.04, 'A294': 0.16, 'A363': 0.04, 'A364': 0.04}",A310,,"    @Override
    public void handleResult(@NonNull final List<PlaylistStreamEntry> result) {
        super.handleResult(result);
        if (itemListAdapter == null) {
            return;
        }

        itemListAdapter.clearStreamItemList();

        if (result.isEmpty()) {
            showEmptyState();
            return;
        }

        itemListAdapter.addItems(result);
        if (itemsListState != null) {
            itemsList.getLayoutManager().onRestoreInstanceState(itemsListState);
            itemsListState = null;
        }
        setStreamCountAndOverallDuration(itemListAdapter.getItemsList());

        PlayButtonHelper.initPlaylistControlClickListener(activity, playlistControlBinding, this);

        hideLoading();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,resetFragment,void resetFragment(),"[546, 552]","{'A310': [(546, 548), (552, 552)], 'A294': [(549, 551)]}","{'A310': 0.5714285714285714, 'A294': 0.42857142857142855}",A310,,"    @Override
    protected void resetFragment() {
        super.resetFragment();
        if (databaseSubscription != null) {
            databaseSubscription.cancel();
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,createRenameDialog,void createRenameDialog(),"[558, 578]","{'A310': [(558, 558), (562, 562), (569, 569), (571, 571), (573, 574), (578, 578)], 'A299': [(565, 568), (570, 570), (572, 572), (575, 577)], 'A300': [(563, 564)], 'A294': [(559, 561)]}","{'A310': 0.3333333333333333, 'A299': 0.42857142857142855, 'A300': 0.09523809523809523, 'A294': 0.14285714285714285}",A299,,"    private void createRenameDialog() {
        if (playlistId == null || name == null || getContext() == null) {
            return;
        }

        final DialogEditTextBinding dialogBinding =
                DialogEditTextBinding.inflate(getLayoutInflater());
        dialogBinding.dialogEditText.setHint(R.string.name);
        dialogBinding.dialogEditText.setInputType(InputType.TYPE_CLASS_TEXT);
        dialogBinding.dialogEditText.setSelection(dialogBinding.dialogEditText.getText().length());
        dialogBinding.dialogEditText.setText(name);

        new AlertDialog.Builder(getContext())
                .setTitle(R.string.rename_playlist)
                .setView(dialogBinding.getRoot())
                .setCancelable(true)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.rename, (dialogInterface, i) ->
                        changePlaylistName(dialogBinding.dialogEditText.getText().toString()))
                .show();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,changePlaylistName,void changePlaylistName(String),"[580, 599]","{'A310': [(584, 584), (587, 587), (592, 592), (594, 594), (598, 599)], 'A305': [(595, 597)], 'A294': [(580, 583), (585, 586), (589, 590), (593, 593)], 'A356': [(588, 588), (591, 591)]}","{'A310': 0.3, 'A305': 0.15, 'A294': 0.45, 'A356': 0.1}",A294,,"    private void changePlaylistName(final String title) {
        if (playlistManager == null) {
            return;
        }

        this.name = title;
        setTitle(title);

        if (DEBUG) {
            Log.d(TAG, ""Updating playlist id=["" + playlistId + ""] ""
                    + ""with new title=["" + title + ""] items"");
        }

        final Disposable disposable = playlistManager.renamePlaylist(playlistId, title)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(longs -> { /*Do nothing on success*/ }, throwable ->
                        showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                                ""Renaming playlist"")));
        disposables.add(disposable);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,changeThumbnailStreamId,"void changeThumbnailStreamId(long,boolean)","[601, 623]","{'A310': [(606, 610), (615, 616), (618, 618), (622, 623)], 'A350': [(601, 603), (613, 613), (617, 617)], 'A305': [(619, 621)], 'A294': [(604, 605), (612, 612)], 'A356': [(611, 611), (614, 614)]}","{'A310': 0.43478260869565216, 'A350': 0.21739130434782608, 'A305': 0.13043478260869565, 'A294': 0.13043478260869565, 'A356': 0.08695652173913043}",A310,,"    private void changeThumbnailStreamId(final long thumbnailStreamId, final boolean isPermanent) {
        if (playlistManager == null || (!isPermanent && playlistManager
                .getIsPlaylistThumbnailPermanent(playlistId))) {
            return;
        }

        final Toast successToast = Toast.makeText(getActivity(),
                R.string.playlist_thumbnail_change_success,
                Toast.LENGTH_SHORT);

        if (DEBUG) {
            Log.d(TAG, ""Updating playlist id=["" + playlistId + ""] ""
                    + ""with new thumbnail stream id=["" + thumbnailStreamId + ""]"");
        }

        final Disposable disposable = playlistManager
                .changePlaylistThumbnail(playlistId, thumbnailStreamId, isPermanent)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignore -> successToast.show(), throwable ->
                        showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                                ""Changing playlist thumbnail"")));
        disposables.add(disposable);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,updateThumbnailUrl,void updateThumbnailUrl(),"[625, 640]","{'A298': [(632, 632), (635, 635)], 'A350': [(626, 630), (633, 634), (636, 636), (639, 639)], 'A354': [(625, 625), (631, 631), (637, 638), (640, 640)]}","{'A298': 0.125, 'A350': 0.5625, 'A354': 0.3125}",A350,,"    private void updateThumbnailUrl() {
        if (playlistManager.getIsPlaylistThumbnailPermanent(playlistId)) {
            return;
        }

        final long thumbnailStreamId;

        if (!itemListAdapter.getItemsList().isEmpty()) {
            thumbnailStreamId = ((PlaylistStreamEntry) itemListAdapter.getItemsList().get(0))
                    .getStreamEntity().getUid();
        } else {
            thumbnailStreamId = PlaylistEntity.DEFAULT_THUMBNAIL_ID;
        }

        changeThumbnailStreamId(thumbnailStreamId, false);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,openRemoveDuplicatesDialog,void openRemoveDuplicatesDialog(),"[642, 650]","{'A299': [(643, 644), (646, 649)], 'A350': [(642, 642), (645, 645), (650, 650)]}","{'A299': 0.6666666666666666, 'A350': 0.3333333333333333}",A299,,"    private void openRemoveDuplicatesDialog() {
        new AlertDialog.Builder(this.getActivity())
                .setTitle(R.string.remove_duplicates_title)
                .setMessage(R.string.remove_duplicates_message)
                .setPositiveButton(R.string.ok, (dialog, i) ->
                        removeDuplicatesInPlaylist())
                .setNeutralButton(R.string.cancel, null)
                .show();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,removeDuplicatesInPlaylist,void removeDuplicatesInPlaylist(),"[652, 675]","{'A350': [(652, 654), (656, 667), (671, 674)], 'A305': [(669, 669)], 'A363': [(668, 668)], 'A354': [(655, 655), (670, 670), (675, 675)]}","{'A350': 0.7916666666666666, 'A305': 0.041666666666666664, 'A363': 0.041666666666666664, 'A354': 0.125}",A350,,"    private void removeDuplicatesInPlaylist() {
        if (isRewritingPlaylist) {
            return;
        }
        isRewritingPlaylist = true;
        showLoading();

        final var streamsMaybe = playlistManager
                .getDistinctPlaylistStreams(playlistId).firstElement();


        disposables.add(streamsMaybe.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(itemsToKeep -> {
                    itemListAdapter.clearStreamItemList();
                    itemListAdapter.addItems(itemsToKeep);
                    setStreamCountAndOverallDuration(itemListAdapter.getItemsList());
                    debounceSaver.setHasChangesToSave();

                    hideLoading();
                    isRewritingPlaylist = false;
                }, throwable -> showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                        ""Removing duplicated streams""))));
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,deleteItem,void deleteItem(PlaylistStreamEntry),"[677, 689]","{'A310': [(677, 677), (681, 682), (689, 689)], 'A350': [(683, 683)], 'A352': [(688, 688)], 'A294': [(678, 680), (685, 685)], 'A363': [(687, 687)], 'A354': [(684, 684), (686, 686)]}","{'A310': 0.3076923076923077, 'A350': 0.07692307692307693, 'A352': 0.07692307692307693, 'A294': 0.3076923076923077, 'A363': 0.07692307692307693, 'A354': 0.15384615384615385}",A310,,"    private void deleteItem(final PlaylistStreamEntry item) {
        if (itemListAdapter == null) {
            return;
        }

        itemListAdapter.removeItem(item);
        if (playlistManager.getPlaylistThumbnailStreamId(playlistId) == item.getStreamId()) {
            updateThumbnailUrl();
        }

        setStreamCountAndOverallDuration(itemListAdapter.getItemsList());
        debounceSaver.setHasChangesToSave();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,saveImmediate,void saveImmediate(),"[696, 733]","{'A310': [(701, 702), (705, 708), (710, 711), (713, 715), (720, 723), (731, 733)], 'A305': [(729, 730)], 'A352': [(696, 697), (703, 704), (725, 726)], 'A294': [(698, 700), (709, 709), (717, 718), (724, 724), (727, 728)], 'A356': [(716, 716), (719, 719)], 'A301': [(712, 712)]}","{'A310': 0.47368421052631576, 'A305': 0.05263157894736842, 'A352': 0.15789473684210525, 'A294': 0.23684210526315788, 'A356': 0.05263157894736842, 'A301': 0.02631578947368421}",A310,,"    @Override
    public void saveImmediate() {
        if (playlistManager == null || itemListAdapter == null) {
            return;
        }

        // List must be loaded and modified in order to save
        if (isLoadingComplete == null || debounceSaver == null
                || !isLoadingComplete.get() || !debounceSaver.getIsModified()) {
            return;
        }

        final List<LocalItem> items = itemListAdapter.getItemsList();
        final List<Long> streamIds = new ArrayList<>(items.size());
        for (final LocalItem item : items) {
            if (item instanceof PlaylistStreamEntry) {
                streamIds.add(((PlaylistStreamEntry) item).getStreamId());
            }
        }

        if (DEBUG) {
            Log.d(TAG, ""Updating playlist id=["" + playlistId + ""] ""
                    + ""with ["" + streamIds.size() + ""] items"");
        }

        final Disposable disposable = playlistManager.updateJoin(playlistId, streamIds)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        () -> {
                            if (debounceSaver != null) {
                                debounceSaver.setNoChangesToSave();
                            }
                        },
                        throwable -> showError(new ErrorInfo(throwable,
                                UserAction.REQUESTED_BOOKMARK, ""Saving playlist""))
                );
        disposables.add(disposable);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getItemTouchCallback,ItemTouchHelper.SimpleCallback getItemTouchCallback(),"[736, 789]","{'A310': [(736, 736), (742, 743), (751, 756), (762, 764), (767, 767), (771, 784), (788, 789)], 'A299': [(765, 766)], 'A305': [(738, 738), (744, 744), (757, 759), (785, 785)], 'A352': [(769, 769)], 'A294': [(745, 750), (760, 761), (768, 768), (770, 770)], 'A361': [(786, 787)], 'A365': [(737, 737), (739, 741)]}","{'A310': 0.5370370370370371, 'A299': 0.037037037037037035, 'A305': 0.1111111111111111, 'A352': 0.018518518518518517, 'A294': 0.18518518518518517, 'A361': 0.037037037037037035, 'A365': 0.07407407407407407}",A310,,"    private ItemTouchHelper.SimpleCallback getItemTouchCallback() {
        int directions = ItemTouchHelper.UP | ItemTouchHelper.DOWN;
        if (shouldUseGridLayout(requireContext())) {
            directions |= ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT;
        }
        return new ItemTouchHelper.SimpleCallback(directions,
                ItemTouchHelper.ACTION_STATE_IDLE) {
            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView,
                        viewSize, viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(MINIMUM_INITIAL_DRAG_VELOCITY,
                        Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }

            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {
                if (source.getItemViewType() != target.getItemViewType()
                        || itemListAdapter == null) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                final boolean isSwapped = itemListAdapter.swapItems(sourceIndex, targetIndex);
                if (isSwapped) {
                    debounceSaver.setHasChangesToSave();
                }
                return isSwapped;
            }

            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }

            @Override
            public boolean isItemViewSwipeEnabled() {
                return false;
            }

            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
            }
        };
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,interpolateOutOfBoundsScroll,"int interpolateOutOfBoundsScroll(RecyclerView,int,int,int,long)","[743, 754]","{'A310': [(743, 743), (751, 754)], 'A305': [(744, 744)], 'A294': [(745, 750)]}","{'A310': 0.4166666666666667, 'A305': 0.08333333333333333, 'A294': 0.5}",A294,,"            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView,
                        viewSize, viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(MINIMUM_INITIAL_DRAG_VELOCITY,
                        Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onMove,"boolean onMove(RecyclerView,RecyclerView.ViewHolder,RecyclerView.ViewHolder)","[756, 772]","{'A310': [(756, 756), (762, 764), (767, 767), (771, 772)], 'A299': [(765, 766)], 'A305': [(757, 759)], 'A352': [(769, 769)], 'A294': [(760, 761), (768, 768), (770, 770)]}","{'A310': 0.4117647058823529, 'A299': 0.11764705882352941, 'A305': 0.17647058823529413, 'A352': 0.058823529411764705, 'A294': 0.23529411764705882}",A310,,"            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {
                if (source.getItemViewType() != target.getItemViewType()
                        || itemListAdapter == null) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                final boolean isSwapped = itemListAdapter.swapItems(sourceIndex, targetIndex);
                if (isSwapped) {
                    debounceSaver.setHasChangesToSave();
                }
                return isSwapped;
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,isLongPressDragEnabled,boolean isLongPressDragEnabled(),"[774, 777]","{'A310': [(774, 777)]}",{'A310': 1.0},A310,,"            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,isItemViewSwipeEnabled,boolean isItemViewSwipeEnabled(),"[779, 782]","{'A310': [(779, 782)]}",{'A310': 1.0},A310,,"            @Override
            public boolean isItemViewSwipeEnabled() {
                return false;
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,onSwiped,"void onSwiped(RecyclerView.ViewHolder,int)","[784, 787]","{'A310': [(784, 784)], 'A305': [(785, 785)], 'A361': [(786, 787)]}","{'A310': 0.25, 'A305': 0.25, 'A361': 0.5}",A361,,"            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
            }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getPlayQueueStartingAt,PlayQueue getPlayQueueStartingAt(PlaylistStreamEntry),"[795, 797]","{'A305': [(796, 797)], 'A294': [(795, 795)]}","{'A305': 0.6666666666666666, 'A294': 0.3333333333333333}",A305,,"    private PlayQueue getPlayQueueStartingAt(final PlaylistStreamEntry infoItem) {
        return getPlayQueue(Math.max(itemListAdapter.getItemsList().indexOf(infoItem), 0));
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,showInfoItemDialog,void showInfoItemDialog(PlaylistStreamEntry),"[799, 833]","{'A310': [(800, 800), (833, 833)], 'A298': [(799, 799), (802, 822), (825, 832)], 'A350': [(823, 824)], 'A305': [(801, 801)]}","{'A310': 0.05714285714285714, 'A298': 0.8571428571428571, 'A350': 0.05714285714285714, 'A305': 0.02857142857142857}",A298,,"    protected void showInfoItemDialog(final PlaylistStreamEntry item) {
        final StreamInfoItem infoItem = item.toStreamInfoItem();

        try {
            final Context context = getContext();
            final InfoItemDialog.Builder dialogBuilder =
                    new InfoItemDialog.Builder(getActivity(), context, this, infoItem);

            // add entries in the middle
            dialogBuilder.addAllEntries(
                    StreamDialogDefaultEntry.SET_AS_PLAYLIST_THUMBNAIL,
                    StreamDialogDefaultEntry.DELETE
            );

            // set custom actions
            // all entries modified below have already been added within the builder
            dialogBuilder
                    .setAction(
                            StreamDialogDefaultEntry.START_HERE_ON_BACKGROUND,
                            (f, i) -> NavigationHelper.playOnBackgroundPlayer(
                                    context, getPlayQueueStartingAt(item), true))
                    .setAction(
                            StreamDialogDefaultEntry.SET_AS_PLAYLIST_THUMBNAIL,
                            (f, i) ->
                                    changeThumbnailStreamId(item.getStreamEntity().getUid(),
                                            true))
                    .setAction(
                            StreamDialogDefaultEntry.DELETE,
                            (f, i) -> deleteItem(item))
                    .create()
                    .show();
        } catch (final IllegalArgumentException e) {
            InfoItemDialog.Builder.reportErrorDuringInitialization(e, infoItem);
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,setInitialData,"void setInitialData(long,String)","[835, 838]","{'A310': [(838, 838)], 'A294': [(835, 837)]}","{'A310': 0.25, 'A294': 0.75}",A294,,"    private void setInitialData(final long pid, final String title) {
        this.playlistId = pid;
        this.name = !TextUtils.isEmpty(title) ? title : """";
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,setStreamCountAndOverallDuration,void setStreamCountAndOverallDuration(ArrayList<LocalItem>),"[840, 856]","{'A310': [(855, 856)], 'A295': [(841, 841)], 'A363': [(840, 840), (842, 854)]}","{'A310': 0.11764705882352941, 'A295': 0.058823529411764705, 'A363': 0.8235294117647058}",A363,,"    private void setStreamCountAndOverallDuration(final ArrayList<LocalItem> itemsList) {
        if (activity != null && headerBinding != null) {
            final long streamCount = itemsList.size();
            final long playlistOverallDurationSeconds = itemsList.stream()
                    .filter(PlaylistStreamEntry.class::isInstance)
                    .map(PlaylistStreamEntry.class::cast)
                    .map(PlaylistStreamEntry::getStreamEntity)
                    .mapToLong(StreamEntity::getDuration)
                    .sum();
            headerBinding.playlistStreamCount.setText(
                    Localization.concatenateStrings(
                            Localization.localizeStreamCount(activity, streamCount),
                            Localization.getDurationString(playlistOverallDurationSeconds,
                                                            true, true))
            );
        }
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getPlayQueue,PlayQueue getPlayQueue(),"[858, 861]","{'A310': [(860, 861)], 'A298': [(859, 859)], 'A300': [(858, 858)]}","{'A310': 0.5, 'A298': 0.25, 'A300': 0.25}",A310,,"    @Override
    public PlayQueue getPlayQueue() {
        return getPlayQueue(0);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,getPlayQueue,PlayQueue getPlayQueue(int),"[863, 876]","{'A310': [(863, 868), (870, 876)], 'A294': [(869, 869)]}","{'A310': 0.9285714285714286, 'A294': 0.07142857142857142}",A310,,"    private PlayQueue getPlayQueue(final int index) {
        if (itemListAdapter == null) {
            return new SinglePlayQueue(Collections.emptyList(), 0);
        }

        final List<LocalItem> infoItems = itemListAdapter.getItemsList();
        final List<StreamInfoItem> streamInfoItems = new ArrayList<>(infoItems.size());
        for (final LocalItem item : infoItems) {
            if (item instanceof PlaylistStreamEntry) {
                streamInfoItems.add(((PlaylistStreamEntry) item).toStreamInfoItem());
            }
        }
        return new SinglePlayQueue(streamInfoItems, index);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,createShareConfirmationDialog,void createShareConfirmationDialog(),"[883, 897]","{'A357': [(888, 891), (894, 894)], 'A360': [(883, 887), (892, 893), (895, 897)]}","{'A357': 0.3333333333333333, 'A360': 0.6666666666666666}",A360,,"    private void createShareConfirmationDialog() {
        new AlertDialog.Builder(requireContext())
                .setTitle(R.string.share_playlist)
                .setCancelable(true)
                .setPositiveButton(R.string.share_playlist_with_titles, (dialog, which) ->
                    sharePlaylist(WITH_TITLES)
                )
                .setNeutralButton(R.string.share_playlist_as_youtube_temporary_playlist,
                    (dialog, which) -> sharePlaylist(YOUTUBE_TEMP_PLAYLIST)
                )
                .setNegativeButton(R.string.share_playlist_with_list, (dialog, which) ->
                    sharePlaylist(JUST_URLS)
                )
                .show();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistFragment.java,LocalPlaylistFragment,setTabsPagerAdapter,void setTabsPagerAdapter(MainFragment.SelectedTabsPagerAdapter),"[899, 902]","{'A298': [(899, 902)]}",{'A298': 1.0},A298,,"    public void setTabsPagerAdapter(
            @Nullable final MainFragment.SelectedTabsPagerAdapter tabsPagerAdapter) {
        this.tabsPagerAdapter = tabsPagerAdapter;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,getPlaylists,Flowable<List<PlaylistRemoteEntity>> getPlaylists(),"[25, 27]","{'A310': [(25, 25)], 'A352': [(27, 27)], 'A305': [(26, 26)]}","{'A310': 0.3333333333333333, 'A352': 0.3333333333333333, 'A305': 0.3333333333333333}",A310,,"    public Flowable<List<PlaylistRemoteEntity>> getPlaylists() {
        return playlistRemoteTable.getPlaylists().subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,getPlaylist,Flowable<PlaylistRemoteEntity> getPlaylist(long),"[29, 31]","{'A305': [(29, 31)]}",{'A305': 1.0},A305,,"    public Flowable<PlaylistRemoteEntity> getPlaylist(final long playlistId) {
        return playlistRemoteTable.getPlaylist(playlistId).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,getPlaylist,Flowable<List<PlaylistRemoteEntity>> getPlaylist(PlaylistInfo),"[33, 36]","{'A310': [(33, 36)]}",{'A310': 1.0},A310,,"    public Flowable<List<PlaylistRemoteEntity>> getPlaylist(final PlaylistInfo info) {
        return playlistRemoteTable.getPlaylist(info.getServiceId(), info.getUrl())
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,deletePlaylist,Single<Integer> deletePlaylist(long),"[38, 41]","{'A310': [(38, 41)]}",{'A310': 1.0},A310,,"    public Single<Integer> deletePlaylist(final long playlistId) {
        return Single.fromCallable(() -> playlistRemoteTable.deletePlaylist(playlistId))
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,updatePlaylists,"Completable updatePlaylists(List<PlaylistRemoteEntity>,List<Long>)","[43, 53]","{'A352': [(43, 53)]}",{'A352': 1.0},A352,,"    public Completable updatePlaylists(final List<PlaylistRemoteEntity> updateItems,
                                       final List<Long> deletedItems) {
        return Completable.fromRunnable(() -> database.runInTransaction(() -> {
            for (final Long uid: deletedItems) {
                playlistRemoteTable.deletePlaylist(uid);
            }
            for (final PlaylistRemoteEntity item: updateItems) {
                playlistRemoteTable.upsert(item);
            }
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,onBookmark,Single<Long> onBookmark(PlaylistInfo),"[55, 60]","{'A310': [(55, 60)]}",{'A310': 1.0},A310,,"    public Single<Long> onBookmark(final PlaylistInfo playlistInfo) {
        return Single.fromCallable(() -> {
            final PlaylistRemoteEntity playlist = new PlaylistRemoteEntity(playlistInfo);
            return playlistRemoteTable.upsert(playlist);
        }).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/RemotePlaylistManager.java,RemotePlaylistManager,onUpdate,"Single<Integer> onUpdate(long,PlaylistInfo)","[62, 68]","{'A310': [(62, 63), (65, 68)], 'A294': [(64, 64)]}","{'A310': 0.8571428571428571, 'A294': 0.14285714285714285}",A310,,"    public Single<Integer> onUpdate(final long playlistId, final PlaylistInfo playlistInfo) {
        return Single.fromCallable(() -> {
            final PlaylistRemoteEntity playlist = new PlaylistRemoteEntity(playlistInfo);
            playlist.setUid(playlistId);
            return playlistRemoteTable.update(playlist);
        }).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,createPlaylist,"Maybe<List<Long>> createPlaylist(String,List<StreamEntity>)","[39, 57]","{'A310': [(39, 40), (52, 52), (57, 57)], 'A305': [(51, 51)], 'A350': [(48, 50), (53, 56)], 'A294': [(41, 43)], 'A352': [(44, 47)]}","{'A310': 0.21052631578947367, 'A305': 0.05263157894736842, 'A350': 0.3684210526315789, 'A294': 0.15789473684210525, 'A352': 0.21052631578947367}",A350,,"    public Maybe<List<Long>> createPlaylist(final String name, final List<StreamEntity> streams) {
        // Disallow creation of empty playlists
        if (streams.isEmpty()) {
            return Maybe.empty();
        }

        // Save to the database directly.
        // Make sure the new playlist is always on the top of bookmark.
        // The index will be reassigned to non-negative number in BookmarkFragment.
        return Maybe.fromCallable(() -> database.runInTransaction(() -> {
                    final List<Long> streamIds = streamTable.upsertAll(streams);
                    final PlaylistEntity newPlaylist = new PlaylistEntity(name, false,
                            streamIds.get(0), -1);

                    return insertJoinEntities(playlistTable.insert(newPlaylist),
                            streamIds, 0);
                }
        )).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,appendToPlaylist,"Maybe<List<Long>> appendToPlaylist(long,List<StreamEntity>)","[59, 68]","{'A310': [(59, 62), (68, 68)], 'A350': [(63, 67)]}","{'A310': 0.5, 'A350': 0.5}",A310,,"    public Maybe<List<Long>> appendToPlaylist(final long playlistId,
                                              final List<StreamEntity> streams) {
        return playlistStreamTable.getMaximumIndexOf(playlistId)
                .firstElement()
                .map(maxJoinIndex -> database.runInTransaction(() -> {
                            final List<Long> streamIds = streamTable.upsertAll(streams);
                            return insertJoinEntities(playlistId, streamIds, maxJoinIndex + 1);
                        }
                )).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,insertJoinEntities,"List<Long> insertJoinEntities(long,List<Long>,int)","[70, 80]","{'A310': [(74, 80)], 'A350': [(70, 73)]}","{'A310': 0.6363636363636364, 'A350': 0.36363636363636365}",A310,,"    private List<Long> insertJoinEntities(final long playlistId, final List<Long> streamIds,
                                          final int indexOffset) {

        final List<PlaylistStreamEntity> joinEntities = new ArrayList<>(streamIds.size());

        for (int index = 0; index < streamIds.size(); index++) {
            joinEntities.add(new PlaylistStreamEntity(playlistId, streamIds.get(index),
                    index + indexOffset));
        }
        return playlistStreamTable.insertAll(joinEntities);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,updateJoin,"Completable updateJoin(long,List<Long>)","[82, 92]","{'A310': [(82, 82), (84, 92)], 'A294': [(83, 83)]}","{'A310': 0.9090909090909091, 'A294': 0.09090909090909091}",A310,,"    public Completable updateJoin(final long playlistId, final List<Long> streamIds) {
        final List<PlaylistStreamEntity> joinEntities = new ArrayList<>(streamIds.size());
        for (int i = 0; i < streamIds.size(); i++) {
            joinEntities.add(new PlaylistStreamEntity(playlistId, streamIds.get(i), i));
        }

        return Completable.fromRunnable(() -> database.runInTransaction(() -> {
            playlistStreamTable.deleteBatch(playlistId);
            playlistStreamTable.insertAll(joinEntities);
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,updatePlaylists,"Completable updatePlaylists(List<PlaylistMetadataEntry>,List<Long>)","[94, 108]","{'A305': [(101, 101), (104, 104)], 'A352': [(94, 100), (102, 103), (105, 108)]}","{'A305': 0.13333333333333333, 'A352': 0.8666666666666667}",A352,,"    public Completable updatePlaylists(final List<PlaylistMetadataEntry> updateItems,
                                       final List<Long> deletedItems) {
        final List<PlaylistEntity> items = new ArrayList<>(updateItems.size());
        for (final PlaylistMetadataEntry item : updateItems) {
            items.add(new PlaylistEntity(item));
        }
        return Completable.fromRunnable(() -> database.runInTransaction(() -> {
            for (final Long uid : deletedItems) {
                playlistTable.deletePlaylist(uid);
            }
            for (final PlaylistEntity item : items) {
                playlistTable.upsertPlaylist(item);
            }
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getDistinctPlaylistStreams,Flowable<List<PlaylistStreamEntry>> getDistinctPlaylistStreams(long),"[110, 113]","{'A310': [(113, 113)], 'A350': [(110, 112)]}","{'A310': 0.25, 'A350': 0.75}",A350,,"    public Flowable<List<PlaylistStreamEntry>> getDistinctPlaylistStreams(final long playlistId) {
        return playlistStreamTable
                .getStreamsWithoutDuplicates(playlistId).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getPlaylistDuplicates,Flowable<List<PlaylistDuplicatesEntry>> getPlaylistDuplicates(String),"[122, 125]","{'A305': [(122, 124)], 'A350': [(125, 125)]}","{'A305': 0.75, 'A350': 0.25}",A305,,"    public Flowable<List<PlaylistDuplicatesEntry>> getPlaylistDuplicates(final String streamUrl) {
        return playlistStreamTable.getPlaylistDuplicatesMetadata(streamUrl)
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getPlaylists,Flowable<List<PlaylistMetadataEntry>> getPlaylists(),"[127, 129]","{'A305': [(127, 128)], 'A352': [(129, 129)]}","{'A305': 0.6666666666666666, 'A352': 0.3333333333333333}",A305,,"    public Flowable<List<PlaylistMetadataEntry>> getPlaylists() {
        return playlistStreamTable.getPlaylistMetadata().subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getPlaylistStreams,Flowable<List<PlaylistStreamEntry>> getPlaylistStreams(long),"[131, 133]","{'A310': [(131, 133)]}",{'A310': 1.0},A310,,"    public Flowable<List<PlaylistStreamEntry>> getPlaylistStreams(final long playlistId) {
        return playlistStreamTable.getOrderedStreamsOf(playlistId).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,renamePlaylist,"Maybe<Integer> renamePlaylist(long,String)","[135, 137]","{'A310': [(135, 135), (137, 137)], 'A305': [(136, 136)]}","{'A310': 0.6666666666666666, 'A305': 0.3333333333333333}",A310,,"    public Maybe<Integer> renamePlaylist(final long playlistId, final String name) {
        return modifyPlaylist(playlistId, name, THUMBNAIL_ID_LEAVE_UNCHANGED, false);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,changePlaylistThumbnail,"Maybe<Integer> changePlaylistThumbnail(long,long,boolean)","[139, 143]","{'A310': [(139, 139), (143, 143)], 'A305': [(142, 142)], 'A350': [(140, 141)]}","{'A310': 0.4, 'A305': 0.2, 'A350': 0.4}",A310,,"    public Maybe<Integer> changePlaylistThumbnail(final long playlistId,
                                                  final long thumbnailStreamId,
                                                  final boolean isPermanent) {
        return modifyPlaylist(playlistId, null, thumbnailStreamId, isPermanent);
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getPlaylistThumbnailStreamId,long getPlaylistThumbnailStreamId(long),"[145, 147]","{'A310': [(147, 147)], 'A350': [(145, 146)]}","{'A310': 0.3333333333333333, 'A350': 0.6666666666666666}",A350,,"    public long getPlaylistThumbnailStreamId(final long playlistId) {
        return playlistTable.getPlaylist(playlistId).blockingFirst().get(0).getThumbnailStreamId();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getIsPlaylistThumbnailPermanent,boolean getIsPlaylistThumbnailPermanent(long),"[149, 152]","{'A350': [(149, 152)]}",{'A350': 1.0},A350,,"    public boolean getIsPlaylistThumbnailPermanent(final long playlistId) {
        return playlistTable.getPlaylist(playlistId).blockingFirst().get(0)
                .getIsThumbnailPermanent();
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,getAutomaticPlaylistThumbnailStreamId,long getAutomaticPlaylistThumbnailStreamId(long),"[154, 161]","{'A350': [(154, 160)], 'A354': [(161, 161)]}","{'A350': 0.875, 'A354': 0.125}",A350,,"    public long getAutomaticPlaylistThumbnailStreamId(final long playlistId) {
        final long streamId = playlistStreamTable.getAutomaticThumbnailStreamId(playlistId)
                .blockingFirst();
        if (streamId < 0) {
            return PlaylistEntity.DEFAULT_THUMBNAIL_ID;
        }
        return streamId;
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,modifyPlaylist,"Maybe<Integer> modifyPlaylist(long,String,long,boolean)","[163, 181]","{'A310': [(163, 164), (167, 170), (179, 181)], 'A305': [(166, 166)], 'A350': [(165, 165), (175, 177)], 'A294': [(171, 174), (178, 178)]}","{'A310': 0.47368421052631576, 'A305': 0.05263157894736842, 'A350': 0.21052631578947367, 'A294': 0.2631578947368421}",A310,,"    private Maybe<Integer> modifyPlaylist(final long playlistId,
                                          @Nullable final String name,
                                          final long thumbnailStreamId,
                                          final boolean isPermanent) {
        return playlistTable.getPlaylist(playlistId)
                .firstElement()
                .filter(playlistEntities -> !playlistEntities.isEmpty())
                .map(playlistEntities -> {
                    final PlaylistEntity playlist = playlistEntities.get(0);
                    if (name != null) {
                        playlist.setName(name);
                    }
                    if (thumbnailStreamId != THUMBNAIL_ID_LEAVE_UNCHANGED) {
                        playlist.setThumbnailStreamId(thumbnailStreamId);
                        playlist.setIsThumbnailPermanent(isPermanent);
                    }
                    return playlistTable.update(playlist);
                }).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/playlist/LocalPlaylistManager.java,LocalPlaylistManager,hasPlaylists,Maybe<Boolean> hasPlaylists(),"[183, 188]","{'A296': [(183, 188)]}",{'A296': 1.0},A296,,"    public Maybe<Boolean> hasPlaylists() {
        return playlistTable.getCount()
                .firstElement()
                .map(count -> count > 0)
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,setSelectedListener,void setSelectedListener(OnClickGesture<LocalItem>),"[104, 106]","{'A310': [(105, 106)], 'A294': [(104, 104)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setSelectedListener(final OnClickGesture<LocalItem> listener) {
        localItemBuilder.setOnItemSelectedListener(listener);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,unsetSelectedListener,void unsetSelectedListener(),"[108, 110]","{'A310': [(108, 110)]}",{'A310': 1.0},A310,,"    public void unsetSelectedListener() {
        localItemBuilder.setOnItemSelectedListener(null);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,addItems,void addItems(List<? extends LocalItem>),"[112, 141]","{'A310': [(120, 120), (123, 123), (131, 131), (135, 135), (140, 141)], 'A305': [(113, 114)], 'A294': [(112, 112), (116, 119), (121, 121), (124, 129), (133, 133), (136, 139)], 'A340': [(115, 115), (122, 122), (130, 130), (132, 132), (134, 134)]}","{'A310': 0.2, 'A305': 0.06666666666666667, 'A294': 0.5666666666666667, 'A340': 0.16666666666666666}",A294,,"    public void addItems(@Nullable final List<? extends LocalItem> data) {
        if (data == null) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, ""addItems() before > localItems.size() = ""
                    + localItems.size() + "", data.size() = "" + data.size());
        }

        final int offsetStart = sizeConsideringHeader();
        localItems.addAll(data);

        if (DEBUG) {
            Log.d(TAG, ""addItems() after > offsetStart = "" + offsetStart + "", ""
                    + ""localItems.size() = "" + localItems.size() + "", ""
                    + ""header = "" + header + "", footer = "" + footer + "", ""
                    + ""showFooter = "" + showFooter);
        }
        notifyItemRangeInserted(offsetStart, data.size());

        if (footer != null && showFooter) {
            final int footerNow = sizeConsideringHeader();
            notifyItemMoved(offsetStart, footerNow);

            if (DEBUG) {
                Log.d(TAG, ""addItems() footer from "" + offsetStart
                        + "" to "" + footerNow);
            }
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,removeItem,void removeItem(LocalItem),"[143, 158]","{'A310': [(143, 144), (158, 158)], 'A366': [(145, 157)]}","{'A310': 0.1875, 'A366': 0.8125}",A366,,"    public void removeItem(final LocalItem data) {
        final int index = localItems.indexOf(data);
        if (index != -1) {
            localItems.remove(index);
            notifyItemRemoved(index + (header != null ? 1 : 0));
        } else {
            // this happens when
            // 1) removeItem is called on infoItemDuplicate as in showStreamItemDialog of
            // LocalPlaylistFragment in this case need to implement delete object by it's duplicate

            // OR

            // 2)data not in itemList and UI is still not updated so notifyDataSetChanged()
            notifyDataSetChanged();
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,swapItems,"boolean swapItems(int,int)","[160, 174]","{'A310': [(161, 163), (170, 174)], 'A294': [(160, 160), (164, 169)]}","{'A310': 0.5333333333333333, 'A294': 0.4666666666666667}",A310,,"    public boolean swapItems(final int fromAdapterPosition, final int toAdapterPosition) {
        final int actualFrom = adapterOffsetWithoutHeader(fromAdapterPosition);
        final int actualTo = adapterOffsetWithoutHeader(toAdapterPosition);

        if (actualFrom < 0 || actualTo < 0) {
            return false;
        }
        if (actualFrom >= localItems.size() || actualTo >= localItems.size()) {
            return false;
        }

        localItems.add(actualTo, localItems.remove(actualFrom));
        notifyItemMoved(fromAdapterPosition, toAdapterPosition);
        return true;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,clearStreamItemList,void clearStreamItemList(),"[176, 182]","{'A310': [(176, 182)]}",{'A310': 1.0},A310,,"    public void clearStreamItemList() {
        if (localItems.isEmpty()) {
            return;
        }
        localItems.clear();
        notifyDataSetChanged();
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,setItemViewMode,void setItemViewMode(ItemViewMode),"[184, 186]","{'A339': [(184, 185)], 'A341': [(186, 186)]}","{'A339': 0.6666666666666666, 'A341': 0.3333333333333333}",A339,,"    public void setItemViewMode(final ItemViewMode itemViewMode) {
        this.itemViewMode = itemViewMode;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,setUseItemHandle,void setUseItemHandle(boolean),"[188, 190]","{'A352': [(188, 190)]}",{'A352': 1.0},A352,,"    public void setUseItemHandle(final boolean useItemHandle) {
        this.useItemHandle = useItemHandle;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,setHeader,void setHeader(View),"[192, 198]","{'A310': [(194, 194), (198, 198)], 'A294': [(192, 193), (195, 197)]}","{'A310': 0.2857142857142857, 'A294': 0.7142857142857143}",A294,,"    public void setHeader(final View header) {
        final boolean changed = header != this.header;
        this.header = header;
        if (changed) {
            notifyDataSetChanged();
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,setFooter,void setFooter(View),"[200, 202]","{'A310': [(201, 202)], 'A294': [(200, 200)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setFooter(final View view) {
        this.footer = view;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,showFooter,void showFooter(boolean),"[204, 218]","{'A310': [(211, 212), (218, 218)], 'A294': [(204, 210), (213, 217)]}","{'A310': 0.2, 'A294': 0.8}",A294,,"    public void showFooter(final boolean show) {
        if (DEBUG) {
            Log.d(TAG, ""showFooter() called with: show = ["" + show + ""]"");
        }
        if (show == showFooter) {
            return;
        }

        showFooter = show;
        if (show) {
            notifyItemInserted(sizeConsideringHeader());
        } else {
            notifyItemRemoved(sizeConsideringHeader());
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,adapterOffsetWithoutHeader,int adapterOffsetWithoutHeader(int),"[220, 222]","{'A310': [(220, 222)]}",{'A310': 1.0},A310,,"    private int adapterOffsetWithoutHeader(final int offset) {
        return offset - (header != null ? 1 : 0);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,sizeConsideringHeader,int sizeConsideringHeader(),"[224, 226]","{'A310': [(224, 226)]}",{'A310': 1.0},A310,,"    private int sizeConsideringHeader() {
        return localItems.size() + (header != null ? 1 : 0);
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,getItemsList,ArrayList<LocalItem> getItemsList(),"[228, 230]","{'A310': [(228, 230)]}",{'A310': 1.0},A310,,"    public ArrayList<LocalItem> getItemsList() {
        return localItems;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,getItemCount,int getItemCount(),"[232, 249]","{'A310': [(232, 234), (241, 242), (247, 249)], 'A294': [(235, 240), (243, 246)]}","{'A310': 0.4444444444444444, 'A294': 0.5555555555555556}",A294,,"    @Override
    public int getItemCount() {
        int count = localItems.size();
        if (header != null) {
            count++;
        }
        if (footer != null && showFooter) {
            count++;
        }

        if (DEBUG) {
            Log.d(TAG, ""getItemCount() called, count = "" + count + "", ""
                    + ""localItems.size() = "" + localItems.size() + "", ""
                    + ""header = "" + header + "", footer = "" + footer + "", ""
                    + ""showFooter = "" + showFooter);
        }
        return count;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,getItemViewType,int getItemViewType(int),"[251, 309]","{'A310': [(252, 253), (257, 267), (304, 304), (307, 309)], 'A305': [(251, 251), (271, 271), (281, 281)], 'A294': [(254, 256), (268, 268), (278, 278), (288, 288), (296, 296), (305, 306)], 'A339': [(272, 276), (282, 286), (289, 295), (297, 303)], 'A352': [(269, 270), (277, 277), (279, 280), (287, 287)]}","{'A310': 0.288135593220339, 'A305': 0.05084745762711865, 'A294': 0.15254237288135594, 'A339': 0.4067796610169492, 'A352': 0.1016949152542373}",A339,,"    @SuppressWarnings(""FinalParameters"")
    @Override
    public int getItemViewType(int position) {
        if (DEBUG) {
            Log.d(TAG, ""getItemViewType() called with: position = ["" + position + ""]"");
        }

        if (header != null && position == 0) {
            return HEADER_TYPE;
        } else if (header != null) {
            position--;
        }
        if (footer != null && position == localItems.size() && showFooter) {
            return FOOTER_TYPE;
        }
        final LocalItem item = localItems.get(position);
        switch (item.getLocalItemType()) {
            case PLAYLIST_LOCAL_ITEM:
                if (useItemHandle) {
                    return LOCAL_BOOKMARK_PLAYLIST_HOLDER_TYPE;
                } else if (itemViewMode == ItemViewMode.CARD) {
                    return LOCAL_PLAYLIST_CARD_HOLDER_TYPE;
                } else if (itemViewMode == ItemViewMode.GRID) {
                    return LOCAL_PLAYLIST_GRID_HOLDER_TYPE;
                } else {
                    return LOCAL_PLAYLIST_HOLDER_TYPE;
                }
            case PLAYLIST_REMOTE_ITEM:
                if (useItemHandle) {
                    return REMOTE_BOOKMARK_PLAYLIST_HOLDER_TYPE;
                } else if (itemViewMode == ItemViewMode.CARD) {
                    return REMOTE_PLAYLIST_CARD_HOLDER_TYPE;
                } else if (itemViewMode == ItemViewMode.GRID) {
                    return REMOTE_PLAYLIST_GRID_HOLDER_TYPE;
                } else {
                    return REMOTE_PLAYLIST_HOLDER_TYPE;
                }
            case PLAYLIST_STREAM_ITEM:
                if (itemViewMode == ItemViewMode.CARD) {
                    return STREAM_PLAYLIST_CARD_HOLDER_TYPE;
                } else if (itemViewMode == ItemViewMode.GRID) {
                    return STREAM_PLAYLIST_GRID_HOLDER_TYPE;
                } else {
                    return STREAM_PLAYLIST_HOLDER_TYPE;
                }
            case STATISTIC_STREAM_ITEM:
                if (itemViewMode == ItemViewMode.CARD) {
                    return STREAM_STATISTICS_CARD_HOLDER_TYPE;
                } else if (itemViewMode == ItemViewMode.GRID) {
                    return STREAM_STATISTICS_GRID_HOLDER_TYPE;
                } else {
                    return STREAM_STATISTICS_HOLDER_TYPE;
                }
            default:
                Log.e(TAG, ""No holder type has been considered for item: [""
                        + item.getLocalItemType() + ""]"");
                return -1;
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,onCreateViewHolder,"RecyclerView.ViewHolder onCreateViewHolder(ViewGroup,int)","[311, 356]","{'A310': [(312, 312), (319, 325), (332, 333), (340, 341), (346, 347), (352, 353), (355, 356)], 'A305': [(311, 311)], 'A294': [(313, 318)], 'A339': [(328, 329), (336, 337), (344, 345), (350, 351)], 'A352': [(330, 331), (338, 339)], 'A341': [(326, 327), (334, 335), (342, 343), (348, 349)], 'A342': [(354, 354)]}","{'A310': 0.391304347826087, 'A305': 0.021739130434782608, 'A294': 0.13043478260869565, 'A339': 0.17391304347826086, 'A352': 0.08695652173913043, 'A341': 0.17391304347826086, 'A342': 0.021739130434782608}",A310,,"    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                      final int type) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateViewHolder() called with: ""
                    + ""parent = ["" + parent + ""], type = ["" + type + ""]"");
        }
        switch (type) {
            case HEADER_TYPE:
                return new HeaderFooterHolder(header);
            case FOOTER_TYPE:
                return new HeaderFooterHolder(footer);
            case LOCAL_PLAYLIST_HOLDER_TYPE:
                return new LocalPlaylistItemHolder(localItemBuilder, parent);
            case LOCAL_PLAYLIST_GRID_HOLDER_TYPE:
                return new LocalPlaylistGridItemHolder(localItemBuilder, parent);
            case LOCAL_PLAYLIST_CARD_HOLDER_TYPE:
                return new LocalPlaylistCardItemHolder(localItemBuilder, parent);
            case LOCAL_BOOKMARK_PLAYLIST_HOLDER_TYPE:
                return new LocalBookmarkPlaylistItemHolder(localItemBuilder, parent);
            case REMOTE_PLAYLIST_HOLDER_TYPE:
                return new RemotePlaylistItemHolder(localItemBuilder, parent);
            case REMOTE_PLAYLIST_GRID_HOLDER_TYPE:
                return new RemotePlaylistGridItemHolder(localItemBuilder, parent);
            case REMOTE_PLAYLIST_CARD_HOLDER_TYPE:
                return new RemotePlaylistCardItemHolder(localItemBuilder, parent);
            case REMOTE_BOOKMARK_PLAYLIST_HOLDER_TYPE:
                return new RemoteBookmarkPlaylistItemHolder(localItemBuilder, parent);
            case STREAM_PLAYLIST_HOLDER_TYPE:
                return new LocalPlaylistStreamItemHolder(localItemBuilder, parent);
            case STREAM_PLAYLIST_GRID_HOLDER_TYPE:
                return new LocalPlaylistStreamGridItemHolder(localItemBuilder, parent);
            case STREAM_PLAYLIST_CARD_HOLDER_TYPE:
                return new LocalPlaylistStreamCardItemHolder(localItemBuilder, parent);
            case STREAM_STATISTICS_HOLDER_TYPE:
                return new LocalStatisticStreamItemHolder(localItemBuilder, parent);
            case STREAM_STATISTICS_GRID_HOLDER_TYPE:
                return new LocalStatisticStreamGridItemHolder(localItemBuilder, parent);
            case STREAM_STATISTICS_CARD_HOLDER_TYPE:
                return new LocalStatisticStreamCardItemHolder(localItemBuilder, parent);
            default:
                Log.e(TAG, ""No view type has been considered for holder: ["" + type + ""]"");
                return new FallbackViewHolder(new View(parent.getContext()));
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,onBindViewHolder,"void onBindViewHolder(RecyclerView.ViewHolder,int)","[358, 381]","{'A310': [(359, 359), (366, 368), (372, 372), (375, 381)], 'A305': [(358, 358)], 'A294': [(360, 365), (369, 371), (373, 373)], 'A295': [(374, 374)]}","{'A310': 0.5, 'A305': 0.041666666666666664, 'A294': 0.4166666666666667, 'A295': 0.041666666666666664}",A310,,"    @SuppressWarnings(""FinalParameters"")
    @Override
    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder holder, int position) {
        if (DEBUG) {
            Log.d(TAG, ""onBindViewHolder() called with: ""
                    + ""holder = ["" + holder.getClass().getSimpleName() + ""], ""
                    + ""position = ["" + position + ""]"");
        }

        if (holder instanceof LocalItemHolder) {
            // If header isn't null, offset the items by -1
            if (header != null) {
                position--;
            }

            ((LocalItemHolder) holder)
                    .updateFromItem(localItems.get(position), recordManager, dateTimeFormatter);
        } else if (holder instanceof HeaderFooterHolder && position == 0 && header != null) {
            ((HeaderFooterHolder) holder).view = header;
        } else if (holder instanceof HeaderFooterHolder && position == sizeConsideringHeader()
                && footer != null && showFooter) {
            ((HeaderFooterHolder) holder).view = footer;
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,onBindViewHolder,"void onBindViewHolder(RecyclerView.ViewHolder,int,List<Object>)","[383, 399]","{'A294': [(384, 385), (387, 387), (389, 390), (392, 393)], 'A340': [(383, 383), (386, 386), (388, 388), (391, 391), (394, 399)]}","{'A294': 0.4117647058823529, 'A340': 0.5882352941176471}",A340,,"    @Override
    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder holder, final int position,
                                 @NonNull final List<Object> payloads) {
        if (!payloads.isEmpty() && holder instanceof LocalItemHolder) {
            for (final Object payload : payloads) {
                if (payload instanceof StreamStateEntity) {
                    ((LocalItemHolder) holder).updateState(localItems
                            .get(header == null ? position : position - 1), recordManager);
                } else if (payload instanceof Boolean) {
                    ((LocalItemHolder) holder).updateState(localItems
                            .get(header == null ? position : position - 1), recordManager);
                }
            }
        } else {
            onBindViewHolder(holder, position);
        }
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,getSpanSizeLookup,GridLayoutManager.SpanSizeLookup getSpanSizeLookup(int),"[401, 409]","{'A294': [(404, 404)], 'A341': [(401, 403), (405, 409)]}","{'A294': 0.1111111111111111, 'A341': 0.8888888888888888}",A341,,"    public GridLayoutManager.SpanSizeLookup getSpanSizeLookup(final int spanCount) {
        return new GridLayoutManager.SpanSizeLookup() {
            @Override
            public int getSpanSize(final int position) {
                final int type = getItemViewType(position);
                return type == HEADER_TYPE || type == FOOTER_TYPE ? spanCount : 1;
            }
        };
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemListAdapter.java,LocalItemListAdapter,getSpanSize,int getSpanSize(int),"[403, 407]","{'A294': [(404, 404)], 'A341': [(403, 403), (405, 407)]}","{'A294': 0.2, 'A341': 0.8}",A341,,"            @Override
            public int getSpanSize(final int position) {
                final int type = getItemViewType(position);
                return type == HEADER_TYPE || type == FOOTER_TYPE ? spanCount : 1;
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,setEntries,void setEntries(Collection<E>),"[38, 42]","{'A311': [(39, 42)], 'A294': [(38, 38)]}","{'A311': 0.8, 'A294': 0.2}",A311,,"    public void setEntries(@NonNull final Collection<E> historyEntries) {
        mEntries.clear();
        mEntries.addAll(historyEntries);
        notifyDataSetChanged();
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,getItems,Collection<E> getItems(),"[44, 46]","{'A301': [(44, 46)]}",{'A301': 1.0},A301,,"    public Collection<E> getItems() {
        return mEntries;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,clear,void clear(),"[48, 51]","{'A311': [(48, 51)]}",{'A311': 1.0},A311,,"    public void clear() {
        mEntries.clear();
        notifyDataSetChanged();
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,getFormattedDate,String getFormattedDate(Date),"[53, 55]","{'A311': [(54, 55)], 'A294': [(53, 53)]}","{'A311': 0.6666666666666666, 'A294': 0.3333333333333333}",A311,,"    protected String getFormattedDate(final Date date) {
        return mDateFormat.format(date);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,getFormattedViewString,String getFormattedViewString(long),"[57, 59]","{'A310': [(57, 59)]}",{'A310': 1.0},A310,,"    protected String getFormattedViewString(final long viewCount) {
        return Localization.shortViewCount(mContext, viewCount);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,getItemCount,int getItemCount(),"[61, 64]","{'A311': [(61, 64)]}",{'A311': 1.0},A311,,"    @Override
    public int getItemCount() {
        return mEntries.size();
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,onBindViewHolder,"void onBindViewHolder(VH,int)","[66, 84]","{'A311': [(66, 66), (68, 68), (79, 79), (81, 81), (83, 84)], 'A294': [(67, 67), (70, 70)], 'A310': [(69, 69), (71, 78), (80, 80), (82, 82)]}","{'A311': 0.3157894736842105, 'A294': 0.10526315789473684, 'A310': 0.5789473684210527}",A310,,"    @Override
    public void onBindViewHolder(final VH holder, final int position) {
        final E entry = mEntries.get(position);
        holder.itemView.setOnClickListener(v -> {
            if (onHistoryItemClickListener != null) {
                onHistoryItemClickListener.onHistoryItemClick(entry);
            }
        });

        holder.itemView.setOnLongClickListener(view -> {
            if (onHistoryItemClickListener != null) {
                onHistoryItemClickListener.onHistoryItemLongClick(entry);
                return true;
            }
            return false;
        });

        onBindViewHolder(holder, entry, position);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,onViewRecycled,void onViewRecycled(VH),"[86, 90]","{'A311': [(86, 86), (88, 90)], 'A299': [(87, 87)]}","{'A311': 0.8, 'A299': 0.2}",A311,,"    @Override
    public void onViewRecycled(@NonNull final VH holder) {
        super.onViewRecycled(holder);
        holder.itemView.setOnClickListener(null);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,setOnHistoryItemClickListener,void setOnHistoryItemClickListener(OnHistoryItemClickListener<E>),"[94, 97]","{'A311': [(96, 97)], 'A294': [(94, 95)]}","{'A311': 0.5, 'A294': 0.5}",A311,,"    public void setOnHistoryItemClickListener(
            @Nullable final OnHistoryItemClickListener<E> onHistoryItemClickListener) {
        this.onHistoryItemClickListener = onHistoryItemClickListener;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryEntryAdapter.java,HistoryEntryAdapter,isEmpty,boolean isEmpty(),"[99, 101]","{'A311': [(99, 101)]}",{'A311': 1.0},A311,,"    public boolean isEmpty() {
        return mEntries.isEmpty();
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,markAsWatched,Maybe<Long> markAsWatched(StreamInfoItem),"[94, 135]","{'A305': [(128, 130), (132, 132)], 'A367': [(94, 127), (131, 131), (133, 135)]}","{'A305': 0.09523809523809523, 'A367': 0.9047619047619048}",A367,,"    public Maybe<Long> markAsWatched(final StreamInfoItem info) {
        if (!isStreamHistoryEnabled()) {
            return Maybe.empty();
        }

        final OffsetDateTime currentTime = OffsetDateTime.now(ZoneOffset.UTC);
        return Maybe.fromCallable(() -> database.runInTransaction(() -> {
            final long streamId;
            final long duration;
            // Duration will not exist if the item was loaded with fast mode, so fetch it if empty
            if (info.getDuration() < 0) {
                final StreamInfo completeInfo = ExtractorHelper.getStreamInfo(
                        info.getServiceId(),
                        info.getUrl(),
                        false
                )
                        .subscribeOn(Schedulers.io())
                        .blockingGet();
                duration = completeInfo.getDuration();
                streamId = streamTable.upsert(new StreamEntity(completeInfo));
            } else {
                duration = info.getDuration();
                streamId = streamTable.upsert(new StreamEntity(info));
            }

            // Update the stream progress to the full duration of the video
            final StreamStateEntity entity = new StreamStateEntity(
                    streamId,
                    duration * 1000
            );
            streamStateTable.upsert(entity);

            // Add a history entry
            final StreamHistoryEntity latestEntry = streamHistoryTable.getLatestEntry(streamId);
            if (latestEntry == null) {
                // never actually viewed: add history entry but with 0 views
                return streamHistoryTable.insert(new StreamHistoryEntity(streamId, currentTime, 0));
            } else {
                return 0L;
            }
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,onViewed,Maybe<Long> onViewed(StreamInfo),"[137, 157]","{'A310': [(137, 137), (141, 141), (143, 144), (146, 146), (148, 152), (155, 157)], 'A294': [(138, 140), (145, 145)], 'A305': [(153, 154)], 'A340': [(147, 147)], 'A295': [(142, 142)]}","{'A310': 0.6190476190476191, 'A294': 0.19047619047619047, 'A305': 0.09523809523809523, 'A340': 0.047619047619047616, 'A295': 0.047619047619047616}",A310,,"    public Maybe<Long> onViewed(final StreamInfo info) {
        if (!isStreamHistoryEnabled()) {
            return Maybe.empty();
        }

        final OffsetDateTime currentTime = OffsetDateTime.now(ZoneOffset.UTC);
        return Maybe.fromCallable(() -> database.runInTransaction(() -> {
            final long streamId = streamTable.upsert(new StreamEntity(info));
            final StreamHistoryEntity latestEntry = streamHistoryTable.getLatestEntry(streamId);

            if (latestEntry != null) {
                streamHistoryTable.delete(latestEntry);
                latestEntry.setAccessDate(currentTime);
                latestEntry.setRepeatCount(latestEntry.getRepeatCount() + 1);
                return streamHistoryTable.insert(latestEntry);
            } else {
                // just viewed for the first time: set 1 view
                return streamHistoryTable.insert(new StreamHistoryEntity(streamId, currentTime, 1));
            }
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,deleteStreamHistoryAndState,Completable deleteStreamHistoryAndState(long),"[159, 164]","{'A310': [(164, 164)], 'A305': [(159, 163)]}","{'A310': 0.16666666666666666, 'A305': 0.8333333333333334}",A305,,"    public Completable deleteStreamHistoryAndState(final long streamId) {
        return Completable.fromAction(() -> {
            streamStateTable.deleteState(streamId);
            streamHistoryTable.deleteStreamHistory(streamId);
        }).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,deleteWholeStreamHistory,Single<Integer> deleteWholeStreamHistory(),"[166, 169]","{'A302': [(166, 166), (168, 169)], 'A340': [(167, 167)]}","{'A302': 0.75, 'A340': 0.25}",A302,,"    public Single<Integer> deleteWholeStreamHistory() {
        return Single.fromCallable(streamHistoryTable::deleteAll)
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,deleteCompleteStreamStateHistory,Single<Integer> deleteCompleteStreamStateHistory(),"[171, 174]","{'A305': [(171, 171)], 'A298': [(172, 174)]}","{'A305': 0.25, 'A298': 0.75}",A298,,"    public Single<Integer> deleteCompleteStreamStateHistory() {
        return Single.fromCallable(streamStateTable::deleteAll)
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,getStreamHistorySortedById,Flowable<List<StreamHistoryEntry>> getStreamHistorySortedById(),"[176, 178]","{'A305': [(176, 178)]}",{'A305': 1.0},A305,,"    public Flowable<List<StreamHistoryEntry>> getStreamHistorySortedById() {
        return streamHistoryTable.getHistorySortedById().subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,getStreamStatistics,Flowable<List<StreamStatisticsEntry>> getStreamStatistics(),"[180, 182]","{'A310': [(180, 182)]}",{'A310': 1.0},A310,,"    public Flowable<List<StreamStatisticsEntry>> getStreamStatistics() {
        return streamHistoryTable.getStatistics().subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,isStreamHistoryEnabled,boolean isStreamHistoryEnabled(),"[184, 186]","{'A310': [(184, 186)]}",{'A310': 1.0},A310,,"    private boolean isStreamHistoryEnabled() {
        return sharedPreferences.getBoolean(streamHistoryKey, false);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,onSearched,"Maybe<Long> onSearched(int,String)","[192, 209]","{'A310': [(192, 192), (196, 196), (198, 200), (202, 209)], 'A294': [(193, 195), (201, 201)], 'A295': [(197, 197)]}","{'A310': 0.7222222222222222, 'A294': 0.2222222222222222, 'A295': 0.05555555555555555}",A310,,"    public Maybe<Long> onSearched(final int serviceId, final String search) {
        if (!isSearchHistoryEnabled()) {
            return Maybe.empty();
        }

        final OffsetDateTime currentTime = OffsetDateTime.now(ZoneOffset.UTC);
        final SearchHistoryEntry newEntry = new SearchHistoryEntry(currentTime, serviceId, search);

        return Maybe.fromCallable(() -> database.runInTransaction(() -> {
            final SearchHistoryEntry latestEntry = searchHistoryTable.getLatestEntry();
            if (latestEntry != null && latestEntry.hasEqualValues(newEntry)) {
                latestEntry.setCreationDate(currentTime);
                return (long) searchHistoryTable.update(latestEntry);
            } else {
                return searchHistoryTable.insert(newEntry);
            }
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,deleteSearchHistory,Single<Integer> deleteSearchHistory(String),"[211, 214]","{'A310': [(211, 214)]}",{'A310': 1.0},A310,,"    public Single<Integer> deleteSearchHistory(final String search) {
        return Single.fromCallable(() -> searchHistoryTable.deleteAllWhereQuery(search))
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,deleteCompleteSearchHistory,Single<Integer> deleteCompleteSearchHistory(),"[216, 219]","{'A302': [(218, 219)], 'A340': [(217, 217)], 'A298': [(216, 216)]}","{'A302': 0.5, 'A340': 0.25, 'A298': 0.25}",A302,,"    public Single<Integer> deleteCompleteSearchHistory() {
        return Single.fromCallable(searchHistoryTable::deleteAll)
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,getRelatedSearches,"Flowable<List<String>> getRelatedSearches(String,int,int)","[221, 227]","{'A310': [(224, 227)], 'A305': [(221, 223)]}","{'A310': 0.5714285714285714, 'A305': 0.42857142857142855}",A310,,"    public Flowable<List<String>> getRelatedSearches(final String query,
                                                     final int similarQueryLimit,
                                                     final int uniqueQueryLimit) {
        return query.length() > 0
                ? searchHistoryTable.getSimilarEntries(query, similarQueryLimit)
                : searchHistoryTable.getUniqueEntries(uniqueQueryLimit);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,isSearchHistoryEnabled,boolean isSearchHistoryEnabled(),"[229, 231]","{'A310': [(229, 231)]}",{'A310': 1.0},A310,,"    private boolean isSearchHistoryEnabled() {
        return sharedPreferences.getBoolean(searchHistoryKey, false);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,loadStreamState,Maybe<StreamStateEntity> loadStreamState(PlayQueueItem),"[237, 245]","{'A305': [(239, 239), (243, 243)], 'A340': [(237, 238), (240, 242), (244, 245)]}","{'A305': 0.2222222222222222, 'A340': 0.7777777777777778}",A340,,"    public Maybe<StreamStateEntity> loadStreamState(final PlayQueueItem queueItem) {
        return queueItem.getStream()
                .map(info -> streamTable.upsert(new StreamEntity(info)))
                .flatMapPublisher(streamStateTable::getState)
                .firstElement()
                .flatMap(list -> list.isEmpty() ? Maybe.empty() : Maybe.just(list.get(0)))
                .filter(state -> state.isValid(queueItem.getDuration()))
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,loadStreamState,Maybe<StreamStateEntity> loadStreamState(StreamInfo),"[247, 254]","{'A310': [(247, 247), (253, 254)], 'A305': [(252, 252)], 'A340': [(248, 251)]}","{'A310': 0.375, 'A305': 0.125, 'A340': 0.5}",A340,,"    public Maybe<StreamStateEntity> loadStreamState(final StreamInfo info) {
        return Single.fromCallable(() -> streamTable.upsert(new StreamEntity(info)))
                .flatMapPublisher(streamStateTable::getState)
                .firstElement()
                .flatMap(list -> list.isEmpty() ? Maybe.empty() : Maybe.just(list.get(0)))
                .filter(state -> state.isValid(info.getDuration()))
                .subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,saveStreamState,"Completable saveStreamState(StreamInfo,long)","[256, 264]","{'A310': [(258, 258), (263, 264)], 'A305': [(256, 256), (259, 260)], 'A340': [(257, 257), (261, 262)]}","{'A310': 0.3333333333333333, 'A305': 0.3333333333333333, 'A340': 0.3333333333333333}",A310,,"    public Completable saveStreamState(@NonNull final StreamInfo info, final long progressMillis) {
        return Completable.fromAction(() -> database.runInTransaction(() -> {
            final long streamId = streamTable.upsert(new StreamEntity(info));
            final StreamStateEntity state = new StreamStateEntity(streamId, progressMillis);
            if (state.isValid(info.getDuration())) {
                streamStateTable.upsert(state);
            }
        })).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,loadStreamState,Single<StreamStateEntity[]> loadStreamState(InfoItem),"[266, 280]","{'A294': [(268, 269), (273, 274)], 'A340': [(266, 267), (270, 272), (275, 280)]}","{'A294': 0.26666666666666666, 'A340': 0.7333333333333333}",A340,,"    public Single<StreamStateEntity[]> loadStreamState(final InfoItem info) {
        return Single.fromCallable(() -> {
            final List<StreamEntity> entities = streamTable
                    .getStream(info.getServiceId(), info.getUrl()).blockingFirst();
            if (entities.isEmpty()) {
                return new StreamStateEntity[]{null};
            }
            final List<StreamStateEntity> states = streamStateTable
                    .getState(entities.get(0).getUid()).blockingFirst();
            if (states.isEmpty()) {
                return new StreamStateEntity[]{null};
            }
            return new StreamStateEntity[]{states.get(0)};
        }).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,loadLocalStreamStateBatch,Single<List<StreamStateEntity>> loadLocalStreamStateBatch(List<? extends LocalItem>),"[282, 308]","{'A294': [(282, 283), (286, 287), (298, 299)], 'A340': [(284, 285), (288, 288), (290, 292), (294, 297), (300, 301), (304, 308)], 'A298': [(302, 303)], 'A301': [(289, 289), (293, 293)]}","{'A294': 0.2222222222222222, 'A340': 0.6296296296296297, 'A298': 0.07407407407407407, 'A301': 0.07407407407407407}",A340,,"    public Single<List<StreamStateEntity>> loadLocalStreamStateBatch(
            final List<? extends LocalItem> items) {
        return Single.fromCallable(() -> {
            final List<StreamStateEntity> result = new ArrayList<>(items.size());
            for (final LocalItem item : items) {
                final long streamId;
                if (item instanceof StreamStatisticsEntry) {
                    streamId = ((StreamStatisticsEntry) item).getStreamId();
                } else if (item instanceof PlaylistStreamEntity) {
                    streamId = ((PlaylistStreamEntity) item).getStreamUid();
                } else if (item instanceof PlaylistStreamEntry) {
                    streamId = ((PlaylistStreamEntry) item).getStreamId();
                } else {
                    result.add(null);
                    continue;
                }
                final List<StreamStateEntity> states = streamStateTable.getState(streamId)
                        .blockingFirst();
                if (states.isEmpty()) {
                    result.add(null);
                } else {
                    result.add(states.get(0));
                }
            }
            return result;
        }).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/HistoryRecordManager.java,HistoryRecordManager,removeOrphanedRecords,Single<Integer> removeOrphanedRecords(),"[314, 316]","{'A310': [(314, 316)]}",{'A310': 1.0},A310,,"    public Single<Integer> removeOrphanedRecords() {
        return Single.fromCallable(streamTable::deleteOrphans).subscribeOn(Schedulers.io());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,processResult,List<StreamStatisticsEntry> processResult(List<StreamStatisticsEntry>),"[68, 82]","{'A302': [(70, 71), (74, 74), (79, 79), (82, 82)], 'A294': [(68, 68), (77, 78)], 'A295': [(69, 69), (72, 73), (75, 76), (80, 81)]}","{'A302': 0.3333333333333333, 'A294': 0.2, 'A295': 0.4666666666666667}",A295,,"    private List<StreamStatisticsEntry> processResult(final List<StreamStatisticsEntry> results) {
        final Comparator<StreamStatisticsEntry> comparator;
        switch (sortMode) {
            case LAST_PLAYED:
                comparator = Comparator.comparing(StreamStatisticsEntry::getLatestAccessDate);
                break;
            case MOST_PLAYED:
                comparator = Comparator.comparingLong(StreamStatisticsEntry::getWatchCount);
                break;
            default:
                return null;
        }
        Collections.sort(results, comparator.reversed());
        return results;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onCreate,void onCreate(Bundle),"[88, 92]","{'A310': [(88, 88), (90, 92)], 'A294': [(89, 89)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        recordManager = new HistoryRecordManager(getContext());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[94, 99]","{'A310': [(94, 94), (98, 99)], 'A294': [(95, 97)]}","{'A310': 0.5, 'A294': 0.5}",A310,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_playlist, container, false);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onResume,void onResume(),"[101, 107]","{'A306': [(101, 101), (105, 107)], 'A299': [(102, 104)]}","{'A306': 0.5714285714285714, 'A299': 0.42857142857142855}",A306,,"    @Override
    public void onResume() {
        super.onResume();
        if (activity != null) {
            setTitle(activity.getString(R.string.title_activity_history));
        }
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[109, 114]","{'A341': [(109, 109), (112, 114)], 'A299': [(110, 111)]}","{'A341': 0.6666666666666666, 'A299': 0.3333333333333333}",A341,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.menu_history, menu);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,initViews,"void initViews(View,Bundle)","[120, 126]","{'A310': [(120, 120), (122, 122), (126, 126)], 'A294': [(121, 121), (123, 123)], 'A306': [(124, 125)]}","{'A310': 0.42857142857142855, 'A294': 0.2857142857142857, 'A306': 0.2857142857142857}",A310,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);
        if (!useAsFrontPage) {
            setTitle(getString(R.string.title_last_played));
        }
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,getListHeader,ViewBinding getListHeader(),"[128, 135]","{'A310': [(128, 128), (135, 135)], 'A295': [(129, 134)]}","{'A310': 0.25, 'A295': 0.75}",A295,,"    @Override
    protected ViewBinding getListHeader() {
        headerBinding = StatisticPlaylistControlBinding.inflate(activity.getLayoutInflater(),
                itemsList, false);
        playlistControlBinding = headerBinding.playlistControl;

        return headerBinding;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,initListeners,void initListeners(),"[137, 159]","{'A310': [(137, 140), (142, 142), (144, 144), (149, 152), (154, 154), (156, 159)], 'A294': [(143, 143), (153, 153)], 'A295': [(141, 141)], 'A305': [(145, 148)], 'A298': [(155, 155)]}","{'A310': 0.6521739130434783, 'A294': 0.08695652173913043, 'A295': 0.043478260869565216, 'A305': 0.17391304347826086, 'A298': 0.043478260869565216}",A310,,"    @Override
    protected void initListeners() {
        super.initListeners();

        itemListAdapter.setSelectedListener(new OnClickGesture<>() {
            @Override
            public void selected(final LocalItem selectedItem) {
                if (selectedItem instanceof StreamStatisticsEntry) {
                    final StreamEntity item =
                            ((StreamStatisticsEntry) selectedItem).getStreamEntity();
                    NavigationHelper.openVideoDetailFragment(requireContext(), getFM(),
                            item.getServiceId(), item.getUrl(), item.getTitle(), null, false);
                }
            }

            @Override
            public void held(final LocalItem selectedItem) {
                if (selectedItem instanceof StreamStatisticsEntry) {
                    showInfoItemDialog((StreamStatisticsEntry) selectedItem);
                }
            }
        });
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,selected,void selected(LocalItem),"[142, 150]","{'A310': [(142, 142), (144, 144), (149, 150)], 'A294': [(143, 143)], 'A305': [(145, 148)]}","{'A310': 0.4444444444444444, 'A294': 0.1111111111111111, 'A305': 0.4444444444444444}",A310,,"            @Override
            public void selected(final LocalItem selectedItem) {
                if (selectedItem instanceof StreamStatisticsEntry) {
                    final StreamEntity item =
                            ((StreamStatisticsEntry) selectedItem).getStreamEntity();
                    NavigationHelper.openVideoDetailFragment(requireContext(), getFM(),
                            item.getServiceId(), item.getUrl(), item.getTitle(), null, false);
                }
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,held,void held(LocalItem),"[152, 157]","{'A310': [(152, 152), (154, 154), (156, 157)], 'A294': [(153, 153)], 'A298': [(155, 155)]}","{'A310': 0.6666666666666666, 'A294': 0.16666666666666666, 'A298': 0.16666666666666666}",A310,,"            @Override
            public void held(final LocalItem selectedItem) {
                if (selectedItem instanceof StreamStatisticsEntry) {
                    showInfoItemDialog((StreamStatisticsEntry) selectedItem);
                }
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[161, 170]","{'A341': [(161, 161), (168, 170)], 'A294': [(162, 162)], 'A305': [(163, 167)]}","{'A341': 0.4, 'A294': 0.1, 'A305': 0.5}",A305,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        if (item.getItemId() == R.id.action_history_clear) {
            HistorySettingsFragment
                    .openDeleteWatchHistoryDialog(requireContext(), recordManager, disposables);
        } else {
            return super.onOptionsItemSelected(item);
        }
        return true;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,startLoading,void startLoading(boolean),"[176, 182]","{'A310': [(176, 176), (178, 182)], 'A294': [(177, 177)]}","{'A310': 0.8571428571428571, 'A294': 0.14285714285714285}",A310,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);
        recordManager.getStreamStatistics()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getHistoryObserver());
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onPause,void onPause(),"[188, 192]","{'A310': [(188, 190), (192, 192)], 'A305': [(191, 191)]}","{'A310': 0.8, 'A305': 0.2}",A310,,"    @Override
    public void onPause() {
        super.onPause();
        itemsListState = Objects.requireNonNull(itemsList.getLayoutManager()).onSaveInstanceState();
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onDestroyView,void onDestroyView(),"[194, 209]","{'A310': [(194, 197), (204, 204), (208, 209)], 'A294': [(198, 200), (205, 207)], 'A295': [(201, 201)], 'A298': [(202, 203)]}","{'A310': 0.4375, 'A294': 0.375, 'A295': 0.0625, 'A298': 0.125}",A310,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();

        if (itemListAdapter != null) {
            itemListAdapter.unsetSelectedListener();
        }

        headerBinding = null;
        playlistControlBinding = null;

        if (databaseSubscription != null) {
            databaseSubscription.cancel();
        }
        databaseSubscription = null;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onDestroy,void onDestroy(),"[211, 216]","{'A310': [(211, 216)]}",{'A310': 1.0},A310,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        recordManager = null;
        itemsListState = null;
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,getHistoryObserver,Subscriber<List<StreamStatisticsEntry>> getHistoryObserver(),"[222, 253]","{'A310': [(222, 224), (226, 227), (231, 235), (237, 237), (241, 243), (247, 253)], 'A294': [(225, 225), (228, 230), (236, 236), (238, 240), (244, 244)], 'A305': [(245, 246)]}","{'A310': 0.65625, 'A294': 0.28125, 'A305': 0.0625}",A310,,"    private Subscriber<List<StreamStatisticsEntry>> getHistoryObserver() {
        return new Subscriber<List<StreamStatisticsEntry>>() {
            @Override
            public void onSubscribe(final Subscription s) {
                showLoading();

                if (databaseSubscription != null) {
                    databaseSubscription.cancel();
                }
                databaseSubscription = s;
                databaseSubscription.request(1);
            }

            @Override
            public void onNext(final List<StreamStatisticsEntry> streams) {
                handleResult(streams);
                if (databaseSubscription != null) {
                    databaseSubscription.request(1);
                }
            }

            @Override
            public void onError(final Throwable exception) {
                showError(
                        new ErrorInfo(exception, UserAction.SOMETHING_ELSE, ""History Statistics""));
            }

            @Override
            public void onComplete() {
            }
        };
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onSubscribe,void onSubscribe(Subscription),"[224, 233]","{'A310': [(224, 224), (226, 227), (231, 233)], 'A294': [(225, 225), (228, 230)]}","{'A310': 0.6, 'A294': 0.4}",A310,,"            @Override
            public void onSubscribe(final Subscription s) {
                showLoading();

                if (databaseSubscription != null) {
                    databaseSubscription.cancel();
                }
                databaseSubscription = s;
                databaseSubscription.request(1);
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onNext,void onNext(List<StreamStatisticsEntry>),"[235, 241]","{'A310': [(235, 235), (237, 237), (241, 241)], 'A294': [(236, 236), (238, 240)]}","{'A310': 0.42857142857142855, 'A294': 0.5714285714285714}",A294,,"            @Override
            public void onNext(final List<StreamStatisticsEntry> streams) {
                handleResult(streams);
                if (databaseSubscription != null) {
                    databaseSubscription.request(1);
                }
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onError,void onError(Throwable),"[243, 247]","{'A310': [(243, 243), (247, 247)], 'A294': [(244, 244)], 'A305': [(245, 246)]}","{'A310': 0.4, 'A294': 0.2, 'A305': 0.4}",A310,,"            @Override
            public void onError(final Throwable exception) {
                showError(
                        new ErrorInfo(exception, UserAction.SOMETHING_ELSE, ""History Statistics""));
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,onComplete,void onComplete(),"[249, 251]","{'A310': [(249, 251)]}",{'A310': 1.0},A310,,"            @Override
            public void onComplete() {
            }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,handleResult,void handleResult(List<StreamStatisticsEntry>),"[255, 282]","{'A302': [(263, 263)], 'A310': [(255, 255), (257, 257), (261, 261), (264, 271), (273, 276), (280, 282)], 'A294': [(256, 256), (258, 260)], 'A295': [(262, 262), (279, 279)], 'A305': [(272, 272)], 'A298': [(277, 278)]}","{'A302': 0.03571428571428571, 'A310': 0.6428571428571429, 'A294': 0.14285714285714285, 'A295': 0.07142857142857142, 'A305': 0.03571428571428571, 'A298': 0.07142857142857142}",A310,,"    @Override
    public void handleResult(@NonNull final List<StreamStatisticsEntry> result) {
        super.handleResult(result);
        if (itemListAdapter == null) {
            return;
        }

        playlistControlBinding.getRoot().setVisibility(View.VISIBLE);

        itemListAdapter.clearStreamItemList();

        if (result.isEmpty()) {
            showEmptyState();
            return;
        }

        itemListAdapter.addItems(processResult(result));
        if (itemsListState != null && itemsList.getLayoutManager() != null) {
            itemsList.getLayoutManager().onRestoreInstanceState(itemsListState);
            itemsListState = null;
        }

        PlayButtonHelper.initPlaylistControlClickListener(activity, playlistControlBinding, this);

        headerBinding.sortButton.setOnClickListener(view -> toggleSortMode());

        hideLoading();
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,resetFragment,void resetFragment(),"[288, 294]","{'A310': [(288, 290), (294, 294)], 'A294': [(291, 293)]}","{'A310': 0.5714285714285714, 'A294': 0.42857142857142855}",A310,,"    @Override
    protected void resetFragment() {
        super.resetFragment();
        if (databaseSubscription != null) {
            databaseSubscription.cancel();
        }
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,toggleSortMode,void toggleSortMode(),"[300, 314]","{'A302': [(300, 300), (302, 303), (306, 308), (312, 314)], 'A294': [(301, 301)], 'A295': [(305, 305), (309, 309), (311, 311)], 'A312': [(304, 304), (310, 310)]}","{'A302': 0.6, 'A294': 0.06666666666666667, 'A295': 0.2, 'A312': 0.13333333333333333}",A302,,"    private void toggleSortMode() {
        if (sortMode == StatisticSortMode.LAST_PLAYED) {
            sortMode = StatisticSortMode.MOST_PLAYED;
            setTitle(getString(R.string.title_most_played));
            headerBinding.sortButtonIcon.setImageResource(R.drawable.ic_history);
            headerBinding.sortButtonText.setText(R.string.title_last_played);
        } else {
            sortMode = StatisticSortMode.LAST_PLAYED;
            setTitle(getString(R.string.title_last_played));
            headerBinding.sortButtonIcon.setImageResource(
                R.drawable.ic_filter_list);
            headerBinding.sortButtonText.setText(R.string.title_most_played);
        }
        startLoading(true);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,getPlayQueueStartingAt,PlayQueue getPlayQueueStartingAt(StreamStatisticsEntry),"[316, 318]","{'A294': [(316, 316)], 'A305': [(317, 318)]}","{'A294': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    private PlayQueue getPlayQueueStartingAt(final StreamStatisticsEntry infoItem) {
        return getPlayQueue(Math.max(itemListAdapter.getItemsList().indexOf(infoItem), 0));
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,showInfoItemDialog,void showInfoItemDialog(StreamStatisticsEntry),"[320, 340]","{'A310': [(321, 322), (340, 340)], 'A305': [(323, 323)], 'A298': [(320, 320), (324, 339)]}","{'A310': 0.14285714285714285, 'A305': 0.047619047619047616, 'A298': 0.8095238095238095}",A298,,"    private void showInfoItemDialog(final StreamStatisticsEntry item) {
        final Context context = getContext();
        final StreamInfoItem infoItem = item.toStreamInfoItem();

        try {
            final InfoItemDialog.Builder dialogBuilder =
                    new InfoItemDialog.Builder(getActivity(), context, this, infoItem);

            // set entries in the middle; the others are added automatically
            dialogBuilder
                    .addEntry(StreamDialogDefaultEntry.DELETE)
                    .setAction(
                            StreamDialogDefaultEntry.DELETE,
                            (f, i) -> deleteEntry(
                                    Math.max(itemListAdapter.getItemsList().indexOf(item), 0)))
                    .create()
                    .show();
        } catch (final IllegalArgumentException e) {
            InfoItemDialog.Builder.reportErrorDuringInitialization(e, infoItem);
        }
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,deleteEntry,void deleteEntry(int),"[342, 365]","{'A302': [(342, 342), (345, 345), (348, 349), (352, 359), (362, 365)], 'A294': [(344, 344), (351, 351)], 'A305': [(343, 343), (346, 347), (350, 350), (360, 361)]}","{'A302': 0.6666666666666666, 'A294': 0.08333333333333333, 'A305': 0.25}",A302,,"    private void deleteEntry(final int index) {
        final LocalItem infoItem = itemListAdapter.getItemsList().get(index);
        if (infoItem instanceof StreamStatisticsEntry) {
            final StreamStatisticsEntry entry = (StreamStatisticsEntry) infoItem;
            final Disposable onDelete = recordManager
                    .deleteStreamHistoryAndState(entry.getStreamId())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(
                            () -> {
                                if (getView() != null) {
                                    Snackbar.make(getView(), R.string.one_item_deleted,
                                            Snackbar.LENGTH_SHORT).show();
                                } else {
                                    Toast.makeText(getContext(),
                                            R.string.one_item_deleted,
                                            Toast.LENGTH_SHORT).show();
                                }
                            },
                            throwable -> showSnackBarError(new ErrorInfo(throwable,
                                    UserAction.DELETE_FROM_HISTORY, ""Deleting item"")));

            disposables.add(onDelete);
        }
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,getPlayQueue,PlayQueue getPlayQueue(),"[367, 370]","{'A310': [(369, 370)], 'A300': [(367, 367)], 'A298': [(368, 368)]}","{'A310': 0.5, 'A300': 0.25, 'A298': 0.25}",A310,,"    @Override
    public PlayQueue getPlayQueue() {
        return getPlayQueue(0);
    }
"
org.schabi.newpipe.local.history,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/history/StatisticsPlaylistFragment.java,StatisticsPlaylistFragment,getPlayQueue,PlayQueue getPlayQueue(int),"[372, 385]","{'A310': [(372, 377), (379, 385)], 'A294': [(378, 378)]}","{'A310': 0.9285714285714286, 'A294': 0.07142857142857142}",A310,,"    private PlayQueue getPlayQueue(final int index) {
        if (itemListAdapter == null) {
            return new SinglePlayQueue(Collections.emptyList(), 0);
        }

        final List<LocalItem> infoItems = itemListAdapter.getItemsList();
        final List<StreamInfoItem> streamInfoItems = new ArrayList<>(infoItems.size());
        for (final LocalItem item : infoItems) {
            if (item instanceof StreamStatisticsEntry) {
                streamInfoItems.add(((StreamStatisticsEntry) item).toStreamInfoItem());
            }
        }
        return new SinglePlayQueue(streamInfoItems, index);
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalStatisticStreamItemHolder.java,LocalStatisticStreamItemHolder,getStreamInfoDetailLine,"String getStreamInfoDetailLine(StreamStatisticsEntry,DateTimeFormatter)","[72, 80]","{'A310': [(72, 72), (80, 80)], 'A295': [(73, 73)], 'A300': [(74, 79)]}","{'A310': 0.2222222222222222, 'A295': 0.1111111111111111, 'A300': 0.6666666666666666}",A300,,"    private String getStreamInfoDetailLine(final StreamStatisticsEntry entry,
                                           final DateTimeFormatter dateTimeFormatter) {
        return Localization.concatenateStrings(
                // watchCount
                Localization.shortViewCount(itemBuilder.getContext(), entry.getWatchCount()),
                dateTimeFormatter.format(entry.getLatestAccessDate()),
                // serviceName
                ServiceHelper.getNameOfServiceById(entry.getStreamEntity().getServiceId()));
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalStatisticStreamItemHolder.java,LocalStatisticStreamItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[82, 136]","{'A310': [(82, 82), (89, 90), (93, 93), (97, 99), (110, 111), (113, 114), (118, 119), (122, 136)], 'A294': [(83, 84), (86, 88), (95, 96), (105, 105)], 'A295': [(85, 85), (116, 116)], 'A305': [(100, 100), (106, 106), (120, 121)], 'A343': [(101, 102)], 'A340': [(103, 103), (107, 109), (112, 112)], 'A341': [(115, 115), (117, 117)], 'A301': [(91, 92), (94, 94), (104, 104)]}","{'A310': 0.509090909090909, 'A294': 0.14545454545454545, 'A295': 0.03636363636363636, 'A305': 0.07272727272727272, 'A343': 0.03636363636363636, 'A340': 0.09090909090909091, 'A341': 0.03636363636363636, 'A301': 0.07272727272727272}",A310,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        if (!(localItem instanceof StreamStatisticsEntry)) {
            return;
        }
        final StreamStatisticsEntry item = (StreamStatisticsEntry) localItem;

        itemVideoTitleView.setText(item.getStreamEntity().getTitle());
        itemUploaderView.setText(item.getStreamEntity().getUploader());

        if (item.getStreamEntity().getDuration() > 0) {
            itemDurationView.
                    setText(Localization.getDurationString(item.getStreamEntity().getDuration()));
            itemDurationView.setBackgroundColor(ContextCompat.getColor(itemBuilder.getContext(),
                    R.color.duration_background_color));
            itemDurationView.setVisibility(View.VISIBLE);

            if (DependentPreferenceHelper.getPositionsInListsEnabled(itemProgressView.getContext())
                    && item.getProgressMillis() > 0) {
                itemProgressView.setVisibility(View.VISIBLE);
                itemProgressView.setMax((int) item.getStreamEntity().getDuration());
                itemProgressView.setProgress((int) TimeUnit.MILLISECONDS
                        .toSeconds(item.getProgressMillis()));
            } else {
                itemProgressView.setVisibility(View.GONE);
            }
        } else {
            itemDurationView.setVisibility(View.GONE);
            itemProgressView.setVisibility(View.GONE);
        }

        if (itemAdditionalDetails != null) {
            itemAdditionalDetails.setText(getStreamInfoDetailLine(item, dateTimeFormatter));
        }

        // Default thumbnail is shown on error, while loading and if the url is empty
        PicassoHelper.loadThumbnail(item.getStreamEntity().getThumbnailUrl())
                .into(itemThumbnailView);

        itemView.setOnClickListener(view -> {
            if (itemBuilder.getOnItemSelectedListener() != null) {
                itemBuilder.getOnItemSelectedListener().selected(item);
            }
        });

        itemView.setLongClickable(true);
        itemView.setOnLongClickListener(view -> {
            if (itemBuilder.getOnItemSelectedListener() != null) {
                itemBuilder.getOnItemSelectedListener().held(item);
            }
            return true;
        });
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalStatisticStreamItemHolder.java,LocalStatisticStreamItemHolder,updateState,"void updateState(LocalItem,HistoryRecordManager)","[138, 160]","{'A294': [(139, 143), (150, 150), (153, 153)], 'A295': [(155, 155), (158, 158)], 'A305': [(145, 145), (151, 151), (154, 154)], 'A343': [(146, 147)], 'A340': [(138, 138), (144, 144), (149, 149), (152, 152), (156, 157), (159, 160)], 'A301': [(148, 148)]}","{'A294': 0.30434782608695654, 'A295': 0.08695652173913043, 'A305': 0.13043478260869565, 'A343': 0.08695652173913043, 'A340': 0.34782608695652173, 'A301': 0.043478260869565216}",A340,,"    @Override
    public void updateState(final LocalItem localItem,
                            final HistoryRecordManager historyRecordManager) {
        if (!(localItem instanceof StreamStatisticsEntry)) {
            return;
        }
        final StreamStatisticsEntry item = (StreamStatisticsEntry) localItem;

        if (DependentPreferenceHelper.getPositionsInListsEnabled(itemProgressView.getContext())
                && item.getProgressMillis() > 0 && item.getStreamEntity().getDuration() > 0) {
            itemProgressView.setMax((int) item.getStreamEntity().getDuration());
            if (itemProgressView.getVisibility() == View.VISIBLE) {
                itemProgressView.setProgressAnimated((int) TimeUnit.MILLISECONDS
                        .toSeconds(item.getProgressMillis()));
            } else {
                itemProgressView.setProgress((int) TimeUnit.MILLISECONDS
                        .toSeconds(item.getProgressMillis()));
                ViewUtils.animate(itemProgressView, true, 500);
            }
        } else if (itemProgressView.getVisibility() == View.VISIBLE) {
            ViewUtils.animate(itemProgressView, false, 500);
        }
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/RemotePlaylistItemHolder.java,RemotePlaylistItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[28, 51]","{'A310': [(28, 28), (35, 37), (49, 49), (51, 51)], 'A294': [(29, 30), (32, 34)], 'A305': [(38, 39), (48, 48)], 'A300': [(43, 43), (45, 45)], 'A295': [(31, 31), (50, 50)], 'A368': [(40, 42), (44, 44), (46, 47)]}","{'A310': 0.25, 'A294': 0.20833333333333334, 'A305': 0.125, 'A300': 0.08333333333333333, 'A295': 0.08333333333333333, 'A368': 0.25}",A310,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        if (!(localItem instanceof PlaylistRemoteEntity)) {
            return;
        }
        final PlaylistRemoteEntity item = (PlaylistRemoteEntity) localItem;

        itemTitleView.setText(item.getName());
        itemStreamCountView.setText(Localization.localizeStreamCountMini(
                itemStreamCountView.getContext(), item.getStreamCount()));
        // Here is where the uploader name is set in the bookmarked playlists library
        if (!TextUtils.isEmpty(item.getUploader())) {
            itemUploaderView.setText(Localization.concatenateStrings(item.getUploader(),
                    ServiceHelper.getNameOfServiceById(item.getServiceId())));
        } else {
            itemUploaderView.setText(ServiceHelper.getNameOfServiceById(item.getServiceId()));
        }

        PicassoHelper.loadPlaylistThumbnail(item.getThumbnailUrl()).into(itemThumbnailView);

        super.updateFromItem(localItem, historyRecordManager, dateTimeFormatter);
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalItemHolder.java,LocalItemHolder,updateState,"void updateState(LocalItem,HistoryRecordManager)","[46, 47]","{'A294': [(46, 47)]}",{'A294': 1.0},A294,,"    public void updateState(final LocalItem localItem,
                            final HistoryRecordManager historyRecordManager) { }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalPlaylistStreamItemHolder.java,LocalPlaylistStreamItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[51, 104]","{'A310': [(51, 51), (58, 59), (64, 64), (68, 70), (81, 85), (88, 104)], 'A294': [(52, 53), (55, 57), (61, 62), (66, 67), (76, 76)], 'A295': [(54, 54)], 'A305': [(71, 71), (77, 77), (86, 87)], 'A343': [(72, 73)], 'A300': [(63, 63)], 'A340': [(74, 74), (78, 80)], 'A301': [(60, 60), (65, 65), (75, 75)]}","{'A310': 0.5370370370370371, 'A294': 0.18518518518518517, 'A295': 0.018518518518518517, 'A305': 0.07407407407407407, 'A343': 0.037037037037037035, 'A300': 0.018518518518518517, 'A340': 0.07407407407407407, 'A301': 0.05555555555555555}",A310,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        if (!(localItem instanceof PlaylistStreamEntry)) {
            return;
        }
        final PlaylistStreamEntry item = (PlaylistStreamEntry) localItem;

        itemVideoTitleView.setText(item.getStreamEntity().getTitle());
        itemAdditionalDetailsView.setText(Localization
                .concatenateStrings(item.getStreamEntity().getUploader(),
                        ServiceHelper.getNameOfServiceById(item.getStreamEntity().getServiceId())));

        if (item.getStreamEntity().getDuration() > 0) {
            itemDurationView.setText(Localization
                    .getDurationString(item.getStreamEntity().getDuration()));
            itemDurationView.setBackgroundColor(ContextCompat.getColor(itemBuilder.getContext(),
                    R.color.duration_background_color));
            itemDurationView.setVisibility(View.VISIBLE);

            if (DependentPreferenceHelper.getPositionsInListsEnabled(itemProgressView.getContext())
                    && item.getProgressMillis() > 0) {
                itemProgressView.setVisibility(View.VISIBLE);
                itemProgressView.setMax((int) item.getStreamEntity().getDuration());
                itemProgressView.setProgress((int) TimeUnit.MILLISECONDS
                        .toSeconds(item.getProgressMillis()));
            } else {
                itemProgressView.setVisibility(View.GONE);
            }
        } else {
            itemDurationView.setVisibility(View.GONE);
        }

        // Default thumbnail is shown on error, while loading and if the url is empty
        PicassoHelper.loadThumbnail(item.getStreamEntity().getThumbnailUrl())
                .into(itemThumbnailView);

        itemView.setOnClickListener(view -> {
            if (itemBuilder.getOnItemSelectedListener() != null) {
                itemBuilder.getOnItemSelectedListener().selected(item);
            }
        });

        itemView.setLongClickable(true);
        itemView.setOnLongClickListener(view -> {
            if (itemBuilder.getOnItemSelectedListener() != null) {
                itemBuilder.getOnItemSelectedListener().held(item);
            }
            return true;
        });

        itemHandleView.setOnTouchListener(getOnTouchListener(item));
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalPlaylistStreamItemHolder.java,LocalPlaylistStreamItemHolder,updateState,"void updateState(LocalItem,HistoryRecordManager)","[106, 128]","{'A294': [(107, 111), (118, 118), (121, 121)], 'A295': [(123, 123), (126, 126)], 'A305': [(113, 113), (119, 119), (122, 122)], 'A343': [(114, 115)], 'A340': [(106, 106), (112, 112), (117, 117), (120, 120), (124, 125), (127, 128)], 'A301': [(116, 116)]}","{'A294': 0.30434782608695654, 'A295': 0.08695652173913043, 'A305': 0.13043478260869565, 'A343': 0.08695652173913043, 'A340': 0.34782608695652173, 'A301': 0.043478260869565216}",A340,,"    @Override
    public void updateState(final LocalItem localItem,
                            final HistoryRecordManager historyRecordManager) {
        if (!(localItem instanceof PlaylistStreamEntry)) {
            return;
        }
        final PlaylistStreamEntry item = (PlaylistStreamEntry) localItem;

        if (DependentPreferenceHelper.getPositionsInListsEnabled(itemProgressView.getContext())
                && item.getProgressMillis() > 0 && item.getStreamEntity().getDuration() > 0) {
            itemProgressView.setMax((int) item.getStreamEntity().getDuration());
            if (itemProgressView.getVisibility() == View.VISIBLE) {
                itemProgressView.setProgressAnimated((int) TimeUnit.MILLISECONDS
                        .toSeconds(item.getProgressMillis()));
            } else {
                itemProgressView.setProgress((int) TimeUnit.MILLISECONDS
                        .toSeconds(item.getProgressMillis()));
                ViewUtils.animate(itemProgressView, true, 500);
            }
        } else if (itemProgressView.getVisibility() == View.VISIBLE) {
            ViewUtils.animate(itemProgressView, false, 500);
        }
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalPlaylistStreamItemHolder.java,LocalPlaylistStreamItemHolder,getOnTouchListener,View.OnTouchListener getOnTouchListener(PlaylistStreamEntry),"[130, 140]","{'A310': [(130, 132), (135, 140)], 'A294': [(133, 134)]}","{'A310': 0.8181818181818182, 'A294': 0.18181818181818182}",A310,,"    private View.OnTouchListener getOnTouchListener(final PlaylistStreamEntry item) {
        return (view, motionEvent) -> {
            view.performClick();
            if (itemBuilder != null && itemBuilder.getOnItemSelectedListener() != null
                    && motionEvent.getActionMasked() == MotionEvent.ACTION_DOWN) {
                itemBuilder.getOnItemSelectedListener().drag(item,
                        LocalPlaylistStreamItemHolder.this);
            }
            return false;
        };
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/RemoteBookmarkPlaylistItemHolder.java,RemoteBookmarkPlaylistItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[29, 41]","{'A352': [(29, 41)]}",{'A352': 1.0},A352,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        if (!(localItem instanceof PlaylistRemoteEntity)) {
            return;
        }
        final PlaylistRemoteEntity item = (PlaylistRemoteEntity) localItem;

        itemHandleView.setOnTouchListener(getOnTouchListener(item));

        super.updateFromItem(localItem, historyRecordManager, dateTimeFormatter);
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/RemoteBookmarkPlaylistItemHolder.java,RemoteBookmarkPlaylistItemHolder,getOnTouchListener,View.OnTouchListener getOnTouchListener(PlaylistRemoteEntity),"[43, 53]","{'A352': [(43, 53)]}",{'A352': 1.0},A352,,"    private View.OnTouchListener getOnTouchListener(final PlaylistRemoteEntity item) {
        return (view, motionEvent) -> {
            view.performClick();
            if (itemBuilder != null && itemBuilder.getOnItemSelectedListener() != null
                    && motionEvent.getActionMasked() == MotionEvent.ACTION_DOWN) {
                itemBuilder.getOnItemSelectedListener().drag(item,
                        RemoteBookmarkPlaylistItemHolder.this);
            }
            return false;
        };
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalBookmarkPlaylistItemHolder.java,LocalBookmarkPlaylistItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[29, 41]","{'A352': [(29, 41)]}",{'A352': 1.0},A352,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        if (!(localItem instanceof PlaylistMetadataEntry)) {
            return;
        }
        final PlaylistMetadataEntry item = (PlaylistMetadataEntry) localItem;

        itemHandleView.setOnTouchListener(getOnTouchListener(item));

        super.updateFromItem(localItem, historyRecordManager, dateTimeFormatter);
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalBookmarkPlaylistItemHolder.java,LocalBookmarkPlaylistItemHolder,getOnTouchListener,View.OnTouchListener getOnTouchListener(PlaylistMetadataEntry),"[43, 53]","{'A352': [(43, 53)]}",{'A352': 1.0},A352,,"    private View.OnTouchListener getOnTouchListener(final PlaylistMetadataEntry item) {
        return (view, motionEvent) -> {
            view.performClick();
            if (itemBuilder != null && itemBuilder.getOnItemSelectedListener() != null
                    && motionEvent.getActionMasked() == MotionEvent.ACTION_DOWN) {
                itemBuilder.getOnItemSelectedListener().drag(item,
                        LocalBookmarkPlaylistItemHolder.this);
            }
            return false;
        };
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/LocalPlaylistItemHolder.java,LocalPlaylistItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[29, 53]","{'A310': [(29, 29), (36, 38), (41, 42), (44, 44), (53, 53)], 'A305': [(39, 40), (43, 43), (45, 51)], 'A295': [(32, 32), (52, 52)], 'A294': [(30, 31), (33, 35)]}","{'A310': 0.32, 'A305': 0.4, 'A295': 0.08, 'A294': 0.2}",A305,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        if (!(localItem instanceof PlaylistMetadataEntry)) {
            return;
        }
        final PlaylistMetadataEntry item = (PlaylistMetadataEntry) localItem;

        itemTitleView.setText(item.name);
        itemStreamCountView.setText(Localization.localizeStreamCountMini(
                itemStreamCountView.getContext(), item.streamCount));
        itemUploaderView.setVisibility(View.INVISIBLE);

        PicassoHelper.loadPlaylistThumbnail(item.thumbnailUrl).into(itemThumbnailView);

        if (item instanceof PlaylistDuplicatesEntry
                && ((PlaylistDuplicatesEntry) item).timesStreamIsContained > 0) {
            itemView.setAlpha(GRAYED_OUT_ALPHA);
        } else {
            itemView.setAlpha(1.0f);
        }

        super.updateFromItem(localItem, historyRecordManager, dateTimeFormatter);
    }
"
org.schabi.newpipe.local.holder,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/holder/PlaylistItemHolder.java,PlaylistItemHolder,updateFromItem,"void updateFromItem(LocalItem,HistoryRecordManager,DateTimeFormatter)","[34, 51]","{'A310': [(34, 34), (38, 51)], 'A295': [(37, 37)], 'A294': [(35, 36)]}","{'A310': 0.8333333333333334, 'A295': 0.05555555555555555, 'A294': 0.1111111111111111}",A310,,"    @Override
    public void updateFromItem(final LocalItem localItem,
                               final HistoryRecordManager historyRecordManager,
                               final DateTimeFormatter dateTimeFormatter) {
        itemView.setOnClickListener(view -> {
            if (itemBuilder.getOnItemSelectedListener() != null) {
                itemBuilder.getOnItemSelectedListener().selected(localItem);
            }
        });

        itemView.setLongClickable(true);
        itemView.setOnLongClickListener(view -> {
            if (itemBuilder.getOnItemSelectedListener() != null) {
                itemBuilder.getOnItemSelectedListener().held(localItem);
            }
            return true;
        });
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemBuilder.java,LocalItemBuilder,getContext,Context getContext(),"[37, 39]","{'A310': [(37, 39)]}",{'A310': 1.0},A310,,"    public Context getContext() {
        return context;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemBuilder.java,LocalItemBuilder,getOnItemSelectedListener,OnClickGesture<LocalItem> getOnItemSelectedListener(),"[41, 43]","{'A310': [(41, 43)]}",{'A310': 1.0},A310,,"    public OnClickGesture<LocalItem> getOnItemSelectedListener() {
        return onSelectedListener;
    }
"
org.schabi.newpipe.local,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/LocalItemBuilder.java,LocalItemBuilder,setOnItemSelectedListener,void setOnItemSelectedListener(OnClickGesture<LocalItem>),"[45, 47]","{'A310': [(46, 47)], 'A294': [(45, 45)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setOnItemSelectedListener(final OnClickGesture<LocalItem> listener) {
        this.onSelectedListener = listener;
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/ImportConfirmationDialog.java,ImportConfirmationDialog,show,"void show(Fragment,Intent)","[22, 27]","{'A301': [(24, 25), (27, 27)], 'A294': [(22, 23)], 'A299': [(26, 26)]}","{'A301': 0.5, 'A294': 0.3333333333333333, 'A299': 0.16666666666666666}",A301,,"    public static void show(@NonNull final Fragment fragment,
                            @NonNull final Intent resultServiceIntent) {
        final ImportConfirmationDialog confirmationDialog = new ImportConfirmationDialog();
        confirmationDialog.setResultServiceIntent(resultServiceIntent);
        confirmationDialog.show(fragment.getParentFragmentManager(), null);
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/ImportConfirmationDialog.java,ImportConfirmationDialog,setResultServiceIntent,void setResultServiceIntent(Intent),"[29, 31]","{'A294': [(29, 31)]}",{'A294': 1.0},A294,,"    public void setResultServiceIntent(final Intent resultServiceIntent) {
        this.resultServiceIntent = resultServiceIntent;
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/ImportConfirmationDialog.java,ImportConfirmationDialog,onCreateDialog,Dialog onCreateDialog(Bundle),"[33, 47]","{'A301': [(33, 34), (37, 39), (41, 47)], 'A294': [(35, 35)], 'A298': [(36, 36)], 'A305': [(40, 40)]}","{'A301': 0.8, 'A294': 0.06666666666666667, 'A298': 0.06666666666666667, 'A305': 0.06666666666666667}",A301,,"    @NonNull
    @Override
    public Dialog onCreateDialog(@Nullable final Bundle savedInstanceState) {
        return new AlertDialog.Builder(requireContext())
                .setMessage(R.string.import_network_expensive_warning)
                .setCancelable(true)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.ok, (dialogInterface, i) -> {
                    if (resultServiceIntent != null && getContext() != null) {
                        getContext().startService(resultServiceIntent);
                    }
                    dismiss();
                })
                .create();
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/ImportConfirmationDialog.java,ImportConfirmationDialog,onCreate,void onCreate(Bundle),"[49, 58]","{'A301': [(49, 49), (51, 52), (56, 56), (58, 58)], 'A294': [(50, 50), (53, 55)], 'A300': [(57, 57)]}","{'A301': 0.5, 'A294': 0.4, 'A300': 0.1}",A301,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (resultServiceIntent == null) {
            throw new IllegalStateException(""Result intent is null"");
        }

        Bridge.restoreInstanceState(this, savedInstanceState);
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/ImportConfirmationDialog.java,ImportConfirmationDialog,onSaveInstanceState,void onSaveInstanceState(Bundle),"[60, 64]","{'A301': [(60, 60), (62, 62), (64, 64)], 'A299': [(61, 61)], 'A300': [(63, 63)]}","{'A301': 0.6, 'A299': 0.2, 'A300': 0.2}",A301,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        Bridge.saveInstanceState(this, outState);
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,onSizeReceived,void onSizeReceived(int),"[70, 74]","{'A294': [(70, 74)]}",{'A294': 1.0},A294,,"        @Override
        public void onSizeReceived(final int size) {
            maxProgress.set(size);
            currentProgress.set(0);
        }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,onItemCompleted,void onItemCompleted(String),"[76, 80]","{'A294': [(76, 80)]}",{'A294': 1.0},A294,,"        @Override
        public void onItemCompleted(final String itemName) {
            currentProgress.incrementAndGet();
            notificationUpdater.onNext(itemName);
        }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,onBind,IBinder onBind(Intent),"[85, 89]","{'A301': [(85, 86), (88, 89)], 'A294': [(87, 87)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"    @Nullable
    @Override
    public IBinder onBind(final Intent intent) {
        return null;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,onCreate,void onCreate(),"[91, 96]","{'A301': [(91, 96)]}",{'A301': 1.0},A301,,"    @Override
    public void onCreate() {
        super.onCreate();
        subscriptionManager = new SubscriptionManager(this);
        setupNotification();
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,onDestroy,void onDestroy(),"[98, 102]","{'A301': [(98, 102)]}",{'A301': 1.0},A301,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        disposeAll();
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,disposeAll,void disposeAll(),"[104, 106]","{'A301': [(104, 106)]}",{'A301': 1.0},A301,,"    protected void disposeAll() {
        disposables.clear();
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,setupNotification,void setupNotification(),"[117, 131]","{'A301': [(117, 121), (125, 131)], 'A294': [(122, 122), (124, 124)], 'A305': [(123, 123)]}","{'A301': 0.8, 'A294': 0.13333333333333333, 'A305': 0.06666666666666667}",A301,,"    protected void setupNotification() {
        notificationManager = NotificationManagerCompat.from(this);
        notificationBuilder = createNotification();
        startForeground(getNotificationId(), notificationBuilder.build());

        final Function<Flowable<String>, Publisher<String>> throttleAfterFirstEmission = flow ->
                flow.take(1).concatWith(flow.skip(1)
                        .throttleLast(NOTIFICATION_SAMPLING_PERIOD, TimeUnit.MILLISECONDS));

        disposables.add(notificationUpdater
                .filter(s -> !s.isEmpty())
                .publish(throttleAfterFirstEmission)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(this::updateNotification));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,updateNotification,void updateNotification(String),"[133, 148]","{'A301': [(136, 138), (142, 143), (145, 148)], 'A294': [(133, 135), (139, 141), (144, 144)]}","{'A301': 0.5625, 'A294': 0.4375}",A301,,"    protected void updateNotification(final String text) {
        notificationBuilder
                .setProgress(maxProgress.get(), currentProgress.get(), maxProgress.get() == -1);

        final String progressText = currentProgress + ""/"" + maxProgress;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            if (!TextUtils.isEmpty(text)) {
                notificationBuilder.setContentText(text + ""  ("" + progressText + "")"");
            }
        } else {
            notificationBuilder.setContentInfo(progressText);
            notificationBuilder.setContentText(text);
        }

        notificationManager.notify(getNotificationId(), notificationBuilder.build());
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,stopService,void stopService(),"[150, 152]","{'A301': [(150, 152)]}",{'A301': 1.0},A301,,"    protected void stopService() {
        postErrorResult(null, null);
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,stopAndReportError,"void stopAndReportError(Throwable,String)","[154, 158]","{'A301': [(155, 155), (158, 158)], 'A305': [(154, 154), (156, 157)]}","{'A301': 0.4, 'A305': 0.6}",A305,,"    protected void stopAndReportError(final Throwable throwable, final String request) {
        stopService();
        ErrorUtil.createNotification(this, new ErrorInfo(
                throwable, UserAction.SUBSCRIPTION_IMPORT_EXPORT, request));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,postErrorResult,"void postErrorResult(String,String)","[160, 178]","{'A301': [(161, 161), (163, 168), (172, 174), (177, 178)], 'A294': [(160, 160), (169, 171), (175, 176)], 'A295': [(162, 162)]}","{'A301': 0.631578947368421, 'A294': 0.3157894736842105, 'A295': 0.05263157894736842}",A301,,"    protected void postErrorResult(final String title, final String text) {
        disposeAll();
        ServiceCompat.stopForeground(this, ServiceCompat.STOP_FOREGROUND_REMOVE);
        stopSelf();

        if (title == null) {
            return;
        }

        final String textOrEmpty = text == null ? """" : text;
        notificationBuilder = new NotificationCompat
                .Builder(this, getString(R.string.notification_channel_id))
                .setSmallIcon(R.drawable.ic_newpipe_triangle_white)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setContentTitle(title)
                .setStyle(new NotificationCompat.BigTextStyle().bigText(textOrEmpty))
                .setContentText(textOrEmpty);
        notificationManager.notify(getNotificationId(), notificationBuilder.build());
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,createNotification,NotificationCompat.Builder createNotification(),"[180, 187]","{'A301': [(180, 187)]}",{'A301': 1.0},A301,,"    protected NotificationCompat.Builder createNotification() {
        return new NotificationCompat.Builder(this, getString(R.string.notification_channel_id))
                .setOngoing(true)
                .setProgress(-1, -1, true)
                .setSmallIcon(R.drawable.ic_newpipe_triangle_white)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setContentTitle(getString(getTitle()));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,showToast,void showToast(int),"[193, 195]","{'A301': [(195, 195)], 'A294': [(193, 193)], 'A369': [(194, 194)]}","{'A301': 0.3333333333333333, 'A294': 0.3333333333333333, 'A369': 0.3333333333333333}",A301,,"    protected void showToast(@StringRes final int message) {
        showToast(getString(message));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,showToast,void showToast(String),"[197, 204]","{'A301': [(201, 201), (203, 204)], 'A294': [(197, 200)], 'A369': [(202, 202)]}","{'A301': 0.375, 'A294': 0.5, 'A369': 0.125}",A294,,"    protected void showToast(final String message) {
        if (toast != null) {
            toast.cancel();
        }

        toast = Toast.makeText(this, message, Toast.LENGTH_SHORT);
        toast.show();
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,handleError,"void handleError(int,Throwable)","[210, 220]","{'A301': [(211, 220)], 'A294': [(210, 210)]}","{'A301': 0.9090909090909091, 'A294': 0.09090909090909091}",A301,,"    protected void handleError(@StringRes final int errorTitle, @NonNull final Throwable error) {
        String message = getErrorMessage(error);

        if (TextUtils.isEmpty(message)) {
            final String errorClassName = error.getClass().getName();
            message = getString(R.string.error_occurred_detail, errorClassName);
        }

        showToast(errorTitle);
        postErrorResult(getString(errorTitle), message);
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/BaseImportExportService.java,BaseImportExportService,getErrorMessage,String getErrorMessage(Throwable),"[222, 232]","{'A301': [(223, 232)], 'A294': [(222, 222)]}","{'A301': 0.9090909090909091, 'A294': 0.09090909090909091}",A301,,"    protected String getErrorMessage(final Throwable error) {
        String message = null;
        if (error instanceof SubscriptionExtractor.InvalidSourceException) {
            message = getString(R.string.invalid_source);
        } else if (error instanceof FileNotFoundException) {
            message = getString(R.string.invalid_file);
        } else if (ExceptionUtils.isNetworkRelated(error)) {
            message = getString(R.string.network_error);
        }
        return message;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,onStartCommand,"int onStartCommand(Intent,int,int)","[100, 153]","{'A301': [(100, 100), (105, 111), (117, 120), (136, 141), (148, 153)], 'A305': [(121, 134)], 'A294': [(101, 104), (113, 116), (135, 135), (142, 147)], 'A299': [(112, 112)]}","{'A301': 0.4444444444444444, 'A305': 0.25925925925925924, 'A294': 0.2777777777777778, 'A299': 0.018518518518518517}",A301,,"    @Override
    public int onStartCommand(final Intent intent, final int flags, final int startId) {
        if (intent == null || subscription != null) {
            return START_NOT_STICKY;
        }

        currentMode = intent.getIntExtra(KEY_MODE, -1);
        currentServiceId = intent.getIntExtra(Constants.KEY_SERVICE_ID, Constants.NO_SERVICE_ID);

        if (currentMode == CHANNEL_URL_MODE) {
            channelUrl = intent.getStringExtra(KEY_VALUE);
        } else {
            final Uri uri = IntentCompat.getParcelableExtra(intent, KEY_VALUE, Uri.class);
            if (uri == null) {
                stopAndReportError(new IllegalStateException(
                        ""Importing from input stream, but file path is null""),
                        ""Importing subscriptions"");
                return START_NOT_STICKY;
            }

            try {
                final StoredFileHelper fileHelper = new StoredFileHelper(this, uri, DEFAULT_MIME);
                inputStream = new SharpInputStream(fileHelper.getStream());
                inputStreamType = fileHelper.getType();

                if (inputStreamType == null || inputStreamType.equals(DEFAULT_MIME)) {
                    // mime type could not be determined, just take file extension
                    final String name = fileHelper.getName();
                    final int pointIndex = name.lastIndexOf('.');
                    if (pointIndex == -1 || pointIndex >= name.length() - 1) {
                        inputStreamType = DEFAULT_MIME; // no extension, will fail in the extractor
                    } else {
                        inputStreamType = name.substring(pointIndex + 1);
                    }
                }
            } catch (final IOException e) {
                handleError(e);
                return START_NOT_STICKY;
            }
        }

        if (currentMode == -1 || currentMode == CHANNEL_URL_MODE && channelUrl == null) {
            final String errorDescription = ""Some important field is null or in illegal state: ""
                    + ""currentMode=["" + currentMode + ""], ""
                    + ""channelUrl=["" + channelUrl + ""], ""
                    + ""inputStream=["" + inputStream + ""]"";
            stopAndReportError(new IllegalStateException(errorDescription),
                    ""Importing subscriptions"");
            return START_NOT_STICKY;
        }

        startImport();
        return START_NOT_STICKY;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,getNotificationId,int getNotificationId(),"[155, 158]","{'A301': [(155, 158)]}",{'A301': 1.0},A301,,"    @Override
    protected int getNotificationId() {
        return 4568;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,getTitle,int getTitle(),"[160, 163]","{'A301': [(160, 163)]}",{'A301': 1.0},A301,,"    @Override
    public int getTitle() {
        return R.string.import_ongoing;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,disposeAll,void disposeAll(),"[165, 171]","{'A301': [(165, 167), (171, 171)], 'A294': [(168, 170)]}","{'A301': 0.5714285714285714, 'A294': 0.42857142857142855}",A301,,"    @Override
    protected void disposeAll() {
        super.disposeAll();
        if (subscription != null) {
            subscription.cancel();
        }
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,startImport,void startImport(),"[177, 234]","{'A301': [(177, 180), (191, 193), (196, 199), (202, 205), (208, 208), (220, 234)], 'A305': [(206, 207), (209, 209), (212, 218)], 'A294': [(194, 195), (200, 201), (210, 211), (219, 219)], 'A369': [(181, 190)]}","{'A301': 0.5344827586206896, 'A305': 0.1724137931034483, 'A294': 0.1206896551724138, 'A369': 0.1724137931034483}",A301,,"    private void startImport() {
        showToast(R.string.import_ongoing);

        Flowable<List<SubscriptionItem>> flowable = null;
        switch (currentMode) {
            case CHANNEL_URL_MODE:
                flowable = importFromChannelUrl();
                break;
            case INPUT_STREAM_MODE:
                flowable = importFromInputStream();
                break;
            case PREVIOUS_EXPORT_MODE:
                flowable = importFromPreviousExport();
                break;
        }

        if (flowable == null) {
            final String message = ""Flowable given by \""importFrom\"" is null ""
                    + ""(current mode: "" + currentMode + "")"";
            stopAndReportError(new IllegalStateException(message), ""Importing subscriptions"");
            return;
        }

        flowable.doOnNext(subscriptionItems ->
                eventListener.onSizeReceived(subscriptionItems.size()))
                .flatMap(Flowable::fromIterable)

                .parallel(PARALLEL_EXTRACTIONS)
                .runOn(Schedulers.io())
                .map((Function<SubscriptionItem, Notification<Pair<ChannelInfo,
                        List<ChannelTabInfo>>>>) subscriptionItem -> {
                    try {
                        final ChannelInfo channelInfo = ExtractorHelper
                                .getChannelInfo(subscriptionItem.getServiceId(),
                                        subscriptionItem.getUrl(), true)
                                .blockingGet();
                        return Notification.createOnNext(new Pair<>(channelInfo,
                                Collections.singletonList(
                                        ExtractorHelper.getChannelTab(
                                                subscriptionItem.getServiceId(),
                                                channelInfo.getTabs().get(0), true).blockingGet()
                                )));
                    } catch (final Throwable e) {
                        return Notification.createOnError(e);
                    }
                })
                .sequential()

                .observeOn(Schedulers.io())
                .doOnNext(getNotificationsConsumer())

                .buffer(BUFFER_COUNT_BEFORE_INSERT)
                .map(upsertBatch())

                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getSubscriber());
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,getSubscriber,Subscriber<List<SubscriptionEntity>> getSubscriber(),"[236, 266]","{'A301': [(236, 236), (238, 238), (240, 244), (250, 252), (254, 259), (262, 266)], 'A305': [(237, 237)], 'A294': [(239, 239), (245, 249), (253, 253), (260, 261)]}","{'A301': 0.6774193548387096, 'A305': 0.03225806451612903, 'A294': 0.2903225806451613}",A301,,"    private Subscriber<List<SubscriptionEntity>> getSubscriber() {
        return new Subscriber<>() {
            @Override
            public void onSubscribe(final Subscription s) {
                subscription = s;
                s.request(Long.MAX_VALUE);
            }

            @Override
            public void onNext(final List<SubscriptionEntity> successfulInserted) {
                if (DEBUG) {
                    Log.d(TAG, ""startImport() "" + successfulInserted.size()
                            + "" items successfully inserted into the database"");
                }
            }

            @Override
            public void onError(final Throwable error) {
                Log.e(TAG, ""Got an error!"", error);
                handleError(error);
            }

            @Override
            public void onComplete() {
                LocalBroadcastManager.getInstance(SubscriptionsImportService.this)
                        .sendBroadcast(new Intent(IMPORT_COMPLETE_ACTION));
                showToast(R.string.import_complete_toast);
                stopService();
            }
        };
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,onSubscribe,void onSubscribe(Subscription),"[238, 242]","{'A301': [(238, 238), (240, 242)], 'A294': [(239, 239)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"            @Override
            public void onSubscribe(final Subscription s) {
                subscription = s;
                s.request(Long.MAX_VALUE);
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,onNext,void onNext(List<SubscriptionEntity>),"[244, 250]","{'A301': [(244, 244), (250, 250)], 'A294': [(245, 249)]}","{'A301': 0.2857142857142857, 'A294': 0.7142857142857143}",A294,,"            @Override
            public void onNext(final List<SubscriptionEntity> successfulInserted) {
                if (DEBUG) {
                    Log.d(TAG, ""startImport() "" + successfulInserted.size()
                            + "" items successfully inserted into the database"");
                }
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,onError,void onError(Throwable),"[252, 256]","{'A301': [(252, 252), (254, 256)], 'A294': [(253, 253)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"            @Override
            public void onError(final Throwable error) {
                Log.e(TAG, ""Got an error!"", error);
                handleError(error);
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,onComplete,void onComplete(),"[258, 264]","{'A301': [(258, 259), (262, 264)], 'A294': [(260, 261)]}","{'A301': 0.7142857142857143, 'A294': 0.2857142857142857}",A301,,"            @Override
            public void onComplete() {
                LocalBroadcastManager.getInstance(SubscriptionsImportService.this)
                        .sendBroadcast(new Intent(IMPORT_COMPLETE_ACTION));
                showToast(R.string.import_complete_toast);
                stopService();
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,getNotificationsConsumer,"Consumer<Notification<Pair<ChannelInfo,
            List<ChannelTabInfo>>>> getNotificationsConsumer()","[268, 288]","{'A301': [(270, 271), (273, 277), (279, 279), (281, 288)], 'A305': [(268, 269), (272, 272), (278, 278), (280, 280)]}","{'A301': 0.7619047619047619, 'A305': 0.23809523809523808}",A301,,"    private Consumer<Notification<Pair<ChannelInfo,
            List<ChannelTabInfo>>>> getNotificationsConsumer() {
        return notification -> {
            if (notification.isOnNext()) {
                final String name = notification.getValue().first.getName();
                eventListener.onItemCompleted(!TextUtils.isEmpty(name) ? name : """");
            } else if (notification.isOnError()) {
                final Throwable error = notification.getError();
                final Throwable cause = error.getCause();
                if (error instanceof IOException) {
                    throw error;
                } else if (cause instanceof IOException) {
                    throw cause;
                } else if (ExceptionUtils.isNetworkRelated(error)) {
                    throw new IOException(error);
                }

                eventListener.onItemCompleted("""");
            }
        };
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,upsertBatch,"Function<List<Notification<Pair<ChannelInfo, List<ChannelTabInfo>>>>,
            List<SubscriptionEntity>> upsertBatch()","[290, 303]","{'A301': [(292, 292), (299, 303)], 'A305': [(290, 291), (293, 295)], 'A294': [(296, 298)]}","{'A301': 0.42857142857142855, 'A305': 0.35714285714285715, 'A294': 0.21428571428571427}",A301,,"    private Function<List<Notification<Pair<ChannelInfo, List<ChannelTabInfo>>>>,
            List<SubscriptionEntity>> upsertBatch() {
        return notificationList -> {
            final List<Pair<ChannelInfo, List<ChannelTabInfo>>> infoList =
                    new ArrayList<>(notificationList.size());
            for (final Notification<Pair<ChannelInfo, List<ChannelTabInfo>>> n : notificationList) {
                if (n.isOnNext()) {
                    infoList.add(n.getValue());
                }
            }

            return subscriptionManager.upsertAll(infoList);
        };
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,importFromChannelUrl,Flowable<List<SubscriptionItem>> importFromChannelUrl(),"[305, 309]","{'A301': [(305, 309)]}",{'A301': 1.0},A301,,"    private Flowable<List<SubscriptionItem>> importFromChannelUrl() {
        return Flowable.fromCallable(() -> NewPipe.getService(currentServiceId)
                .getSubscriptionExtractor()
                .fromChannelUrl(channelUrl));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,importFromInputStream,Flowable<List<SubscriptionItem>> importFromInputStream(),"[311, 318]","{'A301': [(311, 311), (315, 316), (318, 318)], 'A305': [(312, 314)], 'A370': [(317, 317)]}","{'A301': 0.5, 'A305': 0.375, 'A370': 0.125}",A301,,"    private Flowable<List<SubscriptionItem>> importFromInputStream() {
        Objects.requireNonNull(inputStream);
        Objects.requireNonNull(inputStreamType);

        return Flowable.fromCallable(() -> NewPipe.getService(currentServiceId)
                .getSubscriptionExtractor()
                .fromInputStream(inputStream, inputStreamType));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,importFromPreviousExport,Flowable<List<SubscriptionItem>> importFromPreviousExport(),"[320, 322]","{'A301': [(320, 322)]}",{'A301': 1.0},A301,,"    private Flowable<List<SubscriptionItem>> importFromPreviousExport() {
        return Flowable.fromCallable(() -> ImportExportJsonHelper.readFrom(inputStream, null));
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsImportService.java,SubscriptionsImportService,handleError,void handleError(Throwable),"[324, 326]","{'A301': [(325, 326)], 'A294': [(324, 324)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    protected void handleError(@NonNull final Throwable error) {
        super.handleError(R.string.subscriptions_import_unsuccessful, error);
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/ImportExportJsonHelper.java,ImportExportJsonHelper,readFrom,"List<SubscriptionItem> readFrom(InputStream,ImportExportEventListener)","[66, 108]","{'A301': [(72, 75), (77, 77), (79, 81), (89, 89), (94, 96), (100, 102), (104, 108)], 'A294': [(66, 71), (76, 76), (78, 78), (82, 88), (90, 93), (97, 99), (103, 103)]}","{'A301': 0.46511627906976744, 'A294': 0.5348837209302325}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/local/subscription/services/ImportExportJsonHelperTest.java,"    public static List<SubscriptionItem> readFrom(
            final InputStream in, @Nullable final ImportExportEventListener eventListener)
            throws InvalidSourceException {
        if (in == null) {
            throw new InvalidSourceException(""input is null"");
        }

        final List<SubscriptionItem> channels = new ArrayList<>();

        try {
            final JsonObject parentObject = JsonParser.object().from(in);

            if (!parentObject.has(JSON_SUBSCRIPTIONS_ARRAY_KEY)) {
                throw new InvalidSourceException(""Channels array is null"");
            }

            final JsonArray channelsArray = parentObject.getArray(JSON_SUBSCRIPTIONS_ARRAY_KEY);

            if (eventListener != null) {
                eventListener.onSizeReceived(channelsArray.size());
            }

            for (final Object o : channelsArray) {
                if (o instanceof JsonObject) {
                    final JsonObject itemObject = (JsonObject) o;
                    final int serviceId = itemObject.getInt(JSON_SERVICE_ID_KEY, 0);
                    final String url = itemObject.getString(JSON_URL_KEY);
                    final String name = itemObject.getString(JSON_NAME_KEY);

                    if (url != null && name != null && !url.isEmpty() && !name.isEmpty()) {
                        channels.add(new SubscriptionItem(serviceId, url, name));
                        if (eventListener != null) {
                            eventListener.onItemCompleted(name);
                        }
                    }
                }
            }
        } catch (final Throwable e) {
            throw new InvalidSourceException(""Couldn't parse json"", e);
        }

        return channels;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/ImportExportJsonHelper.java,ImportExportJsonHelper,writeTo,"void writeTo(List<SubscriptionItem>,OutputStream,ImportExportEventListener)","[117, 122]","{'A301': [(120, 122)], 'A294': [(117, 119)]}","{'A301': 0.5, 'A294': 0.5}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/local/subscription/services/ImportExportJsonHelperTest.java,"    public static void writeTo(final List<SubscriptionItem> items, final OutputStream out,
                               @Nullable final ImportExportEventListener eventListener) {
        final JsonAppendableWriter writer = JsonWriter.on(out);
        writeTo(items, writer, eventListener);
        writer.done();
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/ImportExportJsonHelper.java,ImportExportJsonHelper,writeTo,"void writeTo(List<SubscriptionItem>,JsonAppendableWriter,ImportExportEventListener)","[130, 157]","{'A301': [(136, 142), (144, 149), (153, 157)], 'A294': [(132, 135), (143, 143), (150, 152)], 'A305': [(130, 131)]}","{'A301': 0.6428571428571429, 'A294': 0.2857142857142857, 'A305': 0.07142857142857142}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/local/subscription/services/ImportExportJsonHelperTest.java,"    public static void writeTo(final List<SubscriptionItem> items,
                               final JsonAppendableWriter writer,
                               @Nullable final ImportExportEventListener eventListener) {
        if (eventListener != null) {
            eventListener.onSizeReceived(items.size());
        }

        writer.object();

        writer.value(JSON_APP_VERSION_KEY, BuildConfig.VERSION_NAME);
        writer.value(JSON_APP_VERSION_INT_KEY, BuildConfig.VERSION_CODE);

        writer.array(JSON_SUBSCRIPTIONS_ARRAY_KEY);
        for (final SubscriptionItem item : items) {
            writer.object();
            writer.value(JSON_SERVICE_ID_KEY, item.getServiceId());
            writer.value(JSON_URL_KEY, item.getUrl());
            writer.value(JSON_NAME_KEY, item.getName());
            writer.end();

            if (eventListener != null) {
                eventListener.onItemCompleted(item.getName());
            }
        }
        writer.end();

        writer.end();
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,onStartCommand,"int onStartCommand(Intent,int,int)","[63, 91]","{'A301': [(63, 63), (68, 68), (74, 77), (84, 91)], 'A294': [(64, 67), (70, 73), (78, 78), (83, 83)], 'A299': [(69, 69)], 'A305': [(79, 82)]}","{'A301': 0.4827586206896552, 'A294': 0.3448275862068966, 'A299': 0.034482758620689655, 'A305': 0.13793103448275862}",A301,,"    @Override
    public int onStartCommand(final Intent intent, final int flags, final int startId) {
        if (intent == null || subscription != null) {
            return START_NOT_STICKY;
        }

        final Uri path = IntentCompat.getParcelableExtra(intent, KEY_FILE_PATH, Uri.class);
        if (path == null) {
            stopAndReportError(new IllegalStateException(
                    ""Exporting to a file, but the path is null""),
                    ""Exporting subscriptions"");
            return START_NOT_STICKY;
        }

        try {
            outFile = new StoredFileHelper(this, path, ""application/json"");
            // truncate the file before writing to it, otherwise if the new content is smaller than
            // the previous file size, the file will retain part of the previous content and be
            // corrupted
            outputStream = new SharpOutputStream(outFile.openAndTruncateStream());
        } catch (final IOException e) {
            handleError(e);
            return START_NOT_STICKY;
        }

        startExport();

        return START_NOT_STICKY;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,getNotificationId,int getNotificationId(),"[93, 96]","{'A301': [(93, 96)]}",{'A301': 1.0},A301,,"    @Override
    protected int getNotificationId() {
        return 4567;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,getTitle,int getTitle(),"[98, 101]","{'A301': [(98, 101)]}",{'A301': 1.0},A301,,"    @Override
    public int getTitle() {
        return R.string.export_ongoing;
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,disposeAll,void disposeAll(),"[103, 109]","{'A301': [(103, 105), (109, 109)], 'A294': [(106, 108)]}","{'A301': 0.5714285714285714, 'A294': 0.42857142857142855}",A301,,"    @Override
    protected void disposeAll() {
        super.disposeAll();
        if (subscription != null) {
            subscription.cancel();
        }
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,startExport,void startExport(),"[111, 128]","{'A301': [(111, 113), (115, 115), (121, 128)], 'A300': [(116, 117)], 'A294': [(114, 114), (118, 120)]}","{'A301': 0.6666666666666666, 'A300': 0.1111111111111111, 'A294': 0.2222222222222222}",A301,,"    private void startExport() {
        showToast(R.string.export_ongoing);

        subscriptionManager.subscriptionTable().getAll().take(1)
                .map(subscriptionEntities -> {
                    final List<SubscriptionItem> result =
                            new ArrayList<>(subscriptionEntities.size());
                    for (final SubscriptionEntity entity : subscriptionEntities) {
                        result.add(new SubscriptionItem(entity.getServiceId(), entity.getUrl(),
                                entity.getName()));
                    }
                    return result;
                })
                .map(exportToFile())
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getSubscriber());
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,getSubscriber,Subscriber<StoredFileHelper> getSubscriber(),"[130, 159]","{'A301': [(132, 132), (134, 138), (143, 145), (147, 152), (155, 159)], 'A294': [(130, 131), (133, 133), (139, 142), (146, 146), (153, 154)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    private Subscriber<StoredFileHelper> getSubscriber() {
        return new Subscriber<StoredFileHelper>() {
            @Override
            public void onSubscribe(final Subscription s) {
                subscription = s;
                s.request(1);
            }

            @Override
            public void onNext(final StoredFileHelper file) {
                if (DEBUG) {
                    Log.d(TAG, ""startExport() success: file = "" + file);
                }
            }

            @Override
            public void onError(final Throwable error) {
                Log.e(TAG, ""onError() called with: error = ["" + error + ""]"", error);
                handleError(error);
            }

            @Override
            public void onComplete() {
                LocalBroadcastManager.getInstance(SubscriptionsExportService.this)
                        .sendBroadcast(new Intent(EXPORT_COMPLETE_ACTION));
                showToast(R.string.export_complete_toast);
                stopService();
            }
        };
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,onSubscribe,void onSubscribe(Subscription),"[132, 136]","{'A301': [(132, 132), (134, 136)], 'A294': [(133, 133)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"            @Override
            public void onSubscribe(final Subscription s) {
                subscription = s;
                s.request(1);
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,onNext,void onNext(StoredFileHelper),"[138, 143]","{'A301': [(138, 138), (143, 143)], 'A294': [(139, 142)]}","{'A301': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"            @Override
            public void onNext(final StoredFileHelper file) {
                if (DEBUG) {
                    Log.d(TAG, ""startExport() success: file = "" + file);
                }
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,onError,void onError(Throwable),"[145, 149]","{'A301': [(145, 145), (147, 149)], 'A294': [(146, 146)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"            @Override
            public void onError(final Throwable error) {
                Log.e(TAG, ""onError() called with: error = ["" + error + ""]"", error);
                handleError(error);
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,onComplete,void onComplete(),"[151, 157]","{'A301': [(151, 152), (155, 157)], 'A294': [(153, 154)]}","{'A301': 0.7142857142857143, 'A294': 0.2857142857142857}",A301,,"            @Override
            public void onComplete() {
                LocalBroadcastManager.getInstance(SubscriptionsExportService.this)
                        .sendBroadcast(new Intent(EXPORT_COMPLETE_ACTION));
                showToast(R.string.export_complete_toast);
                stopService();
            }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,exportToFile,"Function<List<SubscriptionItem>, StoredFileHelper> exportToFile()","[161, 166]","{'A301': [(162, 166)], 'A294': [(161, 161)]}","{'A301': 0.8333333333333334, 'A294': 0.16666666666666666}",A301,,"    private Function<List<SubscriptionItem>, StoredFileHelper> exportToFile() {
        return subscriptionItems -> {
            ImportExportJsonHelper.writeTo(subscriptionItems, outputStream, eventListener);
            return outFile;
        };
    }
"
org.schabi.newpipe.local.subscription.services,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/services/SubscriptionsExportService.java,SubscriptionsExportService,handleError,void handleError(Throwable),"[168, 170]","{'A301': [(169, 170)], 'A294': [(168, 168)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    protected void handleError(final Throwable error) {
        super.handleError(R.string.subscriptions_export_unsuccessful, error);
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,getInstance,SubscriptionsImportFragment getInstance(int),"[70, 74]","{'A301': [(72, 74)], 'A294': [(70, 71)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    public static SubscriptionsImportFragment getInstance(final int serviceId) {
        final SubscriptionsImportFragment instance = new SubscriptionsImportFragment();
        instance.setInitialData(serviceId);
        return instance;
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,setInitialData,void setInitialData(int),"[76, 78]","{'A301': [(77, 78)], 'A294': [(76, 76)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    private void setInitialData(final int serviceId) {
        this.currentServiceId = serviceId;
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,onCreate,void onCreate(Bundle),"[84, 97]","{'A301': [(84, 84), (86, 89), (95, 97)], 'A300': [(92, 92)], 'A294': [(85, 85)], 'A305': [(90, 91), (93, 94)]}","{'A301': 0.5714285714285714, 'A300': 0.07142857142857142, 'A294': 0.07142857142857142, 'A305': 0.2857142857142857}",A301,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        setupServiceVariables();
        if (supportedSources.isEmpty() && currentServiceId != Constants.NO_SERVICE_ID) {
            ErrorUtil.showSnackbar(activity,
                    new ErrorInfo(new String[]{}, UserAction.SUBSCRIPTION_IMPORT_EXPORT,
                            ServiceHelper.getNameOfServiceById(currentServiceId),
                            ""Service does not support importing subscriptions"",
                            R.string.general_error));
            activity.finish();
        }
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,onResume,void onResume(),"[99, 103]","{'A301': [(99, 99), (103, 103)], 'A299': [(100, 102)]}","{'A301': 0.4, 'A299': 0.6}",A299,,"    @Override
    public void onResume() {
        super.onResume();
        setTitle(getString(R.string.import_title));
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[105, 111]","{'A301': [(105, 106), (110, 111)], 'A294': [(107, 109)]}","{'A301': 0.5714285714285714, 'A294': 0.42857142857142855}",A301,,"    @Nullable
    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_import, container, false);
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,initViews,"void initViews(View,Bundle)","[117, 151]","{'A301': [(117, 117), (119, 125), (128, 145), (147, 151)], 'A294': [(118, 118), (126, 127), (146, 146)]}","{'A301': 0.8857142857142857, 'A294': 0.11428571428571428}",A301,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        inputButton = rootView.findViewById(R.id.input_button);
        inputText = rootView.findViewById(R.id.input_text);

        infoTextView = rootView.findViewById(R.id.info_text_view);

        // TODO: Support services that can import from more than one source
        //  (show the option to the user)
        if (supportedSources.contains(CHANNEL_URL)) {
            inputButton.setText(R.string.import_title);
            inputText.setVisibility(View.VISIBLE);
            inputText.setHint(ServiceHelper.getImportInstructionsHint(currentServiceId));
        } else {
            inputButton.setText(R.string.import_file_title);
        }

        if (instructionsString != 0) {
            if (TextUtils.isEmpty(relatedUrl)) {
                setInfoText(getString(instructionsString));
            } else {
                setInfoText(getString(instructionsString, relatedUrl));
            }
        } else {
            setInfoText("""");
        }

        final ActionBar supportActionBar = activity.getSupportActionBar();
        if (supportActionBar != null) {
            supportActionBar.setDisplayShowTitleEnabled(true);
            setTitle(getString(R.string.import_title));
        }
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,initListeners,void initListeners(),"[153, 157]","{'A301': [(153, 157)]}",{'A301': 1.0},A301,,"    @Override
    protected void initListeners() {
        super.initListeners();
        inputButton.setOnClickListener(v -> onImportClicked());
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,onImportClicked,void onImportClicked(),"[159, 168]","{'A301': [(159, 161), (165, 168)], 'A294': [(162, 164)]}","{'A301': 0.7, 'A294': 0.3}",A301,,"    private void onImportClicked() {
        if (inputText.getVisibility() == View.VISIBLE) {
            final String value = inputText.getText().toString();
            if (!value.isEmpty()) {
                onImportUrl(value);
            }
        } else {
            onImportFile();
        }
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,onImportUrl,void onImportUrl(String),"[170, 175]","{'A301': [(171, 175)], 'A294': [(170, 170)]}","{'A301': 0.8333333333333334, 'A294': 0.16666666666666666}",A301,,"    public void onImportUrl(final String value) {
        ImportConfirmationDialog.show(this, new Intent(activity, SubscriptionsImportService.class)
                .putExtra(KEY_MODE, CHANNEL_URL_MODE)
                .putExtra(KEY_VALUE, value)
                .putExtra(Constants.KEY_SERVICE_ID, currentServiceId));
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,onImportFile,void onImportFile(),"[177, 186]","{'A301': [(177, 177), (186, 186)], 'A300': [(178, 185)]}","{'A301': 0.2, 'A300': 0.8}",A300,,"    public void onImportFile() {
        NoFileManagerSafeGuard.launchSafe(
                requestImportFileLauncher,
                // leave */* mime type to support all services
                // with different mime types and file extensions
                StoredFileHelper.getPicker(activity, ""*/*""),
                TAG,
                getContext()
        );
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,requestImportFileResult,void requestImportFileResult(ActivityResult),"[188, 200]","{'A301': [(192, 192), (199, 200)], 'A299': [(188, 189), (193, 193), (197, 197)], 'A294': [(190, 191), (194, 196), (198, 198)]}","{'A301': 0.23076923076923078, 'A299': 0.3076923076923077, 'A294': 0.46153846153846156}",A294,,"    private void requestImportFileResult(final ActivityResult result) {
        if (result.getData() == null) {
            return;
        }

        if (result.getResultCode() == Activity.RESULT_OK && result.getData().getData() != null) {
            ImportConfirmationDialog.show(this,
                    new Intent(activity, SubscriptionsImportService.class)
                            .putExtra(KEY_MODE, INPUT_STREAM_MODE)
                            .putExtra(KEY_VALUE, result.getData().getData())
                            .putExtra(Constants.KEY_SERVICE_ID, currentServiceId));
        }
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,setupServiceVariables,void setupServiceVariables(),"[206, 222]","{'A301': [(206, 208), (211, 214), (216, 222)], 'A294': [(209, 210), (215, 215)]}","{'A301': 0.8235294117647058, 'A294': 0.17647058823529413}",A301,,"    private void setupServiceVariables() {
        if (currentServiceId != Constants.NO_SERVICE_ID) {
            try {
                final SubscriptionExtractor extractor = NewPipe.getService(currentServiceId)
                        .getSubscriptionExtractor();
                supportedSources = extractor.getSupportedSources();
                relatedUrl = extractor.getRelatedUrl();
                instructionsString = ServiceHelper.getImportInstructions(currentServiceId);
                return;
            } catch (final ExtractionException ignored) {
            }
        }

        supportedSources = Collections.emptyList();
        relatedUrl = null;
        instructionsString = 0;
    }
"
org.schabi.newpipe.local.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java,SubscriptionsImportFragment,setInfoText,void setInfoText(String),"[224, 227]","{'A301': [(225, 227)], 'A294': [(224, 224)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    private void setInfoText(final String infoString) {
        infoTextView.setText(infoString);
        LinkifyCompat.addLinks(infoTextView, Linkify.WEB_URLS);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,useAsFrontPage,void useAsFrontPage(boolean),"[25, 27]","{'A294': [(25, 25)], 'A302': [(26, 27)]}","{'A294': 0.3333333333333333, 'A302': 0.6666666666666666}",A302,,"    public void useAsFrontPage(final boolean value) {
        useAsFrontPage = value;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,onAttach,void onAttach(Context),"[33, 37]","{'A301': [(33, 33), (35, 37)], 'A305': [(34, 34)]}","{'A301': 0.8, 'A305': 0.2}",A301,,"    @Override
    public void onAttach(@NonNull final Context context) {
        super.onAttach(context);
        activity = (AppCompatActivity) context;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,onDetach,void onDetach(),"[39, 43]","{'A301': [(39, 43)]}",{'A301': 1.0},A301,,"    @Override
    public void onDetach() {
        super.onDetach();
        activity = null;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,onCreate,void onCreate(Bundle),"[45, 56]","{'A301': [(45, 45), (51, 51), (56, 56)], 'A294': [(46, 50), (53, 55)], 'A300': [(52, 52)]}","{'A301': 0.25, 'A294': 0.6666666666666666, 'A300': 0.08333333333333333}",A294,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        if (DEBUG) {
            Log.d(TAG, ""onCreate() called with: ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }
        super.onCreate(savedInstanceState);
        Bridge.restoreInstanceState(this, savedInstanceState);
        if (savedInstanceState != null) {
            onRestoreInstanceState(savedInstanceState);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,onViewCreated,"void onViewCreated(View,Bundle)","[59, 69]","{'A301': [(59, 59), (61, 62), (66, 69)], 'A294': [(63, 65)], 'A305': [(60, 60)]}","{'A301': 0.6363636363636364, 'A294': 0.2727272727272727, 'A305': 0.09090909090909091}",A301,,"    @Override
    public void onViewCreated(@NonNull final View rootView, final Bundle savedInstanceState) {
        super.onViewCreated(rootView, savedInstanceState);
        if (DEBUG) {
            Log.d(TAG, ""onViewCreated() called with: ""
                    + ""rootView = ["" + rootView + ""], ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }
        initViews(rootView, savedInstanceState);
        initListeners();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,onSaveInstanceState,void onSaveInstanceState(Bundle),"[71, 75]","{'A301': [(71, 71), (73, 73), (75, 75)], 'A300': [(74, 74)], 'A305': [(72, 72)]}","{'A301': 0.6, 'A300': 0.2, 'A305': 0.2}",A301,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        Bridge.saveInstanceState(this, outState);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,onRestoreInstanceState,void onRestoreInstanceState(Bundle),"[77, 78]","{'A294': [(77, 78)]}",{'A294': 1.0},A294,,"    protected void onRestoreInstanceState(@NonNull final Bundle savedInstanceState) {
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,initViews,"void initViews(View,Bundle)","[96, 97]","{'A294': [(96, 97)]}",{'A294': 1.0},A294,,"    protected void initViews(final View rootView, final Bundle savedInstanceState) {
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,initListeners,void initListeners(),"[107, 108]","{'A294': [(107, 108)]}",{'A294': 1.0},A294,,"    protected void initListeners() {
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,setTitle,void setTitle(String),"[114, 122]","{'A301': [(119, 122)], 'A294': [(114, 117)], 'A299': [(118, 118)]}","{'A301': 0.4444444444444444, 'A294': 0.4444444444444444, 'A299': 0.1111111111111111}",A301,,"    public void setTitle(final String title) {
        if (DEBUG) {
            Log.d(TAG, ""setTitle() called with: title = ["" + title + ""]"");
        }
        if (!useAsFrontPage && activity != null && activity.getSupportActionBar() != null) {
            activity.getSupportActionBar().setDisplayShowTitleEnabled(true);
            activity.getSupportActionBar().setTitle(title);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/BaseFragment.java,BaseFragment,getFM,FragmentManager getFM(),"[133, 139]","{'A305': [(134, 138)], 'A306': [(133, 133), (139, 139)]}","{'A305': 0.7142857142857143, 'A306': 0.2857142857142857}",A305,,"    protected FragmentManager getFM() {
        Fragment current = this;
        while (current.getParentFragment() != null) {
            current = current.getParentFragment();
        }
        return current.getFragmentManager();
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationActionsPreference.java,NotificationActionsPreference,onBindViewHolder,void onBindViewHolder(PreferenceViewHolder),"[43, 54]","{'A371': [(45, 45), (52, 53)], 'A305': [(43, 43), (46, 51), (54, 54)], 'A299': [(44, 44)]}","{'A371': 0.25, 'A305': 0.6666666666666666, 'A299': 0.08333333333333333}",A305,,"    @Override
    public void onBindViewHolder(@NonNull final PreferenceViewHolder holder) {
        super.onBindViewHolder(holder);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            ((TextView) holder.itemView.findViewById(R.id.summary))
                    .setText(R.string.notification_actions_summary_android13);
        }

        holder.itemView.setClickable(false);
        setupActions(holder.itemView);
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationActionsPreference.java,NotificationActionsPreference,onDetached,void onDetached(),"[56, 63]","{'A371': [(57, 58)], 'A305': [(56, 56), (59, 63)]}","{'A371': 0.25, 'A305': 0.75}",A305,,"    @Override
    public void onDetached() {
        super.onDetached();
        saveChanges();
        // set package to this app's package to prevent the intent from being seen outside
        getContext().sendBroadcast(new Intent(ACTION_RECREATE_NOTIFICATION)
                .setPackage(App.PACKAGE_NAME));
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationActionsPreference.java,NotificationActionsPreference,setupActions,void setupActions(View),"[70, 77]","{'A305': [(70, 72), (74, 75), (77, 77)], 'A295': [(73, 73), (76, 76)]}","{'A305': 0.75, 'A295': 0.25}",A305,,"    private void setupActions(@NonNull final View view) {
        compactSlots = new ArrayList<>(NotificationConstants.getCompactSlotsFromPreferences(
                getContext(), getSharedPreferences()));
        notificationSlots = IntStream.range(0, 5)
                .mapToObj(i -> new NotificationSlot(getContext(), getSharedPreferences(), i, view,
                        compactSlots.contains(i), this::onToggleCompactSlot))
                .toArray(NotificationSlot[]::new);
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationActionsPreference.java,NotificationActionsPreference,onToggleCompactSlot,"void onToggleCompactSlot(int,CheckBox)","[79, 92]","{'A305': [(79, 92)]}",{'A305': 1.0},A305,,"    private void onToggleCompactSlot(final int i, final CheckBox checkBox) {
        if (checkBox.isChecked()) {
            compactSlots.remove((Integer) i);
        } else if (compactSlots.size() < 3) {
            compactSlots.add(i);
        } else {
            Toast.makeText(getContext(),
                    R.string.notification_actions_at_most_three,
                    Toast.LENGTH_SHORT).show();
            return;
        }

        checkBox.toggle();
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationActionsPreference.java,NotificationActionsPreference,saveChanges,void saveChanges(),"[99, 116]","{'A305': [(99, 116)]}",{'A305': 1.0},A305,,"    private void saveChanges() {
        if (compactSlots != null && notificationSlots != null) {
            final SharedPreferences.Editor editor = getSharedPreferences().edit();

            for (int i = 0; i < 3; i++) {
                editor.putInt(getContext().getString(
                        NotificationConstants.SLOT_COMPACT_PREF_KEYS[i]),
                        (i < compactSlots.size() ? compactSlots.get(i) : -1));
            }

            for (int i = 0; i < 5; i++) {
                editor.putInt(getContext().getString(NotificationConstants.SLOT_PREF_KEYS[i]),
                        notificationSlots[i].getSelectedAction());
            }

            editor.apply();
        }
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationSlot.java,NotificationSlot,setupTitle,void setupTitle(View),"[82, 87]","{'A305': [(82, 87)]}",{'A305': 1.0},A305,,"    void setupTitle(final View view) {
        ((TextView) view.findViewById(R.id.notificationActionTitle))
                .setText(SLOT_TITLES[i]);
        view.findViewById(R.id.notificationActionClickableArea).setOnClickListener(
                v -> openActionChooserDialog());
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationSlot.java,NotificationSlot,setupCheckbox,"void setupCheckbox(View,boolean)","[89, 102]","{'A305': [(89, 102)]}",{'A305': 1.0},A305,,"    void setupCheckbox(final View view, final boolean isCompactSlotChecked) {
        final CheckBox compactSlotCheckBox = view.findViewById(R.id.notificationActionCheckBox);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            // there are no compact slots to customize on Android 13+
            compactSlotCheckBox.setVisibility(View.GONE);
            view.findViewById(R.id.notificationActionCheckBoxClickableArea)
                    .setVisibility(View.GONE);
            return;
        }

        compactSlotCheckBox.setChecked(isCompactSlotChecked);
        view.findViewById(R.id.notificationActionCheckBoxClickableArea).setOnClickListener(
                v -> onToggleCompactSlot.accept(i, compactSlotCheckBox));
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationSlot.java,NotificationSlot,setupSelectedAction,void setupSelectedAction(View),"[104, 108]","{'A305': [(104, 108)]}",{'A305': 1.0},A305,,"    void setupSelectedAction(final View view) {
        icon = view.findViewById(R.id.notificationActionIcon);
        summary = view.findViewById(R.id.notificationActionSummary);
        updateInfo();
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationSlot.java,NotificationSlot,updateInfo,void updateInfo(),"[110, 119]","{'A305': [(110, 119)]}",{'A305': 1.0},A305,,"    void updateInfo() {
        if (NotificationConstants.ACTION_ICONS[selectedAction] == 0) {
            icon.setImageDrawable(null);
        } else {
            icon.setImageDrawable(AppCompatResources.getDrawable(context,
                    NotificationConstants.ACTION_ICONS[selectedAction]));
        }

        summary.setText(NotificationConstants.getActionName(context, selectedAction));
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationSlot.java,NotificationSlot,openActionChooserDialog,void openActionChooserDialog(),"[121, 166]","{'A305': [(121, 166)]}",{'A305': 1.0},A305,,"    void openActionChooserDialog() {
        final LayoutInflater inflater = LayoutInflater.from(context);
        final SingleChoiceDialogViewBinding binding =
                SingleChoiceDialogViewBinding.inflate(inflater);

        final AlertDialog alertDialog = new AlertDialog.Builder(context)
                .setTitle(SLOT_TITLES[i])
                .setView(binding.getRoot())
                .setCancelable(true)
                .create();

        final View.OnClickListener radioButtonsClickListener = v -> {
            selectedAction = NotificationConstants.ALL_ACTIONS[v.getId()];
            updateInfo();
            alertDialog.dismiss();
        };

        for (int id = 0; id < NotificationConstants.ALL_ACTIONS.length; ++id) {
            final int action = NotificationConstants.ALL_ACTIONS[id];
            final RadioButton radioButton = ListRadioIconItemBinding.inflate(inflater)
                    .getRoot();

            // if present set action icon with correct color
            final int iconId = NotificationConstants.ACTION_ICONS[action];
            if (iconId != 0) {
                radioButton.setCompoundDrawablesRelativeWithIntrinsicBounds(0, 0, iconId, 0);

                final var color = ColorStateList.valueOf(ThemeHelper
                        .resolveColorFromAttr(context, android.R.attr.textColorPrimary));
                TextViewCompat.setCompoundDrawableTintList(radioButton, color);
            }

            radioButton.setText(NotificationConstants.getActionName(context, action));
            radioButton.setChecked(action == selectedAction);
            radioButton.setId(id);
            radioButton.setLayoutParams(new RadioGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            radioButton.setOnClickListener(radioButtonsClickListener);
            binding.list.addView(radioButton);
        }
        alertDialog.show();

        if (DeviceUtils.isTv(context)) {
            FocusOverlayView.setupFocusObserver(alertDialog);
        }
    }
"
org.schabi.newpipe.settings.custom,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/custom/NotificationSlot.java,NotificationSlot,getSelectedAction,int getSelectedAction(),"[168, 171]","{'A305': [(168, 171)]}",{'A305': 1.0},A305,,"    @NotificationConstants.Action
    public int getSelectedAction() {
        return selectedAction;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[32, 57]","{'A300': [(34, 34), (42, 56)], 'A310': [(32, 32), (36, 36), (57, 57)], 'A302': [(39, 41)], 'A298': [(37, 38)], 'A299': [(33, 33), (35, 35)]}","{'A300': 0.6153846153846154, 'A310': 0.11538461538461539, 'A302': 0.11538461538461539, 'A298': 0.07692307692307693, 'A299': 0.07692307692307693}",A300,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        cacheWipeKey = getString(R.string.metadata_cache_wipe_key);
        viewsHistoryClearKey = getString(R.string.clear_views_history_key);
        playbackStatesClearKey = getString(R.string.clear_playback_states_key);
        searchHistoryClearKey = getString(R.string.clear_search_history_key);
        recordManager = new HistoryRecordManager(getActivity());
        disposables = new CompositeDisposable();

        final Preference clearCookiePref = requirePreference(R.string.clear_cookie_key);
        clearCookiePref.setOnPreferenceClickListener(preference -> {
            defaultPreferences.edit()
                    .putString(getString(R.string.recaptcha_cookies_key), """").apply();
            DownloaderImpl.getInstance().setCookie(ReCaptchaActivity.RECAPTCHA_COOKIES_KEY, """");
            Toast.makeText(getActivity(), R.string.recaptcha_cookies_cleared,
                    Toast.LENGTH_SHORT).show();
            clearCookiePref.setEnabled(false);
            return true;
        });

        if (defaultPreferences.getString(getString(R.string.recaptcha_cookies_key), """").isEmpty()) {
            clearCookiePref.setEnabled(false);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,onPreferenceTreeClick,boolean onPreferenceTreeClick(Preference),"[59, 75]","{'A305': [(63, 72), (74, 75)], 'A294': [(60, 60)], 'A310': [(59, 59), (61, 62), (73, 73)]}","{'A305': 0.7058823529411765, 'A294': 0.058823529411764705, 'A310': 0.23529411764705882}",A305,,"    @Override
    public boolean onPreferenceTreeClick(final Preference preference) {
        if (preference.getKey().equals(cacheWipeKey)) {
            InfoCache.getInstance().clearCache();
            Toast.makeText(requireContext(),
                    R.string.metadata_cache_wipe_complete_notice, Toast.LENGTH_SHORT).show();
        } else if (preference.getKey().equals(viewsHistoryClearKey)) {
            openDeleteWatchHistoryDialog(requireContext(), recordManager, disposables);
        } else if (preference.getKey().equals(playbackStatesClearKey)) {
            openDeletePlaybackStatesDialog(requireContext(), recordManager, disposables);
        } else if (preference.getKey().equals(searchHistoryClearKey)) {
            openDeleteSearchHistoryDialog(requireContext(), recordManager, disposables);
        } else {
            return super.onPreferenceTreeClick(preference);
        }
        return true;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,getDeletePlaybackStatesDisposable,"Disposable getDeletePlaybackStatesDisposable(Context,HistoryRecordManager)","[77, 87]","{'A305': [(77, 87)]}",{'A305': 1.0},A305,,"    private static Disposable getDeletePlaybackStatesDisposable(
            @NonNull final Context context, final HistoryRecordManager recordManager) {
        return recordManager.deleteCompleteStreamStateHistory()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        howManyDeleted -> Toast.makeText(context,
                                R.string.watch_history_states_deleted,  Toast.LENGTH_SHORT).show(),
                        throwable -> ErrorUtil.openActivity(context,
                                new ErrorInfo(throwable, UserAction.DELETE_FROM_HISTORY,
                                        ""Delete playback states"")));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,getWholeStreamHistoryDisposable,"Disposable getWholeStreamHistoryDisposable(Context,HistoryRecordManager)","[89, 99]","{'A305': [(89, 99)]}",{'A305': 1.0},A305,,"    private static Disposable getWholeStreamHistoryDisposable(
            @NonNull final Context context, final HistoryRecordManager recordManager) {
        return recordManager.deleteWholeStreamHistory()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        howManyDeleted -> Toast.makeText(context,
                                R.string.watch_history_deleted, Toast.LENGTH_SHORT).show(),
                        throwable -> ErrorUtil.openActivity(context,
                                new ErrorInfo(throwable, UserAction.DELETE_FROM_HISTORY,
                                        ""Delete from history"")));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,getRemoveOrphanedRecordsDisposable,"Disposable getRemoveOrphanedRecordsDisposable(Context,HistoryRecordManager)","[101, 110]","{'A305': [(101, 110)]}",{'A305': 1.0},A305,,"    private static Disposable getRemoveOrphanedRecordsDisposable(
            @NonNull final Context context, final HistoryRecordManager recordManager) {
        return recordManager.removeOrphanedRecords()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        howManyDeleted -> { },
                        throwable -> ErrorUtil.openActivity(context,
                                new ErrorInfo(throwable, UserAction.DELETE_FROM_HISTORY,
                                        ""Clear orphaned records"")));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,getDeleteSearchHistoryDisposable,"Disposable getDeleteSearchHistoryDisposable(Context,HistoryRecordManager)","[112, 122]","{'A305': [(112, 122)]}",{'A305': 1.0},A305,,"    private static Disposable getDeleteSearchHistoryDisposable(
            @NonNull final Context context, final HistoryRecordManager recordManager) {
        return recordManager.deleteCompleteSearchHistory()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        howManyDeleted -> Toast.makeText(context,
                                R.string.search_history_deleted, Toast.LENGTH_SHORT).show(),
                        throwable -> ErrorUtil.openActivity(context,
                                new ErrorInfo(throwable, UserAction.DELETE_FROM_HISTORY,
                                        ""Delete search history"")));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,openDeleteWatchHistoryDialog,"void openDeleteWatchHistoryDialog(Context,HistoryRecordManager,CompositeDisposable)","[124, 136]","{'A305': [(124, 136)]}",{'A305': 1.0},A305,,"    public static void openDeleteWatchHistoryDialog(@NonNull final Context context,
                                                    final HistoryRecordManager recordManager,
                                                    final CompositeDisposable disposables) {
        new AlertDialog.Builder(context)
                .setTitle(R.string.delete_view_history_alert)
                .setNegativeButton(R.string.cancel, ((dialog, which) -> dialog.dismiss()))
                .setPositiveButton(R.string.delete, ((dialog, which) -> {
                    disposables.add(getDeletePlaybackStatesDisposable(context, recordManager));
                    disposables.add(getWholeStreamHistoryDisposable(context, recordManager));
                    disposables.add(getRemoveOrphanedRecordsDisposable(context, recordManager));
                }))
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,openDeletePlaybackStatesDialog,"void openDeletePlaybackStatesDialog(Context,HistoryRecordManager,CompositeDisposable)","[138, 147]","{'A305': [(138, 147)]}",{'A305': 1.0},A305,,"    public static void openDeletePlaybackStatesDialog(@NonNull final Context context,
                                                      final HistoryRecordManager recordManager,
                                                      final CompositeDisposable disposables) {
        new AlertDialog.Builder(context)
                .setTitle(R.string.delete_playback_states_alert)
                .setNegativeButton(R.string.cancel, ((dialog, which) -> dialog.dismiss()))
                .setPositiveButton(R.string.delete, ((dialog, which) ->
                        disposables.add(getDeletePlaybackStatesDisposable(context, recordManager))))
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/HistorySettingsFragment.java,HistorySettingsFragment,openDeleteSearchHistoryDialog,"void openDeleteSearchHistoryDialog(Context,HistoryRecordManager,CompositeDisposable)","[149, 158]","{'A305': [(149, 157)], 'A310': [(158, 158)]}","{'A305': 0.9, 'A310': 0.1}",A305,,"    public static void openDeleteSearchHistoryDialog(@NonNull final Context context,
                                                     final HistoryRecordManager recordManager,
                                                     final CompositeDisposable disposables) {
        new AlertDialog.Builder(context)
                .setTitle(R.string.delete_search_history_alert)
                .setNegativeButton(R.string.cancel, ((dialog, which) -> dialog.dismiss()))
                .setPositiveButton(R.string.delete, ((dialog, which) ->
                        disposables.add(getDeleteSearchHistoryDisposable(context, recordManager))))
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/ExoPlayerSettingsFragment.java,ExoPlayerSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[15, 44]","{'A333': [(15, 18), (44, 44)], 'A298': [(19, 43)]}","{'A333': 0.16666666666666666, 'A298': 0.8333333333333334}",A298,,"    @Override
    public void onCreatePreferences(@Nullable final Bundle savedInstanceState,
                                    @Nullable final String rootKey) {
        addPreferencesFromResourceRegistry();

        final String disabledMediaTunnelingAutomaticallyKey =
                getString(R.string.disabled_media_tunneling_automatically_key);
        final SwitchPreferenceCompat disableMediaTunnelingPref =
                (SwitchPreferenceCompat) requirePreference(R.string.disable_media_tunneling_key);
        final SharedPreferences prefs = PreferenceManager
                .getDefaultSharedPreferences(requireContext());
        final boolean mediaTunnelingAutomaticallyDisabled =
                prefs.getInt(disabledMediaTunnelingAutomaticallyKey, -1) == 1;
        final String summaryText = getString(R.string.disable_media_tunneling_summary);
        disableMediaTunnelingPref.setSummary(mediaTunnelingAutomaticallyDisabled
                ? summaryText + "" "" + getString(R.string.disable_media_tunneling_automatic_info)
                : summaryText);

        disableMediaTunnelingPref.setOnPreferenceChangeListener((Preference p, Object enabled) -> {
                    if (Boolean.FALSE.equals(enabled)) {
                        PreferenceManager.getDefaultSharedPreferences(requireContext())
                                .edit()
                                .putInt(disabledMediaTunnelingAutomaticallyKey, 0)
                                .apply();
                        // the info text might have been shown before
                        p.setSummary(R.string.disable_media_tunneling_summary);
                    }
                    return true;
                });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,initSettings,void initSettings(Context),"[47, 67]","{'A372': [(67, 67)], 'A298': [(61, 61), (65, 65)], 'A294': [(47, 47), (63, 64)], 'A305': [(48, 48), (50, 51), (54, 57), (59, 59)], 'A309': [(49, 49), (66, 66)], 'A301': [(52, 53), (62, 62)], 'A300': [(58, 58)], 'A310': [(60, 60)]}","{'A372': 0.047619047619047616, 'A298': 0.09523809523809523, 'A294': 0.14285714285714285, 'A305': 0.38095238095238093, 'A309': 0.09523809523809523, 'A301': 0.14285714285714285, 'A300': 0.047619047619047616, 'A310': 0.047619047619047616}",A305,,"    public static void initSettings(final Context context) {
        // first run migrations, then setDefaultValues, since the latter requires the correct types
        SettingMigrations.runMigrationsIfNeeded(context);

        // readAgain is true so that if new settings are added their default value is set
        PreferenceManager.setDefaultValues(context, R.xml.main_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.video_audio_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.download_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.appearance_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.history_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.content_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.player_notification_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.update_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.debug_settings, true);
        PreferenceManager.setDefaultValues(context, R.xml.backup_restore_settings, true);

        saveDefaultVideoDownloadDirectory(context);
        saveDefaultAudioDownloadDirectory(context);

        disableMediaTunnelingIfNecessary(context);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,saveDefaultVideoDownloadDirectory,void saveDefaultVideoDownloadDirectory(Context),"[69, 72]","{'A372': [(72, 72)], 'A294': [(69, 71)]}","{'A372': 0.25, 'A294': 0.75}",A294,,"    static void saveDefaultVideoDownloadDirectory(final Context context) {
        saveDefaultDirectory(context, R.string.download_path_video_key,
                Environment.DIRECTORY_MOVIES);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,saveDefaultAudioDownloadDirectory,void saveDefaultAudioDownloadDirectory(Context),"[74, 77]","{'A372': [(77, 77)], 'A294': [(74, 76)]}","{'A372': 0.25, 'A294': 0.75}",A294,,"    static void saveDefaultAudioDownloadDirectory(final Context context) {
        saveDefaultDirectory(context, R.string.download_path_audio_key,
                Environment.DIRECTORY_MUSIC);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,saveDefaultDirectory,"void saveDefaultDirectory(Context,int,String)","[79, 93]","{'A372': [(88, 88), (93, 93)], 'A294': [(79, 87), (89, 92)]}","{'A372': 0.13333333333333333, 'A294': 0.8666666666666667}",A294,,"    private static void saveDefaultDirectory(final Context context, final int keyID,
                                             final String defaultDirectoryName) {
        if (!useStorageAccessFramework(context)) {
            final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
            final String key = context.getString(keyID);
            final String downloadPath = prefs.getString(key, null);
            if (!isNullOrEmpty(downloadPath)) {
                return;
            }

            final SharedPreferences.Editor spEditor = prefs.edit();
            spEditor.putString(key, getNewPipeChildFolderPathForDir(getDir(defaultDirectoryName)));
            spEditor.apply();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,getDir,File getDir(String),"[95, 98]","{'A372': [(95, 95), (98, 98)], 'A294': [(96, 96)], 'A301': [(97, 97)]}","{'A372': 0.5, 'A294': 0.25, 'A301': 0.25}",A372,,"    @NonNull
    public static File getDir(final String defaultDirectoryName) {
        return new File(Environment.getExternalStorageDirectory(), defaultDirectoryName);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,getNewPipeChildFolderPathForDir,String getNewPipeChildFolderPathForDir(File),"[100, 102]","{'A302': [(102, 102)], 'A294': [(100, 100)], 'A328': [(101, 101)]}","{'A302': 0.3333333333333333, 'A294': 0.3333333333333333, 'A328': 0.3333333333333333}",A302,,"    private static String getNewPipeChildFolderPathForDir(final File dir) {
        return new File(dir, ""NewPipe"").toURI().toString();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,useStorageAccessFramework,boolean useStorageAccessFramework(Context),"[104, 117]","{'A294': [(104, 104), (108, 108), (111, 112), (116, 116)], 'A373': [(105, 106), (109, 110)], 'A300': [(107, 107)], 'A328': [(113, 115), (117, 117)]}","{'A294': 0.35714285714285715, 'A373': 0.2857142857142857, 'A300': 0.07142857142857142, 'A328': 0.2857142857142857}",A294,,"    public static boolean useStorageAccessFramework(final Context context) {
        // There's a FireOS bug which prevents SAF open/close dialogs from being confirmed with a
        // remote (see #6455).
        if (DeviceUtils.isFireTv()) {
            return false;
        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            return true;
        }

        final String key = context.getString(R.string.storage_use_saf);
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);

        return prefs.getBoolean(key, true);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,showSearchSuggestions,"boolean showSearchSuggestions(Context,SharedPreferences,int)","[119, 130]","{'A305': [(119, 130)]}",{'A305': 1.0},A305,,"    private static boolean showSearchSuggestions(final Context context,
                                                 final SharedPreferences sharedPreferences,
                                                 @StringRes final int key) {
        final Set<String> enabledSearchSuggestions = sharedPreferences.getStringSet(
                context.getString(R.string.show_search_suggestions_key), null);

        if (enabledSearchSuggestions == null) {
            return true; // defaults to true
        } else {
            return enabledSearchSuggestions.contains(context.getString(key));
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,showLocalSearchSuggestions,"boolean showLocalSearchSuggestions(Context,SharedPreferences)","[132, 136]","{'A305': [(132, 136)]}",{'A305': 1.0},A305,,"    public static boolean showLocalSearchSuggestions(final Context context,
                                                     final SharedPreferences sharedPreferences) {
        return showSearchSuggestions(context, sharedPreferences,
                R.string.show_local_search_suggestions_key);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,showRemoteSearchSuggestions,"boolean showRemoteSearchSuggestions(Context,SharedPreferences)","[138, 142]","{'A305': [(138, 142)]}",{'A305': 1.0},A305,,"    public static boolean showRemoteSearchSuggestions(final Context context,
                                                      final SharedPreferences sharedPreferences) {
        return showSearchSuggestions(context, sharedPreferences,
                R.string.show_remote_search_suggestions_key);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,disableMediaTunnelingIfNecessary,void disableMediaTunnelingIfNecessary(Context),"[144, 163]","{'A298': [(145, 158), (160, 163)], 'A309': [(144, 144), (159, 159)]}","{'A298': 0.9, 'A309': 0.1}",A298,,"    private static void disableMediaTunnelingIfNecessary(@NonNull final Context context) {
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
        final String disabledTunnelingKey = context.getString(R.string.disable_media_tunneling_key);
        final String disabledTunnelingAutomaticallyKey =
                context.getString(R.string.disabled_media_tunneling_automatically_key);
        final String blacklistVersionKey =
                context.getString(R.string.media_tunneling_device_blacklist_version);

        final int lastMediaTunnelingUpdate = prefs.getInt(blacklistVersionKey, 0);
        final boolean wasDeviceBlacklistUpdated =
                DeviceUtils.MEDIA_TUNNELING_DEVICE_BLACKLIST_VERSION != lastMediaTunnelingUpdate;
        final boolean wasMediaTunnelingEnabledByUser =
                prefs.getInt(disabledTunnelingAutomaticallyKey, -1) == 0
                        && !prefs.getBoolean(disabledTunnelingKey, false);

        if (App.getApp().isFirstRun()
                || (wasDeviceBlacklistUpdated && !wasMediaTunnelingEnabledByUser)) {
            setMediaTunneling(context);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/NewPipeSettings.java,NewPipeSettings,setMediaTunneling,void setMediaTunneling(Context),"[171, 186]","{'A298': [(171, 186)]}",{'A298': 1.0},A298,,"    public static void setMediaTunneling(@NonNull final Context context) {
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);
        if (!DeviceUtils.shouldSupportMediaTunneling()) {
            prefs.edit()
                    .putBoolean(context.getString(R.string.disable_media_tunneling_key), true)
                    .putInt(context.getString(
                            R.string.disabled_media_tunneling_automatically_key), 1)
                    .putInt(context.getString(R.string.media_tunneling_device_blacklist_version),
                            DeviceUtils.MEDIA_TUNNELING_DEVICE_BLACKLIST_VERSION)
                    .apply();
        } else {
            prefs.edit()
                    .putInt(context.getString(R.string.media_tunneling_device_blacklist_version),
                            DeviceUtils.MEDIA_TUNNELING_DEVICE_BLACKLIST_VERSION).apply();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/MainSettingsFragment.java,MainSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[19, 38]","{'A301': [(19, 19), (38, 38)], 'A300': [(21, 23), (25, 25), (27, 28), (32, 37)], 'A294': [(20, 20)], 'A310': [(24, 24)], 'A295': [(26, 26)], 'A375': [(29, 31)]}","{'A301': 0.1, 'A300': 0.6, 'A294': 0.05, 'A310': 0.05, 'A295': 0.05, 'A375': 0.15}",A300,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        setHasOptionsMenu(true); // Otherwise onCreateOptionsMenu is not called

        // Check if the app is updatable
        if (!ReleaseVersionUtil.INSTANCE.isReleaseApk()) {
            getPreferenceScreen().removePreference(
                    findPreference(getString(R.string.update_pref_screen_key)));

            defaultPreferences.edit().putBoolean(getString(R.string.update_app_key), false).apply();
        }

        // Hide debug preferences in RELEASE build variant
        if (!DEBUG) {
            getPreferenceScreen().removePreference(
                    findPreference(getString(R.string.debug_pref_screen_key)));
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/MainSettingsFragment.java,MainSettingsFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[40, 60]","{'A300': [(40, 60)]}",{'A300': 1.0},A300,,"    @Override
    public void onCreateOptionsMenu(
            @NonNull final Menu menu,
            @NonNull final MenuInflater inflater
    ) {
        super.onCreateOptionsMenu(menu, inflater);

        // -- Link settings activity and register menu --
        settingsActivity = (SettingsActivity) getActivity();

        inflater.inflate(R.menu.menu_settings_main_fragment, menu);

        final MenuItem menuSearchItem = menu.getItem(0);

        settingsActivity.setMenuSearchItem(menuSearchItem);

        menuSearchItem.setOnMenuItemClickListener(ev -> {
            settingsActivity.setSearchActive(true);
            return true;
        });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/MainSettingsFragment.java,MainSettingsFragment,onDestroy,void onDestroy(),"[62, 70]","{'A300': [(62, 70)]}",{'A300': 1.0},A300,,"    @Override
    public void onDestroy() {
        // Unlink activity so that we don't get memory problems
        if (settingsActivity != null) {
            settingsActivity.setMenuSearchItem(null);
            settingsActivity = null;
        }
        super.onDestroy();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,setOnSelectedListener,void setOnSelectedListener(OnSelectedListener),"[65, 67]","{'A376': [(65, 67)]}",{'A376': 1.0},A376,,"    public void setOnSelectedListener(final OnSelectedListener listener) {
        onSelectedListener = listener;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,setOnCancelListener,void setOnCancelListener(OnCancelListener),"[69, 71]","{'A376': [(69, 71)]}",{'A376': 1.0},A376,,"    public void setOnCancelListener(final OnCancelListener listener) {
        onCancelListener = listener;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onCreate,void onCreate(Bundle),"[77, 81]","{'A376': [(77, 81)]}",{'A376': 1.0},A376,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStyle(STYLE_NO_TITLE, ThemeHelper.getMinWidthDialogTheme(requireContext()));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[83, 106]","{'A376': [(83, 106)]}",{'A376': 1.0},A376,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        final View v = inflater.inflate(R.layout.select_feed_group_fragment, container, false);
        recyclerView = v.findViewById(R.id.items_list);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        final SelectFeedGroupAdapter feedGroupAdapter = new SelectFeedGroupAdapter();
        recyclerView.setAdapter(feedGroupAdapter);

        progressBar = v.findViewById(R.id.progressBar);
        emptyView = v.findViewById(R.id.empty_state_view);
        progressBar.setVisibility(View.VISIBLE);
        recyclerView.setVisibility(View.GONE);
        emptyView.setVisibility(View.GONE);


        final AppDatabase database = NewPipeDatabase.getInstance(requireContext());
        database.feedGroupDAO().getAll().toObservable()
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getFeedGroupObserver());

        return v;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onCancel,void onCancel(DialogInterface),"[112, 118]","{'A376': [(112, 118)]}",{'A376': 1.0},A376,,"    @Override
    public void onCancel(@NonNull final DialogInterface dialogInterface) {
        super.onCancel(dialogInterface);
        if (onCancelListener != null) {
            onCancelListener.onCancel();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,clickedItem,void clickedItem(int),"[120, 128]","{'A376': [(120, 128)]}",{'A376': 1.0},A376,,"    private void clickedItem(final int position) {
        if (onSelectedListener != null) {
            final FeedGroupEntity entry = feedGroups.get(position);
            onSelectedListener
                    .onFeedGroupSelected(entry.getUid(), entry.getName(),
                            entry.getIcon().getDrawableResource());
        }
        dismiss();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,displayFeedGroups,void displayFeedGroups(List<FeedGroupEntity>),"[134, 143]","{'A376': [(134, 143)]}",{'A376': 1.0},A376,,"    private void displayFeedGroups(final List<FeedGroupEntity> newFeedGroups) {
        this.feedGroups = newFeedGroups;
        progressBar.setVisibility(View.GONE);
        if (newFeedGroups.isEmpty()) {
            emptyView.setVisibility(View.VISIBLE);
            return;
        }
        recyclerView.setVisibility(View.VISIBLE);

    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,getFeedGroupObserver,Observer<List<FeedGroupEntity>> getFeedGroupObserver(),"[145, 164]","{'A376': [(145, 164)]}",{'A376': 1.0},A376,,"    private Observer<List<FeedGroupEntity>> getFeedGroupObserver() {
        return new Observer<List<FeedGroupEntity>>() {
            @Override
            public void onSubscribe(@NonNull final Disposable disposable) { }

            @Override
            public void onNext(@NonNull final List<FeedGroupEntity> newGroups) {
                displayFeedGroups(newGroups);
            }

            @Override
            public void onError(@NonNull final Throwable exception) {
                ErrorUtil.showUiErrorSnackbar(SelectFeedGroupFragment.this,
                        ""Loading Feed Groups"", exception);
            }

            @Override
            public void onComplete() { }
        };
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onSubscribe,void onSubscribe(Disposable),"[147, 148]","{'A376': [(147, 148)]}",{'A376': 1.0},A376,,"            @Override
            public void onSubscribe(@NonNull final Disposable disposable) { }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onNext,void onNext(List<FeedGroupEntity>),"[150, 153]","{'A376': [(150, 153)]}",{'A376': 1.0},A376,,"            @Override
            public void onNext(@NonNull final List<FeedGroupEntity> newGroups) {
                displayFeedGroups(newGroups);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onError,void onError(Throwable),"[155, 159]","{'A376': [(155, 159)]}",{'A376': 1.0},A376,,"            @Override
            public void onError(@NonNull final Throwable exception) {
                ErrorUtil.showUiErrorSnackbar(SelectFeedGroupFragment.this,
                        ""Loading Feed Groups"", exception);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment,onComplete,void onComplete(),"[161, 162]","{'A376': [(161, 162)]}",{'A376': 1.0},A376,,"            @Override
            public void onComplete() { }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment.SelectFeedGroupAdapter,onCreateViewHolder,"SelectFeedGroupItemHolder onCreateViewHolder(ViewGroup,int)","[180, 187]","{'A376': [(180, 187)]}",{'A376': 1.0},A376,,"        @NonNull
        @Override
        public SelectFeedGroupItemHolder onCreateViewHolder(final ViewGroup parent,
                                                          final int viewType) {
            final View item = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.select_feed_group_item, parent, false);
            return new SelectFeedGroupItemHolder(item);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment.SelectFeedGroupAdapter,onBindViewHolder,"void onBindViewHolder(SelectFeedGroupItemHolder,int)","[189, 195]","{'A376': [(189, 195)]}",{'A376': 1.0},A376,,"        @Override
        public void onBindViewHolder(final SelectFeedGroupItemHolder holder, final int position) {
            final FeedGroupEntity entry = feedGroups.get(position);
            holder.titleView.setText(entry.getName());
            holder.view.setOnClickListener(view -> clickedItem(position));
            holder.thumbnailView.setImageResource(entry.getIcon().getDrawableResource());
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectFeedGroupFragment.java,SelectFeedGroupFragment.SelectFeedGroupAdapter,getItemCount,int getItemCount(),"[197, 200]","{'A376': [(197, 200)]}",{'A376': 1.0},A376,,"        @Override
        public int getItemCount() {
            return feedGroups.size();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/VideoAudioSettingsFragment.java,VideoAudioSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[25, 56]","{'A347': [(25, 25), (28, 28), (49, 49), (54, 56)], 'A356': [(29, 29), (51, 51)], 'A294': [(33, 36), (43, 46)], 'A377': [(30, 30), (52, 53)], 'A299': [(26, 26)], 'A300': [(27, 27)], 'A298': [(31, 32), (37, 42), (47, 48), (50, 50)]}","{'A347': 0.1875, 'A356': 0.0625, 'A294': 0.25, 'A377': 0.09375, 'A299': 0.03125, 'A300': 0.03125, 'A298': 0.34375}",A298,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        updateSeekOptions();
        updateResolutionOptions();
        listener = (sharedPreferences, key) -> {

            // on M and above, if user chooses to minimise to popup player on exit
            // and the app doesn't have display over other apps permission,
            // show a snackbar to let the user give permission
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M
                    && getString(R.string.minimize_on_exit_key).equals(key)) {
                final String newSetting = sharedPreferences.getString(key, null);
                if (newSetting != null
                        && newSetting.equals(getString(R.string.minimize_on_exit_popup_key))
                        && !Settings.canDrawOverlays(getContext())) {

                    Snackbar.make(getListView(), R.string.permission_display_over_apps,
                            Snackbar.LENGTH_INDEFINITE)
                            .setAction(R.string.settings, view ->
                                    PermissionHelper.checkSystemAlertWindowPermission(getContext()))
                            .show();

                }
            } else if (getString(R.string.use_inexact_seek_key).equals(key)) {
                updateSeekOptions();
            } else if (getString(R.string.show_higher_resolutions_key).equals(key)) {
                updateResolutionOptions();
            }
        };
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/VideoAudioSettingsFragment.java,VideoAudioSettingsFragment,updateResolutionOptions,void updateResolutionOptions(),"[65, 128]","{'A377': [(65, 68), (71, 90), (101, 107), (111, 128)], 'A298': [(69, 70), (91, 100), (108, 110)]}","{'A377': 0.765625, 'A298': 0.234375}",A377,,"    private void updateResolutionOptions() {
        final Resources resources = getResources();
        final boolean showHigherResolutions =  getPreferenceManager().getSharedPreferences()
                .getBoolean(resources.getString(R.string.show_higher_resolutions_key), false);

        // get sorted resolution lists
        final List<String> resolutionListDescriptions = ListHelper.getSortedResolutionList(
                resources,
                R.array.resolution_list_description,
                R.array.high_resolution_list_descriptions,
                showHigherResolutions);
        final List<String> resolutionListValues = ListHelper.getSortedResolutionList(
                resources,
                R.array.resolution_list_values,
                R.array.high_resolution_list_values,
                showHigherResolutions);
        final List<String> limitDataUsageResolutionValues = ListHelper.getSortedResolutionList(
                resources,
                R.array.limit_data_usage_values_list,
                R.array.high_resolution_limit_data_usage_values_list,
                showHigherResolutions);
        final List<String> limitDataUsageResolutionDescriptions = ListHelper
                .getSortedResolutionList(resources,
                R.array.limit_data_usage_description_list,
                R.array.high_resolution_list_descriptions,
                showHigherResolutions);

        // get resolution preferences
        final ListPreference defaultResolution = findPreference(
                getString(R.string.default_resolution_key));
        final ListPreference defaultPopupResolution = findPreference(
                getString(R.string.default_popup_resolution_key));
        final ListPreference mobileDataResolution = findPreference(
                getString(R.string.limit_mobile_data_usage_key));

        // update resolution preferences with new resolutions, entries & values for each
        defaultResolution.setEntries(resolutionListDescriptions.toArray(new String[0]));
        defaultResolution.setEntryValues(resolutionListValues.toArray(new String[0]));
        defaultPopupResolution.setEntries(resolutionListDescriptions.toArray(new String[0]));
        defaultPopupResolution.setEntryValues(resolutionListValues.toArray(new String[0]));
        mobileDataResolution.setEntries(
                limitDataUsageResolutionDescriptions.toArray(new String[0]));
        mobileDataResolution.setEntryValues(limitDataUsageResolutionValues.toArray(new String[0]));

        // if ""Show higher resolution"" option is disabled,
        // set default resolution to ""best resolution""
        if (!showHigherResolutions) {
            if (ListHelper.isHighResolutionSelected(defaultResolution.getValue(),
                    R.array.high_resolution_list_values,
                    resources)) {
                defaultResolution.setValueIndex(0);
            }
            if (ListHelper.isHighResolutionSelected(defaultPopupResolution.getValue(),
                    R.array.high_resolution_list_values,
                    resources)) {
                defaultPopupResolution.setValueIndex(0);
            }
            if (ListHelper.isHighResolutionSelected(mobileDataResolution.getValue(),
                    R.array.high_resolution_limit_data_usage_values_list,
                    resources)) {
                mobileDataResolution.setValueIndex(0);
            }
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/VideoAudioSettingsFragment.java,VideoAudioSettingsFragment,updateSeekOptions,void updateSeekOptions(),"[135, 179]","{'A356': [(135, 135), (137, 142), (144, 144), (146, 146), (148, 150), (153, 154), (161, 163), (166, 168), (170, 172), (177, 179)], 'A294': [(136, 136), (143, 143), (145, 145), (147, 147), (155, 160), (165, 165), (173, 176)], 'A299': [(164, 164)], 'A298': [(169, 169)], 'A371': [(151, 152)]}","{'A356': 0.5777777777777777, 'A294': 0.3333333333333333, 'A299': 0.022222222222222223, 'A298': 0.022222222222222223, 'A371': 0.044444444444444446}",A356,,"    private void updateSeekOptions() {
        // initializing R.array.seek_duration_description to display the translation of seconds
        final Resources res = getResources();
        final String[] durationsValues = res.getStringArray(R.array.seek_duration_value);
        final List<String> displayedDurationValues = new LinkedList<>();
        final List<String> displayedDescriptionValues = new LinkedList<>();
        int currentDurationValue;
        final boolean inexactSeek = getPreferenceManager().getSharedPreferences()
                .getBoolean(res.getString(R.string.use_inexact_seek_key), false);

        for (final String durationsValue : durationsValues) {
            currentDurationValue =
                    Integer.parseInt(durationsValue) / (int) DateUtils.SECOND_IN_MILLIS;
            if (inexactSeek && currentDurationValue % 10 == 5) {
                continue;
            }

            displayedDurationValues.add(durationsValue);
            try {
                displayedDescriptionValues.add(String.format(
                        res.getQuantityString(R.plurals.seconds,
                                currentDurationValue),
                        currentDurationValue));
            } catch (final Resources.NotFoundException ignored) {
                // if this happens, the translation is missing,
                // and the english string will be displayed instead
            }
        }

        final ListPreference durations = findPreference(
                getString(R.string.seek_duration_key));
        durations.setEntryValues(displayedDurationValues.toArray(new CharSequence[0]));
        durations.setEntries(displayedDescriptionValues.toArray(new CharSequence[0]));
        final int selectedDuration = Integer.parseInt(durations.getValue());
        if (inexactSeek && selectedDuration / (int) DateUtils.SECOND_IN_MILLIS % 10 == 5) {
            final int newDuration = selectedDuration / (int) DateUtils.SECOND_IN_MILLIS + 5;
            durations.setValue(Integer.toString(newDuration * (int) DateUtils.SECOND_IN_MILLIS));

            final Toast toast = Toast
                    .makeText(getContext(),
                            getString(R.string.new_seek_duration_toast, newDuration),
                            Toast.LENGTH_LONG);
            toast.show();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/VideoAudioSettingsFragment.java,VideoAudioSettingsFragment,onResume,void onResume(),"[181, 187]","{'A347': [(181, 183), (186, 187)], 'A294': [(184, 185)]}","{'A347': 0.7142857142857143, 'A294': 0.2857142857142857}",A347,,"    @Override
    public void onResume() {
        super.onResume();
        getPreferenceManager().getSharedPreferences()
                .registerOnSharedPreferenceChangeListener(listener);

    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/VideoAudioSettingsFragment.java,VideoAudioSettingsFragment,onPause,void onPause(),"[189, 194]","{'A347': [(189, 191), (194, 194)], 'A294': [(192, 193)]}","{'A347': 0.6666666666666666, 'A294': 0.3333333333333333}",A347,,"    @Override
    public void onPause() {
        super.onPause();
        getPreferenceManager().getSharedPreferences()
                .unregisterOnSharedPreferenceChangeListener(listener);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onCreate,void onCreate(Bundle),"[64, 73]","{'A291': [(64, 64), (66, 73)], 'A294': [(65, 65)]}","{'A291': 0.9, 'A294': 0.1}",A291,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        sharedPreferences = PreferenceManager.getDefaultSharedPreferences(requireContext());
        savedInstanceListKey = getString(R.string.peertube_instance_list_key);
        selectedInstance = PeertubeHelper.getCurrentInstance();

        setHasOptionsMenu(true);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[75, 80]","{'A291': [(75, 75), (80, 80)], 'A295': [(78, 79)], 'A294': [(76, 77)]}","{'A291': 0.3333333333333333, 'A295': 0.3333333333333333, 'A294': 0.3333333333333333}",A291,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        binding = FragmentInstanceListBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onViewCreated,"void onViewCreated(View,Bundle)","[82, 98]","{'A291': [(82, 82), (85, 86), (91, 91), (94, 95), (98, 98)], 'A295': [(87, 87), (89, 90), (93, 93), (96, 97)], 'A294': [(83, 84), (88, 88), (92, 92)]}","{'A291': 0.4117647058823529, 'A295': 0.35294117647058826, 'A294': 0.23529411764705882}",A291,,"    @Override
    public void onViewCreated(@NonNull final View rootView,
                              @Nullable final Bundle savedInstanceState) {
        super.onViewCreated(rootView, savedInstanceState);

        binding.instanceHelpTV.setText(getString(R.string.peertube_instance_url_help,
                getString(R.string.peertube_instance_list_url)));
        binding.addInstanceButton.setOnClickListener(v -> showAddItemDialog(requireContext()));
        binding.instances.setLayoutManager(new LinearLayoutManager(requireContext()));

        final ItemTouchHelper itemTouchHelper = new ItemTouchHelper(getItemTouchCallback());
        itemTouchHelper.attachToRecyclerView(binding.instances);

        instanceListAdapter = new InstanceListAdapter(requireContext(), itemTouchHelper);
        binding.instances.setAdapter(instanceListAdapter);
        instanceListAdapter.submitList(PeertubeHelper.getInstanceList(requireContext()));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onResume,void onResume(),"[100, 105]","{'A291': [(100, 102), (105, 105)], 'A305': [(103, 104)]}","{'A291': 0.6666666666666666, 'A305': 0.3333333333333333}",A291,,"    @Override
    public void onResume() {
        super.onResume();
        ThemeHelper.setTitleToAppCompatActivity(getActivity(),
                getString(R.string.peertube_instance_url_title));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onPause,void onPause(),"[107, 111]","{'A291': [(107, 111)]}",{'A291': 1.0},A291,,"    @Override
    public void onPause() {
        super.onPause();
        saveChanges();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onDestroy,void onDestroy(),"[113, 120]","{'A291': [(113, 115), (119, 120)], 'A294': [(116, 118)]}","{'A291': 0.625, 'A294': 0.375}",A291,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (disposables != null) {
            disposables.clear();
        }
        disposables = null;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onDestroyView,void onDestroyView(),"[122, 126]","{'A295': [(122, 126)]}",{'A295': 1.0},A295,,"    @Override
    public void onDestroyView() {
        binding = null;
        super.onDestroyView();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[132, 137]","{'A291': [(132, 132), (135, 135), (137, 137)], 'A299': [(133, 134)], 'A301': [(136, 136)]}","{'A291': 0.5, 'A299': 0.3333333333333333, 'A301': 0.16666666666666666}",A291,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.menu_chooser_fragment, menu);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[139, 147]","{'A291': [(139, 139), (142, 147)], 'A294': [(140, 140)], 'A301': [(141, 141)]}","{'A291': 0.7777777777777778, 'A294': 0.1111111111111111, 'A301': 0.1111111111111111}",A291,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        if (item.getItemId() == R.id.menu_item_restore_default) {
            restoreDefaults();
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,selectInstance,void selectInstance(PeertubeInstance),"[153, 156]","{'A291': [(154, 156)], 'A294': [(153, 153)]}","{'A291': 0.75, 'A294': 0.25}",A291,,"    private void selectInstance(final PeertubeInstance instance) {
        selectedInstance = PeertubeHelper.selectInstance(instance, requireContext());
        sharedPreferences.edit().putBoolean(Constants.KEY_MAIN_PAGE_CHANGE, true).apply();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,saveChanges,void saveChanges(),"[158, 168]","{'A291': [(158, 158), (161, 165), (167, 168)], 'A295': [(160, 160)], 'A294': [(159, 159), (166, 166)]}","{'A291': 0.7272727272727273, 'A295': 0.09090909090909091, 'A294': 0.18181818181818182}",A291,,"    private void saveChanges() {
        final JsonStringWriter jsonWriter = JsonWriter.string().object().array(""instances"");
        for (final PeertubeInstance instance : instanceListAdapter.getCurrentList()) {
            jsonWriter.object();
            jsonWriter.value(""name"", instance.getName());
            jsonWriter.value(""url"", instance.getUrl());
            jsonWriter.end();
        }
        final String jsonToSave = jsonWriter.end().end().done();
        sharedPreferences.edit().putString(savedInstanceListKey, jsonToSave).apply();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,restoreDefaults,void restoreDefaults(),"[170, 182]","{'A291': [(170, 170), (173, 175), (177, 177), (180, 182)], 'A305': [(176, 176)], 'A295': [(171, 172), (179, 179)], 'A300': [(178, 178)]}","{'A291': 0.6153846153846154, 'A305': 0.07692307692307693, 'A295': 0.23076923076923078, 'A300': 0.07692307692307693}",A291,,"    private void restoreDefaults() {
        final Context context = requireContext();
        new AlertDialog.Builder(context)
                .setTitle(R.string.restore_defaults)
                .setMessage(R.string.restore_defaults_confirmation)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.ok, (dialog, which) -> {
                    sharedPreferences.edit().remove(savedInstanceListKey).apply();
                    selectInstance(PeertubeInstance.DEFAULT_INSTANCE);
                    instanceListAdapter.submitList(PeertubeHelper.getInstanceList(context));
                })
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,showAddItemDialog,void showAddItemDialog(Context),"[184, 200]","{'A291': [(191, 191), (194, 194), (197, 198), (200, 200)], 'A305': [(195, 195)], 'A295': [(185, 185)], 'A299': [(186, 190), (193, 193), (196, 196), (199, 199)], 'A294': [(184, 184)], 'A300': [(192, 192)]}","{'A291': 0.29411764705882354, 'A305': 0.058823529411764705, 'A295': 0.058823529411764705, 'A299': 0.47058823529411764, 'A294': 0.058823529411764705, 'A300': 0.058823529411764705}",A299,,"    private void showAddItemDialog(final Context c) {
        final var dialogBinding = DialogEditTextBinding.inflate(getLayoutInflater());
        dialogBinding.dialogEditText.setInputType(
                InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_URI);
        dialogBinding.dialogEditText.setHint(R.string.peertube_instance_add_help);

        new AlertDialog.Builder(c)
                .setTitle(R.string.peertube_instance_add_title)
                .setIcon(R.drawable.ic_placeholder_peertube)
                .setView(dialogBinding.getRoot())
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.ok, (dialog1, which) -> {
                    final String url = dialogBinding.dialogEditText.getText().toString();
                    addInstance(url);
                })
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,addInstance,void addInstance(String),"[202, 222]","{'A291': [(210, 211), (221, 222)], 'A295': [(207, 207), (214, 214), (217, 217)], 'A294': [(202, 206), (208, 209), (212, 213), (215, 216), (218, 220)]}","{'A291': 0.19047619047619047, 'A295': 0.14285714285714285, 'A294': 0.6666666666666666}",A294,,"    private void addInstance(final String url) {
        final String cleanUrl = cleanUrl(url);
        if (cleanUrl == null) {
            return;
        }
        binding.loadingProgressBar.setVisibility(View.VISIBLE);
        final Disposable disposable = Single.fromCallable(() -> {
            final PeertubeInstance instance = new PeertubeInstance(cleanUrl);
            instance.fetchInstanceMetaData();
            return instance;
        }).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread())
                .subscribe((instance) -> {
                    binding.loadingProgressBar.setVisibility(View.GONE);
                    add(instance);
                }, e -> {
                    binding.loadingProgressBar.setVisibility(View.GONE);
                    Toast.makeText(getActivity(), R.string.peertube_instance_add_fail,
                            Toast.LENGTH_SHORT).show();
                });
        disposables.add(disposable);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,cleanUrl,String cleanUrl(String),"[224, 248]","{'A291': [(224, 224), (227, 227), (230, 231), (233, 233), (237, 239), (244, 246), (248, 248)], 'A295': [(240, 240)], 'A294': [(225, 226), (228, 229), (232, 232), (234, 236), (241, 243), (247, 247)]}","{'A291': 0.48, 'A295': 0.04, 'A294': 0.48}",A291,,"    @Nullable
    private String cleanUrl(final String url) {
        String cleanUrl = url.trim();
        // if protocol not present, add https
        if (!cleanUrl.startsWith(""http"")) {
            cleanUrl = ""https://"" + cleanUrl;
        }
        // remove trailing slash
        cleanUrl = cleanUrl.replaceAll(""/$"", """");
        // only allow https
        if (!cleanUrl.startsWith(""https://"")) {
            Toast.makeText(getActivity(), R.string.peertube_instance_add_https_only,
                    Toast.LENGTH_SHORT).show();
            return null;
        }
        // only allow if not already exists
        for (final PeertubeInstance instance : instanceListAdapter.getCurrentList()) {
            if (instance.getUrl().equals(cleanUrl)) {
                Toast.makeText(getActivity(), R.string.peertube_instance_add_exists,
                        Toast.LENGTH_SHORT).show();
                return null;
            }
        }
        return cleanUrl;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,add,void add(PeertubeInstance),"[250, 254]","{'A291': [(250, 250), (254, 254)], 'A295': [(251, 253)]}","{'A291': 0.4, 'A295': 0.6}",A295,,"    private void add(final PeertubeInstance instance) {
        final var list = new ArrayList<>(instanceListAdapter.getCurrentList());
        list.add(instance);
        instanceListAdapter.submitList(list);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,getItemTouchCallback,ItemTouchHelper.SimpleCallback getItemTouchCallback(),"[256, 316]","{'A295': [(267, 267), (301, 302), (306, 307), (309, 310), (312, 313)], 'A299': [(260, 260), (272, 274), (280, 281), (297, 299)], 'A294': [(256, 259), (261, 266), (268, 271), (275, 279), (282, 296), (300, 300), (303, 305), (308, 308), (311, 311), (314, 316)]}","{'A295': 0.14754098360655737, 'A299': 0.14754098360655737, 'A294': 0.7049180327868853}",A294,,"    private ItemTouchHelper.SimpleCallback getItemTouchCallback() {
        return new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN,
                ItemTouchHelper.START | ItemTouchHelper.END) {
            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView, viewSize,
                        viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(12, Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }

            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {
                if (source.getItemViewType() != target.getItemViewType()
                        || instanceListAdapter == null) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                instanceListAdapter.swapItems(sourceIndex, targetIndex);
                return true;
            }

            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }

            @Override
            public boolean isItemViewSwipeEnabled() {
                return true;
            }

            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
                final int position = viewHolder.getBindingAdapterPosition();
                // do not allow swiping the selected instance
                if (instanceListAdapter.getCurrentList().get(position).getUrl()
                        .equals(selectedInstance.getUrl())) {
                    instanceListAdapter.notifyItemChanged(position);
                    return;
                }
                final var list = new ArrayList<>(instanceListAdapter.getCurrentList());
                list.remove(position);

                if (list.isEmpty()) {
                    list.add(selectedInstance);
                }

                instanceListAdapter.submitList(list);
            }
        };
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,interpolateOutOfBoundsScroll,"int interpolateOutOfBoundsScroll(RecyclerView,int,int,int,long)","[259, 269]","{'A295': [(267, 267)], 'A299': [(260, 260)], 'A294': [(259, 259), (261, 266), (268, 269)]}","{'A295': 0.09090909090909091, 'A299': 0.09090909090909091, 'A294': 0.8181818181818182}",A294,,"            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView, viewSize,
                        viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(12, Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onMove,"boolean onMove(RecyclerView,RecyclerView.ViewHolder,RecyclerView.ViewHolder)","[271, 284]","{'A299': [(272, 274), (280, 281)], 'A294': [(271, 271), (275, 279), (282, 284)]}","{'A299': 0.35714285714285715, 'A294': 0.6428571428571429}",A294,,"            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {
                if (source.getItemViewType() != target.getItemViewType()
                        || instanceListAdapter == null) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                instanceListAdapter.swapItems(sourceIndex, targetIndex);
                return true;
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,isLongPressDragEnabled,boolean isLongPressDragEnabled(),"[286, 289]","{'A294': [(286, 289)]}",{'A294': 1.0},A294,,"            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,isItemViewSwipeEnabled,boolean isItemViewSwipeEnabled(),"[291, 294]","{'A294': [(291, 294)]}",{'A294': 1.0},A294,,"            @Override
            public boolean isItemViewSwipeEnabled() {
                return true;
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment,onSwiped,"void onSwiped(RecyclerView.ViewHolder,int)","[296, 314]","{'A295': [(301, 302), (306, 307), (309, 310), (312, 313)], 'A299': [(297, 299)], 'A294': [(296, 296), (300, 300), (303, 305), (308, 308), (311, 311), (314, 314)]}","{'A295': 0.42105263157894735, 'A299': 0.15789473684210525, 'A294': 0.42105263157894735}",A295,,"            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
                final int position = viewHolder.getBindingAdapterPosition();
                // do not allow swiping the selected instance
                if (instanceListAdapter.getCurrentList().get(position).getUrl()
                        .equals(selectedInstance.getUrl())) {
                    instanceListAdapter.notifyItemChanged(position);
                    return;
                }
                final var list = new ArrayList<>(instanceListAdapter.getCurrentList());
                list.remove(position);

                if (list.isEmpty()) {
                    list.add(selectedInstance);
                }

                instanceListAdapter.submitList(list);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment.InstanceListAdapter,swapItems,"void swapItems(int,int)","[334, 338]","{'A291': [(338, 338)], 'A295': [(335, 337)], 'A294': [(334, 334)]}","{'A291': 0.2, 'A295': 0.6, 'A294': 0.2}",A295,,"        public void swapItems(final int fromPosition, final int toPosition) {
            final var list = new ArrayList<>(getCurrentList());
            Collections.swap(list, fromPosition, toPosition);
            submitList(list);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment.InstanceListAdapter,onCreateViewHolder,"InstanceListAdapter.TabViewHolder onCreateViewHolder(ViewGroup,int)","[340, 346]","{'A291': [(340, 341), (346, 346)], 'A295': [(344, 345)], 'A294': [(342, 343)]}","{'A291': 0.42857142857142855, 'A295': 0.2857142857142857, 'A294': 0.2857142857142857}",A291,,"        @NonNull
        @Override
        public InstanceListAdapter.TabViewHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                                    final int viewType) {
            return new InstanceListAdapter.TabViewHolder(ItemInstanceBinding.inflate(inflater,
                    parent, false));
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment.InstanceListAdapter,onBindViewHolder,"void onBindViewHolder(InstanceListAdapter.TabViewHolder,int)","[348, 352]","{'A291': [(348, 348), (352, 352)], 'A295': [(351, 351)], 'A294': [(349, 350)]}","{'A291': 0.4, 'A295': 0.2, 'A294': 0.4}",A291,,"        @Override
        public void onBindViewHolder(@NonNull final InstanceListAdapter.TabViewHolder holder,
                                     final int position) {
            holder.bind(position);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment.InstanceListAdapter.TabViewHolder,bind,void bind(int),"[362, 395]","{'A291': [(362, 362), (373, 373), (378, 378), (380, 381), (384, 384), (386, 387), (389, 390), (392, 393), (395, 395)], 'A295': [(363, 372), (374, 377), (379, 379), (382, 383), (385, 385), (388, 388), (391, 391), (394, 394)]}","{'A291': 0.38235294117647056, 'A295': 0.6176470588235294}",A295,,"            @SuppressLint(""ClickableViewAccessibility"")
            void bind(final int position) {
                itemBinding.handle.setOnTouchListener((view, motionEvent) -> {
                    if (motionEvent.getActionMasked() == MotionEvent.ACTION_DOWN) {
                        if (itemTouchHelper != null && getItemCount() > 1) {
                            itemTouchHelper.startDrag(this);
                            return true;
                        }
                    }
                    return false;
                });

                final PeertubeInstance instance = getItem(position);
                itemBinding.instanceName.setText(instance.getName());
                itemBinding.instanceUrl.setText(instance.getUrl());
                itemBinding.selectInstanceRB.setOnCheckedChangeListener(null);
                if (selectedInstance.getUrl().equals(instance.getUrl())) {
                    if (lastChecked != null && lastChecked != itemBinding.selectInstanceRB) {
                        lastChecked.setChecked(false);
                    }
                    itemBinding.selectInstanceRB.setChecked(true);
                    lastChecked = itemBinding.selectInstanceRB;
                }
                itemBinding.selectInstanceRB.setOnCheckedChangeListener((buttonView, isChecked) -> {
                    if (isChecked) {
                        selectInstance(instance);
                        if (lastChecked != null && lastChecked != itemBinding.selectInstanceRB) {
                            lastChecked.setChecked(false);
                        }
                        lastChecked = itemBinding.selectInstanceRB;
                    }
                });
                itemBinding.instanceIcon.setImageResource(R.drawable.ic_placeholder_peertube);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment.PeertubeInstanceCallback,areItemsTheSame,"boolean areItemsTheSame(PeertubeInstance,PeertubeInstance)","[400, 404]","{'A295': [(400, 404)]}",{'A295': 1.0},A295,,"        @Override
        public boolean areItemsTheSame(@NonNull final PeertubeInstance oldItem,
                                       @NonNull final PeertubeInstance newItem) {
            return oldItem.getUrl().equals(newItem.getUrl());
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/PeertubeInstanceListFragment.java,PeertubeInstanceListFragment.PeertubeInstanceCallback,areContentsTheSame,"boolean areContentsTheSame(PeertubeInstance,PeertubeInstance)","[406, 411]","{'A291': [(411, 411)], 'A295': [(406, 410)]}","{'A291': 0.16666666666666666, 'A295': 0.8333333333333334}",A295,,"        @Override
        public boolean areContentsTheSame(@NonNull final PeertubeInstance oldItem,
                                          @NonNull final PeertubeInstance newItem) {
            return oldItem.getName().equals(newItem.getName())
                    && oldItem.getUrl().equals(newItem.getUrl());
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onCreate,void onCreate(Bundle),"[87, 119]","{'A302': [(87, 87), (91, 91), (101, 101)], 'A300': [(90, 90), (92, 93), (98, 98), (102, 110)], 'A294': [(88, 88)], 'A295': [(95, 97), (99, 99)], 'A290': [(116, 116)], 'A299': [(100, 100), (112, 112)], 'A297': [(115, 115), (117, 118)], 'A301': [(89, 89), (94, 94), (111, 111), (113, 114), (119, 119)]}","{'A302': 0.09090909090909091, 'A300': 0.3939393939393939, 'A294': 0.030303030303030304, 'A295': 0.12121212121212122, 'A290': 0.030303030303030304, 'A299': 0.06060606060606061, 'A297': 0.09090909090909091, 'A301': 0.18181818181818182}",A300,,"    @Override
    protected void onCreate(final Bundle savedInstanceBundle) {
        setTheme(ThemeHelper.getSettingsThemeStyle(this));

        super.onCreate(savedInstanceBundle);
        Bridge.restoreInstanceState(this, savedInstanceBundle);
        final boolean restored = savedInstanceBundle != null;

        final SettingsLayoutBinding settingsLayoutBinding =
                SettingsLayoutBinding.inflate(getLayoutInflater());
        setContentView(settingsLayoutBinding.getRoot());
        initSearch(settingsLayoutBinding, restored);

        setSupportActionBar(settingsLayoutBinding.settingsToolbarLayout.toolbar);

        if (restored) {
            // Restore state
            if (this.wasSearchActive) {
                setSearchActive(true);
                if (!TextUtils.isEmpty(this.searchText)) {
                    this.searchEditText.setText(this.searchText);
                }
            }
        } else {
            getSupportFragmentManager().beginTransaction()
                    .replace(R.id.settings_fragment_holder, new MainSettingsFragment())
                    .commit();
        }

        if (DeviceUtils.isTv(this)) {
            FocusOverlayView.setupFocusObserver(this);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onSaveInstanceState,void onSaveInstanceState(Bundle),"[121, 125]","{'A300': [(121, 125)]}",{'A300': 1.0},A300,,"    @Override
    protected void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        Bridge.saveInstanceState(this, outState);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onCreateOptionsMenu,boolean onCreateOptionsMenu(Menu),"[127, 136]","{'A302': [(134, 134), (136, 136)], 'A294': [(128, 129)], 'A301': [(127, 127), (130, 133), (135, 135)]}","{'A302': 0.2, 'A294': 0.2, 'A301': 0.6}",A301,,"    @Override
    public boolean onCreateOptionsMenu(final Menu menu) {
        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
            actionBar.setDisplayShowTitleEnabled(true);
        }

        return super.onCreateOptionsMenu(menu);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onBackPressed,void onBackPressed(),"[138, 145]","{'A300': [(138, 145)]}",{'A300': 1.0},A300,,"    @Override
    public void onBackPressed() {
        if (isSearchActive()) {
            setSearchActive(false);
            return;
        }
        super.onBackPressed();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[147, 165]","{'A302': [(147, 147), (162, 162), (165, 165)], 'A300': [(151, 156)], 'A294': [(148, 149), (159, 161)], 'A301': [(150, 150), (157, 158), (163, 164)]}","{'A302': 0.15789473684210525, 'A300': 0.3157894736842105, 'A294': 0.2631578947368421, 'A301': 0.2631578947368421}",A300,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        final int id = item.getItemId();
        if (id == android.R.id.home) {
            // Check if the search is active and if so: Close it
            if (isSearchActive()) {
                setSearchActive(false);
                return true;
            }

            if (getSupportFragmentManager().getBackStackEntryCount() == 0) {
                finish();
            } else {
                getSupportFragmentManager().popBackStack();
            }
        }

        return super.onOptionsItemSelected(item);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onPreferenceStartFragment,"boolean onPreferenceStartFragment(PreferenceFragmentCompat,Preference)","[167, 172]","{'A300': [(170, 172)], 'A294': [(169, 169)], 'A299': [(168, 168)], 'A301': [(167, 167)]}","{'A300': 0.5, 'A294': 0.16666666666666666, 'A299': 0.16666666666666666, 'A301': 0.16666666666666666}",A300,,"    @Override
    public boolean onPreferenceStartFragment(@NonNull final PreferenceFragmentCompat caller,
                                             final Preference preference) {
        showSettingsFragment(instantiateFragment(preference.getFragment()));
        return true;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,instantiateFragment,Fragment instantiateFragment(String),"[174, 178]","{'A300': [(174, 178)]}",{'A300': 1.0},A300,,"    private Fragment instantiateFragment(@NonNull final String className) {
        return getSupportFragmentManager()
                .getFragmentFactory()
                .instantiate(this.getClassLoader(), className);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,showSettingsFragment,void showSettingsFragment(Fragment),"[180, 187]","{'A300': [(180, 180), (184, 184)], 'A294': [(182, 183)], 'A301': [(181, 181), (185, 187)]}","{'A300': 0.25, 'A294': 0.25, 'A301': 0.5}",A301,,"    private void showSettingsFragment(final Fragment fragment) {
        getSupportFragmentManager().beginTransaction()
                .setCustomAnimations(R.animator.custom_fade_in, R.animator.custom_fade_out,
                        R.animator.custom_fade_in, R.animator.custom_fade_out)
                .replace(FRAGMENT_HOLDER_ID, fragment)
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onDestroy,void onDestroy(),"[189, 194]","{'A300': [(189, 194)]}",{'A300': 1.0},A300,,"    @Override
    protected void onDestroy() {
        setMenuSearchItem(null);
        searchFragment = null;
        super.onDestroy();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,initSearch,"void initSearch(SettingsLayoutBinding,boolean)","[201, 254]","{'A300': [(201, 254)]}",{'A300': 1.0},A300,,"    private void initSearch(
            final SettingsLayoutBinding settingsLayoutBinding,
            final boolean restored
    ) {
        searchContainer =
                settingsLayoutBinding.settingsToolbarLayout.toolbar
                        .findViewById(R.id.toolbar_search_container);

        // Configure input field for search
        searchEditText = searchContainer.findViewById(R.id.toolbar_search_edit_text);
        RxTextView.textChanges(searchEditText)
                // Wait some time after the last input before actually searching
                .debounce(200, TimeUnit.MILLISECONDS)
                .subscribe(v -> runOnUiThread(this::onSearchChanged));

        // Configure clear button
        searchContainer.findViewById(R.id.toolbar_search_clear)
                .setOnClickListener(ev -> resetSearchText());

        ensureSearchRepresentsApplicationState();

        // Build search configuration using SettingsResourceRegistry
        final PreferenceSearchConfiguration config = new PreferenceSearchConfiguration();


        // Build search items
        final Context searchContext = getApplicationContext();
        final PreferenceParser parser = new PreferenceParser(searchContext, config);
        final PreferenceSearcher searcher = new PreferenceSearcher(config);

        // Find all searchable SettingsResourceRegistry fragments
        SettingsResourceRegistry.getInstance().getAllEntries().stream()
                .filter(SettingsResourceRegistry.SettingRegistryEntry::isSearchable)
                // Get the resId
                .map(SettingsResourceRegistry.SettingRegistryEntry::getPreferencesResId)
                // Parse
                .map(parser::parse)
                // Add it to the searcher
                .forEach(searcher::add);

        if (restored) {
            searchFragment = (PreferenceSearchFragment) getSupportFragmentManager()
                    .findFragmentByTag(PreferenceSearchFragment.NAME);
            if (searchFragment != null) {
                // Hide/Remove the search fragment otherwise we get an exception
                // when adding it (because it's already present)
                hideSearchFragment();
            }
        }
        if (searchFragment == null) {
            searchFragment = new PreferenceSearchFragment();
        }
        searchFragment.setSearcher(searcher);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,ensureSearchRepresentsApplicationState,void ensureSearchRepresentsApplicationState(),"[262, 276]","{'A300': [(262, 263), (265, 276)], 'A295': [(264, 264)]}","{'A300': 0.9333333333333333, 'A295': 0.06666666666666667}",A300,,"    private void ensureSearchRepresentsApplicationState() {
        // Check if the update settings are available
        if (!ReleaseVersionUtil.INSTANCE.isReleaseApk()) {
            SettingsResourceRegistry.getInstance()
                    .getEntryByPreferencesResId(R.xml.update_settings)
                    .setSearchable(false);
        }

        // Hide debug preferences in RELEASE build variant
        if (DEBUG) {
            SettingsResourceRegistry.getInstance()
                    .getEntryByPreferencesResId(R.xml.debug_settings)
                    .setSearchable(true);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,setMenuSearchItem,void setMenuSearchItem(MenuItem),"[278, 286]","{'A300': [(278, 286)]}",{'A300': 1.0},A300,,"    public void setMenuSearchItem(final MenuItem menuSearchItem) {
        this.menuSearchItem = menuSearchItem;

        // Ensure that the item is in the correct state when adding it. This is due to
        // Android's lifecycle (the Activity is recreated before the Fragment that registers this)
        if (menuSearchItem != null) {
            menuSearchItem.setVisible(!isSearchActive());
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,setSearchActive,void setSearchActive(boolean),"[288, 324]","{'A300': [(288, 324)]}",{'A300': 1.0},A300,,"    public void setSearchActive(final boolean active) {
        if (DEBUG) {
            Log.d(TAG, ""setSearchActive called active="" + active);
        }

        // Ignore if search is already in correct state
        if (isSearchActive() == active) {
            return;
        }

        wasSearchActive = active;

        searchContainer.setVisibility(active ? View.VISIBLE : View.GONE);
        if (menuSearchItem != null) {
            menuSearchItem.setVisible(!active);
        }

        if (active) {
            getSupportFragmentManager()
                    .beginTransaction()
                    .add(FRAGMENT_HOLDER_ID, searchFragment, PreferenceSearchFragment.NAME)
                    .addToBackStack(PreferenceSearchFragment.NAME)
                    .commit();

            KeyboardUtil.showKeyboard(this, searchEditText);
        } else if (searchFragment != null) {
            hideSearchFragment();
            getSupportFragmentManager()
                    .popBackStack(
                        PreferenceSearchFragment.NAME,
                        FragmentManager.POP_BACK_STACK_INCLUSIVE);

            KeyboardUtil.hideKeyboard(this, searchEditText);
        }

        resetSearchText();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,hideSearchFragment,void hideSearchFragment(),"[326, 328]","{'A300': [(326, 328)]}",{'A300': 1.0},A300,,"    private void hideSearchFragment() {
        getSupportFragmentManager().beginTransaction().remove(searchFragment).commit();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,resetSearchText,void resetSearchText(),"[330, 332]","{'A300': [(330, 332)]}",{'A300': 1.0},A300,,"    private void resetSearchText() {
        searchEditText.setText("""");
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,isSearchActive,boolean isSearchActive(),"[334, 336]","{'A300': [(334, 336)]}",{'A300': 1.0},A300,,"    private boolean isSearchActive() {
        return searchContainer.getVisibility() == View.VISIBLE;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onSearchChanged,void onSearchChanged(),"[338, 347]","{'A300': [(338, 347)]}",{'A300': 1.0},A300,,"    private void onSearchChanged() {
        if (!isSearchActive()) {
            return;
        }

        if (searchFragment != null) {
            searchText = this.searchEditText.getText().toString();
            searchFragment.updateSearchResults(searchText);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsActivity.java,SettingsActivity,onSearchResultClicked,void onSearchResultClicked(PreferenceSearchItem),"[349, 385]","{'A300': [(349, 385)]}",{'A300': 1.0},A300,,"    @Override
    public void onSearchResultClicked(@NonNull final PreferenceSearchItem result) {
        if (DEBUG) {
            Log.d(TAG, ""onSearchResultClicked called result="" + result);
        }

        // Hide the search
        setSearchActive(false);

        // -- Highlight the result --
        // Find out which fragment class we need
        final Class<? extends Fragment> targetedFragmentClass =
                SettingsResourceRegistry.getInstance()
                        .getFragmentClass(result.getSearchIndexItemResId());

        if (targetedFragmentClass == null) {
            // This should never happen
            Log.w(TAG, ""Unable to locate fragment class for resId=""
                    + result.getSearchIndexItemResId());
            return;
        }

        // Check if the currentFragment is the one which contains the result
        Fragment currentFragment =
                getSupportFragmentManager().findFragmentById(FRAGMENT_HOLDER_ID);
        if (!targetedFragmentClass.equals(currentFragment.getClass())) {
            // If it's not the correct one display the correct one
            currentFragment = instantiateFragment(targetedFragmentClass.getName());
            showSettingsFragment(currentFragment);
        }

        // Run the highlighting
        if (currentFragment instanceof PreferenceFragmentCompat) {
            PreferenceSearchResultHighlighter
                    .highlight(result, (PreferenceFragmentCompat) currentFragment);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DebugSettingsFragment.java,DebugSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[20, 89]","{'A300': [(22, 22), (24, 37), (39, 39), (47, 62), (75, 75), (80, 80), (86, 86)], 'A305': [(38, 38), (40, 41), (43, 46), (63, 74), (76, 76), (78, 79), (81, 85)], 'A294': [(20, 20), (23, 23), (89, 89)], 'A307': [(42, 42), (77, 77), (87, 88)], 'A299': [(21, 21)]}","{'A300': 0.5, 'A305': 0.38571428571428573, 'A294': 0.04285714285714286, 'A307': 0.05714285714285714, 'A299': 0.014285714285714285}",A300,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        final Preference allowHeapDumpingPreference =
                findPreference(getString(R.string.allow_heap_dumping_key));
        final Preference showMemoryLeaksPreference =
                findPreference(getString(R.string.show_memory_leaks_key));
        final Preference showImageIndicatorsPreference =
                findPreference(getString(R.string.show_image_indicators_key));
        final Preference checkNewStreamsPreference =
                findPreference(getString(R.string.check_new_streams_key));
        final Preference crashTheAppPreference =
                findPreference(getString(R.string.crash_the_app_key));
        final Preference showErrorSnackbarPreference =
                findPreference(getString(R.string.show_error_snackbar_key));
        final Preference createErrorNotificationPreference =
                findPreference(getString(R.string.create_error_notification_key));

        assert allowHeapDumpingPreference != null;
        assert showMemoryLeaksPreference != null;
        assert showImageIndicatorsPreference != null;
        assert checkNewStreamsPreference != null;
        assert crashTheAppPreference != null;
        assert showErrorSnackbarPreference != null;
        assert createErrorNotificationPreference != null;

        final Optional<DebugSettingsBVDLeakCanaryAPI> optBVLeakCanary = getBVDLeakCanary();

        allowHeapDumpingPreference.setEnabled(optBVLeakCanary.isPresent());
        showMemoryLeaksPreference.setEnabled(optBVLeakCanary.isPresent());

        if (optBVLeakCanary.isPresent()) {
            final DebugSettingsBVDLeakCanaryAPI pdLeakCanary = optBVLeakCanary.get();

            showMemoryLeaksPreference.setOnPreferenceClickListener(preference -> {
                startActivity(pdLeakCanary.getNewLeakDisplayActivityIntent());
                return true;
            });
        } else {
            allowHeapDumpingPreference.setSummary(R.string.leak_canary_not_available);
            showMemoryLeaksPreference.setSummary(R.string.leak_canary_not_available);
        }

        showImageIndicatorsPreference.setOnPreferenceChangeListener((preference, newValue) -> {
            PicassoHelper.setIndicatorsEnabled((Boolean) newValue);
            return true;
        });

        checkNewStreamsPreference.setOnPreferenceClickListener(preference -> {
            NotificationWorker.runNow(preference.getContext());
            return true;
        });

        crashTheAppPreference.setOnPreferenceClickListener(preference -> {
            throw new RuntimeException(DUMMY);
        });

        showErrorSnackbarPreference.setOnPreferenceClickListener(preference -> {
            ErrorUtil.showUiErrorSnackbar(DebugSettingsFragment.this,
                    DUMMY, new RuntimeException(DUMMY));
            return true;
        });

        createErrorNotificationPreference.setOnPreferenceClickListener(preference -> {
            ErrorUtil.createNotification(requireContext(),
                    new ErrorInfo(new RuntimeException(DUMMY), UserAction.UI_ERROR, DUMMY));
            return true;
        });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DebugSettingsFragment.java,DebugSettingsFragment,getBVDLeakCanary,Optional<DebugSettingsBVDLeakCanaryAPI> getBVDLeakCanary(),"[95, 105]","{'A300': [(95, 105)]}",{'A300': 1.0},A300,,"    private Optional<DebugSettingsBVDLeakCanaryAPI> getBVDLeakCanary() {
        try {
            // Try to find the implementation of the LeakCanary API
            return Optional.of((DebugSettingsBVDLeakCanaryAPI)
                    Class.forName(DebugSettingsBVDLeakCanaryAPI.IMPL_CLASS)
                            .getDeclaredConstructor()
                            .newInstance());
        } catch (final Exception e) {
            return Optional.empty();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment,setOnSelectedListener,void setOnSelectedListener(OnSelectedListener),"[54, 56]","{'A302': [(56, 56)], 'A378': [(54, 55)]}","{'A302': 0.3333333333333333, 'A378': 0.6666666666666666}",A378,,"    public void setOnSelectedListener(final OnSelectedListener listener) {
        onSelectedListener = listener;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment,onCreate,void onCreate(Bundle),"[62, 66]","{'A305': [(62, 66)]}",{'A305': 1.0},A305,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStyle(STYLE_NO_TITLE, ThemeHelper.getMinWidthDialogTheme(requireContext()));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[68, 82]","{'A302': [(68, 68), (73, 75), (78, 82)], 'A305': [(72, 72), (77, 77)], 'A294': [(69, 71), (76, 76)]}","{'A302': 0.6, 'A305': 0.13333333333333333, 'A294': 0.26666666666666666}",A302,,"    @Override
    public View onCreateView(final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        final View v = inflater.inflate(R.layout.select_kiosk_fragment, container, false);
        final RecyclerView recyclerView = v.findViewById(R.id.items_list);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        try {
            selectKioskAdapter = new SelectKioskAdapter();
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(this, ""Selecting kiosk"", e);
        }
        recyclerView.setAdapter(selectKioskAdapter);

        return v;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment,clickedItem,void clickedItem(SelectKioskAdapter.Entry),"[88, 93]","{'A302': [(91, 93)], 'A294': [(88, 88)], 'A378': [(89, 90)]}","{'A302': 0.5, 'A294': 0.16666666666666666, 'A378': 0.3333333333333333}",A302,,"    private void clickedItem(final SelectKioskAdapter.Entry entry) {
        if (onSelectedListener != null) {
            onSelectedListener.onKioskSelected(entry.serviceId, entry.kioskId, entry.kioskName);
        }
        dismiss();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment.SelectKioskAdapter,getItemCount,int getItemCount(),"[119, 121]","{'A302': [(119, 119), (121, 121)], 'A301': [(120, 120)]}","{'A302': 0.6666666666666666, 'A301': 0.3333333333333333}",A302,,"        public int getItemCount() {
            return kioskList.size();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment.SelectKioskAdapter,onCreateViewHolder,"SelectKioskItemHolder onCreateViewHolder(ViewGroup,int)","[123, 128]","{'A302': [(126, 128)], 'A299': [(123, 123)], 'A294': [(124, 125)]}","{'A302': 0.5, 'A299': 0.16666666666666666, 'A294': 0.3333333333333333}",A302,,"        @NonNull
        public SelectKioskItemHolder onCreateViewHolder(final ViewGroup parent, final int type) {
            final View item = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.select_kiosk_item, parent, false);
            return new SelectKioskItemHolder(item);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectKioskFragment.java,SelectKioskFragment.SelectKioskAdapter,onBindViewHolder,"void onBindViewHolder(SelectKioskItemHolder,int)","[130, 136]","{'A302': [(131, 132), (136, 136)], 'A305': [(134, 135)], 'A294': [(130, 130), (133, 133)]}","{'A302': 0.42857142857142855, 'A305': 0.2857142857142857, 'A294': 0.2857142857142857}",A302,,"        public void onBindViewHolder(final SelectKioskItemHolder holder, final int position) {
            final Entry entry = kioskList.get(position);
            holder.titleView.setText(entry.kioskName);
            holder.thumbnailView
                    .setImageDrawable(AppCompatResources.getDrawable(requireContext(), entry.icon));
            holder.view.setOnClickListener(view -> clickedItem(entry));
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,add,"SettingRegistryEntry add(Class<? extends Fragment>,int)","[47, 55]","{'A300': [(47, 55)]}",{'A300': 1.0},A300,,"    private SettingRegistryEntry add(
            @NonNull final Class<? extends Fragment> fragmentClass,
            @XmlRes final int preferencesResId
    ) {
        final SettingRegistryEntry entry =
                new SettingRegistryEntry(fragmentClass, preferencesResId);
        this.registeredEntries.add(entry);
        return entry;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,getEntryByFragmentClass,SettingRegistryEntry getEntryByFragmentClass(Class<? extends Fragment>),"[57, 65]","{'A300': [(57, 65)]}",{'A300': 1.0},A300,,"    public SettingRegistryEntry getEntryByFragmentClass(
            final Class<? extends Fragment> fragmentClass
    ) {
        Objects.requireNonNull(fragmentClass);
        return registeredEntries.stream()
                .filter(e -> Objects.equals(e.getFragmentClass(), fragmentClass))
                .findFirst()
                .orElse(null);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,getEntryByPreferencesResId,SettingRegistryEntry getEntryByPreferencesResId(int),"[67, 72]","{'A300': [(67, 72)]}",{'A300': 1.0},A300,,"    public SettingRegistryEntry getEntryByPreferencesResId(@XmlRes final int preferencesResId) {
        return registeredEntries.stream()
                .filter(e -> Objects.equals(e.getPreferencesResId(), preferencesResId))
                .findFirst()
                .orElse(null);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,getPreferencesResId,int getPreferencesResId(Class<? extends Fragment>),"[74, 80]","{'A300': [(74, 80)]}",{'A300': 1.0},A300,,"    public int getPreferencesResId(@NonNull final Class<? extends Fragment> fragmentClass) {
        final SettingRegistryEntry entry = getEntryByFragmentClass(fragmentClass);
        if (entry == null) {
            return -1;
        }
        return entry.getPreferencesResId();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,getFragmentClass,Class<? extends Fragment> getFragmentClass(int),"[82, 88]","{'A300': [(82, 88)]}",{'A300': 1.0},A300,,"    public Class<? extends Fragment> getFragmentClass(@XmlRes final int preferencesResId) {
        final SettingRegistryEntry entry = getEntryByPreferencesResId(preferencesResId);
        if (entry == null) {
            return null;
        }
        return entry.getFragmentClass();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,getAllEntries,Set<SettingRegistryEntry> getAllEntries(),"[90, 92]","{'A300': [(90, 92)]}",{'A300': 1.0},A300,,"    public Set<SettingRegistryEntry> getAllEntries() {
        return new HashSet<>(registeredEntries);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry,getInstance,SettingsResourceRegistry getInstance(),"[94, 96]","{'A300': [(94, 96)]}",{'A300': 1.0},A300,,"    public static SettingsResourceRegistry getInstance() {
        return INSTANCE;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry.SettingRegistryEntry,setSearchable,SettingRegistryEntry setSearchable(boolean),"[115, 119]","{'A300': [(115, 119)]}",{'A300': 1.0},A300,,"        @SuppressWarnings(""HiddenField"")
        public SettingRegistryEntry setSearchable(final boolean searchable) {
            this.searchable = searchable;
            return this;
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry.SettingRegistryEntry,getFragmentClass,Class<? extends Fragment> getFragmentClass(),"[121, 124]","{'A300': [(122, 124)], 'A299': [(121, 121)]}","{'A300': 0.75, 'A299': 0.25}",A300,,"        @NonNull
        public Class<? extends Fragment> getFragmentClass() {
            return fragmentClass;
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry.SettingRegistryEntry,getPreferencesResId,int getPreferencesResId(),"[126, 128]","{'A300': [(126, 128)]}",{'A300': 1.0},A300,,"        public int getPreferencesResId() {
            return preferencesResId;
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry.SettingRegistryEntry,isSearchable,boolean isSearchable(),"[130, 132]","{'A300': [(130, 132)]}",{'A300': 1.0},A300,,"        public boolean isSearchable() {
            return searchable;
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry.SettingRegistryEntry,equals,boolean equals(Object),"[134, 145]","{'A300': [(134, 145)]}",{'A300': 1.0},A300,,"        @Override
        public boolean equals(final Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            final SettingRegistryEntry that = (SettingRegistryEntry) o;
            return getPreferencesResId() == that.getPreferencesResId()
                    && getFragmentClass().equals(that.getFragmentClass());
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingsResourceRegistry.java,SettingsResourceRegistry.SettingRegistryEntry,hashCode,int hashCode(),"[147, 150]","{'A300': [(147, 150)]}",{'A300': 1.0},A300,,"        @Override
        public int hashCode() {
            return Objects.hash(getFragmentClass(), getPreferencesResId());
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[50, 60]","{'A298': [(50, 60)]}",{'A298': 1.0},A298,,"        @Override
        public void migrate(@NonNull final Context context) {
            // We changed the content of the dialog which opens when sharing a link to NewPipe
            // by removing the ""open detail page"" option.
            // Therefore, show the dialog once again to ensure users need to choose again and are
            // aware of the changed dialog.
            final SharedPreferences.Editor editor = sp.edit();
            editor.putString(context.getString(R.string.preferred_open_action_key),
                    context.getString(R.string.always_ask_open_action_key));
            editor.apply();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[64, 79]","{'A298': [(64, 79)]}",{'A298': 1.0},A298,,"        @Override
        protected void migrate(@NonNull final Context context) {
            // The new application workflow introduced in #2907 allows minimizing videos
            // while playing to do other stuff within the app.
            // For an even better workflow, we minimize a stream when switching the app to play in
            // background.
            // Therefore, set default value to background, if it has not been changed yet.
            final String minimizeOnExitKey = context.getString(R.string.minimize_on_exit_key);
            if (sp.getString(minimizeOnExitKey, """")
                    .equals(context.getString(R.string.minimize_on_exit_none_key))) {
                final SharedPreferences.Editor editor = sp.edit();
                editor.putString(minimizeOnExitKey,
                        context.getString(R.string.minimize_on_exit_background_key));
                editor.apply();
            }
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[83, 95]","{'A298': [(84, 84)], 'A305': [(83, 83), (85, 88), (95, 95)], 'A373': [(90, 90)], 'A300': [(89, 89), (91, 94)]}","{'A298': 0.07692307692307693, 'A305': 0.46153846153846156, 'A373': 0.07692307692307693, 'A300': 0.38461538461538464}",A305,,"        @Override
        protected void migrate(@NonNull final Context context) {
            // Storage Access Framework implementation was improved in #5415, allowing the modern
            // and standard way to access folders and files to be used consistently everywhere.
            // We reset the setting to its default value, i.e. ""use SAF"", since now there are no
            // more issues with SAF and users should use that one instead of the old
            // NoNonsenseFilePicker. Also, there's a bug on FireOS in which SAF open/close
            // dialogs cannot be confirmed with a remote (see #6455).
            sp.edit().putBoolean(
                    context.getString(R.string.storage_use_saf),
                    !DeviceUtils.isFireTv()
            ).apply();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[99, 124]","{'A298': [(100, 100)], 'A305': [(99, 99), (101, 124)]}","{'A298': 0.038461538461538464, 'A305': 0.9615384615384616}",A305,,"        @Override
        protected void migrate(@NonNull final Context context) {
            // Pull request #3546 added support for choosing the type of search suggestions to
            // show, replacing the on-off switch used before, so migrate the previous user choice

            final String showSearchSuggestionsKey =
                    context.getString(R.string.show_search_suggestions_key);

            boolean addAllSearchSuggestionTypes;
            try {
                addAllSearchSuggestionTypes = sp.getBoolean(showSearchSuggestionsKey, true);
            } catch (final ClassCastException e) {
                // just in case it was not a boolean for some reason, let's consider it a ""true""
                addAllSearchSuggestionTypes = true;
            }

            final Set<String> showSearchSuggestionsValueList = new HashSet<>();
            if (addAllSearchSuggestionTypes) {
                // if the preference was true, all suggestions will be shown, otherwise none
                Collections.addAll(showSearchSuggestionsValueList, context.getResources()
                        .getStringArray(R.array.show_search_suggestions_value_list));
            }

            sp.edit().putStringSet(
                    showSearchSuggestionsKey, showSearchSuggestionsValueList).apply();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[128, 143]","{'A298': [(129, 129)], 'A305': [(130, 131), (133, 133), (135, 140)], 'A315': [(128, 128), (132, 132), (134, 134), (141, 143)]}","{'A298': 0.0625, 'A305': 0.5625, 'A315': 0.375}",A305,,"        @Override
        protected void migrate(@NonNull final Context context) {
            final boolean brightness = sp.getBoolean(""brightness_gesture_control"", true);
            final boolean volume = sp.getBoolean(""volume_gesture_control"", true);

            final SharedPreferences.Editor editor = sp.edit();

            editor.putString(context.getString(R.string.right_gesture_control_key),
                    context.getString(volume
                            ? R.string.volume_control_key : R.string.none_control_key));
            editor.putString(context.getString(R.string.left_gesture_control_key),
                    context.getString(brightness
                            ? R.string.brightness_control_key : R.string.none_control_key));

            editor.apply();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[147, 157]","{'A305': [(147, 157)]}",{'A305': 1.0},A305,,"        @Override
        protected void migrate(@NonNull final Context context) {
            final boolean loadImages = sp.getBoolean(""download_thumbnail_key"", true);

            sp.edit()
                    .putString(context.getString(R.string.image_quality_key),
                            context.getString(loadImages
                                    ? R.string.image_quality_default
                                    : R.string.image_quality_none_key))
                    .apply();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,migrate,void migrate(Context),"[161, 183]","{'A308': [(161, 183)]}",{'A308': 1.0},A308,,"        @Override
        protected void migrate(@NonNull final Context context) {
            // The SoundCloud Top 50 Kiosk was removed in the extractor,
            // so we remove the corresponding tab if it exists.
            final TabsManager tabsManager = TabsManager.getManager(context);
            final List<Tab> tabs = tabsManager.getTabs();
            final List<Tab> cleanedTabs = tabs.stream()
                    .filter(tab -> !(tab instanceof Tab.KioskTab kioskTab
                            && kioskTab.getKioskServiceId() == SoundCloud.getServiceId()
                            && kioskTab.getKioskId().equals(""Top 50"")))
                    .collect(Collectors.toUnmodifiableList());
            if (tabs.size() != cleanedTabs.size()) {
                tabsManager.saveTabs(cleanedTabs);
                // create an AlertDialog to inform the user about the change
                MIGRATION_INFO.add((Context uiContext) -> new AlertDialog.Builder(uiContext)
                        .setTitle(R.string.migration_info_6_7_title)
                        .setMessage(R.string.migration_info_6_7_message)
                        .setPositiveButton(R.string.ok, null)
                        .setCancelable(false)
                        .create()
                        .show());
            }
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,runMigrationsIfNeeded,void runMigrationsIfNeeded(Context),"[208, 250]","{'A298': [(209, 214), (216, 236), (239, 241), (244, 250)], 'A309': [(208, 208), (215, 215)], 'A305': [(237, 238), (242, 243)]}","{'A298': 0.8604651162790697, 'A309': 0.046511627906976744, 'A305': 0.09302325581395349}",A298,,"    public static void runMigrationsIfNeeded(@NonNull final Context context) {
        // setup migrations and check if there is something to do
        sp = PreferenceManager.getDefaultSharedPreferences(context);
        final String lastPrefVersionKey = context.getString(R.string.last_used_preferences_version);
        final int lastPrefVersion = sp.getInt(lastPrefVersionKey, 0);

        // no migration to run, already up to date
        if (App.getApp().isFirstRun()) {
            sp.edit().putInt(lastPrefVersionKey, VERSION).apply();
            return;
        } else if (lastPrefVersion == VERSION) {
            return;
        }

        // run migrations
        int currentVersion = lastPrefVersion;
        for (final Migration currentMigration : SETTING_MIGRATIONS) {
            try {
                if (currentMigration.shouldMigrate(currentVersion)) {
                    if (DEBUG) {
                        Log.d(TAG, ""Migrating preferences from version ""
                                + currentVersion + "" to "" + currentMigration.newVersion);
                    }
                    currentMigration.migrate(context);
                    currentVersion = currentMigration.newVersion;
                }
            } catch (final Exception e) {
                // save the version with the last successful migration and report the error
                sp.edit().putInt(lastPrefVersionKey, currentVersion).apply();
                ErrorUtil.openActivity(context, new ErrorInfo(
                        e,
                        UserAction.PREFERENCES_MIGRATION,
                        ""Migrating preferences from version "" + lastPrefVersion + "" to ""
                                + VERSION + "". ""
                                + ""Error at "" + currentVersion  + "" => "" + ++currentVersion
                ));
                return;
            }
        }

        // store the current preferences version
        sp.edit().putInt(lastPrefVersionKey, currentVersion).apply();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations,showUserInfoIfPresent,void showUserInfoIfPresent(Context),"[256, 265]","{'A308': [(256, 265)]}",{'A308': 1.0},A308,,"    public static void showUserInfoIfPresent(@NonNull final Context context) {
        for (final Consumer<Context> consumer : MIGRATION_INFO) {
            try {
                consumer.accept(context);
            } catch (final Exception e) {
                ErrorUtil.showUiErrorSnackbar(context, ""Showing migration info to the user"", e);
            }
        }
        MIGRATION_INFO.clear();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SettingMigrations.java,SettingMigrations.Migration,shouldMigrate,boolean shouldMigrate(int),"[284, 286]","{'A298': [(284, 286)]}",{'A298': 1.0},A298,,"        private boolean shouldMigrate(final int currentVersion) {
            return oldVersion >= currentVersion;
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[60, 125]","{'A298': [(60, 64), (66, 125)], 'A305': [(65, 65)]}","{'A298': 0.9848484848484849, 'A305': 0.015151515151515152}",A298,,"    @Override
    public void onCreatePreferences(@Nullable final Bundle savedInstanceState,
                                    @Nullable final String rootKey) {
        final File homeDir = ContextCompat.getDataDir(requireContext());
        Objects.requireNonNull(homeDir);
        manager = new ImportExportManager(new BackupFileLocator(homeDir));

        importExportDataPathKey = getString(R.string.import_export_data_path);


        addPreferencesFromResourceRegistry();

        final Preference importDataPreference = requirePreference(R.string.import_data);
        importDataPreference.setOnPreferenceClickListener((Preference p) -> {
            NoFileManagerSafeGuard.launchSafe(
                    requestImportPathLauncher,
                    StoredFileHelper.getPicker(requireContext(),
                            ZIP_MIME_TYPE, getImportExportDataUri()),
                    TAG,
                    getContext()
            );

            return true;
        });

        final Preference exportDataPreference = requirePreference(R.string.export_data);
        exportDataPreference.setOnPreferenceClickListener((final Preference p) -> {
            NoFileManagerSafeGuard.launchSafe(
                    requestExportPathLauncher,
                    StoredFileHelper.getNewPicker(requireContext(),
                            ""NewPipeData-"" + exportDateFormat.format(new Date()) + "".zip"",
                            ZIP_MIME_TYPE, getImportExportDataUri()),
                    TAG,
                    getContext()
            );

            return true;
        });

        final Preference resetSettings = findPreference(getString(R.string.reset_settings));
        // Resets all settings by deleting shared preference and restarting the app
        // A dialogue will pop up to confirm if user intends to reset all settings
        assert resetSettings != null;
        resetSettings.setOnPreferenceClickListener(preference -> {
            // Show Alert Dialogue
            final AlertDialog.Builder builder = new AlertDialog.Builder(getContext());
            builder.setMessage(R.string.reset_all_settings);
            builder.setCancelable(true);
            builder.setPositiveButton(R.string.ok, (dialogInterface, i) -> {
                // Deletes all shared preferences xml files.
                final SharedPreferences sharedPreferences =
                        PreferenceManager.getDefaultSharedPreferences(requireContext());
                sharedPreferences.edit().clear().apply();
                // Restarts the app
                if (getActivity() == null) {
                    return;
                }
                NavigationHelper.restartApp(getActivity());
            });
            builder.setNegativeButton(R.string.cancel, (dialogInterface, i) -> {
            });
            final AlertDialog alertDialog = builder.create();
            alertDialog.show();
            return true;
        });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,requestExportPathResult,void requestExportPathResult(ActivityResult),"[127, 137]","{'A298': [(127, 137)]}",{'A298': 1.0},A298,,"    private void requestExportPathResult(final ActivityResult result) {
        if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
            // will be saved only on success
            final Uri lastExportDataUri = result.getData().getData();

            final StoredFileHelper file = new StoredFileHelper(
                    requireContext(), result.getData().getData(), ZIP_MIME_TYPE);

            exportDatabase(file, lastExportDataUri);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,requestImportPathResult,void requestImportPathResult(ActivityResult),"[139, 155]","{'A298': [(139, 155)]}",{'A298': 1.0},A298,,"    private void requestImportPathResult(final ActivityResult result) {
        if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
            // will be saved only on success
            final Uri lastImportDataUri = result.getData().getData();

            final StoredFileHelper file = new StoredFileHelper(
                    requireContext(), result.getData().getData(), ZIP_MIME_TYPE);

            new androidx.appcompat.app.AlertDialog.Builder(requireActivity())
                    .setMessage(R.string.override_current_data)
                    .setPositiveButton(R.string.ok, (d, id) ->
                            importDatabase(file, lastImportDataUri))
                    .setNegativeButton(R.string.cancel, (d, id) ->
                            d.cancel())
                    .show();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,exportDatabase,"void exportDatabase(StoredFileHelper,Uri)","[157, 172]","{'A298': [(157, 169), (171, 172)], 'A305': [(170, 170)]}","{'A298': 0.9375, 'A305': 0.0625}",A298,,"    private void exportDatabase(final StoredFileHelper file, final Uri exportDataUri) {
        try {
            //checkpoint before export
            NewPipeDatabase.checkpoint();

            final SharedPreferences preferences = PreferenceManager
                    .getDefaultSharedPreferences(requireContext());
            manager.exportDatabase(preferences, file);

            saveLastImportExportDataUri(exportDataUri); // save export path only on success
            Toast.makeText(requireContext(), R.string.export_complete_toast, Toast.LENGTH_SHORT)
                    .show();
        } catch (final Exception e) {
            showErrorSnackbar(e, ""Exporting database and settings"");
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,importDatabase,"void importDatabase(StoredFileHelper,Uri)","[174, 231]","{'A298': [(174, 194), (197, 198), (202, 210), (221, 228), (230, 231)], 'A305': [(195, 196), (199, 201), (211, 220), (229, 229)]}","{'A298': 0.7241379310344828, 'A305': 0.27586206896551724}",A298,,"    private void importDatabase(final StoredFileHelper file, final Uri importDataUri) {
        // check if file is supported
        if (!ZipHelper.isValidZipFile(file)) {
            Toast.makeText(requireContext(), R.string.no_valid_zip_file, Toast.LENGTH_SHORT)
                    .show();
            return;
        }

        try {
            if (!manager.ensureDbDirectoryExists()) {
                throw new IOException(""Could not create databases dir"");
            }

            // replace the current database
            if (!manager.extractDb(file)) {
                Toast.makeText(requireContext(), R.string.could_not_import_all_files,
                                Toast.LENGTH_LONG)
                        .show();
            }

            // if settings file exist, ask if it should be imported.
            final boolean hasJsonPrefs = manager.exportHasJsonPrefs(file);
            if (hasJsonPrefs || manager.exportHasSerializedPrefs(file)) {
                new androidx.appcompat.app.AlertDialog.Builder(requireContext())
                        .setTitle(R.string.import_settings)
                        .setMessage(hasJsonPrefs ? null : requireContext()
                                .getString(R.string.import_settings_vulnerable_format))
                        .setOnDismissListener(dialog -> finishImport(importDataUri))
                        .setNegativeButton(R.string.cancel, (dialog, which) -> {
                            dialog.dismiss();
                            finishImport(importDataUri);
                        })
                        .setPositiveButton(R.string.ok, (dialog, which) -> {
                            dialog.dismiss();
                            final Context context = requireContext();
                            final SharedPreferences prefs = PreferenceManager
                                    .getDefaultSharedPreferences(context);
                            try {
                                if (hasJsonPrefs) {
                                    manager.loadJsonPrefs(file, prefs);
                                } else {
                                    manager.loadSerializedPrefs(file, prefs);
                                }
                            } catch (IOException | ClassNotFoundException | JsonParserException e) {
                                createErrorNotification(e, ""Importing preferences"");
                                return;
                            }
                            cleanImport(context, prefs);
                            finishImport(importDataUri);
                        })
                        .show();
            } else {
                finishImport(importDataUri);
            }
        } catch (final Exception e) {
            showErrorSnackbar(e, ""Importing database and settings"");
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,cleanImport,"void cleanImport(Context,SharedPreferences)","[239, 263]","{'A298': [(239, 263)]}",{'A298': 1.0},A298,,"    private void cleanImport(@NonNull final Context context,
                             @NonNull final SharedPreferences prefs) {
        // Check if media tunnelling needs to be disabled automatically,
        // if it was disabled automatically in the imported preferences.
        final String tunnelingKey = context.getString(R.string.disable_media_tunneling_key);
        final String automaticTunnelingKey =
                context.getString(R.string.disabled_media_tunneling_automatically_key);
        // R.string.disable_media_tunneling_key should always be true
        // if R.string.disabled_media_tunneling_automatically_key equals 1,
        // but we double check here just to be sure and to avoid regressions
        // caused by possible later modification of the media tunneling functionality.
        // R.string.disabled_media_tunneling_automatically_key == 0:
        //     automatic value overridden by user in settings
        // R.string.disabled_media_tunneling_automatically_key == -1: not set
        final boolean wasMediaTunnelingDisabledAutomatically =
                prefs.getInt(automaticTunnelingKey, -1) == 1
                        && prefs.getBoolean(tunnelingKey, false);
        if (wasMediaTunnelingDisabledAutomatically) {
            prefs.edit()
                    .putInt(automaticTunnelingKey, -1)
                    .putBoolean(tunnelingKey, false)
                    .apply();
            NewPipeSettings.setMediaTunneling(context);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,finishImport,void finishImport(Uri),"[270, 275]","{'A298': [(270, 275)]}",{'A298': 1.0},A298,,"    private void finishImport(final Uri importDataUri) {
        // save import path only on success
        saveLastImportExportDataUri(importDataUri);
        // restart app to properly load db
        NavigationHelper.restartApp(requireActivity());
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,getImportExportDataUri,Uri getImportExportDataUri(),"[277, 280]","{'A298': [(277, 280)]}",{'A298': 1.0},A298,,"    private Uri getImportExportDataUri() {
        final String path = defaultPreferences.getString(importExportDataPathKey, null);
        return isBlank(path) ? null : Uri.parse(path);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,saveLastImportExportDataUri,void saveLastImportExportDataUri(Uri),"[282, 286]","{'A298': [(282, 286)]}",{'A298': 1.0},A298,,"    private void saveLastImportExportDataUri(final Uri importExportDataUri) {
        final SharedPreferences.Editor editor = defaultPreferences.edit()
                .putString(importExportDataPathKey, importExportDataUri.toString());
        editor.apply();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,showErrorSnackbar,"void showErrorSnackbar(Throwable,String)","[288, 290]","{'A305': [(288, 290)]}",{'A305': 1.0},A305,,"    private void showErrorSnackbar(final Throwable e, final String request) {
        ErrorUtil.showSnackbar(this, new ErrorInfo(e, UserAction.DATABASE_IMPORT_EXPORT, request));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BackupRestoreSettingsFragment.java,BackupRestoreSettingsFragment,createErrorNotification,"void createErrorNotification(Throwable,String)","[292, 297]","{'A305': [(292, 297)]}",{'A305': 1.0},A305,,"    private void createErrorNotification(final Throwable e, final String request) {
        ErrorUtil.createNotification(
                requireContext(),
                new ErrorInfo(e, UserAction.DATABASE_IMPORT_EXPORT, request)
        );
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/ContentSettingsFragment.java,ContentSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[30, 38]","{'A305': [(32, 33)], 'A310': [(30, 30)], 'A299': [(31, 31), (35, 35)], 'A300': [(34, 34), (36, 38)]}","{'A305': 0.2222222222222222, 'A310': 0.1111111111111111, 'A299': 0.2222222222222222, 'A300': 0.4444444444444444}",A300,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        youtubeRestrictedModeEnabledKey = getString(R.string.youtube_restricted_mode_enabled);

        addPreferencesFromResourceRegistry();

        setupAppLanguagePreferences();
        setupImageQualityPref();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/ContentSettingsFragment.java,ContentSettingsFragment,setupAppLanguagePreferences,void setupAppLanguagePreferences(),"[40, 69]","{'A313': [(47, 48), (51, 58), (60, 61)], 'A295': [(44, 44), (49, 50)], 'A300': [(40, 43), (45, 46), (59, 59), (62, 69)]}","{'A313': 0.4, 'A295': 0.1, 'A300': 0.5}",A300,,"    private void setupAppLanguagePreferences() {
        final Preference appLanguagePref = requirePreference(R.string.app_language_key);
        // Android 13+ allows to set app specific languages
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            appLanguagePref.setVisible(false);

            final Preference newAppLanguagePref =
                    requirePreference(R.string.app_language_android_13_and_up_key);
            newAppLanguagePref.setSummaryProvider(preference -> {
                final Locale loc = AppCompatDelegate.getApplicationLocales().get(0);
                return loc != null ? loc.getDisplayName() : getString(R.string.systems_language);
            });
            newAppLanguagePref.setOnPreferenceClickListener(preference -> {
                final Intent intent = new Intent(Settings.ACTION_APP_LOCALE_SETTINGS)
                        .setData(Uri.fromParts(""package"", requireContext().getPackageName(), null));
                startActivity(intent);
                return true;
            });
            newAppLanguagePref.setVisible(true);
            return;
        }

        appLanguagePref.setOnPreferenceChangeListener((preference, newValue) -> {
            final String language = (String) newValue;
            final String systemLang = getString(R.string.default_localization_key);
            final String tag = systemLang.equals(language) ? null : language;
            AppCompatDelegate.setApplicationLocales(LocaleListCompat.forLanguageTags(tag));
            return true;
        });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/ContentSettingsFragment.java,ContentSettingsFragment,setupImageQualityPref,void setupImageQualityPref(),"[71, 86]","{'A295': [(72, 72)], 'A310': [(86, 86)], 'A300': [(71, 71), (73, 85)]}","{'A295': 0.0625, 'A310': 0.0625, 'A300': 0.875}",A300,,"    private void setupImageQualityPref() {
        requirePreference(R.string.image_quality_key).setOnPreferenceChangeListener(
            (preference, newValue) -> {
                ImageStrategy.setPreferredImageQuality(PreferredImageQuality
                    .fromPreferenceKey(requireContext(), (String) newValue));
                try {
                    PicassoHelper.clearCache(preference.getContext());
                    Toast.makeText(preference.getContext(),
                            R.string.thumbnail_cache_wipe_complete_notice, Toast.LENGTH_SHORT)
                        .show();
                } catch (final IOException e) {
                    Log.e(TAG, ""Unable to clear Picasso cache"", e);
                }
                return true;
            });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/ContentSettingsFragment.java,ContentSettingsFragment,onPreferenceTreeClick,boolean onPreferenceTreeClick(Preference),"[88, 100]","{'A330': [(90, 90), (92, 98)], 'A310': [(88, 88), (99, 100)], 'A294': [(89, 89), (91, 91)]}","{'A330': 0.6153846153846154, 'A310': 0.23076923076923078, 'A294': 0.15384615384615385}",A330,,"    @Override
    public boolean onPreferenceTreeClick(final Preference preference) {
        if (preference.getKey().equals(youtubeRestrictedModeEnabledKey)) {
            final Context context = getContext();
            if (context != null) {
                DownloaderImpl.getInstance().updateYoutubeRestrictedModeCookies(context);
            } else {
                Log.w(TAG, ""onPreferenceTreeClick: null context"");
            }
        }

        return super.onPreferenceTreeClick(preference);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/ContentSettingsFragment.java,ContentSettingsFragment,onDestroy,void onDestroy(),"[102, 110]","{'A301': [(102, 104)], 'A302': [(105, 105), (110, 110)], 'A300': [(106, 109)]}","{'A301': 0.3333333333333333, 'A302': 0.2222222222222222, 'A300': 0.4444444444444444}",A300,,"    @Override
    public void onDestroy() {
        super.onDestroy();

        final Context context = requireContext();
        NewPipe.setupLocalization(
            Localization.getPreferredLocalization(context),
            Localization.getPreferredContentCountry(context));
    }
"
org.schabi.newpipe.settings.export,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/export/PreferencesObjectInputStream.java,PreferencesObjectInputStream,resolveClass,Class<?> resolveClass(ObjectStreamClass),"[49, 57]","{'A305': [(49, 57)]}",{'A305': 1.0},A305,,"    @Override
    protected Class<?> resolveClass(final ObjectStreamClass desc)
            throws ClassNotFoundException, IOException {
        if (CLASS_WHITELIST.contains(desc.getName())) {
            return super.resolveClass(desc);
        } else {
            throw new ClassNotFoundException(""Class not allowed: "" + desc.getName());
        }
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,getManager,TabsManager getManager(Context),"[26, 28]","{'A294': [(26, 28)]}",{'A294': 1.0},A294,,"    public static TabsManager getManager(final Context context) {
        return new TabsManager(context);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,getTabs,List<Tab> getTabs(),"[30, 38]","{'A301': [(30, 33), (35, 38)], 'A294': [(34, 34)]}","{'A301': 0.8888888888888888, 'A294': 0.1111111111111111}",A301,,"    public List<Tab> getTabs() {
        final String savedJson = sharedPreferences.getString(savedTabsKey, null);
        try {
            return TabsJsonHelper.getTabsFromJson(savedJson);
        } catch (final TabsJsonHelper.InvalidJsonException e) {
            Toast.makeText(context, R.string.saved_tabs_invalid_json, Toast.LENGTH_SHORT).show();
            return getDefaultTabs();
        }
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,saveTabs,void saveTabs(List<Tab>),"[40, 43]","{'A301': [(41, 43)], 'A294': [(40, 40)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    public void saveTabs(final List<Tab> tabList) {
        final String jsonToSave = TabsJsonHelper.getJsonToSave(tabList);
        sharedPreferences.edit().putString(savedTabsKey, jsonToSave).apply();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,resetTabs,void resetTabs(),"[45, 47]","{'A301': [(45, 47)]}",{'A301': 1.0},A301,,"    public void resetTabs() {
        sharedPreferences.edit().remove(savedTabsKey).apply();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,getDefaultTabs,List<Tab> getDefaultTabs(),"[49, 51]","{'A301': [(49, 49), (51, 51)], 'A289': [(50, 50)]}","{'A301': 0.6666666666666666, 'A289': 0.3333333333333333}",A301,,"    public List<Tab> getDefaultTabs() {
        return TabsJsonHelper.getDefaultTabs();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,setSavedTabsListener,void setSavedTabsListener(SavedTabsChangeListener),"[57, 64]","{'A301': [(58, 64)], 'A294': [(57, 57)]}","{'A301': 0.875, 'A294': 0.125}",A301,,"    public void setSavedTabsListener(final SavedTabsChangeListener listener) {
        if (preferenceChangeListener != null) {
            sharedPreferences.unregisterOnSharedPreferenceChangeListener(preferenceChangeListener);
        }
        savedTabsChangeListener = listener;
        preferenceChangeListener = getPreferenceChangeListener();
        sharedPreferences.registerOnSharedPreferenceChangeListener(preferenceChangeListener);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,unsetSavedTabsListener,void unsetSavedTabsListener(),"[66, 72]","{'A301': [(66, 72)]}",{'A301': 1.0},A301,,"    public void unsetSavedTabsListener() {
        if (preferenceChangeListener != null) {
            sharedPreferences.unregisterOnSharedPreferenceChangeListener(preferenceChangeListener);
        }
        preferenceChangeListener = null;
        savedTabsChangeListener = null;
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsManager.java,TabsManager,getPreferenceChangeListener,SharedPreferences.OnSharedPreferenceChangeListener getPreferenceChangeListener(),"[74, 80]","{'A301': [(74, 74), (78, 80)], 'A294': [(75, 75)], 'A298': [(76, 77)]}","{'A301': 0.5714285714285714, 'A294': 0.14285714285714285, 'A298': 0.2857142857142857}",A301,,"    private SharedPreferences.OnSharedPreferenceChangeListener getPreferenceChangeListener() {
        return (sp, key) -> {
            if (savedTabsKey.equals(key) && savedTabsChangeListener != null) {
                savedTabsChangeListener.onTabsChanged();
            }
        };
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,from,Tab from(JsonObject),"[54, 63]","{'A301': [(54, 54), (56, 63)], 'A294': [(55, 55)]}","{'A301': 0.9, 'A294': 0.1}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    @Nullable
    public static Tab from(@NonNull final JsonObject jsonObject) {
        final int tabId = jsonObject.getInt(Tab.JSON_TAB_ID_KEY, -1);

        if (tabId == -1) {
            return null;
        }

        return from(tabId, jsonObject);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,from,Tab from(int),"[65, 68]","{'A301': [(65, 68)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    @Nullable
    public static Tab from(final int tabId) {
        return from(tabId, null);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,typeFrom,Type typeFrom(int),"[70, 78]","{'A301': [(70, 70), (73, 78)], 'A294': [(71, 72)]}","{'A301': 0.7777777777777778, 'A294': 0.2222222222222222}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    @Nullable
    public static Type typeFrom(final int tabId) {
        for (final Type available : Type.values()) {
            if (available.getTabId() == tabId) {
                return available;
            }
        }
        return null;
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,from,"Tab from(int,JsonObject)","[80, 102]","{'A301': [(80, 80), (82, 93), (98, 102)], 'A378': [(94, 95)], 'A294': [(81, 81)], 'A376': [(96, 97)]}","{'A301': 0.782608695652174, 'A378': 0.08695652173913043, 'A294': 0.043478260869565216, 'A376': 0.08695652173913043}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    @Nullable
    private static Tab from(final int tabId, @Nullable final JsonObject jsonObject) {
        final Type type = typeFrom(tabId);

        if (type == null) {
            return null;
        }

        if (jsonObject != null) {
            switch (type) {
                case KIOSK:
                    return new KioskTab(jsonObject);
                case CHANNEL:
                    return new ChannelTab(jsonObject);
                case PLAYLIST:
                    return new PlaylistTab(jsonObject);
                case FEEDGROUP:
                    return new FeedGroupTab(jsonObject);
            }
        }

        return type.getTab();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,equals,boolean equals(Object),"[119, 126]","{'A294': [(119, 120), (123, 123), (126, 126)], 'A380': [(121, 122), (124, 125)]}","{'A294': 0.5, 'A380': 0.5}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    @Override
    public boolean equals(final Object obj) {
        if (!(obj instanceof Tab)) {
            return false;
        }
        final Tab other = (Tab) obj;
        return getTabId() == other.getTabId();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,hashCode,int hashCode(),"[128, 131]","{'A380': [(128, 131)]}",{'A380': 1.0},A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    @Override
    public int hashCode() {
        return Objects.hashCode(getTabId());
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,writeJsonOn,void writeJsonOn(JsonStringWriter),"[137, 144]","{'A305': [(137, 137)], 'A294': [(138, 144)]}","{'A305': 0.125, 'A294': 0.875}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    public void writeJsonOn(final JsonStringWriter jsonSink) {
        jsonSink.object();

        jsonSink.value(JSON_TAB_ID_KEY, getTabId());
        writeDataToJson(jsonSink);

        jsonSink.end();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,writeDataToJson,void writeDataToJson(JsonStringWriter),"[146, 148]","{'A305': [(146, 146)], 'A294': [(147, 148)]}","{'A305': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    protected void writeDataToJson(final JsonStringWriter writerSink) {
        // No-op
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab,readDataFromJson,void readDataFromJson(JsonObject),"[150, 152]","{'A294': [(150, 152)]}",{'A294': 1.0},A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"    protected void readDataFromJson(final JsonObject jsonObject) {
        // No-op
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.Type,getTabId,int getTabId(),"[176, 178]","{'A301': [(176, 178)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public int getTabId() {
            return tab.getTabId();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.Type,getTab,Tab getTab(),"[180, 182]","{'A301': [(180, 182)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public Tab getTab() {
            return tab;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BlankTab,getTabId,int getTabId(),"[188, 191]","{'A301': [(188, 191)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BlankTab,getTabName,String getTabName(Context),"[193, 198]","{'A301': [(193, 193), (198, 198)], 'A298': [(195, 197)], 'A294': [(194, 194)]}","{'A301': 0.3333333333333333, 'A298': 0.5, 'A294': 0.16666666666666666}",A298,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            // TODO: find a better name for the blank tab (maybe ""blank_tab"") or replace it with
            //       context.getString(R.string.app_name);
            return ""NewPipe""; // context.getString(R.string.blank_page_summary);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BlankTab,getTabIconRes,int getTabIconRes(Context),"[200, 204]","{'A301': [(200, 201), (204, 204)], 'A294': [(202, 202)], 'A312': [(203, 203)]}","{'A301': 0.6, 'A294': 0.2, 'A312': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_crop_portrait;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BlankTab,getFragment,BlankFragment getFragment(Context),"[206, 209]","{'A301': [(206, 206), (208, 209)], 'A294': [(207, 207)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public BlankFragment getFragment(final Context context) {
            return new BlankFragment();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.SubscriptionsTab,getTabId,int getTabId(),"[215, 218]","{'A301': [(215, 218)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.SubscriptionsTab,getTabName,String getTabName(Context),"[220, 223]","{'A301': [(220, 220), (222, 223)], 'A294': [(221, 221)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return context.getString(R.string.tab_subscriptions);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.SubscriptionsTab,getTabIconRes,int getTabIconRes(Context),"[225, 229]","{'A301': [(225, 226), (229, 229)], 'A294': [(227, 227)], 'A312': [(228, 228)]}","{'A301': 0.6, 'A294': 0.2, 'A312': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_tv;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.SubscriptionsTab,getFragment,SubscriptionFragment getFragment(Context),"[231, 234]","{'A301': [(231, 231), (233, 234)], 'A294': [(232, 232)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public SubscriptionFragment getFragment(final Context context) {
            return new SubscriptionFragment();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedTab,getTabId,int getTabId(),"[241, 244]","{'A301': [(241, 244)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedTab,getTabName,String getTabName(Context),"[246, 249]","{'A301': [(246, 246), (248, 249)], 'A294': [(247, 247)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return context.getString(R.string.fragment_feed_title);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedTab,getTabIconRes,int getTabIconRes(Context),"[251, 255]","{'A301': [(251, 252), (255, 255)], 'A294': [(253, 253)], 'A315': [(254, 254)]}","{'A301': 0.6, 'A294': 0.2, 'A315': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_subscriptions;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedTab,getFragment,FeedFragment getFragment(Context),"[257, 260]","{'A301': [(257, 257), (259, 260)], 'A294': [(258, 258)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public FeedFragment getFragment(final Context context) {
            return new FeedFragment();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BookmarksTab,getTabId,int getTabId(),"[266, 269]","{'A301': [(266, 269)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BookmarksTab,getTabName,String getTabName(Context),"[271, 274]","{'A301': [(271, 271), (273, 274)], 'A294': [(272, 272)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return context.getString(R.string.tab_bookmarks);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BookmarksTab,getTabIconRes,int getTabIconRes(Context),"[276, 280]","{'A301': [(276, 277), (280, 280)], 'A294': [(278, 278)], 'A312': [(279, 279)]}","{'A301': 0.6, 'A294': 0.2, 'A312': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_bookmark;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.BookmarksTab,getFragment,BookmarkFragment getFragment(Context),"[282, 285]","{'A301': [(282, 282), (284, 285)], 'A294': [(283, 283)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public BookmarkFragment getFragment(final Context context) {
            return new BookmarkFragment();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.HistoryTab,getTabId,int getTabId(),"[291, 294]","{'A301': [(291, 294)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.HistoryTab,getTabName,String getTabName(Context),"[296, 299]","{'A301': [(296, 296), (298, 299)], 'A294': [(297, 297)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return context.getString(R.string.title_activity_history);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.HistoryTab,getTabIconRes,int getTabIconRes(Context),"[301, 305]","{'A301': [(301, 302), (305, 305)], 'A294': [(303, 303)], 'A312': [(304, 304)]}","{'A301': 0.6, 'A294': 0.2, 'A312': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_history;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.HistoryTab,getFragment,StatisticsPlaylistFragment getFragment(Context),"[307, 310]","{'A301': [(307, 307), (309, 310)], 'A294': [(308, 308)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public StatisticsPlaylistFragment getFragment(final Context context) {
            return new StatisticsPlaylistFragment();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,getTabId,int getTabId(),"[333, 336]","{'A301': [(333, 336)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,getTabName,String getTabName(Context),"[338, 341]","{'A301': [(338, 338), (340, 341)], 'A294': [(339, 339)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return KioskTranslator.getTranslatedKioskName(kioskId, context);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,getTabIconRes,int getTabIconRes(Context),"[343, 353]","{'A301': [(343, 344), (347, 353)], 'A294': [(345, 345)], 'A299': [(346, 346)]}","{'A301': 0.8181818181818182, 'A294': 0.09090909090909091, 'A299': 0.09090909090909091}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            final int kioskIcon = KioskTranslator.getKioskIcon(kioskId);

            if (kioskIcon <= 0) {
                throw new IllegalStateException(""Kiosk ID is not valid: \"""" + kioskId + ""\"""");
            }

            return kioskIcon;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,getFragment,KioskFragment getFragment(Context),"[355, 358]","{'A301': [(355, 355), (357, 358)], 'A294': [(356, 356)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public KioskFragment getFragment(final Context context) throws ExtractionException {
            return KioskFragment.getInstance(kioskServiceId, kioskId);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,writeDataToJson,void writeDataToJson(JsonStringWriter),"[360, 364]","{'A301': [(360, 360), (362, 364)], 'A305': [(361, 361)]}","{'A301': 0.8, 'A305': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void writeDataToJson(final JsonStringWriter writerSink) {
            writerSink.value(JSON_KIOSK_SERVICE_ID_KEY, kioskServiceId)
                    .value(JSON_KIOSK_ID_KEY, kioskId);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,readDataFromJson,void readDataFromJson(JsonObject),"[366, 370]","{'A301': [(366, 366), (368, 368), (370, 370)], 'A298': [(369, 369)], 'A294': [(367, 367)]}","{'A301': 0.6, 'A298': 0.2, 'A294': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void readDataFromJson(final JsonObject jsonObject) {
            kioskServiceId = jsonObject.getInt(JSON_KIOSK_SERVICE_ID_KEY, -1);
            kioskId = jsonObject.getString(JSON_KIOSK_ID_KEY, NO_ID);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,equals,boolean equals(Object),"[372, 381]","{'A301': [(372, 372), (381, 381)], 'A294': [(373, 373)], 'A380': [(374, 380)]}","{'A301': 0.2, 'A294': 0.1, 'A380': 0.7}",A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public boolean equals(final Object obj) {
            if (!(obj instanceof KioskTab)) {
                return false;
            }
            final KioskTab other = (KioskTab) obj;
            return super.equals(obj)
                    && kioskServiceId == other.kioskServiceId
                    && kioskId.equals(other.kioskId);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,hashCode,int hashCode(),"[383, 386]","{'A380': [(383, 386)]}",{'A380': 1.0},A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int hashCode() {
            return Objects.hash(getTabId(), kioskServiceId, kioskId);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,getKioskServiceId,int getKioskServiceId(),"[388, 390]","{'A301': [(388, 390)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public int getKioskServiceId() {
            return kioskServiceId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.KioskTab,getKioskId,String getKioskId(),"[392, 394]","{'A301': [(392, 394)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public String getKioskId() {
            return kioskId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getTabId,int getTabId(),"[421, 424]","{'A301': [(421, 424)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getTabName,String getTabName(Context),"[426, 429]","{'A301': [(426, 426), (428, 429)], 'A294': [(427, 427)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return channelName;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getTabIconRes,int getTabIconRes(Context),"[431, 435]","{'A301': [(431, 432), (435, 435)], 'A294': [(433, 433)], 'A312': [(434, 434)]}","{'A301': 0.6, 'A294': 0.2, 'A312': 0.2}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_tv;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getFragment,ChannelFragment getFragment(Context),"[437, 440]","{'A301': [(437, 437), (439, 440)], 'A294': [(438, 438)]}","{'A301': 0.75, 'A294': 0.25}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public ChannelFragment getFragment(final Context context) {
            return ChannelFragment.getInstance(channelServiceId, channelUrl, channelName);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,writeDataToJson,void writeDataToJson(JsonStringWriter),"[442, 447]","{'A301': [(442, 442), (444, 447)], 'A305': [(443, 443)]}","{'A301': 0.8333333333333334, 'A305': 0.16666666666666666}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void writeDataToJson(final JsonStringWriter writerSink) {
            writerSink.value(JSON_CHANNEL_SERVICE_ID_KEY, channelServiceId)
                    .value(JSON_CHANNEL_URL_KEY, channelUrl)
                    .value(JSON_CHANNEL_NAME_KEY, channelName);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,readDataFromJson,void readDataFromJson(JsonObject),"[449, 454]","{'A301': [(449, 449), (451, 451), (454, 454)], 'A298': [(452, 453)], 'A294': [(450, 450)]}","{'A301': 0.5, 'A298': 0.3333333333333333, 'A294': 0.16666666666666666}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void readDataFromJson(final JsonObject jsonObject) {
            channelServiceId = jsonObject.getInt(JSON_CHANNEL_SERVICE_ID_KEY, -1);
            channelUrl = jsonObject.getString(JSON_CHANNEL_URL_KEY, NO_URL);
            channelName = jsonObject.getString(JSON_CHANNEL_NAME_KEY, NO_NAME);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,equals,boolean equals(Object),"[456, 466]","{'A301': [(456, 456), (466, 466)], 'A294': [(457, 457)], 'A376': [(464, 464)], 'A380': [(458, 463), (465, 465)]}","{'A301': 0.18181818181818182, 'A294': 0.09090909090909091, 'A376': 0.09090909090909091, 'A380': 0.6363636363636364}",A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public boolean equals(final Object obj) {
            if (!(obj instanceof ChannelTab)) {
                return false;
            }
            final ChannelTab other = (ChannelTab) obj;
            return super.equals(obj)
                    && channelServiceId == other.channelServiceId
                    && channelUrl.equals(other.channelUrl)
                    && channelName.equals(other.channelName);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,hashCode,int hashCode(),"[468, 471]","{'A380': [(468, 471)]}",{'A380': 1.0},A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int hashCode() {
            return Objects.hash(getTabId(), channelServiceId, channelUrl, channelName);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getChannelServiceId,int getChannelServiceId(),"[473, 475]","{'A301': [(473, 475)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public int getChannelServiceId() {
            return channelServiceId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getChannelUrl,String getChannelUrl(),"[477, 479]","{'A301': [(477, 479)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public String getChannelUrl() {
            return channelUrl;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.ChannelTab,getChannelName,String getChannelName(),"[481, 483]","{'A301': [(481, 483)]}",{'A301': 1.0},A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public String getChannelName() {
            return channelName;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.DefaultKioskTab,getTabId,int getTabId(),"[489, 492]","{'A289': [(489, 492)]}",{'A289': 1.0},A289,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.DefaultKioskTab,getTabName,String getTabName(Context),"[494, 497]","{'A301': [(496, 496)], 'A289': [(494, 494), (497, 497)], 'A294': [(495, 495)]}","{'A301': 0.25, 'A289': 0.5, 'A294': 0.25}",A289,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return KioskTranslator.getTranslatedKioskName(getDefaultKioskId(context), context);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.DefaultKioskTab,getTabIconRes,int getTabIconRes(Context),"[499, 503]","{'A289': [(499, 500), (503, 503)], 'A294': [(501, 501)], 'A299': [(502, 502)]}","{'A289': 0.6, 'A294': 0.2, 'A299': 0.2}",A289,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return KioskTranslator.getKioskIcon(getDefaultKioskId(context));
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.DefaultKioskTab,getFragment,DefaultKioskFragment getFragment(Context),"[505, 508]","{'A301': [(507, 507)], 'A289': [(505, 505), (508, 508)], 'A294': [(506, 506)]}","{'A301': 0.25, 'A289': 0.5, 'A294': 0.25}",A289,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public DefaultKioskFragment getFragment(final Context context) {
            return new DefaultKioskFragment();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.DefaultKioskTab,getDefaultKioskId,String getDefaultKioskId(Context),"[510, 522]","{'A301': [(511, 516), (520, 520)], 'A305': [(518, 519)], 'A289': [(521, 522)], 'A294': [(510, 510), (517, 517)]}","{'A301': 0.5384615384615384, 'A305': 0.15384615384615385, 'A289': 0.15384615384615385, 'A294': 0.15384615384615385}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        private String getDefaultKioskId(final Context context) {
            final int kioskServiceId = ServiceHelper.getSelectedServiceId(context);

            String kioskId = """";
            try {
                final StreamingService service = NewPipe.getService(kioskServiceId);
                kioskId = service.getKioskList().getDefaultKioskId();
            } catch (final ExtractionException e) {
                ErrorUtil.showSnackbar(context, new ErrorInfo(e,
                        UserAction.REQUESTED_KIOSK, ""Loading default kiosk for selected service""));
            }
            return kioskId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getTabId,int getTabId(),"[563, 566]","{'A378': [(563, 566)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getTabName,String getTabName(Context),"[568, 571]","{'A378': [(568, 571)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return playlistName;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getTabIconRes,int getTabIconRes(Context),"[573, 577]","{'A378': [(573, 575), (577, 577)], 'A312': [(576, 576)]}","{'A378': 0.8, 'A312': 0.2}",A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return R.drawable.ic_bookmark;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getFragment,Fragment getFragment(Context),"[579, 587]","{'A378': [(579, 587)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public Fragment getFragment(final Context context) {
            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {
                return LocalPlaylistFragment.getInstance(playlistId, playlistName);

            } else { // playlistType == LocalItemType.PLAYLIST_REMOTE_ITEM
                return PlaylistFragment.getInstance(playlistServiceId, playlistUrl, playlistName);
            }
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,writeDataToJson,void writeDataToJson(JsonStringWriter),"[589, 596]","{'A305': [(590, 590)], 'A378': [(589, 589), (591, 596)]}","{'A305': 0.125, 'A378': 0.875}",A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void writeDataToJson(final JsonStringWriter writerSink) {
            writerSink.value(JSON_PLAYLIST_SERVICE_ID_KEY, playlistServiceId)
                    .value(JSON_PLAYLIST_URL_KEY, playlistUrl)
                    .value(JSON_PLAYLIST_NAME_KEY, playlistName)
                    .value(JSON_PLAYLIST_ID_KEY, playlistId)
                    .value(JSON_PLAYLIST_TYPE_KEY, playlistType.toString());
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,readDataFromJson,void readDataFromJson(JsonObject),"[598, 608]","{'A378': [(598, 600), (603, 608)], 'A298': [(601, 602)]}","{'A378': 0.8181818181818182, 'A298': 0.18181818181818182}",A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void readDataFromJson(final JsonObject jsonObject) {
            playlistServiceId = jsonObject.getInt(JSON_PLAYLIST_SERVICE_ID_KEY, -1);
            playlistUrl = jsonObject.getString(JSON_PLAYLIST_URL_KEY, NO_URL);
            playlistName = jsonObject.getString(JSON_PLAYLIST_NAME_KEY, NO_NAME);
            playlistId = jsonObject.getInt(JSON_PLAYLIST_ID_KEY, -1);
            playlistType = LocalItemType.valueOf(
                    jsonObject.getString(JSON_PLAYLIST_TYPE_KEY,
                            LocalItemType.PLAYLIST_LOCAL_ITEM.toString())
            );
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,equals,boolean equals(Object),"[610, 624]","{'A305': [(618, 619)], 'A378': [(610, 611), (624, 624)], 'A380': [(612, 617), (620, 623)]}","{'A305': 0.13333333333333333, 'A378': 0.2, 'A380': 0.6666666666666666}",A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public boolean equals(final Object obj) {
            if (!(obj instanceof PlaylistTab)) {
                return false;
            }

            final PlaylistTab other = (PlaylistTab) obj;

            return super.equals(obj)
                    && playlistServiceId == other.playlistServiceId // Remote
                    && playlistId == other.playlistId // Local
                    && playlistUrl.equals(other.playlistUrl)
                    && playlistName.equals(other.playlistName)
                    && playlistType == other.playlistType;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,hashCode,int hashCode(),"[626, 636]","{'A380': [(626, 636)]}",{'A380': 1.0},A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int hashCode() {
            return Objects.hash(
                    getTabId(),
                    playlistServiceId,
                    playlistId,
                    playlistUrl,
                    playlistName,
                    playlistType
            );
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getPlaylistServiceId,int getPlaylistServiceId(),"[638, 640]","{'A378': [(638, 640)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public int getPlaylistServiceId() {
            return playlistServiceId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getPlaylistUrl,String getPlaylistUrl(),"[642, 644]","{'A378': [(642, 644)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public String getPlaylistUrl() {
            return playlistUrl;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getPlaylistName,String getPlaylistName(),"[646, 648]","{'A378': [(646, 648)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public String getPlaylistName() {
            return playlistName;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getPlaylistId,long getPlaylistId(),"[650, 652]","{'A378': [(650, 652)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public long getPlaylistId() {
            return playlistId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.PlaylistTab,getPlaylistType,LocalItemType getPlaylistType(),"[654, 656]","{'A378': [(654, 656)]}",{'A378': 1.0},A378,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public LocalItemType getPlaylistType() {
            return playlistType;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getTabId,int getTabId(),"[683, 686]","{'A376': [(683, 686)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int getTabId() {
            return ID;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getTabName,String getTabName(Context),"[688, 691]","{'A376': [(688, 691)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public String getTabName(final Context context) {
            return context.getString(R.string.fragment_feed_title);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getTabIconRes,int getTabIconRes(Context),"[693, 697]","{'A376': [(693, 697)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @DrawableRes
        @Override
        public int getTabIconRes(final Context context) {
            return this.iconId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getFragment,FeedFragment getFragment(Context),"[699, 702]","{'A376': [(699, 702)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public FeedFragment getFragment(final Context context) {
            return FeedFragment.newInstance(feedGroupId, feedGroupName);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,writeDataToJson,void writeDataToJson(JsonStringWriter),"[704, 709]","{'A376': [(704, 709)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void writeDataToJson(final JsonStringWriter writerSink) {
            writerSink.value(JSON_FEED_GROUP_ID_KEY, feedGroupId)
                    .value(JSON_FEED_GROUP_NAME_KEY, feedGroupName)
                    .value(JSON_FEED_GROUP_ICON_KEY, iconId);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,readDataFromJson,void readDataFromJson(JsonObject),"[711, 716]","{'A376': [(711, 716)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        protected void readDataFromJson(final JsonObject jsonObject) {
            feedGroupId = jsonObject.getLong(JSON_FEED_GROUP_ID_KEY, -1);
            feedGroupName = jsonObject.getString(JSON_FEED_GROUP_NAME_KEY, NO_NAME);
            iconId = jsonObject.getInt(JSON_FEED_GROUP_ICON_KEY, R.drawable.ic_asterisk);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,equals,boolean equals(Object),"[718, 728]","{'A376': [(718, 728)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public boolean equals(final Object obj) {
            if (!(obj instanceof FeedGroupTab)) {
                return false;
            }
            final FeedGroupTab other = (FeedGroupTab) obj;
            return super.equals(obj)
                    && feedGroupId.equals(other.feedGroupId)
                    && feedGroupName.equals(other.feedGroupName)
                    && iconId == other.iconId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,hashCode,int hashCode(),"[730, 733]","{'A376': [(730, 733)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        @Override
        public int hashCode() {
            return Objects.hash(getTabId(), feedGroupId, feedGroupName, iconId);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getFeedGroupId,Long getFeedGroupId(),"[735, 737]","{'A376': [(735, 737)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public Long getFeedGroupId() {
            return feedGroupId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getFeedGroupName,String getFeedGroupName(),"[739, 741]","{'A376': [(739, 741)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public String getFeedGroupName() {
            return feedGroupName;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java,Tab.FeedGroupTab,getIconId,int getIconId(),"[743, 745]","{'A376': [(743, 745)]}",{'A376': 1.0},A376,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabTest.java,"        public int getIconId() {
            return iconId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/AddTabDialog.java,AddTabDialog,show,void show(),"[30, 32]","{'A301': [(30, 32)]}",{'A301': 1.0},A301,,"    public void show() {
        dialog.show();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/AddTabDialog.java,AddTabDialog.DialogListAdapter,getCount,int getCount(),"[65, 68]","{'A301': [(65, 68)]}",{'A301': 1.0},A301,,"        @Override
        public int getCount() {
            return items.length;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/AddTabDialog.java,AddTabDialog.DialogListAdapter,getItem,ChooseTabListItem getItem(int),"[70, 73]","{'A301': [(70, 70), (72, 73)], 'A294': [(71, 71)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"        @Override
        public ChooseTabListItem getItem(final int position) {
            return items[position];
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/AddTabDialog.java,AddTabDialog.DialogListAdapter,getItemId,long getItemId(int),"[75, 78]","{'A301': [(75, 75), (77, 78)], 'A294': [(76, 76)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"        @Override
        public long getItemId(final int position) {
            return getItem(position).tabId;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/AddTabDialog.java,AddTabDialog.DialogListAdapter,getView,"View getView(int,View,ViewGroup)","[80, 95]","{'A301': [(80, 80), (83, 95)], 'A294': [(81, 82)]}","{'A301': 0.875, 'A294': 0.125}",A301,,"        @Override
        public View getView(final int position, final View view, final ViewGroup parent) {
            View convertView = view;
            if (convertView == null) {
                convertView = inflater.inflate(R.layout.list_choose_tabs_dialog, parent, false);
            }

            final ChooseTabListItem item = getItem(position);
            final AppCompatImageView tabIconView = convertView.findViewById(R.id.tabIcon);
            final TextView tabNameView = convertView.findViewById(R.id.tabName);

            tabIconView.setImageResource(item.itemIcon > 0 ? item.itemIcon : fallbackIcon);
            tabNameView.setText(item.itemName);

            return convertView;
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onCreate,void onCreate(Bundle),"[55, 63]","{'A301': [(55, 55), (57, 63)], 'A294': [(56, 56)]}","{'A301': 0.8888888888888888, 'A294': 0.1111111111111111}",A301,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        tabsManager = TabsManager.getManager(requireContext());
        updateTabList();

        setHasOptionsMenu(true);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[65, 69]","{'A301': [(65, 65), (68, 69)], 'A294': [(66, 67)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_choose_tabs, container, false);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onViewCreated,"void onViewCreated(View,Bundle)","[71, 86]","{'A301': [(71, 71), (74, 77), (79, 80), (82, 86)], 'A294': [(72, 73)], 'A378': [(78, 78), (81, 81)]}","{'A301': 0.75, 'A294': 0.125, 'A378': 0.125}",A301,,"    @Override
    public void onViewCreated(@NonNull final View rootView,
                              @Nullable final Bundle savedInstanceState) {
        super.onViewCreated(rootView, savedInstanceState);

        initButton(rootView);

        final RecyclerView listSelectedTabs = rootView.findViewById(R.id.selectedTabs);
        listSelectedTabs.setLayoutManager(new LinearLayoutManager(requireContext()));

        final ItemTouchHelper itemTouchHelper = new ItemTouchHelper(getItemTouchCallback());
        itemTouchHelper.attachToRecyclerView(listSelectedTabs);

        selectedTabsAdapter = new SelectedTabsAdapter(requireContext(), itemTouchHelper);
        listSelectedTabs.setAdapter(selectedTabsAdapter);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onResume,void onResume(),"[88, 93]","{'A301': [(88, 90), (93, 93)], 'A305': [(91, 92)]}","{'A301': 0.6666666666666666, 'A305': 0.3333333333333333}",A301,,"    @Override
    public void onResume() {
        super.onResume();
        ThemeHelper.setTitleToAppCompatActivity(getActivity(),
                getString(R.string.main_page_content));
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onPause,void onPause(),"[95, 99]","{'A301': [(95, 99)]}",{'A301': 1.0},A301,,"    @Override
    public void onPause() {
        super.onPause();
        saveChanges();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[105, 114]","{'A301': [(105, 105), (108, 112), (114, 114)], 'A300': [(113, 113)], 'A299': [(106, 107)]}","{'A301': 0.7, 'A300': 0.1, 'A299': 0.2}",A301,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.menu_chooser_fragment, menu);
        menu.findItem(R.id.menu_item_restore_default).setOnMenuItemClickListener(item -> {
            restoreDefaults();
            return true;
        });
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,updateTabList,void updateTabList(),"[120, 123]","{'A301': [(120, 123)]}",{'A301': 1.0},A301,,"    private void updateTabList() {
        tabList.clear();
        tabList.addAll(tabsManager.getTabs());
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,saveChanges,void saveChanges(),"[125, 127]","{'A301': [(125, 127)]}",{'A301': 1.0},A301,,"    private void saveChanges() {
        tabsManager.saveTabs(tabList);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,restoreDefaults,void restoreDefaults(),"[129, 140]","{'A301': [(129, 129), (131, 133), (135, 140)], 'A305': [(134, 134)], 'A312': [(130, 130)]}","{'A301': 0.8333333333333334, 'A305': 0.08333333333333333, 'A312': 0.08333333333333333}",A301,,"    private void restoreDefaults() {
        new AlertDialog.Builder(requireContext())
                .setTitle(R.string.restore_defaults)
                .setMessage(R.string.restore_defaults_confirmation)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.ok, (dialog, which) -> {
                    tabsManager.resetTabs();
                    updateTabList();
                    selectedTabsAdapter.notifyDataSetChanged();
                })
                .show();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,initButton,void initButton(View),"[142, 160]","{'A301': [(143, 151), (153, 160)], 'A294': [(142, 142), (152, 152)]}","{'A301': 0.8947368421052632, 'A294': 0.10526315789473684}",A301,,"    private void initButton(final View rootView) {
        final FloatingActionButton fab = rootView.findViewById(R.id.addTabsButton);
        fab.setOnClickListener(v -> {
            final ChooseTabListItem[] availableTabs = getAvailableTabs(requireContext());

            if (availableTabs.length == 0) {
                //Toast.makeText(requireContext(), ""No available tabs"", Toast.LENGTH_SHORT).show();
                return;
            }

            final Dialog.OnClickListener actionListener = (dialog, which) -> {
                final ChooseTabListItem selected = availableTabs[which];
                addTab(selected.tabId);
            };

            new AddTabDialog(requireContext(), availableTabs, actionListener)
                    .show();
        });
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,addTab,void addTab(Tab),"[162, 165]","{'A301': [(162, 165)]}",{'A301': 1.0},A301,,"    private void addTab(final Tab tab) {
        tabList.add(tab);
        selectedTabsAdapter.notifyDataSetChanged();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,addTab,void addTab(int),"[167, 219]","{'A301': [(168, 170), (174, 177), (181, 181), (183, 183), (187, 187), (189, 189), (215, 219)], 'A294': [(167, 167), (178, 179), (184, 185), (191, 191)], 'A305': [(171, 173)], 'A378': [(180, 180), (186, 186), (190, 190), (192, 204), (206, 206)], 'A376': [(207, 214)], 'A299': [(182, 182), (188, 188), (205, 205)]}","{'A301': 0.3018867924528302, 'A294': 0.11320754716981132, 'A305': 0.05660377358490566, 'A378': 0.32075471698113206, 'A376': 0.1509433962264151, 'A299': 0.05660377358490566}",A378,,"    private void addTab(final int tabId) {
        final Tab.Type type = typeFrom(tabId);

        if (type == null) {
            ErrorUtil.showSnackbar(this,
                    new ErrorInfo(new IllegalStateException(""Tab id not found: "" + tabId),
                            UserAction.SOMETHING_ELSE, ""Choosing tabs on settings""));
            return;
        }

        switch (type) {
            case KIOSK:
                final SelectKioskFragment selectKioskFragment = new SelectKioskFragment();
                selectKioskFragment.setOnSelectedListener((serviceId, kioskId, kioskName) ->
                        addTab(new Tab.KioskTab(serviceId, kioskId)));
                selectKioskFragment.show(getParentFragmentManager(), ""select_kiosk"");
                return;
            case CHANNEL:
                final SelectChannelFragment selectChannelFragment = new SelectChannelFragment();
                selectChannelFragment.setOnSelectedListener((serviceId, url, name) ->
                        addTab(new Tab.ChannelTab(serviceId, url, name)));
                selectChannelFragment.show(getParentFragmentManager(), ""select_channel"");
                return;
            case PLAYLIST:
                final SelectPlaylistFragment selectPlaylistFragment = new SelectPlaylistFragment();
                selectPlaylistFragment.setOnSelectedListener(
                        new SelectPlaylistFragment.OnSelectedListener() {
                            @Override
                            public void onLocalPlaylistSelected(final long id, final String name) {
                                addTab(new Tab.PlaylistTab(id, name));
                            }

                            @Override
                            public void onRemotePlaylistSelected(
                                    final int serviceId, final String url, final String name) {
                                addTab(new Tab.PlaylistTab(serviceId, url, name));
                            }
                        });
                selectPlaylistFragment.show(getParentFragmentManager(), ""select_playlist"");
                return;
            case FEEDGROUP:
                final SelectFeedGroupFragment selectFeedGroupFragment =
                        new SelectFeedGroupFragment();
                selectFeedGroupFragment.setOnSelectedListener(
                        (groupId, name, iconId) ->
                                addTab(new Tab.FeedGroupTab(groupId, name, iconId)));
                selectFeedGroupFragment.show(getParentFragmentManager(), ""select_feed_group"");
                return;
            default:
                addTab(type.getTab());
                break;
        }
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onLocalPlaylistSelected,"void onLocalPlaylistSelected(long,String)","[194, 197]","{'A378': [(194, 197)]}",{'A378': 1.0},A378,,"                            @Override
                            public void onLocalPlaylistSelected(final long id, final String name) {
                                addTab(new Tab.PlaylistTab(id, name));
                            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onRemotePlaylistSelected,"void onRemotePlaylistSelected(int,String,String)","[199, 203]","{'A378': [(199, 203)]}",{'A378': 1.0},A378,,"                            @Override
                            public void onRemotePlaylistSelected(
                                    final int serviceId, final String url, final String name) {
                                addTab(new Tab.PlaylistTab(serviceId, url, name));
                            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,getAvailableTabs,ChooseTabListItem[] getAvailableTabs(Context),"[221, 270]","{'A301': [(222, 223), (225, 228), (231, 234), (238, 239), (242, 243), (261, 270)], 'A294': [(221, 221), (224, 224), (229, 230), (235, 236), (240, 241), (246, 247)], 'A378': [(251, 255)], 'A376': [(256, 260)], 'A312': [(237, 237), (248, 248)], 'A289': [(244, 245), (249, 250)]}","{'A301': 0.48, 'A294': 0.2, 'A378': 0.1, 'A376': 0.1, 'A312': 0.04, 'A289': 0.08}",A301,,"    private ChooseTabListItem[] getAvailableTabs(final Context context) {
        final ArrayList<ChooseTabListItem> returnList = new ArrayList<>();

        for (final Tab.Type type : Tab.Type.values()) {
            final Tab tab = type.getTab();
            switch (type) {
                case BLANK:
                    if (!tabList.contains(tab)) {
                        returnList.add(new ChooseTabListItem(tab.getTabId(),
                                getString(R.string.blank_page_summary),
                                tab.getTabIconRes(context)));
                    }
                    break;
                case KIOSK:
                    returnList.add(new ChooseTabListItem(tab.getTabId(),
                            getString(R.string.kiosk_page_summary),
                            R.drawable.ic_whatshot));
                    break;
                case CHANNEL:
                    returnList.add(new ChooseTabListItem(tab.getTabId(),
                            getString(R.string.channel_page_summary),
                            tab.getTabIconRes(context)));
                    break;
                case DEFAULT_KIOSK:
                    if (!tabList.contains(tab)) {
                        returnList.add(new ChooseTabListItem(tab.getTabId(),
                                getString(R.string.default_kiosk_page_summary),
                                R.drawable.ic_whatshot));
                    }
                    break;
                case PLAYLIST:
                    returnList.add(new ChooseTabListItem(tab.getTabId(),
                            getString(R.string.playlist_page_summary),
                            tab.getTabIconRes(context)));
                    break;
                case FEEDGROUP:
                    returnList.add(new ChooseTabListItem(tab.getTabId(),
                            getString(R.string.feed_group_page_summary),
                            tab.getTabIconRes(context)));
                    break;
                default:
                    if (!tabList.contains(tab)) {
                        returnList.add(new ChooseTabListItem(context, tab));
                    }
                    break;
            }
        }

        return returnList.toArray(new ChooseTabListItem[0]);
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,getItemTouchCallback,ItemTouchHelper.SimpleCallback getItemTouchCallback(),"[276, 330]","{'A294': [(276, 279), (281, 292), (296, 300), (303, 317), (321, 330)], 'A299': [(280, 280), (293, 295), (301, 302), (318, 320)]}","{'A294': 0.8363636363636363, 'A299': 0.16363636363636364}",A294,,"    private ItemTouchHelper.SimpleCallback getItemTouchCallback() {
        return new ItemTouchHelper.SimpleCallback(ItemTouchHelper.UP | ItemTouchHelper.DOWN,
                ItemTouchHelper.START | ItemTouchHelper.END) {
            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView, viewSize,
                        viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(12,
                        Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }

            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {
                if (source.getItemViewType() != target.getItemViewType()
                        || selectedTabsAdapter == null) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                selectedTabsAdapter.swapItems(sourceIndex, targetIndex);
                return true;
            }

            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }

            @Override
            public boolean isItemViewSwipeEnabled() {
                return true;
            }

            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
                final int position = viewHolder.getBindingAdapterPosition();
                tabList.remove(position);
                selectedTabsAdapter.notifyItemRemoved(position);

                if (tabList.isEmpty()) {
                    tabList.add(Tab.Type.BLANK.getTab());
                    selectedTabsAdapter.notifyItemInserted(0);
                }
            }
        };
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,interpolateOutOfBoundsScroll,"int interpolateOutOfBoundsScroll(RecyclerView,int,int,int,long)","[279, 290]","{'A294': [(279, 279), (281, 290)], 'A299': [(280, 280)]}","{'A294': 0.9166666666666666, 'A299': 0.08333333333333333}",A294,,"            @Override
            public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                                    final int viewSize,
                                                    final int viewSizeOutOfBounds,
                                                    final int totalSize,
                                                    final long msSinceStartScroll) {
                final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView, viewSize,
                        viewSizeOutOfBounds, totalSize, msSinceStartScroll);
                final int minimumAbsVelocity = Math.max(12,
                        Math.abs(standardSpeed));
                return minimumAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onMove,"boolean onMove(RecyclerView,RecyclerView.ViewHolder,RecyclerView.ViewHolder)","[292, 305]","{'A294': [(292, 292), (296, 300), (303, 305)], 'A299': [(293, 295), (301, 302)]}","{'A294': 0.6428571428571429, 'A299': 0.35714285714285715}",A294,,"            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder source,
                                  @NonNull final RecyclerView.ViewHolder target) {
                if (source.getItemViewType() != target.getItemViewType()
                        || selectedTabsAdapter == null) {
                    return false;
                }

                final int sourceIndex = source.getBindingAdapterPosition();
                final int targetIndex = target.getBindingAdapterPosition();
                selectedTabsAdapter.swapItems(sourceIndex, targetIndex);
                return true;
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,isLongPressDragEnabled,boolean isLongPressDragEnabled(),"[307, 310]","{'A294': [(307, 310)]}",{'A294': 1.0},A294,,"            @Override
            public boolean isLongPressDragEnabled() {
                return false;
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,isItemViewSwipeEnabled,boolean isItemViewSwipeEnabled(),"[312, 315]","{'A294': [(312, 315)]}",{'A294': 1.0},A294,,"            @Override
            public boolean isItemViewSwipeEnabled() {
                return true;
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment,onSwiped,"void onSwiped(RecyclerView.ViewHolder,int)","[317, 328]","{'A294': [(317, 317), (321, 328)], 'A299': [(318, 320)]}","{'A294': 0.75, 'A299': 0.25}",A294,,"            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder,
                                 final int swipeDir) {
                final int position = viewHolder.getBindingAdapterPosition();
                tabList.remove(position);
                selectedTabsAdapter.notifyItemRemoved(position);

                if (tabList.isEmpty()) {
                    tabList.add(Tab.Type.BLANK.getTab());
                    selectedTabsAdapter.notifyItemInserted(0);
                }
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter,swapItems,"void swapItems(int,int)","[342, 345]","{'A301': [(343, 345)], 'A294': [(342, 342)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"        public void swapItems(final int fromPosition, final int toPosition) {
            Collections.swap(tabList, fromPosition, toPosition);
            notifyItemMoved(fromPosition, toPosition);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter,onCreateViewHolder,"ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder onCreateViewHolder(ViewGroup,int)","[347, 353]","{'A301': [(347, 348), (352, 353)], 'A294': [(349, 350)], 'A378': [(351, 351)]}","{'A301': 0.5714285714285714, 'A294': 0.2857142857142857, 'A378': 0.14285714285714285}",A301,,"        @NonNull
        @Override
        public ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder onCreateViewHolder(
                @NonNull final ViewGroup parent, final int viewType) {
            final View view = inflater.inflate(R.layout.list_choose_tabs, parent, false);
            return new ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder(view);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter,onBindViewHolder,"void onBindViewHolder(ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder,int)","[355, 360]","{'A301': [(355, 355), (359, 360)], 'A294': [(356, 358)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"        @Override
        public void onBindViewHolder(
                @NonNull final ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder holder,
                final int position) {
            holder.bind(position, holder);
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter,getItemCount,int getItemCount(),"[362, 365]","{'A301': [(362, 365)]}",{'A301': 1.0},A301,,"        @Override
        public int getItemCount() {
            return tabList.size();
        }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder,bind,"void bind(int,TabViewHolder)","[380, 393]","{'A301': [(380, 380), (382, 390)], 'A300': [(391, 393)], 'A294': [(381, 381)]}","{'A301': 0.7142857142857143, 'A300': 0.21428571428571427, 'A294': 0.07142857142857142}",A301,,"            @SuppressLint(""ClickableViewAccessibility"")
            void bind(final int position, final TabViewHolder holder) {
                handle.setOnTouchListener(getOnTouchListener(holder));

                final Tab tab = tabList.get(position);
                final Tab.Type type = Tab.typeFrom(tab.getTabId());

                if (type == null) {
                    return;
                }

                tabNameView.setText(getTabName(type, tab));
                tabIconView.setImageResource(tab.getTabIconRes(requireContext()));
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder,getTabName,"String getTabName(Tab.Type,Tab)","[395, 419]","{'A301': [(396, 397), (399, 399), (401, 401), (404, 404), (416, 416), (418, 419)], 'A300': [(395, 395), (398, 398), (400, 400), (402, 403), (405, 406), (411, 412), (417, 417)], 'A378': [(407, 410)], 'A376': [(413, 415)]}","{'A301': 0.32, 'A300': 0.4, 'A378': 0.16, 'A376': 0.12}",A300,,"            private String getTabName(@NonNull final Tab.Type type, @NonNull final Tab tab) {
                switch (type) {
                    case BLANK:
                        return getString(R.string.blank_page_summary);
                    case DEFAULT_KIOSK:
                        return getString(R.string.default_kiosk_page_summary);
                    case KIOSK:
                        return getNameOfServiceById(((Tab.KioskTab) tab).getKioskServiceId())
                                + ""/"" + tab.getTabName(requireContext());
                    case CHANNEL:
                        return getNameOfServiceById(((Tab.ChannelTab) tab).getChannelServiceId())
                                + ""/"" + tab.getTabName(requireContext());
                    case PLAYLIST:
                        final int serviceId = ((Tab.PlaylistTab) tab).getPlaylistServiceId();
                        final String serviceName = serviceId == -1
                                ? getString(R.string.local)
                                : getNameOfServiceById(serviceId);
                        return serviceName + ""/"" + tab.getTabName(requireContext());
                    case FEEDGROUP:
                        return getString(R.string.feed_groups_header_title)
                                + ""/"" + ((Tab.FeedGroupTab) tab).getFeedGroupName();
                    default:
                        return tab.getTabName(requireContext());
                }
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java,ChooseTabsFragment.SelectedTabsAdapter.TabViewHolder,getOnTouchListener,View.OnTouchListener getOnTouchListener(RecyclerView.ViewHolder),"[421, 432]","{'A301': [(421, 432)]}",{'A301': 1.0},A301,,"            @SuppressLint(""ClickableViewAccessibility"")
            private View.OnTouchListener getOnTouchListener(final RecyclerView.ViewHolder item) {
                return (view, motionEvent) -> {
                    if (motionEvent.getActionMasked() == MotionEvent.ACTION_DOWN) {
                        if (itemTouchHelper != null && getItemCount() > 1) {
                            itemTouchHelper.startDrag(item);
                            return true;
                        }
                    }
                    return false;
                };
            }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsJsonHelper.java,TabsJsonHelper,getTabsFromJson,List<Tab> getTabsFromJson(String),"[41, 80]","{'A301': [(43, 43), (45, 52), (56, 57), (64, 70), (72, 75), (77, 80)], 'A294': [(41, 42), (53, 55), (58, 63), (71, 71)], 'A289': [(44, 44), (76, 76)]}","{'A301': 0.65, 'A294': 0.3, 'A289': 0.05}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabsJsonHelperTest.java,"    public static List<Tab> getTabsFromJson(@Nullable final String tabsJson)
            throws InvalidJsonException {
        if (tabsJson == null || tabsJson.isEmpty()) {
            return getDefaultTabs();
        }

        final List<Tab> returnTabs = new ArrayList<>();

        final JsonObject outerJsonObject;
        try {
            outerJsonObject = JsonParser.object().from(tabsJson);

            if (!outerJsonObject.has(JSON_TABS_ARRAY_KEY)) {
                throw new InvalidJsonException(""JSON doesn't contain \"""" + JSON_TABS_ARRAY_KEY
                        + ""\"" array"");
            }

            final JsonArray tabsArray = outerJsonObject.getArray(JSON_TABS_ARRAY_KEY);

            for (final Object o : tabsArray) {
                if (!(o instanceof JsonObject)) {
                    continue;
                }

                final Tab tab = Tab.from((JsonObject) o);

                if (tab != null) {
                    returnTabs.add(tab);
                }
            }
        } catch (final JsonParserException e) {
            throw new InvalidJsonException(e);
        }

        if (returnTabs.isEmpty()) {
            return getDefaultTabs();
        }

        return returnTabs;
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsJsonHelper.java,TabsJsonHelper,getJsonToSave,String getJsonToSave(List<Tab>),"[88, 102]","{'A301': [(89, 92), (97, 102)], 'A294': [(88, 88), (93, 96)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabsJsonHelperTest.java,"    public static String getJsonToSave(@Nullable final List<Tab> tabList) {
        final JsonStringWriter jsonWriter = JsonWriter.string();
        jsonWriter.object();

        jsonWriter.array(JSON_TABS_ARRAY_KEY);
        if (tabList != null) {
            for (final Tab tab : tabList) {
                tab.writeJsonOn(jsonWriter);
            }
        }
        jsonWriter.end();

        jsonWriter.end();
        return jsonWriter.done();
    }
"
org.schabi.newpipe.settings.tabs,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/tabs/TabsJsonHelper.java,TabsJsonHelper,getDefaultTabs,List<Tab> getDefaultTabs(),"[104, 106]","{'A301': [(105, 106)], 'A294': [(104, 104)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/settings/tabs/TabsJsonHelperTest.java,"    public static List<Tab> getDefaultTabs() {
        return FALLBACK_INITIAL_TABS_LIST;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/UpdateSettingsFragment.java,UpdateSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[33, 41]","{'A381': [(33, 33), (36, 36), (41, 41)], 'A299': [(34, 34)], 'A300': [(35, 35), (37, 40)]}","{'A381': 0.3333333333333333, 'A299': 0.1111111111111111, 'A300': 0.5555555555555556}",A300,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        findPreference(getString(R.string.update_app_key))
                .setOnPreferenceChangeListener(updatePreferenceChange);
        findPreference(getString(R.string.manual_update_key))
                .setOnPreferenceClickListener(manualUpdateClick);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/UpdateSettingsFragment.java,UpdateSettingsFragment,askForConsentToUpdateChecks,void askForConsentToUpdateChecks(Context),"[43, 57]","{'A309': [(43, 57)]}",{'A309': 1.0},A309,,"    public static void askForConsentToUpdateChecks(final Context context) {
        new AlertDialog.Builder(context)
                .setTitle(context.getString(R.string.check_for_updates))
                .setMessage(context.getString(R.string.auto_update_check_description))
                .setPositiveButton(context.getString(R.string.yes), (d, w) -> {
                    d.dismiss();
                    setAutoUpdateCheckEnabled(context, true);
                })
                .setNegativeButton(R.string.no, (d, w) -> {
                    d.dismiss();
                    // set explicitly to false, since the default is true on previous versions
                    setAutoUpdateCheckEnabled(context, false);
                })
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/UpdateSettingsFragment.java,UpdateSettingsFragment,setAutoUpdateCheckEnabled,"void setAutoUpdateCheckEnabled(Context,boolean)","[59, 65]","{'A309': [(59, 65)]}",{'A309': 1.0},A309,,"    private static void setAutoUpdateCheckEnabled(final Context context, final boolean enabled) {
        PreferenceManager.getDefaultSharedPreferences(context)
                .edit()
                .putBoolean(context.getString(R.string.update_app_key), enabled)
                .putBoolean(context.getString(R.string.update_check_consent_key), true)
                .apply();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/UpdateSettingsFragment.java,UpdateSettingsFragment,wasUserAskedForConsent,boolean wasUserAskedForConsent(Context),"[72, 75]","{'A309': [(72, 75)]}",{'A309': 1.0},A309,,"    public static boolean wasUserAskedForConsent(final Context context) {
        return PreferenceManager.getDefaultSharedPreferences(context)
                .getBoolean(context.getString(R.string.update_check_consent_key), false);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearcher.java,PreferenceSearcher,add,void add(List<PreferenceSearchItem>),"[19, 21]","{'A300': [(19, 21)]}",{'A300': 1.0},A300,,"    public void add(final List<PreferenceSearchItem> items) {
        allEntries.addAll(items);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearcher.java,PreferenceSearcher,searchFor,List<PreferenceSearchItem> searchFor(String),"[23, 31]","{'A300': [(23, 24), (26, 31)], 'A295': [(25, 25)]}","{'A300': 0.8888888888888888, 'A295': 0.1111111111111111}",A300,,"    List<PreferenceSearchItem> searchFor(final String keyword) {
        if (TextUtils.isEmpty(keyword)) {
            return Collections.emptyList();
        }

        return configuration.getSearcher()
                .search(allEntries.stream(), keyword)
                .collect(Collectors.toList());
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearcher.java,PreferenceSearcher,clear,void clear(),"[33, 35]","{'A300': [(33, 35)]}",{'A300': 1.0},A300,,"    public void clear() {
        allEntries.clear();
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchConfiguration.java,PreferenceSearchConfiguration,setSearcher,void setSearcher(PreferenceSearchFunction),"[20, 22]","{'A300': [(20, 22)]}",{'A300': 1.0},A300,,"    public void setSearcher(final PreferenceSearchFunction searcher) {
        this.searcher = Objects.requireNonNull(searcher);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchConfiguration.java,PreferenceSearchConfiguration,getSearcher,PreferenceSearchFunction getSearcher(),"[24, 26]","{'A300': [(24, 26)]}",{'A300': 1.0},A300,,"    public PreferenceSearchFunction getSearcher() {
        return searcher;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchConfiguration.java,PreferenceSearchConfiguration,getParserIgnoreElements,List<String> getParserIgnoreElements(),"[28, 30]","{'A300': [(28, 30)]}",{'A300': 1.0},A300,,"    public List<String> getParserIgnoreElements() {
        return parserIgnoreElements;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchConfiguration.java,PreferenceSearchConfiguration,getParserContainerElements,List<String> getParserContainerElements(),"[32, 34]","{'A300': [(32, 34)]}",{'A300': 1.0},A300,,"    public List<String> getParserContainerElements() {
        return parserContainerElements;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getKey,String getKey(),"[60, 63]","{'A300': [(61, 63)], 'A299': [(60, 60)]}","{'A300': 0.75, 'A299': 0.25}",A300,,"    @NonNull
    public String getKey() {
        return key;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getTitle,String getTitle(),"[65, 68]","{'A300': [(66, 68)], 'A299': [(65, 65)]}","{'A300': 0.75, 'A299': 0.25}",A300,,"    @NonNull
    public String getTitle() {
        return title;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getSummary,String getSummary(),"[70, 73]","{'A300': [(71, 73)], 'A299': [(70, 70)]}","{'A300': 0.75, 'A299': 0.25}",A300,,"    @NonNull
    public String getSummary() {
        return summary;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getEntries,String getEntries(),"[75, 78]","{'A300': [(76, 78)], 'A299': [(75, 75)]}","{'A300': 0.75, 'A299': 0.25}",A300,,"    @NonNull
    public String getEntries() {
        return entries;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getBreadcrumbs,String getBreadcrumbs(),"[80, 83]","{'A300': [(81, 83)], 'A299': [(80, 80)]}","{'A300': 0.75, 'A299': 0.25}",A300,,"    @NonNull
    public String getBreadcrumbs() {
        return breadcrumbs;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getSearchIndexItemResId,int getSearchIndexItemResId(),"[85, 87]","{'A300': [(85, 87)]}",{'A300': 1.0},A300,,"    public int getSearchIndexItemResId() {
        return searchIndexItemResId;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,hasData,boolean hasData(),"[89, 91]","{'A300': [(89, 91)]}",{'A300': 1.0},A300,,"    boolean hasData() {
        return !key.isEmpty() && !title.isEmpty();
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,getAllRelevantSearchFields,List<String> getAllRelevantSearchFields(),"[93, 95]","{'A300': [(93, 93), (95, 95)], 'A295': [(94, 94)]}","{'A300': 0.6666666666666666, 'A295': 0.3333333333333333}",A300,,"    public List<String> getAllRelevantSearchFields() {
        return List.of(getTitle(), getSummary(), getEntries(), getBreadcrumbs());
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchItem.java,PreferenceSearchItem,toString,String toString(),"[97, 101]","{'A300': [(98, 101)], 'A299': [(97, 97)]}","{'A300': 0.8, 'A299': 0.2}",A300,,"    @NonNull
    @Override
    public String toString() {
        return ""PreferenceItem: "" + title + "" "" + summary + "" "" + key;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,parse,List<PreferenceSearchItem> parse(int),"[42, 83]","{'A300': [(42, 56), (58, 83)], 'A295': [(57, 57)]}","{'A300': 0.9761904761904762, 'A295': 0.023809523809523808}",A300,,"    public List<PreferenceSearchItem> parse(
            @XmlRes final int resId
    ) {
        final List<PreferenceSearchItem> results = new ArrayList<>();
        final XmlPullParser xpp = context.getResources().getXml(resId);

        try {
            xpp.setFeature(XmlPullParser.FEATURE_PROCESS_NAMESPACES, true);
            xpp.setFeature(XmlPullParser.FEATURE_REPORT_NAMESPACE_ATTRIBUTES, true);

            final List<String> breadcrumbs = new ArrayList<>();
            while (xpp.getEventType() != XmlPullParser.END_DOCUMENT) {
                if (xpp.getEventType() == XmlPullParser.START_TAG) {
                    final PreferenceSearchItem result = parseSearchResult(
                            xpp,
                            Localization.concatenateStrings("" > "", breadcrumbs),
                            resId
                    );

                    if (!searchConfiguration.getParserIgnoreElements().contains(xpp.getName())
                            && result.hasData()
                            && !""true"".equals(getAttribute(xpp, NS_SEARCH, ""ignore""))) {
                        results.add(result);
                    }
                    if (searchConfiguration.getParserContainerElements().contains(xpp.getName())) {
                        // This code adds breadcrumbs for certain containers (e.g. PreferenceScreen)
                        // Example: Video and Audio > Player
                        breadcrumbs.add(result.getTitle() == null ? """" : result.getTitle());
                    }
                } else if (xpp.getEventType() == XmlPullParser.END_TAG
                        && searchConfiguration.getParserContainerElements()
                            .contains(xpp.getName())) {
                    breadcrumbs.remove(breadcrumbs.size() - 1);
                }

                xpp.next();
            }
        } catch (final Exception e) {
            Log.w(TAG, ""Failed to parse resid="" + resId, e);
        }
        return results;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,getAttribute,"String getAttribute(XmlPullParser,String)","[85, 94]","{'A300': [(85, 94)]}",{'A300': 1.0},A300,,"    private String getAttribute(
            final XmlPullParser xpp,
            @NonNull final String attribute
    ) {
        final String nsSearchAttr = getAttribute(xpp, NS_SEARCH, attribute);
        if (nsSearchAttr != null) {
            return nsSearchAttr;
        }
        return getAttribute(xpp, NS_ANDROID, attribute);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,getAttribute,"String getAttribute(XmlPullParser,String,String)","[96, 102]","{'A300': [(96, 102)]}",{'A300': 1.0},A300,,"    private String getAttribute(
            final XmlPullParser xpp,
            @NonNull final String namespace,
            @NonNull final String attribute
    ) {
        return xpp.getAttributeValue(namespace, attribute);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,parseSearchResult,"PreferenceSearchItem parseSearchResult(XmlPullParser,String,int)","[104, 129]","{'A300': [(104, 129)]}",{'A300': 1.0},A300,,"    private PreferenceSearchItem parseSearchResult(
            final XmlPullParser xpp,
            final String breadcrumbs,
            @XmlRes final int searchIndexItemResId
    ) {
        final String key = readString(getAttribute(xpp, ""key""));
        final String[] entries = readStringArray(getAttribute(xpp, ""entries""));
        final String[] entryValues = readStringArray(getAttribute(xpp, ""entryValues""));

        return new PreferenceSearchItem(
            key,
            tryFillInPreferenceValue(
                readString(getAttribute(xpp, ""title"")),
                key,
                entries,
                entryValues),
            tryFillInPreferenceValue(
                readString(getAttribute(xpp, ""summary"")),
                key,
                entries,
                entryValues),
            TextUtils.join("","", entries),
            breadcrumbs,
            searchIndexItemResId
        );
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,readStringArray,String[] readStringArray(String),"[131, 143]","{'A300': [(131, 143)]}",{'A300': 1.0},A300,,"    private String[] readStringArray(@Nullable final String s) {
        if (s == null) {
            return new String[0];
        }
        if (s.startsWith(""@"")) {
            try {
                return context.getResources().getStringArray(Integer.parseInt(s.substring(1)));
            } catch (final Exception e) {
                Log.w(TAG, ""Unable to readStringArray from '"" + s + ""'"", e);
            }
        }
        return new String[0];
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,readString,String readString(String),"[145, 157]","{'A300': [(145, 157)]}",{'A300': 1.0},A300,,"    private String readString(@Nullable final String s) {
        if (s == null) {
            return """";
        }
        if (s.startsWith(""@"")) {
            try {
                return context.getString(Integer.parseInt(s.substring(1)));
            } catch (final Exception e) {
                Log.w(TAG, ""Unable to readString from '"" + s + ""'"", e);
            }
        }
        return s;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceParser.java,PreferenceParser,tryFillInPreferenceValue,"String tryFillInPreferenceValue(String,String,String[],String[])","[159, 192]","{'A300': [(159, 192)]}",{'A300': 1.0},A300,,"    private String tryFillInPreferenceValue(
            @Nullable final String s,
            @Nullable final String key,
            final String[] entries,
            final String[] entryValues
    ) {
        if (s == null) {
            return """";
        }
        if (key == null) {
            return s;
        }

        // Resolve value
        Object prefValue = allPreferences.get(key);
        if (prefValue == null) {
            return s;
        }

        /*
         * Resolve ListPreference values
         *
         * entryValues = Values/Keys that are saved
         * entries     = Actual human readable names
         */
        if (entries.length > 0 && entryValues.length == entries.length) {
            final int entryIndex = Arrays.asList(entryValues).indexOf(prefValue);
            if (entryIndex != -1) {
                prefValue = entries[entryIndex];
            }
        }

        return String.format(s, prefValue.toString());
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchFragment.java,PreferenceSearchFragment,setSearcher,void setSearcher(PreferenceSearcher),"[28, 30]","{'A300': [(28, 30)]}",{'A300': 1.0},A300,,"    public void setSearcher(final PreferenceSearcher searcher) {
        this.searcher = searcher;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchFragment.java,PreferenceSearchFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[32, 48]","{'A300': [(32, 48)]}",{'A300': 1.0},A300,,"    @Nullable
    @Override
    public View onCreateView(
            @NonNull final LayoutInflater inflater,
            @Nullable final ViewGroup container,
            @Nullable final Bundle savedInstanceState
    ) {
        binding = SettingsPreferencesearchFragmentBinding.inflate(inflater, container, false);

        binding.searchResults.setLayoutManager(new LinearLayoutManager(getContext()));

        adapter = new PreferenceSearchAdapter();
        adapter.setOnItemClickListener(this::onItemClicked);
        binding.searchResults.setAdapter(adapter);

        return binding.getRoot();
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchFragment.java,PreferenceSearchFragment,updateSearchResults,void updateSearchResults(String),"[50, 58]","{'A300': [(50, 54), (57, 58)], 'A295': [(55, 56)]}","{'A300': 0.7777777777777778, 'A295': 0.2222222222222222}",A300,,"    public void updateSearchResults(final String keyword) {
        if (adapter == null || searcher == null) {
            return;
        }

        final List<PreferenceSearchItem> results = searcher.searchFor(keyword);
        adapter.submitList(results);
        setEmptyViewShown(results.isEmpty());
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchFragment.java,PreferenceSearchFragment,setEmptyViewShown,void setEmptyViewShown(boolean),"[60, 63]","{'A300': [(60, 63)]}",{'A300': 1.0},A300,,"    private void setEmptyViewShown(final boolean shown) {
        binding.emptyStateView.setVisibility(shown ? View.VISIBLE : View.GONE);
        binding.searchResults.setVisibility(shown ? View.GONE : View.VISIBLE);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchFragment.java,PreferenceSearchFragment,onItemClicked,void onItemClicked(PreferenceSearchItem),"[65, 72]","{'A300': [(65, 72)]}",{'A300': 1.0},A300,,"    public void onItemClicked(final PreferenceSearchItem item) {
        if (!(getActivity() instanceof PreferenceSearchResultListener)) {
            throw new ClassCastException(
                getActivity().toString() + "" must implement SearchPreferenceResultListener"");
        }

        ((PreferenceSearchResultListener) getActivity()).onSearchResultClicked(item);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchAdapter.java,PreferenceSearchAdapter,onCreateViewHolder,"PreferenceViewHolder onCreateViewHolder(ViewGroup,int)","[24, 30]","{'A300': [(24, 25), (30, 30)], 'A295': [(26, 29)]}","{'A300': 0.42857142857142855, 'A295': 0.5714285714285714}",A295,,"    @NonNull
    @Override
    public PreferenceViewHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                   final int viewType) {
        return new PreferenceViewHolder(SettingsPreferencesearchListItemResultBinding.inflate(
                LayoutInflater.from(parent.getContext()), parent, false));
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchAdapter.java,PreferenceSearchAdapter,onBindViewHolder,"void onBindViewHolder(PreferenceViewHolder,int)","[32, 57]","{'A300': [(32, 32), (35, 37), (39, 44), (46, 57)], 'A295': [(33, 34), (38, 38), (45, 45)]}","{'A300': 0.8461538461538461, 'A295': 0.15384615384615385}",A300,,"    @Override
    public void onBindViewHolder(@NonNull final PreferenceViewHolder holder, final int position) {
        final PreferenceSearchItem item = getItem(position);

        holder.binding.title.setText(item.getTitle());

        if (item.getSummary().isEmpty()) {
            holder.binding.summary.setVisibility(View.GONE);
        } else {
            holder.binding.summary.setVisibility(View.VISIBLE);
            holder.binding.summary.setText(item.getSummary());
        }

        if (item.getBreadcrumbs().isEmpty()) {
            holder.binding.breadcrumbs.setVisibility(View.GONE);
        } else {
            holder.binding.breadcrumbs.setVisibility(View.VISIBLE);
            holder.binding.breadcrumbs.setText(item.getBreadcrumbs());
        }

        holder.itemView.setOnClickListener(v -> {
            if (onItemClickListener != null) {
                onItemClickListener.accept(item);
            }
        });
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchAdapter.java,PreferenceSearchAdapter,setOnItemClickListener,void setOnItemClickListener(Consumer<PreferenceSearchItem>),"[59, 61]","{'A300': [(59, 61)]}",{'A300': 1.0},A300,,"    void setOnItemClickListener(final Consumer<PreferenceSearchItem> onItemClickListener) {
        this.onItemClickListener = onItemClickListener;
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchAdapter.java,PreferenceSearchAdapter.PreferenceCallback,areItemsTheSame,"boolean areItemsTheSame(PreferenceSearchItem,PreferenceSearchItem)","[73, 77]","{'A295': [(73, 77)]}",{'A295': 1.0},A295,,"        @Override
        public boolean areItemsTheSame(@NonNull final PreferenceSearchItem oldItem,
                                       @NonNull final PreferenceSearchItem newItem) {
            return oldItem.getKey().equals(newItem.getKey());
        }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchAdapter.java,PreferenceSearchAdapter.PreferenceCallback,areContentsTheSame,"boolean areContentsTheSame(PreferenceSearchItem,PreferenceSearchItem)","[79, 84]","{'A295': [(79, 84)]}",{'A295': 1.0},A295,,"        @Override
        public boolean areContentsTheSame(@NonNull final PreferenceSearchItem oldItem,
                                          @NonNull final PreferenceSearchItem newItem) {
            return oldItem.getAllRelevantSearchFields().equals(newItem
                    .getAllRelevantSearchFields());
        }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchResultHighlighter.java,PreferenceSearchResultHighlighter,highlight,"void highlight(PreferenceSearchItem,PreferenceFragmentCompat)","[37, 42]","{'A300': [(37, 42)]}",{'A300': 1.0},A300,,"    public static void highlight(
            final PreferenceSearchItem item,
            final PreferenceFragmentCompat prefsFragment
    ) {
        new Handler(Looper.getMainLooper()).post(() -> doHighlight(item, prefsFragment));
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchResultHighlighter.java,PreferenceSearchResultHighlighter,doHighlight,"void doHighlight(PreferenceSearchItem,PreferenceFragmentCompat)","[44, 78]","{'A300': [(44, 78)]}",{'A300': 1.0},A300,,"    private static void doHighlight(
            final PreferenceSearchItem item,
            final PreferenceFragmentCompat prefsFragment
    ) {
        final Preference prefResult = prefsFragment.findPreference(item.getKey());

        if (prefResult == null) {
            Log.w(TAG, ""Preference '"" + item.getKey() + ""' not found on '"" + prefsFragment + ""'"");
            return;
        }

        final RecyclerView recyclerView = prefsFragment.getListView();
        final RecyclerView.Adapter<?> adapter = recyclerView.getAdapter();
        if (adapter instanceof PreferenceGroup.PreferencePositionCallback) {
            final int position = ((PreferenceGroup.PreferencePositionCallback) adapter)
                    .getPreferenceAdapterPosition(prefResult);
            if (position != RecyclerView.NO_POSITION) {
                recyclerView.scrollToPosition(position);
                recyclerView.postDelayed(() -> {
                    final RecyclerView.ViewHolder holder =
                            recyclerView.findViewHolderForAdapterPosition(position);
                    if (holder != null) {
                        final Drawable background = holder.itemView.getBackground();
                        if (background instanceof RippleDrawable) {
                            showRippleAnimation((RippleDrawable) background);
                            return;
                        }
                    }
                    highlightFallback(prefsFragment, prefResult);
                }, 200);
                return;
            }
        }
        highlightFallback(prefsFragment, prefResult);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchResultHighlighter.java,PreferenceSearchResultHighlighter,highlightFallback,"void highlightFallback(PreferenceFragmentCompat,Preference)","[86, 117]","{'A300': [(86, 117)]}",{'A300': 1.0},A300,,"    private static void highlightFallback(
            final PreferenceFragmentCompat prefsFragment,
            final Preference prefResult
    ) {
        // Get primary color from text for highlight icon
        final TypedValue typedValue = new TypedValue();
        final Resources.Theme theme = prefsFragment.getActivity().getTheme();
        theme.resolveAttribute(android.R.attr.textColorPrimary, typedValue, true);
        final TypedArray arr = prefsFragment.getActivity()
                .obtainStyledAttributes(
                        typedValue.data,
                        new int[]{android.R.attr.textColorPrimary});
        final int color = arr.getColor(0, 0xffE53935);
        arr.recycle();

        // Show highlight icon
        final Drawable oldIcon = prefResult.getIcon();
        final boolean oldSpaceReserved = prefResult.isIconSpaceReserved();
        final Drawable highlightIcon =
                AppCompatResources.getDrawable(
                        prefsFragment.requireContext(),
                        R.drawable.ic_play_arrow);
        highlightIcon.setColorFilter(new PorterDuffColorFilter(color, PorterDuff.Mode.SRC_IN));
        prefResult.setIcon(highlightIcon);

        prefsFragment.scrollToPreference(prefResult);

        new Handler(Looper.getMainLooper()).postDelayed(() -> {
            prefResult.setIcon(oldIcon);
            prefResult.setIconSpaceReserved(oldSpaceReserved);
        }, 1000);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceSearchResultHighlighter.java,PreferenceSearchResultHighlighter,showRippleAnimation,void showRippleAnimation(RippleDrawable),"[119, 124]","{'A300': [(119, 124)]}",{'A300': 1.0},A300,,"    private static void showRippleAnimation(final RippleDrawable rippleDrawable) {
        rippleDrawable.setState(
                new int[]{android.R.attr.state_pressed, android.R.attr.state_enabled});
        new Handler(Looper.getMainLooper())
                .postDelayed(() -> rippleDrawable.setState(new int[]{}), 1000);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceFuzzySearchFunction.java,PreferenceFuzzySearchFunction,search,"Stream<PreferenceSearchItem> search(Stream<PreferenceSearchItem>,String)","[20, 40]","{'A300': [(20, 35), (37, 40)], 'A295': [(36, 36)]}","{'A300': 0.9523809523809523, 'A295': 0.047619047619047616}",A300,,"    @Override
    public Stream<PreferenceSearchItem> search(
            final Stream<PreferenceSearchItem> allAvailable,
            final String keyword
    ) {
        final int maxScore = (keyword.length() + 1) * 3 - 2; // First can't get +2 bonus score

        return allAvailable
                // General search
                // Check all fields if anyone contains something that kind of matches the keyword
                .map(item -> new FuzzySearchGeneralDTO(item, keyword))
                .filter(dto -> dto.getScore() / maxScore >= 0.3f)
                .map(FuzzySearchGeneralDTO::getItem)
                // Specific search - Used for determining order of search results
                // Calculate a score based on specific search fields
                .map(item -> new FuzzySearchSpecificDTO(item, keyword))
                .sorted(Comparator.comparingDouble(FuzzySearchSpecificDTO::getScore).reversed())
                .map(FuzzySearchSpecificDTO::getItem)
                // Limit the amount of search results
                .limit(20);
    }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceFuzzySearchFunction.java,PreferenceFuzzySearchFunction.FuzzySearchGeneralDTO,getItem,PreferenceSearchItem getItem(),"[55, 57]","{'A300': [(55, 57)]}",{'A300': 1.0},A300,,"        public PreferenceSearchItem getItem() {
            return item;
        }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceFuzzySearchFunction.java,PreferenceFuzzySearchFunction.FuzzySearchGeneralDTO,getScore,float getScore(),"[59, 61]","{'A300': [(59, 61)]}",{'A300': 1.0},A300,,"        public float getScore() {
            return score;
        }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceFuzzySearchFunction.java,PreferenceFuzzySearchFunction.FuzzySearchSpecificDTO,getItem,PreferenceSearchItem getItem(),"[88, 90]","{'A300': [(88, 90)]}",{'A300': 1.0},A300,,"        public PreferenceSearchItem getItem() {
            return item;
        }
"
org.schabi.newpipe.settings.preferencesearch,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/preferencesearch/PreferenceFuzzySearchFunction.java,PreferenceFuzzySearchFunction.FuzzySearchSpecificDTO,getScore,double getScore(),"[92, 94]","{'A300': [(93, 94)], 'A295': [(92, 92)]}","{'A300': 0.6666666666666666, 'A295': 0.3333333333333333}",A300,,"        public double getScore() {
            return score;
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,setOnSelectedListener,void setOnSelectedListener(OnSelectedListener),"[65, 67]","{'A302': [(67, 67)], 'A378': [(65, 66)]}","{'A302': 0.3333333333333333, 'A378': 0.6666666666666666}",A378,,"    public void setOnSelectedListener(final OnSelectedListener listener) {
        onSelectedListener = listener;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,setOnCancelListener,void setOnCancelListener(OnCancelListener),"[69, 71]","{'A302': [(70, 71)], 'A294': [(69, 69)]}","{'A302': 0.6666666666666666, 'A294': 0.3333333333333333}",A302,,"    public void setOnCancelListener(final OnCancelListener listener) {
        onCancelListener = listener;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onCreate,void onCreate(Bundle),"[77, 81]","{'A305': [(77, 81)]}",{'A305': 1.0},A305,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setStyle(STYLE_NO_TITLE, ThemeHelper.getMinWidthDialogTheme(requireContext()));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[83, 106]","{'A302': [(83, 83), (88, 88), (90, 98), (101, 106)], 'A294': [(84, 86), (89, 89)], 'A305': [(99, 99)], 'A369': [(87, 87)], 'A301': [(100, 100)]}","{'A302': 0.7083333333333334, 'A294': 0.16666666666666666, 'A305': 0.041666666666666664, 'A369': 0.041666666666666664, 'A301': 0.041666666666666664}",A302,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        final View v = inflater.inflate(R.layout.select_channel_fragment, container, false);
        recyclerView = v.findViewById(R.id.items_list);
        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        final SelectChannelAdapter channelAdapter = new SelectChannelAdapter();
        recyclerView.setAdapter(channelAdapter);

        progressBar = v.findViewById(R.id.progressBar);
        emptyView = v.findViewById(R.id.empty_state_view);
        progressBar.setVisibility(View.VISIBLE);
        recyclerView.setVisibility(View.GONE);
        emptyView.setVisibility(View.GONE);


        final SubscriptionManager subscriptionManager = new SubscriptionManager(requireContext());
        subscriptionManager.subscriptions().toObservable()
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getSubscriptionObserver());

        return v;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onCancel,void onCancel(DialogInterface),"[112, 118]","{'A302': [(112, 112), (114, 114), (116, 118)], 'A294': [(115, 115)], 'A305': [(113, 113)]}","{'A302': 0.7142857142857143, 'A294': 0.14285714285714285, 'A305': 0.14285714285714285}",A302,,"    @Override
    public void onCancel(@NonNull final DialogInterface dialogInterface) {
        super.onCancel(dialogInterface);
        if (onCancelListener != null) {
            onCancelListener.onCancel();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,clickedItem,void clickedItem(int),"[120, 127]","{'A302': [(125, 127)], 'A294': [(120, 120), (122, 122), (124, 124)], 'A378': [(121, 121), (123, 123)]}","{'A302': 0.375, 'A294': 0.375, 'A378': 0.25}",A302,,"    private void clickedItem(final int position) {
        if (onSelectedListener != null) {
            final SubscriptionEntity entry = subscriptions.get(position);
            onSelectedListener
                    .onChannelSelected(entry.getServiceId(), entry.getUrl(), entry.getName());
        }
        dismiss();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,displayChannels,void displayChannels(List<SubscriptionEntity>),"[133, 142]","{'A302': [(135, 135), (137, 142)], 'A294': [(133, 134), (136, 136)]}","{'A302': 0.7, 'A294': 0.3}",A302,,"    private void displayChannels(final List<SubscriptionEntity> newSubscriptions) {
        this.subscriptions = newSubscriptions;
        progressBar.setVisibility(View.GONE);
        if (newSubscriptions.isEmpty()) {
            emptyView.setVisibility(View.VISIBLE);
            return;
        }
        recyclerView.setVisibility(View.VISIBLE);

    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,getSubscriptionObserver,Observer<List<SubscriptionEntity>> getSubscriptionObserver(),"[144, 163]","{'A302': [(144, 146), (148, 149), (152, 154), (158, 160), (162, 163)], 'A294': [(151, 151), (161, 161)], 'A305': [(147, 147), (150, 150), (155, 157)]}","{'A302': 0.65, 'A294': 0.1, 'A305': 0.25}",A302,,"    private Observer<List<SubscriptionEntity>> getSubscriptionObserver() {
        return new Observer<List<SubscriptionEntity>>() {
            @Override
            public void onSubscribe(@NonNull final Disposable disposable) { }

            @Override
            public void onNext(@NonNull final List<SubscriptionEntity> newSubscriptions) {
                displayChannels(newSubscriptions);
            }

            @Override
            public void onError(@NonNull final Throwable exception) {
                ErrorUtil.showUiErrorSnackbar(SelectChannelFragment.this,
                        ""Loading subscription"", exception);
            }

            @Override
            public void onComplete() { }
        };
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onSubscribe,void onSubscribe(Disposable),"[146, 147]","{'A302': [(146, 146)], 'A305': [(147, 147)]}","{'A302': 0.5, 'A305': 0.5}",A302,,"            @Override
            public void onSubscribe(@NonNull final Disposable disposable) { }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onNext,void onNext(List<SubscriptionEntity>),"[149, 152]","{'A302': [(149, 149), (152, 152)], 'A294': [(151, 151)], 'A305': [(150, 150)]}","{'A302': 0.5, 'A294': 0.25, 'A305': 0.25}",A302,,"            @Override
            public void onNext(@NonNull final List<SubscriptionEntity> newSubscriptions) {
                displayChannels(newSubscriptions);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onError,void onError(Throwable),"[154, 158]","{'A302': [(154, 154), (158, 158)], 'A305': [(155, 157)]}","{'A302': 0.4, 'A305': 0.6}",A305,,"            @Override
            public void onError(@NonNull final Throwable exception) {
                ErrorUtil.showUiErrorSnackbar(SelectChannelFragment.this,
                        ""Loading subscription"", exception);
            }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment,onComplete,void onComplete(),"[160, 161]","{'A302': [(160, 160)], 'A294': [(161, 161)]}","{'A302': 0.5, 'A294': 0.5}",A302,,"            @Override
            public void onComplete() { }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment.SelectChannelAdapter,onCreateViewHolder,"SelectChannelItemHolder onCreateViewHolder(ViewGroup,int)","[179, 186]","{'A302': [(180, 180), (184, 186)], 'A294': [(181, 183)], 'A305': [(179, 179)]}","{'A302': 0.5, 'A294': 0.375, 'A305': 0.125}",A302,,"        @NonNull
        @Override
        public SelectChannelItemHolder onCreateViewHolder(final ViewGroup parent,
                                                          final int viewType) {
            final View item = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.select_channel_item, parent, false);
            return new SelectChannelItemHolder(item);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment.SelectChannelAdapter,onBindViewHolder,"void onBindViewHolder(SelectChannelItemHolder,int)","[188, 194]","{'A302': [(188, 188), (191, 191), (194, 194)], 'A299': [(192, 192)], 'A294': [(189, 190)], 'A305': [(193, 193)]}","{'A302': 0.42857142857142855, 'A299': 0.14285714285714285, 'A294': 0.2857142857142857, 'A305': 0.14285714285714285}",A302,,"        @Override
        public void onBindViewHolder(final SelectChannelItemHolder holder, final int position) {
            final SubscriptionEntity entry = subscriptions.get(position);
            holder.titleView.setText(entry.getName());
            holder.view.setOnClickListener(view -> clickedItem(position));
            PicassoHelper.loadAvatar(entry.getAvatarUrl()).into(holder.thumbnailView);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectChannelFragment.java,SelectChannelFragment.SelectChannelAdapter,getItemCount,int getItemCount(),"[196, 199]","{'A302': [(196, 199)]}",{'A302': 1.0},A302,,"        @Override
        public int getItemCount() {
            return subscriptions.size();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,setOnSelectedListener,void setOnSelectedListener(OnSelectedListener),"[49, 51]","{'A378': [(49, 51)]}",{'A378': 1.0},A378,,"    public void setOnSelectedListener(final OnSelectedListener listener) {
        onSelectedListener = listener;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[57, 71]","{'A378': [(57, 59), (62, 62), (65, 65), (67, 68)], 'A305': [(60, 61), (63, 64), (69, 71)], 'A294': [(66, 66)]}","{'A378': 0.4666666666666667, 'A305': 0.4666666666666667, 'A294': 0.06666666666666667}",A378,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        final View v = inflater.inflate(R.layout.select_playlist_fragment, container, false);
        progressBar = v.findViewById(R.id.progressBar);
        recyclerView = v.findViewById(R.id.items_list);
        emptyView = v.findViewById(R.id.empty_state_view);

        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));
        final SelectPlaylistAdapter playlistAdapter = new SelectPlaylistAdapter();
        recyclerView.setAdapter(playlistAdapter);

        loadPlaylists();
        return v;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,onDestroy,void onDestroy(),"[73, 79]","{'A305': [(73, 79)]}",{'A305': 1.0},A305,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (disposable != null) {
            disposable.dispose();
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,loadPlaylists,void loadPlaylists(),"[85, 97]","{'A378': [(86, 89), (91, 93), (96, 97)], 'A305': [(85, 85), (90, 90), (94, 95)]}","{'A378': 0.6923076923076923, 'A305': 0.3076923076923077}",A378,,"    private void loadPlaylists() {
        progressBar.setVisibility(View.VISIBLE);
        recyclerView.setVisibility(View.GONE);
        emptyView.setVisibility(View.GONE);

        final AppDatabase database = NewPipeDatabase.getInstance(requireContext());
        final LocalPlaylistManager localPlaylistManager = new LocalPlaylistManager(database);
        final RemotePlaylistManager remotePlaylistManager = new RemotePlaylistManager(database);

        disposable = getMergedOrderedPlaylists(localPlaylistManager, remotePlaylistManager)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(this::displayPlaylists, this::onError);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,displayPlaylists,void displayPlaylists(List<PlaylistLocalItem>),"[99, 104]","{'A305': [(99, 104)]}",{'A305': 1.0},A305,,"    private void displayPlaylists(final List<PlaylistLocalItem> newPlaylists) {
        playlists = newPlaylists;
        progressBar.setVisibility(View.GONE);
        emptyView.setVisibility(newPlaylists.isEmpty() ? View.VISIBLE : View.GONE);
        recyclerView.setVisibility(newPlaylists.isEmpty() ? View.GONE : View.VISIBLE);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,onError,void onError(Throwable),"[106, 109]","{'A378': [(109, 109)], 'A305': [(106, 108)]}","{'A378': 0.25, 'A305': 0.75}",A305,,"    protected void onError(final Throwable e) {
        ErrorUtil.showSnackbar(requireActivity(), new ErrorInfo(e,
                UserAction.UI_ERROR, ""Loading playlists""));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment,clickedItem,void clickedItem(int),"[115, 130]","{'A378': [(115, 120), (122, 130)], 'A352': [(121, 121)]}","{'A378': 0.9375, 'A352': 0.0625}",A378,,"    private void clickedItem(final int position) {
        if (onSelectedListener != null) {
            final LocalItem selectedItem = playlists.get(position);

            if (selectedItem instanceof PlaylistMetadataEntry) {
                final PlaylistMetadataEntry entry = ((PlaylistMetadataEntry) selectedItem);
                onSelectedListener.onLocalPlaylistSelected(entry.getUid(), entry.name);

            } else if (selectedItem instanceof PlaylistRemoteEntity) {
                final PlaylistRemoteEntity entry = ((PlaylistRemoteEntity) selectedItem);
                onSelectedListener.onRemotePlaylistSelected(
                        entry.getServiceId(), entry.getUrl(), entry.getName());
            }
        }
        dismiss();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment.SelectPlaylistAdapter,onCreateViewHolder,"SelectPlaylistItemHolder onCreateViewHolder(ViewGroup,int)","[143, 150]","{'A378': [(144, 145), (147, 150)], 'A305': [(143, 143), (146, 146)]}","{'A378': 0.75, 'A305': 0.25}",A378,,"        @NonNull
        @Override
        public SelectPlaylistItemHolder onCreateViewHolder(final ViewGroup parent,
                                                           final int viewType) {
            final View item = LayoutInflater.from(parent.getContext())
                    .inflate(R.layout.list_playlist_mini_item, parent, false);
            return new SelectPlaylistItemHolder(item);
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment.SelectPlaylistAdapter,onBindViewHolder,"void onBindViewHolder(SelectPlaylistItemHolder,int)","[152, 172]","{'A378': [(152, 152), (155, 161), (163, 168), (171, 172)], 'A305': [(153, 154), (162, 162), (169, 170)]}","{'A378': 0.7619047619047619, 'A305': 0.23809523809523808}",A378,,"        @Override
        public void onBindViewHolder(@NonNull final SelectPlaylistItemHolder holder,
                                     final int position) {
            final PlaylistLocalItem selectedItem = playlists.get(position);

            if (selectedItem instanceof PlaylistMetadataEntry) {
                final PlaylistMetadataEntry entry = ((PlaylistMetadataEntry) selectedItem);

                holder.titleView.setText(entry.name);
                holder.view.setOnClickListener(view -> clickedItem(position));
                PicassoHelper.loadPlaylistThumbnail(entry.thumbnailUrl).into(holder.thumbnailView);

            } else if (selectedItem instanceof PlaylistRemoteEntity) {
                final PlaylistRemoteEntity entry = ((PlaylistRemoteEntity) selectedItem);

                holder.titleView.setText(entry.getName());
                holder.view.setOnClickListener(view -> clickedItem(position));
                PicassoHelper.loadPlaylistThumbnail(entry.getThumbnailUrl())
                        .into(holder.thumbnailView);
            }
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java,SelectPlaylistFragment.SelectPlaylistAdapter,getItemCount,int getItemCount(),"[174, 177]","{'A378': [(174, 177)]}",{'A378': 1.0},A378,,"        @Override
        public int getItemCount() {
            return playlists.size();
        }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[49, 82]","{'A301': [(49, 49), (52, 52)], 'A328': [(56, 57), (60, 61), (70, 72), (75, 82)], 'A299': [(50, 50)], 'A305': [(62, 62), (67, 67)], 'A300': [(51, 51), (64, 64), (66, 66)], 'A294': [(53, 55), (58, 59), (63, 63), (65, 65), (68, 69), (73, 74)]}","{'A301': 0.058823529411764705, 'A328': 0.4411764705882353, 'A299': 0.029411764705882353, 'A305': 0.058823529411764705, 'A300': 0.08823529411764706, 'A294': 0.3235294117647059}",A328,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        downloadPathVideoPreference = getString(R.string.download_path_video_key);
        downloadPathAudioPreference = getString(R.string.download_path_audio_key);
        storageUseSafPreference = getString(R.string.storage_use_saf);
        final String downloadStorageAsk = getString(R.string.downloads_storage_ask);

        prefPathVideo = findPreference(downloadPathVideoPreference);
        prefPathAudio = findPreference(downloadPathAudioPreference);
        prefStorageAsk = findPreference(downloadStorageAsk);

        final SwitchPreferenceCompat prefUseSaf = findPreference(storageUseSafPreference);
        prefUseSaf.setChecked(NewPipeSettings.useStorageAccessFramework(ctx));
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            prefUseSaf.setEnabled(false);
            prefUseSaf.setSummary(R.string.downloads_storage_use_saf_summary_api_29);
            prefStorageAsk.setSummary(R.string.downloads_storage_ask_summary_no_saf_notice);
        }

        updatePreferencesSummary();
        updatePathPickers(!defaultPreferences.getBoolean(downloadStorageAsk, false));

        if (hasInvalidPath(downloadPathVideoPreference)
                || hasInvalidPath(downloadPathAudioPreference)) {
            updatePreferencesSummary();
        }

        prefStorageAsk.setOnPreferenceChangeListener((preference, value) -> {
            updatePathPickers(!(boolean) value);
            return true;
        });
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,onAttach,void onAttach(Context),"[84, 88]","{'A328': [(84, 84), (86, 88)], 'A305': [(85, 85)]}","{'A328': 0.8, 'A305': 0.2}",A328,,"    @Override
    public void onAttach(@NonNull final Context context) {
        super.onAttach(context);
        ctx = context;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,onDetach,void onDetach(),"[90, 95]","{'A301': [(95, 95)], 'A328': [(90, 94)]}","{'A301': 0.16666666666666666, 'A328': 0.8333333333333334}",A328,,"    @Override
    public void onDetach() {
        super.onDetach();
        ctx = null;
        prefStorageAsk.setOnPreferenceChangeListener(null);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,updatePreferencesSummary,void updatePreferencesSummary(),"[97, 102]","{'A301': [(102, 102)], 'A328': [(97, 97)], 'A294': [(98, 101)]}","{'A301': 0.16666666666666666, 'A328': 0.16666666666666666, 'A294': 0.6666666666666666}",A294,,"    private void updatePreferencesSummary() {
        showPathInSummary(downloadPathVideoPreference, R.string.download_path_summary,
                prefPathVideo);
        showPathInSummary(downloadPathAudioPreference, R.string.download_path_audio_summary,
                prefPathAudio);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,showPathInSummary,"void showPathInSummary(String,int,Preference)","[104, 115]","{'A328': [(108, 111), (115, 115)], 'A294': [(104, 105)], 'A295': [(106, 107), (112, 114)]}","{'A328': 0.4166666666666667, 'A294': 0.16666666666666666, 'A295': 0.4166666666666667}",A328,,"    private void showPathInSummary(final String prefKey, @StringRes final int defaultString,
                                   final Preference target) {
        final Uri uri = Uri.parse(defaultPreferences.getString(prefKey, """"));
        if (uri.equals(Uri.EMPTY)) {
            target.setSummary(getString(defaultString));
            return;
        }

        final String summary = ContentResolver.SCHEME_FILE.equals(uri.getScheme())
                ? uri.getPath() : uri.toString();
        target.setSummary(summary);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,isFileUri,boolean isFileUri(String),"[117, 119]","{'A328': [(118, 119)], 'A294': [(117, 117)]}","{'A328': 0.6666666666666666, 'A294': 0.3333333333333333}",A328,,"    private boolean isFileUri(final String path) {
        return path.charAt(0) == File.separatorChar || path.startsWith(ContentResolver.SCHEME_FILE);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,hasInvalidPath,boolean hasInvalidPath(String),"[121, 124]","{'A328': [(123, 124)], 'A294': [(121, 122)]}","{'A328': 0.5, 'A294': 0.5}",A328,,"    private boolean hasInvalidPath(final String prefKey) {
        final String value = defaultPreferences.getString(prefKey, null);
        return value == null || value.isEmpty();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,updatePathPickers,void updatePathPickers(boolean),"[126, 129]","{'A328': [(127, 129)], 'A294': [(126, 126)]}","{'A328': 0.75, 'A294': 0.25}",A328,,"    private void updatePathPickers(final boolean enabled) {
        prefPathVideo.setEnabled(enabled);
        prefPathAudio.setEnabled(enabled);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,forgetSAFTree,"void forgetSAFTree(Context,String)","[132, 152]","{'A328': [(133, 136), (140, 141), (143, 143), (147, 148), (150, 152)], 'A294': [(132, 132), (137, 139), (142, 142), (144, 146), (149, 149)]}","{'A328': 0.5714285714285714, 'A294': 0.42857142857142855}",A328,,"    private void forgetSAFTree(final Context context, final String oldPath) {
        if (IGNORE_RELEASE_ON_OLD_PATH) {
            return;
        }

        if (oldPath == null || oldPath.isEmpty() || isFileUri(oldPath)) {
            return;
        }

        try {
            final Uri uri = Uri.parse(oldPath);

            context.getContentResolver()
                    .releasePersistableUriPermission(uri, StoredDirectoryHelper.PERMISSION_FLAGS);
            context.revokeUriPermission(uri, StoredDirectoryHelper.PERMISSION_FLAGS);

            Log.i(TAG, ""Revoke old path permissions success on "" + oldPath);
        } catch (final Exception err) {
            Log.e(TAG, ""Error revoking old path permissions on "" + oldPath, err);
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,showMessageDialog,"void showMessageDialog(int,int)","[154, 160]","{'A301': [(160, 160)], 'A299': [(155, 159)], 'A294': [(154, 154)]}","{'A301': 0.14285714285714285, 'A299': 0.7142857142857143, 'A294': 0.14285714285714285}",A299,,"    private void showMessageDialog(@StringRes final int title, @StringRes final int message) {
        new AlertDialog.Builder(ctx)
                .setTitle(title)
                .setMessage(message)
                .setPositiveButton(getString(R.string.ok), null)
                .show();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,onPreferenceTreeClick,boolean onPreferenceTreeClick(Preference),"[162, 190]","{'A301': [(162, 162), (164, 164), (167, 168), (190, 190)], 'A328': [(170, 170), (180, 180), (185, 189)], 'A299': [(163, 163), (182, 182), (184, 184)], 'A294': [(165, 166), (169, 169), (171, 179), (181, 181), (183, 183)]}","{'A301': 0.1724137931034483, 'A328': 0.2413793103448276, 'A299': 0.10344827586206896, 'A294': 0.4827586206896552}",A294,,"    @Override
    public boolean onPreferenceTreeClick(@NonNull final Preference preference) {
        if (DEBUG) {
            Log.d(TAG, ""onPreferenceTreeClick() called with: ""
                    + ""preference = ["" + preference + ""]"");
        }

        final String key = preference.getKey();

        if (key.equals(storageUseSafPreference)) {
            if (!NewPipeSettings.useStorageAccessFramework(ctx)) {
                NewPipeSettings.saveDefaultVideoDownloadDirectory(ctx);
                NewPipeSettings.saveDefaultAudioDownloadDirectory(ctx);
            } else {
                defaultPreferences.edit().putString(downloadPathVideoPreference, null)
                        .putString(downloadPathAudioPreference, null).apply();
            }
            updatePreferencesSummary();
            return true;
        } else if (key.equals(downloadPathVideoPreference)) {
            launchDirectoryPicker(requestDownloadVideoPathLauncher);
        } else if (key.equals(downloadPathAudioPreference)) {
            launchDirectoryPicker(requestDownloadAudioPathLauncher);
        } else {
            return super.onPreferenceTreeClick(preference);
        }

        return true;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,launchDirectoryPicker,void launchDirectoryPicker(ActivityResultLauncher<Intent>),"[192, 199]","{'A299': [(192, 192), (199, 199)], 'A300': [(193, 198)]}","{'A299': 0.25, 'A300': 0.75}",A300,,"    private void launchDirectoryPicker(final ActivityResultLauncher<Intent> launcher) {
        NoFileManagerSafeGuard.launchSafe(
                launcher,
                StoredDirectoryHelper.getPicker(ctx),
                TAG,
                ctx
        );
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,requestDownloadVideoPathResult,void requestDownloadVideoPathResult(ActivityResult),"[201, 203]","{'A299': [(201, 203)]}",{'A299': 1.0},A299,,"    private void requestDownloadVideoPathResult(final ActivityResult result) {
        requestDownloadPathResult(result, downloadPathVideoPreference);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,requestDownloadAudioPathResult,void requestDownloadAudioPathResult(ActivityResult),"[205, 207]","{'A299': [(205, 207)]}",{'A299': 1.0},A299,,"    private void requestDownloadAudioPathResult(final ActivityResult result) {
        requestDownloadPathResult(result, downloadPathAudioPreference);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/DownloadSettingsFragment.java,DownloadSettingsFragment,requestDownloadPathResult,"void requestDownloadPathResult(ActivityResult,String)","[209, 261]","{'A301': [(213, 213), (257, 257), (261, 261)], 'A328': [(218, 224), (226, 226), (228, 228), (230, 233), (236, 236), (239, 240), (242, 242), (245, 249), (251, 251), (254, 256), (258, 260)], 'A299': [(209, 210), (214, 216)], 'A300': [(229, 229), (237, 238)], 'A294': [(211, 212), (217, 217), (227, 227), (234, 235), (241, 241), (243, 244), (250, 250), (252, 253)], 'A295': [(225, 225)]}","{'A301': 0.05660377358490566, 'A328': 0.5471698113207547, 'A299': 0.09433962264150944, 'A300': 0.05660377358490566, 'A294': 0.22641509433962265, 'A295': 0.018867924528301886}",A328,,"    private void requestDownloadPathResult(final ActivityResult result, final String key) {
        if (result.getResultCode() != Activity.RESULT_OK) {
            return;
        }

        Uri uri = null;
        if (result.getData() != null) {
            uri = result.getData().getData();
        }
        if (uri == null) {
            showMessageDialog(R.string.general_error, R.string.invalid_directory);
            return;
        }


        // revoke permissions on the old save path (required for SAF only)
        final Context context = requireContext();

        forgetSAFTree(context, defaultPreferences.getString(key, """"));

        if (!FilePickerActivityHelper.isOwnFileUri(context, uri)) {
            // steps to acquire the selected path:
            //     1. acquire permissions on the new save path
            //     2. save the new path, if step(2) was successful
            try {
                context.grantUriPermission(context.getPackageName(), uri,
                        StoredDirectoryHelper.PERMISSION_FLAGS);

                final StoredDirectoryHelper mainStorage =
                        new StoredDirectoryHelper(context, uri, null);
                Log.i(TAG, ""Acquiring tree success from "" + uri.toString());

                if (!mainStorage.canWrite()) {
                    throw new IOException(""No write permissions on "" + uri.toString());
                }
            } catch (final IOException err) {
                Log.e(TAG, ""Error acquiring tree from "" + uri.toString(), err);
                showMessageDialog(R.string.general_error, R.string.no_available_dir);
                return;
            }
        } else {
            final File target = Utils.getFileForUri(uri);
            if (!target.canWrite()) {
                showMessageDialog(R.string.download_to_sdcard_error_title,
                        R.string.download_to_sdcard_error_message);
                return;
            }
            uri = Uri.fromFile(target);
        }

        defaultPreferences.edit().putString(key, uri.toString()).apply();
        updatePreferencesSummary();
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BasePreferenceFragment.java,BasePreferenceFragment,onCreate,void onCreate(Bundle),"[25, 29]","{'A301': [(25, 25), (29, 29)], 'A294': [(26, 26)], 'A299': [(27, 27)], 'A302': [(28, 28)]}","{'A301': 0.4, 'A294': 0.2, 'A299': 0.2, 'A302': 0.2}",A301,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        defaultPreferences = PreferenceManager.getDefaultSharedPreferences(requireActivity());
        super.onCreate(savedInstanceState);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BasePreferenceFragment.java,BasePreferenceFragment,addPreferencesFromResourceRegistry,void addPreferencesFromResourceRegistry(),"[31, 34]","{'A300': [(31, 34)]}",{'A300': 1.0},A300,,"    protected void addPreferencesFromResourceRegistry() {
        addPreferencesFromResource(
                SettingsResourceRegistry.getInstance().getPreferencesResId(this.getClass()));
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BasePreferenceFragment.java,BasePreferenceFragment,onViewCreated,"void onViewCreated(View,Bundle)","[36, 42]","{'A301': [(36, 36), (40, 40), (42, 42)], 'A305': [(37, 39), (41, 41)]}","{'A301': 0.42857142857142855, 'A305': 0.5714285714285714}",A305,,"    @Override
    public void onViewCreated(@NonNull final View rootView,
                              @Nullable final Bundle savedInstanceState) {
        super.onViewCreated(rootView, savedInstanceState);
        setDivider(null);
        ThemeHelper.setTitleToAppCompatActivity(getActivity(), getPreferenceScreen().getTitle());
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BasePreferenceFragment.java,BasePreferenceFragment,onResume,void onResume(),"[44, 48]","{'A301': [(44, 46), (48, 48)], 'A305': [(47, 47)]}","{'A301': 0.8, 'A305': 0.2}",A301,,"    @Override
    public void onResume() {
        super.onResume();
        ThemeHelper.setTitleToAppCompatActivity(getActivity(), getPreferenceScreen().getTitle());
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/BasePreferenceFragment.java,BasePreferenceFragment,requirePreference,Preference requirePreference(int),"[50, 55]","{'A305': [(50, 55)]}",{'A305': 1.0},A305,,"    @NonNull
    public final Preference requirePreference(@StringRes final int resId) {
        final Preference preference = findPreference(getString(resId));
        Objects.requireNonNull(preference);
        return preference;
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/AppearanceSettingsFragment.java,AppearanceSettingsFragment,onCreatePreferences,"void onCreatePreferences(Bundle,String)","[18, 55]","{'A301': [(18, 18), (55, 55)], 'A310': [(41, 41)], 'A294': [(22, 22), (25, 25)], 'A299': [(19, 19)], 'A300': [(20, 20)], 'A322': [(21, 21), (23, 24), (26, 40), (42, 46), (54, 54)], 'A350': [(47, 53)]}","{'A301': 0.05263157894736842, 'A310': 0.02631578947368421, 'A294': 0.05263157894736842, 'A299': 0.02631578947368421, 'A300': 0.02631578947368421, 'A322': 0.631578947368421, 'A350': 0.18421052631578946}",A322,,"    @Override
    public void onCreatePreferences(final Bundle savedInstanceState, final String rootKey) {
        addPreferencesFromResourceRegistry();

        final String themeKey = getString(R.string.theme_key);
        // the key of the active theme when settings were opened (or recreated after theme change)
        final String startThemeKey = defaultPreferences
                .getString(themeKey, getString(R.string.default_theme_value));
        final String autoDeviceThemeKey = getString(R.string.auto_device_theme_key);
        findPreference(themeKey).setOnPreferenceChangeListener((preference, newValue) -> {
            if (newValue.toString().equals(autoDeviceThemeKey)) {
                Toast.makeText(getContext(), getString(R.string.select_night_theme_toast),
                        Toast.LENGTH_LONG).show();
            }

            applyThemeChange(startThemeKey, themeKey, newValue);
            return false;
        });

        final String nightThemeKey = getString(R.string.night_theme_key);
        if (startThemeKey.equals(autoDeviceThemeKey)) {
            final String startNightThemeKey = defaultPreferences
                    .getString(nightThemeKey, getString(R.string.default_night_theme_value));

            findPreference(nightThemeKey).setOnPreferenceChangeListener((preference, newValue) -> {
                applyThemeChange(startNightThemeKey, nightThemeKey, newValue);
                return false;
            });
        } else {
            // disable the night theme selection
            final Preference preference = findPreference(nightThemeKey);
            if (preference != null) {
                preference.setEnabled(false);
                preference.setSummary(getString(R.string.night_theme_available,
                        getString(R.string.auto_device_theme_title)));
            }
        }
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/AppearanceSettingsFragment.java,AppearanceSettingsFragment,onPreferenceTreeClick,boolean onPreferenceTreeClick(Preference),"[57, 68]","{'A297': [(60, 61), (63, 64)], 'A310': [(57, 57), (65, 68)], 'A294': [(58, 58), (62, 62)], 'A305': [(59, 59)]}","{'A297': 0.3333333333333333, 'A310': 0.4166666666666667, 'A294': 0.16666666666666666, 'A305': 0.08333333333333333}",A310,,"    @Override
    public boolean onPreferenceTreeClick(final Preference preference) {
        if (getString(R.string.caption_settings_key).equals(preference.getKey())) {
            try {
                startActivity(new Intent(Settings.ACTION_CAPTIONING_SETTINGS));
            } catch (final ActivityNotFoundException e) {
                Toast.makeText(getActivity(), R.string.general_error, Toast.LENGTH_SHORT).show();
            }
        }

        return super.onPreferenceTreeClick(preference);
    }
"
org.schabi.newpipe.settings,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/settings/AppearanceSettingsFragment.java,AppearanceSettingsFragment,applyThemeChange,"void applyThemeChange(String,String,Object)","[70, 82]","{'A312': [(77, 77)], 'A300': [(76, 76)], 'A322': [(70, 75), (78, 82)]}","{'A312': 0.07692307692307693, 'A300': 0.07692307692307693, 'A322': 0.8461538461538461}",A322,,"    private void applyThemeChange(final String beginningThemeKey,
                                  final String themeKey,
                                  final Object newValue) {
        defaultPreferences.edit().putBoolean(Constants.KEY_THEME_CHANGE, true).apply();
        defaultPreferences.edit().putString(themeKey, newValue.toString()).apply();

        ThemeHelper.setDayNightMode(requireContext(), newValue.toString());

        if (!newValue.equals(beginningThemeKey) && getActivity() != null) {
            // if it's not the current theme
            ActivityCompat.recreate(getActivity());
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getQualityResolver,VideoPlaybackResolver.QualityResolver getQualityResolver(),"[320, 337]","{'A305': [(320, 337)]}",{'A305': 1.0},A305,,"    private VideoPlaybackResolver.QualityResolver getQualityResolver() {
        return new VideoPlaybackResolver.QualityResolver() {
            @Override
            public int getDefaultResolutionIndex(final List<VideoStream> sortedVideos) {
                return videoPlayerSelected()
                        ? ListHelper.getDefaultResolutionIndex(context, sortedVideos)
                        : ListHelper.getPopupDefaultResolutionIndex(context, sortedVideos);
            }

            @Override
            public int getOverrideResolutionIndex(final List<VideoStream> sortedVideos,
                                                  final String playbackQuality) {
                return videoPlayerSelected()
                        ? getResolutionIndex(context, sortedVideos, playbackQuality)
                        : getPopupResolutionIndex(context, sortedVideos, playbackQuality);
            }
        };
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getDefaultResolutionIndex,int getDefaultResolutionIndex(List<VideoStream>),"[322, 327]","{'A305': [(322, 327)]}",{'A305': 1.0},A305,,"            @Override
            public int getDefaultResolutionIndex(final List<VideoStream> sortedVideos) {
                return videoPlayerSelected()
                        ? ListHelper.getDefaultResolutionIndex(context, sortedVideos)
                        : ListHelper.getPopupDefaultResolutionIndex(context, sortedVideos);
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getOverrideResolutionIndex,"int getOverrideResolutionIndex(List<VideoStream>,String)","[329, 335]","{'A305': [(329, 335)]}",{'A305': 1.0},A305,,"            @Override
            public int getOverrideResolutionIndex(final List<VideoStream> sortedVideos,
                                                  final String playbackQuality) {
                return videoPlayerSelected()
                        ? getResolutionIndex(context, sortedVideos, playbackQuality)
                        : getPopupResolutionIndex(context, sortedVideos, playbackQuality);
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,handleIntent,void handleIntent(Intent),"[347, 480]","{'A305': [(347, 365), (367, 368), (371, 371), (379, 384), (387, 387), (389, 393), (395, 408), (410, 411), (413, 422), (424, 425), (427, 430), (432, 448), (450, 452), (454, 456), (458, 459), (465, 468), (470, 480)], 'A288': [(385, 386), (409, 409), (412, 412), (423, 423), (426, 426)], 'A300': [(394, 394), (453, 453)], 'A343': [(431, 431)], 'A384': [(369, 370), (372, 373), (375, 378)], 'A386': [(366, 366), (374, 374)], 'A350': [(388, 388)], 'A388': [(449, 449), (457, 457), (462, 462), (469, 469)], 'A296': [(460, 461), (463, 464)]}","{'A305': 0.7910447761194029, 'A288': 0.04477611940298507, 'A300': 0.014925373134328358, 'A343': 0.007462686567164179, 'A384': 0.05970149253731343, 'A386': 0.014925373134328358, 'A350': 0.007462686567164179, 'A388': 0.029850746268656716, 'A296': 0.029850746268656716}",A305,,"    @SuppressWarnings(""MethodLength"")
    public void handleIntent(@NonNull final Intent intent) {
        // fail fast if no play queue was provided
        final String queueCache = intent.getStringExtra(PLAY_QUEUE_KEY);
        if (queueCache == null) {
            return;
        }
        final PlayQueue newQueue = SerializedCache.getInstance().take(queueCache, PlayQueue.class);
        if (newQueue == null) {
            return;
        }

        final PlayerType oldPlayerType = playerType;
        playerType = PlayerType.retrieveFromIntent(intent);
        initUIsForCurrentPlayerType();
        // We need to setup audioOnly before super(), see ""sourceOf""
        isAudioOnly = audioPlayerSelected();

        if (intent.hasExtra(PLAYBACK_QUALITY)) {
            videoResolver.setPlaybackQuality(intent.getStringExtra(PLAYBACK_QUALITY));
        }

        // Resolve enqueue intents
        if (intent.getBooleanExtra(ENQUEUE, false) && playQueue != null) {
            playQueue.append(newQueue.getStreams());
            return;

            // Resolve enqueue next intents
        } else if (intent.getBooleanExtra(ENQUEUE_NEXT, false) && playQueue != null) {
            final int currentIndex = playQueue.getIndex();
            playQueue.append(newQueue.getStreams());
            playQueue.move(playQueue.size() - 1, currentIndex + 1);
            return;
        }

        final PlaybackParameters savedParameters = retrievePlaybackParametersFromPrefs(this);
        final float playbackSpeed = savedParameters.speed;
        final float playbackPitch = savedParameters.pitch;
        final boolean playbackSkipSilence = getPrefs().getBoolean(getContext().getString(
                R.string.playback_skip_silence_key), getPlaybackSkipSilence());

        final boolean samePlayQueue = playQueue != null && playQueue.equalStreamsAndIndex(newQueue);
        final int repeatMode = intent.getIntExtra(REPEAT_MODE, getRepeatMode());
        final boolean playWhenReady = intent.getBooleanExtra(PLAY_WHEN_READY, true);
        final boolean isMuted = intent.getBooleanExtra(IS_MUTED, isMuted());

        /*
         * TODO As seen in #7427 this does not work:
         * There are 3 situations when playback shouldn't be started from scratch (zero timestamp):
         * 1. User pressed on a timestamp link and the same video should be rewound to the timestamp
         * 2. User changed a player from, for example. main to popup, or from audio to main, etc
         * 3. User chose to resume a video based on a saved timestamp from history of played videos
         * In those cases time will be saved because re-init of the play queue is a not an instant
         *  task and requires network calls
         * */
        // seek to timestamp if stream is already playing
        if (!exoPlayerIsNull()
                && newQueue.size() == 1 && newQueue.getItem() != null
                && playQueue != null && playQueue.size() == 1 && playQueue.getItem() != null
                && newQueue.getItem().getUrl().equals(playQueue.getItem().getUrl())
                && newQueue.getItem().getRecoveryPosition() != PlayQueueItem.RECOVERY_UNSET) {
            // Player can have state = IDLE when playback is stopped or failed
            // and we should retry in this case
            if (simpleExoPlayer.getPlaybackState()
                    == com.google.android.exoplayer2.Player.STATE_IDLE) {
                simpleExoPlayer.prepare();
            }
            simpleExoPlayer.seekTo(playQueue.getIndex(), newQueue.getItem().getRecoveryPosition());
            simpleExoPlayer.setPlayWhenReady(playWhenReady);

        } else if (!exoPlayerIsNull()
                && samePlayQueue
                && playQueue != null
                && !playQueue.isDisposed()) {
            // Do not re-init the same PlayQueue. Save time
            // Player can have state = IDLE when playback is stopped or failed
            // and we should retry in this case
            if (simpleExoPlayer.getPlaybackState()
                    == com.google.android.exoplayer2.Player.STATE_IDLE) {
                simpleExoPlayer.prepare();
            }
            simpleExoPlayer.setPlayWhenReady(playWhenReady);

        } else if (intent.getBooleanExtra(RESUME_PLAYBACK, false)
                && DependentPreferenceHelper.getResumePlaybackEnabled(context)
                && !samePlayQueue
                && !newQueue.isEmpty()
                && newQueue.getItem() != null
                && newQueue.getItem().getRecoveryPosition() == PlayQueueItem.RECOVERY_UNSET) {
            databaseUpdateDisposable.add(recordManager.loadStreamState(newQueue.getItem())
                    .observeOn(AndroidSchedulers.mainThread())
                    // Do not place initPlayback() in doFinally() because
                    // it restarts playback after destroy()
                    //.doFinally()
                    .subscribe(
                            state -> {
                                if (!state.isFinished(newQueue.getItem().getDuration())) {
                                    // resume playback only if the stream was not played to the end
                                    newQueue.setRecovery(newQueue.getIndex(),
                                            state.getProgressMillis());
                                }
                                initPlayback(newQueue, repeatMode, playbackSpeed, playbackPitch,
                                        playbackSkipSilence, playWhenReady, isMuted);
                            },
                            error -> {
                                if (DEBUG) {
                                    Log.w(TAG, ""Failed to start playback"", error);
                                }
                                // In case any error we can start playback without history
                                initPlayback(newQueue, repeatMode, playbackSpeed, playbackPitch,
                                        playbackSkipSilence, playWhenReady, isMuted);
                            },
                            () -> {
                                // Completed but not found in history
                                initPlayback(newQueue, repeatMode, playbackSpeed, playbackPitch,
                                        playbackSkipSilence, playWhenReady, isMuted);
                            }
                    ));
        } else {
            // Good to go...
            // In a case of equal PlayQueues we can re-init old one but only when it is disposed
            initPlayback(samePlayQueue ? playQueue : newQueue, repeatMode, playbackSpeed,
                    playbackPitch, playbackSkipSilence, playWhenReady, isMuted);
        }

        if (oldPlayerType != playerType && playQueue != null) {
            // If playerType changes from one to another we should reload the player
            // (to disable/enable video stream or to set quality)
            reloadPlayQueueManager();
        }

        UIs.call(PlayerUi::setupAfterIntent);
        NavigationHelper.sendPlayerStartedEvent(context);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,initUIsForCurrentPlayerType,void initUIsForCurrentPlayerType(),"[482, 512]","{'A305': [(482, 512)]}",{'A305': 1.0},A305,,"    private void initUIsForCurrentPlayerType() {
        if ((UIs.get(MainPlayerUi.class).isPresent() && playerType == PlayerType.MAIN)
                || (UIs.get(PopupPlayerUi.class).isPresent() && playerType == PlayerType.POPUP)) {
            // correct UI already in place
            return;
        }

        // try to reuse binding if possible
        final PlayerBinding binding = UIs.get(VideoPlayerUi.class).map(VideoPlayerUi::getBinding)
                .orElseGet(() -> {
                    if (playerType == PlayerType.AUDIO) {
                        return null;
                    } else {
                        return PlayerBinding.inflate(LayoutInflater.from(context));
                    }
                });

        switch (playerType) {
            case MAIN:
                UIs.destroyAll(PopupPlayerUi.class);
                UIs.addAndPrepare(new MainPlayerUi(this, binding));
                break;
            case POPUP:
                UIs.destroyAll(MainPlayerUi.class);
                UIs.addAndPrepare(new PopupPlayerUi(this, binding));
                break;
            case AUDIO:
                UIs.destroyAll(VideoPlayerUi.class);
                break;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,initPlayback,"void initPlayback(PlayQueue,int,float,float,boolean,boolean,boolean)","[514, 534]","{'A305': [(514, 519), (521, 534)], 'A388': [(520, 520)]}","{'A305': 0.9523809523809523, 'A388': 0.047619047619047616}",A305,,"    private void initPlayback(@NonNull final PlayQueue queue,
                              @RepeatMode final int repeatMode,
                              final float playbackSpeed,
                              final float playbackPitch,
                              final boolean playbackSkipSilence,
                              final boolean playOnReady,
                              final boolean isMuted) {
        destroyPlayer();
        initPlayer(playOnReady);
        setRepeatMode(repeatMode);
        setPlaybackParameters(playbackSpeed, playbackPitch, playbackSkipSilence);

        playQueue = queue;
        playQueue.init();
        reloadPlayQueueManager();

        UIs.call(PlayerUi::initPlayback);

        simpleExoPlayer.setVolume(isMuted ? 0 : 1);
        notifyQueueUpdateToListeners();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,initPlayer,void initPlayer(boolean),"[536, 565]","{'A305': [(536, 558), (561, 565)], 'A333': [(559, 560)]}","{'A305': 0.9333333333333333, 'A333': 0.06666666666666667}",A305,,"    private void initPlayer(final boolean playOnReady) {
        if (DEBUG) {
            Log.d(TAG, ""initPlayer() called with: playOnReady = ["" + playOnReady + ""]"");
        }

        simpleExoPlayer = new ExoPlayer.Builder(context, renderFactory)
                .setTrackSelector(trackSelector)
                .setLoadControl(loadController)
                .setUsePlatformDiagnostics(false)
                .build();
        simpleExoPlayer.addListener(this);
        simpleExoPlayer.setPlayWhenReady(playOnReady);
        simpleExoPlayer.setSeekParameters(PlayerHelper.getSeekParameters(context));
        simpleExoPlayer.setWakeMode(C.WAKE_MODE_NETWORK);
        simpleExoPlayer.setHandleAudioBecomingNoisy(true);

        audioReactor = new AudioReactor(context, simpleExoPlayer);

        registerBroadcastReceiver();

        // Setup UIs
        UIs.call(PlayerUi::initPlayer);

        // Disable media tunneling if requested by the user from ExoPlayer settings
        if (!PreferenceManager.getDefaultSharedPreferences(context)
                .getBoolean(context.getString(R.string.disable_media_tunneling_key), false)) {
            trackSelector.setParameters(trackSelector.buildUponParameters()
                    .setTunnelingEnabled(true));
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,destroyPlayer,void destroyPlayer(),"[575, 598]","{'A305': [(575, 579), (581, 598)], 'A320': [(580, 580)]}","{'A305': 0.9583333333333334, 'A320': 0.041666666666666664}",A305,,"    private void destroyPlayer() {
        if (DEBUG) {
            Log.d(TAG, ""destroyPlayer() called"");
        }
        UIs.call(PlayerUi::destroyPlayer);

        if (!exoPlayerIsNull()) {
            simpleExoPlayer.removeListener(this);
            simpleExoPlayer.stop();
            simpleExoPlayer.release();
        }
        if (isProgressLoopRunning()) {
            stopProgressLoop();
        }
        if (playQueue != null) {
            playQueue.dispose();
        }
        if (audioReactor != null) {
            audioReactor.dispose();
        }
        if (playQueueManager != null) {
            playQueueManager.dispose();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,destroy,void destroy(),"[600, 617]","{'A305': [(600, 617)]}",{'A305': 1.0},A305,,"    public void destroy() {
        if (DEBUG) {
            Log.d(TAG, ""destroy() called"");
        }

        saveStreamProgressState();
        setRecovery();
        stopActivityBinding();

        destroyPlayer();
        unregisterBroadcastReceiver();

        databaseUpdateDisposable.clear();
        progressUpdateDisposable.set(null);
        cancelLoadingCurrentThumbnail();

        UIs.destroyAll(Object.class); // destroy every UI: obviously every UI extends Object
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setRecovery,void setRecovery(),"[619, 630]","{'A305': [(619, 625), (627, 627), (630, 630)], 'A300': [(626, 626), (628, 628)], 'A295': [(629, 629)]}","{'A305': 0.75, 'A300': 0.16666666666666666, 'A295': 0.08333333333333333}",A305,,"    public void setRecovery() {
        if (playQueue == null || exoPlayerIsNull()) {
            return;
        }

        final int queuePos = playQueue.getIndex();
        final long windowPos = simpleExoPlayer.getCurrentPosition();
        final long duration = simpleExoPlayer.getDuration();

        // No checks due to https://github.com/TeamNewPipe/NewPipe/pull/7195#issuecomment-962624380
        setRecovery(queuePos, MathUtils.clamp(windowPos, 0, duration));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setRecovery,"void setRecovery(int,long)","[632, 641]","{'A305': [(632, 641)]}",{'A305': 1.0},A305,,"    private void setRecovery(final int queuePos, final long windowPos) {
        if (playQueue == null || playQueue.size() <= queuePos) {
            return;
        }

        if (DEBUG) {
            Log.d(TAG, ""Setting recovery, queue: "" + queuePos + "", pos: "" + windowPos);
        }
        playQueue.setRecovery(queuePos, windowPos);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,reloadPlayQueueManager,void reloadPlayQueueManager(),"[643, 651]","{'A305': [(643, 651)]}",{'A305': 1.0},A305,,"    public void reloadPlayQueueManager() {
        if (playQueueManager != null) {
            playQueueManager.dispose();
        }

        if (playQueue != null) {
            playQueueManager = new MediaSourceManager(this, playQueue);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaybackShutdown,void onPlaybackShutdown(),"[653, 660]","{'A305': [(653, 660)]}",{'A305': 1.0},A305,,"    @Override // own playback listener
    public void onPlaybackShutdown() {
        if (DEBUG) {
            Log.d(TAG, ""onPlaybackShutdown() called"");
        }
        // destroys the service, which in turn will destroy the player
        service.destroyPlayerAndStopService();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,smoothStopForImmediateReusing,void smoothStopForImmediateReusing(),"[662, 667]","{'A305': [(662, 663), (665, 667)], 'A288': [(664, 664)]}","{'A305': 0.8333333333333334, 'A288': 0.16666666666666666}",A305,,"    public void smoothStopForImmediateReusing() {
        // Pausing would make transition from one stream to a new stream not smooth, so only stop
        simpleExoPlayer.stop();
        setRecovery();
        UIs.call(PlayerUi::smoothStopForImmediateReusing);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setupBroadcastReceiver,void setupBroadcastReceiver(),"[683, 715]","{'A305': [(683, 715)]}",{'A305': 1.0},A305,,"    private void setupBroadcastReceiver() {
        if (DEBUG) {
            Log.d(TAG, ""setupBroadcastReceiver() called"");
        }

        broadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(final Context ctx, final Intent intent) {
                onBroadcastReceived(intent);
            }
        };
        intentFilter = new IntentFilter();

        intentFilter.addAction(AudioManager.ACTION_AUDIO_BECOMING_NOISY);

        intentFilter.addAction(ACTION_CLOSE);
        intentFilter.addAction(ACTION_PLAY_PAUSE);
        intentFilter.addAction(ACTION_PLAY_PREVIOUS);
        intentFilter.addAction(ACTION_PLAY_NEXT);
        intentFilter.addAction(ACTION_FAST_REWIND);
        intentFilter.addAction(ACTION_FAST_FORWARD);
        intentFilter.addAction(ACTION_REPEAT);
        intentFilter.addAction(ACTION_SHUFFLE);
        intentFilter.addAction(ACTION_RECREATE_NOTIFICATION);

        intentFilter.addAction(VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED);
        intentFilter.addAction(VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED);

        intentFilter.addAction(Intent.ACTION_CONFIGURATION_CHANGED);
        intentFilter.addAction(Intent.ACTION_SCREEN_ON);
        intentFilter.addAction(Intent.ACTION_SCREEN_OFF);
        intentFilter.addAction(Intent.ACTION_HEADSET_PLUG);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onReceive,"void onReceive(Context,Intent)","[689, 692]","{'A305': [(689, 692)]}",{'A305': 1.0},A305,,"            @Override
            public void onReceive(final Context ctx, final Intent intent) {
                onBroadcastReceived(intent);
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onBroadcastReceived,void onBroadcastReceived(Intent),"[717, 762]","{'A305': [(717, 762)]}",{'A305': 1.0},A305,,"    private void onBroadcastReceived(final Intent intent) {
        if (intent == null || intent.getAction() == null) {
            return;
        }

        if (DEBUG) {
            Log.d(TAG, ""onBroadcastReceived() called with: intent = ["" + intent + ""]"");
        }

        switch (intent.getAction()) {
            case AudioManager.ACTION_AUDIO_BECOMING_NOISY:
                pause();
                break;
            case ACTION_CLOSE:
                service.destroyPlayerAndStopService();
                break;
            case ACTION_PLAY_PAUSE:
                playPause();
                break;
            case ACTION_PLAY_PREVIOUS:
                playPrevious();
                break;
            case ACTION_PLAY_NEXT:
                playNext();
                break;
            case ACTION_FAST_REWIND:
                fastRewind();
                break;
            case ACTION_FAST_FORWARD:
                fastForward();
                break;
            case ACTION_REPEAT:
                cycleNextRepeatMode();
                break;
            case ACTION_SHUFFLE:
                toggleShuffleModeEnabled();
                break;
            case Intent.ACTION_CONFIGURATION_CHANGED:
                if (DEBUG) {
                    Log.d(TAG, ""ACTION_CONFIGURATION_CHANGED received"");
                }
                break;
        }

        UIs.call(playerUi -> playerUi.onBroadcastReceived(intent));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,registerBroadcastReceiver,void registerBroadcastReceiver(),"[764, 768]","{'A305': [(764, 768)]}",{'A305': 1.0},A305,,"    private void registerBroadcastReceiver() {
        // Try to unregister current first
        unregisterBroadcastReceiver();
        context.registerReceiver(broadcastReceiver, intentFilter);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,unregisterBroadcastReceiver,void unregisterBroadcastReceiver(),"[770, 777]","{'A305': [(770, 777)]}",{'A305': 1.0},A305,,"    private void unregisterBroadcastReceiver() {
        try {
            context.unregisterReceiver(broadcastReceiver);
        } catch (final IllegalArgumentException unregisteredException) {
            Log.w(TAG, ""Broadcast receiver already unregistered: ""
                    + unregisteredException.getMessage());
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getCurrentThumbnailTarget,Target getCurrentThumbnailTarget(),"[787, 815]","{'A305': [(787, 815)]}",{'A305': 1.0},A305,,"    private Target getCurrentThumbnailTarget() {
        // a Picasso target is just a listener for thumbnail loading events
        return new Target() {
            @Override
            public void onBitmapLoaded(final Bitmap bitmap, final Picasso.LoadedFrom from) {
                if (DEBUG) {
                    Log.d(TAG, ""Thumbnail - onBitmapLoaded() called with: bitmap = ["" + bitmap
                            + "" -> "" + bitmap.getWidth() + ""x"" + bitmap.getHeight() + ""], from = [""
                            + from + ""]"");
                }
                // there is a new thumbnail, so e.g. the end screen thumbnail needs to change, too.
                onThumbnailLoaded(bitmap);
            }

            @Override
            public void onBitmapFailed(final Exception e, final Drawable errorDrawable) {
                Log.e(TAG, ""Thumbnail - onBitmapFailed() called"", e);
                // there is a new thumbnail, so e.g. the end screen thumbnail needs to change, too.
                onThumbnailLoaded(null);
            }

            @Override
            public void onPrepareLoad(final Drawable placeHolderDrawable) {
                if (DEBUG) {
                    Log.d(TAG, ""Thumbnail - onPrepareLoad() called"");
                }
            }
        };
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onBitmapLoaded,"void onBitmapLoaded(Bitmap,Picasso.LoadedFrom)","[790, 799]","{'A305': [(790, 799)]}",{'A305': 1.0},A305,,"            @Override
            public void onBitmapLoaded(final Bitmap bitmap, final Picasso.LoadedFrom from) {
                if (DEBUG) {
                    Log.d(TAG, ""Thumbnail - onBitmapLoaded() called with: bitmap = ["" + bitmap
                            + "" -> "" + bitmap.getWidth() + ""x"" + bitmap.getHeight() + ""], from = [""
                            + from + ""]"");
                }
                // there is a new thumbnail, so e.g. the end screen thumbnail needs to change, too.
                onThumbnailLoaded(bitmap);
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onBitmapFailed,"void onBitmapFailed(Exception,Drawable)","[801, 806]","{'A305': [(801, 806)]}",{'A305': 1.0},A305,,"            @Override
            public void onBitmapFailed(final Exception e, final Drawable errorDrawable) {
                Log.e(TAG, ""Thumbnail - onBitmapFailed() called"", e);
                // there is a new thumbnail, so e.g. the end screen thumbnail needs to change, too.
                onThumbnailLoaded(null);
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPrepareLoad,void onPrepareLoad(Drawable),"[808, 813]","{'A305': [(808, 813)]}",{'A305': 1.0},A305,,"            @Override
            public void onPrepareLoad(final Drawable placeHolderDrawable) {
                if (DEBUG) {
                    Log.d(TAG, ""Thumbnail - onPrepareLoad() called"");
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,loadCurrentThumbnail,void loadCurrentThumbnail(List<Image>),"[817, 837]","{'A305': [(817, 837)]}",{'A305': 1.0},A305,,"    private void loadCurrentThumbnail(final List<Image> thumbnails) {
        if (DEBUG) {
            Log.d(TAG, ""Thumbnail - loadCurrentThumbnail() called with thumbnails = [""
                    + thumbnails.size() + ""]"");
        }

        // first cancel any previous loading
        cancelLoadingCurrentThumbnail();

        // Unset currentThumbnail, since it is now outdated. This ensures it is not used in media
        // session metadata while the new thumbnail is being loaded by Picasso.
        onThumbnailLoaded(null);
        if (thumbnails.isEmpty()) {
            return;
        }

        // scale down the notification thumbnail for performance
        PicassoHelper.loadScaledDownThumbnail(context, thumbnails)
                .tag(PICASSO_PLAYER_THUMBNAIL_TAG)
                .into(currentThumbnailTarget);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,cancelLoadingCurrentThumbnail,void cancelLoadingCurrentThumbnail(),"[839, 842]","{'A305': [(839, 842)]}",{'A305': 1.0},A305,,"    private void cancelLoadingCurrentThumbnail() {
        // cancel the Picasso job associated with the player thumbnail, if any
        PicassoHelper.cancelTag(PICASSO_PLAYER_THUMBNAIL_TAG);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onThumbnailLoaded,void onThumbnailLoaded(Bitmap),"[844, 852]","{'A305': [(844, 852)]}",{'A305': 1.0},A305,,"    private void onThumbnailLoaded(@Nullable final Bitmap bitmap) {
        // Avoid useless thumbnail updates, if the thumbnail has not actually changed. Based on the
        // thumbnail loading code, this if would be skipped only when both bitmaps are `null`, since
        // onThumbnailLoaded won't be called twice with the same nonnull bitmap by Picasso's target.
        if (currentThumbnail != bitmap) {
            currentThumbnail = bitmap;
            UIs.call(playerUi -> playerUi.onThumbnailLoaded(bitmap));
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlaybackSpeed,float getPlaybackSpeed(),"[862, 864]","{'A305': [(862, 864)]}",{'A305': 1.0},A305,,"    public float getPlaybackSpeed() {
        return getPlaybackParameters().speed;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setPlaybackSpeed,void setPlaybackSpeed(float),"[866, 868]","{'A305': [(866, 868)]}",{'A305': 1.0},A305,,"    public void setPlaybackSpeed(final float speed) {
        setPlaybackParameters(speed, getPlaybackPitch(), getPlaybackSkipSilence());
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlaybackPitch,float getPlaybackPitch(),"[870, 872]","{'A305': [(870, 872)]}",{'A305': 1.0},A305,,"    public float getPlaybackPitch() {
        return getPlaybackParameters().pitch;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlaybackSkipSilence,boolean getPlaybackSkipSilence(),"[874, 876]","{'A305': [(874, 874), (876, 876)], 'A383': [(875, 875)]}","{'A305': 0.6666666666666666, 'A383': 0.3333333333333333}",A305,,"    public boolean getPlaybackSkipSilence() {
        return !exoPlayerIsNull() && simpleExoPlayer.getSkipSilenceEnabled();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlaybackParameters,PlaybackParameters getPlaybackParameters(),"[878, 883]","{'A305': [(878, 883)]}",{'A305': 1.0},A305,,"    public PlaybackParameters getPlaybackParameters() {
        if (exoPlayerIsNull()) {
            return PlaybackParameters.DEFAULT;
        }
        return simpleExoPlayer.getPlaybackParameters();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setPlaybackParameters,"void setPlaybackParameters(float,float,boolean)","[893, 902]","{'A305': [(893, 899), (902, 902)], 'A383': [(901, 901)], 'A288': [(900, 900)]}","{'A305': 0.8, 'A383': 0.1, 'A288': 0.1}",A305,,"    public void setPlaybackParameters(final float speed, final float pitch,
                                      final boolean skipSilence) {
        final float roundedSpeed = Math.round(speed * 100.0f) / 100.0f;
        final float roundedPitch = Math.round(pitch * 100.0f) / 100.0f;

        savePlaybackParametersToPrefs(this, roundedSpeed, roundedPitch, skipSilence);
        simpleExoPlayer.setPlaybackParameters(
                new PlaybackParameters(roundedSpeed, roundedPitch));
        simpleExoPlayer.setSkipSilenceEnabled(skipSilence);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onUpdateProgress,"void onUpdateProgress(int,int,int)","[912, 919]","{'A305': [(912, 917), (919, 919)], 'A332': [(918, 918)]}","{'A305': 0.875, 'A332': 0.125}",A305,,"    private void onUpdateProgress(final int currentProgress,
                                  final int duration,
                                  final int bufferPercent) {
        if (isPrepared) {
            UIs.call(ui -> ui.onUpdateProgress(currentProgress, duration, bufferPercent));
            notifyProgressUpdateToListeners(currentProgress, duration, bufferPercent);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,startProgressLoop,void startProgressLoop(),"[921, 923]","{'A305': [(921, 923)]}",{'A305': 1.0},A305,,"    public void startProgressLoop() {
        progressUpdateDisposable.set(getProgressUpdateDisposable());
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,stopProgressLoop,void stopProgressLoop(),"[925, 927]","{'A305': [(925, 927)]}",{'A305': 1.0},A305,,"    private void stopProgressLoop() {
        progressUpdateDisposable.set(null);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isProgressLoopRunning,boolean isProgressLoopRunning(),"[929, 931]","{'A305': [(929, 931)]}",{'A305': 1.0},A305,,"    public boolean isProgressLoopRunning() {
        return progressUpdateDisposable.get() != null;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,triggerProgressUpdate,void triggerProgressUpdate(),"[933, 940]","{'A305': [(933, 936), (940, 940)], 'A333': [(937, 939)]}","{'A305': 0.625, 'A333': 0.375}",A305,,"    public void triggerProgressUpdate() {
        if (exoPlayerIsNull()) {
            return;
        }

        onUpdateProgress(Math.max((int) simpleExoPlayer.getCurrentPosition(), 0),
                (int) simpleExoPlayer.getDuration(), simpleExoPlayer.getBufferedPercentage());
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getProgressUpdateDisposable,Disposable getProgressUpdateDisposable(),"[942, 948]","{'A305': [(942, 943), (945, 948)], 'A386': [(944, 944)]}","{'A305': 0.8571428571428571, 'A386': 0.14285714285714285}",A305,,"    private Disposable getProgressUpdateDisposable() {
        return Observable.interval(PROGRESS_LOOP_INTERVAL_MILLIS, MILLISECONDS,
                        AndroidSchedulers.mainThread())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> triggerProgressUpdate(),
                        error -> Log.e(TAG, ""Progress update failure: "", error));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlayWhenReadyChanged,"void onPlayWhenReadyChanged(boolean,int)","[957, 968]","{'A383': [(957, 968)]}",{'A383': 1.0},A383,,"    @Override
    public void onPlayWhenReadyChanged(final boolean playWhenReady, final int reason) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - onPlayWhenReadyChanged() called with: ""
                    + ""playWhenReady = ["" + playWhenReady + ""], ""
                    + ""reason = ["" + reason + ""]"");
        }
        final int playbackState = exoPlayerIsNull()
                ? com.google.android.exoplayer2.Player.STATE_IDLE
                : simpleExoPlayer.getPlaybackState();
        updatePlaybackState(playWhenReady, playbackState);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaybackStateChanged,void onPlaybackStateChanged(int),"[970, 977]","{'A383': [(970, 977)]}",{'A383': 1.0},A383,,"    @Override
    public void onPlaybackStateChanged(final int playbackState) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - onPlaybackStateChanged() called with: ""
                    + ""playbackState = ["" + playbackState + ""]"");
        }
        updatePlaybackState(getPlayWhenReady(), playbackState);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,updatePlaybackState,"void updatePlaybackState(boolean,int)","[979, 1015]","{'A305': [(980, 987), (989, 1015)], 'A383': [(979, 979), (988, 988)]}","{'A305': 0.9459459459459459, 'A383': 0.05405405405405406}",A305,,"    private void updatePlaybackState(final boolean playWhenReady, final int playbackState) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - updatePlaybackState() called with: ""
                    + ""playWhenReady = ["" + playWhenReady + ""], ""
                    + ""playbackState = ["" + playbackState + ""]"");
        }

        if (currentState == STATE_PAUSED_SEEK) {
            if (DEBUG) {
                Log.d(TAG, ""updatePlaybackState() is currently blocked"");
            }
            return;
        }

        switch (playbackState) {
            case com.google.android.exoplayer2.Player.STATE_IDLE: // 1
                isPrepared = false;
                break;
            case com.google.android.exoplayer2.Player.STATE_BUFFERING: // 2
                if (isPrepared) {
                    changeState(STATE_BUFFERING);
                }
                break;
            case com.google.android.exoplayer2.Player.STATE_READY: //3
                if (!isPrepared) {
                    isPrepared = true;
                    onPrepared(playWhenReady);
                }
                changeState(playWhenReady ? STATE_PLAYING : STATE_PAUSED);
                break;
            case com.google.android.exoplayer2.Player.STATE_ENDED: // 4
                changeState(STATE_COMPLETED);
                saveStreamProgressStateCompleted();
                isPrepared = false;
                break;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onIsLoadingChanged,void onIsLoadingChanged(boolean),"[1017, 1024]","{'A305': [(1017, 1017), (1019, 1024)], 'A288': [(1018, 1018)]}","{'A305': 0.875, 'A288': 0.125}",A305,,"    @Override // exoplayer listener
    public void onIsLoadingChanged(final boolean isLoading) {
        if (!isLoading && currentState == STATE_PAUSED && isProgressLoopRunning()) {
            stopProgressLoop();
        } else if (isLoading && !isProgressLoopRunning()) {
            startProgressLoop();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaybackBlock,void onPlaybackBlock(),"[1026, 1041]","{'A305': [(1026, 1041)]}",{'A305': 1.0},A305,,"    @Override // own playback listener
    public void onPlaybackBlock() {
        if (exoPlayerIsNull()) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, ""Playback - onPlaybackBlock() called"");
        }

        currentItem = null;
        currentMetadata = null;
        simpleExoPlayer.stop();
        isPrepared = false;

        changeState(STATE_BLOCKED);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaybackUnblock,void onPlaybackUnblock(MediaSource),"[1043, 1057]","{'A305': [(1043, 1054), (1057, 1057)], 'A288': [(1056, 1056)], 'A293': [(1055, 1055)]}","{'A305': 0.8666666666666667, 'A288': 0.06666666666666667, 'A293': 0.06666666666666667}",A305,,"    @Override // own playback listener
    public void onPlaybackUnblock(final MediaSource mediaSource) {
        if (DEBUG) {
            Log.d(TAG, ""Playback - onPlaybackUnblock() called"");
        }

        if (exoPlayerIsNull()) {
            return;
        }
        if (currentState == STATE_BLOCKED) {
            changeState(STATE_BUFFERING);
        }
        simpleExoPlayer.setMediaSource(mediaSource, false);
        simpleExoPlayer.prepare();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,changeState,void changeState(int),"[1059, 1085]","{'A305': [(1059, 1085)]}",{'A305': 1.0},A305,,"    public void changeState(final int state) {
        if (DEBUG) {
            Log.d(TAG, ""changeState() called with: state = ["" + state + ""]"");
        }
        currentState = state;
        switch (state) {
            case STATE_BLOCKED:
                onBlocked();
                break;
            case STATE_PLAYING:
                onPlaying();
                break;
            case STATE_BUFFERING:
                onBuffering();
                break;
            case STATE_PAUSED:
                onPaused();
                break;
            case STATE_PAUSED_SEEK:
                onPausedSeek();
                break;
            case STATE_COMPLETED:
                onCompleted();
                break;
        }
        notifyPlaybackUpdateToListeners();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPrepared,void onPrepared(boolean),"[1087, 1097]","{'A305': [(1087, 1093), (1095, 1097)], 'A389': [(1094, 1094)]}","{'A305': 0.9090909090909091, 'A389': 0.09090909090909091}",A305,,"    private void onPrepared(final boolean playWhenReady) {
        if (DEBUG) {
            Log.d(TAG, ""onPrepared() called with: playWhenReady = ["" + playWhenReady + ""]"");
        }

        UIs.call(PlayerUi::onPrepared);

        if (playWhenReady && !isMuted()) {
            audioReactor.requestAudioFocus();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onBlocked,void onBlocked(),"[1099, 1108]","{'A305': [(1099, 1108)]}",{'A305': 1.0},A305,,"    private void onBlocked() {
        if (DEBUG) {
            Log.d(TAG, ""onBlocked() called"");
        }
        if (!isProgressLoopRunning()) {
            startProgressLoop();
        }

        UIs.call(PlayerUi::onBlocked);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaying,void onPlaying(),"[1110, 1119]","{'A305': [(1110, 1119)]}",{'A305': 1.0},A305,,"    private void onPlaying() {
        if (DEBUG) {
            Log.d(TAG, ""onPlaying() called"");
        }
        if (!isProgressLoopRunning()) {
            startProgressLoop();
        }

        UIs.call(PlayerUi::onPlaying);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onBuffering,void onBuffering(),"[1121, 1127]","{'A305': [(1121, 1127)]}",{'A305': 1.0},A305,,"    private void onBuffering() {
        if (DEBUG) {
            Log.d(TAG, ""onBuffering() called"");
        }

        UIs.call(PlayerUi::onBuffering);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPaused,void onPaused(),"[1129, 1139]","{'A305': [(1129, 1139)]}",{'A305': 1.0},A305,,"    private void onPaused() {
        if (DEBUG) {
            Log.d(TAG, ""onPaused() called"");
        }

        if (isProgressLoopRunning()) {
            stopProgressLoop();
        }

        UIs.call(PlayerUi::onPaused);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPausedSeek,void onPausedSeek(),"[1141, 1146]","{'A305': [(1141, 1146)]}",{'A305': 1.0},A305,,"    private void onPausedSeek() {
        if (DEBUG) {
            Log.d(TAG, ""onPausedSeek() called"");
        }
        UIs.call(PlayerUi::onPausedSeek);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onCompleted,void onCompleted(),"[1148, 1164]","{'A305': [(1148, 1149), (1154, 1164)], 'A288': [(1150, 1153)]}","{'A305': 0.7647058823529411, 'A288': 0.23529411764705882}",A305,,"    private void onCompleted() {
        if (DEBUG) {
            Log.d(TAG, ""onCompleted() called"" + (playQueue == null ? "". playQueue is null"" : """"));
        }
        if (playQueue == null) {
            return;
        }

        UIs.call(PlayerUi::onCompleted);

        if (playQueue.getIndex() < playQueue.size() - 1) {
            playQueue.offsetIndex(+1);
        }
        if (isProgressLoopRunning()) {
            stopProgressLoop();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getRepeatMode,int getRepeatMode(),"[1174, 1177]","{'A305': [(1174, 1177)]}",{'A305': 1.0},A305,,"    @RepeatMode
    public int getRepeatMode() {
        return exoPlayerIsNull() ? REPEAT_MODE_OFF : simpleExoPlayer.getRepeatMode();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setRepeatMode,void setRepeatMode(int),"[1179, 1183]","{'A305': [(1179, 1183)]}",{'A305': 1.0},A305,,"    public void setRepeatMode(@RepeatMode final int repeatMode) {
        if (!exoPlayerIsNull()) {
            simpleExoPlayer.setRepeatMode(repeatMode);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,cycleNextRepeatMode,void cycleNextRepeatMode(),"[1185, 1187]","{'A305': [(1185, 1187)]}",{'A305': 1.0},A305,,"    public void cycleNextRepeatMode() {
        setRepeatMode(nextRepeatMode(getRepeatMode()));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onRepeatModeChanged,void onRepeatModeChanged(int),"[1189, 1197]","{'A305': [(1189, 1197)]}",{'A305': 1.0},A305,,"    @Override
    public void onRepeatModeChanged(@RepeatMode final int repeatMode) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - onRepeatModeChanged() called with: ""
                    + ""repeatMode = ["" + repeatMode + ""]"");
        }
        UIs.call(playerUi -> playerUi.onRepeatModeChanged(repeatMode));
        notifyPlaybackUpdateToListeners();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onShuffleModeEnabledChanged,void onShuffleModeEnabledChanged(boolean),"[1199, 1216]","{'A305': [(1199, 1216)]}",{'A305': 1.0},A305,,"    @Override
    public void onShuffleModeEnabledChanged(final boolean shuffleModeEnabled) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - onShuffleModeEnabledChanged() called with: ""
                    + ""mode = ["" + shuffleModeEnabled + ""]"");
        }

        if (playQueue != null) {
            if (shuffleModeEnabled) {
                playQueue.shuffle();
            } else {
                playQueue.unshuffle();
            }
        }

        UIs.call(playerUi -> playerUi.onShuffleModeEnabledChanged(shuffleModeEnabled));
        notifyPlaybackUpdateToListeners();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,toggleShuffleModeEnabled,void toggleShuffleModeEnabled(),"[1218, 1222]","{'A305': [(1218, 1220)], 'A349': [(1221, 1222)]}","{'A305': 0.6, 'A349': 0.4}",A305,,"    public void toggleShuffleModeEnabled() {
        if (!exoPlayerIsNull()) {
            simpleExoPlayer.setShuffleModeEnabled(!simpleExoPlayer.getShuffleModeEnabled());
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,toggleMute,void toggleMute(),"[1232, 1242]","{'A305': [(1232, 1234), (1240, 1242)], 'A389': [(1235, 1239)]}","{'A305': 0.5454545454545454, 'A389': 0.45454545454545453}",A305,,"    public void toggleMute() {
        final boolean wasMuted = isMuted();
        simpleExoPlayer.setVolume(wasMuted ? 1 : 0);
        if (wasMuted) {
            audioReactor.requestAudioFocus();
        } else {
            audioReactor.abandonAudioFocus();
        }
        UIs.call(playerUi -> playerUi.onMuteUnmuteChanged(!wasMuted));
        notifyPlaybackUpdateToListeners();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isMuted,boolean isMuted(),"[1244, 1246]","{'A305': [(1244, 1246)]}",{'A305': 1.0},A305,,"    public boolean isMuted() {
        return !exoPlayerIsNull() && simpleExoPlayer.getVolume() == 0;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onEvents,"void onEvents(com.google.android.exoplayer2.Player,com.google.android.exoplayer2.Player.Events)","[1269, 1311]","{'A305': [(1275, 1275), (1277, 1278), (1283, 1285), (1287, 1287), (1289, 1291), (1294, 1295), (1299, 1301), (1308, 1308), (1311, 1311)], 'A383': [(1269, 1274), (1276, 1276), (1282, 1282), (1286, 1286), (1288, 1288), (1292, 1293), (1296, 1298), (1309, 1310)], 'A386': [(1279, 1281), (1302, 1307)]}","{'A305': 0.3953488372093023, 'A383': 0.3953488372093023, 'A386': 0.20930232558139536}",A305,,"    @Override
    public void onEvents(@NonNull final com.google.android.exoplayer2.Player player,
                         @NonNull final com.google.android.exoplayer2.Player.Events events) {
        Listener.super.onEvents(player, events);
        MediaItemTag.from(player.getCurrentMediaItem()).ifPresent(tag -> {
            if (tag == currentMetadata) {
                return; // we still have the same metadata, no need to do anything
            }
            final StreamInfo previousInfo = Optional.ofNullable(currentMetadata)
                    .flatMap(MediaItemTag::getMaybeStreamInfo).orElse(null);
            final MediaItemTag.AudioTrack previousAudioTrack =
                    Optional.ofNullable(currentMetadata)
                            .flatMap(MediaItemTag::getMaybeAudioTrack).orElse(null);
            currentMetadata = tag;

            if (!currentMetadata.getErrors().isEmpty()) {
                // new errors might have been added even if previousInfo == tag.getMaybeStreamInfo()
                final ErrorInfo errorInfo = new ErrorInfo(
                        currentMetadata.getErrors(),
                        UserAction.PLAY_STREAM,
                        ""Loading failed for ["" + currentMetadata.getTitle()
                                + ""]: "" + currentMetadata.getStreamUrl(),
                        currentMetadata.getServiceId());
                ErrorUtil.createNotification(context, errorInfo);
            }

            currentMetadata.getMaybeStreamInfo().ifPresent(info -> {
                if (DEBUG) {
                    Log.d(TAG, ""ExoPlayer - onEvents() update stream info: "" + info.getName());
                }
                if (previousInfo == null || !previousInfo.getUrl().equals(info.getUrl())) {
                    // only update with the new stream info if it has actually changed
                    updateMetadataWith(info);
                } else if (previousAudioTrack == null
                        || tag.getMaybeAudioTrack()
                        .map(t -> t.getSelectedAudioStreamIndex()
                                != previousAudioTrack.getSelectedAudioStreamIndex())
                        .orElse(false)) {
                    notifyAudioTrackUpdateToListeners();
                }
            });
        });
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onTracksChanged,void onTracksChanged(Tracks),"[1313, 1320]","{'A305': [(1313, 1313), (1315, 1316), (1318, 1320)], 'A299': [(1314, 1314), (1317, 1317)]}","{'A305': 0.75, 'A299': 0.25}",A305,,"    @Override
    public void onTracksChanged(@NonNull final Tracks tracks) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - onTracksChanged(), ""
                    + ""track group size = "" + tracks.getGroups().size());
        }
        UIs.call(playerUi -> playerUi.onTextTracksChanged(tracks));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaybackParametersChanged,void onPlaybackParametersChanged(PlaybackParameters),"[1322, 1329]","{'A305': [(1322, 1329)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlaybackParametersChanged(@NonNull final PlaybackParameters playbackParameters) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - playbackParameters(), speed = ["" + playbackParameters.speed
                    + ""], pitch = ["" + playbackParameters.pitch + ""]"");
        }
        UIs.call(playerUi -> playerUi.onPlaybackParametersChanged(playbackParameters));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPositionDiscontinuity,"void onPositionDiscontinuity(PositionInfo,PositionInfo,int)","[1331, 1376]","{'A305': [(1331, 1331), (1335, 1336), (1341, 1347), (1349, 1349), (1352, 1353), (1355, 1358), (1365, 1366), (1369, 1369), (1371, 1372), (1374, 1376)], 'A383': [(1337, 1340), (1348, 1348), (1354, 1354), (1367, 1368), (1370, 1370)], 'A288': [(1350, 1351), (1359, 1364), (1373, 1373)], 'A293': [(1332, 1334)]}","{'A305': 0.5434782608695652, 'A383': 0.1956521739130435, 'A288': 0.1956521739130435, 'A293': 0.06521739130434782}",A305,,"    @Override
    public void onPositionDiscontinuity(@NonNull final PositionInfo oldPosition,
                                        @NonNull final PositionInfo newPosition,
                                        @DiscontinuityReason final int discontinuityReason) {
        if (DEBUG) {
            Log.d(TAG, ""ExoPlayer - onPositionDiscontinuity() called with ""
                    + ""oldPositionIndex = ["" + oldPosition.mediaItemIndex + ""], ""
                    + ""oldPositionMs = ["" + oldPosition.positionMs + ""], ""
                    + ""newPositionIndex = ["" + newPosition.mediaItemIndex + ""], ""
                    + ""newPositionMs = ["" + newPosition.positionMs + ""], ""
                    + ""discontinuityReason = ["" + discontinuityReason + ""]"");
        }
        if (playQueue == null) {
            return;
        }

        // Refresh the playback if there is a transition to the next video
        final int newIndex = newPosition.mediaItemIndex;
        switch (discontinuityReason) {
            case DISCONTINUITY_REASON_AUTO_TRANSITION:
            case DISCONTINUITY_REASON_REMOVE:
                // When player is in single repeat mode and a period transition occurs,
                // we need to register a view count here since no metadata has changed
                if (getRepeatMode() == REPEAT_MODE_ONE && newIndex == playQueue.getIndex()) {
                    registerStreamViewed();
                    break;
                }
            case DISCONTINUITY_REASON_SEEK:
                if (DEBUG) {
                    Log.d(TAG, ""ExoPlayer - onSeekProcessed() called"");
                }
                if (isPrepared) {
                    saveStreamProgressState();
                }
            case DISCONTINUITY_REASON_SEEK_ADJUSTMENT:
            case DISCONTINUITY_REASON_INTERNAL:
                // Player index may be invalid when playback is blocked
                if (getCurrentState() != STATE_BLOCKED && newIndex != playQueue.getIndex()) {
                    saveStreamProgressStateCompleted(); // current stream has ended
                    playQueue.setIndex(newIndex);
                }
                break;
            case DISCONTINUITY_REASON_SKIP:
                break; // only makes Android Studio linter happy, as there are no ads
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onRenderedFirstFrame,void onRenderedFirstFrame(),"[1378, 1381]","{'A305': [(1378, 1381)]}",{'A305': 1.0},A305,,"    @Override
    public void onRenderedFirstFrame() {
        UIs.call(PlayerUi::onRenderedFirstFrame);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onCues,void onCues(CueGroup),"[1383, 1386]","{'A305': [(1385, 1385)], 'A288': [(1383, 1383), (1386, 1386)], 'A299': [(1384, 1384)]}","{'A305': 0.25, 'A288': 0.5, 'A299': 0.25}",A288,,"    @Override
    public void onCues(@NonNull final CueGroup cueGroup) {
        UIs.call(playerUi -> playerUi.onCues(cueGroup.cues));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPrepare,void onPrepare(),"[1395, 1399]","{'A305': [(1395, 1399)]}",{'A305': 1.0},A305,,"    public void onPrepare() {
        if (!exoPlayerIsNull()) {
            simpleExoPlayer.prepare();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlayerError,void onPlayerError(PlaybackException),"[1441, 1495]","{'A305': [(1441, 1442), (1445, 1446), (1448, 1448), (1472, 1472), (1479, 1482), (1484, 1487), (1494, 1495)], 'A383': [(1443, 1443), (1449, 1471), (1473, 1478), (1483, 1483), (1488, 1489), (1493, 1493)], 'A300': [(1444, 1444)], 'A293': [(1447, 1447), (1490, 1492)]}","{'A305': 0.2909090909090909, 'A383': 0.6181818181818182, 'A300': 0.01818181818181818, 'A293': 0.07272727272727272}",A383,,"    @SuppressWarnings(""SwitchIntDef"")
    @Override
    public void onPlayerError(@NonNull final PlaybackException error) {
        Log.e(TAG, ""ExoPlayer - onPlayerError() called with:"", error);

        saveStreamProgressState();
        boolean isCatchableException = false;

        switch (error.errorCode) {
            case ERROR_CODE_BEHIND_LIVE_WINDOW:
                isCatchableException = true;
                simpleExoPlayer.seekToDefaultPosition();
                simpleExoPlayer.prepare();
                // Inform the user that we are reloading the stream by
                // switching to the buffering state
                onBuffering();
                break;
            case ERROR_CODE_IO_INVALID_HTTP_CONTENT_TYPE:
            case ERROR_CODE_IO_BAD_HTTP_STATUS:
            case ERROR_CODE_IO_FILE_NOT_FOUND:
            case ERROR_CODE_IO_NO_PERMISSION:
            case ERROR_CODE_IO_CLEARTEXT_NOT_PERMITTED:
            case ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE:
            case ERROR_CODE_PARSING_CONTAINER_MALFORMED:
            case ERROR_CODE_PARSING_MANIFEST_MALFORMED:
            case ERROR_CODE_PARSING_CONTAINER_UNSUPPORTED:
            case ERROR_CODE_PARSING_MANIFEST_UNSUPPORTED:
                // Source errors, signal on playQueue and move on:
                if (!exoPlayerIsNull() && playQueue != null) {
                    playQueue.error();
                }
                break;
            case ERROR_CODE_TIMEOUT:
            case ERROR_CODE_IO_UNSPECIFIED:
            case ERROR_CODE_IO_NETWORK_CONNECTION_FAILED:
            case ERROR_CODE_IO_NETWORK_CONNECTION_TIMEOUT:
            case ERROR_CODE_UNSPECIFIED:
                // Reload playback on unexpected errors:
                setRecovery();
                reloadPlayQueueManager();
                break;
            default:
                // API, remote and renderer errors belong here:
                onPlaybackShutdown();
                break;
        }

        if (!isCatchableException) {
            createErrorNotification(error);
        }

        if (fragmentListener != null) {
            fragmentListener.onPlayerError(error, isCatchableException);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,createErrorNotification,void createErrorNotification(PlaybackException),"[1497, 1510]","{'A383': [(1497, 1497), (1501, 1502), (1505, 1507)], 'A293': [(1498, 1500), (1503, 1504), (1508, 1510)]}","{'A383': 0.42857142857142855, 'A293': 0.5714285714285714}",A293,,"    private void createErrorNotification(@NonNull final PlaybackException error) {
        final ErrorInfo errorInfo;
        if (currentMetadata == null) {
            errorInfo = new ErrorInfo(error, UserAction.PLAY_STREAM,
                    ""Player error[type="" + error.getErrorCodeName()
                            + ""] occurred, currentMetadata is null"");
        } else {
            errorInfo = new ErrorInfo(error, UserAction.PLAY_STREAM,
                    ""Player error[type="" + error.getErrorCodeName()
                            + ""] occurred while playing "" + currentMetadata.getStreamUrl(),
                    currentMetadata.getServiceId());
        }
        ErrorUtil.createNotification(context, errorInfo);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isApproachingPlaybackEdge,boolean isApproachingPlaybackEdge(long),"[1520, 1531]","{'A305': [(1520, 1531)]}",{'A305': 1.0},A305,,"    @Override // own playback listener (this is a getter)
    public boolean isApproachingPlaybackEdge(final long timeToEndMillis) {
        // If live, then not near playback edge
        // If not playing, then not approaching playback edge
        if (exoPlayerIsNull() || isLive() || !isPlaying()) {
            return false;
        }

        final long currentPositionMillis = simpleExoPlayer.getCurrentPosition();
        final long currentDurationMillis = simpleExoPlayer.getDuration();
        return currentDurationMillis - currentPositionMillis < timeToEndMillis;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isLiveEdge,boolean isLiveEdge(),"[1538, 1554]","{'A305': [(1538, 1544), (1546, 1554)], 'A383': [(1545, 1545)]}","{'A305': 0.9411764705882353, 'A383': 0.058823529411764705}",A305,,"    @SuppressWarnings(""BooleanMethodIsAlwaysInverted"")
    public boolean isLiveEdge() {
        if (exoPlayerIsNull() || !isLive()) {
            return false;
        }

        final Timeline currentTimeline = simpleExoPlayer.getCurrentTimeline();
        final int currentWindowIndex = simpleExoPlayer.getCurrentMediaItemIndex();
        if (currentTimeline.isEmpty() || currentWindowIndex < 0
                || currentWindowIndex >= currentTimeline.getWindowCount()) {
            return false;
        }

        final Timeline.Window timelineWindow = new Timeline.Window();
        currentTimeline.getWindow(currentWindowIndex, timelineWindow);
        return timelineWindow.getDefaultPositionMs() <= simpleExoPlayer.getCurrentPosition();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlaybackSynchronize,"void onPlaybackSynchronize(PlayQueueItem,boolean)","[1556, 1608]","{'A305': [(1556, 1556), (1558, 1558), (1561, 1608)], 'A383': [(1557, 1557), (1559, 1560)]}","{'A305': 0.9433962264150944, 'A383': 0.05660377358490566}",A305,,"    @Override // own playback listener
    public void onPlaybackSynchronize(@NonNull final PlayQueueItem item, final boolean wasBlocked) {
        if (DEBUG) {
            Log.d(TAG, ""Playback - onPlaybackSynchronize(was blocked: "" + wasBlocked
                    + "") called with item=["" + item.getTitle() + ""], url=["" + item.getUrl() + ""]"");
        }
        if (exoPlayerIsNull() || playQueue == null || currentItem == item) {
            return; // nothing to synchronize
        }

        final int playQueueIndex = playQueue.indexOf(item);
        final int playlistIndex = simpleExoPlayer.getCurrentMediaItemIndex();
        final int playlistSize = simpleExoPlayer.getCurrentTimeline().getWindowCount();
        final boolean removeThumbnailBeforeSync = currentItem == null
                || currentItem.getServiceId() != item.getServiceId()
                || !currentItem.getUrl().equals(item.getUrl());

        currentItem = item;

        if (playQueueIndex != playQueue.getIndex()) {
            // wrong window (this should be impossible, as this method is called with
            // `item=playQueue.getItem()`, so the index of that item must be equal to `getIndex()`)
            Log.e(TAG, ""Playback - Play Queue may be not in sync: item index=[""
                    + playQueueIndex + ""], "" + ""queue index=["" + playQueue.getIndex() + ""]"");

        } else if ((playlistSize > 0 && playQueueIndex >= playlistSize) || playQueueIndex < 0) {
            // the queue and the player's timeline are not in sync, since the play queue index
            // points outside of the timeline
            Log.e(TAG, ""Playback - Trying to seek to invalid index=["" + playQueueIndex
                    + ""] with playlist length=["" + playlistSize + ""]"");

        } else if (wasBlocked || playlistIndex != playQueueIndex || !isPlaying()) {
            // either the player needs to be unblocked, or the play queue index has just been
            // changed and needs to be synchronized, or the player is not playing
            if (DEBUG) {
                Log.d(TAG, ""Playback - Rewinding to correct index=["" + playQueueIndex + ""], ""
                        + ""from=["" + playlistIndex + ""], size=["" + playlistSize + ""]."");
            }

            if (removeThumbnailBeforeSync) {
                // unset the current (now outdated) thumbnail to ensure it is not used during sync
                onThumbnailLoaded(null);
            }

            // sync the player index with the queue index, and seek to the correct position
            if (item.getRecoveryPosition() != PlayQueueItem.RECOVERY_UNSET) {
                simpleExoPlayer.seekTo(playQueueIndex, item.getRecoveryPosition());
                playQueue.unsetRecovery(playQueueIndex);
            } else {
                simpleExoPlayer.seekToDefaultPosition(playQueueIndex);
            }
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,seekTo,void seekTo(long),"[1610, 1619]","{'A305': [(1610, 1615), (1618, 1619)], 'A295': [(1616, 1617)]}","{'A305': 0.8, 'A295': 0.2}",A305,,"    public void seekTo(final long positionMillis) {
        if (DEBUG) {
            Log.d(TAG, ""seekBy() called with: position = ["" + positionMillis + ""]"");
        }
        if (!exoPlayerIsNull()) {
            // prevent invalid positions when fast-forwarding/-rewinding
            simpleExoPlayer.seekTo(MathUtils.clamp(positionMillis, 0,
                    simpleExoPlayer.getDuration()));
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,seekBy,void seekBy(long),"[1621, 1626]","{'A305': [(1621, 1626)]}",{'A305': 1.0},A305,,"    private void seekBy(final long offsetMillis) {
        if (DEBUG) {
            Log.d(TAG, ""seekBy() called with: offsetMillis = ["" + offsetMillis + ""]"");
        }
        seekTo(simpleExoPlayer.getCurrentPosition() + offsetMillis);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,seekToDefault,void seekToDefault(),"[1628, 1632]","{'A305': [(1628, 1632)]}",{'A305': 1.0},A305,,"    public void seekToDefault() {
        if (!exoPlayerIsNull()) {
            simpleExoPlayer.seekToDefaultPosition();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,play,void play(),"[1642, 1664]","{'A305': [(1642, 1649), (1653, 1661), (1663, 1664)], 'A288': [(1662, 1662)], 'A389': [(1650, 1652)]}","{'A305': 0.8260869565217391, 'A288': 0.043478260869565216, 'A389': 0.13043478260869565}",A305,,"    public void play() {
        if (DEBUG) {
            Log.d(TAG, ""play() called"");
        }
        if (audioReactor == null || playQueue == null || exoPlayerIsNull()) {
            return;
        }

        if (!isMuted()) {
            audioReactor.requestAudioFocus();
        }

        if (currentState == STATE_COMPLETED) {
            if (playQueue.getIndex() == 0) {
                seekToDefault();
            } else {
                playQueue.setIndex(0);
            }
        }

        simpleExoPlayer.play();
        saveStreamProgressState();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,pause,void pause(),"[1666, 1677]","{'A305': [(1666, 1674), (1676, 1677)], 'A288': [(1675, 1675)]}","{'A305': 0.9166666666666666, 'A288': 0.08333333333333333}",A305,,"    public void pause() {
        if (DEBUG) {
            Log.d(TAG, ""pause() called"");
        }
        if (audioReactor == null || exoPlayerIsNull()) {
            return;
        }

        audioReactor.abandonAudioFocus();
        simpleExoPlayer.pause();
        saveStreamProgressState();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,playPause,void playPause(),"[1679, 1691]","{'A305': [(1679, 1683), (1687, 1691)], 'A300': [(1684, 1686)]}","{'A305': 0.7692307692307693, 'A300': 0.23076923076923078}",A305,,"    public void playPause() {
        if (DEBUG) {
            Log.d(TAG, ""onPlayPause() called"");
        }

        if (getPlayWhenReady()
                // When state is completed (replay button is shown) then (re)play and do not pause
                && currentState != STATE_COMPLETED) {
            pause();
        } else {
            play();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,playPrevious,void playPrevious(),"[1693, 1713]","{'A305': [(1693, 1713)]}",{'A305': 1.0},A305,,"    public void playPrevious() {
        if (DEBUG) {
            Log.d(TAG, ""onPlayPrevious() called"");
        }
        if (exoPlayerIsNull() || playQueue == null) {
            return;
        }

        /* If current playback has run for PLAY_PREV_ACTIVATION_LIMIT_MILLIS milliseconds,
         * restart current track. Also restart the track if the current track
         * is the first in a queue.*/
        if (simpleExoPlayer.getCurrentPosition() > PLAY_PREV_ACTIVATION_LIMIT_MILLIS
                || playQueue.getIndex() == 0) {
            seekToDefault();
            playQueue.offsetIndex(0);
        } else {
            saveStreamProgressState();
            playQueue.offsetIndex(-1);
        }
        triggerProgressUpdate();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,playNext,void playNext(),"[1715, 1726]","{'A305': [(1715, 1726)]}",{'A305': 1.0},A305,,"    public void playNext() {
        if (DEBUG) {
            Log.d(TAG, ""onPlayNext() called"");
        }
        if (playQueue == null) {
            return;
        }

        saveStreamProgressState();
        playQueue.offsetIndex(+1);
        triggerProgressUpdate();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,fastForward,void fastForward(),"[1728, 1734]","{'A305': [(1728, 1734)]}",{'A305': 1.0},A305,,"    public void fastForward() {
        if (DEBUG) {
            Log.d(TAG, ""fastRewind() called"");
        }
        seekBy(retrieveSeekDurationFromPreferences(this));
        triggerProgressUpdate();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,fastRewind,void fastRewind(),"[1736, 1742]","{'A305': [(1736, 1742)]}",{'A305': 1.0},A305,,"    public void fastRewind() {
        if (DEBUG) {
            Log.d(TAG, ""fastRewind() called"");
        }
        seekBy(-retrieveSeekDurationFromPreferences(this));
        triggerProgressUpdate();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,registerStreamViewed,void registerStreamViewed(),"[1752, 1755]","{'A305': [(1752, 1752), (1755, 1755)], 'A383': [(1753, 1754)]}","{'A305': 0.5, 'A383': 0.5}",A305,,"    private void registerStreamViewed() {
        getCurrentStreamInfo().ifPresent(info -> databaseUpdateDisposable
                .add(recordManager.onViewed(info).onErrorComplete().subscribe()));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,saveStreamProgressState,void saveStreamProgressState(long),"[1757, 1777]","{'A305': [(1757, 1757), (1766, 1766), (1777, 1777)], 'A295': [(1758, 1765), (1767, 1776)]}","{'A305': 0.14285714285714285, 'A295': 0.8571428571428571}",A295,,"    private void saveStreamProgressState(final long progressMillis) {
        getCurrentStreamInfo().ifPresent(info -> {
            if (!prefs.getBoolean(context.getString(R.string.enable_watch_history_key), true)) {
                return;
            }
            if (DEBUG) {
                Log.d(TAG, ""saveStreamProgressState() called with: progressMillis="" + progressMillis
                        + "", currentMetadata=["" + info.getName() + ""]"");
            }

            databaseUpdateDisposable.add(recordManager.saveStreamState(info, progressMillis)
                    .observeOn(AndroidSchedulers.mainThread())
                    .doOnError(e -> {
                        if (DEBUG) {
                            e.printStackTrace();
                        }
                    })
                    .onErrorComplete()
                    .subscribe());
        });
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,saveStreamProgressState,void saveStreamProgressState(),"[1779, 1791]","{'A305': [(1779, 1780), (1782, 1791)], 'A383': [(1781, 1781)]}","{'A305': 0.9230769230769231, 'A383': 0.07692307692307693}",A305,,"    public void saveStreamProgressState() {
        if (exoPlayerIsNull() || currentMetadata == null || playQueue == null
                || playQueue.getIndex() != simpleExoPlayer.getCurrentMediaItemIndex()) {
            // Make sure play queue and current window index are equal, to prevent saving state for
            // the wrong stream on discontinuity (e.g. when the stream just changed but the
            // playQueue index and currentMetadata still haven't updated)
            return;
        }
        // Save current position. It will help to restore this position once a user
        // wants to play prev or next stream from the queue
        playQueue.setRecovery(playQueue.getIndex(), simpleExoPlayer.getContentPosition());
        saveStreamProgressState(simpleExoPlayer.getCurrentPosition());
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,saveStreamProgressStateCompleted,void saveStreamProgressStateCompleted(),"[1793, 1797]","{'A305': [(1793, 1793), (1797, 1797)], 'A383': [(1794, 1796)]}","{'A305': 0.4, 'A383': 0.6}",A383,,"    public void saveStreamProgressStateCompleted() {
        // current stream has ended, so the progress is its duration (+1 to overcome rounding)
        getCurrentStreamInfo().ifPresent(info ->
                saveStreamProgressState((info.getDuration() + 1) * 1000));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,updateMetadataWith,void updateMetadataWith(StreamInfo),"[1807, 1823]","{'A305': [(1807, 1818), (1820, 1820), (1822, 1823)], 'A300': [(1819, 1819)], 'A386': [(1821, 1821)]}","{'A305': 0.8823529411764706, 'A300': 0.058823529411764705, 'A386': 0.058823529411764705}",A305,,"    private void updateMetadataWith(@NonNull final StreamInfo info) {
        if (DEBUG) {
            Log.d(TAG, ""Playback - onMetadataChanged() called, playing: "" + info.getName());
        }
        if (exoPlayerIsNull()) {
            return;
        }

        maybeAutoQueueNextStream(info);

        loadCurrentThumbnail(info.getThumbnails());
        registerStreamViewed();

        notifyMetadataUpdateToListeners();
        notifyAudioTrackUpdateToListeners();
        UIs.call(playerUi -> playerUi.onMetadataChanged(info));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getVideoUrl,String getVideoUrl(),"[1825, 1830]","{'A305': [(1825, 1828), (1830, 1830)], 'A383': [(1829, 1829)]}","{'A305': 0.8333333333333334, 'A383': 0.16666666666666666}",A305,,"    @NonNull
    public String getVideoUrl() {
        return currentMetadata == null
                ? context.getString(R.string.unknown_content)
                : currentMetadata.getStreamUrl();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getVideoUrlAtCurrentTime,String getVideoUrlAtCurrentTime(),"[1832, 1842]","{'A305': [(1832, 1836), (1838, 1842)], 'A383': [(1837, 1837)]}","{'A305': 0.9090909090909091, 'A383': 0.09090909090909091}",A305,,"    @NonNull
    public String getVideoUrlAtCurrentTime() {
        final long timeSeconds = simpleExoPlayer.getCurrentPosition() / 1000;
        String videoUrl = getVideoUrl();
        if (!isLive() && timeSeconds >= 0 && currentMetadata != null
                && currentMetadata.getServiceId() == YouTube.getServiceId()) {
            // Timestamp doesn't make sense in a live stream so drop it
            videoUrl += (""&t="" + timeSeconds);
        }
        return videoUrl;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getVideoTitle,String getVideoTitle(),"[1844, 1849]","{'A305': [(1844, 1847), (1849, 1849)], 'A383': [(1848, 1848)]}","{'A305': 0.8333333333333334, 'A383': 0.16666666666666666}",A305,,"    @NonNull
    public String getVideoTitle() {
        return currentMetadata == null
                ? context.getString(R.string.unknown_content)
                : currentMetadata.getTitle();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getUploaderName,String getUploaderName(),"[1851, 1856]","{'A305': [(1851, 1854), (1856, 1856)], 'A383': [(1855, 1855)]}","{'A305': 0.8333333333333334, 'A383': 0.16666666666666666}",A305,,"    @NonNull
    public String getUploaderName() {
        return currentMetadata == null
                ? context.getString(R.string.unknown_content)
                : currentMetadata.getUploaderName();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getThumbnail,Bitmap getThumbnail(),"[1858, 1861]","{'A305': [(1858, 1859), (1861, 1861)], 'A288': [(1860, 1860)]}","{'A305': 0.75, 'A288': 0.25}",A305,,"    @Nullable
    public Bitmap getThumbnail() {
        return currentThumbnail;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,maybeAutoQueueNextStream,void maybeAutoQueueNextStream(StreamInfo),"[1871, 1883]","{'A305': [(1872, 1877), (1879, 1883)], 'A383': [(1871, 1871), (1878, 1878)]}","{'A305': 0.8461538461538461, 'A383': 0.15384615384615385}",A305,,"    private void maybeAutoQueueNextStream(@NonNull final StreamInfo info) {
        if (playQueue == null || playQueue.getIndex() != playQueue.size() - 1
                || getRepeatMode() != REPEAT_MODE_OFF
                || !PlayerHelper.isAutoQueueEnabled(context)) {
            return;
        }
        // auto queue when starting playback on the last item when not repeating
        final PlayQueue autoQueue = PlayerHelper.autoQueueOf(info,
                playQueue.getStreams());
        if (autoQueue != null) {
            playQueue.append(autoQueue.getStreams());
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,selectQueueItem,void selectQueueItem(PlayQueueItem),"[1885, 1901]","{'A305': [(1885, 1894), (1896, 1901)], 'A383': [(1895, 1895)]}","{'A305': 0.9411764705882353, 'A383': 0.058823529411764705}",A305,,"    public void selectQueueItem(final PlayQueueItem item) {
        if (playQueue == null || exoPlayerIsNull()) {
            return;
        }

        final int index = playQueue.indexOf(item);
        if (index == -1) {
            return;
        }

        if (playQueue.getIndex() == index && simpleExoPlayer.getCurrentMediaItemIndex() == index) {
            seekToDefault();
        } else {
            saveStreamProgressState();
        }
        playQueue.setIndex(index);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onPlayQueueEdited,void onPlayQueueEdited(),"[1903, 1907]","{'A305': [(1903, 1907)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlayQueueEdited() {
        notifyPlaybackUpdateToListeners();
        UIs.call(PlayerUi::onPlayQueueEdited);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,sourceOf,"MediaSource sourceOf(PlayQueueItem,StreamInfo)","[1909, 1933]","{'A305': [(1909, 1911), (1933, 1933)], 'A293': [(1912, 1932)]}","{'A305': 0.16, 'A293': 0.84}",A293,,"    @Override // own playback listener
    @Nullable
    public MediaSource sourceOf(final PlayQueueItem item, final StreamInfo info) {
        if (audioPlayerSelected()) {
            return audioResolver.resolve(info);
        }

        if (isAudioOnly && videoResolver.getStreamSourceType().orElse(
                SourceType.VIDEO_WITH_AUDIO_OR_AUDIO_ONLY)
                == SourceType.VIDEO_WITH_AUDIO_OR_AUDIO_ONLY) {
            // If the current info has only video streams with audio and if the stream is played as
            // audio, we need to use the audio resolver, otherwise the video stream will be played
            // in background.
            return audioResolver.resolve(info);
        }

        // Even if the stream is played in background, we need to use the video resolver if the
        // info played is separated video-only and audio-only streams; otherwise, if the audio
        // resolver was called when the app was in background, the app will only stream audio when
        // the user come back to the app and will never fetch the video stream.
        // Note that the video is not fetched when the app is in background because the video
        // renderer is fully disabled (see useVideoSource method), except for HLS streams
        // (see https://github.com/google/ExoPlayer/issues/9282).
        return videoResolver.resolve(info);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,disablePreloadingOfCurrentTrack,void disablePreloadingOfCurrentTrack(),"[1935, 1937]","{'A305': [(1935, 1937)]}",{'A305': 1.0},A305,,"    public void disablePreloadingOfCurrentTrack() {
        loadController.disablePreloadingOfCurrentTrack();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getSelectedVideoStream,Optional<VideoStream> getSelectedVideoStream(),"[1939, 1949]","{'A305': [(1939, 1939), (1941, 1941), (1948, 1949)], 'A295': [(1940, 1940), (1942, 1947)]}","{'A305': 0.36363636363636365, 'A295': 0.6363636363636364}",A295,,"    public Optional<VideoStream> getSelectedVideoStream() {
        return Optional.ofNullable(currentMetadata)
                .flatMap(MediaItemTag::getMaybeQuality)
                .filter(quality -> {
                    final int selectedStreamIndex = quality.getSelectedVideoStreamIndex();
                    return selectedStreamIndex >= 0
                            && selectedStreamIndex < quality.getSortedVideoStreams().size();
                })
                .map(quality -> quality.getSortedVideoStreams()
                        .get(quality.getSelectedVideoStreamIndex()));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getSelectedAudioStream,Optional<AudioStream> getSelectedAudioStream(),"[1951, 1955]","{'A386': [(1951, 1955)]}",{'A386': 1.0},A386,,"    public Optional<AudioStream> getSelectedAudioStream() {
        return Optional.ofNullable(currentMetadata)
                .flatMap(MediaItemTag::getMaybeAudioTrack)
                .map(MediaItemTag.AudioTrack::getSelectedAudioStream);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getCaptionRendererIndex,int getCaptionRendererIndex(),"[1965, 1977]","{'A305': [(1965, 1977)]}",{'A305': 1.0},A305,,"    public int getCaptionRendererIndex() {
        if (exoPlayerIsNull()) {
            return RENDERER_UNAVAILABLE;
        }

        for (int t = 0; t < simpleExoPlayer.getRendererCount(); t++) {
            if (simpleExoPlayer.getRendererType(t) == C.TRACK_TYPE_TEXT) {
                return t;
            }
        }

        return RENDERER_UNAVAILABLE;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,onVideoSizeChanged,void onVideoSizeChanged(VideoSize),"[1985, 1996]","{'A305': [(1985, 1985), (1987, 1988), (1993, 1996)], 'A288': [(1989, 1992)], 'A298': [(1986, 1986)]}","{'A305': 0.5833333333333334, 'A288': 0.3333333333333333, 'A298': 0.08333333333333333}",A305,,"    @Override // exoplayer listener
    public void onVideoSizeChanged(@NonNull final VideoSize videoSize) {
        if (DEBUG) {
            Log.d(TAG, ""onVideoSizeChanged() called with: ""
                    + ""width / height = ["" + videoSize.width + "" / "" + videoSize.height
                    + "" = "" + (((float) videoSize.width) / videoSize.height) + ""], ""
                    + ""unappliedRotationDegrees = ["" + videoSize.unappliedRotationDegrees + ""], ""
                    + ""pixelWidthHeightRatio = ["" + videoSize.pixelWidthHeightRatio + ""]"");
        }

        UIs.call(playerUi -> playerUi.onVideoSizeChanged(videoSize));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setFragmentListener,void setFragmentListener(PlayerServiceEventListener),"[2005, 2012]","{'A305': [(2005, 2012)]}",{'A305': 1.0},A305,,"    public void setFragmentListener(final PlayerServiceEventListener listener) {
        fragmentListener = listener;
        UIs.call(PlayerUi::onFragmentListenerSet);
        notifyQueueUpdateToListeners();
        notifyMetadataUpdateToListeners();
        notifyPlaybackUpdateToListeners();
        triggerProgressUpdate();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,removeFragmentListener,void removeFragmentListener(PlayerServiceEventListener),"[2014, 2018]","{'A305': [(2014, 2018)]}",{'A305': 1.0},A305,,"    public void removeFragmentListener(final PlayerServiceEventListener listener) {
        if (fragmentListener == listener) {
            fragmentListener = null;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setActivityListener,void setActivityListener(PlayerEventListener),"[2020, 2026]","{'A305': [(2020, 2026)]}",{'A305': 1.0},A305,,"    void setActivityListener(final PlayerEventListener listener) {
        activityListener = listener;
        // TODO why not queue update?
        notifyMetadataUpdateToListeners();
        notifyPlaybackUpdateToListeners();
        triggerProgressUpdate();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,removeActivityListener,void removeActivityListener(PlayerEventListener),"[2028, 2032]","{'A305': [(2028, 2032)]}",{'A305': 1.0},A305,,"    void removeActivityListener(final PlayerEventListener listener) {
        if (activityListener == listener) {
            activityListener = null;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,stopActivityBinding,void stopActivityBinding(),"[2034, 2043]","{'A305': [(2034, 2043)]}",{'A305': 1.0},A305,,"    void stopActivityBinding() {
        if (fragmentListener != null) {
            fragmentListener.onServiceStopped();
            fragmentListener = null;
        }
        if (activityListener != null) {
            activityListener.onServiceStopped();
            activityListener = null;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,notifyQueueUpdateToListeners,void notifyQueueUpdateToListeners(),"[2045, 2052]","{'A305': [(2045, 2052)]}",{'A305': 1.0},A305,,"    private void notifyQueueUpdateToListeners() {
        if (fragmentListener != null && playQueue != null) {
            fragmentListener.onQueueUpdate(playQueue);
        }
        if (activityListener != null && playQueue != null) {
            activityListener.onQueueUpdate(playQueue);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,notifyMetadataUpdateToListeners,void notifyMetadataUpdateToListeners(),"[2054, 2063]","{'A305': [(2054, 2054), (2063, 2063)], 'A383': [(2055, 2062)]}","{'A305': 0.2, 'A383': 0.8}",A383,,"    private void notifyMetadataUpdateToListeners() {
        getCurrentStreamInfo().ifPresent(info -> {
            if (fragmentListener != null) {
                fragmentListener.onMetadataUpdate(info, playQueue);
            }
            if (activityListener != null) {
                activityListener.onMetadataUpdate(info, playQueue);
            }
        });
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,notifyPlaybackUpdateToListeners,void notifyPlaybackUpdateToListeners(),"[2065, 2074]","{'A305': [(2065, 2074)]}",{'A305': 1.0},A305,,"    private void notifyPlaybackUpdateToListeners() {
        if (fragmentListener != null && !exoPlayerIsNull() && playQueue != null) {
            fragmentListener.onPlaybackUpdate(currentState, getRepeatMode(),
                    playQueue.isShuffled(), simpleExoPlayer.getPlaybackParameters());
        }
        if (activityListener != null && !exoPlayerIsNull() && playQueue != null) {
            activityListener.onPlaybackUpdate(currentState, getRepeatMode(),
                    playQueue.isShuffled(), getPlaybackParameters());
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,notifyProgressUpdateToListeners,"void notifyProgressUpdateToListeners(int,int,int)","[2076, 2085]","{'A305': [(2076, 2085)]}",{'A305': 1.0},A305,,"    private void notifyProgressUpdateToListeners(final int currentProgress,
                                                 final int duration,
                                                 final int bufferPercent) {
        if (fragmentListener != null) {
            fragmentListener.onProgressUpdate(currentProgress, duration, bufferPercent);
        }
        if (activityListener != null) {
            activityListener.onProgressUpdate(currentProgress, duration, bufferPercent);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,notifyAudioTrackUpdateToListeners,void notifyAudioTrackUpdateToListeners(),"[2087, 2094]","{'A386': [(2087, 2094)]}",{'A386': 1.0},A386,,"    private void notifyAudioTrackUpdateToListeners() {
        if (fragmentListener != null) {
            fragmentListener.onAudioTrackUpdate();
        }
        if (activityListener != null) {
            activityListener.onAudioTrackUpdate();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,useVideoSource,void useVideoSource(boolean),"[2096, 2130]","{'A305': [(2096, 2096), (2098, 2100), (2130, 2130)], 'A295': [(2103, 2103), (2106, 2107), (2109, 2111), (2113, 2113), (2119, 2119), (2127, 2129)], 'A293': [(2101, 2102), (2108, 2108), (2112, 2112)], 'A333': [(2097, 2097), (2104, 2105), (2114, 2118), (2120, 2126)]}","{'A305': 0.14285714285714285, 'A295': 0.3142857142857143, 'A293': 0.11428571428571428, 'A333': 0.42857142857142855}",A333,,"    public void useVideoSource(final boolean videoEnabled) {
        if (playQueue == null || audioPlayerSelected()) {
            return;
        }

        isAudioOnly = !videoEnabled;

        getCurrentStreamInfo().ifPresentOrElse(info -> {
            // In case we don't know the source type, fall back to either video-with-audio, or
            // audio-only source type
            final SourceType sourceType = videoResolver.getStreamSourceType()
                    .orElse(SourceType.VIDEO_WITH_AUDIO_OR_AUDIO_ONLY);

            if (playQueueManagerReloadingNeeded(sourceType, info, getVideoRendererIndex())) {
                reloadPlayQueueManager();
            }

            setRecovery();

            // Disable or enable video and subtitles renderers depending of the videoEnabled value
            trackSelector.setParameters(trackSelector.buildUponParameters()
                    .setTrackTypeDisabled(C.TRACK_TYPE_TEXT, !videoEnabled)
                    .setTrackTypeDisabled(C.TRACK_TYPE_VIDEO, !videoEnabled));
        }, () -> {
            /*
            The current metadata may be null sometimes (for e.g. when using an unstable connection
            in livestreams) so we will be not able to execute the block below

            Reload the play queue manager in this case, which is the behavior when we don't know the
            index of the video renderer or playQueueManagerReloadingNeeded returns true
            */
            reloadPlayQueueManager();
            setRecovery();
        });
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,playQueueManagerReloadingNeeded,"boolean playQueueManagerReloadingNeeded(SourceType,StreamInfo,int)","[2160, 2193]","{'A305': [(2193, 2193)], 'A293': [(2160, 2163), (2165, 2165), (2167, 2172), (2175, 2184), (2186, 2186), (2189, 2192)], 'A333': [(2164, 2164), (2166, 2166), (2173, 2174), (2187, 2188)], 'A386': [(2185, 2185)]}","{'A305': 0.029411764705882353, 'A293': 0.7647058823529411, 'A333': 0.17647058823529413, 'A386': 0.029411764705882353}",A293,,"    private boolean playQueueManagerReloadingNeeded(final SourceType sourceType,
                                                    @NonNull final StreamInfo streamInfo,
                                                    final int videoRendererIndex) {
        final StreamType streamType = streamInfo.getStreamType();
        final boolean isStreamTypeAudio = StreamTypeUtil.isAudio(streamType);

        if (videoRendererIndex == RENDERER_UNAVAILABLE && !isStreamTypeAudio) {
            return true;
        }

        // The content is an audio stream, an audio live stream, or a live stream with a live
        // source: it's not needed to reload the play queue manager because the stream source will
        // be the same
        if (isStreamTypeAudio || (streamType == StreamType.LIVE_STREAM
                && sourceType == SourceType.LIVE_STREAM)) {
            return false;
        }

        // The content's source is a video with separated audio or a video with audio -> the video
        // and its fetch may be disabled
        // The content's source is a video with embedded audio and the content has no separated
        // audio stream available: it's probably not needed to reload the play queue manager
        // because the stream source will be probably the same as the current played
        if (sourceType == SourceType.VIDEO_WITH_SEPARATED_AUDIO
                || (sourceType == SourceType.VIDEO_WITH_AUDIO_OR_AUDIO_ONLY
                && isNullOrEmpty(streamInfo.getAudioStreams()))) {
            // It's not needed to reload the play queue manager only if the content's stream type
            // is a video stream, a live stream or an ended live stream
            return !StreamTypeUtil.isVideo(streamType);
        }

        // Other cases: the play queue manager reload is needed
        return true;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getCurrentStreamInfo,Optional<StreamInfo> getCurrentStreamInfo(),"[2202, 2204]","{'A305': [(2202, 2202)], 'A383': [(2203, 2204)]}","{'A305': 0.3333333333333333, 'A383': 0.6666666666666666}",A383,,"    public Optional<StreamInfo> getCurrentStreamInfo() {
        return Optional.ofNullable(currentMetadata).flatMap(MediaItemTag::getMaybeStreamInfo);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getCurrentState,int getCurrentState(),"[2206, 2208]","{'A305': [(2206, 2208)]}",{'A305': 1.0},A305,,"    public int getCurrentState() {
        return currentState;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,exoPlayerIsNull,boolean exoPlayerIsNull(),"[2210, 2212]","{'A305': [(2210, 2212)]}",{'A305': 1.0},A305,,"    public boolean exoPlayerIsNull() {
        return simpleExoPlayer == null;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getExoPlayer,ExoPlayer getExoPlayer(),"[2214, 2216]","{'A305': [(2214, 2216)]}",{'A305': 1.0},A305,,"    public ExoPlayer getExoPlayer() {
        return simpleExoPlayer;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isStopped,boolean isStopped(),"[2218, 2220]","{'A305': [(2218, 2218), (2220, 2220)], 'A383': [(2219, 2219)]}","{'A305': 0.6666666666666666, 'A383': 0.3333333333333333}",A305,,"    public boolean isStopped() {
        return exoPlayerIsNull() || simpleExoPlayer.getPlaybackState() == ExoPlayer.STATE_IDLE;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isPlaying,boolean isPlaying(),"[2222, 2224]","{'A305': [(2222, 2224)]}",{'A305': 1.0},A305,,"    public boolean isPlaying() {
        return !exoPlayerIsNull() && simpleExoPlayer.isPlaying();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlayWhenReady,boolean getPlayWhenReady(),"[2226, 2228]","{'A332': [(2226, 2228)]}",{'A332': 1.0},A332,,"    public boolean getPlayWhenReady() {
        return !exoPlayerIsNull() && simpleExoPlayer.getPlayWhenReady();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isLoading,boolean isLoading(),"[2230, 2232]","{'A305': [(2230, 2232)]}",{'A305': 1.0},A305,,"    public boolean isLoading() {
        return !exoPlayerIsNull() && simpleExoPlayer.isLoading();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isLive,boolean isLive(),"[2234, 2244]","{'A305': [(2234, 2235), (2238, 2239), (2241, 2244)], 'A383': [(2236, 2236)], 'A300': [(2240, 2240)], 'A293': [(2237, 2237)]}","{'A305': 0.7272727272727273, 'A383': 0.09090909090909091, 'A300': 0.09090909090909091, 'A293': 0.09090909090909091}",A305,,"    private boolean isLive() {
        try {
            return !exoPlayerIsNull() && simpleExoPlayer.isCurrentMediaItemDynamic();
        } catch (final IndexOutOfBoundsException e) {
            // Why would this even happen =(... but lets log it anyway, better safe than sorry
            if (DEBUG) {
                Log.d(TAG, ""player.isCurrentWindowDynamic() failed: "", e);
            }
            return false;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setPlaybackQuality,void setPlaybackQuality(String),"[2246, 2251]","{'A305': [(2246, 2246), (2249, 2249), (2251, 2251)], 'A386': [(2247, 2248), (2250, 2250)]}","{'A305': 0.5, 'A386': 0.5}",A305,,"    public void setPlaybackQuality(@Nullable final String quality) {
        saveStreamProgressState();
        setRecovery();
        videoResolver.setPlaybackQuality(quality);
        reloadPlayQueueManager();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,setAudioTrack,void setAudioTrack(String),"[2253, 2259]","{'A386': [(2253, 2259)]}",{'A386': 1.0},A386,,"    public void setAudioTrack(@Nullable final String audioTrackId) {
        saveStreamProgressState();
        setRecovery();
        videoResolver.setAudioTrack(audioTrackId);
        audioResolver.setAudioTrack(audioTrackId);
        reloadPlayQueueManager();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getContext,Context getContext(),"[2262, 2265]","{'A305': [(2262, 2265)]}",{'A305': 1.0},A305,,"    @NonNull
    public Context getContext() {
        return context;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPrefs,SharedPreferences getPrefs(),"[2267, 2270]","{'A305': [(2267, 2270)]}",{'A305': 1.0},A305,,"    @NonNull
    public SharedPreferences getPrefs() {
        return prefs;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlayerType,PlayerType getPlayerType(),"[2273, 2275]","{'A305': [(2273, 2275)]}",{'A305': 1.0},A305,,"    public PlayerType getPlayerType() {
        return playerType;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,audioPlayerSelected,boolean audioPlayerSelected(),"[2277, 2279]","{'A305': [(2277, 2279)]}",{'A305': 1.0},A305,,"    public boolean audioPlayerSelected() {
        return playerType == PlayerType.AUDIO;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,videoPlayerSelected,boolean videoPlayerSelected(),"[2281, 2283]","{'A305': [(2281, 2283)]}",{'A305': 1.0},A305,,"    public boolean videoPlayerSelected() {
        return playerType == PlayerType.MAIN;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,popupPlayerSelected,boolean popupPlayerSelected(),"[2285, 2287]","{'A305': [(2285, 2287)]}",{'A305': 1.0},A305,,"    public boolean popupPlayerSelected() {
        return playerType == PlayerType.POPUP;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getPlayQueue,PlayQueue getPlayQueue(),"[2290, 2293]","{'A305': [(2290, 2293)]}",{'A305': 1.0},A305,,"    @Nullable
    public PlayQueue getPlayQueue() {
        return playQueue;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getAudioReactor,AudioReactor getAudioReactor(),"[2295, 2297]","{'A305': [(2295, 2297)]}",{'A305': 1.0},A305,,"    public AudioReactor getAudioReactor() {
        return audioReactor;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getService,PlayerService getService(),"[2299, 2301]","{'A305': [(2299, 2301)]}",{'A305': 1.0},A305,,"    public PlayerService getService() {
        return service;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,isAudioOnly,boolean isAudioOnly(),"[2303, 2305]","{'A305': [(2303, 2305)]}",{'A305': 1.0},A305,,"    public boolean isAudioOnly() {
        return isAudioOnly;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getTrackSelector,DefaultTrackSelector getTrackSelector(),"[2307, 2310]","{'A305': [(2307, 2309)], 'A296': [(2310, 2310)]}","{'A305': 0.75, 'A296': 0.25}",A305,,"    @NonNull
    public DefaultTrackSelector getTrackSelector() {
        return trackSelector;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getCurrentMetadata,MediaItemTag getCurrentMetadata(),"[2312, 2315]","{'A305': [(2312, 2315)]}",{'A305': 1.0},A305,,"    @Nullable
    public MediaItemTag getCurrentMetadata() {
        return currentMetadata;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getCurrentItem,PlayQueueItem getCurrentItem(),"[2317, 2320]","{'A305': [(2317, 2320)]}",{'A305': 1.0},A305,,"    @Nullable
    public PlayQueueItem getCurrentItem() {
        return currentItem;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getFragmentListener,Optional<PlayerServiceEventListener> getFragmentListener(),"[2322, 2324]","{'A305': [(2322, 2324)]}",{'A305': 1.0},A305,,"    public Optional<PlayerServiceEventListener> getFragmentListener() {
        return Optional.ofNullable(fragmentListener);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,UIs,PlayerUiList UIs(),"[2329, 2332]","{'A305': [(2329, 2331)], 'A320': [(2332, 2332)]}","{'A305': 0.75, 'A320': 0.25}",A305,,"    @SuppressWarnings(""MethodName"") // keep the unusual method name
    public PlayerUiList UIs() {
        return UIs;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/Player.java,Player,getVideoRendererIndex,int getVideoRendererIndex(),"[2343, 2360]","{'A293': [(2343, 2360)]}",{'A293': 1.0},A293,,"    private int getVideoRendererIndex() {
        final MappingTrackSelector.MappedTrackInfo mappedTrackInfo = trackSelector
                .getCurrentMappedTrackInfo();

        if (mappedTrackInfo == null) {
            return RENDERER_UNAVAILABLE;
        }

        // Check every renderer
        return IntStream.range(0, mappedTrackInfo.getRendererCount())
                // Check the renderer is a video renderer and has at least one track
                .filter(i -> !mappedTrackInfo.getTrackGroups(i).isEmpty()
                        && simpleExoPlayer.getRendererType(i) == C.TRACK_TYPE_VIDEO)
                // Return the first index found (there is at most one renderer per renderer type)
                .findFirst()
                // No video renderer index with at least one track found: return unavailable index
                .orElse(RENDERER_UNAVAILABLE);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onCreate,void onCreate(Bundle),"[84, 100]","{'A390': [(84, 84), (86, 86), (88, 88), (93, 94), (96, 100)], 'A305': [(87, 87), (95, 95)], 'A295': [(89, 92)], 'A294': [(85, 85)]}","{'A390': 0.5882352941176471, 'A305': 0.11764705882352941, 'A295': 0.23529411764705882, 'A294': 0.058823529411764705}",A390,,"    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        ThemeHelper.setTheme(this, ServiceHelper.getSelectedServiceId(this));

        queueControlBinding = ActivityPlayerQueueControlBinding.inflate(getLayoutInflater());
        setContentView(queueControlBinding.getRoot());

        setSupportActionBar(queueControlBinding.toolbar);
        if (getSupportActionBar() != null) {
            getSupportActionBar().setDisplayHomeAsUpEnabled(true);
            getSupportActionBar().setTitle(R.string.title_activity_play_queue);
        }

        serviceConnection = getServiceConnection();
        bind();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onCreateOptionsMenu,boolean onCreateOptionsMenu(Menu),"[102, 114]","{'A390': [(102, 102), (113, 114)], 'A386': [(107, 107)], 'A305': [(106, 106)], 'A294': [(103, 105)], 'A391': [(108, 108)], 'A392': [(109, 112)]}","{'A390': 0.23076923076923078, 'A386': 0.07692307692307693, 'A305': 0.07692307692307693, 'A294': 0.23076923076923078, 'A391': 0.07692307692307693, 'A392': 0.3076923076923077}",A392,,"    @Override
    public boolean onCreateOptionsMenu(final Menu m) {
        this.menu = m;
        getMenuInflater().inflate(R.menu.menu_play_queue, m);
        getMenuInflater().inflate(R.menu.menu_play_queue_bg, m);
        buildAudioTrackMenu();
        onMaybeMuteChanged();
        // to avoid null reference
        if (player != null) {
            onPlaybackParameterChanged(player.getPlaybackParameters());
        }
        return true;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onPrepareOptionsMenu,boolean onPrepareOptionsMenu(Menu),"[117, 126]","{'A305': [(119, 124)], 'A290': [(117, 118), (125, 126)]}","{'A305': 0.6, 'A290': 0.4}",A305,,"    @Override
    public boolean onPrepareOptionsMenu(final Menu m) {
        if (player != null) {
            menu.findItem(R.id.action_switch_popup)
                    .setVisible(!player.popupPlayerSelected());
            menu.findItem(R.id.action_switch_background)
                    .setVisible(!player.audioPlayerSelected());
        }
        return super.onPrepareOptionsMenu(m);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[128, 171]","{'A390': [(128, 128), (130, 133), (139, 139), (145, 148), (163, 163), (171, 171)], 'A386': [(164, 169)], 'A305': [(134, 136), (138, 138), (144, 144), (151, 161), (170, 170)], 'A310': [(137, 137), (149, 150), (162, 162)], 'A294': [(129, 129)], 'A391': [(143, 143)], 'A393': [(140, 142)]}","{'A390': 0.2727272727272727, 'A386': 0.13636363636363635, 'A305': 0.38636363636363635, 'A310': 0.09090909090909091, 'A294': 0.022727272727272728, 'A391': 0.022727272727272728, 'A393': 0.06818181818181818}",A305,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                finish();
                return true;
            case R.id.action_settings:
                NavigationHelper.openSettings(this);
                return true;
            case R.id.action_append_playlist:
                PlaylistDialog.showForPlayQueue(player, getSupportFragmentManager());
                return true;
            case R.id.action_playback_speed:
                openPlaybackParameterDialog();
                return true;
            case R.id.action_mute:
                player.toggleMute();
                return true;
            case R.id.action_system_audio:
                startActivity(new Intent(Settings.ACTION_SOUND_SETTINGS));
                return true;
            case R.id.action_switch_main:
                this.player.setRecovery();
                NavigationHelper.playOnMainPlayer(this, player.getPlayQueue(), true);
                return true;
            case R.id.action_switch_popup:
                if (PermissionHelper.isPopupEnabledElseAsk(this)) {
                    this.player.setRecovery();
                    NavigationHelper.playOnPopupPlayer(this, player.getPlayQueue(), true);
                }
                return true;
            case R.id.action_switch_background:
                this.player.setRecovery();
                NavigationHelper.playOnBackgroundPlayer(this, player.getPlayQueue(), true);
                return true;
        }

        if (item.getGroupId() == MENU_ID_AUDIO_TRACK) {
            onAudioTrackClick(item.getItemId());
            return true;
        }

        return super.onOptionsItemSelected(item);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onDestroy,void onDestroy(),"[173, 177]","{'A390': [(173, 177)]}",{'A390': 1.0},A390,,"    @Override
    protected void onDestroy() {
        super.onDestroy();
        unbind();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,bind,void bind(),"[183, 193]","{'A390': [(183, 183), (189, 193)], 'A305': [(184, 188)]}","{'A390': 0.5454545454545454, 'A305': 0.45454545454545453}",A390,,"    private void bind() {
        // Note: this code should not really exist, and PlayerHolder should be used instead, but
        // it will be rewritten when NewPlayer will replace the current player.
        final Intent bindIntent = new Intent(this, PlayerService.class);
        bindIntent.setAction(PlayerService.BIND_PLAYER_HOLDER_ACTION);
        final boolean success = bindService(bindIntent, serviceConnection, BIND_AUTO_CREATE);
        if (!success) {
            unbindService(serviceConnection);
        }
        serviceBound = success;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,unbind,void unbind(),"[195, 211]","{'A390': [(195, 195), (197, 198), (209, 211)], 'A305': [(199, 201), (203, 203)], 'A310': [(202, 202), (207, 208)], 'A294': [(204, 206)], 'A391': [(196, 196)]}","{'A390': 0.35294117647058826, 'A305': 0.23529411764705882, 'A310': 0.17647058823529413, 'A294': 0.17647058823529413, 'A391': 0.058823529411764705}",A390,,"    private void unbind() {
        if (serviceBound) {
            unbindService(serviceConnection);
            serviceBound = false;
            if (player != null) {
                player.removeActivityListener(this);
            }

            onQueueUpdate(null);
            if (itemTouchHelper != null) {
                itemTouchHelper.attachToRecyclerView(null);
            }

            itemTouchHelper = null;
            player = null;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,getServiceConnection,ServiceConnection getServiceConnection(),"[213, 239]","{'A390': [(213, 215), (218, 220), (229, 230), (232, 232), (236, 239)], 'A305': [(217, 217), (222, 222), (224, 225), (228, 228), (231, 231), (233, 235)], 'A310': [(223, 223), (226, 227)], 'A294': [(216, 216), (221, 221)]}","{'A390': 0.48148148148148145, 'A305': 0.3333333333333333, 'A310': 0.1111111111111111, 'A294': 0.07407407407407407}",A390,,"    private ServiceConnection getServiceConnection() {
        return new ServiceConnection() {
            @Override
            public void onServiceDisconnected(final ComponentName name) {
                Log.d(TAG, ""Player service is disconnected"");
            }

            @Override
            public void onServiceConnected(final ComponentName name, final IBinder service) {
                Log.d(TAG, ""Player service is connected"");

                if (service instanceof PlayerService.LocalBinder) {
                    player = ((PlayerService.LocalBinder) service).getService().getPlayer();
                }

                if (player == null || player.getPlayQueue() == null || player.exoPlayerIsNull()) {
                    unbind();
                } else {
                    onQueueUpdate(player.getPlayQueue());
                    buildComponents();
                    if (player != null) {
                        player.setActivityListener(PlayQueueActivity.this);
                    }
                }
            }
        };
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onServiceDisconnected,void onServiceDisconnected(ComponentName),"[215, 218]","{'A390': [(215, 215), (218, 218)], 'A305': [(217, 217)], 'A294': [(216, 216)]}","{'A390': 0.5, 'A305': 0.25, 'A294': 0.25}",A390,,"            @Override
            public void onServiceDisconnected(final ComponentName name) {
                Log.d(TAG, ""Player service is disconnected"");
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onServiceConnected,"void onServiceConnected(ComponentName,IBinder)","[220, 237]","{'A390': [(220, 220), (229, 230), (232, 232), (236, 237)], 'A305': [(222, 222), (224, 225), (228, 228), (231, 231), (233, 235)], 'A310': [(223, 223), (226, 227)], 'A294': [(221, 221)]}","{'A390': 0.3333333333333333, 'A305': 0.4444444444444444, 'A310': 0.16666666666666666, 'A294': 0.05555555555555555}",A305,,"            @Override
            public void onServiceConnected(final ComponentName name, final IBinder service) {
                Log.d(TAG, ""Player service is connected"");

                if (service instanceof PlayerService.LocalBinder) {
                    player = ((PlayerService.LocalBinder) service).getService().getPlayer();
                }

                if (player == null || player.getPlayQueue() == null || player.exoPlayerIsNull()) {
                    unbind();
                } else {
                    onQueueUpdate(player.getPlayQueue());
                    buildComponents();
                    if (player != null) {
                        player.setActivityListener(PlayQueueActivity.this);
                    }
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,buildComponents,void buildComponents(),"[245, 250]","{'A390': [(245, 250)]}",{'A390': 1.0},A390,,"    private void buildComponents() {
        buildQueue();
        buildMetadata();
        buildSeekBar();
        buildControls();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,buildQueue,void buildQueue(),"[252, 261]","{'A390': [(252, 252), (258, 259), (261, 261)], 'A295': [(253, 257), (260, 260)]}","{'A390': 0.4, 'A295': 0.6}",A295,,"    private void buildQueue() {
        queueControlBinding.playQueue.setLayoutManager(new LinearLayoutManager(this));
        queueControlBinding.playQueue.setClickable(true);
        queueControlBinding.playQueue.setLongClickable(true);
        queueControlBinding.playQueue.clearOnScrollListeners();
        queueControlBinding.playQueue.addOnScrollListener(getQueueScrollListener());

        itemTouchHelper = new ItemTouchHelper(getItemTouchCallback());
        itemTouchHelper.attachToRecyclerView(queueControlBinding.playQueue);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,buildMetadata,void buildMetadata(),"[263, 267]","{'A390': [(263, 263), (267, 267)], 'A295': [(264, 266)]}","{'A390': 0.4, 'A295': 0.6}",A295,,"    private void buildMetadata() {
        queueControlBinding.metadata.setOnClickListener(this);
        queueControlBinding.songName.setSelected(true);
        queueControlBinding.artistName.setSelected(true);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,buildSeekBar,void buildSeekBar(),"[269, 272]","{'A390': [(269, 269), (272, 272)], 'A295': [(270, 271)]}","{'A390': 0.5, 'A295': 0.5}",A390,,"    private void buildSeekBar() {
        queueControlBinding.seekBar.setOnSeekBarChangeListener(this);
        queueControlBinding.liveSync.setOnClickListener(this);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,buildControls,void buildControls(),"[274, 282]","{'A390': [(274, 274), (282, 282)], 'A295': [(275, 281)]}","{'A390': 0.2222222222222222, 'A295': 0.7777777777777778}",A295,,"    private void buildControls() {
        queueControlBinding.controlRepeat.setOnClickListener(this);
        queueControlBinding.controlBackward.setOnClickListener(this);
        queueControlBinding.controlFastRewind.setOnClickListener(this);
        queueControlBinding.controlPlayPause.setOnClickListener(this);
        queueControlBinding.controlFastForward.setOnClickListener(this);
        queueControlBinding.controlForward.setOnClickListener(this);
        queueControlBinding.controlShuffle.setOnClickListener(this);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,getQueueScrollListener,OnScrollBelowItemsListener getQueueScrollListener(),"[288, 300]","{'A295': [(295, 296)], 'A310': [(288, 290), (294, 294), (297, 300)], 'A294': [(291, 293)]}","{'A295': 0.15384615384615385, 'A310': 0.6153846153846154, 'A294': 0.23076923076923078}",A310,,"    private OnScrollBelowItemsListener getQueueScrollListener() {
        return new OnScrollBelowItemsListener() {
            @Override
            public void onScrolledDown(final RecyclerView recyclerView) {
                if (player != null && player.getPlayQueue() != null
                        && !player.getPlayQueue().isComplete()) {
                    player.getPlayQueue().fetch();
                } else {
                    queueControlBinding.playQueue.clearOnScrollListeners();
                }
            }
        };
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onScrolledDown,void onScrolledDown(RecyclerView),"[290, 298]","{'A295': [(295, 296)], 'A310': [(290, 290), (294, 294), (297, 298)], 'A294': [(291, 293)]}","{'A295': 0.2222222222222222, 'A310': 0.4444444444444444, 'A294': 0.3333333333333333}",A310,,"            @Override
            public void onScrolledDown(final RecyclerView recyclerView) {
                if (player != null && player.getPlayQueue() != null
                        && !player.getPlayQueue().isComplete()) {
                    player.getPlayQueue().fetch();
                } else {
                    queueControlBinding.playQueue.clearOnScrollListeners();
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,getItemTouchCallback,ItemTouchHelper.SimpleCallback getItemTouchCallback(),"[302, 318]","{'A390': [(302, 302), (309, 309), (317, 318)], 'A310': [(303, 304)], 'A294': [(305, 308), (312, 315)], 'A394': [(310, 311), (316, 316)]}","{'A390': 0.23529411764705882, 'A310': 0.11764705882352941, 'A294': 0.47058823529411764, 'A394': 0.17647058823529413}",A294,,"    private ItemTouchHelper.SimpleCallback getItemTouchCallback() {
        return new PlayQueueItemTouchCallback() {
            @Override
            public void onMove(final int sourceIndex, final int targetIndex) {
                if (player != null) {
                    player.getPlayQueue().move(sourceIndex, targetIndex);
                }
            }

            @Override
            public void onSwiped(final int index) {
                if (index != -1) {
                    player.getPlayQueue().remove(index);
                }
            }
        };
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onMove,"void onMove(int,int)","[304, 309]","{'A390': [(309, 309)], 'A310': [(304, 304)], 'A294': [(305, 308)]}","{'A390': 0.16666666666666666, 'A310': 0.16666666666666666, 'A294': 0.6666666666666666}",A294,,"            @Override
            public void onMove(final int sourceIndex, final int targetIndex) {
                if (player != null) {
                    player.getPlayQueue().move(sourceIndex, targetIndex);
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onSwiped,void onSwiped(int),"[311, 316]","{'A294': [(312, 315)], 'A394': [(311, 311), (316, 316)]}","{'A294': 0.6666666666666666, 'A394': 0.3333333333333333}",A294,,"            @Override
            public void onSwiped(final int index) {
                if (index != -1) {
                    player.getPlayQueue().remove(index);
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,getOnSelectedListener,PlayQueueItemBuilder.OnSelectedListener getOnSelectedListener(),"[320, 344]","{'A390': [(320, 322), (327, 329), (335, 337), (342, 344)], 'A349': [(331, 333)], 'A305': [(325, 325)], 'A294': [(323, 324), (326, 326), (330, 330), (334, 334), (338, 341)]}","{'A390': 0.48, 'A349': 0.12, 'A305': 0.04, 'A294': 0.36}",A390,,"    private PlayQueueItemBuilder.OnSelectedListener getOnSelectedListener() {
        return new PlayQueueItemBuilder.OnSelectedListener() {
            @Override
            public void selected(final PlayQueueItem item, final View view) {
                if (player != null) {
                    player.selectQueueItem(item);
                }
            }

            @Override
            public void held(final PlayQueueItem item, final View view) {
                if (player != null && player.getPlayQueue().indexOf(item) != -1) {
                    openPopupMenu(player.getPlayQueue(), item, view, false,
                            getSupportFragmentManager(), PlayQueueActivity.this);
                }
            }

            @Override
            public void onStartDrag(final PlayQueueItemHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
        };
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,selected,"void selected(PlayQueueItem,View)","[322, 327]","{'A390': [(322, 322), (327, 327)], 'A305': [(325, 325)], 'A294': [(323, 324), (326, 326)]}","{'A390': 0.3333333333333333, 'A305': 0.16666666666666666, 'A294': 0.5}",A294,,"            @Override
            public void selected(final PlayQueueItem item, final View view) {
                if (player != null) {
                    player.selectQueueItem(item);
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,held,"void held(PlayQueueItem,View)","[329, 335]","{'A390': [(329, 329), (335, 335)], 'A349': [(331, 333)], 'A294': [(330, 330), (334, 334)]}","{'A390': 0.2857142857142857, 'A349': 0.42857142857142855, 'A294': 0.2857142857142857}",A349,,"            @Override
            public void held(final PlayQueueItem item, final View view) {
                if (player != null && player.getPlayQueue().indexOf(item) != -1) {
                    openPopupMenu(player.getPlayQueue(), item, view, false,
                            getSupportFragmentManager(), PlayQueueActivity.this);
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onStartDrag,void onStartDrag(PlayQueueItemHolder),"[337, 342]","{'A390': [(337, 337), (342, 342)], 'A294': [(338, 341)]}","{'A390': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"            @Override
            public void onStartDrag(final PlayQueueItemHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,scrollToSelected,void scrollToSelected(),"[346, 367]","{'A390': [(346, 346), (367, 367)], 'A295': [(353, 355), (363, 363), (365, 365)], 'A310': [(350, 352), (356, 362), (364, 364), (366, 366)], 'A294': [(347, 349)]}","{'A390': 0.09090909090909091, 'A295': 0.22727272727272727, 'A310': 0.5454545454545454, 'A294': 0.13636363636363635}",A310,,"    private void scrollToSelected() {
        if (player == null) {
            return;
        }

        final int currentPlayingIndex = player.getPlayQueue().getIndex();
        final int currentVisibleIndex;
        if (queueControlBinding.playQueue.getLayoutManager() instanceof LinearLayoutManager) {
            final LinearLayoutManager layout =
                    (LinearLayoutManager) queueControlBinding.playQueue.getLayoutManager();
            currentVisibleIndex = layout.findFirstVisibleItemPosition();
        } else {
            currentVisibleIndex = 0;
        }

        final int distance = Math.abs(currentPlayingIndex - currentVisibleIndex);
        if (distance < SMOOTH_SCROLL_MAXIMUM_DISTANCE) {
            queueControlBinding.playQueue.smoothScrollToPosition(currentPlayingIndex);
        } else {
            queueControlBinding.playQueue.scrollToPosition(currentPlayingIndex);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onClick,void onClick(View),"[373, 398]","{'A390': [(373, 373), (397, 398)], 'A305': [(380, 380), (382, 382), (384, 384), (386, 386), (388, 388), (390, 390), (392, 392)], 'A295': [(379, 379), (381, 381), (383, 383), (385, 385), (387, 387), (389, 389), (391, 391), (393, 393), (395, 395)], 'A310': [(378, 378), (394, 394), (396, 396)], 'A294': [(374, 377)]}","{'A390': 0.11538461538461539, 'A305': 0.2692307692307692, 'A295': 0.34615384615384615, 'A310': 0.11538461538461539, 'A294': 0.15384615384615385}",A295,,"    @Override
    public void onClick(final View view) {
        if (player == null) {
            return;
        }

        if (view.getId() == queueControlBinding.controlRepeat.getId()) {
            player.cycleNextRepeatMode();
        } else if (view.getId() == queueControlBinding.controlBackward.getId()) {
            player.playPrevious();
        } else if (view.getId() == queueControlBinding.controlFastRewind.getId()) {
            player.fastRewind();
        } else if (view.getId() == queueControlBinding.controlPlayPause.getId()) {
            player.playPause();
        } else if (view.getId() == queueControlBinding.controlFastForward.getId()) {
            player.fastForward();
        } else if (view.getId() == queueControlBinding.controlForward.getId()) {
            player.playNext();
        } else if (view.getId() == queueControlBinding.controlShuffle.getId()) {
            player.toggleShuffleModeEnabled();
        } else if (view.getId() == queueControlBinding.metadata.getId()) {
            scrollToSelected();
        } else if (view.getId() == queueControlBinding.liveSync.getId()) {
            player.seekToDefault();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,openPlaybackParameterDialog,void openPlaybackParameterDialog(),"[404, 410]","{'A305': [(409, 409)], 'A310': [(404, 404), (408, 408), (410, 410)], 'A294': [(405, 407)]}","{'A305': 0.14285714285714285, 'A310': 0.42857142857142855, 'A294': 0.42857142857142855}",A310,,"    private void openPlaybackParameterDialog() {
        if (player == null) {
            return;
        }
        PlaybackParameterDialog.newInstance(player.getPlaybackSpeed(), player.getPlaybackPitch(),
                player.getPlaybackSkipSilence(), this).show(getSupportFragmentManager(), TAG);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onPlaybackParameterChanged,"void onPlaybackParameterChanged(float,float,boolean)","[412, 419]","{'A298': [(417, 417)], 'A310': [(412, 412), (415, 416), (418, 419)], 'A294': [(413, 414)]}","{'A298': 0.125, 'A310': 0.625, 'A294': 0.25}",A310,,"    @Override
    public void onPlaybackParameterChanged(final float playbackTempo, final float playbackPitch,
                                           final boolean playbackSkipSilence) {
        if (player != null) {
            player.setPlaybackParameters(playbackTempo, playbackPitch, playbackSkipSilence);
            onPlaybackParameterChanged(player.getPlaybackParameters());
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onProgressChanged,"void onProgressChanged(SeekBar,int,boolean)","[425, 433]","{'A390': [(425, 425), (433, 433)], 'A295': [(430, 431)], 'A310': [(428, 429), (432, 432)], 'A294': [(426, 427)]}","{'A390': 0.2222222222222222, 'A295': 0.2222222222222222, 'A310': 0.3333333333333333, 'A294': 0.2222222222222222}",A310,,"    @Override
    public void onProgressChanged(final SeekBar seekBar, final int progress,
                                  final boolean fromUser) {
        if (fromUser) {
            final String seekTime = Localization.getDurationString(progress / 1000);
            queueControlBinding.currentTime.setText(seekTime);
            queueControlBinding.seekDisplay.setText(seekTime);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onStartTrackingTouch,void onStartTrackingTouch(SeekBar),"[435, 439]","{'A390': [(435, 435), (437, 437), (439, 439)], 'A295': [(438, 438)], 'A294': [(436, 436)]}","{'A390': 0.6, 'A295': 0.2, 'A294': 0.2}",A390,,"    @Override
    public void onStartTrackingTouch(final SeekBar seekBar) {
        seeking = true;
        queueControlBinding.seekDisplay.setVisibility(View.VISIBLE);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onStopTrackingTouch,void onStopTrackingTouch(SeekBar),"[441, 448]","{'A390': [(441, 441), (447, 448)], 'A295': [(446, 446)], 'A294': [(442, 445)]}","{'A390': 0.375, 'A295': 0.125, 'A294': 0.5}",A294,,"    @Override
    public void onStopTrackingTouch(final SeekBar seekBar) {
        if (player != null) {
            player.seekTo(seekBar.getProgress());
        }
        queueControlBinding.seekDisplay.setVisibility(View.GONE);
        seeking = false;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onQueueUpdate,void onQueueUpdate(PlayQueue),"[454, 463]","{'A305': [(455, 462)], 'A290': [(454, 454), (463, 463)]}","{'A305': 0.8, 'A290': 0.2}",A305,,"    @Override
    public void onQueueUpdate(@Nullable final PlayQueue queue) {
        if (queue == null) {
            queueControlBinding.playQueue.setAdapter(null);
        } else {
            final PlayQueueAdapter adapter = new PlayQueueAdapter(this, queue);
            adapter.setSelectedListener(getOnSelectedListener());
            queueControlBinding.playQueue.setAdapter(adapter);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onPlaybackUpdate,"void onPlaybackUpdate(int,int,boolean,PlaybackParameters)","[465, 472]","{'A390': [(465, 465), (468, 470), (472, 472)], 'A294': [(466, 467)], 'A391': [(471, 471)]}","{'A390': 0.625, 'A294': 0.25, 'A391': 0.125}",A390,,"    @Override
    public void onPlaybackUpdate(final int state, final int repeatMode, final boolean shuffled,
                                 final PlaybackParameters parameters) {
        onStateChanged(state);
        onPlayModeChanged(repeatMode, shuffled);
        onPlaybackParameterChanged(parameters);
        onMaybeMuteChanged();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onProgressUpdate,"void onProgressUpdate(int,int,int)","[474, 501]","{'A390': [(474, 474), (477, 477), (480, 481), (484, 486), (490, 490), (501, 501)], 'A302': [(495, 495)], 'A298': [(496, 496)], 'A295': [(478, 478), (482, 483), (487, 489), (493, 493), (497, 500)], 'A310': [(491, 492), (494, 494)], 'A294': [(475, 476), (479, 479)]}","{'A390': 0.32142857142857145, 'A302': 0.03571428571428571, 'A298': 0.03571428571428571, 'A295': 0.39285714285714285, 'A310': 0.10714285714285714, 'A294': 0.10714285714285714}",A295,,"    @Override
    public void onProgressUpdate(final int currentProgress, final int duration,
                                 final int bufferPercent) {
        // Set buffer progress
        queueControlBinding.seekBar.setSecondaryProgress((int) (queueControlBinding.seekBar.getMax()
                * ((float) bufferPercent / 100)));

        // Set Duration
        queueControlBinding.seekBar.setMax(duration);
        queueControlBinding.endTime.setText(Localization.getDurationString(duration / 1000));

        // Set current time if not seeking
        if (!seeking) {
            queueControlBinding.seekBar.setProgress(currentProgress);
            queueControlBinding.currentTime.setText(Localization
                    .getDurationString(currentProgress / 1000));
        }

        if (player != null) {
            queueControlBinding.liveSync.setClickable(!player.isLiveEdge());
        }

        // this will make sure progressCurrentTime has the same width as progressEndTime
        final ViewGroup.LayoutParams currentTimeParams =
                queueControlBinding.currentTime.getLayoutParams();
        currentTimeParams.width = queueControlBinding.endTime.getWidth();
        queueControlBinding.currentTime.setLayoutParams(currentTimeParams);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onMetadataUpdate,"void onMetadataUpdate(StreamInfo,PlayQueue)","[503, 523]","{'A390': [(503, 503), (505, 505), (521, 523)], 'A295': [(506, 507), (509, 510), (514, 514), (517, 517)], 'A310': [(508, 508), (511, 513), (515, 516), (518, 520)], 'A290': [(504, 504)]}","{'A390': 0.23809523809523808, 'A295': 0.2857142857142857, 'A310': 0.42857142857142855, 'A290': 0.047619047619047616}",A310,,"    @Override
    public void onMetadataUpdate(final StreamInfo info, final PlayQueue queue) {
        if (info != null) {
            queueControlBinding.songName.setText(info.getName());
            queueControlBinding.artistName.setText(info.getUploaderName());

            queueControlBinding.endTime.setVisibility(View.GONE);
            queueControlBinding.liveSync.setVisibility(View.GONE);
            switch (info.getStreamType()) {
                case LIVE_STREAM:
                case AUDIO_LIVE_STREAM:
                    queueControlBinding.liveSync.setVisibility(View.VISIBLE);
                    break;
                default:
                    queueControlBinding.endTime.setVisibility(View.VISIBLE);
                    break;
            }

            scrollToSelected();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onServiceStopped,void onServiceStopped(),"[525, 529]","{'A390': [(525, 527), (529, 529)], 'A310': [(528, 528)]}","{'A390': 0.8, 'A310': 0.2}",A390,,"    @Override
    public void onServiceStopped() {
        unbind();
        finish();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onStateChanged,void onStateChanged(int),"[535, 568]","{'A390': [(535, 535), (537, 537), (541, 541), (545, 545), (549, 554), (561, 562), (566, 568)], 'A298': [(536, 536), (539, 540), (543, 544), (547, 548)], 'A305': [(538, 538), (542, 542), (546, 546), (555, 557)], 'A295': [(558, 560), (563, 565)]}","{'A390': 0.4411764705882353, 'A298': 0.20588235294117646, 'A305': 0.17647058823529413, 'A295': 0.17647058823529413}",A390,,"    private void onStateChanged(final int state) {
        final ImageButton playPauseButton = queueControlBinding.controlPlayPause;
        switch (state) {
            case Player.STATE_PAUSED:
                playPauseButton.setImageResource(R.drawable.ic_play_arrow);
                playPauseButton.setContentDescription(getString(R.string.play));
                break;
            case Player.STATE_PLAYING:
                playPauseButton.setImageResource(R.drawable.ic_pause);
                playPauseButton.setContentDescription(getString(R.string.pause));
                break;
            case Player.STATE_COMPLETED:
                playPauseButton.setImageResource(R.drawable.ic_replay);
                playPauseButton.setContentDescription(getString(R.string.replay));
                break;
            default:
                break;
        }

        switch (state) {
            case Player.STATE_PAUSED:
            case Player.STATE_PLAYING:
            case Player.STATE_COMPLETED:
                queueControlBinding.controlPlayPause.setClickable(true);
                queueControlBinding.controlPlayPause.setVisibility(View.VISIBLE);
                queueControlBinding.controlProgressBar.setVisibility(View.GONE);
                break;
            default:
                queueControlBinding.controlPlayPause.setClickable(false);
                queueControlBinding.controlPlayPause.setVisibility(View.INVISIBLE);
                queueControlBinding.controlProgressBar.setVisibility(View.VISIBLE);
                break;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onPlayModeChanged,"void onPlayModeChanged(int,boolean)","[570, 588]","{'A390': [(570, 571), (575, 575), (579, 579), (583, 586), (588, 588)], 'A305': [(572, 574), (576, 578), (580, 582)], 'A295': [(587, 587)]}","{'A390': 0.47368421052631576, 'A305': 0.47368421052631576, 'A295': 0.05263157894736842}",A390,,"    private void onPlayModeChanged(final int repeatMode, final boolean shuffled) {
        switch (repeatMode) {
            case com.google.android.exoplayer2.Player.REPEAT_MODE_OFF:
                queueControlBinding.controlRepeat.setImageResource(
                        com.google.android.exoplayer2.ui.R.drawable.exo_controls_repeat_off);
                break;
            case com.google.android.exoplayer2.Player.REPEAT_MODE_ONE:
                queueControlBinding.controlRepeat.setImageResource(
                        com.google.android.exoplayer2.ui.R.drawable.exo_controls_repeat_one);
                break;
            case com.google.android.exoplayer2.Player.REPEAT_MODE_ALL:
                queueControlBinding.controlRepeat.setImageResource(
                        com.google.android.exoplayer2.ui.R.drawable.exo_controls_repeat_all);
                break;
        }

        final int shuffleAlpha = shuffled ? 255 : 77;
        queueControlBinding.controlShuffle.setImageAlpha(shuffleAlpha);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onPlaybackParameterChanged,void onPlaybackParameterChanged(PlaybackParameters),"[590, 595]","{'A390': [(594, 595)], 'A298': [(590, 593)]}","{'A390': 0.3333333333333333, 'A298': 0.6666666666666666}",A298,,"    private void onPlaybackParameterChanged(@Nullable final PlaybackParameters parameters) {
        if (parameters != null && menu != null && player != null) {
            final MenuItem item = menu.findItem(R.id.action_playback_speed);
            item.setTitle(formatSpeed(parameters.speed));
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onMaybeMuteChanged,void onMaybeMuteChanged(),"[597, 609]","{'A305': [(606, 606)], 'A294': [(599, 599)], 'A391': [(597, 598), (600, 605), (608, 609)], 'A312': [(607, 607)]}","{'A305': 0.07692307692307693, 'A294': 0.07692307692307693, 'A391': 0.7692307692307693, 'A312': 0.07692307692307693}",A391,,"    private void onMaybeMuteChanged() {
        if (menu != null && player != null) {
            final MenuItem item = menu.findItem(R.id.action_mute);

            //Change the mute-button item in ActionBar
            //1) Text change:
            item.setTitle(player.isMuted() ? R.string.unmute : R.string.mute);

            //2) Icon change accordingly to current App Theme
            // using rootView.getContext() because getApplicationContext() didn't work
            item.setIcon(player.isMuted() ? R.drawable.ic_volume_off : R.drawable.ic_volume_up);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onAudioTrackUpdate,void onAudioTrackUpdate(),"[611, 614]","{'A386': [(611, 614)]}",{'A386': 1.0},A386,,"    @Override
    public void onAudioTrackUpdate() {
        buildAudioTrackMenu();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,buildAudioTrackMenu,void buildAudioTrackMenu(),"[616, 655]","{'A386': [(616, 622), (625, 627), (630, 655)], 'A333': [(623, 624), (628, 629)]}","{'A386': 0.9, 'A333': 0.1}",A386,,"    private void buildAudioTrackMenu() {
        if (menu == null) {
            return;
        }

        final MenuItem audioTrackSelector = menu.findItem(R.id.action_audio_track);
        final List<AudioStream> availableStreams =
                Optional.ofNullable(player)
                        .map(Player::getCurrentMetadata)
                        .flatMap(MediaItemTag::getMaybeAudioTrack)
                        .map(MediaItemTag.AudioTrack::getAudioStreams)
                        .orElse(null);
        final Optional<AudioStream> selectedAudioStream = Optional.ofNullable(player)
                .flatMap(Player::getSelectedAudioStream);

        if (availableStreams == null || availableStreams.size() < 2
                || selectedAudioStream.isEmpty()) {
            audioTrackSelector.setVisible(false);
        } else {
            final SubMenu audioTrackMenu = audioTrackSelector.getSubMenu();
            audioTrackMenu.clear();

            for (int i = 0; i < availableStreams.size(); i++) {
                final AudioStream audioStream = availableStreams.get(i);
                audioTrackMenu.add(MENU_ID_AUDIO_TRACK, i, Menu.NONE,
                        Localization.audioTrackName(this, audioStream));
            }

            final AudioStream s = selectedAudioStream.get();
            final String trackName = Localization.audioTrackName(this, s);
            audioTrackSelector.setTitle(
                    getString(R.string.play_queue_audio_track, trackName));

            final String shortName = s.getAudioLocale() != null
                    ? s.getAudioLocale().getLanguage() : trackName;
            audioTrackSelector.setTitleCondensed(
                    shortName.substring(0, Math.min(shortName.length(), 2)));
            audioTrackSelector.setVisible(true);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayQueueActivity.java,PlayQueueActivity,onAudioTrackClick,void onAudioTrackClick(int),"[662, 676]","{'A386': [(662, 676)]}",{'A386': 1.0},A386,,"    private void onAudioTrackClick(final int itemId) {
        if (player.getCurrentMetadata() == null) {
            return;
        }
        player.getCurrentMetadata().getMaybeAudioTrack().ifPresent(audioTrack -> {
            final List<AudioStream> availableStreams = audioTrack.getAudioStreams();
            final int selectedStreamIndex = audioTrack.getSelectedAudioStreamIndex();
            if (selectedStreamIndex == itemId || availableStreams.size() <= itemId) {
                return;
            }

            final String newAudioTrack = availableStreams.get(itemId).getAudioTrackId();
            player.setAudioTrack(newAudioTrack);
        });
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,size,int size(),"[26, 28]","{'A310': [(26, 28)]}",{'A310': 1.0},A310,,"    public int size() {
        return internalSource.getSize();
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,get,ManagedMediaSource get(int),"[37, 47]","{'A310': [(37, 38), (47, 47)], 'A383': [(39, 46)]}","{'A310': 0.2727272727272727, 'A383': 0.7272727272727273}",A383,,"    @Nullable
    public ManagedMediaSource get(final int index) {
        if (index < 0 || index >= size()) {
            return null;
        }

        return MediaItemTag
                .from(internalSource.getMediaSource(index).getMediaItem())
                .flatMap(tag -> tag.getMaybeExtras(ManagedMediaSource.class))
                .orElse(null);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,getParentMediaSource,ConcatenatingMediaSource getParentMediaSource(),"[49, 52]","{'A310': [(49, 52)]}",{'A310': 1.0},A310,,"    @NonNull
    public ConcatenatingMediaSource getParentMediaSource() {
        return internalSource;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,expand,void expand(),"[64, 66]","{'A310': [(64, 64), (66, 66)], 'A383': [(65, 65)]}","{'A310': 0.6666666666666666, 'A383': 0.3333333333333333}",A310,,"    public synchronized void expand() {
        append(PlaceholderMediaSource.COPY);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,append,void append(ManagedMediaSource),"[74, 76]","{'A310': [(74, 76)]}",{'A310': 1.0},A310,,"    public synchronized void append(@NonNull final ManagedMediaSource source) {
        internalSource.addMediaSource(source);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,remove,void remove(int),"[85, 91]","{'A310': [(85, 85), (89, 91)], 'A294': [(86, 88)]}","{'A310': 0.5714285714285714, 'A294': 0.42857142857142855}",A310,,"    public synchronized void remove(final int index) {
        if (index < 0 || index > internalSource.getSize()) {
            return;
        }

        internalSource.removeMediaSource(index);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,move,"void move(int,int)","[102, 111]","{'A310': [(102, 102), (109, 111)], 'A294': [(103, 108)]}","{'A310': 0.4, 'A294': 0.6}",A294,,"    public synchronized void move(final int source, final int target) {
        if (source < 0 || target < 0) {
            return;
        }
        if (source >= internalSource.getSize() || target >= internalSource.getSize()) {
            return;
        }

        internalSource.moveMediaSource(source, target);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,invalidate,"void invalidate(int,Handler,Runnable)","[123, 130]","{'A310': [(123, 123), (125, 125), (130, 130)], 'A294': [(127, 128)], 'A288': [(124, 124)], 'A383': [(126, 126), (129, 129)]}","{'A310': 0.375, 'A294': 0.25, 'A288': 0.125, 'A383': 0.25}",A310,,"    public synchronized void invalidate(final int index,
                                        @Nullable final Handler handler,
                                        @Nullable final Runnable finalizingAction) {
        if (get(index) == PlaceholderMediaSource.COPY) {
            return;
        }
        update(index, PlaceholderMediaSource.COPY, handler, finalizingAction);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,update,"void update(int,ManagedMediaSource)","[140, 142]","{'A310': [(140, 140), (142, 142)], 'A288': [(141, 141)]}","{'A310': 0.6666666666666666, 'A288': 0.3333333333333333}",A310,,"    public synchronized void update(final int index, @NonNull final ManagedMediaSource source) {
        update(index, source, null, /*doNothing=*/null);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/ManagedMediaSourcePlaylist.java,ManagedMediaSourcePlaylist,update,"void update(int,ManagedMediaSource,Handler,Runnable)","[157, 177]","{'A310': [(157, 157), (159, 159), (163, 175), (177, 177)], 'A294': [(160, 162)], 'A288': [(158, 158), (176, 176)]}","{'A310': 0.7619047619047619, 'A294': 0.14285714285714285, 'A288': 0.09523809523809523}",A310,,"    public synchronized void update(final int index, @NonNull final ManagedMediaSource source,
                                    @Nullable final Handler handler,
                                    @Nullable final Runnable finalizingAction) {
        if (index < 0 || index >= internalSource.getSize()) {
            return;
        }

        // Add and remove are sequential on the same thread, therefore here, the exoplayer
        // message queue must receive and process add before remove, effectively treating them
        // as atomic.

        // Since the finalizing action occurs strictly after the timeline has completed
        // all its changes on the playback thread, thus, it is possible, in the meantime,
        // other calls that modifies the playlist media source occur in between. This makes
        // it unsafe to call remove as the finalizing action of add.
        internalSource.addMediaSource(index + 1, source);

        // Because of the above race condition, it is thus only safe to synchronize the player
        // in the finalizing action AFTER the removal is complete and the timeline has changed.
        internalSource.removeMediaSource(index, handler, finalizingAction);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/PlaceholderMediaSource.java,PlaceholderMediaSource,getMediaItem,MediaItem getMediaItem(),"[22, 25]","{'A288': [(22, 23), (25, 25)], 'A383': [(24, 24)]}","{'A288': 0.75, 'A383': 0.25}",A288,,"    @Override
    public MediaItem getMediaItem() {
        return MEDIA_ITEM;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/PlaceholderMediaSource.java,PlaceholderMediaSource,onChildSourceInfoRefreshed,"void onChildSourceInfoRefreshed(Void,MediaSource,Timeline)","[27, 32]","{'A383': [(28, 32)], 'A294': [(27, 27)]}","{'A383': 0.8333333333333334, 'A294': 0.16666666666666666}",A383,,"    @Override
    protected void onChildSourceInfoRefreshed(final Void id,
                                              final MediaSource mediaSource,
                                              final Timeline timeline) {
        /* Do nothing, no timeline updates or error will stall playback */
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/PlaceholderMediaSource.java,PlaceholderMediaSource,createPeriod,"MediaPeriod createPeriod(MediaPeriodId,Allocator,long)","[34, 38]","{'A294': [(34, 38)]}",{'A294': 1.0},A294,,"    @Override
    public MediaPeriod createPeriod(final MediaPeriodId id, final Allocator allocator,
                                    final long startPositionUs) {
        return null;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/PlaceholderMediaSource.java,PlaceholderMediaSource,releasePeriod,void releasePeriod(MediaPeriod),"[40, 41]","{'A294': [(40, 41)]}",{'A294': 1.0},A294,,"    @Override
    public void releasePeriod(final MediaPeriod mediaPeriod) { }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/PlaceholderMediaSource.java,PlaceholderMediaSource,shouldBeReplacedWith,"boolean shouldBeReplacedWith(PlayQueueItem,boolean)","[43, 47]","{'A310': [(43, 43), (45, 47)], 'A294': [(44, 44)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    public boolean shouldBeReplacedWith(@NonNull final PlayQueueItem newIdentity,
                                        final boolean isInterruptable) {
        return true;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/PlaceholderMediaSource.java,PlaceholderMediaSource,isStreamEqual,boolean isStreamEqual(PlayQueueItem),"[49, 52]","{'A310': [(49, 49), (51, 52)], 'A294': [(50, 50)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"    @Override
    public boolean isStreamEqual(@NonNull final PlayQueueItem stream) {
        return false;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/LoadedMediaSource.java,LoadedMediaSource,getStream,PlayQueueItem getStream(),"[40, 42]","{'A310': [(40, 42)]}",{'A310': 1.0},A310,,"    public PlayQueueItem getStream() {
        return stream;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/LoadedMediaSource.java,LoadedMediaSource,isExpired,boolean isExpired(),"[44, 46]","{'A310': [(44, 46)]}",{'A310': 1.0},A310,,"    private boolean isExpired() {
        return System.currentTimeMillis() >= expireTimestamp;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/LoadedMediaSource.java,LoadedMediaSource,getMediaItem,MediaItem getMediaItem(),"[48, 52]","{'A288': [(49, 50), (52, 52)], 'A383': [(48, 48), (51, 51)]}","{'A288': 0.6, 'A383': 0.4}",A288,,"    @NonNull
    @Override
    public MediaItem getMediaItem() {
        return mediaItem;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/LoadedMediaSource.java,LoadedMediaSource,shouldBeReplacedWith,"boolean shouldBeReplacedWith(PlayQueueItem,boolean)","[54, 58]","{'A310': [(54, 54), (56, 58)], 'A294': [(55, 55)]}","{'A310': 0.8, 'A294': 0.2}",A310,,"    @Override
    public boolean shouldBeReplacedWith(@NonNull final PlayQueueItem newIdentity,
                                        final boolean isInterruptable) {
        return newIdentity != stream || (isInterruptable && isExpired());
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/LoadedMediaSource.java,LoadedMediaSource,isStreamEqual,boolean isStreamEqual(PlayQueueItem),"[60, 63]","{'A310': [(60, 60), (63, 63)], 'A294': [(61, 62)]}","{'A310': 0.5, 'A294': 0.5}",A310,,"    @Override
    public boolean isStreamEqual(@NonNull final PlayQueueItem otherStream) {
        return this.stream == otherStream;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,of,"FailedMediaSource of(PlayQueueItem,FailedMediaSourceException)","[63, 66]","{'A383': [(63, 66)]}",{'A383': 1.0},A383,,"    public static FailedMediaSource of(@NonNull final PlayQueueItem playQueueItem,
                                       @NonNull final FailedMediaSourceException error) {
        return new FailedMediaSource(playQueueItem, error, Long.MAX_VALUE);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,of,"FailedMediaSource of(PlayQueueItem,Exception,long)","[68, 73]","{'A310': [(73, 73)], 'A383': [(68, 72)]}","{'A310': 0.16666666666666666, 'A383': 0.8333333333333334}",A383,,"    public static FailedMediaSource of(@NonNull final PlayQueueItem playQueueItem,
                                       @NonNull final Exception error,
                                       final long retryWaitMillis) {
        return new FailedMediaSource(playQueueItem, error,
                System.currentTimeMillis() + retryWaitMillis);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,getStream,PlayQueueItem getStream(),"[75, 77]","{'A310': [(75, 77)]}",{'A310': 1.0},A310,,"    public PlayQueueItem getStream() {
        return playQueueItem;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,getError,Exception getError(),"[79, 81]","{'A310': [(80, 81)], 'A383': [(79, 79)]}","{'A310': 0.6666666666666666, 'A383': 0.3333333333333333}",A310,,"    public Exception getError() {
        return error;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,canRetry,boolean canRetry(),"[83, 85]","{'A310': [(83, 85)]}",{'A310': 1.0},A310,,"    private boolean canRetry() {
        return System.currentTimeMillis() >= retryTimestamp;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,getMediaItem,MediaItem getMediaItem(),"[87, 90]","{'A288': [(87, 88), (90, 90)], 'A383': [(89, 89)]}","{'A288': 0.75, 'A383': 0.25}",A288,,"    @Override
    public MediaItem getMediaItem() {
        return mediaItem;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,prepareSourceInternal,void prepareSourceInternal(TransferListener),"[109, 115]","{'A310': [(109, 109), (115, 115)], 'A383': [(110, 114)]}","{'A310': 0.2857142857142857, 'A383': 0.7142857142857143}",A383,,"    @Override
    protected void prepareSourceInternal(@Nullable final TransferListener mediaTransferListener) {
        Log.e(TAG, ""Loading failed source: "", error);
        if (error instanceof FailedMediaSourceException) {
            refreshSourceInfo(makeSilentMediaTimeline(SILENCE_DURATION_US, mediaItem));
        }
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,maybeThrowSourceInfoRefreshError,void maybeThrowSourceInfoRefreshError(),"[126, 131]","{'A310': [(126, 126), (131, 131)], 'A383': [(127, 130)]}","{'A310': 0.3333333333333333, 'A383': 0.6666666666666666}",A383,,"    @Override
    public void maybeThrowSourceInfoRefreshError() throws IOException {
        if (!(error instanceof FailedMediaSourceException)) {
            throw new IOException(error);
        }
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,createPeriod,"MediaPeriod createPeriod(MediaPeriodId,Allocator,long)","[143, 148]","{'A310': [(143, 143)], 'A383': [(144, 148)]}","{'A310': 0.16666666666666666, 'A383': 0.8333333333333334}",A383,,"    @Override
    public MediaPeriod createPeriod(final MediaPeriodId id,
                                    final Allocator allocator,
                                    final long startPositionUs) {
        return SILENT_MEDIA;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,releasePeriod,void releasePeriod(MediaPeriod),"[150, 153]","{'A310': [(150, 150), (153, 153)], 'A383': [(151, 152)]}","{'A310': 0.5, 'A383': 0.5}",A310,,"    @Override
    public void releasePeriod(final MediaPeriod mediaPeriod) {
        /* Do Nothing (we want to keep re-using the Silent MediaPeriod) */
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,releaseSourceInternal,void releaseSourceInternal(),"[155, 158]","{'A310': [(155, 155)], 'A383': [(156, 158)]}","{'A310': 0.25, 'A383': 0.75}",A383,,"    @Override
    protected void releaseSourceInternal() {
        /* Do Nothing, no clean-up for processing/extra thread is needed by this MediaSource */
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,shouldBeReplacedWith,"boolean shouldBeReplacedWith(PlayQueueItem,boolean)","[160, 164]","{'A310': [(160, 164)]}",{'A310': 1.0},A310,,"    @Override
    public boolean shouldBeReplacedWith(@NonNull final PlayQueueItem newIdentity,
                                        final boolean isInterruptable) {
        return newIdentity != playQueueItem || canRetry();
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,isStreamEqual,boolean isStreamEqual(PlayQueueItem),"[166, 169]","{'A310': [(166, 166), (168, 169)], 'A294': [(167, 167)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"    @Override
    public boolean isStreamEqual(@NonNull final PlayQueueItem stream) {
        return playQueueItem == stream;
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,makeSilentMediaTimeline,"Timeline makeSilentMediaTimeline(long,MediaItem)","[193, 202]","{'A383': [(193, 202)]}",{'A383': 1.0},A383,,"    private static Timeline makeSilentMediaTimeline(final long durationUs,
                                                    @NonNull final MediaItem mediaItem) {
        return new SinglePeriodTimeline(
                durationUs,
                /* isSeekable= */ true,
                /* isDynamic= */ false,
                /* useLiveConfiguration= */ false,
                /* manifest= */ null,
                mediaItem);
    }
"
org.schabi.newpipe.player.mediasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasource/FailedMediaSource.java,FailedMediaSource,makeSilentMediaPeriod,MediaPeriod makeSilentMediaPeriod(long),"[204, 209]","{'A383': [(204, 209)]}",{'A383': 1.0},A383,,"    private static MediaPeriod makeSilentMediaPeriod(final long durationUs) {
        return new SilenceMediaSource.Factory()
                .setDurationUs(durationUs)
                .createMediaSource()
                .createPeriod(null, null, 0);
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/NonUriHlsDataSourceFactory.java,NonUriHlsDataSourceFactory.Builder,setDataSourceFactory,void setDataSourceFactory(DataSource.Factory),"[47, 50]","{'A333': [(47, 50)]}",{'A333': 1.0},A333,,"        public void setDataSourceFactory(
                @NonNull final DataSource.Factory dataSourceFactoryForNonManifestContents) {
            this.dataSourceFactory = dataSourceFactoryForNonManifestContents;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/NonUriHlsDataSourceFactory.java,NonUriHlsDataSourceFactory.Builder,setPlaylistString,void setPlaylistString(String),"[58, 60]","{'A333': [(58, 60)]}",{'A333': 1.0},A333,,"        public void setPlaylistString(@NonNull final String hlsPlaylistString) {
            this.playlistString = hlsPlaylistString;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/NonUriHlsDataSourceFactory.java,NonUriHlsDataSourceFactory.Builder,build,NonUriHlsDataSourceFactory build(),"[70, 83]","{'A333': [(70, 83)]}",{'A333': 1.0},A333,,"        @NonNull
        public NonUriHlsDataSourceFactory build() {
            if (dataSourceFactory == null) {
                throw new IllegalArgumentException(
                        ""No DataSource.Factory valid instance has been specified."");
            }

            if (isNullOrEmpty(playlistString)) {
                throw new IllegalArgumentException(""No HLS valid playlist has been specified."");
            }

            return new NonUriHlsDataSourceFactory(dataSourceFactory,
                    playlistString.getBytes(StandardCharsets.UTF_8));
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/NonUriHlsDataSourceFactory.java,NonUriHlsDataSourceFactory,createDataSource,DataSource createDataSource(int),"[125, 135]","{'A333': [(125, 135)]}",{'A333': 1.0},A333,,"    @NonNull
    @Override
    public DataSource createDataSource(final int dataType) {
        // The manifest is already downloaded and provided with playlistStringByteArray, so we
        // don't need to download it again and we can use a ByteArrayDataSource instead
        if (dataType == C.DATA_TYPE_MANIFEST) {
            return new ByteArrayDataSource(playlistStringByteArray);
        }

        return dataSourceFactory.createDataSource();
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setDefaultRequestProperties,"Factory setDefaultRequestProperties(Map<String, String>)","[112, 118]","{'A333': [(112, 118)]}",{'A333': 1.0},A333,,"        @NonNull
        @Override
        public Factory setDefaultRequestProperties(
                @NonNull final Map<String, String> defaultRequestPropertiesMap) {
            defaultRequestProperties.clearAndSet(defaultRequestPropertiesMap);
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setConnectTimeoutMs,Factory setConnectTimeoutMs(int),"[130, 133]","{'A333': [(130, 133)]}",{'A333': 1.0},A333,,"        public Factory setConnectTimeoutMs(final int connectTimeoutMsValue) {
            connectTimeoutMs = connectTimeoutMsValue;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setReadTimeoutMs,Factory setReadTimeoutMs(int),"[143, 146]","{'A333': [(143, 146)]}",{'A333': 1.0},A333,,"        public Factory setReadTimeoutMs(final int readTimeoutMsValue) {
            readTimeoutMs = readTimeoutMsValue;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setAllowCrossProtocolRedirects,Factory setAllowCrossProtocolRedirects(boolean),"[156, 160]","{'A333': [(156, 160)]}",{'A333': 1.0},A333,,"        public Factory setAllowCrossProtocolRedirects(
                final boolean allowCrossProtocolRedirectsValue) {
            allowCrossProtocolRedirects = allowCrossProtocolRedirectsValue;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setRangeParameterEnabled,Factory setRangeParameterEnabled(boolean),"[177, 180]","{'A333': [(177, 180)]}",{'A333': 1.0},A333,,"        public Factory setRangeParameterEnabled(final boolean rangeParameterEnabledValue) {
            rangeParameterEnabled = rangeParameterEnabledValue;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setRnParameterEnabled,Factory setRnParameterEnabled(boolean),"[195, 198]","{'A333': [(195, 198)]}",{'A333': 1.0},A333,,"        public Factory setRnParameterEnabled(final boolean rnParameterEnabledValue) {
            rnParameterEnabled = rnParameterEnabledValue;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setContentTypePredicate,Factory setContentTypePredicate(Predicate<String>),"[213, 217]","{'A333': [(213, 217)]}",{'A333': 1.0},A333,,"        public Factory setContentTypePredicate(
                @Nullable final Predicate<String> contentTypePredicateToSet) {
            this.contentTypePredicate = contentTypePredicateToSet;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setTransferListener,Factory setTransferListener(TransferListener),"[229, 233]","{'A333': [(229, 233)]}",{'A333': 1.0},A333,,"        public Factory setTransferListener(
                @Nullable final TransferListener transferListenerToUse) {
            this.transferListener = transferListenerToUse;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,setKeepPostFor302Redirects,Factory setKeepPostFor302Redirects(boolean),"[243, 246]","{'A333': [(243, 246)]}",{'A333': 1.0},A333,,"        public Factory setKeepPostFor302Redirects(final boolean keepPostFor302RedirectsValue) {
            this.keepPostFor302Redirects = keepPostFor302RedirectsValue;
            return this;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.Factory,createDataSource,YoutubeHttpDataSource createDataSource(),"[248, 264]","{'A333': [(248, 264)]}",{'A333': 1.0},A333,,"        @NonNull
        @Override
        public YoutubeHttpDataSource createDataSource() {
            final YoutubeHttpDataSource dataSource = new YoutubeHttpDataSource(
                    connectTimeoutMs,
                    readTimeoutMs,
                    allowCrossProtocolRedirects,
                    rangeParameterEnabled,
                    rnParameterEnabled,
                    defaultRequestProperties,
                    contentTypePredicate,
                    keepPostFor302Redirects);
            if (transferListener != null) {
                dataSource.addTransferListener(transferListener);
            }
            return dataSource;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,getUri,Uri getUri(),"[325, 329]","{'A333': [(325, 329)]}",{'A333': 1.0},A333,,"    @Override
    @Nullable
    public Uri getUri() {
        return connection == null ? null : Uri.parse(connection.getURL().toString());
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,getResponseCode,int getResponseCode(),"[331, 334]","{'A333': [(331, 334)]}",{'A333': 1.0},A333,,"    @Override
    public int getResponseCode() {
        return connection == null || responseCode <= 0 ? -1 : responseCode;
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,getResponseHeaders,"Map<String, List<String>> getResponseHeaders()","[336, 353]","{'A333': [(336, 353)]}",{'A333': 1.0},A333,,"    @NonNull
    @Override
    public Map<String, List<String>> getResponseHeaders() {
        if (connection == null) {
            return ImmutableMap.of();
        }
        // connection.getHeaderFields() always contains a null key with a value like
        // [""HTTP/1.1 200 OK""]. The response code is available from
        // HttpURLConnection#getResponseCode() and the HTTP version is fixed when establishing the
        // connection.
        // DataSource#getResponseHeaders() doesn't allow null keys in the returned map, so we need
        // to remove it.
        // connection.getHeaderFields() returns a special unmodifiable case-insensitive Map
        // so we can't just remove the null key or make a copy without the null key. Instead we
        // wrap it in a ForwardingMap subclass that ignores and filters out null keys in the read
        // methods.
        return new NullFilteringHeadersMap(connection.getHeaderFields());
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,setRequestProperty,"void setRequestProperty(String,String)","[355, 360]","{'A333': [(355, 360)]}",{'A333': 1.0},A333,,"    @Override
    public void setRequestProperty(@NonNull final String name, @NonNull final String value) {
        checkNotNull(name);
        checkNotNull(value);
        requestProperties.set(name, value);
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,clearRequestProperty,void clearRequestProperty(String),"[362, 366]","{'A333': [(362, 366)]}",{'A333': 1.0},A333,,"    @Override
    public void clearRequestProperty(@NonNull final String name) {
        checkNotNull(name);
        requestProperties.remove(name);
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,clearAllRequestProperties,void clearAllRequestProperties(),"[368, 371]","{'A333': [(368, 371)]}",{'A333': 1.0},A333,,"    @Override
    public void clearAllRequestProperties() {
        requestProperties.clear();
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,open,long open(DataSpec),"[376, 497]","{'A333': [(376, 497)]}",{'A333': 1.0},A333,,"    @Override
    public long open(@NonNull final DataSpec dataSpecParameter) throws HttpDataSourceException {
        this.dataSpec = dataSpecParameter;
        bytesRead = 0;
        bytesToRead = 0;
        transferInitializing(dataSpecParameter);

        final HttpURLConnection httpURLConnection;
        final String responseMessage;
        try {
            this.connection = makeConnection(dataSpec);
            httpURLConnection = this.connection;
            responseCode = httpURLConnection.getResponseCode();
            responseMessage = httpURLConnection.getResponseMessage();
        } catch (final IOException e) {
            closeConnectionQuietly();
            throw HttpDataSourceException.createForIOException(e, dataSpec,
                    HttpDataSourceException.TYPE_OPEN);
        }

        // Check for a valid response code.
        if (responseCode < 200 || responseCode > 299) {
            final Map<String, List<String>> headers = httpURLConnection.getHeaderFields();
            if (responseCode == 416) {
                final long documentSize = HttpUtil.getDocumentSize(
                        httpURLConnection.getHeaderField(HttpHeaders.CONTENT_RANGE));
                if (dataSpecParameter.position == documentSize) {
                    opened = true;
                    transferStarted(dataSpecParameter);
                    return dataSpecParameter.length != C.LENGTH_UNSET
                            ? dataSpecParameter.length
                            : 0;
                }
            }

            final InputStream errorStream = httpURLConnection.getErrorStream();
            byte[] errorResponseBody;
            try {
                errorResponseBody = errorStream != null
                        ? Util.toByteArray(errorStream)
                        : Util.EMPTY_BYTE_ARRAY;
            } catch (final IOException e) {
                errorResponseBody = Util.EMPTY_BYTE_ARRAY;
            }

            closeConnectionQuietly();
            final IOException cause = responseCode == 416 ? new DataSourceException(
                    PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE)
                    : null;
            throw new InvalidResponseCodeException(responseCode, responseMessage, cause, headers,
                    dataSpec, errorResponseBody);
        }

        // Check for a valid content type.
        final String contentType = httpURLConnection.getContentType();
        if (contentTypePredicate != null && !contentTypePredicate.apply(contentType)) {
            closeConnectionQuietly();
            throw new InvalidContentTypeException(contentType, dataSpecParameter);
        }

        final long bytesToSkip;
        if (!rangeParameterEnabled) {
            // If we requested a range starting from a non-zero position and received a 200 rather
            // than a 206, then the server does not support partial requests. We'll need to
            // manually skip to the requested position.
            bytesToSkip = responseCode == 200 && dataSpecParameter.position != 0
                    ? dataSpecParameter.position
                    : 0;
        } else {
            bytesToSkip = 0;
        }


        // Determine the length of the data to be read, after skipping.
        final boolean isCompressed = isCompressed(httpURLConnection);
        if (!isCompressed) {
            if (dataSpecParameter.length != C.LENGTH_UNSET) {
                bytesToRead = dataSpecParameter.length;
            } else {
                final long contentLength = HttpUtil.getContentLength(
                        httpURLConnection.getHeaderField(HttpHeaders.CONTENT_LENGTH),
                        httpURLConnection.getHeaderField(HttpHeaders.CONTENT_RANGE));
                bytesToRead = contentLength != C.LENGTH_UNSET
                        ? (contentLength - bytesToSkip)
                        : C.LENGTH_UNSET;
            }
        } else {
            // Gzip is enabled. If the server opts to use gzip then the content length in the
            // response will be that of the compressed data, which isn't what we want. Always use
            // the dataSpec length in this case.
            bytesToRead = dataSpecParameter.length;
        }

        try {
            inputStream = httpURLConnection.getInputStream();
            if (isCompressed) {
                inputStream = new GZIPInputStream(inputStream);
            }
        } catch (final IOException e) {
            closeConnectionQuietly();
            throw new HttpDataSourceException(e, dataSpec,
                    PlaybackException.ERROR_CODE_IO_UNSPECIFIED,
                    HttpDataSourceException.TYPE_OPEN);
        }

        opened = true;
        transferStarted(dataSpecParameter);

        try {
            skipFully(bytesToSkip, dataSpec);
        } catch (final IOException e) {
            closeConnectionQuietly();
            if (e instanceof HttpDataSourceException) {
                throw (HttpDataSourceException) e;
            }
            throw new HttpDataSourceException(e, dataSpec,
                    PlaybackException.ERROR_CODE_IO_UNSPECIFIED,
                    HttpDataSourceException.TYPE_OPEN);
        }

        return bytesToRead;
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,read,"int read(byte[],int,int)","[499, 508]","{'A333': [(499, 508)]}",{'A333': 1.0},A333,,"    @Override
    public int read(@NonNull final byte[] buffer, final int offset, final int length)
            throws HttpDataSourceException {
        try {
            return readInternal(buffer, offset, length);
        } catch (final IOException e) {
            throw HttpDataSourceException.createForIOException(e, castNonNull(dataSpec),
                    HttpDataSourceException.TYPE_READ);
        }
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,close,void close(),"[510, 536]","{'A333': [(510, 536)]}",{'A333': 1.0},A333,,"    @Override
    public void close() throws HttpDataSourceException {
        try {
            final InputStream connectionInputStream = this.inputStream;
            if (connectionInputStream != null) {
                final long bytesRemaining = bytesToRead == C.LENGTH_UNSET
                        ? C.LENGTH_UNSET
                        : bytesToRead - bytesRead;
                maybeTerminateInputStream(connection, bytesRemaining);

                try {
                    connectionInputStream.close();
                } catch (final IOException e) {
                    throw new HttpDataSourceException(e, castNonNull(dataSpec),
                            PlaybackException.ERROR_CODE_IO_UNSPECIFIED,
                            HttpDataSourceException.TYPE_CLOSE);
                }
            }
        } finally {
            inputStream = null;
            closeConnectionQuietly();
            if (opened) {
                opened = false;
                transferEnded();
            }
        }
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,makeConnection,HttpURLConnection makeConnection(DataSpec),"[538, 597]","{'A333': [(538, 597)]}",{'A333': 1.0},A333,,"    @NonNull
    private HttpURLConnection makeConnection(@NonNull final DataSpec dataSpecToUse)
            throws IOException {
        URL url = new URL(dataSpecToUse.uri.toString());
        @HttpMethod int httpMethod = dataSpecToUse.httpMethod;
        @Nullable byte[] httpBody = dataSpecToUse.httpBody;
        final long position = dataSpecToUse.position;
        final long length = dataSpecToUse.length;
        final boolean allowGzip = dataSpecToUse.isFlagSet(DataSpec.FLAG_ALLOW_GZIP);

        if (!allowCrossProtocolRedirects && !keepPostFor302Redirects) {
            // HttpURLConnection disallows cross-protocol redirects, but otherwise performs
            // redirection automatically. This is the behavior we want, so use it.
            return makeConnection(url, httpMethod, httpBody, position, length, allowGzip, true,
                    dataSpecToUse.httpRequestHeaders);
        }

        // We need to handle redirects ourselves to allow cross-protocol redirects or to keep the
        // POST request method for 302.
        int redirectCount = 0;
        while (redirectCount++ <= MAX_REDIRECTS) {
            final HttpURLConnection httpURLConnection = makeConnection(url, httpMethod, httpBody,
                    position, length, allowGzip, false, dataSpecToUse.httpRequestHeaders);
            final int httpURLConnectionResponseCode = httpURLConnection.getResponseCode();
            final String location = httpURLConnection.getHeaderField(""Location"");
            if ((httpMethod == DataSpec.HTTP_METHOD_GET || httpMethod == DataSpec.HTTP_METHOD_HEAD)
                    && (httpURLConnectionResponseCode == HttpURLConnection.HTTP_MULT_CHOICE
                    || httpURLConnectionResponseCode == HttpURLConnection.HTTP_MOVED_PERM
                    || httpURLConnectionResponseCode == HttpURLConnection.HTTP_MOVED_TEMP
                    || httpURLConnectionResponseCode == HttpURLConnection.HTTP_SEE_OTHER
                    || httpURLConnectionResponseCode == HTTP_STATUS_TEMPORARY_REDIRECT
                    || httpURLConnectionResponseCode == HTTP_STATUS_PERMANENT_REDIRECT)) {
                httpURLConnection.disconnect();
                url = handleRedirect(url, location, dataSpecToUse);
            } else if (httpMethod == DataSpec.HTTP_METHOD_POST
                    && (httpURLConnectionResponseCode == HttpURLConnection.HTTP_MULT_CHOICE
                    || httpURLConnectionResponseCode == HttpURLConnection.HTTP_MOVED_PERM
                    || httpURLConnectionResponseCode == HttpURLConnection.HTTP_MOVED_TEMP
                    || httpURLConnectionResponseCode == HttpURLConnection.HTTP_SEE_OTHER)) {
                httpURLConnection.disconnect();
                final boolean shouldKeepPost = keepPostFor302Redirects
                        && responseCode == HttpURLConnection.HTTP_MOVED_TEMP;
                if (!shouldKeepPost) {
                    // POST request follows the redirect and is transformed into a GET request.
                    httpMethod = DataSpec.HTTP_METHOD_GET;
                    httpBody = null;
                }
                url = handleRedirect(url, location, dataSpecToUse);
            } else {
                return httpURLConnection;
            }
        }

        // If we get here we've been redirected more times than are permitted.
        throw new HttpDataSourceException(
                new NoRouteToHostException(""Too many redirects: "" + redirectCount),
                dataSpecToUse,
                PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,
                HttpDataSourceException.TYPE_OPEN);
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,makeConnection,"HttpURLConnection makeConnection(URL,int,byte[],long,long,boolean,boolean,Map<String, String>)","[612, 710]","{'A333': [(612, 622), (625, 677), (681, 684), (686, 690), (694, 710)], 'A305': [(623, 624), (678, 680), (685, 685), (691, 693)]}","{'A333': 0.9090909090909091, 'A305': 0.09090909090909091}",A333,,"    @SuppressWarnings(""checkstyle:ParameterNumber"")
    @NonNull
    private HttpURLConnection makeConnection(
            @NonNull final URL url,
            @HttpMethod final int httpMethod,
            @Nullable final byte[] httpBody,
            final long position,
            final long length,
            final boolean allowGzip,
            final boolean followRedirects,
            final Map<String, String> requestParameters) throws IOException {
        // This is the method that contains breaking changes with respect to DefaultHttpDataSource!

        String requestUrl = url.toString();

        // Don't add the request number parameter if it has been already added (for instance in
        // DASH manifests) or if that's not a videoplayback URL
        final boolean isVideoPlaybackUrl = url.getPath().startsWith(""/videoplayback"");
        if (isVideoPlaybackUrl && rnParameterEnabled && !requestUrl.contains(RN_PARAMETER)) {
            requestUrl += RN_PARAMETER + requestNumber;
            ++requestNumber;
        }

        if (rangeParameterEnabled && isVideoPlaybackUrl) {
            final String rangeParameterBuilt = buildRangeParameter(position, length);
            if (rangeParameterBuilt != null) {
                requestUrl += rangeParameterBuilt;
            }
        }

        final HttpURLConnection httpURLConnection = openConnection(new URL(requestUrl));
        httpURLConnection.setConnectTimeout(connectTimeoutMillis);
        httpURLConnection.setReadTimeout(readTimeoutMillis);

        final Map<String, String> requestHeaders = new HashMap<>();
        if (defaultRequestProperties != null) {
            requestHeaders.putAll(defaultRequestProperties.getSnapshot());
        }
        requestHeaders.putAll(requestProperties.getSnapshot());
        requestHeaders.putAll(requestParameters);

        for (final Map.Entry<String, String> property : requestHeaders.entrySet()) {
            httpURLConnection.setRequestProperty(property.getKey(), property.getValue());
        }

        if (!rangeParameterEnabled) {
            final String rangeHeader = buildRangeRequestHeader(position, length);
            if (rangeHeader != null) {
                httpURLConnection.setRequestProperty(HttpHeaders.RANGE, rangeHeader);
            }
        }

        final boolean isTvHtml5StreamingUrl = isTvHtml5StreamingUrl(requestUrl);

        if (isWebStreamingUrl(requestUrl)
                || isTvHtml5StreamingUrl
                || isWebEmbeddedPlayerStreamingUrl(requestUrl)) {
            httpURLConnection.setRequestProperty(HttpHeaders.ORIGIN, YOUTUBE_BASE_URL);
            httpURLConnection.setRequestProperty(HttpHeaders.REFERER, YOUTUBE_BASE_URL);
            httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_DEST, ""empty"");
            httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_MODE, ""cors"");
            httpURLConnection.setRequestProperty(HttpHeaders.SEC_FETCH_SITE, ""cross-site"");
        }

        httpURLConnection.setRequestProperty(HttpHeaders.TE, ""trailers"");

        final boolean isAndroidStreamingUrl = isAndroidStreamingUrl(requestUrl);
        final boolean isIosStreamingUrl = isIosStreamingUrl(requestUrl);
        if (isAndroidStreamingUrl) {
            // Improvement which may be done: find the content country used to request YouTube
            // contents to add it in the user agent instead of using the default
            httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,
                    getAndroidUserAgent(null));
        } else if (isIosStreamingUrl) {
            httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,
                    getIosUserAgent(null));
        } else if (isTvHtml5StreamingUrl) {
            httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT,
                    getTvHtml5UserAgent());
        } else {
            // non-mobile user agent
            httpURLConnection.setRequestProperty(HttpHeaders.USER_AGENT, DownloaderImpl.USER_AGENT);
        }

        httpURLConnection.setRequestProperty(HttpHeaders.ACCEPT_ENCODING,
                allowGzip ? ""gzip"" : ""identity"");
        httpURLConnection.setInstanceFollowRedirects(followRedirects);
        // Most clients use POST requests to fetch contents
        httpURLConnection.setRequestMethod(""POST"");
        httpURLConnection.setDoOutput(true);
        httpURLConnection.setFixedLengthStreamingMode(POST_BODY.length);
        httpURLConnection.connect();

        final OutputStream os = httpURLConnection.getOutputStream();
        os.write(POST_BODY);
        os.close();

        return httpURLConnection;
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,openConnection,HttpURLConnection openConnection(URL),"[718, 720]","{'A333': [(718, 720)]}",{'A333': 1.0},A333,,"    private HttpURLConnection openConnection(@NonNull final URL url) throws IOException {
        return (HttpURLConnection) url.openConnection();
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,handleRedirect,"URL handleRedirect(URL,String,DataSpec)","[731, 774]","{'A333': [(731, 774)]}",{'A333': 1.0},A333,,"    @NonNull
    private URL handleRedirect(final URL originalUrl,
                               @Nullable final String location,
                               final DataSpec dataSpecToHandleRedirect)
            throws HttpDataSourceException {
        if (location == null) {
            throw new HttpDataSourceException(""Null location redirect"", dataSpecToHandleRedirect,
                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,
                    HttpDataSourceException.TYPE_OPEN);
        }

        // Form the new url.
        final URL url;
        try {
            url = new URL(originalUrl, location);
        } catch (final MalformedURLException e) {
            throw new HttpDataSourceException(e, dataSpecToHandleRedirect,
                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,
                    HttpDataSourceException.TYPE_OPEN);
        }

        // Check that the protocol of the new url is supported.
        final String protocol = url.getProtocol();
        if (!""https"".equals(protocol) && !""http"".equals(protocol)) {
            throw new HttpDataSourceException(""Unsupported protocol redirect: "" + protocol,
                    dataSpecToHandleRedirect,
                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,
                    HttpDataSourceException.TYPE_OPEN);
        }

        if (!allowCrossProtocolRedirects && !protocol.equals(originalUrl.getProtocol())) {
            throw new HttpDataSourceException(
                    ""Disallowed cross-protocol redirect (""
                            + originalUrl.getProtocol()
                            + "" to ""
                            + protocol
                            + "")"",
                    dataSpecToHandleRedirect,
                    PlaybackException.ERROR_CODE_IO_NETWORK_CONNECTION_FAILED,
                    HttpDataSourceException.TYPE_OPEN);
        }

        return url;
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,skipFully,"void skipFully(long,DataSpec)","[784, 812]","{'A333': [(784, 812)]}",{'A333': 1.0},A333,,"    @SuppressWarnings(""checkstyle:FinalParameters"")
    private void skipFully(long bytesToSkip, final DataSpec dataSpecToUse) throws IOException {
        if (bytesToSkip == 0) {
            return;
        }

        final byte[] skipBuffer = new byte[4096];
        while (bytesToSkip > 0) {
            final int readLength = (int) min(bytesToSkip, skipBuffer.length);
            final int read = castNonNull(inputStream).read(skipBuffer, 0, readLength);
            if (Thread.currentThread().isInterrupted()) {
                throw new HttpDataSourceException(
                        new InterruptedIOException(),
                        dataSpecToUse,
                        PlaybackException.ERROR_CODE_IO_UNSPECIFIED,
                        HttpDataSourceException.TYPE_OPEN);
            }

            if (read == -1) {
                throw new HttpDataSourceException(
                        dataSpecToUse,
                        PlaybackException.ERROR_CODE_IO_READ_POSITION_OUT_OF_RANGE,
                        HttpDataSourceException.TYPE_OPEN);
            }

            bytesToSkip -= read;
            bytesTransferred(read);
        }
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,readInternal,"int readInternal(byte[],int,int)","[830, 852]","{'A333': [(830, 852)]}",{'A333': 1.0},A333,,"    @SuppressWarnings(""checkstyle:FinalParameters"")
    private int readInternal(final byte[] buffer, final int offset, int readLength)
            throws IOException {
        if (readLength == 0) {
            return 0;
        }
        if (bytesToRead != C.LENGTH_UNSET) {
            final long bytesRemaining = bytesToRead - bytesRead;
            if (bytesRemaining == 0) {
                return C.RESULT_END_OF_INPUT;
            }
            readLength = (int) min(readLength, bytesRemaining);
        }

        final int read = castNonNull(inputStream).read(buffer, offset, readLength);
        if (read == -1) {
            return C.RESULT_END_OF_INPUT;
        }

        bytesRead += read;
        bytesTransferred(read);
        return read;
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,maybeTerminateInputStream,"void maybeTerminateInputStream(HttpURLConnection,long)","[865, 899]","{'A333': [(865, 899)]}",{'A333': 1.0},A333,,"    private static void maybeTerminateInputStream(@Nullable final HttpURLConnection connection,
                                                  final long bytesRemaining) {
        if (connection == null || Util.SDK_INT < 19 || Util.SDK_INT > 20) {
            return;
        }

        try {
            final InputStream inputStream = connection.getInputStream();
            if (bytesRemaining == C.LENGTH_UNSET) {
                // If the input stream has already ended, do nothing. The socket may be re-used.
                if (inputStream.read() == -1) {
                    return;
                }
            } else if (bytesRemaining <= MAX_BYTES_TO_DRAIN) {
                // There isn't much data left. Prefer to allow it to drain, which may allow the
                // socket to be re-used.
                return;
            }
            final String className = inputStream.getClass().getName();
            if (""com.android.okhttp.internal.http.HttpTransport$ChunkedInputStream""
                    .equals(className)
                    || ""com.android.okhttp.internal.http.HttpTransport$FixedLengthInputStream""
                        .equals(className)) {
                final Class<?> superclass = inputStream.getClass().getSuperclass();
                final Method unexpectedEndOfInput = checkNotNull(superclass).getDeclaredMethod(
                        ""unexpectedEndOfInput"");
                unexpectedEndOfInput.setAccessible(true);
                unexpectedEndOfInput.invoke(inputStream);
            }
        } catch (final Exception e) {
            // If an IOException then the connection didn't ever have an input stream, or it was
            // closed already. If another type of exception then something went wrong, most likely
            // the device isn't using okhttp.
        }
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,closeConnectionQuietly,void closeConnectionQuietly(),"[904, 913]","{'A333': [(904, 913)]}",{'A333': 1.0},A333,,"    private void closeConnectionQuietly() {
        if (connection != null) {
            try {
                connection.disconnect();
            } catch (final Exception e) {
                Log.e(TAG, ""Unexpected error while disconnecting"", e);
            }
            connection = null;
        }
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,isCompressed,boolean isCompressed(HttpURLConnection),"[915, 918]","{'A333': [(915, 918)]}",{'A333': 1.0},A333,,"    private static boolean isCompressed(@NonNull final HttpURLConnection connection) {
        final String contentEncoding = connection.getHeaderField(""Content-Encoding"");
        return ""gzip"".equalsIgnoreCase(contentEncoding);
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource,buildRangeParameter,"String buildRangeParameter(long,long)","[938, 952]","{'A333': [(938, 952)]}",{'A333': 1.0},A333,,"    @Nullable
    private static String buildRangeParameter(final long position, final long length) {
        if (position == 0 && length == C.LENGTH_UNSET) {
            return null;
        }

        final StringBuilder rangeParameter = new StringBuilder();
        rangeParameter.append(""&range="");
        rangeParameter.append(position);
        rangeParameter.append(""-"");
        if (length != C.LENGTH_UNSET) {
            rangeParameter.append(position + length - 1);
        }
        return rangeParameter.toString();
    }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,delegate,"Map<String, List<String>> delegate()","[962, 966]","{'A333': [(962, 966)]}",{'A333': 1.0},A333,,"        @NonNull
        @Override
        protected Map<String, List<String>> delegate() {
            return headers;
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,containsKey,boolean containsKey(Object),"[968, 971]","{'A333': [(968, 971)]}",{'A333': 1.0},A333,,"        @Override
        public boolean containsKey(@Nullable final Object key) {
            return key != null && super.containsKey(key);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,get,List<String> get(Object),"[973, 977]","{'A333': [(973, 977)]}",{'A333': 1.0},A333,,"        @Nullable
        @Override
        public List<String> get(@Nullable final Object key) {
            return key == null ? null : super.get(key);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,keySet,Set<String> keySet(),"[979, 983]","{'A333': [(979, 983)]}",{'A333': 1.0},A333,,"        @NonNull
        @Override
        public Set<String> keySet() {
            return Sets.filter(super.keySet(), Objects::nonNull);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,entrySet,"Set<Entry<String, List<String>>> entrySet()","[985, 989]","{'A333': [(985, 989)]}",{'A333': 1.0},A333,,"        @NonNull
        @Override
        public Set<Entry<String, List<String>>> entrySet() {
            return Sets.filter(super.entrySet(), entry -> entry.getKey() != null);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,size,int size(),"[991, 994]","{'A333': [(991, 994)]}",{'A333': 1.0},A333,,"        @Override
        public int size() {
            return super.size() - (super.containsKey(null) ? 1 : 0);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,isEmpty,boolean isEmpty(),"[996, 999]","{'A333': [(996, 999)]}",{'A333': 1.0},A333,,"        @Override
        public boolean isEmpty() {
            return super.isEmpty() || (super.size() == 1 && super.containsKey(null));
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,containsValue,boolean containsValue(Object),"[1001, 1004]","{'A333': [(1001, 1004)]}",{'A333': 1.0},A333,,"        @Override
        public boolean containsValue(@Nullable final Object value) {
            return super.standardContainsValue(value);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,equals,boolean equals(Object),"[1006, 1009]","{'A333': [(1006, 1009)]}",{'A333': 1.0},A333,,"        @Override
        public boolean equals(@Nullable final Object object) {
            return object != null && super.standardEquals(object);
        }
"
org.schabi.newpipe.player.datasource,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/datasource/YoutubeHttpDataSource.java,YoutubeHttpDataSource.NullFilteringHeadersMap,hashCode,int hashCode(),"[1011, 1014]","{'A333': [(1011, 1014)]}",{'A333': 1.0},A333,,"        @Override
        public int hashCode() {
            return super.standardHashCode();
        }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/AudioServiceLeakFix.java,AudioServiceLeakFix,preventLeakOf,ContextWrapper preventLeakOf(Context),"[18, 20]","{'A294': [(18, 20)]}",{'A294': 1.0},A294,,"    public static ContextWrapper preventLeakOf(final Context base) {
        return new AudioServiceLeakFix(base);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/AudioServiceLeakFix.java,AudioServiceLeakFix,getSystemService,Object getSystemService(String),"[22, 28]","{'A294': [(22, 28)]}",{'A294': 1.0},A294,,"    @Override
    public Object getSystemService(final String name) {
        if (Context.AUDIO_SERVICE.equals(name)) {
            return getApplicationContext().getSystemService(name);
        }
        return super.getSystemService(name);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,getPlayer,Player getPlayer(),"[43, 46]","{'A305': [(43, 46)]}",{'A305': 1.0},A305,,"    @NonNull
    public Player getPlayer() {
        return player;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,setupAfterIntent,void setupAfterIntent(),"[52, 53]","{'A305': [(52, 53)]}",{'A305': 1.0},A305,,"    public void setupAfterIntent() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,initPlayer,void initPlayer(),"[61, 62]","{'A305': [(61, 62)]}",{'A305': 1.0},A305,,"    public void initPlayer() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,initPlayback,void initPlayback(),"[69, 70]","{'A305': [(69, 70)]}",{'A305': 1.0},A305,,"    public void initPlayback() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,destroyPlayer,void destroyPlayer(),"[79, 80]","{'A305': [(79, 80)]}",{'A305': 1.0},A305,,"    public void destroyPlayer() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,destroy,void destroy(),"[86, 87]","{'A305': [(86, 87)]}",{'A305': 1.0},A305,,"    public void destroy() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,smoothStopForImmediateReusing,void smoothStopForImmediateReusing(),"[94, 95]","{'A305': [(94, 95)]}",{'A305': 1.0},A305,,"    public void smoothStopForImmediateReusing() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onFragmentListenerSet,void onFragmentListenerSet(),"[101, 102]","{'A305': [(101, 102)]}",{'A305': 1.0},A305,,"    public void onFragmentListenerSet() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onBroadcastReceived,void onBroadcastReceived(Intent),"[110, 111]","{'A305': [(110, 111)]}",{'A305': 1.0},A305,,"    public void onBroadcastReceived(final Intent intent) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onUpdateProgress,"void onUpdateProgress(int,int,int)","[122, 125]","{'A305': [(122, 125)]}",{'A305': 1.0},A305,,"    public void onUpdateProgress(final int currentProgress,
                                 final int duration,
                                 final int bufferPercent) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onPrepared,void onPrepared(),"[127, 128]","{'A305': [(127, 128)]}",{'A305': 1.0},A305,,"    public void onPrepared() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onBlocked,void onBlocked(),"[130, 131]","{'A305': [(130, 131)]}",{'A305': 1.0},A305,,"    public void onBlocked() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onPlaying,void onPlaying(),"[133, 134]","{'A305': [(133, 134)]}",{'A305': 1.0},A305,,"    public void onPlaying() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onBuffering,void onBuffering(),"[136, 137]","{'A305': [(136, 137)]}",{'A305': 1.0},A305,,"    public void onBuffering() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onPaused,void onPaused(),"[139, 140]","{'A305': [(139, 140)]}",{'A305': 1.0},A305,,"    public void onPaused() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onPausedSeek,void onPausedSeek(),"[142, 143]","{'A305': [(142, 143)]}",{'A305': 1.0},A305,,"    public void onPausedSeek() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onCompleted,void onCompleted(),"[145, 146]","{'A305': [(145, 146)]}",{'A305': 1.0},A305,,"    public void onCompleted() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onRepeatModeChanged,void onRepeatModeChanged(int),"[148, 149]","{'A305': [(148, 149)]}",{'A305': 1.0},A305,,"    public void onRepeatModeChanged(@RepeatMode final int repeatMode) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onShuffleModeEnabledChanged,void onShuffleModeEnabledChanged(boolean),"[151, 152]","{'A305': [(151, 152)]}",{'A305': 1.0},A305,,"    public void onShuffleModeEnabledChanged(final boolean shuffleModeEnabled) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onMuteUnmuteChanged,void onMuteUnmuteChanged(boolean),"[154, 155]","{'A305': [(154, 155)]}",{'A305': 1.0},A305,,"    public void onMuteUnmuteChanged(final boolean isMuted) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onTextTracksChanged,void onTextTracksChanged(Tracks),"[161, 162]","{'A305': [(161, 162)]}",{'A305': 1.0},A305,,"    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onPlaybackParametersChanged,void onPlaybackParametersChanged(PlaybackParameters),"[168, 169]","{'A305': [(168, 169)]}",{'A305': 1.0},A305,,"    public void onPlaybackParametersChanged(@NonNull final PlaybackParameters playbackParameters) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onRenderedFirstFrame,void onRenderedFirstFrame(),"[174, 175]","{'A305': [(174, 175)]}",{'A305': 1.0},A305,,"    public void onRenderedFirstFrame() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onCues,void onCues(List<Cue>),"[181, 182]","{'A305': [(181, 182)]}",{'A305': 1.0},A305,,"    public void onCues(@NonNull final List<Cue> cues) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onMetadataChanged,void onMetadataChanged(StreamInfo),"[189, 190]","{'A305': [(189, 190)]}",{'A305': 1.0},A305,,"    public void onMetadataChanged(@NonNull final StreamInfo info) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onThumbnailLoaded,void onThumbnailLoaded(Bitmap),"[197, 198]","{'A305': [(197, 198)]}",{'A305': 1.0},A305,,"    public void onThumbnailLoaded(@Nullable final Bitmap bitmap) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onPlayQueueEdited,void onPlayQueueEdited(),"[203, 204]","{'A305': [(203, 204)]}",{'A305': 1.0},A305,,"    public void onPlayQueueEdited() {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUi.java,PlayerUi,onVideoSizeChanged,void onVideoSizeChanged(VideoSize),"[210, 211]","{'A305': [(210, 211)]}",{'A305': 1.0},A305,,"    public void onVideoSizeChanged(@NonNull final VideoSize videoSize) {
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupFromView,void setupFromView(),"[164, 168]","{'A305': [(164, 168)]}",{'A305': 1.0},A305,,"    public void setupFromView() {
        initViews();
        initListeners();
        setupPlayerSeekOverlay();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,initViews,void initViews(),"[170, 197]","{'A305': [(170, 184), (186, 197)], 'A386': [(185, 185)]}","{'A305': 0.9642857142857143, 'A386': 0.03571428571428571}",A305,,"    private void initViews() {
        setupSubtitleView();

        binding.resizeTextView
                .setText(PlayerHelper.resizeTypeOf(context, binding.surfaceView.getResizeMode()));

        binding.playbackSeekBar.getThumb()
                .setColorFilter(new PorterDuffColorFilter(Color.RED, PorterDuff.Mode.SRC_IN));
        binding.playbackSeekBar.getProgressDrawable()
                .setColorFilter(new PorterDuffColorFilter(Color.RED, PorterDuff.Mode.MULTIPLY));

        final ContextThemeWrapper themeWrapper = new ContextThemeWrapper(context,
                R.style.DarkPopupMenu);

        qualityPopupMenu = new PopupMenu(themeWrapper, binding.qualityTextView);
        audioTrackPopupMenu = new PopupMenu(themeWrapper, binding.audioTrackTextView);
        playbackSpeedPopupMenu = new PopupMenu(context, binding.playbackSpeed);
        captionPopupMenu = new PopupMenu(themeWrapper, binding.captionTextView);

        binding.progressBarLoadingPanel.getIndeterminateDrawable()
                .setColorFilter(new PorterDuffColorFilter(Color.WHITE, PorterDuff.Mode.MULTIPLY));

        binding.titleTextView.setSelected(true);
        binding.channelTextView.setSelected(true);

        // Prevent hiding of bottom sheet via swipe inside queue
        binding.itemsList.setNestedScrollingEnabled(false);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,initListeners,void initListeners(),"[201, 277]","{'A305': [(201, 201), (206, 207), (211, 218), (229, 229), (249, 259), (264, 277)], 'A295': [(202, 202), (205, 205), (208, 210), (219, 228), (230, 248), (262, 263)], 'A386': [(203, 204)], 'A300': [(260, 261)]}","{'A305': 0.4805194805194805, 'A295': 0.4675324675324675, 'A386': 0.025974025974025976, 'A300': 0.025974025974025976}",A305,,"    protected void initListeners() {
        binding.qualityTextView.setOnClickListener(makeOnClickListener(this::onQualityClicked));
        binding.audioTrackTextView.setOnClickListener(
                makeOnClickListener(this::onAudioTracksClicked));
        binding.playbackSpeed.setOnClickListener(makeOnClickListener(this::onPlaybackSpeedClicked));

        binding.playbackSeekBar.setOnSeekBarChangeListener(this);
        binding.captionTextView.setOnClickListener(makeOnClickListener(this::onCaptionClicked));
        binding.resizeTextView.setOnClickListener(makeOnClickListener(this::onResizeClicked));
        binding.playbackLiveSync.setOnClickListener(makeOnClickListener(player::seekToDefault));

        playerGestureListener = buildGestureListener();
        gestureDetector = new GestureDetector(context, playerGestureListener);
        binding.getRoot().setOnTouchListener(playerGestureListener);

        binding.repeatButton.setOnClickListener(v -> onRepeatClicked());
        binding.shuffleButton.setOnClickListener(v -> onShuffleClicked());

        binding.playPauseButton.setOnClickListener(makeOnClickListener(player::playPause));
        binding.playPreviousButton.setOnClickListener(makeOnClickListener(player::playPrevious));
        binding.playNextButton.setOnClickListener(makeOnClickListener(player::playNext));

        binding.moreOptionsButton.setOnClickListener(
                makeOnClickListener(this::onMoreOptionsClicked));
        binding.share.setOnClickListener(makeOnClickListener(() -> {
            final PlayQueueItem currentItem = player.getCurrentItem();
            if (currentItem != null) {
                ShareUtils.shareText(context, currentItem.getTitle(),
                        player.getVideoUrlAtCurrentTime(), currentItem.getThumbnails());
            }
        }));
        binding.share.setOnLongClickListener(v -> {
            ShareUtils.copyToClipboard(context, player.getVideoUrlAtCurrentTime());
            return true;
        });
        binding.fullScreenButton.setOnClickListener(makeOnClickListener(() -> {
            player.setRecovery();
            NavigationHelper.playOnMainPlayer(context,
                    Objects.requireNonNull(player.getPlayQueue()), true);
        }));
        binding.playWithKodi.setOnClickListener(makeOnClickListener(this::onPlayWithKodiClicked));
        binding.openInBrowser.setOnClickListener(makeOnClickListener(this::onOpenInBrowserClicked));
        binding.playerCloseButton.setOnClickListener(makeOnClickListener(() ->
                // set package to this app's package to prevent the intent from being seen outside
                context.sendBroadcast(new Intent(VideoDetailFragment.ACTION_HIDE_MAIN_PLAYER)
                        .setPackage(App.PACKAGE_NAME))
        ));
        binding.switchMute.setOnClickListener(makeOnClickListener(player::toggleMute));

        ViewCompat.setOnApplyWindowInsetsListener(binding.itemsListPanel, (view, windowInsets) -> {
            final Insets cutout = windowInsets.getInsets(WindowInsetsCompat.Type.displayCutout());
            if (!cutout.equals(Insets.NONE)) {
                view.setPadding(cutout.left, cutout.top, cutout.right, cutout.bottom);
            }
            return windowInsets;
        });

        // PlaybackControlRoot already consumed window insets but we should pass them to
        // player_overlays and fast_seek_overlay too. Without it they will be off-centered.
        onLayoutChangeListener =
                (v, left, top, right, bottom, oldLeft, oldTop, oldRight, oldBottom) -> {
                    binding.playerOverlays.setPadding(v.getPaddingLeft(), v.getPaddingTop(),
                            v.getPaddingRight(), v.getPaddingBottom());

                    // If we added padding to the fast seek overlay, too, it would not go under the
                    // system ui. Instead we apply negative margins equal to the window insets of
                    // the opposite side, so that the view covers all of the player (overflowing on
                    // some sides) and its center coincides with the center of other controls.
                    final RelativeLayout.LayoutParams fastSeekParams = (RelativeLayout.LayoutParams)
                            binding.fastSeekOverlay.getLayoutParams();
                    fastSeekParams.leftMargin = -v.getPaddingRight();
                    fastSeekParams.topMargin = -v.getPaddingBottom();
                    fastSeekParams.rightMargin = -v.getPaddingLeft();
                    fastSeekParams.bottomMargin = -v.getPaddingTop();
                };
        binding.playbackControlRoot.addOnLayoutChangeListener(onLayoutChangeListener);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,deinitListeners,void deinitListeners(),"[279, 313]","{'A305': [(279, 280), (282, 313)], 'A386': [(281, 281)]}","{'A305': 0.9714285714285714, 'A386': 0.02857142857142857}",A305,,"    protected void deinitListeners() {
        binding.qualityTextView.setOnClickListener(null);
        binding.audioTrackTextView.setOnClickListener(null);
        binding.playbackSpeed.setOnClickListener(null);
        binding.playbackSeekBar.setOnSeekBarChangeListener(null);
        binding.captionTextView.setOnClickListener(null);
        binding.resizeTextView.setOnClickListener(null);
        binding.playbackLiveSync.setOnClickListener(null);

        binding.getRoot().setOnTouchListener(null);
        playerGestureListener = null;
        gestureDetector = null;

        binding.repeatButton.setOnClickListener(null);
        binding.shuffleButton.setOnClickListener(null);

        binding.playPauseButton.setOnClickListener(null);
        binding.playPreviousButton.setOnClickListener(null);
        binding.playNextButton.setOnClickListener(null);

        binding.moreOptionsButton.setOnClickListener(null);
        binding.moreOptionsButton.setOnLongClickListener(null);
        binding.share.setOnClickListener(null);
        binding.share.setOnLongClickListener(null);
        binding.fullScreenButton.setOnClickListener(null);
        binding.screenRotationButton.setOnClickListener(null);
        binding.playWithKodi.setOnClickListener(null);
        binding.openInBrowser.setOnClickListener(null);
        binding.playerCloseButton.setOnClickListener(null);
        binding.switchMute.setOnClickListener(null);

        ViewCompat.setOnApplyWindowInsetsListener(binding.itemsListPanel, null);

        binding.playbackControlRoot.removeOnLayoutChangeListener(onLayoutChangeListener);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupPlayerSeekOverlay,void setupPlayerSeekOverlay(),"[318, 374]","{'A305': [(318, 374)]}",{'A305': 1.0},A305,,"    private void setupPlayerSeekOverlay() {
        binding.fastSeekOverlay
                .seekSecondsSupplier(() -> retrieveSeekDurationFromPreferences(player) / 1000)
                .performListener(new PlayerFastSeekOverlay.PerformListener() {

                    @Override
                    public void onDoubleTap() {
                        animate(binding.fastSeekOverlay, true, SEEK_OVERLAY_DURATION);
                    }

                    @Override
                    public void onDoubleTapEnd() {
                        animate(binding.fastSeekOverlay, false, SEEK_OVERLAY_DURATION);
                    }

                    @NonNull
                    @Override
                    public FastSeekDirection getFastSeekDirection(
                            @NonNull final DisplayPortion portion
                    ) {
                        if (player.exoPlayerIsNull()) {
                            // Abort seeking
                            playerGestureListener.endMultiDoubleTap();
                            return FastSeekDirection.NONE;
                        }
                        if (portion == DisplayPortion.LEFT) {
                            // Check if it's possible to rewind
                            // Small puffer to eliminate infinite rewind seeking
                            if (player.getExoPlayer().getCurrentPosition() < 500L) {
                                return FastSeekDirection.NONE;
                            }
                            return FastSeekDirection.BACKWARD;
                        } else if (portion == DisplayPortion.RIGHT) {
                            // Check if it's possible to fast-forward
                            if (player.getCurrentState() == STATE_COMPLETED
                                    || player.getExoPlayer().getCurrentPosition()
                                    >= player.getExoPlayer().getDuration()) {
                                return FastSeekDirection.NONE;
                            }
                            return FastSeekDirection.FORWARD;
                        }
                        /* portion == DisplayPortion.MIDDLE */
                        return FastSeekDirection.NONE;
                    }

                    @Override
                    public void seek(final boolean forward) {
                        playerGestureListener.keepInDoubleTapMode();
                        if (forward) {
                            player.fastForward();
                        } else {
                            player.fastRewind();
                        }
                    }
                });
        playerGestureListener.doubleTapControls(binding.fastSeekOverlay);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onDoubleTap,void onDoubleTap(),"[323, 326]","{'A305': [(323, 326)]}",{'A305': 1.0},A305,,"                    @Override
                    public void onDoubleTap() {
                        animate(binding.fastSeekOverlay, true, SEEK_OVERLAY_DURATION);
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onDoubleTapEnd,void onDoubleTapEnd(),"[328, 331]","{'A305': [(328, 331)]}",{'A305': 1.0},A305,,"                    @Override
                    public void onDoubleTapEnd() {
                        animate(binding.fastSeekOverlay, false, SEEK_OVERLAY_DURATION);
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,getFastSeekDirection,FastSeekDirection getFastSeekDirection(DisplayPortion),"[333, 361]","{'A305': [(333, 361)]}",{'A305': 1.0},A305,,"                    @NonNull
                    @Override
                    public FastSeekDirection getFastSeekDirection(
                            @NonNull final DisplayPortion portion
                    ) {
                        if (player.exoPlayerIsNull()) {
                            // Abort seeking
                            playerGestureListener.endMultiDoubleTap();
                            return FastSeekDirection.NONE;
                        }
                        if (portion == DisplayPortion.LEFT) {
                            // Check if it's possible to rewind
                            // Small puffer to eliminate infinite rewind seeking
                            if (player.getExoPlayer().getCurrentPosition() < 500L) {
                                return FastSeekDirection.NONE;
                            }
                            return FastSeekDirection.BACKWARD;
                        } else if (portion == DisplayPortion.RIGHT) {
                            // Check if it's possible to fast-forward
                            if (player.getCurrentState() == STATE_COMPLETED
                                    || player.getExoPlayer().getCurrentPosition()
                                    >= player.getExoPlayer().getDuration()) {
                                return FastSeekDirection.NONE;
                            }
                            return FastSeekDirection.FORWARD;
                        }
                        /* portion == DisplayPortion.MIDDLE */
                        return FastSeekDirection.NONE;
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,seek,void seek(boolean),"[363, 371]","{'A305': [(363, 371)]}",{'A305': 1.0},A305,,"                    @Override
                    public void seek(final boolean forward) {
                        playerGestureListener.keepInDoubleTapMode();
                        if (forward) {
                            player.fastForward();
                        } else {
                            player.fastRewind();
                        }
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,deinitPlayerSeekOverlay,void deinitPlayerSeekOverlay(),"[376, 380]","{'A305': [(376, 380)]}",{'A305': 1.0},A305,,"    public void deinitPlayerSeekOverlay() {
        binding.fastSeekOverlay
                .seekSecondsSupplier(null)
                .performListener(null);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupAfterIntent,void setupAfterIntent(),"[382, 389]","{'A305': [(382, 389)]}",{'A305': 1.0},A305,,"    @Override
    public void setupAfterIntent() {
        super.setupAfterIntent();
        setupElementsVisibility();
        setupElementsSize(context.getResources());
        binding.getRoot().setVisibility(View.VISIBLE);
        binding.playPauseButton.requestFocus();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,initPlayer,void initPlayer(),"[391, 395]","{'A305': [(391, 395)]}",{'A305': 1.0},A305,,"    @Override
    public void initPlayer() {
        super.initPlayer();
        setupVideoSurfaceIfNeeded();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,initPlayback,void initPlayback(),"[397, 403]","{'A305': [(397, 403)]}",{'A305': 1.0},A305,,"    @Override
    public void initPlayback() {
        super.initPlayback();

        // #6825 - Ensure that the shuffle-button is in the correct state on the UI
        setShuffleButton(player.getExoPlayer().getShuffleModeEnabled());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,destroyPlayer,void destroyPlayer(),"[407, 411]","{'A305': [(407, 411)]}",{'A305': 1.0},A305,,"    @Override
    public void destroyPlayer() {
        super.destroyPlayer();
        clearVideoSurface();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,destroy,void destroy(),"[413, 419]","{'A305': [(413, 419)]}",{'A305': 1.0},A305,,"    @Override
    public void destroy() {
        super.destroy();
        binding.endScreen.setImageDrawable(null);
        deinitPlayerSeekOverlay();
        deinitListeners();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupElementsVisibility,void setupElementsVisibility(),"[421, 424]","{'A305': [(421, 424)]}",{'A305': 1.0},A305,,"    protected void setupElementsVisibility() {
        setMuteButton(player.isMuted());
        animateRotation(binding.moreOptionsButton, DEFAULT_CONTROLS_DURATION, 0);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupElementsSize,"void setupElementsSize(int,int,int,int)","[428, 439]","{'A305': [(428, 434), (436, 439)], 'A386': [(435, 435)]}","{'A305': 0.9166666666666666, 'A386': 0.08333333333333333}",A305,,"    protected void setupElementsSize(final int buttonsMinWidth,
                                     final int playerTopPad,
                                     final int controlsPad,
                                     final int buttonsPad) {
        binding.topControls.setPaddingRelative(controlsPad, playerTopPad, controlsPad, 0);
        binding.bottomControls.setPaddingRelative(controlsPad, 0, controlsPad, 0);
        binding.qualityTextView.setPadding(buttonsPad, buttonsPad, buttonsPad, buttonsPad);
        binding.audioTrackTextView.setPadding(buttonsPad, buttonsPad, buttonsPad, buttonsPad);
        binding.playbackSpeed.setPadding(buttonsPad, buttonsPad, buttonsPad, buttonsPad);
        binding.playbackSpeed.setMinimumWidth(buttonsMinWidth);
        binding.captionTextView.setPadding(buttonsPad, buttonsPad, buttonsPad, buttonsPad);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onBroadcastReceived,void onBroadcastReceived(Intent),"[448, 457]","{'A305': [(448, 457)]}",{'A305': 1.0},A305,,"    @Override
    public void onBroadcastReceived(final Intent intent) {
        super.onBroadcastReceived(intent);
        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {
            // When the orientation changes, the screen height might be smaller. If the end screen
            // thumbnail is not re-scaled, it can be larger than the current screen height and thus
            // enlarging the whole player. This causes the seekbar to be out of the visible area.
            updateEndScreenThumbnail(player.getThumbnail());
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onThumbnailLoaded,void onThumbnailLoaded(Bitmap),"[474, 478]","{'A305': [(474, 478)]}",{'A305': 1.0},A305,,"    @Override
    public void onThumbnailLoaded(@Nullable final Bitmap bitmap) {
        super.onThumbnailLoaded(bitmap);
        updateEndScreenThumbnail(bitmap);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,updateEndScreenThumbnail,void updateEndScreenThumbnail(Bitmap),"[480, 504]","{'A305': [(480, 487), (489, 491), (493, 504)], 'A295': [(488, 488), (492, 492)]}","{'A305': 0.92, 'A295': 0.08}",A305,,"    private void updateEndScreenThumbnail(@Nullable final Bitmap thumbnail) {
        if (thumbnail == null) {
            // remove end screen thumbnail
            binding.endScreen.setImageDrawable(null);
            return;
        }

        final float endScreenHeight = calculateMaxEndScreenThumbnailHeight(thumbnail);
        final Bitmap endScreenBitmap = BitmapCompat.createScaledBitmap(
                thumbnail,
                (int) (thumbnail.getWidth() / (thumbnail.getHeight() / endScreenHeight)),
                (int) endScreenHeight,
                null,
                true);

        if (DEBUG) {
            Log.d(TAG, ""Thumbnail - onThumbnailLoaded() called with: ""
                    + ""currentThumbnail = ["" + thumbnail + ""], ""
                    + thumbnail.getWidth() + ""x"" + thumbnail.getHeight()
                    + "", scaled end screen height = "" + endScreenHeight
                    + "", scaled end screen width = "" + endScreenBitmap.getWidth());
        }

        binding.endScreen.setImageBitmap(endScreenBitmap);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onUpdateProgress,"void onUpdateProgress(int,int,int)","[515, 537]","{'A305': [(515, 537)]}",{'A305': 1.0},A305,,"    @Override
    public void onUpdateProgress(final int currentProgress,
                                 final int duration,
                                 final int bufferPercent) {

        if (duration != binding.playbackSeekBar.getMax()) {
            setVideoDurationToControls(duration);
        }
        if (player.getCurrentState() != STATE_PAUSED) {
            updatePlayBackElementsCurrentDuration(currentProgress);
        }
        if (player.isLoading() || bufferPercent > 90) {
            binding.playbackSeekBar.setSecondaryProgress(
                    (int) (binding.playbackSeekBar.getMax() * ((float) bufferPercent / 100)));
        }
        if (DEBUG && bufferPercent % 20 == 0) { //Limit log
            Log.d(TAG, ""notifyProgressUpdateToListeners() called with: ""
                    + ""isVisible = "" + isControlsVisible() + "", ""
                    + ""currentProgress = ["" + currentProgress + ""], ""
                    + ""duration = ["" + duration + ""], bufferPercent = ["" + bufferPercent + ""]"");
        }
        binding.playbackLiveSync.setClickable(!player.isLiveEdge());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,updatePlayBackElementsCurrentDuration,void updatePlayBackElementsCurrentDuration(int),"[544, 550]","{'A305': [(544, 550)]}",{'A305': 1.0},A305,,"    private void updatePlayBackElementsCurrentDuration(final int currentProgress) {
        // Don't set seekbar progress while user is seeking
        if (player.getCurrentState() != STATE_PAUSED_SEEK) {
            binding.playbackSeekBar.setProgress(currentProgress);
        }
        binding.playbackCurrentTime.setText(getTimeString(currentProgress));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setVideoDurationToControls,void setVideoDurationToControls(int),"[557, 565]","{'A305': [(557, 565)]}",{'A305': 1.0},A305,,"    private void setVideoDurationToControls(final int duration) {
        binding.playbackEndTime.setText(getTimeString(duration));

        binding.playbackSeekBar.setMax(duration);
        // This is important for Android TVs otherwise it would apply the default from
        // setMax/Min methods which is (max - min) / 20
        binding.playbackSeekBar.setKeyProgressIncrement(
                PlayerHelper.retrieveSeekDurationFromPreferences(player));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onProgressChanged,"void onProgressChanged(SeekBar,int,boolean)","[567, 590]","{'A305': [(567, 584), (586, 590)], 'A295': [(585, 585)]}","{'A305': 0.9583333333333334, 'A295': 0.041666666666666664}",A305,,"    @Override // seekbar listener
    public void onProgressChanged(final SeekBar seekBar, final int progress,
                                  final boolean fromUser) {
        // Currently we don't need method execution when fromUser is false
        if (!fromUser) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, ""onProgressChanged() called with: ""
                    + ""seekBar = ["" + seekBar + ""], progress = ["" + progress + ""]"");
        }

        binding.currentDisplaySeek.setText(getTimeString(progress));

        // Seekbar Preview Thumbnail
        SeekbarPreviewThumbnailHelper
                .tryResizeAndSetSeekbarPreviewThumbnail(
                        player.getContext(),
                        seekbarPreviewThumbnailHolder.getBitmapAt(progress).orElse(null),
                        binding.currentSeekbarPreviewThumbnail,
                        binding.subtitleView::getWidth);

        adjustSeekbarPreviewContainer();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,adjustSeekbarPreviewContainer,void adjustSeekbarPreviewContainer(),"[593, 626]","{'A305': [(593, 610), (614, 626)], 'A295': [(611, 613)]}","{'A305': 0.9117647058823529, 'A295': 0.08823529411764706}",A305,,"    private void adjustSeekbarPreviewContainer() {
        try {
            // Should only be required when an error occurred before
            // and the layout was positioned in the center
            binding.bottomSeekbarPreviewLayout.setGravity(Gravity.NO_GRAVITY);

            // Calculate the current left position of seekbar progress in px
            // More info: https://stackoverflow.com/q/20493577
            final int currentSeekbarLeft =
                    binding.playbackSeekBar.getLeft()
                            + binding.playbackSeekBar.getPaddingLeft()
                            + binding.playbackSeekBar.getThumb().getBounds().left;

            // Calculate the (unchecked) left position of the container
            final int uncheckedContainerLeft =
                    currentSeekbarLeft - (binding.seekbarPreviewContainer.getWidth() / 2);

            // Fix the position so it's within the boundaries
            final int checkedContainerLeft = MathUtils.clamp(uncheckedContainerLeft,
                    0, binding.playbackWindowRoot.getWidth()
                            - binding.seekbarPreviewContainer.getWidth());

            // See also: https://stackoverflow.com/a/23249734
            final LinearLayout.LayoutParams params =
                    new LinearLayout.LayoutParams(
                            binding.seekbarPreviewContainer.getLayoutParams());
            params.setMarginStart(checkedContainerLeft);
            binding.seekbarPreviewContainer.setLayoutParams(params);
        } catch (final Exception ex) {
            Log.e(TAG, ""Failed to adjust seekbarPreviewContainer"", ex);
            // Fallback - position in the middle
            binding.bottomSeekbarPreviewLayout.setGravity(Gravity.CENTER);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onStartTrackingTouch,void onStartTrackingTouch(SeekBar),"[628, 642]","{'A305': [(628, 642)]}",{'A305': 1.0},A305,,"    @Override // seekbar listener
    public void onStartTrackingTouch(final SeekBar seekBar) {
        if (DEBUG) {
            Log.d(TAG, ""onStartTrackingTouch() called with: seekBar = ["" + seekBar + ""]"");
        }
        if (player.getCurrentState() != STATE_PAUSED_SEEK) {
            player.changeState(STATE_PAUSED_SEEK);
        }

        showControls(0);
        animate(binding.currentDisplaySeek, true, DEFAULT_CONTROLS_DURATION,
                AnimationType.SCALE_AND_ALPHA);
        animate(binding.currentSeekbarPreviewThumbnail, true, DEFAULT_CONTROLS_DURATION,
                AnimationType.SCALE_AND_ALPHA);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onStopTrackingTouch,void onStopTrackingTouch(SeekBar),"[644, 667]","{'A305': [(644, 650), (652, 664), (667, 667)], 'A350': [(651, 651), (665, 666)]}","{'A305': 0.875, 'A350': 0.125}",A305,,"    @Override // seekbar listener
    public void onStopTrackingTouch(final SeekBar seekBar) {
        if (DEBUG) {
            Log.d(TAG, ""onStopTrackingTouch() called with: seekBar = ["" + seekBar + ""]"");
        }

        player.seekTo(seekBar.getProgress());
        if (player.getExoPlayer().getDuration() == seekBar.getProgress()) {
            player.getExoPlayer().play();
        }

        binding.playbackCurrentTime.setText(getTimeString(seekBar.getProgress()));
        animate(binding.currentDisplaySeek, false, 200, AnimationType.SCALE_AND_ALPHA);
        animate(binding.currentSeekbarPreviewThumbnail, false, 200, AnimationType.SCALE_AND_ALPHA);

        if (player.getCurrentState() == STATE_PAUSED_SEEK) {
            player.changeState(STATE_BUFFERING);
        }
        if (!player.isProgressLoopRunning()) {
            player.startProgressLoop();
        }

        showControlsThenHide();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,isControlsVisible,boolean isControlsVisible(),"[676, 678]","{'A305': [(676, 678)]}",{'A305': 1.0},A305,,"    public boolean isControlsVisible() {
        return binding != null && binding.playbackControlRoot.getVisibility() == View.VISIBLE;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,showControlsThenHide,void showControlsThenHide(),"[680, 695]","{'A305': [(680, 695)]}",{'A305': 1.0},A305,,"    public void showControlsThenHide() {
        if (DEBUG) {
            Log.d(TAG, ""showControlsThenHide() called"");
        }

        showOrHideButtons();
        showSystemUIPartially();

        final long hideTime = binding.playbackControlRoot.isInTouchMode()
                ? DEFAULT_CONTROLS_HIDE_TIME
                : DPAD_CONTROLS_HIDE_TIME;

        showHideShadow(true, DEFAULT_CONTROLS_DURATION);
        animate(binding.playbackControlRoot, true, DEFAULT_CONTROLS_DURATION,
                AnimationType.ALPHA, 0, () -> hideControls(DEFAULT_CONTROLS_DURATION, hideTime));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,showControls,void showControls(long),"[697, 706]","{'A305': [(697, 706)]}",{'A305': 1.0},A305,,"    public void showControls(final long duration) {
        if (DEBUG) {
            Log.d(TAG, ""showControls() called"");
        }
        showOrHideButtons();
        showSystemUIPartially();
        controlsVisibilityHandler.removeCallbacksAndMessages(null);
        showHideShadow(true, duration);
        animate(binding.playbackControlRoot, true, duration);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,hideControls,"void hideControls(long,long)","[708, 722]","{'A305': [(708, 722)]}",{'A305': 1.0},A305,,"    public void hideControls(final long duration, final long delay) {
        if (DEBUG) {
            Log.d(TAG, ""hideControls() called with: duration = ["" + duration
                    + ""], delay = ["" + delay + ""]"");
        }

        showOrHideButtons();

        controlsVisibilityHandler.removeCallbacksAndMessages(null);
        controlsVisibilityHandler.postDelayed(() -> {
            showHideShadow(false, duration);
            animate(binding.playbackControlRoot, false, duration, AnimationType.ALPHA,
                    0, this::hideSystemUIIfNeeded);
        }, delay);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,showHideShadow,"void showHideShadow(boolean,long)","[724, 728]","{'A305': [(724, 728)]}",{'A305': 1.0},A305,,"    public void showHideShadow(final boolean show, final long duration) {
        animate(binding.playbackControlsShadow, show, duration, AnimationType.ALPHA, 0, null);
        animate(binding.playerTopShadow, show, duration, AnimationType.ALPHA, 0, null);
        animate(binding.playerBottomShadow, show, duration, AnimationType.ALPHA, 0, null);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,showOrHideButtons,void showOrHideButtons(),"[730, 743]","{'A305': [(730, 743)]}",{'A305': 1.0},A305,,"    protected void showOrHideButtons() {
        @Nullable final PlayQueue playQueue = player.getPlayQueue();
        if (playQueue == null) {
            return;
        }

        final boolean showPrev = playQueue.getIndex() != 0;
        final boolean showNext = playQueue.getIndex() + 1 != playQueue.getStreams().size();

        binding.playPreviousButton.setVisibility(showPrev ? View.VISIBLE : View.INVISIBLE);
        binding.playPreviousButton.setAlpha(showPrev ? 1.0f : 0.0f);
        binding.playNextButton.setVisibility(showNext ? View.VISIBLE : View.INVISIBLE);
        binding.playNextButton.setAlpha(showNext ? 1.0f : 0.0f);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,showSystemUIPartially,void showSystemUIPartially(),"[745, 747]","{'A305': [(745, 747)]}",{'A305': 1.0},A305,,"    protected void showSystemUIPartially() {
        // system UI is really changed only by MainPlayerUi, so overridden there
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,hideSystemUIIfNeeded,void hideSystemUIIfNeeded(),"[749, 751]","{'A305': [(749, 751)]}",{'A305': 1.0},A305,,"    protected void hideSystemUIIfNeeded() {
        // system UI is really changed only by MainPlayerUi, so overridden there
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,isAnyListViewOpen,boolean isAnyListViewOpen(),"[753, 756]","{'A305': [(753, 756)]}",{'A305': 1.0},A305,,"    protected boolean isAnyListViewOpen() {
        // only MainPlayerUi has list views for the queue and for segments, so overridden there
        return false;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,isFullscreen,boolean isFullscreen(),"[758, 761]","{'A305': [(758, 761)]}",{'A305': 1.0},A305,,"    public boolean isFullscreen() {
        // only MainPlayerUi can be in fullscreen, so overridden there
        return false;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,updatePlayPauseButton,void updatePlayPauseButton(PlayButtonAction),"[768, 784]","{'A298': [(768, 784)]}",{'A298': 1.0},A298,,"    private void updatePlayPauseButton(final PlayButtonAction action) {
        final AppCompatImageButton button = binding.playPauseButton;
        switch (action) {
            case PLAY:
                button.setContentDescription(context.getString(R.string.play));
                button.setImageResource(R.drawable.ic_play_arrow);
                break;
            case PAUSE:
                button.setContentDescription(context.getString(R.string.pause));
                button.setImageResource(R.drawable.ic_pause);
                break;
            case REPLAY:
                button.setContentDescription(context.getString(R.string.replay));
                button.setImageResource(R.drawable.ic_replay);
                break;
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onPrepared,void onPrepared(),"[793, 798]","{'A305': [(793, 798)]}",{'A305': 1.0},A305,,"    @Override
    public void onPrepared() {
        super.onPrepared();
        setVideoDurationToControls((int) player.getExoPlayer().getDuration());
        binding.playbackSpeed.setText(formatSpeed(player.getPlaybackSpeed()));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onBlocked,void onBlocked(),"[800, 818]","{'A305': [(800, 814), (816, 818)], 'A298': [(815, 815)]}","{'A305': 0.9473684210526315, 'A298': 0.05263157894736842}",A305,,"    @Override
    public void onBlocked() {
        super.onBlocked();

        // if we are e.g. switching players, hide controls
        hideControls(DEFAULT_CONTROLS_DURATION, 0);

        binding.playbackSeekBar.setEnabled(false);
        binding.playbackSeekBar.getThumb()
                .setColorFilter(new PorterDuffColorFilter(Color.RED, PorterDuff.Mode.SRC_IN));

        binding.loadingPanel.setBackgroundColor(Color.BLACK);
        animate(binding.loadingPanel, true, 0);
        animate(binding.surfaceForeground, true, 100);

        updatePlayPauseButton(PlayButtonAction.PLAY);
        animatePlayButtons(false, 100);
        binding.getRoot().setKeepScreenOn(false);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onPlaying,void onPlaying(),"[820, 844]","{'A305': [(820, 835), (837, 844)], 'A298': [(836, 836)]}","{'A305': 0.96, 'A298': 0.04}",A305,,"    @Override
    public void onPlaying() {
        super.onPlaying();

        updateStreamRelatedViews();

        binding.playbackSeekBar.setEnabled(true);
        binding.playbackSeekBar.getThumb()
                .setColorFilter(new PorterDuffColorFilter(Color.RED, PorterDuff.Mode.SRC_IN));

        binding.loadingPanel.setVisibility(View.GONE);

        animate(binding.currentDisplaySeek, false, 200, AnimationType.SCALE_AND_ALPHA);

        animate(binding.playPauseButton, false, 80, AnimationType.SCALE_AND_ALPHA, 0,
                () -> {
                    updatePlayPauseButton(PlayButtonAction.PAUSE);
                    animatePlayButtons(true, 200);
                    if (!isAnyListViewOpen()) {
                        binding.playPauseButton.requestFocus();
                    }
                });

        binding.getRoot().setKeepScreenOn(true);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onBuffering,void onBuffering(),"[846, 852]","{'A305': [(846, 852)]}",{'A305': 1.0},A305,,"    @Override
    public void onBuffering() {
        super.onBuffering();
        binding.loadingPanel.setBackgroundColor(Color.TRANSPARENT);
        binding.loadingPanel.setVisibility(View.VISIBLE);
        binding.getRoot().setKeepScreenOn(true);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onPaused,void onPaused(),"[854, 875]","{'A305': [(854, 865), (867, 875)], 'A298': [(866, 866)]}","{'A305': 0.9545454545454546, 'A298': 0.045454545454545456}",A305,,"    @Override
    public void onPaused() {
        super.onPaused();

        // Don't let UI elements popup during double tap seeking. This state is entered sometimes
        // during seeking/loading. This if-else check ensures that the controls aren't popping up.
        if (!playerGestureListener.isDoubleTapping()) {
            showControls(400);
            binding.loadingPanel.setVisibility(View.GONE);

            animate(binding.playPauseButton, false, 80, AnimationType.SCALE_AND_ALPHA, 0,
                    () -> {
                        updatePlayPauseButton(PlayButtonAction.PLAY);
                        animatePlayButtons(true, 200);
                        if (!isAnyListViewOpen()) {
                            binding.playPauseButton.requestFocus();
                        }
                    });
        }

        binding.getRoot().setKeepScreenOn(false);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onPausedSeek,void onPausedSeek(),"[877, 882]","{'A305': [(877, 882)]}",{'A305': 1.0},A305,,"    @Override
    public void onPausedSeek() {
        super.onPausedSeek();
        animatePlayButtons(false, 100);
        binding.getRoot().setKeepScreenOn(true);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onCompleted,void onCompleted(),"[884, 903]","{'A305': [(884, 889), (891, 903)], 'A298': [(890, 890)]}","{'A305': 0.95, 'A298': 0.05}",A305,,"    @Override
    public void onCompleted() {
        super.onCompleted();

        animate(binding.playPauseButton, false, 0, AnimationType.SCALE_AND_ALPHA, 0,
                () -> {
                    updatePlayPauseButton(PlayButtonAction.REPLAY);
                    animatePlayButtons(true, DEFAULT_CONTROLS_DURATION);
                });

        binding.getRoot().setKeepScreenOn(false);

        // When a (short) video ends the elements have to display the correct values - see #6180
        updatePlayBackElementsCurrentDuration(binding.playbackSeekBar.getMax());

        showControls(500);
        animate(binding.currentDisplaySeek, false, 200, AnimationType.SCALE_AND_ALPHA);
        binding.loadingPanel.setVisibility(View.GONE);
        animate(binding.surfaceForeground, true, 100);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,animatePlayButtons,"void animatePlayButtons(boolean,long)","[905, 927]","{'A305': [(905, 927)]}",{'A305': 1.0},A305,,"    private void animatePlayButtons(final boolean show, final long duration) {
        animate(binding.playPauseButton, show, duration, AnimationType.SCALE_AND_ALPHA);

        @Nullable final PlayQueue playQueue = player.getPlayQueue();
        if (playQueue == null) {
            return;
        }

        if (!show || playQueue.getIndex() > 0) {
            animate(
                    binding.playPreviousButton,
                    show,
                    duration,
                    AnimationType.SCALE_AND_ALPHA);
        }
        if (!show || playQueue.getIndex() + 1 < playQueue.getStreams().size()) {
            animate(
                    binding.playNextButton,
                    show,
                    duration,
                    AnimationType.SCALE_AND_ALPHA);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onRepeatClicked,void onRepeatClicked(),"[936, 941]","{'A305': [(936, 941)]}",{'A305': 1.0},A305,,"    public void onRepeatClicked() {
        if (DEBUG) {
            Log.d(TAG, ""onRepeatClicked() called"");
        }
        player.cycleNextRepeatMode();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onShuffleClicked,void onShuffleClicked(),"[943, 948]","{'A305': [(943, 948)]}",{'A305': 1.0},A305,,"    public void onShuffleClicked() {
        if (DEBUG) {
            Log.d(TAG, ""onShuffleClicked() called"");
        }
        player.toggleShuffleModeEnabled();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onRepeatModeChanged,void onRepeatModeChanged(int),"[950, 964]","{'A305': [(950, 964)]}",{'A305': 1.0},A305,,"    @Override
    public void onRepeatModeChanged(@RepeatMode final int repeatMode) {
        super.onRepeatModeChanged(repeatMode);

        if (repeatMode == REPEAT_MODE_ALL) {
            binding.repeatButton.setImageResource(
                    com.google.android.exoplayer2.ui.R.drawable.exo_controls_repeat_all);
        } else if (repeatMode == REPEAT_MODE_ONE) {
            binding.repeatButton.setImageResource(
                    com.google.android.exoplayer2.ui.R.drawable.exo_controls_repeat_one);
        } else /* repeatMode == REPEAT_MODE_OFF */ {
            binding.repeatButton.setImageResource(
                    com.google.android.exoplayer2.ui.R.drawable.exo_controls_repeat_off);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onShuffleModeEnabledChanged,void onShuffleModeEnabledChanged(boolean),"[966, 970]","{'A305': [(966, 970)]}",{'A305': 1.0},A305,,"    @Override
    public void onShuffleModeEnabledChanged(final boolean shuffleModeEnabled) {
        super.onShuffleModeEnabledChanged(shuffleModeEnabled);
        setShuffleButton(shuffleModeEnabled);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onMuteUnmuteChanged,void onMuteUnmuteChanged(boolean),"[972, 976]","{'A305': [(972, 976)]}",{'A305': 1.0},A305,,"    @Override
    public void onMuteUnmuteChanged(final boolean isMuted) {
        super.onMuteUnmuteChanged(isMuted);
        setMuteButton(isMuted);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setMuteButton,void setMuteButton(boolean),"[978, 981]","{'A305': [(978, 981)]}",{'A305': 1.0},A305,,"    private void setMuteButton(final boolean isMuted) {
        binding.switchMute.setImageDrawable(AppCompatResources.getDrawable(context, isMuted
                ? R.drawable.ic_volume_off : R.drawable.ic_volume_up));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setShuffleButton,void setShuffleButton(boolean),"[983, 985]","{'A305': [(983, 985)]}",{'A305': 1.0},A305,,"    private void setShuffleButton(final boolean shuffled) {
        binding.shuffleButton.setImageAlpha(shuffled ? 255 : 77);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onPlaybackParametersChanged,void onPlaybackParametersChanged(PlaybackParameters),"[994, 998]","{'A305': [(994, 998)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlaybackParametersChanged(@NonNull final PlaybackParameters playbackParameters) {
        super.onPlaybackParametersChanged(playbackParameters);
        binding.playbackSpeed.setText(formatSpeed(playbackParameters.speed));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onRenderedFirstFrame,void onRenderedFirstFrame(),"[1000, 1005]","{'A305': [(1000, 1005)]}",{'A305': 1.0},A305,,"    @Override
    public void onRenderedFirstFrame() {
        super.onRenderedFirstFrame();
        //TODO check if this causes black screen when switching to fullscreen
        animate(binding.surfaceForeground, false, DEFAULT_CONTROLS_DURATION);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onMetadataChanged,void onMetadataChanged(StreamInfo),"[1014, 1024]","{'A305': [(1014, 1024)]}",{'A305': 1.0},A305,,"    @Override
    public void onMetadataChanged(@NonNull final StreamInfo info) {
        super.onMetadataChanged(info);

        updateStreamRelatedViews();

        binding.titleTextView.setText(info.getName());
        binding.channelTextView.setText(info.getUploaderName());

        this.seekbarPreviewThumbnailHolder.resetFrom(player.getContext(), info.getPreviewFrames());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,updateStreamRelatedViews,void updateStreamRelatedViews(),"[1026, 1079]","{'A305': [(1026, 1026), (1041, 1042), (1048, 1048), (1054, 1054), (1079, 1079)], 'A295': [(1027, 1028), (1030, 1040), (1043, 1047), (1049, 1053), (1055, 1064), (1066, 1078)], 'A386': [(1029, 1029), (1065, 1065)]}","{'A305': 0.1111111111111111, 'A295': 0.8518518518518519, 'A386': 0.037037037037037035}",A295,,"    private void updateStreamRelatedViews() {
        player.getCurrentStreamInfo().ifPresent(info -> {
            binding.qualityTextView.setVisibility(View.GONE);
            binding.audioTrackTextView.setVisibility(View.GONE);
            binding.playbackSpeed.setVisibility(View.GONE);

            binding.playbackEndTime.setVisibility(View.GONE);
            binding.playbackLiveSync.setVisibility(View.GONE);

            switch (info.getStreamType()) {
                case AUDIO_STREAM:
                case POST_LIVE_AUDIO_STREAM:
                    binding.surfaceView.setVisibility(View.GONE);
                    binding.endScreen.setVisibility(View.VISIBLE);
                    binding.playbackEndTime.setVisibility(View.VISIBLE);
                    break;

                case AUDIO_LIVE_STREAM:
                    binding.surfaceView.setVisibility(View.GONE);
                    binding.endScreen.setVisibility(View.VISIBLE);
                    binding.playbackLiveSync.setVisibility(View.VISIBLE);
                    break;

                case LIVE_STREAM:
                    binding.surfaceView.setVisibility(View.VISIBLE);
                    binding.endScreen.setVisibility(View.GONE);
                    binding.playbackLiveSync.setVisibility(View.VISIBLE);
                    break;

                case VIDEO_STREAM:
                case POST_LIVE_STREAM:
                    if (player.getCurrentMetadata() != null
                            && player.getCurrentMetadata().getMaybeQuality().isEmpty()
                            || (info.getVideoStreams().isEmpty()
                            && info.getVideoOnlyStreams().isEmpty())) {
                        break;
                    }

                    buildQualityMenu();
                    buildAudioTrackMenu();

                    binding.qualityTextView.setVisibility(View.VISIBLE);
                    binding.surfaceView.setVisibility(View.VISIBLE);
                    // fallthrough
                default:
                    binding.endScreen.setVisibility(View.GONE);
                    binding.playbackEndTime.setVisibility(View.VISIBLE);
                    break;
            }

            buildPlaybackSpeedMenu();
            binding.playbackSpeed.setVisibility(View.VISIBLE);
        });
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,buildQualityMenu,void buildQualityMenu(),"[1088, 1112]","{'A305': [(1088, 1093), (1095, 1112)], 'A300': [(1094, 1094)]}","{'A305': 0.96, 'A300': 0.04}",A305,,"    private void buildQualityMenu() {
        if (qualityPopupMenu == null) {
            return;
        }
        qualityPopupMenu.getMenu().removeGroup(POPUP_MENU_ID_QUALITY);

        final List<VideoStream> availableStreams = Optional.ofNullable(player.getCurrentMetadata())
                .flatMap(MediaItemTag::getMaybeQuality)
                .map(MediaItemTag.Quality::getSortedVideoStreams)
                .orElse(null);
        if (availableStreams == null) {
            return;
        }

        for (int i = 0; i < availableStreams.size(); i++) {
            final VideoStream videoStream = availableStreams.get(i);
            qualityPopupMenu.getMenu().add(POPUP_MENU_ID_QUALITY, i, Menu.NONE, MediaFormat
                    .getNameById(videoStream.getFormatId()) + "" "" + videoStream.getResolution());
        }
        qualityPopupMenu.setOnMenuItemClickListener(this);
        qualityPopupMenu.setOnDismissListener(this);

        player.getSelectedVideoStream()
                .ifPresent(s -> binding.qualityTextView.setText(s.getResolution()));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,buildAudioTrackMenu,void buildAudioTrackMenu(),"[1114, 1140]","{'A386': [(1114, 1140)]}",{'A386': 1.0},A386,,"    private void buildAudioTrackMenu() {
        if (audioTrackPopupMenu == null) {
            return;
        }
        audioTrackPopupMenu.getMenu().removeGroup(POPUP_MENU_ID_AUDIO_TRACK);

        final List<AudioStream> availableStreams = Optional.ofNullable(player.getCurrentMetadata())
                .flatMap(MediaItemTag::getMaybeAudioTrack)
                .map(MediaItemTag.AudioTrack::getAudioStreams)
                .orElse(null);
        if (availableStreams == null || availableStreams.size() < 2) {
            return;
        }

        for (int i = 0; i < availableStreams.size(); i++) {
            final AudioStream audioStream = availableStreams.get(i);
            audioTrackPopupMenu.getMenu().add(POPUP_MENU_ID_AUDIO_TRACK, i, Menu.NONE,
                    Localization.audioTrackName(context, audioStream));
        }

        player.getSelectedAudioStream()
                .ifPresent(s -> binding.audioTrackTextView.setText(
                        Localization.audioTrackName(context, s)));
        binding.audioTrackTextView.setVisibility(View.VISIBLE);
        audioTrackPopupMenu.setOnMenuItemClickListener(this);
        audioTrackPopupMenu.setOnDismissListener(this);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,buildPlaybackSpeedMenu,void buildPlaybackSpeedMenu(),"[1142, 1155]","{'A305': [(1142, 1155)]}",{'A305': 1.0},A305,,"    private void buildPlaybackSpeedMenu() {
        if (playbackSpeedPopupMenu == null) {
            return;
        }
        playbackSpeedPopupMenu.getMenu().removeGroup(POPUP_MENU_ID_PLAYBACK_SPEED);

        for (int i = 0; i < PLAYBACK_SPEEDS.length; i++) {
            playbackSpeedPopupMenu.getMenu().add(POPUP_MENU_ID_PLAYBACK_SPEED, i, Menu.NONE,
                    formatSpeed(PLAYBACK_SPEEDS[i]));
        }
        binding.playbackSpeed.setText(formatSpeed(player.getPlaybackSpeed()));
        playbackSpeedPopupMenu.setOnMenuItemClickListener(this);
        playbackSpeedPopupMenu.setOnDismissListener(this);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,buildCaptionMenu,void buildCaptionMenu(List<String>),"[1157, 1237]","{'A305': [(1157, 1237)]}",{'A305': 1.0},A305,,"    private void buildCaptionMenu(@NonNull final List<String> availableLanguages) {
        if (captionPopupMenu == null) {
            return;
        }
        captionPopupMenu.getMenu().removeGroup(POPUP_MENU_ID_CAPTION);

        captionPopupMenu.setOnDismissListener(this);

        // Add option for turning off caption
        final MenuItem captionOffItem = captionPopupMenu.getMenu().add(POPUP_MENU_ID_CAPTION,
                0, Menu.NONE, R.string.caption_none);
        captionOffItem.setOnMenuItemClickListener(menuItem -> {
            final int textRendererIndex = player.getCaptionRendererIndex();
            if (textRendererIndex != RENDERER_UNAVAILABLE) {
                player.getTrackSelector().setParameters(player.getTrackSelector()
                        .buildUponParameters().setRendererDisabled(textRendererIndex, true));
            }
            player.getPrefs().edit()
                    .remove(context.getString(R.string.caption_user_set_key)).apply();
            return true;
        });

        // Add all available captions
        for (int i = 0; i < availableLanguages.size(); i++) {
            final String captionLanguage = availableLanguages.get(i);
            final MenuItem captionItem = captionPopupMenu.getMenu().add(POPUP_MENU_ID_CAPTION,
                    i + 1, Menu.NONE, captionLanguage);
            captionItem.setOnMenuItemClickListener(menuItem -> {
                final int textRendererIndex = player.getCaptionRendererIndex();
                if (textRendererIndex != RENDERER_UNAVAILABLE) {
                    // DefaultTrackSelector will select for text tracks in the following order.
                    // When multiple tracks share the same rank, a random track will be chosen.
                    // 1. ANY track exactly matching preferred language name
                    // 2. ANY track exactly matching preferred language stem
                    // 3. ROLE_FLAG_CAPTION track matching preferred language stem
                    // 4. ROLE_FLAG_DESCRIBES_MUSIC_AND_SOUND track matching preferred language stem
                    // This means if a caption track of preferred language is not available,
                    // then an auto-generated track of that language will be chosen automatically.
                    player.getTrackSelector().setParameters(player.getTrackSelector()
                            .buildUponParameters()
                            .setPreferredTextLanguages(captionLanguage,
                                    PlayerHelper.captionLanguageStemOf(captionLanguage))
                            .setPreferredTextRoleFlags(C.ROLE_FLAG_CAPTION)
                            .setRendererDisabled(textRendererIndex, false));
                    player.getPrefs().edit().putString(context.getString(
                            R.string.caption_user_set_key), captionLanguage).apply();
                }
                return true;
            });
        }
        captionPopupMenu.setOnDismissListener(this);

        // apply caption language from previous user preference
        final int textRendererIndex = player.getCaptionRendererIndex();
        if (textRendererIndex == RENDERER_UNAVAILABLE) {
            return;
        }

        // If user prefers to show no caption, then disable the renderer.
        // Otherwise, DefaultTrackSelector may automatically find an available caption
        // and display that.
        final String userPreferredLanguage =
                player.getPrefs().getString(context.getString(R.string.caption_user_set_key), null);
        if (userPreferredLanguage == null) {
            player.getTrackSelector().setParameters(player.getTrackSelector().buildUponParameters()
                    .setRendererDisabled(textRendererIndex, true));
            return;
        }

        // Only set preferred language if it does not match the user preference,
        // otherwise there might be an infinite cycle at onTextTracksChanged.
        final List<String> selectedPreferredLanguages =
                player.getTrackSelector().getParameters().preferredTextLanguages;
        if (!selectedPreferredLanguages.contains(userPreferredLanguage)) {
            player.getTrackSelector().setParameters(player.getTrackSelector().buildUponParameters()
                    .setPreferredTextLanguages(userPreferredLanguage,
                            PlayerHelper.captionLanguageStemOf(userPreferredLanguage))
                    .setPreferredTextRoleFlags(C.ROLE_FLAG_CAPTION)
                    .setRendererDisabled(textRendererIndex, false));
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onQualityClicked,void onQualityClicked(),"[1241, 1248]","{'A305': [(1241, 1248)]}",{'A305': 1.0},A305,,"    private void onQualityClicked() {
        qualityPopupMenu.show();
        isSomePopupMenuVisible = true;

        player.getSelectedVideoStream()
                .map(s -> MediaFormat.getNameById(s.getFormatId()) + "" "" + s.getResolution())
                .ifPresent(binding.qualityTextView::setText);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onAudioTracksClicked,void onAudioTracksClicked(),"[1250, 1253]","{'A386': [(1250, 1253)]}",{'A386': 1.0},A386,,"    private void onAudioTracksClicked() {
        audioTrackPopupMenu.show();
        isSomePopupMenuVisible = true;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onMenuItemClick,boolean onMenuItemClick(MenuItem),"[1258, 1281]","{'A305': [(1258, 1266), (1268, 1268), (1272, 1281)], 'A386': [(1267, 1267), (1269, 1271)]}","{'A305': 0.8333333333333334, 'A386': 0.16666666666666666}",A305,,"    @Override
    public boolean onMenuItemClick(@NonNull final MenuItem menuItem) {
        if (DEBUG) {
            Log.d(TAG, ""onMenuItemClick() called with: ""
                    + ""menuItem = ["" + menuItem + ""], ""
                    + ""menuItem.getItemId = ["" + menuItem.getItemId() + ""]"");
        }

        if (menuItem.getGroupId() == POPUP_MENU_ID_QUALITY) {
            onQualityItemClick(menuItem);
            return true;
        } else if (menuItem.getGroupId() == POPUP_MENU_ID_AUDIO_TRACK) {
            onAudioTrackItemClick(menuItem);
            return true;
        } else if (menuItem.getGroupId() == POPUP_MENU_ID_PLAYBACK_SPEED) {
            final int speedIndex = menuItem.getItemId();
            final float speed = PLAYBACK_SPEEDS[speedIndex];

            player.setPlaybackSpeed(speed);
            binding.playbackSpeed.setText(formatSpeed(speed));
        }

        return false;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onQualityItemClick,void onQualityItemClick(MenuItem),"[1283, 1301]","{'A386': [(1283, 1301)]}",{'A386': 1.0},A386,,"    private void onQualityItemClick(@NonNull final MenuItem menuItem) {
        final int menuItemIndex = menuItem.getItemId();
        @Nullable final MediaItemTag currentMetadata = player.getCurrentMetadata();
        if (currentMetadata == null || currentMetadata.getMaybeQuality().isEmpty()) {
            return;
        }

        final MediaItemTag.Quality quality = currentMetadata.getMaybeQuality().get();
        final List<VideoStream> availableStreams = quality.getSortedVideoStreams();
        final int selectedStreamIndex = quality.getSelectedVideoStreamIndex();
        if (selectedStreamIndex == menuItemIndex || availableStreams.size() <= menuItemIndex) {
            return;
        }

        final String newResolution = availableStreams.get(menuItemIndex).getResolution();
        player.setPlaybackQuality(newResolution);

        binding.qualityTextView.setText(menuItem.getTitle());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onAudioTrackItemClick,void onAudioTrackItemClick(MenuItem),"[1303, 1322]","{'A386': [(1303, 1322)]}",{'A386': 1.0},A386,,"    private void onAudioTrackItemClick(@NonNull final MenuItem menuItem) {
        final int menuItemIndex = menuItem.getItemId();
        @Nullable final MediaItemTag currentMetadata = player.getCurrentMetadata();
        if (currentMetadata == null || currentMetadata.getMaybeAudioTrack().isEmpty()) {
            return;
        }

        final MediaItemTag.AudioTrack audioTrack =
                currentMetadata.getMaybeAudioTrack().get();
        final List<AudioStream> availableStreams = audioTrack.getAudioStreams();
        final int selectedStreamIndex = audioTrack.getSelectedAudioStreamIndex();
        if (selectedStreamIndex == menuItemIndex || availableStreams.size() <= menuItemIndex) {
            return;
        }

        final String newAudioTrack = availableStreams.get(menuItemIndex).getAudioTrackId();
        player.setAudioTrack(newAudioTrack);

        binding.audioTrackTextView.setText(menuItem.getTitle());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onDismiss,void onDismiss(PopupMenu),"[1327, 1340]","{'A305': [(1327, 1340)]}",{'A305': 1.0},A305,,"    @Override
    public void onDismiss(@Nullable final PopupMenu menu) {
        if (DEBUG) {
            Log.d(TAG, ""onDismiss() called with: menu = ["" + menu + ""]"");
        }
        isSomePopupMenuVisible = false; //TODO check if this works
        player.getSelectedVideoStream()
                .ifPresent(s -> binding.qualityTextView.setText(s.getResolution()));

        if (player.isPlaying()) {
            hideControls(DEFAULT_CONTROLS_DURATION, 0);
            hideSystemUIIfNeeded();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onCaptionClicked,void onCaptionClicked(),"[1342, 1348]","{'A305': [(1342, 1348)]}",{'A305': 1.0},A305,,"    private void onCaptionClicked() {
        if (DEBUG) {
            Log.d(TAG, ""onCaptionClicked() called"");
        }
        captionPopupMenu.show();
        isSomePopupMenuVisible = true;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,isSomePopupMenuVisible,boolean isSomePopupMenuVisible(),"[1350, 1352]","{'A305': [(1350, 1352)]}",{'A305': 1.0},A305,,"    public boolean isSomePopupMenuVisible() {
        return isSomePopupMenuVisible;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onTextTracksChanged,void onTextTracksChanged(Tracks),"[1361, 1402]","{'A305': [(1361, 1394), (1396, 1402)], 'A295': [(1395, 1395)]}","{'A305': 0.9761904761904762, 'A295': 0.023809523809523808}",A305,,"    @Override
    public void onTextTracksChanged(@NonNull final Tracks currentTracks) {
        super.onTextTracksChanged(currentTracks);

        final boolean trackTypeTextSupported = !currentTracks.containsType(C.TRACK_TYPE_TEXT)
                || currentTracks.isTypeSupported(C.TRACK_TYPE_TEXT, false);
        if (getPlayer().getTrackSelector().getCurrentMappedTrackInfo() == null
                || !trackTypeTextSupported) {
            binding.captionTextView.setVisibility(View.GONE);
            return;
        }

        // Extract all loaded languages
        final List<Tracks.Group> textTracks = currentTracks
                .getGroups()
                .stream()
                .filter(trackGroupInfo -> C.TRACK_TYPE_TEXT == trackGroupInfo.getType())
                .collect(Collectors.toList());
        final List<String> availableLanguages = textTracks.stream()
                .map(Tracks.Group::getMediaTrackGroup)
                .filter(textTrack -> textTrack.length > 0)
                .map(textTrack -> textTrack.getFormat(0).language)
                .collect(Collectors.toList());

        // Find selected text track
        final Optional<Format> selectedTracks = textTracks.stream()
                .filter(Tracks.Group::isSelected)
                .filter(info -> info.getMediaTrackGroup().length >= 1)
                .map(info -> info.getMediaTrackGroup().getFormat(0))
                .findFirst();

        // Build UI
        buildCaptionMenu(availableLanguages);
        if (player.getTrackSelector().getParameters().getRendererDisabled(
                player.getCaptionRendererIndex()) || selectedTracks.isEmpty()) {
            binding.captionTextView.setText(R.string.caption_none);
        } else {
            binding.captionTextView.setText(selectedTracks.get().language);
        }
        binding.captionTextView.setVisibility(
                availableLanguages.isEmpty() ? View.GONE : View.VISIBLE);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onCues,void onCues(List<Cue>),"[1404, 1408]","{'A305': [(1404, 1408)]}",{'A305': 1.0},A305,,"    @Override
    public void onCues(@NonNull final List<Cue> cues) {
        super.onCues(cues);
        binding.subtitleView.setCues(cues);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupSubtitleView,void setupSubtitleView(),"[1410, 1415]","{'A305': [(1410, 1415)]}",{'A305': 1.0},A305,,"    private void setupSubtitleView() {
        setupSubtitleView(PlayerHelper.getCaptionScale(context));
        final CaptionStyleCompat captionStyle = PlayerHelper.getCaptionStyle(context);
        binding.subtitleView.setApplyEmbeddedStyles(captionStyle == CaptionStyleCompat.DEFAULT);
        binding.subtitleView.setStyle(captionStyle);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,makeOnClickListener,View.OnClickListener makeOnClickListener(Runnable),"[1436, 1463]","{'A305': [(1441, 1441), (1443, 1443), (1463, 1463)], 'A295': [(1436, 1440), (1442, 1442), (1444, 1462)]}","{'A305': 0.10714285714285714, 'A295': 0.8928571428571429}",A295,,"    protected View.OnClickListener makeOnClickListener(@NonNull final Runnable runnable) {
        return v -> {
            if (DEBUG) {
                Log.d(TAG, ""onClick() called with: v = ["" + v + ""]"");
            }

            runnable.run();

            // Manages the player controls after handling the view click.
            if (player.getCurrentState() == STATE_COMPLETED) {
                return;
            }
            controlsVisibilityHandler.removeCallbacksAndMessages(null);
            showHideShadow(true, DEFAULT_CONTROLS_DURATION);
            animate(binding.playbackControlRoot, true, DEFAULT_CONTROLS_DURATION,
                    AnimationType.ALPHA, 0, () -> {
                        if (player.getCurrentState() == STATE_PLAYING && !isSomePopupMenuVisible) {
                            if (v == binding.playPauseButton
                                    // Hide controls in fullscreen immediately
                                    || (v == binding.screenRotationButton && isFullscreen())) {
                                hideControls(0, 0);
                            } else {
                                hideControls(DEFAULT_CONTROLS_DURATION, DEFAULT_CONTROLS_HIDE_TIME);
                            }
                        }
                    });
        };
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onKeyDown,boolean onKeyDown(int),"[1465, 1502]","{'A305': [(1465, 1502)]}",{'A305': 1.0},A305,,"    public boolean onKeyDown(final int keyCode) {
        switch (keyCode) {
            case KeyEvent.KEYCODE_BACK:
                if (DeviceUtils.isTv(context) && isControlsVisible()) {
                    hideControls(0, 0);
                    return true;
                }
                break;
            case KeyEvent.KEYCODE_DPAD_UP:
            case KeyEvent.KEYCODE_DPAD_LEFT:
            case KeyEvent.KEYCODE_DPAD_DOWN:
            case KeyEvent.KEYCODE_DPAD_RIGHT:
            case KeyEvent.KEYCODE_DPAD_CENTER:
                if ((binding.getRoot().hasFocus() && !binding.playbackControlRoot.hasFocus())
                        || isAnyListViewOpen()) {
                    // do not interfere with focus in playlist and play queue etc.
                    break;
                }

                if (player.getCurrentState() == org.schabi.newpipe.player.Player.STATE_BLOCKED) {
                    return true;
                }

                if (isControlsVisible()) {
                    hideControls(DEFAULT_CONTROLS_DURATION, DPAD_CONTROLS_HIDE_TIME);
                } else {
                    binding.playPauseButton.requestFocus();
                    showControlsThenHide();
                    showSystemUIPartially();
                    return true;
                }
                break;
            default:
                break; // ignore other keys
        }

        return false;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onMoreOptionsClicked,void onMoreOptionsClicked(),"[1504, 1524]","{'A305': [(1504, 1524)]}",{'A305': 1.0},A305,,"    private void onMoreOptionsClicked() {
        if (DEBUG) {
            Log.d(TAG, ""onMoreOptionsClicked() called"");
        }

        final boolean isMoreControlsVisible =
                binding.secondaryControls.getVisibility() == View.VISIBLE;

        animateRotation(binding.moreOptionsButton, DEFAULT_CONTROLS_DURATION,
                isMoreControlsVisible ? 0 : 180);
        animate(binding.secondaryControls, !isMoreControlsVisible, DEFAULT_CONTROLS_DURATION,
                AnimationType.SLIDE_AND_ALPHA, 0, () -> {
                    // Fix for a ripple effect on background drawable.
                    // When view returns from GONE state it takes more milliseconds than returning
                    // from INVISIBLE state. And the delay makes ripple background end to fast
                    if (isMoreControlsVisible) {
                        binding.secondaryControls.setVisibility(View.INVISIBLE);
                    }
                });
        showControls(DEFAULT_CONTROLS_DURATION);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onPlayWithKodiClicked,void onPlayWithKodiClicked(),"[1526, 1531]","{'A305': [(1526, 1531)]}",{'A305': 1.0},A305,,"    private void onPlayWithKodiClicked() {
        if (player.getCurrentMetadata() != null) {
            player.pause();
            KoreUtils.playWithKore(context, Uri.parse(player.getVideoUrl()));
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onOpenInBrowserClicked,void onOpenInBrowserClicked(),"[1533, 1536]","{'A305': [(1533, 1536)]}",{'A305': 1.0},A305,,"    private void onOpenInBrowserClicked() {
        player.getCurrentStreamInfo().ifPresent(streamInfo ->
                ShareUtils.openUrlInBrowser(player.getContext(), streamInfo.getOriginalUrl()));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setResizeMode,void setResizeMode(int),"[1545, 1548]","{'A305': [(1545, 1548)]}",{'A305': 1.0},A305,,"    protected void setResizeMode(@AspectRatioFrameLayout.ResizeMode final int resizeMode) {
        binding.surfaceView.setResizeMode(resizeMode);
        binding.resizeTextView.setText(PlayerHelper.resizeTypeOf(context, resizeMode));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onResizeClicked,void onResizeClicked(),"[1550, 1552]","{'A305': [(1550, 1552)]}",{'A305': 1.0},A305,,"    void onResizeClicked() {
        setResizeMode(nextResizeModeAndSaveToPrefs(player, binding.surfaceView.getResizeMode()));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,onVideoSizeChanged,void onVideoSizeChanged(VideoSize),"[1554, 1558]","{'A305': [(1554, 1558)]}",{'A305': 1.0},A305,,"    @Override
    public void onVideoSizeChanged(@NonNull final VideoSize videoSize) {
        super.onVideoSizeChanged(videoSize);
        binding.surfaceView.setAspectRatio(((float) videoSize.width) / videoSize.height);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,setupVideoSurfaceIfNeeded,void setupVideoSurfaceIfNeeded(),"[1576, 1599]","{'A305': [(1576, 1599)]}",{'A305': 1.0},A305,,"    public void setupVideoSurfaceIfNeeded() {
        if (!surfaceIsSetup && player.getExoPlayer() != null
                && binding.getRoot().getParent() != null) {
            // make sure there is nothing left over from previous calls
            clearVideoSurface();

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) { // >=API23
                surfaceHolderCallback = new SurfaceHolderCallback(context, player.getExoPlayer());
                binding.surfaceView.getHolder().addCallback(surfaceHolderCallback);

                // ensure player is using an unreleased surface, which the surfaceView might not be
                // when starting playback on background or during player switching
                if (binding.surfaceView.getHolder().getSurface().isValid()) {
                    // initially set the surface manually otherwise
                    // onRenderedFirstFrame() will not be called
                    player.getExoPlayer().setVideoSurfaceHolder(binding.surfaceView.getHolder());
                }
            } else {
                player.getExoPlayer().setVideoSurfaceView(binding.surfaceView);
            }

            surfaceIsSetup = true;
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,clearVideoSurface,void clearVideoSurface(),"[1601, 1610]","{'A305': [(1601, 1610)]}",{'A305': 1.0},A305,,"    private void clearVideoSurface() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M // >=API23
                && surfaceHolderCallback != null) {
            binding.surfaceView.getHolder().removeCallback(surfaceHolderCallback);
            surfaceHolderCallback.release();
            surfaceHolderCallback = null;
        }
        Optional.ofNullable(player.getExoPlayer()).ifPresent(ExoPlayer::clearVideoSurface);
        surfaceIsSetup = false;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,getBinding,PlayerBinding getBinding(),"[1619, 1621]","{'A305': [(1619, 1621)]}",{'A305': 1.0},A305,,"    public PlayerBinding getBinding() {
        return binding;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/VideoPlayerUi.java,VideoPlayerUi,getGestureDetector,GestureDetector getGestureDetector(),"[1623, 1625]","{'A305': [(1623, 1625)]}",{'A305': 1.0},A305,,"    public GestureDetector getGestureDetector() {
        return gestureDetector;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUiList.java,PlayerUiList,addAndPrepare,void addAndPrepare(PlayerUi),"[34, 48]","{'A305': [(34, 48)]}",{'A305': 1.0},A305,,"    public void addAndPrepare(final PlayerUi playerUi) {
        if (playerUi.getPlayer().getFragmentListener().isPresent()) {
            // make sure UIs know whether a service is connected or not
            playerUi.onFragmentListenerSet();
        }

        if (!playerUi.getPlayer().exoPlayerIsNull()) {
            playerUi.initPlayer();
            if (playerUi.getPlayer().getPlayQueue() != null) {
                playerUi.initPlayback();
            }
        }

        playerUis.add(playerUi);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUiList.java,PlayerUiList,destroyAll,void destroyAll(Class<T>),"[57, 65]","{'A305': [(57, 65)]}",{'A305': 1.0},A305,,"    public <T> void destroyAll(final Class<T> playerUiType) {
        playerUis.stream()
                .filter(playerUiType::isInstance)
                .forEach(playerUi -> {
                    playerUi.destroyPlayer();
                    playerUi.destroy();
                });
        playerUis.removeIf(playerUiType::isInstance);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUiList.java,PlayerUiList,get,Optional<T> get(Class<T>),"[75, 80]","{'A305': [(75, 80)]}",{'A305': 1.0},A305,,"    public <T> Optional<T> get(final Class<T> playerUiType) {
        return playerUis.stream()
                .filter(playerUiType::isInstance)
                .map(playerUiType::cast)
                .findFirst();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PlayerUiList.java,PlayerUiList,call,void call(Consumer<PlayerUi>),"[86, 89]","{'A305': [(86, 89)]}",{'A305': 1.0},A305,,"    public void call(final Consumer<PlayerUi> consumer) {
        //noinspection SimplifyStreamApiCallChains
        playerUis.stream().forEachOrdered(consumer);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,setupAfterIntent,void setupAfterIntent(),"[96, 101]","{'A305': [(96, 101)]}",{'A305': 1.0},A305,,"    @Override
    public void setupAfterIntent() {
        super.setupAfterIntent();
        initPopup();
        initPopupCloseOverlay();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,buildGestureListener,BasePlayerGestureListener buildGestureListener(),"[103, 106]","{'A305': [(103, 106)]}",{'A305': 1.0},A305,,"    @Override
    BasePlayerGestureListener buildGestureListener() {
        return new PopupPlayerGestureListener(this);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,initPopup,void initPopup(),"[108, 134]","{'A305': [(108, 134)]}",{'A305': 1.0},A305,,"    @SuppressLint(""RtlHardcoded"")
    private void initPopup() {
        if (DEBUG) {
            Log.d(TAG, ""initPopup() called"");
        }

        // Popup is already added to windowManager
        if (popupHasParent()) {
            return;
        }

        updateScreenSize();

        popupLayoutParams = retrievePopupLayoutParamsFromPrefs();
        binding.surfaceView.setHeights(popupLayoutParams.height, popupLayoutParams.height);

        checkPopupPositionBounds();

        binding.loadingPanel.setMinimumWidth(popupLayoutParams.width);
        binding.loadingPanel.setMinimumHeight(popupLayoutParams.height);

        windowManager.addView(binding.getRoot(), popupLayoutParams);
        setupVideoSurfaceIfNeeded(); // now there is a parent, we can setup video surface

        // Popup doesn't have aspectRatio selector, using FIT automatically
        setResizeMode(AspectRatioFrameLayout.RESIZE_MODE_FIT);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,initPopupCloseOverlay,void initPopupCloseOverlay(),"[136, 152]","{'A305': [(136, 152)]}",{'A305': 1.0},A305,,"    @SuppressLint(""RtlHardcoded"")
    private void initPopupCloseOverlay() {
        if (DEBUG) {
            Log.d(TAG, ""initPopupCloseOverlay() called"");
        }

        // closeOverlayView is already added to windowManager
        if (closeOverlayBinding != null) {
            return;
        }

        closeOverlayBinding = PlayerPopupCloseOverlayBinding.inflate(LayoutInflater.from(context));

        final WindowManager.LayoutParams closeOverlayLayoutParams = buildCloseOverlayLayoutParams();
        closeOverlayBinding.closeButton.setVisibility(View.GONE);
        windowManager.addView(closeOverlayBinding.getRoot(), closeOverlayLayoutParams);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,setupElementsVisibility,void setupElementsVisibility(),"[154, 178]","{'A305': [(154, 178)]}",{'A305': 1.0},A305,,"    @Override
    protected void setupElementsVisibility() {
        binding.fullScreenButton.setVisibility(View.VISIBLE);
        binding.screenRotationButton.setVisibility(View.GONE);
        binding.resizeTextView.setVisibility(View.GONE);
        binding.getRoot().findViewById(R.id.metadataView).setVisibility(View.GONE);
        binding.queueButton.setVisibility(View.GONE);
        binding.segmentsButton.setVisibility(View.GONE);
        binding.moreOptionsButton.setVisibility(View.GONE);
        binding.topControls.setOrientation(LinearLayout.HORIZONTAL);
        binding.primaryControls.getLayoutParams().width = WRAP_CONTENT;
        binding.secondaryControls.setAlpha(1.0f);
        binding.secondaryControls.setVisibility(View.VISIBLE);
        binding.secondaryControls.setTranslationY(0);
        binding.share.setVisibility(View.GONE);
        binding.playWithKodi.setVisibility(View.GONE);
        binding.openInBrowser.setVisibility(View.GONE);
        binding.switchMute.setVisibility(View.GONE);
        binding.playerCloseButton.setVisibility(View.GONE);
        binding.topControls.bringToFront();
        binding.topControls.setClickable(false);
        binding.topControls.setFocusable(false);
        binding.bottomControls.bringToFront();
        super.setupElementsVisibility();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,setupElementsSize,void setupElementsSize(Resources),"[180, 188]","{'A305': [(180, 188)]}",{'A305': 1.0},A305,,"    @Override
    protected void setupElementsSize(final Resources resources) {
        setupElementsSize(
                0,
                0,
                resources.getDimensionPixelSize(R.dimen.player_popup_controls_padding),
                resources.getDimensionPixelSize(R.dimen.player_popup_buttons_padding)
        );
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,removeViewFromParent,void removeViewFromParent(),"[190, 194]","{'A305': [(190, 194)]}",{'A305': 1.0},A305,,"    @Override
    public void removeViewFromParent() {
        // view was added by windowManager for popup player
        windowManager.removeViewImmediate(binding.getRoot());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,destroy,void destroy(),"[196, 200]","{'A305': [(196, 200)]}",{'A305': 1.0},A305,,"    @Override
    public void destroy() {
        super.destroy();
        removePopupFromView();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onBroadcastReceived,void onBroadcastReceived(Intent),"[209, 225]","{'A305': [(209, 225)]}",{'A305': 1.0},A305,,"    @Override
    public void onBroadcastReceived(final Intent intent) {
        super.onBroadcastReceived(intent);
        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {
            updateScreenSize();
            changePopupSize(popupLayoutParams.width);
            checkPopupPositionBounds();
        } else if (player.isPlaying() || player.isLoading()) {
            if (Intent.ACTION_SCREEN_OFF.equals(intent.getAction())) {
                // Use only audio source when screen turns off while popup player is playing
                player.useVideoSource(false);
            } else if (Intent.ACTION_SCREEN_ON.equals(intent.getAction())) {
                // Restore video source when screen turns on and user was watching video in popup
                player.useVideoSource(true);
            }
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,checkPopupPositionBounds,void checkPopupPositionBounds(),"[242, 256]","{'A305': [(242, 251), (256, 256)], 'A295': [(252, 255)]}","{'A305': 0.7333333333333333, 'A295': 0.26666666666666666}",A305,,"    public void checkPopupPositionBounds() {
        if (DEBUG) {
            Log.d(TAG, ""checkPopupPositionBounds() called with: ""
                    + ""screenWidth = ["" + screenWidth + ""], ""
                    + ""screenHeight = ["" + screenHeight + ""]"");
        }
        if (popupLayoutParams == null) {
            return;
        }

        popupLayoutParams.x = MathUtils.clamp(popupLayoutParams.x, 0, screenWidth
                - popupLayoutParams.width);
        popupLayoutParams.y = MathUtils.clamp(popupLayoutParams.y, 0, screenHeight
                - popupLayoutParams.height);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,updateScreenSize,void updateScreenSize(),"[258, 277]","{'A305': [(258, 258), (273, 277)], 'A295': [(259, 272)]}","{'A305': 0.3, 'A295': 0.7}",A295,,"    public void updateScreenSize() {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            final var windowMetrics = windowManager.getCurrentWindowMetrics();
            final var bounds = windowMetrics.getBounds();
            final var windowInsets = windowMetrics.getWindowInsets();
            final var insets = windowInsets.getInsetsIgnoringVisibility(
                    WindowInsets.Type.navigationBars() | WindowInsets.Type.displayCutout());
            screenWidth = bounds.width() - (insets.left + insets.right);
            screenHeight = bounds.height() - (insets.top + insets.bottom);
        } else {
            final DisplayMetrics metrics = new DisplayMetrics();
            windowManager.getDefaultDisplay().getMetrics(metrics);
            screenWidth = metrics.widthPixels;
            screenHeight = metrics.heightPixels;
        }
        if (DEBUG) {
            Log.d(TAG, ""updateScreenSize() called: screenWidth = [""
                    + screenWidth + ""], screenHeight = ["" + screenHeight + ""]"");
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,changePopupSize,void changePopupSize(int),"[284, 305]","{'A305': [(284, 293), (295, 305)], 'A295': [(294, 294)]}","{'A305': 0.9545454545454546, 'A295': 0.045454545454545456}",A305,,"    public void changePopupSize(final int width) {
        if (DEBUG) {
            Log.d(TAG, ""changePopupSize() called with: width = ["" + width + ""]"");
        }

        if (anyPopupViewIsNull()) {
            return;
        }

        final float minimumWidth = context.getResources().getDimension(R.dimen.popup_minimum_width);
        final int actualWidth = MathUtils.clamp(width, (int) minimumWidth, screenWidth);
        final int actualHeight = (int) getMinimumVideoHeight(width);
        if (DEBUG) {
            Log.d(TAG, ""updatePopupSize() updated values:""
                    + ""  width = ["" + actualWidth + ""], height = ["" + actualHeight + ""]"");
        }

        popupLayoutParams.width = actualWidth;
        popupLayoutParams.height = actualHeight;
        binding.surfaceView.setHeights(popupLayoutParams.height, popupLayoutParams.height);
        windowManager.updateViewLayout(binding.getRoot(), popupLayoutParams);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,calculateMaxEndScreenThumbnailHeight,float calculateMaxEndScreenThumbnailHeight(Bitmap),"[307, 312]","{'A305': [(307, 312)]}",{'A305': 1.0},A305,,"    @Override
    protected float calculateMaxEndScreenThumbnailHeight(@NonNull final Bitmap bitmap) {
        // no need for the end screen thumbnail to be resized on popup player: it's only needed
        // for the main player so that it is enlarged correctly inside the fragment
        return bitmap.getHeight();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,closePopup,void closePopup(),"[321, 334]","{'A305': [(321, 334)]}",{'A305': 1.0},A305,,"    public void closePopup() {
        if (DEBUG) {
            Log.d(TAG, ""closePopup() called, isPopupClosing = "" + isPopupClosing);
        }
        if (isPopupClosing) {
            return;
        }
        isPopupClosing = true;

        player.saveStreamProgressState();
        windowManager.removeView(binding.getRoot());

        animatePopupOverlayAndFinishService();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,isPopupClosing,boolean isPopupClosing(),"[336, 338]","{'A305': [(336, 338)]}",{'A305': 1.0},A305,,"    public boolean isPopupClosing() {
        return isPopupClosing;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,removePopupFromView,void removePopupFromView(),"[340, 359]","{'A305': [(340, 359)]}",{'A305': 1.0},A305,,"    public void removePopupFromView() {
        // wrap in try-catch since it could sometimes generate errors randomly
        try {
            if (popupHasParent()) {
                windowManager.removeView(binding.getRoot());
            }
        } catch (final IllegalArgumentException e) {
            Log.w(TAG, ""Failed to remove popup from window manager"", e);
        }

        try {
            final boolean closeOverlayHasParent = closeOverlayBinding != null
                    && closeOverlayBinding.getRoot().getParent() != null;
            if (closeOverlayHasParent) {
                windowManager.removeView(closeOverlayBinding.getRoot());
            }
        } catch (final IllegalArgumentException e) {
            Log.w(TAG, ""Failed to remove popup overlay from window manager"", e);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,animatePopupOverlayAndFinishService,void animatePopupOverlayAndFinishService(),"[361, 388]","{'A305': [(361, 388)]}",{'A305': 1.0},A305,,"    private void animatePopupOverlayAndFinishService() {
        final int targetTranslationY =
                (int) (closeOverlayBinding.closeButton.getRootView().getHeight()
                        - closeOverlayBinding.closeButton.getY());

        closeOverlayBinding.closeButton.animate().setListener(null).cancel();
        closeOverlayBinding.closeButton.animate()
                .setInterpolator(new AnticipateInterpolator())
                .translationY(targetTranslationY)
                .setDuration(400)
                .setListener(new AnimatorListenerAdapter() {
                    @Override
                    public void onAnimationCancel(final Animator animation) {
                        end();
                    }

                    @Override
                    public void onAnimationEnd(final Animator animation) {
                        end();
                    }

                    private void end() {
                        windowManager.removeView(closeOverlayBinding.getRoot());
                        closeOverlayBinding = null;
                        player.getService().destroyPlayerAndStopService();
                    }
                }).start();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onAnimationCancel,void onAnimationCancel(Animator),"[372, 375]","{'A305': [(372, 375)]}",{'A305': 1.0},A305,,"                    @Override
                    public void onAnimationCancel(final Animator animation) {
                        end();
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onAnimationEnd,void onAnimationEnd(Animator),"[377, 380]","{'A305': [(377, 380)]}",{'A305': 1.0},A305,,"                    @Override
                    public void onAnimationEnd(final Animator animation) {
                        end();
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,end,void end(),"[382, 386]","{'A305': [(382, 386)]}",{'A305': 1.0},A305,,"                    private void end() {
                        windowManager.removeView(closeOverlayBinding.getRoot());
                        closeOverlayBinding = null;
                        player.getService().destroyPlayerAndStopService();
                    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,changePopupWindowFlags,void changePopupWindowFlags(int),"[396, 405]","{'A305': [(396, 405)]}",{'A305': 1.0},A305,,"    private void changePopupWindowFlags(final int flags) {
        if (DEBUG) {
            Log.d(TAG, ""changePopupWindowFlags() called with: flags = ["" + flags + ""]"");
        }

        if (!anyPopupViewIsNull()) {
            popupLayoutParams.flags = flags;
            windowManager.updateViewLayout(binding.getRoot(), popupLayoutParams);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onPlaying,void onPlaying(),"[407, 411]","{'A305': [(407, 411)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlaying() {
        super.onPlaying();
        changePopupWindowFlags(ONGOING_PLAYBACK_WINDOW_FLAGS);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onPaused,void onPaused(),"[413, 417]","{'A305': [(413, 417)]}",{'A305': 1.0},A305,,"    @Override
    public void onPaused() {
        super.onPaused();
        changePopupWindowFlags(IDLE_WINDOW_FLAGS);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onCompleted,void onCompleted(),"[419, 423]","{'A305': [(419, 423)]}",{'A305': 1.0},A305,,"    @Override
    public void onCompleted() {
        super.onCompleted();
        changePopupWindowFlags(IDLE_WINDOW_FLAGS);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,setupSubtitleView,void setupSubtitleView(float),"[425, 429]","{'A305': [(425, 427), (429, 429)], 'A304': [(428, 428)]}","{'A305': 0.8, 'A304': 0.2}",A305,,"    @Override
    protected void setupSubtitleView(final float captionScale) {
        binding.subtitleView.setFractionalTextSize(
                SubtitleView.DEFAULT_TEXT_SIZE_FRACTION * captionScale);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,onPlaybackSpeedClicked,void onPlaybackSpeedClicked(),"[431, 435]","{'A305': [(431, 435)]}",{'A305': 1.0},A305,,"    @Override
    protected void onPlaybackSpeedClicked() {
        playbackSpeedPopupMenu.show();
        isSomePopupMenuVisible = true;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,distanceFromCloseButton,int distanceFromCloseButton(MotionEvent),"[444, 455]","{'A305': [(444, 455)]}",{'A305': 1.0},A305,,"    private int distanceFromCloseButton(@NonNull final MotionEvent popupMotionEvent) {
        final int closeOverlayButtonX = closeOverlayBinding.closeButton.getLeft()
                + closeOverlayBinding.closeButton.getWidth() / 2;
        final int closeOverlayButtonY = closeOverlayBinding.closeButton.getTop()
                + closeOverlayBinding.closeButton.getHeight() / 2;

        final float fingerX = popupLayoutParams.x + popupMotionEvent.getX();
        final float fingerY = popupLayoutParams.y + popupMotionEvent.getY();

        return (int) Math.sqrt(Math.pow(closeOverlayButtonX - fingerX, 2)
                + Math.pow(closeOverlayButtonY - fingerY, 2));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,getClosingRadius,float getClosingRadius(),"[457, 461]","{'A305': [(457, 461)]}",{'A305': 1.0},A305,,"    private float getClosingRadius() {
        final int buttonRadius = closeOverlayBinding.closeButton.getWidth() / 2;
        // 20% wider than the button itself
        return buttonRadius * 1.2f;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,isInsideClosingRadius,boolean isInsideClosingRadius(MotionEvent),"[463, 465]","{'A305': [(463, 465)]}",{'A305': 1.0},A305,,"    public boolean isInsideClosingRadius(@NonNull final MotionEvent popupMotionEvent) {
        return distanceFromCloseButton(popupMotionEvent) <= getClosingRadius();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,retrievePopupLayoutParamsFromPrefs,WindowManager.LayoutParams retrievePopupLayoutParamsFromPrefs(),"[478, 507]","{'A305': [(478, 507)]}",{'A305': 1.0},A305,,"    @SuppressLint(""RtlHardcoded"")
    public WindowManager.LayoutParams retrievePopupLayoutParamsFromPrefs() {
        final SharedPreferences prefs = getPlayer().getPrefs();
        final Context context = getPlayer().getContext();

        final boolean popupRememberSizeAndPos = prefs.getBoolean(
                context.getString(R.string.popup_remember_size_pos_key), true);
        final float defaultSize = context.getResources().getDimension(R.dimen.popup_default_width);
        final float popupWidth = popupRememberSizeAndPos
                ? prefs.getFloat(context.getString(R.string.popup_saved_width_key), defaultSize)
                : defaultSize;
        final float popupHeight = getMinimumVideoHeight(popupWidth);

        final WindowManager.LayoutParams params = new WindowManager.LayoutParams(
                (int) popupWidth, (int) popupHeight,
                popupLayoutParamType(),
                IDLE_WINDOW_FLAGS,
                PixelFormat.TRANSLUCENT);
        params.gravity = Gravity.LEFT | Gravity.TOP;
        params.softInputMode = WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;

        final int centerX = (int) (screenWidth / 2f - popupWidth / 2f);
        final int centerY = (int) (screenHeight / 2f - popupHeight / 2f);
        params.x = popupRememberSizeAndPos
                ? prefs.getInt(context.getString(R.string.popup_saved_x_key), centerX) : centerX;
        params.y = popupRememberSizeAndPos
                ? prefs.getInt(context.getString(R.string.popup_saved_y_key), centerY) : centerY;

        return params;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,savePopupPositionAndSizeToPrefs,void savePopupPositionAndSizeToPrefs(),"[509, 521]","{'A305': [(509, 521)]}",{'A305': 1.0},A305,,"    public void savePopupPositionAndSizeToPrefs() {
        if (getPopupLayoutParams() != null) {
            final Context context = getPlayer().getContext();
            getPlayer().getPrefs().edit()
                    .putFloat(context.getString(R.string.popup_saved_width_key),
                            popupLayoutParams.width)
                    .putInt(context.getString(R.string.popup_saved_x_key),
                            popupLayoutParams.x)
                    .putInt(context.getString(R.string.popup_saved_y_key),
                            popupLayoutParams.y)
                    .apply();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,buildCloseOverlayLayoutParams,WindowManager.LayoutParams buildCloseOverlayLayoutParams(),"[523, 545]","{'A305': [(523, 545)]}",{'A305': 1.0},A305,,"    @SuppressLint(""RtlHardcoded"")
    public static WindowManager.LayoutParams buildCloseOverlayLayoutParams() {
        final int flags = WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE
                | WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM;

        final WindowManager.LayoutParams closeOverlayLayoutParams = new WindowManager.LayoutParams(
                ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.MATCH_PARENT,
                popupLayoutParamType(),
                flags,
                PixelFormat.TRANSLUCENT);

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
            // Setting maximum opacity allowed for touch events to other apps for Android 12 and
            // higher to prevent non interaction when using other apps with the popup player
            closeOverlayLayoutParams.alpha = MAXIMUM_OPACITY_ALLOWED_FOR_S_AND_HIGHER;
        }

        closeOverlayLayoutParams.gravity = Gravity.LEFT | Gravity.TOP;
        closeOverlayLayoutParams.softInputMode =
                WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE;
        return closeOverlayLayoutParams;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,popupLayoutParamType,int popupLayoutParamType(),"[547, 551]","{'A305': [(547, 551)]}",{'A305': 1.0},A305,,"    public static int popupLayoutParamType() {
        return Build.VERSION.SDK_INT < Build.VERSION_CODES.O
                ? WindowManager.LayoutParams.TYPE_PHONE
                : WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,popupHasParent,boolean popupHasParent(),"[560, 564]","{'A305': [(560, 564)]}",{'A305': 1.0},A305,,"    private boolean popupHasParent() {
        return binding != null
                && binding.getRoot().getLayoutParams() instanceof WindowManager.LayoutParams
                && binding.getRoot().getParent() != null;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,anyPopupViewIsNull,boolean anyPopupViewIsNull(),"[566, 569]","{'A305': [(566, 569)]}",{'A305': 1.0},A305,,"    private boolean anyPopupViewIsNull() {
        return popupLayoutParams == null || windowManager == null
                || binding.getRoot().getParent() == null;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,getCloseOverlayBinding,PlayerPopupCloseOverlayBinding getCloseOverlayBinding(),"[571, 573]","{'A305': [(571, 573)]}",{'A305': 1.0},A305,,"    public PlayerPopupCloseOverlayBinding getCloseOverlayBinding() {
        return closeOverlayBinding;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,getPopupLayoutParams,WindowManager.LayoutParams getPopupLayoutParams(),"[575, 577]","{'A305': [(575, 577)]}",{'A305': 1.0},A305,,"    public WindowManager.LayoutParams getPopupLayoutParams() {
        return popupLayoutParams;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,getWindowManager,WindowManager getWindowManager(),"[579, 581]","{'A305': [(579, 581)]}",{'A305': 1.0},A305,,"    public WindowManager getWindowManager() {
        return windowManager;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,getScreenHeight,int getScreenHeight(),"[583, 585]","{'A305': [(583, 585)]}",{'A305': 1.0},A305,,"    public int getScreenHeight() {
        return screenHeight;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/PopupPlayerUi.java,PopupPlayerUi,getScreenWidth,int getScreenWidth(),"[587, 589]","{'A305': [(587, 589)]}",{'A305': 1.0},A305,,"    public int getScreenWidth() {
        return screenWidth;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,directlyOpenFullscreenIfNeeded,void directlyOpenFullscreenIfNeeded(),"[120, 127]","{'A305': [(120, 127)]}",{'A305': 1.0},A305,,"    private void directlyOpenFullscreenIfNeeded() {
        if (PlayerHelper.isStartMainPlayerFullscreenEnabled(player.getService())
                && DeviceUtils.isTablet(player.getService())
                && PlayerHelper.globalScreenOrientationLocked(player.getService())) {
            player.getFragmentListener().ifPresent(
                    PlayerServiceEventListener::onScreenRotationButtonClicked);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,setupAfterIntent,void setupAfterIntent(),"[129, 146]","{'A305': [(129, 146)]}",{'A305': 1.0},A305,,"    @Override
    public void setupAfterIntent() {
        // needed for tablets, check the function for a better explanation
        directlyOpenFullscreenIfNeeded();

        super.setupAfterIntent();

        initVideoPlayer();
        // Android TV: without it focus will frame the whole player
        binding.playPauseButton.requestFocus();

        // Note: This is for automatically playing (when ""Resume playback"" is off), see #6179
        if (player.getPlayWhenReady()) {
            player.play();
        } else {
            player.pause();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,buildGestureListener,BasePlayerGestureListener buildGestureListener(),"[148, 151]","{'A305': [(148, 151)]}",{'A305': 1.0},A305,,"    @Override
    BasePlayerGestureListener buildGestureListener() {
        return new MainPlayerGestureListener(this);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,initListeners,void initListeners(),"[153, 194]","{'A305': [(153, 156), (167, 185), (194, 194)], 'A295': [(157, 166), (186, 193)]}","{'A305': 0.5714285714285714, 'A295': 0.42857142857142855}",A305,,"    @Override
    protected void initListeners() {
        super.initListeners();

        binding.screenRotationButton.setOnClickListener(makeOnClickListener(() -> {
            // Only if it's not a vertical video or vertical video but in landscape with locked
            // orientation a screen orientation can be changed automatically
            if (!isVerticalVideo || (isLandscape() && globalScreenOrientationLocked(context))) {
                player.getFragmentListener()
                        .ifPresent(PlayerServiceEventListener::onScreenRotationButtonClicked);
            } else {
                toggleFullscreen();
            }
        }));
        binding.queueButton.setOnClickListener(v -> onQueueClicked());
        binding.segmentsButton.setOnClickListener(v -> onSegmentsClicked());

        binding.addToPlaylistButton.setOnClickListener(v ->
                getParentActivity().map(FragmentActivity::getSupportFragmentManager)
                        .ifPresent(fragmentManager ->
                                PlaylistDialog.showForPlayQueue(player, fragmentManager)));

        settingsContentObserver = new ContentObserver(new Handler(Looper.getMainLooper())) {
            @Override
            public void onChange(final boolean selfChange) {
                setupScreenRotationButton();
            }
        };
        context.getContentResolver().registerContentObserver(
                Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION), false,
                settingsContentObserver);

        binding.getRoot().addOnLayoutChangeListener(this);

        binding.moreOptionsButton.setOnLongClickListener(v -> {
            player.getFragmentListener()
                    .ifPresent(PlayerServiceEventListener::onMoreOptionsLongClicked);
            hideControls(0, 0);
            hideSystemUIIfNeeded();
            return true;
        });
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onChange,void onChange(boolean),"[176, 179]","{'A305': [(176, 179)]}",{'A305': 1.0},A305,,"            @Override
            public void onChange(final boolean selfChange) {
                setupScreenRotationButton();
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,deinitListeners,void deinitListeners(),"[196, 207]","{'A305': [(196, 207)]}",{'A305': 1.0},A305,,"    @Override
    protected void deinitListeners() {
        super.deinitListeners();

        binding.queueButton.setOnClickListener(null);
        binding.segmentsButton.setOnClickListener(null);
        binding.addToPlaylistButton.setOnClickListener(null);

        context.getContentResolver().unregisterContentObserver(settingsContentObserver);

        binding.getRoot().removeOnLayoutChangeListener(this);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,initPlayback,void initPlayback(),"[209, 219]","{'A305': [(209, 219)]}",{'A305': 1.0},A305,,"    @Override
    public void initPlayback() {
        super.initPlayback();

        if (playQueueAdapter != null) {
            playQueueAdapter.dispose();
        }
        playQueueAdapter = new PlayQueueAdapter(context,
                Objects.requireNonNull(player.getPlayQueue()));
        segmentAdapter = new StreamSegmentAdapter(getStreamSegmentListener());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,removeViewFromParent,void removeViewFromParent(),"[221, 228]","{'A305': [(221, 228)]}",{'A305': 1.0},A305,,"    @Override
    public void removeViewFromParent() {
        // view was added to fragment
        final ViewParent parent = binding.getRoot().getParent();
        if (parent instanceof ViewGroup) {
            ((ViewGroup) parent).removeView(binding.getRoot());
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,destroy,void destroy(),"[230, 240]","{'A305': [(230, 240)]}",{'A305': 1.0},A305,,"    @Override
    public void destroy() {
        super.destroy();

        // Exit from fullscreen when user closes the player via notification
        if (isFullscreen) {
            toggleFullscreen();
        }

        removeViewFromParent();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,destroyPlayer,void destroyPlayer(),"[242, 250]","{'A305': [(242, 250)]}",{'A305': 1.0},A305,,"    @Override
    public void destroyPlayer() {
        super.destroyPlayer();

        if (playQueueAdapter != null) {
            playQueueAdapter.unsetSelectedListener();
            playQueueAdapter.dispose();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,smoothStopForImmediateReusing,void smoothStopForImmediateReusing(),"[252, 259]","{'A305': [(252, 259)]}",{'A305': 1.0},A305,,"    @Override
    public void smoothStopForImmediateReusing() {
        super.smoothStopForImmediateReusing();
        // Android TV will handle back button in case controls will be visible
        // (one more additional unneeded click while the player is hidden)
        hideControls(0, 0);
        closeItemsList();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,initVideoPlayer,void initVideoPlayer(),"[261, 265]","{'A305': [(261, 265)]}",{'A305': 1.0},A305,,"    private void initVideoPlayer() {
        // restore last resize mode
        setResizeMode(PlayerHelper.retrieveResizeModeFromPrefs(player));
        binding.getRoot().setLayoutParams(new FrameLayout.LayoutParams(MATCH_PARENT, MATCH_PARENT));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,setupElementsVisibility,void setupElementsVisibility(),"[267, 294]","{'A305': [(267, 294)]}",{'A305': 1.0},A305,,"    @Override
    protected void setupElementsVisibility() {
        super.setupElementsVisibility();

        closeItemsList();
        showHideKodiButton();
        binding.fullScreenButton.setVisibility(View.GONE);
        setupScreenRotationButton();
        binding.resizeTextView.setVisibility(View.VISIBLE);
        binding.getRoot().findViewById(R.id.metadataView).setVisibility(View.VISIBLE);
        binding.moreOptionsButton.setVisibility(View.VISIBLE);
        binding.topControls.setOrientation(LinearLayout.VERTICAL);
        binding.primaryControls.getLayoutParams().width = MATCH_PARENT;
        binding.secondaryControls.setVisibility(View.INVISIBLE);
        binding.moreOptionsButton.setImageDrawable(AppCompatResources.getDrawable(context,
                R.drawable.ic_expand_more));
        binding.share.setVisibility(View.VISIBLE);
        binding.openInBrowser.setVisibility(View.VISIBLE);
        binding.switchMute.setVisibility(View.VISIBLE);
        binding.playerCloseButton.setVisibility(isFullscreen ? View.GONE : View.VISIBLE);
        // Top controls have a large minHeight which is allows to drag the player
        // down in fullscreen mode (just larger area to make easy to locate by finger)
        binding.topControls.setClickable(true);
        binding.topControls.setFocusable(true);

        binding.titleTextView.setVisibility(isFullscreen ? View.VISIBLE : View.GONE);
        binding.channelTextView.setVisibility(isFullscreen ? View.VISIBLE : View.GONE);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,setupElementsSize,void setupElementsSize(Resources),"[296, 304]","{'A305': [(296, 304)]}",{'A305': 1.0},A305,,"    @Override
    protected void setupElementsSize(final Resources resources) {
        setupElementsSize(
                resources.getDimensionPixelSize(R.dimen.player_main_buttons_min_width),
                resources.getDimensionPixelSize(R.dimen.player_main_top_padding),
                resources.getDimensionPixelSize(R.dimen.player_main_controls_padding),
                resources.getDimensionPixelSize(R.dimen.player_main_buttons_padding)
        );
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onBroadcastReceived,void onBroadcastReceived(Intent),"[313, 340]","{'A305': [(313, 340)]}",{'A305': 1.0},A305,,"    @Override
    public void onBroadcastReceived(final Intent intent) {
        super.onBroadcastReceived(intent);
        if (Intent.ACTION_CONFIGURATION_CHANGED.equals(intent.getAction())) {
            // Close it because when changing orientation from portrait
            // (in fullscreen mode) the size of queue layout can be larger than the screen size
            closeItemsList();
        } else if (ACTION_PLAY_PAUSE.equals(intent.getAction())) {
            // Ensure that we have audio-only stream playing when a user
            // started to play from notification's play button from outside of the app
            if (!fragmentIsVisible) {
                onFragmentStopped();
            }
        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_STOPPED.equals(intent.getAction())) {
            fragmentIsVisible = false;
            onFragmentStopped();
        } else if (VideoDetailFragment.ACTION_VIDEO_FRAGMENT_RESUMED.equals(intent.getAction())) {
            // Restore video source when user returns to the fragment
            fragmentIsVisible = true;
            player.useVideoSource(true);

            // When a user returns from background, the system UI will always be shown even if
            // controls are invisible: hide it in that case
            if (!isControlsVisible()) {
                hideSystemUIIfNeeded();
            }
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onFragmentListenerSet,void onFragmentListenerSet(),"[349, 360]","{'A305': [(349, 360)]}",{'A305': 1.0},A305,,"    @Override
    public void onFragmentListenerSet() {
        super.onFragmentListenerSet();
        fragmentIsVisible = true;
        // Apply window insets because Android will not do it when orientation changes
        // from landscape to portrait
        if (!isFullscreen) {
            binding.playbackControlRoot.setPadding(0, 0, 0, 0);
        }
        binding.itemsListPanel.setPadding(0, 0, 0, 0);
        player.getFragmentListener().ifPresent(PlayerServiceEventListener::onViewCreated);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onFragmentStopped,void onFragmentStopped(),"[367, 384]","{'A305': [(367, 384)]}",{'A305': 1.0},A305,,"    private void onFragmentStopped() {
        if (player.isPlaying() || player.isLoading()) {
            switch (getMinimizeOnExitAction(context)) {
                case MINIMIZE_ON_EXIT_MODE_BACKGROUND:
                    player.useVideoSource(false);
                    break;
                case MINIMIZE_ON_EXIT_MODE_POPUP:
                    getParentActivity().ifPresent(activity -> {
                        player.setRecovery();
                        NavigationHelper.playOnPopupPlayer(activity, player.getPlayQueue(), true);
                    });
                    break;
                case MINIMIZE_ON_EXIT_MODE_NONE: default:
                    player.pause();
                    break;
            }
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onUpdateProgress,"void onUpdateProgress(int,int,int)","[393, 405]","{'A305': [(393, 405)]}",{'A305': 1.0},A305,,"    @Override
    public void onUpdateProgress(final int currentProgress,
                                 final int duration,
                                 final int bufferPercent) {
        super.onUpdateProgress(currentProgress, duration, bufferPercent);

        if (areSegmentsVisible) {
            segmentAdapter.selectSegmentAt(getNearestStreamSegmentPosition(currentProgress));
        }
        if (isQueueVisible) {
            updateQueueTime(currentProgress);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onPlaying,void onPlaying(),"[407, 411]","{'A305': [(407, 411)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlaying() {
        super.onPlaying();
        checkLandscape();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onCompleted,void onCompleted(),"[413, 419]","{'A305': [(413, 419)]}",{'A305': 1.0},A305,,"    @Override
    public void onCompleted() {
        super.onCompleted();
        if (isFullscreen) {
            toggleFullscreen();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,showOrHideButtons,void showOrHideButtons(),"[428, 446]","{'A305': [(428, 435), (437, 446)], 'A333': [(436, 436)]}","{'A305': 0.9473684210526315, 'A333': 0.05263157894736842}",A305,,"    @Override
    protected void showOrHideButtons() {
        super.showOrHideButtons();
        @Nullable final PlayQueue playQueue = player.getPlayQueue();
        if (playQueue == null) {
            return;
        }

        final boolean showQueue = !playQueue.getStreams().isEmpty();
        final boolean showSegment = !player.getCurrentStreamInfo()
                .map(StreamInfo::getStreamSegments)
                .map(List::isEmpty)
                .orElse(/*no stream info=*/true);

        binding.queueButton.setVisibility(showQueue ? View.VISIBLE : View.GONE);
        binding.queueButton.setAlpha(showQueue ? 1.0f : 0.0f);
        binding.segmentsButton.setVisibility(showSegment ? View.VISIBLE : View.GONE);
        binding.segmentsButton.setAlpha(showSegment ? 1.0f : 0.0f);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,showSystemUIPartially,void showSystemUIPartially(),"[448, 461]","{'A305': [(448, 461)]}",{'A305': 1.0},A305,,"    @Override
    public void showSystemUIPartially() {
        if (isFullscreen) {
            getParentActivity().map(Activity::getWindow).ifPresent(window -> {
                window.setStatusBarColor(Color.TRANSPARENT);
                window.setNavigationBarColor(Color.TRANSPARENT);
                final int visibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                        | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                        | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION;
                window.getDecorView().setSystemUiVisibility(visibility);
                window.clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
            });
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,hideSystemUIIfNeeded,void hideSystemUIIfNeeded(),"[463, 466]","{'A305': [(463, 466)]}",{'A305': 1.0},A305,,"    @Override
    public void hideSystemUIIfNeeded() {
        player.getFragmentListener().ifPresent(PlayerServiceEventListener::hideSystemUiIfNeeded);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,calculateMaxEndScreenThumbnailHeight,float calculateMaxEndScreenThumbnailHeight(Bitmap),"[490, 505]","{'A305': [(490, 505)]}",{'A305': 1.0},A305,,"    @Override
    protected float calculateMaxEndScreenThumbnailHeight(@NonNull final Bitmap bitmap) {
        final int screenHeight = context.getResources().getDisplayMetrics().heightPixels;

        if (DeviceUtils.isTv(context) && !isFullscreen()) {
            final int videoInfoHeight = DeviceUtils.dpToPx(DETAIL_ROOT_MINIMUM_HEIGHT, context)
                    + DeviceUtils.spToPx(DETAIL_TITLE_TEXT_SIZE_TV, context);
            return Math.min(bitmap.getHeight(), screenHeight - videoInfoHeight);
        } else if (DeviceUtils.isTablet(context) && isLandscape() && !isFullscreen()) {
            final int videoInfoHeight = DeviceUtils.dpToPx(DETAIL_ROOT_MINIMUM_HEIGHT, context)
                    + DeviceUtils.spToPx(DETAIL_TITLE_TEXT_SIZE_TABLET, context);
            return Math.min(bitmap.getHeight(), screenHeight - videoInfoHeight);
        } else { // fullscreen player: max height is the device height
            return Math.min(bitmap.getHeight(), screenHeight);
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,showHideKodiButton,void showHideKodiButton(),"[507, 513]","{'A305': [(507, 513)]}",{'A305': 1.0},A305,,"    private void showHideKodiButton() {
        // show kodi button if it supports the current service and it is enabled in settings
        @Nullable final PlayQueue playQueue = player.getPlayQueue();
        binding.playWithKodi.setVisibility(playQueue != null && playQueue.getItem() != null
                && KoreUtils.shouldShowPlayWithKodi(context, playQueue.getItem().getServiceId())
                ? View.VISIBLE : View.GONE);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,setupSubtitleView,void setupSubtitleView(float),"[522, 526]","{'A305': [(522, 523), (526, 526)], 'A304': [(524, 525)]}","{'A305': 0.6, 'A304': 0.4}",A305,,"    @Override
    protected void setupSubtitleView(final float captionScale) {
        binding.subtitleView.setFractionalTextSize(
                SubtitleView.DEFAULT_TEXT_SIZE_FRACTION * captionScale);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onLayoutChange,"void onLayoutChange(View,int,int,int,int,int,int,int,int)","[535, 559]","{'A305': [(535, 555), (558, 559)], 'A300': [(556, 557)]}","{'A305': 0.92, 'A300': 0.08}",A305,,"    @SuppressWarnings(""checkstyle:ParameterNumber"")
    @Override
    public void onLayoutChange(final View view, final int l, final int t, final int r, final int b,
                               final int ol, final int ot, final int or, final int ob) {
        if (l != ol || t != ot || r != or || b != ob) {
            // Use a smaller value to be consistent across screen orientations, and to make usage
            // easier. Multiply by 3/4 to ensure the user does not need to move the finger up to the
            // screen border, in order to reach the maximum volume/brightness.
            final int width = r - l;
            final int height = b - t;
            final int min = Math.min(width, height);
            final int maxGestureLength = (int) (min * 0.75);

            if (DEBUG) {
                Log.d(TAG, ""maxGestureLength = "" + maxGestureLength);
            }

            binding.volumeProgressBar.setMax(maxGestureLength);
            binding.brightnessProgressBar.setMax(maxGestureLength);

            setInitialGestureValues();
            binding.itemsListPanel.getLayoutParams().height =
                    height - binding.itemsListPanel.getTop();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,setInitialGestureValues,void setInitialGestureValues(),"[561, 568]","{'A305': [(561, 568)]}",{'A305': 1.0},A305,,"    private void setInitialGestureValues() {
        if (player.getAudioReactor() != null) {
            final float currentVolumeNormalized = (float) player.getAudioReactor().getVolume()
                    / player.getAudioReactor().getMaxVolume();
            binding.volumeProgressBar.setProgress(
                    (int) (binding.volumeProgressBar.getMax() * currentVolumeNormalized));
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onMetadataChanged,void onMetadataChanged(StreamInfo),"[577, 591]","{'A305': [(577, 591)]}",{'A305': 1.0},A305,,"    @Override
    public void onMetadataChanged(@NonNull final StreamInfo info) {
        super.onMetadataChanged(info);
        showHideKodiButton();
        if (areSegmentsVisible) {
            if (segmentAdapter.setItems(info)) {
                final int adapterPosition = getNearestStreamSegmentPosition(
                        player.getExoPlayer().getCurrentPosition());
                segmentAdapter.selectSegmentAt(adapterPosition);
                binding.itemsList.scrollToPosition(adapterPosition);
            } else {
                closeItemsList();
            }
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onPlayQueueEdited,void onPlayQueueEdited(),"[593, 597]","{'A305': [(593, 597)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlayQueueEdited() {
        super.onPlayQueueEdited();
        showOrHideButtons();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onQueueClicked,void onQueueClicked(),"[599, 622]","{'A305': [(599, 622)]}",{'A305': 1.0},A305,,"    private void onQueueClicked() {
        isQueueVisible = true;

        hideSystemUIIfNeeded();
        buildQueue();

        binding.itemsListHeaderTitle.setVisibility(View.GONE);
        binding.itemsListHeaderDuration.setVisibility(View.VISIBLE);
        binding.shuffleButton.setVisibility(View.VISIBLE);
        binding.repeatButton.setVisibility(View.VISIBLE);
        binding.addToPlaylistButton.setVisibility(View.VISIBLE);

        hideControls(0, 0);
        binding.itemsListPanel.requestFocus();
        animate(binding.itemsListPanel, true, DEFAULT_CONTROLS_DURATION,
                AnimationType.SLIDE_AND_ALPHA);

        @Nullable final PlayQueue playQueue = player.getPlayQueue();
        if (playQueue != null) {
            binding.itemsList.scrollToPosition(playQueue.getIndex());
        }

        updateQueueTime((int) player.getExoPlayer().getCurrentPosition());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,buildQueue,void buildQueue(),"[624, 638]","{'A305': [(624, 638)]}",{'A305': 1.0},A305,,"    private void buildQueue() {
        binding.itemsList.setAdapter(playQueueAdapter);
        binding.itemsList.setClickable(true);
        binding.itemsList.setLongClickable(true);

        binding.itemsList.clearOnScrollListeners();
        binding.itemsList.addOnScrollListener(getQueueScrollListener());

        itemTouchHelper = new ItemTouchHelper(getItemTouchCallback());
        itemTouchHelper.attachToRecyclerView(binding.itemsList);

        playQueueAdapter.setSelectedListener(getOnSelectedListener());

        binding.itemsListClose.setOnClickListener(view -> closeItemsList());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onSegmentsClicked,void onSegmentsClicked(),"[640, 661]","{'A305': [(640, 661)]}",{'A305': 1.0},A305,,"    private void onSegmentsClicked() {
        areSegmentsVisible = true;

        hideSystemUIIfNeeded();
        buildSegments();

        binding.itemsListHeaderTitle.setVisibility(View.VISIBLE);
        binding.itemsListHeaderDuration.setVisibility(View.GONE);
        binding.shuffleButton.setVisibility(View.GONE);
        binding.repeatButton.setVisibility(View.GONE);
        binding.addToPlaylistButton.setVisibility(View.GONE);

        hideControls(0, 0);
        binding.itemsListPanel.requestFocus();
        animate(binding.itemsListPanel, true, DEFAULT_CONTROLS_DURATION,
                AnimationType.SLIDE_AND_ALPHA);

        final int adapterPosition = getNearestStreamSegmentPosition(
                player.getExoPlayer().getCurrentPosition());
        segmentAdapter.selectSegmentAt(adapterPosition);
        binding.itemsList.scrollToPosition(adapterPosition);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,buildSegments,void buildSegments(),"[663, 679]","{'A305': [(663, 665), (667, 679)], 'A395': [(666, 666)]}","{'A305': 0.9411764705882353, 'A395': 0.058823529411764705}",A305,,"    private void buildSegments() {
        binding.itemsList.setAdapter(segmentAdapter);
        binding.itemsList.setClickable(true);
        binding.itemsList.setLongClickable(true);

        binding.itemsList.clearOnScrollListeners();
        if (itemTouchHelper != null) {
            itemTouchHelper.attachToRecyclerView(null);
        }

        player.getCurrentStreamInfo().ifPresent(segmentAdapter::setItems);

        binding.shuffleButton.setVisibility(View.GONE);
        binding.repeatButton.setVisibility(View.GONE);
        binding.addToPlaylistButton.setVisibility(View.GONE);
        binding.itemsListClose.setOnClickListener(view -> closeItemsList());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,closeItemsList,void closeItemsList(),"[681, 701]","{'A305': [(681, 701)]}",{'A305': 1.0},A305,,"    public void closeItemsList() {
        if (isQueueVisible || areSegmentsVisible) {
            isQueueVisible = false;
            areSegmentsVisible = false;

            if (itemTouchHelper != null) {
                itemTouchHelper.attachToRecyclerView(null);
            }

            animate(binding.itemsListPanel, false, DEFAULT_CONTROLS_DURATION,
                    AnimationType.SLIDE_AND_ALPHA, 0, () ->
                        // Even when queueLayout is GONE it receives touch events
                        // and ruins normal behavior of the app. This line fixes it
                        binding.itemsListPanel.setTranslationY(
                                -binding.itemsListPanel.getHeight() * 5.0f));

            // clear focus, otherwise a white rectangle remains on top of the player
            binding.itemsListClose.clearFocus();
            binding.playPauseButton.requestFocus();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getQueueScrollListener,OnScrollBelowItemsListener getQueueScrollListener(),"[703, 715]","{'A305': [(703, 715)]}",{'A305': 1.0},A305,,"    private OnScrollBelowItemsListener getQueueScrollListener() {
        return new OnScrollBelowItemsListener() {
            @Override
            public void onScrolledDown(final RecyclerView recyclerView) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                if (playQueue != null && !playQueue.isComplete()) {
                    playQueue.fetch();
                } else if (binding != null) {
                    binding.itemsList.clearOnScrollListeners();
                }
            }
        };
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onScrolledDown,void onScrolledDown(RecyclerView),"[705, 713]","{'A305': [(705, 713)]}",{'A305': 1.0},A305,,"            @Override
            public void onScrolledDown(final RecyclerView recyclerView) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                if (playQueue != null && !playQueue.isComplete()) {
                    playQueue.fetch();
                } else if (binding != null) {
                    binding.itemsList.clearOnScrollListeners();
                }
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getStreamSegmentListener,StreamSegmentAdapter.StreamSegmentListener getStreamSegmentListener(),"[717, 743]","{'A305': [(717, 717), (739, 739), (742, 743)], 'A395': [(718, 738), (740, 741)]}","{'A305': 0.14814814814814814, 'A395': 0.8518518518518519}",A395,,"    private StreamSegmentAdapter.StreamSegmentListener getStreamSegmentListener() {
        return new StreamSegmentAdapter.StreamSegmentListener() {
            @Override
            public void onItemClick(@NonNull final StreamSegmentItem item, final int seconds) {
                segmentAdapter.selectSegment(item);
                player.seekTo(seconds * 1000L);
                player.triggerProgressUpdate();
            }

            @Override
            public void onItemLongClick(@NonNull final StreamSegmentItem item, final int seconds) {
                @Nullable final MediaItemTag currentMetadata = player.getCurrentMetadata();
                if (currentMetadata == null
                        || currentMetadata.getServiceId() != YouTube.getServiceId()) {
                    return;
                }

                final PlayQueueItem currentItem = player.getCurrentItem();
                if (currentItem != null) {
                    String videoUrl = player.getVideoUrl();
                    videoUrl += (""&t="" + seconds);
                    ShareUtils.shareText(context, currentItem.getTitle(),
                            videoUrl, currentItem.getThumbnails());
                }
            }
        };
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onItemClick,"void onItemClick(StreamSegmentItem,int)","[719, 724]","{'A395': [(719, 724)]}",{'A395': 1.0},A395,,"            @Override
            public void onItemClick(@NonNull final StreamSegmentItem item, final int seconds) {
                segmentAdapter.selectSegment(item);
                player.seekTo(seconds * 1000L);
                player.triggerProgressUpdate();
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onItemLongClick,"void onItemLongClick(StreamSegmentItem,int)","[726, 741]","{'A305': [(739, 739)], 'A395': [(726, 738), (740, 741)]}","{'A305': 0.0625, 'A395': 0.9375}",A395,,"            @Override
            public void onItemLongClick(@NonNull final StreamSegmentItem item, final int seconds) {
                @Nullable final MediaItemTag currentMetadata = player.getCurrentMetadata();
                if (currentMetadata == null
                        || currentMetadata.getServiceId() != YouTube.getServiceId()) {
                    return;
                }

                final PlayQueueItem currentItem = player.getCurrentItem();
                if (currentItem != null) {
                    String videoUrl = player.getVideoUrl();
                    videoUrl += (""&t="" + seconds);
                    ShareUtils.shareText(context, currentItem.getTitle(),
                            videoUrl, currentItem.getThumbnails());
                }
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getNearestStreamSegmentPosition,int getNearestStreamSegmentPosition(long),"[745, 758]","{'A305': [(745, 746), (750, 758)], 'A295': [(748, 749)], 'A300': [(747, 747)]}","{'A305': 0.7857142857142857, 'A295': 0.14285714285714285, 'A300': 0.07142857142857142}",A305,,"    private int getNearestStreamSegmentPosition(final long playbackPosition) {
        int nearestPosition = 0;
        final List<StreamSegment> segments = player.getCurrentStreamInfo()
                .map(StreamInfo::getStreamSegments)
                .orElse(Collections.emptyList());

        for (int i = 0; i < segments.size(); i++) {
            if (segments.get(i).getStartTimeSeconds() * 1000L > playbackPosition) {
                break;
            }
            nearestPosition++;
        }
        return Math.max(0, nearestPosition - 1);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getItemTouchCallback,ItemTouchHelper.SimpleCallback getItemTouchCallback(),"[760, 778]","{'A305': [(760, 778)]}",{'A305': 1.0},A305,,"    private ItemTouchHelper.SimpleCallback getItemTouchCallback() {
        return new PlayQueueItemTouchCallback() {
            @Override
            public void onMove(final int sourceIndex, final int targetIndex) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                if (playQueue != null) {
                    playQueue.move(sourceIndex, targetIndex);
                }
            }

            @Override
            public void onSwiped(final int index) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                if (playQueue != null && index != -1) {
                    playQueue.remove(index);
                }
            }
        };
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onMove,"void onMove(int,int)","[762, 768]","{'A305': [(762, 768)]}",{'A305': 1.0},A305,,"            @Override
            public void onMove(final int sourceIndex, final int targetIndex) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                if (playQueue != null) {
                    playQueue.move(sourceIndex, targetIndex);
                }
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onSwiped,void onSwiped(int),"[770, 776]","{'A305': [(770, 776)]}",{'A305': 1.0},A305,,"            @Override
            public void onSwiped(final int index) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                if (playQueue != null && index != -1) {
                    playQueue.remove(index);
                }
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getOnSelectedListener,PlayQueueItemBuilder.OnSelectedListener getOnSelectedListener(),"[780, 804]","{'A305': [(780, 804)]}",{'A305': 1.0},A305,,"    private PlayQueueItemBuilder.OnSelectedListener getOnSelectedListener() {
        return new PlayQueueItemBuilder.OnSelectedListener() {
            @Override
            public void selected(final PlayQueueItem item, final View view) {
                player.selectQueueItem(item);
            }

            @Override
            public void held(final PlayQueueItem item, final View view) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                @Nullable final AppCompatActivity parentActivity = getParentActivity().orElse(null);
                if (playQueue != null && parentActivity != null && playQueue.indexOf(item) != -1) {
                    openPopupMenu(player.getPlayQueue(), item, view, true,
                            parentActivity.getSupportFragmentManager(), context);
                }
            }

            @Override
            public void onStartDrag(final PlayQueueItemHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
        };
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,selected,"void selected(PlayQueueItem,View)","[782, 785]","{'A305': [(782, 785)]}",{'A305': 1.0},A305,,"            @Override
            public void selected(final PlayQueueItem item, final View view) {
                player.selectQueueItem(item);
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,held,"void held(PlayQueueItem,View)","[787, 795]","{'A305': [(787, 795)]}",{'A305': 1.0},A305,,"            @Override
            public void held(final PlayQueueItem item, final View view) {
                @Nullable final PlayQueue playQueue = player.getPlayQueue();
                @Nullable final AppCompatActivity parentActivity = getParentActivity().orElse(null);
                if (playQueue != null && parentActivity != null && playQueue.indexOf(item) != -1) {
                    openPopupMenu(player.getPlayQueue(), item, view, true,
                            parentActivity.getSupportFragmentManager(), context);
                }
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onStartDrag,void onStartDrag(PlayQueueItemHolder),"[797, 802]","{'A305': [(797, 802)]}",{'A305': 1.0},A305,,"            @Override
            public void onStartDrag(final PlayQueueItemHolder viewHolder) {
                if (itemTouchHelper != null) {
                    itemTouchHelper.startDrag(viewHolder);
                }
            }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,updateQueueTime,void updateQueueTime(int),"[806, 835]","{'A305': [(806, 835)]}",{'A305': 1.0},A305,,"    private void updateQueueTime(final int currentTime) {
        @Nullable final PlayQueue playQueue = player.getPlayQueue();
        if (playQueue == null) {
            return;
        }

        final int currentStream = playQueue.getIndex();
        int before = 0;
        int after = 0;

        final List<PlayQueueItem> streams = playQueue.getStreams();
        final int nStreams = streams.size();

        for (int i = 0; i < nStreams; i++) {
            if (i < currentStream) {
                before += streams.get(i).getDuration();
            } else {
                after += streams.get(i).getDuration();
            }
        }

        before *= 1000;
        after *= 1000;

        binding.itemsListHeaderDuration.setText(
                String.format(""%s/%s"",
                        getTimeString(currentTime + before),
                        getTimeString(before + after)
                ));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,isAnyListViewOpen,boolean isAnyListViewOpen(),"[837, 840]","{'A305': [(837, 840)]}",{'A305': 1.0},A305,,"    @Override
    protected boolean isAnyListViewOpen() {
        return isQueueVisible || areSegmentsVisible;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,isFullscreen,boolean isFullscreen(),"[842, 845]","{'A305': [(842, 845)]}",{'A305': 1.0},A305,,"    @Override
    public boolean isFullscreen() {
        return isFullscreen;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,isVerticalVideo,boolean isVerticalVideo(),"[847, 849]","{'A305': [(847, 849)]}",{'A305': 1.0},A305,,"    public boolean isVerticalVideo() {
        return isVerticalVideo;
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onPlaybackSpeedClicked,void onPlaybackSpeedClicked(),"[859, 866]","{'A305': [(859, 860), (866, 866)], 'A295': [(861, 865)]}","{'A305': 0.375, 'A295': 0.625}",A295,,"    @Override
    protected void onPlaybackSpeedClicked() {
        getParentActivity().ifPresent(activity ->
                PlaybackParameterDialog.newInstance(player.getPlaybackSpeed(),
                                player.getPlaybackPitch(), player.getPlaybackSkipSilence(),
                                player::setPlaybackParameters)
                        .show(activity.getSupportFragmentManager(), null));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onKeyDown,boolean onKeyDown(int),"[868, 878]","{'A305': [(868, 878)]}",{'A305': 1.0},A305,,"    @Override
    public boolean onKeyDown(final int keyCode) {
        if (keyCode == KeyEvent.KEYCODE_SPACE && isFullscreen) {
            player.playPause();
            if (player.isPlaying()) {
                hideControls(0, 0);
            }
            return true;
        }
        return super.onKeyDown(keyCode);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,setupScreenRotationButton,void setupScreenRotationButton(),"[887, 894]","{'A305': [(887, 894)]}",{'A305': 1.0},A305,,"    private void setupScreenRotationButton() {
        binding.screenRotationButton.setVisibility(globalScreenOrientationLocked(context)
                || isVerticalVideo || DeviceUtils.isTablet(context)
                ? View.VISIBLE : View.GONE);
        binding.screenRotationButton.setImageDrawable(AppCompatResources.getDrawable(context,
                isFullscreen ? R.drawable.ic_fullscreen_exit
                        : R.drawable.ic_fullscreen));
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,onVideoSizeChanged,void onVideoSizeChanged(VideoSize),"[896, 912]","{'A305': [(896, 912)]}",{'A305': 1.0},A305,,"    @Override
    public void onVideoSizeChanged(@NonNull final VideoSize videoSize) {
        super.onVideoSizeChanged(videoSize);
        isVerticalVideo = videoSize.width < videoSize.height;

        if (globalScreenOrientationLocked(context)
                && isFullscreen
                && isLandscape() == isVerticalVideo
                && !DeviceUtils.isTv(context)
                && !DeviceUtils.isTablet(context)) {
            // set correct orientation
            player.getFragmentListener().ifPresent(
                    PlayerServiceEventListener::onScreenRotationButtonClicked);
        }

        setupScreenRotationButton();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,toggleFullscreen,void toggleFullscreen(),"[914, 941]","{'A305': [(914, 917), (920, 941)], 'A300': [(918, 919)]}","{'A305': 0.9285714285714286, 'A300': 0.07142857142857142}",A305,,"    public void toggleFullscreen() {
        if (DEBUG) {
            Log.d(TAG, ""toggleFullscreen() called"");
        }
        final PlayerServiceEventListener fragmentListener = player.getFragmentListener()
                .orElse(null);
        if (fragmentListener == null || player.exoPlayerIsNull()) {
            return;
        }

        isFullscreen = !isFullscreen;
        if (isFullscreen) {
            // Android needs tens milliseconds to send new insets but a user is able to see
            // how controls changes it's position from `0` to `nav bar height` padding.
            // So just hide the controls to hide this visual inconsistency
            hideControls(0, 0);
        } else {
            // Apply window insets because Android will not do it when orientation changes
            // from landscape to portrait (open vertical video to reproduce)
            binding.playbackControlRoot.setPadding(0, 0, 0, 0);
        }
        fragmentListener.onFullscreenStateChanged(isFullscreen);

        binding.titleTextView.setVisibility(isFullscreen ? View.VISIBLE : View.GONE);
        binding.channelTextView.setVisibility(isFullscreen ? View.VISIBLE : View.GONE);
        binding.playerCloseButton.setVisibility(isFullscreen ? View.GONE : View.VISIBLE);
        setupScreenRotationButton();
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,checkLandscape,void checkLandscape(),"[943, 956]","{'A305': [(943, 944), (948, 956)], 'A300': [(945, 947)]}","{'A305': 0.7857142857142857, 'A300': 0.21428571428571427}",A305,,"    public void checkLandscape() {
        // check if landscape is correct
        final boolean videoInLandscapeButNotInFullscreen = isLandscape()
                && !isFullscreen
                && !player.isAudioOnly();
        final boolean notPaused = player.getCurrentState() != STATE_COMPLETED
                && player.getCurrentState() != STATE_PAUSED;

        if (videoInLandscapeButNotInFullscreen
                && notPaused
                && !DeviceUtils.isTablet(context)) {
            toggleFullscreen();
        }
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getParentContext,Optional<Context> getParentContext(),"[965, 969]","{'A295': [(965, 969)]}",{'A295': 1.0},A295,,"    private Optional<Context> getParentContext() {
        return Optional.ofNullable(binding.getRoot().getParent())
                .filter(ViewGroup.class::isInstance)
                .map(parent -> ((ViewGroup) parent).getContext());
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,getParentActivity,Optional<AppCompatActivity> getParentActivity(),"[971, 975]","{'A305': [(971, 971), (975, 975)], 'A295': [(972, 974)]}","{'A305': 0.4, 'A295': 0.6}",A295,,"    public Optional<AppCompatActivity> getParentActivity() {
        return getParentContext()
                .filter(AppCompatActivity.class::isInstance)
                .map(AppCompatActivity.class::cast);
    }
"
org.schabi.newpipe.player.ui,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/ui/MainPlayerUi.java,MainPlayerUi,isLandscape,boolean isLandscape(),"[977, 981]","{'A305': [(977, 979), (981, 981)], 'A295': [(980, 980)]}","{'A305': 0.8, 'A295': 0.2}",A305,,"    public boolean isLandscape() {
        // DisplayMetrics from activity context knows about MultiWindow feature
        // while DisplayMetrics from app context doesn't
        return DeviceUtils.isLandscape(getParentContext().orElse(player.getService()));
    }
"
org.schabi.newpipe.player.event,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/event/PlayerEventListener.java,,onAudioTrackUpdate,void onAudioTrackUpdate(),"[14, 14]","{'A386': [(14, 14)]}",{'A386': 1.0},A386,,"    default void onAudioTrackUpdate() { }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/SessionConnectorActionProvider.java,SessionConnectorActionProvider,onCustomAction,"void onCustomAction(Player,String,Bundle)","[30, 38]","{'A305': [(30, 38)]}",{'A305': 1.0},A305,,"    @Override
    public void onCustomAction(@NonNull final Player player,
                               @NonNull final String action,
                               @Nullable final Bundle extras) {
        final Context actualContext = context.get();
        if (actualContext != null) {
            actualContext.sendBroadcast(new Intent(action));
        }
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/SessionConnectorActionProvider.java,SessionConnectorActionProvider,getCustomAction,PlaybackStateCompat.CustomAction getCustomAction(Player),"[40, 46]","{'A305': [(40, 46)]}",{'A305': 1.0},A305,,"    @Nullable
    @Override
    public PlaybackStateCompat.CustomAction getCustomAction(@NonNull final Player player) {
        return new PlaybackStateCompat.CustomAction.Builder(
                data.action(), data.name(), data.icon()
        ).build();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,getSupportedQueueNavigatorActions,long getSupportedQueueNavigatorActions(com.google.android.exoplayer2.Player),"[46, 50]","{'A310': [(46, 46), (49, 50)], 'A305': [(47, 48)]}","{'A310': 0.6, 'A305': 0.4}",A310,,"    @Override
    public long getSupportedQueueNavigatorActions(
            @Nullable final com.google.android.exoplayer2.Player exoPlayer) {
        return ACTION_SKIP_TO_NEXT | ACTION_SKIP_TO_PREVIOUS | ACTION_SKIP_TO_QUEUE_ITEM;
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,onTimelineChanged,void onTimelineChanged(com.google.android.exoplayer2.Player),"[52, 55]","{'A310': [(52, 52), (54, 55)], 'A305': [(53, 53)]}","{'A310': 0.75, 'A305': 0.25}",A310,,"    @Override
    public void onTimelineChanged(@NonNull final com.google.android.exoplayer2.Player exoPlayer) {
        publishFloatingQueueWindow();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,onCurrentMediaItemIndexChanged,void onCurrentMediaItemIndexChanged(com.google.android.exoplayer2.Player),"[57, 66]","{'A310': [(57, 57), (60, 60), (62, 62), (65, 66)], 'A305': [(58, 59), (61, 61), (63, 64)]}","{'A310': 0.5, 'A305': 0.5}",A310,,"    @Override
    public void onCurrentMediaItemIndexChanged(
            @NonNull final com.google.android.exoplayer2.Player exoPlayer) {
        if (activeQueueItemId == MediaSessionCompat.QueueItem.UNKNOWN_ID
                || exoPlayer.getCurrentTimeline().getWindowCount() > MAX_QUEUE_SIZE) {
            publishFloatingQueueWindow();
        } else if (!exoPlayer.getCurrentTimeline().isEmpty()) {
            activeQueueItemId = exoPlayer.getCurrentMediaItemIndex();
        }
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,getActiveQueueItemId,long getActiveQueueItemId(com.google.android.exoplayer2.Player),"[68, 72]","{'A310': [(68, 68), (72, 72)], 'A305': [(69, 71)]}","{'A310': 0.4, 'A305': 0.6}",A305,,"    @Override
    public long getActiveQueueItemId(
            @Nullable final com.google.android.exoplayer2.Player exoPlayer) {
        return Optional.ofNullable(player.getPlayQueue()).map(PlayQueue::getIndex).orElse(-1);
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,onSkipToPrevious,void onSkipToPrevious(com.google.android.exoplayer2.Player),"[74, 77]","{'A310': [(74, 74), (77, 77)], 'A305': [(75, 76)]}","{'A310': 0.5, 'A305': 0.5}",A310,,"    @Override
    public void onSkipToPrevious(@NonNull final com.google.android.exoplayer2.Player exoPlayer) {
        player.playPrevious();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,onSkipToQueueItem,"void onSkipToQueueItem(com.google.android.exoplayer2.Player,long)","[79, 85]","{'A310': [(79, 79), (85, 85)], 'A305': [(80, 84)]}","{'A310': 0.2857142857142857, 'A305': 0.7142857142857143}",A305,,"    @Override
    public void onSkipToQueueItem(@NonNull final com.google.android.exoplayer2.Player exoPlayer,
                                  final long id) {
        if (player.getPlayQueue() != null) {
            player.selectQueueItem(player.getPlayQueue().getItem((int) id));
        }
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,onSkipToNext,void onSkipToNext(com.google.android.exoplayer2.Player),"[87, 90]","{'A310': [(87, 87), (90, 90)], 'A305': [(88, 89)]}","{'A310': 0.5, 'A305': 0.5}",A310,,"    @Override
    public void onSkipToNext(@NonNull final com.google.android.exoplayer2.Player exoPlayer) {
        player.playNext();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,publishFloatingQueueWindow,void publishFloatingQueueWindow(),"[92, 114]","{'A310': [(92, 92), (98, 102), (106, 107), (109, 109), (111, 114)], 'A305': [(93, 96), (103, 104), (110, 110)], 'A369': [(97, 97)], 'A294': [(105, 105), (108, 108)]}","{'A310': 0.5652173913043478, 'A305': 0.30434782608695654, 'A369': 0.043478260869565216, 'A294': 0.08695652173913043}",A310,,"    private void publishFloatingQueueWindow() {
        final int windowCount = Optional.ofNullable(player.getPlayQueue())
                .map(PlayQueue::size)
                .orElse(0);
        if (windowCount == 0) {
            mediaSession.setQueue(Collections.emptyList());
            activeQueueItemId = MediaSessionCompat.QueueItem.UNKNOWN_ID;
            return;
        }

        // Yes this is almost a copypasta, got a problem with that? =\
        final int currentWindowIndex = player.getPlayQueue().getIndex();
        final int queueSize = Math.min(MAX_QUEUE_SIZE, windowCount);
        final int startIndex = Util.constrainValue(currentWindowIndex - ((queueSize - 1) / 2), 0,
                windowCount - queueSize);

        final List<MediaSessionCompat.QueueItem> queue = new ArrayList<>();
        for (int i = startIndex; i < startIndex + queueSize; i++) {
            queue.add(new MediaSessionCompat.QueueItem(getQueueMetadata(i), i));
        }
        mediaSession.setQueue(queue);
        activeQueueItemId = currentWindowIndex;
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,getQueueMetadata,MediaDescriptionCompat getQueueMetadata(int),"[116, 150]","{'A300': [(136, 136)], 'A305': [(116, 135), (137, 150)]}","{'A300': 0.02857142857142857, 'A305': 0.9714285714285714}",A305,,"    public MediaDescriptionCompat getQueueMetadata(final int index) {
        if (player.getPlayQueue() == null) {
            return null;
        }
        final PlayQueueItem item = player.getPlayQueue().getItem(index);
        if (item == null) {
            return null;
        }

        final MediaDescriptionCompat.Builder descBuilder = new MediaDescriptionCompat.Builder()
                .setMediaId(String.valueOf(index))
                .setTitle(item.getTitle())
                .setSubtitle(item.getUploader());

        // set additional metadata for A2DP/AVRCP (Audio/Video Bluetooth profiles)
        final Bundle additionalMetadata = new Bundle();
        additionalMetadata.putString(MediaMetadataCompat.METADATA_KEY_TITLE, item.getTitle());
        additionalMetadata.putString(MediaMetadataCompat.METADATA_KEY_ARTIST, item.getUploader());
        additionalMetadata
                .putLong(MediaMetadataCompat.METADATA_KEY_DURATION, item.getDuration() * 1000);
        additionalMetadata.putLong(MediaMetadataCompat.METADATA_KEY_TRACK_NUMBER, index + 1L);
        additionalMetadata
                .putLong(MediaMetadataCompat.METADATA_KEY_NUM_TRACKS, player.getPlayQueue().size());
        descBuilder.setExtras(additionalMetadata);

        try {
            descBuilder.setIconUri(Uri.parse(
                    ImageStrategy.choosePreferredImage(item.getThumbnails())));
        } catch (final Throwable e) {
            // no thumbnail available at all, or the user disabled image loading,
            // or the obtained url is not a valid `Uri`
        }

        return descBuilder.build();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/PlayQueueNavigator.java,PlayQueueNavigator,onCommand,"boolean onCommand(com.google.android.exoplayer2.Player,String,Bundle,ResultReceiver)","[152, 158]","{'A310': [(152, 152), (158, 158)], 'A305': [(153, 153)], 'A288': [(157, 157)], 'A383': [(154, 156)]}","{'A310': 0.2857142857142857, 'A305': 0.14285714285714285, 'A288': 0.14285714285714285, 'A383': 0.42857142857142855}",A383,,"    @Override
    public boolean onCommand(@NonNull final com.google.android.exoplayer2.Player exoPlayer,
                             @NonNull final String command,
                             @Nullable final Bundle extras,
                             @Nullable final ResultReceiver cb) {
        return false;
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,initPlayer,void initPlayer(),"[63, 88]","{'A305': [(63, 88)]}",{'A305': 1.0},A305,,"    @Override
    public void initPlayer() {
        super.initPlayer();
        destroyPlayer(); // release previously used resources

        mediaSession.setActive(true);

        sessionConnector.setQueueNavigator(new PlayQueueNavigator(mediaSession, player));
        sessionConnector.setPlayer(getForwardingPlayer());

        // It seems like events from the Media Control UI in the notification area don't go through
        // this function, so it's safe to just ignore all events in case we want to ignore the
        // hardware media buttons. Returning true stops all further event processing of the system.
        sessionConnector.setMediaButtonEventHandler((p, i) -> shouldIgnoreHardwareMediaButtons);

        // listen to changes to ignore_hardware_media_buttons_key
        updateShouldIgnoreHardwareMediaButtons(player.getPrefs());
        player.getPrefs().registerOnSharedPreferenceChangeListener(this);

        sessionConnector.setMetadataDeduplicationEnabled(true);
        sessionConnector.setMediaMetadataProvider(exoPlayer -> buildMediaMetadata());

        // force updating media session actions by resetting the previous ones
        prevNotificationActions = List.of();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,destroyPlayer,void destroyPlayer(),"[90, 99]","{'A305': [(90, 99)]}",{'A305': 1.0},A305,,"    @Override
    public void destroyPlayer() {
        super.destroyPlayer();
        player.getPrefs().unregisterOnSharedPreferenceChangeListener(this);
        sessionConnector.setMediaButtonEventHandler(null);
        sessionConnector.setPlayer(null);
        sessionConnector.setQueueNavigator(null);
        mediaSession.setActive(false);
        prevNotificationActions = List.of();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onThumbnailLoaded,void onThumbnailLoaded(Bitmap),"[101, 106]","{'A305': [(101, 106)]}",{'A305': 1.0},A305,,"    @Override
    public void onThumbnailLoaded(@Nullable final Bitmap bitmap) {
        super.onThumbnailLoaded(bitmap);
        // the thumbnail is now loaded: invalidate the metadata to trigger a metadata update
        sessionConnector.invalidateMediaSessionMetadata();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onSharedPreferenceChanged,"void onSharedPreferenceChanged(SharedPreferences,String)","[109, 115]","{'A305': [(109, 115)]}",{'A305': 1.0},A305,,"    @Override
    public void onSharedPreferenceChanged(final SharedPreferences sharedPreferences,
                                          final String key) {
        if (key == null || key.equals(ignoreHardwareMediaButtonsKey)) {
            updateShouldIgnoreHardwareMediaButtons(sharedPreferences);
        }
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,updateShouldIgnoreHardwareMediaButtons,void updateShouldIgnoreHardwareMediaButtons(SharedPreferences),"[117, 120]","{'A305': [(117, 120)]}",{'A305': 1.0},A305,,"    public void updateShouldIgnoreHardwareMediaButtons(final SharedPreferences sharedPreferences) {
        shouldIgnoreHardwareMediaButtons =
                sharedPreferences.getBoolean(ignoreHardwareMediaButtonsKey, false);
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,handleMediaButtonIntent,void handleMediaButtonIntent(Intent),"[123, 125]","{'A305': [(123, 125)]}",{'A305': 1.0},A305,,"    public void handleMediaButtonIntent(final Intent intent) {
        MediaButtonReceiver.handleIntent(mediaSession, intent);
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,getSessionToken,Optional<MediaSessionCompat.Token> getSessionToken(),"[127, 129]","{'A305': [(127, 129)]}",{'A305': 1.0},A305,,"    public Optional<MediaSessionCompat.Token> getSessionToken() {
        return Optional.ofNullable(mediaSession).map(MediaSessionCompat::getSessionToken);
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,getForwardingPlayer,ForwardingPlayer getForwardingPlayer(),"[132, 149]","{'A305': [(132, 149)]}",{'A305': 1.0},A305,,"    private ForwardingPlayer getForwardingPlayer() {
        // ForwardingPlayer means that all media session actions called on this player are
        // forwarded directly to the connected exoplayer, except for the overridden methods. So
        // override play and pause since our player adds more functionality to them over exoplayer.
        return new ForwardingPlayer(player.getExoPlayer()) {
            @Override
            public void play() {
                player.play();
                // hide the player controls even if the play command came from the media session
                player.UIs().get(VideoPlayerUi.class).ifPresent(ui -> ui.hideControls(0, 0));
            }

            @Override
            public void pause() {
                player.pause();
            }
        };
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,play,void play(),"[137, 142]","{'A305': [(137, 142)]}",{'A305': 1.0},A305,,"            @Override
            public void play() {
                player.play();
                // hide the player controls even if the play command came from the media session
                player.UIs().get(VideoPlayerUi.class).ifPresent(ui -> ui.hideControls(0, 0));
            }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,pause,void pause(),"[144, 147]","{'A305': [(144, 147)]}",{'A305': 1.0},A305,,"            @Override
            public void pause() {
                player.pause();
            }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,buildMediaMetadata,MediaMetadataCompat buildMediaMetadata(),"[151, 179]","{'A305': [(151, 179)]}",{'A305': 1.0},A305,,"    private MediaMetadataCompat buildMediaMetadata() {
        if (DEBUG) {
            Log.d(TAG, ""buildMediaMetadata called"");
        }

        // set title and artist
        final MediaMetadataCompat.Builder builder = new MediaMetadataCompat.Builder()
                .putString(MediaMetadataCompat.METADATA_KEY_TITLE, player.getVideoTitle())
                .putString(MediaMetadataCompat.METADATA_KEY_ARTIST, player.getUploaderName());

        // set duration (-1 for livestreams or if unknown, see the METADATA_KEY_DURATION docs)
        final long duration = player.getCurrentStreamInfo()
                .filter(info -> !StreamTypeUtil.isLiveStream(info.getStreamType()))
                .map(info -> info.getDuration() * 1000L)
                .orElse(-1L);
        builder.putLong(MediaMetadataCompat.METADATA_KEY_DURATION, duration);

        // set album art, unless the user asked not to, or there is no thumbnail available
        final boolean showThumbnail = player.getPrefs().getBoolean(
                context.getString(R.string.show_thumbnail_key), true);
        Optional.ofNullable(player.getThumbnail())
                .filter(bitmap -> showThumbnail)
                .ifPresent(bitmap -> {
                    builder.putBitmap(MediaMetadataCompat.METADATA_KEY_ALBUM_ART, bitmap);
                    builder.putBitmap(MediaMetadataCompat.METADATA_KEY_DISPLAY_ICON, bitmap);
                });

        return builder.build();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,updateMediaSessionActions,void updateMediaSessionActions(),"[182, 220]","{'A305': [(182, 220)]}",{'A305': 1.0},A305,,"    private void updateMediaSessionActions() {
        // On Android 13+ (or Android T or API 33+) the actions in the player notification can't be
        // controlled directly anymore, but are instead derived from custom media session actions.
        // However the system allows customizing only two of these actions, since the other three
        // are fixed to play-pause-buffering, previous, next.

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
            // Although setting media session actions on older android versions doesn't seem to
            // cause any trouble, it also doesn't seem to do anything, so we don't do anything to
            // save battery. Check out NotificationUtil.updateActions() to see what happens on
            // older android versions.
            return;
        }

        if (!mediaSession.isActive()) {
            // mediaSession will be inactive after destroyPlayer is called
            return;
        }

        // only use the fourth and fifth actions (the settings page also shows only the last 2 on
        // Android 13+)
        final List<NotificationActionData> newNotificationActions = IntStream.of(3, 4)
                .map(i -> player.getPrefs().getInt(
                        player.getContext().getString(NotificationConstants.SLOT_PREF_KEYS[i]),
                        NotificationConstants.SLOT_DEFAULTS[i]))
                .mapToObj(action -> NotificationActionData
                        .fromNotificationActionEnum(player, action))
                .filter(Objects::nonNull)
                .collect(Collectors.toList());

        // avoid costly notification actions update, if nothing changed from last time
        if (!newNotificationActions.equals(prevNotificationActions)) {
            prevNotificationActions = newNotificationActions;
            sessionConnector.setCustomActionProviders(
                    newNotificationActions.stream()
                            .map(data -> new SessionConnectorActionProvider(data, context))
                            .toArray(SessionConnectorActionProvider[]::new));
        }
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onBlocked,void onBlocked(),"[222, 226]","{'A305': [(222, 226)]}",{'A305': 1.0},A305,,"    @Override
    public void onBlocked() {
        super.onBlocked();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onPlaying,void onPlaying(),"[228, 232]","{'A305': [(228, 232)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlaying() {
        super.onPlaying();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onBuffering,void onBuffering(),"[234, 238]","{'A305': [(234, 238)]}",{'A305': 1.0},A305,,"    @Override
    public void onBuffering() {
        super.onBuffering();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onPaused,void onPaused(),"[240, 244]","{'A305': [(240, 244)]}",{'A305': 1.0},A305,,"    @Override
    public void onPaused() {
        super.onPaused();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onPausedSeek,void onPausedSeek(),"[246, 250]","{'A305': [(246, 250)]}",{'A305': 1.0},A305,,"    @Override
    public void onPausedSeek() {
        super.onPausedSeek();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onCompleted,void onCompleted(),"[252, 256]","{'A305': [(252, 256)]}",{'A305': 1.0},A305,,"    @Override
    public void onCompleted() {
        super.onCompleted();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onRepeatModeChanged,void onRepeatModeChanged(int),"[258, 262]","{'A305': [(258, 262)]}",{'A305': 1.0},A305,,"    @Override
    public void onRepeatModeChanged(@RepeatMode final int repeatMode) {
        super.onRepeatModeChanged(repeatMode);
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onShuffleModeEnabledChanged,void onShuffleModeEnabledChanged(boolean),"[264, 268]","{'A305': [(264, 268)]}",{'A305': 1.0},A305,,"    @Override
    public void onShuffleModeEnabledChanged(final boolean shuffleModeEnabled) {
        super.onShuffleModeEnabledChanged(shuffleModeEnabled);
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onBroadcastReceived,void onBroadcastReceived(Intent),"[270, 277]","{'A305': [(270, 277)]}",{'A305': 1.0},A305,,"    @Override
    public void onBroadcastReceived(final Intent intent) {
        super.onBroadcastReceived(intent);
        if (ACTION_RECREATE_NOTIFICATION.equals(intent.getAction())) {
            // the notification actions changed
            updateMediaSessionActions();
        }
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onMetadataChanged,void onMetadataChanged(StreamInfo),"[279, 283]","{'A305': [(279, 283)]}",{'A305': 1.0},A305,,"    @Override
    public void onMetadataChanged(@NonNull final StreamInfo info) {
        super.onMetadataChanged(info);
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.mediasession,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediasession/MediaSessionPlayerUi.java,MediaSessionPlayerUi,onPlayQueueEdited,void onPlayQueueEdited(),"[285, 289]","{'A305': [(285, 289)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlayQueueEdited() {
        super.onPlayQueueEdited();
        updateMediaSessionActions();
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHelper.java,SeekbarPreviewThumbnailHelper,getSeekbarPreviewThumbnailType,int getSeekbarPreviewThumbnailType(Context),"[54, 65]","{'A300': [(54, 65)]}",{'A300': 1.0},A300,,"    @SeekbarPreviewThumbnailType
    public static int getSeekbarPreviewThumbnailType(@NonNull final Context context) {
        final String type = PreferenceManager.getDefaultSharedPreferences(context).getString(
                context.getString(R.string.seekbar_preview_thumbnail_key), """");
        if (type.equals(context.getString(R.string.seekbar_preview_thumbnail_none))) {
            return NONE;
        } else if (type.equals(context.getString(R.string.seekbar_preview_thumbnail_low_quality))) {
            return LOW_QUALITY;
        } else {
            return HIGH_QUALITY; // default
        }
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHelper.java,SeekbarPreviewThumbnailHelper,tryResizeAndSetSeekbarPreviewThumbnail,"void tryResizeAndSetSeekbarPreviewThumbnail(Context,Bitmap,ImageView,IntSupplier)","[67, 101]","{'A300': [(67, 68), (70, 71), (73, 80), (89, 90), (92, 92), (95, 98), (100, 101)], 'A295': [(69, 69), (72, 72), (81, 81), (86, 86), (88, 88), (91, 91), (93, 94), (99, 99)], 'A305': [(82, 85), (87, 87)]}","{'A300': 0.6, 'A295': 0.2571428571428571, 'A305': 0.14285714285714285}",A300,,"    public static void tryResizeAndSetSeekbarPreviewThumbnail(
            @NonNull final Context context,
            @Nullable final Bitmap previewThumbnail,
            @NonNull final ImageView currentSeekbarPreviewThumbnail,
            @NonNull final IntSupplier baseViewWidthSupplier) {
        if (previewThumbnail == null) {
            currentSeekbarPreviewThumbnail.setVisibility(View.GONE);
            return;
        }

        currentSeekbarPreviewThumbnail.setVisibility(View.VISIBLE);

        // Resize original bitmap
        try {
            final int srcWidth = previewThumbnail.getWidth() > 0 ? previewThumbnail.getWidth() : 1;
            final int newWidth = MathUtils.clamp(
                    // Use 1/4 of the width for the preview
                    Math.round(baseViewWidthSupplier.getAsInt() / 4f),
                    // But have a min width of 10dp
                    DeviceUtils.dpToPx(10, context),
                    // And scaling more than that factor looks really pixelated -> max
                    Math.round(srcWidth * 2.5f));

            final float scaleFactor = (float) newWidth / srcWidth;
            final int newHeight = (int) (previewThumbnail.getHeight() * scaleFactor);

            currentSeekbarPreviewThumbnail.setImageBitmap(BitmapCompat
                    .createScaledBitmap(previewThumbnail, newWidth, newHeight, null, true));
        } catch (final Exception ex) {
            Log.e(TAG, ""Failed to resize and set seekbar preview thumbnail"", ex);
            currentSeekbarPreviewThumbnail.setVisibility(View.GONE);
        } finally {
            previewThumbnail.recycle();
        }
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,resetFrom,"void resetFrom(Context,List<Frameset>)","[43, 60]","{'A300': [(45, 60)], 'A295': [(43, 44)]}","{'A300': 0.8888888888888888, 'A295': 0.1111111111111111}",A300,,"    public void resetFrom(@NonNull final Context context, final List<Frameset> framesets) {
        final int seekbarPreviewType = getSeekbarPreviewThumbnailType(context);

        final UUID updateRequestIdentifier = UUID.randomUUID();
        this.currentUpdateRequestIdentifier = updateRequestIdentifier;

        final ExecutorService executorService = Executors.newSingleThreadExecutor();
        executorService.submit(() -> {
            try {
                resetFromAsync(seekbarPreviewType, framesets, updateRequestIdentifier);
            } catch (final Exception ex) {
                Log.e(TAG, ""Failed to execute async"", ex);
            }
        });
        // ensure that the executorService stops/destroys it's threads
        // after the task is finished
        executorService.shutdown();
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,resetFromAsync,"void resetFromAsync(int,List<Frameset>,UUID)","[62, 90]","{'A300': [(64, 64), (68, 90)], 'A295': [(62, 63), (65, 67)]}","{'A300': 0.8275862068965517, 'A295': 0.1724137931034483}",A300,,"    private void resetFromAsync(final int seekbarPreviewType, final List<Frameset> framesets,
                                final UUID updateRequestIdentifier) {
        Log.d(TAG, ""Clearing seekbarPreviewData"");
        synchronized (seekbarPreviewData) {
            seekbarPreviewData.clear();
        }

        if (seekbarPreviewType == SeekbarPreviewThumbnailType.NONE) {
            Log.d(TAG, ""Not processing seekbarPreviewData due to settings"");
            return;
        }

        final Frameset frameset = getFrameSetForType(framesets, seekbarPreviewType);
        if (frameset == null) {
            Log.d(TAG, ""No frameset was found to fill seekbarPreviewData"");
            return;
        }

        Log.d(TAG, ""Frameset quality info: ""
                + ""[width="" + frameset.getFrameWidth()
                + "", heigh="" + frameset.getFrameHeight() + ""]"");

        // Abort method execution if we are not the latest request
        if (!isRequestIdentifierCurrent(updateRequestIdentifier)) {
            return;
        }

        generateDataFrom(frameset, updateRequestIdentifier);
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,getFrameSetForType,"Frameset getFrameSetForType(List<Frameset>,int)","[92, 105]","{'A300': [(94, 105)], 'A295': [(92, 93)]}","{'A300': 0.8571428571428571, 'A295': 0.14285714285714285}",A300,,"    private Frameset getFrameSetForType(final List<Frameset> framesets,
                                        final int seekbarPreviewType) {
        if (seekbarPreviewType == SeekbarPreviewThumbnailType.HIGH_QUALITY) {
            Log.d(TAG, ""Strategy for seekbarPreviewData: high quality"");
            return framesets.stream()
                    .max(Comparator.comparingInt(fs -> fs.getFrameHeight() * fs.getFrameWidth()))
                    .orElse(null);
        } else {
            Log.d(TAG, ""Strategy for seekbarPreviewData: low quality"");
            return framesets.stream()
                    .min(Comparator.comparingInt(fs -> fs.getFrameHeight() * fs.getFrameWidth()))
                    .orElse(null);
        }
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,generateDataFrom,"void generateDataFrom(Frameset,UUID)","[107, 157]","{'A300': [(108, 113), (115, 122), (124, 126), (128, 134), (137, 144), (148, 154), (156, 157)], 'A295': [(107, 107), (114, 114), (123, 123), (127, 127), (145, 147), (155, 155)], 'A304': [(135, 136)]}","{'A300': 0.803921568627451, 'A295': 0.1568627450980392, 'A304': 0.0392156862745098}",A300,,"    private void generateDataFrom(final Frameset frameset, final UUID updateRequestIdentifier) {
        Log.d(TAG, ""Starting generation of seekbarPreviewData"");
        final Stopwatch sw = Log.isLoggable(TAG, Log.DEBUG) ? Stopwatch.createStarted() : null;

        int currentPosMs = 0;
        int pos = 1;

        final int urlFrameCount = frameset.getFramesPerPageX() * frameset.getFramesPerPageY();

        // Process each url in the frameset
        for (final String url : frameset.getUrls()) {
            // get the bitmap
            final Bitmap srcBitMap = getBitMapFrom(url);

            // The data is not added directly to ""seekbarPreviewData"" due to
            // concurrency and checks for ""updateRequestIdentifier""
            final var generatedDataForUrl = new SparseArrayCompat<Supplier<Bitmap>>(urlFrameCount);

            // The bitmap consists of several images, which we process here
            // foreach frame in the returned bitmap
            for (int i = 0; i < urlFrameCount; i++) {
                // Frames outside the video length are skipped
                if (pos > frameset.getTotalCount()) {
                    break;
                }

                // Get the bounds where the frame is found
                final int[] bounds = frameset.getFrameBoundsAt(currentPosMs);
                generatedDataForUrl.put(currentPosMs,
                                        createBitmapSupplier(srcBitMap, bounds, frameset));

                currentPosMs += frameset.getDurationPerFrame();
                pos++;
            }

            // Check if we are still the latest request
            // If not abort method execution
            if (isRequestIdentifierCurrent(updateRequestIdentifier)) {
                synchronized (seekbarPreviewData) {
                    seekbarPreviewData.putAll(generatedDataForUrl);
                }
            } else {
                Log.d(TAG, ""Aborted of generation of seekbarPreviewData"");
                break;
            }
        }

        if (sw != null) {
            Log.d(TAG, ""Generation of seekbarPreviewData took "" + sw.stop());
        }
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,createBitmapSupplier,"Supplier<Bitmap> createBitmapSupplier(Bitmap,int[],Frameset)","[159, 196]","{'A304': [(159, 196)]}",{'A304': 1.0},A304,,"    private Supplier<Bitmap> createBitmapSupplier(final Bitmap srcBitMap,
                                                  final int[] bounds,
                                                  final Frameset frameset) {
        return () -> {
            // It can happen, that the original bitmap could not be downloaded
            // (or it was recycled though that should not happen)
            // In such a case - we don't want a NullPointer/
            // ""cannot use a recycled source in createBitmap"" Exception -> simply return null
            if (srcBitMap == null || srcBitMap.isRecycled()) {
                return null;
            }

            // Under some rare circumstances the YouTube API returns slightly too small storyboards,
            // (or not the matching frame width/height)
            // This would lead to createBitmap cutting out a bitmap that is out of bounds,
            // so we need to adjust the bounds accordingly
            if (srcBitMap.getWidth() < bounds[1] + frameset.getFrameWidth()) {
                bounds[1] = srcBitMap.getWidth() - frameset.getFrameWidth();
            }

            if (srcBitMap.getHeight() < bounds[2] + frameset.getFrameHeight()) {
                bounds[2] = srcBitMap.getHeight() - frameset.getFrameHeight();
            }

            // Cut out the corresponding bitmap form the ""srcBitMap""
            final Bitmap cutOutBitmap = Bitmap.createBitmap(srcBitMap, bounds[1], bounds[2],
                    frameset.getFrameWidth(), frameset.getFrameHeight());

            // If the cut out bitmap is identical to its source,
            // we need to copy the bitmap to create a new instance.
            // createBitmap allows itself to return the original object that is was created with
            // this leads to recycled bitmaps being returned (if they are identical)
            // Reference: https://stackoverflow.com/a/23683075 + first comment
            // Fixes: https://github.com/TeamNewPipe/NewPipe/issues/11461
            return cutOutBitmap == srcBitMap
                    ? cutOutBitmap.copy(cutOutBitmap.getConfig(), true) : cutOutBitmap;
        };
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,getBitMapFrom,Bitmap getBitMapFrom(String),"[198, 224]","{'A300': [(199, 208), (210, 210), (212, 213), (216, 219), (222, 224)], 'A305': [(198, 198), (209, 209), (211, 211)], 'A295': [(214, 215), (220, 221)]}","{'A300': 0.7407407407407407, 'A305': 0.1111111111111111, 'A295': 0.14814814814814814}",A300,,"    @Nullable
    private Bitmap getBitMapFrom(final String url) {
        if (url == null) {
            Log.w(TAG, ""url is null; This should never happen"");
            return null;
        }

        final Stopwatch sw = Log.isLoggable(TAG, Log.DEBUG) ? Stopwatch.createStarted() : null;
        try {
            Log.d(TAG, ""Downloading bitmap for seekbarPreview from '"" + url + ""'"");

            // Gets the bitmap within the timeout of 15 seconds imposed by default by OkHttpClient
            // Ensure that your are not running on the main-Thread this will otherwise hang
            final Bitmap bitmap = PicassoHelper.loadSeekbarThumbnailPreview(url).get();

            if (sw != null) {
                Log.d(TAG, ""Download of bitmap for seekbarPreview from '"" + url + ""' took ""
                        + sw.stop());
            }

            return bitmap;
        } catch (final Exception ex) {
            Log.w(TAG, ""Failed to get bitmap for seekbarPreview from url='"" + url
                    + ""' in time"", ex);
            return null;
        }
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,isRequestIdentifierCurrent,boolean isRequestIdentifierCurrent(UUID),"[226, 228]","{'A300': [(226, 228)]}",{'A300': 1.0},A300,,"    private boolean isRequestIdentifierCurrent(final UUID requestIdentifier) {
        return this.currentUpdateRequestIdentifier.equals(requestIdentifier);
    }
"
org.schabi.newpipe.player.seekbarpreview,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/seekbarpreview/SeekbarPreviewThumbnailHolder.java,SeekbarPreviewThumbnailHolder,getBitmapAt,Optional<Bitmap> getBitmapAt(int),"[230, 245]","{'A300': [(230, 230), (242, 243), (245, 245)], 'A295': [(231, 241), (244, 244)]}","{'A300': 0.25, 'A295': 0.75}",A295,,"    public Optional<Bitmap> getBitmapAt(final int positionInMs) {
        // Get the frame supplier closest to the requested position
        Supplier<Bitmap> closestFrame = () -> null;
        synchronized (seekbarPreviewData) {
            int min = Integer.MAX_VALUE;
            for (int i = 0; i < seekbarPreviewData.size(); i++) {
                final int pos = Math.abs(seekbarPreviewData.keyAt(i) - positionInMs);
                if (pos < min) {
                    closestFrame = seekbarPreviewData.valueAt(i);
                    min = pos;
                }
            }
        }

        return Optional.ofNullable(closestFrame.get());
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/SurfaceHolderCallback.java,SurfaceHolderCallback,surfaceCreated,void surfaceCreated(SurfaceHolder),"[36, 39]","{'A320': [(36, 39)]}",{'A320': 1.0},A320,,"    @Override
    public void surfaceCreated(final SurfaceHolder holder) {
        player.setVideoSurface(holder.getSurface());
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/SurfaceHolderCallback.java,SurfaceHolderCallback,surfaceChanged,"void surfaceChanged(SurfaceHolder,int,int,int)","[41, 46]","{'A320': [(41, 46)]}",{'A320': 1.0},A320,,"    @Override
    public void surfaceChanged(final SurfaceHolder holder,
                               final int format,
                               final int width,
                               final int height) {
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/SurfaceHolderCallback.java,SurfaceHolderCallback,surfaceDestroyed,void surfaceDestroyed(SurfaceHolder),"[48, 54]","{'A320': [(48, 49), (52, 52), (54, 54)], 'A299': [(50, 51), (53, 53)]}","{'A320': 0.5714285714285714, 'A299': 0.42857142857142855}",A320,,"    @Override
    public void surfaceDestroyed(final SurfaceHolder holder) {
        if (placeholderSurface == null) {
            placeholderSurface = PlaceholderSurface.newInstanceV17(context, false);
        }
        player.setVideoSurface(placeholderSurface);
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/SurfaceHolderCallback.java,SurfaceHolderCallback,release,void release(),"[56, 61]","{'A320': [(56, 56), (60, 61)], 'A299': [(57, 59)]}","{'A320': 0.5, 'A299': 0.5}",A320,,"    public void release() {
        if (placeholderSurface != null) {
            placeholderSurface.release();
            placeholderSurface = null;
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,dispose,void dispose(),"[181, 191]","{'A390': [(181, 181), (191, 191)], 'A294': [(182, 184)], 'A310': [(185, 190)]}","{'A390': 0.18181818181818182, 'A294': 0.2727272727272727, 'A310': 0.5454545454545454}",A310,,"    public void dispose() {
        if (DEBUG) {
            Log.d(TAG, ""close() called."");
        }

        debouncedSignal.onComplete();
        debouncedLoader.dispose();

        playQueueReactor.cancel();
        loaderReactor.dispose();
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,getReactor,Subscriber<PlayQueueEvent> getReactor(),"[197, 219]","{'A390': [(199, 199), (202, 206), (209, 211), (214, 215), (218, 219)], 'A294': [(200, 200), (207, 207)], 'A383': [(198, 198), (212, 213), (216, 217)], 'A310': [(197, 197), (201, 201), (208, 208)]}","{'A390': 0.5652173913043478, 'A294': 0.08695652173913043, 'A383': 0.21739130434782608, 'A310': 0.13043478260869565}",A390,,"    private Subscriber<PlayQueueEvent> getReactor() {
        return new Subscriber<>() {
            @Override
            public void onSubscribe(@NonNull final Subscription d) {
                playQueueReactor.cancel();
                playQueueReactor = d;
                playQueueReactor.request(1);
            }

            @Override
            public void onNext(@NonNull final PlayQueueEvent playQueueMessage) {
                onPlayQueueChanged(playQueueMessage);
            }

            @Override
            public void onError(@NonNull final Throwable e) {
            }

            @Override
            public void onComplete() {
            }
        };
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,onSubscribe,void onSubscribe(Subscription),"[199, 204]","{'A390': [(199, 199), (202, 204)], 'A294': [(200, 200)], 'A310': [(201, 201)]}","{'A390': 0.6666666666666666, 'A294': 0.16666666666666666, 'A310': 0.16666666666666666}",A390,,"            @Override
            public void onSubscribe(@NonNull final Subscription d) {
                playQueueReactor.cancel();
                playQueueReactor = d;
                playQueueReactor.request(1);
            }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,onNext,void onNext(PlayQueueEvent),"[206, 209]","{'A390': [(206, 206), (209, 209)], 'A294': [(207, 207)], 'A310': [(208, 208)]}","{'A390': 0.5, 'A294': 0.25, 'A310': 0.25}",A390,,"            @Override
            public void onNext(@NonNull final PlayQueueEvent playQueueMessage) {
                onPlayQueueChanged(playQueueMessage);
            }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,onError,void onError(Throwable),"[211, 213]","{'A390': [(211, 211)], 'A383': [(212, 213)]}","{'A390': 0.3333333333333333, 'A383': 0.6666666666666666}",A383,,"            @Override
            public void onError(@NonNull final Throwable e) {
            }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,onComplete,void onComplete(),"[215, 217]","{'A390': [(215, 215)], 'A383': [(216, 217)]}","{'A390': 0.3333333333333333, 'A383': 0.6666666666666666}",A383,,"            @Override
            public void onComplete() {
            }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,onPlayQueueChanged,void onPlayQueueChanged(PlayQueueEvent),"[221, 280]","{'A390': [(228, 229), (232, 234), (238, 239), (241, 243), (245, 245), (254, 257), (275, 275), (277, 278), (280, 280)], 'A310': [(221, 227), (230, 231), (235, 237), (240, 240), (244, 244), (246, 253), (258, 259), (261, 262), (264, 268), (276, 276), (279, 279)], 'A305': [(260, 260), (263, 263), (269, 274)]}","{'A390': 0.31666666666666665, 'A310': 0.55, 'A305': 0.13333333333333333}",A310,,"    private void onPlayQueueChanged(final PlayQueueEvent event) {
        if (playQueue.isEmpty() && playQueue.isComplete()) {
            playbackListener.onPlaybackShutdown();
            return;
        }

        // Event specific action
        switch (event.type()) {
            case INIT:
            case ERROR:
                maybeBlock();
            case APPEND:
                populateSources();
                break;
            case SELECT:
                maybeRenewCurrentIndex();
                break;
            case REMOVE:
                final RemoveEvent removeEvent = (RemoveEvent) event;
                playlist.remove(removeEvent.getRemoveIndex());
                break;
            case MOVE:
                final MoveEvent moveEvent = (MoveEvent) event;
                playlist.move(moveEvent.getFromIndex(), moveEvent.getToIndex());
                break;
            case REORDER:
                // Need to move to ensure the playing index from play queue matches that of
                // the source timeline, and then window correction can take care of the rest
                final ReorderEvent reorderEvent = (ReorderEvent) event;
                playlist.move(reorderEvent.getFromSelectedIndex(),
                        reorderEvent.getToSelectedIndex());
                break;
            case RECOVERY:
            default:
                break;
        }

        // Loading and Syncing
        switch (event.type()) {
            case INIT: case REORDER: case ERROR: case SELECT:
                loadImmediate(); // low frequency, critical events
                break;
            case APPEND: case REMOVE: case MOVE: case RECOVERY:
            default:
                loadDebounced(); // high frequency or noncritical events
                break;
        }

        // update ui and notification
        switch (event.type()) {
            case APPEND: case REMOVE: case MOVE: case REORDER:
                playbackListener.onPlayQueueEdited();
        }

        if (!isPlayQueueReady()) {
            maybeBlock();
            playQueue.fetch();
        }
        playQueueReactor.request(1);
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,isPlayQueueReady,boolean isPlayQueueReady(),"[286, 289]","{'A390': [(286, 286), (289, 289)], 'A310': [(287, 288)]}","{'A390': 0.5, 'A310': 0.5}",A390,,"    private boolean isPlayQueueReady() {
        final boolean isWindowLoaded = playQueue.size() - playQueue.getIndex() > WINDOW_SIZE;
        return playQueue.isComplete() || isWindowLoaded;
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,isPlaybackReady,boolean isPlaybackReady(),"[291, 303]","{'A390': [(303, 303)], 'A294': [(292, 294), (299, 300)], 'A383': [(297, 298)], 'A310': [(291, 291), (295, 296), (301, 302)]}","{'A390': 0.07692307692307693, 'A294': 0.38461538461538464, 'A383': 0.15384615384615385, 'A310': 0.38461538461538464}",A294,,"    private boolean isPlaybackReady() {
        if (playlist.size() != playQueue.size()) {
            return false;
        }

        final ManagedMediaSource mediaSource = playlist.get(playQueue.getIndex());
        final PlayQueueItem playQueueItem = playQueue.getItem();
        if (mediaSource == null || playQueueItem == null) {
            return false;
        }

        return mediaSource.isStreamEqual(playQueueItem);
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeBlock,void maybeBlock(),"[305, 318]","{'A294': [(306, 308), (310, 312)], 'A310': [(305, 305), (309, 309), (313, 318)]}","{'A294': 0.42857142857142855, 'A310': 0.5714285714285714}",A310,,"    private void maybeBlock() {
        if (DEBUG) {
            Log.d(TAG, ""maybeBlock() called."");
        }

        if (isBlocked.get()) {
            return;
        }

        playbackListener.onPlaybackBlock();
        resetSources();

        isBlocked.set(true);
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeUnblock,boolean maybeUnblock(),"[320, 332]","{'A390': [(329, 329), (332, 332)], 'A294': [(321, 323)], 'A383': [(320, 320), (328, 328), (330, 331)], 'A310': [(324, 327)]}","{'A390': 0.15384615384615385, 'A294': 0.23076923076923078, 'A383': 0.3076923076923077, 'A310': 0.3076923076923077}",A383,,"    private boolean maybeUnblock() {
        if (DEBUG) {
            Log.d(TAG, ""maybeUnblock() called."");
        }

        if (isBlocked.get()) {
            isBlocked.set(false);
            playbackListener.onPlaybackUnblock(playlist.getParentMediaSource());
            return true;
        }

        return false;
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeSync,void maybeSync(boolean),"[338, 349]","{'A390': [(343, 343), (347, 347), (349, 349)], 'A294': [(339, 341), (344, 346)], 'A383': [(338, 338), (348, 348)], 'A310': [(342, 342)]}","{'A390': 0.25, 'A294': 0.5, 'A383': 0.16666666666666666, 'A310': 0.08333333333333333}",A294,,"    private void maybeSync(final boolean wasBlocked) {
        if (DEBUG) {
            Log.d(TAG, ""maybeSync() called."");
        }

        final PlayQueueItem currentItem = playQueue.getItem();
        if (isBlocked.get() || currentItem == null) {
            return;
        }

        playbackListener.onPlaybackSynchronize(currentItem, wasBlocked);
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeSynchronizePlayer,void maybeSynchronizePlayer(),"[351, 356]","{'A383': [(353, 354)], 'A310': [(351, 352), (355, 356)]}","{'A383': 0.3333333333333333, 'A310': 0.6666666666666666}",A310,,"    private synchronized void maybeSynchronizePlayer() {
        if (isPlayQueueReady() && isPlaybackReady()) {
            final boolean isBlockReleased = maybeUnblock();
            maybeSync(isBlockReleased);
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,getEdgeIntervalSignal,Observable<Long> getEdgeIntervalSignal(),"[362, 367]","{'A310': [(362, 362), (365, 367)], 'A297': [(363, 364)]}","{'A310': 0.6666666666666666, 'A297': 0.3333333333333333}",A310,,"    private Observable<Long> getEdgeIntervalSignal() {
        return Observable.interval(progressUpdateIntervalMillis,
                                   TimeUnit.MILLISECONDS, AndroidSchedulers.mainThread())
                .filter(ignored ->
                        playbackListener.isApproachingPlaybackEdge(playbackNearEndGapMillis));
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,getDebouncedLoader,Disposable getDebouncedLoader(),"[369, 375]","{'A310': [(369, 375)]}",{'A310': 1.0},A310,,"    private Disposable getDebouncedLoader() {
        return debouncedSignal.mergeWith(nearEndIntervalSignal)
                .debounce(loadDebounceMillis, TimeUnit.MILLISECONDS)
                .subscribeOn(Schedulers.single())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(timestamp -> loadImmediate());
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,loadDebounced,void loadDebounced(),"[377, 379]","{'A310': [(377, 379)]}",{'A310': 1.0},A310,,"    private void loadDebounced() {
        debouncedSignal.onNext(System.currentTimeMillis());
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,loadImmediate,void loadImmediate(),"[381, 397]","{'A294': [(382, 384), (386, 388)], 'A310': [(381, 381), (389, 397)], 'A369': [(385, 385)]}","{'A294': 0.35294117647058826, 'A310': 0.5882352941176471, 'A369': 0.058823529411764705}",A310,,"    private void loadImmediate() {
        if (DEBUG) {
            Log.d(TAG, ""MediaSource - loadImmediate() called"");
        }
        final ItemsToLoad itemsToLoad = getItemsToLoad(playQueue);
        if (itemsToLoad == null) {
            return;
        }

        // Evict the previous items being loaded to free up memory, before start loading new ones
        maybeClearLoaders();

        maybeLoadItem(itemsToLoad.center);
        for (final PlayQueueItem item : itemsToLoad.neighbors) {
            maybeLoadItem(item);
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeLoadItem,void maybeLoadItem(PlayQueueItem),"[399, 420]","{'A390': [(420, 420)], 'A294': [(400, 405), (408, 411)], 'A310': [(399, 399), (406, 407), (412, 419)]}","{'A390': 0.045454545454545456, 'A294': 0.45454545454545453, 'A310': 0.5}",A310,,"    private void maybeLoadItem(@NonNull final PlayQueueItem item) {
        if (DEBUG) {
            Log.d(TAG, ""maybeLoadItem() called."");
        }
        if (playQueue.indexOf(item) >= playlist.size()) {
            return;
        }

        if (!loadingItems.contains(item) && isCorrectionNeeded(item)) {
            if (DEBUG) {
                Log.d(TAG, ""MediaSource - Loading=["" + item.getTitle() + ""] ""
                        + ""with url=["" + item.getUrl() + ""]"");
            }

            loadingItems.add(item);
            final Disposable loader = getLoadedMediaSource(item)
                    .observeOn(AndroidSchedulers.mainThread())
                    /* No exception handling since getLoadedMediaSource guarantees nonnull return */
                    .subscribe(mediaSource -> onMediaSourceReceived(item, mediaSource));
            loaderReactor.add(loader);
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,getLoadedMediaSource,Single<ManagedMediaSource> getLoadedMediaSource(PlayQueueItem),"[422, 456]","{'A310': [(422, 422), (456, 456)], 'A295': [(423, 455)]}","{'A310': 0.05714285714285714, 'A295': 0.9428571428571428}",A295,,"    private Single<ManagedMediaSource> getLoadedMediaSource(@NonNull final PlayQueueItem stream) {
        return stream.getStream()
                .map(streamInfo -> Optional
                        .ofNullable(playbackListener.sourceOf(stream, streamInfo))
                        .<ManagedMediaSource>flatMap(source ->
                                MediaItemTag.from(source.getMediaItem())
                                        .map(tag -> {
                                            final int serviceId = streamInfo.getServiceId();
                                            final long expiration = System.currentTimeMillis()
                                                    + getCacheExpirationMillis(serviceId);
                                            return new LoadedMediaSource(source, tag, stream,
                                                    expiration);
                                        })
                        )
                        .orElseGet(() -> {
                            final String message = ""Unable to resolve source from stream info. ""
                                    + ""URL: "" + stream.getUrl()
                                    + "", audio count: "" + streamInfo.getAudioStreams().size()
                                    + "", video count: "" + streamInfo.getVideoOnlyStreams().size()
                                    + "", "" + streamInfo.getVideoStreams().size();
                            return FailedMediaSource.of(stream,
                                    new MediaSourceResolutionException(message));
                        })
                )
                .onErrorReturn(throwable -> {
                    if (throwable instanceof ExtractionException) {
                        return FailedMediaSource.of(stream, new StreamInfoLoadException(throwable));
                    }
                    // Non-source related error expected here (e.g. network),
                    // should allow retry shortly after the error.
                    final long allowRetryIn = TimeUnit.MILLISECONDS.convert(3,
                            TimeUnit.SECONDS);
                    return FailedMediaSource.of(stream, new Exception(throwable), allowRetryIn);
                });
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,onMediaSourceReceived,"void onMediaSourceReceived(PlayQueueItem,ManagedMediaSource)","[458, 477]","{'A294': [(460, 463), (470, 475)], 'A310': [(458, 459), (464, 469), (476, 477)]}","{'A294': 0.5, 'A310': 0.5}",A294,,"    private void onMediaSourceReceived(@NonNull final PlayQueueItem item,
                                       @NonNull final ManagedMediaSource mediaSource) {
        if (DEBUG) {
            Log.d(TAG, ""MediaSource - Loaded=["" + item.getTitle()
                    + ""] with url=["" + item.getUrl() + ""]"");
        }

        loadingItems.remove(item);

        final int itemIndex = playQueue.indexOf(item);
        // Only update the playlist timeline for items at the current index or after.
        if (isCorrectionNeeded(item)) {
            if (DEBUG) {
                Log.d(TAG, ""MediaSource - Updating index=["" + itemIndex + ""] with ""
                        + ""title=["" + item.getTitle() + ""] at url=["" + item.getUrl() + ""]"");
            }
            playlist.update(itemIndex, mediaSource, removeMediaSourceHandler,
                    this::maybeSynchronizePlayer);
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,isCorrectionNeeded,boolean isCorrectionNeeded(PlayQueueItem),"[494, 499]","{'A294': [(498, 498)], 'A310': [(494, 497), (499, 499)]}","{'A294': 0.16666666666666666, 'A310': 0.8333333333333334}",A310,,"    private boolean isCorrectionNeeded(@NonNull final PlayQueueItem item) {
        final int index = playQueue.indexOf(item);
        final ManagedMediaSource mediaSource = playlist.get(index);
        return mediaSource != null && mediaSource.shouldBeReplacedWith(item,
                index != playQueue.getIndex());
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeRenewCurrentIndex,void maybeRenewCurrentIndex(),"[512, 530]","{'A294': [(517, 518), (520, 520), (525, 528)], 'A288': [(529, 529)], 'A383': [(514, 514), (516, 516)], 'A310': [(512, 513), (515, 515), (519, 519), (521, 524), (530, 530)]}","{'A294': 0.3684210526315789, 'A288': 0.05263157894736842, 'A383': 0.10526315789473684, 'A310': 0.47368421052631576}",A310,,"    private void maybeRenewCurrentIndex() {
        final int currentIndex = playQueue.getIndex();
        final PlayQueueItem currentItem = playQueue.getItem();
        final ManagedMediaSource currentSource = playlist.get(currentIndex);
        if (currentItem == null || currentSource == null) {
            return;
        }

        if (!currentSource.shouldBeReplacedWith(currentItem, true)) {
            maybeSynchronizePlayer();
            return;
        }

        if (DEBUG) {
            Log.d(TAG, ""MediaSource - Reloading currently playing, ""
                    + ""index=["" + currentIndex + ""], item=["" + currentItem.getTitle() + ""]"");
        }
        playlist.invalidate(currentIndex, removeMediaSourceHandler, this::loadImmediate);
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,maybeClearLoaders,void maybeClearLoaders(),"[532, 541]","{'A294': [(533, 537)], 'A310': [(532, 532), (538, 541)]}","{'A294': 0.5, 'A310': 0.5}",A294,,"    private void maybeClearLoaders() {
        if (DEBUG) {
            Log.d(TAG, ""MediaSource - maybeClearLoaders() called."");
        }
        if (!loadingItems.contains(playQueue.getItem())
                && loaderReactor.size() > MAXIMUM_LOADER_SIZE) {
            loaderReactor.clear();
            loadingItems.clear();
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,resetSources,void resetSources(),"[547, 552]","{'A390': [(547, 547), (552, 552)], 'A294': [(548, 550)], 'A310': [(551, 551)]}","{'A390': 0.3333333333333333, 'A294': 0.5, 'A310': 0.16666666666666666}",A294,,"    private void resetSources() {
        if (DEBUG) {
            Log.d(TAG, ""resetSources() called."");
        }
        playlist = new ManagedMediaSourcePlaylist();
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,populateSources,void populateSources(),"[554, 561]","{'A390': [(554, 554), (560, 561)], 'A294': [(555, 557)], 'A310': [(558, 559)]}","{'A390': 0.375, 'A294': 0.375, 'A310': 0.25}",A390,,"    private void populateSources() {
        if (DEBUG) {
            Log.d(TAG, ""populateSources() called."");
        }
        while (playlist.size() < playQueue.size()) {
            playlist.expand();
        }
    }
"
org.schabi.newpipe.player.playback,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playback/MediaSourceManager.java,MediaSourceManager,getItemsToLoad,ItemsToLoad getItemsToLoad(PlayQueue),"[567, 594]","{'A294': [(572, 574), (583, 583), (588, 589)], 'A310': [(567, 567), (569, 571), (575, 578), (581, 582), (584, 587), (590, 594)], 'A369': [(568, 568), (579, 580)]}","{'A294': 0.21428571428571427, 'A310': 0.6785714285714286, 'A369': 0.10714285714285714}",A310,,"    @Nullable
    private static ItemsToLoad getItemsToLoad(@NonNull final PlayQueue playQueue) {
        // The current item has higher priority
        final int currentIndex = playQueue.getIndex();
        final PlayQueueItem currentItem = playQueue.getItem(currentIndex);
        if (currentItem == null) {
            return null;
        }

        // The rest are just for seamless playback
        // Although timeline is not updated prior to the current index, these sources are still
        // loaded into the cache for faster retrieval at a potentially later time.
        final int leftBound = Math.max(0, currentIndex - MediaSourceManager.WINDOW_SIZE);
        final int rightLimit = currentIndex + MediaSourceManager.WINDOW_SIZE + 1;
        final int rightBound = Math.min(playQueue.size(), rightLimit);
        final Set<PlayQueueItem> neighbors = new ArraySet<>(
                playQueue.getStreams().subList(leftBound, rightBound));

        // Do a round robin
        final int excess = rightLimit - playQueue.size();
        if (excess >= 0) {
            neighbors.addAll(playQueue.getStreams()
                    .subList(0, Math.min(playQueue.size(), excess)));
        }
        neighbors.remove(currentItem);

        return new ItemsToLoad(currentItem, neighbors);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerType.java,PlayerType,valueForIntent,int valueForIntent(),"[17, 19]","{'A305': [(17, 19)]}",{'A305': 1.0},A305,,"    public int valueForIntent() {
        return ordinal();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerType.java,PlayerType,retrieveFromIntent,PlayerType retrieveFromIntent(Intent),"[29, 31]","{'A305': [(29, 31)]}",{'A305': 1.0},A305,,"    public static PlayerType retrieveFromIntent(final Intent intent) {
        return values()[intent.getIntExtra(PLAYER_TYPE, MAIN.valueForIntent())];
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/CustomMediaCodecVideoRenderer.java,CustomMediaCodecVideoRenderer,codecNeedsSetOutputSurfaceWorkaround,boolean codecNeedsSetOutputSurfaceWorkaround(String),"[50, 53]","{'A333': [(50, 53)]}",{'A333': 1.0},A333,,"    @Override
    protected boolean codecNeedsSetOutputSurfaceWorkaround(final String name) {
        return true;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerSemitoneHelper.java,PlayerSemitoneHelper,formatPitchSemitones,String formatPitchSemitones(double),"[20, 22]","{'A300': [(20, 22)]}",{'A300': 1.0},A300,,"    public static String formatPitchSemitones(final double percent) {
        return formatPitchSemitones(percentToSemitones(percent));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerSemitoneHelper.java,PlayerSemitoneHelper,formatPitchSemitones,String formatPitchSemitones(int),"[24, 26]","{'A300': [(24, 26)]}",{'A300': 1.0},A300,,"    public static String formatPitchSemitones(final int semitones) {
        return semitones > 0 ? ""+"" + semitones : """" + semitones;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerSemitoneHelper.java,PlayerSemitoneHelper,semitonesToPercent,double semitonesToPercent(int),"[28, 30]","{'A300': [(28, 30)]}",{'A300': 1.0},A300,,"    public static double semitonesToPercent(final int semitones) {
        return Math.pow(2, ensureSemitonesInRange(semitones) / (double) SEMITONE_COUNT);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerSemitoneHelper.java,PlayerSemitoneHelper,percentToSemitones,int percentToSemitones(double),"[32, 35]","{'A300': [(32, 35)]}",{'A300': 1.0},A300,,"    public static int percentToSemitones(final double percent) {
        return ensureSemitonesInRange(
                (int) Math.round(SEMITONE_COUNT * Math.log(percent) / Math.log(2)));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerSemitoneHelper.java,PlayerSemitoneHelper,ensureSemitonesInRange,int ensureSemitonesInRange(int),"[37, 39]","{'A300': [(37, 37), (39, 39)], 'A295': [(38, 38)]}","{'A300': 0.6666666666666666, 'A295': 0.3333333333333333}",A300,,"    private static int ensureSemitonesInRange(final int semitones) {
        return MathUtils.clamp(semitones, -SEMITONE_COUNT, SEMITONE_COUNT);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LoadController.java,LoadController,onPrepared,void onPrepared(),"[10, 14]","{'A310': [(10, 11), (14, 14)], 'A288': [(13, 13)], 'A290': [(12, 12)]}","{'A310': 0.6, 'A288': 0.2, 'A290': 0.2}",A310,,"    @Override
    public void onPrepared() {
        preloadingEnabled = true;
        super.onPrepared();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LoadController.java,LoadController,onStopped,void onStopped(),"[16, 20]","{'A310': [(16, 17), (20, 20)], 'A288': [(19, 19)], 'A290': [(18, 18)]}","{'A310': 0.6, 'A288': 0.2, 'A290': 0.2}",A310,,"    @Override
    public void onStopped() {
        preloadingEnabled = true;
        super.onStopped();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LoadController.java,LoadController,onReleased,void onReleased(),"[22, 26]","{'A310': [(22, 23), (26, 26)], 'A288': [(25, 25)], 'A290': [(24, 24)]}","{'A310': 0.6, 'A288': 0.2, 'A290': 0.2}",A310,,"    @Override
    public void onReleased() {
        preloadingEnabled = true;
        super.onReleased();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LoadController.java,LoadController,shouldContinueLoading,"boolean shouldContinueLoading(long,long,float)","[28, 37]","{'A310': [(28, 28), (37, 37)], 'A288': [(29, 29), (35, 35)], 'A290': [(32, 34)], 'A305': [(30, 31), (36, 36)]}","{'A310': 0.2, 'A288': 0.2, 'A290': 0.3, 'A305': 0.3}",A290,,"    @Override
    public boolean shouldContinueLoading(final long playbackPositionUs,
                                         final long bufferedDurationUs,
                                         final float playbackSpeed) {
        if (!preloadingEnabled) {
            return false;
        }
        return super.shouldContinueLoading(
                playbackPositionUs, bufferedDurationUs, playbackSpeed);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LoadController.java,LoadController,disablePreloadingOfCurrentTrack,void disablePreloadingOfCurrentTrack(),"[39, 41]","{'A290': [(39, 41)]}",{'A290': 1.0},A290,,"    public void disablePreloadingOfCurrentTrack() {
        preloadingEnabled = false;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/CacheFactory.java,CacheFactory,createDataSource,DataSource createDataSource(),"[33, 45]","{'A310': [(34, 35), (40, 40), (45, 45)], 'A333': [(36, 36), (38, 39), (41, 41)], 'A305': [(37, 37), (44, 44)], 'A299': [(33, 33)], 'A300': [(42, 43)]}","{'A310': 0.3076923076923077, 'A333': 0.3076923076923077, 'A305': 0.15384615384615385, 'A299': 0.07692307692307693, 'A300': 0.15384615384615385}",A310,,"    @NonNull
    @Override
    public DataSource createDataSource() {
        final DefaultDataSource dataSource = new DefaultDataSource.Factory(context,
                upstreamDataSourceFactory)
                .setTransferListener(transferListener)
                .createDataSource();

        final FileDataSource fileSource = new FileDataSource();
        final CacheDataSink dataSink =
                new CacheDataSink(cache, PlayerHelper.getPreferredFileSize());
        return new CacheDataSource(cache, dataSource, fileSource, dataSink, CACHE_FLAGS, null);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,dispose,void dispose(),"[50, 54]","{'A310': [(50, 51), (54, 54)], 'A288': [(52, 53)]}","{'A310': 0.6, 'A288': 0.4}",A310,,"    public void dispose() {
        abandonAudioFocus();
        player.removeAnalyticsListener(this);
        notifyAudioSessionUpdate(false, player.getAudioSessionId());
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,requestAudioFocus,void requestAudioFocus(),"[60, 62]","{'A310': [(60, 60), (62, 62)], 'A299': [(61, 61)]}","{'A310': 0.6666666666666666, 'A299': 0.3333333333333333}",A310,,"    public void requestAudioFocus() {
        AudioManagerCompat.requestAudioFocus(audioManager, request);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,abandonAudioFocus,void abandonAudioFocus(),"[64, 66]","{'A310': [(64, 64), (66, 66)], 'A299': [(65, 65)]}","{'A310': 0.6666666666666666, 'A299': 0.3333333333333333}",A310,,"    public void abandonAudioFocus() {
        AudioManagerCompat.abandonAudioFocusRequest(audioManager, request);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,getVolume,int getVolume(),"[68, 70]","{'A310': [(68, 70)]}",{'A310': 1.0},A310,,"    public int getVolume() {
        return audioManager.getStreamVolume(STREAM_TYPE);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,setVolume,void setVolume(int),"[72, 74]","{'A310': [(72, 74)]}",{'A310': 1.0},A310,,"    public void setVolume(final int volume) {
        audioManager.setStreamVolume(STREAM_TYPE, volume, 0);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,getMaxVolume,int getMaxVolume(),"[76, 78]","{'A294': [(76, 76), (78, 78)], 'A299': [(77, 77)]}","{'A294': 0.6666666666666666, 'A299': 0.3333333333333333}",A294,,"    public int getMaxVolume() {
        return AudioManagerCompat.getStreamMaxVolume(audioManager, STREAM_TYPE);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAudioFocusChange,void onAudioFocusChange(int),"[84, 99]","{'A310': [(84, 84), (86, 99)], 'A294': [(85, 85)]}","{'A310': 0.9375, 'A294': 0.0625}",A310,,"    @Override
    public void onAudioFocusChange(final int focusChange) {
        Log.d(TAG, ""onAudioFocusChange() called with: focusChange = ["" + focusChange + ""]"");
        switch (focusChange) {
            case AudioManager.AUDIOFOCUS_GAIN:
                onAudioFocusGain();
                break;
            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK:
                onAudioFocusLossCanDuck();
                break;
            case AudioManager.AUDIOFOCUS_LOSS:
            case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT:
                onAudioFocusLoss();
                break;
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAudioFocusGain,void onAudioFocusGain(),"[101, 109]","{'A310': [(101, 103), (105, 106), (108, 109)], 'A288': [(107, 107)], 'A290': [(104, 104)]}","{'A310': 0.7777777777777778, 'A288': 0.1111111111111111, 'A290': 0.1111111111111111}",A310,,"    private void onAudioFocusGain() {
        Log.d(TAG, ""onAudioFocusGain() called"");
        player.setVolume(DUCK_AUDIO_TO);
        animateAudio(DUCK_AUDIO_TO, 1.0f);

        if (PlayerHelper.isResumeAfterAudioFocusGain(context)) {
            player.play();
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAudioFocusLoss,void onAudioFocusLoss(),"[111, 114]","{'A310': [(111, 112), (114, 114)], 'A288': [(113, 113)]}","{'A310': 0.75, 'A288': 0.25}",A310,,"    private void onAudioFocusLoss() {
        Log.d(TAG, ""onAudioFocusLoss() called"");
        player.pause();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAudioFocusLossCanDuck,void onAudioFocusLossCanDuck(),"[116, 120]","{'A310': [(116, 118), (120, 120)], 'A396': [(119, 119)]}","{'A310': 0.8, 'A396': 0.2}",A310,,"    private void onAudioFocusLossCanDuck() {
        Log.d(TAG, ""onAudioFocusLossCanDuck() called"");
        // Set the volume to 1/10 on ducking
        player.setVolume(DUCK_AUDIO_TO);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,animateAudio,"void animateAudio(float,float)","[122, 145]","{'A310': [(124, 124), (126, 127), (129, 132), (134, 137), (139, 145)], 'A294': [(123, 123), (128, 128), (133, 133), (138, 138)], 'A369': [(122, 122), (125, 125)]}","{'A310': 0.75, 'A294': 0.16666666666666666, 'A369': 0.08333333333333333}",A310,,"    private void animateAudio(final float from, final float to) {
        final ValueAnimator valueAnimator = new ValueAnimator();
        valueAnimator.setFloatValues(from, to);
        valueAnimator.setDuration(AudioReactor.DUCK_DURATION);
        valueAnimator.addListener(new AnimatorListenerAdapter() {
            @Override
            public void onAnimationStart(final Animator animation) {
                player.setVolume(from);
            }

            @Override
            public void onAnimationCancel(final Animator animation) {
                player.setVolume(to);
            }

            @Override
            public void onAnimationEnd(final Animator animation) {
                player.setVolume(to);
            }
        });
        valueAnimator.addUpdateListener(animation ->
                player.setVolume(((float) animation.getAnimatedValue())));
        valueAnimator.start();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAnimationStart,void onAnimationStart(Animator),"[127, 130]","{'A310': [(127, 127), (129, 130)], 'A294': [(128, 128)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"            @Override
            public void onAnimationStart(final Animator animation) {
                player.setVolume(from);
            }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAnimationCancel,void onAnimationCancel(Animator),"[132, 135]","{'A310': [(132, 132), (134, 135)], 'A294': [(133, 133)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"            @Override
            public void onAnimationCancel(final Animator animation) {
                player.setVolume(to);
            }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAnimationEnd,void onAnimationEnd(Animator),"[137, 140]","{'A310': [(137, 137), (139, 140)], 'A294': [(138, 138)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"            @Override
            public void onAnimationEnd(final Animator animation) {
                player.setVolume(to);
            }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,onAudioSessionIdChanged,"void onAudioSessionIdChanged(EventTime,int)","[151, 155]","{'A310': [(151, 151)], 'A299': [(152, 153)], 'A288': [(154, 155)]}","{'A310': 0.2, 'A299': 0.4, 'A288': 0.4}",A299,,"    @Override
    public void onAudioSessionIdChanged(@NonNull final EventTime eventTime,
                                        final int audioSessionId) {
        notifyAudioSessionUpdate(true, audioSessionId);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/AudioReactor.java,AudioReactor,notifyAudioSessionUpdate,"void notifyAudioSessionUpdate(boolean,int)","[156, 166]","{'A310': [(164, 166)], 'A294': [(158, 159)], 'A288': [(156, 156), (160, 163)], 'A305': [(157, 157)]}","{'A310': 0.2727272727272727, 'A294': 0.18181818181818182, 'A288': 0.45454545454545453, 'A305': 0.09090909090909091}",A288,,"    private void notifyAudioSessionUpdate(final boolean active, final int audioSessionId) {
        if (!PlayerHelper.isUsingDSP()) {
            return;
        }
        final Intent intent = new Intent(active
                ? AudioEffect.ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION
                : AudioEffect.ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION);
        intent.putExtra(AudioEffect.EXTRA_AUDIO_SESSION, audioSessionId);
        intent.putExtra(AudioEffect.EXTRA_PACKAGE_NAME, context.getPackageName());
        context.sendBroadcast(intent);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/CustomRenderersFactory.java,CustomRenderersFactory,buildVideoRenderers,"void buildVideoRenderers(Context,int,MediaCodecSelector,boolean,Handler,VideoRendererEventListener,long,ArrayList<Renderer>)","[29, 42]","{'A333': [(29, 42)]}",{'A333': 1.0},A333,,"    @SuppressWarnings(""checkstyle:ParameterNumber"")
    @Override
    protected void buildVideoRenderers(final Context context,
                                       @ExtensionRendererMode final int extensionRendererMode,
                                       final MediaCodecSelector mediaCodecSelector,
                                       final boolean enableDecoderFallback,
                                       final Handler eventHandler,
                                       final VideoRendererEventListener eventListener,
                                       final long allowedVideoJoiningTimeMs,
                                       final ArrayList<Renderer> out) {
        out.add(new CustomMediaCodecVideoRenderer(context, getCodecAdapterFactory(),
                mediaCodecSelector, allowedVideoJoiningTimeMs, enableDecoderFallback, eventHandler,
                eventListener, MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getTimeString,String getTimeString(int),"[96, 110]","{'A310': [(102, 102), (110, 110)], 'A294': [(97, 101), (103, 103), (105, 106)], 'A333': [(96, 96)], 'A299': [(104, 104), (107, 109)]}","{'A310': 0.13333333333333333, 'A294': 0.5333333333333333, 'A333': 0.06666666666666667, 'A299': 0.26666666666666666}",A294,,"    @NonNull
    public static String getTimeString(final int milliSeconds) {
        final int seconds = (milliSeconds % 60000) / 1000;
        final int minutes = (milliSeconds % 3600000) / 60000;
        final int hours = (milliSeconds % 86400000) / 3600000;
        final int days = (milliSeconds % (86400000 * 7)) / 86400000;

        STRING_BUILDER.setLength(0);
        return (days > 0
                ? STRING_FORMATTER.format(""%d:%02d:%02d:%02d"", days, hours, minutes, seconds)
                : hours > 0
                ? STRING_FORMATTER.format(""%d:%02d:%02d"", hours, minutes, seconds)
                : STRING_FORMATTER.format(""%02d:%02d"", minutes, seconds)
        ).toString();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,formatSpeed,String formatSpeed(double),"[112, 115]","{'A310': [(115, 115)], 'A294': [(113, 114)], 'A333': [(112, 112)]}","{'A310': 0.25, 'A294': 0.5, 'A333': 0.25}",A294,,"    @NonNull
    public static String formatSpeed(final double speed) {
        return SPEED_FORMATTER.format(speed);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,formatPitch,String formatPitch(double),"[117, 120]","{'A310': [(120, 120)], 'A294': [(118, 119)], 'A333': [(117, 117)]}","{'A310': 0.25, 'A294': 0.5, 'A333': 0.25}",A294,,"    @NonNull
    public static String formatPitch(final double pitch) {
        return PITCH_FORMATTER.format(pitch);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,subtitleMimeTypesOf,String subtitleMimeTypesOf(MediaFormat),"[122, 132]","{'A310': [(124, 124), (131, 132)], 'A294': [(125, 130)], 'A333': [(122, 123)]}","{'A310': 0.2727272727272727, 'A294': 0.5454545454545454, 'A333': 0.18181818181818182}",A294,,"    @NonNull
    public static String subtitleMimeTypesOf(@NonNull final MediaFormat format) {
        switch (format) {
            case VTT:
                return MimeTypes.TEXT_VTT;
            case TTML:
                return MimeTypes.APPLICATION_TTML;
            default:
                throw new IllegalArgumentException(""Unrecognized mime type: "" + format.name());
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,captionLanguageOf,"String captionLanguageOf(Context,SubtitlesStream)","[134, 140]","{'A310': [(134, 135), (140, 140)], 'A294': [(138, 139)], 'A289': [(136, 136)], 'A328': [(137, 137)]}","{'A310': 0.42857142857142855, 'A294': 0.2857142857142857, 'A289': 0.14285714285714285, 'A328': 0.14285714285714285}",A310,,"    @NonNull
    public static String captionLanguageOf(@NonNull final Context context,
                                           @NonNull final SubtitlesStream subtitles) {
        final String displayName = subtitles.getDisplayLanguageName();
        return displayName + (subtitles.isAutoGenerated()
                ? "" ("" + context.getString(R.string.caption_auto_generated) + "")"" : """");
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,captionLanguageStemOf,String captionLanguageStemOf(String),"[142, 155]","{'A383': [(142, 155)]}",{'A383': 1.0},A383,,"    @NonNull
    public static String captionLanguageStemOf(@NonNull final String language) {
        if (!language.contains(""("") || !language.contains("")"")) {
            return language;
        }

        if (language.startsWith(""("")) {
            // language text is right-to-left
            final String[] parts = language.split(""\\)"");
            return parts[parts.length - 1].trim();
        }

        return language.split(""\\("")[0].trim();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,resizeTypeOf,"String resizeTypeOf(Context,int)","[157, 172]","{'A310': [(157, 158), (160, 160), (171, 172)], 'A305': [(159, 159), (161, 161), (163, 163), (165, 165), (167, 168)], 'A294': [(162, 162), (164, 164), (166, 166), (169, 170)]}","{'A310': 0.3125, 'A305': 0.375, 'A294': 0.3125}",A305,,"    @NonNull
    public static String resizeTypeOf(@NonNull final Context context,
                                      @ResizeMode final int resizeMode) {
        switch (resizeMode) {
            case AspectRatioFrameLayout.RESIZE_MODE_FIT:
                return context.getResources().getString(R.string.resize_fit);
            case AspectRatioFrameLayout.RESIZE_MODE_FILL:
                return context.getResources().getString(R.string.resize_fill);
            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:
                return context.getResources().getString(R.string.resize_zoom);
            case AspectRatioFrameLayout.RESIZE_MODE_FIXED_HEIGHT:
            case AspectRatioFrameLayout.RESIZE_MODE_FIXED_WIDTH:
            default:
                throw new IllegalArgumentException(""Unrecognized resize mode: "" + resizeMode);
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,autoQueueOf,"PlayQueue autoQueueOf(StreamInfo,List<PlayQueueItem>)","[192, 220]","{'A310': [(192, 194), (196, 199), (204, 204), (212, 215), (217, 217), (220, 220)], 'A294': [(195, 195), (201, 203), (206, 211), (216, 216), (218, 219)], 'A333': [(205, 205)], 'A397': [(200, 200)]}","{'A310': 0.4827586206896552, 'A294': 0.4482758620689655, 'A333': 0.034482758620689655, 'A397': 0.034482758620689655}",A310,,"    @Nullable
    public static PlayQueue autoQueueOf(@NonNull final StreamInfo info,
                                        @NonNull final List<PlayQueueItem> existingItems) {
        final Set<String> urls = new HashSet<>(existingItems.size());
        for (final PlayQueueItem item : existingItems) {
            urls.add(item.getUrl());
        }

        final List<InfoItem> relatedItems = info.getRelatedItems();
        if (Utils.isNullOrEmpty(relatedItems)) {
            return null;
        }

        if (relatedItems.get(0) instanceof StreamInfoItem
                && !urls.contains(relatedItems.get(0).getUrl())) {
            return getAutoQueuedSinglePlayQueue((StreamInfoItem) relatedItems.get(0));
        }

        final List<StreamInfoItem> autoQueueItems = new ArrayList<>();
        for (final InfoItem item : relatedItems) {
            if (item instanceof StreamInfoItem && !urls.contains(item.getUrl())) {
                autoQueueItems.add((StreamInfoItem) item);
            }
        }

        Collections.shuffle(autoQueueItems);
        return autoQueueItems.isEmpty()
                ? null : getAutoQueuedSinglePlayQueue(autoQueueItems.get(0));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isResumeAfterAudioFocusGain,boolean isResumeAfterAudioFocusGain(Context),"[226, 229]","{'A310': [(226, 226), (229, 229)], 'A305': [(227, 228)]}","{'A310': 0.5, 'A305': 0.5}",A310,,"    public static boolean isResumeAfterAudioFocusGain(@NonNull final Context context) {
        return getPreferences(context)
                .getBoolean(context.getString(R.string.resume_on_audio_focus_gain_key), false);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getActionForRightGestureSide,String getActionForRightGestureSide(Context),"[231, 235]","{'A310': [(235, 235)], 'A305': [(232, 232)], 'A315': [(231, 231), (233, 234)]}","{'A310': 0.2, 'A305': 0.2, 'A315': 0.6}",A315,,"    public static String getActionForRightGestureSide(@NonNull final Context context) {
        return getPreferences(context)
                .getString(context.getString(R.string.right_gesture_control_key),
                        context.getString(R.string.default_right_gesture_control_value));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getActionForLeftGestureSide,String getActionForLeftGestureSide(Context),"[237, 241]","{'A305': [(238, 238), (241, 241)], 'A315': [(237, 237), (239, 240)]}","{'A305': 0.4, 'A315': 0.6}",A315,,"    public static String getActionForLeftGestureSide(@NonNull final Context context) {
        return getPreferences(context)
                .getString(context.getString(R.string.left_gesture_control_key),
                        context.getString(R.string.default_left_gesture_control_value));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isStartMainPlayerFullscreenEnabled,boolean isStartMainPlayerFullscreenEnabled(Context),"[243, 246]","{'A305': [(243, 246)]}",{'A305': 1.0},A305,,"    public static boolean isStartMainPlayerFullscreenEnabled(@NonNull final Context context) {
        return getPreferences(context)
                .getBoolean(context.getString(R.string.start_main_player_fullscreen_key), false);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isAutoQueueEnabled,boolean isAutoQueueEnabled(Context),"[248, 251]","{'A310': [(248, 248), (251, 251)], 'A305': [(249, 250)]}","{'A310': 0.5, 'A305': 0.5}",A310,,"    public static boolean isAutoQueueEnabled(@NonNull final Context context) {
        return getPreferences(context)
                .getBoolean(context.getString(R.string.auto_queue_key), false);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isClearingQueueConfirmationRequired,boolean isClearingQueueConfirmationRequired(Context),"[253, 256]","{'A290': [(253, 256)]}",{'A290': 1.0},A290,,"    public static boolean isClearingQueueConfirmationRequired(@NonNull final Context context) {
        return getPreferences(context)
                .getBoolean(context.getString(R.string.clear_queue_confirmation_key), false);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getMinimizeOnExitAction,int getMinimizeOnExitAction(Context),"[258, 269]","{'A310': [(258, 259), (263, 263), (265, 265), (268, 269)], 'A305': [(260, 262), (264, 264), (266, 267)]}","{'A310': 0.5, 'A305': 0.5}",A310,,"    @MinimizeMode
    public static int getMinimizeOnExitAction(@NonNull final Context context) {
        final String action = getPreferences(context)
                .getString(context.getString(R.string.minimize_on_exit_key), """");
        if (action.equals(context.getString(R.string.minimize_on_exit_popup_key))) {
            return MINIMIZE_ON_EXIT_MODE_POPUP;
        } else if (action.equals(context.getString(R.string.minimize_on_exit_none_key))) {
            return MINIMIZE_ON_EXIT_MODE_NONE;
        } else {
            return MINIMIZE_ON_EXIT_MODE_BACKGROUND; // default
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getAutoplayType,int getAutoplayType(Context),"[271, 282]","{'A305': [(273, 274), (280, 280)], 'A290': [(271, 272), (275, 279), (281, 282)]}","{'A305': 0.25, 'A290': 0.75}",A290,,"    @AutoplayType
    public static int getAutoplayType(@NonNull final Context context) {
        final String type = getPreferences(context).getString(
                context.getString(R.string.autoplay_key), """");
        if (type.equals(context.getString(R.string.autoplay_always_key))) {
            return AUTOPLAY_TYPE_ALWAYS;
        } else if (type.equals(context.getString(R.string.autoplay_never_key))) {
            return AUTOPLAY_TYPE_NEVER;
        } else {
            return AUTOPLAY_TYPE_WIFI; // default
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isAutoplayAllowedByUser,boolean isAutoplayAllowedByUser(Context),"[284, 294]","{'A298': [(284, 294)]}",{'A298': 1.0},A298,,"    public static boolean isAutoplayAllowedByUser(@NonNull final Context context) {
        switch (PlayerHelper.getAutoplayType(context)) {
            case PlayerHelper.AutoplayType.AUTOPLAY_TYPE_NEVER:
                return false;
            case PlayerHelper.AutoplayType.AUTOPLAY_TYPE_WIFI:
                return !ListHelper.isMeteredNetwork(context);
            case PlayerHelper.AutoplayType.AUTOPLAY_TYPE_ALWAYS:
            default:
                return true;
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getSeekParameters,SeekParameters getSeekParameters(Context),"[296, 299]","{'A310': [(296, 297), (299, 299)], 'A294': [(298, 298)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"    @NonNull
    public static SeekParameters getSeekParameters(@NonNull final Context context) {
        return isUsingInexactSeek(context) ? SeekParameters.CLOSEST_SYNC : SeekParameters.EXACT;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getPreferredCacheSize,long getPreferredCacheSize(),"[301, 303]","{'A310': [(302, 303)], 'A294': [(301, 301)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public static long getPreferredCacheSize() {
        return 64 * 1024 * 1024L;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getPreferredFileSize,long getPreferredFileSize(),"[305, 307]","{'A310': [(307, 307)], 'A288': [(306, 306)], 'A294': [(305, 305)]}","{'A310': 0.3333333333333333, 'A288': 0.3333333333333333, 'A294': 0.3333333333333333}",A310,,"    public static long getPreferredFileSize() {
        return 2 * 1024 * 1024L; // ExoPlayer CacheDataSink.MIN_RECOMMENDED_FRAGMENT_SIZE
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getQualitySelector,ExoTrackSelection.Factory getQualitySelector(),"[309, 316]","{'A310': [(313, 316)], 'A288': [(310, 311)], 'A294': [(312, 312)], 'A333': [(309, 309)]}","{'A310': 0.5, 'A288': 0.25, 'A294': 0.125, 'A333': 0.125}",A310,,"    @NonNull
    public static ExoTrackSelection.Factory getQualitySelector() {
        return new AdaptiveTrackSelection.Factory(
                1000,
                AdaptiveTrackSelection.DEFAULT_MAX_DURATION_FOR_QUALITY_DECREASE_MS,
                AdaptiveTrackSelection.DEFAULT_MIN_DURATION_TO_RETAIN_AFTER_DISCARD_MS,
                AdaptiveTrackSelection.DEFAULT_BANDWIDTH_FRACTION);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isUsingDSP,boolean isUsingDSP(),"[318, 320]","{'A310': [(319, 320)], 'A305': [(318, 318)]}","{'A310': 0.6666666666666666, 'A305': 0.3333333333333333}",A310,,"    public static boolean isUsingDSP() {
        return true;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getCaptionStyle,CaptionStyleCompat getCaptionStyle(Context),"[322, 331]","{'A310': [(322, 323), (326, 331)], 'A295': [(324, 325)]}","{'A310': 0.8, 'A295': 0.2}",A310,,"    @NonNull
    public static CaptionStyleCompat getCaptionStyle(@NonNull final Context context) {
        final CaptioningManager captioningManager = ContextCompat.getSystemService(context,
                CaptioningManager.class);
        if (captioningManager == null || !captioningManager.isEnabled()) {
            return CaptionStyleCompat.DEFAULT;
        }

        return CaptionStyleCompat.createFromCaptionStyle(captioningManager.getUserStyle());
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getCaptionScale,float getCaptionScale(Context),"[347, 355]","{'A310': [(347, 347), (350, 350), (352, 355)], 'A290': [(351, 351)], 'A295': [(348, 349)]}","{'A310': 0.6666666666666666, 'A290': 0.1111111111111111, 'A295': 0.2222222222222222}",A310,,"    public static float getCaptionScale(@NonNull final Context context) {
        final CaptioningManager captioningManager = ContextCompat.getSystemService(context,
                CaptioningManager.class);
        if (captioningManager == null || !captioningManager.isEnabled()) {
            return 1.0f;
        }

        return captioningManager.getFontScale();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getScreenBrightness,float getScreenBrightness(Context),"[362, 374]","{'A305': [(363, 373)], 'A342': [(362, 362), (374, 374)]}","{'A305': 0.8461538461538461, 'A342': 0.15384615384615385}",A305,,"    public static float getScreenBrightness(@NonNull final Context context) {
        final SharedPreferences sp = getPreferences(context);
        final long timestamp =
                sp.getLong(context.getString(R.string.screen_brightness_timestamp_key), 0);
        // Hypothesis: 4h covers a viewing block, e.g. evening.
        // External lightning conditions will change in the next
        // viewing block so we fall back to the default brightness
        if ((System.currentTimeMillis() - timestamp) > TimeUnit.HOURS.toMillis(4)) {
            return -1;
        } else {
            return sp.getFloat(context.getString(R.string.screen_brightness_key), -1);
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,setScreenBrightness,"void setScreenBrightness(Context,float)","[376, 383]","{'A305': [(377, 382)], 'A294': [(376, 376)], 'A342': [(383, 383)]}","{'A305': 0.75, 'A294': 0.125, 'A342': 0.125}",A305,,"    public static void setScreenBrightness(@NonNull final Context context,
                                           final float screenBrightness) {
        getPreferences(context).edit()
                .putFloat(context.getString(R.string.screen_brightness_key), screenBrightness)
                .putLong(context.getString(R.string.screen_brightness_timestamp_key),
                        System.currentTimeMillis())
                .apply();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,globalScreenOrientationLocked,boolean globalScreenOrientationLocked(Context),"[385, 393]","{'A288': [(388, 388), (390, 392)], 'A290': [(385, 387), (389, 389), (393, 393)]}","{'A288': 0.4444444444444444, 'A290': 0.5555555555555556}",A290,,"    public static boolean globalScreenOrientationLocked(final Context context) {
        // 1: Screen orientation changes using accelerometer
        // 0: Screen orientation is locked
        // if the accelerometer sensor is missing completely, assume locked orientation
        return android.provider.Settings.System.getInt(
                context.getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 0) == 0
                    || !context.getPackageManager()
                        .hasSystemFeature(PackageManager.FEATURE_SENSOR_ACCELEROMETER);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getProgressiveLoadIntervalBytes,int getProgressiveLoadIntervalBytes(Context),"[395, 406]","{'A305': [(400, 400)], 'A383': [(395, 399), (401, 406)]}","{'A305': 0.08333333333333333, 'A383': 0.9166666666666666}",A383,,"    public static int getProgressiveLoadIntervalBytes(@NonNull final Context context) {
        final String preferredIntervalBytes = getPreferences(context).getString(
                context.getString(R.string.progressive_load_interval_key),
                context.getString(R.string.progressive_load_interval_default_value));

        if (context.getString(R.string.progressive_load_interval_exoplayer_default_value)
                .equals(preferredIntervalBytes)) {
            return ProgressiveMediaSource.DEFAULT_LOADING_CHECK_INTERVAL_BYTES;
        }
        // Keeping the same KiB unit used by ProgressiveMediaSource
        return Integer.parseInt(preferredIntervalBytes) * 1024;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getPreferences,SharedPreferences getPreferences(Context),"[412, 415]","{'A310': [(412, 415)]}",{'A310': 1.0},A310,,"    @NonNull
    private static SharedPreferences getPreferences(@NonNull final Context context) {
        return PreferenceManager.getDefaultSharedPreferences(context);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,isUsingInexactSeek,boolean isUsingInexactSeek(Context),"[417, 420]","{'A310': [(420, 420)], 'A305': [(417, 417), (419, 419)], 'A294': [(418, 418)]}","{'A310': 0.25, 'A305': 0.5, 'A294': 0.25}",A305,,"    private static boolean isUsingInexactSeek(@NonNull final Context context) {
        return getPreferences(context)
                .getBoolean(context.getString(R.string.use_inexact_seek_key), false);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getAutoQueuedSinglePlayQueue,SinglePlayQueue getAutoQueuedSinglePlayQueue(StreamInfoItem),"[422, 427]","{'A310': [(427, 427)], 'A305': [(422, 426)]}","{'A310': 0.16666666666666666, 'A305': 0.8333333333333334}",A305,,"    private static SinglePlayQueue getAutoQueuedSinglePlayQueue(
            final StreamInfoItem streamInfoItem) {
        final SinglePlayQueue singlePlayQueue = new SinglePlayQueue(streamInfoItem);
        Objects.requireNonNull(singlePlayQueue.getItem()).setAutoQueued(true);
        return singlePlayQueue;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,nextRepeatMode,int nextRepeatMode(int),"[434, 445]","{'A305': [(434, 440), (443, 445)], 'A333': [(441, 442)]}","{'A305': 0.8333333333333334, 'A333': 0.16666666666666666}",A305,,"    @RepeatMode
    public static int nextRepeatMode(@RepeatMode final int repeatMode) {
        switch (repeatMode) {
            case REPEAT_MODE_OFF:
                return REPEAT_MODE_ONE;
            case REPEAT_MODE_ONE:
                return REPEAT_MODE_ALL;
            case REPEAT_MODE_ALL:
            default:
                return REPEAT_MODE_OFF;
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,retrieveResizeModeFromPrefs,int retrieveResizeModeFromPrefs(Player),"[447, 451]","{'A310': [(451, 451)], 'A305': [(447, 450)]}","{'A310': 0.2, 'A305': 0.8}",A305,,"    @ResizeMode
    public static int retrieveResizeModeFromPrefs(final Player player) {
        return player.getPrefs().getInt(player.getContext().getString(R.string.last_resize_mode),
                AspectRatioFrameLayout.RESIZE_MODE_FIT);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,nextResizeModeAndSaveToPrefs,"int nextResizeModeAndSaveToPrefs(Player,int)","[453, 475]","{'A310': [(475, 475)], 'A305': [(453, 470), (472, 472), (474, 474)], 'A298': [(471, 471), (473, 473)]}","{'A310': 0.043478260869565216, 'A305': 0.8695652173913043, 'A298': 0.08695652173913043}",A305,,"    @SuppressLint(""SwitchIntDef"") // only fit, fill and zoom are supported by NewPipe
    @ResizeMode
    public static int nextResizeModeAndSaveToPrefs(final Player player,
                                                   @ResizeMode final int resizeMode) {
        final int newResizeMode;
        switch (resizeMode) {
            case AspectRatioFrameLayout.RESIZE_MODE_FIT:
                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FILL;
                break;
            case AspectRatioFrameLayout.RESIZE_MODE_FILL:
                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_ZOOM;
                break;
            case AspectRatioFrameLayout.RESIZE_MODE_ZOOM:
            default:
                newResizeMode = AspectRatioFrameLayout.RESIZE_MODE_FIT;
                break;
        }

        // save the new resize mode so it can be restored in a future session
        player.getPrefs().edit().putInt(
                player.getContext().getString(R.string.last_resize_mode), newResizeMode).apply();
        return newResizeMode;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,retrievePlaybackParametersFromPrefs,PlaybackParameters retrievePlaybackParametersFromPrefs(Player),"[477, 483]","{'A288': [(482, 482)], 'A305': [(477, 481)], 'A342': [(483, 483)]}","{'A288': 0.14285714285714285, 'A305': 0.7142857142857143, 'A342': 0.14285714285714285}",A305,,"    public static PlaybackParameters retrievePlaybackParametersFromPrefs(final Player player) {
        final float speed = player.getPrefs().getFloat(player.getContext().getString(
                R.string.playback_speed_key), player.getPlaybackSpeed());
        final float pitch = player.getPrefs().getFloat(player.getContext().getString(
                R.string.playback_pitch_key), player.getPlaybackPitch());
        return new PlaybackParameters(speed, pitch);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,savePlaybackParametersToPrefs,"void savePlaybackParametersToPrefs(Player,float,float,boolean)","[485, 495]","{'A305': [(485, 495)]}",{'A305': 1.0},A305,,"    public static void savePlaybackParametersToPrefs(final Player player,
                                                     final float speed,
                                                     final float pitch,
                                                     final boolean skipSilence) {
        player.getPrefs().edit()
                .putFloat(player.getContext().getString(R.string.playback_speed_key), speed)
                .putFloat(player.getContext().getString(R.string.playback_pitch_key), pitch)
                .putBoolean(player.getContext().getString(R.string.playback_skip_silence_key),
                        skipSilence)
                .apply();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,getMinimumVideoHeight,float getMinimumVideoHeight(float),"[497, 499]","{'A310': [(499, 499)], 'A305': [(497, 498)]}","{'A310': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public static float getMinimumVideoHeight(final float width) {
        return width / (16.0f / 9.0f); // Respect the 16:9 ratio that most videos have
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHelper.java,PlayerHelper,retrieveSeekDurationFromPreferences,int retrieveSeekDurationFromPreferences(Player),"[501, 505]","{'A305': [(501, 504)], 'A294': [(505, 505)]}","{'A305': 0.8, 'A294': 0.2}",A305,,"    public static int retrieveSeekDurationFromPreferences(final Player player) {
        return Integer.parseInt(Objects.requireNonNull(player.getPrefs().getString(
                player.getContext().getString(R.string.seek_duration_key),
                player.getContext().getString(R.string.seek_duration_default_value))));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,progressOf,int progressOf(double),"[70, 73]","{'A300': [(70, 73)]}",{'A300': 1.0},A300,,"        @Override
        public int progressOf(final double value) {
            return PlayerSemitoneHelper.percentToSemitones(value) + 12;
        }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,valueOf,double valueOf(int),"[75, 78]","{'A300': [(75, 78)]}",{'A300': 1.0},A300,,"        @Override
        public double valueOf(final int progress) {
            return PlayerSemitoneHelper.semitonesToPercent(progress - 12);
        }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,newInstance,"PlaybackParameterDialog newInstance(double,double,boolean,Callback)","[100, 118]","{'A310': [(109, 109), (112, 112), (116, 118)], 'A300': [(100, 105), (108, 108), (110, 111), (113, 115)], 'A294': [(106, 106)], 'A290': [(107, 107)]}","{'A310': 0.2631578947368421, 'A300': 0.631578947368421, 'A294': 0.05263157894736842, 'A290': 0.05263157894736842}",A300,,"    public static PlaybackParameterDialog newInstance(
            final double playbackTempo,
            final double playbackPitch,
            final boolean playbackSkipSilence,
            final Callback callback
    ) {
        final PlaybackParameterDialog dialog = new PlaybackParameterDialog();
        dialog.callback = callback;

        dialog.initialTempo = playbackTempo;
        dialog.initialPitchPercent = playbackPitch;
        dialog.initialSkipSilence = playbackSkipSilence;

        dialog.tempo = dialog.initialTempo;
        dialog.pitchPercent = dialog.initialPitchPercent;
        dialog.skipSilence = dialog.initialSkipSilence;

        return dialog;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,onAttach,void onAttach(Context),"[124, 132]","{'A310': [(124, 124), (126, 126), (128, 128), (130, 132)], 'A300': [(125, 125)], 'A290': [(127, 127), (129, 129)]}","{'A310': 0.6666666666666666, 'A300': 0.1111111111111111, 'A290': 0.2222222222222222}",A310,,"    @Override
    public void onAttach(@NonNull final Context context) {
        super.onAttach(context);
        if (context instanceof Callback) {
            callback = (Callback) context;
        } else if (callback == null) {
            dismiss();
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,onSaveInstanceState,void onSaveInstanceState(Bundle),"[134, 138]","{'A310': [(134, 134), (136, 136), (138, 138)], 'A300': [(135, 135), (137, 137)]}","{'A310': 0.6, 'A300': 0.4}",A310,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        Bridge.saveInstanceState(this, outState);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,onCreateDialog,Dialog onCreateDialog(Bundle),"[144, 170]","{'A310': [(144, 145), (151, 152), (154, 154), (168, 170)], 'A300': [(147, 148), (150, 150), (153, 153), (155, 167)], 'A294': [(146, 146)], 'A299': [(149, 149)]}","{'A310': 0.2962962962962963, 'A300': 0.6296296296296297, 'A294': 0.037037037037037035, 'A299': 0.037037037037037035}",A300,,"    @NonNull
    @Override
    public Dialog onCreateDialog(@Nullable final Bundle savedInstanceState) {
        Bridge.restoreInstanceState(this, savedInstanceState);

        binding = DialogPlaybackParameterBinding.inflate(getLayoutInflater());
        initUI();

        final AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(requireActivity())
                .setView(binding.getRoot())
                .setCancelable(true)
                .setNegativeButton(R.string.cancel, (dialogInterface, i) -> {
                    setAndUpdateTempo(initialTempo);
                    setAndUpdatePitch(initialPitchPercent);
                    setAndUpdateSkipSilence(initialSkipSilence);
                    updateCallback();
                })
                .setNeutralButton(R.string.playback_reset, (dialogInterface, i) -> {
                    setAndUpdateTempo(DEFAULT_TEMPO);
                    setAndUpdatePitch(DEFAULT_PITCH_PERCENT);
                    setAndUpdateSkipSilence(DEFAULT_SKIP_SILENCE);
                    updateCallback();
                })
                .setPositiveButton(R.string.ok, (dialogInterface, i) -> updateCallback());

        return dialogBuilder.create();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,initUI,void initUI(),"[176, 278]","{'A300': [(176, 206), (208, 278)], 'A305': [(207, 207)]}","{'A300': 0.9902912621359223, 'A305': 0.009708737864077669}",A300,,"    private void initUI() {
        // Tempo
        setText(binding.tempoMinimumText, PlayerHelper::formatSpeed, MIN_PITCH_OR_SPEED);
        setText(binding.tempoMaximumText, PlayerHelper::formatSpeed, MAX_PITCH_OR_SPEED);

        binding.tempoSeekbar.setMax(QUADRATIC_STRATEGY.progressOf(MAX_PITCH_OR_SPEED));
        setAndUpdateTempo(tempo);
        binding.tempoSeekbar.setOnSeekBarChangeListener(
                getTempoOrPitchSeekbarChangeListener(
                        QUADRATIC_STRATEGY,
                        this::onTempoSliderUpdated));

        registerOnStepClickListener(
                binding.tempoStepDown,
                () -> tempo,
                -1,
                this::onTempoSliderUpdated);
        registerOnStepClickListener(
                binding.tempoStepUp,
                () -> tempo,
                1,
                this::onTempoSliderUpdated);

        // Pitch
        binding.pitchToogleControlModes.setOnClickListener(v -> {
            final boolean isCurrentlyVisible =
                    binding.pitchControlModeTabs.getVisibility() == View.GONE;
            binding.pitchControlModeTabs.setVisibility(isCurrentlyVisible
                    ? View.VISIBLE
                    : View.GONE);
            animateRotation(binding.pitchToogleControlModes,
                    VideoPlayerUi.DEFAULT_CONTROLS_DURATION,
                    isCurrentlyVisible ? 180 : 0);
        });

        getPitchControlModeComponentMappings()
                .forEach(this::setupPitchControlModeTextView);
        // Initialization is done at the end

        // Pitch - Percent
        setText(binding.pitchPercentMinimumText, PlayerHelper::formatPitch, MIN_PITCH_OR_SPEED);
        setText(binding.pitchPercentMaximumText, PlayerHelper::formatPitch, MAX_PITCH_OR_SPEED);

        binding.pitchPercentSeekbar.setMax(QUADRATIC_STRATEGY.progressOf(MAX_PITCH_OR_SPEED));
        setAndUpdatePitch(pitchPercent);
        binding.pitchPercentSeekbar.setOnSeekBarChangeListener(
                getTempoOrPitchSeekbarChangeListener(
                        QUADRATIC_STRATEGY,
                        this::onPitchPercentSliderUpdated));

        registerOnStepClickListener(
                binding.pitchPercentStepDown,
                () -> pitchPercent,
                -1,
                this::onPitchPercentSliderUpdated);
        registerOnStepClickListener(
                binding.pitchPercentStepUp,
                () -> pitchPercent,
                1,
                this::onPitchPercentSliderUpdated);

        // Pitch - Semitone
        binding.pitchSemitoneSeekbar.setOnSeekBarChangeListener(
                getTempoOrPitchSeekbarChangeListener(
                        SEMITONE_STRATEGY,
                        this::onPitchPercentSliderUpdated));

        registerOnSemitoneStepClickListener(
                binding.pitchSemitoneStepDown,
                -1,
                this::onPitchPercentSliderUpdated);
        registerOnSemitoneStepClickListener(
                binding.pitchSemitoneStepUp,
                1,
                this::onPitchPercentSliderUpdated);

        // Steps
        getStepSizeComponentMappings()
                .forEach(this::setupStepTextView);
        // Initialize UI
        setStepSizeToUI(getCurrentStepSize());

        // Bottom controls
        bindCheckboxWithBoolPref(
                binding.unhookCheckbox,
                R.string.playback_unhook_key,
                true,
                isChecked -> {
                    if (!isChecked) {
                        // when unchecked, slide back to the minimum of current tempo or pitch
                        ensureHookIsValidAndUpdateCallBack();
                    }
                });

        setAndUpdateSkipSilence(skipSilence);
        binding.skipSilenceCheckbox.setOnCheckedChangeListener((compoundButton, isChecked) -> {
            skipSilence = isChecked;
            updateCallback();
        });

        // PitchControlMode has to be initialized at the end because it requires the unhookCheckbox
        changePitchControlMode(isCurrentPitchControlModeSemitone());
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setText,"void setText(TextView,DoubleFunction<String>,double)","[282, 288]","{'A300': [(282, 288)]}",{'A300': 1.0},A300,,"    private void setText(
            final TextView textView,
            final DoubleFunction<String> formatter,
            final double value
    ) {
        Objects.requireNonNull(textView).setText(formatter.apply(value));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,registerOnStepClickListener,"void registerOnStepClickListener(TextView,DoubleSupplier,double,DoubleConsumer)","[292, 303]","{'A300': [(292, 303)]}",{'A300': 1.0},A300,,"    private void registerOnStepClickListener(
            final TextView stepTextView,
            final DoubleSupplier currentValueSupplier,
            final double direction, // -1 for step down, +1 for step up
            final DoubleConsumer newValueConsumer
    ) {
        stepTextView.setOnClickListener(view -> {
            newValueConsumer.accept(
                    currentValueSupplier.getAsDouble() + 1 * getCurrentStepSize() * direction);
            updateCallback();
        });
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,registerOnSemitoneStepClickListener,"void registerOnSemitoneStepClickListener(TextView,int,DoubleConsumer)","[305, 315]","{'A300': [(305, 315)]}",{'A300': 1.0},A300,,"    private void registerOnSemitoneStepClickListener(
            final TextView stepTextView,
            final int direction, // -1 for step down, +1 for step up
            final DoubleConsumer newValueConsumer
    ) {
        stepTextView.setOnClickListener(view -> {
            newValueConsumer.accept(PlayerSemitoneHelper.semitonesToPercent(
                    PlayerSemitoneHelper.percentToSemitones(this.pitchPercent) + direction));
            updateCallback();
        });
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setupPitchControlModeTextView,"void setupPitchControlModeTextView(boolean,TextView)","[319, 331]","{'A300': [(319, 331)]}",{'A300': 1.0},A300,,"    private void setupPitchControlModeTextView(
            final boolean semitones,
            final TextView textView
    ) {
        textView.setOnClickListener(view -> {
            PreferenceManager.getDefaultSharedPreferences(requireContext())
                    .edit()
                    .putBoolean(getString(R.string.playback_adjust_by_semitones_key), semitones)
                    .apply();

            changePitchControlMode(semitones);
        });
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getPitchControlModeComponentMappings,"Map<Boolean, TextView> getPitchControlModeComponentMappings()","[333, 336]","{'A300': [(333, 333), (336, 336)], 'A295': [(334, 335)]}","{'A300': 0.5, 'A295': 0.5}",A300,,"    private Map<Boolean, TextView> getPitchControlModeComponentMappings() {
        return Map.of(PITCH_CTRL_MODE_PERCENT, binding.pitchControlModePercent,
                PITCH_CTRL_MODE_SEMITONE, binding.pitchControlModeSemitone);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,changePitchControlMode,void changePitchControlMode(boolean),"[338, 378]","{'A300': [(338, 342), (344, 349), (351, 378)], 'A305': [(343, 343), (350, 350)]}","{'A300': 0.9512195121951219, 'A305': 0.04878048780487805}",A300,,"    private void changePitchControlMode(final boolean semitones) {
        // Bring all textviews into a normal state
        final Map<Boolean, TextView> pitchCtrlModeComponentMapping =
                getPitchControlModeComponentMappings();
        pitchCtrlModeComponentMapping.forEach((v, textView) -> textView.setBackground(
                resolveDrawable(requireContext(), android.R.attr.selectableItemBackground)));

        // Mark the selected textview
        final TextView textView = pitchCtrlModeComponentMapping.get(semitones);
        if (textView != null) {
            textView.setBackground(new LayerDrawable(new Drawable[]{
                    resolveDrawable(requireContext(), R.attr.dashed_border),
                    resolveDrawable(requireContext(), android.R.attr.selectableItemBackground)
            }));
        }

        // Show or hide component
        binding.pitchPercentControl.setVisibility(semitones ? View.GONE : View.VISIBLE);
        binding.pitchSemitoneControl.setVisibility(semitones ? View.VISIBLE : View.GONE);

        if (semitones) {
            // Recalculate pitch percent when changing to semitone
            // (as it could be an invalid semitone value)
            final double newPitchPercent = calcValidPitch(pitchPercent);

            // If the values differ set the new pitch
            if (this.pitchPercent != newPitchPercent) {
                if (DEBUG) {
                    Log.d(TAG, ""Bringing pitchPercent to correct corresponding semitone: ""
                            + ""currentPitchPercent = "" + pitchPercent + "", ""
                            + ""newPitchPercent = "" + newPitchPercent
                    );
                }
                this.onPitchPercentSliderUpdated(newPitchPercent);
                updateCallback();
            }
        } else if (!binding.unhookCheckbox.isChecked()) {
            // When changing to percent it's possible that tempo is != pitch
            ensureHookIsValidAndUpdateCallBack();
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,isCurrentPitchControlModeSemitone,boolean isCurrentPitchControlModeSemitone(),"[380, 385]","{'A300': [(380, 385)]}",{'A300': 1.0},A300,,"    private boolean isCurrentPitchControlModeSemitone() {
        return PreferenceManager.getDefaultSharedPreferences(requireContext())
                .getBoolean(
                        getString(R.string.playback_adjust_by_semitones_key),
                        PITCH_CTRL_MODE_PERCENT);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setupStepTextView,"void setupStepTextView(double,TextView)","[389, 402]","{'A300': [(389, 402)]}",{'A300': 1.0},A300,,"    private void setupStepTextView(
            final double stepSizeValue,
            final TextView textView
    ) {
        setText(textView, PlaybackParameterDialog::getPercentString, stepSizeValue);
        textView.setOnClickListener(view -> {
            PreferenceManager.getDefaultSharedPreferences(requireContext())
                    .edit()
                    .putFloat(getString(R.string.adjustment_step_key), (float) stepSizeValue)
                    .apply();

            setStepSizeToUI(stepSizeValue);
        });
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getStepSizeComponentMappings,"Map<Double, TextView> getStepSizeComponentMappings()","[404, 410]","{'A300': [(404, 404), (410, 410)], 'A295': [(405, 409)]}","{'A300': 0.2857142857142857, 'A295': 0.7142857142857143}",A295,,"    private Map<Double, TextView> getStepSizeComponentMappings() {
        return Map.of(STEP_1_PERCENT_VALUE, binding.stepSizeOnePercent,
                STEP_5_PERCENT_VALUE, binding.stepSizeFivePercent,
                STEP_10_PERCENT_VALUE, binding.stepSizeTenPercent,
                STEP_25_PERCENT_VALUE, binding.stepSizeTwentyFivePercent,
                STEP_100_PERCENT_VALUE, binding.stepSizeOneHundredPercent);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setStepSizeToUI,void setStepSizeToUI(double),"[412, 433]","{'A300': [(412, 415), (417, 422), (424, 433)], 'A305': [(416, 416), (423, 423)]}","{'A300': 0.9090909090909091, 'A305': 0.09090909090909091}",A300,,"    private void setStepSizeToUI(final double newStepSize) {
        // Bring all textviews into a normal state
        final Map<Double, TextView> stepSiteComponentMapping = getStepSizeComponentMappings();
        stepSiteComponentMapping.forEach((v, textView) -> textView.setBackground(
                resolveDrawable(requireContext(), android.R.attr.selectableItemBackground)));

        // Mark the selected textview
        final TextView textView = stepSiteComponentMapping.get(newStepSize);
        if (textView != null) {
            textView.setBackground(new LayerDrawable(new Drawable[]{
                    resolveDrawable(requireContext(), R.attr.dashed_border),
                    resolveDrawable(requireContext(), android.R.attr.selectableItemBackground)
            }));
        }

        // Bind to the corresponding control components
        binding.tempoStepUp.setText(getStepUpPercentString(newStepSize));
        binding.tempoStepDown.setText(getStepDownPercentString(newStepSize));

        binding.pitchPercentStepUp.setText(getStepUpPercentString(newStepSize));
        binding.pitchPercentStepDown.setText(getStepDownPercentString(newStepSize));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getCurrentStepSize,double getCurrentStepSize(),"[435, 438]","{'A300': [(435, 438)]}",{'A300': 1.0},A300,,"    private double getCurrentStepSize() {
        return PreferenceManager.getDefaultSharedPreferences(requireContext())
                .getFloat(getString(R.string.adjustment_step_key), (float) DEFAULT_STEP);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setAndUpdateSkipSilence,void setAndUpdateSkipSilence(boolean),"[442, 445]","{'A300': [(442, 445)]}",{'A300': 1.0},A300,,"    private void setAndUpdateSkipSilence(final boolean newSkipSilence) {
        this.skipSilence = newSkipSilence;
        binding.skipSilenceCheckbox.setChecked(newSkipSilence);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,bindCheckboxWithBoolPref,"void bindCheckboxWithBoolPref(CheckBox,int,boolean,Consumer<Boolean>)","[447, 471]","{'A310': [(468, 468)], 'A300': [(447, 454), (456, 458), (460, 464), (466, 466), (469, 470)], 'A399': [(455, 455), (459, 459), (465, 465), (467, 467), (471, 471)]}","{'A310': 0.04, 'A300': 0.76, 'A399': 0.2}",A300,,"    @SuppressWarnings(""SameParameterValue"") // this method was written to be reusable
    private void bindCheckboxWithBoolPref(
            @NonNull final CheckBox checkBox,
            @StringRes final int resId,
            final boolean defaultValue,
            @NonNull final Consumer<Boolean> onInitialValueOrValueChange
    ) {
        final boolean prefValue = PreferenceManager
                .getDefaultSharedPreferences(requireContext())
                .getBoolean(getString(resId), defaultValue);

        checkBox.setChecked(prefValue);

        onInitialValueOrValueChange.accept(prefValue);

        checkBox.setOnCheckedChangeListener((compoundButton, isChecked) -> {
            // save whether pitch and tempo are unhooked or not
            PreferenceManager.getDefaultSharedPreferences(requireContext())
                    .edit()
                    .putBoolean(getString(resId), isChecked)
                    .apply();

            onInitialValueOrValueChange.accept(isChecked);
        });
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,ensureHookIsValidAndUpdateCallBack,void ensureHookIsValidAndUpdateCallBack(),"[478, 483]","{'A300': [(478, 483)]}",{'A300': 1.0},A300,,"    private void ensureHookIsValidAndUpdateCallBack() {
        if (tempo != pitchPercent) {
            setSliders(Math.min(tempo, pitchPercent));
            updateCallback();
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getTempoOrPitchSeekbarChangeListener,"SeekBar.OnSeekBarChangeListener getTempoOrPitchSeekbarChangeListener(SliderStrategy,DoubleConsumer)","[489, 504]","{'A310': [(494, 494), (501, 502)], 'A300': [(489, 493), (496, 496), (498, 500)], 'A294': [(497, 497)], 'A305': [(495, 495)], 'A399': [(503, 504)]}","{'A310': 0.1875, 'A300': 0.5625, 'A294': 0.0625, 'A305': 0.0625, 'A399': 0.125}",A300,,"    private SeekBar.OnSeekBarChangeListener getTempoOrPitchSeekbarChangeListener(
            final SliderStrategy sliderStrategy,
            final DoubleConsumer newValueConsumer
    ) {
        return new SimpleOnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(@NonNull final SeekBar seekBar,
                                          final int progress,
                                          final boolean fromUser) {
                if (fromUser) { // ensure that the user triggered the change
                    newValueConsumer.accept(sliderStrategy.valueOf(progress));
                    updateCallback();
                }
            }
        };
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,onProgressChanged,"void onProgressChanged(SeekBar,int,boolean)","[494, 502]","{'A310': [(494, 494), (501, 502)], 'A300': [(496, 496), (498, 500)], 'A294': [(497, 497)], 'A305': [(495, 495)]}","{'A310': 0.3333333333333333, 'A300': 0.4444444444444444, 'A294': 0.1111111111111111, 'A305': 0.1111111111111111}",A300,,"            @Override
            public void onProgressChanged(@NonNull final SeekBar seekBar,
                                          final int progress,
                                          final boolean fromUser) {
                if (fromUser) { // ensure that the user triggered the change
                    newValueConsumer.accept(sliderStrategy.valueOf(progress));
                    updateCallback();
                }
            }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,onTempoSliderUpdated,void onTempoSliderUpdated(double),"[506, 512]","{'A310': [(506, 506), (508, 509), (511, 512)], 'A300': [(507, 507), (510, 510)]}","{'A310': 0.7142857142857143, 'A300': 0.2857142857142857}",A310,,"    private void onTempoSliderUpdated(final double newTempo) {
        if (!binding.unhookCheckbox.isChecked()) {
            setSliders(newTempo);
        } else {
            setAndUpdateTempo(newTempo);
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,onPitchPercentSliderUpdated,void onPitchPercentSliderUpdated(double),"[514, 520]","{'A310': [(516, 517), (519, 520)], 'A300': [(514, 515), (518, 518)]}","{'A310': 0.5714285714285714, 'A300': 0.42857142857142855}",A310,,"    private void onPitchPercentSliderUpdated(final double newPitch) {
        if (!binding.unhookCheckbox.isChecked()) {
            setSliders(newPitch);
        } else {
            setAndUpdatePitch(newPitch);
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setSliders,void setSliders(double),"[522, 525]","{'A310': [(522, 522), (525, 525)], 'A300': [(523, 524)]}","{'A310': 0.5, 'A300': 0.5}",A310,,"    private void setSliders(final double newValue) {
        setAndUpdateTempo(newValue);
        setAndUpdatePitch(newValue);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setAndUpdateTempo,void setAndUpdateTempo(double),"[527, 532]","{'A310': [(532, 532)], 'A300': [(527, 527), (529, 531)], 'A295': [(528, 528)]}","{'A310': 0.16666666666666666, 'A300': 0.6666666666666666, 'A295': 0.16666666666666666}",A300,,"    private void setAndUpdateTempo(final double newTempo) {
        this.tempo = MathUtils.clamp(newTempo, MIN_PITCH_OR_SPEED, MAX_PITCH_OR_SPEED);

        binding.tempoSeekbar.setProgress(QUADRATIC_STRATEGY.progressOf(tempo));
        setText(binding.tempoCurrentText, PlayerHelper::formatSpeed, tempo);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,setAndUpdatePitch,void setAndUpdatePitch(double),"[534, 545]","{'A300': [(534, 545)]}",{'A300': 1.0},A300,,"    private void setAndUpdatePitch(final double newPitch) {
        this.pitchPercent = calcValidPitch(newPitch);

        binding.pitchPercentSeekbar.setProgress(QUADRATIC_STRATEGY.progressOf(pitchPercent));
        binding.pitchSemitoneSeekbar.setProgress(SEMITONE_STRATEGY.progressOf(pitchPercent));
        setText(binding.pitchPercentCurrentText,
                PlayerHelper::formatPitch,
                pitchPercent);
        setText(binding.pitchSemitoneCurrentText,
                PlayerSemitoneHelper::formatPitchSemitones,
                pitchPercent);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,calcValidPitch,double calcValidPitch(double),"[547, 556]","{'A300': [(547, 547), (549, 555)], 'A295': [(548, 548)], 'A399': [(556, 556)]}","{'A300': 0.8, 'A295': 0.1, 'A399': 0.1}",A300,,"    private double calcValidPitch(final double newPitch) {
        final double calcPitch = MathUtils.clamp(newPitch, MIN_PITCH_OR_SPEED, MAX_PITCH_OR_SPEED);

        if (!isCurrentPitchControlModeSemitone()) {
            return calcPitch;
        }

        return PlayerSemitoneHelper.semitonesToPercent(
                PlayerSemitoneHelper.percentToSemitones(calcPitch));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,updateCallback,void updateCallback(),"[562, 574]","{'A310': [(572, 572)], 'A300': [(562, 564), (566, 571), (573, 573)], 'A399': [(565, 565), (574, 574)]}","{'A310': 0.07692307692307693, 'A300': 0.7692307692307693, 'A399': 0.15384615384615385}",A300,,"    private void updateCallback() {
        if (callback == null) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, ""Updating callback: ""
                    + ""tempo = "" + tempo + "", ""
                    + ""pitchPercent = "" + pitchPercent + "", ""
                    + ""skipSilence = "" + skipSilence
            );
        }
        callback.onPlaybackParameterChanged((float) tempo, (float) pitchPercent, skipSilence);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getStepUpPercentString,String getStepUpPercentString(double),"[576, 579]","{'A310': [(576, 577), (579, 579)], 'A300': [(578, 578)]}","{'A310': 0.75, 'A300': 0.25}",A310,,"    @NonNull
    private static String getStepUpPercentString(final double percent) {
        return '+' + getPercentString(percent);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getStepDownPercentString,String getStepDownPercentString(double),"[581, 584]","{'A310': [(581, 582), (584, 584)], 'A300': [(583, 583)]}","{'A310': 0.75, 'A300': 0.25}",A310,,"    @NonNull
    private static String getStepDownPercentString(final double percent) {
        return '-' + getPercentString(percent);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlaybackParameterDialog.java,PlaybackParameterDialog,getPercentString,String getPercentString(double),"[586, 589]","{'A310': [(586, 589)]}",{'A310': 1.0},A310,,"    @NonNull
    private static String getPercentString(final double percent) {
        return PlayerHelper.formatPitch(percent);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getInstance,PlayerHolder getInstance(),"[36, 41]","{'A320': [(36, 41)]}",{'A320': 1.0},A320,,"    public static synchronized PlayerHolder getInstance() {
        if (PlayerHolder.instance == null) {
            PlayerHolder.instance = new PlayerHolder();
        }
        return PlayerHolder.instance;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getPlayer,Optional<Player> getPlayer(),"[52, 55]","{'A305': [(52, 55)]}",{'A305': 1.0},A305,,"    private Optional<Player> getPlayer() {
        return Optional.ofNullable(playerService)
                .flatMap(s -> Optional.ofNullable(s.getPlayer()));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getPlayQueue,Optional<PlayQueue> getPlayQueue(),"[57, 60]","{'A305': [(57, 60)]}",{'A305': 1.0},A305,,"    private Optional<PlayQueue> getPlayQueue() {
        // player play queue might be null e.g. while player is starting
        return getPlayer().flatMap(p -> Optional.ofNullable(p.getPlayQueue()));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getType,PlayerType getType(),"[68, 71]","{'A296': [(68, 68), (71, 71)], 'A305': [(69, 70)]}","{'A296': 0.5, 'A305': 0.5}",A296,,"    @Nullable
    public PlayerType getType() {
        return getPlayer().map(Player::getPlayerType).orElse(null);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,isPlaying,boolean isPlaying(),"[73, 75]","{'A320': [(73, 73)], 'A305': [(74, 75)]}","{'A320': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public boolean isPlaying() {
        return getPlayer().map(Player::isPlaying).orElse(false);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,isPlayerOpen,boolean isPlayerOpen(),"[77, 79]","{'A320': [(77, 77)], 'A305': [(78, 79)]}","{'A320': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public boolean isPlayerOpen() {
        return getPlayer().isPresent();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,isPlayQueueReady,boolean isPlayQueueReady(),"[86, 88]","{'A305': [(86, 88)]}",{'A305': 1.0},A305,,"    public boolean isPlayQueueReady() {
        return getPlayQueue().isPresent();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,isBound,boolean isBound(),"[90, 92]","{'A298': [(90, 92)]}",{'A298': 1.0},A298,,"    public boolean isBound() {
        return bound;
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getQueueSize,int getQueueSize(),"[94, 96]","{'A305': [(95, 95)], 'A384': [(94, 94), (96, 96)]}","{'A305': 0.3333333333333333, 'A384': 0.6666666666666666}",A384,,"    public int getQueueSize() {
        return getPlayQueue().map(PlayQueue::size).orElse(0);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getQueuePosition,int getQueuePosition(),"[98, 100]","{'A305': [(99, 99)], 'A331': [(98, 98), (100, 100)]}","{'A305': 0.3333333333333333, 'A331': 0.6666666666666666}",A331,,"    public int getQueuePosition() {
        return getPlayQueue().map(PlayQueue::getIndex).orElse(0);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,setListener,void setListener(PlayerServiceExtendedEventListener),"[102, 115]","{'A290': [(103, 103), (109, 109), (112, 112), (114, 115)], 'A320': [(102, 102), (104, 108)], 'A305': [(110, 111), (113, 113)]}","{'A290': 0.35714285714285715, 'A320': 0.42857142857142855, 'A305': 0.21428571428571427}",A320,,"    public void setListener(@Nullable final PlayerServiceExtendedEventListener newListener) {
        listener = newListener;

        if (listener == null) {
            return;
        }

        // Force reload data from service
        if (playerService != null) {
            listener.onServiceConnected(playerService);
            startPlayerListener();
            // ^ will call listener.onPlayerConnected() down the line if there is an active player
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,getCommonContext,Context getCommonContext(),"[119, 121]","{'A290': [(121, 121)], 'A320': [(119, 120)]}","{'A290': 0.3333333333333333, 'A320': 0.6666666666666666}",A320,,"    private Context getCommonContext() {
        return App.getApp();
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,startService,"void startService(boolean,PlayerServiceExtendedEventListener)","[123, 142]","{'A290': [(129, 136), (141, 142)], 'A320': [(123, 124), (128, 128), (140, 140)], 'A305': [(125, 127), (137, 139)]}","{'A290': 0.5, 'A320': 0.2, 'A305': 0.3}",A290,,"    public void startService(final boolean playAfterConnect,
                             final PlayerServiceExtendedEventListener newListener) {
        if (DEBUG) {
            Log.d(TAG, ""startService() called with playAfterConnect="" + playAfterConnect);
        }
        final Context context = getCommonContext();
        setListener(newListener);
        if (bound) {
            return;
        }
        // startService() can be called concurrently and it will give a random crashes
        // and NullPointerExceptions inside the service because the service will be
        // bound twice. Prevent it with unbinding first
        unbind(context);
        final Intent intent = new Intent(context, PlayerService.class);
        intent.putExtra(PlayerService.SHOULD_START_FOREGROUND_EXTRA, true);
        ContextCompat.startForegroundService(context, intent);
        serviceConnection.doPlayAfterConnect(playAfterConnect);
        bind(context);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,stopService,void stopService(),"[144, 156]","{'A290': [(152, 152), (156, 156)], 'A320': [(144, 144), (151, 151)], 'A305': [(145, 150), (153, 155)]}","{'A290': 0.15384615384615385, 'A320': 0.15384615384615385, 'A305': 0.6923076923076923}",A305,,"    public void stopService() {
        if (DEBUG) {
            Log.d(TAG, ""stopService() called"");
        }
        if (playerService != null) {
            playerService.destroyPlayerAndStopService();
        }
        final Context context = getCommonContext();
        unbind(context);
        // destroyPlayerAndStopService() already runs the next line of code, but run it again just
        // to make sure to stop the service even if playerService is null by any chance.
        context.stopService(new Intent(context, PlayerService.class));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder.PlayerServiceConnection,doPlayAfterConnect,void doPlayAfterConnect(boolean),"[167, 169]","{'A320': [(167, 169)]}",{'A320': 1.0},A320,,"        public void doPlayAfterConnect(final boolean playAfterConnection) {
            this.playAfterConnect = playAfterConnection;
        }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder.PlayerServiceConnection,onServiceDisconnected,void onServiceDisconnected(ComponentName),"[171, 179]","{'A290': [(175, 176)], 'A320': [(171, 174), (177, 179)]}","{'A290': 0.2222222222222222, 'A320': 0.7777777777777778}",A320,,"        @Override
        public void onServiceDisconnected(final ComponentName compName) {
            if (DEBUG) {
                Log.d(TAG, ""Player service is disconnected"");
            }

            final Context context = getCommonContext();
            unbind(context);
        }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder.PlayerServiceConnection,onServiceConnected,"void onServiceConnected(ComponentName,IBinder)","[181, 198]","{'A290': [(185, 185)], 'A320': [(181, 184), (187, 189), (191, 192), (198, 198)], 'A305': [(186, 186), (190, 190), (193, 197)]}","{'A290': 0.05555555555555555, 'A320': 0.5555555555555556, 'A305': 0.3888888888888889}",A320,,"        @Override
        public void onServiceConnected(final ComponentName compName, final IBinder service) {
            if (DEBUG) {
                Log.d(TAG, ""Player service is connected"");
            }
            final PlayerService.LocalBinder localBinder = (PlayerService.LocalBinder) service;

            playerService = localBinder.getService();
            if (listener != null) {
                listener.onServiceConnected(playerService);
            }
            startPlayerListener();
            // ^ will call listener.onPlayerConnected() down the line if there is an active player

            // notify the main activity that binding the service has completed, so that it can
            // open the bottom mini-player
            NavigationHelper.sendPlayerStartedEvent(localBinder.getService());
        }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,bind,void bind(Context),"[201, 210]","{'A290': [(202, 204), (207, 210)], 'A320': [(201, 201)], 'A305': [(205, 206)]}","{'A290': 0.7, 'A320': 0.1, 'A305': 0.2}",A290,,"    private void bind(final Context context) {
        if (DEBUG) {
            Log.d(TAG, ""bind() called"");
        }
        // BIND_AUTO_CREATE starts the service if it's not already running
        bound = bind(context, Context.BIND_AUTO_CREATE);
        if (!bound) {
            context.unbindService(serviceConnection);
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,tryBindIfNeeded,void tryBindIfNeeded(Context),"[212, 219]","{'A305': [(212, 219)]}",{'A305': 1.0},A305,,"    public void tryBindIfNeeded(final Context context) {
        if (!bound) {
            // flags=0 means the service will not be started if it does not already exist. In this
            // case the return value is not useful, as a value of ""true"" does not really indicate
            // that the service is going to be bound.
            bind(context, 0);
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,bind,"boolean bind(Context,int)","[221, 225]","{'A305': [(221, 225)]}",{'A305': 1.0},A305,,"    private boolean bind(final Context context, final int flags) {
        final Intent serviceIntent = new Intent(context, PlayerService.class);
        serviceIntent.setAction(PlayerService.BIND_PLAYER_HOLDER_ACTION);
        return context.bindService(serviceIntent, serviceConnection, flags);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,unbind,void unbind(Context),"[227, 242]","{'A290': [(228, 237), (239, 242)], 'A320': [(227, 227)], 'A305': [(238, 238)]}","{'A290': 0.875, 'A320': 0.0625, 'A305': 0.0625}",A290,,"    private void unbind(final Context context) {
        if (DEBUG) {
            Log.d(TAG, ""unbind() called"");
        }

        if (bound) {
            context.unbindService(serviceConnection);
            bound = false;
            stopPlayerListener();
            playerService = null;
            if (listener != null) {
                listener.onPlayerDisconnected();
                listener.onServiceDisconnected();
            }
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,startPlayerListener,void startPlayerListener(),"[244, 251]","{'A290': [(249, 249), (251, 251)], 'A320': [(244, 244)], 'A305': [(245, 248), (250, 250)]}","{'A290': 0.25, 'A320': 0.125, 'A305': 0.625}",A305,,"    private void startPlayerListener() {
        if (playerService != null) {
            // setting the player listener will take care of calling relevant callbacks if the
            // player in the service is (not) already active, also see playerStateListener below
            playerService.setPlayerListener(playerStateListener);
        }
        getPlayer().ifPresent(p -> p.setFragmentListener(internalListener));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,stopPlayerListener,void stopPlayerListener(),"[253, 258]","{'A290': [(256, 256), (258, 258)], 'A320': [(253, 253)], 'A305': [(254, 255), (257, 257)]}","{'A290': 0.3333333333333333, 'A320': 0.16666666666666666, 'A305': 0.5}",A305,,"    private void stopPlayerListener() {
        if (playerService != null) {
            playerService.setPlayerListener(null);
        }
        getPlayer().ifPresent(p -> p.removeFragmentListener(internalListener));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onViewCreated,void onViewCreated(),"[265, 270]","{'A305': [(265, 270)]}",{'A305': 1.0},A305,,"                @Override
                public void onViewCreated() {
                    if (listener != null) {
                        listener.onViewCreated();
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onFullscreenStateChanged,void onFullscreenStateChanged(boolean),"[272, 277]","{'A290': [(272, 277)]}",{'A290': 1.0},A290,,"                @Override
                public void onFullscreenStateChanged(final boolean fullscreen) {
                    if (listener != null) {
                        listener.onFullscreenStateChanged(fullscreen);
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onScreenRotationButtonClicked,void onScreenRotationButtonClicked(),"[279, 284]","{'A290': [(279, 284)]}",{'A290': 1.0},A290,,"                @Override
                public void onScreenRotationButtonClicked() {
                    if (listener != null) {
                        listener.onScreenRotationButtonClicked();
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onMoreOptionsLongClicked,void onMoreOptionsLongClicked(),"[286, 291]","{'A290': [(286, 291)]}",{'A290': 1.0},A290,,"                @Override
                public void onMoreOptionsLongClicked() {
                    if (listener != null) {
                        listener.onMoreOptionsLongClicked();
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onPlayerError,"void onPlayerError(PlaybackException,boolean)","[293, 299]","{'A290': [(293, 293), (296, 296), (298, 299)], 'A383': [(294, 295), (297, 297)]}","{'A290': 0.5714285714285714, 'A383': 0.42857142857142855}",A290,,"                @Override
                public void onPlayerError(final PlaybackException error,
                                          final boolean isCatchableException) {
                    if (listener != null) {
                        listener.onPlayerError(error, isCatchableException);
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,hideSystemUiIfNeeded,void hideSystemUiIfNeeded(),"[301, 306]","{'A290': [(301, 306)]}",{'A290': 1.0},A290,,"                @Override
                public void hideSystemUiIfNeeded() {
                    if (listener != null) {
                        listener.hideSystemUiIfNeeded();
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onQueueUpdate,void onQueueUpdate(PlayQueue),"[308, 313]","{'A290': [(308, 313)]}",{'A290': 1.0},A290,,"                @Override
                public void onQueueUpdate(final PlayQueue queue) {
                    if (listener != null) {
                        listener.onQueueUpdate(queue);
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onPlaybackUpdate,"void onPlaybackUpdate(int,int,boolean,PlaybackParameters)","[315, 323]","{'A290': [(315, 323)]}",{'A290': 1.0},A290,,"                @Override
                public void onPlaybackUpdate(final int state,
                                             final int repeatMode,
                                             final boolean shuffled,
                                             final PlaybackParameters parameters) {
                    if (listener != null) {
                        listener.onPlaybackUpdate(state, repeatMode, shuffled, parameters);
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onProgressUpdate,"void onProgressUpdate(int,int,int)","[325, 332]","{'A290': [(325, 332)]}",{'A290': 1.0},A290,,"                @Override
                public void onProgressUpdate(final int currentProgress,
                                             final int duration,
                                             final int bufferPercent) {
                    if (listener != null) {
                        listener.onProgressUpdate(currentProgress, duration, bufferPercent);
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onMetadataUpdate,"void onMetadataUpdate(StreamInfo,PlayQueue)","[334, 339]","{'A290': [(334, 339)]}",{'A290': 1.0},A290,,"                @Override
                public void onMetadataUpdate(final StreamInfo info, final PlayQueue queue) {
                    if (listener != null) {
                        listener.onMetadataUpdate(info, queue);
                    }
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerHolder.java,PlayerHolder,onServiceStopped,void onServiceStopped(),"[341, 347]","{'A290': [(341, 345), (347, 347)], 'A320': [(346, 346)]}","{'A290': 0.8571428571428571, 'A320': 0.14285714285714285}",A290,,"                @Override
                public void onServiceStopped() {
                    if (listener != null) {
                        listener.onServiceStopped();
                    }
                    unbind(getCommonContext());
                }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getLiveSsMediaSourceFactory,SsMediaSource.Factory getLiveSsMediaSourceFactory(),"[113, 115]","{'A310': [(113, 113), (115, 115)], 'A333': [(114, 114)]}","{'A310': 0.6666666666666666, 'A333': 0.3333333333333333}",A310,,"    public SsMediaSource.Factory getLiveSsMediaSourceFactory() {
        return getSSMediaSourceFactory().setLivePresentationDelayMs(LIVE_STREAM_EDGE_GAP_MILLIS);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getLiveHlsMediaSourceFactory,HlsMediaSource.Factory getLiveHlsMediaSourceFactory(),"[117, 125]","{'A310': [(117, 117), (125, 125)], 'A333': [(123, 124)], 'A293': [(120, 122)], 'A300': [(118, 119)]}","{'A310': 0.2222222222222222, 'A333': 0.2222222222222222, 'A293': 0.3333333333333333, 'A300': 0.2222222222222222}",A293,,"    public HlsMediaSource.Factory getLiveHlsMediaSourceFactory() {
        return new HlsMediaSource.Factory(cachelessDataSourceFactory)
                .setAllowChunklessPreparation(true)
                .setPlaylistTrackerFactory((dataSourceFactory, loadErrorHandlingPolicy,
                                            playlistParserFactory) ->
                        new DefaultHlsPlaylistTracker(dataSourceFactory, loadErrorHandlingPolicy,
                                playlistParserFactory,
                                PLAYLIST_STUCK_TARGET_DURATION_COEFFICIENT));
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getLiveDashMediaSourceFactory,DashMediaSource.Factory getLiveDashMediaSourceFactory(),"[127, 131]","{'A310': [(127, 127)], 'A333': [(130, 130)], 'A300': [(128, 129), (131, 131)]}","{'A310': 0.2, 'A333': 0.2, 'A300': 0.6}",A300,,"    public DashMediaSource.Factory getLiveDashMediaSourceFactory() {
        return new DashMediaSource.Factory(
                getDefaultDashChunkSourceFactory(cachelessDataSourceFactory),
                cachelessDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getHlsMediaSourceFactory,HlsMediaSource.Factory getHlsMediaSourceFactory(NonUriHlsDataSourceFactory.Builder),"[136, 144]","{'A310': [(144, 144)], 'A333': [(136, 143)]}","{'A310': 0.1111111111111111, 'A333': 0.8888888888888888}",A333,,"    public HlsMediaSource.Factory getHlsMediaSourceFactory(
            @Nullable final NonUriHlsDataSourceFactory.Builder hlsDataSourceFactoryBuilder) {
        if (hlsDataSourceFactoryBuilder != null) {
            hlsDataSourceFactoryBuilder.setDataSourceFactory(cacheDataSourceFactory);
            return new HlsMediaSource.Factory(hlsDataSourceFactoryBuilder.build());
        }

        return new HlsMediaSource.Factory(cacheDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getDashMediaSourceFactory,DashMediaSource.Factory getDashMediaSourceFactory(),"[146, 150]","{'A310': [(150, 150)], 'A305': [(148, 149)], 'A333': [(146, 147)]}","{'A310': 0.2, 'A305': 0.4, 'A333': 0.4}",A305,,"    public DashMediaSource.Factory getDashMediaSourceFactory() {
        return new DashMediaSource.Factory(
                getDefaultDashChunkSourceFactory(cacheDataSourceFactory),
                cacheDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getProgressiveMediaSourceFactory,ProgressiveMediaSource.Factory getProgressiveMediaSourceFactory(),"[152, 155]","{'A305': [(153, 154)], 'A333': [(152, 152), (155, 155)]}","{'A305': 0.5, 'A333': 0.5}",A305,,"    public ProgressiveMediaSource.Factory getProgressiveMediaSourceFactory() {
        return new ProgressiveMediaSource.Factory(cacheDataSourceFactory)
                .setContinueLoadingCheckIntervalBytes(progressiveLoadIntervalBytes);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getSSMediaSourceFactory,SsMediaSource.Factory getSSMediaSourceFactory(),"[157, 161]","{'A333': [(157, 161)]}",{'A333': 1.0},A333,,"    public SsMediaSource.Factory getSSMediaSourceFactory() {
        return new SsMediaSource.Factory(
                new DefaultSsChunkSource.Factory(cachelessDataSourceFactory),
                cachelessDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getSingleSampleMediaSourceFactory,SingleSampleMediaSource.Factory getSingleSampleMediaSourceFactory(),"[163, 165]","{'A305': [(164, 164)], 'A333': [(163, 163), (165, 165)]}","{'A305': 0.3333333333333333, 'A333': 0.6666666666666666}",A333,,"    public SingleSampleMediaSource.Factory getSingleSampleMediaSourceFactory() {
        return new SingleSampleMediaSource.Factory(cacheDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getYoutubeHlsMediaSourceFactory,HlsMediaSource.Factory getYoutubeHlsMediaSourceFactory(),"[170, 172]","{'A305': [(171, 172)], 'A333': [(170, 170)]}","{'A305': 0.6666666666666666, 'A333': 0.3333333333333333}",A305,,"    public HlsMediaSource.Factory getYoutubeHlsMediaSourceFactory() {
        return new HlsMediaSource.Factory(ytHlsCacheDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getYoutubeDashMediaSourceFactory,DashMediaSource.Factory getYoutubeDashMediaSourceFactory(),"[174, 178]","{'A310': [(178, 178)], 'A305': [(174, 177)]}","{'A310': 0.2, 'A305': 0.8}",A305,,"    public DashMediaSource.Factory getYoutubeDashMediaSourceFactory() {
        return new DashMediaSource.Factory(
                getDefaultDashChunkSourceFactory(ytDashCacheDataSourceFactory),
                ytDashCacheDataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getYoutubeProgressiveMediaSourceFactory,ProgressiveMediaSource.Factory getYoutubeProgressiveMediaSourceFactory(),"[180, 183]","{'A305': [(181, 182)], 'A333': [(180, 180), (183, 183)]}","{'A305': 0.5, 'A333': 0.5}",A305,,"    public ProgressiveMediaSource.Factory getYoutubeProgressiveMediaSourceFactory() {
        return new ProgressiveMediaSource.Factory(ytProgressiveDashCacheDataSourceFactory)
                .setContinueLoadingCheckIntervalBytes(progressiveLoadIntervalBytes);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getDefaultDashChunkSourceFactory,DefaultDashChunkSource.Factory getDefaultDashChunkSourceFactory(DataSource.Factory),"[188, 191]","{'A310': [(191, 191)], 'A305': [(188, 188)], 'A333': [(189, 190)]}","{'A310': 0.25, 'A305': 0.25, 'A333': 0.5}",A333,,"    private static DefaultDashChunkSource.Factory getDefaultDashChunkSourceFactory(
            final DataSource.Factory dataSourceFactory) {
        return new DefaultDashChunkSource.Factory(dataSourceFactory);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,getYoutubeHttpDataSourceFactory,"YoutubeHttpDataSource.Factory getYoutubeHttpDataSourceFactory(boolean,boolean)","[193, 199]","{'A305': [(193, 193), (195, 195), (198, 199)], 'A333': [(194, 194), (196, 197)]}","{'A305': 0.5714285714285714, 'A333': 0.42857142857142855}",A305,,"    private static YoutubeHttpDataSource.Factory getYoutubeHttpDataSourceFactory(
            final boolean rangeParameterEnabled,
            final boolean rnParameterEnabled) {
        return new YoutubeHttpDataSource.Factory()
                .setRangeParameterEnabled(rangeParameterEnabled)
                .setRnParameterEnabled(rnParameterEnabled);
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/PlayerDataSource.java,PlayerDataSource,instantiateCacheIfNeeded,void instantiateCacheIfNeeded(Context),"[201, 215]","{'A310': [(215, 215)], 'A305': [(201, 210), (213, 214)], 'A300': [(211, 212)]}","{'A310': 0.06666666666666667, 'A305': 0.8, 'A300': 0.13333333333333333}",A305,,"    private static void instantiateCacheIfNeeded(final Context context) {
        if (cache == null) {
            final File cacheDir = new File(context.getExternalCacheDir(), CACHE_FOLDER_NAME);
            if (DEBUG) {
                Log.d(TAG, ""instantiateCacheIfNeeded: cacheDir = "" + cacheDir.getAbsolutePath());
            }
            if (!cacheDir.exists() && !cacheDir.mkdir()) {
                Log.w(TAG, ""instantiateCacheIfNeeded: could not create cache dir"");
            }

            final LeastRecentlyUsedCacheEvictor evictor =
                    new LeastRecentlyUsedCacheEvictor(PlayerHelper.getPreferredCacheSize());
            cache = new SimpleCache(cacheDir, evictor, new StandaloneDatabaseProvider(context));
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LockManager.java,LockManager,acquireWifiAndCpu,void acquireWifiAndCpu(),"[25, 40]","{'A310': [(25, 26), (30, 33), (40, 40)], 'A294': [(27, 29), (34, 39)]}","{'A310': 0.4375, 'A294': 0.5625}",A294,,"    public void acquireWifiAndCpu() {
        Log.d(TAG, ""acquireWifiAndCpu() called"");
        if (wakeLock != null && wakeLock.isHeld() && wifiLock != null && wifiLock.isHeld()) {
            return;
        }

        wakeLock = powerManager.newWakeLock(PowerManager.PARTIAL_WAKE_LOCK, TAG);
        wifiLock = wifiManager.createWifiLock(WifiManager.WIFI_MODE_FULL, TAG);

        if (wakeLock != null) {
            wakeLock.acquire();
        }
        if (wifiLock != null) {
            wifiLock.acquire();
        }
    }
"
org.schabi.newpipe.player.helper,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/helper/LockManager.java,LockManager,releaseWifiAndCpu,void releaseWifiAndCpu(),"[42, 53]","{'A310': [(42, 43), (50, 53)], 'A294': [(44, 49)]}","{'A310': 0.5, 'A294': 0.5}",A310,,"    public void releaseWifiAndCpu() {
        Log.d(TAG, ""releaseWifiAndCpu() called"");
        if (wakeLock != null && wakeLock.isHeld()) {
            wakeLock.release();
        }
        if (wifiLock != null && wifiLock.isHeld()) {
            wifiLock.release();
        }

        wakeLock = null;
        wifiLock = null;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,,getMaybeStreamInfo,Optional<StreamInfo> getMaybeStreamInfo(),"[49, 52]","{'A383': [(49, 52)]}",{'A383': 1.0},A383,,"    @NonNull
    default Optional<StreamInfo> getMaybeStreamInfo() {
        return Optional.empty();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,,getMaybeQuality,Optional<Quality> getMaybeQuality(),"[54, 57]","{'A383': [(54, 57)]}",{'A383': 1.0},A383,,"    @NonNull
    default Optional<Quality> getMaybeQuality() {
        return Optional.empty();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,,getMaybeAudioTrack,Optional<AudioTrack> getMaybeAudioTrack(),"[59, 62]","{'A386': [(59, 62)]}",{'A386': 1.0},A386,,"    @NonNull
    default Optional<AudioTrack> getMaybeAudioTrack() {
        return Optional.empty();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,,from,Optional<MediaItemTag> from(MediaItem),"[68, 75]","{'A383': [(68, 69), (75, 75)], 'A295': [(70, 70), (73, 74)], 'A305': [(71, 72)]}","{'A383': 0.375, 'A295': 0.375, 'A305': 0.25}",A383,,"    @NonNull
    static Optional<MediaItemTag> from(@Nullable final MediaItem mediaItem) {
        return Optional.ofNullable(mediaItem)
                .map(item -> item.localConfiguration)
                .map(localConfiguration -> localConfiguration.tag)
                .filter(MediaItemTag.class::isInstance)
                .map(MediaItemTag.class::cast);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,,makeMediaId,String makeMediaId(),"[77, 80]","{'A383': [(77, 80)]}",{'A383': 1.0},A383,,"    @NonNull
    default String makeMediaId() {
        return UUID.randomUUID().toString() + ""["" + getTitle() + ""]"";
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,,asMediaItem,MediaItem asMediaItem(),"[82, 104]","{'A383': [(82, 83), (85, 85), (87, 92), (97, 100), (102, 104)], 'A299': [(93, 96), (101, 101)], 'A298': [(84, 84), (86, 86)]}","{'A383': 0.6956521739130435, 'A299': 0.21739130434782608, 'A298': 0.08695652173913043}",A383,,"    @NonNull
    default MediaItem asMediaItem() {
        final String thumbnailUrl = getThumbnailUrl();
        final MediaMetadata mediaMetadata = new MediaMetadata.Builder()
                .setArtworkUri(thumbnailUrl == null ? null : Uri.parse(thumbnailUrl))
                .setArtist(getUploaderName())
                .setDescription(getTitle())
                .setDisplayTitle(getTitle())
                .setTitle(getTitle())
                .build();

        final RequestMetadata requestMetaData = new RequestMetadata.Builder()
                .setMediaUri(Uri.parse(getStreamUrl()))
                .build();

        return MediaItem.fromUri(getStreamUrl())
                .buildUpon()
                .setMediaId(makeMediaId())
                .setMediaMetadata(mediaMetadata)
                .setRequestMetadata(requestMetaData)
                .setTag(this)
                .build();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,Quality,of,"Quality of(List<VideoStream>,int)","[117, 120]","{'A383': [(117, 120)]}",{'A383': 1.0},A383,,"        static Quality of(@NonNull final List<VideoStream> sortedVideoStreams,
                          final int selectedVideoStreamIndex) {
            return new Quality(sortedVideoStreams, selectedVideoStreamIndex);
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,Quality,getSortedVideoStreams,List<VideoStream> getSortedVideoStreams(),"[122, 125]","{'A383': [(122, 125)]}",{'A383': 1.0},A383,,"        @NonNull
        public List<VideoStream> getSortedVideoStreams() {
            return sortedVideoStreams;
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,Quality,getSelectedVideoStreamIndex,int getSelectedVideoStreamIndex(),"[127, 129]","{'A383': [(127, 129)]}",{'A383': 1.0},A383,,"        public int getSelectedVideoStreamIndex() {
            return selectedVideoStreamIndex;
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,Quality,getSelectedVideoStream,VideoStream getSelectedVideoStream(),"[131, 136]","{'A383': [(131, 136)]}",{'A383': 1.0},A383,,"        @Nullable
        public VideoStream getSelectedVideoStream() {
            return selectedVideoStreamIndex < 0
                    || selectedVideoStreamIndex >= sortedVideoStreams.size()
                    ? null : sortedVideoStreams.get(selectedVideoStreamIndex);
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,AudioTrack,of,"AudioTrack of(List<AudioStream>,int)","[150, 153]","{'A386': [(150, 153)]}",{'A386': 1.0},A386,,"        static AudioTrack of(@NonNull final List<AudioStream> audioStreams,
                             final int selectedAudioStreamIndex) {
            return new AudioTrack(audioStreams, selectedAudioStreamIndex);
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,AudioTrack,getAudioStreams,List<AudioStream> getAudioStreams(),"[155, 158]","{'A386': [(155, 158)]}",{'A386': 1.0},A386,,"        @NonNull
        public List<AudioStream> getAudioStreams() {
            return audioStreams;
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,AudioTrack,getSelectedAudioStreamIndex,int getSelectedAudioStreamIndex(),"[160, 162]","{'A386': [(160, 162)]}",{'A386': 1.0},A386,,"        public int getSelectedAudioStreamIndex() {
            return selectedAudioStreamIndex;
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/MediaItemTag.java,AudioTrack,getSelectedAudioStream,AudioStream getSelectedAudioStream(),"[164, 169]","{'A386': [(164, 169)]}",{'A386': 1.0},A386,,"        @Nullable
        public AudioStream getSelectedAudioStream() {
            return selectedAudioStreamIndex < 0
                    || selectedAudioStreamIndex >= audioStreams.size()
                    ? null : audioStreams.get(selectedAudioStreamIndex);
        }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getErrors,List<Exception> getErrors(),"[30, 34]","{'A383': [(30, 34)]}",{'A383': 1.0},A383,,"    @NonNull
    @Override
    public List<Exception> getErrors() {
        return Collections.emptyList();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getServiceId,int getServiceId(),"[36, 39]","{'A383': [(36, 39)]}",{'A383': 1.0},A383,,"    @Override
    public int getServiceId() {
        return Constants.NO_SERVICE_ID;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getTitle,String getTitle(),"[41, 44]","{'A383': [(41, 44)]}",{'A383': 1.0},A383,,"    @Override
    public String getTitle() {
        return UNKNOWN_VALUE_INTERNAL;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getUploaderName,String getUploaderName(),"[46, 49]","{'A383': [(46, 49)]}",{'A383': 1.0},A383,,"    @Override
    public String getUploaderName() {
        return UNKNOWN_VALUE_INTERNAL;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getDurationSeconds,long getDurationSeconds(),"[51, 54]","{'A383': [(51, 54)]}",{'A383': 1.0},A383,,"    @Override
    public long getDurationSeconds() {
        return 0;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getStreamUrl,String getStreamUrl(),"[56, 59]","{'A383': [(56, 59)]}",{'A383': 1.0},A383,,"    @Override
    public String getStreamUrl() {
        return UNKNOWN_VALUE_INTERNAL;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getThumbnailUrl,String getThumbnailUrl(),"[61, 64]","{'A383': [(61, 64)]}",{'A383': 1.0},A383,,"    @Override
    public String getThumbnailUrl() {
        return UNKNOWN_VALUE_INTERNAL;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getUploaderUrl,String getUploaderUrl(),"[66, 69]","{'A383': [(66, 69)]}",{'A383': 1.0},A383,,"    @Override
    public String getUploaderUrl() {
        return UNKNOWN_VALUE_INTERNAL;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getStreamType,StreamType getStreamType(),"[71, 74]","{'A383': [(71, 74)]}",{'A383': 1.0},A383,,"    @Override
    public StreamType getStreamType() {
        return StreamType.NONE;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,getMaybeExtras,Optional<T> getMaybeExtras(Class<T>),"[76, 79]","{'A383': [(76, 79)]}",{'A383': 1.0},A383,,"    @Override
    public <T> Optional<T> getMaybeExtras(@NonNull final Class<T> type) {
        return Optional.ofNullable(extras).map(type::cast);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/PlaceholderTag.java,PlaceholderTag,withExtras,MediaItemTag withExtras(T),"[81, 84]","{'A383': [(81, 84)]}",{'A383': 1.0},A383,,"    @Override
    public <T> MediaItemTag withExtras(@NonNull final T extra) {
        return new PlaceholderTag(extra);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,of,"ExceptionTag of(PlayQueueItem,List<Exception>)","[40, 43]","{'A383': [(40, 43)]}",{'A383': 1.0},A383,,"    public static ExceptionTag of(@NonNull final PlayQueueItem playQueueItem,
                                  @NonNull final List<Exception> errors) {
        return new ExceptionTag(playQueueItem, errors, null);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getErrors,List<Exception> getErrors(),"[45, 49]","{'A383': [(45, 49)]}",{'A383': 1.0},A383,,"    @NonNull
    @Override
    public List<Exception> getErrors() {
        return errors;
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getServiceId,int getServiceId(),"[51, 54]","{'A383': [(51, 54)]}",{'A383': 1.0},A383,,"    @Override
    public int getServiceId() {
        return item.getServiceId();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getTitle,String getTitle(),"[56, 59]","{'A383': [(56, 59)]}",{'A383': 1.0},A383,,"    @Override
    public String getTitle() {
        return item.getTitle();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getUploaderName,String getUploaderName(),"[61, 64]","{'A383': [(61, 64)]}",{'A383': 1.0},A383,,"    @Override
    public String getUploaderName() {
        return item.getUploader();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getDurationSeconds,long getDurationSeconds(),"[66, 69]","{'A383': [(66, 69)]}",{'A383': 1.0},A383,,"    @Override
    public long getDurationSeconds() {
        return item.getDuration();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getStreamUrl,String getStreamUrl(),"[71, 74]","{'A383': [(71, 74)]}",{'A383': 1.0},A383,,"    @Override
    public String getStreamUrl() {
        return item.getUrl();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getThumbnailUrl,String getThumbnailUrl(),"[76, 79]","{'A383': [(76, 77), (79, 79)], 'A305': [(78, 78)]}","{'A383': 0.75, 'A305': 0.25}",A383,,"    @Override
    public String getThumbnailUrl() {
        return ImageStrategy.choosePreferredImage(item.getThumbnails());
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getUploaderUrl,String getUploaderUrl(),"[81, 84]","{'A383': [(81, 84)]}",{'A383': 1.0},A383,,"    @Override
    public String getUploaderUrl() {
        return item.getUploaderUrl();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getStreamType,StreamType getStreamType(),"[86, 89]","{'A383': [(86, 89)]}",{'A383': 1.0},A383,,"    @Override
    public StreamType getStreamType() {
        return item.getStreamType();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,getMaybeExtras,Optional<T> getMaybeExtras(Class<T>),"[91, 94]","{'A383': [(91, 94)]}",{'A383': 1.0},A383,,"    @Override
    public <T> Optional<T> getMaybeExtras(@NonNull final Class<T> type) {
        return Optional.ofNullable(extras).map(type::cast);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/ExceptionTag.java,ExceptionTag,withExtras,MediaItemTag withExtras(T),"[96, 99]","{'A383': [(96, 99)]}",{'A383': 1.0},A383,,"    @Override
    public <T> MediaItemTag withExtras(@NonNull final T extra) {
        return new ExceptionTag(item, errors, extra);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,of,"StreamInfoTag of(StreamInfo,List<VideoStream>,int,List<AudioStream>,int)","[44, 53]","{'A383': [(44, 45), (49, 49)], 'A386': [(46, 48), (50, 53)]}","{'A383': 0.3, 'A386': 0.7}",A386,,"    public static StreamInfoTag of(@NonNull final StreamInfo streamInfo,
                                   @NonNull final List<VideoStream> sortedVideoStreams,
                                   final int selectedVideoStreamIndex,
                                   @NonNull final List<AudioStream> audioStreams,
                                   final int selectedAudioStreamIndex) {
        final Quality quality = Quality.of(sortedVideoStreams, selectedVideoStreamIndex);
        final AudioTrack audioTrack =
                AudioTrack.of(audioStreams, selectedAudioStreamIndex);
        return new StreamInfoTag(streamInfo, quality, audioTrack, null);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,of,"StreamInfoTag of(StreamInfo,List<AudioStream>,int)","[55, 61]","{'A383': [(61, 61)], 'A386': [(55, 60)]}","{'A383': 0.14285714285714285, 'A386': 0.8571428571428571}",A386,,"    public static StreamInfoTag of(@NonNull final StreamInfo streamInfo,
                                   @NonNull final List<AudioStream> audioStreams,
                                   final int selectedAudioStreamIndex) {
        final AudioTrack audioTrack =
                AudioTrack.of(audioStreams, selectedAudioStreamIndex);
        return new StreamInfoTag(streamInfo, null, audioTrack, null);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,of,StreamInfoTag of(StreamInfo),"[63, 65]","{'A383': [(63, 63), (65, 65)], 'A386': [(64, 64)]}","{'A383': 0.6666666666666666, 'A386': 0.3333333333333333}",A383,,"    public static StreamInfoTag of(@NonNull final StreamInfo streamInfo) {
        return new StreamInfoTag(streamInfo, null, null, null);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getErrors,List<Exception> getErrors(),"[67, 70]","{'A383': [(67, 70)]}",{'A383': 1.0},A383,,"    @Override
    public List<Exception> getErrors() {
        return Collections.emptyList();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getServiceId,int getServiceId(),"[72, 75]","{'A383': [(72, 75)]}",{'A383': 1.0},A383,,"    @Override
    public int getServiceId() {
        return streamInfo.getServiceId();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getTitle,String getTitle(),"[77, 80]","{'A383': [(77, 80)]}",{'A383': 1.0},A383,,"    @Override
    public String getTitle() {
        return streamInfo.getName();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getUploaderName,String getUploaderName(),"[82, 85]","{'A383': [(82, 85)]}",{'A383': 1.0},A383,,"    @Override
    public String getUploaderName() {
        return streamInfo.getUploaderName();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getDurationSeconds,long getDurationSeconds(),"[87, 90]","{'A383': [(87, 90)]}",{'A383': 1.0},A383,,"    @Override
    public long getDurationSeconds() {
        return streamInfo.getDuration();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getStreamUrl,String getStreamUrl(),"[92, 95]","{'A383': [(92, 95)]}",{'A383': 1.0},A383,,"    @Override
    public String getStreamUrl() {
        return streamInfo.getUrl();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getThumbnailUrl,String getThumbnailUrl(),"[97, 100]","{'A383': [(97, 98), (100, 100)], 'A305': [(99, 99)]}","{'A383': 0.75, 'A305': 0.25}",A383,,"    @Override
    public String getThumbnailUrl() {
        return ImageStrategy.choosePreferredImage(streamInfo.getThumbnails());
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getUploaderUrl,String getUploaderUrl(),"[102, 105]","{'A383': [(102, 105)]}",{'A383': 1.0},A383,,"    @Override
    public String getUploaderUrl() {
        return streamInfo.getUploaderUrl();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getStreamType,StreamType getStreamType(),"[107, 110]","{'A383': [(107, 110)]}",{'A383': 1.0},A383,,"    @Override
    public StreamType getStreamType() {
        return streamInfo.getStreamType();
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getMaybeStreamInfo,Optional<StreamInfo> getMaybeStreamInfo(),"[112, 116]","{'A383': [(112, 116)]}",{'A383': 1.0},A383,,"    @NonNull
    @Override
    public Optional<StreamInfo> getMaybeStreamInfo() {
        return Optional.of(streamInfo);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getMaybeQuality,Optional<Quality> getMaybeQuality(),"[118, 122]","{'A383': [(118, 122)]}",{'A383': 1.0},A383,,"    @NonNull
    @Override
    public Optional<Quality> getMaybeQuality() {
        return Optional.ofNullable(quality);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getMaybeAudioTrack,Optional<AudioTrack> getMaybeAudioTrack(),"[124, 128]","{'A386': [(124, 128)]}",{'A386': 1.0},A386,,"    @NonNull
    @Override
    public Optional<AudioTrack> getMaybeAudioTrack() {
        return Optional.ofNullable(audioTrack);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,getMaybeExtras,Optional<T> getMaybeExtras(Class<T>),"[130, 133]","{'A383': [(130, 133)]}",{'A383': 1.0},A383,,"    @Override
    public <T> Optional<T> getMaybeExtras(@NonNull final Class<T> type) {
        return Optional.ofNullable(extras).map(type::cast);
    }
"
org.schabi.newpipe.player.mediaitem,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/mediaitem/StreamInfoTag.java,StreamInfoTag,withExtras,StreamInfoTag withExtras(Object),"[135, 138]","{'A383': [(135, 136), (138, 138)], 'A386': [(137, 137)]}","{'A383': 0.75, 'A386': 0.25}",A383,,"    @Override
    public StreamInfoTag withExtras(@NonNull final Object extra) {
        return new StreamInfoTag(streamInfo, quality, audioTrack, extra);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationActionData.java,NotificationActionData,action,String action(),"[43, 46]","{'A305': [(43, 46)]}",{'A305': 1.0},A305,,"    @NonNull
    public String action() {
        return action;
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationActionData.java,NotificationActionData,name,String name(),"[48, 51]","{'A305': [(48, 51)]}",{'A305': 1.0},A305,,"    @NonNull
    public String name() {
        return name;
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationActionData.java,NotificationActionData,icon,int icon(),"[53, 56]","{'A305': [(53, 56)]}",{'A305': 1.0},A305,,"    @DrawableRes
    public int icon() {
        return icon;
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationActionData.java,NotificationActionData,fromNotificationActionEnum,"NotificationActionData fromNotificationActionEnum(Player,int)","[59, 190]","{'A305': [(59, 190)]}",{'A305': 1.0},A305,,"    @SuppressLint(""PrivateResource"") // we currently use Exoplayer's internal strings and icons
    @Nullable
    public static NotificationActionData fromNotificationActionEnum(
            @NonNull final Player player,
            @NotificationConstants.Action final int selectedAction
    ) {

        final int baseActionIcon = NotificationConstants.ACTION_ICONS[selectedAction];
        final Context ctx = player.getContext();

        switch (selectedAction) {
            case NotificationConstants.PREVIOUS:
                return new NotificationActionData(ACTION_PLAY_PREVIOUS,
                        ctx.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_previous_description), baseActionIcon);

            case NotificationConstants.NEXT:
                return new NotificationActionData(ACTION_PLAY_NEXT,
                        ctx.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_next_description), baseActionIcon);

            case NotificationConstants.REWIND:
                return new NotificationActionData(ACTION_FAST_REWIND,
                        ctx.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_rewind_description), baseActionIcon);

            case NotificationConstants.FORWARD:
                return new NotificationActionData(ACTION_FAST_FORWARD,
                        ctx.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_fastforward_description), baseActionIcon);

            case NotificationConstants.SMART_REWIND_PREVIOUS:
                if (player.getPlayQueue() != null && player.getPlayQueue().size() > 1) {
                    return new NotificationActionData(ACTION_PLAY_PREVIOUS,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_previous_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_notification_previous);
                } else {
                    return new NotificationActionData(ACTION_FAST_REWIND,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_rewind_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_controls_rewind);
                }

            case NotificationConstants.SMART_FORWARD_NEXT:
                if (player.getPlayQueue() != null && player.getPlayQueue().size() > 1) {
                    return new NotificationActionData(ACTION_PLAY_NEXT,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_next_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_notification_next);
                } else {
                    return new NotificationActionData(ACTION_FAST_FORWARD,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_fastforward_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_controls_fastforward);
                }

            case NotificationConstants.PLAY_PAUSE_BUFFERING:
                if (player.getCurrentState() == Player.STATE_PREFLIGHT
                        || player.getCurrentState() == Player.STATE_BLOCKED
                        || player.getCurrentState() == Player.STATE_BUFFERING) {
                    return new NotificationActionData(ACTION_PLAY_PAUSE,
                            ctx.getString(R.string.notification_action_buffering),
                            R.drawable.ic_hourglass_top);
                }

                // fallthrough
            case NotificationConstants.PLAY_PAUSE:
                if (player.getCurrentState() == Player.STATE_COMPLETED) {
                    return new NotificationActionData(ACTION_PLAY_PAUSE,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_pause_description),
                            R.drawable.ic_replay);
                } else if (player.isPlaying()
                        || player.getCurrentState() == Player.STATE_PREFLIGHT
                        || player.getCurrentState() == Player.STATE_BLOCKED
                        || player.getCurrentState() == Player.STATE_BUFFERING) {
                    return new NotificationActionData(ACTION_PLAY_PAUSE,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_pause_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_notification_pause);
                } else {
                    return new NotificationActionData(ACTION_PLAY_PAUSE,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_play_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_notification_play);
                }

            case NotificationConstants.REPEAT:
                if (player.getRepeatMode() == REPEAT_MODE_ALL) {
                    return new NotificationActionData(ACTION_REPEAT,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_repeat_all_description),
                            com.google.android.exoplayer2.ext.mediasession.R.drawable
                                    .exo_media_action_repeat_all);
                } else if (player.getRepeatMode() == REPEAT_MODE_ONE) {
                    return new NotificationActionData(ACTION_REPEAT,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_repeat_one_description),
                            com.google.android.exoplayer2.ext.mediasession.R.drawable
                                    .exo_media_action_repeat_one);
                } else /* player.getRepeatMode() == REPEAT_MODE_OFF */ {
                    return new NotificationActionData(ACTION_REPEAT,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_repeat_off_description),
                            com.google.android.exoplayer2.ext.mediasession.R.drawable
                                    .exo_media_action_repeat_off);
                }

            case NotificationConstants.SHUFFLE:
                if (player.getPlayQueue() != null && player.getPlayQueue().isShuffled()) {
                    return new NotificationActionData(ACTION_SHUFFLE,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_shuffle_on_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_controls_shuffle_on);
                } else {
                    return new NotificationActionData(ACTION_SHUFFLE,
                            ctx.getString(com.google.android.exoplayer2.ui.R.string
                                    .exo_controls_shuffle_off_description),
                            com.google.android.exoplayer2.ui.R.drawable.exo_controls_shuffle_off);
                }

            case NotificationConstants.CLOSE:
                return new NotificationActionData(ACTION_CLOSE, ctx.getString(R.string.close),
                        R.drawable.ic_close);

            case NotificationConstants.NOTHING:
            default:
                // do nothing
                return null;
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationActionData.java,NotificationActionData,equals,boolean equals(Object),"[193, 199]","{'A305': [(193, 199)]}",{'A305': 1.0},A305,,"    @Override
    public boolean equals(@Nullable final Object obj) {
        return (obj instanceof NotificationActionData other)
                && this.action.equals(other.action)
                && this.name.equals(other.name)
                && this.icon == other.icon;
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationActionData.java,NotificationActionData,hashCode,int hashCode(),"[201, 204]","{'A305': [(201, 204)]}",{'A305': 1.0},A305,,"    @Override
    public int hashCode() {
        return Objects.hash(action, name, icon);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,destroy,void destroy(),"[27, 31]","{'A305': [(27, 31)]}",{'A305': 1.0},A305,,"    @Override
    public void destroy() {
        super.destroy();
        notificationUtil.cancelNotificationAndStopForeground();
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onThumbnailLoaded,void onThumbnailLoaded(Bitmap),"[33, 37]","{'A305': [(33, 37)]}",{'A305': 1.0},A305,,"    @Override
    public void onThumbnailLoaded(@Nullable final Bitmap bitmap) {
        super.onThumbnailLoaded(bitmap);
        notificationUtil.updateThumbnail();
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onBlocked,void onBlocked(),"[39, 43]","{'A305': [(39, 43)]}",{'A305': 1.0},A305,,"    @Override
    public void onBlocked() {
        super.onBlocked();
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onPlaying,void onPlaying(),"[45, 49]","{'A305': [(45, 49)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlaying() {
        super.onPlaying();
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onBuffering,void onBuffering(),"[51, 57]","{'A305': [(51, 57)]}",{'A305': 1.0},A305,,"    @Override
    public void onBuffering() {
        super.onBuffering();
        if (notificationUtil.shouldUpdateBufferingSlot()) {
            notificationUtil.createNotificationIfNeededAndUpdate(false);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onPaused,void onPaused(),"[59, 70]","{'A305': [(59, 70)]}",{'A305': 1.0},A305,,"    @Override
    public void onPaused() {
        super.onPaused();

        // Remove running notification when user does not want minimization to background or popup
        if (PlayerHelper.getMinimizeOnExitAction(context) == MINIMIZE_ON_EXIT_MODE_NONE
                && player.videoPlayerSelected()) {
            notificationUtil.cancelNotificationAndStopForeground();
        } else {
            notificationUtil.createNotificationIfNeededAndUpdate(false);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onPausedSeek,void onPausedSeek(),"[72, 76]","{'A305': [(72, 76)]}",{'A305': 1.0},A305,,"    @Override
    public void onPausedSeek() {
        super.onPausedSeek();
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onCompleted,void onCompleted(),"[78, 82]","{'A305': [(78, 82)]}",{'A305': 1.0},A305,,"    @Override
    public void onCompleted() {
        super.onCompleted();
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onRepeatModeChanged,void onRepeatModeChanged(int),"[84, 88]","{'A305': [(84, 88)]}",{'A305': 1.0},A305,,"    @Override
    public void onRepeatModeChanged(@RepeatMode final int repeatMode) {
        super.onRepeatModeChanged(repeatMode);
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onShuffleModeEnabledChanged,void onShuffleModeEnabledChanged(boolean),"[90, 94]","{'A305': [(90, 94)]}",{'A305': 1.0},A305,,"    @Override
    public void onShuffleModeEnabledChanged(final boolean shuffleModeEnabled) {
        super.onShuffleModeEnabledChanged(shuffleModeEnabled);
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onBroadcastReceived,void onBroadcastReceived(Intent),"[96, 102]","{'A305': [(96, 102)]}",{'A305': 1.0},A305,,"    @Override
    public void onBroadcastReceived(final Intent intent) {
        super.onBroadcastReceived(intent);
        if (ACTION_RECREATE_NOTIFICATION.equals(intent.getAction())) {
            notificationUtil.createNotificationIfNeededAndUpdate(true);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onMetadataChanged,void onMetadataChanged(StreamInfo),"[104, 108]","{'A305': [(104, 108)]}",{'A305': 1.0},A305,,"    @Override
    public void onMetadataChanged(@NonNull final StreamInfo info) {
        super.onMetadataChanged(info);
        notificationUtil.createNotificationIfNeededAndUpdate(true);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,onPlayQueueEdited,void onPlayQueueEdited(),"[110, 114]","{'A305': [(110, 114)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlayQueueEdited() {
        super.onPlayQueueEdited();
        notificationUtil.createNotificationIfNeededAndUpdate(false);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationPlayerUi.java,NotificationPlayerUi,createNotificationAndStartForeground,void createNotificationAndStartForeground(),"[116, 118]","{'A333': [(116, 118)]}",{'A333': 1.0},A333,,"    public void createNotificationAndStartForeground() {
        notificationUtil.createNotificationAndStartForeground();
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,createNotificationIfNeededAndUpdate,void createNotificationIfNeededAndUpdate(boolean),"[66, 72]","{'A305': [(66, 68), (70, 71)], 'A400': [(69, 69), (72, 72)]}","{'A305': 0.7142857142857143, 'A400': 0.2857142857142857}",A305,,"    public synchronized void createNotificationIfNeededAndUpdate(final boolean forceRecreate) {
        if (forceRecreate || notificationBuilder == null) {
            notificationBuilder = createNotification();
        }
        updateNotification();
        notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,updateThumbnail,void updateThumbnail(),"[74, 85]","{'A305': [(74, 85)]}",{'A305': 1.0},A305,,"    public synchronized void updateThumbnail() {
        if (notificationBuilder != null) {
            if (DEBUG) {
                Log.d(TAG, ""updateThumbnail() called with thumbnail = ["" + Integer.toHexString(
                        Optional.ofNullable(player.getThumbnail()).map(Objects::hashCode).orElse(0))
                        + ""], title = ["" + player.getVideoTitle() + ""]"");
            }

            setLargeIcon(notificationBuilder);
            notificationManager.notify(NOTIFICATION_ID, notificationBuilder.build());
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,createNotification,NotificationCompat.Builder createNotification(),"[87, 127]","{'A305': [(87, 119), (122, 126)], 'A400': [(127, 127)], 'A295': [(120, 121)]}","{'A305': 0.926829268292683, 'A400': 0.024390243902439025, 'A295': 0.04878048780487805}",A305,,"    private synchronized NotificationCompat.Builder createNotification() {
        if (DEBUG) {
            Log.d(TAG, ""createNotification()"");
        }
        notificationManager = NotificationManagerCompat.from(player.getContext());
        final NotificationCompat.Builder builder =
                new NotificationCompat.Builder(player.getContext(),
                player.getContext().getString(R.string.notification_channel_id));
        final MediaStyle mediaStyle = new MediaStyle();

        // setup media style (compact notification slots and media session)
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
            // notification actions are ignored on Android 13+, and are replaced by code in
            // MediaSessionPlayerUi
            final int[] compactSlots = initializeNotificationSlots();
            mediaStyle.setShowActionsInCompactView(compactSlots);
        }
        player.UIs()
                .get(MediaSessionPlayerUi.class)
                .flatMap(MediaSessionPlayerUi::getSessionToken)
                .ifPresent(mediaStyle::setMediaSession);

        // setup notification builder
        builder.setStyle(mediaStyle)
                .setPriority(NotificationCompat.PRIORITY_HIGH)
                .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                .setCategory(NotificationCompat.CATEGORY_TRANSPORT)
                .setShowWhen(false)
                .setSmallIcon(R.drawable.ic_newpipe_triangle_white)
                .setColor(ContextCompat.getColor(player.getContext(),
                        R.color.dark_background_color))
                .setColorized(player.getPrefs().getBoolean(
                        player.getContext().getString(R.string.notification_colorize_key), true))
                .setDeleteIntent(PendingIntentCompat.getBroadcast(player.getContext(),
                        NOTIFICATION_ID, new Intent(ACTION_CLOSE), FLAG_UPDATE_CURRENT, false));

        // set the initial value for the video thumbnail, updatable with updateNotificationThumbnail
        setLargeIcon(builder);

        return builder;
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,updateNotification,void updateNotification(),"[132, 149]","{'A305': [(132, 137), (140, 149)], 'A295': [(138, 139)]}","{'A305': 0.8888888888888888, 'A295': 0.1111111111111111}",A305,,"    private synchronized void updateNotification() {
        if (DEBUG) {
            Log.d(TAG, ""updateNotification()"");
        }

        // also update content intent, in case the user switched players
        notificationBuilder.setContentIntent(PendingIntentCompat.getActivity(player.getContext(),
                NOTIFICATION_ID, getIntentForNotification(), FLAG_UPDATE_CURRENT, false));
        notificationBuilder.setContentTitle(player.getVideoTitle());
        notificationBuilder.setContentText(player.getUploaderName());
        notificationBuilder.setTicker(player.getVideoTitle());

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.TIRAMISU) {
            // notification actions are ignored on Android 13+, and are replaced by code in
            // MediaSessionPlayerUi
            updateActions(notificationBuilder);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,shouldUpdateBufferingSlot,boolean shouldUpdateBufferingSlot(),"[152, 168]","{'A305': [(152, 168)]}",{'A305': 1.0},A305,,"    @SuppressLint(""RestrictedApi"")
    public boolean shouldUpdateBufferingSlot() {
        if (notificationBuilder == null) {
            // if there is no notification active, there is no point in updating it
            return false;
        } else if (notificationBuilder.mActions.size() < 3) {
            // this should never happen, but let's make sure notification actions are populated
            return true;
        }

        // only second and third slot could contain PLAY_PAUSE_BUFFERING, update them only if they
        // are not already in the buffering state (the only one with a null action intent)
        return (notificationSlots[1] == NotificationConstants.PLAY_PAUSE_BUFFERING
                && notificationBuilder.mActions.get(1).actionIntent != null)
                || (notificationSlots[2] == NotificationConstants.PLAY_PAUSE_BUFFERING
                && notificationBuilder.mActions.get(2).actionIntent != null);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,createNotificationAndStartForeground,void createNotificationAndStartForeground(),"[171, 183]","{'A305': [(171, 182)], 'A400': [(183, 183)]}","{'A305': 0.9230769230769231, 'A400': 0.07692307692307693}",A305,,"    public void createNotificationAndStartForeground() {
        if (notificationBuilder == null) {
            notificationBuilder = createNotification();
        }
        updateNotification();

        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            player.getService().startForeground(NOTIFICATION_ID, notificationBuilder.build(),
                    ServiceInfo.FOREGROUND_SERVICE_TYPE_MEDIA_PLAYBACK);
        } else {
            player.getService().startForeground(NOTIFICATION_ID, notificationBuilder.build());
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,cancelNotificationAndStopForeground,void cancelNotificationAndStopForeground(),"[185, 193]","{'A305': [(185, 192)], 'A400': [(193, 193)]}","{'A305': 0.8888888888888888, 'A400': 0.1111111111111111}",A305,,"    public void cancelNotificationAndStopForeground() {
        ServiceCompat.stopForeground(player.getService(), ServiceCompat.STOP_FOREGROUND_REMOVE);

        if (notificationManager != null) {
            notificationManager.cancel(NOTIFICATION_ID);
        }
        notificationManager = null;
        notificationBuilder = null;
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,initializeNotificationSlots,int[] initializeNotificationSlots(),"[209, 229]","{'A305': [(209, 228)], 'A400': [(229, 229)]}","{'A305': 0.9523809523809523, 'A400': 0.047619047619047616}",A305,,"    private int[] initializeNotificationSlots() {
        final Collection<Integer> settingsCompactSlots = NotificationConstants
                .getCompactSlotsFromPreferences(player.getContext(), player.getPrefs());
        final List<Integer> adjustedCompactSlots = new ArrayList<>();

        int nonNothingIndex = 0;
        for (int i = 0; i < 5; ++i) {
            notificationSlots[i] = player.getPrefs().getInt(
                    player.getContext().getString(NotificationConstants.SLOT_PREF_KEYS[i]),
                    NotificationConstants.SLOT_DEFAULTS[i]);

            if (notificationSlots[i] != NotificationConstants.NOTHING) {
                if (settingsCompactSlots.contains(i)) {
                    adjustedCompactSlots.add(nonNothingIndex);
                }
                nonNothingIndex += 1;
            }
        }

        return adjustedCompactSlots.stream().mapToInt(Integer::intValue).toArray();
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,updateActions,void updateActions(NotificationCompat.Builder),"[231, 237]","{'A305': [(231, 237)]}",{'A305': 1.0},A305,,"    @SuppressLint(""RestrictedApi"")
    private void updateActions(final NotificationCompat.Builder builder) {
        builder.mActions.clear();
        for (int i = 0; i < 5; ++i) {
            addAction(builder, notificationSlots[i]);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,addAction,"void addAction(NotificationCompat.Builder,int)","[239, 250]","{'A305': [(239, 249)], 'A400': [(250, 250)]}","{'A305': 0.9166666666666666, 'A400': 0.08333333333333333}",A305,,"    private void addAction(final NotificationCompat.Builder builder,
                           @NotificationConstants.Action final int slot) {
        @Nullable final NotificationActionData data =
                NotificationActionData.fromNotificationActionEnum(player, slot);
        if (data == null) {
            return;
        }

        final PendingIntent intent = PendingIntentCompat.getBroadcast(player.getContext(),
                NOTIFICATION_ID, new Intent(data.action()), FLAG_UPDATE_CURRENT, false);
        builder.addAction(new NotificationCompat.Action(data.icon(), data.name(), intent));
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,getIntentForNotification,Intent getIntentForNotification(),"[252, 265]","{'A305': [(252, 264)], 'A400': [(265, 265)]}","{'A305': 0.9285714285714286, 'A400': 0.07142857142857142}",A305,,"    private Intent getIntentForNotification() {
        if (player.audioPlayerSelected() || player.popupPlayerSelected()) {
            // Means we play in popup or audio only. Let's show the play queue
            return NavigationHelper.getPlayQueueActivityIntent(player.getContext());
        } else {
            // We are playing in fragment. Don't open another activity just show fragment. That's it
            final Intent intent = NavigationHelper.getPlayerIntent(
                    player.getContext(), MainActivity.class, null, true);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            intent.setAction(Intent.ACTION_MAIN);
            intent.addCategory(Intent.CATEGORY_LAUNCHER);
            return intent;
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,setLargeIcon,void setLargeIcon(NotificationCompat.Builder),"[272, 290]","{'A305': [(272, 277), (279, 290)], 'A295': [(278, 278)]}","{'A305': 0.9473684210526315, 'A295': 0.05263157894736842}",A305,,"    private void setLargeIcon(final NotificationCompat.Builder builder) {
        final boolean showThumbnail = player.getPrefs().getBoolean(
                player.getContext().getString(R.string.show_thumbnail_key), true);
        final Bitmap thumbnail = player.getThumbnail();
        if (thumbnail == null || !showThumbnail) {
            // since the builder is reused, make sure the thumbnail is unset if there is not one
            builder.setLargeIcon((Bitmap) null);
            return;
        }

        final boolean scaleImageToSquareAspectRatio = player.getPrefs().getBoolean(
                player.getContext().getString(R.string.scale_to_square_image_in_notifications_key),
                false);
        if (scaleImageToSquareAspectRatio) {
            builder.setLargeIcon(getBitmapWithSquareAspectRatio(thumbnail));
        } else {
            builder.setLargeIcon(thumbnail);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationUtil.java,NotificationUtil,getBitmapWithSquareAspectRatio,Bitmap getBitmapWithSquareAspectRatio(Bitmap),"[292, 301]","{'A305': [(292, 292), (301, 301)], 'A401': [(293, 300)]}","{'A305': 0.2, 'A401': 0.8}",A401,,"    private Bitmap getBitmapWithSquareAspectRatio(@NonNull final Bitmap bitmap) {
        // Find the smaller dimension and then take a center portion of the image that
        // has that size.
        final int w = bitmap.getWidth();
        final int h = bitmap.getHeight();
        final int dstSize = Math.min(w, h);
        final int x = (w - dstSize) / 2;
        final int y = (h - dstSize) / 2;
        return Bitmap.createBitmap(bitmap, x, y, dstSize, dstSize);
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationConstants.java,NotificationConstants,getActionName,"String getActionName(Context,int)","[122, 170]","{'A305': [(122, 170)]}",{'A305': 1.0},A305,,"    public static String getActionName(@NonNull final Context context, @Action final int action) {
        switch (action) {
            case PREVIOUS:
                return context.getString(com.google.android.exoplayer2.ui.R.string
                        .exo_controls_previous_description);
            case NEXT:
                return context.getString(com.google.android.exoplayer2.ui.R.string
                        .exo_controls_next_description);
            case REWIND:
                return context.getString(com.google.android.exoplayer2.ui.R.string
                        .exo_controls_rewind_description);
            case FORWARD:
                return context.getString(com.google.android.exoplayer2.ui.R.string
                        .exo_controls_fastforward_description);
            case SMART_REWIND_PREVIOUS:
                return Localization.concatenateStrings(
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_rewind_description),
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_previous_description));
            case SMART_FORWARD_NEXT:
                return Localization.concatenateStrings(
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_fastforward_description),
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_next_description));
            case PLAY_PAUSE:
                return Localization.concatenateStrings(
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_play_description),
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_pause_description));
            case PLAY_PAUSE_BUFFERING:
                return Localization.concatenateStrings(
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_play_description),
                        context.getString(com.google.android.exoplayer2.ui.R.string
                                .exo_controls_pause_description),
                        context.getString(R.string.notification_action_buffering));
            case REPEAT:
                return context.getString(R.string.notification_action_repeat);
            case SHUFFLE:
                return context.getString(R.string.notification_action_shuffle);
            case CLOSE:
                return context.getString(R.string.close);
            case NOTHING: default:
                return context.getString(R.string.notification_action_nothing);
        }
    }
"
org.schabi.newpipe.player.notification,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/notification/NotificationConstants.java,NotificationConstants,getCompactSlotsFromPreferences,"Collection<Integer> getCompactSlotsFromPreferences(Context,SharedPreferences)","[178, 197]","{'A305': [(178, 197)]}",{'A305': 1.0},A305,,"    public static Collection<Integer> getCompactSlotsFromPreferences(
            @NonNull final Context context,
            final SharedPreferences sharedPreferences) {
        final SortedSet<Integer> compactSlots = new TreeSet<>();
        for (int i = 0; i < 3; i++) {
            final int compactSlot = sharedPreferences.getInt(
                    context.getString(SLOT_COMPACT_PREF_KEYS[i]), Integer.MAX_VALUE);

            if (compactSlot == Integer.MAX_VALUE) {
                // settings not yet populated, return default values
                return SLOT_COMPACT_DEFAULTS;
            }

            if (compactSlot >= 0) {
                // compact slot is < 0 if there are less than 3 checked checkboxes
                compactSlots.add(compactSlot);
            }
        }
        return compactSlots;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,isComplete,boolean isComplete(),"[61, 64]","{'A310': [(61, 64)]}",{'A310': 1.0},A310,,"    @Override
    public boolean isComplete() {
        return isComplete;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,getHeadListObserver,SingleObserver<T> getHeadListObserver(),"[66, 103]","{'A310': [(66, 66), (68, 68), (72, 78), (80, 80), (85, 85), (91, 96), (98, 99), (101, 103)], 'A294': [(69, 71), (79, 79), (81, 84), (97, 97)], 'A305': [(67, 67), (88, 88)], 'A298': [(86, 87), (89, 90)], 'A295': [(100, 100)]}","{'A310': 0.5789473684210527, 'A294': 0.23684210526315788, 'A305': 0.05263157894736842, 'A298': 0.10526315789473684, 'A295': 0.02631578947368421}",A310,,"    SingleObserver<T> getHeadListObserver() {
        return new SingleObserver<>() {
            @Override
            public void onSubscribe(@NonNull final Disposable d) {
                if (isComplete || !isInitial || (fetchReactor != null
                        && !fetchReactor.isDisposed())) {
                    d.dispose();
                } else {
                    fetchReactor = d;
                }
            }

            @Override
            public void onSuccess(@NonNull final T result) {
                isInitial = false;
                if (!result.hasNextPage()) {
                    isComplete = true;
                }
                nextPage = result.getNextPage();

                append(extractListItems(result.getRelatedItems()
                        .stream()
                        .filter(StreamInfoItem.class::isInstance)
                        .map(StreamInfoItem.class::cast)
                        .collect(Collectors.toList())));

                fetchReactor.dispose();
                fetchReactor = null;
            }

            @Override
            public void onError(@NonNull final Throwable e) {
                Log.e(getTag(), ""Error fetching more playlist, marking playlist as complete."", e);
                isComplete = true;
                notifyChange();
            }
        };
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,onSubscribe,void onSubscribe(Disposable),"[68, 76]","{'A310': [(68, 68), (72, 76)], 'A294': [(69, 71)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"            @Override
            public void onSubscribe(@NonNull final Disposable d) {
                if (isComplete || !isInitial || (fetchReactor != null
                        && !fetchReactor.isDisposed())) {
                    d.dispose();
                } else {
                    fetchReactor = d;
                }
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,onSuccess,void onSuccess(T),"[78, 94]","{'A310': [(78, 78), (80, 80), (85, 85), (91, 94)], 'A294': [(79, 79), (81, 84)], 'A305': [(88, 88)], 'A298': [(86, 87), (89, 90)]}","{'A310': 0.4117647058823529, 'A294': 0.29411764705882354, 'A305': 0.058823529411764705, 'A298': 0.23529411764705882}",A310,,"            @Override
            public void onSuccess(@NonNull final T result) {
                isInitial = false;
                if (!result.hasNextPage()) {
                    isComplete = true;
                }
                nextPage = result.getNextPage();

                append(extractListItems(result.getRelatedItems()
                        .stream()
                        .filter(StreamInfoItem.class::isInstance)
                        .map(StreamInfoItem.class::cast)
                        .collect(Collectors.toList())));

                fetchReactor.dispose();
                fetchReactor = null;
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,onError,void onError(Throwable),"[96, 101]","{'A310': [(96, 96), (98, 99), (101, 101)], 'A294': [(97, 97)], 'A295': [(100, 100)]}","{'A310': 0.6666666666666666, 'A294': 0.16666666666666666, 'A295': 0.16666666666666666}",A310,,"            @Override
            public void onError(@NonNull final Throwable e) {
                Log.e(getTag(), ""Error fetching more playlist, marking playlist as complete."", e);
                isComplete = true;
                notifyChange();
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,getNextPageObserver,SingleObserver<ListExtractor.InfoItemsPage<? extends InfoItem>> getNextPageObserver(),"[105, 142]","{'A310': [(107, 107), (111, 117), (124, 124), (130, 135), (137, 138), (140, 142)], 'A294': [(108, 110), (120, 123), (136, 136)], 'A305': [(105, 106), (118, 119), (127, 127)], 'A298': [(125, 126), (128, 129)], 'A295': [(139, 139)]}","{'A310': 0.5263157894736842, 'A294': 0.21052631578947367, 'A305': 0.13157894736842105, 'A298': 0.10526315789473684, 'A295': 0.02631578947368421}",A310,,"    SingleObserver<ListExtractor.InfoItemsPage<? extends InfoItem>> getNextPageObserver() {
        return new SingleObserver<>() {
            @Override
            public void onSubscribe(@NonNull final Disposable d) {
                if (isComplete || isInitial || (fetchReactor != null
                        && !fetchReactor.isDisposed())) {
                    d.dispose();
                } else {
                    fetchReactor = d;
                }
            }

            @Override
            public void onSuccess(
                    @NonNull final ListExtractor.InfoItemsPage<? extends InfoItem> result) {
                if (!result.hasNextPage()) {
                    isComplete = true;
                }
                nextPage = result.getNextPage();

                append(extractListItems(result.getItems()
                        .stream()
                        .filter(StreamInfoItem.class::isInstance)
                        .map(StreamInfoItem.class::cast)
                        .collect(Collectors.toList())));

                fetchReactor.dispose();
                fetchReactor = null;
            }

            @Override
            public void onError(@NonNull final Throwable e) {
                Log.e(getTag(), ""Error fetching more playlist, marking playlist as complete."", e);
                isComplete = true;
                notifyChange();
            }
        };
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,onSubscribe,void onSubscribe(Disposable),"[107, 115]","{'A310': [(107, 107), (111, 115)], 'A294': [(108, 110)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"            @Override
            public void onSubscribe(@NonNull final Disposable d) {
                if (isComplete || isInitial || (fetchReactor != null
                        && !fetchReactor.isDisposed())) {
                    d.dispose();
                } else {
                    fetchReactor = d;
                }
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,onSuccess,void onSuccess(ListExtractor.InfoItemsPage<? extends InfoItem>),"[117, 133]","{'A310': [(117, 117), (124, 124), (130, 133)], 'A294': [(120, 123)], 'A305': [(118, 119), (127, 127)], 'A298': [(125, 126), (128, 129)]}","{'A310': 0.35294117647058826, 'A294': 0.23529411764705882, 'A305': 0.17647058823529413, 'A298': 0.23529411764705882}",A310,,"            @Override
            public void onSuccess(
                    @NonNull final ListExtractor.InfoItemsPage<? extends InfoItem> result) {
                if (!result.hasNextPage()) {
                    isComplete = true;
                }
                nextPage = result.getNextPage();

                append(extractListItems(result.getItems()
                        .stream()
                        .filter(StreamInfoItem.class::isInstance)
                        .map(StreamInfoItem.class::cast)
                        .collect(Collectors.toList())));

                fetchReactor.dispose();
                fetchReactor = null;
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,onError,void onError(Throwable),"[135, 140]","{'A310': [(135, 135), (137, 138), (140, 140)], 'A294': [(136, 136)], 'A295': [(139, 139)]}","{'A310': 0.6666666666666666, 'A294': 0.16666666666666666, 'A295': 0.16666666666666666}",A310,,"            @Override
            public void onError(@NonNull final Throwable e) {
                Log.e(getTag(), ""Error fetching more playlist, marking playlist as complete."", e);
                isComplete = true;
                notifyChange();
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,dispose,void dispose(),"[144, 151]","{'A310': [(144, 146), (149, 149), (151, 151)], 'A294': [(147, 148), (150, 150)]}","{'A310': 0.625, 'A294': 0.375}",A310,,"    @Override
    public void dispose() {
        super.dispose();
        if (fetchReactor != null) {
            fetchReactor.dispose();
        }
        fetchReactor = null;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/AbstractInfoPlayQueue.java,AbstractInfoPlayQueue,extractListItems,List<PlayQueueItem> extractListItems(List<StreamInfoItem>),"[153, 155]","{'A294': [(155, 155)], 'A305': [(154, 154)], 'A298': [(153, 153)]}","{'A294': 0.3333333333333333, 'A305': 0.3333333333333333, 'A298': 0.3333333333333333}",A294,,"    private static List<PlayQueueItem> extractListItems(final List<StreamInfoItem> infoItems) {
        return infoItems.stream().map(PlayQueueItem::new).collect(Collectors.toList());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/SinglePlayQueue.java,SinglePlayQueue,playQueueItemsOf,List<PlayQueueItem> playQueueItemsOf(List<StreamInfoItem>),"[29, 35]","{'A390': [(35, 35)], 'A298': [(29, 29)], 'A310': [(31, 34)], 'A294': [(30, 30)]}","{'A390': 0.14285714285714285, 'A298': 0.14285714285714285, 'A310': 0.5714285714285714, 'A294': 0.14285714285714285}",A310,,"    private static List<PlayQueueItem> playQueueItemsOf(@NonNull final List<StreamInfoItem> items) {
        final List<PlayQueueItem> playQueueItems = new ArrayList<>(items.size());
        for (final StreamInfoItem item : items) {
            playQueueItems.add(new PlayQueueItem(item));
        }
        return playQueueItems;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/SinglePlayQueue.java,SinglePlayQueue,isComplete,boolean isComplete(),"[37, 40]","{'A390': [(37, 40)]}",{'A390': 1.0},A390,,"    @Override
    public boolean isComplete() {
        return true;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/SinglePlayQueue.java,SinglePlayQueue,fetch,void fetch(),"[42, 46]","{'A390': [(42, 42)], 'A298': [(44, 45)], 'A294': [(43, 43), (46, 46)]}","{'A390': 0.2, 'A298': 0.4, 'A294': 0.4}",A298,,"    @Override
    public void fetch() {
        // Item was already passed in constructor.
        // No further items need to be fetched as this is a PlayQueue with only one item
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/SelectEvent.java,SelectEvent,type,PlayQueueEventType type(),"[12, 15]","{'A294': [(12, 15)]}",{'A294': 1.0},A294,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.SELECT;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/SelectEvent.java,SelectEvent,getOldIndex,int getOldIndex(),"[17, 19]","{'A390': [(17, 19)]}",{'A390': 1.0},A390,,"    public int getOldIndex() {
        return oldIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/SelectEvent.java,SelectEvent,getNewIndex,int getNewIndex(),"[21, 23]","{'A390': [(21, 23)]}",{'A390': 1.0},A390,,"    public int getNewIndex() {
        return newIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/RemoveEvent.java,RemoveEvent,type,PlayQueueEventType type(),"[12, 15]","{'A294': [(12, 15)]}",{'A294': 1.0},A294,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.REMOVE;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/RemoveEvent.java,RemoveEvent,getQueueIndex,int getQueueIndex(),"[17, 19]","{'A310': [(17, 19)]}",{'A310': 1.0},A310,,"    public int getQueueIndex() {
        return queueIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/RemoveEvent.java,RemoveEvent,getRemoveIndex,int getRemoveIndex(),"[21, 23]","{'A390': [(23, 23)], 'A310': [(21, 22)]}","{'A390': 0.3333333333333333, 'A310': 0.6666666666666666}",A310,,"    public int getRemoveIndex() {
        return removeIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/MoveEvent.java,MoveEvent,type,PlayQueueEventType type(),"[12, 15]","{'A294': [(12, 15)]}",{'A294': 1.0},A294,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.MOVE;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/MoveEvent.java,MoveEvent,getFromIndex,int getFromIndex(),"[17, 19]","{'A390': [(17, 19)]}",{'A390': 1.0},A390,,"    public int getFromIndex() {
        return fromIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/MoveEvent.java,MoveEvent,getToIndex,int getToIndex(),"[21, 23]","{'A390': [(21, 23)]}",{'A390': 1.0},A390,,"    public int getToIndex() {
        return toIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/AppendEvent.java,AppendEvent,type,PlayQueueEventType type(),"[10, 13]","{'A390': [(10, 10), (13, 13)], 'A310': [(11, 12)]}","{'A390': 0.5, 'A310': 0.5}",A390,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.APPEND;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/AppendEvent.java,AppendEvent,getAmount,int getAmount(),"[15, 17]","{'A390': [(15, 17)]}",{'A390': 1.0},A390,,"    public int getAmount() {
        return amount;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/ErrorEvent.java,ErrorEvent,type,PlayQueueEventType type(),"[12, 15]","{'A294': [(12, 15)]}",{'A294': 1.0},A294,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.ERROR;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/ErrorEvent.java,ErrorEvent,getErrorIndex,int getErrorIndex(),"[17, 19]","{'A310': [(17, 19)]}",{'A310': 1.0},A310,,"    public int getErrorIndex() {
        return errorIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/ErrorEvent.java,ErrorEvent,getQueueIndex,int getQueueIndex(),"[21, 23]","{'A390': [(23, 23)], 'A310': [(21, 22)]}","{'A390': 0.3333333333333333, 'A310': 0.6666666666666666}",A310,,"    public int getQueueIndex() {
        return queueIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/ReorderEvent.java,ReorderEvent,type,PlayQueueEventType type(),"[12, 15]","{'A294': [(12, 15)]}",{'A294': 1.0},A294,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.REORDER;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/ReorderEvent.java,ReorderEvent,getFromSelectedIndex,int getFromSelectedIndex(),"[17, 19]","{'A310': [(17, 19)]}",{'A310': 1.0},A310,,"    public int getFromSelectedIndex() {
        return fromSelectedIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/ReorderEvent.java,ReorderEvent,getToSelectedIndex,int getToSelectedIndex(),"[21, 23]","{'A390': [(23, 23)], 'A310': [(21, 22)]}","{'A390': 0.3333333333333333, 'A310': 0.6666666666666666}",A310,,"    public int getToSelectedIndex() {
        return toSelectedIndex;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/RecoveryEvent.java,RecoveryEvent,type,PlayQueueEventType type(),"[12, 15]","{'A294': [(12, 15)]}",{'A294': 1.0},A294,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.RECOVERY;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/RecoveryEvent.java,RecoveryEvent,getIndex,int getIndex(),"[17, 19]","{'A310': [(17, 19)]}",{'A310': 1.0},A310,,"    public int getIndex() {
        return index;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/RecoveryEvent.java,RecoveryEvent,getPosition,long getPosition(),"[21, 23]","{'A310': [(21, 23)]}",{'A310': 1.0},A310,,"    public long getPosition() {
        return position;
    }
"
org.schabi.newpipe.player.playqueue.events,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/events/InitEvent.java,InitEvent,type,PlayQueueEventType type(),"[4, 7]","{'A390': [(4, 4), (7, 7)], 'A310': [(5, 6)]}","{'A390': 0.5, 'A310': 0.5}",A390,,"    @Override
    public PlayQueueEventType type() {
        return PlayQueueEventType.INIT;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTouchCallback.java,PlayQueueItemTouchCallback,interpolateOutOfBoundsScroll,"int interpolateOutOfBoundsScroll(RecyclerView,int,int,int,long)","[20, 31]","{'A310': [(20, 20), (26, 27), (30, 31)], 'A295': [(21, 21), (28, 29)], 'A305': [(22, 25)]}","{'A310': 0.4166666666666667, 'A295': 0.25, 'A305': 0.3333333333333333}",A310,,"    @Override
    public int interpolateOutOfBoundsScroll(@NonNull final RecyclerView recyclerView,
                                            final int viewSize,
                                            final int viewSizeOutOfBounds,
                                            final int totalSize,
                                            final long msSinceStartScroll) {
        final int standardSpeed = super.interpolateOutOfBoundsScroll(recyclerView, viewSize,
                viewSizeOutOfBounds, totalSize, msSinceStartScroll);
        final int clampedAbsVelocity = MathUtils.clamp(Math.abs(standardSpeed),
                MINIMUM_INITIAL_DRAG_VELOCITY, MAXIMUM_INITIAL_DRAG_VELOCITY);
        return clampedAbsVelocity * (int) Math.signum(viewSizeOutOfBounds);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTouchCallback.java,PlayQueueItemTouchCallback,onMove,"boolean onMove(RecyclerView,RecyclerView.ViewHolder,RecyclerView.ViewHolder)","[33, 45]","{'A310': [(33, 33), (37, 45)], 'A295': [(34, 35)], 'A294': [(36, 36)]}","{'A310': 0.7692307692307693, 'A295': 0.15384615384615385, 'A294': 0.07692307692307693}",A310,,"    @Override
    public boolean onMove(@NonNull final RecyclerView recyclerView,
                          final RecyclerView.ViewHolder source,
                          final RecyclerView.ViewHolder target) {
        if (source.getItemViewType() != target.getItemViewType()) {
            return false;
        }

        final int sourceIndex = source.getLayoutPosition();
        final int targetIndex = target.getLayoutPosition();
        onMove(sourceIndex, targetIndex);
        return true;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTouchCallback.java,PlayQueueItemTouchCallback,isLongPressDragEnabled,boolean isLongPressDragEnabled(),"[47, 50]","{'A310': [(47, 50)]}",{'A310': 1.0},A310,,"    @Override
    public boolean isLongPressDragEnabled() {
        return false;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTouchCallback.java,PlayQueueItemTouchCallback,isItemViewSwipeEnabled,boolean isItemViewSwipeEnabled(),"[52, 55]","{'A310': [(52, 53), (55, 55)], 'A394': [(54, 54)]}","{'A310': 0.75, 'A394': 0.25}",A310,,"    @Override
    public boolean isItemViewSwipeEnabled() {
        return true;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTouchCallback.java,PlayQueueItemTouchCallback,onSwiped,"void onSwiped(RecyclerView.ViewHolder,int)","[57, 60]","{'A310': [(57, 57)], 'A294': [(58, 58)], 'A394': [(60, 60)], 'A299': [(59, 59)]}","{'A310': 0.25, 'A294': 0.25, 'A394': 0.25, 'A299': 0.25}",A310,,"    @Override
    public void onSwiped(final RecyclerView.ViewHolder viewHolder, final int swipeDir) {
        onSwiped(viewHolder.getBindingAdapterPosition());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/ChannelTabPlayQueue.java,ChannelTabPlayQueue,getTag,String getTag(),"[34, 37]","{'A305': [(34, 37)]}",{'A305': 1.0},A305,,"    @Override
    protected String getTag() {
        return ""ChannelTabPlayQueue@"" + Integer.toHexString(hashCode());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/ChannelTabPlayQueue.java,ChannelTabPlayQueue,fetch,void fetch(),"[39, 52]","{'A305': [(39, 52)]}",{'A305': 1.0},A305,,"    @Override
    public void fetch() {
        if (isInitial) {
            ExtractorHelper.getChannelTab(this.serviceId, this.linkHandler, false)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(getHeadListObserver());
        } else {
            ExtractorHelper.getMoreChannelTabItems(this.serviceId, this.linkHandler, this.nextPage)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(getNextPageObserver());
        }
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getTitle,String getTitle(),"[74, 77]","{'A390': [(74, 77)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @NonNull
    public String getTitle() {
        return title;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getUrl,String getUrl(),"[79, 82]","{'A390': [(79, 82)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @NonNull
    public String getUrl() {
        return url;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getServiceId,int getServiceId(),"[84, 86]","{'A390': [(84, 86)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    public int getServiceId() {
        return serviceId;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getDuration,long getDuration(),"[88, 90]","{'A390': [(88, 90)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    public long getDuration() {
        return duration;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getThumbnails,List<Image> getThumbnails(),"[92, 95]","{'A390': [(95, 95)], 'A305': [(93, 94)], 'A310': [(92, 92)]}","{'A390': 0.25, 'A305': 0.5, 'A310': 0.25}",A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @NonNull
    public List<Image> getThumbnails() {
        return thumbnails;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getUploader,String getUploader(),"[97, 100]","{'A390': [(98, 100)], 'A310': [(97, 97)]}","{'A390': 0.75, 'A310': 0.25}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @NonNull
    public String getUploader() {
        return uploader;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getUploaderUrl,String getUploaderUrl(),"[102, 104]","{'A349': [(102, 104)]}",{'A349': 1.0},A349,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    public String getUploaderUrl() {
        return uploaderUrl;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getStreamType,StreamType getStreamType(),"[106, 109]","{'A310': [(106, 109)]}",{'A310': 1.0},A310,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @NonNull
    public StreamType getStreamType() {
        return streamType;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getRecoveryPosition,long getRecoveryPosition(),"[111, 113]","{'A310': [(111, 113)]}",{'A310': 1.0},A310,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    public long getRecoveryPosition() {
        return recoveryPosition;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,setRecoveryPosition,void setRecoveryPosition(long),"[115, 117]","{'A294': [(115, 117)]}",{'A294': 1.0},A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    /*package-private*/ void setRecoveryPosition(final long recoveryPosition) {
        this.recoveryPosition = recoveryPosition;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getError,Throwable getError(),"[119, 122]","{'A390': [(119, 122)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @Nullable
    public Throwable getError() {
        return error;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,getStream,Single<StreamInfo> getStream(),"[124, 129]","{'A390': [(124, 125), (127, 127), (129, 129)], 'A310': [(128, 128)], 'A303': [(126, 126)]}","{'A390': 0.6666666666666666, 'A310': 0.16666666666666666, 'A303': 0.16666666666666666}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    @NonNull
    public Single<StreamInfo> getStream() {
        return ExtractorHelper.getStreamInfo(this.serviceId, this.url, false)
                .subscribeOn(Schedulers.io())
                .doOnError(throwable -> error = throwable);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,isAutoQueued,boolean isAutoQueued(),"[131, 133]","{'A398': [(131, 133)]}",{'A398': 1.0},A398,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    public boolean isAutoQueued() {
        return isAutoQueued;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItem.java,PlayQueueItem,setAutoQueued,void setAutoQueued(boolean),"[139, 141]","{'A310': [(141, 141)], 'A294': [(139, 140)]}","{'A310': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueItemTest.java,"    public void setAutoQueued(final boolean autoQueued) {
        isAutoQueued = autoQueued;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,getReactor,Observer<PlayQueueEvent> getReactor(),"[74, 100]","{'A390': [(76, 76), (81, 84), (89, 91), (93, 100)], 'A310': [(74, 75)], 'A294': [(77, 80), (85, 88), (92, 92)]}","{'A390': 0.5925925925925926, 'A310': 0.07407407407407407, 'A294': 0.3333333333333333}",A390,,"    private Observer<PlayQueueEvent> getReactor() {
        return new Observer<PlayQueueEvent>() {
            @Override
            public void onSubscribe(@NonNull final Disposable d) {
                if (playQueueReactor != null) {
                    playQueueReactor.dispose();
                }
                playQueueReactor = d;
            }

            @Override
            public void onNext(@NonNull final PlayQueueEvent playQueueMessage) {
                if (playQueueReactor != null) {
                    onPlayQueueChanged(playQueueMessage);
                }
            }

            @Override
            public void onError(@NonNull final Throwable e) { }

            @Override
            public void onComplete() {
                dispose();
            }
        };

    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onSubscribe,void onSubscribe(Disposable),"[76, 82]","{'A390': [(76, 76), (81, 82)], 'A294': [(77, 80)]}","{'A390': 0.42857142857142855, 'A294': 0.5714285714285714}",A294,,"            @Override
            public void onSubscribe(@NonNull final Disposable d) {
                if (playQueueReactor != null) {
                    playQueueReactor.dispose();
                }
                playQueueReactor = d;
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onNext,void onNext(PlayQueueEvent),"[84, 89]","{'A390': [(84, 84), (89, 89)], 'A294': [(85, 88)]}","{'A390': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"            @Override
            public void onNext(@NonNull final PlayQueueEvent playQueueMessage) {
                if (playQueueReactor != null) {
                    onPlayQueueChanged(playQueueMessage);
                }
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onError,void onError(Throwable),"[91, 92]","{'A390': [(91, 91)], 'A294': [(92, 92)]}","{'A390': 0.5, 'A294': 0.5}",A390,,"            @Override
            public void onError(@NonNull final Throwable e) { }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onComplete,void onComplete(),"[94, 97]","{'A390': [(94, 97)]}",{'A390': 1.0},A390,,"            @Override
            public void onComplete() {
                dispose();
            }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onPlayQueueChanged,void onPlayQueueChanged(PlayQueueEvent),"[102, 136]","{'A390': [(103, 103), (107, 117), (120, 122), (125, 136)], 'A310': [(102, 102), (104, 106), (118, 119), (123, 124)]}","{'A390': 0.7714285714285715, 'A310': 0.22857142857142856}",A390,,"    private void onPlayQueueChanged(final PlayQueueEvent message) {
        switch (message.type()) {
            case RECOVERY:
                // Do nothing.
                break;
            case SELECT:
                final SelectEvent selectEvent = (SelectEvent) message;
                notifyItemChanged(selectEvent.getOldIndex());
                notifyItemChanged(selectEvent.getNewIndex());
                break;
            case APPEND:
                final AppendEvent appendEvent = (AppendEvent) message;
                notifyItemRangeInserted(playQueue.size(), appendEvent.getAmount());
                break;
            case ERROR:
                final ErrorEvent errorEvent = (ErrorEvent) message;
                notifyItemChanged(errorEvent.getErrorIndex());
                notifyItemChanged(errorEvent.getQueueIndex());
                break;
            case REMOVE:
                final RemoveEvent removeEvent = (RemoveEvent) message;
                notifyItemRemoved(removeEvent.getRemoveIndex());
                notifyItemChanged(removeEvent.getQueueIndex());
                break;
            case MOVE:
                final MoveEvent moveEvent = (MoveEvent) message;
                notifyItemMoved(moveEvent.getFromIndex(), moveEvent.getToIndex());
                break;
            case INIT:
            case REORDER:
            default:
                notifyDataSetChanged();
                break;
        }
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,dispose,void dispose(),"[138, 143]","{'A390': [(138, 138), (142, 143)], 'A294': [(139, 141)]}","{'A390': 0.5, 'A294': 0.5}",A390,,"    public void dispose() {
        if (playQueueReactor != null) {
            playQueueReactor.dispose();
        }
        playQueueReactor = null;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,setSelectedListener,void setSelectedListener(PlayQueueItemBuilder.OnSelectedListener),"[145, 147]","{'A310': [(145, 147)]}",{'A310': 1.0},A310,,"    public void setSelectedListener(final PlayQueueItemBuilder.OnSelectedListener listener) {
        playQueueItemBuilder.setOnSelectedListener(listener);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,unsetSelectedListener,void unsetSelectedListener(),"[149, 151]","{'A310': [(149, 151)]}",{'A310': 1.0},A310,,"    public void unsetSelectedListener() {
        playQueueItemBuilder.setOnSelectedListener(null);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,setFooter,void setFooter(View),"[153, 156]","{'A390': [(154, 156)], 'A294': [(153, 153)]}","{'A390': 0.75, 'A294': 0.25}",A390,,"    public void setFooter(final View footer) {
        this.footer = footer;
        notifyItemChanged(playQueue.size());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,showFooter,void showFooter(boolean),"[158, 161]","{'A390': [(158, 161)]}",{'A390': 1.0},A390,,"    public void showFooter(final boolean show) {
        showFooter = show;
        notifyItemChanged(playQueue.size());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,getItems,List<PlayQueueItem> getItems(),"[163, 165]","{'A390': [(163, 165)]}",{'A390': 1.0},A390,,"    public List<PlayQueueItem> getItems() {
        return playQueue.getStreams();
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,getItemCount,int getItemCount(),"[167, 174]","{'A390': [(167, 169), (173, 174)], 'A294': [(170, 172)]}","{'A390': 0.625, 'A294': 0.375}",A390,,"    @Override
    public int getItemCount() {
        int count = playQueue.getStreams().size();
        if (footer != null && showFooter) {
            count++;
        }
        return count;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,getItemViewType,int getItemViewType(int),"[176, 183]","{'A390': [(176, 176), (179, 183)], 'A294': [(177, 178)]}","{'A390': 0.75, 'A294': 0.25}",A390,,"    @Override
    public int getItemViewType(final int position) {
        if (footer != null && position == playQueue.getStreams().size() && showFooter) {
            return FOOTER_VIEW_TYPE_ID;
        }

        return ITEM_VIEW_TYPE_ID;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onCreateViewHolder,"RecyclerView.ViewHolder onCreateViewHolder(ViewGroup,int)","[185, 199]","{'A390': [(186, 186), (190, 192), (195, 196), (198, 199)], 'A294': [(189, 189), (193, 194)], 'A342': [(197, 197)], 'A305': [(185, 185), (187, 188)]}","{'A390': 0.5333333333333333, 'A294': 0.2, 'A342': 0.06666666666666667, 'A305': 0.2}",A390,,"    @NonNull
    @Override
    public RecyclerView.ViewHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                      final int type) {
        switch (type) {
            case FOOTER_VIEW_TYPE_ID:
                return new HFHolder(footer);
            case ITEM_VIEW_TYPE_ID:
                return new PlayQueueItemHolder(LayoutInflater.from(parent.getContext())
                        .inflate(R.layout.play_queue_item, parent, false));
            default:
                Log.e(TAG, ""Attempting to create view holder with undefined type: "" + type);
                return new FallbackViewHolder(new View(parent.getContext()));
        }
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueAdapter.java,PlayQueueAdapter,onBindViewHolder,"void onBindViewHolder(RecyclerView.ViewHolder,int)","[201, 218]","{'A390': [(201, 201), (207, 207), (211, 211), (216, 218)], 'A310': [(205, 206), (210, 210), (212, 213)], 'A294': [(204, 204), (208, 209), (214, 215)], 'A305': [(202, 203)]}","{'A390': 0.3333333333333333, 'A310': 0.2777777777777778, 'A294': 0.2777777777777778, 'A305': 0.1111111111111111}",A390,,"    @Override
    public void onBindViewHolder(@NonNull final RecyclerView.ViewHolder holder,
                                 final int position) {
        if (holder instanceof PlayQueueItemHolder) {
            final PlayQueueItemHolder itemHolder = (PlayQueueItemHolder) holder;

            // Build the list item
            playQueueItemBuilder
                    .buildStreamInfoItem(itemHolder, playQueue.getStreams().get(position));

            // Check if the current item should be selected/highlighted
            final boolean isSelected = playQueue.getIndex() == position;
            itemHolder.itemView.setSelected(isSelected);
        } else if (holder instanceof HFHolder && position == playQueue.getStreams().size()
                && footer != null && showFooter) {
            ((HFHolder) holder).view = footer;
        }
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlaylistPlayQueue.java,PlaylistPlayQueue,getTag,String getTag(),"[31, 34]","{'A390': [(31, 31), (34, 34)], 'A310': [(32, 33)]}","{'A390': 0.5, 'A310': 0.5}",A390,,"    @Override
    protected String getTag() {
        return ""PlaylistPlayQueue@"" + Integer.toHexString(hashCode());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlaylistPlayQueue.java,PlaylistPlayQueue,fetch,void fetch(),"[36, 49]","{'A302': [(47, 47)], 'A390': [(36, 37), (48, 49)], 'A294': [(44, 44)], 'A310': [(38, 43), (45, 46)]}","{'A302': 0.07142857142857142, 'A390': 0.2857142857142857, 'A294': 0.07142857142857142, 'A310': 0.5714285714285714}",A310,,"    @Override
    public void fetch() {
        if (this.isInitial) {
            ExtractorHelper.getPlaylistInfo(this.serviceId, this.baseUrl, false)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(getHeadListObserver());
        } else {
            ExtractorHelper.getMorePlaylistItems(this.serviceId, this.baseUrl, this.nextPage)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(getNextPageObserver());
        }
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemBuilder.java,PlayQueueItemBuilder,setOnSelectedListener,void setOnSelectedListener(OnSelectedListener),"[19, 21]","{'A390': [(20, 21)], 'A294': [(19, 19)]}","{'A390': 0.6666666666666666, 'A294': 0.3333333333333333}",A390,,"    public void setOnSelectedListener(final OnSelectedListener listener) {
        this.onItemClickListener = listener;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemBuilder.java,PlayQueueItemBuilder,buildStreamInfoItem,"void buildStreamInfoItem(PlayQueueItemHolder,PlayQueueItem)","[23, 53]","{'A390': [(23, 23), (29, 35), (37, 37), (41, 43), (48, 48), (50, 53)], 'A310': [(27, 27), (38, 40), (44, 47), (49, 49)], 'A305': [(36, 36)], 'A300': [(28, 28)], 'A294': [(24, 26)]}","{'A390': 0.5483870967741935, 'A310': 0.2903225806451613, 'A305': 0.03225806451612903, 'A300': 0.03225806451612903, 'A294': 0.0967741935483871}",A390,,"    public void buildStreamInfoItem(final PlayQueueItemHolder holder, final PlayQueueItem item) {
        if (!TextUtils.isEmpty(item.getTitle())) {
            holder.itemVideoTitleView.setText(item.getTitle());
        }
        holder.itemAdditionalDetailsView.setText(Localization.concatenateStrings(item.getUploader(),
                ServiceHelper.getNameOfServiceById(item.getServiceId())));

        if (item.getDuration() > 0) {
            holder.itemDurationView.setText(Localization.getDurationString(item.getDuration()));
        } else {
            holder.itemDurationView.setVisibility(View.GONE);
        }

        PicassoHelper.loadThumbnail(item.getThumbnails()).into(holder.itemThumbnailView);

        holder.itemRoot.setOnClickListener(view -> {
            if (onItemClickListener != null) {
                onItemClickListener.selected(item, view);
            }
        });

        holder.itemRoot.setOnLongClickListener(view -> {
            if (onItemClickListener != null) {
                onItemClickListener.held(item, view);
                return true;
            }
            return false;
        });

        holder.itemHandle.setOnTouchListener(getOnTouchListener(holder));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueueItemBuilder.java,PlayQueueItemBuilder,getOnTouchListener,View.OnTouchListener getOnTouchListener(PlayQueueItemHolder),"[55, 64]","{'A390': [(55, 55), (61, 61), (63, 64)], 'A310': [(56, 60), (62, 62)]}","{'A390': 0.4, 'A310': 0.6}",A310,,"    private View.OnTouchListener getOnTouchListener(final PlayQueueItemHolder holder) {
        return (view, motionEvent) -> {
            view.performClick();
            if (motionEvent.getActionMasked() == MotionEvent.ACTION_DOWN
                    && onItemClickListener != null) {
                onItemClickListener.onStartDrag(holder);
            }
            return false;
        };
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,init,void init(),"[73, 79]","{'A390': [(73, 77), (79, 79)], 'A305': [(78, 78)]}","{'A390': 0.8571428571428571, 'A305': 0.14285714285714285}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public void init() {
        eventBroadcast = BehaviorSubject.create();

        broadcastReceiver = eventBroadcast.toFlowable(BackpressureStrategy.BUFFER)
                .observeOn(AndroidSchedulers.mainThread())
                .startWithItem(new InitEvent());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,dispose,void dispose(),"[84, 92]","{'A390': [(84, 84), (88, 88), (90, 90), (92, 92)], 'A294': [(85, 87)], 'A310': [(89, 89)], 'A290': [(91, 91)]}","{'A390': 0.4444444444444444, 'A294': 0.3333333333333333, 'A310': 0.1111111111111111, 'A290': 0.1111111111111111}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public void dispose() {
        if (eventBroadcast != null) {
            eventBroadcast.onComplete();
        }

        eventBroadcast = null;
        broadcastReceiver = null;
        disposed = true;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,getIndex,int getIndex(),"[117, 119]","{'A390': [(117, 119)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public int getIndex() {
        return queueIndex.get();
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,setIndex,void setIndex(int),"[132, 166]","{'A294': [(132, 134), (137, 138), (152, 152), (159, 159), (165, 166)], 'A380': [(135, 136), (139, 151), (153, 155), (160, 164)], 'A290': [(156, 158)]}","{'A294': 0.2571428571428571, 'A380': 0.6571428571428571, 'A290': 0.08571428571428572}",A380,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void setIndex(final int index) {
        final int oldIndex = getIndex();

        final int newIndex;

        if (index < 0) {
            newIndex = 0;
        } else if (index < streams.size()) {
            // Regular assignment for index in bounds
            newIndex = index;
        } else if (streams.isEmpty()) {
            // Out of bounds from here on
            // Need to check if stream is empty to prevent arithmetic error and negative index
            newIndex = 0;
        } else if (isComplete()) {
            // Circular indexing
            newIndex = index % streams.size();
        } else {
            // Index of last element
            newIndex = streams.size() - 1;
        }

        queueIndex.set(newIndex);

        if (oldIndex != newIndex) {
            history.add(streams.get(newIndex));
        }

        /*
        TODO: Documentation states that a SelectEvent will only be emitted if the new index is...
        different from the old one but this is emitted regardless? Not sure what this what it does
        exactly so I won't touch it
         */
        broadcast(new SelectEvent(oldIndex, newIndex));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,getItem,PlayQueueItem getItem(),"[171, 174]","{'A390': [(172, 174)], 'A305': [(171, 171)]}","{'A390': 0.75, 'A305': 0.25}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    @Nullable
    public PlayQueueItem getItem() {
        return getItem(getIndex());
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,getItem,PlayQueueItem getItem(int),"[180, 186]","{'A390': [(185, 186)], 'A305': [(180, 180), (182, 182)], 'A294': [(183, 184)], 'A290': [(181, 181)]}","{'A390': 0.2857142857142857, 'A305': 0.2857142857142857, 'A294': 0.2857142857142857, 'A290': 0.14285714285714285}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    @Nullable
    public PlayQueueItem getItem(final int index) {
        if (index < 0 || index >= streams.size()) {
            return null;
        }
        return streams.get(index);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,indexOf,int indexOf(PlayQueueItem),"[195, 197]","{'A390': [(196, 197)], 'A310': [(195, 195)]}","{'A390': 0.6666666666666666, 'A310': 0.3333333333333333}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public int indexOf(@NonNull final PlayQueueItem item) {
        return streams.indexOf(item);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,size,int size(),"[202, 204]","{'A390': [(202, 204)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public int size() {
        return streams.size();
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,isEmpty,boolean isEmpty(),"[211, 213]","{'A390': [(211, 213)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public boolean isEmpty() {
        return streams.isEmpty();
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,isShuffled,boolean isShuffled(),"[220, 222]","{'A390': [(220, 222)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public boolean isShuffled() {
        return backup != null;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,getStreams,List<PlayQueueItem> getStreams(),"[227, 230]","{'A390': [(227, 230)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    @NonNull
    public List<PlayQueueItem> getStreams() {
        return Collections.unmodifiableList(streams);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,getBroadcastReceiver,Flowable<PlayQueueEvent> getBroadcastReceiver(),"[242, 245]","{'A390': [(245, 245)], 'A294': [(242, 244)]}","{'A390': 0.25, 'A294': 0.75}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    @Nullable
    public Flowable<PlayQueueEvent> getBroadcastReceiver() {
        return broadcastReceiver;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,offsetIndex,void offsetIndex(int),"[255, 257]","{'A390': [(255, 257)]}",{'A390': 1.0},A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void offsetIndex(final int offset) {
        setIndex(getIndex() + offset);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,notifyChange,void notifyChange(),"[262, 264]","{'A390': [(264, 264)], 'A295': [(262, 263)]}","{'A390': 0.3333333333333333, 'A295': 0.6666666666666666}",A295,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void notifyChange() {
        broadcast(new AppendEvent(0));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,append,void append(List<PlayQueueItem>),"[278, 292]","{'A390': [(280, 280), (292, 292)], 'A294': [(285, 286)], 'A310': [(278, 278), (281, 284), (290, 291)], 'A290': [(279, 279)], 'A398': [(287, 289)]}","{'A390': 0.13333333333333333, 'A294': 0.13333333333333333, 'A310': 0.4666666666666667, 'A290': 0.06666666666666667, 'A398': 0.2}",A310,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void append(@NonNull final List<PlayQueueItem> items) {
        final List<PlayQueueItem> itemList = new ArrayList<>(items);

        if (isShuffled()) {
            backup.addAll(itemList);
            Collections.shuffle(itemList);
        }
        if (!streams.isEmpty() && streams.get(streams.size() - 1).isAutoQueued()
                && !itemList.get(0).isAutoQueued()) {
            streams.remove(streams.size() - 1);
        }
        streams.addAll(itemList);

        broadcast(new AppendEvent(itemList.size()));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,remove,void remove(int),"[306, 312]","{'A390': [(306, 306), (310, 310), (312, 312)], 'A294': [(307, 309)], 'A310': [(311, 311)]}","{'A390': 0.42857142857142855, 'A294': 0.42857142857142855, 'A310': 0.14285714285714285}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void remove(final int index) {
        if (index >= streams.size() || index < 0) {
            return;
        }
        removeInternal(index);
        broadcast(new RemoveEvent(index, getIndex()));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,error,void error(),"[321, 328]","{'A390': [(328, 328)], 'A305': [(321, 323), (327, 327)], 'A310': [(326, 326)], 'A290': [(324, 325)]}","{'A390': 0.125, 'A305': 0.5, 'A310': 0.125, 'A290': 0.25}",A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void error() {
        final int oldIndex = getIndex();
        queueIndex.incrementAndGet();
        if (streams.size() > queueIndex.get()) {
            history.add(streams.get(queueIndex.get()));
        }
        broadcast(new ErrorEvent(oldIndex, getIndex()));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,removeInternal,void removeInternal(int),"[330, 352]","{'A390': [(331, 331), (333, 333), (335, 335), (342, 344), (346, 346), (352, 352)], 'A294': [(340, 340)], 'A310': [(330, 330), (332, 332), (334, 334), (336, 339), (341, 341)], 'A290': [(345, 345), (347, 351)]}","{'A390': 0.34782608695652173, 'A294': 0.043478260869565216, 'A310': 0.34782608695652173, 'A290': 0.2608695652173913}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    private synchronized void removeInternal(final int removeIndex) {
        final int currentIndex = queueIndex.get();
        final int size = size();

        if (currentIndex > removeIndex) {
            queueIndex.decrementAndGet();

        } else if (currentIndex >= size) {
            queueIndex.set(currentIndex % (size - 1));

        } else if (currentIndex == removeIndex && currentIndex == size - 1) {
            queueIndex.set(0);
        }

        if (backup != null) {
            backup.remove(getItem(removeIndex));
        }

        history.remove(streams.remove(removeIndex));
        if (streams.size() > queueIndex.get()) {
            history.add(streams.get(queueIndex.get()));
        }
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,move,"void move(int,int)","[367, 388]","{'A390': [(367, 367), (374, 383), (387, 388)], 'A294': [(368, 373)], 'A290': [(384, 384)], 'A398': [(385, 386)]}","{'A390': 0.5909090909090909, 'A294': 0.2727272727272727, 'A290': 0.045454545454545456, 'A398': 0.09090909090909091}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void move(final int source, final int target) {
        if (source < 0 || target < 0) {
            return;
        }
        if (source >= streams.size() || target >= streams.size()) {
            return;
        }

        final int current = getIndex();
        if (source == current) {
            queueIndex.set(target);
        } else if (source < current && target >= current) {
            queueIndex.decrementAndGet();
        } else if (source > current && target <= current) {
            queueIndex.incrementAndGet();
        }

        final PlayQueueItem playQueueItem = streams.remove(source);
        playQueueItem.setAutoQueued(false);
        streams.add(target, playQueueItem);
        broadcast(new MoveEvent(source, target));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,setRecovery,"void setRecovery(int,long)","[399, 406]","{'A294': [(400, 402)], 'A310': [(399, 399), (403, 406)]}","{'A294': 0.375, 'A310': 0.625}",A310,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void setRecovery(final int index, final long position) {
        if (index < 0 || index >= streams.size()) {
            return;
        }

        streams.get(index).setRecoveryPosition(position);
        broadcast(new RecoveryEvent(index, position));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,unsetRecovery,void unsetRecovery(int),"[416, 418]","{'A310': [(416, 418)]}",{'A310': 1.0},A310,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void unsetRecovery(final int index) {
        setRecovery(index, PlayQueueItem.RECOVERY_UNSET);
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,shuffle,void shuffle(),"[434, 459]","{'A390': [(434, 434), (438, 440), (449, 450), (455, 455), (459, 459)], 'A310': [(454, 454)], 'A402': [(435, 435), (445, 448), (451, 453), (456, 458)], 'A300': [(436, 437), (441, 444)]}","{'A390': 0.3076923076923077, 'A310': 0.038461538461538464, 'A402': 0.4230769230769231, 'A300': 0.23076923076923078}",A402,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void shuffle() {
        // Create a backup if it doesn't already exist
        // Note: The backup-list has to be created at all cost (even when size <= 2).
        // Otherwise it's not possible to enter shuffle-mode!
        if (backup == null) {
            backup = new ArrayList<>(streams);
        }
        // Can't shuffle a list that's empty or only has one element
        if (size() <= 2) {
            return;
        }

        final int originalIndex = getIndex();
        final PlayQueueItem currentItem = getItem();

        Collections.shuffle(streams);

        // Move currentItem to the head of the queue
        streams.remove(currentItem);
        streams.add(0, currentItem);
        queueIndex.set(0);

        history.add(currentItem);

        broadcast(new ReorderEvent(originalIndex, 0));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,unshuffle,void unshuffle(),"[471, 492]","{'A390': [(471, 471), (476, 486), (490, 490), (492, 492)], 'A294': [(472, 474)], 'A310': [(475, 475), (491, 491)], 'A290': [(487, 489)]}","{'A390': 0.6363636363636364, 'A294': 0.13636363636363635, 'A310': 0.09090909090909091, 'A290': 0.13636363636363635}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized void unshuffle() {
        if (backup == null) {
            return;
        }
        final int originIndex = getIndex();
        final PlayQueueItem current = getItem();

        streams = backup;
        backup = null;

        final int newIndex = streams.indexOf(current);
        if (newIndex != -1) {
            queueIndex.set(newIndex);
        } else {
            queueIndex.set(0);
        }
        if (streams.size() > queueIndex.get()) {
            history.add(streams.get(queueIndex.get()));
        }

        broadcast(new ReorderEvent(originIndex, queueIndex.get()));
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,previous,boolean previous(),"[502, 513]","{'A290': [(502, 513)]}",{'A290': 1.0},A290,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public synchronized boolean previous() {
        if (history.size() <= 1) {
            return false;
        }

        history.remove(history.size() - 1);

        final PlayQueueItem last = history.remove(history.size() - 1);
        setIndex(indexOf(last));

        return true;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,equalStreams,boolean equalStreams(PlayQueue),"[521, 538]","{'A290': [(523, 538)], 'A350': [(521, 522)]}","{'A290': 0.8888888888888888, 'A350': 0.1111111111111111}",A290,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public boolean equalStreams(@Nullable final PlayQueue other) {
        if (other == null) {
            return false;
        }
        if (size() != other.size()) {
            return false;
        }
        for (int i = 0; i < size(); i++) {
            final PlayQueueItem stream = streams.get(i);
            final PlayQueueItem otherStream = other.streams.get(i);
            // Check is based on serviceId and URL
            if (stream.getServiceId() != otherStream.getServiceId()
                    || !stream.getUrl().equals(otherStream.getUrl())) {
                return false;
            }
        }
        return true;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,equalStreamsAndIndex,boolean equalStreamsAndIndex(PlayQueue),"[540, 546]","{'A298': [(542, 543)], 'A380': [(546, 546)], 'A350': [(540, 541), (544, 545)]}","{'A298': 0.2857142857142857, 'A380': 0.14285714285714285, 'A350': 0.5714285714285714}",A350,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public boolean equalStreamsAndIndex(@Nullable final PlayQueue other) {
        if (equalStreams(other)) {
            //noinspection ConstantConditions
            return other.getIndex() == getIndex(); //NOSONAR: other is not null
        }
        return false;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,isDisposed,boolean isDisposed(),"[548, 550]","{'A290': [(548, 550)]}",{'A290': 1.0},A290,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    public boolean isDisposed() {
        return disposed;
    }
"
org.schabi.newpipe.player.playqueue,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/playqueue/PlayQueue.java,PlayQueue,broadcast,void broadcast(PlayQueueEvent),"[555, 559]","{'A390': [(556, 559)], 'A310': [(555, 555)]}","{'A390': 0.8, 'A310': 0.2}",A390,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/player/playqueue/PlayQueueTest.java,"    private void broadcast(@NonNull final PlayQueueEvent event) {
        if (eventBroadcast != null) {
            eventBroadcast.onNext(event);
        }
    }
"
org.schabi.newpipe.player.gesture,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/gesture/CustomBottomSheetBehavior.java,CustomBottomSheetBehavior,onInterceptTouchEvent,"boolean onInterceptTouchEvent(CoordinatorLayout,FrameLayout,MotionEvent)","[34, 82]","{'A290': [(34, 36), (38, 48), (57, 60), (62, 82)], 'A299': [(37, 37)], 'A295': [(61, 61)], 'A296': [(49, 56)]}","{'A290': 0.7959183673469388, 'A299': 0.02040816326530612, 'A295': 0.02040816326530612, 'A296': 0.16326530612244897}",A290,,"    @Override
    public boolean onInterceptTouchEvent(@NonNull final CoordinatorLayout parent,
                                         @NonNull final FrameLayout child,
                                         @NonNull final MotionEvent event) {
        // Drop following when action ends
        if (event.getAction() == MotionEvent.ACTION_CANCEL
                || event.getAction() == MotionEvent.ACTION_UP) {
            skippingInterception = false;
        }

        // Found that user still swiping, continue following
        if (skippingInterception || getState() == BottomSheetBehavior.STATE_SETTLING) {
            return false;
        }

        // The interception listens for the child view with the id ""fragment_player_holder"",
        // so the following two-finger gesture will be triggered only for the player view on
        // portrait and for the top controls (visible) on landscape.
        setSkipCollapsed(event.getPointerCount() == 2);
        if (event.getPointerCount() == 2) {
            return super.onInterceptTouchEvent(parent, child, event);
        }

        // Don't need to do anything if bottomSheet isn't expanded
        if (getState() == BottomSheetBehavior.STATE_EXPANDED
                && event.getAction() == MotionEvent.ACTION_DOWN) {
            // Without overriding scrolling will not work when user touches these elements
            for (final int element : skipInterceptionOfElements) {
                final View view = child.findViewById(element);
                if (view != null) {
                    final boolean visible = view.getGlobalVisibleRect(globalRect);
                    if (visible
                            && globalRect.contains((int) event.getRawX(), (int) event.getRawY())) {
                        // Makes bottom part of the player draggable in portrait when
                        // playbackControlRoot is hidden
                        if (element == R.id.bottomControls
                                && child.findViewById(R.id.playbackControlRoot)
                                .getVisibility() != View.VISIBLE) {
                            return super.onInterceptTouchEvent(parent, child, event);
                        }
                        skippingInterception = true;
                        return false;
                    }
                }
            }
        }

        return super.onInterceptTouchEvent(parent, child, event);
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/VideoPlaybackResolver.java,VideoPlaybackResolver,resolve,MediaSource resolve(StreamInfo),"[65, 169]","{'A310': [(65, 66), (73, 73), (114, 114), (130, 130), (163, 163), (168, 169)], 'A333': [(68, 68), (77, 77), (84, 84), (90, 90), (105, 106), (108, 112), (116, 116), (118, 119), (121, 126), (135, 135), (139, 141), (143, 159), (167, 167)], 'A294': [(67, 67), (160, 160)], 'A383': [(97, 99)], 'A386': [(80, 83), (85, 85), (87, 87), (89, 89), (92, 96), (100, 102), (117, 117)], 'A305': [(107, 107), (120, 120), (142, 142)], 'A298': [(78, 79)], 'A293': [(69, 72), (74, 76), (86, 86), (88, 88), (91, 91), (103, 104), (113, 113), (115, 115), (127, 129), (131, 134), (136, 138), (162, 162), (164, 166)], 'A302': [(161, 161)]}","{'A310': 0.0761904761904762, 'A333': 0.4, 'A294': 0.01904761904761905, 'A383': 0.02857142857142857, 'A386': 0.1523809523809524, 'A305': 0.02857142857142857, 'A298': 0.01904761904761905, 'A293': 0.26666666666666666, 'A302': 0.009523809523809525}",A333,,"    @Override
    @Nullable
    public MediaSource resolve(@NonNull final StreamInfo info) {
        final MediaSource liveSource = PlaybackResolver.maybeBuildLiveMediaSource(dataSource, info);
        if (liveSource != null) {
            streamSourceType = SourceType.LIVE_STREAM;
            return liveSource;
        }

        final List<MediaSource> mediaSources = new ArrayList<>();

        // Create video stream source
        final List<VideoStream> videoStreamsList = ListHelper.getSortedStreamVideosList(context,
                getPlayableStreams(info.getVideoStreams(), info.getServiceId()),
                getPlayableStreams(info.getVideoOnlyStreams(), info.getServiceId()), false, true);
        final List<AudioStream> audioStreamsList =
                getFilteredAudioStreams(context, info.getAudioStreams());

        final int videoIndex;
        if (videoStreamsList.isEmpty()) {
            videoIndex = -1;
        } else if (playbackQuality == null) {
            videoIndex = qualityResolver.getDefaultResolutionIndex(videoStreamsList);
        } else {
            videoIndex = qualityResolver.getOverrideResolutionIndex(videoStreamsList,
                    getPlaybackQuality());
        }

        final int audioIndex =
                ListHelper.getAudioFormatIndex(context, audioStreamsList, audioTrack);
        final MediaItemTag tag =
                StreamInfoTag.of(info, videoStreamsList, videoIndex, audioStreamsList, audioIndex);
        @Nullable final VideoStream video = tag.getMaybeQuality()
                .map(MediaItemTag.Quality::getSelectedVideoStream)
                .orElse(null);
        @Nullable final AudioStream audio = tag.getMaybeAudioTrack()
                .map(MediaItemTag.AudioTrack::getSelectedAudioStream)
                .orElse(null);

        if (video != null) {
            try {
                final MediaSource streamSource = PlaybackResolver.buildMediaSource(
                        dataSource, video, info, PlaybackResolver.cacheKeyOf(info, video), tag);
                mediaSources.add(streamSource);
            } catch (final ResolverException e) {
                Log.e(TAG, ""Unable to create video source"", e);
                return null;
            }
        }

        // Use the audio stream if there is no video stream, or
        // merge with audio stream in case if video does not contain audio
        if (audio != null && (video == null || video.isVideoOnly() || audioTrack != null)) {
            try {
                final MediaSource audioSource = PlaybackResolver.buildMediaSource(
                        dataSource, audio, info, PlaybackResolver.cacheKeyOf(info, audio), tag);
                mediaSources.add(audioSource);
                streamSourceType = SourceType.VIDEO_WITH_SEPARATED_AUDIO;
            } catch (final ResolverException e) {
                Log.e(TAG, ""Unable to create audio source"", e);
                return null;
            }
        } else {
            streamSourceType = SourceType.VIDEO_WITH_AUDIO_OR_AUDIO_ONLY;
        }

        // If there is no audio or video sources, then this media source cannot be played back
        if (mediaSources.isEmpty()) {
            return null;
        }

        // Below are auxiliary media sources

        // Create subtitle sources
        final List<SubtitlesStream> subtitlesStreams = info.getSubtitles();
        if (subtitlesStreams != null) {
            // Torrent and non URL subtitles are not supported by ExoPlayer
            final List<SubtitlesStream> nonTorrentAndUrlStreams = getUrlAndNonTorrentStreams(
                    subtitlesStreams);
            for (final SubtitlesStream subtitle : nonTorrentAndUrlStreams) {
                final MediaFormat mediaFormat = subtitle.getFormat();
                if (mediaFormat != null) {
                    @C.RoleFlags final int textRoleFlag = subtitle.isAutoGenerated()
                            ? C.ROLE_FLAG_DESCRIBES_MUSIC_AND_SOUND
                            : C.ROLE_FLAG_CAPTION;
                    final MediaItem.SubtitleConfiguration textMediaItem =
                            new MediaItem.SubtitleConfiguration.Builder(
                                    Uri.parse(subtitle.getContent()))
                                    .setMimeType(mediaFormat.getMimeType())
                                    .setRoleFlags(textRoleFlag)
                                    .setLanguage(PlayerHelper.captionLanguageOf(context, subtitle))
                                    .build();
                    final MediaSource textSource = dataSource.getSingleSampleMediaSourceFactory()
                            .createMediaSource(textMediaItem, TIME_UNSET);
                    mediaSources.add(textSource);
                }
            }
        }

        if (mediaSources.size() == 1) {
            return mediaSources.get(0);
        } else {
            return new MergingMediaSource(true, mediaSources.toArray(new MediaSource[0]));
        }
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/VideoPlaybackResolver.java,VideoPlaybackResolver,getStreamSourceType,Optional<SourceType> getStreamSourceType(),"[177, 179]","{'A293': [(177, 179)]}",{'A293': 1.0},A293,,"    public Optional<SourceType> getStreamSourceType() {
        return Optional.ofNullable(streamSourceType);
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/VideoPlaybackResolver.java,VideoPlaybackResolver,getPlaybackQuality,String getPlaybackQuality(),"[181, 184]","{'A310': [(181, 184)]}",{'A310': 1.0},A310,,"    @Nullable
    public String getPlaybackQuality() {
        return playbackQuality;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/VideoPlaybackResolver.java,VideoPlaybackResolver,setPlaybackQuality,void setPlaybackQuality(String),"[186, 188]","{'A310': [(187, 188)], 'A294': [(186, 186)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setPlaybackQuality(@Nullable final String playbackQuality) {
        this.playbackQuality = playbackQuality;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/VideoPlaybackResolver.java,VideoPlaybackResolver,getAudioTrack,String getAudioTrack(),"[190, 193]","{'A386': [(190, 193)]}",{'A386': 1.0},A386,,"    @Nullable
    public String getAudioTrack() {
        return audioTrack;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/VideoPlaybackResolver.java,VideoPlaybackResolver,setAudioTrack,void setAudioTrack(String),"[195, 197]","{'A386': [(195, 197)]}",{'A386': 1.0},A386,,"    public void setAudioTrack(@Nullable final String audioLanguage) {
        this.audioTrack = audioLanguage;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/AudioPlaybackResolver.java,AudioPlaybackResolver,resolve,MediaSource resolve(StreamInfo),"[48, 85]","{'A310': [(48, 49), (55, 55), (60, 60), (85, 85)], 'A386': [(56, 59), (61, 76)], 'A333': [(51, 51), (77, 79), (81, 84)], 'A294': [(50, 50), (52, 54)], 'A320': [(80, 80)]}","{'A310': 0.13157894736842105, 'A386': 0.5263157894736842, 'A333': 0.21052631578947367, 'A294': 0.10526315789473684, 'A320': 0.02631578947368421}",A386,,"    @Override
    @Nullable
    public MediaSource resolve(@NonNull final StreamInfo info) {
        final MediaSource liveSource = PlaybackResolver.maybeBuildLiveMediaSource(dataSource, info);
        if (liveSource != null) {
            return liveSource;
        }

        final List<AudioStream> audioStreams =
                getFilteredAudioStreams(context, info.getAudioStreams());
        final Stream stream;
        final MediaItemTag tag;

        if (!audioStreams.isEmpty()) {
            final int audioIndex =
                    ListHelper.getAudioFormatIndex(context, audioStreams, audioTrack);
            stream = getStreamForIndex(audioIndex, audioStreams);
            tag = StreamInfoTag.of(info, audioStreams, audioIndex);
        } else {
            final List<VideoStream> videoStreams =
                    getPlayableStreams(info.getVideoStreams(), info.getServiceId());
            if (!videoStreams.isEmpty()) {
                final int index = ListHelper.getDefaultResolutionIndex(context, videoStreams);
                stream = getStreamForIndex(index, videoStreams);
                tag = StreamInfoTag.of(info);
            } else {
                return null;
            }
        }

        try {
            return PlaybackResolver.buildMediaSource(
                    dataSource, stream, info, PlaybackResolver.cacheKeyOf(info, stream), tag);
        } catch (final ResolverException e) {
            Log.e(TAG, ""Unable to create audio source"", e);
            return null;
        }
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/AudioPlaybackResolver.java,AudioPlaybackResolver,getStreamForIndex,"Stream getStreamForIndex(int,List<? extends Stream>)","[87, 93]","{'A320': [(87, 93)]}",{'A320': 1.0},A320,,"    @Nullable
    Stream getStreamForIndex(final int index, @NonNull final List<? extends Stream> streams) {
        if (index >= 0 && index < streams.size()) {
            return streams.get(index);
        }
        return null;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/AudioPlaybackResolver.java,AudioPlaybackResolver,getAudioTrack,String getAudioTrack(),"[95, 98]","{'A386': [(95, 98)]}",{'A386': 1.0},A386,,"    @Nullable
    public String getAudioTrack() {
        return audioTrack;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/AudioPlaybackResolver.java,AudioPlaybackResolver,setAudioTrack,void setAudioTrack(String),"[100, 102]","{'A386': [(100, 102)]}",{'A386': 1.0},A386,,"    public void setAudioTrack(@Nullable final String audioLanguage) {
        this.audioTrack = audioLanguage;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,commonCacheKeyOf,"StringBuilder commonCacheKeyOf(StreamInfo,Stream,boolean)","[58, 94]","{'A305': [(58, 94)]}",{'A305': 1.0},A305,,"    private static StringBuilder commonCacheKeyOf(final StreamInfo info,
                                                  final Stream stream,
                                                  final boolean resolutionOrBitrateUnknown) {
        // stream info service id
        final StringBuilder cacheKey = new StringBuilder(info.getServiceId());

        // stream info id
        cacheKey.append("" "");
        cacheKey.append(info.getId());

        // stream id (even if unknown)
        cacheKey.append("" "");
        cacheKey.append(stream.getId());

        // mediaFormat (if not null)
        final MediaFormat mediaFormat = stream.getFormat();
        if (mediaFormat != null) {
            cacheKey.append("" "");
            cacheKey.append(mediaFormat.getName());
        }

        // content (only if other information is missing)
        // If the media format and the resolution/bitrate are both missing, then we don't have
        // enough information to distinguish this stream from other streams.
        // So, only in that case, we use the content (i.e. url or manifest) to differentiate
        // between streams.
        // Note that if the content were used even when other information is present, then two
        // streams with the same stats but with different contents (e.g. because the url was
        // refreshed) will be considered different (i.e. with a different cacheKey), making the
        // cache useless.
        if (resolutionOrBitrateUnknown && mediaFormat == null) {
            cacheKey.append("" "");
            cacheKey.append(Objects.hash(stream.getContent(), stream.getManifestUrl()));
        }

        return cacheKey;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,cacheKeyOf,"String cacheKeyOf(StreamInfo,VideoStream)","[114, 129]","{'A305': [(114, 129)]}",{'A305': 1.0},A305,,"    static String cacheKeyOf(final StreamInfo info, final VideoStream videoStream) {
        final boolean resolutionUnknown = videoStream.getResolution().equals(RESOLUTION_UNKNOWN);
        final StringBuilder cacheKey = commonCacheKeyOf(info, videoStream, resolutionUnknown);

        // resolution (if known)
        if (!resolutionUnknown) {
            cacheKey.append("" "");
            cacheKey.append(videoStream.getResolution());
        }

        // isVideoOnly
        cacheKey.append("" "");
        cacheKey.append(videoStream.isVideoOnly());

        return cacheKey.toString();
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,cacheKeyOf,"String cacheKeyOf(StreamInfo,AudioStream)","[149, 170]","{'A305': [(149, 158), (169, 170)], 'A386': [(159, 168)]}","{'A305': 0.5454545454545454, 'A386': 0.45454545454545453}",A305,,"    static String cacheKeyOf(final StreamInfo info, final AudioStream audioStream) {
        final boolean averageBitrateUnknown = audioStream.getAverageBitrate() == UNKNOWN_BITRATE;
        final StringBuilder cacheKey = commonCacheKeyOf(info, audioStream, averageBitrateUnknown);

        // averageBitrate (if known)
        if (!averageBitrateUnknown) {
            cacheKey.append("" "");
            cacheKey.append(audioStream.getAverageBitrate());
        }

        if (audioStream.getAudioTrackId() != null) {
            cacheKey.append("" "");
            cacheKey.append(audioStream.getAudioTrackId());
        }

        if (audioStream.getAudioLocale() != null) {
            cacheKey.append("" "");
            cacheKey.append(audioStream.getAudioLocale().getISO3Language());
        }

        return cacheKey.toString();
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,cacheKeyOf,"String cacheKeyOf(StreamInfo,Stream)","[183, 190]","{'A320': [(183, 190)]}",{'A320': 1.0},A320,,"    static String cacheKeyOf(final StreamInfo info, final Stream stream) {
        if (stream instanceof AudioStream) {
            return cacheKeyOf(info, (AudioStream) stream);
        } else if (stream instanceof VideoStream) {
            return cacheKeyOf(info, (VideoStream) stream);
        }
        throw new RuntimeException(""no audio or video stream. That should never happen"");
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,maybeBuildLiveMediaSource,"MediaSource maybeBuildLiveMediaSource(PlayerDataSource,StreamInfo)","[195, 216]","{'A310': [(195, 195), (199, 201), (213, 216)], 'A305': [(196, 197)], 'A333': [(198, 198), (202, 204), (206, 206), (209, 212)], 'A299': [(205, 205), (207, 208)]}","{'A310': 0.36363636363636365, 'A305': 0.09090909090909091, 'A333': 0.4090909090909091, 'A299': 0.13636363636363635}",A333,,"    @Nullable
    static MediaSource maybeBuildLiveMediaSource(final PlayerDataSource dataSource,
                                                 final StreamInfo info) {
        if (!StreamTypeUtil.isLiveStream(info.getStreamType())) {
            return null;
        }

        try {
            final StreamInfoTag tag = StreamInfoTag.of(info);
            if (!info.getHlsUrl().isEmpty()) {
                return buildLiveMediaSource(dataSource, info.getHlsUrl(), C.CONTENT_TYPE_HLS, tag);
            } else if (!info.getDashMpdUrl().isEmpty()) {
                return buildLiveMediaSource(
                        dataSource, info.getDashMpdUrl(), C.CONTENT_TYPE_DASH, tag);
            }
        } catch (final Exception e) {
            Log.w(TAG, ""Error when generating live media source, falling back to standard sources"",
                    e);
        }

        return null;
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildLiveMediaSource,"MediaSource buildLiveMediaSource(PlayerDataSource,String,int,MediaItemTag)","[218, 248]","{'A310': [(223, 223), (237, 237), (248, 248)], 'A305': [(218, 219)], 'A333': [(220, 221), (235, 236), (246, 247)], 'A383': [(222, 222), (243, 245)], 'A300': [(225, 226), (228, 229), (231, 232), (238, 242)], 'A299': [(224, 224), (227, 227), (230, 230), (233, 234)]}","{'A310': 0.0967741935483871, 'A305': 0.06451612903225806, 'A333': 0.1935483870967742, 'A383': 0.12903225806451613, 'A300': 0.3548387096774194, 'A299': 0.16129032258064516}",A300,,"    static MediaSource buildLiveMediaSource(final PlayerDataSource dataSource,
                                            final String sourceUrl,
                                            @C.ContentType final int type,
                                            final MediaItemTag metadata) throws ResolverException {
        final MediaSource.Factory factory;
        switch (type) {
            case C.CONTENT_TYPE_SS:
                factory = dataSource.getLiveSsMediaSourceFactory();
                break;
            case C.CONTENT_TYPE_DASH:
                factory = dataSource.getLiveDashMediaSourceFactory();
                break;
            case C.CONTENT_TYPE_HLS:
                factory = dataSource.getLiveHlsMediaSourceFactory();
                break;
            case C.CONTENT_TYPE_OTHER:
            case C.CONTENT_TYPE_RTSP:
            default:
                throw new ResolverException(""Unsupported type: "" + type);
        }

        return factory.createMediaSource(
                new MediaItem.Builder()
                        .setTag(metadata)
                        .setUri(Uri.parse(sourceUrl))
                        .setLiveConfiguration(
                                new MediaItem.LiveConfiguration.Builder()
                                        .setTargetOffsetMs(LIVE_STREAM_EDGE_GAP_MILLIS)
                                        .build())
                        .build());
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildMediaSource,"MediaSource buildMediaSource(PlayerDataSource,Stream,StreamInfo,String,MediaItemTag)","[253, 276]","{'A310': [(261, 261), (273, 273), (275, 275)], 'A305': [(253, 256)], 'A333': [(257, 260), (262, 272), (274, 274), (276, 276)]}","{'A310': 0.125, 'A305': 0.16666666666666666, 'A333': 0.7083333333333334}",A333,,"    static MediaSource buildMediaSource(final PlayerDataSource dataSource,
                                        final Stream stream,
                                        final StreamInfo streamInfo,
                                        final String cacheKey,
                                        final MediaItemTag metadata) throws ResolverException {
        if (streamInfo.getService() == ServiceList.YouTube) {
            return createYoutubeMediaSource(stream, streamInfo, dataSource, cacheKey, metadata);
        }

        final DeliveryMethod deliveryMethod = stream.getDeliveryMethod();
        switch (deliveryMethod) {
            case PROGRESSIVE_HTTP:
                return buildProgressiveMediaSource(dataSource, stream, cacheKey, metadata);
            case DASH:
                return buildDashMediaSource(dataSource, stream, cacheKey, metadata);
            case HLS:
                return buildHlsMediaSource(dataSource, stream, cacheKey, metadata);
            case SS:
                return buildSSMediaSource(dataSource, stream, cacheKey, metadata);
            // Torrent streams are not supported by ExoPlayer
            default:
                throw new ResolverException(""Unsupported delivery type: "" + deliveryMethod);
        }
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildProgressiveMediaSource,"ProgressiveMediaSource buildProgressiveMediaSource(PlayerDataSource,Stream,String,MediaItemTag)","[278, 293]","{'A305': [(278, 281), (286, 292)], 'A333': [(282, 285), (293, 293)]}","{'A305': 0.6875, 'A333': 0.3125}",A305,,"    private static ProgressiveMediaSource buildProgressiveMediaSource(
            final PlayerDataSource dataSource,
            final Stream stream,
            final String cacheKey,
            final MediaItemTag metadata) throws ResolverException {
        if (!stream.isUrl()) {
            throw new ResolverException(""Non URI progressive contents are not supported"");
        }
        throwResolverExceptionIfUrlNullOrEmpty(stream.getContent());
        return dataSource.getProgressiveMediaSourceFactory().createMediaSource(
                new MediaItem.Builder()
                        .setTag(metadata)
                        .setUri(Uri.parse(stream.getContent()))
                        .setCustomCacheKey(cacheKey)
                        .build());
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildDashMediaSource,"DashMediaSource buildDashMediaSource(PlayerDataSource,Stream,String,MediaItemTag)","[295, 323]","{'A305': [(295, 298), (301, 302), (309, 309), (311, 321)], 'A333': [(299, 300), (303, 308), (310, 310), (322, 323)]}","{'A305': 0.6206896551724138, 'A333': 0.3793103448275862}",A305,,"    private static DashMediaSource buildDashMediaSource(final PlayerDataSource dataSource,
                                                        final Stream stream,
                                                        final String cacheKey,
                                                        final MediaItemTag metadata)
            throws ResolverException {

        if (stream.isUrl()) {
            throwResolverExceptionIfUrlNullOrEmpty(stream.getContent());
            return dataSource.getDashMediaSourceFactory().createMediaSource(
                    new MediaItem.Builder()
                            .setTag(metadata)
                            .setUri(Uri.parse(stream.getContent()))
                            .setCustomCacheKey(cacheKey)
                            .build());
        }

        try {
            return dataSource.getDashMediaSourceFactory().createMediaSource(
                    createDashManifest(stream.getContent(), stream),
                    new MediaItem.Builder()
                            .setTag(metadata)
                            .setUri(manifestUrlToUri(stream.getManifestUrl()))
                            .setCustomCacheKey(cacheKey)
                            .build());
        } catch (final IOException e) {
            throw new ResolverException(
                    ""Could not create a DASH media source/manifest from the manifest text"", e);
        }
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,createDashManifest,"DashManifest createDashManifest(String,Stream)","[325, 329]","{'A305': [(325, 328)], 'A333': [(329, 329)]}","{'A305': 0.8, 'A333': 0.2}",A305,,"    private static DashManifest createDashManifest(final String manifestContent,
                                                   final Stream stream) throws IOException {
        return new DashManifestParser().parse(manifestUrlToUri(stream.getManifestUrl()),
                new ByteArrayInputStream(manifestContent.getBytes(StandardCharsets.UTF_8)));
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildHlsMediaSource,"HlsMediaSource buildHlsMediaSource(PlayerDataSource,Stream,String,MediaItemTag)","[331, 356]","{'A305': [(331, 334), (336, 337), (345, 355)], 'A333': [(335, 335), (338, 344), (356, 356)]}","{'A305': 0.6538461538461539, 'A333': 0.34615384615384615}",A305,,"    private static HlsMediaSource buildHlsMediaSource(final PlayerDataSource dataSource,
                                                      final Stream stream,
                                                      final String cacheKey,
                                                      final MediaItemTag metadata)
            throws ResolverException {
        if (stream.isUrl()) {
            throwResolverExceptionIfUrlNullOrEmpty(stream.getContent());
            return dataSource.getHlsMediaSourceFactory(null).createMediaSource(
                    new MediaItem.Builder()
                            .setTag(metadata)
                            .setUri(Uri.parse(stream.getContent()))
                            .setCustomCacheKey(cacheKey)
                            .build());
        }

        final NonUriHlsDataSourceFactory.Builder hlsDataSourceFactoryBuilder =
                new NonUriHlsDataSourceFactory.Builder();
        hlsDataSourceFactoryBuilder.setPlaylistString(stream.getContent());

        return dataSource.getHlsMediaSourceFactory(hlsDataSourceFactoryBuilder)
                .createMediaSource(new MediaItem.Builder()
                        .setTag(metadata)
                        .setUri(manifestUrlToUri(stream.getManifestUrl()))
                        .setCustomCacheKey(cacheKey)
                        .build());
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildSSMediaSource,"SsMediaSource buildSSMediaSource(PlayerDataSource,Stream,String,MediaItemTag)","[358, 392]","{'A305': [(358, 361), (363, 364), (371, 371), (373, 373), (375, 382), (384, 391)], 'A333': [(362, 362), (365, 370), (372, 372), (374, 374), (383, 383), (392, 392)]}","{'A305': 0.6857142857142857, 'A333': 0.3142857142857143}",A305,,"    private static SsMediaSource buildSSMediaSource(final PlayerDataSource dataSource,
                                                    final Stream stream,
                                                    final String cacheKey,
                                                    final MediaItemTag metadata)
            throws ResolverException {
        if (stream.isUrl()) {
            throwResolverExceptionIfUrlNullOrEmpty(stream.getContent());
            return dataSource.getSSMediaSourceFactory().createMediaSource(
                    new MediaItem.Builder()
                            .setTag(metadata)
                            .setUri(Uri.parse(stream.getContent()))
                            .setCustomCacheKey(cacheKey)
                            .build());
        }

        final Uri manifestUri = manifestUrlToUri(stream.getManifestUrl());

        final SsManifest smoothStreamingManifest;
        try {
            final ByteArrayInputStream smoothStreamingManifestInput = new ByteArrayInputStream(
                    stream.getContent().getBytes(StandardCharsets.UTF_8));
            smoothStreamingManifest = new SsManifestParser().parse(manifestUri,
                    smoothStreamingManifestInput);
        } catch (final IOException e) {
            throw new ResolverException(""Error when parsing manual SS manifest"", e);
        }

        return dataSource.getSSMediaSourceFactory().createMediaSource(
                smoothStreamingManifest,
                new MediaItem.Builder()
                        .setTag(metadata)
                        .setUri(manifestUri)
                        .setCustomCacheKey(cacheKey)
                        .build());
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,createYoutubeMediaSource,"MediaSource createYoutubeMediaSource(Stream,StreamInfo,PlayerDataSource,String,MediaItemTag)","[397, 436]","{'A305': [(397, 401)], 'A333': [(402, 436)]}","{'A305': 0.125, 'A333': 0.875}",A333,,"    private static MediaSource createYoutubeMediaSource(final Stream stream,
                                                        final StreamInfo streamInfo,
                                                        final PlayerDataSource dataSource,
                                                        final String cacheKey,
                                                        final MediaItemTag metadata)
            throws ResolverException {
        if (!(stream instanceof AudioStream || stream instanceof VideoStream)) {
            throw new ResolverException(""Generation of YouTube DASH manifest for ""
                    + stream.getClass().getSimpleName() + "" is not supported"");
        }

        final StreamType streamType = streamInfo.getStreamType();
        if (streamType == StreamType.VIDEO_STREAM) {
            return createYoutubeMediaSourceOfVideoStreamType(dataSource, stream, streamInfo,
                    cacheKey, metadata);
        } else if (streamType == StreamType.POST_LIVE_STREAM) {
            // If the content is not an URL, uses the DASH delivery method and if the stream type
            // of the stream is a post live stream, it means that the content is an ended
            // livestream so we need to generate the manifest corresponding to the content
            // (which is the last segment of the stream)

            try {
                final ItagItem itagItem = Objects.requireNonNull(stream.getItagItem());
                final String manifestString = YoutubePostLiveStreamDvrDashManifestCreator
                        .fromPostLiveStreamDvrStreamingUrl(stream.getContent(),
                                itagItem,
                                itagItem.getTargetDurationSec(),
                                streamInfo.getDuration());
                return buildYoutubeManualDashMediaSource(dataSource,
                        createDashManifest(manifestString, stream), stream, cacheKey,
                        metadata);
            } catch (final CreationException | IOException | NullPointerException e) {
                throw new ResolverException(
                        ""Error when generating the DASH manifest of YouTube ended live stream"", e);
            }
        } else {
            throw new ResolverException(
                    ""DASH manifest generation of YouTube livestreams is not supported"");
        }
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,createYoutubeMediaSourceOfVideoStreamType,"MediaSource createYoutubeMediaSourceOfVideoStreamType(PlayerDataSource,Stream,StreamInfo,String,MediaItemTag)","[438, 501]","{'A305': [(438, 442)], 'A333': [(443, 501)]}","{'A305': 0.078125, 'A333': 0.921875}",A333,,"    private static MediaSource createYoutubeMediaSourceOfVideoStreamType(
            final PlayerDataSource dataSource,
            final Stream stream,
            final StreamInfo streamInfo,
            final String cacheKey,
            final MediaItemTag metadata) throws ResolverException {
        final DeliveryMethod deliveryMethod = stream.getDeliveryMethod();
        switch (deliveryMethod) {
            case PROGRESSIVE_HTTP:
                if ((stream instanceof VideoStream && ((VideoStream) stream).isVideoOnly())
                        || stream instanceof AudioStream) {
                    try {
                        final String manifestString = YoutubeProgressiveDashManifestCreator
                                .fromProgressiveStreamingUrl(stream.getContent(),
                                        Objects.requireNonNull(stream.getItagItem()),
                                        streamInfo.getDuration());
                        return buildYoutubeManualDashMediaSource(dataSource,
                                createDashManifest(manifestString, stream), stream, cacheKey,
                                metadata);
                    } catch (final CreationException | IOException | NullPointerException e) {
                        Log.w(TAG, ""Error when generating or parsing DASH manifest of ""
                                + ""YouTube progressive stream, falling back to a ""
                                + ""ProgressiveMediaSource."", e);
                        return buildYoutubeProgressiveMediaSource(dataSource, stream, cacheKey,
                                metadata);
                    }
                } else {
                    // Legacy progressive streams, subtitles are handled by
                    // VideoPlaybackResolver
                    return buildYoutubeProgressiveMediaSource(dataSource, stream, cacheKey,
                            metadata);
                }
            case DASH:
                // If the content is not a URL, uses the DASH delivery method and if the stream
                // type of the stream is a video stream, it means the content is an OTF stream
                // so we need to generate the manifest corresponding to the content (which is
                // the base URL of the OTF stream).

                try {
                    final String manifestString = YoutubeOtfDashManifestCreator
                            .fromOtfStreamingUrl(stream.getContent(),
                                    Objects.requireNonNull(stream.getItagItem()),
                                    streamInfo.getDuration());
                    return buildYoutubeManualDashMediaSource(dataSource,
                            createDashManifest(manifestString, stream), stream, cacheKey,
                            metadata);
                } catch (final CreationException | IOException | NullPointerException e) {
                    Log.e(TAG,
                            ""Error when generating the DASH manifest of YouTube OTF stream"", e);
                    throw new ResolverException(
                            ""Error when generating the DASH manifest of YouTube OTF stream"", e);
                }
            case HLS:
                return dataSource.getYoutubeHlsMediaSourceFactory().createMediaSource(
                        new MediaItem.Builder()
                                .setTag(metadata)
                                .setUri(Uri.parse(stream.getContent()))
                                .setCustomCacheKey(cacheKey)
                                .build());
            default:
                throw new ResolverException(""Unsupported delivery method for YouTube contents: ""
                        + deliveryMethod);
        }
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildYoutubeManualDashMediaSource,"DashMediaSource buildYoutubeManualDashMediaSource(PlayerDataSource,DashManifest,Stream,String,MediaItemTag)","[503, 515]","{'A305': [(503, 508)], 'A333': [(509, 509), (511, 515)], 'A300': [(510, 510)]}","{'A305': 0.46153846153846156, 'A333': 0.46153846153846156, 'A300': 0.07692307692307693}",A305,,"    private static DashMediaSource buildYoutubeManualDashMediaSource(
            final PlayerDataSource dataSource,
            final DashManifest dashManifest,
            final Stream stream,
            final String cacheKey,
            final MediaItemTag metadata) {
        return dataSource.getYoutubeDashMediaSourceFactory().createMediaSource(dashManifest,
                new MediaItem.Builder()
                        .setTag(metadata)
                        .setUri(Uri.parse(stream.getContent()))
                        .setCustomCacheKey(cacheKey)
                        .build());
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,buildYoutubeProgressiveMediaSource,"ProgressiveMediaSource buildYoutubeProgressiveMediaSource(PlayerDataSource,Stream,String,MediaItemTag)","[517, 528]","{'A310': [(528, 528)], 'A305': [(517, 521)], 'A333': [(522, 527)]}","{'A310': 0.08333333333333333, 'A305': 0.4166666666666667, 'A333': 0.5}",A333,,"    private static ProgressiveMediaSource buildYoutubeProgressiveMediaSource(
            final PlayerDataSource dataSource,
            final Stream stream,
            final String cacheKey,
            final MediaItemTag metadata) {
        return dataSource.getYoutubeProgressiveMediaSourceFactory()
                .createMediaSource(new MediaItem.Builder()
                        .setTag(metadata)
                        .setUri(Uri.parse(stream.getContent()))
                        .setCustomCacheKey(cacheKey)
                        .build());
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,manifestUrlToUri,Uri manifestUrlToUri(String),"[533, 535]","{'A305': [(533, 535)]}",{'A305': 1.0},A305,,"    private static Uri manifestUrlToUri(final String manifestUrl) {
        return Uri.parse(Objects.requireNonNullElse(manifestUrl, """"));
    }
"
org.schabi.newpipe.player.resolver,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/resolver/PlaybackResolver.java,,throwResolverExceptionIfUrlNullOrEmpty,void throwResolverExceptionIfUrlNullOrEmpty(String),"[537, 544]","{'A305': [(537, 539), (541, 541), (543, 544)], 'A333': [(540, 540), (542, 542)]}","{'A305': 0.75, 'A333': 0.25}",A305,,"    private static void throwResolverExceptionIfUrlNullOrEmpty(@Nullable final String url)
            throws ResolverException {
        if (url == null) {
            throw new ResolverException(""Null stream URL"");
        } else if (url.isEmpty()) {
            throw new ResolverException(""Empty stream URL"");
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onCreate,void onCreate(),"[85, 121]","{'A290': [(85, 86), (89, 93), (121, 121)], 'A305': [(87, 88), (94, 120)]}","{'A290': 0.21621621621621623, 'A305': 0.7837837837837838}",A305,,"    @Override
    public void onCreate() {
        super.onCreate();

        if (DEBUG) {
            Log.d(TAG, ""onCreate() called"");
        }
        ThemeHelper.setTheme(this);

        mediaBrowserImpl = new MediaBrowserImpl(this, this::notifyChildrenChanged);

        // see https://developer.android.com/training/cars/media#browser_workflow
        mediaSession = new MediaSessionCompat(this, ""MediaSessionPlayerServ"");
        setSessionToken(mediaSession.getSessionToken());
        sessionConnector = new MediaSessionConnector(mediaSession);
        sessionConnector.setMetadataDeduplicationEnabled(true);

        mediaBrowserPlaybackPreparer = new MediaBrowserPlaybackPreparer(
                this,
                sessionConnector::setCustomErrorMessage,
                () -> sessionConnector.setCustomErrorMessage(null),
                (playWhenReady) -> {
                    if (player != null) {
                        player.onPrepare();
                    }
                }
        );
        sessionConnector.setPlaybackPreparer(mediaBrowserPlaybackPreparer);

        // Note: you might be tempted to create the player instance and call startForeground here,
        // but be aware that the Android system might start the service just to perform media
        // queries. In those cases creating a player instance is a waste of resources, and calling
        // startForeground means creating a useless empty notification. In case it's really needed
        // the player instance can be created here, but startForeground() should definitely not be
        // called here unless the service is actually starting in the foreground, to avoid the
        // useless notification.
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onStartCommand,"int onStartCommand(Intent,int,int)","[123, 178]","{'A290': [(123, 126), (128, 130), (177, 178)], 'A305': [(127, 127), (131, 147), (150, 156), (159, 159), (167, 170), (176, 176)], 'A333': [(148, 149), (157, 158), (160, 166), (171, 175)]}","{'A290': 0.16071428571428573, 'A305': 0.5535714285714286, 'A333': 0.2857142857142857}",A305,,"    @Override
    public int onStartCommand(final Intent intent, final int flags, final int startId) {
        if (DEBUG) {
            Log.d(TAG, ""onStartCommand() called with: intent = ["" + intent
                    + ""], extras = ["" + BundleKt.toDebugString(intent.getExtras())
                    + ""], flags = ["" + flags + ""], startId = ["" + startId + ""]"");
        }

        // All internal NewPipe intents used to interact with the player, that are sent to the
        // PlayerService using startForegroundService(), will have SHOULD_START_FOREGROUND_EXTRA,
        // to ensure startForeground() is called (otherwise Android will force-crash the app).
        if (intent.getBooleanExtra(SHOULD_START_FOREGROUND_EXTRA, false)) {
            final boolean playerWasNull = (player == null);
            if (playerWasNull) {
                // make sure the player exists, in case the service was resumed
                player = new Player(this, mediaSession, sessionConnector);
            }

            // Be sure that the player notification is set and the service is started in foreground,
            // otherwise, the app may crash on Android 8+ as the service would never be put in the
            // foreground while we said to the system we would do so. The service is always
            // requested to be started in foreground, so always creating a notification if there is
            // no one already and starting the service in foreground should not create any issues.
            // If the service is already started in foreground, requesting it to be started
            // shouldn't do anything.
            player.UIs().get(NotificationPlayerUi.class)
                    .ifPresent(NotificationPlayerUi::createNotificationAndStartForeground);

            if (playerWasNull && onPlayerStartedOrStopped != null) {
                // notify that a new player was created (but do it after creating the foreground
                // notification just to make sure we don't incur, due to slowness, in
                // ""Context.startForegroundService() did not then call Service.startForeground()"")
                onPlayerStartedOrStopped.accept(player);
            }
        }

        if (Intent.ACTION_MEDIA_BUTTON.equals(intent.getAction())
                && (player == null || player.getPlayQueue() == null)) {
            /*
            No need to process media button's actions if the player is not working, otherwise
            the player service would strangely start with nothing to play
            Stop the service in this case, which will be removed from the foreground and its
            notification cancelled in its destruction
             */
            destroyPlayerAndStopService();
            return START_NOT_STICKY;
        }

        if (player != null) {
            player.handleIntent(intent);
            player.UIs().get(MediaSessionPlayerUi.class)
                    .ifPresent(ui -> ui.handleMediaButtonIntent(intent));
        }

        return START_NOT_STICKY;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,stopForImmediateReusing,void stopForImmediateReusing(),"[180, 191]","{'A290': [(181, 181), (183, 184), (186, 188), (190, 191)], 'A305': [(180, 180), (182, 182), (189, 189)], 'A333': [(185, 185)]}","{'A290': 0.6666666666666666, 'A305': 0.25, 'A333': 0.08333333333333333}",A290,,"    public void stopForImmediateReusing() {
        if (DEBUG) {
            Log.d(TAG, ""stopForImmediateReusing() called"");
        }

        if (player != null && !player.exoPlayerIsNull()) {
            // Releases wifi & cpu, disables keepScreenOn, etc.
            // We can't just pause the player here because it will make transition
            // from one stream to a new stream not smooth
            player.smoothStopForImmediateReusing();
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onTaskRemoved,void onTaskRemoved(Intent),"[193, 202]","{'A290': [(193, 195), (197, 202)], 'A333': [(196, 196)]}","{'A290': 0.9, 'A333': 0.1}",A290,,"    @Override
    public void onTaskRemoved(final Intent rootIntent) {
        super.onTaskRemoved(rootIntent);
        if (player != null && !player.videoPlayerSelected()) {
            return;
        }
        onDestroy();
        // Unload from memory completely
        Runtime.getRuntime().halt(0);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onDestroy,void onDestroy(),"[204, 216]","{'A290': [(204, 208)], 'A305': [(209, 210), (212, 215)], 'A320': [(211, 211), (216, 216)]}","{'A290': 0.38461538461538464, 'A305': 0.46153846153846156, 'A320': 0.15384615384615385}",A305,,"    @Override
    public void onDestroy() {
        if (DEBUG) {
            Log.d(TAG, ""destroy() called"");
        }
        super.onDestroy();

        cleanup();

        mediaBrowserPlaybackPreparer.dispose();
        mediaSession.release();
        mediaBrowserImpl.dispose();
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,cleanup,void cleanup(),"[218, 234]","{'A305': [(219, 224), (226, 233)], 'A320': [(218, 218), (225, 225), (234, 234)]}","{'A305': 0.8235294117647058, 'A320': 0.17647058823529413}",A305,,"    private void cleanup() {
        if (player != null) {
            if (onPlayerStartedOrStopped != null) {
                // notify that the player is being destroyed
                onPlayerStartedOrStopped.accept(null);
            }
            player.destroy();
            player = null;
        }

        // Should already be handled by MediaSessionPlayerUi, but just to be sure.
        mediaSession.setActive(false);

        // Should already be handled by NotificationUtil.cancelNotificationAndStopForeground() in
        // NotificationPlayerUi, but let's make sure that the foreground service is stopped.
        ServiceCompat.stopForeground(this, ServiceCompat.STOP_FOREGROUND_REMOVE);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,destroyPlayerAndStopService,void destroyPlayerAndStopService(),"[243, 257]","{'A290': [(257, 257)], 'A305': [(243, 247), (249, 256)], 'A320': [(248, 248)]}","{'A290': 0.06666666666666667, 'A305': 0.8666666666666667, 'A320': 0.06666666666666667}",A305,,"    public void destroyPlayerAndStopService() {
        if (DEBUG) {
            Log.d(TAG, ""destroyPlayerAndStopService() called"");
        }

        cleanup();

        // This only really stops the service if there are no other service connections (see docs):
        // for example the (Android Auto) media browser binder will block stopService().
        // This is why we also stopForeground() above, to make sure the notification is removed.
        // If we were to call stopSelf(), then the service would be surely stopped (regardless of
        // other service connections), but this would be a waste of resources since the service
        // would be immediately restarted by those same connections to perform the queries.
        stopService(new Intent(this, PlayerService.class));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,attachBaseContext,void attachBaseContext(Context),"[259, 262]","{'A290': [(259, 262)]}",{'A290': 1.0},A290,,"    @Override
    protected void attachBaseContext(final Context base) {
        super.attachBaseContext(AudioServiceLeakFix.preventLeakOf(base));
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onBind,IBinder onBind(Intent),"[266, 287]","{'A290': [(266, 267), (287, 287)], 'A305': [(268, 286)]}","{'A290': 0.13636363636363635, 'A305': 0.8636363636363636}",A305,,"    @Override
    public IBinder onBind(final Intent intent) {
        if (DEBUG) {
            Log.d(TAG, ""onBind() called with: intent = ["" + intent
                    + ""], extras = ["" + BundleKt.toDebugString(intent.getExtras()) + ""]"");
        }

        if (BIND_PLAYER_HOLDER_ACTION.equals(intent.getAction())) {
            // Note that this binder might be reused multiple times while the service is alive, even
            // after unbind() has been called: https://stackoverflow.com/a/8794930 .
            return mBinder;

        } else if (MediaBrowserServiceCompat.SERVICE_INTERFACE.equals(intent.getAction())) {
            // MediaBrowserService also uses its own binder, so for actions related to the media
            // browser service, pass the onBind to the superclass.
            return super.onBind(intent);

        } else {
            // This is an unknown request, avoid returning any binder to not leak objects.
            return null;
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService.LocalBinder,getService,PlayerService getService(),"[296, 298]","{'A290': [(298, 298)], 'A305': [(296, 297)]}","{'A290': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"        public PlayerService getService() {
            return playerService.get();
        }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,getPlayer,Player getPlayer(),"[305, 308]","{'A305': [(305, 308)]}",{'A305': 1.0},A305,,"    @Nullable
    public Player getPlayer() {
        return player;
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,setPlayerListener,void setPlayerListener(Consumer<Player>),"[316, 322]","{'A290': [(321, 322)], 'A305': [(316, 320)]}","{'A290': 0.2857142857142857, 'A305': 0.7142857142857143}",A305,,"    public void setPlayerListener(@Nullable final Consumer<Player> listener) {
        this.onPlayerStartedOrStopped = listener;
        if (listener != null) {
            // if there is no player, then `null` will be sent here, to ensure the state is synced
            listener.accept(player);
        }
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onGetRoot,"BrowserRoot onGetRoot(String,int,Bundle)","[326, 331]","{'A305': [(326, 331)]}",{'A305': 1.0},A305,,"    @Override
    public BrowserRoot onGetRoot(@NonNull final String clientPackageName,
                                 final int clientUid,
                                 @Nullable final Bundle rootHints) {
        return mediaBrowserImpl.onGetRoot(clientPackageName, clientUid, rootHints);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onLoadChildren,"void onLoadChildren(String,Result<List<MediaBrowserCompat.MediaItem>>)","[333, 337]","{'A305': [(333, 337)]}",{'A305': 1.0},A305,,"    @Override
    public void onLoadChildren(@NonNull final String parentId,
                               @NonNull final Result<List<MediaBrowserCompat.MediaItem>> result) {
        mediaBrowserImpl.onLoadChildren(parentId, result);
    }
"
org.schabi.newpipe.player,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/player/PlayerService.java,PlayerService,onSearch,"void onSearch(String,Bundle,Result<List<MediaBrowserCompat.MediaItem>>)","[339, 344]","{'A305': [(339, 344)]}",{'A305': 1.0},A305,,"    @Override
    public void onSearch(@NonNull final String query,
                         final Bundle extras,
                         @NonNull final Result<List<MediaBrowserCompat.MediaItem>> result) {
        mediaBrowserImpl.onSearch(query, result);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,init,DownloaderImpl init(OkHttpClient.Builder),"[57, 61]","{'A301': [(61, 61)], 'A294': [(57, 60)]}","{'A301': 0.2, 'A294': 0.8}",A294,,"    public static DownloaderImpl init(@Nullable final OkHttpClient.Builder builder) {
        instance = new DownloaderImpl(
                builder != null ? builder : new OkHttpClient.Builder());
        return instance;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,getInstance,DownloaderImpl getInstance(),"[63, 65]","{'A301': [(63, 65)]}",{'A301': 1.0},A301,,"    public static DownloaderImpl getInstance() {
        return instance;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,getCookies,String getCookies(String),"[67, 77]","{'A330': [(67, 67), (71, 71), (77, 77)], 'A295': [(68, 70), (72, 76)]}","{'A330': 0.2727272727272727, 'A295': 0.7272727272727273}",A295,,"    public String getCookies(final String url) {
        final String youtubeCookie = url.contains(YOUTUBE_DOMAIN)
                ? getCookie(YOUTUBE_RESTRICTED_MODE_COOKIE_KEY) : null;

        // Recaptcha cookie is always added TODO: not sure if this is necessary
        return Stream.of(youtubeCookie, getCookie(ReCaptchaActivity.RECAPTCHA_COOKIES_KEY))
                .filter(Objects::nonNull)
                .flatMap(cookies -> Arrays.stream(cookies.split(""; *"")))
                .distinct()
                .collect(Collectors.joining(""; ""));
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,getCookie,String getCookie(String),"[79, 81]","{'A330': [(79, 81)]}",{'A330': 1.0},A330,,"    public String getCookie(final String key) {
        return mCookies.get(key);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,setCookie,"void setCookie(String,String)","[83, 85]","{'A301': [(85, 85)], 'A330': [(83, 84)]}","{'A301': 0.3333333333333333, 'A330': 0.6666666666666666}",A330,,"    public void setCookie(final String key, final String cookie) {
        mCookies.put(key, cookie);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,removeCookie,void removeCookie(String),"[87, 89]","{'A330': [(87, 89)]}",{'A330': 1.0},A330,,"    public void removeCookie(final String key) {
        mCookies.remove(key);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,updateYoutubeRestrictedModeCookies,void updateYoutubeRestrictedModeCookies(Context),"[91, 97]","{'A330': [(91, 91), (93, 93), (95, 97)], 'A294': [(92, 92), (94, 94)]}","{'A330': 0.7142857142857143, 'A294': 0.2857142857142857}",A330,,"    public void updateYoutubeRestrictedModeCookies(final Context context) {
        final String restrictedModeEnabledKey =
                context.getString(R.string.youtube_restricted_mode_enabled);
        final boolean restrictedModeEnabled = PreferenceManager.getDefaultSharedPreferences(context)
                .getBoolean(restrictedModeEnabledKey, false);
        updateYoutubeRestrictedModeCookies(restrictedModeEnabled);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,updateYoutubeRestrictedModeCookies,void updateYoutubeRestrictedModeCookies(boolean),"[99, 107]","{'A301': [(107, 107)], 'A330': [(99, 106)]}","{'A301': 0.1111111111111111, 'A330': 0.8888888888888888}",A330,,"    public void updateYoutubeRestrictedModeCookies(final boolean youtubeRestrictedModeEnabled) {
        if (youtubeRestrictedModeEnabled) {
            setCookie(YOUTUBE_RESTRICTED_MODE_COOKIE_KEY,
                    YOUTUBE_RESTRICTED_MODE_COOKIE);
        } else {
            removeCookie(YOUTUBE_RESTRICTED_MODE_COOKIE_KEY);
        }
        InfoCache.getInstance().clearCache();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,getContentLength,long getContentLength(String),"[115, 124]","{'A301': [(116, 118), (120, 120), (122, 124)], 'A294': [(115, 115), (119, 119), (121, 121)]}","{'A301': 0.7, 'A294': 0.3}",A301,,"    public long getContentLength(final String url) throws IOException {
        try {
            final Response response = head(url);
            return Long.parseLong(response.getHeader(""Content-Length""));
        } catch (final NumberFormatException e) {
            throw new IOException(""Invalid content length"", e);
        } catch (final ReCaptchaException e) {
            throw new IOException(e);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/DownloaderImpl.java,DownloaderImpl,execute,Response execute(Request),"[126, 177]","{'A301': [(126, 126), (129, 135), (137, 139), (142, 143), (147, 148), (161, 161), (166, 168), (176, 176)], 'A330': [(145, 146)], 'A294': [(127, 128), (144, 144)], 'A299': [(136, 136)], 'A403': [(140, 141), (149, 160), (162, 165), (169, 175)], 'A404': [(177, 177)]}","{'A301': 0.38461538461538464, 'A330': 0.038461538461538464, 'A294': 0.057692307692307696, 'A299': 0.019230769230769232, 'A403': 0.4807692307692308, 'A404': 0.019230769230769232}",A403,,"    @Override
    public Response execute(@NonNull final Request request)
            throws IOException, ReCaptchaException {
        final String httpMethod = request.httpMethod();
        final String url = request.url();
        final Map<String, List<String>> headers = request.headers();
        final byte[] dataToSend = request.dataToSend();

        RequestBody requestBody = null;
        if (dataToSend != null) {
            requestBody = RequestBody.create(dataToSend);
        }

        final okhttp3.Request.Builder requestBuilder = new okhttp3.Request.Builder()
                .method(httpMethod, requestBody)
                .url(url)
                .addHeader(""User-Agent"", USER_AGENT);

        final String cookies = getCookies(url);
        if (!cookies.isEmpty()) {
            requestBuilder.addHeader(""Cookie"", cookies);
        }

        headers.forEach((headerName, headerValueList) -> {
            requestBuilder.removeHeader(headerName);
            headerValueList.forEach(headerValue ->
                    requestBuilder.addHeader(headerName, headerValue));
        });

        try (
                okhttp3.Response response = client.newCall(requestBuilder.build()).execute()
        ) {
            if (response.code() == 429) {
                throw new ReCaptchaException(""reCaptcha Challenge requested"", url);
            }

            String responseBodyToReturn = null;
            try (ResponseBody body = response.body()) {
                if (body != null) {
                    responseBodyToReturn = body.string();
                }
            }

            final String latestUrl = response.request().url().toString();
            return new Response(
                    response.code(),
                    response.message(),
                    response.headers().toMultimap(),
                    responseBodyToReturn,
                    latestUrl);
        }
    }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[35, 118]","{'A310': [(35, 35), (40, 40), (45, 47), (71, 71), (92, 94), (97, 97), (100, 100), (103, 105), (112, 113), (118, 118)], 'A302': [(38, 39), (114, 114), (116, 117)], 'A294': [(36, 37), (41, 44), (48, 70), (72, 91), (95, 96), (98, 99), (101, 102), (106, 111), (115, 115)]}","{'A310': 0.20238095238095238, 'A302': 0.05952380952380952, 'A294': 0.7380952380952381}",A294,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            if (DEBUG) {
                Log.d(TAG, ""Start migrating database"");
            }
            /*
             * Unfortunately these queries must be hardcoded due to the possibility of
             * schema and names changing at a later date, thus invalidating the older migration
             * scripts if they are not hardcoded.
             * */

            // Not much we can do about this, since room doesn't create tables before migration.
            // It's either this or blasting the entire database anew.
            database.execSQL(""CREATE  INDEX `index_search_history_search` ""
                    + ""ON `search_history` (`search`)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS `streams` ""
                    + ""(`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                    + ""`service_id` INTEGER NOT NULL, `url` TEXT, `title` TEXT, ""
                    + ""`stream_type` TEXT, `duration` INTEGER, `uploader` TEXT, ""
                    + ""`thumbnail_url` TEXT)"");
            database.execSQL(""CREATE UNIQUE INDEX `index_streams_service_id_url` ""
                    + ""ON `streams` (`service_id`, `url`)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS `stream_history` ""
                    + ""(`stream_id` INTEGER NOT NULL, `access_date` INTEGER NOT NULL, ""
                    + ""`repeat_count` INTEGER NOT NULL, PRIMARY KEY(`stream_id`, `access_date`), ""
                    + ""FOREIGN KEY(`stream_id`) REFERENCES `streams`(`uid`) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE )"");
            database.execSQL(""CREATE  INDEX `index_stream_history_stream_id` ""
                    + ""ON `stream_history` (`stream_id`)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS `stream_state` ""
                    + ""(`stream_id` INTEGER NOT NULL, `progress_time` INTEGER NOT NULL, ""
                    + ""PRIMARY KEY(`stream_id`), FOREIGN KEY(`stream_id`) ""
                    + ""REFERENCES `streams`(`uid`) ON UPDATE CASCADE ON DELETE CASCADE )"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS `playlists` ""
                    + ""(`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                    + ""`name` TEXT, `thumbnail_url` TEXT)"");
            database.execSQL(""CREATE  INDEX `index_playlists_name` ON `playlists` (`name`)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS `playlist_stream_join` ""
                    + ""(`playlist_id` INTEGER NOT NULL, `stream_id` INTEGER NOT NULL, ""
                    + ""`join_index` INTEGER NOT NULL, PRIMARY KEY(`playlist_id`, `join_index`), ""
                    + ""FOREIGN KEY(`playlist_id`) REFERENCES `playlists`(`uid`) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, ""
                    + ""FOREIGN KEY(`stream_id`) REFERENCES `streams`(`uid`) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)"");
            database.execSQL(""CREATE UNIQUE INDEX ""
                    + ""`index_playlist_stream_join_playlist_id_join_index` ""
                    + ""ON `playlist_stream_join` (`playlist_id`, `join_index`)"");
            database.execSQL(""CREATE  INDEX `index_playlist_stream_join_stream_id` ""
                    + ""ON `playlist_stream_join` (`stream_id`)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS `remote_playlists` ""
                    + ""(`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                    + ""`service_id` INTEGER NOT NULL, `name` TEXT, `url` TEXT, ""
                    + ""`thumbnail_url` TEXT, `uploader` TEXT, `stream_count` INTEGER)"");
            database.execSQL(""CREATE  INDEX `index_remote_playlists_name` ""
                    + ""ON `remote_playlists` (`name`)"");
            database.execSQL(""CREATE UNIQUE INDEX `index_remote_playlists_service_id_url` ""
                    + ""ON `remote_playlists` (`service_id`, `url`)"");

            // Populate streams table with existing entries in watch history
            // Latest data first, thus ignoring older entries with the same indices
            database.execSQL(""INSERT OR IGNORE INTO streams (service_id, url, title, ""
                    + ""stream_type, duration, uploader, thumbnail_url) ""

                    + ""SELECT service_id, url, title, 'VIDEO_STREAM', duration, ""
                    + ""uploader, thumbnail_url ""

                    + ""FROM watch_history ""
                    + ""ORDER BY creation_date DESC"");

            // Once the streams have PKs, join them with the normalized history table
            // and populate it with the remaining data from watch history
            database.execSQL(""INSERT INTO stream_history (stream_id, access_date, repeat_count)""
                    + ""SELECT uid, creation_date, 1 ""
                    + ""FROM watch_history INNER JOIN streams ""
                    + ""ON watch_history.service_id == streams.service_id ""
                    + ""AND watch_history.url == streams.url ""
                    + ""ORDER BY creation_date DESC"");

            database.execSQL(""DROP TABLE IF EXISTS watch_history"");

            if (DEBUG) {
                Log.d(TAG, ""Stop migrating database"");
            }
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[122, 175]","{'A294': [(123, 123), (125, 131), (133, 135), (137, 139), (141, 141), (145, 146), (149, 155), (157, 159), (161, 174)], 'A301': [(122, 122), (124, 124), (132, 132), (136, 136), (140, 140), (142, 144), (147, 148), (156, 156), (160, 160), (175, 175)]}","{'A294': 0.7592592592592593, 'A301': 0.24074074074074073}",A294,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            // Add NOT NULLs and new fields
            database.execSQL(""CREATE TABLE IF NOT EXISTS streams_new ""
                    + ""(uid INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                    + ""service_id INTEGER NOT NULL, url TEXT NOT NULL, title TEXT NOT NULL, ""
                    + ""stream_type TEXT NOT NULL, duration INTEGER NOT NULL, ""
                    + ""uploader TEXT NOT NULL, thumbnail_url TEXT, view_count INTEGER, ""
                    + ""textual_upload_date TEXT, upload_date INTEGER, ""
                    + ""is_upload_date_approximation INTEGER)"");

            database.execSQL(""INSERT INTO streams_new (uid, service_id, url, title, stream_type, ""
                    + ""duration, uploader, thumbnail_url, view_count, textual_upload_date, ""
                    + ""upload_date, is_upload_date_approximation) ""

                    + ""SELECT uid, service_id, url, ifnull(title, ''), ""
                    + ""ifnull(stream_type, 'VIDEO_STREAM'), ifnull(duration, 0), ""
                    + ""ifnull(uploader, ''), ifnull(thumbnail_url, ''), NULL, NULL, NULL, NULL ""

                    + ""FROM streams WHERE url IS NOT NULL"");

            database.execSQL(""DROP TABLE streams"");
            database.execSQL(""ALTER TABLE streams_new RENAME TO streams"");
            database.execSQL(""CREATE UNIQUE INDEX index_streams_service_id_url ""
                    + ""ON streams (service_id, url)"");

            // Tables for feed feature
            database.execSQL(""CREATE TABLE IF NOT EXISTS feed ""
                    + ""(stream_id INTEGER NOT NULL, subscription_id INTEGER NOT NULL, ""
                    + ""PRIMARY KEY(stream_id, subscription_id), ""
                    + ""FOREIGN KEY(stream_id) REFERENCES streams(uid) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, ""
                    + ""FOREIGN KEY(subscription_id) REFERENCES subscriptions(uid) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)"");
            database.execSQL(""CREATE INDEX index_feed_subscription_id ON feed (subscription_id)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS feed_group ""
                    + ""(uid INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, name TEXT NOT NULL, ""
                    + ""icon_id INTEGER NOT NULL, sort_order INTEGER NOT NULL)"");
            database.execSQL(""CREATE INDEX index_feed_group_sort_order ON feed_group (sort_order)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS feed_group_subscription_join ""
                    + ""(group_id INTEGER NOT NULL, subscription_id INTEGER NOT NULL, ""
                    + ""PRIMARY KEY(group_id, subscription_id), ""
                    + ""FOREIGN KEY(group_id) REFERENCES feed_group(uid) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED, ""
                    + ""FOREIGN KEY(subscription_id) REFERENCES subscriptions(uid) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)"");
            database.execSQL(""CREATE INDEX index_feed_group_subscription_join_subscription_id ""
                    + ""ON feed_group_subscription_join (subscription_id)"");
            database.execSQL(""CREATE TABLE IF NOT EXISTS feed_last_updated ""
                    + ""(subscription_id INTEGER NOT NULL, last_updated INTEGER, ""
                    + ""PRIMARY KEY(subscription_id), ""
                    + ""FOREIGN KEY(subscription_id) REFERENCES subscriptions(uid) ""
                    + ""ON UPDATE CASCADE ON DELETE CASCADE DEFERRABLE INITIALLY DEFERRED)"");
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[179, 184]","{'A349': [(179, 184)]}",{'A349': 1.0},A349,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            database.execSQL(
                    ""ALTER TABLE streams ADD COLUMN uploader_url TEXT""
            );
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[188, 192]","{'A340': [(188, 190)], 'A352': [(191, 192)]}","{'A340': 0.6, 'A352': 0.4}",A340,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            database.execSQL(""ALTER TABLE `subscriptions` ADD COLUMN `notification_mode` ""
                    + ""INTEGER NOT NULL DEFAULT 0"");
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[196, 200]","{'A350': [(196, 200)]}",{'A350': 1.0},A350,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            database.execSQL(""ALTER TABLE `playlists` ADD COLUMN `is_thumbnail_permanent` ""
                    + ""INTEGER NOT NULL DEFAULT 0"");
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[204, 237]","{'A350': [(204, 237)]}",{'A350': 1.0},A350,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            // Create a new column thumbnail_stream_id
            database.execSQL(""ALTER TABLE `playlists` ADD COLUMN `thumbnail_stream_id` ""
                    + ""INTEGER NOT NULL DEFAULT -1"");

            // Migrate the thumbnail_url to the thumbnail_stream_id
            database.execSQL(""UPDATE playlists SET thumbnail_stream_id = (""
                    + "" SELECT CASE WHEN COUNT(*) != 0 then stream_uid ELSE -1 END""
                    + "" FROM (""
                    + "" SELECT p.uid AS playlist_uid, s.uid AS stream_uid""
                    + "" FROM playlists p""
                    + "" LEFT JOIN playlist_stream_join ps ON p.uid = ps.playlist_id""
                    + "" LEFT JOIN streams s ON s.uid = ps.stream_id""
                    + "" WHERE s.thumbnail_url = p.thumbnail_url) AS temporary_table""
                    + "" WHERE playlist_uid = playlists.uid)"");

            // Remove the thumbnail_url field in the playlist table
            database.execSQL(""CREATE TABLE IF NOT EXISTS `playlists_new`""
                    + ""(uid INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                    + ""name TEXT, ""
                    + ""is_thumbnail_permanent INTEGER NOT NULL, ""
                    + ""thumbnail_stream_id INTEGER NOT NULL)"");

            database.execSQL(""INSERT INTO playlists_new""
                    + "" SELECT uid, name, is_thumbnail_permanent, thumbnail_stream_id ""
                    + "" FROM playlists"");


            database.execSQL(""DROP TABLE playlists"");
            database.execSQL(""ALTER TABLE playlists_new RENAME TO playlists"");
            database.execSQL(""CREATE INDEX IF NOT EXISTS ""
                    + ""`index_playlists_name` ON `playlists` (`name`)"");
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[241, 246]","{'A298': [(241, 246)]}",{'A298': 1.0},A298,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            database.execSQL(""DELETE FROM search_history WHERE id NOT IN (SELECT id FROM (SELECT ""
                    + ""MIN(id) as id FROM search_history GROUP BY trim(search), service_id ) tmp)"");
            database.execSQL(""UPDATE search_history SET search = trim(search)"");
        }
"
org.schabi.newpipe.database,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/Migrations.java,Migrations,migrate,void migrate(SupportSQLiteDatabase),"[250, 302]","{'A340': [(302, 302)], 'A352': [(250, 258), (268, 268), (271, 280), (282, 283), (286, 286), (288, 288), (291, 301)], 'A305': [(259, 267), (269, 270), (281, 281), (284, 285), (287, 287), (289, 290)]}","{'A340': 0.018867924528301886, 'A352': 0.660377358490566, 'A305': 0.32075471698113206}",A352,,"        @Override
        public void migrate(@NonNull final SupportSQLiteDatabase database) {
            try {
                database.beginTransaction();

                // Update playlists.
                // Create a temp table to initialize display_index.
                database.execSQL(""CREATE TABLE `playlists_tmp` ""
                        + ""(`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                        + ""`name` TEXT, `is_thumbnail_permanent` INTEGER NOT NULL, ""
                        + ""`thumbnail_stream_id` INTEGER NOT NULL, ""
                        + ""`display_index` INTEGER NOT NULL)"");
                database.execSQL(""INSERT INTO `playlists_tmp` ""
                        + ""(`uid`, `name`, `is_thumbnail_permanent`, `thumbnail_stream_id`, ""
                        + ""`display_index`) ""
                        + ""SELECT `uid`, `name`, `is_thumbnail_permanent`, `thumbnail_stream_id`, ""
                        + ""-1 ""
                        + ""FROM `playlists`"");

                // Replace the old table, note that this also removes the index on the name which
                // we don't need anymore.
                database.execSQL(""DROP TABLE `playlists`"");
                database.execSQL(""ALTER TABLE `playlists_tmp` RENAME TO `playlists`"");


                // Update remote_playlists.
                // Create a temp table to initialize display_index.
                database.execSQL(""CREATE TABLE `remote_playlists_tmp` ""
                        + ""(`uid` INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, ""
                        + ""`service_id` INTEGER NOT NULL, `name` TEXT, `url` TEXT, ""
                        + ""`thumbnail_url` TEXT, `uploader` TEXT, ""
                        + ""`display_index` INTEGER NOT NULL,""
                        + ""`stream_count` INTEGER)"");
                database.execSQL(""INSERT INTO `remote_playlists_tmp` (`uid`, `service_id`, ""
                        + ""`name`, `url`, `thumbnail_url`, `uploader`, `display_index`, ""
                        + ""`stream_count`)""
                        + ""SELECT `uid`, `service_id`, `name`, `url`, `thumbnail_url`, `uploader`, ""
                        + ""-1, `stream_count` FROM `remote_playlists`"");

                // Replace the old table, note that this also removes the index on the name which
                // we don't need anymore.
                database.execSQL(""DROP TABLE `remote_playlists`"");
                database.execSQL(""ALTER TABLE `remote_playlists_tmp` RENAME TO `remote_playlists`"");

                // Create index on the new table.
                database.execSQL(""CREATE UNIQUE INDEX `index_remote_playlists_service_id_url` ""
                        + ""ON `remote_playlists` (`service_id`, `url`)"");

                database.setTransactionSuccessful();
            } finally {
                database.endTransaction();
            }
        }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,getUid,long getUid(),"[61, 63]","{'A310': [(61, 63)]}",{'A310': 1.0},A310,,"    public long getUid() {
        return uid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,setUid,void setUid(long),"[65, 67]","{'A310': [(66, 67)], 'A294': [(65, 65)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setUid(final long uid) {
        this.uid = uid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,getName,String getName(),"[69, 71]","{'A310': [(69, 71)]}",{'A310': 1.0},A310,,"    public String getName() {
        return name;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,setName,void setName(String),"[73, 75]","{'A310': [(74, 75)], 'A294': [(73, 73)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setName(final String name) {
        this.name = name;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,getThumbnailStreamId,long getThumbnailStreamId(),"[77, 79]","{'A310': [(79, 79)], 'A350': [(77, 78)]}","{'A310': 0.3333333333333333, 'A350': 0.6666666666666666}",A350,,"    public long getThumbnailStreamId() {
        return thumbnailStreamId;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,setThumbnailStreamId,void setThumbnailStreamId(long),"[81, 83]","{'A310': [(83, 83)], 'A350': [(81, 82)]}","{'A310': 0.3333333333333333, 'A350': 0.6666666666666666}",A350,,"    public void setThumbnailStreamId(final long thumbnailStreamId) {
        this.thumbnailStreamId = thumbnailStreamId;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,getIsThumbnailPermanent,boolean getIsThumbnailPermanent(),"[85, 87]","{'A310': [(87, 87)], 'A350': [(85, 86)]}","{'A310': 0.3333333333333333, 'A350': 0.6666666666666666}",A350,,"    public boolean getIsThumbnailPermanent() {
        return isThumbnailPermanent;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,setIsThumbnailPermanent,void setIsThumbnailPermanent(boolean),"[89, 91]","{'A310': [(91, 91)], 'A350': [(89, 90)]}","{'A310': 0.3333333333333333, 'A350': 0.6666666666666666}",A350,,"    public void setIsThumbnailPermanent(final boolean isThumbnailSet) {
        this.isThumbnailPermanent = isThumbnailSet;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,getDisplayIndex,long getDisplayIndex(),"[93, 95]","{'A352': [(93, 95)]}",{'A352': 1.0},A352,,"    public long getDisplayIndex() {
        return displayIndex;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistEntity.java,PlaylistEntity,setDisplayIndex,void setDisplayIndex(long),"[97, 99]","{'A352': [(97, 99)]}",{'A352': 1.0},A352,,"    public void setDisplayIndex(final long displayIndex) {
        this.displayIndex = displayIndex;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistStreamEntity.java,PlaylistStreamEntity,getPlaylistUid,long getPlaylistUid(),"[53, 55]","{'A310': [(53, 55)]}",{'A310': 1.0},A310,,"    public long getPlaylistUid() {
        return playlistUid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistStreamEntity.java,PlaylistStreamEntity,setPlaylistUid,void setPlaylistUid(long),"[57, 59]","{'A310': [(59, 59)], 'A294': [(57, 58)]}","{'A310': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"    public void setPlaylistUid(final long playlistUid) {
        this.playlistUid = playlistUid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistStreamEntity.java,PlaylistStreamEntity,getStreamUid,long getStreamUid(),"[61, 63]","{'A310': [(63, 63)], 'A294': [(61, 62)]}","{'A310': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"    public long getStreamUid() {
        return streamUid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistStreamEntity.java,PlaylistStreamEntity,setStreamUid,void setStreamUid(long),"[65, 67]","{'A310': [(67, 67)], 'A294': [(65, 66)]}","{'A310': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"    public void setStreamUid(final long streamUid) {
        this.streamUid = streamUid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistStreamEntity.java,PlaylistStreamEntity,getIndex,int getIndex(),"[69, 71]","{'A310': [(71, 71)], 'A294': [(69, 70)]}","{'A310': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"    public int getIndex() {
        return index;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistStreamEntity.java,PlaylistStreamEntity,setIndex,void setIndex(int),"[73, 75]","{'A310': [(74, 75)], 'A294': [(73, 73)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setIndex(final int index) {
        this.index = index;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,isIdenticalTo,boolean isIdenticalTo(PlaylistInfo),"[96, 111]","{'A310': [(96, 97), (111, 111)], 'A368': [(98, 105), (110, 110)], 'A305': [(106, 109)]}","{'A310': 0.1875, 'A368': 0.5625, 'A305': 0.25}",A368,,"    @Ignore
    public boolean isIdenticalTo(final PlaylistInfo info) {
        /*
         * Returns boolean comparing the online playlist and the local copy.
         * (False if info changed such as playlist name or track count)
         */
        return getServiceId() == info.getServiceId()
                && getStreamCount() == info.getStreamCount()
                && TextUtils.equals(getName(), info.getName())
                && TextUtils.equals(getUrl(), info.getUrl())
                // we want to update the local playlist data even when either the remote thumbnail
                // URL changes, or the preferred image quality setting is changed by the user
                && TextUtils.equals(getThumbnailUrl(),
                ImageStrategy.imageListToDbUrl(info.getThumbnails()))
                && TextUtils.equals(getUploader(), info.getUploaderName());
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getUid,long getUid(),"[113, 116]","{'A310': [(114, 116)], 'A352': [(113, 113)]}","{'A310': 0.75, 'A352': 0.25}",A310,,"    @Override
    public long getUid() {
        return uid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setUid,void setUid(long),"[118, 120]","{'A310': [(119, 120)], 'A294': [(118, 118)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setUid(final long uid) {
        this.uid = uid;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getServiceId,int getServiceId(),"[122, 124]","{'A310': [(122, 124)]}",{'A310': 1.0},A310,,"    public int getServiceId() {
        return serviceId;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setServiceId,void setServiceId(int),"[126, 128]","{'A310': [(127, 128)], 'A294': [(126, 126)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setServiceId(final int serviceId) {
        this.serviceId = serviceId;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getName,String getName(),"[130, 132]","{'A310': [(130, 132)]}",{'A310': 1.0},A310,,"    public String getName() {
        return name;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setName,void setName(String),"[134, 136]","{'A310': [(135, 136)], 'A294': [(134, 134)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setName(final String name) {
        this.name = name;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getThumbnailUrl,String getThumbnailUrl(),"[138, 142]","{'A310': [(140, 142)], 'A305': [(138, 139)]}","{'A310': 0.6, 'A305': 0.4}",A310,,"    @Nullable
    @Override
    public String getThumbnailUrl() {
        return thumbnailUrl;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setThumbnailUrl,void setThumbnailUrl(String),"[144, 146]","{'A310': [(145, 146)], 'A294': [(144, 144)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setThumbnailUrl(final String thumbnailUrl) {
        this.thumbnailUrl = thumbnailUrl;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getUrl,String getUrl(),"[148, 150]","{'A310': [(148, 150)]}",{'A310': 1.0},A310,,"    public String getUrl() {
        return url;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setUrl,void setUrl(String),"[152, 154]","{'A310': [(153, 154)], 'A294': [(152, 152)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setUrl(final String url) {
        this.url = url;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getUploader,String getUploader(),"[156, 158]","{'A310': [(156, 158)]}",{'A310': 1.0},A310,,"    public String getUploader() {
        return uploader;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setUploader,void setUploader(String),"[160, 162]","{'A310': [(161, 162)], 'A294': [(160, 160)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setUploader(final String uploader) {
        this.uploader = uploader;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getDisplayIndex,long getDisplayIndex(),"[164, 167]","{'A352': [(164, 167)]}",{'A352': 1.0},A352,,"    @Override
    public long getDisplayIndex() {
        return displayIndex;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setDisplayIndex,void setDisplayIndex(long),"[169, 172]","{'A352': [(169, 172)]}",{'A352': 1.0},A352,,"    @Override
    public void setDisplayIndex(final long displayIndex) {
        this.displayIndex = displayIndex;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getStreamCount,Long getStreamCount(),"[174, 176]","{'A310': [(174, 176)]}",{'A310': 1.0},A310,,"    public Long getStreamCount() {
        return streamCount;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,setStreamCount,void setStreamCount(Long),"[178, 180]","{'A310': [(179, 180)], 'A294': [(178, 178)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setStreamCount(final Long streamCount) {
        this.streamCount = streamCount;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getLocalItemType,LocalItemType getLocalItemType(),"[182, 185]","{'A310': [(182, 185)]}",{'A310': 1.0},A310,,"    @Override
    public LocalItemType getLocalItemType() {
        return PLAYLIST_REMOTE_ITEM;
    }
"
org.schabi.newpipe.database.playlist.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/model/PlaylistRemoteEntity.java,PlaylistRemoteEntity,getOrderingName,String getOrderingName(),"[187, 190]","{'A310': [(187, 190)]}",{'A310': 1.0},A310,,"    @Override
    public String getOrderingName() {
        return name;
    }
"
org.schabi.newpipe.database.playlist.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/dao/PlaylistStreamDAO.java,,listByService,Flowable<List<PlaylistStreamEntity>> listByService(int),"[51, 54]","{'A310': [(51, 51), (53, 54)], 'A295': [(52, 52)]}","{'A310': 0.75, 'A295': 0.25}",A310,,"    @Override
    default Flowable<List<PlaylistStreamEntity>> listByService(final int serviceId) {
        throw new UnsupportedOperationException();
    }
"
org.schabi.newpipe.database.playlist.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/dao/PlaylistDAO.java,,listByService,Flowable<List<PlaylistEntity>> listByService(int),"[27, 30]","{'A310': [(27, 27), (29, 30)], 'A295': [(28, 28)]}","{'A310': 0.75, 'A295': 0.25}",A310,,"    @Override
    default Flowable<List<PlaylistEntity>> listByService(final int serviceId) {
        throw new UnsupportedOperationException();
    }
"
org.schabi.newpipe.database.playlist.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/dao/PlaylistDAO.java,,upsertPlaylist,long upsertPlaylist(PlaylistEntity),"[41, 52]","{'A352': [(41, 52)]}",{'A352': 1.0},A352,,"    @Transaction
    default long upsertPlaylist(final PlaylistEntity playlist) {
        final long playlistId = playlist.getUid();

        if (playlistId == -1) {
            // This situation is probably impossible.
            return insert(playlist);
        } else {
            update(playlist);
            return playlistId;
        }
    }
"
org.schabi.newpipe.database.playlist.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/dao/PlaylistRemoteDAO.java,,upsert,long upsert(PlaylistRemoteEntity),"[52, 63]","{'A310': [(52, 52), (54, 63)], 'A295': [(53, 53)]}","{'A310': 0.9166666666666666, 'A295': 0.08333333333333333}",A310,,"    @Transaction
    default long upsert(final PlaylistRemoteEntity playlist) {
        final Long playlistId = getPlaylistIdInternal(playlist.getServiceId(), playlist.getUrl());

        if (playlistId == null) {
            return insert(playlist);
        } else {
            playlist.setUid(playlistId);
            update(playlist);
            return playlistId;
        }
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,getLocalItemType,LocalItemType getLocalItemType(),"[44, 47]","{'A310': [(44, 47)]}",{'A310': 1.0},A310,,"    @Override
    public LocalItemType getLocalItemType() {
        return LocalItemType.PLAYLIST_LOCAL_ITEM;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,getOrderingName,String getOrderingName(),"[49, 52]","{'A310': [(49, 52)]}",{'A310': 1.0},A310,,"    @Override
    public String getOrderingName() {
        return name;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,isThumbnailPermanent,boolean isThumbnailPermanent(),"[54, 56]","{'A305': [(54, 56)]}",{'A305': 1.0},A305,,"    public boolean isThumbnailPermanent() {
        return isThumbnailPermanent;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,getThumbnailStreamId,long getThumbnailStreamId(),"[58, 60]","{'A305': [(58, 60)]}",{'A305': 1.0},A305,,"    public long getThumbnailStreamId() {
        return thumbnailStreamId;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,getDisplayIndex,long getDisplayIndex(),"[62, 65]","{'A352': [(62, 65)]}",{'A352': 1.0},A352,,"    @Override
    public long getDisplayIndex() {
        return displayIndex;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,getUid,long getUid(),"[67, 70]","{'A352': [(67, 70)]}",{'A352': 1.0},A352,,"    @Override
    public long getUid() {
        return uid;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,setDisplayIndex,void setDisplayIndex(long),"[72, 75]","{'A352': [(72, 75)]}",{'A352': 1.0},A352,,"    @Override
    public void setDisplayIndex(final long displayIndex) {
        this.displayIndex = displayIndex;
    }
"
org.schabi.newpipe.database.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/playlist/PlaylistMetadataEntry.java,PlaylistMetadataEntry,getThumbnailUrl,String getThumbnailUrl(),"[77, 81]","{'A305': [(77, 81)]}",{'A305': 1.0},A305,,"    @Nullable
    @Override
    public String getThumbnailUrl() {
        return thumbnailUrl;
    }
"
org.schabi.newpipe.database.history.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/model/StreamHistoryEntity.java,StreamHistoryEntity,getStreamUid,long getStreamUid(),"[57, 59]","{'A310': [(57, 59)]}",{'A310': 1.0},A310,,"    public long getStreamUid() {
        return streamUid;
    }
"
org.schabi.newpipe.database.history.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/model/StreamHistoryEntity.java,StreamHistoryEntity,setStreamUid,void setStreamUid(long),"[61, 63]","{'A310': [(62, 63)], 'A294': [(61, 61)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setStreamUid(final long streamUid) {
        this.streamUid = streamUid;
    }
"
org.schabi.newpipe.database.history.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/model/StreamHistoryEntity.java,StreamHistoryEntity,getAccessDate,OffsetDateTime getAccessDate(),"[65, 68]","{'A310': [(67, 68)], 'A295': [(65, 66)]}","{'A310': 0.5, 'A295': 0.5}",A310,,"    @NonNull
    public OffsetDateTime getAccessDate() {
        return accessDate;
    }
"
org.schabi.newpipe.database.history.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/model/StreamHistoryEntity.java,StreamHistoryEntity,setAccessDate,void setAccessDate(OffsetDateTime),"[70, 72]","{'A310': [(71, 72)], 'A295': [(70, 70)]}","{'A310': 0.6666666666666666, 'A295': 0.3333333333333333}",A310,,"    public void setAccessDate(@NonNull final OffsetDateTime accessDate) {
        this.accessDate = accessDate;
    }
"
org.schabi.newpipe.database.history.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/model/StreamHistoryEntity.java,StreamHistoryEntity,getRepeatCount,long getRepeatCount(),"[74, 76]","{'A310': [(74, 76)]}",{'A310': 1.0},A310,,"    public long getRepeatCount() {
        return repeatCount;
    }
"
org.schabi.newpipe.database.history.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/model/StreamHistoryEntity.java,StreamHistoryEntity,setRepeatCount,void setRepeatCount(long),"[78, 80]","{'A310': [(79, 80)], 'A294': [(78, 78)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setRepeatCount(final long repeatCount) {
        this.repeatCount = repeatCount;
    }
"
org.schabi.newpipe.database.history.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/history/dao/StreamHistoryDAO.java,StreamHistoryDAO,listByService,Flowable<List<StreamHistoryEntity>> listByService(int),"[45, 48]","{'A310': [(45, 45), (47, 48)], 'A294': [(46, 46)]}","{'A310': 0.75, 'A294': 0.25}",A310,,"    @Override
    public Flowable<List<StreamHistoryEntity>> listByService(final int serviceId) {
        throw new UnsupportedOperationException();
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,getStreamUid,long getStreamUid(),"[55, 57]","{'A310': [(55, 57)]}",{'A310': 1.0},A310,,"    public long getStreamUid() {
        return streamUid;
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,setStreamUid,void setStreamUid(long),"[59, 61]","{'A310': [(60, 61)], 'A294': [(59, 59)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public void setStreamUid(final long streamUid) {
        this.streamUid = streamUid;
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,getProgressMillis,long getProgressMillis(),"[63, 65]","{'A310': [(65, 65)], 'A305': [(63, 64)]}","{'A310': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public long getProgressMillis() {
        return progressMillis;
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,setProgressMillis,void setProgressMillis(long),"[67, 69]","{'A310': [(69, 69)], 'A305': [(67, 68)]}","{'A310': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public void setProgressMillis(final long progressMillis) {
        this.progressMillis = progressMillis;
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,isValid,boolean isValid(long),"[77, 80]","{'A305': [(77, 80)]}",{'A305': 1.0},A305,,"    public boolean isValid(final long durationInSeconds) {
        return progressMillis > PLAYBACK_SAVE_THRESHOLD_START_MILLISECONDS
                || progressMillis > durationInSeconds * 1000 / 4;
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,isFinished,boolean isFinished(long),"[93, 96]","{'A305': [(93, 95)], 'A340': [(96, 96)]}","{'A305': 0.75, 'A340': 0.25}",A305,,"    public boolean isFinished(final long durationInSeconds) {
        return progressMillis >= durationInSeconds * 1000 - PLAYBACK_FINISHED_END_MILLISECONDS
                && progressMillis >= durationInSeconds * 1000 * 3 / 4;
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,equals,boolean equals(Object),"[98, 106]","{'A294': [(99, 99), (103, 105)], 'A305': [(102, 102)], 'A340': [(98, 98), (100, 101), (106, 106)]}","{'A294': 0.4444444444444444, 'A305': 0.1111111111111111, 'A340': 0.4444444444444444}",A294,,"    @Override
    public boolean equals(@Nullable final Object obj) {
        if (obj instanceof StreamStateEntity) {
            return ((StreamStateEntity) obj).streamUid == streamUid
                    && ((StreamStateEntity) obj).progressMillis == progressMillis;
        } else {
            return false;
        }
    }
"
org.schabi.newpipe.database.stream.model,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/model/StreamStateEntity.java,StreamStateEntity,hashCode,int hashCode(),"[108, 111]","{'A305': [(108, 111)]}",{'A305': 1.0},A305,,"    @Override
    public int hashCode() {
        return Objects.hash(streamUid, progressMillis);
    }
"
org.schabi.newpipe.database.stream.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/dao/StreamStateDAO.java,,listByService,Flowable<List<StreamStateEntity>> listByService(int),"[29, 32]","{'A310': [(29, 29), (31, 32)], 'A295': [(30, 30)]}","{'A310': 0.75, 'A295': 0.25}",A310,,"    @Override
    default Flowable<List<StreamStateEntity>> listByService(final int serviceId) {
        throw new UnsupportedOperationException();
    }
"
org.schabi.newpipe.database.stream.dao,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/stream/dao/StreamStateDAO.java,,upsert,long upsert(StreamStateEntity),"[43, 47]","{'A310': [(43, 43), (45, 47)], 'A295': [(44, 44)]}","{'A310': 0.8, 'A295': 0.2}",A310,,"    @Transaction
    default long upsert(final StreamStateEntity stream) {
        silentInsertInternal(stream);
        return update(stream);
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,from,SubscriptionEntity from(ChannelInfo),"[57, 65]","{'A294': [(57, 61), (64, 65)], 'A305': [(62, 63)]}","{'A294': 0.7777777777777778, 'A305': 0.2222222222222222}",A294,,"    @Ignore
    public static SubscriptionEntity from(@NonNull final ChannelInfo info) {
        final SubscriptionEntity result = new SubscriptionEntity();
        result.setServiceId(info.getServiceId());
        result.setUrl(info.getUrl());
        result.setData(info.getName(), ImageStrategy.imageListToDbUrl(info.getAvatars()),
                info.getDescription(), info.getSubscriberCount());
        return result;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getUid,long getUid(),"[67, 69]","{'A338': [(67, 69)]}",{'A338': 1.0},A338,,"    public long getUid() {
        return uid;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setUid,void setUid(long),"[71, 73]","{'A338': [(72, 73)], 'A294': [(71, 71)]}","{'A338': 0.6666666666666666, 'A294': 0.3333333333333333}",A338,,"    public void setUid(final long uid) {
        this.uid = uid;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getServiceId,int getServiceId(),"[75, 77]","{'A338': [(75, 77)]}",{'A338': 1.0},A338,,"    public int getServiceId() {
        return serviceId;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setServiceId,void setServiceId(int),"[79, 81]","{'A338': [(80, 81)], 'A294': [(79, 79)]}","{'A338': 0.6666666666666666, 'A294': 0.3333333333333333}",A338,,"    public void setServiceId(final int serviceId) {
        this.serviceId = serviceId;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getUrl,String getUrl(),"[83, 85]","{'A338': [(83, 85)]}",{'A338': 1.0},A338,,"    public String getUrl() {
        return url;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setUrl,void setUrl(String),"[87, 89]","{'A338': [(88, 89)], 'A294': [(87, 87)]}","{'A338': 0.6666666666666666, 'A294': 0.3333333333333333}",A338,,"    public void setUrl(final String url) {
        this.url = url;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getName,String getName(),"[91, 93]","{'A338': [(93, 93)], 'A301': [(91, 92)]}","{'A338': 0.3333333333333333, 'A301': 0.6666666666666666}",A301,,"    public String getName() {
        return name;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setName,void setName(String),"[95, 97]","{'A338': [(97, 97)], 'A294': [(95, 95)], 'A301': [(96, 96)]}","{'A338': 0.3333333333333333, 'A294': 0.3333333333333333, 'A301': 0.3333333333333333}",A338,,"    public void setName(final String name) {
        this.name = name;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getAvatarUrl,String getAvatarUrl(),"[99, 102]","{'A338': [(102, 102)], 'A305': [(99, 99)], 'A301': [(100, 101)]}","{'A338': 0.25, 'A305': 0.25, 'A301': 0.5}",A301,,"    @Nullable
    public String getAvatarUrl() {
        return avatarUrl;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setAvatarUrl,void setAvatarUrl(String),"[104, 106]","{'A338': [(106, 106)], 'A305': [(104, 104)], 'A301': [(105, 105)]}","{'A338': 0.3333333333333333, 'A305': 0.3333333333333333, 'A301': 0.3333333333333333}",A338,,"    public void setAvatarUrl(@Nullable final String avatarUrl) {
        this.avatarUrl = avatarUrl;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getSubscriberCount,Long getSubscriberCount(),"[108, 110]","{'A338': [(108, 110)]}",{'A338': 1.0},A338,,"    public Long getSubscriberCount() {
        return subscriberCount;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setSubscriberCount,void setSubscriberCount(Long),"[112, 114]","{'A338': [(113, 114)], 'A294': [(112, 112)]}","{'A338': 0.6666666666666666, 'A294': 0.3333333333333333}",A338,,"    public void setSubscriberCount(final Long subscriberCount) {
        this.subscriberCount = subscriberCount;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getDescription,String getDescription(),"[116, 118]","{'A338': [(116, 118)]}",{'A338': 1.0},A338,,"    public String getDescription() {
        return description;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setDescription,void setDescription(String),"[120, 122]","{'A338': [(121, 122)], 'A294': [(120, 120)]}","{'A338': 0.6666666666666666, 'A294': 0.3333333333333333}",A338,,"    public void setDescription(final String description) {
        this.description = description;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,getNotificationMode,int getNotificationMode(),"[124, 127]","{'A340': [(124, 127)]}",{'A340': 1.0},A340,,"    @NotificationMode
    public int getNotificationMode() {
        return notificationMode;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setNotificationMode,void setNotificationMode(int),"[129, 131]","{'A340': [(129, 131)]}",{'A340': 1.0},A340,,"    public void setNotificationMode(@NotificationMode final int notificationMode) {
        this.notificationMode = notificationMode;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,setData,"void setData(String,String,String,Long)","[133, 139]","{'A338': [(133, 133), (139, 139)], 'A294': [(134, 138)]}","{'A338': 0.2857142857142857, 'A294': 0.7142857142857143}",A294,,"    @Ignore
    public void setData(final String n, final String au, final String d, final Long sc) {
        this.setName(n);
        this.setAvatarUrl(au);
        this.setDescription(d);
        this.setSubscriberCount(sc);
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,toChannelInfoItem,ChannelInfoItem toChannelInfoItem(),"[141, 148]","{'A294': [(143, 143)], 'A305': [(144, 144)], 'A301': [(141, 142), (145, 148)]}","{'A294': 0.125, 'A305': 0.125, 'A301': 0.75}",A301,,"    @Ignore
    public ChannelInfoItem toChannelInfoItem() {
        final ChannelInfoItem item = new ChannelInfoItem(getServiceId(), getUrl(), getName());
        item.setThumbnails(ImageStrategy.dbUrlToImageList(getAvatarUrl()));
        item.setSubscriberCount(getSubscriberCount());
        item.setDescription(getDescription());
        return item;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,equals,boolean equals(Object),"[152, 187]","{'A301': [(152, 187)]}",{'A301': 1.0},A301,,"    @Override
    @SuppressWarnings(""EqualsReplaceableByObjectsCall"")
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        final SubscriptionEntity that = (SubscriptionEntity) o;

        if (uid != that.uid) {
            return false;
        }
        if (serviceId != that.serviceId) {
            return false;
        }
        if (!url.equals(that.url)) {
            return false;
        }
        if (name != null ? !name.equals(that.name) : that.name != null) {
            return false;
        }
        if (avatarUrl != null ? !avatarUrl.equals(that.avatarUrl) : that.avatarUrl != null) {
            return false;
        }
        if (subscriberCount != null
                ? !subscriberCount.equals(that.subscriberCount)
                : that.subscriberCount != null) {
            return false;
        }
        return description != null
                ? description.equals(that.description)
                : that.description == null;
    }
"
org.schabi.newpipe.database.subscription,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/database/subscription/SubscriptionEntity.java,SubscriptionEntity,hashCode,int hashCode(),"[189, 199]","{'A301': [(189, 199)]}",{'A301': 1.0},A301,,"    @Override
    public int hashCode() {
        int result = (int) (uid ^ (uid >>> 32));
        result = 31 * result + serviceId;
        result = 31 * result + url.hashCode();
        result = 31 * result + (name != null ? name.hashCode() : 0);
        result = 31 * result + (avatarUrl != null ? avatarUrl.hashCode() : 0);
        result = 31 * result + (subscriberCount != null ? subscriberCount.hashCode() : 0);
        result = 31 * result + (description != null ? description.hashCode() : 0);
        return result;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/AnimatedProgressBar.java,AnimatedProgressBar,setProgressAnimated,void setProgressAnimated(int),"[29, 33]","{'A294': [(29, 33)]}",{'A294': 1.0},A294,,"    public synchronized void setProgressAnimated(final int progress) {
        cancelAnimation();
        animation = new ProgressBarAnimation(this, getProgress(), progress);
        startAnimation(animation);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/AnimatedProgressBar.java,AnimatedProgressBar,cancelAnimation,void cancelAnimation(),"[35, 41]","{'A294': [(35, 41)]}",{'A294': 1.0},A294,,"    private void cancelAnimation() {
        if (animation != null) {
            animation.cancel();
            animation = null;
        }
        clearAnimation();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/AnimatedProgressBar.java,AnimatedProgressBar.ProgressBarAnimation,applyTransformation,"void applyTransformation(float,Transformation)","[59, 64]","{'A294': [(59, 64)]}",{'A294': 1.0},A294,,"        @Override
        protected void applyTransformation(final float interpolatedTime, final Transformation t) {
            super.applyTransformation(interpolatedTime, t);
            final float value = from + (to - from) * interpolatedTime;
            progressBar.setProgress((int) value);
        }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CustomCollapsingToolbarLayout.java,CustomCollapsingToolbarLayout,overrideListener,void overrideListener(),"[38, 40]","{'A290': [(38, 40)]}",{'A290': 1.0},A290,,"    public void overrideListener() {
        ViewCompat.setOnApplyWindowInsetsListener(this, (v, insets) -> insets);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/SuperScrollLayoutManager.java,SuperScrollLayoutManager,requestChildRectangleOnScreen,"boolean requestChildRectangleOnScreen(RecyclerView,View,Rect,boolean,boolean)","[41, 62]","{'A292': [(41, 41), (47, 59), (62, 62)], 'A297': [(42, 46), (60, 61)]}","{'A292': 0.6818181818181818, 'A297': 0.3181818181818182}",A292,,"    @Override
    public boolean requestChildRectangleOnScreen(@NonNull final RecyclerView parent,
                                                 @NonNull final View child,
                                                 @NonNull final Rect rect,
                                                 final boolean immediate,
                                                 final boolean focusedChildVisible) {
        if (!parent.isInTouchMode()) {
            // only activate when in directional navigation mode (Android TV etc) — fine grained
            // touch scrolling is better served by nested scroll system

            if (!focusedChildVisible || getFocusedChild() == child) {
                handy.set(rect);

                parent.offsetDescendantRectToMyCoords(child, handy);

                parent.requestRectangleOnScreen(handy, immediate);
            }
        }

        return super.requestChildRectangleOnScreen(parent, child, rect, immediate,
                focusedChildVisible);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/SuperScrollLayoutManager.java,SuperScrollLayoutManager,onInterceptFocusSearch,"View onInterceptFocusSearch(View,int)","[64, 129]","{'A292': [(64, 65), (68, 71), (73, 84), (86, 86), (88, 97), (101, 102), (104, 107), (115, 129)], 'A297': [(66, 66), (98, 100), (108, 113)], 'A294': [(67, 67), (72, 72), (85, 85), (87, 87), (103, 103), (114, 114)]}","{'A292': 0.7575757575757576, 'A297': 0.15151515151515152, 'A294': 0.09090909090909091}",A292,,"    @Nullable
    @Override
    public View onInterceptFocusSearch(@NonNull final View focused, final int direction) {
        final View focusedItem = findContainingItemView(focused);
        if (focusedItem == null) {
            return super.onInterceptFocusSearch(focused, direction);
        }

        final int listDirection = getAbsoluteDirection(direction);
        if (listDirection == 0) {
            return super.onInterceptFocusSearch(focused, direction);
        }

        // FocusFinder has an oddity: it considers size of Views more important
        // than closeness to source View. This means, that big Views far away from current item
        // are preferred to smaller sub-View of closer item. Setting focusability of closer item
        // to FOCUS_AFTER_DESCENDANTS does not solve this, because ViewGroup#addFocusables omits
        // such parent itself from list, if any of children are focusable.
        // Fortunately we can intercept focus search and implement our own logic, based purely
        // on position along the LinearLayoutManager axis

        final ViewGroup recycler = (ViewGroup) focusedItem.getParent();

        final int sourcePosition = getPosition(focusedItem);
        if (sourcePosition == 0 && listDirection < 0) {
            return super.onInterceptFocusSearch(focused, direction);
        }

        View preferred = null;

        int distance = Integer.MAX_VALUE;

        focusables.clear();

        recycler.addFocusables(focusables, direction, recycler.isInTouchMode()
                ? View.FOCUSABLES_TOUCH_MODE
                : View.FOCUSABLES_ALL);

        try {
            for (final View view : focusables) {
                if (view == focused || view == recycler) {
                    continue;
                }

                if (view == focusedItem) {
                    // do not pass focus back to the item View itself - it makes no sense
                    // (we can still pass focus to it's children however)
                    continue;
                }

                final int candidate = getDistance(sourcePosition, view, listDirection);
                if (candidate < 0) {
                    continue;
                }

                if (candidate < distance) {
                    distance = candidate;
                    preferred = view;
                }
            }
        } finally {
            focusables.clear();
        }

        return preferred;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/SuperScrollLayoutManager.java,SuperScrollLayoutManager,getAbsoluteDirection,int getAbsoluteDirection(int),"[131, 162]","{'A292': [(132, 162)], 'A297': [(131, 131)]}","{'A292': 0.96875, 'A297': 0.03125}",A292,,"    private int getAbsoluteDirection(final int direction) {
        switch (direction) {
            default:
                break;
            case View.FOCUS_FORWARD:
                return 1;
            case View.FOCUS_BACKWARD:
                return -1;
        }

        if (getOrientation() == RecyclerView.HORIZONTAL) {
            switch (direction) {
                default:
                    break;
                case View.FOCUS_LEFT:
                    return getReverseLayout() ? 1 : -1;
                case View.FOCUS_RIGHT:
                    return getReverseLayout() ? -1 : 1;
            }
        } else {
            switch (direction) {
                default:
                    break;
                case View.FOCUS_UP:
                    return getReverseLayout() ? 1 : -1;
                case View.FOCUS_DOWN:
                    return getReverseLayout() ? -1 : 1;
            }
        }

        return 0;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/SuperScrollLayoutManager.java,SuperScrollLayoutManager,getDistance,"int getDistance(int,View,int)","[164, 173]","{'A292': [(166, 169), (171, 173)], 'A297': [(164, 164)], 'A294': [(165, 165), (170, 170)]}","{'A292': 0.7, 'A297': 0.1, 'A294': 0.2}",A292,,"    private int getDistance(final int sourcePosition, final View candidate, final int direction) {
        final View itemView = findContainingItemView(candidate);
        if (itemView == null) {
            return -1;
        }

        final int position = getPosition(itemView);

        return direction * (position - sourcePosition);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareDrawerLayout.java,FocusAwareDrawerLayout,onRequestFocusInDescendants,"boolean onRequestFocusInDescendants(int,Rect)","[48, 77]","{'A297': [(48, 57), (59, 59), (62, 77)], 'A294': [(58, 58)], 'A300': [(60, 61)]}","{'A297': 0.9, 'A294': 0.03333333333333333, 'A300': 0.06666666666666667}",A297,,"    @Override
    protected boolean onRequestFocusInDescendants(final int direction,
                                                  final Rect previouslyFocusedRect) {
        // SDK implementation of this method picks whatever visible View takes the focus first
        // without regard to addFocusables. If the open drawer is temporarily empty, the focus
        // escapes outside of it, which can be confusing

        boolean hasOpenPanels = false;

        for (int i = 0; i < getChildCount(); ++i) {
            final View child = getChildAt(i);

            final DrawerLayout.LayoutParams lp =
                    (DrawerLayout.LayoutParams) child.getLayoutParams();

            if (lp.gravity != 0 && isDrawerVisible(child)) {
                hasOpenPanels = true;

                if (child.requestFocus(direction, previouslyFocusedRect)) {
                    return true;
                }
            }
        }

        if (hasOpenPanels) {
            return false;
        }

        return super.onRequestFocusInDescendants(direction, previouslyFocusedRect);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareDrawerLayout.java,FocusAwareDrawerLayout,addFocusables,"void addFocusables(ArrayList<View>,int,int)","[79, 104]","{'A292': [(79, 79), (82, 85), (87, 87), (90, 104)], 'A297': [(80, 81)], 'A294': [(86, 86)], 'A300': [(88, 89)]}","{'A292': 0.8076923076923077, 'A297': 0.07692307692307693, 'A294': 0.038461538461538464, 'A300': 0.07692307692307693}",A292,,"    @Override
    public void addFocusables(final ArrayList<View> views, final int direction,
                              final int focusableMode) {
        boolean hasOpenPanels = false;
        View content = null;

        for (int i = 0; i < getChildCount(); ++i) {
            final View child = getChildAt(i);

            final DrawerLayout.LayoutParams lp =
                    (DrawerLayout.LayoutParams) child.getLayoutParams();

            if (lp.gravity == 0) {
                content = child;
            } else {
                if (isDrawerVisible(child)) {
                    hasOpenPanels = true;
                    child.addFocusables(views, direction, focusableMode);
                }
            }
        }

        if (content != null && !hasOpenPanels) {
            content.addFocusables(views, direction, focusableMode);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareDrawerLayout.java,FocusAwareDrawerLayout,openDrawer,"void openDrawer(View,boolean)","[108, 114]","{'A292': [(108, 109), (111, 112), (114, 114)], 'A297': [(110, 110), (113, 113)]}","{'A292': 0.7142857142857143, 'A297': 0.2857142857142857}",A292,,"    @Override
    @SuppressLint(""RtlHardcoded"")
    public void openDrawer(@NonNull final View drawerView, final boolean animate) {
        super.openDrawer(drawerView, animate);

        drawerView.requestFocus(FOCUS_FORWARD);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,ready,void ready(),"[90, 108]","{'A301': [(90, 94), (97, 108)], 'A294': [(95, 96)]}","{'A301': 0.8947368421052632, 'A294': 0.10526315789473684}",A301,,"    public void ready() {
        if (DEBUG) {
            Log.d(TAG, getDebugLogString(""ready() called""));
        }

        measure(MeasureSpec.makeMeasureSpec(getWidth(), MeasureSpec.AT_MOST),
                MeasureSpec.UNSPECIFIED);
        targetHeight = getMeasuredHeight();

        getLayoutParams().height = currentState == COLLAPSED ? 0 : targetHeight;
        requestLayout();
        broadcastState();

        readyToChangeState = true;

        if (DEBUG) {
            Log.d(TAG, getDebugLogString(""ready() *after* measuring""));
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,collapse,void collapse(),"[110, 131]","{'A301': [(110, 114), (118, 124), (129, 131)], 'A294': [(115, 117), (125, 127)], 'A295': [(128, 128)]}","{'A301': 0.6818181818181818, 'A294': 0.2727272727272727, 'A295': 0.045454545454545456}",A301,,"    public void collapse() {
        if (DEBUG) {
            Log.d(TAG, getDebugLogString(""collapse() called""));
        }

        if (!readyToChangeState) {
            return;
        }

        final int height = getHeight();
        if (height == 0) {
            setCurrentState(COLLAPSED);
            return;
        }

        if (currentAnimator != null && currentAnimator.isRunning()) {
            currentAnimator.cancel();
        }
        currentAnimator = ViewUtils.animateHeight(this, ANIMATION_DURATION, 0);

        setCurrentState(COLLAPSED);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,expand,void expand(),"[133, 153]","{'A301': [(133, 137), (141, 147), (152, 153)], 'A294': [(138, 140), (148, 150)], 'A295': [(151, 151)]}","{'A301': 0.6666666666666666, 'A294': 0.2857142857142857, 'A295': 0.047619047619047616}",A301,,"    public void expand() {
        if (DEBUG) {
            Log.d(TAG, getDebugLogString(""expand() called""));
        }

        if (!readyToChangeState) {
            return;
        }

        final int height = getHeight();
        if (height == this.targetHeight) {
            setCurrentState(EXPANDED);
            return;
        }

        if (currentAnimator != null && currentAnimator.isRunning()) {
            currentAnimator.cancel();
        }
        currentAnimator = ViewUtils.animateHeight(this, ANIMATION_DURATION, this.targetHeight);
        setCurrentState(EXPANDED);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,switchState,void switchState(),"[155, 165]","{'A301': [(155, 155), (159, 165)], 'A294': [(156, 158)]}","{'A301': 0.7272727272727273, 'A294': 0.2727272727272727}",A301,,"    public void switchState() {
        if (!readyToChangeState) {
            return;
        }

        if (currentState == COLLAPSED) {
            expand();
        } else {
            collapse();
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,getCurrentState,int getCurrentState(),"[167, 170]","{'A301': [(167, 170)]}",{'A301': 1.0},A301,,"    @ViewMode
    public int getCurrentState() {
        return currentState;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,setCurrentState,void setCurrentState(int),"[172, 175]","{'A301': [(173, 175)], 'A294': [(172, 172)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    public void setCurrentState(@ViewMode final int currentState) {
        this.currentState = currentState;
        broadcastState();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,broadcastState,void broadcastState(),"[177, 181]","{'A301': [(177, 177), (179, 181)], 'A294': [(178, 178)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"    public void broadcastState() {
        for (final StateListener listener : listeners) {
            listener.onStateChanged(currentState);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,addListener,void addListener(StateListener),"[187, 193]","{'A301': [(187, 193)]}",{'A301': 1.0},A301,,"    public void addListener(final StateListener listener) {
        if (listeners.contains(listener)) {
            throw new IllegalStateException(""Trying to add the same listener multiple times"");
        }

        listeners.add(listener);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,removeListener,void removeListener(StateListener),"[199, 201]","{'A301': [(199, 201)]}",{'A301': 1.0},A301,,"    public void removeListener(final StateListener listener) {
        listeners.remove(listener);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,onSaveInstanceState,Parcelable onSaveInstanceState(),"[207, 211]","{'A301': [(207, 209), (211, 211)], 'A300': [(210, 210)]}","{'A301': 0.8, 'A300': 0.2}",A301,,"    @Nullable
    @Override
    public Parcelable onSaveInstanceState() {
        return Bridge.saveInstanceState(this, super.onSaveInstanceState());
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,onRestoreInstanceState,void onRestoreInstanceState(Parcelable),"[213, 218]","{'A301': [(213, 213), (216, 218)], 'A300': [(215, 215)], 'A294': [(214, 214)]}","{'A301': 0.6666666666666666, 'A300': 0.16666666666666666, 'A294': 0.16666666666666666}",A301,,"    @Override
    public void onRestoreInstanceState(final Parcelable state) {
        super.onRestoreInstanceState(Bridge.restoreInstanceState(this, state));

        ready();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/CollapsibleView.java,CollapsibleView,getDebugLogString,String getDebugLogString(String),"[224, 231]","{'A301': [(225, 225)], 'A294': [(224, 224), (226, 231)]}","{'A301': 0.125, 'A294': 0.875}",A294,,"    public String getDebugLogString(final String description) {
        return String.format(""%-100s → %s"",
                description, ""readyToChangeState = ["" + readyToChangeState + ""], ""
                        + ""currentState = ["" + currentState + ""], ""
                        + ""targetHeight = ["" + targetHeight + ""], ""
                        + ""mW x mH = ["" + getMeasuredWidth() + ""x"" + getMeasuredHeight() + ""], ""
                        + ""W x H = ["" + getWidth() + ""x"" + getHeight() + ""]"");
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeTextView.java,NewPipeTextView,setText,"void setText(CharSequence,BufferType)","[40, 48]","{'A333': [(40, 48)]}",{'A333': 1.0},A333,,"    @Override
    public void setText(final CharSequence text, final BufferType type) {
        // We need to set again the movement method after a text change because Android resets the
        // movement method to the default one in the case where the text cannot be selected and
        // text links are clickable (which is the default case in NewPipe).
        final MovementMethod movementMethod = this.getMovementMethod();
        super.setText(text, type);
        setMovementMethod(movementMethod);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeTextView.java,NewPipeTextView,onTextContextMenuItem,boolean onTextContextMenuItem(int),"[50, 57]","{'A293': [(50, 57)]}",{'A293': 1.0},A293,,"    @Override
    public boolean onTextContextMenuItem(final int id) {
        if (id == android.R.id.shareText) {
            NewPipeTextViewHelper.shareSelectedTextWithShareUtils(this);
            return true;
        }
        return super.onTextContextMenuItem(id);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareCoordinator.java,FocusAwareCoordinator,requestChildFocus,"void requestChildFocus(View,View)","[51, 69]","{'A292': [(51, 51), (53, 62), (65, 69)], 'A297': [(52, 52), (63, 64)]}","{'A292': 0.8421052631578947, 'A297': 0.15789473684210525}",A292,,"    @Override
    public void requestChildFocus(final View child, final View focused) {
        super.requestChildFocus(child, focused);

        if (!isInTouchMode()) {
            if (focused.getHeight() >= getHeight()) {
                focused.getFocusedRect(childFocus);

                ((ViewGroup) child).offsetDescendantRectToMyCoords(focused, childFocus);
            } else {
                focused.getHitRect(childFocus);

                ((ViewGroup) child).offsetDescendantRectToMyCoords((View) focused.getParent(),
                        childFocus);
            }

            requestChildRectangleOnScreen(child, childFocus, false);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareCoordinator.java,FocusAwareCoordinator,dispatchApplyWindowInsets,WindowInsets dispatchApplyWindowInsets(WindowInsets),"[76, 88]","{'A290': [(76, 86), (88, 88)], 'A295': [(87, 87)]}","{'A290': 0.9230769230769231, 'A295': 0.07692307692307693}",A290,,"    @Override
    public WindowInsets dispatchApplyWindowInsets(final WindowInsets insets) {
        boolean consumed = false;
        for (int i = 0; i < getChildCount(); i++) {
            final View child = getChildAt(i);
            final WindowInsets res = child.dispatchApplyWindowInsets(insets);
            if (res.isConsumed()) {
                consumed = true;
            }
        }

        return consumed ? WindowInsetsCompat.CONSUMED.toWindowInsets() : insets;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareCoordinator.java,FocusAwareCoordinator,onApplyWindowInsets,WindowInsets onApplyWindowInsets(WindowInsets),"[95, 104]","{'A290': [(95, 95), (99, 102), (104, 104)], 'A295': [(96, 98), (103, 103)]}","{'A290': 0.6, 'A295': 0.4}",A290,,"    @Override
    public WindowInsets onApplyWindowInsets(final WindowInsets windowInsets) {
        final var windowInsetsCompat = WindowInsetsCompat.toWindowInsetsCompat(windowInsets, this);
        final var insets = windowInsetsCompat.getInsets(WindowInsetsCompat.Type.systemBars());
        final ViewGroup controls = findViewById(R.id.playbackControlRoot);
        if (controls != null) {
            controls.setPadding(insets.left, insets.top, insets.right, insets.bottom);
        }
        return super.onApplyWindowInsets(windowInsets);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,onLayout,"void onLayout(boolean,int,int,int,int)","[34, 40]","{'A406': [(34, 34), (37, 40)], 'A294': [(35, 36)]}","{'A406': 0.7142857142857143, 'A294': 0.2857142857142857}",A406,,"    @Override
    protected void onLayout(final boolean changed, final int l, final int t, final int r,
                            final int b) {
        super.onLayout(changed, l, t, r, b);

        remeasureTabs();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,onSizeChanged,"void onSizeChanged(int,int,int,int)","[42, 47]","{'A406': [(42, 42), (44, 47)], 'A294': [(43, 43)]}","{'A406': 0.8333333333333334, 'A294': 0.16666666666666666}",A406,,"    @Override
    protected void onSizeChanged(final int w, final int h, final int oldw, final int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);

        layoutWidth = w;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,addTab,"void addTab(Tab,int,boolean)","[49, 59]","{'A406': [(49, 49), (51, 59)], 'A294': [(50, 50)]}","{'A406': 0.9090909090909091, 'A294': 0.09090909090909091}",A406,,"    @Override
    public void addTab(@NonNull final Tab tab, final int position, final boolean setSelected) {
        super.addTab(tab, position, setSelected);

        hasMultipleTabs();

        // Adding a tab won't decrease total tabs' width so tabMode won't have to change to FIXED
        if (getTabMode() != MODE_SCROLLABLE) {
            remeasureTabs();
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,removeTabAt,void removeTabAt(int),"[61, 72]","{'A406': [(61, 61), (63, 66), (69, 72)], 'A294': [(62, 62), (67, 68)]}","{'A406': 0.75, 'A294': 0.25}",A406,,"    @Override
    public void removeTabAt(final int position) {
        super.removeTabAt(position);

        hasMultipleTabs();

        // Removing a tab won't increase total tabs' width
        // so tabMode won't have to change to SCROLLABLE
        if (getTabMode() != MODE_FIXED) {
            remeasureTabs();
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,onVisibilityChanged,"void onVisibilityChanged(View,int)","[74, 86]","{'A406': [(74, 74), (76, 77), (79, 86)], 'A294': [(75, 75), (78, 78)]}","{'A406': 0.8461538461538461, 'A294': 0.15384615384615385}",A406,,"    @Override
    protected void onVisibilityChanged(final View changedView, final int visibility) {
        super.onVisibilityChanged(changedView, visibility);

        // Check width if some tabs have been added/removed while ScrollableTabLayout was invisible
        // We don't have to check if it was GONE because then requestLayout() will be called
        if (changedView == this) {
            if (prevVisibility == View.INVISIBLE) {
                remeasureTabs();
            }
            prevVisibility = visibility;
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,setMode,void setMode(int),"[88, 94]","{'A406': [(92, 94)], 'A294': [(88, 91)]}","{'A406': 0.42857142857142855, 'A294': 0.5714285714285714}",A294,,"    private void setMode(final int mode) {
        if (mode == getTabMode()) {
            return;
        }

        setTabMode(mode);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,hasMultipleTabs,void hasMultipleTabs(),"[99, 105]","{'A406': [(99, 105)]}",{'A406': 1.0},A406,,"    private void hasMultipleTabs() {
        if (getTabCount() > 1) {
            setVisibility(View.VISIBLE);
        } else {
            setVisibility(View.GONE);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ScrollableTabLayout.java,ScrollableTabLayout,remeasureTabs,void remeasureTabs(),"[110, 133]","{'A406': [(110, 110), (117, 120), (122, 133)], 'A294': [(111, 116), (121, 121)]}","{'A406': 0.7083333333333334, 'A294': 0.2916666666666667}",A406,,"    private void remeasureTabs() {
        if (prevVisibility != View.VISIBLE) {
            return;
        }
        if (layoutWidth == 0) {
            return;
        }

        final int count = getTabCount();
        int contentWidth = 0;
        for (int i = 0; i < count; i++) {
            final View child = getTabAt(i).view;
            if (child.getVisibility() == View.VISIBLE) {
                // Use tab's minimum requested width should actual content be too small
                contentWidth += Math.max(child.getMinimumWidth(), child.getMeasuredWidth());
            }
        }

        if (contentWidth > layoutWidth) {
            setMode(TabLayout.MODE_SCROLLABLE);
        } else {
            setMode(TabLayout.MODE_FIXED);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,init,void init(),"[61, 65]","{'A297': [(61, 65)]}",{'A297': 1.0},A297,,"    private void init() {
        setFocusable(true);

        setDescendantFocusability(FOCUS_AFTER_DESCENDANTS);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,setFocusScrollAllowed,void setFocusScrollAllowed(boolean),"[67, 69]","{'A292': [(69, 69)], 'A297': [(67, 68)]}","{'A292': 0.3333333333333333, 'A297': 0.6666666666666666}",A297,,"    public void setFocusScrollAllowed(final boolean allowed) {
        this.allowDpadScroll = allowed;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,focusSearch,"View focusSearch(View,int)","[71, 80]","{'A292': [(71, 71), (79, 80)], 'A297': [(72, 78)]}","{'A292': 0.3, 'A297': 0.7}",A297,,"    @Override
    public View focusSearch(final View focused, final int direction) {
        // RecyclerView has buggy focusSearch(), that calls into Adapter several times,
        // but ultimately fails to produce correct results in many cases. To add insult to injury,
        // it's focusSearch() hard-codes several behaviors, incompatible with widely accepted focus
        // handling practices: RecyclerView does not allow Adapter to give focus to itself (!!) and
        // always checks, that returned View is located in ""correct"" direction (which prevents us
        // from temporarily giving focus to special hidden View).
        return null;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,removeDetachedView,"void removeDetachedView(View,boolean)","[82, 93]","{'A297': [(82, 93)]}",{'A297': 1.0},A297,,"    @Override
    protected void removeDetachedView(final View child, final boolean animate) {
        if (child.hasFocus()) {
            // If the focused child is being removed (can happen during very fast scrolling),
            // temporarily give focus to ourselves. This will usually result in another child
            // gaining focus (which one does not really matter, because at that point scrolling
            // is FAST, and that child will soon be off-screen too)
            requestFocus();
        }

        super.removeDetachedView(child, animate);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,dispatchUnhandledMove,"boolean dispatchUnhandledMove(View,int)","[99, 142]","{'A292': [(99, 99), (124, 126)], 'A297': [(100, 106), (108, 113), (115, 123), (127, 142)], 'A294': [(107, 107), (114, 114)]}","{'A292': 0.09090909090909091, 'A297': 0.8636363636363636, 'A294': 0.045454545454545456}",A297,,"    @Override
    public boolean dispatchUnhandledMove(final View focused, final int direction) {
        tempFocus.setEmpty();

        // save focus rect before further manipulation (both focusSearch() and scrollBy()
        // can mess with focused View by moving it off-screen and detaching)

        if (focused != null) {
            final View focusedItem = findContainingItemView(focused);
            if (focusedItem != null) {
                focusedItem.getHitRect(focusRect);
            }
        }

        // call focusSearch() to initiate layout, but disregard returned View for now
        final View adapterResult = super.focusSearch(focused, direction);
        if (adapterResult != null && !isOutside(adapterResult)) {
            adapterResult.requestFocus(direction);
            return true;
        }

        if (arrowScroll(direction)) {
            // if RecyclerView can not yield focus, but there is still some scrolling space in
            // indicated, direction, scroll some fixed amount in that direction
            // (the same logic in ScrollView)
            return true;
        }

        if (focused != this && direction == FOCUS_DOWN && !allowDpadScroll) {
            Log.i(TAG, ""Consuming downward scroll: content load in progress"");
            return true;
        }

        if (tryFocusFinder(direction)) {
            return true;
        }

        if (adapterResult != null) {
            adapterResult.requestFocus(direction);
            return true;
        }

        return super.dispatchUnhandledMove(focused, direction);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,tryFocusFinder,boolean tryFocusFinder(int),"[144, 184]","{'A292': [(177, 179), (181, 182)], 'A297': [(144, 144), (146, 150), (152, 153), (155, 159), (161, 174), (176, 176), (180, 180), (183, 184)], 'A299': [(145, 145)], 'A294': [(151, 151), (154, 154), (160, 160), (175, 175)]}","{'A292': 0.12195121951219512, 'A297': 0.7560975609756098, 'A299': 0.024390243902439025, 'A294': 0.0975609756097561}",A297,,"    private boolean tryFocusFinder(final int direction) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            // Android 9 implemented bunch of handy changes to focus, that render code below less
            // useful, and also broke findNextFocusFromRect in way, that render this hack useless
            return false;
        }

        final FocusFinder finder = FocusFinder.getInstance();

        // try to use FocusFinder instead of adapter
        final ViewGroup root = (ViewGroup) getRootView();

        tempFocus.set(focusRect);

        root.offsetDescendantRectToMyCoords(this, tempFocus);

        final View focusFinderResult = finder.findNextFocusFromRect(root, tempFocus, direction);
        if (focusFinderResult != null && !isOutside(focusFinderResult)) {
            focusFinderResult.requestFocus(direction);
            return true;
        }

        // look for focus in our ancestors, increasing search scope with each failure
        // this provides much better locality than using FocusFinder with root
        ViewGroup parent = (ViewGroup) getParent();

        while (parent != root) {
            tempFocus.set(focusRect);

            parent.offsetDescendantRectToMyCoords(this, tempFocus);

            final View candidate = finder.findNextFocusFromRect(parent, tempFocus, direction);
            if (candidate != null && candidate.requestFocus(direction)) {
                return true;
            }

            parent = (ViewGroup) parent.getParent();
        }

        return false;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,arrowScroll,boolean arrowScroll(int),"[186, 217]","{'A297': [(186, 217)]}",{'A297': 1.0},A297,,"    private boolean arrowScroll(final int direction) {
        switch (direction) {
            case FOCUS_DOWN:
                if (!canScrollVertically(1)) {
                    return false;
                }
                scrollBy(0, 100);
                break;
            case FOCUS_UP:
                if (!canScrollVertically(-1)) {
                    return false;
                }
                scrollBy(0, -100);
                break;
            case FOCUS_LEFT:
                if (!canScrollHorizontally(-1)) {
                    return false;
                }
                scrollBy(-100, 0);
                break;
            case FOCUS_RIGHT:
                if (!canScrollHorizontally(-1)) {
                    return false;
                }
                scrollBy(100, 0);
                break;
            default:
                return false;
        }

        return true;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeRecyclerView.java,NewPipeRecyclerView,isOutside,boolean isOutside(View),"[219, 221]","{'A292': [(221, 221)], 'A297': [(219, 220)]}","{'A292': 0.3333333333333333, 'A297': 0.6666666666666666}",A297,,"    private boolean isOutside(final View view) {
        return findContainingItemView(view) == null;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar,setOnSeekBarChangeListener,void setOnSeekBarChangeListener(OnSeekBarChangeListener),"[54, 59]","{'A292': [(54, 54), (56, 59)], 'A297': [(55, 55)]}","{'A292': 0.8333333333333334, 'A297': 0.16666666666666666}",A292,,"    @Override
    public void setOnSeekBarChangeListener(final OnSeekBarChangeListener l) {
        this.listener = l == null ? null : new NestedListener(l);

        super.setOnSeekBarChangeListener(listener);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar,onKeyDown,"boolean onKeyDown(int,KeyEvent)","[61, 68]","{'A292': [(61, 61), (64, 68)], 'A290': [(63, 63)], 'A297': [(62, 62)]}","{'A292': 0.75, 'A290': 0.125, 'A297': 0.125}",A292,,"    @Override
    public boolean onKeyDown(final int keyCode, final KeyEvent event) {
        if (!isInTouchMode() && DeviceUtils.isConfirmKey(keyCode)) {
            releaseTrack();
        }

        return super.onKeyDown(keyCode, event);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar,onFocusChanged,"void onFocusChanged(boolean,int,Rect)","[70, 78]","{'A292': [(70, 70), (73, 78)], 'A297': [(71, 72)]}","{'A292': 0.7777777777777778, 'A297': 0.2222222222222222}",A292,,"    @Override
    protected void onFocusChanged(final boolean gainFocus, final int direction,
                                  final Rect previouslyFocusedRect) {
        super.onFocusChanged(gainFocus, direction, previouslyFocusedRect);

        if (!isInTouchMode() && !gainFocus) {
            releaseTrack();
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar,onAttachedToWindow,void onAttachedToWindow(),"[86, 92]","{'A292': [(86, 92)]}",{'A292': 1.0},A292,,"    @Override
    protected void onAttachedToWindow() {
        super.onAttachedToWindow();

        treeObserver = getViewTreeObserver();
        treeObserver.addOnTouchModeChangeListener(touchModeListener);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar,onDetachedFromWindow,void onDetachedFromWindow(),"[94, 104]","{'A292': [(94, 104)]}",{'A292': 1.0},A292,,"    @Override
    protected void onDetachedFromWindow() {
        if (treeObserver == null || !treeObserver.isAlive()) {
            treeObserver = getViewTreeObserver();
        }

        treeObserver.removeOnTouchModeChangeListener(touchModeListener);
        treeObserver = null;

        super.onDetachedFromWindow();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar,releaseTrack,void releaseTrack(),"[106, 110]","{'A292': [(106, 110)]}",{'A292': 1.0},A292,,"    private void releaseTrack() {
        if (listener != null && listener.isSeeking) {
            listener.onStopTrackingTouch(this);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar.NestedListener,onProgressChanged,"void onProgressChanged(SeekBar,int,boolean)","[121, 131]","{'A292': [(121, 121), (124, 131)], 'A297': [(122, 123)]}","{'A292': 0.8181818181818182, 'A297': 0.18181818181818182}",A292,,"        @Override
        public void onProgressChanged(final SeekBar seekBar, final int progress,
                                      final boolean fromUser) {
            if (!seekBar.isInTouchMode() && !isSeeking && fromUser) {
                isSeeking = true;

                onStartTrackingTouch(seekBar);
            }

            delegate.onProgressChanged(seekBar, progress, fromUser);
        }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar.NestedListener,onStartTrackingTouch,void onStartTrackingTouch(SeekBar),"[133, 138]","{'A292': [(133, 133), (135, 138)], 'A297': [(134, 134)]}","{'A292': 0.8333333333333334, 'A297': 0.16666666666666666}",A292,,"        @Override
        public void onStartTrackingTouch(final SeekBar seekBar) {
            isSeeking = true;

            delegate.onStartTrackingTouch(seekBar);
        }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusAwareSeekBar.java,FocusAwareSeekBar.NestedListener,onStopTrackingTouch,void onStopTrackingTouch(SeekBar),"[140, 145]","{'A292': [(140, 140), (142, 145)], 'A297': [(141, 141)]}","{'A292': 0.8333333333333334, 'A297': 0.16666666666666666}",A292,,"        @Override
        public void onStopTrackingTouch(final SeekBar seekBar) {
            isSeeking = false;

            delegate.onStopTrackingTouch(seekBar);
        }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ExpandableSurfaceView.java,ExpandableSurfaceView,onMeasure,"void onMeasure(int,int)","[24, 63]","{'A290': [(24, 46), (48, 63)], 'A300': [(47, 47)]}","{'A290': 0.975, 'A300': 0.025}",A290,,"    @Override
    protected void onMeasure(final int widthMeasureSpec, final int heightMeasureSpec) {
        super.onMeasure(widthMeasureSpec, heightMeasureSpec);
        if (videoAspectRatio == 0.0f) {
            return;
        }

        int width = MeasureSpec.getSize(widthMeasureSpec);
        final boolean verticalVideo = videoAspectRatio < 1;
        // Use maxHeight only on non-fit resize mode and in vertical videos
        int height = maxHeight != 0
                && resizeMode != RESIZE_MODE_FIT
                && verticalVideo ? maxHeight : baseHeight;

        if (height == 0) {
            return;
        }

        final float viewAspectRatio = width / ((float) height);
        final float aspectDeformation = videoAspectRatio / viewAspectRatio - 1;
        scaleX = 1.0f;
        scaleY = 1.0f;

        if (resizeMode == RESIZE_MODE_FIT) {
            if (aspectDeformation > 0) {
                height = (int) (width / videoAspectRatio);
            } else {
                width = (int) (height * videoAspectRatio);
            }
        } else if (resizeMode == RESIZE_MODE_ZOOM) {
            if (aspectDeformation < 0) {
                scaleY = viewAspectRatio / videoAspectRatio;
            } else {
                scaleX = videoAspectRatio / viewAspectRatio;
            }
        }

        super.onMeasure(MeasureSpec.makeMeasureSpec(width, MeasureSpec.EXACTLY),
                MeasureSpec.makeMeasureSpec(height, MeasureSpec.EXACTLY));
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ExpandableSurfaceView.java,ExpandableSurfaceView,onLayout,"void onLayout(boolean,int,int,int,int)","[68, 73]","{'A290': [(68, 73)]}",{'A290': 1.0},A290,,"    @Override
    protected void onLayout(final boolean changed,
                            final int left, final int top, final int right, final int bottom) {
        setScaleX(scaleX);
        setScaleY(scaleY);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ExpandableSurfaceView.java,ExpandableSurfaceView,setHeights,"void setHeights(int,int)","[79, 86]","{'A290': [(79, 86)]}",{'A290': 1.0},A290,,"    public void setHeights(final int base, final int max) {
        if (baseHeight == base && maxHeight == max) {
            return;
        }
        baseHeight = base;
        maxHeight = max;
        requestLayout();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ExpandableSurfaceView.java,ExpandableSurfaceView,setResizeMode,void setResizeMode(int),"[88, 95]","{'A290': [(88, 95)]}",{'A290': 1.0},A290,,"    public void setResizeMode(@AspectRatioFrameLayout.ResizeMode final int newResizeMode) {
        if (resizeMode == newResizeMode) {
            return;
        }

        resizeMode = newResizeMode;
        requestLayout();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ExpandableSurfaceView.java,ExpandableSurfaceView,getResizeMode,int getResizeMode(),"[97, 100]","{'A290': [(97, 100)]}",{'A290': 1.0},A290,,"    @AspectRatioFrameLayout.ResizeMode
    public int getResizeMode() {
        return resizeMode;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/ExpandableSurfaceView.java,ExpandableSurfaceView,setAspectRatio,void setAspectRatio(float),"[102, 109]","{'A290': [(102, 109)]}",{'A290': 1.0},A290,,"    public void setAspectRatio(final float aspectRatio) {
        if (videoAspectRatio == aspectRatio) {
            return;
        }

        videoAspectRatio = aspectRatio;
        requestLayout();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/NewPipeEditText.java,NewPipeEditText,onTextContextMenuItem,boolean onTextContextMenuItem(int),"[38, 45]","{'A293': [(38, 45)]}",{'A293': 1.0},A293,,"    @Override
    public boolean onTextContextMenuItem(final int id) {
        if (id == android.R.id.shareText) {
            NewPipeTextViewHelper.shareSelectedTextWithShareUtils(this);
            return true;
        }
        return super.onTextContextMenuItem(id);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,handleMessage,void handleMessage(Message),"[62, 65]","{'A292': [(62, 62), (64, 65)], 'A297': [(63, 63)]}","{'A292': 0.75, 'A297': 0.25}",A292,,"        @Override
        public void handleMessage(final Message msg) {
            updateRect();
        }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,onGlobalFocusChanged,"void onGlobalFocusChanged(View,View)","[76, 87]","{'A292': [(76, 76), (79, 83), (85, 87)], 'A297': [(77, 78), (84, 84)]}","{'A292': 0.75, 'A297': 0.25}",A292,,"    @Override
    public void onGlobalFocusChanged(final View oldFocus, final View newFocus) {
        if (newFocus != null) {
            focused = new WeakReference<>(newFocus);
        } else {
            focused = null;
        }

        updateRect();

        animator.sendEmptyMessageDelayed(0, 1000);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,updateRect,void updateRect(),"[89, 109]","{'A292': [(89, 89), (91, 91), (96, 96), (102, 104), (107, 109)], 'A297': [(97, 98), (105, 106)], 'A290': [(99, 101)], 'A294': [(90, 90), (92, 95)]}","{'A292': 0.42857142857142855, 'A297': 0.19047619047619047, 'A290': 0.14285714285714285, 'A294': 0.23809523809523808}",A292,,"    private void updateRect() {
        final View focusedView = focused == null ? null : this.focused.get();

        final int l = focusRect.left;
        final int r = focusRect.right;
        final int t = focusRect.top;
        final int b = focusRect.bottom;

        if (focusedView != null && isShown(focusedView)) {
            focusedView.getGlobalVisibleRect(focusRect);
        }

        if (shouldClearFocusRect(focusedView, focusRect)) {
            focusRect.setEmpty();
        }

        if (l != focusRect.left || r != focusRect.right
                || t != focusRect.top || b != focusRect.bottom) {
            invalidateSelf();
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,isShown,boolean isShown(View),"[111, 113]","{'A297': [(111, 113)]}",{'A297': 1.0},A297,,"    private boolean isShown(@NonNull final View view) {
        return view.getWidth() != 0 && view.getHeight() != 0 && view.isShown();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,onDraw,void onDraw(),"[115, 118]","{'A292': [(115, 118)]}",{'A292': 1.0},A292,,"    @Override
    public void onDraw() {
        updateRect();
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,onScrollChanged,void onScrollChanged(),"[120, 126]","{'A292': [(120, 126)]}",{'A292': 1.0},A292,,"    @Override
    public void onScrollChanged() {
        updateRect();

        animator.removeMessages(0);
        animator.sendEmptyMessageDelayed(0, 1000);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,onGlobalLayout,void onGlobalLayout(),"[128, 133]","{'A292': [(128, 133)]}",{'A292': 1.0},A292,,"    @Override
    public void onGlobalLayout() {
        updateRect();

        animator.sendEmptyMessageDelayed(0, 1000);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,onTouchModeChanged,void onTouchModeChanged(boolean),"[135, 144]","{'A292': [(135, 135), (138, 138), (140, 144)], 'A297': [(136, 137), (139, 139)]}","{'A292': 0.7, 'A297': 0.3}",A292,,"    @Override
    public void onTouchModeChanged(final boolean inTouchMode) {
        this.isInTouchMode = inTouchMode;

        if (inTouchMode) {
            updateRect();
        } else {
            invalidateSelf();
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,setCurrentFocus,void setCurrentFocus(View),"[146, 154]","{'A292': [(148, 150), (152, 152), (154, 154)], 'A297': [(146, 147), (151, 151), (153, 153)]}","{'A292': 0.5555555555555556, 'A297': 0.4444444444444444}",A292,,"    public void setCurrentFocus(final View newFocus) {
        if (newFocus == null) {
            return;
        }

        this.isInTouchMode = newFocus.isInTouchMode();

        onGlobalFocusChanged(null, newFocus);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,draw,void draw(Canvas),"[156, 161]","{'A292': [(156, 156), (158, 161)], 'A297': [(157, 157)]}","{'A292': 0.8333333333333334, 'A297': 0.16666666666666666}",A292,,"    @Override
    public void draw(@NonNull final Canvas canvas) {
        if (!isInTouchMode && focusRect.width() != 0) {
            canvas.drawRect(focusRect, rectPaint);
        }
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,getOpacity,int getOpacity(),"[163, 166]","{'A292': [(163, 166)]}",{'A292': 1.0},A292,,"    @Override
    public int getOpacity() {
        return PixelFormat.TRANSPARENT;
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,setAlpha,void setAlpha(int),"[168, 170]","{'A292': [(168, 168), (170, 170)], 'A297': [(169, 169)]}","{'A292': 0.6666666666666666, 'A297': 0.3333333333333333}",A292,,"    @Override
    public void setAlpha(final int alpha) {
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,setColorFilter,void setColorFilter(ColorFilter),"[172, 174]","{'A292': [(172, 172), (174, 174)], 'A297': [(173, 173)]}","{'A292': 0.6666666666666666, 'A297': 0.3333333333333333}",A292,,"    @Override
    public void setColorFilter(final ColorFilter colorFilter) {
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,shouldClearFocusRect,"boolean shouldClearFocusRect(View,Rect)","[182, 184]","{'A290': [(182, 184)]}",{'A290': 1.0},A290,,"    private boolean shouldClearFocusRect(@Nullable final View focusedView, final Rect focusedRect) {
        return focusedView == null || focusedRect.equals(getBounds());
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,setupFocusObserver,void setupFocusObserver(Dialog),"[186, 199]","{'A292': [(188, 188), (190, 191), (193, 194), (196, 199)], 'A297': [(186, 186)], 'A294': [(187, 187), (189, 189), (192, 192), (195, 195)]}","{'A292': 0.6428571428571429, 'A297': 0.07142857142857142, 'A294': 0.2857142857142857}",A292,,"    public static void setupFocusObserver(final Dialog dialog) {
        final Rect displayRect = new Rect();

        final Window window = dialog.getWindow();
        assert window != null;

        final View decor = window.getDecorView();
        decor.getWindowVisibleDisplayFrame(displayRect);

        final FocusOverlayView overlay = new FocusOverlayView(dialog.getContext());
        overlay.setBounds(0, 0, displayRect.width(), displayRect.height());

        setupOverlay(window, overlay);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,setupFocusObserver,void setupFocusObserver(Activity),"[201, 212]","{'A292': [(203, 203), (206, 207), (209, 212)], 'A297': [(201, 201)], 'A294': [(202, 202), (204, 205), (208, 208)]}","{'A292': 0.5833333333333334, 'A297': 0.08333333333333333, 'A294': 0.3333333333333333}",A292,,"    public static void setupFocusObserver(final Activity activity) {
        final Rect displayRect = new Rect();

        final Window window = activity.getWindow();
        final View decor = window.getDecorView();
        decor.getWindowVisibleDisplayFrame(displayRect);

        final FocusOverlayView overlay = new FocusOverlayView(activity);
        overlay.setBounds(0, 0, displayRect.width(), displayRect.height());

        setupOverlay(window, overlay);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,setupOverlay,"void setupOverlay(Window,FocusOverlayView)","[214, 243]","{'A292': [(216, 217), (221, 224), (226, 236), (239, 243)], 'A297': [(214, 214), (218, 219), (225, 225), (237, 237)], 'A294': [(215, 215), (220, 220), (238, 238)]}","{'A292': 0.7333333333333333, 'A297': 0.16666666666666666, 'A294': 0.1}",A292,,"    private static void setupOverlay(final Window window, final FocusOverlayView overlay) {
        final ViewGroup decor = (ViewGroup) window.getDecorView();
        decor.getOverlay().add(overlay);

        fixFocusHierarchy(decor);

        final ViewTreeObserver observer = decor.getViewTreeObserver();
        observer.addOnScrollChangedListener(overlay);
        observer.addOnGlobalFocusChangeListener(overlay);
        observer.addOnGlobalLayoutListener(overlay);
        observer.addOnTouchModeChangeListener(overlay);
        observer.addOnDrawListener(overlay);

        overlay.setCurrentFocus(decor.getFocusedChild());

        // Some key presses don't actually move focus, but still result in movement on screen.
        // For example, MovementMethod of TextView may cause requestRectangleOnScreen() due to
        // some ""focusable"" spans, which in turn causes CoordinatorLayout to ""scroll"" it's children.
        // Unfortunately many such forms of ""scrolling"" do not count as scrolling for purpose
        // of dispatching ViewTreeObserver callbacks, so we have to intercept them by directly
        // receiving keys from Window.
        window.setCallback(new WindowCallbackWrapper(window.getCallback()) {
            @Override
            public boolean dispatchKeyEvent(final KeyEvent event) {
                final boolean res = super.dispatchKeyEvent(event);
                overlay.onKey(event);
                return res;
            }
        });
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,dispatchKeyEvent,boolean dispatchKeyEvent(KeyEvent),"[236, 241]","{'A292': [(236, 236), (239, 241)], 'A297': [(237, 237)], 'A294': [(238, 238)]}","{'A292': 0.6666666666666666, 'A297': 0.16666666666666666, 'A294': 0.16666666666666666}",A292,,"            @Override
            public boolean dispatchKeyEvent(final KeyEvent event) {
                final boolean res = super.dispatchKeyEvent(event);
                overlay.onKey(event);
                return res;
            }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,onKey,void onKey(KeyEvent),"[245, 253]","{'A292': [(246, 253)], 'A297': [(245, 245)]}","{'A292': 0.8888888888888888, 'A297': 0.1111111111111111}",A292,,"    private void onKey(final KeyEvent event) {
        if (event.getAction() != KeyEvent.ACTION_DOWN) {
            return;
        }

        updateRect();

        animator.sendEmptyMessageDelayed(0, 100);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,fixFocusHierarchy,void fixFocusHierarchy(View),"[255, 271]","{'A297': [(255, 261), (263, 271)], 'A299': [(262, 262)]}","{'A297': 0.9411764705882353, 'A299': 0.058823529411764705}",A297,,"    private static void fixFocusHierarchy(final View decor) {
        // During Android 8 development some dumb ass decided, that action bar has to be
        // a keyboard focus cluster. Unfortunately, keyboard clusters do not work for primary
        // auditory of key navigation — Android TV users (Android TV remotes do not have
        // keyboard META key for moving between clusters). We have to fix this unfortunate accident
        // While we are at it, let's deal with touchscreenBlocksFocus too.

        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
            return;
        }

        if (!(decor instanceof ViewGroup)) {
            return;
        }

        clearFocusObstacles((ViewGroup) decor);
    }
"
org.schabi.newpipe.views,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/views/FocusOverlayView.java,FocusOverlayView,clearFocusObstacles,void clearFocusObstacles(ViewGroup),"[273, 292]","{'A297': [(274, 282), (284, 285), (287, 292)], 'A294': [(283, 283), (286, 286)], 'A299': [(273, 273)]}","{'A297': 0.85, 'A294': 0.1, 'A299': 0.05}",A297,,"    @RequiresApi(api = Build.VERSION_CODES.O)
    private static void clearFocusObstacles(final ViewGroup viewGroup) {
        viewGroup.setTouchscreenBlocksFocus(false);

        if (viewGroup.isKeyboardNavigationCluster()) {
            viewGroup.setKeyboardNavigationCluster(false);

            return; // clusters aren't supposed to nest
        }

        final int childCount = viewGroup.getChildCount();

        for (int i = 0; i < childCount; ++i) {
            final View view = viewGroup.getChildAt(i);

            if (view instanceof ViewGroup) {
                clearFocusObstacles((ViewGroup) view);
            }
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,onViewCreated,"void onViewCreated(View,Bundle)","[44, 48]","{'A301': [(44, 44), (46, 48)], 'A305': [(45, 45)]}","{'A301': 0.8, 'A305': 0.2}",A301,,"    @Override
    public void onViewCreated(@NonNull final View rootView, final Bundle savedInstanceState) {
        super.onViewCreated(rootView, savedInstanceState);
        doInitialLoadLogic();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,onPause,void onPause(),"[50, 54]","{'A301': [(50, 54)]}",{'A301': 1.0},A301,,"    @Override
    public void onPause() {
        super.onPause();
        wasLoading.set(isLoading.get());
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,onResume,void onResume(),"[56, 62]","{'A305': [(56, 62)]}",{'A305': 1.0},A305,,"    @Override
    public void onResume() {
        super.onResume();
        if (lastPanelError != null) {
            showError(lastPanelError);
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,initViews,"void initViews(View,Bundle)","[68, 75]","{'A301': [(68, 68), (70, 71), (73, 73), (75, 75)], 'A298': [(72, 72)], 'A305': [(74, 74)], 'A294': [(69, 69)]}","{'A301': 0.625, 'A298': 0.125, 'A305': 0.125, 'A294': 0.125}",A301,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);
        emptyStateView = rootView.findViewById(R.id.empty_state_view);
        emptyStateMessageView = rootView.findViewById(R.id.empty_state_message);
        loadingProgressBar = rootView.findViewById(R.id.loading_progress_bar);
        errorPanelHelper = new ErrorPanelHelper(this, rootView, this::onRetryButtonClicked);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,onDestroyView,void onDestroyView(),"[77, 85]","{'A298': [(83, 84)], 'A305': [(77, 82), (85, 85)]}","{'A298': 0.2222222222222222, 'A305': 0.7777777777777778}",A305,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        if (errorPanelHelper != null) {
            errorPanelHelper.dispose();
        }
        emptyStateView = null;
        emptyStateMessageView = null;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,onRetryButtonClicked,void onRetryButtonClicked(),"[87, 89]","{'A301': [(87, 89)]}",{'A301': 1.0},A301,,"    protected void onRetryButtonClicked() {
        reloadContent();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,reloadContent,void reloadContent(),"[91, 93]","{'A301': [(91, 93)]}",{'A301': 1.0},A301,,"    public void reloadContent() {
        startLoading(true);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,doInitialLoadLogic,void doInitialLoadLogic(),"[99, 101]","{'A301': [(99, 101)]}",{'A301': 1.0},A301,,"    protected void doInitialLoadLogic() {
        startLoading(true);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,startLoading,void startLoading(boolean),"[103, 109]","{'A301': [(107, 109)], 'A294': [(103, 106)]}","{'A301': 0.42857142857142855, 'A294': 0.5714285714285714}",A294,,"    protected void startLoading(final boolean forceLoad) {
        if (DEBUG) {
            Log.d(TAG, ""startLoading() called with: forceLoad = ["" + forceLoad + ""]"");
        }
        showLoading();
        isLoading.set(true);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,showLoading,void showLoading(),"[115, 124]","{'A301': [(115, 116), (124, 124)], 'A305': [(123, 123)], 'A294': [(117, 117), (119, 120), (122, 122)], 'A295': [(118, 118), (121, 121)]}","{'A301': 0.3, 'A305': 0.1, 'A294': 0.4, 'A295': 0.2}",A294,,"    @Override
    public void showLoading() {
        if (emptyStateView != null) {
            animate(emptyStateView, false, 150);
        }
        if (loadingProgressBar != null) {
            animate(loadingProgressBar, true, 400);
        }
        hideErrorPanel();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,hideLoading,void hideLoading(),"[126, 135]","{'A301': [(126, 127), (135, 135)], 'A305': [(134, 134)], 'A294': [(128, 128), (130, 131), (133, 133)], 'A295': [(129, 129), (132, 132)]}","{'A301': 0.3, 'A305': 0.1, 'A294': 0.4, 'A295': 0.2}",A294,,"    @Override
    public void hideLoading() {
        if (emptyStateView != null) {
            animate(emptyStateView, false, 150);
        }
        if (loadingProgressBar != null) {
            animate(loadingProgressBar, false, 0);
        }
        hideErrorPanel();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,showEmptyState,void showEmptyState(),"[137, 147]","{'A301': [(138, 139), (147, 147)], 'A305': [(146, 146)], 'A294': [(140, 140), (142, 143), (145, 145)], 'A300': [(137, 137)], 'A295': [(141, 141), (144, 144)]}","{'A301': 0.2727272727272727, 'A305': 0.09090909090909091, 'A294': 0.36363636363636365, 'A300': 0.09090909090909091, 'A295': 0.18181818181818182}",A294,,"    @Override
    public void showEmptyState() {
        isLoading.set(false);
        if (emptyStateView != null) {
            animate(emptyStateView, true, 200);
        }
        if (loadingProgressBar != null) {
            animate(loadingProgressBar, false, 0);
        }
        hideErrorPanel();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,handleResult,void handleResult(I),"[149, 155]","{'A301': [(149, 149), (154, 155)], 'A305': [(150, 150), (152, 152)], 'A294': [(151, 151), (153, 153)]}","{'A301': 0.42857142857142855, 'A305': 0.2857142857142857, 'A294': 0.2857142857142857}",A301,,"    @Override
    public void handleResult(final I result) {
        if (DEBUG) {
            Log.d(TAG, ""handleResult() called with: result = ["" + result + ""]"");
        }
        hideLoading();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,handleError,void handleError(),"[157, 167]","{'A301': [(157, 157), (167, 167)], 'A305': [(158, 166)]}","{'A301': 0.18181818181818182, 'A305': 0.8181818181818182}",A305,,"    @Override
    public void handleError() {
        isLoading.set(false);
        InfoCache.getInstance().clearCache();
        if (emptyStateView != null) {
            animate(emptyStateView, false, 150);
        }
        if (loadingProgressBar != null) {
            animate(loadingProgressBar, false, 0);
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,showError,void showError(ErrorInfo),"[173, 185]","{'A301': [(175, 176), (181, 182), (185, 185)], 'A305': [(173, 174), (178, 178), (180, 180), (183, 184)], 'A294': [(177, 177), (179, 179)]}","{'A301': 0.38461538461538464, 'A305': 0.46153846153846156, 'A294': 0.15384615384615385}",A305,,"    public final void showError(final ErrorInfo errorInfo) {
        handleError();

        if (isDetached() || isRemoving()) {
            if (DEBUG) {
                Log.w(TAG, ""showError() is detached or removing = ["" + errorInfo + ""]"");
            }
            return;
        }

        errorPanelHelper.showError(errorInfo);
        lastPanelError = errorInfo;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,showTextError,void showTextError(String),"[187, 198]","{'A301': [(189, 189), (196, 196), (198, 198)], 'A305': [(187, 188), (190, 195), (197, 197)]}","{'A301': 0.25, 'A305': 0.75}",A305,,"    public final void showTextError(@NonNull final String errorString) {
        handleError();

        if (isDetached() || isRemoving()) {
            if (DEBUG) {
                Log.w(TAG, ""showTextError() is detached or removing = ["" + errorString + ""]"");
            }
            return;
        }

        errorPanelHelper.showTextError(errorString);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,setEmptyStateMessage,void setEmptyStateMessage(int),"[200, 204]","{'A298': [(200, 204)]}",{'A298': 1.0},A298,,"    protected void setEmptyStateMessage(@StringRes final int text) {
        if (emptyStateMessageView != null) {
            emptyStateMessageView.setText(text);
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,hideErrorPanel,void hideErrorPanel(),"[206, 209]","{'A301': [(209, 209)], 'A305': [(206, 208)]}","{'A301': 0.25, 'A305': 0.75}",A305,,"    public final void hideErrorPanel() {
        errorPanelHelper.hide();
        lastPanelError = null;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,isErrorPanelVisible,boolean isErrorPanelVisible(),"[211, 213]","{'A301': [(213, 213)], 'A305': [(211, 212)]}","{'A301': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public final boolean isErrorPanelVisible() {
        return errorPanelHelper.isVisible();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BaseStateFragment.java,BaseStateFragment,showSnackBarError,void showSnackBarError(ErrorInfo),"[221, 226]","{'A301': [(222, 222), (224, 224), (226, 226)], 'A305': [(221, 221), (223, 223), (225, 225)]}","{'A301': 0.5, 'A305': 0.5}",A301,,"    public void showSnackBarError(final ErrorInfo errorInfo) {
        if (DEBUG) {
            Log.d(TAG, ""showSnackBarError() called with: errorInfo = ["" + errorInfo + ""]"");
        }
        ErrorUtil.showSnackbar(this, errorInfo);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/OnScrollBelowItemsListener.java,OnScrollBelowItemsListener,onScrolled,"void onScrolled(RecyclerView,int,int)","[13, 39]","{'A301': [(13, 13), (15, 16), (19, 19), (22, 24), (27, 27), (33, 39)], 'A299': [(14, 14), (20, 21)], 'A294': [(17, 18), (25, 26), (28, 32)]}","{'A301': 0.5555555555555556, 'A299': 0.1111111111111111, 'A294': 0.3333333333333333}",A301,,"    @Override
    public void onScrolled(@NonNull final RecyclerView recyclerView, final int dx, final int dy) {
        super.onScrolled(recyclerView, dx, dy);
        if (dy > 0) {
            int pastVisibleItems = 0;
            final RecyclerView.LayoutManager layoutManager = recyclerView.getLayoutManager();

            final int visibleItemCount = layoutManager.getChildCount();
            final int totalItemCount = layoutManager.getItemCount();

            // Already covers the GridLayoutManager case
            if (layoutManager instanceof LinearLayoutManager) {
                pastVisibleItems = ((LinearLayoutManager) layoutManager)
                        .findFirstVisibleItemPosition();
            } else if (layoutManager instanceof StaggeredGridLayoutManager) {
                final int[] positions = ((StaggeredGridLayoutManager) layoutManager)
                        .findFirstVisibleItemPositions(null);
                if (positions != null && positions.length > 0) {
                    pastVisibleItems = positions[0];
                }
            }

            if ((visibleItemCount + pastVisibleItems) >= totalItemCount) {
                onScrolledDown(recyclerView);
            }
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,getDescription,Description getDescription(),"[38, 42]","{'A305': [(39, 39), (42, 42)], 'A386': [(38, 38), (40, 41)]}","{'A305': 0.4, 'A386': 0.6}",A386,,"    @Nullable
    @Override
    protected Description getDescription() {
        return streamInfo.getDescription();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,getService,StreamingService getService(),"[44, 48]","{'A305': [(45, 45), (48, 48)], 'A327': [(44, 44)], 'A386': [(46, 47)]}","{'A305': 0.4, 'A327': 0.2, 'A386': 0.4}",A305,,"    @NonNull
    @Override
    protected StreamingService getService() {
        return streamInfo.getService();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,getServiceId,int getServiceId(),"[50, 53]","{'A386': [(50, 53)]}",{'A386': 1.0},A386,,"    @Override
    protected int getServiceId() {
        return streamInfo.getServiceId();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,getStreamUrl,String getStreamUrl(),"[55, 59]","{'A305': [(59, 59)], 'A327': [(55, 55)], 'A386': [(56, 58)]}","{'A305': 0.2, 'A327': 0.2, 'A386': 0.6}",A386,,"    @NonNull
    @Override
    protected String getStreamUrl() {
        return streamInfo.getUrl();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,getTags,List<String> getTags(),"[61, 65]","{'A305': [(65, 65)], 'A327': [(61, 61)], 'A386': [(62, 64)]}","{'A305': 0.2, 'A327': 0.2, 'A386': 0.6}",A386,,"    @NonNull
    @Override
    public List<String> getTags() {
        return streamInfo.getTags();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,setupMetadata,"void setupMetadata(LayoutInflater,LinearLayout)","[67, 110]","{'A305': [(76, 76), (83, 83), (86, 89), (92, 94), (97, 98), (103, 110)], 'A333': [(81, 82), (84, 85), (90, 91), (95, 95), (99, 102)], 'A386': [(68, 69), (71, 75)], 'A298': [(67, 67), (70, 70), (77, 80)], 'A295': [(96, 96)]}","{'A305': 0.4318181818181818, 'A333': 0.25, 'A386': 0.1590909090909091, 'A298': 0.13636363636363635, 'A295': 0.022727272727272728}",A305,,"    @Override
    protected void setupMetadata(final LayoutInflater inflater,
                                 final LinearLayout layout) {
        if (streamInfo != null && streamInfo.getUploadDate() != null) {
            binding.detailUploadDateView.setText(Localization
                    .localizeUploadDate(activity, streamInfo.getUploadDate().offsetDateTime()));
        } else {
            binding.detailUploadDateView.setVisibility(View.GONE);
        }

        if (streamInfo == null) {
            return;
        }

        addMetadataItem(inflater, layout, false, R.string.metadata_category,
                streamInfo.getCategory());

        addMetadataItem(inflater, layout, false, R.string.metadata_licence,
                streamInfo.getLicence());

        addPrivacyMetadataItem(inflater, layout);

        if (streamInfo.getAgeLimit() != NO_AGE_LIMIT) {
            addMetadataItem(inflater, layout, false, R.string.metadata_age_limit,
                    String.valueOf(streamInfo.getAgeLimit()));
        }

        if (streamInfo.getLanguageInfo() != null) {
            addMetadataItem(inflater, layout, false, R.string.metadata_language,
                    streamInfo.getLanguageInfo().getDisplayLanguage(getAppLocale()));
        }

        addMetadataItem(inflater, layout, true, R.string.metadata_support,
                streamInfo.getSupportInfo());
        addMetadataItem(inflater, layout, true, R.string.metadata_host,
                streamInfo.getHost());

        addImagesMetadataItem(inflater, layout, R.string.metadata_thumbnails,
                streamInfo.getThumbnails());
        addImagesMetadataItem(inflater, layout, R.string.metadata_uploader_avatars,
                streamInfo.getUploaderAvatars());
        addImagesMetadataItem(inflater, layout, R.string.metadata_subchannel_avatars,
                streamInfo.getSubChannelAvatars());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/DescriptionFragment.java,DescriptionFragment,addPrivacyMetadataItem,"void addPrivacyMetadataItem(LayoutInflater,LinearLayout)","[112, 139]","{'A305': [(112, 127), (130, 134), (137, 139)], 'A333': [(128, 129), (135, 136)]}","{'A305': 0.8571428571428571, 'A333': 0.14285714285714285}",A305,,"    private void addPrivacyMetadataItem(final LayoutInflater inflater, final LinearLayout layout) {
        if (streamInfo.getPrivacy() != null) {
            @StringRes final int contentRes;
            switch (streamInfo.getPrivacy()) {
                case PUBLIC:
                    contentRes = R.string.metadata_privacy_public;
                    break;
                case UNLISTED:
                    contentRes = R.string.metadata_privacy_unlisted;
                    break;
                case PRIVATE:
                    contentRes = R.string.metadata_privacy_private;
                    break;
                case INTERNAL:
                    contentRes = R.string.metadata_privacy_internal;
                    break;
                case OTHER:
                default:
                    contentRes = 0;
                    break;
            }

            if (contentRes != 0) {
                addMetadataItem(inflater, layout, false, R.string.metadata_privacy,
                        getString(contentRes));
            }
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[48, 57]","{'A386': [(48, 57)]}",{'A386': 1.0},A386,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        binding = FragmentDescriptionBinding.inflate(inflater, container, false);
        setupDescription();
        setupMetadata(inflater, binding.detailMetadataLayout);
        addTagsMetadataItem(inflater, binding.detailMetadataLayout);
        return binding.getRoot();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,onDestroy,void onDestroy(),"[59, 63]","{'A386': [(59, 63)]}",{'A386': 1.0},A386,,"    @Override
    public void onDestroy() {
        descriptionDisposables.clear();
        super.onDestroy();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,setupDescription,void setupDescription(),"[106, 126]","{'A386': [(106, 126)]}",{'A386': 1.0},A386,,"    private void setupDescription() {
        final Description description = getDescription();
        if (description == null || isEmpty(description.getContent())
                || description == Description.EMPTY_DESCRIPTION) {
            binding.detailDescriptionView.setVisibility(View.GONE);
            binding.detailSelectDescriptionButton.setVisibility(View.GONE);
            return;
        }

        // start with disabled state. This also loads description content (!)
        disableDescriptionSelection();

        binding.detailSelectDescriptionButton.setOnClickListener(v -> {
            if (binding.detailDescriptionNoteView.getVisibility() == View.VISIBLE) {
                disableDescriptionSelection();
            } else {
                // enable selection only when button is clicked to prevent flickering
                enableDescriptionSelection();
            }
        });
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,enableDescriptionSelection,void enableDescriptionSelection(),"[128, 136]","{'A386': [(128, 136)]}",{'A386': 1.0},A386,,"    private void enableDescriptionSelection() {
        binding.detailDescriptionNoteView.setVisibility(View.VISIBLE);
        binding.detailDescriptionView.setTextIsSelectable(true);

        final String buttonLabel = getString(R.string.description_select_disable);
        binding.detailSelectDescriptionButton.setContentDescription(buttonLabel);
        TooltipCompat.setTooltipText(binding.detailSelectDescriptionButton, buttonLabel);
        binding.detailSelectDescriptionButton.setImageResource(R.drawable.ic_close);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,disableDescriptionSelection,void disableDescriptionSelection(),"[138, 155]","{'A386': [(138, 139), (147, 155)], 'A333': [(140, 146)]}","{'A386': 0.6111111111111112, 'A333': 0.3888888888888889}",A386,,"    private void disableDescriptionSelection() {
        // show description content again, otherwise some links are not clickable
        final Description description = getDescription();
        if (description != null) {
            TextLinkifier.fromDescription(binding.detailDescriptionView,
                    description, HtmlCompat.FROM_HTML_MODE_LEGACY,
                    getService(), getStreamUrl(),
                    descriptionDisposables, SET_LINK_MOVEMENT_METHOD);
        }

        binding.detailDescriptionNoteView.setVisibility(View.GONE);
        binding.detailDescriptionView.setTextIsSelectable(false);

        final String buttonLabel = getString(R.string.description_select_enable);
        binding.detailSelectDescriptionButton.setContentDescription(buttonLabel);
        TooltipCompat.setTooltipText(binding.detailSelectDescriptionButton, buttonLabel);
        binding.detailSelectDescriptionButton.setImageResource(R.drawable.ic_select_all);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,addMetadataItem,"void addMetadataItem(LayoutInflater,LinearLayout,boolean,int,String)","[157, 185]","{'A386': [(157, 157), (162, 185)], 'A327': [(161, 161)], 'A333': [(158, 160)]}","{'A386': 0.8620689655172413, 'A327': 0.034482758620689655, 'A333': 0.10344827586206896}",A386,,"    protected void addMetadataItem(final LayoutInflater inflater,
                                   final LinearLayout layout,
                                   final boolean linkifyContent,
                                   @StringRes final int type,
                                   @NonNull final String content) {
        if (isBlank(content)) {
            return;
        }

        final ItemMetadataBinding itemBinding =
                ItemMetadataBinding.inflate(inflater, layout, false);

        itemBinding.metadataTypeView.setText(type);
        itemBinding.metadataTypeView.setOnLongClickListener(v -> {
            ShareUtils.copyToClipboard(requireContext(), content);
            return true;
        });

        if (linkifyContent) {
            TextLinkifier.fromPlainText(itemBinding.metadataContentView, content, null, null,
                    descriptionDisposables, SET_LINK_MOVEMENT_METHOD);
        } else {
            itemBinding.metadataContentView.setText(content);
        }

        itemBinding.metadataContentView.setClickable(true);

        layout.addView(itemBinding.getRoot());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,imageSizeToText,String imageSizeToText(int),"[187, 193]","{'A305': [(187, 193)]}",{'A305': 1.0},A305,,"    private String imageSizeToText(final int heightOrWidth) {
        if (heightOrWidth < 0) {
            return getString(R.string.question_mark);
        } else {
            return String.valueOf(heightOrWidth);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,addImagesMetadataItem,"void addImagesMetadataItem(LayoutInflater,LinearLayout,int,List<Image>)","[195, 249]","{'A305': [(195, 223), (230, 249)], 'A327': [(224, 229)]}","{'A305': 0.8909090909090909, 'A327': 0.10909090909090909}",A305,,"    protected void addImagesMetadataItem(final LayoutInflater inflater,
                                         final LinearLayout layout,
                                         @StringRes final int type,
                                         final List<Image> images) {
        final String preferredImageUrl = ImageStrategy.choosePreferredImage(images);
        if (preferredImageUrl == null) {
            return; // null will be returned in case there is no image
        }

        final ItemMetadataBinding itemBinding =
                ItemMetadataBinding.inflate(inflater, layout, false);
        itemBinding.metadataTypeView.setText(type);

        final SpannableStringBuilder urls = new SpannableStringBuilder();
        for (final Image image : images) {
            if (urls.length() != 0) {
                urls.append("", "");
            }
            final int entryBegin = urls.length();

            if (image.getHeight() != Image.HEIGHT_UNKNOWN
                    || image.getWidth() != Image.WIDTH_UNKNOWN
                    // if even the resolution level is unknown, ?x? will be shown
                    || image.getEstimatedResolutionLevel() == Image.ResolutionLevel.UNKNOWN) {
                urls.append(imageSizeToText(image.getHeight()));
                urls.append('x');
                urls.append(imageSizeToText(image.getWidth()));
            } else {
                switch (image.getEstimatedResolutionLevel()) {
                    case LOW -> urls.append(getString(R.string.image_quality_low));
                    case MEDIUM -> urls.append(getString(R.string.image_quality_medium));
                    case HIGH -> urls.append(getString(R.string.image_quality_high));
                    default -> {
                        // unreachable, Image.ResolutionLevel.UNKNOWN is already filtered out
                    }
                }
            }

            urls.setSpan(new ClickableSpan() {
                @Override
                public void onClick(@NonNull final View widget) {
                    ShareUtils.openUrlInBrowser(requireContext(), image.getUrl());
                }
            }, entryBegin, urls.length(), Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);

            if (preferredImageUrl.equals(image.getUrl())) {
                urls.setSpan(new StyleSpan(Typeface.BOLD), entryBegin, urls.length(),
                        Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
        }

        itemBinding.metadataContentView.setText(urls);
        itemBinding.metadataContentView.setMovementMethod(LinkMovementMethod.getInstance());
        layout.addView(itemBinding.getRoot());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,onClick,void onClick(View),"[234, 237]","{'A305': [(234, 237)]}",{'A305': 1.0},A305,,"                @Override
                public void onClick(@NonNull final View widget) {
                    ShareUtils.openUrlInBrowser(requireContext(), image.getUrl());
                }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,addTagsMetadataItem,"void addTagsMetadataItem(LayoutInflater,LinearLayout)","[251, 268]","{'A386': [(251, 253), (255, 268)], 'A327': [(254, 254)]}","{'A386': 0.9444444444444444, 'A327': 0.05555555555555555}",A386,,"    private void addTagsMetadataItem(final LayoutInflater inflater, final LinearLayout layout) {
        final List<String> tags = getTags();

        if (!tags.isEmpty()) {
            final var itemBinding = ItemMetadataTagsBinding.inflate(inflater, layout, false);

            tags.stream().sorted(String.CASE_INSENSITIVE_ORDER).forEach(tag -> {
                final Chip chip = (Chip) inflater.inflate(R.layout.chip,
                        itemBinding.metadataTagsChips, false);
                chip.setText(tag);
                chip.setOnClickListener(this::onTagClick);
                chip.setOnLongClickListener(this::onTagLongClick);
                itemBinding.metadataTagsChips.addView(chip);
            });

            layout.addView(itemBinding.getRoot());
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,onTagClick,void onTagClick(View),"[270, 275]","{'A386': [(270, 275)]}",{'A386': 1.0},A386,,"    private void onTagClick(final View chip) {
        if (getParentFragment() != null) {
            NavigationHelper.openSearchFragment(getParentFragment().getParentFragmentManager(),
                    getServiceId(), ((Chip) chip).getText().toString());
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/BaseDescriptionFragment.java,BaseDescriptionFragment,onTagLongClick,boolean onTagLongClick(View),"[277, 280]","{'A386': [(277, 280)]}",{'A386': 1.0},A386,,"    private boolean onTagLongClick(final View chip) {
        ShareUtils.copyToClipboard(requireContext(), ((Chip) chip).getText().toString());
        return true;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,setUrl,void setUrl(String),"[23, 25]","{'A290': [(23, 25)]}",{'A290': 1.0},A290,,"    public void setUrl(final String url) {
        this.url = url;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,setPlayQueue,void setPlayQueue(PlayQueue),"[27, 29]","{'A290': [(27, 29)]}",{'A290': 1.0},A290,,"    public void setPlayQueue(final PlayQueue queue) {
        this.playQueue = queue;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,getServiceId,int getServiceId(),"[31, 33]","{'A301': [(31, 33)]}",{'A301': 1.0},A301,,"    public int getServiceId() {
        return serviceId;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,getTitle,String getTitle(),"[35, 37]","{'A301': [(35, 37)]}",{'A301': 1.0},A301,,"    public String getTitle() {
        return title;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,setTitle,void setTitle(String),"[39, 41]","{'A294': [(39, 41)]}",{'A294': 1.0},A294,,"    public void setTitle(final String title) {
        this.title = title;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,getUrl,String getUrl(),"[43, 45]","{'A301': [(43, 45)]}",{'A301': 1.0},A301,,"    public String getUrl() {
        return url;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,getPlayQueue,PlayQueue getPlayQueue(),"[47, 49]","{'A290': [(47, 49)]}",{'A290': 1.0},A290,,"    public PlayQueue getPlayQueue() {
        return playQueue;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/StackItem.java,StackItem,toString,String toString(),"[51, 55]","{'A301': [(52, 55)], 'A299': [(51, 51)]}","{'A301': 0.8, 'A299': 0.2}",A301,,"    @NonNull
    @Override
    public String toString() {
        return getServiceId() + "":"" + getUrl() + "" > "" + getTitle();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailPlayerCrasher.java,VideoDetailPlayerCrasher,getThemeWrapperContext,Context getThemeWrapperContext(Context),"[73, 79]","{'A300': [(73, 79)]}",{'A300': 1.0},A300,,"    private static Context getThemeWrapperContext(final Context context) {
        return new ContextThemeWrapper(
                context,
                ThemeHelper.isLightThemeSelected(context)
                        ? R.style.LightTheme
                        : R.style.DarkTheme);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailPlayerCrasher.java,VideoDetailPlayerCrasher,onCrashThePlayer,"void onCrashThePlayer(Context,Player)","[81, 125]","{'A300': [(81, 106), (108, 108), (110, 117), (119, 125)], 'A295': [(107, 107), (109, 109), (118, 118)]}","{'A300': 0.9333333333333333, 'A295': 0.06666666666666667}",A300,,"    public static void onCrashThePlayer(
            @NonNull final Context context,
            @Nullable final Player player
    ) {
        if (player == null) {
            Log.d(TAG, ""Player is not available"");
            Toast.makeText(context, ""Player is not available"", Toast.LENGTH_SHORT)
                    .show();

            return;
        }

        // -- Build the dialog/UI --
        final Context themeWrapperContext = getThemeWrapperContext(context);
        final LayoutInflater inflater = LayoutInflater.from(themeWrapperContext);

        final SingleChoiceDialogViewBinding binding =
                SingleChoiceDialogViewBinding.inflate(inflater);

        final AlertDialog alertDialog = new AlertDialog.Builder(themeWrapperContext)
                .setTitle(""Choose an exception"")
                .setView(binding.getRoot())
                .setCancelable(true)
                .setNegativeButton(R.string.cancel, null)
                .create();

        for (final Pair<String, Supplier<ExoPlaybackException>> entry : AVAILABLE_EXCEPTION_TYPES) {
            final RadioButton radioButton = ListRadioIconItemBinding.inflate(inflater).getRoot();
            radioButton.setText(entry.first);
            radioButton.setChecked(false);
            radioButton.setLayoutParams(
                    new RadioGroup.LayoutParams(
                            ViewGroup.LayoutParams.MATCH_PARENT,
                            ViewGroup.LayoutParams.WRAP_CONTENT
                    )
            );
            radioButton.setOnClickListener(v -> {
                tryCrashPlayerWith(player, entry.second.get());
                alertDialog.cancel();
            });
            binding.list.addView(radioButton);
        }

        alertDialog.show();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailPlayerCrasher.java,VideoDetailPlayerCrasher,tryCrashPlayerWith,"void tryCrashPlayerWith(Player,ExoPlaybackException)","[133, 145]","{'A300': [(133, 145)]}",{'A300': 1.0},A300,,"    private static void tryCrashPlayerWith(
            @NonNull final Player player,
            @NonNull final ExoPlaybackException exception
    ) {
        Log.d(TAG, ""Crashing the player using player.onPlayerError(ex)"");
        try {
            player.onPlayerError(exception);
        } catch (final Exception exPlayer) {
            Log.e(TAG,
                    ""Run into an exception while crashing the player:"",
                    exPlayer);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onServiceConnected,void onServiceConnected(PlayerService),"[238, 241]","{'A305': [(239, 239), (241, 241)], 'A290': [(238, 238), (240, 240)]}","{'A305': 0.5, 'A290': 0.5}",A305,,"    @Override
    public void onServiceConnected(@NonNull final PlayerService connectedPlayerService) {
        playerService = connectedPlayerService;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onPlayerConnected,"void onPlayerConnected(Player,boolean)","[243, 276]","{'A305': [(243, 246), (251, 251), (256, 256), (260, 260), (265, 265), (272, 273)], 'A295': [(271, 271)], 'A290': [(247, 250), (252, 255), (257, 259), (263, 264), (266, 270), (274, 274), (276, 276)], 'A298': [(275, 275)], 'A409': [(261, 262)]}","{'A305': 0.29411764705882354, 'A295': 0.029411764705882353, 'A290': 0.5882352941176471, 'A298': 0.029411764705882353, 'A409': 0.058823529411764705}",A290,,"    @Override
    public void onPlayerConnected(@NonNull final Player connectedPlayer,
                                  final boolean playAfterConnect) {
        player = connectedPlayer;

        // It will do nothing if the player is not in fullscreen mode
        hideSystemUiIfNeeded();

        final Optional<MainPlayerUi> playerUi = player.UIs().get(MainPlayerUi.class);
        if (!player.videoPlayerSelected() && !playAfterConnect) {
            return;
        }

        if (DeviceUtils.isLandscape(requireContext())) {
            // If the video is playing but orientation changed
            // let's make the video in fullscreen again
            checkLandscape();
        } else if (playerUi.map(ui -> ui.isFullscreen() && !ui.isVerticalVideo()).orElse(false)
                // Tablet UI has orientation-independent fullscreen
                && !DeviceUtils.isTablet(activity)) {
            // Device is in portrait orientation after rotation but UI is in fullscreen.
            // Return back to non-fullscreen state
            playerUi.ifPresent(MainPlayerUi::toggleFullscreen);
        }

        if (playAfterConnect
                || (currentInfo != null
                && isAutoplayEnabled()
                && playerUi.isEmpty())) {
            autoPlayEnabled = true; // forcefully start playing
            openVideoPlayerAutoFullscreen();
        }
        updateOverlayPlayQueueButtonVisibility();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onPlayerDisconnected,void onPlayerDisconnected(),"[278, 285]","{'A305': [(278, 285)]}",{'A305': 1.0},A305,,"    @Override
    public void onPlayerDisconnected() {
        player = null;
        // the binding could be null at this point, if the app is finishing
        if (binding != null) {
            restoreDefaultBrightness();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onServiceDisconnected,void onServiceDisconnected(),"[287, 290]","{'A290': [(287, 290)]}",{'A290': 1.0},A290,,"    @Override
    public void onServiceDisconnected() {
        playerService = null;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,getInstance,"VideoDetailFragment getInstance(int,String,String,PlayQueue)","[295, 302]","{'A301': [(301, 302)], 'A305': [(295, 298), (300, 300)], 'A294': [(299, 299)]}","{'A301': 0.25, 'A305': 0.625, 'A294': 0.125}",A305,,"    public static VideoDetailFragment getInstance(final int serviceId,
                                                  @Nullable final String url,
                                                  @NonNull final String name,
                                                  @Nullable final PlayQueue queue) {
        final VideoDetailFragment instance = new VideoDetailFragment();
        instance.setInitialData(serviceId, url, name, queue);
        return instance;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,getInstanceInCollapsedState,VideoDetailFragment getInstanceInCollapsedState(),"[304, 308]","{'A305': [(306, 306)], 'A290': [(304, 305), (307, 308)]}","{'A305': 0.2, 'A290': 0.8}",A290,,"    public static VideoDetailFragment getInstanceInCollapsedState() {
        final VideoDetailFragment instance = new VideoDetailFragment();
        instance.updateBottomSheetState(BottomSheetBehavior.STATE_COLLAPSED);
        return instance;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onCreate,void onCreate(Bundle),"[315, 340]","{'A301': [(315, 315), (340, 340)], 'A302': [(317, 317)], 'A305': [(319, 320), (322, 324)], 'A295': [(325, 325)], 'A290': [(318, 318), (326, 339)], 'A294': [(316, 316)], 'A397': [(321, 321)]}","{'A301': 0.07692307692307693, 'A302': 0.038461538461538464, 'A305': 0.19230769230769232, 'A295': 0.038461538461538464, 'A290': 0.5769230769230769, 'A294': 0.038461538461538464, 'A397': 0.038461538461538464}",A290,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
        showComments = prefs.getBoolean(getString(R.string.show_comments_key), true);
        showRelatedItems = prefs.getBoolean(getString(R.string.show_next_video_key), true);
        showDescription = prefs.getBoolean(getString(R.string.show_description_key), true);
        selectedTabTag = prefs.getString(
                getString(R.string.stream_info_selected_tab_key), COMMENTS_TAB_TAG);
        prefs.registerOnSharedPreferenceChangeListener(preferenceChangeListener);

        setupBroadcastReceiver();

        settingsContentObserver = new ContentObserver(new Handler()) {
            @Override
            public void onChange(final boolean selfChange) {
                if (activity != null && !globalScreenOrientationLocked(activity)) {
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
                }
            }
        };
        activity.getContentResolver().registerContentObserver(
                Settings.System.getUriFor(Settings.System.ACCELEROMETER_ROTATION), false,
                settingsContentObserver);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onChange,void onChange(boolean),"[330, 335]","{'A290': [(330, 335)]}",{'A290': 1.0},A290,,"            @Override
            public void onChange(final boolean selfChange) {
                if (activity != null && !globalScreenOrientationLocked(activity)) {
                    activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
                }
            }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[342, 347]","{'A301': [(342, 342), (347, 347)], 'A294': [(343, 344)], 'A320': [(345, 346)]}","{'A301': 0.3333333333333333, 'A294': 0.3333333333333333, 'A320': 0.3333333333333333}",A301,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                             final Bundle savedInstanceState) {
        binding = FragmentVideoDetailBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onPause,void onPause(),"[349, 361]","{'A301': [(349, 351)], 'A295': [(359, 359)], 'A290': [(355, 355)], 'A294': [(352, 354), (358, 358)], 'A291': [(357, 357), (360, 360)], 'A299': [(356, 356)], 'A311': [(361, 361)]}","{'A301': 0.23076923076923078, 'A295': 0.07692307692307693, 'A290': 0.07692307692307693, 'A294': 0.3076923076923077, 'A291': 0.15384615384615385, 'A299': 0.07692307692307693, 'A311': 0.07692307692307693}",A294,,"    @Override
    public void onPause() {
        super.onPause();
        if (currentWorker != null) {
            currentWorker.dispose();
        }
        restoreDefaultBrightness();
        PreferenceManager.getDefaultSharedPreferences(requireContext())
                .edit()
                .putString(getString(R.string.stream_info_selected_tab_key),
                        pageAdapter.getItemTitle(binding.viewPager.getCurrentItem()))
                .apply();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onResume,void onResume(),"[363, 388]","{'A301': [(363, 365), (369, 369), (381, 383)], 'A305': [(366, 368), (376, 380)], 'A290': [(370, 371), (374, 375), (384, 388)], 'A298': [(372, 373)]}","{'A301': 0.2692307692307692, 'A305': 0.3076923076923077, 'A290': 0.34615384615384615, 'A298': 0.07692307692307693}",A290,,"    @Override
    public void onResume() {
        super.onResume();
        if (DEBUG) {
            Log.d(TAG, ""onResume() called"");
        }

        activity.sendBroadcast(new Intent(ACTION_VIDEO_FRAGMENT_RESUMED));

        updateOverlayPlayQueueButtonVisibility();

        setupBrightness();

        if (tabSettingsChanged) {
            tabSettingsChanged = false;
            initTabs();
            if (currentInfo != null) {
                updateTabs(currentInfo);
            }
        }

        // Check if it was loading when the fragment was stopped/paused
        if (wasLoading.getAndSet(false) && !wasCleared()) {
            startLoading(false);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onStop,void onStop(),"[390, 397]","{'A301': [(397, 397)], 'A290': [(390, 396)]}","{'A301': 0.125, 'A290': 0.875}",A290,,"    @Override
    public void onStop() {
        super.onStop();

        if (!activity.isChangingConfigurations()) {
            activity.sendBroadcast(new Intent(ACTION_VIDEO_FRAGMENT_STOPPED));
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onDestroy,void onDestroy(),"[399, 432]","{'A301': [(399, 401), (415, 415), (424, 424), (432, 432)], 'A302': [(411, 411)], 'A295': [(412, 412), (425, 425)], 'A290': [(402, 404), (407, 407), (409, 410), (413, 414), (422, 422), (426, 431)], 'A294': [(416, 421)], 'A340': [(423, 423)], 'A320': [(405, 406), (408, 408)]}","{'A301': 0.17647058823529413, 'A302': 0.029411764705882353, 'A295': 0.058823529411764705, 'A290': 0.4411764705882353, 'A294': 0.17647058823529413, 'A340': 0.029411764705882353, 'A320': 0.08823529411764706}",A290,,"    @Override
    public void onDestroy() {
        super.onDestroy();

        // Stop the service when user leaves the app with double back press
        // if video player is selected. Otherwise unbind
        if (activity.isFinishing() && isPlayerAvailable() && player.videoPlayerSelected()) {
            playerHolder.stopService();
        } else {
            playerHolder.setListener(null);
        }

        PreferenceManager.getDefaultSharedPreferences(activity)
                .unregisterOnSharedPreferenceChangeListener(preferenceChangeListener);
        activity.unregisterReceiver(broadcastReceiver);
        activity.getContentResolver().unregisterContentObserver(settingsContentObserver);

        if (positionSubscriber != null) {
            positionSubscriber.dispose();
        }
        if (currentWorker != null) {
            currentWorker.dispose();
        }
        disposables.clear();
        positionSubscriber = null;
        currentWorker = null;
        bottomSheetBehavior.removeBottomSheetCallback(bottomSheetCallback);

        if (activity.isFinishing()) {
            playQueue = null;
            currentInfo = null;
            stack = new LinkedList<>();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onDestroyView,void onDestroyView(),"[434, 438]","{'A320': [(434, 438)]}",{'A320': 1.0},A320,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onActivityResult,"void onActivityResult(int,int,Intent)","[440, 456]","{'A301': [(440, 440), (442, 445), (451, 455)], 'A302': [(456, 456)], 'A305': [(446, 447)], 'A294': [(441, 441), (448, 450)]}","{'A301': 0.5882352941176471, 'A302': 0.058823529411764705, 'A305': 0.11764705882352941, 'A294': 0.23529411764705882}",A301,,"    @Override
    public void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case ReCaptchaActivity.RECAPTCHA_REQUEST:
                if (resultCode == Activity.RESULT_OK) {
                    NavigationHelper.openVideoDetailFragment(requireContext(), getFM(),
                            serviceId, url, title, null, false);
                } else {
                    Log.e(TAG, ""ReCaptcha failed"");
                }
                break;
            default:
                Log.e(TAG, ""Request code from activity not supported ["" + requestCode + ""]"");
                break;
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setOnClickListeners,void setOnClickListeners(),"[462, 543]","{'A301': [(521, 521)], 'A305': [(468, 468), (472, 472), (495, 495), (513, 513), (516, 517), (537, 537)], 'A295': [(462, 467), (470, 471), (473, 484), (486, 487), (500, 501), (505, 512), (514, 515), (518, 520), (522, 536), (538, 539), (541, 543)], 'A290': [(540, 540)], 'A294': [(469, 469), (485, 485)], 'A407': [(488, 494), (499, 499), (502, 504)], 'A298': [(496, 497)], 'A324': [(498, 498)]}","{'A301': 0.012195121951219513, 'A305': 0.08536585365853659, 'A295': 0.6951219512195121, 'A290': 0.012195121951219513, 'A294': 0.024390243902439025, 'A407': 0.13414634146341464, 'A298': 0.024390243902439025, 'A324': 0.012195121951219513}",A295,,"    private void setOnClickListeners() {
        binding.detailTitleRootLayout.setOnClickListener(v -> toggleTitleAndSecondaryControls());
        binding.detailUploaderRootLayout.setOnClickListener(makeOnClickListener(info -> {
            if (isEmpty(info.getSubChannelUrl())) {
                if (!isEmpty(info.getUploaderUrl())) {
                    openChannel(info.getUploaderUrl(), info.getUploaderName());
                }

                if (DEBUG) {
                    Log.i(TAG, ""Can't open sub-channel because we got no channel URL"");
                }
            } else {
                openChannel(info.getSubChannelUrl(), info.getSubChannelName());
            }
        }));
        binding.detailThumbnailRootLayout.setOnClickListener(v -> {
            autoPlayEnabled = true; // forcefully start playing
            // FIXME Workaround #7427
            if (isPlayerAvailable()) {
                player.setRecovery();
            }
            openVideoPlayerAutoFullscreen();
        });

        binding.detailControlsBackground.setOnClickListener(v -> openBackgroundPlayer(false));
        binding.detailControlsPopup.setOnClickListener(v -> openPopupPlayer(false));
        binding.detailControlsPlaylistAppend.setOnClickListener(makeOnClickListener(info -> {
            if (getFM() != null && currentInfo != null) {
                final Fragment fragment = getParentFragmentManager().
                        findFragmentById(R.id.fragment_holder);

                // commit previous pending changes to database
                if (fragment instanceof LocalPlaylistFragment) {
                    ((LocalPlaylistFragment) fragment).saveImmediate();
                } else if (fragment instanceof MainFragment) {
                    ((MainFragment) fragment).commitPlaylistTabs();
                }

                disposables.add(PlaylistDialog.createCorrespondingDialog(requireContext(),
                        List.of(new StreamEntity(info)),
                        dialog -> dialog.show(getParentFragmentManager(), TAG)));
            }
        }));
        binding.detailControlsDownload.setOnClickListener(v -> {
            if (PermissionHelper.checkStoragePermissions(activity,
                    PermissionHelper.DOWNLOAD_DIALOG_REQUEST_CODE)) {
                openDownloadDialog();
            }
        });
        binding.detailControlsShare.setOnClickListener(makeOnClickListener(info ->
                ShareUtils.shareText(requireContext(), info.getName(), info.getUrl(),
                        info.getThumbnails())));
        binding.detailControlsOpenInBrowser.setOnClickListener(makeOnClickListener(info ->
                ShareUtils.openUrlInBrowser(requireContext(), info.getUrl())));
        binding.detailControlsPlayWithKodi.setOnClickListener(makeOnClickListener(info ->
                KoreUtils.playWithKore(requireContext(), Uri.parse(info.getUrl()))));
        if (DEBUG) {
            binding.detailControlsCrashThePlayer.setOnClickListener(v ->
                    VideoDetailPlayerCrasher.onCrashThePlayer(requireContext(), player));
        }

        final View.OnClickListener overlayListener = v -> bottomSheetBehavior
                .setState(BottomSheetBehavior.STATE_EXPANDED);
        binding.overlayThumbnail.setOnClickListener(overlayListener);
        binding.overlayMetadataLayout.setOnClickListener(overlayListener);
        binding.overlayButtonsLayout.setOnClickListener(overlayListener);
        binding.overlayCloseButton.setOnClickListener(v -> bottomSheetBehavior
                .setState(BottomSheetBehavior.STATE_HIDDEN));
        binding.overlayPlayQueueButton.setOnClickListener(v -> openPlayQueue(requireContext()));
        binding.overlayPlayPauseButton.setOnClickListener(v -> {
            if (playerIsNotStopped()) {
                player.playPause();
                player.UIs().get(VideoPlayerUi.class).ifPresent(ui -> ui.hideControls(0, 0));
                showSystemUi();
            } else {
                autoPlayEnabled = true; // forcefully start playing
                openVideoPlayer(false);
            }

            setOverlayPlayPauseImage(isPlayerAvailable() && player.isPlaying());
        });
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,makeOnClickListener,View.OnClickListener makeOnClickListener(Consumer<StreamInfo>),"[545, 551]","{'A305': [(547, 547)], 'A295': [(545, 546), (548, 551)]}","{'A305': 0.14285714285714285, 'A295': 0.8571428571428571}",A295,,"    private View.OnClickListener makeOnClickListener(final Consumer<StreamInfo> consumer) {
        return v -> {
            if (!isLoading.get() && currentInfo != null) {
                consumer.accept(currentInfo);
            }
        };
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setOnLongClickListeners,void setOnLongClickListeners(),"[553, 578]","{'A295': [(553, 565), (568, 568), (571, 578)], 'A298': [(566, 567), (569, 570)]}","{'A295': 0.8461538461538461, 'A298': 0.15384615384615385}",A295,,"    private void setOnLongClickListeners() {
        binding.detailTitleRootLayout.setOnLongClickListener(makeOnLongClickListener(info ->
                ShareUtils.copyToClipboard(requireContext(),
                        binding.detailVideoTitleView.getText().toString())));
        binding.detailUploaderRootLayout.setOnLongClickListener(makeOnLongClickListener(info -> {
            if (isEmpty(info.getSubChannelUrl())) {
                Log.w(TAG, ""Can't open parent channel because we got no parent channel URL"");
            } else {
                openChannel(info.getUploaderUrl(), info.getUploaderName());
            }
        }));

        binding.detailControlsBackground.setOnLongClickListener(makeOnLongClickListener(info ->
            openBackgroundPlayer(true)
        ));
        binding.detailControlsPopup.setOnLongClickListener(makeOnLongClickListener(info ->
            openPopupPlayer(true)
        ));
        binding.detailControlsDownload.setOnLongClickListener(makeOnLongClickListener(info ->
                NavigationHelper.openDownloads(activity)));

        final View.OnLongClickListener overlayListener = makeOnLongClickListener(info ->
                openChannel(info.getUploaderUrl(), info.getUploaderName()));
        binding.overlayThumbnail.setOnLongClickListener(overlayListener);
        binding.overlayMetadataLayout.setOnLongClickListener(overlayListener);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,makeOnLongClickListener,View.OnLongClickListener makeOnLongClickListener(Consumer<StreamInfo>),"[580, 588]","{'A301': [(588, 588)], 'A295': [(580, 587)]}","{'A301': 0.1111111111111111, 'A295': 0.8888888888888888}",A295,,"    private View.OnLongClickListener makeOnLongClickListener(final Consumer<StreamInfo> consumer) {
        return v -> {
            if (isLoading.get() || currentInfo == null) {
                return false;
            }
            consumer.accept(currentInfo);
            return true;
        };
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openChannel,"void openChannel(String,String)","[590, 597]","{'A305': [(595, 595)], 'A294': [(592, 594)], 'A378': [(590, 591), (596, 597)]}","{'A305': 0.125, 'A294': 0.375, 'A378': 0.5}",A378,,"    private void openChannel(final String subChannelUrl, final String subChannelName) {
        try {
            NavigationHelper.openChannelFragment(getFM(), currentInfo.getServiceId(),
                    subChannelUrl, subChannelName);
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(this, ""Opening channel fragment"", e);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,toggleTitleAndSecondaryControls,void toggleTitleAndSecondaryControls(),"[599, 613]","{'A301': [(610, 610), (613, 613)], 'A305': [(599, 600), (602, 609), (611, 612)], 'A295': [(601, 601)]}","{'A301': 0.13333333333333333, 'A305': 0.8, 'A295': 0.06666666666666667}",A305,,"    private void toggleTitleAndSecondaryControls() {
        if (binding.detailSecondaryControlPanel.getVisibility() == View.GONE) {
            binding.detailVideoTitleView.setMaxLines(10);
            animateRotation(binding.detailToggleSecondaryControlsView,
                    VideoPlayerUi.DEFAULT_CONTROLS_DURATION, 180);
            binding.detailSecondaryControlPanel.setVisibility(View.VISIBLE);
        } else {
            binding.detailVideoTitleView.setMaxLines(1);
            animateRotation(binding.detailToggleSecondaryControlsView,
                    VideoPlayerUi.DEFAULT_CONTROLS_DURATION, 0);
            binding.detailSecondaryControlPanel.setVisibility(View.GONE);
        }
        // view pager height has changed, update the tab layout
        updateTabLayoutVisibility();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,initViews,"void initViews(View,Bundle)","[619, 641]","{'A301': [(621, 621)], 'A295': [(623, 625), (627, 627)], 'A294': [(620, 620)], 'A300': [(629, 639)], 'A298': [(628, 628)], 'A289': [(622, 622), (626, 626), (641, 641)], 'A320': [(619, 619)], 'A410': [(640, 640)]}","{'A301': 0.043478260869565216, 'A295': 0.17391304347826086, 'A294': 0.043478260869565216, 'A300': 0.4782608695652174, 'A298': 0.043478260869565216, 'A289': 0.13043478260869565, 'A320': 0.043478260869565216, 'A410': 0.043478260869565216}",A300,,"    @Override // called from onViewCreated in {@link BaseFragment#onViewCreated}
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        pageAdapter = new TabAdapter(getChildFragmentManager());
        binding.viewPager.setAdapter(pageAdapter);
        binding.tabLayout.setupWithViewPager(binding.viewPager);

        binding.detailThumbnailRootLayout.requestFocus();

        binding.detailControlsPlayWithKodi.setVisibility(
                KoreUtils.shouldShowPlayWithKodi(requireContext(), serviceId)
                        ? View.VISIBLE
                        : View.GONE
        );
        binding.detailControlsCrashThePlayer.setVisibility(
                DEBUG && PreferenceManager.getDefaultSharedPreferences(getContext())
                        .getBoolean(getString(R.string.show_crash_the_player_key), false)
                        ? View.VISIBLE
                        : View.GONE
        );
        accommodateForTvAndDesktopMode();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,initListeners,void initListeners(),"[643, 678]","{'A301': [(643, 643), (645, 647)], 'A305': [(644, 644), (652, 652), (655, 656), (663, 671)], 'A295': [(648, 651), (654, 654), (657, 661)], 'A290': [(662, 662), (672, 672), (674, 675), (677, 677)], 'A298': [(653, 653), (673, 673)], 'A310': [(678, 678)], 'A320': [(676, 676)]}","{'A301': 0.1111111111111111, 'A305': 0.3611111111111111, 'A295': 0.2777777777777778, 'A290': 0.1388888888888889, 'A298': 0.05555555555555555, 'A310': 0.027777777777777776, 'A320': 0.027777777777777776}",A305,,"    @Override
    @SuppressLint(""ClickableViewAccessibility"")
    protected void initListeners() {
        super.initListeners();

        setOnClickListeners();
        setOnLongClickListeners();

        final View.OnTouchListener controlsTouchListener = (view, motionEvent) -> {
            if (motionEvent.getAction() == MotionEvent.ACTION_DOWN
                    && PlayButtonHelper.shouldShowHoldToAppendTip(activity)) {

                animate(binding.touchAppendDetail, true, 250, AnimationType.ALPHA, 0, () ->
                        animate(binding.touchAppendDetail, false, 1500, AnimationType.ALPHA, 1000));
            }
            return false;
        };
        binding.detailControlsBackground.setOnTouchListener(controlsTouchListener);
        binding.detailControlsPopup.setOnTouchListener(controlsTouchListener);

        binding.appBarLayout.addOnOffsetChangedListener((layout, verticalOffset) -> {
            // prevent useless updates to tab layout visibility if nothing changed
            if (verticalOffset != lastAppBarVerticalOffset) {
                lastAppBarVerticalOffset = verticalOffset;
                // the view was scrolled
                updateTabLayoutVisibility();
            }
        });

        setupBottomPlayer();
        if (!playerHolder.isBound()) {
            setHeightThumbnail();
        } else {
            playerHolder.startService(false, this);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onKeyDown,boolean onKeyDown(int),"[690, 695]","{'A301': [(695, 695)], 'A302': [(690, 690)], 'A305': [(692, 694)], 'A290': [(691, 691)]}","{'A301': 0.16666666666666666, 'A302': 0.16666666666666666, 'A305': 0.5, 'A290': 0.16666666666666666}",A305,,"    @Override
    public boolean onKeyDown(final int keyCode) {
        return isPlayerAvailable()
                && player.UIs().get(VideoPlayerUi.class)
                .map(playerUi -> playerUi.onKeyDown(keyCode)).orElse(false);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onBackPressed,boolean onBackPressed(),"[697, 733]","{'A301': [(697, 699), (701, 701), (721, 721), (727, 729), (731, 731)], 'A305': [(704, 704), (706, 706), (709, 709), (718, 718), (720, 720), (724, 724), (726, 726), (730, 730)], 'A290': [(700, 700), (702, 703), (705, 705), (707, 708), (710, 713), (715, 717), (719, 719), (722, 723), (725, 725), (732, 733)], 'A320': [(714, 714)]}","{'A301': 0.24324324324324326, 'A305': 0.21621621621621623, 'A290': 0.5135135135135135, 'A320': 0.02702702702702703}",A290,,"    @Override
    public boolean onBackPressed() {
        if (DEBUG) {
            Log.d(TAG, ""onBackPressed() called"");
        }

        // If we are in fullscreen mode just exit from it via first back press
        if (isFullscreen()) {
            if (!DeviceUtils.isTablet(activity)) {
                player.pause();
            }
            restoreDefaultOrientation();
            setAutoPlay(false);
            return true;
        }

        // If we have something in history of played items we replay it here
        if (isPlayerAvailable()
                && player.getPlayQueue() != null
                && player.videoPlayerSelected()
                && player.getPlayQueue().previous()) {
            return true; // no code here, as previous() was used in the if
        }

        // That means that we are on the start of the stack,
        if (stack.size() <= 1) {
            restoreDefaultOrientation();
            return false; // let MainActivity handle the onBack (e.g. to minimize the mini player)
        }

        // Remove top
        stack.pop();
        // Get stack item from the new top
        setupFromHistoryItem(Objects.requireNonNull(stack.peek()));

        return true;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setupFromHistoryItem,void setupFromHistoryItem(StackItem),"[735, 755]","{'A301': [(755, 755)], 'A305': [(736, 737), (739, 740), (753, 753)], 'A290': [(735, 735), (738, 738), (741, 749), (751, 752), (754, 754)], 'A320': [(750, 750)]}","{'A301': 0.047619047619047616, 'A305': 0.23809523809523808, 'A290': 0.6666666666666666, 'A320': 0.047619047619047616}",A290,,"    private void setupFromHistoryItem(final StackItem item) {
        setAutoPlay(false);
        hideMainPlayerOnLoadingNewStream();

        setInitialData(item.getServiceId(), item.getUrl(),
                item.getTitle() == null ? """" : item.getTitle(), item.getPlayQueue());
        startLoading(false);

        // Maybe an item was deleted in background activity
        if (item.getPlayQueue().getItem() == null) {
            return;
        }

        final PlayQueueItem playQueueItem = item.getPlayQueue().getItem();
        // Update title, url, uploader from the last item in the stack (it's current now)
        final boolean isPlayerStopped = !isPlayerAvailable() || player.isStopped();
        if (playQueueItem != null && isPlayerStopped) {
            updateOverlayData(playQueueItem.getTitle(),
                    playQueueItem.getUploader(), playQueueItem.getThumbnails());
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,doInitialLoadLogic,void doInitialLoadLogic(),"[761, 772]","{'A301': [(761, 762), (772, 772)], 'A290': [(763, 766), (770, 770)], 'A294': [(767, 769), (771, 771)]}","{'A301': 0.25, 'A290': 0.4166666666666667, 'A294': 0.3333333333333333}",A290,,"    @Override
    protected void doInitialLoadLogic() {
        if (wasCleared()) {
            return;
        }

        if (currentInfo == null) {
            prepareAndLoadInfo();
        } else {
            prepareAndHandleInfoIfNeededAfterDelay(currentInfo, false, 50);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,selectAndLoadVideo,"void selectAndLoadVideo(int,String,String,PlayQueue)","[774, 786]","{'A301': [(786, 786)], 'A305': [(774, 777), (779, 780), (783, 784)], 'A290': [(781, 782), (785, 785)], 'A320': [(778, 778)]}","{'A301': 0.07692307692307693, 'A305': 0.6153846153846154, 'A290': 0.23076923076923078, 'A320': 0.07692307692307693}",A305,,"    public void selectAndLoadVideo(final int newServiceId,
                                   @Nullable final String newUrl,
                                   @NonNull final String newTitle,
                                   @Nullable final PlayQueue newQueue) {
        if (isPlayerAvailable() && newQueue != null && playQueue != null
                && playQueue.getItem() != null && !playQueue.getItem().getUrl().equals(newUrl)) {
            // Preloading can be disabled since playback is surely being replaced.
            player.disablePreloadingOfCurrentTrack();
        }

        setInitialData(newServiceId, newUrl, newTitle, newQueue);
        startLoading(false, true);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,prepareAndHandleInfoIfNeededAfterDelay,"void prepareAndHandleInfoIfNeededAfterDelay(StreamInfo,boolean,long)","[788, 801]","{'A295': [(796, 796)], 'A290': [(788, 795), (797, 801)]}","{'A295': 0.07142857142857142, 'A290': 0.9285714285714286}",A290,,"    private void prepareAndHandleInfoIfNeededAfterDelay(final StreamInfo info,
                                                        final boolean scrollToTop,
                                                        final long delay) {
        new Handler(Looper.getMainLooper()).postDelayed(() -> {
            if (activity == null) {
                return;
            }
            // Data can already be drawn, don't spend time twice
            if (info.getName().equals(binding.detailVideoTitleView.getText().toString())) {
                return;
            }
            prepareAndHandleInfo(info, scrollToTop);
        }, delay);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,prepareAndHandleInfo,"void prepareAndHandleInfo(StreamInfo,boolean)","[803, 818]","{'A301': [(808, 809), (811, 811), (818, 818)], 'A290': [(812, 814)], 'A294': [(803, 807)], 'A289': [(810, 810), (815, 817)]}","{'A301': 0.25, 'A290': 0.1875, 'A294': 0.3125, 'A289': 0.25}",A294,,"    private void prepareAndHandleInfo(final StreamInfo info, final boolean scrollToTop) {
        if (DEBUG) {
            Log.d(TAG, ""prepareAndHandleInfo() called with: ""
                    + ""info = ["" + info + ""], scrollToTop = ["" + scrollToTop + ""]"");
        }

        showLoading();
        initTabs();

        if (scrollToTop) {
            scrollToTop();
        }
        handleResult(info);
        showContent();

    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,prepareAndLoadInfo,void prepareAndLoadInfo(),"[820, 823]","{'A301': [(820, 820), (822, 823)], 'A290': [(821, 821)]}","{'A301': 0.75, 'A290': 0.25}",A301,,"    protected void prepareAndLoadInfo() {
        scrollToTop();
        startLoading(false);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,startLoading,void startLoading(boolean),"[825, 836]","{'A301': [(825, 825), (827, 828), (830, 830), (834, 834)], 'A290': [(826, 826), (835, 836)], 'A294': [(831, 833)], 'A289': [(829, 829)]}","{'A301': 0.4166666666666667, 'A290': 0.25, 'A294': 0.25, 'A289': 0.08333333333333333}",A301,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);

        initTabs();
        currentInfo = null;
        if (currentWorker != null) {
            currentWorker.dispose();
        }

        runWorker(forceLoad, stack.isEmpty());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,startLoading,"void startLoading(boolean,boolean)","[838, 848]","{'A290': [(838, 848)]}",{'A290': 1.0},A290,,"    private void startLoading(final boolean forceLoad, final boolean addToBackStack) {
        super.startLoading(forceLoad);

        initTabs();
        currentInfo = null;
        if (currentWorker != null) {
            currentWorker.dispose();
        }

        runWorker(forceLoad, addToBackStack);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,runWorker,"void runWorker(boolean,boolean)","[850, 880]","{'A301': [(852, 854)], 'A302': [(856, 856)], 'A305': [(857, 857), (870, 870), (873, 873), (875, 875), (878, 879)], 'A290': [(850, 851), (864, 867), (871, 872), (874, 874), (876, 877)], 'A294': [(858, 863)], 'A289': [(880, 880)], 'A299': [(855, 855)], 'A350': [(868, 869)]}","{'A301': 0.0967741935483871, 'A302': 0.03225806451612903, 'A305': 0.1935483870967742, 'A290': 0.3548387096774194, 'A294': 0.1935483870967742, 'A289': 0.03225806451612903, 'A299': 0.03225806451612903, 'A350': 0.06451612903225806}",A290,,"    private void runWorker(final boolean forceLoad, final boolean addToBackStack) {
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
        currentWorker = ExtractorHelper.getStreamInfo(serviceId, url, forceLoad)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(result -> {
                    isLoading.set(false);
                    hideMainPlayerOnLoadingNewStream();
                    if (result.getAgeLimit() != NO_AGE_LIMIT && !prefs.getBoolean(
                            getString(R.string.show_age_restricted_content), false)) {
                        hideAgeRestrictedContent();
                    } else {
                        handleResult(result);
                        showContent();
                        if (addToBackStack) {
                            if (playQueue == null) {
                                playQueue = new SinglePlayQueue(result);
                            }
                            if (stack.isEmpty() || !stack.peek().getPlayQueue()
                                    .equalStreams(playQueue)) {
                                stack.push(new StackItem(serviceId, url, title, playQueue));
                            }
                        }

                        if (isAutoplayEnabled()) {
                            openVideoPlayerAutoFullscreen();
                        }
                    }
                }, throwable -> showError(new ErrorInfo(throwable, UserAction.REQUESTED_STREAM,
                        url == null ? ""no url"" : url, serviceId)));
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,initTabs,void initTabs(),"[886, 929]","{'A305': [(891, 892), (896, 896), (898, 898), (902, 902), (908, 909), (912, 915), (917, 917), (920, 920), (925, 925), (927, 928)], 'A295': [(888, 888), (923, 923)], 'A290': [(894, 895)], 'A294': [(921, 922), (924, 924)], 'A289': [(886, 886), (890, 890), (893, 893), (899, 900), (906, 907), (918, 919), (926, 926), (929, 929)], 'A397': [(901, 901), (905, 905)], 'A291': [(887, 887), (889, 889)], 'A320': [(903, 903), (910, 910), (916, 916)], 'A312': [(897, 897), (904, 904), (911, 911)]}","{'A305': 0.36363636363636365, 'A295': 0.045454545454545456, 'A290': 0.045454545454545456, 'A294': 0.06818181818181818, 'A289': 0.25, 'A397': 0.045454545454545456, 'A291': 0.045454545454545456, 'A320': 0.06818181818181818, 'A312': 0.06818181818181818}",A305,,"    private void initTabs() {
        if (pageAdapter.getCount() != 0) {
            selectedTabTag = pageAdapter.getItemTitle(binding.viewPager.getCurrentItem());
        }
        pageAdapter.clearAllItems();
        tabIcons.clear();
        tabContentDescriptions.clear();

        if (shouldShowComments()) {
            pageAdapter.addFragment(
                    CommentsFragment.getInstance(serviceId, url, title), COMMENTS_TAB_TAG);
            tabIcons.add(R.drawable.ic_comment);
            tabContentDescriptions.add(R.string.comments_tab_description);
        }

        if (showRelatedItems && binding.relatedItemsLayout == null) {
            // temp empty fragment. will be updated in handleResult
            pageAdapter.addFragment(EmptyFragment.newInstance(false), RELATED_TAB_TAG);
            tabIcons.add(R.drawable.ic_art_track);
            tabContentDescriptions.add(R.string.related_items_tab_description);
        }

        if (showDescription) {
            // temp empty fragment. will be updated in handleResult
            pageAdapter.addFragment(EmptyFragment.newInstance(false), DESCRIPTION_TAB_TAG);
            tabIcons.add(R.drawable.ic_description);
            tabContentDescriptions.add(R.string.description_tab_description);
        }

        if (pageAdapter.getCount() == 0) {
            pageAdapter.addFragment(EmptyFragment.newInstance(true), EMPTY_TAB_TAG);
        }
        pageAdapter.notifyDataSetUpdate();

        if (pageAdapter.getCount() >= 2) {
            final int position = pageAdapter.getItemPositionByTitle(selectedTabTag);
            if (position != -1) {
                binding.viewPager.setCurrentItem(position);
            }
            updateTabIconsAndContentDescriptions();
        }
        // the page adapter now contains tabs: show the tab layout
        updateTabLayoutVisibility();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updateTabIconsAndContentDescriptions,void updateTabIconsAndContentDescriptions(),"[937, 945]","{'A305': [(937, 945)]}",{'A305': 1.0},A305,,"    private void updateTabIconsAndContentDescriptions() {
        for (int i = 0; i < tabIcons.size(); ++i) {
            final TabLayout.Tab tab = binding.tabLayout.getTabAt(i);
            if (tab != null) {
                tab.setIcon(tabIcons.get(i));
                tab.setContentDescription(tabContentDescriptions.get(i));
            }
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updateTabs,void updateTabs(StreamInfo),"[947, 968]","{'A305': [(947, 947), (951, 952), (954, 968)], 'A397': [(948, 950), (953, 953)]}","{'A305': 0.8181818181818182, 'A397': 0.18181818181818182}",A305,,"    private void updateTabs(@NonNull final StreamInfo info) {
        if (showRelatedItems) {
            if (binding.relatedItemsLayout == null) { // phone
                pageAdapter.updateItem(RELATED_TAB_TAG, RelatedItemsFragment.getInstance(info));
            } else { // tablet + TV
                getChildFragmentManager().beginTransaction()
                        .replace(R.id.relatedItemsLayout, RelatedItemsFragment.getInstance(info))
                        .commitAllowingStateLoss();
                binding.relatedItemsLayout.setVisibility(isFullscreen() ? View.GONE : View.VISIBLE);
            }
        }

        if (showDescription) {
            pageAdapter.updateItem(DESCRIPTION_TAB_TAG, new DescriptionFragment(info));
        }

        binding.viewPager.setVisibility(View.VISIBLE);
        // make sure the tab layout is visible
        updateTabLayoutVisibility();
        pageAdapter.notifyDataSetUpdate();
        updateTabIconsAndContentDescriptions();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,shouldShowComments,boolean shouldShowComments(),"[970, 979]","{'A301': [(979, 979)], 'A294': [(976, 976)], 'A289': [(970, 975), (977, 978)]}","{'A301': 0.1, 'A294': 0.1, 'A289': 0.8}",A289,,"    private boolean shouldShowComments() {
        try {
            return showComments && NewPipe.getService(serviceId)
                    .getServiceInfo()
                    .getMediaCapabilities()
                    .contains(COMMENTS);
        } catch (final ExtractionException e) {
            return false;
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updateTabLayoutVisibility,void updateTabLayoutVisibility(),"[981, 1018]","{'A305': [(981, 981), (988, 994), (997, 999), (1002, 1018)], 'A295': [(995, 996), (1000, 1001)], 'A366': [(982, 987)]}","{'A305': 0.7368421052631579, 'A295': 0.10526315789473684, 'A366': 0.15789473684210525}",A305,,"    public void updateTabLayoutVisibility() {

        if (binding == null) {
            //If binding is null we do not need to and should not do anything with its object(s)
            return;
        }

        if (pageAdapter.getCount() < 2 || binding.viewPager.getVisibility() != View.VISIBLE) {
            // hide tab layout if there is only one tab or if the view pager is also hidden
            binding.tabLayout.setVisibility(View.GONE);
        } else {
            // call `post()` to be sure `viewPager.getHitRect()`
            // is up to date and not being currently recomputed
            binding.tabLayout.post(() -> {
                final var activity = getActivity();
                if (activity != null) {
                    final Rect pagerHitRect = new Rect();
                    binding.viewPager.getHitRect(pagerHitRect);

                    final int height = DeviceUtils.getWindowHeight(activity.getWindowManager());
                    final int viewPagerVisibleHeight = height - pagerHitRect.top;
                    // see TabLayout.DEFAULT_HEIGHT, which is equal to 48dp
                    final float tabLayoutHeight = TypedValue.applyDimension(
                            TypedValue.COMPLEX_UNIT_DIP, 48, getResources().getDisplayMetrics());

                    if (viewPagerVisibleHeight > tabLayoutHeight * 2) {
                        // no translation at all when viewPagerVisibleHeight > tabLayout.height * 3
                        binding.tabLayout.setTranslationY(
                                Math.max(0, tabLayoutHeight * 3 - viewPagerVisibleHeight));
                        binding.tabLayout.setVisibility(View.VISIBLE);
                    } else {
                        // view pager is not visible enough
                        binding.tabLayout.setVisibility(View.GONE);
                    }
                }
            });
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,scrollToTop,void scrollToTop(),"[1020, 1024]","{'A305': [(1022, 1023)], 'A295': [(1021, 1021)], 'A290': [(1020, 1020), (1024, 1024)]}","{'A305': 0.4, 'A295': 0.2, 'A290': 0.4}",A305,,"    public void scrollToTop() {
        binding.appBarLayout.setExpanded(true, true);
        // notify tab layout of scrolling
        updateTabLayoutVisibility();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,scrollToComment,void scrollToComment(CommentsInfoItem),"[1026, 1038]","{'A305': [(1027, 1036)], 'A298': [(1026, 1026), (1037, 1038)]}","{'A305': 0.7692307692307693, 'A298': 0.23076923076923078}",A305,,"    public void scrollToComment(final CommentsInfoItem comment) {
        final int commentsTabPos = pageAdapter.getItemPositionByTitle(COMMENTS_TAB_TAG);
        final Fragment fragment = pageAdapter.getItem(commentsTabPos);
        if (!(fragment instanceof CommentsFragment)) {
            return;
        }

        // unexpand the app bar only if scrolling to the comment succeeded
        if (((CommentsFragment) fragment).scrollToComment(comment)) {
            binding.appBarLayout.setExpanded(false, false);
            binding.viewPager.setCurrentItem(commentsTabPos, false);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,toggleFullscreenIfInFullscreenMode,void toggleFullscreenIfInFullscreenMode(),"[1044, 1054]","{'A305': [(1047, 1052)], 'A320': [(1044, 1046), (1053, 1054)]}","{'A305': 0.5454545454545454, 'A320': 0.45454545454545453}",A305,,"    private void toggleFullscreenIfInFullscreenMode() {
        // If a user watched video inside fullscreen mode and than chose another player
        // return to non-fullscreen mode
        if (isPlayerAvailable()) {
            player.UIs().get(MainPlayerUi.class).ifPresent(playerUi -> {
                if (playerUi.isFullscreen()) {
                    playerUi.toggleFullscreen();
                }
            });
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openBackgroundPlayer,void openBackgroundPlayer(boolean),"[1056, 1073]","{'A301': [(1059, 1060), (1070, 1070), (1072, 1073)], 'A290': [(1057, 1058), (1062, 1062)], 'A300': [(1063, 1067)], 'A386': [(1068, 1069), (1071, 1071)], 'A320': [(1061, 1061)], 'A390': [(1056, 1056)]}","{'A301': 0.2777777777777778, 'A290': 0.16666666666666666, 'A300': 0.2777777777777778, 'A386': 0.16666666666666666, 'A320': 0.05555555555555555, 'A390': 0.05555555555555555}",A301,,"    private void openBackgroundPlayer(final boolean append) {
        final boolean useExternalAudioPlayer = PreferenceManager
                .getDefaultSharedPreferences(activity)
                .getBoolean(activity.getString(R.string.use_external_audio_player_key), false);

        toggleFullscreenIfInFullscreenMode();

        if (isPlayerAvailable()) {
            // FIXME Workaround #7427
            player.setRecovery();
        }

        if (useExternalAudioPlayer) {
            showExternalAudioPlaybackDialog();
        } else {
            openNormalBackgroundPlayer(append);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openPopupPlayer,void openPopupPlayer(boolean),"[1075, 1097]","{'A301': [(1077, 1079), (1097, 1097)], 'A305': [(1076, 1076)], 'A290': [(1080, 1080), (1086, 1087), (1089, 1090), (1094, 1095)], 'A300': [(1083, 1085)], 'A320': [(1081, 1082), (1088, 1088)], 'A390': [(1075, 1075), (1093, 1093), (1096, 1096)], 'A384': [(1091, 1092)]}","{'A301': 0.17391304347826086, 'A305': 0.043478260869565216, 'A290': 0.30434782608695654, 'A300': 0.13043478260869565, 'A320': 0.13043478260869565, 'A390': 0.13043478260869565, 'A384': 0.08695652173913043}",A290,,"    private void openPopupPlayer(final boolean append) {
        if (!PermissionHelper.isPopupEnabledElseAsk(activity)) {
            return;
        }

        // See UI changes while remote playQueue changes
        if (!isPlayerAvailable()) {
            playerHolder.startService(false, this);
        } else {
            // FIXME Workaround #7427
            player.setRecovery();
        }

        toggleFullscreenIfInFullscreenMode();

        final PlayQueue queue = setupPlayQueueForIntent(append);
        if (append) { //resumePlayback: false
            NavigationHelper.enqueueOnPlayer(activity, queue, PlayerType.POPUP);
        } else {
            replaceQueueIfUserConfirms(() -> NavigationHelper
                    .playOnPopupPlayer(activity, queue, true));
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openVideoPlayer,void openVideoPlayer(boolean),"[1106, 1128]","{'A301': [(1125, 1125), (1127, 1128)], 'A302': [(1122, 1123)], 'A305': [(1106, 1121)], 'A290': [(1126, 1126)], 'A386': [(1124, 1124)]}","{'A301': 0.13043478260869565, 'A302': 0.08695652173913043, 'A305': 0.6956521739130435, 'A290': 0.043478260869565216, 'A386': 0.043478260869565216}",A305,,"    public void openVideoPlayer(final boolean directlyFullscreenIfApplicable) {
        if (directlyFullscreenIfApplicable
                && !DeviceUtils.isLandscape(requireContext())
                && PlayerHelper.globalScreenOrientationLocked(requireContext())) {
            // Make sure the bottom sheet turns out expanded. When this code kicks in the bottom
            // sheet could not have fully expanded yet, and thus be in the STATE_SETTLING state.
            // When the activity is rotated, and its state is saved and then restored, the bottom
            // sheet would forget what it was doing, since even if STATE_SETTLING is restored, it
            // doesn't tell which state it was settling to, and thus the bottom sheet settles to
            // STATE_COLLAPSED. This can be solved by manually setting the state that will be
            // restored (i.e. bottomSheetState) to STATE_EXPANDED.
            updateBottomSheetState(BottomSheetBehavior.STATE_EXPANDED);
            // toggle landscape in order to open directly in fullscreen
            onScreenRotationButtonClicked();
        }

        if (PreferenceManager.getDefaultSharedPreferences(activity)
                .getBoolean(this.getString(R.string.use_external_video_player_key), false)) {
            showExternalVideoPlaybackDialog();
        } else {
            replaceQueueIfUserConfirms(this::openMainPlayer);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openVideoPlayerAutoFullscreen,void openVideoPlayerAutoFullscreen(),"[1138, 1140]","{'A305': [(1138, 1140)]}",{'A305': 1.0},A305,,"    public void openVideoPlayerAutoFullscreen() {
        openVideoPlayer(PlayerHelper.isStartMainPlayerFullscreenEnabled(requireContext()));
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openNormalBackgroundPlayer,void openNormalBackgroundPlayer(boolean),"[1142, 1155]","{'A301': [(1155, 1155)], 'A290': [(1143, 1143), (1146, 1148), (1152, 1153)], 'A320': [(1144, 1145)], 'A390': [(1142, 1142), (1149, 1149), (1151, 1151), (1154, 1154)], 'A384': [(1150, 1150)]}","{'A301': 0.07142857142857142, 'A290': 0.42857142857142855, 'A320': 0.14285714285714285, 'A390': 0.2857142857142857, 'A384': 0.07142857142857142}",A290,,"    private void openNormalBackgroundPlayer(final boolean append) {
        // See UI changes while remote playQueue changes
        if (!isPlayerAvailable()) {
            playerHolder.startService(false, this);
        }

        final PlayQueue queue = setupPlayQueueForIntent(append);
        if (append) {
            NavigationHelper.enqueueOnPlayer(activity, queue, PlayerType.AUDIO);
        } else {
            replaceQueueIfUserConfirms(() -> NavigationHelper
                    .playOnBackgroundPlayer(activity, queue, true));
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openMainPlayer,void openMainPlayer(),"[1157, 1172]","{'A305': [(1167, 1167), (1169, 1170)], 'A290': [(1157, 1157), (1160, 1166), (1168, 1168), (1172, 1172)], 'A320': [(1158, 1159), (1171, 1171)]}","{'A305': 0.1875, 'A290': 0.625, 'A320': 0.1875}",A290,,"    private void openMainPlayer() {
        if (!isPlayerServiceAvailable()) {
            playerHolder.startService(autoPlayEnabled, this);
            return;
        }
        if (currentInfo == null) {
            return;
        }

        final PlayQueue queue = setupPlayQueueForIntent(false);
        tryAddVideoPlayerView();

        final Intent playerIntent = NavigationHelper.getPlayerIntent(requireContext(),
                PlayerService.class, queue, true, autoPlayEnabled);
        ContextCompat.startForegroundService(activity, playerIntent);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,hideMainPlayerOnLoadingNewStream,void hideMainPlayerOnLoadingNewStream(),"[1181, 1194]","{'A305': [(1181, 1181), (1188, 1189), (1191, 1193)], 'A295': [(1182, 1183), (1190, 1190)], 'A290': [(1184, 1187), (1194, 1194)]}","{'A305': 0.42857142857142855, 'A295': 0.21428571428571427, 'A290': 0.35714285714285715}",A305,,"    private void hideMainPlayerOnLoadingNewStream() {
        final var root = getRoot();
        if (!isPlayerServiceAvailable() || root.isEmpty() || !player.videoPlayerSelected()) {
            return;
        }

        removeVideoPlayerView();
        if (isAutoplayEnabled()) {
            playerService.stopForImmediateReusing();
            root.ifPresent(view -> view.setVisibility(View.GONE));
        } else {
            playerHolder.stopService();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setupPlayQueueForIntent,PlayQueue setupPlayQueueForIntent(boolean),"[1196, 1208]","{'A290': [(1196, 1202), (1204, 1208)], 'A299': [(1203, 1203)]}","{'A290': 0.9230769230769231, 'A299': 0.07692307692307693}",A290,,"    private PlayQueue setupPlayQueueForIntent(final boolean append) {
        if (append) {
            return new SinglePlayQueue(currentInfo);
        }

        PlayQueue queue = playQueue;
        // Size can be 0 because queue removes bad stream automatically when error occurs
        if (queue == null || queue.isEmpty()) {
            queue = new SinglePlayQueue(currentInfo);
        }

        return queue;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setAutoPlay,void setAutoPlay(boolean),"[1214, 1216]","{'A301': [(1216, 1216)], 'A305': [(1214, 1215)]}","{'A301': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    public void setAutoPlay(final boolean autoPlay) {
        this.autoPlayEnabled = autoPlay;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,startOnExternalPlayer,"void startOnExternalPlayer(Context,StreamInfo,Stream)","[1218, 1230]","{'A294': [(1227, 1227)], 'A310': [(1218, 1221), (1223, 1226), (1228, 1230)], 'A378': [(1222, 1222)]}","{'A294': 0.07692307692307693, 'A310': 0.8461538461538461, 'A378': 0.07692307692307693}",A310,,"    private void startOnExternalPlayer(@NonNull final Context context,
                                       @NonNull final StreamInfo info,
                                       @NonNull final Stream selectedStream) {
        NavigationHelper.playOnExternalPlayer(context, currentInfo.getName(),
                currentInfo.getSubChannelName(), selectedStream);

        final HistoryRecordManager recordManager = new HistoryRecordManager(requireContext());
        disposables.add(recordManager.onViewed(info).onErrorComplete()
                .subscribe(
                        ignored -> { /* successful */ },
                        error -> Log.e(TAG, ""Register view failure: "", error)
                ));
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,isExternalPlayerEnabled,boolean isExternalPlayerEnabled(),"[1232, 1235]","{'A290': [(1232, 1232), (1234, 1235)], 'A298': [(1233, 1233)]}","{'A290': 0.75, 'A298': 0.25}",A290,,"    private boolean isExternalPlayerEnabled() {
        return PreferenceManager.getDefaultSharedPreferences(requireContext())
                .getBoolean(getString(R.string.use_external_video_player_key), false);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,isAutoplayEnabled,boolean isAutoplayEnabled(),"[1239, 1245]","{'A290': [(1239, 1241), (1243, 1243), (1245, 1245)], 'A298': [(1244, 1244)], 'A320': [(1242, 1242)]}","{'A290': 0.7142857142857143, 'A298': 0.14285714285714285, 'A320': 0.14285714285714285}",A290,,"    private boolean isAutoplayEnabled() {
        return autoPlayEnabled
                && !isExternalPlayerEnabled()
                && (!isPlayerAvailable() || player.videoPlayerSelected())
                && bottomSheetState != BottomSheetBehavior.STATE_HIDDEN
                && PlayerHelper.isAutoplayAllowedByUser(requireContext());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,tryAddVideoPlayerView,void tryAddVideoPlayerView(),"[1247, 1274]","{'A305': [(1247, 1251), (1254, 1259), (1261, 1273)], 'A290': [(1252, 1253), (1260, 1260), (1274, 1274)]}","{'A305': 0.8571428571428571, 'A290': 0.14285714285714285}",A305,,"    private void tryAddVideoPlayerView() {
        if (isPlayerAvailable() && getView() != null) {
            // Setup the surface view height, so that it fits the video correctly; this is done also
            // here, and not only in the Handler, to avoid a choppy fullscreen rotation animation.
            setHeightThumbnail();
        }

        // do all the null checks in the posted lambda, too, since the player, the binding and the
        // view could be set or unset before the lambda gets executed on the next main thread cycle
        new Handler(Looper.getMainLooper()).post(() -> {
            if (!isPlayerAvailable() || getView() == null) {
                return;
            }

            // setup the surface view height, so that it fits the video correctly
            setHeightThumbnail();

            player.UIs().get(MainPlayerUi.class).ifPresent(playerUi -> {
                // sometimes binding would be null here, even though getView() != null above u.u
                if (binding != null) {
                    // prevent from re-adding a view multiple times
                    playerUi.removeViewFromParent();
                    binding.playerPlaceholder.addView(playerUi.getBinding().getRoot());
                    playerUi.setupVideoSurfaceIfNeeded();
                }
            });
        });
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,removeVideoPlayerView,void removeVideoPlayerView(),"[1276, 1282]","{'A305': [(1279, 1281)], 'A290': [(1276, 1278), (1282, 1282)]}","{'A305': 0.42857142857142855, 'A290': 0.5714285714285714}",A290,,"    private void removeVideoPlayerView() {
        makeDefaultHeightForVideoPlaceholder();

        if (player != null) {
            player.UIs().get(VideoPlayerUi.class).ifPresent(VideoPlayerUi::removeViewFromParent);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,makeDefaultHeightForVideoPlaceholder,void makeDefaultHeightForVideoPlaceholder(),"[1284, 1291]","{'A295': [(1289, 1290)], 'A290': [(1284, 1288), (1291, 1291)]}","{'A295': 0.25, 'A290': 0.75}",A290,,"    private void makeDefaultHeightForVideoPlaceholder() {
        if (getView() == null) {
            return;
        }

        binding.playerPlaceholder.getLayoutParams().height = FrameLayout.LayoutParams.MATCH_PARENT;
        binding.playerPlaceholder.requestLayout();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onPreDraw,boolean onPreDraw(),"[1295, 1307]","{'A305': [(1300, 1300)], 'A290': [(1295, 1299), (1303, 1307)], 'A299': [(1301, 1302)]}","{'A305': 0.07692307692307693, 'A290': 0.7692307692307693, 'A299': 0.15384615384615385}",A290,,"                @Override
                public boolean onPreDraw() {
                    final DisplayMetrics metrics = getResources().getDisplayMetrics();

                    if (getView() != null) {
                        final int height = (DeviceUtils.isInMultiWindow(activity)
                                ? requireView()
                                : activity.getWindow().getDecorView()).getHeight();
                        setHeightThumbnail(height, metrics);
                        getView().getViewTreeObserver().removeOnPreDrawListener(preDrawListener);
                    }
                    return false;
                }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setHeightThumbnail,void setHeightThumbnail(),"[1317, 1338]","{'A301': [(1317, 1318)], 'A305': [(1322, 1323)], 'A290': [(1319, 1321), (1326, 1332), (1336, 1338)], 'A299': [(1324, 1325), (1333, 1335)]}","{'A301': 0.09090909090909091, 'A305': 0.09090909090909091, 'A290': 0.5909090909090909, 'A299': 0.22727272727272727}",A290,,"    private void setHeightThumbnail() {
        final DisplayMetrics metrics = getResources().getDisplayMetrics();
        final boolean isPortrait = metrics.heightPixels > metrics.widthPixels;
        requireView().getViewTreeObserver().removeOnPreDrawListener(preDrawListener);

        if (isFullscreen()) {
            final int height = (DeviceUtils.isInMultiWindow(activity)
                    ? requireView()
                    : activity.getWindow().getDecorView()).getHeight();
            // Height is zero when the view is not yet displayed like after orientation change
            if (height != 0) {
                setHeightThumbnail(height, metrics);
            } else {
                requireView().getViewTreeObserver().addOnPreDrawListener(preDrawListener);
            }
        } else {
            final int height = (int) (isPortrait
                    ? metrics.widthPixels / (16.0f / 9.0f)
                    : metrics.heightPixels / 2.0f);
            setHeightThumbnail(height, metrics);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setHeightThumbnail,"void setHeightThumbnail(int,DisplayMetrics)","[1340, 1351]","{'A301': [(1351, 1351)], 'A305': [(1347, 1349)], 'A295': [(1341, 1341), (1344, 1344)], 'A290': [(1340, 1340), (1342, 1343), (1346, 1346), (1350, 1350)], 'A320': [(1345, 1345)]}","{'A301': 0.08333333333333333, 'A305': 0.25, 'A295': 0.16666666666666666, 'A290': 0.4166666666666667, 'A320': 0.08333333333333333}",A290,,"    private void setHeightThumbnail(final int newHeight, final DisplayMetrics metrics) {
        binding.detailThumbnailImageView.setLayoutParams(
                new FrameLayout.LayoutParams(
                        RelativeLayout.LayoutParams.MATCH_PARENT, newHeight));
        binding.detailThumbnailImageView.setMinimumHeight(newHeight);
        if (isPlayerAvailable()) {
            final int maxHeight = (int) (metrics.heightPixels * MAX_PLAYER_HEIGHT);
            player.UIs().get(VideoPlayerUi.class).ifPresent(ui ->
                    ui.getBinding().surfaceView.setHeights(newHeight,
                            ui.isFullscreen() ? newHeight : maxHeight));
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,showContent,void showContent(),"[1353, 1355]","{'A301': [(1355, 1355)], 'A295': [(1354, 1354)], 'A289': [(1353, 1353)]}","{'A301': 0.3333333333333333, 'A295': 0.3333333333333333, 'A289': 0.3333333333333333}",A301,,"    private void showContent() {
        binding.detailContentRootHiding.setVisibility(View.VISIBLE);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setInitialData,"void setInitialData(int,String,String,PlayQueue)","[1357, 1365]","{'A301': [(1365, 1365)], 'A305': [(1357, 1364)]}","{'A301': 0.1111111111111111, 'A305': 0.8888888888888888}",A305,,"    protected void setInitialData(final int newServiceId,
                                  @Nullable final String newUrl,
                                  @NonNull final String newTitle,
                                  @Nullable final PlayQueue newPlayQueue) {
        this.serviceId = newServiceId;
        this.url = newUrl;
        this.title = newTitle;
        this.playQueue = newPlayQueue;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setErrorImage,void setErrorImage(int),"[1367, 1376]","{'A301': [(1367, 1367), (1371, 1371), (1376, 1376)], 'A305': [(1373, 1373)], 'A295': [(1368, 1368), (1372, 1372), (1374, 1375)], 'A294': [(1369, 1370)]}","{'A301': 0.3, 'A305': 0.1, 'A295': 0.4, 'A294': 0.2}",A295,,"    private void setErrorImage(final int imageResource) {
        if (binding == null || activity == null) {
            return;
        }

        binding.detailThumbnailImageView.setImageDrawable(
                AppCompatResources.getDrawable(requireContext(), imageResource));
        animate(binding.detailThumbnailImageView, false, 0, AnimationType.ALPHA,
                0, () -> animate(binding.detailThumbnailImageView, true, 500));
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,handleError,void handleError(),"[1378, 1390]","{'A301': [(1378, 1378), (1390, 1390)], 'A305': [(1379, 1382), (1385, 1389)], 'A397': [(1383, 1384)]}","{'A301': 0.15384615384615385, 'A305': 0.6923076923076923, 'A397': 0.15384615384615385}",A305,,"    @Override
    public void handleError() {
        super.handleError();
        setErrorImage(R.drawable.not_available_monkey);

        if (binding.relatedItemsLayout != null) { // hide related streams for tablets
            binding.relatedItemsLayout.setVisibility(View.INVISIBLE);
        }

        // hide comments / related streams / description tabs
        binding.viewPager.setVisibility(View.GONE);
        binding.tabLayout.setVisibility(View.GONE);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,hideAgeRestrictedContent,void hideAgeRestrictedContent(),"[1392, 1395]","{'A301': [(1395, 1395)], 'A305': [(1392, 1394)]}","{'A301': 0.25, 'A305': 0.75}",A305,,"    private void hideAgeRestrictedContent() {
        showTextError(getString(R.string.restricted_video,
                getString(R.string.show_age_restricted_content_title)));
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setupBroadcastReceiver,void setupBroadcastReceiver(),"[1397, 1427]","{'A290': [(1397, 1400), (1419, 1421), (1423, 1427)], 'A294': [(1422, 1422)], 'A298': [(1414, 1414)], 'A320': [(1415, 1416)], 'A299': [(1401, 1413), (1417, 1418)]}","{'A290': 0.3870967741935484, 'A294': 0.03225806451612903, 'A298': 0.03225806451612903, 'A320': 0.06451612903225806, 'A299': 0.4838709677419355}",A299,,"    private void setupBroadcastReceiver() {
        broadcastReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(final Context context, final Intent intent) {
                switch (intent.getAction()) {
                    case ACTION_SHOW_MAIN_PLAYER:
                        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
                        break;
                    case ACTION_HIDE_MAIN_PLAYER:
                        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
                        break;
                    case ACTION_PLAYER_STARTED:
                        // If the state is not hidden we don't need to show the mini player
                        if (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN) {
                            bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
                        }
                        // Rebound to the service if it was closed via notification or mini player
                        if (!playerHolder.isBound()) {
                            playerHolder.startService(
                                    false, VideoDetailFragment.this);
                        }
                        break;
                }
            }
        };
        final IntentFilter intentFilter = new IntentFilter();
        intentFilter.addAction(ACTION_SHOW_MAIN_PLAYER);
        intentFilter.addAction(ACTION_HIDE_MAIN_PLAYER);
        intentFilter.addAction(ACTION_PLAYER_STARTED);
        activity.registerReceiver(broadcastReceiver, intentFilter);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onReceive,"void onReceive(Context,Intent)","[1399, 1420]","{'A290': [(1399, 1400), (1419, 1420)], 'A298': [(1414, 1414)], 'A320': [(1415, 1416)], 'A299': [(1401, 1413), (1417, 1418)]}","{'A290': 0.18181818181818182, 'A298': 0.045454545454545456, 'A320': 0.09090909090909091, 'A299': 0.6818181818181818}",A299,,"            @Override
            public void onReceive(final Context context, final Intent intent) {
                switch (intent.getAction()) {
                    case ACTION_SHOW_MAIN_PLAYER:
                        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_EXPANDED);
                        break;
                    case ACTION_HIDE_MAIN_PLAYER:
                        bottomSheetBehavior.setState(BottomSheetBehavior.STATE_HIDDEN);
                        break;
                    case ACTION_PLAYER_STARTED:
                        // If the state is not hidden we don't need to show the mini player
                        if (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_HIDDEN) {
                            bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
                        }
                        // Rebound to the service if it was closed via notification or mini player
                        if (!playerHolder.isBound()) {
                            playerHolder.startService(
                                    false, VideoDetailFragment.this);
                        }
                        break;
                }
            }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,restoreDefaultOrientation,void restoreDefaultOrientation(),"[1434, 1446]","{'A305': [(1435, 1436), (1443, 1443)], 'A290': [(1434, 1434), (1437, 1442), (1444, 1446)]}","{'A305': 0.23076923076923078, 'A290': 0.7692307692307693}",A290,,"    private void restoreDefaultOrientation() {
        if (isPlayerAvailable() && player.videoPlayerSelected()) {
            toggleFullscreenIfInFullscreenMode();
        }

        // This will show systemUI and pause the player.
        // User can tap on Play button and video will be in fullscreen mode again
        // Note for tablet: trying to avoid orientation changes since it's not easy
        // to physically rotate the tablet every time
        if (activity != null && !DeviceUtils.isTablet(activity)) {
            activity.setRequestedOrientation(ActivityInfo.SCREEN_ORIENTATION_UNSPECIFIED);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,showLoading,void showLoading(),"[1452, 1487]","{'A301': [(1452, 1453), (1455, 1456), (1466, 1466), (1470, 1470), (1474, 1474), (1487, 1487)], 'A305': [(1458, 1458), (1471, 1471), (1473, 1473), (1478, 1478), (1484, 1484)], 'A343': [(1464, 1465)], 'A295': [(1459, 1459), (1462, 1463), (1467, 1469), (1472, 1472), (1485, 1486)], 'A290': [(1479, 1479)], 'A289': [(1481, 1483)], 'A397': [(1475, 1477), (1480, 1480)], 'A291': [(1454, 1454), (1457, 1457), (1460, 1461)]}","{'A301': 0.2222222222222222, 'A305': 0.1388888888888889, 'A343': 0.05555555555555555, 'A295': 0.25, 'A290': 0.027777777777777776, 'A289': 0.08333333333333333, 'A397': 0.1111111111111111, 'A291': 0.1111111111111111}",A295,,"    @Override
    public void showLoading() {

        super.showLoading();

        //if data is already cached, transition from VISIBLE -> INVISIBLE -> VISIBLE is not required
        if (!ExtractorHelper.isCached(serviceId, url, InfoCache.Type.STREAM)) {
            binding.detailContentRootHiding.setVisibility(View.INVISIBLE);
        }

        animate(binding.detailThumbnailPlayButton, false, 50);
        animate(binding.detailDurationView, false, 100);
        binding.detailPositionView.setVisibility(View.GONE);
        binding.positionView.setVisibility(View.GONE);

        binding.detailVideoTitleView.setText(title);
        binding.detailVideoTitleView.setMaxLines(1);
        animate(binding.detailVideoTitleView, true, 0);

        binding.detailToggleSecondaryControlsView.setVisibility(View.GONE);
        binding.detailTitleRootLayout.setClickable(false);
        binding.detailSecondaryControlPanel.setVisibility(View.GONE);

        if (binding.relatedItemsLayout != null) {
            if (showRelatedItems) {
                binding.relatedItemsLayout.setVisibility(
                        isFullscreen() ? View.GONE : View.INVISIBLE);
            } else {
                binding.relatedItemsLayout.setVisibility(View.GONE);
            }
        }

        PicassoHelper.cancelTag(PICASSO_VIDEO_DETAILS_TAG);
        binding.detailThumbnailImageView.setImageBitmap(null);
        binding.detailSubChannelThumbnailView.setImageBitmap(null);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,handleResult,void handleResult(StreamInfo),"[1489, 1611]","{'A301': [(1489, 1489), (1491, 1492), (1500, 1500), (1510, 1510), (1513, 1513), (1516, 1516), (1519, 1519), (1524, 1524), (1530, 1530), (1532, 1532), (1542, 1542), (1553, 1553), (1555, 1555), (1560, 1560), (1565, 1565), (1567, 1568), (1573, 1573), (1579, 1579)], 'A302': [(1558, 1558), (1563, 1563)], 'A305': [(1496, 1497), (1506, 1506), (1570, 1572), (1575, 1578), (1581, 1581), (1601, 1601), (1605, 1607), (1610, 1610)], 'A343': [(1574, 1574)], 'A295': [(1498, 1499), (1511, 1512), (1514, 1514), (1517, 1517), (1520, 1520), (1522, 1522), (1526, 1529), (1531, 1531), (1534, 1534), (1536, 1537), (1539, 1540), (1544, 1547), (1549, 1550), (1552, 1552), (1556, 1557), (1559, 1559), (1561, 1562), (1564, 1564), (1566, 1566), (1569, 1569), (1608, 1609)], 'A290': [(1493, 1495), (1582, 1582)], 'A294': [(1490, 1490), (1515, 1515), (1518, 1518), (1535, 1535)], 'A333': [(1600, 1600)], 'A298': [(1503, 1503), (1585, 1597)], 'A324': [(1505, 1505), (1507, 1507), (1509, 1509), (1521, 1521), (1523, 1523), (1525, 1525), (1533, 1533), (1538, 1538), (1541, 1541), (1543, 1543), (1548, 1548), (1551, 1551), (1554, 1554), (1583, 1584), (1598, 1599), (1611, 1611)], 'A320': [(1580, 1580), (1602, 1604)], 'A378': [(1504, 1504), (1508, 1508)], 'A411': [(1501, 1502)]}","{'A301': 0.16260162601626016, 'A302': 0.016260162601626018, 'A305': 0.13008130081300814, 'A343': 0.008130081300813009, 'A295': 0.2845528455284553, 'A290': 0.032520325203252036, 'A294': 0.032520325203252036, 'A333': 0.008130081300813009, 'A298': 0.11382113821138211, 'A324': 0.14634146341463414, 'A320': 0.032520325203252036, 'A378': 0.016260162601626018, 'A411': 0.016260162601626018}",A295,,"    @Override
    public void handleResult(@NonNull final StreamInfo info) {
        super.handleResult(info);

        currentInfo = info;
        setInitialData(info.getServiceId(), info.getOriginalUrl(), info.getName(), playQueue);

        updateTabs(info);

        animate(binding.detailThumbnailPlayButton, true, 200);
        binding.detailVideoTitleView.setText(title);

        binding.detailSubChannelThumbnailView.setVisibility(View.GONE);

        if (!isEmpty(info.getSubChannelName())) {
            displayBothUploaderAndSubChannel(info);
        } else {
            displayUploaderAsSubChannel(info);
        }

        if (info.getViewCount() >= 0) {
            if (info.getStreamType().equals(StreamType.AUDIO_LIVE_STREAM)) {
                binding.detailViewCountView.setText(Localization.listeningCount(activity,
                        info.getViewCount()));
            } else if (info.getStreamType().equals(StreamType.LIVE_STREAM)) {
                binding.detailViewCountView.setText(Localization
                        .localizeWatchingCount(activity, info.getViewCount()));
            } else {
                binding.detailViewCountView.setText(Localization
                        .localizeViewCount(activity, info.getViewCount()));
            }
            binding.detailViewCountView.setVisibility(View.VISIBLE);
        } else {
            binding.detailViewCountView.setVisibility(View.GONE);
        }

        if (info.getDislikeCount() == -1 && info.getLikeCount() == -1) {
            binding.detailThumbsDownImgView.setVisibility(View.VISIBLE);
            binding.detailThumbsUpImgView.setVisibility(View.VISIBLE);
            binding.detailThumbsUpCountView.setVisibility(View.GONE);
            binding.detailThumbsDownCountView.setVisibility(View.GONE);

            binding.detailThumbsDisabledView.setVisibility(View.VISIBLE);
        } else {
            if (info.getDislikeCount() >= 0) {
                binding.detailThumbsDownCountView.setText(Localization
                        .shortCount(activity, info.getDislikeCount()));
                binding.detailThumbsDownCountView.setVisibility(View.VISIBLE);
                binding.detailThumbsDownImgView.setVisibility(View.VISIBLE);
            } else {
                binding.detailThumbsDownCountView.setVisibility(View.GONE);
                binding.detailThumbsDownImgView.setVisibility(View.GONE);
            }

            if (info.getLikeCount() >= 0) {
                binding.detailThumbsUpCountView.setText(Localization.shortCount(activity,
                        info.getLikeCount()));
                binding.detailThumbsUpCountView.setVisibility(View.VISIBLE);
                binding.detailThumbsUpImgView.setVisibility(View.VISIBLE);
            } else {
                binding.detailThumbsUpCountView.setVisibility(View.GONE);
                binding.detailThumbsUpImgView.setVisibility(View.GONE);
            }
            binding.detailThumbsDisabledView.setVisibility(View.GONE);
        }

        if (info.getDuration() > 0) {
            binding.detailDurationView.setText(Localization.getDurationString(info.getDuration()));
            binding.detailDurationView.setBackgroundColor(
                    ContextCompat.getColor(activity, R.color.duration_background_color));
            animate(binding.detailDurationView, true, 100);
        } else if (info.getStreamType() == StreamType.LIVE_STREAM) {
            binding.detailDurationView.setText(R.string.duration_live);
            binding.detailDurationView.setBackgroundColor(
                    ContextCompat.getColor(activity, R.color.live_duration_background_color));
            animate(binding.detailDurationView, true, 100);
        } else {
            binding.detailDurationView.setVisibility(View.GONE);
        }

        binding.detailTitleRootLayout.setClickable(true);
        binding.detailToggleSecondaryControlsView.setRotation(0);
        binding.detailToggleSecondaryControlsView.setVisibility(View.VISIBLE);
        binding.detailSecondaryControlPanel.setVisibility(View.GONE);

        checkUpdateProgressInfo(info);
        PicassoHelper.loadDetailsThumbnail(info.getThumbnails()).tag(PICASSO_VIDEO_DETAILS_TAG)
                .into(binding.detailThumbnailImageView);
        showMetaInfoInTextView(info.getMetaInfo(), binding.detailMetaInfoTextView,
                binding.detailMetaInfoSeparator, disposables);

        if (!isPlayerAvailable() || player.isStopped()) {
            updateOverlayData(info.getName(), info.getUploaderName(), info.getThumbnails());
        }

        if (!info.getErrors().isEmpty()) {
            // Bandcamp fan pages are not yet supported and thus a ContentNotAvailableException is
            // thrown. This is not an error and thus should not be shown to the user.
            for (final Throwable throwable : info.getErrors()) {
                if (throwable instanceof ContentNotSupportedException
                        && ""Fan pages are not supported"".equals(throwable.getMessage())) {
                    info.getErrors().remove(throwable);
                }
            }

            if (!info.getErrors().isEmpty()) {
                showSnackBarError(new ErrorInfo(info.getErrors(),
                        UserAction.REQUESTED_STREAM, info.getUrl(), info));
            }
        }

        binding.detailControlsDownload.setVisibility(
                StreamTypeUtil.isLiveStream(info.getStreamType()) ? View.GONE : View.VISIBLE);
        binding.detailControlsBackground.setVisibility(
                info.getAudioStreams().isEmpty() && info.getVideoStreams().isEmpty()
                        ? View.GONE : View.VISIBLE);

        final boolean noVideoStreams =
                info.getVideoStreams().isEmpty() && info.getVideoOnlyStreams().isEmpty();
        binding.detailControlsPopup.setVisibility(noVideoStreams ? View.GONE : View.VISIBLE);
        binding.detailThumbnailPlayButton.setImageResource(
                noVideoStreams ? R.drawable.ic_headset_shadow : R.drawable.ic_play_arrow_shadow);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,displayUploaderAsSubChannel,void displayUploaderAsSubChannel(StreamInfo),"[1613, 1630]","{'A305': [(1620, 1620), (1625, 1629)], 'A295': [(1614, 1616)], 'A386': [(1617, 1619), (1621, 1624)], 'A378': [(1613, 1613), (1630, 1630)]}","{'A305': 0.3333333333333333, 'A295': 0.16666666666666666, 'A386': 0.3888888888888889, 'A378': 0.1111111111111111}",A386,,"    private void displayUploaderAsSubChannel(final StreamInfo info) {
        binding.detailSubChannelTextView.setText(info.getUploaderName());
        binding.detailSubChannelTextView.setVisibility(View.VISIBLE);
        binding.detailSubChannelTextView.setSelected(true);

        if (info.getUploaderSubscriberCount() > -1) {
            binding.detailUploaderTextView.setText(
                    Localization.shortSubscriberCount(activity, info.getUploaderSubscriberCount()));
            binding.detailUploaderTextView.setVisibility(View.VISIBLE);
        } else {
            binding.detailUploaderTextView.setVisibility(View.GONE);
        }

        PicassoHelper.loadAvatar(info.getUploaderAvatars()).tag(PICASSO_VIDEO_DETAILS_TAG)
                .into(binding.detailSubChannelThumbnailView);
        binding.detailSubChannelThumbnailView.setVisibility(View.VISIBLE);
        binding.detailUploaderThumbnailView.setVisibility(View.GONE);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,displayBothUploaderAndSubChannel,void displayBothUploaderAndSubChannel(StreamInfo),"[1632, 1664]","{'A305': [(1647, 1647), (1652, 1653), (1655, 1655), (1657, 1663)], 'A295': [(1633, 1635)], 'A298': [(1638, 1638)], 'A386': [(1637, 1637), (1639, 1639), (1641, 1646), (1648, 1651)], 'A378': [(1632, 1632), (1636, 1636), (1640, 1640), (1654, 1654), (1656, 1656), (1664, 1664)]}","{'A305': 0.3333333333333333, 'A295': 0.09090909090909091, 'A298': 0.030303030303030304, 'A386': 0.36363636363636365, 'A378': 0.18181818181818182}",A386,,"    private void displayBothUploaderAndSubChannel(final StreamInfo info) {
        binding.detailSubChannelTextView.setText(info.getSubChannelName());
        binding.detailSubChannelTextView.setVisibility(View.VISIBLE);
        binding.detailSubChannelTextView.setSelected(true);

        final StringBuilder subText = new StringBuilder();
        if (!isEmpty(info.getUploaderName())) {
            subText.append(
                    String.format(getString(R.string.video_detail_by), info.getUploaderName()));
        }
        if (info.getUploaderSubscriberCount() > -1) {
            if (subText.length() > 0) {
                subText.append(Localization.DOT_SEPARATOR);
            }
            subText.append(
                    Localization.shortSubscriberCount(activity, info.getUploaderSubscriberCount()));
        }

        if (subText.length() > 0) {
            binding.detailUploaderTextView.setText(subText);
            binding.detailUploaderTextView.setVisibility(View.VISIBLE);
            binding.detailUploaderTextView.setSelected(true);
        } else {
            binding.detailUploaderTextView.setVisibility(View.GONE);
        }

        PicassoHelper.loadAvatar(info.getSubChannelAvatars()).tag(PICASSO_VIDEO_DETAILS_TAG)
                .into(binding.detailSubChannelThumbnailView);
        binding.detailSubChannelThumbnailView.setVisibility(View.VISIBLE);
        PicassoHelper.loadAvatar(info.getUploaderAvatars()).tag(PICASSO_VIDEO_DETAILS_TAG)
                .into(binding.detailUploaderThumbnailView);
        binding.detailUploaderThumbnailView.setVisibility(View.VISIBLE);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,openDownloadDialog,void openDownloadDialog(),"[1666, 1678]","{'A305': [(1667, 1670), (1672, 1672), (1675, 1676)], 'A290': [(1671, 1671), (1673, 1673), (1677, 1677)], 'A294': [(1674, 1674)], 'A303': [(1666, 1666), (1678, 1678)]}","{'A305': 0.5384615384615384, 'A290': 0.23076923076923078, 'A294': 0.07692307692307693, 'A303': 0.15384615384615385}",A305,,"    public void openDownloadDialog() {
        if (currentInfo == null) {
            return;
        }

        try {
            final DownloadDialog downloadDialog = new DownloadDialog(activity, currentInfo);
            downloadDialog.show(activity.getSupportFragmentManager(), ""downloadDialog"");
        } catch (final Exception e) {
            ErrorUtil.showSnackbar(activity, new ErrorInfo(e, UserAction.DOWNLOAD_OPEN_DIALOG,
                    ""Showing download dialog"", currentInfo));
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,checkUpdateProgressInfo,void checkUpdateProgressInfo(StreamInfo),"[1684, 1707]","{'A343': [(1684, 1684), (1688, 1690), (1699, 1700), (1702, 1702)], 'A295': [(1704, 1705)], 'A290': [(1691, 1692)], 'A340': [(1685, 1687), (1693, 1698), (1701, 1701), (1703, 1703), (1706, 1706)], 'A311': [(1707, 1707)]}","{'A343': 0.2916666666666667, 'A295': 0.08333333333333333, 'A290': 0.08333333333333333, 'A340': 0.5, 'A311': 0.041666666666666664}",A340,,"    private void checkUpdateProgressInfo(@NonNull final StreamInfo info) {
        if (positionSubscriber != null) {
            positionSubscriber.dispose();
        }
        if (!getResumePlaybackEnabled(activity)) {
            binding.positionView.setVisibility(View.GONE);
            binding.detailPositionView.setVisibility(View.GONE);
            return;
        }
        final HistoryRecordManager recordManager = new HistoryRecordManager(requireContext());
        positionSubscriber = recordManager.loadStreamState(info)
                .subscribeOn(Schedulers.io())
                .onErrorComplete()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(state -> {
                    updatePlaybackProgress(
                            state.getProgressMillis(), info.getDuration() * 1000);
                }, e -> {
                    // impossible since the onErrorComplete()
                }, () -> {
                    binding.positionView.setVisibility(View.GONE);
                    binding.detailPositionView.setVisibility(View.GONE);
                });
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updatePlaybackProgress,"void updatePlaybackProgress(long,long)","[1709, 1733]","{'A343': [(1709, 1712), (1715, 1718), (1720, 1720)], 'A295': [(1719, 1719), (1721, 1721), (1723, 1723), (1726, 1727), (1729, 1731)], 'A290': [(1713, 1714), (1722, 1722), (1724, 1725), (1728, 1728), (1732, 1733)]}","{'A343': 0.36, 'A295': 0.32, 'A290': 0.32}",A343,,"    private void updatePlaybackProgress(final long progress, final long duration) {
        if (!getResumePlaybackEnabled(activity)) {
            return;
        }
        final int progressSeconds = (int) TimeUnit.MILLISECONDS.toSeconds(progress);
        final int durationSeconds = (int) TimeUnit.MILLISECONDS.toSeconds(duration);
        // If the old and the new progress values have a big difference then use animation.
        // Otherwise don't because it affects CPU
        final int progressDifference = Math.abs(binding.positionView.getProgress()
                - progressSeconds);
        binding.positionView.setMax(durationSeconds);
        if (progressDifference > 2) {
            binding.positionView.setProgressAnimated(progressSeconds);
        } else {
            binding.positionView.setProgress(progressSeconds);
        }
        final String position = Localization.getDurationString(progressSeconds);
        if (position != binding.detailPositionView.getText()) {
            binding.detailPositionView.setText(position);
        }
        if (binding.positionView.getVisibility() != View.VISIBLE) {
            animate(binding.positionView, true, 100);
            animate(binding.detailPositionView, true, 100);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onViewCreated,void onViewCreated(),"[1739, 1742]","{'A305': [(1739, 1742)]}",{'A305': 1.0},A305,,"    @Override
    public void onViewCreated() {
        tryAddVideoPlayerView();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onQueueUpdate,void onQueueUpdate(PlayQueue),"[1744, 1783]","{'A305': [(1747, 1752), (1765, 1765), (1767, 1772), (1775, 1781)], 'A290': [(1744, 1746), (1761, 1764), (1773, 1774), (1782, 1783)], 'A298': [(1753, 1760)], 'A350': [(1766, 1766)]}","{'A305': 0.5, 'A290': 0.275, 'A298': 0.2, 'A350': 0.025}",A305,,"    @Override
    public void onQueueUpdate(final PlayQueue queue) {
        playQueue = queue;
        if (DEBUG) {
            Log.d(TAG, ""onQueueUpdate() called with: serviceId = [""
                    + serviceId + ""], url = ["" + url + ""], name = [""
                    + title + ""], playQueue = ["" + playQueue + ""]"");
        }

        // Register broadcast receiver to listen to playQueue changes
        // and hide the overlayPlayQueueButton when the playQueue is empty / destroyed.
        if (playQueue != null && playQueue.getBroadcastReceiver() != null) {
            playQueue.getBroadcastReceiver().subscribe(
                    event -> updateOverlayPlayQueueButtonVisibility()
            );
        }

        // This should be the only place where we push data to stack.
        // It will allow to have live instance of PlayQueue with actual information about
        // deleted/added items inside Channel/Playlist queue and makes possible to have
        // a history of played items
        @Nullable final StackItem stackPeek = stack.peek();
        if (stackPeek != null && !stackPeek.getPlayQueue().equalStreams(queue)) {
            @Nullable final PlayQueueItem playQueueItem = queue.getItem();
            if (playQueueItem != null) {
                stack.push(new StackItem(playQueueItem.getServiceId(), playQueueItem.getUrl(),
                        playQueueItem.getTitle(), queue));
                return;
            } // else continue below
        }

        @Nullable final StackItem stackWithQueue = findQueueInStack(queue);
        if (stackWithQueue != null) {
            // On every MainPlayer service's destroy() playQueue gets disposed and
            // no longer able to track progress. That's why we update our cached disposed
            // queue with the new one that is active and have the same history.
            // Without that the cached playQueue will have an old recovery position
            stackWithQueue.setPlayQueue(queue);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onPlaybackUpdate,"void onPlaybackUpdate(int,int,boolean,PlaybackParameters)","[1785, 1803]","{'A305': [(1793, 1793)], 'A295': [(1794, 1794), (1798, 1799)], 'A290': [(1785, 1792), (1795, 1797), (1800, 1803)]}","{'A305': 0.05263157894736842, 'A295': 0.15789473684210525, 'A290': 0.7894736842105263}",A290,,"    @Override
    public void onPlaybackUpdate(final int state,
                                 final int repeatMode,
                                 final boolean shuffled,
                                 final PlaybackParameters parameters) {
        setOverlayPlayPauseImage(player != null && player.isPlaying());

        switch (state) {
            case Player.STATE_PLAYING:
                if (binding.positionView.getAlpha() != 1.0f
                        && player.getPlayQueue() != null
                        && player.getPlayQueue().getItem() != null
                        && player.getPlayQueue().getItem().getUrl().equals(url)) {
                    animate(binding.positionView, true, 100);
                    animate(binding.detailPositionView, true, 100);
                }
                break;
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onProgressUpdate,"void onProgressUpdate(int,int,int)","[1805, 1817]","{'A305': [(1810, 1810)], 'A343': [(1815, 1815)], 'A290': [(1805, 1809), (1811, 1814), (1816, 1817)]}","{'A305': 0.07692307692307693, 'A343': 0.07692307692307693, 'A290': 0.8461538461538461}",A290,,"    @Override
    public void onProgressUpdate(final int currentProgress,
                                 final int duration,
                                 final int bufferPercent) {
        // Progress updates every second even if media is paused. It's useless until playing
        if (!player.isPlaying() || playQueue == null) {
            return;
        }

        if (player.getPlayQueue().getItem().getUrl().equals(url)) {
            updatePlaybackProgress(currentProgress, duration);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onMetadataUpdate,"void onMetadataUpdate(StreamInfo,PlayQueue)","[1819, 1848]","{'A305': [(1836, 1836), (1843, 1843)], 'A290': [(1819, 1831), (1833, 1835), (1837, 1842), (1844, 1848)], 'A350': [(1832, 1832)]}","{'A305': 0.06666666666666667, 'A290': 0.9, 'A350': 0.03333333333333333}",A290,,"    @Override
    public void onMetadataUpdate(final StreamInfo info, final PlayQueue queue) {
        final StackItem item = findQueueInStack(queue);
        if (item != null) {
            // When PlayQueue can have multiple streams (PlaylistPlayQueue or ChannelPlayQueue)
            // every new played stream gives new title and url.
            // StackItem contains information about first played stream. Let's update it here
            item.setTitle(info.getName());
            item.setUrl(info.getUrl());
        }
        // They are not equal when user watches something in popup while browsing in fragment and
        // then changes screen orientation. In that case the fragment will set itself as
        // a service listener and will receive initial call to onMetadataUpdate()
        if (!queue.equalStreams(playQueue)) {
            return;
        }

        updateOverlayData(info.getName(), info.getUploaderName(), info.getThumbnails());
        if (currentInfo != null && info.getUrl().equals(currentInfo.getUrl())) {
            return;
        }

        currentInfo = info;
        setInitialData(info.getServiceId(), info.getUrl(), info.getName(), queue);
        setAutoPlay(false);
        // Delay execution just because it freezes the main thread, and while playing
        // next/previous video you see visual glitches
        // (when non-vertical video goes after vertical video)
        prepareAndHandleInfoIfNeededAfterDelay(info, true, 200);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onPlayerError,"void onPlayerError(PlaybackException,boolean)","[1850, 1857]","{'A305': [(1855, 1855)], 'A290': [(1850, 1850), (1853, 1853), (1856, 1857)], 'A383': [(1851, 1852)], 'A320': [(1854, 1854)]}","{'A305': 0.125, 'A290': 0.5, 'A383': 0.25, 'A320': 0.125}",A290,,"    @Override
    public void onPlayerError(final PlaybackException error, final boolean isCatchableException) {
        if (!isCatchableException) {
            // Properly exit from fullscreen
            toggleFullscreenIfInFullscreenMode();
            hideMainPlayerOnLoadingNewStream();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onServiceStopped,void onServiceStopped(),"[1859, 1871]","{'A305': [(1861, 1869)], 'A290': [(1859, 1860), (1870, 1871)]}","{'A305': 0.6923076923076923, 'A290': 0.3076923076923077}",A305,,"    @Override
    public void onServiceStopped() {
        // the binding could be null at this point, if the app is finishing
        if (binding != null) {
            setOverlayPlayPauseImage(false);
            if (currentInfo != null) {
                updateOverlayData(currentInfo.getName(),
                        currentInfo.getUploaderName(),
                        currentInfo.getThumbnails());
            }
            updateOverlayPlayQueueButtonVisibility();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onFullscreenStateChanged,void onFullscreenStateChanged(boolean),"[1873, 1895]","{'A305': [(1877, 1878), (1894, 1894)], 'A290': [(1873, 1875), (1879, 1883), (1885, 1888), (1891, 1893), (1895, 1895)], 'A397': [(1889, 1890)], 'A320': [(1876, 1876)], 'A412': [(1884, 1884)]}","{'A305': 0.13043478260869565, 'A290': 0.6956521739130435, 'A397': 0.08695652173913043, 'A320': 0.043478260869565216, 'A412': 0.043478260869565216}",A290,,"    @Override
    public void onFullscreenStateChanged(final boolean fullscreen) {
        setupBrightness();
        if (!isPlayerAndPlayerServiceAvailable()
                || player.UIs().get(MainPlayerUi.class).isEmpty()
                || getRoot().map(View::getParent).isEmpty()) {
            return;
        }

        if (fullscreen) {
            hideSystemUiIfNeeded();
            binding.overlayPlayPauseButton.requestFocus();
        } else {
            showSystemUi();
        }

        if (binding.relatedItemsLayout != null) {
            binding.relatedItemsLayout.setVisibility(fullscreen ? View.GONE : View.VISIBLE);
        }
        scrollToTop();

        tryAddVideoPlayerView();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onScreenRotationButtonClicked,void onScreenRotationButtonClicked(),"[1897, 1915]","{'A305': [(1903, 1903), (1905, 1906), (1910, 1910)], 'A290': [(1897, 1902), (1904, 1904), (1907, 1909), (1911, 1915)]}","{'A305': 0.21052631578947367, 'A290': 0.7894736842105263}",A290,,"    @Override
    public void onScreenRotationButtonClicked() {
        // In tablet user experience will be better if screen will not be rotated
        // from landscape to portrait every time.
        // Just turn on fullscreen mode in landscape orientation
        // or portrait & unlocked global orientation
        final boolean isLandscape = DeviceUtils.isLandscape(requireContext());
        if (DeviceUtils.isTablet(activity)
                && (!globalScreenOrientationLocked(activity) || isLandscape)) {
            player.UIs().get(MainPlayerUi.class).ifPresent(MainPlayerUi::toggleFullscreen);
            return;
        }

        final int newOrientation = isLandscape
                ? ActivityInfo.SCREEN_ORIENTATION_PORTRAIT
                : ActivityInfo.SCREEN_ORIENTATION_SENSOR_LANDSCAPE;

        activity.setRequestedOrientation(newOrientation);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onMoreOptionsLongClicked,void onMoreOptionsLongClicked(),"[1920, 1935]","{'A295': [(1923, 1923), (1926, 1926), (1930, 1930)], 'A290': [(1920, 1922), (1924, 1925), (1927, 1929), (1931, 1935)]}","{'A295': 0.1875, 'A290': 0.8125}",A290,,"    @Override
    public void onMoreOptionsLongClicked() {
        final CoordinatorLayout.LayoutParams params =
                (CoordinatorLayout.LayoutParams) binding.appBarLayout.getLayoutParams();
        final AppBarLayout.Behavior behavior = (AppBarLayout.Behavior) params.getBehavior();
        final ValueAnimator valueAnimator = ValueAnimator
                .ofInt(0, -binding.playerPlaceholder.getHeight());
        valueAnimator.setInterpolator(new DecelerateInterpolator());
        valueAnimator.addUpdateListener(animation -> {
            behavior.setTopAndBottomOffset((int) animation.getAnimatedValue());
            binding.appBarLayout.requestLayout();
        });
        valueAnimator.setInterpolator(new DecelerateInterpolator());
        valueAnimator.setDuration(500);
        valueAnimator.start();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,showSystemUi,void showSystemUi(),"[1941, 1959]","{'A305': [(1957, 1958)], 'A290': [(1941, 1952), (1954, 1956), (1959, 1959)], 'A300': [(1953, 1953)]}","{'A305': 0.10526315789473684, 'A290': 0.8421052631578947, 'A300': 0.05263157894736842}",A290,,"    private void showSystemUi() {
        if (DEBUG) {
            Log.d(TAG, ""showSystemUi() called"");
        }

        if (activity == null) {
            return;
        }

        // Prevent jumping of the player on devices with cutout
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            activity.getWindow().getAttributes().layoutInDisplayCutoutMode =
                    WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_DEFAULT;
        }
        activity.getWindow().getDecorView().setSystemUiVisibility(0);
        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
        activity.getWindow().setStatusBarColor(ThemeHelper.resolveColorFromAttr(
                requireContext(), android.R.attr.colorPrimary));
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,hideSystemUi,void hideSystemUi(),"[1961, 1994]","{'A305': [(1980, 1980), (1983, 1984), (1989, 1989)], 'A290': [(1961, 1972), (1974, 1979), (1981, 1982), (1985, 1988), (1990, 1994)], 'A300': [(1973, 1973)]}","{'A305': 0.11764705882352941, 'A290': 0.8529411764705882, 'A300': 0.029411764705882353}",A290,,"    private void hideSystemUi() {
        if (DEBUG) {
            Log.d(TAG, ""hideSystemUi() called"");
        }

        if (activity == null) {
            return;
        }

        // Prevent jumping of the player on devices with cutout
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
            activity.getWindow().getAttributes().layoutInDisplayCutoutMode =
                    WindowManager.LayoutParams.LAYOUT_IN_DISPLAY_CUTOUT_MODE_SHORT_EDGES;
        }
        int visibility = View.SYSTEM_UI_FLAG_LAYOUT_STABLE
                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN
                | View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_HIDE_NAVIGATION
                | View.SYSTEM_UI_FLAG_IMMERSIVE_STICKY;

        // In multiWindow mode status bar is not transparent for devices with cutout
        // if I include this flag. So without it is better in this case
        final boolean isInMultiWindow = DeviceUtils.isInMultiWindow(activity);
        if (!isInMultiWindow) {
            visibility |= View.SYSTEM_UI_FLAG_FULLSCREEN;
        }
        activity.getWindow().getDecorView().setSystemUiVisibility(visibility);

        if (isInMultiWindow || isFullscreen()) {
            activity.getWindow().setStatusBarColor(Color.TRANSPARENT);
            activity.getWindow().setNavigationBarColor(Color.TRANSPARENT);
        }
        activity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,hideSystemUiIfNeeded,void hideSystemUiIfNeeded(),"[1997, 2003]","{'A305': [(1999, 1999)], 'A290': [(1998, 1998), (2000, 2003)], 'A300': [(1997, 1997)]}","{'A305': 0.14285714285714285, 'A290': 0.7142857142857143, 'A300': 0.14285714285714285}",A290,,"    @Override
    public void hideSystemUiIfNeeded() {
        if (isFullscreen()
                && bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_EXPANDED) {
            hideSystemUi();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,isFullscreen,boolean isFullscreen(),"[2005, 2008]","{'A305': [(2005, 2008)]}",{'A305': 1.0},A305,,"    private boolean isFullscreen() {
        return isPlayerAvailable() && player.UIs().get(VideoPlayerUi.class)
                .map(VideoPlayerUi::isFullscreen).orElse(false);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,playerIsNotStopped,boolean playerIsNotStopped(),"[2010, 2012]","{'A290': [(2010, 2010), (2012, 2012)], 'A320': [(2011, 2011)]}","{'A290': 0.6666666666666666, 'A320': 0.3333333333333333}",A290,,"    private boolean playerIsNotStopped() {
        return isPlayerAvailable() && !player.isStopped();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,restoreDefaultBrightness,void restoreDefaultBrightness(),"[2014, 2024]","{'A290': [(2014, 2024)]}",{'A290': 1.0},A290,,"    private void restoreDefaultBrightness() {
        final WindowManager.LayoutParams lp = activity.getWindow().getAttributes();
        if (lp.screenBrightness == -1) {
            return;
        }

        // Restore the old  brightness when fragment.onPause() called or
        // when a player is in portrait
        lp.screenBrightness = -1;
        activity.getWindow().setAttributes(lp);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setupBrightness,void setupBrightness(),"[2026, 2051]","{'A305': [(2032, 2032)], 'A290': [(2026, 2031), (2033, 2035), (2043, 2051)], 'A413': [(2036, 2036), (2041, 2042)], 'A414': [(2037, 2040)]}","{'A305': 0.038461538461538464, 'A290': 0.6923076923076923, 'A413': 0.11538461538461539, 'A414': 0.15384615384615385}",A290,,"    private void setupBrightness() {
        if (activity == null) {
            return;
        }

        final WindowManager.LayoutParams lp = activity.getWindow().getAttributes();
        if (!isFullscreen() || bottomSheetState != BottomSheetBehavior.STATE_EXPANDED) {
            // Apply system brightness when the player is not in fullscreen
            restoreDefaultBrightness();
        } else {
            // Do not restore if user has disabled brightness gesture
            if (!PlayerHelper.getActionForRightGestureSide(activity)
                    .equals(getString(R.string.brightness_control_key))
                    && !PlayerHelper.getActionForLeftGestureSide(activity)
                    .equals(getString(R.string.brightness_control_key))) {
                return;
            }
            // Restore already saved brightness level
            final float brightnessLevel = PlayerHelper.getScreenBrightness(activity);
            if (brightnessLevel == lp.screenBrightness) {
                return;
            }
            lp.screenBrightness = brightnessLevel;
            activity.getWindow().setAttributes(lp);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,accommodateForTvAndDesktopMode,void accommodateForTvAndDesktopMode(),"[2057, 2075]","{'A410': [(2057, 2075)]}",{'A410': 1.0},A410,,"    private void accommodateForTvAndDesktopMode() {
        if (DeviceUtils.isTv(getContext())) {
            // remove ripple effects from detail controls
            final int transparent = ContextCompat.getColor(requireContext(),
                    R.color.transparent_background_color);
            binding.detailControlsPlaylistAppend.setBackgroundColor(transparent);
            binding.detailControlsBackground.setBackgroundColor(transparent);
            binding.detailControlsPopup.setBackgroundColor(transparent);
            binding.detailControlsDownload.setBackgroundColor(transparent);
            binding.detailControlsShare.setBackgroundColor(transparent);
            binding.detailControlsOpenInBrowser.setBackgroundColor(transparent);
            binding.detailControlsPlayWithKodi.setBackgroundColor(transparent);
        }
        if (DeviceUtils.isDesktopMode(getContext())) {
            // Remove the ""hover"" overlay (since it is visible on all mouse events and interferes
            // with the video content being played)
            binding.detailThumbnailRootLayout.setForeground(null);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,checkLandscape,void checkLandscape(),"[2077, 2088]","{'A305': [(2080, 2080), (2083, 2083), (2086, 2086)], 'A290': [(2077, 2079), (2081, 2082), (2084, 2085), (2087, 2088)]}","{'A305': 0.25, 'A290': 0.75}",A290,,"    private void checkLandscape() {
        if ((!player.isPlaying() && player.getPlayQueue() != playQueue)
                || player.getPlayQueue() == null) {
            setAutoPlay(true);
        }

        player.UIs().get(MainPlayerUi.class).ifPresent(MainPlayerUi::checkLandscape);
        // Let's give a user time to look at video information page if video is not playing
        if (globalScreenOrientationLocked(activity) && !player.isPlaying()) {
            player.play();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,wasCleared,boolean wasCleared(),"[2094, 2096]","{'A290': [(2094, 2096)]}",{'A290': 1.0},A290,,"    private boolean wasCleared() {
        return url == null;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,findQueueInStack,StackItem findQueueInStack(PlayQueue),"[2098, 2110]","{'A305': [(2098, 2098)], 'A290': [(2099, 2103), (2105, 2110)], 'A350': [(2104, 2104)]}","{'A305': 0.07692307692307693, 'A290': 0.8461538461538461, 'A350': 0.07692307692307693}",A290,,"    @Nullable
    private StackItem findQueueInStack(final PlayQueue queue) {
        StackItem item = null;
        final Iterator<StackItem> iterator = stack.descendingIterator();
        while (iterator.hasNext()) {
            final StackItem next = iterator.next();
            if (next.getPlayQueue().equalStreams(queue)) {
                item = next;
                break;
            }
        }
        return item;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,replaceQueueIfUserConfirms,void replaceQueueIfUserConfirms(Runnable),"[2112, 2124]","{'A290': [(2112, 2112), (2114, 2118), (2120, 2124)], 'A320': [(2113, 2113)], 'A350': [(2119, 2119)]}","{'A290': 0.8461538461538461, 'A320': 0.07692307692307693, 'A350': 0.07692307692307693}",A290,,"    private void replaceQueueIfUserConfirms(final Runnable onAllow) {
        @Nullable final PlayQueue activeQueue = isPlayerAvailable() ? player.getPlayQueue() : null;

        // Player will have STATE_IDLE when a user pressed back button
        if (isClearingQueueConfirmationRequired(activity)
                && playerIsNotStopped()
                && activeQueue != null
                && !activeQueue.equalStreams(playQueue)) {
            showClearingQueueConfirmation(onAllow);
        } else {
            onAllow.run();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,showClearingQueueConfirmation,void showClearingQueueConfirmation(Runnable),"[2126, 2135]","{'A305': [(2129, 2130)], 'A290': [(2126, 2128), (2131, 2132), (2135, 2135)], 'A299': [(2133, 2134)]}","{'A305': 0.2, 'A290': 0.6, 'A299': 0.2}",A290,,"    private void showClearingQueueConfirmation(final Runnable onAllow) {
        new AlertDialog.Builder(activity)
                .setTitle(R.string.clear_queue_confirmation_description)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.ok, (dialog, which) -> {
                    onAllow.run();
                    dialog.dismiss();
                })
                .show();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,showExternalVideoPlaybackDialog,void showExternalVideoPlaybackDialog(),"[2137, 2182]","{'A305': [(2146, 2146), (2148, 2153), (2155, 2155), (2159, 2159)], 'A295': [(2163, 2164)], 'A290': [(2139, 2140), (2154, 2154), (2180, 2182)], 'A333': [(2138, 2138), (2141, 2145), (2147, 2147), (2156, 2158), (2160, 2162), (2165, 2179)], 'A386': [(2137, 2137)]}","{'A305': 0.1956521739130435, 'A295': 0.043478260869565216, 'A290': 0.13043478260869565, 'A333': 0.6086956521739131, 'A386': 0.021739130434782608}",A333,,"    private void showExternalVideoPlaybackDialog() {
        if (currentInfo == null) {
            return;
        }

        final AlertDialog.Builder builder = new AlertDialog.Builder(activity);
        builder.setTitle(R.string.select_quality_external_players);
        builder.setNeutralButton(R.string.open_in_browser, (dialog, i) ->
                ShareUtils.openUrlInBrowser(requireActivity(), url));

        final List<VideoStream> videoStreamsForExternalPlayers =
                ListHelper.getSortedStreamVideosList(
                        activity,
                        getUrlAndNonTorrentStreams(currentInfo.getVideoStreams()),
                        getUrlAndNonTorrentStreams(currentInfo.getVideoOnlyStreams()),
                        false,
                        false
                );

        if (videoStreamsForExternalPlayers.isEmpty()) {
            builder.setMessage(R.string.no_video_streams_available_for_external_players);
            builder.setPositiveButton(R.string.ok, null);

        } else {
            final int selectedVideoStreamIndexForExternalPlayers =
                    ListHelper.getDefaultResolutionIndex(activity, videoStreamsForExternalPlayers);
            final CharSequence[] resolutions = videoStreamsForExternalPlayers.stream()
                    .map(VideoStream::getResolution).toArray(CharSequence[]::new);

            builder.setSingleChoiceItems(resolutions, selectedVideoStreamIndexForExternalPlayers,
                    null);
            builder.setNegativeButton(R.string.cancel, null);
            builder.setPositiveButton(R.string.ok, (dialog, i) -> {
                final int index = ((AlertDialog) dialog).getListView().getCheckedItemPosition();
                // We don't have to manage the index validity because if there is no stream
                // available for external players, this code will be not executed and if there is
                // no stream which matches the default resolution, 0 is returned by
                // ListHelper.getDefaultResolutionIndex.
                // The index cannot be outside the bounds of the list as its always between 0 and
                // the list size - 1, .
                startOnExternalPlayer(activity, currentInfo,
                        videoStreamsForExternalPlayers.get(index));
            });
        }
        builder.show();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,showExternalAudioPlaybackDialog,void showExternalAudioPlaybackDialog(),"[2184, 2219]","{'A386': [(2184, 2205), (2218, 2219)], 'A299': [(2206, 2217)]}","{'A386': 0.6666666666666666, 'A299': 0.3333333333333333}",A386,,"    private void showExternalAudioPlaybackDialog() {
        if (currentInfo == null) {
            return;
        }

        final List<AudioStream> audioStreams = getUrlAndNonTorrentStreams(
                currentInfo.getAudioStreams());
        final List<AudioStream> audioTracks =
                ListHelper.getFilteredAudioStreams(activity, audioStreams);

        if (audioTracks.isEmpty()) {
            Toast.makeText(activity, R.string.no_audio_streams_available_for_external_players,
                    Toast.LENGTH_SHORT).show();
        } else if (audioTracks.size() == 1) {
            startOnExternalPlayer(activity, currentInfo, audioTracks.get(0));
        } else {
            final int selectedAudioStream =
                    ListHelper.getDefaultAudioFormat(activity, audioTracks);
            final CharSequence[] trackNames = audioTracks.stream()
                    .map(audioStream -> Localization.audioTrackName(activity, audioStream))
                    .toArray(CharSequence[]::new);

            new AlertDialog.Builder(activity)
                    .setTitle(R.string.select_audio_track_external_players)
                    .setNeutralButton(R.string.open_in_browser, (dialog, i) ->
                            ShareUtils.openUrlInBrowser(requireActivity(), url))
                    .setSingleChoiceItems(trackNames, selectedAudioStream, null)
                    .setNegativeButton(R.string.cancel, null)
                    .setPositiveButton(R.string.ok, (dialog, i) -> {
                        final int index = ((AlertDialog) dialog).getListView()
                                .getCheckedItemPosition();
                        startOnExternalPlayer(activity, currentInfo, audioTracks.get(index));
                    })
                    .show();
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,cleanUp,void cleanUp(),"[2224, 2234]","{'A305': [(2233, 2233)], 'A290': [(2224, 2229), (2231, 2232), (2234, 2234)], 'A320': [(2230, 2230)]}","{'A305': 0.09090909090909091, 'A290': 0.8181818181818182, 'A320': 0.09090909090909091}",A290,,"    private void cleanUp() {
        // New beginning
        stack.clear();
        if (currentWorker != null) {
            currentWorker.dispose();
        }
        playerHolder.stopService();
        setInitialData(0, null, """", null);
        currentInfo = null;
        updateOverlayData(null, null, List.of());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,moveFocusToMainFragment,void moveFocusToMainFragment(boolean),"[2246, 2272]","{'A290': [(2246, 2256), (2263, 2266), (2271, 2272)], 'A300': [(2257, 2262), (2267, 2270)]}","{'A290': 0.6296296296296297, 'A300': 0.37037037037037035}",A290,,"    private void moveFocusToMainFragment(final boolean toMain) {
        setupBrightness();
        final ViewGroup mainFragment = requireActivity().findViewById(R.id.fragment_holder);
        // Hamburger button steels a focus even under bottomSheet
        final Toolbar toolbar = requireActivity().findViewById(R.id.toolbar);
        final int afterDescendants = ViewGroup.FOCUS_AFTER_DESCENDANTS;
        final int blockDescendants = ViewGroup.FOCUS_BLOCK_DESCENDANTS;
        if (toMain) {
            mainFragment.setDescendantFocusability(afterDescendants);
            toolbar.setDescendantFocusability(afterDescendants);
            ((ViewGroup) requireView()).setDescendantFocusability(blockDescendants);
            // Only focus the mainFragment if the mainFragment (e.g. search-results)
            // or the toolbar (e.g. Textfield for search) don't have focus.
            // This was done to fix problems with the keyboard input, see also #7490
            if (!mainFragment.hasFocus() && !toolbar.hasFocus()) {
                mainFragment.requestFocus();
            }
        } else {
            mainFragment.setDescendantFocusability(blockDescendants);
            toolbar.setDescendantFocusability(blockDescendants);
            ((ViewGroup) requireView()).setDescendantFocusability(afterDescendants);
            // Only focus the player if it not already has focus
            if (!binding.getRoot().hasFocus()) {
                binding.detailThumbnailRootLayout.requestFocus();
            }
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,manageSpaceAtTheBottom,void manageSpaceAtTheBottom(boolean),"[2280, 2296]","{'A290': [(2280, 2296)]}",{'A290': 1.0},A290,,"    private void manageSpaceAtTheBottom(final boolean showMore) {
        final int peekHeight = getResources().getDimensionPixelSize(R.dimen.mini_player_height);
        final ViewGroup holder = requireActivity().findViewById(R.id.fragment_holder);
        final int newBottomPadding;
        if (showMore) {
            newBottomPadding = 0;
        } else {
            newBottomPadding = peekHeight;
        }
        if (holder.getPaddingBottom() == newBottomPadding) {
            return;
        }
        holder.setPadding(holder.getPaddingLeft(),
                holder.getPaddingTop(),
                holder.getPaddingRight(),
                newBottomPadding);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setupBottomPlayer,void setupBottomPlayer(),"[2298, 2399]","{'A305': [(2305, 2307), (2323, 2323), (2343, 2343), (2346, 2349), (2362, 2363), (2369, 2369), (2372, 2373), (2377, 2377)], 'A295': [(2300, 2300), (2313, 2313), (2315, 2315), (2320, 2320), (2351, 2351), (2365, 2365), (2374, 2376), (2380, 2381), (2387, 2387), (2389, 2391)], 'A290': [(2298, 2299), (2301, 2304), (2308, 2312), (2314, 2314), (2316, 2319), (2321, 2322), (2324, 2342), (2345, 2345), (2350, 2350), (2352, 2360), (2364, 2364), (2366, 2368), (2370, 2371), (2378, 2379), (2382, 2386), (2388, 2388), (2392, 2399)], 'A320': [(2344, 2344), (2361, 2361)]}","{'A305': 0.14705882352941177, 'A295': 0.14705882352941177, 'A290': 0.6862745098039216, 'A320': 0.0196078431372549}",A290,,"    private void setupBottomPlayer() {
        final CoordinatorLayout.LayoutParams params =
                (CoordinatorLayout.LayoutParams) binding.appBarLayout.getLayoutParams();
        final AppBarLayout.Behavior behavior = (AppBarLayout.Behavior) params.getBehavior();

        final FrameLayout bottomSheetLayout = activity.findViewById(R.id.fragment_player_holder);
        bottomSheetBehavior = BottomSheetBehavior.from(bottomSheetLayout);
        bottomSheetBehavior.setState(lastStableBottomSheetState);
        updateBottomSheetState(lastStableBottomSheetState);

        final int peekHeight = getResources().getDimensionPixelSize(R.dimen.mini_player_height);
        if (bottomSheetState != BottomSheetBehavior.STATE_HIDDEN) {
            manageSpaceAtTheBottom(false);
            bottomSheetBehavior.setPeekHeight(peekHeight);
            if (bottomSheetState == BottomSheetBehavior.STATE_COLLAPSED) {
                binding.overlayLayout.setAlpha(MAX_OVERLAY_ALPHA);
            } else if (bottomSheetState == BottomSheetBehavior.STATE_EXPANDED) {
                binding.overlayLayout.setAlpha(0);
                setOverlayElementsClickable(false);
            }
        }

        bottomSheetCallback = new BottomSheetBehavior.BottomSheetCallback() {
            @Override
            public void onStateChanged(@NonNull final View bottomSheet, final int newState) {
                updateBottomSheetState(newState);

                switch (newState) {
                    case BottomSheetBehavior.STATE_HIDDEN:
                        moveFocusToMainFragment(true);
                        manageSpaceAtTheBottom(true);

                        bottomSheetBehavior.setPeekHeight(0);
                        cleanUp();
                        break;
                    case BottomSheetBehavior.STATE_EXPANDED:
                        moveFocusToMainFragment(false);
                        manageSpaceAtTheBottom(false);

                        bottomSheetBehavior.setPeekHeight(peekHeight);
                        // Disable click because overlay buttons located on top of buttons
                        // from the player
                        setOverlayElementsClickable(false);
                        hideSystemUiIfNeeded();
                        // Conditions when the player should be expanded to fullscreen
                        if (DeviceUtils.isLandscape(requireContext())
                                && isPlayerAvailable()
                                && player.isPlaying()
                                && !isFullscreen()
                                && !DeviceUtils.isTablet(activity)) {
                            player.UIs().get(MainPlayerUi.class)
                                    .ifPresent(MainPlayerUi::toggleFullscreen);
                        }
                        setOverlayLook(binding.appBarLayout, behavior, 1);
                        break;
                    case BottomSheetBehavior.STATE_COLLAPSED:
                        moveFocusToMainFragment(true);
                        manageSpaceAtTheBottom(false);

                        bottomSheetBehavior.setPeekHeight(peekHeight);

                        // Re-enable clicks
                        setOverlayElementsClickable(true);
                        if (isPlayerAvailable()) {
                            player.UIs().get(MainPlayerUi.class)
                                    .ifPresent(MainPlayerUi::closeItemsList);
                        }
                        setOverlayLook(binding.appBarLayout, behavior, 0);
                        break;
                    case BottomSheetBehavior.STATE_DRAGGING:
                    case BottomSheetBehavior.STATE_SETTLING:
                        if (isFullscreen()) {
                            showSystemUi();
                        }
                        if (isPlayerAvailable()) {
                            player.UIs().get(MainPlayerUi.class).ifPresent(ui -> {
                                if (ui.isControlsVisible()) {
                                    ui.hideControls(0, 0);
                                }
                            });
                        }
                        break;
                    case BottomSheetBehavior.STATE_HALF_EXPANDED:
                        break;
                }
            }

            @Override
            public void onSlide(@NonNull final View bottomSheet, final float slideOffset) {
                setOverlayLook(binding.appBarLayout, behavior, slideOffset);
            }
        };

        bottomSheetBehavior.addBottomSheetCallback(bottomSheetCallback);

        // User opened a new page and the player will hide itself
        activity.getSupportFragmentManager().addOnBackStackChangedListener(() -> {
            if (bottomSheetBehavior.getState() == BottomSheetBehavior.STATE_EXPANDED) {
                bottomSheetBehavior.setState(BottomSheetBehavior.STATE_COLLAPSED);
            }
        });
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onStateChanged,"void onStateChanged(View,int)","[2321, 2383]","{'A305': [(2323, 2323), (2343, 2343), (2346, 2349), (2362, 2363), (2369, 2369), (2372, 2373), (2377, 2377)], 'A295': [(2351, 2351), (2365, 2365), (2374, 2376), (2380, 2381)], 'A290': [(2321, 2322), (2324, 2342), (2345, 2345), (2350, 2350), (2352, 2360), (2364, 2364), (2366, 2368), (2370, 2371), (2378, 2379), (2382, 2383)], 'A320': [(2344, 2344), (2361, 2361)]}","{'A305': 0.19047619047619047, 'A295': 0.1111111111111111, 'A290': 0.6666666666666666, 'A320': 0.031746031746031744}",A290,,"            @Override
            public void onStateChanged(@NonNull final View bottomSheet, final int newState) {
                updateBottomSheetState(newState);

                switch (newState) {
                    case BottomSheetBehavior.STATE_HIDDEN:
                        moveFocusToMainFragment(true);
                        manageSpaceAtTheBottom(true);

                        bottomSheetBehavior.setPeekHeight(0);
                        cleanUp();
                        break;
                    case BottomSheetBehavior.STATE_EXPANDED:
                        moveFocusToMainFragment(false);
                        manageSpaceAtTheBottom(false);

                        bottomSheetBehavior.setPeekHeight(peekHeight);
                        // Disable click because overlay buttons located on top of buttons
                        // from the player
                        setOverlayElementsClickable(false);
                        hideSystemUiIfNeeded();
                        // Conditions when the player should be expanded to fullscreen
                        if (DeviceUtils.isLandscape(requireContext())
                                && isPlayerAvailable()
                                && player.isPlaying()
                                && !isFullscreen()
                                && !DeviceUtils.isTablet(activity)) {
                            player.UIs().get(MainPlayerUi.class)
                                    .ifPresent(MainPlayerUi::toggleFullscreen);
                        }
                        setOverlayLook(binding.appBarLayout, behavior, 1);
                        break;
                    case BottomSheetBehavior.STATE_COLLAPSED:
                        moveFocusToMainFragment(true);
                        manageSpaceAtTheBottom(false);

                        bottomSheetBehavior.setPeekHeight(peekHeight);

                        // Re-enable clicks
                        setOverlayElementsClickable(true);
                        if (isPlayerAvailable()) {
                            player.UIs().get(MainPlayerUi.class)
                                    .ifPresent(MainPlayerUi::closeItemsList);
                        }
                        setOverlayLook(binding.appBarLayout, behavior, 0);
                        break;
                    case BottomSheetBehavior.STATE_DRAGGING:
                    case BottomSheetBehavior.STATE_SETTLING:
                        if (isFullscreen()) {
                            showSystemUi();
                        }
                        if (isPlayerAvailable()) {
                            player.UIs().get(MainPlayerUi.class).ifPresent(ui -> {
                                if (ui.isControlsVisible()) {
                                    ui.hideControls(0, 0);
                                }
                            });
                        }
                        break;
                    case BottomSheetBehavior.STATE_HALF_EXPANDED:
                        break;
                }
            }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,onSlide,"void onSlide(View,float)","[2385, 2388]","{'A295': [(2387, 2387)], 'A290': [(2385, 2386), (2388, 2388)]}","{'A295': 0.25, 'A290': 0.75}",A290,,"            @Override
            public void onSlide(@NonNull final View bottomSheet, final float slideOffset) {
                setOverlayLook(binding.appBarLayout, behavior, slideOffset);
            }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updateOverlayPlayQueueButtonVisibility,void updateOverlayPlayQueueButtonVisibility(),"[2401, 2411]","{'A298': [(2401, 2411)]}",{'A298': 1.0},A298,,"    private void updateOverlayPlayQueueButtonVisibility() {
        final boolean isPlayQueueEmpty =
                player == null // no player => no play queue :)
                        || player.getPlayQueue() == null
                        || player.getPlayQueue().isEmpty();
        if (binding != null) {
            // binding is null when rotating the device...
            binding.overlayPlayQueueButton.setVisibility(
                    isPlayQueueEmpty ? View.GONE : View.VISIBLE);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updateOverlayData,"void updateOverlayData(String,String,List<Image>)","[2413, 2421]","{'A305': [(2413, 2413), (2415, 2415), (2418, 2420)], 'A295': [(2417, 2417)], 'A290': [(2414, 2414), (2421, 2421)], 'A298': [(2416, 2416)]}","{'A305': 0.5555555555555556, 'A295': 0.1111111111111111, 'A290': 0.2222222222222222, 'A298': 0.1111111111111111}",A305,,"    private void updateOverlayData(@Nullable final String overlayTitle,
                                   @Nullable final String uploader,
                                   @NonNull final List<Image> thumbnails) {
        binding.overlayTitleTextView.setText(isEmpty(overlayTitle) ? """" : overlayTitle);
        binding.overlayChannelTextView.setText(isEmpty(uploader) ? """" : uploader);
        binding.overlayThumbnail.setImageDrawable(null);
        PicassoHelper.loadDetailsThumbnail(thumbnails).tag(PICASSO_VIDEO_DETAILS_TAG)
                .into(binding.overlayThumbnail);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setOverlayPlayPauseImage,void setOverlayPlayPauseImage(boolean),"[2423, 2428]","{'A290': [(2423, 2423), (2428, 2428)], 'A312': [(2424, 2427)]}","{'A290': 0.3333333333333333, 'A312': 0.6666666666666666}",A312,,"    private void setOverlayPlayPauseImage(final boolean playerIsPlaying) {
        final int drawable = playerIsPlaying
                ? R.drawable.ic_pause
                : R.drawable.ic_play_arrow;
        binding.overlayPlayPauseButton.setImageResource(drawable);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setOverlayLook,"void setOverlayLook(AppBarLayout,AppBarLayout.Behavior,float)","[2430, 2443]","{'A295': [(2438, 2438), (2441, 2441)], 'A290': [(2430, 2437), (2439, 2440), (2442, 2443)]}","{'A295': 0.14285714285714285, 'A290': 0.8571428571428571}",A290,,"    private void setOverlayLook(final AppBarLayout appBar,
                                final AppBarLayout.Behavior behavior,
                                final float slideOffset) {
        // SlideOffset < 0 when mini player is about to close via swipe.
        // Stop animation in this case
        if (behavior == null || slideOffset < 0) {
            return;
        }
        binding.overlayLayout.setAlpha(Math.min(MAX_OVERLAY_ALPHA, 1 - slideOffset));
        // These numbers are not special. They just do a cool transition
        behavior.setTopAndBottomOffset(
                (int) (-binding.detailThumbnailImageView.getHeight() * 2 * (1 - slideOffset) / 3));
        appBar.requestLayout();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,setOverlayElementsClickable,void setOverlayElementsClickable(boolean),"[2445, 2454]","{'A295': [(2446, 2450), (2452, 2453)], 'A290': [(2445, 2445), (2454, 2454)], 'A415': [(2451, 2451)]}","{'A295': 0.7, 'A290': 0.2, 'A415': 0.1}",A295,,"    private void setOverlayElementsClickable(final boolean enable) {
        binding.overlayThumbnail.setClickable(enable);
        binding.overlayThumbnail.setLongClickable(enable);
        binding.overlayMetadataLayout.setClickable(enable);
        binding.overlayMetadataLayout.setLongClickable(enable);
        binding.overlayButtonsLayout.setClickable(enable);
        binding.overlayPlayQueueButton.setClickable(enable);
        binding.overlayPlayPauseButton.setClickable(enable);
        binding.overlayCloseButton.setClickable(enable);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,isPlayerAvailable,boolean isPlayerAvailable(),"[2457, 2459]","{'A295': [(2458, 2458)], 'A320': [(2457, 2457), (2459, 2459)]}","{'A295': 0.3333333333333333, 'A320': 0.6666666666666666}",A320,,"    boolean isPlayerAvailable() {
        return player != null;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,isPlayerServiceAvailable,boolean isPlayerServiceAvailable(),"[2461, 2463]","{'A295': [(2462, 2462)], 'A320': [(2461, 2461), (2463, 2463)]}","{'A295': 0.3333333333333333, 'A320': 0.6666666666666666}",A320,,"    boolean isPlayerServiceAvailable() {
        return playerService != null;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,isPlayerAndPlayerServiceAvailable,boolean isPlayerAndPlayerServiceAvailable(),"[2465, 2467]","{'A295': [(2466, 2466)], 'A320': [(2465, 2465), (2467, 2467)]}","{'A295': 0.3333333333333333, 'A320': 0.6666666666666666}",A320,,"    boolean isPlayerAndPlayerServiceAvailable() {
        return player != null && playerService != null;
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,getRoot,Optional<View> getRoot(),"[2469, 2473]","{'A305': [(2469, 2469), (2472, 2473)], 'A295': [(2470, 2471)]}","{'A305': 0.6, 'A295': 0.4}",A305,,"    public Optional<View> getRoot() {
        return Optional.ofNullable(player)
                .flatMap(player1 -> player1.UIs().get(VideoPlayerUi.class))
                .map(playerUi -> playerUi.getBinding().getRoot());
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java,VideoDetailFragment,updateBottomSheetState,void updateBottomSheetState(int),"[2475, 2481]","{'A305': [(2475, 2480)], 'A320': [(2481, 2481)]}","{'A305': 0.8571428571428571, 'A320': 0.14285714285714285}",A305,,"    private void updateBottomSheetState(final int newState) {
        bottomSheetState = newState;
        if (newState != BottomSheetBehavior.STATE_DRAGGING
                && newState != BottomSheetBehavior.STATE_SETTLING) {
            lastStableBottomSheetState = newState;
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,getItem,Fragment getItem(int),"[27, 31]","{'A289': [(28, 28), (30, 31)], 'A294': [(29, 29)], 'A305': [(27, 27)]}","{'A289': 0.6, 'A294': 0.2, 'A305': 0.2}",A289,,"    @NonNull
    @Override
    public Fragment getItem(final int position) {
        return mFragmentList.get(position);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,getCount,int getCount(),"[33, 36]","{'A289': [(33, 36)]}",{'A289': 1.0},A289,,"    @Override
    public int getCount() {
        return mFragmentList.size();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,addFragment,"void addFragment(Fragment,String)","[38, 41]","{'A289': [(39, 41)], 'A294': [(38, 38)]}","{'A289': 0.75, 'A294': 0.25}",A289,,"    public void addFragment(final Fragment fragment, final String title) {
        mFragmentList.add(fragment);
        mFragmentTitleList.add(title);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,clearAllItems,void clearAllItems(),"[43, 46]","{'A289': [(43, 46)]}",{'A289': 1.0},A289,,"    public void clearAllItems() {
        mFragmentList.clear();
        mFragmentTitleList.clear();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,removeItem,void removeItem(int),"[48, 51]","{'A289': [(49, 51)], 'A294': [(48, 48)]}","{'A289': 0.75, 'A294': 0.25}",A289,,"    public void removeItem(final int position) {
        mFragmentList.remove(position == 0 ? 0 : position - 1);
        mFragmentTitleList.remove(position == 0 ? 0 : position - 1);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,updateItem,"void updateItem(int,Fragment)","[53, 55]","{'A289': [(54, 55)], 'A294': [(53, 53)]}","{'A289': 0.6666666666666666, 'A294': 0.3333333333333333}",A289,,"    public void updateItem(final int position, final Fragment fragment) {
        mFragmentList.set(position, fragment);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,updateItem,"void updateItem(String,Fragment)","[57, 62]","{'A289': [(60, 62)], 'A294': [(57, 59)]}","{'A289': 0.5, 'A294': 0.5}",A289,,"    public void updateItem(final String title, final Fragment fragment) {
        final int index = mFragmentTitleList.indexOf(title);
        if (index != -1) {
            updateItem(index, fragment);
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,getItemPosition,int getItemPosition(Object),"[64, 71]","{'A289': [(64, 64), (71, 71)], 'A294': [(66, 70)], 'A305': [(65, 65)]}","{'A289': 0.25, 'A294': 0.625, 'A305': 0.125}",A294,,"    @Override
    public int getItemPosition(@NonNull final Object object) {
        if (mFragmentList.contains(object)) {
            return mFragmentList.indexOf(object);
        } else {
            return POSITION_NONE;
        }
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,getItemPositionByTitle,int getItemPositionByTitle(String),"[73, 75]","{'A294': [(73, 73)], 'A291': [(74, 75)]}","{'A294': 0.3333333333333333, 'A291': 0.6666666666666666}",A291,,"    public int getItemPositionByTitle(final String title) {
        return mFragmentTitleList.indexOf(title);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,getItemTitle,String getItemTitle(int),"[77, 83]","{'A294': [(78, 78)], 'A291': [(77, 77), (79, 83)]}","{'A294': 0.14285714285714285, 'A291': 0.8571428571428571}",A291,,"    @Nullable
    public String getItemTitle(final int position) {
        if (position < 0 || position >= mFragmentTitleList.size()) {
            return null;
        }
        return mFragmentTitleList.get(position);
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,notifyDataSetUpdate,void notifyDataSetUpdate(),"[85, 87]","{'A289': [(86, 87)], 'A294': [(85, 85)]}","{'A289': 0.6666666666666666, 'A294': 0.3333333333333333}",A289,,"    public void notifyDataSetUpdate() {
        notifyDataSetChanged();
    }
"
org.schabi.newpipe.fragments.detail,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/detail/TabAdapter.java,TabAdapter,destroyItem,"void destroyItem(ViewGroup,int,Object)","[89, 94]","{'A289': [(89, 89), (93, 94)], 'A305': [(90, 92)]}","{'A289': 0.5, 'A305': 0.5}",A289,,"    @Override
    public void destroyItem(@NonNull final ViewGroup container,
                            final int position,
                            @NonNull final Object object) {
        fragmentManager.beginTransaction().remove((Fragment) object).commitNowAllowingStateLoss();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BlankFragment.java,BlankFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[39, 51]","{'A338': [(39, 40)], 'A294': [(41, 42)], 'A305': [(44, 51)], 'A302': [(43, 43)]}","{'A338': 0.15384615384615385, 'A294': 0.15384615384615385, 'A305': 0.6153846153846154, 'A302': 0.07692307692307693}",A305,,"    @Nullable
    @Override
    public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,
                             final Bundle savedInstanceState) {
        setTitle(""NewPipe"");
        final View view = inflater.inflate(R.layout.fragment_blank, container, false);
        if (errorInfo != null) {
            errorPanel = new ErrorPanelHelper(this, view, null);
            errorPanel.showError(errorInfo);
            view.findViewById(R.id.blank_page_content).setVisibility(View.GONE);
        }
        return view;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BlankFragment.java,BlankFragment,onDestroyView,void onDestroyView(),"[53, 61]","{'A338': [(61, 61)], 'A305': [(53, 60)]}","{'A338': 0.1111111111111111, 'A305': 0.8888888888888888}",A305,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();

        if (errorPanel != null) {
            errorPanel.dispose();
            errorPanel = null;
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/BlankFragment.java,BlankFragment,onResume,void onResume(),"[63, 70]","{'A302': [(63, 63), (66, 70)], 'A299': [(64, 65)]}","{'A302': 0.75, 'A299': 0.25}",A302,,"    @Override
    public void onResume() {
        super.onResume();
        setTitle(""NewPipe"");
        // leave this inline. Will make it harder for copy cats.
        // If you are a Copy cat FUCK YOU.
        // I WILL FIND YOU, AND I WILL ...
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onCreate,void onCreate(Bundle),"[72, 94]","{'A301': [(72, 72), (74, 78), (81, 85), (87, 87), (94, 94)], 'A305': [(89, 89), (91, 93)], 'A306': [(86, 86)], 'A330': [(88, 88), (90, 90)], 'A294': [(73, 73), (79, 80)]}","{'A301': 0.5652173913043478, 'A305': 0.17391304347826086, 'A306': 0.043478260869565216, 'A330': 0.08695652173913043, 'A294': 0.13043478260869565}",A301,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);
        tabsManager = TabsManager.getManager(activity);
        tabsManager.setSavedTabsListener(() -> {
            if (DEBUG) {
                Log.d(TAG, ""TabsManager.SavedTabsChangeListener: ""
                        + ""onTabsChanged called, isResumed = "" + isResumed());
            }
            if (isResumed()) {
                setupTabs();
            } else {
                hasTabsChanged = true;
            }
        });

        prefs = PreferenceManager.getDefaultSharedPreferences(requireContext());
        youtubeRestrictedModeEnabledKey = getString(R.string.youtube_restricted_mode_enabled);
        youtubeRestrictedModeEnabled = prefs.getBoolean(youtubeRestrictedModeEnabledKey, false);
        mainTabsPositionKey = getString(R.string.main_tabs_position_key);
        mainTabsPositionBottom = prefs.getBoolean(mainTabsPositionKey, false);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[96, 101]","{'A301': [(96, 96), (100, 101)], 'A294': [(97, 99)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_main, container, false);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,initViews,"void initViews(View,Bundle)","[103, 114]","{'A301': [(103, 103), (105, 105), (111, 112)], 'A305': [(113, 113)], 'A295': [(107, 107), (109, 110)], 'A306': [(114, 114)], 'A294': [(104, 104)], 'A338': [(106, 106), (108, 108)]}","{'A301': 0.3333333333333333, 'A305': 0.08333333333333333, 'A295': 0.25, 'A306': 0.08333333333333333, 'A294': 0.08333333333333333, 'A338': 0.16666666666666666}",A301,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        binding = FragmentMainBinding.bind(rootView);

        binding.mainTabLayout.setupWithViewPager(binding.pager);
        binding.mainTabLayout.addOnTabSelectedListener(this);

        setupTabs();
        updateTabLayoutPosition();
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onResume,void onResume(),"[116, 132]","{'A301': [(116, 118)], 'A305': [(120, 123), (126, 131)], 'A306': [(119, 119), (132, 132)], 'A294': [(124, 125)]}","{'A301': 0.17647058823529413, 'A305': 0.5882352941176471, 'A306': 0.11764705882352941, 'A294': 0.11764705882352941}",A305,,"    @Override
    public void onResume() {
        super.onResume();

        final boolean newYoutubeRestrictedModeEnabled =
                prefs.getBoolean(youtubeRestrictedModeEnabledKey, false);
        if (youtubeRestrictedModeEnabled != newYoutubeRestrictedModeEnabled || hasTabsChanged) {
            youtubeRestrictedModeEnabled = newYoutubeRestrictedModeEnabled;
            setupTabs();
        }

        final boolean newMainTabsPosition = prefs.getBoolean(mainTabsPositionKey, false);
        if (mainTabsPositionBottom != newMainTabsPosition) {
            mainTabsPositionBottom = newMainTabsPosition;
            updateTabLayoutPosition();
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onDestroy,void onDestroy(),"[134, 142]","{'A301': [(134, 137), (142, 142)], 'A295': [(138, 140)], 'A294': [(141, 141)]}","{'A301': 0.5555555555555556, 'A295': 0.3333333333333333, 'A294': 0.1111111111111111}",A301,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        tabsManager.unsetSavedTabsListener();
        if (binding != null) {
            binding.pager.setAdapter(null);
            binding = null;
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onDestroyView,void onDestroyView(),"[144, 148]","{'A298': [(144, 148)]}",{'A298': 1.0},A298,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[154, 168]","{'A301': [(154, 154), (157, 157), (163, 163), (165, 168)], 'A305': [(155, 156), (162, 162)], 'A294': [(158, 161), (164, 164)]}","{'A301': 0.4666666666666667, 'A305': 0.2, 'A294': 0.3333333333333333}",A301,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        if (DEBUG) {
            Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                    + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
        }
        inflater.inflate(R.menu.menu_main_fragment, menu);

        final ActionBar supportActionBar = activity.getSupportActionBar();
        if (supportActionBar != null) {
            supportActionBar.setDisplayHomeAsUpEnabled(false);
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[170, 182]","{'A301': [(170, 170), (180, 182)], 'A305': [(172, 179)], 'A294': [(171, 171)]}","{'A301': 0.3076923076923077, 'A305': 0.6153846153846154, 'A294': 0.07692307692307693}",A305,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        if (item.getItemId() == R.id.action_search) {
            try {
                NavigationHelper.openSearchFragment(getFM(),
                        ServiceHelper.getSelectedServiceId(activity), """");
            } catch (final Exception e) {
                ErrorUtil.showUiErrorSnackbar(this, ""Opening search fragment"", e);
            }
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,setupTabs,void setupTabs(),"[188, 204]","{'A301': [(188, 192), (195, 196), (199, 200), (202, 204)], 'A295': [(197, 198), (201, 201)], 'A294': [(193, 194)]}","{'A301': 0.7058823529411765, 'A295': 0.17647058823529413, 'A294': 0.11764705882352941}",A301,,"    private void setupTabs() {
        tabsList.clear();
        tabsList.addAll(tabsManager.getTabs());

        if (pagerAdapter == null || !pagerAdapter.sameTabs(tabsList)) {
            pagerAdapter = new SelectedTabsPagerAdapter(requireContext(),
                    getChildFragmentManager(), tabsList);
        }

        binding.pager.setAdapter(null);
        binding.pager.setAdapter(pagerAdapter);

        updateTabsIconAndDescription();
        updateTitleForTab(binding.pager.getCurrentItem());

        hasTabsChanged = false;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,updateTabsIconAndDescription,void updateTabsIconAndDescription(),"[206, 215]","{'A301': [(206, 207), (209, 212)], 'A295': [(208, 208)], 'A302': [(213, 215)]}","{'A301': 0.6, 'A295': 0.1, 'A302': 0.3}",A301,,"    private void updateTabsIconAndDescription() {
        for (int i = 0; i < tabsList.size(); i++) {
            final TabLayout.Tab tabToSet = binding.mainTabLayout.getTabAt(i);
            if (tabToSet != null) {
                final Tab tab = tabsList.get(i);
                tabToSet.setIcon(tab.getTabIconRes(requireContext()));
                tabToSet.setContentDescription(tab.getTabName(requireContext()));
            }
        }
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,updateTitleForTab,void updateTitleForTab(int),"[217, 219]","{'A301': [(218, 219)], 'A294': [(217, 217)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    private void updateTitleForTab(final int tabPosition) {
        setTitle(tabsList.get(tabPosition).getTabName(requireContext()));
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,commitPlaylistTabs,void commitPlaylistTabs(),"[221, 225]","{'A305': [(224, 224)], 'A298': [(221, 223), (225, 225)]}","{'A305': 0.2, 'A298': 0.8}",A298,,"    public void commitPlaylistTabs() {
        pagerAdapter.getLocalPlaylistFragments()
                .stream()
                .forEach(LocalPlaylistFragment::saveImmediate);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,updateTabLayoutPosition,void updateTabLayoutPosition(),"[227, 257]","{'A305': [(227, 227), (230, 242), (245, 256)], 'A315': [(228, 229), (243, 244), (257, 257)]}","{'A305': 0.8387096774193549, 'A315': 0.16129032258064516}",A305,,"    private void updateTabLayoutPosition() {
        final ScrollableTabLayout tabLayout = binding.mainTabLayout;
        final ViewPager viewPager = binding.pager;
        final boolean bottom = mainTabsPositionBottom;

        // change layout params to make the tab layout appear either at the top or at the bottom
        final var tabParams = (RelativeLayout.LayoutParams) tabLayout.getLayoutParams();
        final var pagerParams = (RelativeLayout.LayoutParams) viewPager.getLayoutParams();

        tabParams.removeRule(bottom ? ALIGN_PARENT_TOP : ALIGN_PARENT_BOTTOM);
        tabParams.addRule(bottom ? ALIGN_PARENT_BOTTOM : ALIGN_PARENT_TOP);
        pagerParams.removeRule(bottom ? BELOW : ABOVE);
        pagerParams.addRule(bottom ? ABOVE : BELOW, R.id.main_tab_layout);
        tabLayout.setSelectedTabIndicatorGravity(
                bottom ? INDICATOR_GRAVITY_TOP : INDICATOR_GRAVITY_BOTTOM);

        tabLayout.setLayoutParams(tabParams);
        viewPager.setLayoutParams(pagerParams);

        // change the background and icon color of the tab layout:
        // service-colored at the top, app-background-colored at the bottom
        tabLayout.setBackgroundColor(ThemeHelper.resolveColorFromAttr(requireContext(),
                bottom ? android.R.attr.windowBackground : R.attr.colorPrimary));

        @ColorInt final int iconColor = bottom
                ? ThemeHelper.resolveColorFromAttr(requireContext(), android.R.attr.colorAccent)
                : Color.WHITE;
        tabLayout.setTabRippleColor(ColorStateList.valueOf(iconColor).withAlpha(32));
        tabLayout.setTabIconTint(ColorStateList.valueOf(iconColor));
        tabLayout.setSelectedTabIndicatorColor(iconColor);
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onTabSelected,void onTabSelected(TabLayout.Tab),"[259, 265]","{'A301': [(264, 264)], 'A294': [(260, 263)], 'A338': [(259, 259), (265, 265)]}","{'A301': 0.14285714285714285, 'A294': 0.5714285714285714, 'A338': 0.2857142857142857}",A294,,"    @Override
    public void onTabSelected(final TabLayout.Tab selectedTab) {
        if (DEBUG) {
            Log.d(TAG, ""onTabSelected() called with: selectedTab = ["" + selectedTab + ""]"");
        }
        updateTitleForTab(selectedTab.getPosition());
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onTabUnselected,void onTabUnselected(TabLayout.Tab),"[267, 268]","{'A294': [(268, 268)], 'A338': [(267, 267)]}","{'A294': 0.5, 'A338': 0.5}",A294,,"    @Override
    public void onTabUnselected(final TabLayout.Tab tab) { }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment,onTabReselected,void onTabReselected(TabLayout.Tab),"[270, 276]","{'A301': [(275, 276)], 'A294': [(271, 274)], 'A338': [(270, 270)]}","{'A301': 0.2857142857142857, 'A294': 0.5714285714285714, 'A338': 0.14285714285714285}",A294,,"    @Override
    public void onTabReselected(final TabLayout.Tab tab) {
        if (DEBUG) {
            Log.d(TAG, ""onTabReselected() called with: tab = ["" + tab + ""]"");
        }
        updateTitleForTab(tab.getPosition());
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment.SelectedTabsPagerAdapter,getItem,Fragment getItem(int),"[299, 321]","{'A301': [(299, 299), (302, 303), (305, 306), (310, 310), (312, 313), (320, 321)], 'A305': [(304, 304), (307, 309)], 'A298': [(316, 319)], 'A306': [(311, 311), (314, 314)], 'A294': [(301, 301)], 'A338': [(300, 300), (315, 315)]}","{'A301': 0.43478260869565216, 'A305': 0.17391304347826086, 'A298': 0.17391304347826086, 'A306': 0.08695652173913043, 'A294': 0.043478260869565216, 'A338': 0.08695652173913043}",A301,,"        @NonNull
        @Override
        public Fragment getItem(final int position) {
            final Tab tab = internalTabsList.get(position);

            final Fragment fragment;
            try {
                fragment = tab.getFragment(context);
            } catch (final Throwable t) {
                return new BlankFragment(new ErrorInfo(t, UserAction.GETTING_MAIN_SCREEN_TAB,
                        ""Tab "" + tab.getClass().getSimpleName() + "":"" + tab.getTabName(context)));
            }

            if (fragment instanceof BaseFragment) {
                ((BaseFragment) fragment).useAsFrontPage(true);
            }

            if (fragment instanceof LocalPlaylistFragment) {
                localPlaylistFragments.add((LocalPlaylistFragment) fragment);
            }

            return fragment;
        }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment.SelectedTabsPagerAdapter,getLocalPlaylistFragments,List<LocalPlaylistFragment> getLocalPlaylistFragments(),"[323, 325]","{'A298': [(323, 325)]}",{'A298': 1.0},A298,,"        public List<LocalPlaylistFragment> getLocalPlaylistFragments() {
            return localPlaylistFragments;
        }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment.SelectedTabsPagerAdapter,getItemPosition,int getItemPosition(Object),"[327, 332]","{'A305': [(328, 328)], 'A306': [(329, 331)], 'A338': [(327, 327), (332, 332)]}","{'A305': 0.16666666666666666, 'A306': 0.5, 'A338': 0.3333333333333333}",A306,,"        @Override
        public int getItemPosition(@NonNull final Object object) {
            // Causes adapter to reload all Fragments when
            // notifyDataSetChanged is called
            return POSITION_NONE;
        }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment.SelectedTabsPagerAdapter,getCount,int getCount(),"[334, 337]","{'A301': [(336, 336)], 'A338': [(334, 335), (337, 337)]}","{'A301': 0.25, 'A338': 0.75}",A338,,"        @Override
        public int getCount() {
            return internalTabsList.size();
        }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/MainFragment.java,MainFragment.SelectedTabsPagerAdapter,sameTabs,boolean sameTabs(List<Tab>),"[339, 341]","{'A301': [(340, 340)], 'A306': [(341, 341)], 'A294': [(339, 339)]}","{'A301': 0.3333333333333333, 'A306': 0.3333333333333333, 'A294': 0.3333333333333333}",A301,,"        public boolean sameTabs(final List<Tab> tabsToCompare) {
            return internalTabsList.equals(tabsToCompare);
        }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,initViews,"void initViews(View,Bundle)","[52, 57]","{'A301': [(52, 52), (54, 57)], 'A294': [(53, 53)]}","{'A301': 0.8333333333333334, 'A294': 0.16666666666666666}",A301,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);
        setTitle(name);
        showListFooter(hasMoreItems());
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,onPause,void onPause(),"[59, 65]","{'A301': [(59, 61), (65, 65)], 'A294': [(62, 64)]}","{'A301': 0.5714285714285714, 'A294': 0.42857142857142855}",A301,,"    @Override
    public void onPause() {
        super.onPause();
        if (currentWorker != null) {
            currentWorker.dispose();
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,onResume,void onResume(),"[67, 78]","{'A301': [(67, 71), (73, 78)], 'A300': [(72, 72)]}","{'A301': 0.9166666666666666, 'A300': 0.08333333333333333}",A301,,"    @Override
    public void onResume() {
        super.onResume();
        // Check if it was loading when the fragment was stopped/paused,
        if (wasLoading.getAndSet(false)) {
            if (hasMoreItems() && !infoListAdapter.getItemsList().isEmpty()) {
                loadMoreItems();
            } else {
                doInitialLoadLogic();
            }
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,onDestroy,void onDestroy(),"[80, 87]","{'A301': [(80, 82), (87, 87)], 'A288': [(83, 86)]}","{'A301': 0.5, 'A288': 0.5}",A301,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (currentWorker != null) {
            currentWorker.dispose();
            currentWorker = null;
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,writeTo,void writeTo(Queue<Object>),"[93, 98]","{'A301': [(93, 93), (95, 96), (98, 98)], 'A294': [(94, 94), (97, 97)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    @Override
    public void writeTo(final Queue<Object> objectsToSave) {
        super.writeTo(objectsToSave);
        objectsToSave.add(currentInfo);
        objectsToSave.add(currentNextPage);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,readFrom,void readFrom(Queue<Object>),"[100, 106]","{'A301': [(100, 101), (103, 103), (106, 106)], 'A305': [(104, 104)], 'A294': [(102, 102), (105, 105)]}","{'A301': 0.5714285714285714, 'A305': 0.14285714285714285, 'A294': 0.2857142857142857}",A301,,"    @Override
    @SuppressWarnings(""unchecked"")
    public void readFrom(@NonNull final Queue<Object> savedObjects) throws Exception {
        super.readFrom(savedObjects);
        currentInfo = (L) savedObjects.poll();
        currentNextPage = (Page) savedObjects.poll();
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,doInitialLoadLogic,void doInitialLoadLogic(),"[112, 122]","{'A301': [(113, 113), (117, 118), (122, 122)], 'A300': [(112, 112)], 'A294': [(114, 116), (119, 121)]}","{'A301': 0.36363636363636365, 'A300': 0.09090909090909091, 'A294': 0.5454545454545454}",A294,,"    @Override
    protected void doInitialLoadLogic() {
        if (DEBUG) {
            Log.d(TAG, ""doInitialLoadLogic() called"");
        }
        if (currentInfo == null) {
            startLoading(false);
        } else {
            handleResult(currentInfo);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,startLoading,void startLoading(boolean),"[133, 155]","{'A301': [(133, 133), (135, 140), (144, 146), (155, 155)], 'A300': [(147, 147)], 'A305': [(152, 154)], 'A294': [(134, 134), (141, 143), (150, 150)], 'A302': [(148, 149), (151, 151)]}","{'A301': 0.4782608695652174, 'A300': 0.043478260869565216, 'A305': 0.13043478260869565, 'A294': 0.21739130434782608, 'A302': 0.13043478260869565}",A301,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);

        showListFooter(false);
        infoListAdapter.clearStreamItemList();

        currentInfo = null;
        if (currentWorker != null) {
            currentWorker.dispose();
        }
        currentWorker = loadResult(forceLoad)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe((@NonNull final L result) -> {
                    isLoading.set(false);
                    currentInfo = result;
                    currentNextPage = result.getNextPage();
                    handleResult(result);
                }, throwable ->
                        showError(new ErrorInfo(throwable, errorUserAction,
                                ""Start loading: "" + url, serviceId)));
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,loadMoreItems,void loadMoreItems(),"[166, 186]","{'A301': [(168, 169), (176, 178), (186, 186)], 'A300': [(166, 167), (180, 180), (182, 182)], 'A305': [(183, 185)], 'A294': [(170, 172)], 'A297': [(173, 175), (179, 179)], 'A302': [(181, 181)]}","{'A301': 0.2857142857142857, 'A300': 0.19047619047619047, 'A305': 0.14285714285714285, 'A294': 0.14285714285714285, 'A297': 0.19047619047619047, 'A302': 0.047619047619047616}",A301,,"    @Override
    protected void loadMoreItems() {
        isLoading.set(true);

        if (currentWorker != null) {
            currentWorker.dispose();
        }

        forbidDownwardFocusScroll();

        currentWorker = loadMoreItemsLogic()
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .doFinally(this::allowDownwardFocusScroll)
                .subscribe(infoItemsPage -> {
                    isLoading.set(false);
                    handleNextItems(infoItemsPage);
                }, (@NonNull Throwable throwable) ->
                        dynamicallyShowErrorPanelOrSnackbar(new ErrorInfo(throwable,
                                errorUserAction, ""Loading more items: "" + url, serviceId)));
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,forbidDownwardFocusScroll,void forbidDownwardFocusScroll(),"[188, 192]","{'A297': [(188, 192)]}",{'A297': 1.0},A297,,"    private void forbidDownwardFocusScroll() {
        if (itemsList instanceof NewPipeRecyclerView) {
            ((NewPipeRecyclerView) itemsList).setFocusScrollAllowed(false);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,allowDownwardFocusScroll,void allowDownwardFocusScroll(),"[194, 198]","{'A297': [(194, 198)]}",{'A297': 1.0},A297,,"    private void allowDownwardFocusScroll() {
        if (itemsList instanceof NewPipeRecyclerView) {
            ((NewPipeRecyclerView) itemsList).setFocusScrollAllowed(true);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,handleNextItems,void handleNextItems(ListExtractor.InfoItemsPage<I>),"[200, 213]","{'A301': [(200, 200), (202, 202), (206, 207), (213, 213)], 'A305': [(201, 201), (203, 203), (208, 212)], 'A294': [(204, 204)], 'A302': [(205, 205)]}","{'A301': 0.35714285714285715, 'A305': 0.5, 'A294': 0.07142857142857142, 'A302': 0.07142857142857142}",A305,,"    @Override
    public void handleNextItems(final ListExtractor.InfoItemsPage<I> result) {
        super.handleNextItems(result);

        currentNextPage = result.getNextPage();
        infoListAdapter.addInfoItemList(result.getItems());

        showListFooter(hasMoreItems());

        if (!result.getErrors().isEmpty()) {
            dynamicallyShowErrorPanelOrSnackbar(new ErrorInfo(result.getErrors(), errorUserAction,
                    ""Get next items of: "" + url, serviceId));
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,hasMoreItems,boolean hasMoreItems(),"[215, 218]","{'A301': [(215, 216), (218, 218)], 'A294': [(217, 217)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    @Override
    protected boolean hasMoreItems() {
        return Page.isValid(currentNextPage);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,handleResult,void handleResult(L),"[224, 254]","{'A301': [(224, 224), (226, 227), (229, 230), (234, 234), (237, 238), (240, 241), (254, 254)], 'A300': [(232, 232), (247, 247)], 'A305': [(225, 225), (235, 236), (239, 239), (242, 246), (248, 253)], 'A324': [(228, 228)], 'A302': [(233, 233)], 'A299': [(231, 231)]}","{'A301': 0.3548387096774194, 'A300': 0.06451612903225806, 'A305': 0.4838709677419355, 'A324': 0.03225806451612903, 'A302': 0.03225806451612903, 'A299': 0.03225806451612903}",A305,,"    @Override
    public void handleResult(@NonNull final L result) {
        super.handleResult(result);

        name = result.getName();
        setTitle(name);

        if (infoListAdapter.getItemsList().isEmpty()) {
            if (!result.getRelatedItems().isEmpty()) {
                infoListAdapter.addInfoItemList(result.getRelatedItems());
                showListFooter(hasMoreItems());
            } else if (hasMoreItems()) {
                loadMoreItems();
            } else {
                infoListAdapter.clearStreamItemList();
                showEmptyState();
            }
        }

        if (!result.getErrors().isEmpty()) {
            final List<Throwable> errors = new ArrayList<>(result.getErrors());
            // handling ContentNotSupportedException not to show the error but an appropriate string
            // so that crashes won't be sent uselessly and the user will understand what happened
            errors.removeIf(ContentNotSupportedException.class::isInstance);

            if (!errors.isEmpty()) {
                dynamicallyShowErrorPanelOrSnackbar(new ErrorInfo(result.getErrors(),
                        errorUserAction, ""Start loading: "" + url, serviceId));
            }
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,showEmptyState,void showEmptyState(),"[256, 268]","{'A298': [(256, 257), (260, 268)], 'A305': [(258, 259)]}","{'A298': 0.8461538461538461, 'A305': 0.15384615384615385}",A298,,"    @Override
    public void showEmptyState() {
        // show ""no streams"" for SoundCloud; otherwise ""no videos""
        // showing ""no live streams"" is handled in KioskFragment
        if (emptyStateView != null) {
            if (currentInfo.getService() == SoundCloud) {
                setEmptyStateMessage(R.string.no_streams);
            } else {
                setEmptyStateMessage(R.string.no_videos);
            }
        }
        super.showEmptyState();
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,setInitialData,"void setInitialData(int,String,String)","[274, 278]","{'A301': [(278, 278)], 'A294': [(274, 277)]}","{'A301': 0.2, 'A294': 0.8}",A294,,"    protected void setInitialData(final int sid, final String u, final String title) {
        this.serviceId = sid;
        this.url = u;
        this.name = !TextUtils.isEmpty(title) ? title : """";
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListInfoFragment.java,BaseListInfoFragment,dynamicallyShowErrorPanelOrSnackbar,void dynamicallyShowErrorPanelOrSnackbar(ErrorInfo),"[280, 288]","{'A305': [(280, 288)]}",{'A305': 1.0},A305,,"    private void dynamicallyShowErrorPanelOrSnackbar(final ErrorInfo errorInfo) {
        if (infoListAdapter.getItemCount() == 0) {
            // show error panel only if no items already visible
            showError(errorInfo);
        } else {
            isLoading.set(false);
            showSnackBarError(errorInfo);
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,getInstance,"ChannelTabFragment getInstance(int,ListLinkHandler,String)","[50, 59]","{'A386': [(51, 59)], 'A298': [(50, 50)]}","{'A386': 0.9, 'A298': 0.1}",A386,,"    @NonNull
    public static ChannelTabFragment getInstance(final int serviceId,
                                                 final ListLinkHandler tabHandler,
                                                 final String channelName) {
        final ChannelTabFragment instance = new ChannelTabFragment();
        instance.serviceId = serviceId;
        instance.tabHandler = tabHandler;
        instance.channelName = channelName;
        return instance;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,onCreate,void onCreate(Bundle),"[69, 73]","{'A386': [(69, 73)]}",{'A386': 1.0},A386,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(false);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[75, 80]","{'A386': [(75, 80)]}",{'A386': 1.0},A386,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_channel_tab, container, false);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,onDestroyView,void onDestroyView(),"[82, 86]","{'A386': [(82, 82), (85, 86)], 'A298': [(83, 84)]}","{'A386': 0.6, 'A298': 0.4}",A386,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        playlistControlBinding = null;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,getListHeaderSupplier,Supplier<View> getListHeaderSupplier(),"[88, 96]","{'A386': [(88, 96)]}",{'A386': 1.0},A386,,"    @Override
    protected Supplier<View> getListHeaderSupplier() {
        if (ChannelTabHelper.isStreamsTab(tabHandler)) {
            playlistControlBinding = PlaylistControlBinding
                    .inflate(activity.getLayoutInflater(), itemsList, false);
            return playlistControlBinding::getRoot;
        }
        return null;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,loadResult,Single<ChannelTabInfo> loadResult(boolean),"[98, 101]","{'A386': [(98, 101)]}",{'A386': 1.0},A386,,"    @Override
    protected Single<ChannelTabInfo> loadResult(final boolean forceLoad) {
        return ExtractorHelper.getChannelTab(serviceId, tabHandler, forceLoad);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,loadMoreItemsLogic,Single<ListExtractor.InfoItemsPage<InfoItem>> loadMoreItemsLogic(),"[103, 106]","{'A386': [(103, 106)]}",{'A386': 1.0},A386,,"    @Override
    protected Single<ListExtractor.InfoItemsPage<InfoItem>> loadMoreItemsLogic() {
        return ExtractorHelper.getMoreChannelTabItems(serviceId, tabHandler, currentNextPage);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,setTitle,void setTitle(String),"[108, 116]","{'A386': [(108, 109), (115, 116)], 'A298': [(110, 114)]}","{'A386': 0.4444444444444444, 'A298': 0.5555555555555556}",A298,,"    @Override
    public void setTitle(final String title) {
        // The channel name is displayed as title in the toolbar.
        // The title is always a description of the content of the tab fragment.
        // It should be unique for each channel because multiple channel tabs
        // can be added to the main page. Therefore, the channel name is used.
        // Using the title variable would cause the title to be the same for all channel tabs.
        super.setTitle(channelName);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,handleResult,void handleResult(ChannelTabInfo),"[118, 158]","{'A386': [(118, 118), (120, 121), (146, 154), (157, 158)], 'A305': [(122, 132), (140, 145)], 'A298': [(119, 119), (133, 139), (155, 156)]}","{'A386': 0.34146341463414637, 'A305': 0.4146341463414634, 'A298': 0.24390243902439024}",A305,,"    @Override
    public void handleResult(@NonNull final ChannelTabInfo result) {
        super.handleResult(result);

        // FIXME this is a really hacky workaround, to avoid storing useless data in the fragment
        //  state. The problem is, `ReadyChannelTabListLinkHandler` might contain raw JSON data that
        //  uses a lot of memory (e.g. ~800KB for YouTube). While 800KB doesn't seem much, if
        //  you combine just a couple of channel tab fragments you easily go over the 1MB
        //  save&restore transaction limit, and get `TransactionTooLargeException`s. A proper
        //  solution would require rethinking about `ReadyChannelTabListLinkHandler`s.
        if (tabHandler instanceof ReadyChannelTabListLinkHandler) {
            try {
                // once `handleResult` is called, the parsed data was already saved to cache, so
                // we can discard any raw data in ReadyChannelTabListLinkHandler and create a
                // link handler with identical properties, but without any raw data
                final ListLinkHandlerFactory channelTabLHFactory = result.getService()
                        .getChannelTabLHFactory();
                if (channelTabLHFactory != null) {
                    // some services do not not have a ChannelTabLHFactory
                    tabHandler = channelTabLHFactory.fromQuery(tabHandler.getId(),
                            tabHandler.getContentFilters(), tabHandler.getSortFilter());
                }
            } catch (final ParsingException e) {
                // silently ignore the error, as the app can continue to function normally
                Log.w(TAG, ""Could not recreate channel tab handler"", e);
            }
        }

        if (playlistControlBinding != null) {
            // PlaylistControls should be visible only if there is some item in
            // infoListAdapter other than header
            if (infoListAdapter.getItemCount() > 1) {
                playlistControlBinding.getRoot().setVisibility(View.VISIBLE);
            } else {
                playlistControlBinding.getRoot().setVisibility(View.GONE);
            }

            PlayButtonHelper.initPlaylistControlClickListener(
                    activity, playlistControlBinding, this);
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelTabFragment.java,ChannelTabFragment,getPlayQueue,PlayQueue getPlayQueue(),"[160, 169]","{'A386': [(162, 169)], 'A300': [(160, 160)], 'A298': [(161, 161)]}","{'A386': 0.8, 'A300': 0.1, 'A298': 0.1}",A386,,"    @Override
    public PlayQueue getPlayQueue() {
        final List<StreamInfoItem> streamItems = infoListAdapter.getItemsList().stream()
                .filter(StreamInfoItem.class::isInstance)
                .map(StreamInfoItem.class::cast)
                .collect(Collectors.toList());

        return new ChannelTabPlayQueue(currentInfo.getServiceId(), tabHandler,
                currentInfo.getNextPage(), streamItems, 0);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,getInstance,"ChannelFragment getInstance(int,String,String)","[105, 110]","{'A301': [(109, 110)], 'A294': [(105, 107)], 'A302': [(108, 108)]}","{'A301': 0.3333333333333333, 'A294': 0.5, 'A302': 0.16666666666666666}",A294,,"    public static ChannelFragment getInstance(final int serviceId, final String url,
                                              final String name) {
        final ChannelFragment instance = new ChannelFragment();
        instance.setInitialData(serviceId, url, name);
        return instance;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,setInitialData,"void setInitialData(int,String,String)","[112, 116]","{'A305': [(112, 112)], 'A386': [(113, 115)], 'A302': [(116, 116)]}","{'A305': 0.2, 'A386': 0.6, 'A302': 0.2}",A386,,"    private void setInitialData(final int sid, final String u, final String title) {
        this.serviceId = sid;
        this.url = u;
        this.name = !TextUtils.isEmpty(title) ? title : """";
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onAttach,void onAttach(Context),"[123, 127]","{'A386': [(123, 123), (125, 127)], 'A298': [(124, 124)]}","{'A386': 0.8, 'A298': 0.2}",A386,,"    @Override
    public void onAttach(@NonNull final Context context) {
        super.onAttach(context);
        subscriptionManager = new SubscriptionManager(activity);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[129, 135]","{'A301': [(129, 129), (135, 135)], 'A386': [(133, 134)], 'A294': [(130, 132)]}","{'A301': 0.2857142857142857, 'A386': 0.2857142857142857, 'A294': 0.42857142857142855}",A294,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        binding = FragmentChannelBinding.inflate(inflater, container, false);
        return binding.getRoot();
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onViewCreated,"void onViewCreated(View,Bundle)","[137, 196]","{'A416': [(137, 196)]}",{'A416': 1.0},A416,,"    @Override
    public void onViewCreated(@NonNull final View rootView, final Bundle savedInstanceState) {
        super.onViewCreated(rootView, savedInstanceState);
            menuProvider = new MenuProvider() {
                @Override
                public void onCreateMenu(@NonNull final Menu menu,
                                         @NonNull final MenuInflater inflater) {
                    inflater.inflate(R.menu.menu_channel, menu);

                    if (DEBUG) {
                        Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                                + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
                    }

                }

                @Override
                public void onPrepareMenu(@NonNull final Menu menu) {
                    menuRssButton = menu.findItem(R.id.menu_item_rss);
                    menuNotifyButton = menu.findItem(R.id.menu_item_notify);
                    updateRssButton();
                    updateNotifyButton(channelSubscription);
                }

                @Override
                public boolean onMenuItemSelected(@NonNull final MenuItem item) {
                    switch (item.getItemId()) {
                        case R.id.menu_item_notify:
                            final boolean value = !item.isChecked();
                            item.setEnabled(false);
                            setNotify(value);
                            break;
                        case R.id.action_settings:
                            NavigationHelper.openSettings(requireContext());
                            break;
                        case R.id.menu_item_rss:
                            if (currentInfo != null) {
                                ShareUtils.openUrlInApp(requireContext(), currentInfo.getFeedUrl());
                            }
                            break;
                        case R.id.menu_item_openInBrowser:
                            if (currentInfo != null) {
                                ShareUtils.openUrlInBrowser(requireContext(),
                                        currentInfo.getOriginalUrl());
                            }
                            break;
                        case R.id.menu_item_share:
                            if (currentInfo != null) {
                                ShareUtils.shareText(requireContext(), name,
                                        currentInfo.getOriginalUrl(), currentInfo.getAvatars());
                            }
                            break;
                        default:
                            return false;
                    }
                    return true;
                }
            };
            activity.addMenuProvider(menuProvider);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onCreateMenu,"void onCreateMenu(Menu,MenuInflater)","[141, 151]","{'A416': [(141, 151)]}",{'A416': 1.0},A416,,"                @Override
                public void onCreateMenu(@NonNull final Menu menu,
                                         @NonNull final MenuInflater inflater) {
                    inflater.inflate(R.menu.menu_channel, menu);

                    if (DEBUG) {
                        Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                                + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
                    }

                }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onPrepareMenu,void onPrepareMenu(Menu),"[153, 159]","{'A416': [(153, 159)]}",{'A416': 1.0},A416,,"                @Override
                public void onPrepareMenu(@NonNull final Menu menu) {
                    menuRssButton = menu.findItem(R.id.menu_item_rss);
                    menuNotifyButton = menu.findItem(R.id.menu_item_notify);
                    updateRssButton();
                    updateNotifyButton(channelSubscription);
                }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onMenuItemSelected,boolean onMenuItemSelected(MenuItem),"[161, 193]","{'A416': [(161, 193)]}",{'A416': 1.0},A416,,"                @Override
                public boolean onMenuItemSelected(@NonNull final MenuItem item) {
                    switch (item.getItemId()) {
                        case R.id.menu_item_notify:
                            final boolean value = !item.isChecked();
                            item.setEnabled(false);
                            setNotify(value);
                            break;
                        case R.id.action_settings:
                            NavigationHelper.openSettings(requireContext());
                            break;
                        case R.id.menu_item_rss:
                            if (currentInfo != null) {
                                ShareUtils.openUrlInApp(requireContext(), currentInfo.getFeedUrl());
                            }
                            break;
                        case R.id.menu_item_openInBrowser:
                            if (currentInfo != null) {
                                ShareUtils.openUrlInBrowser(requireContext(),
                                        currentInfo.getOriginalUrl());
                            }
                            break;
                        case R.id.menu_item_share:
                            if (currentInfo != null) {
                                ShareUtils.shareText(requireContext(), name,
                                        currentInfo.getOriginalUrl(), currentInfo.getAvatars());
                            }
                            break;
                        default:
                            return false;
                    }
                    return true;
                }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,initViews,"void initViews(View,Bundle)","[198, 212]","{'A305': [(205, 205), (207, 211)], 'A386': [(199, 204)], 'A298': [(198, 198), (206, 206)], 'A322': [(212, 212)]}","{'A305': 0.4, 'A386': 0.4, 'A298': 0.13333333333333333, 'A322': 0.06666666666666667}",A305,,"    @Override // called from onViewCreated in BaseFragment.onViewCreated
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        tabAdapter = new TabAdapter(getChildFragmentManager());
        binding.viewPager.setAdapter(tabAdapter);
        binding.tabLayout.setupWithViewPager(binding.viewPager);

        setTitle(name);
        binding.channelTitleView.setText(name);
        if (!ImageStrategy.shouldLoadImages()) {
            // do not waste space for the banner if it is not going to be loaded
            binding.channelBannerImage.setImageDrawable(null);
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,initListeners,void initListeners(),"[214, 233]","{'A301': [(214, 214)], 'A305': [(215, 232)], 'A386': [(233, 233)]}","{'A301': 0.05, 'A305': 0.9, 'A386': 0.05}",A305,,"    @Override
    protected void initListeners() {
        super.initListeners();

        final View.OnClickListener openSubChannel = v -> {
            if (!TextUtils.isEmpty(currentInfo.getParentChannelUrl())) {
                try {
                    NavigationHelper.openChannelFragment(getFM(), currentInfo.getServiceId(),
                            currentInfo.getParentChannelUrl(),
                            currentInfo.getParentChannelName());
                } catch (final Exception e) {
                    ErrorUtil.showUiErrorSnackbar(this, ""Opening channel fragment"", e);
                }
            } else if (DEBUG) {
                Log.i(TAG, ""Can't open parent channel because we got no channel URL"");
            }
        };
        binding.subChannelAvatarView.setOnClickListener(openSubChannel);
        binding.subChannelTitleView.setOnClickListener(openSubChannel);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onDestroyView,void onDestroyView(),"[235, 241]","{'A416': [(235, 241)]}",{'A416': 1.0},A416,,"    @Override
    public void onDestroyView() {
        super.onDestroyView();
        if (menuProvider != null) {
            activity.removeMenuProvider(menuProvider);
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onDestroy,void onDestroy(),"[243, 252]","{'A301': [(244, 245), (252, 252)], 'A386': [(243, 243), (246, 250)], 'A360': [(251, 251)]}","{'A301': 0.3, 'A386': 0.6, 'A360': 0.1}",A386,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (currentWorker != null) {
            currentWorker.dispose();
        }
        disposables.clear();
        binding = null;
        menuProvider = null;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,monitorSubscription,void monitorSubscription(ChannelInfo),"[258, 291]","{'A305': [(258, 258), (260, 291)], 'A300': [(259, 259)]}","{'A305': 0.9705882352941176, 'A300': 0.029411764705882353}",A305,,"    private void monitorSubscription(final ChannelInfo info) {
        final Consumer<Throwable> onError = (final Throwable throwable) -> {
            animate(binding.channelSubscribeButton, false, 100);
            showSnackBarError(new ErrorInfo(throwable, UserAction.SUBSCRIPTION_GET,
                    ""Get subscription status"", currentInfo));
        };

        final Observable<List<SubscriptionEntity>> observable = subscriptionManager
                .subscriptionTable()
                .getSubscriptionFlowable(info.getServiceId(), info.getUrl())
                .toObservable();

        disposables.add(observable
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getSubscribeUpdateMonitor(info), onError));

        disposables.add(observable
                .map(List::isEmpty)
                .distinctUntilChanged()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(isEmpty -> updateSubscribeButton(!isEmpty), onError));

        disposables.add(observable
                .map(List::isEmpty)
                .distinctUntilChanged()
                .skip(1) // channel has just been opened
                .filter(x -> NotificationHelper.areNewStreamsNotificationsEnabled(requireContext()))
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(isEmpty -> {
                    if (!isEmpty) {
                        showNotifySnackbar();
                    }
                }, onError));
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,mapOnSubscribe,"Function<Object, Object> mapOnSubscribe(SubscriptionEntity)","[293, 298]","{'A305': [(293, 293), (295, 297)], 'A386': [(298, 298)], 'A300': [(294, 294)]}","{'A305': 0.6666666666666666, 'A386': 0.16666666666666666, 'A300': 0.16666666666666666}",A305,,"    private Function<Object, Object> mapOnSubscribe(final SubscriptionEntity subscription) {
        return (@NonNull final Object o) -> {
            subscriptionManager.insertSubscription(subscription);
            return o;
        };
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,mapOnUnsubscribe,"Function<Object, Object> mapOnUnsubscribe(SubscriptionEntity)","[300, 305]","{'A305': [(300, 300), (302, 305)], 'A300': [(301, 301)]}","{'A305': 0.8333333333333334, 'A300': 0.16666666666666666}",A305,,"    private Function<Object, Object> mapOnUnsubscribe(final SubscriptionEntity subscription) {
        return (@NonNull final Object o) -> {
            subscriptionManager.deleteSubscription(subscription);
            return o;
        };
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,updateSubscription,void updateSubscription(ChannelInfo),"[307, 325]","{'A305': [(307, 309), (311, 325)], 'A386': [(310, 310)]}","{'A305': 0.9473684210526315, 'A386': 0.05263157894736842}",A305,,"    private void updateSubscription(final ChannelInfo info) {
        if (DEBUG) {
            Log.d(TAG, ""updateSubscription() called with: info = ["" + info + ""]"");
        }
        final Action onComplete = () -> {
            if (DEBUG) {
                Log.d(TAG, ""Updated subscription: "" + info.getUrl());
            }
        };

        final Consumer<Throwable> onError = (@NonNull Throwable throwable) ->
                showSnackBarError(new ErrorInfo(throwable, UserAction.SUBSCRIPTION_UPDATE,
                        ""Updating subscription for "" + info.getUrl(), info));

        disposables.add(subscriptionManager.updateChannelInfo(info)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(onComplete, onError));
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,monitorSubscribeButton,"Disposable monitorSubscribeButton(Function<Object, Object>)","[327, 345]","{'A305': [(327, 327), (329, 344)], 'A386': [(345, 345)], 'A300': [(328, 328)]}","{'A305': 0.8947368421052632, 'A386': 0.05263157894736842, 'A300': 0.05263157894736842}",A305,,"    private Disposable monitorSubscribeButton(final Function<Object, Object> action) {
        final Consumer<Object> onNext = (@NonNull final Object o) -> {
            if (DEBUG) {
                Log.d(TAG, ""Changed subscription status to this channel!"");
            }
        };

        final Consumer<Throwable> onError = (@NonNull Throwable throwable) ->
                showSnackBarError(new ErrorInfo(throwable, UserAction.SUBSCRIPTION_CHANGE,
                        ""Changing subscription for "" + currentInfo.getUrl(), currentInfo));

        /* Emit clicks from main thread unto io thread */
        return RxView.clicks(binding.channelSubscribeButton)
                .subscribeOn(AndroidSchedulers.mainThread())
                .observeOn(Schedulers.io())
                .debounce(BUTTON_DEBOUNCE_INTERVAL, TimeUnit.MILLISECONDS) // Ignore rapid clicks
                .map(action)
                .subscribe(onNext, onError);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,getSubscribeUpdateMonitor,Consumer<List<SubscriptionEntity>> getSubscribeUpdateMonitor(ChannelInfo),"[347, 381]","{'A305': [(347, 347), (349, 356), (358, 367), (370, 370), (372, 374)], 'A386': [(357, 357), (368, 369), (371, 371), (375, 381)], 'A300': [(348, 348)]}","{'A305': 0.6571428571428571, 'A386': 0.3142857142857143, 'A300': 0.02857142857142857}",A305,,"    private Consumer<List<SubscriptionEntity>> getSubscribeUpdateMonitor(final ChannelInfo info) {
        return (final List<SubscriptionEntity> subscriptionEntities) -> {
            if (DEBUG) {
                Log.d(TAG, ""subscriptionManager.subscriptionTable.doOnNext() called with: ""
                        + ""subscriptionEntities = ["" + subscriptionEntities + ""]"");
            }
            if (subscribeButtonMonitor != null) {
                subscribeButtonMonitor.dispose();
            }

            if (subscriptionEntities.isEmpty()) {
                if (DEBUG) {
                    Log.d(TAG, ""No subscription to this channel!"");
                }
                final SubscriptionEntity channel = new SubscriptionEntity();
                channel.setServiceId(info.getServiceId());
                channel.setUrl(info.getUrl());
                channel.setData(info.getName(),
                        ImageStrategy.imageListToDbUrl(info.getAvatars()),
                        info.getDescription(),
                        info.getSubscriberCount());
                channelSubscription = null;
                updateNotifyButton(null);
                subscribeButtonMonitor = monitorSubscribeButton(mapOnSubscribe(channel));
            } else {
                if (DEBUG) {
                    Log.d(TAG, ""Found subscription to this channel!"");
                }
                channelSubscription = subscriptionEntities.get(0);
                updateNotifyButton(channelSubscription);
                subscribeButtonMonitor =
                        monitorSubscribeButton(mapOnUnsubscribe(channelSubscription));
            }
        };
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,updateSubscribeButton,void updateSubscribeButton(boolean),"[383, 416]","{'A305': [(383, 416)]}",{'A305': 1.0},A305,,"    private void updateSubscribeButton(final boolean isSubscribed) {
        if (DEBUG) {
            Log.d(TAG, ""updateSubscribeButton() called with: ""
                    + ""isSubscribed = ["" + isSubscribed + ""]"");
        }

        final boolean isButtonVisible = binding.channelSubscribeButton.getVisibility()
                == View.VISIBLE;
        final int backgroundDuration = isButtonVisible ? 300 : 0;
        final int textDuration = isButtonVisible ? 200 : 0;

        final int subscribedBackground = ContextCompat
                .getColor(activity, R.color.subscribed_background_color);
        final int subscribedText = ContextCompat.getColor(activity, R.color.subscribed_text_color);
        final int subscribeBackground = ColorUtils.blendARGB(ThemeHelper
                .resolveColorFromAttr(activity, R.attr.colorPrimary), subscribedBackground, 0.35f);
        final int subscribeText = ContextCompat.getColor(activity, R.color.subscribe_text_color);

        if (isSubscribed) {
            binding.channelSubscribeButton.setText(R.string.subscribed_button_title);
            animateBackgroundColor(binding.channelSubscribeButton, backgroundDuration,
                    subscribeBackground, subscribedBackground);
            animateTextColor(binding.channelSubscribeButton, textDuration, subscribeText,
                    subscribedText);
        } else {
            binding.channelSubscribeButton.setText(R.string.subscribe_button_title);
            animateBackgroundColor(binding.channelSubscribeButton, backgroundDuration,
                    subscribedBackground, subscribeBackground);
            animateTextColor(binding.channelSubscribeButton, textDuration, subscribedText,
                    subscribeText);
        }

        animate(binding.channelSubscribeButton, true, 100, AnimationType.LIGHT_SCALE_AND_ALPHA);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,updateRssButton,void updateRssButton(),"[418, 423]","{'A360': [(418, 423)]}",{'A360': 1.0},A360,,"    private void updateRssButton() {
        if (menuRssButton == null || currentInfo == null) {
            return;
        }
        menuRssButton.setVisible(!TextUtils.isEmpty(currentInfo.getFeedUrl()));
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,updateNotifyButton,void updateNotifyButton(SubscriptionEntity),"[425, 439]","{'A386': [(425, 439)]}",{'A386': 1.0},A386,,"    private void updateNotifyButton(@Nullable final SubscriptionEntity subscription) {
        if (menuNotifyButton == null) {
            return;
        }
        if (subscription != null) {
            menuNotifyButton.setEnabled(
                    NotificationHelper.areNewStreamsNotificationsEnabled(requireContext())
            );
            menuNotifyButton.setChecked(
                    subscription.getNotificationMode() == NotificationMode.ENABLED
            );
        }

        menuNotifyButton.setVisible(subscription != null);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,setNotify,void setNotify(boolean),"[441, 452]","{'A386': [(441, 452)]}",{'A386': 1.0},A386,,"    private void setNotify(final boolean isEnabled) {
        disposables.add(
                subscriptionManager
                        .updateNotificationMode(
                                currentInfo.getServiceId(),
                                currentInfo.getUrl(),
                                isEnabled ? NotificationMode.ENABLED : NotificationMode.DISABLED)
                        .subscribeOn(Schedulers.io())
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe()
        );
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,showNotifySnackbar,void showNotifySnackbar(),"[457, 462]","{'A305': [(457, 462)]}",{'A305': 1.0},A305,,"    private void showNotifySnackbar() {
        Snackbar.make(binding.getRoot(), R.string.you_successfully_subscribed, Snackbar.LENGTH_LONG)
                .setAction(R.string.get_notified, v -> setNotify(true))
                .setActionTextColor(Color.YELLOW)
                .show();
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,updateTabs,void updateTabs(),"[469, 507]","{'A301': [(471, 471), (486, 486), (495, 495), (497, 497), (507, 507)], 'A305': [(472, 475), (477, 484), (487, 487), (489, 493)], 'A386': [(469, 470), (476, 476), (485, 485), (496, 496), (498, 499), (501, 506)], 'A294': [(494, 494)], 'A333': [(488, 488)], 'A340': [(500, 500)]}","{'A301': 0.1282051282051282, 'A305': 0.46153846153846156, 'A386': 0.3333333333333333, 'A294': 0.02564102564102564, 'A333': 0.02564102564102564, 'A340': 0.02564102564102564}",A305,,"    private void updateTabs() {
        tabAdapter.clearAllItems();

        if (currentInfo != null && !channelContentNotSupported) {
            final Context context = requireContext();
            final SharedPreferences preferences = PreferenceManager
                    .getDefaultSharedPreferences(context);

            for (final ListLinkHandler linkHandler : currentInfo.getTabs()) {
                final String tab = linkHandler.getContentFilters().get(0);
                if (ChannelTabHelper.showChannelTab(context, preferences, tab)) {
                    final ChannelTabFragment channelTabFragment =
                            ChannelTabFragment.getInstance(serviceId, linkHandler, name);
                    channelTabFragment.useAsFrontPage(useAsFrontPage);
                    tabAdapter.addFragment(channelTabFragment,
                            context.getString(ChannelTabHelper.getTranslationKey(tab)));
                }
            }

            if (ChannelTabHelper.showChannelTab(
                    context, preferences, R.string.show_channel_tabs_about)) {
                tabAdapter.addFragment(
                        new ChannelAboutFragment(currentInfo),
                        context.getString(R.string.channel_tab_about));
            }
        }

        tabAdapter.notifyDataSetUpdate();

        for (int i = 0; i < tabAdapter.getCount(); i++) {
            binding.tabLayout.getTabAt(i).setText(tabAdapter.getItemTitle(i));
        }

        // Restore previously selected tab
        final TabLayout.Tab ltab = binding.tabLayout.getTabAt(lastTab);
        if (ltab != null) {
            binding.tabLayout.selectTab(ltab);
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,generateSuffix,String generateSuffix(),"[514, 517]","{'A386': [(514, 517)]}",{'A386': 1.0},A386,,"    @Override
    public String generateSuffix() {
        return null;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,writeTo,void writeTo(Queue<Object>),"[519, 523]","{'A305': [(522, 522)], 'A386': [(519, 521), (523, 523)]}","{'A305': 0.2, 'A386': 0.8}",A386,,"    @Override
    public void writeTo(final Queue<Object> objectsToSave) {
        objectsToSave.add(currentInfo);
        objectsToSave.add(binding == null ? 0 : binding.tabLayout.getSelectedTabPosition());
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,readFrom,void readFrom(Queue<Object>),"[525, 529]","{'A386': [(525, 529)]}",{'A386': 1.0},A386,,"    @Override
    public void readFrom(@NonNull final Queue<Object> savedObjects) {
        currentInfo = (ChannelInfo) savedObjects.poll();
        lastTab = (Integer) savedObjects.poll();
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onSaveInstanceState,void onSaveInstanceState(Bundle),"[531, 537]","{'A305': [(531, 537)]}",{'A305': 1.0},A305,,"    @Override
    public void onSaveInstanceState(final @NonNull Bundle outState) {
        super.onSaveInstanceState(outState);
        if (binding != null) {
            outState.putInt(""LastTab"", binding.tabLayout.getSelectedTabPosition());
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,onRestoreInstanceState,void onRestoreInstanceState(Bundle),"[539, 543]","{'A305': [(539, 543)]}",{'A305': 1.0},A305,,"    @Override
    protected void onRestoreInstanceState(@NonNull final Bundle savedInstanceState) {
        super.onRestoreInstanceState(savedInstanceState);
        lastTab = savedInstanceState.getInt(""LastTab"", 0);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,doInitialLoadLogic,void doInitialLoadLogic(),"[550, 557]","{'A386': [(550, 557)]}",{'A386': 1.0},A386,,"    @Override
    protected void doInitialLoadLogic() {
        if (currentInfo == null) {
            startLoading(false);
        } else {
            handleResult(currentInfo);
        }
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,startLoading,void startLoading(boolean),"[559, 570]","{'A301': [(559, 559)], 'A386': [(560, 561), (563, 566), (569, 569)], 'A378': [(562, 562), (567, 568), (570, 570)]}","{'A301': 0.08333333333333333, 'A386': 0.5833333333333334, 'A378': 0.3333333333333333}",A386,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);

        currentInfo = null;
        updateTabs();
        if (currentWorker != null) {
            currentWorker.dispose();
        }

        runWorker(forceLoad);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,runWorker,void runWorker(boolean),"[572, 581]","{'A301': [(581, 581)], 'A386': [(572, 578)], 'A298': [(579, 580)]}","{'A301': 0.1, 'A386': 0.7, 'A298': 0.2}",A386,,"    private void runWorker(final boolean forceLoad) {
        currentWorker = ExtractorHelper.getChannelInfo(serviceId, url, forceLoad)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(result -> {
                    isLoading.set(false);
                    handleResult(result);
                }, throwable -> showError(new ErrorInfo(throwable, UserAction.REQUESTED_CHANNEL,
                        url == null ? ""No URL"" : url, serviceId)));
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,showLoading,void showLoading(),"[583, 588]","{'A305': [(583, 588)]}",{'A305': 1.0},A305,,"    @Override
    public void showLoading() {
        super.showLoading();
        PicassoHelper.cancelTag(PICASSO_CHANNEL_TAG);
        animate(binding.channelSubscribeButton, false, 100);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,handleResult,void handleResult(ChannelInfo),"[590, 646]","{'A301': [(590, 590)], 'A305': [(596, 626), (628, 642), (644, 646)], 'A386': [(591, 594), (643, 643)], 'A360': [(627, 627)], 'A310': [(595, 595)]}","{'A301': 0.017543859649122806, 'A305': 0.8596491228070176, 'A386': 0.08771929824561403, 'A360': 0.017543859649122806, 'A310': 0.017543859649122806}",A305,,"    @Override
    public void handleResult(@NonNull final ChannelInfo result) {
        super.handleResult(result);
        currentInfo = result;
        setInitialData(result.getServiceId(), result.getOriginalUrl(), result.getName());

        if (ImageStrategy.shouldLoadImages() && !result.getBanners().isEmpty()) {
            PicassoHelper.loadBanner(result.getBanners()).tag(PICASSO_CHANNEL_TAG)
                    .into(binding.channelBannerImage);
        } else {
            // do not waste space for the banner, if the user disabled images or there is not one
            binding.channelBannerImage.setImageDrawable(null);
        }

        PicassoHelper.loadAvatar(result.getAvatars()).tag(PICASSO_CHANNEL_TAG)
                .into(binding.channelAvatarView);
        PicassoHelper.loadAvatar(result.getParentChannelAvatars()).tag(PICASSO_CHANNEL_TAG)
                .into(binding.subChannelAvatarView);

        binding.channelTitleView.setText(result.getName());
        binding.channelSubscriberView.setVisibility(View.VISIBLE);
        if (result.getSubscriberCount() >= 0) {
            binding.channelSubscriberView.setText(Localization
                    .shortSubscriberCount(activity, result.getSubscriberCount()));
        } else {
            binding.channelSubscriberView.setText(R.string.subscribers_count_not_available);
        }

        if (!TextUtils.isEmpty(currentInfo.getParentChannelName())) {
            binding.subChannelTitleView.setText(String.format(
                    getString(R.string.channel_created_by),
                    currentInfo.getParentChannelName())
            );
            binding.subChannelTitleView.setVisibility(View.VISIBLE);
            binding.subChannelAvatarView.setVisibility(View.VISIBLE);
        }

        updateRssButton();

        channelContentNotSupported = false;
        for (final Throwable throwable : result.getErrors()) {
            if (throwable instanceof ContentNotSupportedException) {
                channelContentNotSupported = true;
                showContentNotSupportedIfNeeded();
                break;
            }
        }

        disposables.clear();
        if (subscribeButtonMonitor != null) {
            subscribeButtonMonitor.dispose();
        }

        updateTabs();
        updateSubscription(result);
        monitorSubscription(result);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelFragment.java,ChannelFragment,showContentNotSupportedIfNeeded,void showContentNotSupportedIfNeeded(),"[648, 658]","{'A301': [(658, 658)], 'A305': [(648, 657)]}","{'A301': 0.09090909090909091, 'A305': 0.9090909090909091}",A305,,"    private void showContentNotSupportedIfNeeded() {
        // channelBinding might not be initialized when handleResult() is called
        // (e.g. after rotating the screen, #6696)
        if (!channelContentNotSupported || binding == null) {
            return;
        }

        binding.errorContentNotSupported.setVisibility(View.VISIBLE);
        binding.channelKaomoji.setText(""(︶︹︺)"");
        binding.channelKaomoji.setTextSize(TypedValue.COMPLEX_UNIT_SP, 45f);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,initViews,"void initViews(View,Bundle)","[37, 41]","{'A305': [(37, 41)]}",{'A305': 1.0},A305,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);
        binding.constraintLayout.setPadding(0, DeviceUtils.dpToPx(8, requireContext()), 0, 0);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,getDescription,Description getDescription(),"[43, 47]","{'A386': [(43, 45), (47, 47)], 'A305': [(46, 46)]}","{'A386': 0.8, 'A305': 0.2}",A386,,"    @Nullable
    @Override
    protected Description getDescription() {
        return new Description(channelInfo.getDescription(), Description.PLAIN_TEXT);
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,getService,StreamingService getService(),"[49, 53]","{'A386': [(50, 53)], 'A327': [(49, 49)]}","{'A386': 0.8, 'A327': 0.2}",A386,,"    @NonNull
    @Override
    protected StreamingService getService() {
        return channelInfo.getService();
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,getServiceId,int getServiceId(),"[55, 58]","{'A386': [(55, 58)]}",{'A386': 1.0},A386,,"    @Override
    protected int getServiceId() {
        return channelInfo.getServiceId();
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,getStreamUrl,String getStreamUrl(),"[60, 64]","{'A386': [(60, 64)]}",{'A386': 1.0},A386,,"    @Nullable
    @Override
    protected String getStreamUrl() {
        return null;
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,getTags,List<String> getTags(),"[66, 70]","{'A386': [(67, 70)], 'A327': [(66, 66)]}","{'A386': 0.8, 'A327': 0.2}",A386,,"    @NonNull
    @Override
    public List<String> getTags() {
        return channelInfo.getTags();
    }
"
org.schabi.newpipe.fragments.list.channel,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/channel/ChannelAboutFragment.java,ChannelAboutFragment,setupMetadata,"void setupMetadata(LayoutInflater,LinearLayout)","[72, 91]","{'A386': [(73, 74), (77, 77), (82, 83), (85, 85), (91, 91)], 'A305': [(86, 90)], 'A298': [(72, 72), (78, 81)], 'A333': [(75, 76)], 'A295': [(84, 84)]}","{'A386': 0.35, 'A305': 0.25, 'A298': 0.25, 'A333': 0.1, 'A295': 0.05}",A386,,"    @Override
    protected void setupMetadata(final LayoutInflater inflater,
                                 final LinearLayout layout) {
        // There is no upload date available for channels, so hide the relevant UI element
        binding.detailUploadDateView.setVisibility(View.GONE);

        if (channelInfo == null) {
            return;
        }

        if (channelInfo.getSubscriberCount() != UNKNOWN_SUBSCRIBER_COUNT) {
            addMetadataItem(inflater, layout, false, R.string.metadata_subscribers,
                    Localization.localizeNumber(channelInfo.getSubscriberCount()));
        }

        addImagesMetadataItem(inflater, layout, R.string.metadata_avatars,
                channelInfo.getAvatars());
        addImagesMetadataItem(inflater, layout, R.string.metadata_banners,
                channelInfo.getBanners());
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[65, 71]","{'A305': [(65, 71)]}",{'A305': 1.0},A305,,"    @Nullable
    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_comments, container, false);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,onDestroyView,void onDestroyView(),"[73, 77]","{'A305': [(73, 77)]}",{'A305': 1.0},A305,,"    @Override
    public void onDestroyView() {
        disposables.clear();
        super.onDestroyView();
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,getListHeaderSupplier,Supplier<View> getListHeaderSupplier(),"[79, 117]","{'A305': [(79, 113), (115, 117)], 'A417': [(114, 114)]}","{'A305': 0.9743589743589743, 'A417': 0.02564102564102564}",A305,,"    @Override
    protected Supplier<View> getListHeaderSupplier() {
        return () -> {
            final CommentRepliesHeaderBinding binding = CommentRepliesHeaderBinding
                    .inflate(activity.getLayoutInflater(), itemsList, false);
            final CommentsInfoItem item = commentsInfoItem;

            // load the author avatar
            PicassoHelper.loadAvatar(item.getUploaderAvatars()).into(binding.authorAvatar);
            binding.authorAvatar.setVisibility(ImageStrategy.shouldLoadImages()
                    ? View.VISIBLE : View.GONE);

            // setup author name and comment date
            binding.authorName.setText(item.getUploaderName());
            binding.uploadDate.setText(Localization.relativeTimeOrTextual(
                    getContext(), item.getUploadDate(), item.getTextualUploadDate()));
            binding.authorTouchArea.setOnClickListener(
                    v -> NavigationHelper.openCommentAuthorIfPresent(requireActivity(), item));

            // setup like count, hearted and pinned
            binding.thumbsUpCount.setText(
                    Localization.likeCount(requireContext(), item.getLikeCount()));
            // for heartImage goneMarginEnd was used, but there is no way to tell ConstraintLayout
            // not to use a different margin only when both the next two views are gone
            ((ConstraintLayout.LayoutParams) binding.thumbsUpCount.getLayoutParams())
                    .setMarginEnd(DeviceUtils.dpToPx(
                            (item.isHeartedByUploader() || item.isPinned() ? 8 : 16),
                            requireContext()));
            binding.heartImage.setVisibility(item.isHeartedByUploader() ? View.VISIBLE : View.GONE);
            binding.pinnedImage.setVisibility(item.isPinned() ? View.VISIBLE : View.GONE);

            // setup comment content
            TextLinkifier.fromDescription(binding.commentContent, item.getCommentText(),
                    HtmlCompat.FROM_HTML_MODE_LEGACY, getServiceById(item.getServiceId()),
                    item.getUrl(), disposables, null);
            binding.commentContent.setMovementMethod(LongPressLinkMovementMethod.getInstance());
            return binding.getRoot();
        };
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,writeTo,void writeTo(Queue<Object>),"[124, 128]","{'A305': [(124, 128)]}",{'A305': 1.0},A305,,"    @Override
    public void writeTo(final Queue<Object> objectsToSave) {
        super.writeTo(objectsToSave);
        objectsToSave.add(commentsInfoItem);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,readFrom,void readFrom(Queue<Object>),"[130, 134]","{'A305': [(130, 134)]}",{'A305': 1.0},A305,,"    @Override
    public void readFrom(@NonNull final Queue<Object> savedObjects) throws Exception {
        super.readFrom(savedObjects);
        commentsInfoItem = (CommentsInfoItem) savedObjects.poll();
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,loadResult,Single<CommentRepliesInfo> loadResult(boolean),"[141, 146]","{'A305': [(141, 146)]}",{'A305': 1.0},A305,,"    @Override
    protected Single<CommentRepliesInfo> loadResult(final boolean forceLoad) {
        return Single.fromCallable(() -> new CommentRepliesInfo(commentsInfoItem,
                // the reply count string will be shown as the activity title
                Localization.replyCount(requireContext(), commentsInfoItem.getReplyCount())));
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,loadMoreItemsLogic,Single<ListExtractor.InfoItemsPage<CommentsInfoItem>> loadMoreItemsLogic(),"[148, 154]","{'A305': [(148, 154)]}",{'A305': 1.0},A305,,"    @Override
    protected Single<ListExtractor.InfoItemsPage<CommentsInfoItem>> loadMoreItemsLogic() {
        // commentsInfoItem.getUrl() should contain the url of the original
        // ListInfo<CommentsInfoItem>, which should be the stream url
        return ExtractorHelper.getMoreCommentItems(
                serviceId, commentsInfoItem.getUrl(), currentNextPage);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,getItemViewMode,ItemViewMode getItemViewMode(),"[161, 164]","{'A305': [(161, 164)]}",{'A305': 1.0},A305,,"    @Override
    protected ItemViewMode getItemViewMode() {
        return ItemViewMode.LIST;
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentRepliesFragment.java,CommentRepliesFragment,getCommentsInfoItem,CommentsInfoItem getCommentsInfoItem(),"[169, 171]","{'A298': [(169, 171)]}",{'A298': 1.0},A298,,"    public CommentsInfoItem getCommentsInfoItem() {
        return commentsInfoItem;
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,getInstance,"CommentsFragment getInstance(int,String,String)","[32, 37]","{'A289': [(35, 37)], 'A294': [(33, 34)], 'A305': [(32, 32)]}","{'A289': 0.5, 'A294': 0.3333333333333333, 'A305': 0.16666666666666666}",A289,,"    public static CommentsFragment getInstance(final int serviceId, final String url,
                                               final String name) {
        final CommentsFragment instance = new CommentsFragment();
        instance.setInitialData(serviceId, url, name);
        return instance;
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,initViews,"void initViews(View,Bundle)","[43, 48]","{'A300': [(43, 48)]}",{'A300': 1.0},A300,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        emptyStateDesc = rootView.findViewById(R.id.empty_state_desc);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[54, 59]","{'A289': [(54, 54), (58, 59)], 'A294': [(55, 57)]}","{'A289': 0.5, 'A294': 0.5}",A289,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_comments, container, false);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,onDestroy,void onDestroy(),"[61, 65]","{'A289': [(61, 63), (65, 65)], 'A305': [(64, 64)]}","{'A289': 0.8, 'A305': 0.2}",A289,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        disposables.clear();
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,loadMoreItemsLogic,Single<ListExtractor.InfoItemsPage<CommentsInfoItem>> loadMoreItemsLogic(),"[71, 74]","{'A289': [(71, 71), (74, 74)], 'A294': [(73, 73)], 'A305': [(72, 72)]}","{'A289': 0.5, 'A294': 0.25, 'A305': 0.25}",A289,,"    @Override
    protected Single<ListExtractor.InfoItemsPage<CommentsInfoItem>> loadMoreItemsLogic() {
        return ExtractorHelper.getMoreCommentItems(serviceId, currentInfo, currentNextPage);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,loadResult,Single<CommentsInfo> loadResult(boolean),"[76, 79]","{'A289': [(76, 76), (78, 79)], 'A294': [(77, 77)]}","{'A289': 0.75, 'A294': 0.25}",A289,,"    @Override
    protected Single<CommentsInfo> loadResult(final boolean forceLoad) {
        return ExtractorHelper.getCommentsInfo(serviceId, url, forceLoad);
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,handleResult,void handleResult(CommentsInfo),"[85, 96]","{'A289': [(85, 85), (87, 87), (96, 96)], 'A300': [(88, 93)], 'A294': [(86, 86)], 'A295': [(94, 95)]}","{'A289': 0.25, 'A300': 0.5, 'A294': 0.08333333333333333, 'A295': 0.16666666666666666}",A300,,"    @Override
    public void handleResult(@NonNull final CommentsInfo result) {
        super.handleResult(result);

        emptyStateDesc.setText(
                result.isCommentsDisabled()
                        ? R.string.comments_are_disabled
                        : R.string.no_comments);

        ViewUtils.slideUp(requireView(), 120, 150, 0.06f);
        disposables.clear();
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,setTitle,void setTitle(String),"[102, 103]","{'A289': [(102, 102)], 'A294': [(103, 103)]}","{'A289': 0.5, 'A294': 0.5}",A289,,"    @Override
    public void setTitle(final String title) { }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[105, 107]","{'A289': [(105, 105)], 'A299': [(106, 107)]}","{'A289': 0.3333333333333333, 'A299': 0.6666666666666666}",A299,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) { }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,getItemViewMode,ItemViewMode getItemViewMode(),"[109, 112]","{'A289': [(109, 109), (112, 112)], 'A339': [(110, 111)]}","{'A289': 0.5, 'A339': 0.5}",A289,,"    @Override
    protected ItemViewMode getItemViewMode() {
        return ItemViewMode.LIST;
    }
"
org.schabi.newpipe.fragments.list.comments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/comments/CommentsFragment.java,CommentsFragment,scrollToComment,boolean scrollToComment(CommentsInfoItem),"[114, 122]","{'A305': [(114, 121)], 'A298': [(122, 122)]}","{'A305': 0.8888888888888888, 'A298': 0.1111111111111111}",A305,,"    public boolean scrollToComment(final CommentsInfoItem comment) {
        final int position = infoListAdapter.getItemsList().indexOf(comment);
        if (position < 0) {
            return false;
        }

        itemsList.scrollToPosition(position);
        return true;
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getInstance,"PlaylistFragment getInstance(int,String,String)","[95, 100]","{'A301': [(99, 100)], 'A302': [(98, 98)], 'A294': [(95, 97)]}","{'A301': 0.3333333333333333, 'A302': 0.16666666666666666, 'A294': 0.5}",A294,,"    public static PlaylistFragment getInstance(final int serviceId, final String url,
                                               final String name) {
        final PlaylistFragment instance = new PlaylistFragment();
        instance.setInitialData(serviceId, url, name);
        return instance;
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onCreate,void onCreate(Bundle),"[110, 117]","{'A301': [(110, 110)], 'A294': [(111, 111), (115, 116)], 'A310': [(112, 114), (117, 117)]}","{'A301': 0.125, 'A294': 0.375, 'A310': 0.5}",A310,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        disposables = new CompositeDisposable();
        isBookmarkButtonReady = new AtomicBoolean(false);
        remotePlaylistManager = new RemotePlaylistManager(NewPipeDatabase
                .getInstance(requireContext()));
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[119, 124]","{'A301': [(123, 124)], 'A294': [(120, 122)], 'A310': [(119, 119)]}","{'A301': 0.3333333333333333, 'A294': 0.5, 'A310': 0.16666666666666666}",A294,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_playlist, container, false);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getListHeaderSupplier,Supplier<View> getListHeaderSupplier(),"[130, 137]","{'A301': [(137, 137)], 'A300': [(131, 131), (136, 136)], 'A310': [(135, 135)], 'A295': [(130, 130), (132, 134)]}","{'A301': 0.125, 'A300': 0.25, 'A310': 0.125, 'A295': 0.5}",A295,,"    @Override
    protected Supplier<View> getListHeaderSupplier() {
        headerBinding = PlaylistHeaderBinding
                .inflate(activity.getLayoutInflater(), itemsList, false);
        playlistControlBinding = headerBinding.playlistControl;

        return headerBinding::getRoot;
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,initViews,"void initViews(View,Bundle)","[139, 146]","{'A301': [(139, 139), (141, 142), (146, 146)], 'A294': [(140, 140), (145, 145)], 'A339': [(143, 144)]}","{'A301': 0.5, 'A294': 0.25, 'A339': 0.25}",A301,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        // Is mini variant still relevant?
        // Only the remote playlist screen uses it now
        infoListAdapter.setUseMiniVariant(true);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getPlayQueueStartingAt,PlayQueue getPlayQueueStartingAt(StreamInfoItem),"[148, 150]","{'A305': [(149, 150)], 'A294': [(148, 148)]}","{'A305': 0.6666666666666666, 'A294': 0.3333333333333333}",A305,,"    private PlayQueue getPlayQueueStartingAt(final StreamInfoItem infoItem) {
        return getPlayQueue(Math.max(infoListAdapter.getItemsList().indexOf(infoItem), 0));
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,showInfoItemDialog,void showInfoItemDialog(StreamInfoItem),"[152, 169]","{'A298': [(153, 153), (155, 167)], 'A305': [(152, 152), (154, 154), (169, 169)], 'A294': [(168, 168)]}","{'A298': 0.7777777777777778, 'A305': 0.16666666666666666, 'A294': 0.05555555555555555}",A298,,"    @Override
    protected void showInfoItemDialog(final StreamInfoItem item) {
        final Context context = getContext();
        try {
            final InfoItemDialog.Builder dialogBuilder =
                    new InfoItemDialog.Builder(getActivity(), context, this, item);

            dialogBuilder
                    .setAction(
                            StreamDialogDefaultEntry.START_HERE_ON_BACKGROUND,
                            (f, infoItem) -> NavigationHelper.playOnBackgroundPlayer(
                                    context, getPlayQueueStartingAt(infoItem), true))
                    .create()
                    .show();
        } catch (final IllegalArgumentException e) {
            InfoItemDialog.Builder.reportErrorDuringInitialization(e, item);
        }
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[171, 183]","{'A302': [(171, 171), (178, 179)], 'A294': [(174, 177)], 'A299': [(172, 173)], 'A310': [(180, 183)]}","{'A302': 0.23076923076923078, 'A294': 0.3076923076923077, 'A299': 0.15384615384615385, 'A310': 0.3076923076923077}",A294,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                    + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
        }
        super.onCreateOptionsMenu(menu, inflater);
        inflater.inflate(R.menu.menu_playlist, menu);

        playlistBookmarkButton = menu.findItem(R.id.menu_item_bookmark);
        updateBookmarkButtons();
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onDestroyView,void onDestroyView(),"[185, 203]","{'A294': [(191, 193), (195, 200)], 'A310': [(185, 186), (190, 190), (194, 194), (201, 203)], 'A295': [(187, 189)]}","{'A294': 0.47368421052631576, 'A310': 0.3684210526315789, 'A295': 0.15789473684210525}",A294,,"    @Override
    public void onDestroyView() {
        headerBinding = null;
        playlistControlBinding = null;

        super.onDestroyView();
        if (isBookmarkButtonReady != null) {
            isBookmarkButtonReady.set(false);
        }

        if (disposables != null) {
            disposables.clear();
        }
        if (bookmarkReactor != null) {
            bookmarkReactor.cancel();
        }

        bookmarkReactor = null;
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onDestroy,void onDestroy(),"[205, 217]","{'A302': [(217, 217)], 'A294': [(209, 211)], 'A310': [(205, 208), (212, 216)]}","{'A302': 0.07692307692307693, 'A294': 0.23076923076923078, 'A310': 0.6923076923076923}",A310,,"    @Override
    public void onDestroy() {
        super.onDestroy();

        if (disposables != null) {
            disposables.dispose();
        }

        disposables = null;
        remotePlaylistManager = null;
        playlistEntity = null;
        isBookmarkButtonReady = null;
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,loadMoreItemsLogic,Single<ListExtractor.InfoItemsPage<StreamInfoItem>> loadMoreItemsLogic(),"[223, 226]","{'A301': [(223, 223), (226, 226)], 'A305': [(224, 224)], 'A294': [(225, 225)]}","{'A301': 0.5, 'A305': 0.25, 'A294': 0.25}",A301,,"    @Override
    protected Single<ListExtractor.InfoItemsPage<StreamInfoItem>> loadMoreItemsLogic() {
        return ExtractorHelper.getMorePlaylistItems(serviceId, url, currentNextPage);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,loadResult,Single<PlaylistInfo> loadResult(boolean),"[228, 231]","{'A301': [(228, 228), (231, 231)], 'A302': [(230, 230)], 'A294': [(229, 229)]}","{'A301': 0.5, 'A302': 0.25, 'A294': 0.25}",A301,,"    @Override
    protected Single<PlaylistInfo> loadResult(final boolean forceLoad) {
        return ExtractorHelper.getPlaylistInfo(serviceId, url, forceLoad);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[233, 266]","{'A305': [(236, 238), (240, 240), (243, 244)], 'A302': [(233, 233), (235, 235), (239, 239), (241, 241), (245, 245), (262, 266)], 'A294': [(234, 234)], 'A310': [(242, 242), (246, 248)], 'A418': [(249, 249), (261, 261)], 'A344': [(250, 260)]}","{'A305': 0.17647058823529413, 'A302': 0.29411764705882354, 'A294': 0.029411764705882353, 'A310': 0.11764705882352941, 'A418': 0.058823529411764705, 'A344': 0.3235294117647059}",A344,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        switch (item.getItemId()) {
            case R.id.action_settings:
                NavigationHelper.openSettings(requireContext());
                break;
            case R.id.menu_item_openInBrowser:
                ShareUtils.openUrlInBrowser(requireContext(), url);
                break;
            case R.id.menu_item_share:
                ShareUtils.shareText(requireContext(), name, url,
                        currentInfo == null ? List.of() : currentInfo.getThumbnails());
                break;
            case R.id.menu_item_bookmark:
                onBookmarkClicked();
                break;
            case R.id.menu_item_append_playlist:
                if (currentInfo != null) {
                    disposables.add(PlaylistDialog.createCorrespondingDialog(
                            getContext(),
                            getPlayQueue()
                                    .getStreams()
                                    .stream()
                                    .map(StreamEntity::new)
                                    .collect(Collectors.toList()),
                            dialog -> dialog.show(getFM(), TAG)
                    ));
                }
                break;
            default:
                return super.onOptionsItemSelected(item);
        }
        return true;
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,showLoading,void showLoading(),"[273, 281]","{'A301': [(273, 275), (278, 278), (281, 281)], 'A305': [(277, 277), (279, 279)], 'A295': [(276, 276), (280, 280)]}","{'A301': 0.5555555555555556, 'A305': 0.2222222222222222, 'A295': 0.2222222222222222}",A301,,"    @Override
    public void showLoading() {
        super.showLoading();
        animate(headerBinding.getRoot(), false, 200);
        animateHideRecyclerViewAllowingScrolling(itemsList);

        PicassoHelper.cancelTag(PICASSO_PLAYLIST_TAG);
        animate(headerBinding.uploaderLayout, false, 200);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,handleNextItems,void handleNextItems(ListExtractor.InfoItemsPage),"[283, 287]","{'A363': [(283, 287)]}",{'A363': 1.0},A363,,"    @Override
    public void handleNextItems(final ListExtractor.InfoItemsPage result) {
        super.handleNextItems(result);
        setStreamCountAndOverallDuration(result.getItems(), !result.hasNextPage());
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,handleResult,void handleResult(PlaylistInfo),"[289, 373]","{'A301': [(289, 292), (308, 308), (311, 312), (336, 336), (364, 364)], 'A298': [(337, 354), (356, 360), (372, 372)], 'A305': [(305, 305), (315, 318), (329, 333), (362, 363)], 'A302': [(301, 301), (306, 307), (314, 314)], 'A294': [(296, 297), (302, 304), (309, 309)], 'A299': [(319, 322)], 'A310': [(366, 371)], 'A295': [(293, 295), (298, 298), (300, 300), (310, 310), (313, 313), (323, 326), (328, 328)], 'A390': [(365, 365), (373, 373)], 'A363': [(334, 335)], 'A324': [(299, 299), (361, 361)], 'A312': [(327, 327)], 'A419': [(355, 355)]}","{'A301': 0.10588235294117647, 'A298': 0.2823529411764706, 'A305': 0.1411764705882353, 'A302': 0.047058823529411764, 'A294': 0.07058823529411765, 'A299': 0.047058823529411764, 'A310': 0.07058823529411765, 'A295': 0.1411764705882353, 'A390': 0.023529411764705882, 'A363': 0.023529411764705882, 'A324': 0.023529411764705882, 'A312': 0.011764705882352941, 'A419': 0.011764705882352941}",A298,,"    @Override
    public void handleResult(@NonNull final PlaylistInfo result) {
        super.handleResult(result);

        animate(headerBinding.getRoot(), true, 100);
        animate(headerBinding.uploaderLayout, true, 300);
        headerBinding.uploaderLayout.setOnClickListener(null);
        // If we have an uploader put them into the UI
        if (!TextUtils.isEmpty(result.getUploaderName())) {
            headerBinding.uploaderName.setText(result.getUploaderName());
            if (!TextUtils.isEmpty(result.getUploaderUrl())) {
                headerBinding.uploaderLayout.setOnClickListener(v -> {
                    try {
                        NavigationHelper.openChannelFragment(getFM(), result.getServiceId(),
                                result.getUploaderUrl(), result.getUploaderName());
                    } catch (final Exception e) {
                        ErrorUtil.showUiErrorSnackbar(this, ""Opening channel fragment"", e);
                    }
                });
            }
        } else { // Otherwise say we have no uploader
            headerBinding.uploaderName.setText(R.string.playlist_no_uploader);
        }

        playlistControlBinding.getRoot().setVisibility(View.VISIBLE);

        if (result.getServiceId() == ServiceList.YouTube.getServiceId()
                && (YoutubeParsingHelper.isYoutubeMixId(result.getId())
                || YoutubeParsingHelper.isYoutubeMusicMixId(result.getId()))) {
            // this is an auto-generated playlist (e.g. Youtube mix), so a radio is shown
            final ShapeAppearanceModel model = ShapeAppearanceModel.builder()
                    .setAllCorners(CornerFamily.ROUNDED, 0f)
                    .build(); // this turns the image back into a square
            headerBinding.uploaderAvatarView.setShapeAppearanceModel(model);
            headerBinding.uploaderAvatarView.setStrokeColor(AppCompatResources
                    .getColorStateList(requireContext(), R.color.transparent_background_color));
            headerBinding.uploaderAvatarView.setImageDrawable(
                    AppCompatResources.getDrawable(requireContext(),
                    R.drawable.ic_radio)
            );
        } else {
            PicassoHelper.loadAvatar(result.getUploaderAvatars()).tag(PICASSO_PLAYLIST_TAG)
                    .into(headerBinding.uploaderAvatarView);
        }

        streamCount = result.getStreamCount();
        setStreamCountAndOverallDuration(result.getRelatedItems(), !result.hasNextPage());

        final Description description = result.getDescription();
        if (description != null && description != Description.EMPTY_DESCRIPTION
                && !isBlank(description.getContent())) {
            final TextEllipsizer ellipsizer = new TextEllipsizer(
                    headerBinding.playlistDescription, 5, getServiceById(result.getServiceId()));
            ellipsizer.setStateChangeListener(isEllipsized ->
                headerBinding.playlistDescriptionReadMore.setText(
                        Boolean.TRUE.equals(isEllipsized) ? R.string.show_more : R.string.show_less
                ));
            ellipsizer.setOnContentChanged(canBeEllipsized -> {
                headerBinding.playlistDescriptionReadMore.setVisibility(
                        Boolean.TRUE.equals(canBeEllipsized) ? View.VISIBLE : View.GONE);
                if (Boolean.TRUE.equals(canBeEllipsized)) {
                    ellipsizer.ellipsize();
                }
            });
            ellipsizer.setContent(description);
            headerBinding.playlistDescriptionReadMore.setOnClickListener(v -> ellipsizer.toggle());
            headerBinding.playlistDescription.setOnClickListener(v -> ellipsizer.toggle());
        } else {
            headerBinding.playlistDescription.setVisibility(View.GONE);
            headerBinding.playlistDescriptionReadMore.setVisibility(View.GONE);
        }

        if (!result.getErrors().isEmpty()) {
            showSnackBarError(new ErrorInfo(result.getErrors(), UserAction.REQUESTED_PLAYLIST,
                    result.getUrl(), result));
        }

        remotePlaylistManager.getPlaylist(result)
                .flatMap(lists -> getUpdateProcessor(lists, result), (lists, id) -> lists)
                .onBackpressureLatest()
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(getPlaylistBookmarkSubscriber());

        PlayButtonHelper.initPlaylistControlClickListener(activity, playlistControlBinding, this);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getPlayQueue,PlayQueue getPlayQueue(),"[375, 377]","{'A298': [(375, 375)], 'A310': [(376, 377)]}","{'A298': 0.3333333333333333, 'A310': 0.6666666666666666}",A310,,"    public PlayQueue getPlayQueue() {
        return getPlayQueue(0);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getPlayQueue,PlayQueue getPlayQueue(int),"[379, 393]","{'A302': [(380, 380), (383, 385), (390, 390)], 'A294': [(381, 382), (389, 389)], 'A310': [(379, 379), (386, 386), (391, 391)], 'A390': [(392, 393)], 'A324': [(387, 388)]}","{'A302': 0.3333333333333333, 'A294': 0.2, 'A310': 0.2, 'A390': 0.13333333333333333, 'A324': 0.13333333333333333}",A302,,"    private PlayQueue getPlayQueue(final int index) {
        final List<StreamInfoItem> infoItems = new ArrayList<>();
        for (final InfoItem i : infoListAdapter.getItemsList()) {
            if (i instanceof StreamInfoItem) {
                infoItems.add((StreamInfoItem) i);
            }
        }
        return new PlaylistPlayQueue(
                currentInfo.getServiceId(),
                currentInfo.getUrl(),
                currentInfo.getNextPage(),
                infoItems,
                index
        );
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getUpdateProcessor,"Flowable<Integer> getUpdateProcessor(List<PlaylistRemoteEntity>,PlaylistInfo)","[399, 413]","{'A294': [(399, 401), (403, 405), (407, 410)], 'A310': [(402, 402), (406, 406), (411, 413)]}","{'A294': 0.6666666666666666, 'A310': 0.3333333333333333}",A294,,"    private Flowable<Integer> getUpdateProcessor(
            @NonNull final List<PlaylistRemoteEntity> playlists,
            @NonNull final PlaylistInfo result) {
        final Flowable<Integer> noItemToUpdate = Flowable.just(/*noItemToUpdate=*/-1);
        if (playlists.isEmpty()) {
            return noItemToUpdate;
        }

        final PlaylistRemoteEntity playlistRemoteEntity = playlists.get(0);
        if (playlistRemoteEntity.isIdenticalTo(result)) {
            return noItemToUpdate;
        }

        return remotePlaylistManager.onUpdate(playlists.get(0).getUid(), result).toFlowable();
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,getPlaylistBookmarkSubscriber,Subscriber<List<PlaylistRemoteEntity>> getPlaylistBookmarkSubscriber(),"[415, 447]","{'A300': [(416, 416)], 'A305': [(439, 441)], 'A294': [(418, 421), (427, 427), (433, 435), (445, 445)], 'A310': [(415, 415), (417, 417), (422, 426), (428, 432), (436, 438), (442, 444), (446, 447)]}","{'A300': 0.030303030303030304, 'A305': 0.09090909090909091, 'A294': 0.2727272727272727, 'A310': 0.6060606060606061}",A310,,"    private Subscriber<List<PlaylistRemoteEntity>> getPlaylistBookmarkSubscriber() {
        return new Subscriber<>() {
            @Override
            public void onSubscribe(final Subscription s) {
                if (bookmarkReactor != null) {
                    bookmarkReactor.cancel();
                }
                bookmarkReactor = s;
                bookmarkReactor.request(1);
            }

            @Override
            public void onNext(final List<PlaylistRemoteEntity> playlist) {
                playlistEntity = playlist.isEmpty() ? null : playlist.get(0);

                updateBookmarkButtons();
                isBookmarkButtonReady.set(true);

                if (bookmarkReactor != null) {
                    bookmarkReactor.request(1);
                }
            }

            @Override
            public void onError(final Throwable throwable) {
                showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                        ""Get playlist bookmarks""));
            }

            @Override
            public void onComplete() { }
        };
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onSubscribe,void onSubscribe(Subscription),"[417, 424]","{'A294': [(418, 421)], 'A310': [(417, 417), (422, 424)]}","{'A294': 0.5, 'A310': 0.5}",A294,,"            @Override
            public void onSubscribe(final Subscription s) {
                if (bookmarkReactor != null) {
                    bookmarkReactor.cancel();
                }
                bookmarkReactor = s;
                bookmarkReactor.request(1);
            }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onNext,void onNext(List<PlaylistRemoteEntity>),"[426, 436]","{'A294': [(427, 427), (433, 435)], 'A310': [(426, 426), (428, 432), (436, 436)]}","{'A294': 0.36363636363636365, 'A310': 0.6363636363636364}",A310,,"            @Override
            public void onNext(final List<PlaylistRemoteEntity> playlist) {
                playlistEntity = playlist.isEmpty() ? null : playlist.get(0);

                updateBookmarkButtons();
                isBookmarkButtonReady.set(true);

                if (bookmarkReactor != null) {
                    bookmarkReactor.request(1);
                }
            }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onError,void onError(Throwable),"[438, 442]","{'A305': [(439, 441)], 'A310': [(438, 438), (442, 442)]}","{'A305': 0.6, 'A310': 0.4}",A305,,"            @Override
            public void onError(final Throwable throwable) {
                showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                        ""Get playlist bookmarks""));
            }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onComplete,void onComplete(),"[444, 445]","{'A294': [(445, 445)], 'A310': [(444, 444)]}","{'A294': 0.5, 'A310': 0.5}",A294,,"            @Override
            public void onComplete() { }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,setTitle,void setTitle(String),"[449, 455]","{'A301': [(449, 449), (451, 451), (455, 455)], 'A305': [(452, 454)], 'A294': [(450, 450)]}","{'A301': 0.42857142857142855, 'A305': 0.42857142857142855, 'A294': 0.14285714285714285}",A301,,"    @Override
    public void setTitle(final String title) {
        super.setTitle(title);
        if (headerBinding != null) {
            headerBinding.playlistTitleView.setText(title);
        }
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,onBookmarkClicked,void onBookmarkClicked(),"[457, 483]","{'A305': [(468, 470), (475, 477), (479, 479)], 'A294': [(458, 459), (461, 461)], 'A310': [(457, 457), (460, 460), (462, 467), (471, 474), (478, 478), (480, 483)]}","{'A305': 0.25925925925925924, 'A294': 0.1111111111111111, 'A310': 0.6296296296296297}",A310,,"    private void onBookmarkClicked() {
        if (isBookmarkButtonReady == null || !isBookmarkButtonReady.get()
                || remotePlaylistManager == null) {
            return;
        }

        final Disposable action;

        if (currentInfo != null && playlistEntity == null) {
            action = remotePlaylistManager.onBookmark(currentInfo)
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(ignored -> { /* Do nothing */ }, throwable ->
                            showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                                    ""Adding playlist bookmark"")));
        } else if (playlistEntity != null) {
            action = remotePlaylistManager.deletePlaylist(playlistEntity.getUid())
                    .observeOn(AndroidSchedulers.mainThread())
                    .doFinally(() -> playlistEntity = null)
                    .subscribe(ignored -> { /* Do nothing */ }, throwable ->
                            showError(new ErrorInfo(throwable, UserAction.REQUESTED_BOOKMARK,
                                    ""Deleting playlist bookmark"")));
        } else {
            action = Disposable.empty();
        }

        disposables.add(action);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,updateBookmarkButtons,void updateBookmarkButtons(),"[485, 498]","{'A294': [(486, 488), (493, 494)], 'A310': [(485, 485), (489, 489), (492, 492), (495, 495), (497, 498)], 'A312': [(490, 491), (496, 496)]}","{'A294': 0.35714285714285715, 'A310': 0.42857142857142855, 'A312': 0.21428571428571427}",A310,,"    private void updateBookmarkButtons() {
        if (playlistBookmarkButton == null || activity == null) {
            return;
        }

        final int drawable = playlistEntity == null
                ? R.drawable.ic_playlist_add : R.drawable.ic_playlist_add_check;

        final int titleRes = playlistEntity == null
                ? R.string.bookmark_playlist : R.string.unbookmark_playlist;

        playlistBookmarkButton.setIcon(drawable);
        playlistBookmarkButton.setTitle(titleRes);
    }
"
org.schabi.newpipe.fragments.list.playlist,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/playlist/PlaylistFragment.java,PlaylistFragment,setStreamCountAndOverallDuration,"void setStreamCountAndOverallDuration(List<StreamInfoItem>,boolean)","[500, 513]","{'A363': [(500, 513)]}",{'A363': 1.0},A363,,"    private void setStreamCountAndOverallDuration(final List<StreamInfoItem> list,
                                                  final boolean isDurationComplete) {
        if (activity != null && headerBinding != null) {
            playlistOverallDurationSeconds += list.stream()
                    .mapToLong(x -> x.getDuration())
                    .sum();
            headerBinding.playlistStreamCount.setText(
                Localization.concatenateStrings(
                    Localization.localizeStreamCount(activity, streamCount),
                    Localization.getDurationString(playlistOverallDurationSeconds,
                            isDurationComplete, true))
            );
        }
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,getInstance,RelatedItemsFragment getInstance(StreamInfo),"[45, 49]","{'A289': [(47, 49)], 'A397': [(45, 46)]}","{'A289': 0.6, 'A397': 0.4}",A289,,"    public static RelatedItemsFragment getInstance(final StreamInfo info) {
        final RelatedItemsFragment instance = new RelatedItemsFragment();
        instance.setInitialData(info);
        return instance;
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[59, 64]","{'A289': [(59, 59), (64, 64)], 'A294': [(60, 62)], 'A397': [(63, 63)]}","{'A289': 0.3333333333333333, 'A294': 0.5, 'A397': 0.16666666666666666}",A294,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_related_items, container, false);
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,onDestroyView,void onDestroyView(),"[66, 70]","{'A289': [(70, 70)], 'A295': [(66, 69)]}","{'A289': 0.2, 'A295': 0.8}",A295,,"    @Override
    public void onDestroyView() {
        headerBinding = null;
        super.onDestroyView();
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,getListHeaderSupplier,Supplier<View> getListHeaderSupplier(),"[72, 90]","{'A289': [(75, 76), (90, 90)], 'A305': [(74, 74)], 'A295': [(72, 72)], 'A300': [(73, 73), (77, 89)]}","{'A289': 0.15789473684210525, 'A305': 0.05263157894736842, 'A295': 0.05263157894736842, 'A300': 0.7368421052631579}",A300,,"    @Override
    protected Supplier<View> getListHeaderSupplier() {
        if (relatedItemsInfo == null || relatedItemsInfo.getRelatedItems() == null) {
            return null;
        }

        headerBinding = RelatedItemsHeaderBinding
                .inflate(activity.getLayoutInflater(), itemsList, false);

        final SharedPreferences pref = PreferenceManager
                .getDefaultSharedPreferences(requireContext());
        final boolean autoplay = pref.getBoolean(getString(R.string.auto_queue_key), false);
        headerBinding.autoplaySwitch.setChecked(autoplay);
        headerBinding.autoplaySwitch.setOnCheckedChangeListener((compoundButton, b) ->
                PreferenceManager.getDefaultSharedPreferences(requireContext()).edit()
                        .putBoolean(getString(R.string.auto_queue_key), b).apply());

        return headerBinding::getRoot;
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,loadMoreItemsLogic,Single<ListExtractor.InfoItemsPage<InfoItem>> loadMoreItemsLogic(),"[92, 95]","{'A289': [(92, 92), (95, 95)], 'A294': [(94, 94)], 'A305': [(93, 93)]}","{'A289': 0.5, 'A294': 0.25, 'A305': 0.25}",A289,,"    @Override
    protected Single<ListExtractor.InfoItemsPage<InfoItem>> loadMoreItemsLogic() {
        return Single.fromCallable(ListExtractor.InfoItemsPage::emptyPage);
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,loadResult,Single<RelatedItemsInfo> loadResult(boolean),"[101, 104]","{'A294': [(101, 101), (104, 104)], 'A305': [(102, 103)]}","{'A294': 0.5, 'A305': 0.5}",A294,,"    @Override
    protected Single<RelatedItemsInfo> loadResult(final boolean forceLoad) {
        return Single.fromCallable(() -> relatedItemsInfo);
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,showLoading,void showLoading(),"[106, 112]","{'A289': [(106, 108), (112, 112)], 'A294': [(111, 111)], 'A295': [(109, 110)]}","{'A289': 0.5714285714285714, 'A294': 0.14285714285714285, 'A295': 0.2857142857142857}",A289,,"    @Override
    public void showLoading() {
        super.showLoading();
        if (headerBinding != null) {
            headerBinding.getRoot().setVisibility(View.INVISIBLE);
        }
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,handleResult,void handleResult(RelatedItemsInfo),"[114, 123]","{'A289': [(114, 114), (116, 117), (122, 123)], 'A294': [(120, 120)], 'A305': [(115, 115)], 'A295': [(118, 119), (121, 121)]}","{'A289': 0.5, 'A294': 0.1, 'A305': 0.1, 'A295': 0.3}",A289,,"    @Override
    public void handleResult(@NonNull final RelatedItemsInfo result) {
        super.handleResult(result);

        if (headerBinding != null) {
            headerBinding.getRoot().setVisibility(View.VISIBLE);
        }
        ViewUtils.slideUp(requireView(), 120, 96, 0.06f);

    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,setTitle,void setTitle(String),"[129, 132]","{'A289': [(129, 129), (132, 132)], 'A294': [(130, 130)], 'A300': [(131, 131)]}","{'A289': 0.5, 'A294': 0.25, 'A300': 0.25}",A289,,"    @Override
    public void setTitle(final String title) {
        // Nothing to do - override parent
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[134, 138]","{'A289': [(134, 134), (138, 138)], 'A300': [(137, 137)], 'A299': [(135, 136)]}","{'A289': 0.4, 'A300': 0.2, 'A299': 0.4}",A289,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        // Nothing to do - override parent
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,setInitialData,void setInitialData(StreamInfo),"[140, 145]","{'A289': [(141, 141), (145, 145)], 'A294': [(140, 140), (144, 144)], 'A305': [(142, 143)]}","{'A289': 0.3333333333333333, 'A294': 0.3333333333333333, 'A305': 0.3333333333333333}",A289,,"    private void setInitialData(final StreamInfo info) {
        super.setInitialData(info.getServiceId(), info.getUrl(), info.getName());
        if (this.relatedItemsInfo == null) {
            this.relatedItemsInfo = new RelatedItemsInfo(info);
        }
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,onSaveInstanceState,void onSaveInstanceState(Bundle),"[147, 151]","{'A289': [(147, 147), (149, 149), (151, 151)], 'A305': [(148, 148), (150, 150)]}","{'A289': 0.6, 'A305': 0.4}",A289,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        outState.putSerializable(INFO_KEY, relatedItemsInfo);
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,onRestoreInstanceState,void onRestoreInstanceState(Bundle),"[153, 160]","{'A289': [(153, 153), (155, 155), (159, 160)], 'A294': [(154, 154)], 'A305': [(156, 158)]}","{'A289': 0.5, 'A294': 0.125, 'A305': 0.375}",A289,,"    @Override
    protected void onRestoreInstanceState(@NonNull final Bundle savedState) {
        super.onRestoreInstanceState(savedState);
        final Serializable serializable = savedState.getSerializable(INFO_KEY);
        if (serializable instanceof RelatedItemsInfo) {
            this.relatedItemsInfo = (RelatedItemsInfo) serializable;
        }
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,onSharedPreferenceChanged,"void onSharedPreferenceChanged(SharedPreferences,String)","[162, 168]","{'A289': [(162, 162), (168, 168)], 'A294': [(163, 163), (167, 167)], 'A305': [(164, 166)]}","{'A289': 0.2857142857142857, 'A294': 0.2857142857142857, 'A305': 0.42857142857142855}",A305,,"    @Override
    public void onSharedPreferenceChanged(final SharedPreferences sharedPreferences,
                                          final String key) {
        if (headerBinding != null && getString(R.string.auto_queue_key).equals(key)) {
            headerBinding.autoplaySwitch.setChecked(sharedPreferences.getBoolean(key, false));
        }
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,getItemViewMode,ItemViewMode getItemViewMode(),"[170, 178]","{'A289': [(170, 170), (178, 178)], 'A339': [(171, 177)]}","{'A289': 0.2222222222222222, 'A339': 0.7777777777777778}",A339,,"    @Override
    protected ItemViewMode getItemViewMode() {
        ItemViewMode mode = super.getItemViewMode();
        // Only list mode is supported. Either List or card will be used.
        if (mode != ItemViewMode.LIST && mode != ItemViewMode.CARD) {
            mode = ItemViewMode.LIST;
        }
        return mode;
    }
"
org.schabi.newpipe.fragments.list.videos,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/videos/RelatedItemsFragment.java,RelatedItemsFragment,showInfoItemDialog,void showInfoItemDialog(StreamInfoItem),"[180, 200]","{'A420': [(180, 181), (188, 193), (196, 196), (199, 200)], 'A421': [(182, 187), (194, 195), (197, 198)]}","{'A420': 0.5238095238095238, 'A421': 0.47619047619047616}",A420,,"    @Override
    protected void showInfoItemDialog(final StreamInfoItem item) {
        // Try and attach the InfoItemDialog to the parent fragment of the RelatedItemsFragment
        // so that its context is not lost when the RelatedItemsFragment is reinitialized,
        // e.g. when a new stream is loaded in a parent VideoDetailFragment.
        final Fragment parentFragment = getParentFragment();
        if (parentFragment != null) {
            try {
                new InfoItemDialog.Builder(
                        parentFragment.getActivity(),
                        parentFragment.getContext(),
                        parentFragment,
                        item
                ).create().show();
            } catch (final IllegalArgumentException e) {
                InfoItemDialog.Builder.reportErrorDuringInitialization(e, item);
            }
        } else {
            super.showInfoItemDialog(item);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onAttach,void onAttach(Context),"[62, 69]","{'A301': [(62, 62), (64, 69)], 'A305': [(63, 63)]}","{'A301': 0.875, 'A305': 0.125}",A301,,"    @Override
    public void onAttach(@NonNull final Context context) {
        super.onAttach(context);

        if (infoListAdapter == null) {
            infoListAdapter = new InfoListAdapter(activity);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onCreate,void onCreate(Bundle),"[71, 77]","{'A301': [(71, 71), (73, 74), (77, 77)], 'A341': [(75, 76)], 'A294': [(72, 72)]}","{'A301': 0.5714285714285714, 'A341': 0.2857142857142857, 'A294': 0.14285714285714285}",A301,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);
        PreferenceManager.getDefaultSharedPreferences(activity)
                .registerOnSharedPreferenceChangeListener(this);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onDestroy,void onDestroy(),"[79, 87]","{'A301': [(79, 81)], 'A341': [(85, 87)], 'A294': [(82, 84)]}","{'A301': 0.3333333333333333, 'A341': 0.3333333333333333, 'A294': 0.3333333333333333}",A301,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (useDefaultStateSaving) {
            StateSaver.onDestroy(savedState);
        }
        PreferenceManager.getDefaultSharedPreferences(activity)
                .unregisterOnSharedPreferenceChangeListener(this);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onResume,void onResume(),"[89, 99]","{'A301': [(99, 99)], 'A341': [(89, 94), (96, 98)], 'A339': [(95, 95)]}","{'A301': 0.09090909090909091, 'A341': 0.8181818181818182, 'A339': 0.09090909090909091}",A341,,"    @Override
    public void onResume() {
        super.onResume();

        if (updateFlags != 0) {
            if ((updateFlags & LIST_MODE_UPDATE_FLAG) != 0) {
                refreshItemViewMode();
            }
            updateFlags = 0;
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,setUseDefaultStateSaving,void setUseDefaultStateSaving(boolean),"[111, 113]","{'A301': [(113, 113)], 'A294': [(111, 112)]}","{'A301': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"    public void setUseDefaultStateSaving(final boolean useDefaultStateSaving) {
        this.useDefaultStateSaving = useDefaultStateSaving;
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,generateSuffix,String generateSuffix(),"[115, 119]","{'A301': [(115, 119)]}",{'A301': 1.0},A301,,"    @Override
    public String generateSuffix() {
        // Naive solution, but it's good for now (the items don't change)
        return ""."" + infoListAdapter.getItemsList().size() + "".list"";
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,getFocusedPosition,int getFocusedPosition(),"[121, 130]","{'A294': [(127, 127)], 'A305': [(122, 125), (128, 128)], 'A297': [(121, 121), (129, 130)], 'A299': [(126, 126)]}","{'A294': 0.1, 'A305': 0.5, 'A297': 0.3, 'A299': 0.1}",A305,,"    private int getFocusedPosition() {
        try {
            final View focusedItem = itemsList.getFocusedChild();
            final RecyclerView.ViewHolder itemHolder =
                    itemsList.findContainingViewHolder(focusedItem);
            return itemHolder.getBindingAdapterPosition();
        } catch (final NullPointerException e) {
            return -1;
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,writeTo,void writeTo(Queue<Object>),"[132, 140]","{'A301': [(132, 132), (138, 138), (140, 140)], 'A294': [(133, 133)], 'A297': [(134, 137), (139, 139)]}","{'A301': 0.3333333333333333, 'A294': 0.1111111111111111, 'A297': 0.5555555555555556}",A297,,"    @Override
    public void writeTo(final Queue<Object> objectsToSave) {
        if (!useDefaultStateSaving) {
            return;
        }

        objectsToSave.add(infoListAdapter.getItemsList());
        objectsToSave.add(getFocusedPosition());
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,readFrom,void readFrom(Queue<Object>),"[142, 152]","{'A301': [(142, 143), (147, 147), (149, 150)], 'A294': [(144, 144)], 'A297': [(145, 146), (148, 148), (151, 152)]}","{'A301': 0.45454545454545453, 'A294': 0.09090909090909091, 'A297': 0.45454545454545453}",A301,,"    @Override
    @SuppressWarnings(""unchecked"")
    public void readFrom(@NonNull final Queue<Object> savedObjects) throws Exception {
        if (!useDefaultStateSaving) {
            return;
        }

        infoListAdapter.getItemsList().clear();
        infoListAdapter.getItemsList().addAll((List<InfoItem>) savedObjects.poll());
        restoreFocus((Integer) savedObjects.poll());
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,restoreFocus,void restoreFocus(Integer),"[154, 167]","{'A301': [(167, 167)], 'A294': [(160, 160)], 'A297': [(154, 159), (161, 166)]}","{'A301': 0.07142857142857142, 'A294': 0.07142857142857142, 'A297': 0.8571428571428571}",A297,,"    private void restoreFocus(final Integer position) {
        if (position == null || position < 0) {
            return;
        }

        itemsList.post(() -> {
            final RecyclerView.ViewHolder focusedHolder =
                    itemsList.findViewHolderForAdapterPosition(position);

            if (focusedHolder != null) {
                focusedHolder.itemView.requestFocus();
            }
        });
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onSaveInstanceState,void onSaveInstanceState(Bundle),"[169, 176]","{'A301': [(169, 169), (171, 171), (176, 176)], 'A294': [(172, 175)], 'A305': [(170, 170)]}","{'A301': 0.375, 'A294': 0.5, 'A305': 0.125}",A294,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle bundle) {
        super.onSaveInstanceState(bundle);
        if (useDefaultStateSaving) {
            savedState = StateSaver
                    .tryToSave(activity.isChangingConfigurations(), savedState, bundle, this);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onRestoreInstanceState,void onRestoreInstanceState(Bundle),"[178, 184]","{'A301': [(178, 178), (180, 180), (184, 184)], 'A294': [(179, 179), (181, 183)]}","{'A301': 0.42857142857142855, 'A294': 0.5714285714285714}",A294,,"    @Override
    protected void onRestoreInstanceState(@NonNull final Bundle bundle) {
        super.onRestoreInstanceState(bundle);
        if (useDefaultStateSaving) {
            savedState = StateSaver.tryToRestore(bundle, this);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onStop,void onStop(),"[186, 190]","{'A297': [(186, 190)]}",{'A297': 1.0},A297,,"    @Override
    public void onStop() {
        focusedPosition = getFocusedPosition();
        super.onStop();
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onStart,void onStart(),"[192, 196]","{'A297': [(192, 196)]}",{'A297': 1.0},A297,,"    @Override
    public void onStart() {
        super.onStart();
        restoreFocus(focusedPosition);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,getListHeaderSupplier,Supplier<View> getListHeaderSupplier(),"[202, 205]","{'A301': [(204, 205)], 'A295': [(202, 202)], 'A300': [(203, 203)]}","{'A301': 0.5, 'A295': 0.25, 'A300': 0.25}",A301,,"    @Nullable
    protected Supplier<View> getListHeaderSupplier() {
        return null;
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,getListLayoutManager,RecyclerView.LayoutManager getListLayoutManager(),"[207, 209]","{'A301': [(207, 207), (209, 209)], 'A292': [(208, 208)]}","{'A301': 0.6666666666666666, 'A292': 0.3333333333333333}",A301,,"    protected RecyclerView.LayoutManager getListLayoutManager() {
        return new SuperScrollLayoutManager(activity);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,getGridLayoutManager,RecyclerView.LayoutManager getGridLayoutManager(),"[211, 219]","{'A341': [(211, 214), (217, 219)], 'A295': [(215, 215)], 'A297': [(216, 216)]}","{'A341': 0.7777777777777778, 'A295': 0.1111111111111111, 'A297': 0.1111111111111111}",A341,,"    protected RecyclerView.LayoutManager getGridLayoutManager() {
        final Resources resources = activity.getResources();
        int width = resources.getDimensionPixelSize(R.dimen.video_item_grid_thumbnail_image_width);
        width += (24 * resources.getDisplayMetrics().density);
        final int spanCount = Math.floorDiv(resources.getDisplayMetrics().widthPixels, width);
        final GridLayoutManager lm = new GridLayoutManager(activity, spanCount);
        lm.setSpanSizeLookup(infoListAdapter.getSpanSizeLookup(spanCount));
        return lm;
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,refreshItemViewMode,void refreshItemViewMode(),"[224, 230]","{'A339': [(224, 230)]}",{'A339': 1.0},A339,,"    private void refreshItemViewMode() {
        final ItemViewMode itemViewMode = getItemViewMode();
        itemsList.setLayoutManager((itemViewMode == ItemViewMode.GRID)
                ? getGridLayoutManager() : getListLayoutManager());
        infoListAdapter.setItemViewMode(itemViewMode);
        infoListAdapter.notifyDataSetChanged();
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,initViews,"void initViews(View,Bundle)","[232, 245]","{'A301': [(232, 232), (234, 236), (243, 245)], 'A294': [(233, 233)], 'A295': [(238, 238), (242, 242)], 'A339': [(237, 237)], 'A300': [(239, 241)]}","{'A301': 0.5, 'A294': 0.07142857142857142, 'A295': 0.14285714285714285, 'A339': 0.07142857142857142, 'A300': 0.21428571428571427}",A301,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        itemsList = rootView.findViewById(R.id.items_list);
        refreshItemViewMode();

        final Supplier<View> listHeaderSupplier = getListHeaderSupplier();
        if (listHeaderSupplier != null) {
            infoListAdapter.setHeaderSupplier(listHeaderSupplier);
        }

        itemsList.setAdapter(infoListAdapter);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onItemSelected,void onItemSelected(InfoItem),"[247, 251]","{'A301': [(251, 251)], 'A294': [(247, 250)]}","{'A301': 0.2, 'A294': 0.8}",A294,,"    protected void onItemSelected(final InfoItem selectedItem) {
        if (DEBUG) {
            Log.d(TAG, ""onItemSelected() called with: selectedItem = ["" + selectedItem + ""]"");
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,initListeners,void initListeners(),"[253, 292]","{'A301': [(253, 255), (257, 257), (260, 260), (266, 267), (275, 277)], 'A298': [(264, 264)], 'A294': [(258, 258), (263, 263)], 'A295': [(268, 274), (278, 279), (281, 284), (288, 289)], 'A310': [(261, 262), (265, 265)], 'A300': [(256, 256), (287, 287), (290, 292)], 'A302': [(259, 259)], 'A289': [(280, 280), (285, 286)]}","{'A301': 0.25, 'A298': 0.025, 'A294': 0.05, 'A295': 0.375, 'A310': 0.075, 'A300': 0.125, 'A302': 0.025, 'A289': 0.075}",A295,,"    @Override
    protected void initListeners() {
        super.initListeners();
        infoListAdapter.setOnStreamSelectedListener(new OnClickGesture<>() {
            @Override
            public void selected(final StreamInfoItem selectedItem) {
                onStreamSelected(selectedItem);
            }

            @Override
            public void held(final StreamInfoItem selectedItem) {
                showInfoItemDialog(selectedItem);
            }
        });

        infoListAdapter.setOnChannelSelectedListener(selectedItem -> {
            try {
                onItemSelected(selectedItem);
                NavigationHelper.openChannelFragment(getFM(), selectedItem.getServiceId(),
                        selectedItem.getUrl(), selectedItem.getName());
            } catch (final Exception e) {
                ErrorUtil.showUiErrorSnackbar(this, ""Opening channel fragment"", e);
            }
        });

        infoListAdapter.setOnPlaylistSelectedListener(selectedItem -> {
            try {
                onItemSelected(selectedItem);
                NavigationHelper.openPlaylistFragment(getFM(), selectedItem.getServiceId(),
                        selectedItem.getUrl(), selectedItem.getName());
            } catch (final Exception e) {
                ErrorUtil.showUiErrorSnackbar(this, ""Opening playlist fragment"", e);
            }
        });

        infoListAdapter.setOnCommentsSelectedListener(this::onItemSelected);

        // Ensure that there is always a scroll listener (e.g. when rotating the device)
        useNormalItemListScrollListener();
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,selected,void selected(StreamInfoItem),"[257, 260]","{'A301': [(257, 257), (260, 260)], 'A294': [(258, 258)], 'A302': [(259, 259)]}","{'A301': 0.5, 'A294': 0.25, 'A302': 0.25}",A301,,"            @Override
            public void selected(final StreamInfoItem selectedItem) {
                onStreamSelected(selectedItem);
            }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,held,void held(StreamInfoItem),"[262, 265]","{'A298': [(264, 264)], 'A294': [(263, 263)], 'A310': [(262, 262), (265, 265)]}","{'A298': 0.25, 'A294': 0.25, 'A310': 0.5}",A310,,"            @Override
            public void held(final StreamInfoItem selectedItem) {
                showInfoItemDialog(selectedItem);
            }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,useNormalItemListScrollListener,void useNormalItemListScrollListener(),"[297, 303]","{'A300': [(297, 303)]}",{'A300': 1.0},A300,,"    protected void useNormalItemListScrollListener() {
        if (DEBUG) {
            Log.d(TAG, ""useNormalItemListScrollListener called"");
        }
        itemsList.clearOnScrollListeners();
        itemsList.addOnScrollListener(new DefaultItemListOnScrolledDownListener());
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,useInitialItemListLoadScrollListener,void useInitialItemListLoadScrollListener(),"[322, 367]","{'A301': [(326, 326), (328, 328), (365, 367)], 'A300': [(322, 325), (327, 327), (331, 364)], 'A299': [(329, 330)]}","{'A301': 0.10869565217391304, 'A300': 0.8478260869565217, 'A299': 0.043478260869565216}",A300,,"    protected void useInitialItemListLoadScrollListener() {
        if (DEBUG) {
            Log.d(TAG, ""useInitialItemListLoadScrollListener called"");
        }
        itemsList.clearOnScrollListeners();
        itemsList.addOnScrollListener(new DefaultItemListOnScrolledDownListener() {
            @Override
            public void onScrolled(@NonNull final RecyclerView recyclerView,
                                   final int dx, final int dy) {
                super.onScrolled(recyclerView, dx, dy);

                if (dy != 0) {
                    log(""Vertical scroll occurred"");

                    useNormalItemListScrollListener();
                    return;
                }
                if (isLoading.get()) {
                    log(""Still loading data -> Skipping"");
                    return;
                }
                if (!hasMoreItems()) {
                    log(""No more items to load"");

                    useNormalItemListScrollListener();
                    return;
                }
                if (itemsList.canScrollVertically(1)
                        || itemsList.canScrollVertically(-1)) {
                    log(""View is scrollable"");

                    useNormalItemListScrollListener();
                    return;
                }

                log(""Loading more data"");
                loadMoreItems();
            }

            private void log(final String msg) {
                if (DEBUG) {
                    Log.d(TAG, ""initItemListLoadScrollListener - "" + msg);
                }
            }
        });
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onScrolled,"void onScrolled(RecyclerView,int,int)","[328, 359]","{'A301': [(328, 328)], 'A300': [(331, 359)], 'A299': [(329, 330)]}","{'A301': 0.03125, 'A300': 0.90625, 'A299': 0.0625}",A300,,"            @Override
            public void onScrolled(@NonNull final RecyclerView recyclerView,
                                   final int dx, final int dy) {
                super.onScrolled(recyclerView, dx, dy);

                if (dy != 0) {
                    log(""Vertical scroll occurred"");

                    useNormalItemListScrollListener();
                    return;
                }
                if (isLoading.get()) {
                    log(""Still loading data -> Skipping"");
                    return;
                }
                if (!hasMoreItems()) {
                    log(""No more items to load"");

                    useNormalItemListScrollListener();
                    return;
                }
                if (itemsList.canScrollVertically(1)
                        || itemsList.canScrollVertically(-1)) {
                    log(""View is scrollable"");

                    useNormalItemListScrollListener();
                    return;
                }

                log(""Loading more data"");
                loadMoreItems();
            }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,log,void log(String),"[361, 365]","{'A301': [(365, 365)], 'A300': [(361, 364)]}","{'A301': 0.2, 'A300': 0.8}",A300,,"            private void log(final String msg) {
                if (DEBUG) {
                    Log.d(TAG, ""initItemListLoadScrollListener - "" + msg);
                }
            }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment.DefaultItemListOnScrolledDownListener,onScrolledDown,void onScrolledDown(RecyclerView),"[370, 373]","{'A300': [(370, 373)]}",{'A300': 1.0},A300,,"        @Override
        public void onScrolledDown(final RecyclerView recyclerView) {
            onScrollToBottom();
        }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onStreamSelected,void onStreamSelected(StreamInfoItem),"[376, 381]","{'A294': [(376, 376)], 'A305': [(378, 380)], 'A302': [(377, 377), (381, 381)]}","{'A294': 0.16666666666666666, 'A305': 0.5, 'A302': 0.3333333333333333}",A305,,"    private void onStreamSelected(final StreamInfoItem selectedItem) {
        onItemSelected(selectedItem);
        NavigationHelper.openVideoDetailFragment(requireContext(), getFM(),
                selectedItem.getServiceId(), selectedItem.getUrl(), selectedItem.getName(),
                null, false);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onScrollToBottom,void onScrollToBottom(),"[383, 387]","{'A301': [(383, 387)]}",{'A301': 1.0},A301,,"    protected void onScrollToBottom() {
        if (hasMoreItems() && !isLoading.get()) {
            loadMoreItems();
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,showInfoItemDialog,void showInfoItemDialog(StreamInfoItem),"[389, 395]","{'A298': [(389, 393)], 'A310': [(395, 395)], 'A373': [(394, 394)]}","{'A298': 0.7142857142857143, 'A310': 0.14285714285714285, 'A373': 0.14285714285714285}",A298,,"    protected void showInfoItemDialog(final StreamInfoItem item) {
        try {
            new InfoItemDialog.Builder(getActivity(), getContext(), this, item).create().show();
        } catch (final IllegalArgumentException e) {
            InfoItemDialog.Builder.reportErrorDuringInitialization(e, item);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[401, 414]","{'A301': [(401, 401), (408, 408), (410, 411), (413, 414)], 'A294': [(404, 407), (409, 409)], 'A299': [(402, 403), (412, 412)]}","{'A301': 0.42857142857142855, 'A294': 0.35714285714285715, 'A299': 0.21428571428571427}",A301,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateOptionsMenu() called with: ""
                    + ""menu = ["" + menu + ""], inflater = ["" + inflater + ""]"");
        }
        super.onCreateOptionsMenu(menu, inflater);
        final ActionBar supportActionBar = activity.getSupportActionBar();
        if (supportActionBar != null) {
            supportActionBar.setDisplayShowTitleEnabled(true);
            supportActionBar.setDisplayHomeAsUpEnabled(!useAsFrontPage);
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,startLoading,void startLoading(boolean),"[420, 424]","{'A300': [(420, 424)]}",{'A300': 1.0},A300,,"    @Override
    protected void startLoading(final boolean forceLoad) {
        useInitialItemListLoadScrollListener();
        super.startLoading(forceLoad);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,showLoading,void showLoading(),"[434, 438]","{'A305': [(434, 438)]}",{'A305': 1.0},A305,,"    @Override
    public void showLoading() {
        super.showLoading();
        animateHideRecyclerViewAllowingScrolling(itemsList);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,hideLoading,void hideLoading(),"[440, 444]","{'A301': [(440, 442), (444, 444)], 'A295': [(443, 443)]}","{'A301': 0.8, 'A295': 0.2}",A301,,"    @Override
    public void hideLoading() {
        super.hideLoading();
        animate(itemsList, true, 300);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,showEmptyState,void showEmptyState(),"[446, 451]","{'A301': [(446, 449), (451, 451)], 'A305': [(450, 450)]}","{'A301': 0.8333333333333334, 'A305': 0.16666666666666666}",A301,,"    @Override
    public void showEmptyState() {
        super.showEmptyState();
        showListFooter(false);
        animateHideRecyclerViewAllowingScrolling(itemsList);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,showListFooter,void showListFooter(boolean),"[453, 460]","{'A301': [(453, 460)]}",{'A301': 1.0},A301,,"    @Override
    public void showListFooter(final boolean show) {
        itemsList.post(() -> {
            if (infoListAdapter != null && itemsList != null) {
                infoListAdapter.showFooter(show);
            }
        });
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,handleNextItems,void handleNextItems(N),"[462, 465]","{'A301': [(462, 462), (464, 465)], 'A294': [(463, 463)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    @Override
    public void handleNextItems(final N result) {
        isLoading.set(false);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,handleError,void handleError(),"[467, 472]","{'A305': [(467, 472)]}",{'A305': 1.0},A305,,"    @Override
    public void handleError() {
        super.handleError();
        showListFooter(false);
        animateHideRecyclerViewAllowingScrolling(itemsList);
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,onSharedPreferenceChanged,"void onSharedPreferenceChanged(SharedPreferences,String)","[474, 480]","{'A341': [(474, 474), (478, 480)], 'A294': [(475, 476)], 'A305': [(477, 477)]}","{'A341': 0.5714285714285714, 'A294': 0.2857142857142857, 'A305': 0.14285714285714285}",A341,,"    @Override
    public void onSharedPreferenceChanged(final SharedPreferences sharedPreferences,
                                          final String key) {
        if (getString(R.string.list_view_mode_key).equals(key)) {
            updateFlags |= LIST_MODE_UPDATE_FLAG;
        }
    }
"
org.schabi.newpipe.fragments.list,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/BaseListFragment.java,BaseListFragment,getItemViewMode,ItemViewMode getItemViewMode(),"[486, 488]","{'A341': [(488, 488)], 'A339': [(486, 487)]}","{'A341': 0.3333333333333333, 'A339': 0.6666666666666666}",A339,,"    protected ItemViewMode getItemViewMode() {
        return ThemeHelper.getItemViewMode(requireContext());
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/DefaultKioskFragment.java,DefaultKioskFragment,onCreate,void onCreate(Bundle),"[15, 22]","{'A301': [(15, 15), (17, 22)], 'A294': [(16, 16)]}","{'A301': 0.875, 'A294': 0.125}",A301,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        if (serviceId < 0) {
            updateSelectedDefaultKiosk();
        }
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/DefaultKioskFragment.java,DefaultKioskFragment,onResume,void onResume(),"[24, 35]","{'A301': [(24, 28), (32, 35)], 'A294': [(29, 31)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    @Override
    public void onResume() {
        super.onResume();

        if (serviceId != ServiceHelper.getSelectedServiceId(requireContext())) {
            if (currentWorker != null) {
                currentWorker.dispose();
            }
            updateSelectedDefaultKiosk();
            reloadContent();
        }
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/DefaultKioskFragment.java,DefaultKioskFragment,updateSelectedDefaultKiosk,void updateSelectedDefaultKiosk(),"[37, 54]","{'A301': [(37, 48), (53, 54)], 'A305': [(51, 52)], 'A294': [(49, 50)]}","{'A301': 0.7777777777777778, 'A305': 0.1111111111111111, 'A294': 0.1111111111111111}",A301,,"    private void updateSelectedDefaultKiosk() {
        try {
            serviceId = ServiceHelper.getSelectedServiceId(requireContext());

            final KioskList kioskList = NewPipe.getService(serviceId).getKioskList();
            kioskId = kioskList.getDefaultKioskId();
            url = kioskList.getListLinkHandlerFactoryByType(kioskId).fromId(kioskId).getUrl();

            kioskTranslatedName = KioskTranslator.getTranslatedKioskName(kioskId, requireContext());
            name = kioskTranslatedName;

            currentInfo = null;
            currentNextPage = null;
        } catch (final ExtractionException e) {
            showError(new ErrorInfo(e, UserAction.REQUESTED_KIOSK,
                    ""Loading default kiosk for selected service""));
        }
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,getInstance,KioskFragment getInstance(int),"[71, 74]","{'A302': [(72, 72), (74, 74)], 'A294': [(71, 71), (73, 73)]}","{'A302': 0.5, 'A294': 0.5}",A302,,"    public static KioskFragment getInstance(final int serviceId) throws ExtractionException {
        return getInstance(serviceId, NewPipe.getService(serviceId)
                .getKioskList().getDefaultKioskId());
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,getInstance,"KioskFragment getInstance(int,String)","[76, 86]","{'A302': [(77, 77), (81, 86)], 'A294': [(76, 76), (78, 80)]}","{'A302': 0.6363636363636364, 'A294': 0.36363636363636365}",A302,,"    public static KioskFragment getInstance(final int serviceId, final String kioskId)
            throws ExtractionException {
        final KioskFragment instance = new KioskFragment();
        final StreamingService service = NewPipe.getService(serviceId);
        final ListLinkHandlerFactory kioskLinkHandlerFactory = service.getKioskList()
                .getListLinkHandlerFactoryByType(kioskId);
        instance.setInitialData(serviceId,
                kioskLinkHandlerFactory.fromId(kioskId).getUrl(), kioskId);
        instance.kioskId = kioskId;
        return instance;
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,onCreate,void onCreate(Bundle),"[96, 103]","{'A302': [(96, 96), (103, 103)], 'A294': [(97, 97)], 'A301': [(98, 102)]}","{'A302': 0.25, 'A294': 0.125, 'A301': 0.625}",A301,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        kioskTranslatedName = KioskTranslator.getTranslatedKioskName(kioskId, activity);
        name = kioskTranslatedName;
        contentCountry = Localization.getPreferredContentCountry(requireContext());
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,onResume,void onResume(),"[105, 118]","{'A302': [(105, 105), (112, 112), (116, 118)], 'A294': [(114, 114)], 'A305': [(115, 115)], 'A301': [(113, 113)], 'A299': [(106, 111)]}","{'A302': 0.35714285714285715, 'A294': 0.07142857142857142, 'A305': 0.07142857142857142, 'A301': 0.07142857142857142, 'A299': 0.42857142857142855}",A299,,"    @Override
    public void onResume() {
        super.onResume();
        if (!Localization.getPreferredContentCountry(requireContext()).equals(contentCountry)) {
            reloadContent();
        }
        if (useAsFrontPage && activity != null) {
            try {
                setTitle(kioskTranslatedName);
            } catch (final Exception e) {
                showSnackBarError(new ErrorInfo(e, UserAction.UI_ERROR, ""Setting kiosk title""));
            }
        }
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[120, 125]","{'A302': [(120, 120), (125, 125)], 'A294': [(121, 123)], 'A301': [(124, 124)]}","{'A302': 0.3333333333333333, 'A294': 0.5, 'A301': 0.16666666666666666}",A294,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_kiosk, container, false);
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[131, 139]","{'A302': [(131, 131), (134, 134), (136, 139)], 'A294': [(135, 135)], 'A299': [(132, 133)]}","{'A302': 0.6666666666666666, 'A294': 0.1111111111111111, 'A299': 0.2222222222222222}",A302,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
        final ActionBar supportActionBar = activity.getSupportActionBar();
        if (supportActionBar != null && useAsFrontPage) {
            supportActionBar.setDisplayHomeAsUpEnabled(false);
        }
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,loadResult,Single<KioskInfo> loadResult(boolean),"[145, 149]","{'A302': [(145, 145), (149, 149)], 'A294': [(146, 146), (148, 148)], 'A301': [(147, 147)]}","{'A302': 0.4, 'A294': 0.4, 'A301': 0.2}",A302,,"    @Override
    public Single<KioskInfo> loadResult(final boolean forceReload) {
        contentCountry = Localization.getPreferredContentCountry(requireContext());
        return ExtractorHelper.getKioskInfo(serviceId, url, forceReload);
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,loadMoreItemsLogic,Single<ListExtractor.InfoItemsPage<StreamInfoItem>> loadMoreItemsLogic(),"[151, 154]","{'A302': [(151, 151), (154, 154)], 'A294': [(153, 153)], 'A305': [(152, 152)]}","{'A302': 0.5, 'A294': 0.25, 'A305': 0.25}",A302,,"    @Override
    public Single<ListExtractor.InfoItemsPage<StreamInfoItem>> loadMoreItemsLogic() {
        return ExtractorHelper.getMoreKioskItems(serviceId, url, currentNextPage);
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,handleResult,void handleResult(KioskInfo),"[160, 166]","{'A302': [(160, 163), (166, 166)], 'A301': [(164, 164)], 'A289': [(165, 165)]}","{'A302': 0.7142857142857143, 'A301': 0.14285714285714285, 'A289': 0.14285714285714285}",A302,,"    @Override
    public void handleResult(@NonNull final KioskInfo result) {
        super.handleResult(result);

        name = kioskTranslatedName;
        setTitle(kioskTranslatedName);
    }
"
org.schabi.newpipe.fragments.list.kiosk,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/kiosk/KioskFragment.java,KioskFragment,showEmptyState,void showEmptyState(),"[168, 176]","{'A298': [(168, 176)]}",{'A298': 1.0},A298,,"    @Override
    public void showEmptyState() {
        // show ""no live streams"" for live stream kiosk
        super.showEmptyState();
        if (MediaCCCLiveStreamKiosk.KIOSK_ID.equals(currentInfo.getId())
                && ServiceList.MediaCCC.getServiceId() == currentInfo.getServiceId()) {
            setEmptyStateMessage(R.string.no_live_streams);
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionItem.java,SuggestionItem,equals,boolean equals(Object),"[14, 20]","{'A305': [(14, 20)]}",{'A305': 1.0},A305,,"    @Override
    public boolean equals(final Object o) {
        if (o instanceof SuggestionItem) {
            return query.equals(((SuggestionItem) o).query);
        }
        return false;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionItem.java,SuggestionItem,hashCode,int hashCode(),"[22, 25]","{'A305': [(22, 25)]}",{'A305': 1.0},A305,,"    @Override
    public int hashCode() {
        return query.hashCode();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionItem.java,SuggestionItem,toString,String toString(),"[27, 31]","{'A301': [(28, 31)], 'A305': [(27, 27)]}","{'A301': 0.8, 'A305': 0.2}",A301,,"    @NonNull
    @Override
    public String toString() {
        return ""["" + fromHistory + ""→"" + query + ""]"";
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,getInstance,"SearchFragment getInstance(int,String)","[178, 187]","{'A301': [(181, 181), (183, 187)], 'A294': [(178, 179)], 'A302': [(180, 180), (182, 182)]}","{'A301': 0.6, 'A294': 0.2, 'A302': 0.2}",A301,,"    public static SearchFragment getInstance(final int serviceId, final String searchString) {
        final SearchFragment searchFragment = new SearchFragment();
        searchFragment.setQuery(serviceId, searchString, new String[0], """");

        if (!TextUtils.isEmpty(searchString)) {
            searchFragment.setSearchOnResume();
        }

        return searchFragment;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,setSearchOnResume,void setSearchOnResume(),"[192, 194]","{'A301': [(192, 194)]}",{'A301': 1.0},A301,,"    private void setSearchOnResume() {
        wasLoading.set(true);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onAttach,void onAttach(Context),"[200, 210]","{'A301': [(200, 200), (202, 202), (210, 210)], 'A305': [(201, 201), (204, 206)], 'A295': [(208, 208)], 'A302': [(203, 203)], 'A310': [(207, 207), (209, 209)]}","{'A301': 0.2727272727272727, 'A305': 0.36363636363636365, 'A295': 0.09090909090909091, 'A302': 0.09090909090909091, 'A310': 0.18181818181818182}",A305,,"    @Override
    public void onAttach(@NonNull final Context context) {
        super.onAttach(context);

        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(activity);
        showLocalSuggestions = NewPipeSettings.showLocalSearchSuggestions(activity, prefs);
        showRemoteSuggestions = NewPipeSettings.showRemoteSearchSuggestions(activity, prefs);

        suggestionListAdapter = new SuggestionListAdapter();
        historyRecordManager = new HistoryRecordManager(context);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[212, 216]","{'A301': [(212, 212), (215, 216)], 'A294': [(213, 214)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    @Override
    public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,
                             @Nullable final Bundle savedInstanceState) {
        return inflater.inflate(R.layout.fragment_search, container, false);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onViewCreated,"void onViewCreated(View,Bundle)","[218, 233]","{'A301': [(218, 218), (221, 221), (231, 233)], 'A305': [(219, 219)], 'A298': [(220, 220)], 'A327': [(222, 230)]}","{'A301': 0.3125, 'A305': 0.0625, 'A298': 0.0625, 'A327': 0.5625}",A327,,"    @Override
    public void onViewCreated(@NonNull final View rootView, final Bundle savedInstanceState) {
        searchBinding = FragmentSearchBinding.bind(rootView);
        super.onViewCreated(rootView, savedInstanceState);

        updateService();
        // Add the service name to search string hint
        // to make it more obvious which platform is being searched.
        if (service != null) {
            searchEditText.setHint(
                    getString(R.string.search_with_service_name,
                            service.getServiceInfo().getName()));
        }
        showSearchOnStart();
        initSearchListeners();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,updateService,void updateService(),"[235, 241]","{'A305': [(239, 239)], 'A331': [(235, 238), (240, 241)]}","{'A305': 0.14285714285714285, 'A331': 0.8571428571428571}",A331,,"    private void updateService() {
        try {
            service = NewPipe.getService(serviceId);
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(this, ""Getting service for id "" + serviceId, e);
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onStart,void onStart(),"[243, 251]","{'A331': [(243, 251)]}",{'A331': 1.0},A331,,"    @Override
    public void onStart() {
        if (DEBUG) {
            Log.d(TAG, ""onStart() called"");
        }
        super.onStart();

        updateService();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onPause,void onPause(),"[253, 267]","{'A301': [(253, 258), (266, 267)], 'A305': [(265, 265)], 'A294': [(259, 264)]}","{'A301': 0.5333333333333333, 'A305': 0.06666666666666667, 'A294': 0.4}",A301,,"    @Override
    public void onPause() {
        super.onPause();

        wasSearchFocused = searchEditText.hasFocus();

        if (searchDisposable != null) {
            searchDisposable.dispose();
        }
        if (suggestionDisposable != null) {
            suggestionDisposable.dispose();
        }
        disposables.clear();
        hideKeyboardSearch();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onResume,void onResume(),"[269, 309]","{'A301': [(269, 270), (274, 275), (281, 281), (285, 285), (289, 294), (302, 309)], 'A305': [(276, 279), (283, 283), (287, 288), (297, 299)], 'A298': [(300, 300)], 'A294': [(271, 273), (295, 295)], 'A302': [(280, 280), (282, 282), (286, 286), (301, 301)], 'A378': [(296, 296)], 'A299': [(284, 284)]}","{'A301': 0.4878048780487805, 'A305': 0.24390243902439024, 'A298': 0.024390243902439025, 'A294': 0.0975609756097561, 'A302': 0.0975609756097561, 'A378': 0.024390243902439025, 'A299': 0.024390243902439025}",A301,,"    @Override
    public void onResume() {
        if (DEBUG) {
            Log.d(TAG, ""onResume() called"");
        }
        super.onResume();

        if (suggestionDisposable == null || suggestionDisposable.isDisposed()) {
            initSuggestionObserver();
        }

        if (!TextUtils.isEmpty(searchString)) {
            if (wasLoading.getAndSet(false)) {
                search(searchString, contentFilter, sortFilter);
                return;
            } else if (infoListAdapter.getItemsList().isEmpty()) {
                if (savedState == null) {
                    search(searchString, contentFilter, sortFilter);
                    return;
                } else if (!isLoading.get() && !wasSearchFocused && lastPanelError == null) {
                    infoListAdapter.clearStreamItemList();
                    showEmptyState();
                }
            }
        }

        handleSearchSuggestion();

        showMetaInfoInTextView(metaInfo == null ? null : Arrays.asList(metaInfo),
                searchBinding.searchMetaInfoTextView, searchBinding.searchMetaInfoSeparator,
                disposables);

        if (TextUtils.isEmpty(searchString) || wasSearchFocused) {
            showKeyboardSearch();
            showSuggestionsPanel();
        } else {
            hideKeyboardSearch();
            hideSuggestionsPanel();
        }
        wasSearchFocused = false;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onDestroyView,void onDestroyView(),"[311, 320]","{'A301': [(311, 312), (316, 316), (319, 320)], 'A294': [(313, 315)], 'A295': [(317, 318)]}","{'A301': 0.5, 'A294': 0.3, 'A295': 0.2}",A301,,"    @Override
    public void onDestroyView() {
        if (DEBUG) {
            Log.d(TAG, ""onDestroyView() called"");
        }
        unsetSearchListeners();

        searchBinding = null;
        super.onDestroyView();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onDestroy,void onDestroy(),"[322, 332]","{'A301': [(322, 324), (332, 332)], 'A305': [(331, 331)], 'A294': [(325, 330)]}","{'A301': 0.36363636363636365, 'A305': 0.09090909090909091, 'A294': 0.5454545454545454}",A294,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (searchDisposable != null) {
            searchDisposable.dispose();
        }
        if (suggestionDisposable != null) {
            suggestionDisposable.dispose();
        }
        disposables.clear();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onActivityResult,"void onActivityResult(int,int,Intent)","[334, 346]","{'A301': [(334, 334), (345, 346)], 'A305': [(336, 344)], 'A294': [(335, 335)]}","{'A301': 0.23076923076923078, 'A305': 0.6923076923076923, 'A294': 0.07692307692307693}",A305,,"    @Override
    public void onActivityResult(final int requestCode, final int resultCode, final Intent data) {
        if (requestCode == ReCaptchaActivity.RECAPTCHA_REQUEST) {
            if (resultCode == Activity.RESULT_OK
                    && !TextUtils.isEmpty(searchString)) {
                search(searchString, contentFilter, sortFilter);
            } else {
                Log.e(TAG, ""ReCaptcha failed"");
            }
        } else {
            Log.e(TAG, ""Request code from activity not supported ["" + requestCode + ""]"");
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,initViews,"void initViews(View,Bundle)","[352, 382]","{'A301': [(352, 352), (354, 354), (378, 382)], 'A305': [(357, 358), (363, 363), (375, 375)], 'A294': [(353, 353), (361, 362), (367, 369), (374, 374)], 'A295': [(355, 356), (377, 377)], 'A341': [(359, 360), (364, 366), (370, 373), (376, 376)]}","{'A301': 0.22580645161290322, 'A305': 0.12903225806451613, 'A294': 0.22580645161290322, 'A295': 0.0967741935483871, 'A341': 0.3225806451612903}",A341,,"    @Override
    protected void initViews(final View rootView, final Bundle savedInstanceState) {
        super.initViews(rootView, savedInstanceState);

        searchBinding.suggestionsList.setAdapter(suggestionListAdapter);
        // animations are just strange and useless, since the suggestions keep changing too much
        searchBinding.suggestionsList.setItemAnimator(null);
        new ItemTouchHelper(new ItemTouchHelper.Callback() {
            @Override
            public int getMovementFlags(@NonNull final RecyclerView recyclerView,
                                        @NonNull final RecyclerView.ViewHolder viewHolder) {
                return getSuggestionMovementFlags(viewHolder);
            }

            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder viewHolder,
                                  @NonNull final RecyclerView.ViewHolder viewHolder1) {
                return false;
            }

            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder, final int i) {
                onSuggestionItemSwiped(viewHolder);
            }
        }).attachToRecyclerView(searchBinding.suggestionsList);

        searchToolbarContainer = activity.findViewById(R.id.toolbar_search_container);
        searchEditText = searchToolbarContainer.findViewById(R.id.toolbar_search_edit_text);
        searchClear = searchToolbarContainer.findViewById(R.id.toolbar_search_clear);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,getMovementFlags,"int getMovementFlags(RecyclerView,RecyclerView.ViewHolder)","[360, 364]","{'A305': [(363, 363)], 'A294': [(361, 362)], 'A341': [(360, 360), (364, 364)]}","{'A305': 0.2, 'A294': 0.4, 'A341': 0.4}",A294,,"            @Override
            public int getMovementFlags(@NonNull final RecyclerView recyclerView,
                                        @NonNull final RecyclerView.ViewHolder viewHolder) {
                return getSuggestionMovementFlags(viewHolder);
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onMove,"boolean onMove(RecyclerView,RecyclerView.ViewHolder,RecyclerView.ViewHolder)","[366, 371]","{'A294': [(367, 369)], 'A341': [(366, 366), (370, 371)]}","{'A294': 0.5, 'A341': 0.5}",A294,,"            @Override
            public boolean onMove(@NonNull final RecyclerView recyclerView,
                                  @NonNull final RecyclerView.ViewHolder viewHolder,
                                  @NonNull final RecyclerView.ViewHolder viewHolder1) {
                return false;
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onSwiped,"void onSwiped(RecyclerView.ViewHolder,int)","[373, 376]","{'A305': [(375, 375)], 'A294': [(374, 374)], 'A341': [(373, 373), (376, 376)]}","{'A305': 0.25, 'A294': 0.25, 'A341': 0.5}",A341,,"            @Override
            public void onSwiped(@NonNull final RecyclerView.ViewHolder viewHolder, final int i) {
                onSuggestionItemSwiped(viewHolder);
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,writeTo,void writeTo(Queue<Object>),"[388, 392]","{'A301': [(388, 388), (390, 390), (392, 392)], 'A294': [(389, 389), (391, 391)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    @Override
    public void writeTo(final Queue<Object> objectsToSave) {
        super.writeTo(objectsToSave);
        objectsToSave.add(nextPage);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,readFrom,void readFrom(Queue<Object>),"[394, 398]","{'A301': [(394, 394), (396, 396), (398, 398)], 'A294': [(395, 395), (397, 397)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    @Override
    public void readFrom(@NonNull final Queue<Object> savedObjects) throws Exception {
        super.readFrom(savedObjects);
        nextPage = (Page) savedObjects.poll();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onSaveInstanceState,void onSaveInstanceState(Bundle),"[400, 406]","{'A301': [(400, 400), (405, 406)], 'A305': [(401, 401)], 'A302': [(402, 402), (404, 404)], 'A407': [(403, 403)]}","{'A301': 0.42857142857142855, 'A305': 0.14285714285714285, 'A302': 0.2857142857142857, 'A407': 0.14285714285714285}",A301,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle bundle) {
        searchString = searchEditText != null
                ? getSearchEditString().trim()
                : searchString;
        super.onSaveInstanceState(bundle);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,reloadContent,void reloadContent(),"[412, 426]","{'A301': [(412, 413), (419, 423), (425, 426)], 'A305': [(424, 424)], 'A298': [(414, 414)], 'A302': [(416, 417)], 'A407': [(415, 415), (418, 418)]}","{'A301': 0.6, 'A305': 0.06666666666666667, 'A298': 0.06666666666666667, 'A302': 0.13333333333333333, 'A407': 0.13333333333333333}",A301,,"    @Override
    public void reloadContent() {
        if (!TextUtils.isEmpty(searchString) || (searchEditText != null
                && !isSearchEditBlank())) {
            search(!TextUtils.isEmpty(searchString)
                    ? searchString
                    : getSearchEditString(), this.contentFilter, """");
        } else {
            if (searchEditText != null) {
                searchEditText.setText("""");
                showKeyboardSearch();
            }
            hideErrorPanel();
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onCreateOptionsMenu,"void onCreateOptionsMenu(Menu,MenuInflater)","[432, 479]","{'A301': [(432, 432), (435, 436), (438, 442), (478, 479)], 'A294': [(437, 437), (452, 452), (454, 458), (465, 465), (467, 467), (471, 471)], 'A302': [(443, 445), (466, 466), (468, 470), (472, 477)], 'A322': [(453, 453), (459, 464)], 'A331': [(446, 451)], 'A299': [(433, 434)]}","{'A301': 0.20833333333333334, 'A294': 0.20833333333333334, 'A302': 0.2708333333333333, 'A322': 0.14583333333333334, 'A331': 0.125, 'A299': 0.041666666666666664}",A302,,"    @Override
    public void onCreateOptionsMenu(@NonNull final Menu menu,
                                    @NonNull final MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);

        final ActionBar supportActionBar = activity.getSupportActionBar();
        if (supportActionBar != null) {
            supportActionBar.setDisplayShowTitleEnabled(false);
            supportActionBar.setDisplayHomeAsUpEnabled(true);
        }

        int itemId = 0;
        boolean isFirstItem = true;
        final Context c = getContext();

        if (service == null) {
            Log.w(TAG, ""onCreateOptionsMenu() called with null service"");
            updateService();
        }

        for (final String filter : service.getSearchQHFactory().getAvailableContentFilter()) {
            if (filter.equals(YoutubeSearchQueryHandlerFactory.MUSIC_SONGS)) {
                final MenuItem musicItem = menu.add(2,
                        itemId++,
                        0,
                        ""YouTube Music"");
                musicItem.setEnabled(false);
            } else if (filter.equals(PeertubeSearchQueryHandlerFactory.SEPIA_VIDEOS)) {
                final MenuItem sepiaItem = menu.add(2,
                        itemId++,
                        0,
                        ""Sepia Search"");
                sepiaItem.setEnabled(false);
            }
            menuItemToFilterName.put(itemId, filter);
            final MenuItem item = menu.add(1,
                    itemId++,
                    0,
                    ServiceHelper.getTranslatedFilterString(filter, c));
            if (isFirstItem) {
                item.setChecked(true);
                isFirstItem = false;
            }
        }
        menu.setGroupCheckable(1, true, true);

        restoreFilterChecked(menu, filterItemCheckedId);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[481, 486]","{'A301': [(481, 481), (486, 486)], 'A305': [(482, 482)], 'A295': [(483, 484)], 'A302': [(485, 485)]}","{'A301': 0.3333333333333333, 'A305': 0.16666666666666666, 'A295': 0.3333333333333333, 'A302': 0.16666666666666666}",A301,,"    @Override
    public boolean onOptionsItemSelected(@NonNull final MenuItem item) {
        final var filter = Collections.singletonList(menuItemToFilterName.get(item.getItemId()));
        changeContentFilter(item, filter);
        return true;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,restoreFilterChecked,"void restoreFilterChecked(Menu,int)","[488, 497]","{'A301': [(489, 489), (494, 497)], 'A294': [(488, 488), (490, 493)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"    private void restoreFilterChecked(final Menu menu, final int itemId) {
        if (itemId != -1) {
            final MenuItem item = menu.findItem(itemId);
            if (item == null) {
                return;
            }

            item.setChecked(true);
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,showSearchOnStart,void showSearchOnStart(),"[503, 527]","{'A301': [(503, 503), (511, 511), (514, 514), (516, 516), (522, 523), (525, 527)], 'A298': [(512, 512)], 'A294': [(504, 509)], 'A302': [(510, 510), (517, 518), (520, 521)], 'A407': [(513, 513)], 'A290': [(515, 515), (519, 519), (524, 524)]}","{'A301': 0.36, 'A298': 0.04, 'A294': 0.24, 'A302': 0.2, 'A407': 0.04, 'A290': 0.12}",A301,,"    private void showSearchOnStart() {
        if (DEBUG) {
            Log.d(TAG, ""showSearchOnStart() called, searchQuery → ""
                    + searchString
                    + "", lastSearchedQuery → ""
                    + lastSearchedString);
        }
        searchEditText.setText(searchString);

        if (TextUtils.isEmpty(searchString)
                || isSearchEditBlank()) {
            searchToolbarContainer.setTranslationX(100);
            searchToolbarContainer.setAlpha(0.0f);
            searchToolbarContainer.setVisibility(View.VISIBLE);
            searchToolbarContainer.animate()
                    .translationX(0)
                    .alpha(1.0f)
                    .setDuration(200)
                    .setInterpolator(new DecelerateInterpolator()).start();
        } else {
            searchToolbarContainer.setTranslationX(0);
            searchToolbarContainer.setAlpha(1.0f);
            searchToolbarContainer.setVisibility(View.VISIBLE);
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,initSearchListeners,void initSearchListeners(),"[529, 644]","{'A301': [(529, 529), (540, 540), (547, 550), (557, 557), (561, 562), (571, 575), (578, 580), (587, 587), (592, 594), (598, 599), (603, 605), (609, 611), (619, 622), (640, 640), (644, 644)], 'A305': [(555, 555), (568, 569)], 'A298': [(602, 602), (608, 608)], 'A402': [(613, 617)], 'A294': [(530, 532), (534, 536), (538, 538), (552, 554), (564, 567), (576, 576), (582, 582), (588, 591), (595, 597), (600, 600), (606, 606), (612, 612), (626, 627), (629, 629), (633, 633), (641, 641), (643, 643)], 'A295': [(542, 542), (545, 545)], 'A300': [(563, 563), (624, 624)], 'A302': [(533, 533), (539, 539), (541, 541), (544, 544), (546, 546), (551, 551), (556, 556), (570, 570), (577, 577), (623, 623), (625, 625), (628, 628), (632, 632), (636, 639), (642, 642)], 'A378': [(543, 543), (601, 601), (607, 607)], 'A310': [(581, 581), (583, 586)], 'A407': [(537, 537), (618, 618), (634, 635)], 'A290': [(558, 558)], 'A423': [(559, 560), (630, 631)]}","{'A301': 0.3017241379310345, 'A305': 0.02586206896551724, 'A298': 0.017241379310344827, 'A402': 0.04310344827586207, 'A294': 0.27586206896551724, 'A295': 0.017241379310344827, 'A300': 0.017241379310344827, 'A302': 0.15517241379310345, 'A378': 0.02586206896551724, 'A310': 0.04310344827586207, 'A407': 0.034482758620689655, 'A290': 0.008620689655172414, 'A423': 0.034482758620689655}",A301,,"    private void initSearchListeners() {
        if (DEBUG) {
            Log.d(TAG, ""initSearchListeners() called"");
        }
        searchClear.setOnClickListener(v -> {
            if (DEBUG) {
                Log.d(TAG, ""onClick() called with: v = ["" + v + ""]"");
            }
            if (isSearchEditBlank()) {
                NavigationHelper.gotoMainFragment(getFM());
                return;
            }

            searchBinding.correctSuggestion.setVisibility(View.GONE);

            searchEditText.setText("""");
            suggestionListAdapter.submitList(null);
            showKeyboardSearch();
        });

        TooltipCompat.setTooltipText(searchClear, getString(R.string.clear));

        searchEditText.setOnClickListener(v -> {
            if (DEBUG) {
                Log.d(TAG, ""onClick() called with: v = ["" + v + ""]"");
            }
            if ((showLocalSuggestions || showRemoteSuggestions) && !isErrorPanelVisible()) {
                showSuggestionsPanel();
            }
            if (DeviceUtils.isTv(getContext())) {
                showKeyboardSearch();
            }
        });

        searchEditText.setOnFocusChangeListener((final View v, final boolean hasFocus) -> {
            if (DEBUG) {
                Log.d(TAG, ""onFocusChange() called with: ""
                        + ""v = ["" + v + ""], hasFocus = ["" + hasFocus + ""]"");
            }
            if ((showLocalSuggestions || showRemoteSuggestions)
                    && hasFocus && !isErrorPanelVisible()) {
                showSuggestionsPanel();
            }
        });

        suggestionListAdapter.setListener(new SuggestionListAdapter.OnSuggestionItemSelected() {
            @Override
            public void onSuggestionItemSelected(final SuggestionItem item) {
                search(item.query, new String[0], """");
                searchEditText.setText(item.query);
            }

            @Override
            public void onSuggestionItemInserted(final SuggestionItem item) {
                searchEditText.setText(item.query);
                searchEditText.setSelection(searchEditText.getText().length());
            }

            @Override
            public void onSuggestionItemLongClick(final SuggestionItem item) {
                if (item.fromHistory) {
                    showDeleteSuggestionDialog(item);
                }
            }
        });

        if (textWatcher != null) {
            searchEditText.removeTextChangedListener(textWatcher);
        }
        textWatcher = new TextWatcher() {
            @Override
            public void beforeTextChanged(final CharSequence s, final int start,
                                          final int count, final int after) {
                // Do nothing, old text is already clean
            }

            @Override
            public void onTextChanged(final CharSequence s, final int start,
                                      final int before, final int count) {
                // Changes are handled in afterTextChanged; CharSequence cannot be changed here.
            }

            @Override
            public void afterTextChanged(final Editable s) {
                // Remove rich text formatting
                for (final CharacterStyle span : s.getSpans(0, s.length(), CharacterStyle.class)) {
                    s.removeSpan(span);
                }

                final String newText = getSearchEditString().trim();
                suggestionPublisher.onNext(newText);
            }
        };
        searchEditText.addTextChangedListener(textWatcher);
        searchEditText.setOnEditorActionListener(
                (final TextView v, final int actionId, final KeyEvent event) -> {
                    if (DEBUG) {
                        Log.d(TAG, ""onEditorAction() called with: v = ["" + v + ""], ""
                                + ""actionId = ["" + actionId + ""], event = ["" + event + ""]"");
                    }
                    if (actionId == EditorInfo.IME_ACTION_PREVIOUS) {
                        hideKeyboardSearch();
                    } else if (event != null
                            && (event.getKeyCode() == KeyEvent.KEYCODE_ENTER
                            || event.getAction() == EditorInfo.IME_ACTION_SEARCH)) {
                        searchEditText.setText(getSearchEditString().trim());
                        search(getSearchEditString(), new String[0], """");
                        return true;
                    }
                    return false;
                });

        if (suggestionDisposable == null || suggestionDisposable.isDisposed()) {
            initSuggestionObserver();
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onSuggestionItemSelected,void onSuggestionItemSelected(SuggestionItem),"[575, 579]","{'A301': [(575, 575), (578, 579)], 'A294': [(576, 576)], 'A302': [(577, 577)]}","{'A301': 0.6, 'A294': 0.2, 'A302': 0.2}",A301,,"            @Override
            public void onSuggestionItemSelected(final SuggestionItem item) {
                search(item.query, new String[0], """");
                searchEditText.setText(item.query);
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onSuggestionItemInserted,void onSuggestionItemInserted(SuggestionItem),"[581, 585]","{'A294': [(582, 582)], 'A310': [(581, 581), (583, 585)]}","{'A294': 0.2, 'A310': 0.8}",A310,,"            @Override
            public void onSuggestionItemInserted(final SuggestionItem item) {
                searchEditText.setText(item.query);
                searchEditText.setSelection(searchEditText.getText().length());
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onSuggestionItemLongClick,void onSuggestionItemLongClick(SuggestionItem),"[587, 592]","{'A301': [(587, 587), (592, 592)], 'A294': [(588, 591)]}","{'A301': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"            @Override
            public void onSuggestionItemLongClick(final SuggestionItem item) {
                if (item.fromHistory) {
                    showDeleteSuggestionDialog(item);
                }
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,beforeTextChanged,"void beforeTextChanged(CharSequence,int,int,int)","[599, 603]","{'A301': [(599, 599), (603, 603)], 'A298': [(602, 602)], 'A294': [(600, 600)], 'A378': [(601, 601)]}","{'A301': 0.4, 'A298': 0.2, 'A294': 0.2, 'A378': 0.2}",A301,,"            @Override
            public void beforeTextChanged(final CharSequence s, final int start,
                                          final int count, final int after) {
                // Do nothing, old text is already clean
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onTextChanged,"void onTextChanged(CharSequence,int,int,int)","[605, 609]","{'A301': [(605, 605), (609, 609)], 'A298': [(608, 608)], 'A294': [(606, 606)], 'A378': [(607, 607)]}","{'A301': 0.4, 'A298': 0.2, 'A294': 0.2, 'A378': 0.2}",A301,,"            @Override
            public void onTextChanged(final CharSequence s, final int start,
                                      final int before, final int count) {
                // Changes are handled in afterTextChanged; CharSequence cannot be changed here.
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,afterTextChanged,void afterTextChanged(Editable),"[611, 620]","{'A301': [(611, 611), (619, 620)], 'A402': [(613, 617)], 'A294': [(612, 612)], 'A407': [(618, 618)]}","{'A301': 0.3, 'A402': 0.5, 'A294': 0.1, 'A407': 0.1}",A402,,"            @Override
            public void afterTextChanged(final Editable s) {
                // Remove rich text formatting
                for (final CharacterStyle span : s.getSpans(0, s.length(), CharacterStyle.class)) {
                    s.removeSpan(span);
                }

                final String newText = getSearchEditString().trim();
                suggestionPublisher.onNext(newText);
            }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,unsetSearchListeners,void unsetSearchListeners(),"[646, 660]","{'A301': [(646, 646), (650, 655), (659, 660)], 'A294': [(647, 649), (656, 658)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    private void unsetSearchListeners() {
        if (DEBUG) {
            Log.d(TAG, ""unsetSearchListeners() called"");
        }
        searchClear.setOnClickListener(null);
        searchClear.setOnLongClickListener(null);
        searchEditText.setOnClickListener(null);
        searchEditText.setOnFocusChangeListener(null);
        searchEditText.setOnEditorActionListener(null);

        if (textWatcher != null) {
            searchEditText.removeTextChangedListener(textWatcher);
        }
        textWatcher = null;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,showSuggestionsPanel,void showSuggestionsPanel(),"[662, 669]","{'A301': [(662, 662), (669, 669)], 'A305': [(666, 666)], 'A294': [(663, 665)], 'A295': [(667, 668)]}","{'A301': 0.25, 'A305': 0.125, 'A294': 0.375, 'A295': 0.25}",A294,,"    private void showSuggestionsPanel() {
        if (DEBUG) {
            Log.d(TAG, ""showSuggestionsPanel() called"");
        }
        suggestionsPanelVisible = true;
        animate(searchBinding.suggestionsPanel, true, 200,
                AnimationType.LIGHT_SLIDE_AND_ALPHA);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,hideSuggestionsPanel,void hideSuggestionsPanel(),"[671, 678]","{'A301': [(671, 671), (678, 678)], 'A305': [(675, 675)], 'A294': [(672, 674)], 'A295': [(676, 677)]}","{'A301': 0.25, 'A305': 0.125, 'A294': 0.375, 'A295': 0.25}",A294,,"    private void hideSuggestionsPanel() {
        if (DEBUG) {
            Log.d(TAG, ""hideSuggestionsPanel() called"");
        }
        suggestionsPanelVisible = false;
        animate(searchBinding.suggestionsPanel, false, 200,
                AnimationType.LIGHT_SLIDE_AND_ALPHA);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,showKeyboardSearch,void showKeyboardSearch(),"[680, 685]","{'A301': [(680, 680), (685, 685)], 'A294': [(681, 683)], 'A300': [(684, 684)]}","{'A301': 0.3333333333333333, 'A294': 0.5, 'A300': 0.16666666666666666}",A294,,"    private void showKeyboardSearch() {
        if (DEBUG) {
            Log.d(TAG, ""showKeyboardSearch() called"");
        }
        KeyboardUtil.showKeyboard(activity, searchEditText);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,hideKeyboardSearch,void hideKeyboardSearch(),"[687, 693]","{'A301': [(687, 687), (691, 691), (693, 693)], 'A294': [(688, 690)], 'A300': [(692, 692)]}","{'A301': 0.42857142857142855, 'A294': 0.42857142857142855, 'A300': 0.14285714285714285}",A301,,"    private void hideKeyboardSearch() {
        if (DEBUG) {
            Log.d(TAG, ""hideKeyboardSearch() called"");
        }

        KeyboardUtil.hideKeyboard(activity, searchEditText);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,showDeleteSuggestionDialog,void showDeleteSuggestionDialog(SuggestionItem),"[695, 717]","{'A301': [(695, 695), (700, 700), (702, 704), (717, 717)], 'A305': [(696, 696), (711, 713)], 'A294': [(697, 698)], 'A310': [(699, 699), (701, 701), (705, 709), (714, 716)], 'A407': [(710, 710)]}","{'A301': 0.2608695652173913, 'A305': 0.17391304347826086, 'A294': 0.08695652173913043, 'A310': 0.43478260869565216, 'A407': 0.043478260869565216}",A310,,"    private void showDeleteSuggestionDialog(final SuggestionItem item) {
        if (activity == null || historyRecordManager == null || searchEditText == null) {
            return;
        }
        final String query = item.query;
        new AlertDialog.Builder(activity)
                .setTitle(query)
                .setMessage(R.string.delete_item_search_history)
                .setCancelable(true)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.delete, (dialog, which) -> {
                    final Disposable onDelete = historyRecordManager.deleteSearchHistory(query)
                            .observeOn(AndroidSchedulers.mainThread())
                            .subscribe(
                                    howManyDeleted -> suggestionPublisher
                                            .onNext(getSearchEditString()),
                                    throwable -> showSnackBarError(new ErrorInfo(throwable,
                                            UserAction.DELETE_FROM_HISTORY,
                                            ""Deleting item failed"")));
                    disposables.add(onDelete);
                })
                .show();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onBackPressed,boolean onBackPressed(),"[719, 730]","{'A301': [(719, 720), (724, 725), (727, 730)], 'A305': [(721, 721)], 'A298': [(722, 722)], 'A302': [(723, 723), (726, 726)]}","{'A301': 0.6666666666666666, 'A305': 0.08333333333333333, 'A298': 0.08333333333333333, 'A302': 0.16666666666666666}",A301,,"    @Override
    public boolean onBackPressed() {
        if (suggestionsPanelVisible
                && !infoListAdapter.getItemsList().isEmpty()
                && !isLoading.get()) {
            hideSuggestionsPanel();
            hideKeyboardSearch();
            searchEditText.setText(lastSearchedString);
            return true;
        }
        return false;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,getLocalSuggestionsObservable,"Observable<List<SuggestionItem>> getLocalSuggestionsObservable(String,int)","[733, 742]","{'A305': [(733, 738), (742, 742)], 'A298': [(739, 741)]}","{'A305': 0.7, 'A298': 0.3}",A305,,"    private Observable<List<SuggestionItem>> getLocalSuggestionsObservable(
            final String query, final int similarQueryLimit) {
        return historyRecordManager
                .getRelatedSearches(query, similarQueryLimit, 25)
                .toObservable()
                .map(searchHistoryEntries ->
                        searchHistoryEntries.stream()
                                .map(entry -> new SuggestionItem(true, entry))
                                .collect(Collectors.toList()));
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,getRemoteSuggestionsObservable,Observable<List<SuggestionItem>> getRemoteSuggestionsObservable(String),"[744, 755]","{'A305': [(744, 755)]}",{'A305': 1.0},A305,,"    private Observable<List<SuggestionItem>> getRemoteSuggestionsObservable(final String query) {
        return ExtractorHelper
                .suggestionsFor(serviceId, query)
                .toObservable()
                .map(strings -> {
                    final List<SuggestionItem> result = new ArrayList<>();
                    for (final String entry : strings) {
                        result.add(new SuggestionItem(false, entry));
                    }
                    return result;
                });
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,initSuggestionObserver,void initSuggestionObserver(),"[757, 814]","{'A301': [(757, 757), (764, 764), (766, 766), (796, 798), (814, 814)], 'A305': [(765, 765), (767, 767), (769, 794)], 'A298': [(799, 813)], 'A294': [(758, 763)], 'A310': [(768, 768), (795, 795)]}","{'A301': 0.1206896551724138, 'A305': 0.4827586206896552, 'A298': 0.25862068965517243, 'A294': 0.10344827586206896, 'A310': 0.034482758620689655}",A305,,"    private void initSuggestionObserver() {
        if (DEBUG) {
            Log.d(TAG, ""initSuggestionObserver() called"");
        }
        if (suggestionDisposable != null) {
            suggestionDisposable.dispose();
        }

        suggestionDisposable = suggestionPublisher
                .debounce(SUGGESTIONS_DEBOUNCE, TimeUnit.MILLISECONDS)
                .startWithItem(searchString == null ? """" : searchString)
                .switchMap(query -> {
                    // Only show remote suggestions if they are enabled in settings and
                    // the query length is at least THRESHOLD_NETWORK_SUGGESTION
                    final boolean shallShowRemoteSuggestionsNow = showRemoteSuggestions
                            && query.length() >= THRESHOLD_NETWORK_SUGGESTION;

                    if (showLocalSuggestions && shallShowRemoteSuggestionsNow) {
                        return Observable.zip(
                                getLocalSuggestionsObservable(query, 3),
                                getRemoteSuggestionsObservable(query),
                                (local, remote) -> {
                                    remote.removeIf(remoteItem -> local.stream().anyMatch(
                                            localItem -> localItem.equals(remoteItem)));
                                    local.addAll(remote);
                                    return local;
                                })
                                .materialize();
                    } else if (showLocalSuggestions) {
                        return getLocalSuggestionsObservable(query, 25)
                                .materialize();
                    } else if (shallShowRemoteSuggestionsNow) {
                        return getRemoteSuggestionsObservable(query)
                                .materialize();
                    } else {
                        return Single.fromCallable(Collections::<SuggestionItem>emptyList)
                                .toObservable()
                                .materialize();
                    }
                })
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        listNotification -> {
                            if (listNotification.isOnNext()) {
                                if (listNotification.getValue() != null) {
                                    handleSuggestions(listNotification.getValue());
                                }
                            } else if (listNotification.isOnError()
                                    && listNotification.getError() != null
                                    && !ExceptionUtils.isInterruptedCaused(
                                    listNotification.getError())) {
                                showSnackBarError(new ErrorInfo(listNotification.getError(),
                                        UserAction.GET_SUGGESTIONS, searchString, serviceId));
                            }
                        }, throwable -> showSnackBarError(new ErrorInfo(
                                throwable, UserAction.GET_SUGGESTIONS, searchString, serviceId)));
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,doInitialLoadLogic,void doInitialLoadLogic(),"[816, 819]","{'A301': [(816, 819)]}",{'A301': 1.0},A301,,"    @Override
    protected void doInitialLoadLogic() {
        // no-op
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,search,"void search(String,String[],String)","[827, 878]","{'A301': [(836, 836), (859, 860), (863, 864), (877, 878)], 'A305': [(828, 829), (831, 831), (833, 833), (840, 840), (858, 858), (861, 862), (866, 866), (871, 873), (876, 876)], 'A298': [(827, 827), (837, 838), (841, 851), (856, 856), (865, 865), (869, 870), (874, 875)], 'A294': [(830, 830), (832, 832), (834, 835), (852, 852)], 'A422': [(839, 839), (853, 855)], 'A302': [(857, 857)], 'A310': [(867, 868)]}","{'A301': 0.1346153846153846, 'A305': 0.25, 'A298': 0.38461538461538464, 'A294': 0.09615384615384616, 'A422': 0.07692307692307693, 'A302': 0.019230769230769232, 'A310': 0.038461538461538464}",A298,,"    private void search(@NonNull final String theSearchString,
                        final String[] theContentFilter,
                        final String theSortFilter) {
        if (DEBUG) {
            Log.d(TAG, ""search() called with: query = ["" + theSearchString + ""]"");
        }
        if (theSearchString.isEmpty()) {
            return;
        }

        // Check if theSearchString is a URL which can be opened by NewPipe directly
        // and open it if possible.
        try {
            final StreamingService streamingService = NewPipe.getServiceByUrl(theSearchString);
            showLoading();
            disposables.add(Observable
                    .fromCallable(() -> NavigationHelper.getIntentByLink(activity,
                            streamingService, theSearchString))
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(intent -> {
                        getFM().popBackStackImmediate();
                        activity.startActivity(intent);
                    }, throwable -> showTextError(getString(R.string.unsupported_url))));
            return;
        } catch (final Exception ignored) {
            // Exception occurred, it's not a url
        }

        // prepare search
        lastSearchedString = this.searchString;
        this.searchString = theSearchString;
        infoListAdapter.clearStreamItemList();
        hideSuggestionsPanel();
        showMetaInfoInTextView(null, searchBinding.searchMetaInfoTextView,
                searchBinding.searchMetaInfoSeparator, disposables);
        hideKeyboardSearch();

        // store search query if search history is enabled
        disposables.add(historyRecordManager.onSearched(serviceId, theSearchString)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        ignored -> {
                        },
                        throwable -> showSnackBarError(new ErrorInfo(throwable, UserAction.SEARCHED,
                                theSearchString, serviceId))
                ));

        // load search results
        suggestionPublisher.onNext(theSearchString);
        startLoading(false);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,startLoading,void startLoading(boolean),"[880, 896]","{'A301': [(880, 880), (882, 882), (891, 892), (896, 896)], 'A305': [(883, 883), (894, 894)], 'A294': [(881, 881), (884, 886), (888, 890)], 'A302': [(887, 887), (895, 895)], 'A310': [(893, 893)]}","{'A301': 0.29411764705882354, 'A305': 0.11764705882352941, 'A294': 0.4117647058823529, 'A302': 0.11764705882352941, 'A310': 0.058823529411764705}",A294,,"    @Override
    public void startLoading(final boolean forceLoad) {
        super.startLoading(forceLoad);
        disposables.clear();
        if (searchDisposable != null) {
            searchDisposable.dispose();
        }
        searchDisposable = ExtractorHelper.searchFor(serviceId,
                searchString,
                Arrays.asList(contentFilter),
                sortFilter)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .doOnEvent((searchResult, throwable) -> isLoading.set(false))
                .subscribe(this::handleResult, this::onItemError);

    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,loadMoreItems,void loadMoreItems(),"[898, 918]","{'A301': [(898, 899), (903, 904), (914, 915), (918, 918)], 'A305': [(917, 917)], 'A294': [(900, 902), (905, 907), (909, 913)], 'A302': [(908, 908)], 'A310': [(916, 916)]}","{'A301': 0.3333333333333333, 'A305': 0.047619047619047616, 'A294': 0.5238095238095238, 'A302': 0.047619047619047616, 'A310': 0.047619047619047616}",A294,,"    @Override
    protected void loadMoreItems() {
        if (!Page.isValid(nextPage)) {
            return;
        }
        isLoading.set(true);
        showListFooter(true);
        if (searchDisposable != null) {
            searchDisposable.dispose();
        }
        searchDisposable = ExtractorHelper.getMoreSearchItems(
                serviceId,
                searchString,
                asList(contentFilter),
                sortFilter,
                nextPage)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .doOnEvent((nextItemsResult, throwable) -> isLoading.set(false))
                .subscribe(this::handleNextItems, this::onItemError);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,hasMoreItems,boolean hasMoreItems(),"[920, 923]","{'A301': [(920, 921), (923, 923)], 'A305': [(922, 922)]}","{'A301': 0.75, 'A305': 0.25}",A301,,"    @Override
    protected boolean hasMoreItems() {
        return Page.isValid(nextPage);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onItemSelected,void onItemSelected(InfoItem),"[925, 929]","{'A301': [(925, 925), (927, 929)], 'A294': [(926, 926)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"    @Override
    protected void onItemSelected(final InfoItem selectedItem) {
        super.onItemSelected(selectedItem);
        hideKeyboardSearch();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onItemError,void onItemError(Throwable),"[931, 938]","{'A305': [(931, 938)]}",{'A305': 1.0},A305,,"    private void onItemError(final Throwable exception) {
        if (exception instanceof SearchExtractor.NothingFoundException) {
            infoListAdapter.clearStreamItemList();
            showEmptyState();
        } else {
            showError(new ErrorInfo(exception, UserAction.SEARCHED, searchString, serviceId));
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,changeContentFilter,"void changeContentFilter(MenuItem,List<String>)","[944, 967]","{'A301': [(946, 947), (966, 967)], 'A305': [(944, 945), (960, 961), (965, 965)], 'A295': [(962, 962)], 'A302': [(963, 964)], 'A327': [(948, 959)]}","{'A301': 0.16666666666666666, 'A305': 0.20833333333333334, 'A295': 0.041666666666666664, 'A302': 0.08333333333333333, 'A327': 0.5}",A327,,"    private void changeContentFilter(final MenuItem item, final List<String> theContentFilter) {
        filterItemCheckedId = item.getItemId();
        item.setChecked(true);

        if (service != null) {
            final boolean isNotFiltered = theContentFilter.isEmpty()
                    || ""all"".equals(theContentFilter.get(0));
            if (isNotFiltered) {
                searchEditText.setHint(
                        getString(R.string.search_with_service_name,
                                service.getServiceInfo().getName()));
            } else {
                searchEditText.setHint(getString(R.string.search_with_service_name_and_filter,
                        service.getServiceInfo().getName(),
                        item.getTitle()));
            }
        }

        contentFilter = theContentFilter.toArray(new String[0]);

        if (!TextUtils.isEmpty(searchString)) {
            search(searchString, contentFilter, sortFilter);
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,setQuery,"void setQuery(int,String,String[],String)","[969, 977]","{'A305': [(969, 976)], 'A302': [(977, 977)]}","{'A305': 0.8888888888888888, 'A302': 0.1111111111111111}",A305,,"    private void setQuery(final int theServiceId,
                          final String theSearchString,
                          final String[] theContentFilter,
                          final String theSortFilter) {
        serviceId = theServiceId;
        searchString = theSearchString;
        contentFilter = theContentFilter;
        sortFilter = theSortFilter;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,getSearchEditString,String getSearchEditString(),"[979, 981]","{'A407': [(979, 981)]}",{'A407': 1.0},A407,,"    private String getSearchEditString() {
        return searchEditText.getText().toString();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,isSearchEditBlank,boolean isSearchEditBlank(),"[983, 985]","{'A407': [(983, 985)]}",{'A407': 1.0},A407,,"    private boolean isSearchEditBlank() {
        return isBlank(getSearchEditString());
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,handleSuggestions,void handleSuggestions(List<SuggestionItem>),"[991, 1001]","{'A301': [(991, 991), (997, 997), (999, 1001)], 'A305': [(995, 996), (998, 998)], 'A294': [(992, 994)]}","{'A301': 0.45454545454545453, 'A305': 0.2727272727272727, 'A294': 0.2727272727272727}",A301,,"    public void handleSuggestions(@NonNull final List<SuggestionItem> suggestions) {
        if (DEBUG) {
            Log.d(TAG, ""handleSuggestions() called with: suggestions = ["" + suggestions + ""]"");
        }
        suggestionListAdapter.submitList(suggestions,
                () -> searchBinding.suggestionsList.scrollToPosition(0));

        if (suggestionsPanelVisible && isErrorPanelVisible()) {
            hideLoading();
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,hideLoading,void hideLoading(),"[1007, 1011]","{'A301': [(1007, 1011)]}",{'A301': 1.0},A301,,"    @Override
    public void hideLoading() {
        super.hideLoading();
        showListFooter(false);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,handleResult,void handleResult(SearchInfo),"[1017, 1054]","{'A301': [(1017, 1017), (1025, 1026), (1042, 1042), (1046, 1054)], 'A305': [(1023, 1024), (1035, 1036)], 'A298': [(1028, 1030), (1033, 1033), (1037, 1037)], 'A294': [(1018, 1018), (1021, 1022), (1027, 1027), (1032, 1032), (1038, 1039), (1041, 1041)], 'A295': [(1034, 1034)], 'A302': [(1019, 1020), (1040, 1040), (1044, 1045)], 'A378': [(1031, 1031)], 'A299': [(1043, 1043)]}","{'A301': 0.34210526315789475, 'A305': 0.10526315789473684, 'A298': 0.13157894736842105, 'A294': 0.21052631578947367, 'A295': 0.02631578947368421, 'A302': 0.13157894736842105, 'A378': 0.02631578947368421, 'A299': 0.02631578947368421}",A301,,"    @Override
    public void handleResult(@NonNull final SearchInfo result) {
        final List<Throwable> exceptions = result.getErrors();
        if (!exceptions.isEmpty()
                && !(exceptions.size() == 1
                && exceptions.get(0) instanceof SearchExtractor.NothingFoundException)) {
            showSnackBarError(new ErrorInfo(result.getErrors(), UserAction.SEARCHED,
                    searchString, serviceId));
        }

        searchSuggestion = result.getSearchSuggestion();
        if (searchSuggestion != null) {
            searchSuggestion = searchSuggestion.trim();
        }
        isCorrectedSearch = result.isCorrectedSearch();

        // List<MetaInfo> cannot be bundled without creating some containers
        metaInfo = result.getMetaInfo().toArray(new MetaInfo[0]);
        showMetaInfoInTextView(result.getMetaInfo(), searchBinding.searchMetaInfoTextView,
                searchBinding.searchMetaInfoSeparator, disposables);

        handleSearchSuggestion();

        lastSearchedString = searchString;
        nextPage = result.getNextPage();

        if (infoListAdapter.getItemsList().isEmpty()) {
            if (!result.getRelatedItems().isEmpty()) {
                infoListAdapter.addInfoItemList(result.getRelatedItems());
            } else {
                infoListAdapter.clearStreamItemList();
                showEmptyState();
                return;
            }
        }

        super.handleResult(result);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,handleSearchSuggestion,void handleSearchSuggestion(),"[1056, 1085]","{'A305': [(1057, 1057), (1059, 1059), (1077, 1082)], 'A298': [(1064, 1064)], 'A294': [(1056, 1056), (1060, 1060)], 'A295': [(1058, 1058), (1067, 1068), (1070, 1071), (1076, 1076), (1083, 1083)], 'A378': [(1061, 1063), (1069, 1069), (1072, 1075), (1084, 1085)], 'A299': [(1065, 1066)]}","{'A305': 0.26666666666666666, 'A298': 0.03333333333333333, 'A294': 0.06666666666666667, 'A295': 0.23333333333333334, 'A378': 0.3333333333333333, 'A299': 0.06666666666666667}",A378,,"    private void handleSearchSuggestion() {
        if (TextUtils.isEmpty(searchSuggestion)) {
            searchBinding.correctSuggestion.setVisibility(View.GONE);
        } else {
            final String helperText = getString(isCorrectedSearch
                    ? R.string.search_showing_result_for
                    : R.string.did_you_mean);

            final String highlightedSearchSuggestion =
                    ""<b><i>"" + Html.escapeHtml(searchSuggestion) + ""</i></b>"";
            final String text = String.format(helperText, highlightedSearchSuggestion);
            searchBinding.correctSuggestion.setText(HtmlCompat.fromHtml(text,
                    HtmlCompat.FROM_HTML_MODE_LEGACY));

            searchBinding.correctSuggestion.setOnClickListener(v -> {
                searchBinding.correctSuggestion.setVisibility(View.GONE);
                search(searchSuggestion, contentFilter, sortFilter);
                searchEditText.setText(searchSuggestion);
            });

            searchBinding.correctSuggestion.setOnLongClickListener(v -> {
                searchEditText.setText(searchSuggestion);
                searchEditText.setSelection(searchSuggestion.length());
                showKeyboardSearch();
                return true;
            });

            searchBinding.correctSuggestion.setVisibility(View.VISIBLE);
        }
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,handleNextItems,void handleNextItems(ListExtractor.InfoItemsPage<?>),"[1087, 1101]","{'A301': [(1087, 1087), (1089, 1089), (1092, 1092), (1099, 1101)], 'A305': [(1088, 1088), (1094, 1094), (1097, 1098)], 'A294': [(1091, 1091), (1095, 1096)], 'A302': [(1090, 1090)], 'A324': [(1093, 1093)]}","{'A301': 0.4, 'A305': 0.26666666666666666, 'A294': 0.2, 'A302': 0.06666666666666667, 'A324': 0.06666666666666667}",A301,,"    @Override
    public void handleNextItems(final ListExtractor.InfoItemsPage<?> result) {
        showListFooter(false);
        infoListAdapter.addInfoItemList(result.getItems());
        nextPage = result.getNextPage();

        if (!result.getErrors().isEmpty()) {
            showSnackBarError(new ErrorInfo(result.getErrors(), UserAction.SEARCHED,
                    ""\"""" + searchString + ""\"" → pageUrl: "" + nextPage.getUrl() + "", ""
                            + ""pageIds: "" + nextPage.getIds() + "", ""
                            + ""pageCookies: "" + nextPage.getCookies(),
                    serviceId));
        }
        super.handleNextItems(result);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,handleError,void handleError(),"[1103, 1108]","{'A301': [(1103, 1103), (1108, 1108)], 'A305': [(1104, 1107)]}","{'A301': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    @Override
    public void handleError() {
        super.handleError();
        hideSuggestionsPanel();
        hideKeyboardSearch();
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,getSuggestionMovementFlags,int getSuggestionMovementFlags(RecyclerView.ViewHolder),"[1114, 1123]","{'A305': [(1114, 1114), (1116, 1119)], 'A294': [(1121, 1122)], 'A295': [(1120, 1120)], 'A341': [(1123, 1123)], 'A299': [(1115, 1115)]}","{'A305': 0.5, 'A294': 0.2, 'A295': 0.1, 'A341': 0.1, 'A299': 0.1}",A305,,"    public int getSuggestionMovementFlags(@NonNull final RecyclerView.ViewHolder viewHolder) {
        final int position = viewHolder.getBindingAdapterPosition();
        if (position == RecyclerView.NO_POSITION) {
            return 0;
        }

        final SuggestionItem item = suggestionListAdapter.getCurrentList().get(position);
        return item.fromHistory ? makeMovementFlags(0,
                ItemTouchHelper.LEFT | ItemTouchHelper.RIGHT) : 0;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SearchFragment.java,SearchFragment,onSuggestionItemSwiped,void onSuggestionItemSwiped(RecyclerView.ViewHolder),"[1125, 1136]","{'A305': [(1125, 1125), (1133, 1134)], 'A295': [(1127, 1127)], 'A341': [(1128, 1131), (1135, 1136)], 'A299': [(1126, 1126)], 'A407': [(1132, 1132)]}","{'A305': 0.25, 'A295': 0.08333333333333333, 'A341': 0.5, 'A299': 0.08333333333333333, 'A407': 0.08333333333333333}",A341,,"    public void onSuggestionItemSwiped(@NonNull final RecyclerView.ViewHolder viewHolder) {
        final int position = viewHolder.getBindingAdapterPosition();
        final String query = suggestionListAdapter.getCurrentList().get(position).query;
        final Disposable onDelete = historyRecordManager.deleteSearchHistory(query)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        howManyDeleted -> suggestionPublisher
                                .onNext(getSearchEditString()),
                        throwable -> showSnackBarError(new ErrorInfo(throwable,
                                UserAction.DELETE_FROM_HISTORY, ""Deleting item failed"")));
        disposables.add(onDelete);
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionListAdapter.java,SuggestionListAdapter,setListener,void setListener(OnSuggestionItemSelected),"[22, 24]","{'A301': [(23, 23)], 'A302': [(24, 24)], 'A294': [(22, 22)]}","{'A301': 0.3333333333333333, 'A302': 0.3333333333333333, 'A294': 0.3333333333333333}",A301,,"    public void setListener(final OnSuggestionItemSelected listener) {
        this.listener = listener;
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionListAdapter.java,SuggestionListAdapter,onCreateViewHolder,"SuggestionItemHolder onCreateViewHolder(ViewGroup,int)","[26, 32]","{'A302': [(27, 27), (32, 32)], 'A299': [(26, 26), (28, 29)], 'A295': [(30, 31)]}","{'A302': 0.2857142857142857, 'A299': 0.42857142857142855, 'A295': 0.2857142857142857}",A299,,"    @NonNull
    @Override
    public SuggestionItemHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                   final int viewType) {
        return new SuggestionItemHolder(ItemSearchSuggestionBinding
                .inflate(LayoutInflater.from(parent.getContext()), parent, false));
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionListAdapter.java,SuggestionListAdapter,onBindViewHolder,"void onBindViewHolder(SuggestionItemHolder,int)","[34, 54]","{'A301': [(34, 34), (36, 37), (42, 42), (48, 48)], 'A302': [(54, 54)], 'A295': [(38, 38), (43, 43), (49, 49)], 'A294': [(35, 35), (39, 41), (44, 47), (50, 52)], 'A310': [(53, 53)]}","{'A301': 0.23809523809523808, 'A302': 0.047619047619047616, 'A295': 0.14285714285714285, 'A294': 0.5238095238095238, 'A310': 0.047619047619047616}",A294,,"    @Override
    public void onBindViewHolder(final SuggestionItemHolder holder, final int position) {
        final SuggestionItem currentItem = getItem(position);
        holder.updateFrom(currentItem);
        holder.itemBinding.suggestionSearch.setOnClickListener(v -> {
            if (listener != null) {
                listener.onSuggestionItemSelected(currentItem);
            }
        });
        holder.itemBinding.suggestionSearch.setOnLongClickListener(v -> {
            if (listener != null) {
                listener.onSuggestionItemLongClick(currentItem);
            }
            return true;
        });
        holder.itemBinding.suggestionInsert.setOnClickListener(v -> {
            if (listener != null) {
                listener.onSuggestionItemInserted(currentItem);
            }
        });
    }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionListAdapter.java,SuggestionListAdapter.SuggestionItemHolder,updateFrom,void updateFrom(SuggestionItem),"[72, 76]","{'A295': [(72, 76)]}",{'A295': 1.0},A295,,"        private void updateFrom(final SuggestionItem item) {
            itemBinding.itemSuggestionIcon.setImageResource(item.fromHistory ? R.drawable.ic_history
                    : R.drawable.ic_search);
            itemBinding.itemSuggestionQuery.setText(item.query);
        }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionListAdapter.java,SuggestionListAdapter.SuggestionItemCallback,areItemsTheSame,"boolean areItemsTheSame(SuggestionItem,SuggestionItem)","[80, 85]","{'A301': [(85, 85)], 'A295': [(80, 82)], 'A305': [(83, 84)]}","{'A301': 0.16666666666666666, 'A295': 0.5, 'A305': 0.3333333333333333}",A295,,"        @Override
        public boolean areItemsTheSame(@NonNull final SuggestionItem oldItem,
                                       @NonNull final SuggestionItem newItem) {
            return oldItem.fromHistory == newItem.fromHistory
                    && oldItem.query.equals(newItem.query);
        }
"
org.schabi.newpipe.fragments.list.search,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/list/search/SuggestionListAdapter.java,SuggestionListAdapter.SuggestionItemCallback,areContentsTheSame,"boolean areContentsTheSame(SuggestionItem,SuggestionItem)","[87, 91]","{'A295': [(87, 89)], 'A294': [(91, 91)], 'A305': [(90, 90)]}","{'A295': 0.6, 'A294': 0.2, 'A305': 0.2}",A295,,"        @Override
        public boolean areContentsTheSame(@NonNull final SuggestionItem oldItem,
                                          @NonNull final SuggestionItem newItem) {
            return true; // items' contents never change; the list of items themselves does
        }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/EmptyFragment.java,EmptyFragment,newInstance,EmptyFragment newInstance(boolean),"[16, 22]","{'A320': [(16, 21)], 'A305': [(22, 22)]}","{'A320': 0.8571428571428571, 'A305': 0.14285714285714285}",A320,,"    public static final EmptyFragment newInstance(final boolean showMessage) {
        final EmptyFragment emptyFragment = new EmptyFragment();
        final Bundle bundle = new Bundle(1);
        bundle.putBoolean(SHOW_MESSAGE, showMessage);
        emptyFragment.setArguments(bundle);
        return emptyFragment;
    }
"
org.schabi.newpipe.fragments,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/fragments/EmptyFragment.java,EmptyFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[24, 32]","{'A289': [(24, 24), (32, 32)], 'A294': [(25, 26)], 'A320': [(27, 27)], 'A305': [(28, 31)]}","{'A289': 0.2222222222222222, 'A294': 0.2222222222222222, 'A320': 0.1111111111111111, 'A305': 0.4444444444444444}",A305,,"    @Override
    public View onCreateView(final LayoutInflater inflater, @Nullable final ViewGroup container,
                             final Bundle savedInstanceState) {
        final boolean showMessage = getArguments().getBoolean(SHOW_MESSAGE);
        final View view = inflater.inflate(R.layout.fragment_empty, container, false);
        view.findViewById(R.id.empty_state_view).setVisibility(
                showMessage ? View.VISIBLE : View.GONE);
        return view;
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onCreate,void onCreate(Bundle),"[197, 245]","{'A302': [(197, 197)], 'A300': [(216, 216)], 'A328': [(208, 210), (213, 215), (221, 221), (223, 226), (229, 240), (242, 244)], 'A301': [(199, 199), (204, 204), (245, 245)], 'A425': [(217, 217)], 'A295': [(219, 219)], 'A305': [(207, 207), (211, 212)], 'A294': [(198, 198), (200, 203), (205, 206), (222, 222), (227, 228), (241, 241)], 'A386': [(218, 218), (220, 220)]}","{'A302': 0.02040816326530612, 'A300': 0.02040816326530612, 'A328': 0.5306122448979592, 'A301': 0.061224489795918366, 'A425': 0.02040816326530612, 'A295': 0.02040816326530612, 'A305': 0.061224489795918366, 'A294': 0.22448979591836735, 'A386': 0.04081632653061224}",A328,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (DEBUG) {
            Log.d(TAG, ""onCreate() called with: ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }

        if (!PermissionHelper.checkStoragePermissions(getActivity(),
                PermissionHelper.DOWNLOAD_DIALOG_REQUEST_CODE)) {
            dismiss();
            return;
        }

        // context will remain null if dismiss() was called above, allowing to check whether the
        // dialog is being dismissed in onViewCreated()
        context = getContext();

        setStyle(STYLE_NO_TITLE, ThemeHelper.getDialogTheme(context));
        Bridge.restoreInstanceState(this, savedInstanceState);

        this.audioTrackAdapter = new AudioTrackAdapter(wrappedAudioTracks);
        this.subtitleStreamsAdapter = new StreamItemAdapter<>(wrappedSubtitleStreams);
        updateSecondaryStreams();

        final Intent intent = new Intent(context, DownloadManagerService.class);
        context.startService(intent);

        context.bindService(intent, new ServiceConnection() {
            @Override
            public void onServiceConnected(final ComponentName cname, final IBinder service) {
                final DownloadManagerBinder mgr = (DownloadManagerBinder) service;

                mainStorageAudio = mgr.getMainStorageAudio();
                mainStorageVideo = mgr.getMainStorageVideo();
                downloadManager = mgr.getDownloadManager();
                askForSavePath = mgr.askForSavePath();

                okButton.setEnabled(true);

                context.unbindService(this);
            }

            @Override
            public void onServiceDisconnected(final ComponentName name) {
                // nothing to do
            }
        }, Context.BIND_AUTO_CREATE);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onServiceConnected,"void onServiceConnected(ComponentName,IBinder)","[226, 238]","{'A328': [(226, 226), (229, 238)], 'A294': [(227, 228)]}","{'A328': 0.8461538461538461, 'A294': 0.15384615384615385}",A328,,"            @Override
            public void onServiceConnected(final ComponentName cname, final IBinder service) {
                final DownloadManagerBinder mgr = (DownloadManagerBinder) service;

                mainStorageAudio = mgr.getMainStorageAudio();
                mainStorageVideo = mgr.getMainStorageVideo();
                downloadManager = mgr.getDownloadManager();
                askForSavePath = mgr.askForSavePath();

                okButton.setEnabled(true);

                context.unbindService(this);
            }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onServiceDisconnected,void onServiceDisconnected(ComponentName),"[240, 243]","{'A328': [(240, 240), (242, 243)], 'A294': [(241, 241)]}","{'A328': 0.75, 'A294': 0.25}",A328,,"            @Override
            public void onServiceDisconnected(final ComponentName name) {
                // nothing to do
            }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,updateSecondaryStreams,void updateSecondaryStreams(),"[250, 278]","{'A298': [(251, 251), (254, 254)], 'A333': [(260, 261)], 'A386': [(250, 250), (252, 253), (255, 259), (262, 278)]}","{'A298': 0.06896551724137931, 'A333': 0.06896551724137931, 'A386': 0.8620689655172413}",A386,,"    private void updateSecondaryStreams() {
        final StreamInfoWrapper<AudioStream> audioStreams = getWrappedAudioStreams();
        final var secondaryStreams = new SparseArrayCompat<SecondaryStreamHelper<AudioStream>>(4);
        final List<VideoStream> videoStreams = wrappedVideoStreams.getStreamsList();
        wrappedVideoStreams.resetInfo();

        for (int i = 0; i < videoStreams.size(); i++) {
            if (!videoStreams.get(i).isVideoOnly()) {
                continue;
            }
            final AudioStream audioStream = SecondaryStreamHelper.getAudioStreamFor(
                    context, audioStreams.getStreamsList(), videoStreams.get(i));

            if (audioStream != null) {
                secondaryStreams.append(i, new SecondaryStreamHelper<>(audioStreams, audioStream));
            } else if (DEBUG) {
                final MediaFormat mediaFormat = videoStreams.get(i).getFormat();
                if (mediaFormat != null) {
                    Log.w(TAG, ""No audio stream candidates for video format ""
                            + mediaFormat.name());
                } else {
                    Log.w(TAG, ""No audio stream candidates for unknown video format"");
                }
            }
        }

        this.videoStreamsAdapter = new StreamItemAdapter<>(wrappedVideoStreams, secondaryStreams);
        this.audioStreamsAdapter = new StreamItemAdapter<>(audioStreams);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[280, 290]","{'A301': [(280, 280), (289, 289)], 'A425': [(290, 290)], 'A294': [(283, 288)], 'A333': [(281, 282)]}","{'A301': 0.18181818181818182, 'A425': 0.09090909090909091, 'A294': 0.5454545454545454, 'A333': 0.18181818181818182}",A294,,"    @Override
    public View onCreateView(@NonNull final LayoutInflater inflater,
                             final ViewGroup container,
                             final Bundle savedInstanceState) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateView() called with: ""
                    + ""inflater = ["" + inflater + ""], container = ["" + container + ""], ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }
        return inflater.inflate(R.layout.download_dialog, container);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onViewCreated,"void onViewCreated(View,Bundle)","[292, 334]","{'A328': [(306, 307), (317, 317)], 'A301': [(314, 315), (332, 334)], 'A425': [(292, 292), (295, 295), (305, 305), (312, 312), (322, 322), (330, 331)], 'A299': [(316, 316), (321, 321)], 'A295': [(296, 296), (300, 302), (308, 308), (311, 311), (313, 313), (319, 320), (329, 329)], 'A305': [(297, 299)], 'A294': [(318, 318), (325, 328)], 'A298': [(309, 309)], 'A333': [(293, 294), (323, 324)], 'A386': [(303, 304), (310, 310)]}","{'A328': 0.06976744186046512, 'A301': 0.11627906976744186, 'A425': 0.16279069767441862, 'A299': 0.046511627906976744, 'A295': 0.23255813953488372, 'A305': 0.06976744186046512, 'A294': 0.11627906976744186, 'A298': 0.023255813953488372, 'A333': 0.09302325581395349, 'A386': 0.06976744186046512}",A295,,"    @Override
    public void onViewCreated(@NonNull final View view,
                              @Nullable final Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        dialogBinding = DownloadDialogBinding.bind(view);
        if (context == null) {
            return; // the dialog is being dismissed, see the call to dismiss() in onCreate()
        }

        dialogBinding.fileName.setText(FilenameUtils.createFilename(getContext(),
                currentInfo.getName()));
        selectedAudioIndex = ListHelper.getDefaultAudioFormat(getContext(),
                getWrappedAudioStreams().getStreamsList());

        selectedSubtitleIndex = getSubtitleIndexBy(subtitleStreamsAdapter.getAll());

        dialogBinding.qualitySpinner.setOnItemSelectedListener(this);
        dialogBinding.audioStreamSpinner.setOnItemSelectedListener(this);
        dialogBinding.audioTrackSpinner.setOnItemSelectedListener(this);
        dialogBinding.videoAudioGroup.setOnCheckedChangeListener(this);

        initToolbar(dialogBinding.toolbarLayout.toolbar);
        setupDownloadOptions();

        prefs = PreferenceManager.getDefaultSharedPreferences(requireContext());

        final int threads = prefs.getInt(getString(R.string.default_download_threads), 3);
        dialogBinding.threadsCount.setText(String.valueOf(threads));
        dialogBinding.threads.setProgress(threads - 1);
        dialogBinding.threads.setOnSeekBarChangeListener(new SimpleOnSeekBarChangeListener() {
            @Override
            public void onProgressChanged(@NonNull final SeekBar seekbar,
                                          final int progress,
                                          final boolean fromUser) {
                final int newProgress = progress + 1;
                prefs.edit().putInt(getString(R.string.default_download_threads), newProgress)
                        .apply();
                dialogBinding.threadsCount.setText(String.valueOf(newProgress));
            }
        });

        fetchStreamsSize();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onProgressChanged,"void onProgressChanged(SeekBar,int,boolean)","[322, 330]","{'A425': [(322, 322), (330, 330)], 'A295': [(329, 329)], 'A294': [(325, 328)], 'A333': [(323, 324)]}","{'A425': 0.2222222222222222, 'A295': 0.1111111111111111, 'A294': 0.4444444444444444, 'A333': 0.2222222222222222}",A294,,"            @Override
            public void onProgressChanged(@NonNull final SeekBar seekbar,
                                          final int progress,
                                          final boolean fromUser) {
                final int newProgress = progress + 1;
                prefs.edit().putInt(getString(R.string.default_download_threads), newProgress)
                        .apply();
                dialogBinding.threadsCount.setText(String.valueOf(newProgress));
            }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,initToolbar,void initToolbar(Toolbar),"[336, 357]","{'A305': [(336, 357)]}",{'A305': 1.0},A305,,"    private void initToolbar(final Toolbar toolbar) {
        if (DEBUG) {
            Log.d(TAG, ""initToolbar() called with: toolbar = ["" + toolbar + ""]"");
        }

        toolbar.setTitle(R.string.download_dialog_title);
        toolbar.setNavigationIcon(R.drawable.ic_arrow_back);
        toolbar.inflateMenu(R.menu.dialog_url);
        toolbar.setNavigationOnClickListener(v -> dismiss());
        toolbar.setNavigationContentDescription(R.string.cancel);

        okButton = toolbar.findViewById(R.id.okay);
        okButton.setEnabled(false); // disable until the download service connection is done

        toolbar.setOnMenuItemClickListener(item -> {
            if (item.getItemId() == R.id.okay) {
                prepareSelectedDownload();
                return true;
            }
            return false;
        });
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onDestroy,void onDestroy(),"[359, 363]","{'A305': [(359, 363)]}",{'A305': 1.0},A305,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        disposables.clear();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onDestroyView,void onDestroyView(),"[365, 369]","{'A305': [(365, 369)]}",{'A305': 1.0},A305,,"    @Override
    public void onDestroyView() {
        dialogBinding = null;
        super.onDestroyView();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onSaveInstanceState,void onSaveInstanceState(Bundle),"[371, 375]","{'A300': [(374, 374)], 'A305': [(371, 373), (375, 375)]}","{'A300': 0.2, 'A305': 0.8}",A305,,"    @Override
    public void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        Bridge.saveInstanceState(this, outState);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,fetchStreamsSize,void fetchStreamsSize(),"[382, 414]","{'A301': [(382, 383), (414, 414)], 'A305': [(390, 390), (400, 400), (410, 410)], 'A294': [(385, 385), (395, 395), (405, 405)], 'A298': [(384, 384), (394, 394), (404, 404)], 'A325': [(386, 389), (391, 393), (396, 399), (401, 403), (406, 409), (411, 413)]}","{'A301': 0.09090909090909091, 'A305': 0.09090909090909091, 'A294': 0.09090909090909091, 'A298': 0.09090909090909091, 'A325': 0.6363636363636364}",A325,,"    private void fetchStreamsSize() {
        disposables.clear();
        disposables.add(StreamInfoWrapper.fetchMoreInfoForWrapper(wrappedVideoStreams)
                .subscribe(result -> {
                    if (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()
                            == R.id.video_button) {
                        setupVideoSpinner();
                    }
                }, throwable -> ErrorUtil.showSnackbar(context,
                        new ErrorInfo(throwable, UserAction.DOWNLOAD_OPEN_DIALOG,
                                ""Downloading video stream size"",
                                currentInfo.getServiceId()))));
        disposables.add(StreamInfoWrapper.fetchMoreInfoForWrapper(getWrappedAudioStreams())
                .subscribe(result -> {
                    if (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()
                            == R.id.audio_button) {
                        setupAudioSpinner();
                    }
                }, throwable -> ErrorUtil.showSnackbar(context,
                        new ErrorInfo(throwable, UserAction.DOWNLOAD_OPEN_DIALOG,
                                ""Downloading audio stream size"",
                                currentInfo.getServiceId()))));
        disposables.add(StreamInfoWrapper.fetchMoreInfoForWrapper(wrappedSubtitleStreams)
                .subscribe(result -> {
                    if (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()
                            == R.id.subtitle_button) {
                        setupSubtitleSpinner();
                    }
                }, throwable -> ErrorUtil.showSnackbar(context,
                        new ErrorInfo(throwable, UserAction.DOWNLOAD_OPEN_DIALOG,
                                ""Downloading subtitle stream size"",
                                currentInfo.getServiceId()))));
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,setupAudioTrackSpinner,void setupAudioTrackSpinner(),"[416, 423]","{'A386': [(416, 423)]}",{'A386': 1.0},A386,,"    private void setupAudioTrackSpinner() {
        if (getContext() == null) {
            return;
        }

        dialogBinding.audioTrackSpinner.setAdapter(audioTrackAdapter);
        dialogBinding.audioTrackSpinner.setSelection(selectedAudioTrackIndex);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,setupAudioSpinner,void setupAudioSpinner(),"[425, 438]","{'A301': [(438, 438)], 'A305': [(425, 429), (431, 431)], 'A333': [(437, 437)], 'A386': [(430, 430), (432, 436)]}","{'A301': 0.07142857142857142, 'A305': 0.42857142857142855, 'A333': 0.07142857142857142, 'A386': 0.42857142857142855}",A305,,"    private void setupAudioSpinner() {
        if (getContext() == null) {
            return;
        }

        dialogBinding.qualitySpinner.setVisibility(View.GONE);
        setRadioButtonsState(true);
        dialogBinding.audioStreamSpinner.setAdapter(audioStreamsAdapter);
        dialogBinding.audioStreamSpinner.setSelection(selectedAudioIndex);
        dialogBinding.audioStreamSpinner.setVisibility(View.VISIBLE);
        dialogBinding.audioTrackSpinner.setVisibility(
                wrappedAudioTracks.size() > 1 ? View.VISIBLE : View.GONE);
        dialogBinding.audioTrackPresentInVideoText.setVisibility(View.GONE);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,setupVideoSpinner,void setupVideoSpinner(),"[440, 451]","{'A305': [(440, 446), (448, 448)], 'A386': [(447, 447), (449, 451)]}","{'A305': 0.6666666666666666, 'A386': 0.3333333333333333}",A305,,"    private void setupVideoSpinner() {
        if (getContext() == null) {
            return;
        }

        dialogBinding.qualitySpinner.setAdapter(videoStreamsAdapter);
        dialogBinding.qualitySpinner.setSelection(selectedVideoIndex);
        dialogBinding.qualitySpinner.setVisibility(View.VISIBLE);
        setRadioButtonsState(true);
        dialogBinding.audioStreamSpinner.setVisibility(View.GONE);
        onVideoStreamSelected();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onVideoStreamSelected,void onVideoStreamSelected(),"[453, 460]","{'A295': [(460, 460)], 'A333': [(458, 458)], 'A386': [(453, 457), (459, 459)]}","{'A295': 0.125, 'A333': 0.125, 'A386': 0.75}",A386,,"    private void onVideoStreamSelected() {
        final boolean isVideoOnly = videoStreamsAdapter.getItem(selectedVideoIndex).isVideoOnly();

        dialogBinding.audioTrackSpinner.setVisibility(
                isVideoOnly && wrappedAudioTracks.size() > 1 ? View.VISIBLE : View.GONE);
        dialogBinding.audioTrackPresentInVideoText.setVisibility(
                !isVideoOnly && wrappedAudioTracks.size() > 1 ? View.VISIBLE : View.GONE);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,setupSubtitleSpinner,void setupSubtitleSpinner(),"[462, 474]","{'A301': [(474, 474)], 'A305': [(462, 465), (467, 468), (470, 470)], 'A294': [(466, 466)], 'A333': [(473, 473)], 'A386': [(469, 469), (471, 472)]}","{'A301': 0.07692307692307693, 'A305': 0.5384615384615384, 'A294': 0.07692307692307693, 'A333': 0.07692307692307693, 'A386': 0.23076923076923078}",A305,,"    private void setupSubtitleSpinner() {
        if (getContext() == null) {
            return;
        }

        dialogBinding.qualitySpinner.setAdapter(subtitleStreamsAdapter);
        dialogBinding.qualitySpinner.setSelection(selectedSubtitleIndex);
        dialogBinding.qualitySpinner.setVisibility(View.VISIBLE);
        setRadioButtonsState(true);
        dialogBinding.audioStreamSpinner.setVisibility(View.GONE);
        dialogBinding.audioTrackSpinner.setVisibility(View.GONE);
        dialogBinding.audioTrackPresentInVideoText.setVisibility(View.GONE);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,requestDownloadPickAudioFolderResult,void requestDownloadPickAudioFolderResult(ActivityResult),"[481, 484]","{'A299': [(481, 484)]}",{'A299': 1.0},A299,,"    private void requestDownloadPickAudioFolderResult(final ActivityResult result) {
        requestDownloadPickFolderResult(
                result, getString(R.string.download_path_audio_key), DownloadManager.TAG_AUDIO);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,requestDownloadPickVideoFolderResult,void requestDownloadPickVideoFolderResult(ActivityResult),"[486, 489]","{'A299': [(486, 489)]}",{'A299': 1.0},A299,,"    private void requestDownloadPickVideoFolderResult(final ActivityResult result) {
        requestDownloadPickFolderResult(
                result, getString(R.string.download_path_video_key), DownloadManager.TAG_VIDEO);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,requestDownloadSaveAsResult,void requestDownloadSaveAsResult(ActivityResult),"[491, 518]","{'A328': [(495, 495), (507, 507), (514, 514)], 'A299': [(492, 492), (496, 496), (501, 506), (510, 513), (515, 518)], 'A294': [(493, 494), (497, 500)], 'A333': [(491, 491), (508, 509)]}","{'A328': 0.10714285714285714, 'A299': 0.5714285714285714, 'A294': 0.21428571428571427, 'A333': 0.10714285714285714}",A299,,"    private void requestDownloadSaveAsResult(@NonNull final ActivityResult result) {
        if (result.getResultCode() != Activity.RESULT_OK) {
            return;
        }

        if (result.getData() == null || result.getData().getData() == null) {
            showFailedDialog(R.string.general_error);
            return;
        }

        if (FilePickerActivityHelper.isOwnFileUri(context, result.getData().getData())) {
            final File file = Utils.getFileForUri(result.getData().getData());
            checkSelectedDownload(null, Uri.fromFile(file), file.getName(),
                    StoredFileHelper.DEFAULT_MIME);
            return;
        }

        final DocumentFile docFile = DocumentFile.fromSingleUri(context,
                result.getData().getData());
        if (docFile == null) {
            showFailedDialog(R.string.general_error);
            return;
        }

        // check if the selected file was previously used
        checkSelectedDownload(null, result.getData().getData(), docFile.getName(),
                docFile.getType());
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,requestDownloadPickFolderResult,"void requestDownloadPickFolderResult(ActivityResult,String,String)","[520, 550]","{'A328': [(549, 550)], 'A299': [(521, 525), (527, 530), (532, 539), (542, 543), (545, 548)], 'A294': [(526, 526), (531, 531)], 'A333': [(520, 520), (540, 541), (544, 544)]}","{'A328': 0.06451612903225806, 'A299': 0.7419354838709677, 'A294': 0.06451612903225806, 'A333': 0.12903225806451613}",A299,,"    private void requestDownloadPickFolderResult(@NonNull final ActivityResult result,
                                                 final String key,
                                                 final String tag) {
        if (result.getResultCode() != Activity.RESULT_OK) {
            return;
        }

        if (result.getData() == null || result.getData().getData() == null) {
            showFailedDialog(R.string.general_error);
            return;
        }

        Uri uri = result.getData().getData();
        if (FilePickerActivityHelper.isOwnFileUri(context, uri)) {
            uri = Uri.fromFile(Utils.getFileForUri(uri));
        } else {
            context.grantUriPermission(context.getPackageName(), uri,
                    StoredDirectoryHelper.PERMISSION_FLAGS);
        }

        PreferenceManager.getDefaultSharedPreferences(context).edit().putString(key,
                uri.toString()).apply();

        try {
            final StoredDirectoryHelper mainStorage = new StoredDirectoryHelper(context, uri, tag);
            checkSelectedDownload(mainStorage, mainStorage.findFile(filenameTmp),
                    filenameTmp, mimeTmp);
        } catch (final IOException e) {
            showFailedDialog(R.string.general_error);
        }
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onCheckedChanged,"void onCheckedChanged(RadioGroup,int)","[556, 578]","{'A328': [(562, 563), (571, 574), (576, 576)], 'A301': [(556, 556), (564, 570), (575, 575), (578, 578)], 'A295': [(577, 577)], 'A294': [(557, 561)]}","{'A328': 0.30434782608695654, 'A301': 0.43478260869565216, 'A295': 0.043478260869565216, 'A294': 0.21739130434782608}",A301,,"    @Override
    public void onCheckedChanged(final RadioGroup group, @IdRes final int checkedId) {
        if (DEBUG) {
            Log.d(TAG, ""onCheckedChanged() called with: ""
                    + ""group = ["" + group + ""], checkedId = ["" + checkedId + ""]"");
        }
        boolean flag = true;

        switch (checkedId) {
            case R.id.audio_button:
                setupAudioSpinner();
                break;
            case R.id.video_button:
                setupVideoSpinner();
                break;
            case R.id.subtitle_button:
                setupSubtitleSpinner();
                flag = false;
                break;
        }

        dialogBinding.threads.setEnabled(flag);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onItemSelected,"void onItemSelected(AdapterView<?>,View,int,long)","[580, 615]","{'A328': [(611, 611)], 'A301': [(580, 580), (603, 603), (614, 614)], 'A294': [(585, 589)], 'A333': [(581, 584)], 'A386': [(590, 602), (604, 610), (612, 613)], 'A344': [(615, 615)]}","{'A328': 0.027777777777777776, 'A301': 0.08333333333333333, 'A294': 0.1388888888888889, 'A333': 0.1111111111111111, 'A386': 0.6111111111111112, 'A344': 0.027777777777777776}",A386,,"    @Override
    public void onItemSelected(final AdapterView<?> parent,
                               final View view,
                               final int position,
                               final long id) {
        if (DEBUG) {
            Log.d(TAG, ""onItemSelected() called with: ""
                    + ""parent = ["" + parent + ""], view = ["" + view + ""], ""
                    + ""position = ["" + position + ""], id = ["" + id + ""]"");
        }

        switch (parent.getId()) {
            case R.id.quality_spinner:
                switch (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()) {
                    case R.id.video_button:
                        selectedVideoIndex = position;
                        onVideoStreamSelected();
                        break;
                    case R.id.subtitle_button:
                        selectedSubtitleIndex = position;
                        break;
                }
                onItemSelectedSetFileName();
                break;
            case R.id.audio_track_spinner:
                final boolean trackChanged = selectedAudioTrackIndex != position;
                selectedAudioTrackIndex = position;
                if (trackChanged) {
                    updateSecondaryStreams();
                    fetchStreamsSize();
                }
                break;
            case R.id.audio_stream_spinner:
                selectedAudioIndex = position;
        }
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onItemSelectedSetFileName,void onItemSelectedSetFileName(),"[617, 647]","{'A301': [(647, 647)], 'A305': [(618, 645)], 'A344': [(617, 617), (646, 646)]}","{'A301': 0.03225806451612903, 'A305': 0.9032258064516129, 'A344': 0.06451612903225806}",A305,,"    private void onItemSelectedSetFileName() {
        final String fileName = FilenameUtils.createFilename(getContext(), currentInfo.getName());
        final String prevFileName = Optional.ofNullable(dialogBinding.fileName.getText())
                .map(Object::toString)
                .orElse("""");

        if (prevFileName.isEmpty()
                || prevFileName.equals(fileName)
                || prevFileName.startsWith(getString(R.string.caption_file_name, fileName, """"))) {
            // only update the file name field if it was not edited by the user

            switch (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()) {
                case R.id.audio_button:
                case R.id.video_button:
                    if (!prevFileName.equals(fileName)) {
                        // since the user might have switched between audio and video, the correct
                        // text might already be in place, so avoid resetting the cursor position
                        dialogBinding.fileName.setText(fileName);
                    }
                    break;

                case R.id.subtitle_button:
                    final String setSubtitleLanguageCode = subtitleStreamsAdapter
                            .getItem(selectedSubtitleIndex).getLanguageTag();
                    // this will reset the cursor position, which is bad UX, but it can't be avoided
                    dialogBinding.fileName.setText(getString(
                            R.string.caption_file_name, fileName, setSubtitleLanguageCode));
                    break;
            }
        }
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,onNothingSelected,void onNothingSelected(AdapterView<?>),"[649, 651]","{'A301': [(649, 649), (651, 651)], 'A294': [(650, 650)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    @Override
    public void onNothingSelected(final AdapterView<?> parent) {
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,setupDownloadOptions,void setupDownloadOptions(),"[658, 703]","{'A302': [(702, 703)], 'A328': [(664, 664), (695, 695), (697, 697)], 'A301': [(658, 659), (661, 663), (672, 672), (691, 692), (694, 694), (698, 698)], 'A425': [(665, 665)], 'A295': [(670, 671), (679, 679), (683, 683), (687, 687), (690, 690), (693, 693), (696, 696)], 'A305': [(673, 673), (701, 701)], 'A294': [(699, 700)], 'A333': [(666, 669), (675, 675)], 'A386': [(660, 660)], 'A427': [(674, 674), (676, 678), (680, 682), (684, 686), (688, 689)]}","{'A302': 0.043478260869565216, 'A328': 0.06521739130434782, 'A301': 0.21739130434782608, 'A425': 0.021739130434782608, 'A295': 0.17391304347826086, 'A305': 0.043478260869565216, 'A294': 0.043478260869565216, 'A333': 0.10869565217391304, 'A386': 0.021739130434782608, 'A427': 0.2608695652173913}",A427,,"    protected void setupDownloadOptions() {
        setRadioButtonsState(false);
        setupAudioTrackSpinner();

        final boolean isVideoStreamsAvailable = videoStreamsAdapter.getCount() > 0;
        final boolean isAudioStreamsAvailable = audioStreamsAdapter.getCount() > 0;
        final boolean isSubtitleStreamsAvailable = subtitleStreamsAdapter.getCount() > 0;

        dialogBinding.audioButton.setVisibility(isAudioStreamsAvailable ? View.VISIBLE
                : View.GONE);
        dialogBinding.videoButton.setVisibility(isVideoStreamsAvailable ? View.VISIBLE
                : View.GONE);
        dialogBinding.subtitleButton.setVisibility(isSubtitleStreamsAvailable
                ? View.VISIBLE : View.GONE);

        prefs = PreferenceManager.getDefaultSharedPreferences(requireContext());
        final String defaultMedia = prefs.getString(getString(R.string.last_used_download_type),
                getString(R.string.last_download_type_video_key));

        if (isVideoStreamsAvailable
                && (defaultMedia.equals(getString(R.string.last_download_type_video_key)))) {
            dialogBinding.videoButton.setChecked(true);
            setupVideoSpinner();
        } else if (isAudioStreamsAvailable
                && (defaultMedia.equals(getString(R.string.last_download_type_audio_key)))) {
            dialogBinding.audioButton.setChecked(true);
            setupAudioSpinner();
        } else if (isSubtitleStreamsAvailable
                && (defaultMedia.equals(getString(R.string.last_download_type_subtitle_key)))) {
            dialogBinding.subtitleButton.setChecked(true);
            setupSubtitleSpinner();
        } else if (isVideoStreamsAvailable) {
            dialogBinding.videoButton.setChecked(true);
            setupVideoSpinner();
        } else if (isAudioStreamsAvailable) {
            dialogBinding.audioButton.setChecked(true);
            setupAudioSpinner();
        } else if (isSubtitleStreamsAvailable) {
            dialogBinding.subtitleButton.setChecked(true);
            setupSubtitleSpinner();
        } else {
            Toast.makeText(getContext(), R.string.no_streams_available_download,
                    Toast.LENGTH_SHORT).show();
            dismiss();
        }
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,setRadioButtonsState,void setRadioButtonsState(boolean),"[705, 709]","{'A301': [(709, 709)], 'A295': [(706, 708)], 'A294': [(705, 705)]}","{'A301': 0.2, 'A295': 0.6, 'A294': 0.2}",A295,,"    private void setRadioButtonsState(final boolean enabled) {
        dialogBinding.audioButton.setEnabled(enabled);
        dialogBinding.videoButton.setEnabled(enabled);
        dialogBinding.subtitleButton.setEnabled(enabled);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,getWrappedAudioStreams,StreamInfoWrapper<AudioStream> getWrappedAudioStreams(),"[711, 716]","{'A298': [(711, 711), (713, 713)], 'A386': [(712, 712), (714, 716)]}","{'A298': 0.3333333333333333, 'A386': 0.6666666666666666}",A386,,"    private StreamInfoWrapper<AudioStream> getWrappedAudioStreams() {
        if (selectedAudioTrackIndex < 0 || selectedAudioTrackIndex > wrappedAudioTracks.size()) {
            return StreamInfoWrapper.empty();
        }
        return wrappedAudioTracks.getTracksList().get(selectedAudioTrackIndex);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,getSubtitleIndexBy,int getSubtitleIndexBy(List<SubtitlesStream>),"[718, 742]","{'A328': [(720, 720), (722, 722), (736, 736), (738, 740), (742, 742)], 'A301': [(719, 719), (721, 721), (723, 724), (731, 732), (737, 737), (741, 741)], 'A294': [(725, 730), (733, 735)], 'A333': [(718, 718)]}","{'A328': 0.28, 'A301': 0.32, 'A294': 0.36, 'A333': 0.04}",A294,,"    private int getSubtitleIndexBy(@NonNull final List<SubtitlesStream> streams) {
        final Localization preferredLocalization = NewPipe.getPreferredLocalization();

        int candidate = 0;
        for (int i = 0; i < streams.size(); i++) {
            final Locale streamLocale = streams.get(i).getLocale();

            final boolean languageEquals = streamLocale.getLanguage() != null
                    && preferredLocalization.getLanguageCode() != null
                    && streamLocale.getLanguage()
                    .equals(new Locale(preferredLocalization.getLanguageCode()).getLanguage());
            final boolean countryEquals = streamLocale.getCountry() != null
                    && streamLocale.getCountry().equals(preferredLocalization.getCountryCode());

            if (languageEquals) {
                if (countryEquals) {
                    return i;
                }

                candidate = i;
            }
        }

        return candidate;
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,getNameEditText,String getNameEditText(),"[744, 750]","{'A328': [(745, 745), (748, 750)], 'A333': [(744, 744), (746, 747)]}","{'A328': 0.5714285714285714, 'A333': 0.42857142857142855}",A328,,"    @NonNull
    private String getNameEditText() {
        final String str = Objects.requireNonNull(dialogBinding.fileName.getText()).toString()
                .trim();

        return FilenameUtils.createFilename(context, str.isEmpty() ? currentInfo.getName() : str);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,showFailedDialog,void showFailedDialog(int),"[752, 758]","{'A328': [(753, 755), (757, 758)], 'A305': [(756, 756)], 'A294': [(752, 752)]}","{'A328': 0.7142857142857143, 'A305': 0.14285714285714285, 'A294': 0.14285714285714285}",A328,,"    private void showFailedDialog(@StringRes final int msg) {
        new AlertDialog.Builder(context)
                .setTitle(R.string.general_error)
                .setMessage(msg)
                .setNegativeButton(getString(R.string.ok), null)
                .show();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,launchDirectoryPicker,void launchDirectoryPicker(ActivityResultLauncher<Intent>),"[760, 763]","{'A299': [(760, 760), (763, 763)], 'A333': [(761, 762)]}","{'A299': 0.5, 'A333': 0.5}",A299,,"    private void launchDirectoryPicker(final ActivityResultLauncher<Intent> launcher) {
        NoFileManagerSafeGuard.launchSafe(launcher, StoredDirectoryHelper.getPicker(context), TAG,
                context);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,prepareSelectedDownload,void prepareSelectedDownload(),"[765, 882]","{'A302': [(770, 770)], 'A328': [(765, 765), (771, 773), (775, 775), (777, 777), (779, 780), (788, 790), (792, 793), (799, 800), (803, 803), (814, 818), (835, 835), (841, 841), (843, 843), (846, 846), (848, 848), (851, 852), (857, 859), (875, 875), (882, 882)], 'A424': [(769, 769), (781, 781), (794, 794), (804, 804), (871, 871), (873, 874)], 'A299': [(831, 831), (833, 833)], 'A295': [(776, 776), (845, 845)], 'A305': [(785, 786), (811, 811), (820, 821), (826, 826), (840, 840), (842, 842), (850, 850), (860, 870), (872, 872)], 'A294': [(766, 767), (774, 774), (782, 784), (802, 802), (822, 825), (827, 830), (832, 832), (834, 834), (836, 839), (844, 844), (847, 847), (849, 849), (856, 856), (880, 880)], 'A298': [(787, 787), (797, 797), (810, 810), (812, 812)], 'A333': [(795, 796), (798, 798), (805, 809), (813, 813), (819, 819), (853, 855), (876, 877)], 'A427': [(768, 768), (778, 778), (791, 791), (801, 801), (878, 879), (881, 881)]}","{'A302': 0.00847457627118644, 'A328': 0.2796610169491525, 'A424': 0.059322033898305086, 'A299': 0.01694915254237288, 'A295': 0.01694915254237288, 'A305': 0.17796610169491525, 'A294': 0.22033898305084745, 'A298': 0.03389830508474576, 'A333': 0.1271186440677966, 'A427': 0.059322033898305086}",A328,,"    private void prepareSelectedDownload() {
        final StoredDirectoryHelper mainStorage;
        final MediaFormat format;
        final String selectedMediaType;
        final long size;

        // first, build the filename and get the output folder (if possible)
        // later, run a very very very large file checking logic

        filenameTmp = getNameEditText().concat(""."");

        switch (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()) {
            case R.id.audio_button:
                selectedMediaType = getString(R.string.last_download_type_audio_key);
                mainStorage = mainStorageAudio;
                format = audioStreamsAdapter.getItem(selectedAudioIndex).getFormat();
                size = getWrappedAudioStreams().getSizeInBytes(selectedAudioIndex);
                if (format == MediaFormat.WEBMA_OPUS) {
                    mimeTmp = ""audio/ogg"";
                    filenameTmp += ""opus"";
                } else if (format != null) {
                    mimeTmp = format.mimeType;
                    filenameTmp += format.getSuffix();
                }
                break;
            case R.id.video_button:
                selectedMediaType = getString(R.string.last_download_type_video_key);
                mainStorage = mainStorageVideo;
                format = videoStreamsAdapter.getItem(selectedVideoIndex).getFormat();
                size = wrappedVideoStreams.getSizeInBytes(selectedVideoIndex);
                if (format != null) {
                    mimeTmp = format.mimeType;
                    filenameTmp += format.getSuffix();
                }
                break;
            case R.id.subtitle_button:
                selectedMediaType = getString(R.string.last_download_type_subtitle_key);
                mainStorage = mainStorageVideo; // subtitle & video files go together
                format = subtitleStreamsAdapter.getItem(selectedSubtitleIndex).getFormat();
                size = wrappedSubtitleStreams.getSizeInBytes(selectedSubtitleIndex);
                if (format != null) {
                    mimeTmp = format.mimeType;
                }

                if (format == MediaFormat.TTML) {
                    filenameTmp += MediaFormat.SRT.getSuffix();
                } else if (format != null) {
                    filenameTmp += format.getSuffix();
                }
                break;
            default:
                throw new RuntimeException(""No stream selected"");
        }

        if (!askForSavePath && (mainStorage == null
                || mainStorage.isDirect() == NewPipeSettings.useStorageAccessFramework(context)
                || mainStorage.isInvalidSafStorage())) {
            // Pick new download folder if one of:
            // - Download folder is not set
            // - Download folder uses SAF while SAF is disabled
            // - Download folder doesn't use SAF while SAF is enabled
            // - Download folder uses SAF but the user manually revoked access to it
            Toast.makeText(context, getString(R.string.no_dir_yet),
                    Toast.LENGTH_LONG).show();

            if (dialogBinding.videoAudioGroup.getCheckedRadioButtonId() == R.id.audio_button) {
                launchDirectoryPicker(requestDownloadPickAudioFolderLauncher);
            } else {
                launchDirectoryPicker(requestDownloadPickVideoFolderLauncher);
            }

            return;
        }

        if (askForSavePath) {
            final Uri initialPath;
            if (NewPipeSettings.useStorageAccessFramework(context)) {
                initialPath = null;
            } else {
                final File initialSavePath;
                if (dialogBinding.videoAudioGroup.getCheckedRadioButtonId() == R.id.audio_button) {
                    initialSavePath = NewPipeSettings.getDir(Environment.DIRECTORY_MUSIC);
                } else {
                    initialSavePath = NewPipeSettings.getDir(Environment.DIRECTORY_MOVIES);
                }
                initialPath = Uri.parse(initialSavePath.getAbsolutePath());
            }

            NoFileManagerSafeGuard.launchSafe(requestDownloadSaveAsLauncher,
                    StoredFileHelper.getNewPicker(context, filenameTmp, mimeTmp, initialPath), TAG,
                    context);

            return;
        }

        // Check for free storage space
        final long freeSpace = mainStorage.getFreeStorageSpace();
        if (freeSpace <= size) {
            Toast.makeText(context, getString(R.
                    string.error_insufficient_storage), Toast.LENGTH_LONG).show();
            // move the user to storage setting tab
            final Intent storageSettingsIntent = new Intent(Settings.
                    ACTION_INTERNAL_STORAGE_SETTINGS);
            if (storageSettingsIntent.resolveActivity(context.getPackageManager())
                    != null) {
                startActivity(storageSettingsIntent);
            }
            return;
        }

        // check for existing file with the same name
        checkSelectedDownload(mainStorage, mainStorage.findFile(filenameTmp), filenameTmp,
                mimeTmp);

        // remember the last media type downloaded by the user
        prefs.edit().putString(getString(R.string.last_used_download_type), selectedMediaType)
                .apply();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,checkSelectedDownload,"void checkSelectedDownload(StoredDirectoryHelper,Uri,String,String)","[884, 1033]","{'A328': [(888, 895), (898, 899), (902, 902), (906, 908), (913, 913), (915, 915), (917, 927), (929, 962), (964, 965), (967, 968), (970, 987), (989, 1005), (1011, 1014), (1016, 1016), (1018, 1018), (1020, 1022), (1024, 1024), (1026, 1026), (1028, 1031), (1033, 1033)], 'A299': [(988, 988), (1032, 1032)], 'A305': [(904, 905), (909, 909), (911, 912), (914, 914), (916, 916), (928, 928), (963, 963), (969, 969)], 'A294': [(884, 884), (887, 887), (896, 897), (900, 901), (903, 903), (910, 910), (966, 966), (1006, 1010), (1015, 1015), (1017, 1017), (1019, 1019), (1023, 1023), (1025, 1025), (1027, 1027)], 'A333': [(885, 886)]}","{'A328': 0.7733333333333333, 'A299': 0.013333333333333334, 'A305': 0.06666666666666667, 'A294': 0.13333333333333333, 'A333': 0.013333333333333334}",A328,,"    private void checkSelectedDownload(final StoredDirectoryHelper mainStorage,
                                       final Uri targetFile,
                                       final String filename,
                                       final String mime) {
        StoredFileHelper storage;

        try {
            if (mainStorage == null) {
                // using SAF on older android version
                storage = new StoredFileHelper(context, null, targetFile, """");
            } else if (targetFile == null) {
                // the file does not exist, but it is probably used in a pending download
                storage = new StoredFileHelper(mainStorage.getUri(), filename, mime,
                        mainStorage.getTag());
            } else {
                // the target filename is already use, attempt to use it
                storage = new StoredFileHelper(context, mainStorage.getUri(), targetFile,
                        mainStorage.getTag());
            }
        } catch (final Exception e) {
            ErrorUtil.createNotification(requireContext(),
                    new ErrorInfo(e, UserAction.DOWNLOAD_FAILED, ""Getting storage""));
            return;
        }

        // get state of potential mission referring to the same file
        final MissionState state = downloadManager.checkForExistingMission(storage);
        @StringRes final int msgBtn;
        @StringRes final int msgBody;

        // this switch checks if there is already a mission referring to the same file
        switch (state) {
            case Finished: // there is already a finished mission
                msgBtn = R.string.overwrite;
                msgBody = R.string.overwrite_finished_warning;
                break;
            case Pending:
                msgBtn = R.string.overwrite;
                msgBody = R.string.download_already_pending;
                break;
            case PendingRunning:
                msgBtn = R.string.generate_unique_name;
                msgBody = R.string.download_already_running;
                break;
            case None: // there is no mission referring to the same file
                if (mainStorage == null) {
                    // This part is called if:
                    // * using SAF on older android version
                    // * save path not defined
                    // * if the file exists overwrite it, is not necessary ask
                    if (!storage.existsAsFile() && !storage.create()) {
                        showFailedDialog(R.string.error_file_creation);
                        return;
                    }
                    continueSelectedDownload(storage);
                    return;
                } else if (targetFile == null) {
                    // This part is called if:
                    // * the filename is not used in a pending/finished download
                    // * the file does not exists, create

                    if (!mainStorage.mkdirs()) {
                        showFailedDialog(R.string.error_path_creation);
                        return;
                    }

                    storage = mainStorage.createFile(filename, mime);
                    if (storage == null || !storage.canWrite()) {
                        showFailedDialog(R.string.error_file_creation);
                        return;
                    }

                    continueSelectedDownload(storage);
                    return;
                }
                msgBtn = R.string.overwrite;
                msgBody = R.string.overwrite_unrelated_warning;
                break;
            default:
                return; // unreachable
        }

        final AlertDialog.Builder askDialog = new AlertDialog.Builder(context)
                .setTitle(R.string.download_dialog_title)
                .setMessage(msgBody)
                .setNegativeButton(R.string.cancel, null);
        final StoredFileHelper finalStorage = storage;


        if (mainStorage == null) {
            // This part is called if:
            // * using SAF on older android version
            // * save path not defined
            switch (state) {
                case Pending:
                case Finished:
                    askDialog.setPositiveButton(msgBtn, (dialog, which) -> {
                        dialog.dismiss();
                        downloadManager.forgetMission(finalStorage);
                        continueSelectedDownload(finalStorage);
                    });
                    break;
            }

            askDialog.show();
            return;
        }

        askDialog.setPositiveButton(msgBtn, (dialog, which) -> {
            dialog.dismiss();

            StoredFileHelper storageNew;
            switch (state) {
                case Finished:
                case Pending:
                    downloadManager.forgetMission(finalStorage);
                case None:
                    if (targetFile == null) {
                        storageNew = mainStorage.createFile(filename, mime);
                    } else {
                        try {
                            // try take (or steal) the file
                            storageNew = new StoredFileHelper(context, mainStorage.getUri(),
                                    targetFile, mainStorage.getTag());
                        } catch (final IOException e) {
                            Log.e(TAG, ""Failed to take (or steal) the file in ""
                                    + targetFile.toString());
                            storageNew = null;
                        }
                    }

                    if (storageNew != null && storageNew.canWrite()) {
                        continueSelectedDownload(storageNew);
                    } else {
                        showFailedDialog(R.string.error_file_creation);
                    }
                    break;
                case PendingRunning:
                    storageNew = mainStorage.createUniqueFile(filename, mime);
                    if (storageNew == null) {
                        showFailedDialog(R.string.error_file_creation);
                    } else {
                        continueSelectedDownload(storageNew);
                    }
                    break;
            }
        });

        askDialog.show();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadDialog.java,DownloadDialog,continueSelectedDownload,void continueSelectedDownload(StoredFileHelper),"[1035, 1145]","{'A302': [(1117, 1117), (1137, 1137), (1145, 1145)], 'A328': [(1036, 1042), (1048, 1051), (1053, 1053), (1058, 1062), (1064, 1077), (1079, 1084), (1086, 1086), (1088, 1088), (1090, 1090), (1093, 1101), (1103, 1107), (1109, 1109), (1111, 1116), (1118, 1118), (1121, 1121), (1131, 1131), (1144, 1144)], 'A301': [(1140, 1140)], 'A295': [(1055, 1055), (1057, 1057), (1063, 1063), (1122, 1122), (1132, 1135), (1139, 1139)], 'A305': [(1124, 1124)], 'A294': [(1035, 1035), (1043, 1046), (1052, 1052), (1054, 1054), (1056, 1056), (1078, 1078), (1085, 1085), (1087, 1087), (1089, 1089), (1102, 1102), (1110, 1110), (1138, 1138)], 'A324': [(1123, 1123), (1136, 1136)], 'A333': [(1047, 1047), (1091, 1092), (1108, 1108), (1119, 1120), (1125, 1130)], 'A428': [(1141, 1143)]}","{'A302': 0.02702702702702703, 'A328': 0.5855855855855856, 'A301': 0.009009009009009009, 'A295': 0.08108108108108109, 'A305': 0.009009009009009009, 'A294': 0.13513513513513514, 'A324': 0.018018018018018018, 'A333': 0.10810810810810811, 'A428': 0.02702702702702703}",A328,,"    private void continueSelectedDownload(@NonNull final StoredFileHelper storage) {
        if (!storage.canWrite()) {
            showFailedDialog(R.string.permission_denied);
            return;
        }

        // check if the selected file has to be overwritten, by simply checking its length
        try {
            if (storage.length() > 0) {
                storage.truncate();
            }
        } catch (final IOException e) {
            Log.e(TAG, ""Failed to truncate the file: "" + storage.getUri().toString(), e);
            showFailedDialog(R.string.overwrite_failed);
            return;
        }

        final Stream selectedStream;
        Stream secondaryStream = null;
        final char kind;
        int threads = dialogBinding.threads.getProgress() + 1;
        final String[] urls;
        final List<MissionRecoveryInfo> recoveryInfo;
        String psName = null;
        String[] psArgs = null;
        long nearLength = 0;

        // more download logic: select muxer, subtitle converter, etc.
        switch (dialogBinding.videoAudioGroup.getCheckedRadioButtonId()) {
            case R.id.audio_button:
                kind = 'a';
                selectedStream = audioStreamsAdapter.getItem(selectedAudioIndex);

                if (selectedStream.getFormat() == MediaFormat.M4A) {
                    psName = Postprocessing.ALGORITHM_M4A_NO_DASH;
                } else if (selectedStream.getFormat() == MediaFormat.WEBMA_OPUS) {
                    psName = Postprocessing.ALGORITHM_OGG_FROM_WEBM_DEMUXER;
                }
                break;
            case R.id.video_button:
                kind = 'v';
                selectedStream = videoStreamsAdapter.getItem(selectedVideoIndex);

                final SecondaryStreamHelper<AudioStream> secondary = videoStreamsAdapter
                        .getAllSecondary()
                        .get(wrappedVideoStreams.getStreamsList().indexOf(selectedStream));

                if (secondary != null) {
                    secondaryStream = secondary.getStream();

                    if (selectedStream.getFormat() == MediaFormat.MPEG_4) {
                        psName = Postprocessing.ALGORITHM_MP4_FROM_DASH_MUXER;
                    } else {
                        psName = Postprocessing.ALGORITHM_WEBM_MUXER;
                    }

                    final long videoSize = wrappedVideoStreams.getSizeInBytes(
                            (VideoStream) selectedStream);

                    // set nearLength, only, if both sizes are fetched or known. This probably
                    // does not work on slow networks but is later updated in the downloader
                    if (secondary.getSizeInBytes() > 0 && videoSize > 0) {
                        nearLength = secondary.getSizeInBytes() + videoSize;
                    }
                }
                break;
            case R.id.subtitle_button:
                threads = 1; // use unique thread for subtitles due small file size
                kind = 's';
                selectedStream = subtitleStreamsAdapter.getItem(selectedSubtitleIndex);

                if (selectedStream.getFormat() == MediaFormat.TTML) {
                    psName = Postprocessing.ALGORITHM_TTML_CONVERTER;
                    psArgs = new String[] {
                            selectedStream.getFormat().getSuffix(),
                            ""false"" // ignore empty frames
                    };
                }
                break;
            default:
                return;
        }

        if (secondaryStream == null) {
            urls = new String[] {
                    selectedStream.getContent()
            };
            recoveryInfo = List.of(new MissionRecoveryInfo(selectedStream));
        } else {
            if (secondaryStream.getDeliveryMethod() != PROGRESSIVE_HTTP) {
                throw new IllegalArgumentException(""Unsupported stream delivery format""
                        + secondaryStream.getDeliveryMethod());
            }

            urls = new String[] {
                    selectedStream.getContent(), secondaryStream.getContent()
            };
            recoveryInfo = List.of(
                    new MissionRecoveryInfo(selectedStream),
                    new MissionRecoveryInfo(secondaryStream)
            );
        }

        DownloadManagerService.startMission(context, urls, storage, kind, threads,
                currentInfo.getUrl(), psName, psArgs, nearLength, new ArrayList<>(recoveryInfo));

        Toast.makeText(context, getString(R.string.download_has_started),
                Toast.LENGTH_SHORT).show();

        dismiss();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadActivity.java,DownloadActivity,onCreate,void onCreate(Bundle),"[27, 63]","{'A425': [(27, 27), (29, 29), (31, 33), (36, 37), (50, 50)], 'A294': [(28, 28), (30, 30), (44, 44), (51, 52)], 'A295': [(35, 35), (38, 42)], 'A290': [(60, 60)], 'A292': [(59, 59), (61, 62)], 'A342': [(63, 63)], 'A301': [(34, 34), (45, 49)], 'A302': [(43, 43)], 'A328': [(53, 55), (57, 58)], 'A288': [(56, 56)]}","{'A425': 0.21621621621621623, 'A294': 0.13513513513513514, 'A295': 0.16216216216216217, 'A290': 0.02702702702702703, 'A292': 0.08108108108108109, 'A342': 0.02702702702702703, 'A301': 0.16216216216216217, 'A302': 0.02702702702702703, 'A328': 0.13513513513513514, 'A288': 0.02702702702702703}",A425,,"    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        // Service
        final Intent i = new Intent();
        i.setClass(this, DownloadManagerService.class);
        startService(i);

        ThemeHelper.setTheme(this);

        super.onCreate(savedInstanceState);

        final ActivityDownloaderBinding downloaderBinding =
                ActivityDownloaderBinding.inflate(getLayoutInflater());
        setContentView(downloaderBinding.getRoot());

        setSupportActionBar(downloaderBinding.toolbarLayout.toolbar);

        final ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setDisplayHomeAsUpEnabled(true);
            actionBar.setTitle(R.string.downloads_title);
            actionBar.setDisplayShowTitleEnabled(true);
        }

        getWindow().getDecorView().getViewTreeObserver()
                .addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
            @Override
            public void onGlobalLayout() {
                updateFragments();
                getWindow().getDecorView().getViewTreeObserver().removeOnGlobalLayoutListener(this);
            }
        });

        if (DeviceUtils.isTv(this)) {
            FocusOverlayView.setupFocusObserver(this);
        }
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadActivity.java,DownloadActivity,onGlobalLayout,void onGlobalLayout(),"[53, 57]","{'A328': [(53, 55), (57, 57)], 'A288': [(56, 56)]}","{'A328': 0.8, 'A288': 0.2}",A328,,"            @Override
            public void onGlobalLayout() {
                updateFragments();
                getWindow().getDecorView().getViewTreeObserver().removeOnGlobalLayoutListener(this);
            }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadActivity.java,DownloadActivity,updateFragments,void updateFragments(),"[65, 72]","{'A425': [(70, 72)], 'A294': [(66, 66)], 'A342': [(65, 65), (67, 67), (69, 69)], 'A328': [(68, 68)]}","{'A425': 0.375, 'A294': 0.125, 'A342': 0.375, 'A328': 0.125}",A425,,"    private void updateFragments() {
        final MissionsFragment fragment = new MissionsFragment();

        getSupportFragmentManager().beginTransaction()
                .replace(R.id.frame, fragment, MISSIONS_FRAGMENT_TAG)
                .setTransition(FragmentTransaction.TRANSIT_FRAGMENT_FADE)
                .commit();
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadActivity.java,DownloadActivity,onCreateOptionsMenu,boolean onCreateOptionsMenu(Menu),"[74, 82]","{'A425': [(76, 76), (78, 82)], 'A294': [(75, 75), (77, 77)], 'A328': [(74, 74)]}","{'A425': 0.6666666666666666, 'A294': 0.2222222222222222, 'A328': 0.1111111111111111}",A425,,"    @Override
    public boolean onCreateOptionsMenu(final Menu menu) {
        super.onCreateOptionsMenu(menu);
        final MenuInflater inflater = getMenuInflater();

        inflater.inflate(R.menu.download_menu, menu);

        return true;
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/DownloadActivity.java,DownloadActivity,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[84, 93]","{'A425': [(84, 84), (89, 90), (92, 93)], 'A294': [(85, 85)], 'A324': [(86, 86), (91, 91)], 'A302': [(88, 88)], 'A305': [(87, 87)]}","{'A425': 0.5, 'A294': 0.1, 'A324': 0.2, 'A302': 0.1, 'A305': 0.1}",A425,,"    @Override
    public boolean onOptionsItemSelected(final MenuItem item) {
        switch (item.getItemId()) {
            case android.R.id.home:
                onBackPressed();
                return true;
            default:
                return super.onOptionsItemSelected(item);
        }
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/LoadingDialog.java,LoadingDialog,onCreate,void onCreate(Bundle),"[43, 51]","{'A429': [(43, 51)]}",{'A429': 1.0},A429,,"    @Override
    public void onCreate(@Nullable final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        if (DEBUG) {
            Log.d(TAG, ""onCreate() called with: ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }
        this.setCancelable(false);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/LoadingDialog.java,LoadingDialog,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[53, 64]","{'A429': [(53, 64)]}",{'A429': 1.0},A429,,"    @Override
    public View onCreateView(
            @NonNull final LayoutInflater inflater,
            final ViewGroup container,
            final Bundle savedInstanceState) {
        if (DEBUG) {
            Log.d(TAG, ""onCreateView() called with: ""
                    + ""inflater = ["" + inflater + ""], container = ["" + container + ""], ""
                    + ""savedInstanceState = ["" + savedInstanceState + ""]"");
        }
        return inflater.inflate(R.layout.download_loading_dialog, container);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/LoadingDialog.java,LoadingDialog,onViewCreated,"void onViewCreated(View,Bundle)","[66, 71]","{'A429': [(66, 71)]}",{'A429': 1.0},A429,,"    @Override
    public void onViewCreated(@NonNull final View view, @Nullable final Bundle savedInstanceState) {
        super.onViewCreated(view, savedInstanceState);
        dialogLoadingBinding = DownloadLoadingDialogBinding.bind(view);
        initToolbar(dialogLoadingBinding.toolbarLayout.toolbar);
    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/LoadingDialog.java,LoadingDialog,initToolbar,void initToolbar(Toolbar),"[73, 80]","{'A429': [(73, 80)]}",{'A429': 1.0},A429,,"    private void initToolbar(final Toolbar toolbar) {
        if (DEBUG) {
            Log.d(TAG, ""initToolbar() called with: toolbar = ["" + toolbar + ""]"");
        }
        toolbar.setTitle(requireContext().getString(title));
        toolbar.setNavigationOnClickListener(v -> dismiss());

    }
"
org.schabi.newpipe.download,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/download/LoadingDialog.java,LoadingDialog,onDestroyView,void onDestroyView(),"[82, 86]","{'A429': [(82, 86)]}",{'A429': 1.0},A429,,"    @Override
    public void onDestroyView() {
        dialogLoadingBinding = null;
        super.onDestroyView();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onCreate,void onCreate(Bundle),"[129, 185]","{'A302': [(129, 129), (153, 153)], 'A301': [(155, 155), (177, 180), (182, 185)], 'A426': [(131, 152), (156, 176)], 'A300': [(154, 154)], 'A430': [(181, 181)], 'A294': [(130, 130)]}","{'A302': 0.03508771929824561, 'A301': 0.15789473684210525, 'A426': 0.7543859649122807, 'A300': 0.017543859649122806, 'A430': 0.017543859649122806, 'A294': 0.017543859649122806}",A426,,"    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        ThemeHelper.setDayNightMode(this);
        setTheme(ThemeHelper.isLightThemeSelected(this)
                ? R.style.RouterActivityThemeLight : R.style.RouterActivityThemeDark);

        // Pass-through touch events to background activities
        // so that our transparent window won't lock UI in the mean time
        // network request is underway before showing PlaylistDialog or DownloadDialog
        // (ref: https://stackoverflow.com/a/10606141)
        getWindow().addFlags(WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE
                | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL
                | WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE);

        // Android never fails to impress us with a list of new restrictions per API.
        // Starting with S (Android 12) one of the prerequisite conditions has to be met
        // before the FLAG_NOT_TOUCHABLE flag is allowed to kick in:
        // @see WindowManager.LayoutParams#FLAG_NOT_TOUCHABLE
        // For our present purpose it seems we can just set LayoutParams.alpha to 0
        // on the strength of ""4. Fully transparent windows"" without affecting the scrim of dialogs
        final WindowManager.LayoutParams params = getWindow().getAttributes();
        params.alpha = 0f;
        getWindow().setAttributes(params);

        super.onCreate(savedInstanceState);
        Bridge.restoreInstanceState(this, savedInstanceState);

        // FragmentManager will take care to recreate (Playlist|Download)Dialog when screen rotates
        // We used to .setOnDismissListener(dialog -> finish()); when creating these DialogFragments
        // but those callbacks won't survive a config change
        // Try an alternate approach to hook into FragmentManager instead, to that effect
        // (ref: https://stackoverflow.com/a/44028453)
        final FragmentManager fm = getSupportFragmentManager();
        if (dismissListener == null) {
            dismissListener = new FragmentManager.FragmentLifecycleCallbacks() {
                @Override
                public void onFragmentDestroyed(@NonNull final FragmentManager fm,
                                                @NonNull final Fragment f) {
                    super.onFragmentDestroyed(fm, f);
                    if (f instanceof DialogFragment && fm.getFragments().isEmpty()) {
                        // No more DialogFragments, we're done
                        finish();
                    }
                }
            };
        }
        fm.registerFragmentLifecycleCallbacks(dismissListener, false);

        if (TextUtils.isEmpty(currentUrl)) {
            currentUrl = getUrl(getIntent());

            if (TextUtils.isEmpty(currentUrl)) {
                handleText();
                finish();
            }
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onFragmentDestroyed,"void onFragmentDestroyed(FragmentManager,Fragment)","[164, 172]","{'A426': [(164, 172)]}",{'A426': 1.0},A426,,"                @Override
                public void onFragmentDestroyed(@NonNull final FragmentManager fm,
                                                @NonNull final Fragment f) {
                    super.onFragmentDestroyed(fm, f);
                    if (f instanceof DialogFragment && fm.getFragments().isEmpty()) {
                        // No more DialogFragments, we're done
                        finish();
                    }
                }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onStop,void onStop(),"[187, 194]","{'A320': [(187, 194)]}",{'A320': 1.0},A320,,"    @Override
    protected void onStop() {
        super.onStop();
        // we need to dismiss the dialog before leaving the activity or we get leaks
        if (alertDialogChoice != null) {
            alertDialogChoice.dismiss();
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onSaveInstanceState,void onSaveInstanceState(Bundle),"[196, 200]","{'A306': [(198, 198)], 'A301': [(196, 196), (200, 200)], 'A300': [(199, 199)], 'A305': [(197, 197)]}","{'A306': 0.2, 'A301': 0.4, 'A300': 0.2, 'A305': 0.2}",A301,,"    @Override
    protected void onSaveInstanceState(@NonNull final Bundle outState) {
        super.onSaveInstanceState(outState);
        Bridge.saveInstanceState(this, outState);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onStart,void onStart(),"[202, 213]","{'A302': [(213, 213)], 'A301': [(202, 204)], 'A426': [(206, 212)], 'A430': [(205, 205)]}","{'A302': 0.08333333333333333, 'A301': 0.25, 'A426': 0.5833333333333334, 'A430': 0.08333333333333333}",A426,,"    @Override
    protected void onStart() {
        super.onStart();

        // Don't overlap the DialogFragment after rotating the screen
        // If there's no DialogFragment, we're either starting afresh
        // or we didn't make it to PlaylistDialog or DownloadDialog before the orientation change
        if (getSupportFragmentManager().getFragments().isEmpty()) {
            // Start over from scratch
            handleUrl(currentUrl);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onDestroy,void onDestroy(),"[215, 224]","{'A302': [(215, 218), (223, 224)], 'A426': [(219, 222)]}","{'A302': 0.6, 'A426': 0.4}",A302,,"    @Override
    protected void onDestroy() {
        super.onDestroy();

        if (dismissListener != null) {
            getSupportFragmentManager().unregisterFragmentLifecycleCallbacks(dismissListener);
        }

        disposables.clear();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,finish,void finish(),"[226, 232]","{'A426': [(226, 232)]}",{'A426': 1.0},A426,,"    @Override
    public void finish() {
        // allow the activity to recreate in case orientation changes
        if (!isChangingConfigurations()) {
            super.finish();
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,handleUrl,void handleUrl(String),"[234, 264]","{'A302': [(236, 236), (252, 253), (258, 259), (261, 261)], 'A301': [(235, 235), (254, 255), (264, 264)], 'A305': [(237, 251), (256, 257), (260, 260), (262, 263)], 'A294': [(234, 234)]}","{'A302': 0.1935483870967742, 'A301': 0.12903225806451613, 'A305': 0.6451612903225806, 'A294': 0.03225806451612903}",A305,,"    private void handleUrl(final String url) {
        disposables.add(Observable
                .fromCallable(() -> {
                    try {
                        if (currentServiceId == -1) {
                            currentService = NewPipe.getServiceByUrl(url);
                            currentServiceId = currentService.getServiceId();
                            currentLinkType = currentService.getLinkTypeByUrl(url);
                            currentUrl = url;
                        } else {
                            currentService = NewPipe.getService(currentServiceId);
                        }

                        // return whether the url was found to be supported or not
                        return currentLinkType != LinkType.NONE;
                    } catch (final ExtractionException e) {
                        // this can be reached only when the url is completely unsupported
                        return false;
                    }
                })
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(isUrlSupported -> {
                    if (isUrlSupported) {
                        onSuccess();
                    } else {
                        showUnsupportedUrlDialog(url);
                    }
                }, throwable -> handleError(this, new ErrorInfo(throwable,
                        UserAction.SHARE_TO_NEWPIPE, ""Getting service from url: "" + url))));
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,handleError,"void handleError(Context,ErrorInfo)","[271, 311]","{'A301': [(275, 275), (304, 304), (310, 311)], 'A305': [(271, 274), (276, 303), (305, 309)]}","{'A301': 0.0975609756097561, 'A305': 0.9024390243902439}",A305,,"    private static void handleError(final Context context, final ErrorInfo errorInfo) {
        if (errorInfo.getThrowable() != null) {
            errorInfo.getThrowable().printStackTrace();
        }

        if (errorInfo.getThrowable() instanceof ReCaptchaException) {
            Toast.makeText(context, R.string.recaptcha_request_toast, Toast.LENGTH_LONG).show();
            // Starting ReCaptcha Challenge Activity
            final Intent intent = new Intent(context, ReCaptchaActivity.class);
            intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            context.startActivity(intent);
        } else if (errorInfo.getThrowable() != null
                && ExceptionUtils.isNetworkRelated(errorInfo.getThrowable())) {
            Toast.makeText(context, R.string.network_error, Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof AgeRestrictedContentException) {
            Toast.makeText(context, R.string.restricted_video_no_stream,
                    Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof GeographicRestrictionException) {
            Toast.makeText(context, R.string.georestricted_content, Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof PaidContentException) {
            Toast.makeText(context, R.string.paid_content, Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof PrivateContentException) {
            Toast.makeText(context, R.string.private_content, Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof SoundCloudGoPlusContentException) {
            Toast.makeText(context, R.string.soundcloud_go_plus_content,
                    Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof YoutubeMusicPremiumContentException) {
            Toast.makeText(context, R.string.youtube_music_premium_content,
                    Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof ContentNotAvailableException) {
            Toast.makeText(context, R.string.content_not_available, Toast.LENGTH_LONG).show();
        } else if (errorInfo.getThrowable() instanceof ContentNotSupportedException) {
            Toast.makeText(context, R.string.content_not_supported, Toast.LENGTH_LONG).show();
        } else {
            ErrorUtil.createNotification(context, errorInfo);
        }

        if (context instanceof RouterActivity) {
            ((RouterActivity) context).finish();
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,showUnsupportedUrlDialog,void showUnsupportedUrlDialog(String),"[313, 326]","{'A302': [(326, 326)], 'A426': [(313, 313)], 'A305': [(314, 317), (319, 321), (323, 325)], 'A312': [(318, 318)], 'A293': [(322, 322)]}","{'A302': 0.07142857142857142, 'A426': 0.07142857142857142, 'A305': 0.7142857142857143, 'A312': 0.07142857142857142, 'A293': 0.07142857142857142}",A305,,"    protected void showUnsupportedUrlDialog(final String url) {
        final Context context = getThemeWrapperContext();
        new AlertDialog.Builder(context)
                .setTitle(R.string.unsupported_url)
                .setMessage(R.string.unsupported_url_dialog_message)
                .setIcon(R.drawable.ic_share)
                .setPositiveButton(R.string.open_in_browser,
                        (dialog, which) -> ShareUtils.openUrlInBrowser(this, url))
                .setNegativeButton(R.string.share,
                        (dialog, which) -> ShareUtils.shareText(this, """", url)) // no subject
                .setNeutralButton(R.string.cancel, null)
                .setOnDismissListener(dialog -> finish())
                .show();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onSuccess,void onSuccess(),"[328, 399]","{'A302': [(328, 328)], 'A301': [(362, 362), (371, 372), (375, 375), (382, 382), (385, 385)], 'A300': [(331, 352), (357, 361), (363, 370), (373, 374), (376, 381), (383, 384), (386, 399)], 'A294': [(329, 330), (353, 356)]}","{'A302': 0.013888888888888888, 'A301': 0.08333333333333333, 'A300': 0.8194444444444444, 'A294': 0.08333333333333333}",A300,,"    protected void onSuccess() {
        final SharedPreferences preferences = PreferenceManager
                .getDefaultSharedPreferences(this);

        final ChoiceAvailabilityChecker choiceChecker = new ChoiceAvailabilityChecker(
                getChoicesForService(currentService, currentLinkType),
                preferences.getString(getString(R.string.preferred_open_action_key),
                        getString(R.string.preferred_open_action_default)));

        // Check for non-player related choices
        if (choiceChecker.isAvailableAndSelected(
                R.string.show_info_key,
                R.string.download_key,
                R.string.add_to_playlist_key)) {
            handleChoice(choiceChecker.getSelectedChoiceKey());
            return;
        }
        // Check if the choice is player related
        if (choiceChecker.isAvailableAndSelected(
                R.string.video_player_key,
                R.string.background_player_key,
                R.string.popup_player_key)) {

            final String selectedChoice = choiceChecker.getSelectedChoiceKey();

            final boolean isExtVideoEnabled = preferences.getBoolean(
                    getString(R.string.use_external_video_player_key), false);
            final boolean isExtAudioEnabled = preferences.getBoolean(
                    getString(R.string.use_external_audio_player_key), false);
            final boolean isVideoPlayerSelected =
                    selectedChoice.equals(getString(R.string.video_player_key))
                            || selectedChoice.equals(getString(R.string.popup_player_key));
            final boolean isAudioPlayerSelected =
                    selectedChoice.equals(getString(R.string.background_player_key));

            if (currentLinkType != LinkType.STREAM
                    && ((isExtAudioEnabled && isAudioPlayerSelected)
                    || (isExtVideoEnabled && isVideoPlayerSelected))
            ) {
                Toast.makeText(this, R.string.external_player_unsupported_link_type,
                        Toast.LENGTH_LONG).show();
                handleChoice(getString(R.string.show_info_key));
                return;
            }

            final List<StreamingService.ServiceInfo.MediaCapability> capabilities =
                    currentService.getServiceInfo().getMediaCapabilities();

            // Check if the service supports the choice
            if ((isVideoPlayerSelected && capabilities.contains(VIDEO))
                    || (isAudioPlayerSelected && capabilities.contains(AUDIO))) {
                handleChoice(selectedChoice);
            } else {
                handleChoice(getString(R.string.show_info_key));
            }
            return;
        }

        // Default / Ask always
        final List<AdapterChoiceItem> availableChoices = choiceChecker.getAvailableChoices();
        switch (availableChoices.size()) {
            case 1:
                handleChoice(availableChoices.get(0).key);
                break;
            case 0:
                handleChoice(getString(R.string.show_info_key));
                break;
            default:
                showDialog(availableChoices);
                break;
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.ChoiceAvailabilityChecker,getAvailableChoices,List<AdapterChoiceItem> getAvailableChoices(),"[415, 417]","{'A300': [(415, 417)]}",{'A300': 1.0},A300,,"        public List<AdapterChoiceItem> getAvailableChoices() {
            return availableChoices;
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.ChoiceAvailabilityChecker,getSelectedChoiceKey,String getSelectedChoiceKey(),"[419, 421]","{'A300': [(419, 421)]}",{'A300': 1.0},A300,,"        public String getSelectedChoiceKey() {
            return selectedChoiceKey;
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.ChoiceAvailabilityChecker,isAvailableAndSelected,boolean isAvailableAndSelected(),"[423, 425]","{'A300': [(423, 425)]}",{'A300': 1.0},A300,,"        public boolean isAvailableAndSelected(@StringRes final int... wantedKeys) {
            return Arrays.stream(wantedKeys).anyMatch(this::isAvailableAndSelected);
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.ChoiceAvailabilityChecker,isAvailableAndSelected,boolean isAvailableAndSelected(int),"[427, 435]","{'A302': [(435, 435)], 'A301': [(432, 432)], 'A300': [(427, 431), (433, 434)]}","{'A302': 0.1111111111111111, 'A301': 0.1111111111111111, 'A300': 0.7777777777777778}",A300,,"        public boolean isAvailableAndSelected(@StringRes final int wantedKey) {
            final String wanted = getString(wantedKey);
            // Check if the wanted option is selected
            if (!selectedChoiceKey.equals(wanted)) {
                return false;
            }
            // Check if it's available
            return availableChoices.stream().anyMatch(item -> wanted.equals(item.key));
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,showDialog,void showDialog(List<AdapterChoiceItem>),"[438, 536]","{'A302': [(443, 443), (447, 450), (452, 454), (456, 456), (460, 462), (466, 468), (474, 475), (478, 478), (481, 482), (486, 490), (492, 495), (499, 499), (503, 504), (507, 511), (514, 514), (517, 524), (526, 530), (536, 536)], 'A353': [(470, 470)], 'A306': [(473, 473)], 'A301': [(438, 439), (441, 441), (451, 451), (464, 464), (491, 491), (515, 515)], 'A300': [(440, 440), (442, 442), (444, 446), (465, 465), (469, 469), (476, 477), (497, 498)], 'A305': [(502, 502)], 'A295': [(500, 500), (525, 525)], 'A298': [(455, 455), (501, 501)], 'A294': [(457, 459), (471, 472), (479, 479), (483, 485), (496, 496), (505, 506), (512, 513), (516, 516)], 'A320': [(463, 463), (480, 480), (531, 531), (534, 534)], 'A292': [(532, 532), (535, 535)], 'A290': [(533, 533)]}","{'A302': 0.5252525252525253, 'A353': 0.010101010101010102, 'A306': 0.010101010101010102, 'A301': 0.0707070707070707, 'A300': 0.1111111111111111, 'A305': 0.010101010101010102, 'A295': 0.020202020202020204, 'A298': 0.020202020202020204, 'A294': 0.15151515151515152, 'A320': 0.04040404040404041, 'A292': 0.020202020202020204, 'A290': 0.010101010101010102}",A302,,"    private void showDialog(final List<AdapterChoiceItem> choices) {
        final SharedPreferences preferences = PreferenceManager.getDefaultSharedPreferences(this);

        final Context themeWrapperContext = getThemeWrapperContext();
        final LayoutInflater layoutInflater = LayoutInflater.from(themeWrapperContext);

        final SingleChoiceDialogViewBinding binding =
                SingleChoiceDialogViewBinding.inflate(layoutInflater);
        final RadioGroup radioGroup = binding.list;

        final DialogInterface.OnClickListener dialogButtonsClickListener = (dialog, which) -> {
            final int indexOfChild = radioGroup.indexOfChild(
                    radioGroup.findViewById(radioGroup.getCheckedRadioButtonId()));
            final AdapterChoiceItem choice = choices.get(indexOfChild);

            handleChoice(choice.key);

            // open future streams always like this one, because ""always"" button was used by user
            if (which == DialogInterface.BUTTON_POSITIVE) {
                preferences.edit()
                        .putString(getString(R.string.preferred_open_action_key), choice.key)
                        .apply();
            }
        };

        alertDialogChoice = new AlertDialog.Builder(themeWrapperContext)
                .setTitle(R.string.preferred_open_action_share_menu_title)
                .setView(binding.getRoot())
                .setCancelable(true)
                .setNegativeButton(R.string.just_once, dialogButtonsClickListener)
                .setPositiveButton(R.string.always, dialogButtonsClickListener)
                .setOnDismissListener(dialog -> {
                    if (!selectionIsDownload && !selectionIsAddToPlaylist) {
                        finish();
                    }
                })
                .create();

        alertDialogChoice.setOnShowListener(dialog -> setDialogButtonsState(
                alertDialogChoice, radioGroup.getCheckedRadioButtonId() != -1));

        radioGroup.setOnCheckedChangeListener((group, checkedId) ->
                setDialogButtonsState(alertDialogChoice, true));
        final View.OnClickListener radioButtonsClickListener = v -> {
            final int indexOfChild = radioGroup.indexOfChild(v);
            if (indexOfChild == -1) {
                return;
            }

            selectedPreviously = selectedRadioPosition;
            selectedRadioPosition = indexOfChild;

            if (selectedPreviously == selectedRadioPosition) {
                handleChoice(choices.get(selectedRadioPosition).key);
            }
        };

        int id = 12345;
        for (final AdapterChoiceItem item : choices) {
            final RadioButton radioButton = ListRadioIconItemBinding.inflate(layoutInflater)
                    .getRoot();
            radioButton.setText(item.description);
            radioButton.setCompoundDrawablesRelativeWithIntrinsicBounds(
                    AppCompatResources.getDrawable(themeWrapperContext, item.icon),
                    null, null, null);
            radioButton.setChecked(false);
            radioButton.setId(id++);
            radioButton.setLayoutParams(new RadioGroup.LayoutParams(
                    ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT));
            radioButton.setOnClickListener(radioButtonsClickListener);
            radioGroup.addView(radioButton);
        }

        if (selectedRadioPosition == -1) {
            final String lastSelectedPlayer = preferences.getString(
                    getString(R.string.preferred_open_action_last_selected_key), null);
            if (!TextUtils.isEmpty(lastSelectedPlayer)) {
                for (int i = 0; i < choices.size(); i++) {
                    final AdapterChoiceItem c = choices.get(i);
                    if (lastSelectedPlayer.equals(c.key)) {
                        selectedRadioPosition = i;
                        break;
                    }
                }
            }
        }

        selectedRadioPosition = MathUtils.clamp(selectedRadioPosition, -1, choices.size() - 1);
        if (selectedRadioPosition != -1) {
            ((RadioButton) radioGroup.getChildAt(selectedRadioPosition)).setChecked(true);
        }
        selectedPreviously = selectedRadioPosition;

        alertDialogChoice.show();

        if (DeviceUtils.isTv(this)) {
            FocusOverlayView.setupFocusObserver(alertDialogChoice);
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,getChoicesForService,"List<AdapterChoiceItem> getChoicesForService(StreamingService,LinkType)","[538, 598]","{'A353': [(552, 552), (573, 574)], 'A301': [(595, 596), (598, 598)], 'A300': [(543, 545), (549, 551), (553, 557), (561, 562), (565, 565), (569, 569), (575, 577), (579, 587), (589, 590), (593, 593), (597, 597)], 'A298': [(540, 541), (546, 547), (558, 560), (563, 564), (566, 566), (572, 572), (578, 578), (588, 588), (591, 592), (594, 594)], 'A294': [(538, 539)], 'A312': [(542, 542), (548, 548)], 'A325': [(567, 568), (570, 571)]}","{'A353': 0.04918032786885246, 'A301': 0.04918032786885246, 'A300': 0.5081967213114754, 'A298': 0.26229508196721313, 'A294': 0.03278688524590164, 'A312': 0.03278688524590164, 'A325': 0.06557377049180328}",A300,,"    private List<AdapterChoiceItem> getChoicesForService(final StreamingService service,
                                                         final LinkType linkType) {
        final AdapterChoiceItem showInfo = new AdapterChoiceItem(
                getString(R.string.show_info_key), getString(R.string.show_info),
                R.drawable.ic_info_outline);
        final AdapterChoiceItem videoPlayer = new AdapterChoiceItem(
                getString(R.string.video_player_key), getString(R.string.video_player),
                R.drawable.ic_play_arrow);
        final AdapterChoiceItem backgroundPlayer = new AdapterChoiceItem(
                getString(R.string.background_player_key), getString(R.string.background_player),
                R.drawable.ic_headset);
        final AdapterChoiceItem popupPlayer = new AdapterChoiceItem(
                getString(R.string.popup_player_key), getString(R.string.popup_player),
                R.drawable.ic_picture_in_picture);

        final List<AdapterChoiceItem> returnedItems = new ArrayList<>();
        returnedItems.add(showInfo); // Always present

        final List<StreamingService.ServiceInfo.MediaCapability> capabilities =
                service.getServiceInfo().getMediaCapabilities();

        if (linkType == LinkType.STREAM) {
            if (capabilities.contains(VIDEO)) {
                returnedItems.add(videoPlayer);
                returnedItems.add(popupPlayer);
            }
            if (capabilities.contains(AUDIO)) {
                returnedItems.add(backgroundPlayer);
            }
            // download is redundant for linkType CHANNEL AND PLAYLIST (till playlist downloading is
            // not supported )
            returnedItems.add(new AdapterChoiceItem(getString(R.string.download_key),
                    getString(R.string.download),
                    R.drawable.ic_file_download));

            // Add to playlist is not necessary for CHANNEL and PLAYLIST linkType since those can
            // not be added to a playlist
            returnedItems.add(new AdapterChoiceItem(getString(R.string.add_to_playlist_key),
                    getString(R.string.add_to_playlist),
                    R.drawable.ic_add));
        } else {
            // LinkType.NONE is never present because it's filtered out before
            // channels and playlist can be played as they contain a list of videos
            final SharedPreferences preferences = PreferenceManager
                    .getDefaultSharedPreferences(this);
            final boolean isExtVideoEnabled = preferences.getBoolean(
                    getString(R.string.use_external_video_player_key), false);
            final boolean isExtAudioEnabled = preferences.getBoolean(
                    getString(R.string.use_external_audio_player_key), false);

            if (capabilities.contains(VIDEO) && !isExtVideoEnabled) {
                returnedItems.add(videoPlayer);
                returnedItems.add(popupPlayer);
            }
            if (capabilities.contains(AUDIO) && !isExtAudioEnabled) {
                returnedItems.add(backgroundPlayer);
            }
        }

        return returnedItems;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,getThemeWrapperContext,Context getThemeWrapperContext(),"[600, 603]","{'A301': [(603, 603)], 'A426': [(600, 600)], 'A294': [(601, 602)]}","{'A301': 0.25, 'A426': 0.25, 'A294': 0.5}",A294,,"    protected Context getThemeWrapperContext() {
        return new ContextThemeWrapper(this, ThemeHelper.isLightThemeSelected(this)
                ? R.style.LightTheme : R.style.DarkTheme);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,setDialogButtonsState,"void setDialogButtonsState(AlertDialog,boolean)","[605, 614]","{'A302': [(606, 607), (611, 614)], 'A294': [(605, 605), (608, 610)]}","{'A302': 0.6, 'A294': 0.4}",A302,,"    private void setDialogButtonsState(final AlertDialog dialog, final boolean state) {
        final Button negativeButton = dialog.getButton(DialogInterface.BUTTON_NEGATIVE);
        final Button positiveButton = dialog.getButton(DialogInterface.BUTTON_POSITIVE);
        if (negativeButton == null || positiveButton == null) {
            return;
        }

        negativeButton.setEnabled(state);
        positiveButton.setEnabled(state);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,handleText,void handleText(),"[616, 623]","{'A430': [(620, 621), (623, 623)], 'A294': [(617, 619)], 'A328': [(616, 616), (622, 622)]}","{'A430': 0.375, 'A294': 0.375, 'A328': 0.25}",A430,,"    private void handleText() {
        final String searchString = getIntent().getStringExtra(Intent.EXTRA_TEXT);
        final int serviceId = getIntent().getIntExtra(Constants.KEY_SERVICE_ID, 0);
        final Intent intent = new Intent(getThemeWrapperContext(), MainActivity.class);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        startActivity(intent);
        NavigationHelper.openSearch(getThemeWrapperContext(), serviceId, searchString);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,handleChoice,void handleChoice(String),"[625, 680]","{'A302': [(629, 629), (633, 634), (637, 640), (656, 657), (660, 660), (662, 666), (669, 673), (677, 680)], 'A353': [(650, 655)], 'A306': [(641, 641), (647, 649)], 'A301': [(625, 625), (628, 628), (632, 632), (676, 676)], 'A300': [(658, 659)], 'A305': [(636, 636), (667, 668)], 'A294': [(626, 627), (630, 631), (635, 635), (642, 643), (674, 675)], 'A328': [(644, 646)], 'A303': [(661, 661)]}","{'A302': 0.42857142857142855, 'A353': 0.10714285714285714, 'A306': 0.07142857142857142, 'A301': 0.07142857142857142, 'A300': 0.03571428571428571, 'A305': 0.05357142857142857, 'A294': 0.16071428571428573, 'A328': 0.05357142857142857, 'A303': 0.017857142857142856}",A302,,"    private void handleChoice(final String selectedChoiceKey) {
        final List<String> validChoicesList = Arrays.asList(getResources()
                .getStringArray(R.array.preferred_open_action_values_list));
        if (validChoicesList.contains(selectedChoiceKey)) {
            PreferenceManager.getDefaultSharedPreferences(this).edit()
                    .putString(getString(
                            R.string.preferred_open_action_last_selected_key), selectedChoiceKey)
                    .apply();
        }

        if (selectedChoiceKey.equals(getString(R.string.popup_player_key))
                && !PermissionHelper.isPopupEnabledElseAsk(this)) {
            finish();
            return;
        }

        if (selectedChoiceKey.equals(getString(R.string.download_key))) {
            if (PermissionHelper.checkStoragePermissions(this,
                    PermissionHelper.DOWNLOAD_DIALOG_REQUEST_CODE)) {
                selectionIsDownload = true;
                openDownloadDialog();
            }
            return;
        }

        if (selectedChoiceKey.equals(getString(R.string.add_to_playlist_key))) {
            selectionIsAddToPlaylist = true;
            openAddToPlaylistDialog();
            return;
        }

        // stop and bypass FetcherService if InfoScreen was selected since
        // StreamDetailFragment can fetch data itself
        if (selectedChoiceKey.equals(getString(R.string.show_info_key))
                || canHandleChoiceLikeShowInfo(selectedChoiceKey)) {
            disposables.add(Observable
                    .fromCallable(() -> NavigationHelper.getIntentByLink(this, currentUrl))
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .subscribe(intent -> {
                        startActivity(intent);
                        finish();
                    }, throwable -> handleError(this, new ErrorInfo(throwable,
                            UserAction.SHARE_TO_NEWPIPE, ""Starting info activity: "" + currentUrl)))
            );
            return;
        }

        final Intent intent = new Intent(this, FetcherService.class);
        final Choice choice = new Choice(currentService.getServiceId(), currentLinkType,
                currentUrl, selectedChoiceKey);
        intent.putExtra(FetcherService.KEY_CHOICE, choice);
        startService(intent);

        finish();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,canHandleChoiceLikeShowInfo,boolean canHandleChoiceLikeShowInfo(String),"[682, 704]","{'A300': [(682, 701), (704, 704)], 'A305': [(702, 703)]}","{'A300': 0.9130434782608695, 'A305': 0.08695652173913043}",A300,,"    private boolean canHandleChoiceLikeShowInfo(final String selectedChoiceKey) {
        if (!selectedChoiceKey.equals(getString(R.string.video_player_key))) {
            return false;
        }
        // ""video player"" can be handled like ""show info"" (because VideoDetailFragment can load
        // the stream instead of FetcherService) when...

        // ...Autoplay is enabled
        if (!PlayerHelper.isAutoplayAllowedByUser(getThemeWrapperContext())) {
            return false;
        }

        final boolean isExtVideoEnabled = PreferenceManager.getDefaultSharedPreferences(this)
                .getBoolean(getString(R.string.use_external_video_player_key), false);
        // ...it's not done via an external player
        if (isExtVideoEnabled) {
            return false;
        }

        // ...the player is not running or in normal Video-mode/type
        final PlayerType playerType = PlayerHolder.getInstance().getType();
        return playerType == null || playerType == PlayerType.MAIN;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,inFlight,void inFlight(boolean),"[711, 721]","{'A426': [(711, 715), (719, 721)], 'A305': [(716, 718)]}","{'A426': 0.7272727272727273, 'A305': 0.2727272727272727}",A426,,"        private synchronized void inFlight(final boolean started) {
            if (started) {
                running++;
            } else {
                running--;
                if (running <= 0) {
                    getActivityContext().ifPresent(context -> context.getSupportFragmentManager()
                            .beginTransaction().remove(this).commit());
                }
            }
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,onAttach,void onAttach(Context),"[723, 727]","{'A426': [(723, 725)], 'A305': [(726, 727)]}","{'A426': 0.6, 'A305': 0.4}",A426,,"        @Override
        public void onAttach(@NonNull final Context activityContext) {
            super.onAttach(activityContext);
            weakContext = new WeakReference<>((AppCompatActivity) activityContext);
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,onDetach,void onDetach(),"[729, 733]","{'A426': [(733, 733)], 'A305': [(729, 732)]}","{'A426': 0.2, 'A305': 0.8}",A305,,"        @Override
        public void onDetach() {
            super.onDetach();
            weakContext = null;
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,onCreate,void onCreate(Bundle),"[735, 740]","{'A426': [(735, 740)]}",{'A426': 1.0},A426,,"        @SuppressWarnings(""deprecation"")
        @Override
        public void onCreate(final Bundle savedInstanceState) {
            super.onCreate(savedInstanceState);
            setRetainInstance(true);
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,onDestroy,void onDestroy(),"[742, 746]","{'A426': [(742, 746)]}",{'A426': 1.0},A426,,"        @Override
        public void onDestroy() {
            super.onDestroy();
            disposables.clear();
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,getActivityContext,Optional<AppCompatActivity> getActivityContext(),"[751, 755]","{'A426': [(755, 755)], 'A305': [(751, 754)]}","{'A426': 0.2, 'A305': 0.8}",A305,,"        private Optional<AppCompatActivity> getActivityContext() {
            return Optional.ofNullable(weakContext)
                    .map(Reference::get)
                    .filter(context -> !context.isFinishing());
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,runOnVisible,void runOnVisible(Consumer<AppCompatActivity>),"[762, 798]","{'A426': [(781, 781), (791, 792), (798, 798)], 'A305': [(762, 780), (782, 790), (793, 793), (795, 795)], 'A429': [(794, 794), (796, 797)]}","{'A426': 0.10810810810810811, 'A305': 0.8108108108108109, 'A429': 0.08108108108108109}",A305,,"        private void runOnVisible(final Consumer<AppCompatActivity> runnable) {
            getActivityContext().ifPresentOrElse(context -> {
                if (getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.STARTED)) {
                    context.runOnUiThread(() -> {
                        runnable.accept(context);
                        inFlight(false);
                    });
                } else {
                    getLifecycle().addObserver(new DefaultLifecycleObserver() {
                        @Override
                        public void onResume(@NonNull final LifecycleOwner owner) {
                            getLifecycle().removeObserver(this);
                            getActivityContext().ifPresentOrElse(context ->
                                    context.runOnUiThread(() -> {
                                        runnable.accept(context);
                                        inFlight(false);
                                    }),
                                    () -> inFlight(false)
                            );
                        }
                    });
                    // this trick doesn't seem to work on Android 10+ (API 29)
                    // which places restrictions on starting activities from the background
                    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.Q
                            && !context.isChangingConfigurations()) {
                        // try to bring the activity back to front if minimised
                        final Intent i = new Intent(context, RouterActivity.class);
                        i.setFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
                        startActivity(i);
                    }
                }

            }, () ->
                // this branch is executed if there is no activity context
                inFlight(false)
            );
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,onResume,void onResume(LifecycleOwner),"[771, 781]","{'A426': [(781, 781)], 'A305': [(771, 780)]}","{'A426': 0.09090909090909091, 'A305': 0.9090909090909091}",A305,,"                        @Override
                        public void onResume(@NonNull final LifecycleOwner owner) {
                            getLifecycle().removeObserver(this);
                            getActivityContext().ifPresentOrElse(context ->
                                    context.runOnUiThread(() -> {
                                        runnable.accept(context);
                                        inFlight(false);
                                    }),
                                    () -> inFlight(false)
                            );
                        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,pleaseWait,Single<T> pleaseWait(Single<T>),"[800, 812]","{'A426': [(812, 812)], 'A305': [(800, 811)]}","{'A426': 0.07692307692307693, 'A305': 0.9230769230769231}",A305,,"        <T> Single<T> pleaseWait(final Single<T> single) {
            // 'abuse' ambWith() here to cancel the toast for us when the wait is over
            return single.ambWith(Single.create(emitter -> getActivityContext().ifPresent(context ->
                    context.runOnUiThread(() -> {
                        // Getting the stream info usually takes a moment
                        // Notifying the user here to ensure that no confusion arises
                        final Toast toast = Toast.makeText(context,
                                getString(R.string.processing_may_take_a_moment),
                                Toast.LENGTH_LONG);
                        toast.show();
                        emitter.setCancellable(toast::cancel);
            }))));
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,openDownloadDialog,"void openDownloadDialog(int,String)","[814, 835]","{'A426': [(814, 816), (819, 821), (823, 824), (826, 830), (835, 835)], 'A305': [(822, 822)], 'A429': [(817, 818), (825, 825), (831, 834)]}","{'A426': 0.6363636363636364, 'A305': 0.045454545454545456, 'A429': 0.3181818181818182}",A426,,"        @SuppressLint(""CheckResult"")
        private void openDownloadDialog(final int currentServiceId, final String currentUrl) {
            inFlight(true);
            final LoadingDialog loadingDialog = new LoadingDialog(R.string.loading_metadata_title);
            loadingDialog.show(getParentFragmentManager(), ""loadingDialog"");
            disposables.add(ExtractorHelper.getStreamInfo(currentServiceId, currentUrl, true)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .compose(this::pleaseWait)
                    .subscribe(result ->
                        runOnVisible(ctx -> {
                            loadingDialog.dismiss();
                            final FragmentManager fm = ctx.getSupportFragmentManager();
                            final DownloadDialog downloadDialog = new DownloadDialog(ctx, result);
                            // dismiss listener to be handled by FragmentManager
                            downloadDialog.show(fm, ""downloadDialog"");
                        }
                        ), throwable -> runOnVisible(ctx -> {
                        loadingDialog.dismiss();
                        ((RouterActivity) ctx).showUnsupportedUrlDialog(currentUrl);
                    })));
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.PersistentFragment,openAddToPlaylistDialog,"void openAddToPlaylistDialog(int,String)","[837, 862]","{'A426': [(837, 841), (843, 843), (854, 862)], 'A305': [(842, 842), (844, 853)]}","{'A426': 0.5769230769230769, 'A305': 0.4230769230769231}",A426,,"        private void openAddToPlaylistDialog(final int currentServiceId, final String currentUrl) {
            inFlight(true);
            disposables.add(ExtractorHelper.getStreamInfo(currentServiceId, currentUrl, false)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .compose(this::pleaseWait)
                    .subscribe(
                            info -> getActivityContext().ifPresent(context ->
                                    PlaylistDialog.createCorrespondingDialog(context,
                                            List.of(new StreamEntity(info)),
                                            playlistDialog -> runOnVisible(ctx -> {
                                                // dismiss listener to be handled by FragmentManager
                                                final FragmentManager fm =
                                                        ctx.getSupportFragmentManager();
                                                playlistDialog.show(fm, ""addToPlaylistDialog"");
                                            })
                                    )),
                            throwable -> runOnVisible(ctx -> handleError(ctx, new ErrorInfo(
                                    throwable,
                                    UserAction.REQUESTED_STREAM,
                                    ""Tried to add "" + currentUrl + "" to a playlist"",
                                    ((RouterActivity) ctx).currentService.getServiceId())
                            ))
                    )
            );
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,openAddToPlaylistDialog,void openAddToPlaylistDialog(),"[865, 867]","{'A353': [(865, 865), (867, 867)], 'A426': [(866, 866)]}","{'A353': 0.6666666666666666, 'A426': 0.3333333333333333}",A353,,"    private void openAddToPlaylistDialog() {
        getPersistFragment().openAddToPlaylistDialog(currentServiceId, currentUrl);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,openDownloadDialog,void openDownloadDialog(),"[869, 871]","{'A306': [(869, 869)], 'A426': [(870, 871)]}","{'A306': 0.3333333333333333, 'A426': 0.6666666666666666}",A426,,"    private void openDownloadDialog() {
        getPersistFragment().openDownloadDialog(currentServiceId, currentUrl);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,getPersistFragment,PersistentFragment getPersistFragment(),"[873, 884]","{'A306': [(884, 884)], 'A426': [(873, 883)]}","{'A306': 0.08333333333333333, 'A426': 0.9166666666666666}",A426,,"    private PersistentFragment getPersistFragment() {
        final FragmentManager fm = getSupportFragmentManager();
        PersistentFragment persistFragment =
                (PersistentFragment) fm.findFragmentByTag(""PERSIST_FRAGMENT"");
        if (persistFragment == null) {
            persistFragment = new PersistentFragment();
            fm.beginTransaction()
                    .add(persistFragment, ""PERSIST_FRAGMENT"")
                    .commitNow();
        }
        return persistFragment;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,onRequestPermissionsResult,"void onRequestPermissionsResult(int,String[],int[])","[886, 900]","{'A306': [(886, 886), (893, 896), (900, 900)], 'A294': [(887, 889), (891, 891)], 'A328': [(892, 892), (897, 899)], 'A299': [(890, 890)]}","{'A306': 0.4, 'A294': 0.26666666666666666, 'A328': 0.26666666666666666, 'A299': 0.06666666666666667}",A306,,"    @Override
    public void onRequestPermissionsResult(final int requestCode,
                                           @NonNull final String[] permissions,
                                           @NonNull final int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        for (final int i : grantResults) {
            if (i == PackageManager.PERMISSION_DENIED) {
                finish();
                return;
            }
        }
        if (requestCode == PermissionHelper.DOWNLOAD_DIALOG_REQUEST_CODE) {
            openDownloadDialog();
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.Choice,toString,String toString(),"[929, 933]","{'A302': [(930, 933)], 'A305': [(929, 929)]}","{'A302': 0.8, 'A305': 0.2}",A302,,"        @NonNull
        @Override
        public String toString() {
            return serviceId + "":"" + url + "" > "" + linkType + "" ::: "" + playerChoice;
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.FetcherService,onCreate,void onCreate(),"[946, 950]","{'A302': [(946, 950)]}",{'A302': 1.0},A302,,"        @Override
        public void onCreate() {
            super.onCreate();
            startForeground(ID, createNotification().build());
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.FetcherService,onHandleIntent,void onHandleIntent(Intent),"[952, 964]","{'A302': [(952, 952), (957, 958), (963, 964)], 'A294': [(953, 956), (959, 962)]}","{'A302': 0.38461538461538464, 'A294': 0.6153846153846154}",A294,,"        @Override
        protected void onHandleIntent(@Nullable final Intent intent) {
            if (intent == null) {
                return;
            }

            final Serializable serializable = intent.getSerializableExtra(KEY_CHOICE);
            if (!(serializable instanceof Choice)) {
                return;
            }
            final Choice playerChoice = (Choice) serializable;
            handleChoice(playerChoice);
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.FetcherService,handleChoice,void handleChoice(Choice),"[966, 1000]","{'A302': [(967, 992), (999, 1000)], 'A305': [(996, 998)], 'A294': [(966, 966), (993, 995)]}","{'A302': 0.8, 'A305': 0.08571428571428572, 'A294': 0.11428571428571428}",A302,,"        public void handleChoice(final Choice choice) {
            Single<? extends Info> single = null;
            UserAction userAction = UserAction.SOMETHING_ELSE;

            switch (choice.linkType) {
                case STREAM:
                    single = ExtractorHelper.getStreamInfo(choice.serviceId, choice.url, false);
                    userAction = UserAction.REQUESTED_STREAM;
                    break;
                case CHANNEL:
                    single = ExtractorHelper.getChannelInfo(choice.serviceId, choice.url, false);
                    userAction = UserAction.REQUESTED_CHANNEL;
                    break;
                case PLAYLIST:
                    single = ExtractorHelper.getPlaylistInfo(choice.serviceId, choice.url, false);
                    userAction = UserAction.REQUESTED_PLAYLIST;
                    break;
            }


            if (single != null) {
                final UserAction finalUserAction = userAction;
                final Consumer<Info> resultHandler = getResultHandler(choice);
                fetcher = single
                        .observeOn(AndroidSchedulers.mainThread())
                        .subscribe(info -> {
                            resultHandler.accept(info);
                            if (fetcher != null) {
                                fetcher.dispose();
                            }
                        }, throwable -> handleError(this, new ErrorInfo(throwable, finalUserAction,
                                choice.url + "" opened with "" + choice.playerChoice,
                                choice.serviceId)));
            }
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.FetcherService,getResultHandler,Consumer<Info> getResultHandler(Choice),"[1002, 1050]","{'A302': [(1003, 1007), (1014, 1014), (1016, 1016), (1018, 1018), (1021, 1021), (1023, 1023), (1040, 1041), (1048, 1050)], 'A305': [(1015, 1015), (1017, 1017), (1019, 1020), (1022, 1022), (1024, 1039), (1042, 1047)], 'A294': [(1002, 1002), (1008, 1013)]}","{'A302': 0.30612244897959184, 'A305': 0.5510204081632653, 'A294': 0.14285714285714285}",A305,,"        public Consumer<Info> getResultHandler(final Choice choice) {
            return info -> {
                final String videoPlayerKey = getString(R.string.video_player_key);
                final String backgroundPlayerKey = getString(R.string.background_player_key);
                final String popupPlayerKey = getString(R.string.popup_player_key);

                final SharedPreferences preferences = PreferenceManager
                        .getDefaultSharedPreferences(this);
                final boolean isExtVideoEnabled = preferences.getBoolean(
                        getString(R.string.use_external_video_player_key), false);
                final boolean isExtAudioEnabled = preferences.getBoolean(
                        getString(R.string.use_external_audio_player_key), false);

                final PlayQueue playQueue;
                if (info instanceof StreamInfo) {
                    if (choice.playerChoice.equals(backgroundPlayerKey) && isExtAudioEnabled) {
                        NavigationHelper.playOnExternalAudioPlayer(this, (StreamInfo) info);
                        return;
                    } else if (choice.playerChoice.equals(videoPlayerKey) && isExtVideoEnabled) {
                        NavigationHelper.playOnExternalVideoPlayer(this, (StreamInfo) info);
                        return;
                    }
                    playQueue = new SinglePlayQueue((StreamInfo) info);
                } else if (info instanceof ChannelInfo) {
                    final Optional<ListLinkHandler> playableTab = ((ChannelInfo) info).getTabs()
                            .stream()
                            .filter(ChannelTabHelper::isStreamsTab)
                            .findFirst();

                    if (playableTab.isPresent()) {
                        playQueue = new ChannelTabPlayQueue(info.getServiceId(), playableTab.get());
                    } else {
                        return; // there is no playable tab
                    }
                } else if (info instanceof PlaylistInfo) {
                    playQueue = new PlaylistPlayQueue((PlaylistInfo) info);
                } else {
                    return;
                }

                if (choice.playerChoice.equals(videoPlayerKey)) {
                    NavigationHelper.playOnMainPlayer(this, playQueue, false);
                } else if (choice.playerChoice.equals(backgroundPlayerKey)) {
                    NavigationHelper.playOnBackgroundPlayer(this, playQueue, true);
                } else if (choice.playerChoice.equals(popupPlayerKey)) {
                    NavigationHelper.playOnPopupPlayer(this, playQueue, true);
                }
            };
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.FetcherService,onDestroy,void onDestroy(),"[1052, 1059]","{'A302': [(1052, 1054), (1059, 1059)], 'A295': [(1055, 1055)], 'A294': [(1056, 1058)]}","{'A302': 0.5, 'A295': 0.125, 'A294': 0.375}",A302,,"        @Override
        public void onDestroy() {
            super.onDestroy();
            ServiceCompat.stopForeground(this, ServiceCompat.STOP_FOREGROUND_REMOVE);
            if (fetcher != null) {
                fetcher.dispose();
            }
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity.FetcherService,createNotification,NotificationCompat.Builder createNotification(),"[1061, 1070]","{'A302': [(1061, 1065), (1070, 1070)], 'A294': [(1066, 1069)]}","{'A302': 0.6, 'A294': 0.4}",A302,,"        private NotificationCompat.Builder createNotification() {
            return new NotificationCompat.Builder(this, getString(R.string.notification_channel_id))
                    .setOngoing(true)
                    .setSmallIcon(R.drawable.ic_newpipe_triangle_white)
                    .setVisibility(NotificationCompat.VISIBILITY_PUBLIC)
                    .setContentTitle(
                            getString(R.string.preferred_player_fetcher_notification_title))
                    .setContentText(
                            getString(R.string.preferred_player_fetcher_notification_message));
        }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/RouterActivity.java,RouterActivity,getUrl,String getUrl(Intent),"[1077, 1090]","{'A302': [(1090, 1090)], 'A301': [(1077, 1077), (1079, 1089)], 'A294': [(1078, 1078)]}","{'A302': 0.07142857142857142, 'A301': 0.8571428571428571, 'A294': 0.07142857142857142}",A301,,"    @Nullable
    private String getUrl(final Intent intent) {
        String foundUrl = null;
        if (intent.getData() != null) {
            // Called from another app
            foundUrl = intent.getData().toString();
        } else if (intent.getStringExtra(Intent.EXTRA_TEXT) != null) {
            // Called from the share menu
            final String extraText = intent.getStringExtra(Intent.EXTRA_TEXT);
            foundUrl = UrlFinder.firstUrlFromInput(extraText);
        }

        return foundUrl;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/ExitActivity.java,ExitActivity,exitAndRemoveFromRecentApps,void exitAndRemoveFromRecentApps(Activity),"[30, 39]","{'A294': [(30, 39)]}",{'A294': 1.0},A294,,"    public static void exitAndRemoveFromRecentApps(final Activity activity) {
        final Intent intent = new Intent(activity, ExitActivity.class);

        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK
                | Intent.FLAG_ACTIVITY_EXCLUDE_FROM_RECENTS
                | Intent.FLAG_ACTIVITY_CLEAR_TASK
                | Intent.FLAG_ACTIVITY_NO_ANIMATION);

        activity.startActivity(intent);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/ExitActivity.java,ExitActivity,onCreate,void onCreate(Bundle),"[41, 49]","{'A351': [(41, 42), (44, 45), (47, 47), (49, 49)], 'A431': [(48, 48)], 'A294': [(43, 43)], 'A300': [(46, 46)]}","{'A351': 0.6666666666666666, 'A431': 0.1111111111111111, 'A294': 0.1111111111111111, 'A300': 0.1111111111111111}",A351,,"    @SuppressLint(""NewApi"")
    @Override
    protected void onCreate(final Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        finishAndRemoveTask();

        NavigationHelper.restartApp(this);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,getApp,App getApp(),"[70, 73]","{'A294': [(71, 73)], 'A295': [(70, 70)]}","{'A294': 0.75, 'A295': 0.25}",A294,,"    @NonNull
    public static App getApp() {
        return app;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,attachBaseContext,void attachBaseContext(Context),"[75, 79]","{'A301': [(75, 75), (77, 79)], 'A294': [(76, 76)]}","{'A301': 0.8, 'A294': 0.2}",A301,,"    @Override
    protected void attachBaseContext(final Context base) {
        super.attachBaseContext(base);
        initACRA();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,onCreate,void onCreate(),"[81, 125]","{'A351': [(81, 83)], 'A300': [(87, 92), (107, 107)], 'A305': [(114, 120), (123, 124)], 'A301': [(106, 106), (108, 108), (122, 122)], 'A294': [(100, 100)], 'A295': [(105, 105), (109, 109), (125, 125)], 'A302': [(102, 102), (110, 110), (113, 113), (121, 121)], 'A289': [(111, 112)], 'A309': [(93, 99)], 'A321': [(84, 84)], 'A375': [(85, 85)], 'A381': [(86, 86)], 'A338': [(101, 101)], 'A371': [(103, 104)]}","{'A351': 0.06666666666666667, 'A300': 0.15555555555555556, 'A305': 0.2, 'A301': 0.06666666666666667, 'A294': 0.022222222222222223, 'A295': 0.06666666666666667, 'A302': 0.08888888888888889, 'A289': 0.044444444444444446, 'A309': 0.15555555555555556, 'A321': 0.022222222222222223, 'A375': 0.022222222222222223, 'A381': 0.022222222222222223, 'A338': 0.022222222222222223, 'A371': 0.044444444444444446}",A305,,"    @Override
    public void onCreate() {
        super.onCreate();

        app = this;

        if (ProcessPhoenix.isPhoenixProcess(this)) {
            Log.i(TAG, ""This is a phoenix process! ""
                    + ""Aborting initialization of App[onCreate]"");
            return;
        }

        // check if the last used preference version is set
        // to determine whether this is the first app run
        final int lastUsedPrefVersion = PreferenceManager.getDefaultSharedPreferences(this)
                .getInt(getString(R.string.last_used_preferences_version), -1);
        isFirstRun = lastUsedPrefVersion == -1;

        // Initialize settings first because other initializations can use its values
        NewPipeSettings.initSettings(this);

        NewPipe.init(getDownloader(),
            Localization.getPreferredLocalization(this),
            Localization.getPreferredContentCountry(this));
        Localization.initPrettyTime(Localization.resolvePrettyTime());

        BridgeStateSaverInitializer.init(this);
        StateSaver.init(this);
        initNotificationChannels();

        ServiceHelper.initServices(this);

        // Initialize image loader
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(this);
        PicassoHelper.init(this);
        ImageStrategy.setPreferredImageQuality(PreferredImageQuality.fromPreferenceKey(this,
                prefs.getString(getString(R.string.image_quality_key),
                        getString(R.string.image_quality_default))));
        PicassoHelper.setIndicatorsEnabled(MainActivity.DEBUG
                && prefs.getBoolean(getString(R.string.show_image_indicators_key), false));

        configureRxJavaErrorHandler();

        YoutubeStreamExtractor.setPoTokenProvider(PoTokenProviderImpl.INSTANCE);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,onTerminate,void onTerminate(),"[127, 131]","{'A351': [(131, 131)], 'A305': [(130, 130)], 'A295': [(127, 129)]}","{'A351': 0.2, 'A305': 0.2, 'A295': 0.6}",A295,,"    @Override
    public void onTerminate() {
        super.onTerminate();
        PicassoHelper.terminate();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,getDownloader,Downloader getDownloader(),"[133, 137]","{'A305': [(135, 137)], 'A301': [(133, 133)], 'A294': [(134, 134)]}","{'A305': 0.6, 'A301': 0.2, 'A294': 0.2}",A305,,"    protected Downloader getDownloader() {
        final DownloaderImpl downloader = DownloaderImpl.init(null);
        setCookiesToDownloader(downloader);
        return downloader;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,setCookiesToDownloader,void setCookiesToDownloader(DownloaderImpl),"[139, 145]","{'A305': [(139, 142)], 'A301': [(145, 145)], 'A298': [(143, 143)], 'A330': [(144, 144)]}","{'A305': 0.5714285714285714, 'A301': 0.14285714285714285, 'A298': 0.14285714285714285, 'A330': 0.14285714285714285}",A305,,"    protected void setCookiesToDownloader(final DownloaderImpl downloader) {
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(
                getApplicationContext());
        final String key = getApplicationContext().getString(R.string.recaptcha_cookies_key);
        downloader.setCookie(ReCaptchaActivity.RECAPTCHA_COOKIES_KEY, prefs.getString(key, null));
        downloader.updateYoutubeRestrictedModeCookies(getApplicationContext());
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,configureRxJavaErrorHandler,void configureRxJavaErrorHandler(),"[147, 213]","{'A351': [(213, 213)], 'A301': [(147, 150), (154, 154), (156, 156), (162, 163), (169, 170), (180, 180), (188, 189), (191, 192), (201, 201), (211, 212)], 'A294': [(151, 153), (155, 155), (157, 158), (160, 161), (165, 166), (172, 174), (184, 184), (186, 186), (193, 196)], 'A295': [(159, 159), (168, 168)], 'A310': [(164, 164), (167, 167), (171, 171), (175, 179), (181, 183), (185, 185), (187, 187), (190, 190), (197, 200), (202, 210)]}","{'A351': 0.014925373134328358, 'A301': 0.26865671641791045, 'A294': 0.2835820895522388, 'A295': 0.029850746268656716, 'A310': 0.40298507462686567}",A310,,"    private void configureRxJavaErrorHandler() {
        // https://github.com/ReactiveX/RxJava/wiki/What's-different-in-2.0#error-handling
        RxJavaPlugins.setErrorHandler(new Consumer<Throwable>() {
            @Override
            public void accept(@NonNull final Throwable throwable) {
                Log.e(TAG, ""RxJavaPlugins.ErrorHandler called with -> : ""
                        + ""throwable = ["" + throwable.getClass().getName() + ""]"");

                final Throwable actualThrowable;
                if (throwable instanceof UndeliverableException) {
                    // As UndeliverableException is a wrapper,
                    // get the cause of it to get the ""real"" exception
                    actualThrowable = Objects.requireNonNull(throwable.getCause());
                } else {
                    actualThrowable = throwable;
                }

                final List<Throwable> errors;
                if (actualThrowable instanceof CompositeException) {
                    errors = ((CompositeException) actualThrowable).getExceptions();
                } else {
                    errors = List.of(actualThrowable);
                }

                for (final Throwable error : errors) {
                    if (isThrowableIgnored(error)) {
                        return;
                    }
                    if (isThrowableCritical(error)) {
                        reportException(error);
                        return;
                    }
                }

                // Out-of-lifecycle exceptions should only be reported if a debug user wishes so,
                // When exception is not reported, log it
                if (isDisposedRxExceptionsReported()) {
                    reportException(actualThrowable);
                } else {
                    Log.e(TAG, ""RxJavaPlugin: Undeliverable Exception received: "", actualThrowable);
                }
            }

            private boolean isThrowableIgnored(@NonNull final Throwable throwable) {
                // Don't crash the application over a simple network problem
                return ExceptionUtils.hasAssignableCause(throwable,
                        // network api cancellation
                        IOException.class, SocketException.class,
                        // blocking code disposed
                        InterruptedException.class, InterruptedIOException.class);
            }

            private boolean isThrowableCritical(@NonNull final Throwable throwable) {
                // Though these exceptions cannot be ignored
                return ExceptionUtils.hasAssignableCause(throwable,
                        NullPointerException.class, IllegalArgumentException.class, // bug in app
                        OnErrorNotImplementedException.class, MissingBackpressureException.class,
                        IllegalStateException.class); // bug in operator
            }

            private void reportException(@NonNull final Throwable throwable) {
                // Throw uncaught exception that will trigger the report system
                Thread.currentThread().getUncaughtExceptionHandler()
                        .uncaughtException(Thread.currentThread(), throwable);
            }
        });
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,accept,void accept(Throwable),"[150, 188]","{'A301': [(150, 150), (154, 154), (156, 156), (162, 163), (169, 170), (180, 180), (188, 188)], 'A294': [(151, 153), (155, 155), (157, 158), (160, 161), (165, 166), (172, 174), (184, 184), (186, 186)], 'A295': [(159, 159), (168, 168)], 'A310': [(164, 164), (167, 167), (171, 171), (175, 179), (181, 183), (185, 185), (187, 187)]}","{'A301': 0.23076923076923078, 'A294': 0.38461538461538464, 'A295': 0.05128205128205128, 'A310': 0.3333333333333333}",A294,,"            @Override
            public void accept(@NonNull final Throwable throwable) {
                Log.e(TAG, ""RxJavaPlugins.ErrorHandler called with -> : ""
                        + ""throwable = ["" + throwable.getClass().getName() + ""]"");

                final Throwable actualThrowable;
                if (throwable instanceof UndeliverableException) {
                    // As UndeliverableException is a wrapper,
                    // get the cause of it to get the ""real"" exception
                    actualThrowable = Objects.requireNonNull(throwable.getCause());
                } else {
                    actualThrowable = throwable;
                }

                final List<Throwable> errors;
                if (actualThrowable instanceof CompositeException) {
                    errors = ((CompositeException) actualThrowable).getExceptions();
                } else {
                    errors = List.of(actualThrowable);
                }

                for (final Throwable error : errors) {
                    if (isThrowableIgnored(error)) {
                        return;
                    }
                    if (isThrowableCritical(error)) {
                        reportException(error);
                        return;
                    }
                }

                // Out-of-lifecycle exceptions should only be reported if a debug user wishes so,
                // When exception is not reported, log it
                if (isDisposedRxExceptionsReported()) {
                    reportException(actualThrowable);
                } else {
                    Log.e(TAG, ""RxJavaPlugin: Undeliverable Exception received: "", actualThrowable);
                }
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,isThrowableIgnored,boolean isThrowableIgnored(Throwable),"[190, 197]","{'A301': [(191, 192)], 'A294': [(193, 196)], 'A310': [(190, 190), (197, 197)]}","{'A301': 0.25, 'A294': 0.5, 'A310': 0.25}",A294,,"            private boolean isThrowableIgnored(@NonNull final Throwable throwable) {
                // Don't crash the application over a simple network problem
                return ExceptionUtils.hasAssignableCause(throwable,
                        // network api cancellation
                        IOException.class, SocketException.class,
                        // blocking code disposed
                        InterruptedException.class, InterruptedIOException.class);
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,isThrowableCritical,boolean isThrowableCritical(Throwable),"[199, 205]","{'A301': [(201, 201)], 'A310': [(199, 200), (202, 205)]}","{'A301': 0.14285714285714285, 'A310': 0.8571428571428571}",A310,,"            private boolean isThrowableCritical(@NonNull final Throwable throwable) {
                // Though these exceptions cannot be ignored
                return ExceptionUtils.hasAssignableCause(throwable,
                        NullPointerException.class, IllegalArgumentException.class, // bug in app
                        OnErrorNotImplementedException.class, MissingBackpressureException.class,
                        IllegalStateException.class); // bug in operator
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,reportException,void reportException(Throwable),"[207, 211]","{'A301': [(211, 211)], 'A310': [(207, 210)]}","{'A301': 0.2, 'A310': 0.8}",A310,,"            private void reportException(@NonNull final Throwable throwable) {
                // Throw uncaught exception that will trigger the report system
                Thread.currentThread().getUncaughtExceptionHandler()
                        .uncaughtException(Thread.currentThread(), throwable);
            }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,initACRA,void initACRA(),"[219, 227]","{'A351': [(227, 227)], 'A305': [(219, 223)], 'A299': [(224, 226)]}","{'A351': 0.1111111111111111, 'A305': 0.5555555555555556, 'A299': 0.3333333333333333}",A305,,"    protected void initACRA() {
        if (ACRA.isACRASenderServiceProcess()) {
            return;
        }

        final CoreConfigurationBuilder acraConfig = new CoreConfigurationBuilder()
                .withBuildConfigClass(BuildConfig.class);
        ACRA.init(this, acraConfig);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,initNotificationChannels,void initNotificationChannels(),"[229, 266]","{'A300': [(234, 234), (240, 240), (246, 246), (265, 265)], 'A305': [(251, 251)], 'A295': [(229, 233), (235, 239), (241, 245), (247, 250), (252, 262), (264, 264)], 'A338': [(266, 266)], 'A340': [(263, 263)]}","{'A300': 0.10526315789473684, 'A305': 0.02631578947368421, 'A295': 0.8157894736842105, 'A338': 0.02631578947368421, 'A340': 0.02631578947368421}",A295,,"    private void initNotificationChannels() {
        // Keep the importance below DEFAULT to avoid making noise on every notification update for
        // the main and update channels
        final List<NotificationChannelCompat> notificationChannelCompats = List.of(
                new NotificationChannelCompat.Builder(getString(R.string.notification_channel_id),
                        NotificationManagerCompat.IMPORTANCE_LOW)
                        .setName(getString(R.string.notification_channel_name))
                        .setDescription(getString(R.string.notification_channel_description))
                        .build(),
                new NotificationChannelCompat
                        .Builder(getString(R.string.app_update_notification_channel_id),
                        NotificationManagerCompat.IMPORTANCE_LOW)
                        .setName(getString(R.string.app_update_notification_channel_name))
                        .setDescription(
                                getString(R.string.app_update_notification_channel_description))
                        .build(),
                new NotificationChannelCompat.Builder(getString(R.string.hash_channel_id),
                        NotificationManagerCompat.IMPORTANCE_HIGH)
                        .setName(getString(R.string.hash_channel_name))
                        .setDescription(getString(R.string.hash_channel_description))
                        .build(),
                new NotificationChannelCompat.Builder(getString(R.string.error_report_channel_id),
                        NotificationManagerCompat.IMPORTANCE_LOW)
                        .setName(getString(R.string.error_report_channel_name))
                        .setDescription(getString(R.string.error_report_channel_description))
                        .build(),
                new NotificationChannelCompat
                        .Builder(getString(R.string.streams_notification_channel_id),
                        NotificationManagerCompat.IMPORTANCE_DEFAULT)
                        .setName(getString(R.string.streams_notification_channel_name))
                        .setDescription(
                                getString(R.string.streams_notification_channel_description))
                        .build()
        );

        final NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);
        notificationManager.createNotificationChannelsCompat(notificationChannelCompats);
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,isDisposedRxExceptionsReported,boolean isDisposedRxExceptionsReported(),"[268, 270]","{'A310': [(268, 270)]}",{'A310': 1.0},A310,,"    protected boolean isDisposedRxExceptionsReported() {
        return false;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/App.java,App,isFirstRun,boolean isFirstRun(),"[272, 274]","{'A309': [(272, 274)]}",{'A309': 1.0},A309,,"    public boolean isFirstRun() {
        return isFirstRun;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,getTracksFromSource,WebMTrack[] getTracksFromSource(int),"[57, 66]","{'A294': [(57, 66)]}",{'A294': 1.0},A294,,"    public WebMTrack[] getTracksFromSource(final int sourceIndex) throws IllegalStateException {
        if (done) {
            throw new IllegalStateException(""already done"");
        }
        if (!parsed) {
            throw new IllegalStateException(""All sources must be parsed first"");
        }

        return readers[sourceIndex].getAvailableTracks();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,parseSources,void parseSources(),"[68, 85]","{'A294': [(68, 85)]}",{'A294': 1.0},A294,,"    public void parseSources() throws IOException, IllegalStateException {
        if (done) {
            throw new IllegalStateException(""already done"");
        }
        if (parsed) {
            throw new IllegalStateException(""already parsed"");
        }

        try {
            for (int i = 0; i < readers.length; i++) {
                readers[i] = new WebMReader(sourceTracks[i]);
                readers[i].parse();
            }

        } finally {
            parsed = true;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,selectTracks,void selectTracks(),"[87, 99]","{'A294': [(87, 99)]}",{'A294': 1.0},A294,,"    public void selectTracks(final int... trackIndex) throws IOException {
        try {
            readersSegment = new Segment[readers.length];
            readersCluster = new Cluster[readers.length];

            for (int i = 0; i < readers.length; i++) {
                infoTracks[i] = readers[i].selectTrack(trackIndex[i]);
                readersSegment[i] = readers[i].getNextSegment();
            }
        } finally {
            parsed = true;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,isDone,boolean isDone(),"[101, 103]","{'A294': [(101, 103)]}",{'A294': 1.0},A294,,"    public boolean isDone() {
        return done;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,close,void close(),"[105, 122]","{'A294': [(105, 122)]}",{'A294': 1.0},A294,,"    @Override
    public void close() {
        done = true;
        parsed = true;

        for (final SharpStream src : sourceTracks) {
            src.close();
        }

        sourceTracks = null;
        readers = null;
        infoTracks = null;
        readersSegment = null;
        readersCluster = null;
        outBuffer = null;
        outByteBuffer = null;
        clustersOffsetsSizes = null;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,build,void build(SharpStream),"[124, 330]","{'A294': [(125, 151), (154, 155), (157, 157), (160, 160), (163, 166), (168, 168), (171, 330)], 'A305': [(124, 124)], 'A328': [(152, 153), (156, 156), (158, 159), (161, 162), (167, 167), (169, 170)]}","{'A294': 0.9468599033816425, 'A305': 0.004830917874396135, 'A328': 0.04830917874396135}",A294,,"    @SuppressWarnings(""MethodLength"")
    public void build(final SharpStream out) throws IOException, RuntimeException {
        if (!out.canRewind()) {
            throw new IOException(""The output stream must be allow seek"");
        }

        makeEBML(out);

        final long offsetSegmentSizeSet = written + 5;
        final long offsetInfoDurationSet = written + 94;
        final long offsetClusterSet = written + 58;
        final long offsetCuesSet = written + 75;

        final ArrayList<byte[]> listBuffer = new ArrayList<>(4);

        /* segment */
        listBuffer.add(new byte[]{
                0x18, 0x53, (byte) 0x80, 0x67, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00// segment content size
        });

        final long segmentOffset = written + listBuffer.get(0).length;

        /* seek head */
        listBuffer.add(new byte[]{
                0x11, 0x4d, (byte) 0x9b, 0x74, (byte) 0xbe,
                0x4d, (byte) 0xbb, (byte) 0x8b,
                0x53, (byte) 0xab, (byte) 0x84, 0x15, 0x49, (byte) 0xa9, 0x66, 0x53,
                (byte) 0xac, (byte) 0x81,
                /*info offset*/ 0x43,
                0x4d, (byte) 0xbb, (byte) 0x8b, 0x53, (byte) 0xab,
                (byte) 0x84, 0x16, 0x54, (byte) 0xae, 0x6b, 0x53, (byte) 0xac, (byte) 0x81,
                /*tracks offset*/ 0x56,
                0x4d, (byte) 0xbb, (byte) 0x8e, 0x53, (byte) 0xab, (byte) 0x84, 0x1f,
                0x43, (byte) 0xb6, 0x75, 0x53, (byte) 0xac, (byte) 0x84,
                /*cluster offset [2]*/ 0x00, 0x00, 0x00, 0x00,
                0x4d, (byte) 0xbb, (byte) 0x8e, 0x53, (byte) 0xab, (byte) 0x84, 0x1c, 0x53,
                (byte) 0xbb, 0x6b, 0x53, (byte) 0xac, (byte) 0x84,
                /*cues offset [7]*/ 0x00, 0x00, 0x00, 0x00
        });

        /* info */
        listBuffer.add(new byte[]{
                0x15, 0x49, (byte) 0xa9, 0x66, (byte) 0x8e, 0x2a, (byte) 0xd7, (byte) 0xb1
        });
        // the segment duration MUST NOT exceed 4 bytes
        listBuffer.add(encode(DEFAULT_TIMECODE_SCALE, true));
        listBuffer.add(new byte[]{0x44, (byte) 0x89, (byte) 0x84,
                0x00, 0x00, 0x00, 0x00, // info.duration
        });

        /* tracks */
        listBuffer.addAll(makeTracks());

        dump(listBuffer, out);

        // reserve space for Cues element
        final long cueOffset = written;
        makeEbmlVoid(out, CUE_RESERVE_SIZE, true);

        final int[] defaultSampleDuration = new int[infoTracks.length];
        final long[] duration = new long[infoTracks.length];

        for (int i = 0; i < infoTracks.length; i++) {
            if (infoTracks[i].defaultDuration < 0) {
                defaultSampleDuration[i] = -1; // not available
            } else {
                defaultSampleDuration[i] = (int) Math.ceil(infoTracks[i].defaultDuration
                        / (float) DEFAULT_TIMECODE_SCALE);
            }
            duration[i] = -1;
        }

        // Select a track for the cue
        final int cuesForTrackId = selectTrackForCue();
        long nextCueTime = infoTracks[cuesForTrackId].trackType == 1 ? -1 : 0;
        final ArrayList<KeyFrame> keyFrames = new ArrayList<>(32);

        int firstClusterOffset = (int) written;
        long currentClusterOffset = makeCluster(out, 0, 0, true);

        long baseTimecode = 0;
        long limitTimecode = -1;
        int limitTimecodeByTrackId = cuesForTrackId;

        int blockWritten = Integer.MAX_VALUE;

        int newClusterByTrackId = -1;

        while (blockWritten > 0) {
            blockWritten = 0;
            int i = 0;
            while (i < readers.length) {
                final Block bloq = getNextBlockFrom(i);
                if (bloq == null) {
                    i++;
                    continue;
                }

                if (bloq.data == null) {
                    blockWritten = 1; // fake block
                    newClusterByTrackId = i;
                    i++;
                    continue;
                }

                if (newClusterByTrackId == i) {
                    limitTimecodeByTrackId = i;
                    newClusterByTrackId = -1;
                    baseTimecode = bloq.absoluteTimecode;
                    limitTimecode = baseTimecode + INTERV;
                    currentClusterOffset = makeCluster(out, baseTimecode, currentClusterOffset,
                            true);
                }

                if (cuesForTrackId == i) {
                    if ((nextCueTime > -1 && bloq.absoluteTimecode >= nextCueTime)
                            || (nextCueTime < 0 && bloq.isKeyframe())) {
                        if (nextCueTime > -1) {
                            nextCueTime += DEFAULT_CUES_EACH_MS;
                        }
                        keyFrames.add(new KeyFrame(segmentOffset, currentClusterOffset, written,
                                bloq.absoluteTimecode));
                    }
                }

                writeBlock(out, bloq, baseTimecode);
                blockWritten++;

                if (defaultSampleDuration[i] < 0 && duration[i] >= 0) {
                    // if the sample duration in unknown,
                    // calculate using current_duration - previous_duration
                    defaultSampleDuration[i] = (int) (bloq.absoluteTimecode - duration[i]);
                }
                duration[i] = bloq.absoluteTimecode;

                if (limitTimecode < 0) {
                    limitTimecode = bloq.absoluteTimecode + INTERV;
                    continue;
                }

                if (bloq.absoluteTimecode >= limitTimecode) {
                    if (limitTimecodeByTrackId != i) {
                        limitTimecode += INTERV - (bloq.absoluteTimecode - limitTimecode);
                    }
                    i++;
                }
            }
        }

        makeCluster(out, -1, currentClusterOffset, false);

        final long segmentSize = written - offsetSegmentSizeSet - 7;

        /* Segment size */
        seekTo(out, offsetSegmentSizeSet);
        outByteBuffer.putLong(0, segmentSize);
        out.write(outBuffer, 1, DataReader.LONG_SIZE - 1);

        /* Segment duration */
        long longestDuration = 0;
        for (int i = 0; i < duration.length; i++) {
            if (defaultSampleDuration[i] > 0) {
                duration[i] += defaultSampleDuration[i];
            }
            if (duration[i] > longestDuration) {
                longestDuration = duration[i];
            }
        }
        seekTo(out, offsetInfoDurationSet);
        outByteBuffer.putFloat(0, longestDuration);
        dump(outBuffer, DataReader.FLOAT_SIZE, out);

        /* first Cluster offset */
        firstClusterOffset -= segmentOffset;
        writeInt(out, offsetClusterSet, firstClusterOffset);

        seekTo(out, cueOffset);

        /* Cue */
        short cueSize = 0;
        dump(new byte[]{0x1c, 0x53, (byte) 0xbb, 0x6b, 0x20, 0x00, 0x00}, out); // header size is 7

        for (final KeyFrame keyFrame : keyFrames) {
            final int size = makeCuePoint(cuesForTrackId, keyFrame, outBuffer);

            if ((cueSize + size + 7 + MINIMUM_EBML_VOID_SIZE) > CUE_RESERVE_SIZE) {
                break; // no space left
            }

            cueSize += size;
            dump(outBuffer, size, out);
        }

        makeEbmlVoid(out, CUE_RESERVE_SIZE - cueSize - 7, false);

        seekTo(out, cueOffset + 5);
        outByteBuffer.putShort(0, cueSize);
        dump(outBuffer, DataReader.SHORT_SIZE, out);

        /* seek head, seek for cues element */
        writeInt(out, offsetCuesSet, (int) (cueOffset - segmentOffset));

        for (final ClusterInfo cluster : clustersOffsetsSizes) {
            writeInt(out, cluster.offset, cluster.size | 0x10000000);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,getNextBlockFrom,Block getNextBlockFrom(int),"[332, 362]","{'A294': [(332, 355), (357, 362)], 'A328': [(356, 356)]}","{'A294': 0.967741935483871, 'A328': 0.03225806451612903}",A294,,"    private Block getNextBlockFrom(final int internalTrackId) throws IOException {
        if (readersSegment[internalTrackId] == null) {
            readersSegment[internalTrackId] = readers[internalTrackId].getNextSegment();
            if (readersSegment[internalTrackId] == null) {
                return null; // no more blocks in the selected track
            }
        }

        if (readersCluster[internalTrackId] == null) {
            readersCluster[internalTrackId] = readersSegment[internalTrackId].getNextCluster();
            if (readersCluster[internalTrackId] == null) {
                readersSegment[internalTrackId] = null;
                return getNextBlockFrom(internalTrackId);
            }
        }

        final SimpleBlock res = readersCluster[internalTrackId].getNextSimpleBlock();
        if (res == null) {
            readersCluster[internalTrackId] = null;
            return new Block(); // fake block to indicate the end of the cluster
        }

        final Block bloq = new Block();
        bloq.data = res.data;
        bloq.dataSize = res.dataSize;
        bloq.trackNumber = internalTrackId;
        bloq.flags = res.flags;
        bloq.absoluteTimecode = res.absoluteTimeCodeNs / DEFAULT_TIMECODE_SCALE;

        return bloq;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,seekTo,"void seekTo(SharpStream,long)","[364, 377]","{'A294': [(364, 377)]}",{'A294': 1.0},A294,,"    private void seekTo(final SharpStream stream, final long offset) throws IOException {
        if (stream.canSeek()) {
            stream.seek(offset);
        } else {
            if (offset > written) {
                stream.skip(offset - written);
            } else {
                stream.rewind();
                stream.skip(offset);
            }
        }

        written = offset;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,writeInt,"void writeInt(SharpStream,long,int)","[379, 384]","{'A294': [(379, 384)]}",{'A294': 1.0},A294,,"    private void writeInt(final SharpStream stream, final long offset, final int number)
            throws IOException {
        seekTo(stream, offset);
        outByteBuffer.putInt(0, number);
        dump(outBuffer, DataReader.INTEGER_SIZE, stream);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,writeBlock,"void writeBlock(SharpStream,Block,long)","[386, 414]","{'A294': [(386, 414)]}",{'A294': 1.0},A294,,"    private void writeBlock(final SharpStream stream, final Block bloq, final long clusterTimecode)
            throws IOException {
        final long relativeTimeCode = bloq.absoluteTimecode - clusterTimecode;

        if (relativeTimeCode < Short.MIN_VALUE || relativeTimeCode > Short.MAX_VALUE) {
            throw new IndexOutOfBoundsException(""SimpleBlock timecode overflow."");
        }

        final ArrayList<byte[]> listBuffer = new ArrayList<>(5);
        listBuffer.add(new byte[]{(byte) 0xa3});
        listBuffer.add(null); // block size
        listBuffer.add(encode(bloq.trackNumber + 1, false));
        listBuffer.add(ByteBuffer.allocate(DataReader.SHORT_SIZE).putShort((short) relativeTimeCode)
                .array());
        listBuffer.add(new byte[]{bloq.flags});

        int blockSize = bloq.dataSize;
        for (int i = 2; i < listBuffer.size(); i++) {
            blockSize += listBuffer.get(i).length;
        }
        listBuffer.set(1, encode(blockSize, false));

        dump(listBuffer, stream);

        int read;
        while ((read = bloq.data.read(outBuffer)) > 0) {
            dump(outBuffer, read, stream);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeCluster,"long makeCluster(SharpStream,long,long,boolean)","[416, 447]","{'A294': [(417, 418), (420, 426), (429, 445), (447, 447)], 'A328': [(416, 416), (419, 419), (427, 428), (446, 446)]}","{'A294': 0.84375, 'A328': 0.15625}",A294,,"    private long makeCluster(final SharpStream stream, final long timecode, final long offsetStart,
                             final boolean create) throws IOException {
        ClusterInfo cluster;
        long offset = offsetStart;

        if (offset > 0) {
            // save the size of the previous cluster (maximum 256 MiB)
            cluster = clustersOffsetsSizes.get(clustersOffsetsSizes.size() - 1);
            cluster.size = (int) (written - offset - CLUSTER_HEADER_SIZE);
        }

        offset = written;

        if (create) {
            /* cluster */
            dump(new byte[]{0x1f, 0x43, (byte) 0xb6, 0x75}, stream);

            cluster = new ClusterInfo();
            cluster.offset = written;
            clustersOffsetsSizes.add(cluster);

            dump(new byte[]{
                    0x10, 0x00, 0x00, 0x00,
                    /* timestamp */
                    (byte) 0xe7
            }, stream);

            dump(encode(timecode, true), stream);
        }

        return offset;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeEBML,void makeEBML(SharpStream),"[449, 459]","{'A294': [(449, 449), (451, 459)], 'A328': [(450, 450)]}","{'A294': 0.9090909090909091, 'A328': 0.09090909090909091}",A294,,"    private void makeEBML(final SharpStream stream) throws IOException {
        // default values
        dump(new byte[]{
                0x1A, 0x45, (byte) 0xDF, (byte) 0xA3, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x1F, 0x42, (byte) 0x86, (byte) 0x81, 0x01,
                0x42, (byte) 0xF7, (byte) 0x81, 0x01, 0x42, (byte) 0xF2, (byte) 0x81, 0x04,
                0x42, (byte) 0xF3, (byte) 0x81, 0x08, 0x42, (byte) 0x82, (byte) 0x84, 0x77,
                0x65, 0x62, 0x6D, 0x42, (byte) 0x87, (byte) 0x81, 0x02,
                0x42, (byte) 0x85, (byte) 0x81, 0x02
        }, stream);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeTracks,ArrayList<byte[]> makeTracks(),"[461, 471]","{'A294': [(461, 471)]}",{'A294': 1.0},A294,,"    private ArrayList<byte[]> makeTracks() {
        final ArrayList<byte[]> buffer = new ArrayList<>(1);
        buffer.add(new byte[]{0x16, 0x54, (byte) 0xae, 0x6b});
        buffer.add(null);

        for (int i = 0; i < infoTracks.length; i++) {
            buffer.addAll(makeTrackEntry(i, infoTracks[i]));
        }

        return lengthFor(buffer);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeTrackEntry,"ArrayList<byte[]> makeTrackEntry(int,WebMTrack)","[473, 536]","{'A294': [(473, 536)]}",{'A294': 1.0},A294,,"    private ArrayList<byte[]> makeTrackEntry(final int internalTrackId, final WebMTrack track) {
        final byte[] id = encode(internalTrackId + 1, true);
        final ArrayList<byte[]> buffer = new ArrayList<>(12);

        /* track */
        buffer.add(new byte[]{(byte) 0xae});
        buffer.add(null);

        /* track number */
        buffer.add(new byte[]{(byte) 0xd7});
        buffer.add(id);

        /* track uid */
        buffer.add(new byte[]{0x73, (byte) 0xc5});
        buffer.add(id);

        /* flag lacing */
        buffer.add(new byte[]{(byte) 0x9c, (byte) 0x81, 0x00});

        /* lang */
        buffer.add(new byte[]{0x22, (byte) 0xb5, (byte) 0x9c, (byte) 0x83, 0x75, 0x6e, 0x64});

        /* codec id */
        buffer.add(new byte[]{(byte) 0x86});
        buffer.addAll(encode(track.codecId));

        /* codec delay*/
        if (track.codecDelay >= 0) {
            buffer.add(new byte[]{0x56, (byte) 0xAA});
            buffer.add(encode(track.codecDelay, true));
        }

        /* codec seek pre-roll*/
        if (track.seekPreRoll >= 0) {
            buffer.add(new byte[]{0x56, (byte) 0xBB});
            buffer.add(encode(track.seekPreRoll, true));
        }

        /* type */
        buffer.add(new byte[]{(byte) 0x83});
        buffer.add(encode(track.trackType, true));

        /* default duration */
        if (track.defaultDuration >= 0) {
            buffer.add(new byte[]{0x23, (byte) 0xe3, (byte) 0x83});
            buffer.add(encode(track.defaultDuration, true));
        }

        /* audio/video */
        if ((track.trackType == 1 || track.trackType == 2) && valid(track.bMetadata)) {
            buffer.add(new byte[]{(byte) (track.trackType == 1 ? 0xe0 : 0xe1)});
            buffer.add(encode(track.bMetadata.length, false));
            buffer.add(track.bMetadata);
        }

        /* codec private*/
        if (valid(track.codecPrivate)) {
            buffer.add(new byte[]{0x63, (byte) 0xa2});
            buffer.add(encode(track.codecPrivate.length, false));
            buffer.add(track.codecPrivate);
        }

        return lengthFor(buffer);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeCuePoint,"int makeCuePoint(int,KeyFrame,byte[])","[538, 562]","{'A294': [(538, 562)]}",{'A294': 1.0},A294,,"    private int makeCuePoint(final int internalTrackId, final KeyFrame keyFrame,
                             final byte[] buffer) {
        final ArrayList<byte[]> cue = new ArrayList<>(5);

        /* CuePoint */
        cue.add(new byte[]{(byte) 0xbb});
        cue.add(null);

        /* CueTime */
        cue.add(new byte[]{(byte) 0xb3});
        cue.add(encode(keyFrame.duration, true));

        /* CueTrackPosition */
        cue.addAll(makeCueTrackPosition(internalTrackId, keyFrame));

        int size = 0;
        lengthFor(cue);

        for (final byte[] buff : cue) {
            System.arraycopy(buff, 0, buffer, size, buff.length);
            size += buff.length;
        }

        return size;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeCueTrackPosition,"ArrayList<byte[]> makeCueTrackPosition(int,KeyFrame)","[564, 587]","{'A294': [(564, 587)]}",{'A294': 1.0},A294,,"    private ArrayList<byte[]> makeCueTrackPosition(final int internalTrackId,
                                                   final KeyFrame keyFrame) {
        final ArrayList<byte[]> buffer = new ArrayList<>(8);

        /* CueTrackPositions */
        buffer.add(new byte[]{(byte) 0xb7});
        buffer.add(null);

        /* CueTrack */
        buffer.add(new byte[]{(byte) 0xf7});
        buffer.add(encode(internalTrackId + 1, true));

        /* CueClusterPosition */
        buffer.add(new byte[]{(byte) 0xf1});
        buffer.add(encode(keyFrame.clusterPosition, true));

        /* CueRelativePosition */
        if (keyFrame.relativePosition > 0) {
            buffer.add(new byte[]{(byte) 0xf0});
            buffer.add(encode(keyFrame.relativePosition, true));
        }

        return lengthFor(buffer);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,makeEbmlVoid,"void makeEbmlVoid(SharpStream,int,boolean)","[589, 607]","{'A294': [(590, 590), (593, 607)], 'A328': [(589, 589), (591, 592)]}","{'A294': 0.8421052631578947, 'A328': 0.15789473684210525}",A294,,"    private void makeEbmlVoid(final SharpStream out, final int amount, final boolean wipe)
            throws IOException {
        int size = amount;

        /* ebml void */
        outByteBuffer.putShort(0, (short) 0xec20);
        outByteBuffer.putShort(2, (short) (size - 4));

        dump(outBuffer, 4, out);

        if (wipe) {
            size -= 4;
            while (size > 0) {
                final int write = Math.min(size, outBuffer.length);
                dump(outBuffer, write, out);
                size -= write;
            }
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,dump,"void dump(byte[],SharpStream)","[609, 611]","{'A294': [(609, 611)]}",{'A294': 1.0},A294,,"    private void dump(final byte[] buffer, final SharpStream stream) throws IOException {
        dump(buffer, buffer.length, stream);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,dump,"void dump(byte[],int,SharpStream)","[613, 617]","{'A294': [(613, 617)]}",{'A294': 1.0},A294,,"    private void dump(final byte[] buffer, final int count, final SharpStream stream)
            throws IOException {
        stream.write(buffer, 0, count);
        written += count;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,dump,"void dump(ArrayList<byte[]>,SharpStream)","[619, 625]","{'A294': [(619, 625)]}",{'A294': 1.0},A294,,"    private void dump(final ArrayList<byte[]> buffers, final SharpStream stream)
            throws IOException {
        for (final byte[] buffer : buffers) {
            stream.write(buffer);
            written += buffer.length;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,lengthFor,ArrayList<byte[]> lengthFor(ArrayList<byte[]>),"[627, 634]","{'A294': [(627, 634)]}",{'A294': 1.0},A294,,"    private ArrayList<byte[]> lengthFor(final ArrayList<byte[]> buffer) {
        long size = 0;
        for (int i = 2; i < buffer.size(); i++) {
            size += buffer.get(i).length;
        }
        buffer.set(1, encode(size, false));
        return buffer;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,encode,"byte[] encode(long,boolean)","[636, 671]","{'A294': [(636, 654), (656, 671)], 'A295': [(655, 655)]}","{'A294': 0.9722222222222222, 'A295': 0.027777777777777776}",A294,,"    private byte[] encode(final long number, final boolean withLength) {
        int length = -1;
        for (int i = 1; i <= 7; i++) {
            if (number < Math.pow(2, 7 * i)) {
                length = i;
                break;
            }
        }

        if (length < 1) {
            throw new ArithmeticException(""Can't encode a number of bigger than 7 bytes"");
        }

        if (number == (Math.pow(2, 7 * length)) - 1) {
            length++;
        }

        final int offset = withLength ? 1 : 0;
        final byte[] buffer = new byte[offset + length];
        final long marker = Math.floorDiv(length - 1, 8);

        int shift = 0;
        for (int i = length - 1; i >= 0; i--, shift += 8) {
            long b = number >>> shift;
            if (!withLength && i == marker) {
                b = b | (0x80 >>> (length - 1));
            }
            buffer[offset + i] = (byte) b;
        }

        if (withLength) {
            buffer[0] = (byte) (0x80 | length);
        }

        return buffer;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,encode,ArrayList<byte[]> encode(String),"[673, 681]","{'A294': [(673, 681)]}",{'A294': 1.0},A294,,"    private ArrayList<byte[]> encode(final String value) {
        final byte[] str = value.getBytes(StandardCharsets.UTF_8); // or use ""utf-8""

        final ArrayList<byte[]> buffer = new ArrayList<>(2);
        buffer.add(encode(str.length, false));
        buffer.add(str);

        return buffer;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,valid,boolean valid(byte[]),"[683, 685]","{'A294': [(683, 685)]}",{'A294': 1.0},A294,,"    private boolean valid(final byte[] buffer) {
        return buffer != null && buffer.length > 0;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter,selectTrackForCue,int selectTrackForCue(),"[687, 724]","{'A294': [(687, 715), (717, 724)], 'A317': [(716, 716)]}","{'A294': 0.9736842105263158, 'A317': 0.02631578947368421}",A294,,"    private int selectTrackForCue() {
        int i = 0;
        int videoTracks = 0;
        int audioTracks = 0;

        for (; i < infoTracks.length; i++) {
            switch (infoTracks[i].trackType) {
                case 1:
                    videoTracks++;
                    break;
                case 2:
                    audioTracks++;
                    break;
            }
        }

        final int kind;
        if (audioTracks == infoTracks.length) {
            kind = 2;
        } else if (videoTracks == infoTracks.length) {
            kind = 1;
        } else if (videoTracks > 0) {
            kind = 1;
        } else if (audioTracks > 0) {
            kind = 2;
        } else {
            return 0;
        }

        // TODO: in the above code, find and select the shortest track for the desired kind
        for (i = 0; i < infoTracks.length; i++) {
            if (kind == infoTracks[i].trackType) {
                return i;
            }
        }

        return 0;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter.Block,isKeyframe,boolean isKeyframe(),"[745, 747]","{'A294': [(745, 747)]}",{'A294': 1.0},A294,,"        boolean isKeyframe() {
            return (flags & 0x80) == 0x80;
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMWriter.java,WebMWriter.Block,toString,String toString(),"[749, 754]","{'A294': [(749, 754)]}",{'A294': 1.0},A294,,"        @NonNull
        @Override
        public String toString() {
            return String.format(""trackNumber=%s  isKeyFrame=%S  absoluteTimecode=%s"", trackNumber,
                    isKeyframe(), absoluteTimecode);
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,parse,void parse(),"[63, 79]","{'A294': [(63, 79)]}",{'A294': 1.0},A294,,"    public void parse() throws IOException {
        Element elem = readElement(ID_EMBL);
        if (!readEbml(elem, 1, 2)) {
            throw new UnsupportedOperationException(""Unsupported EBML data (WebM)"");
        }
        ensure(elem);

        elem = untilElement(null, ID_SEGMENT);
        if (elem == null) {
            throw new IOException(""Fragment element not found"");
        }
        segment = readSegment(elem, 0, true);
        tracks = segment.tracks;
        selectedTrack = -1;
        done = false;
        firstSegment = true;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,getAvailableTracks,WebMTrack[] getAvailableTracks(),"[81, 83]","{'A294': [(81, 83)]}",{'A294': 1.0},A294,,"    public WebMTrack[] getAvailableTracks() {
        return tracks;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,selectTrack,WebMTrack selectTrack(int),"[85, 88]","{'A294': [(85, 88)]}",{'A294': 1.0},A294,,"    public WebMTrack selectTrack(final int index) {
        selectedTrack = index;
        return tracks[index];
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,getNextSegment,Segment getNextSegment(),"[90, 110]","{'A294': [(90, 110)]}",{'A294': 1.0},A294,,"    public Segment getNextSegment() throws IOException {
        if (done) {
            return null;
        }

        if (firstSegment && segment != null) {
            firstSegment = false;
            return segment;
        }

        ensure(segment.ref);
        // WARNING: track cannot be the same or have different index in new segments
        final Element elem = untilElement(null, ID_SEGMENT);
        if (elem == null) {
            done = true;
            return null;
        }
        segment = readSegment(elem, 0, false);

        return segment;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readNumber,long readNumber(Element),"[112, 123]","{'A294': [(112, 123)]}",{'A294': 1.0},A294,,"    private long readNumber(final Element parent) throws IOException {
        int length = (int) parent.contentSize;
        long value = 0;
        while (length-- > 0) {
            final int read = stream.read();
            if (read == -1) {
                throw new EOFException();
            }
            value = (value << 8) | read;
        }
        return value;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readString,String readString(Element),"[125, 127]","{'A294': [(125, 127)]}",{'A294': 1.0},A294,,"    private String readString(final Element parent) throws IOException {
        return new String(readBlob(parent), StandardCharsets.UTF_8); // or use ""utf-8""
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readBlob,byte[] readBlob(Element),"[129, 137]","{'A294': [(129, 137)]}",{'A294': 1.0},A294,,"    private byte[] readBlob(final Element parent) throws IOException {
        final long length = parent.contentSize;
        final byte[] buffer = new byte[(int) length];
        final int read = stream.read(buffer);
        if (read < length) {
            throw new EOFException();
        }
        return buffer;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readEncodedNumber,long readEncodedNumber(),"[139, 168]","{'A294': [(139, 168)]}",{'A294': 1.0},A294,,"    private long readEncodedNumber() throws IOException {
        int value = stream.read();

        if (value > 0) {
            byte size = 1;
            int mask = 0x80;

            while (size < 9) {
                if ((value & mask) == mask) {
                    mask = 0xFF;
                    mask >>= size;

                    long number = value & mask;

                    for (int i = 1; i < size; i++) {
                        value = stream.read();
                        number <<= 8;
                        number |= value;
                    }

                    return number;
                }

                mask >>= 1;
                size++;
            }
        }

        throw new IOException(""Invalid encoded length"");
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readElement,Element readElement(),"[170, 178]","{'A294': [(170, 178)]}",{'A294': 1.0},A294,,"    private Element readElement() throws IOException {
        final Element elem = new Element();
        elem.offset = stream.position();
        elem.type = (int) readEncodedNumber();
        elem.contentSize = readEncodedNumber();
        elem.size = elem.contentSize + stream.position() - elem.offset;

        return elem;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readElement,Element readElement(int),"[180, 188]","{'A294': [(180, 188)]}",{'A294': 1.0},A294,,"    private Element readElement(final int expected) throws IOException {
        final Element elem = readElement();
        if (expected != 0 && elem.type != expected) {
            throw new NoSuchElementException(""expected "" + elementID(expected)
                    + "" found "" + elementID(elem.type));
        }

        return elem;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,untilElement,Element untilElement(Element),"[190, 207]","{'A294': [(190, 207)]}",{'A294': 1.0},A294,,"    private Element untilElement(final Element ref, final int... expected) throws IOException {
        Element elem;
        while (ref == null ? stream.available() : (stream.position() < (ref.offset + ref.size))) {
            elem = readElement();
            if (expected.length < 1) {
                return elem;
            }
            for (final int type : expected) {
                if (elem.type == type) {
                    return elem;
                }
            }

            ensure(elem);
        }

        return null;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,elementID,String elementID(long),"[209, 211]","{'A294': [(209, 211)]}",{'A294': 1.0},A294,,"    private String elementID(final long type) {
        return ""0x"".concat(Long.toHexString(type));
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,ensure,void ensure(Element),"[213, 226]","{'A294': [(213, 226)]}",{'A294': 1.0},A294,,"    private void ensure(final Element ref) throws IOException {
        final long skip = (ref.offset + ref.size) - stream.position();

        if (skip == 0) {
            return;
        } else if (skip < 0) {
            throw new EOFException(String.format(
                    ""parser go beyond limits of the Element. type=%s offset=%s size=%s position=%s"",
                    elementID(ref.type), ref.offset, ref.size, stream.position()
            ));
        }

        stream.skipBytes(skip);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readEbml,"boolean readEbml(Element,int,int)","[228, 248]","{'A294': [(228, 248)]}",{'A294': 1.0},A294,,"    private boolean readEbml(final Element ref, final int minReadVersion,
                             final int minDocTypeVersion) throws IOException {
        Element elem = untilElement(ref, ID_EMBL_READ_VERSION);
        if (elem == null) {
            return false;
        }
        if (readNumber(elem) > minReadVersion) {
            return false;
        }

        elem = untilElement(ref, ID_EMBL_DOC_TYPE);
        if (elem == null) {
            return false;
        }
        if (!readString(elem).equals(""webm"")) {
            return false;
        }
        elem = untilElement(ref, ID_EMBL_DOC_TYPE_READ_VERSION);

        return elem != null && readNumber(elem) <= minDocTypeVersion;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readInfo,Info readInfo(Element),"[250, 271]","{'A294': [(250, 271)]}",{'A294': 1.0},A294,,"    private Info readInfo(final Element ref) throws IOException {
        Element elem;
        final Info info = new Info();

        while ((elem = untilElement(ref, ID_TIMECODE_SCALE, ID_DURATION)) != null) {
            switch (elem.type) {
                case ID_TIMECODE_SCALE:
                    info.timecodeScale = readNumber(elem);
                    break;
                case ID_DURATION:
                    info.duration = readNumber(elem);
                    break;
            }
            ensure(elem);
        }

        if (info.timecodeScale == 0) {
            throw new NoSuchElementException(""Element Timecode not found"");
        }

        return info;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readSegment,"Segment readSegment(Element,int,boolean)","[273, 300]","{'A294': [(273, 295), (297, 300)], 'A299': [(296, 296)]}","{'A294': 0.9642857142857143, 'A299': 0.03571428571428571}",A294,,"    private Segment readSegment(final Element ref, final int trackLacingExpected,
                                final boolean metadataExpected) throws IOException {
        final Segment obj = new Segment(ref);
        Element elem;
        while ((elem = untilElement(ref, ID_INFO, ID_TRACKS, ID_CLUSTER)) != null) {
            if (elem.type == ID_CLUSTER) {
                obj.currentCluster = elem;
                break;
            }
            switch (elem.type) {
                case ID_INFO:
                    obj.info = readInfo(elem);
                    break;
                case ID_TRACKS:
                    obj.tracks = readTracks(elem, trackLacingExpected);
                    break;
            }
            ensure(elem);
        }

        if (metadataExpected && (obj.info == null || obj.tracks == null)) {
            throw new RuntimeException(
                    ""Cluster element found without Info and/or Tracks element at position ""
                            + ref.offset);
        }

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readTracks,"WebMTrack[] readTracks(Element,int)","[302, 368]","{'A294': [(302, 350), (352, 368)], 'A295': [(351, 351)]}","{'A294': 0.9850746268656716, 'A295': 0.014925373134328358}",A294,,"    private WebMTrack[] readTracks(final Element ref, final int lacingExpected) throws IOException {
        final ArrayList<WebMTrack> trackEntries = new ArrayList<>(2);
        Element elemTrackEntry;

        while ((elemTrackEntry = untilElement(ref, ID_TRACK_ENTRY)) != null) {
            final WebMTrack entry = new WebMTrack();
            boolean drop = false;
            Element elem;
            while ((elem = untilElement(elemTrackEntry)) != null) {
                switch (elem.type) {
                    case ID_TRACK_NUMBER:
                        entry.trackNumber = readNumber(elem);
                        break;
                    case ID_TRACK_TYPE:
                        entry.trackType = (int) readNumber(elem);
                        break;
                    case ID_CODEC_ID:
                        entry.codecId = readString(elem);
                        break;
                    case ID_CODEC_PRIVATE:
                        entry.codecPrivate = readBlob(elem);
                        break;
                    case ID_AUDIO:
                    case ID_VIDEO:
                        entry.bMetadata = readBlob(elem);
                        break;
                    case ID_DEFAULT_DURATION:
                        entry.defaultDuration = readNumber(elem);
                        break;
                    case ID_FLAG_LACING:
                        drop = readNumber(elem) != lacingExpected;
                        break;
                    case ID_CODEC_DELAY:
                        entry.codecDelay = readNumber(elem);
                        break;
                    case ID_SEEK_PRE_ROLL:
                        entry.seekPreRoll = readNumber(elem);
                        break;
                    default:
                        break;
                }
                ensure(elem);
            }
            if (!drop) {
                trackEntries.add(entry);
            }
            ensure(elemTrackEntry);
        }

        final WebMTrack[] entries = trackEntries.toArray(new WebMTrack[0]);

        for (final WebMTrack entry : entries) {
            switch (entry.trackType) {
                case 1:
                    entry.kind = TrackKind.Video;
                    break;
                case 2:
                    entry.kind = TrackKind.Audio;
                    break;
                default:
                    entry.kind = TrackKind.Other;
                    break;
            }
        }

        return entries;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readSimpleBlock,SimpleBlock readSimpleBlock(Element),"[370, 384]","{'A294': [(370, 384)]}",{'A294': 1.0},A294,,"    private SimpleBlock readSimpleBlock(final Element ref) throws IOException {
        final SimpleBlock obj = new SimpleBlock(ref);
        obj.trackNumber = readEncodedNumber();
        obj.relativeTimeCode = stream.readShort();
        obj.flags = (byte) stream.read();
        obj.dataSize = (int) ((ref.offset + ref.size) - stream.position());
        obj.createdFromBlock = ref.type == ID_BLOCK;

        // NOTE: lacing is not implemented, and will be mixed with the stream data
        if (obj.dataSize < 0) {
            throw new IOException(String.format(
                    ""Unexpected SimpleBlock element size, missing %s bytes"", -obj.dataSize));
        }
        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader,readCluster,Cluster readCluster(Element),"[386, 397]","{'A294': [(386, 390), (392, 397)], 'A299': [(391, 391)]}","{'A294': 0.9166666666666666, 'A299': 0.08333333333333333}",A294,,"    private Cluster readCluster(final Element ref) throws IOException {
        final Cluster obj = new Cluster(ref);

        final Element elem = untilElement(ref, ID_TIMECODE);
        if (elem == null) {
            throw new NoSuchElementException(""Cluster at "" + ref.offset
                    + "" without Timecode element"");
        }
        obj.timecode = readNumber(elem);

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader.Segment,getNextCluster,Cluster getNextCluster(),"[435, 453]","{'A294': [(435, 453)]}",{'A294': 1.0},A294,,"        public Cluster getNextCluster() throws IOException {
            if (done) {
                return null;
            }
            if (firstClusterInSegment && segment.currentCluster != null) {
                firstClusterInSegment = false;
                return readCluster(segment.currentCluster);
            }
            ensure(segment.currentCluster);

            final Element elem = untilElement(segment.ref, ID_CLUSTER);
            if (elem == null) {
                return null;
            }

            segment.currentCluster = elem;

            return readCluster(segment.currentCluster);
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader.SimpleBlock,isKeyframe,boolean isKeyframe(),"[471, 473]","{'A294': [(471, 473)]}",{'A294': 1.0},A294,,"        public boolean isKeyframe() {
            return (flags & 0x80) == 0x80;
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader.Cluster,insideClusterBounds,boolean insideClusterBounds(),"[486, 488]","{'A294': [(486, 488)]}",{'A294': 1.0},A294,,"        boolean insideClusterBounds() {
            return stream.position() >= (ref.offset + ref.size);
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/WebMReader.java,WebMReader.Cluster,getNextSimpleBlock,SimpleBlock getNextSimpleBlock(),"[490, 535]","{'A294': [(490, 521), (523, 535)], 'A299': [(522, 522)]}","{'A294': 0.9782608695652174, 'A299': 0.021739130434782608}",A294,,"        public SimpleBlock getNextSimpleBlock() throws IOException {
            if (insideClusterBounds()) {
                return null;
            }

            if (currentBlockGroup != null) {
                ensure(currentBlockGroup);
                currentBlockGroup = null;
                currentSimpleBlock = null;
            } else if (currentSimpleBlock != null) {
                ensure(currentSimpleBlock.ref);
            }

            while (!insideClusterBounds()) {
                Element elem = untilElement(ref, ID_SIMPLE_BLOCK, ID_GROUP_BLOCK);
                if (elem == null) {
                    return null;
                }

                if (elem.type == ID_GROUP_BLOCK) {
                    currentBlockGroup = elem;
                    elem = untilElement(currentBlockGroup, ID_BLOCK);

                    if (elem == null) {
                        ensure(currentBlockGroup);
                        currentBlockGroup = null;
                        continue;
                    }
                }

                currentSimpleBlock = readSimpleBlock(elem);
                if (currentSimpleBlock.trackNumber == tracks[selectedTrack].trackNumber) {
                    currentSimpleBlock.data = stream.getView(currentSimpleBlock.dataSize);

                    // calculate the timestamp in nanoseconds
                    currentSimpleBlock.absoluteTimeCodeNs = currentSimpleBlock.relativeTimeCode
                            + this.timecode;
                    currentSimpleBlock.absoluteTimeCodeNs *= segment.info.timecodeScale;

                    return currentSimpleBlock;
                }

                ensure(elem);
            }
            return null;
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parse,void parse(),"[73, 143]","{'A328': [(73, 118), (120, 143)], 'A294': [(119, 119)]}","{'A328': 0.9859154929577465, 'A294': 0.014084507042253521}",A328,,"    public void parse() throws IOException, NoSuchElementException {
        if (selectedTrack > -1) {
            return;
        }

        box = readBox(ATOM_FTYP);
        brands = parseFtyp(box);
        switch (brands[0]) {
            case BRAND_DASH:
            case BRAND_ISO5:// ¿why not?
                break;
            default:
                throw new NoSuchElementException(
                        ""Not a MPEG-4 DASH container, major brand is not 'dash' or 'iso5' is ""
                                + boxName(brands[0])
                );
        }

        Moov moov = null;
        int i;

        while (box.type != ATOM_MOOF) {
            ensure(box);
            box = readBox();

            switch (box.type) {
                case ATOM_MOOV:
                    moov = parseMoov(box);
                    break;
                case ATOM_SIDX:
                case ATOM_MFRA:
                    break;
            }
        }

        if (moov == null) {
            throw new IOException(""The provided Mp4 doesn't have the 'moov' box"");
        }

        tracks = new Mp4Track[moov.trak.length];

        for (i = 0; i < tracks.length; i++) {
            tracks[i] = new Mp4Track();
            tracks[i].trak = moov.trak[i];

            if (moov.mvexTrex != null) {
                for (final Trex mvexTrex : moov.mvexTrex) {
                    if (tracks[i].trak.tkhd.trackId == mvexTrex.trackId) {
                        tracks[i].trex = mvexTrex;
                    }
                }
            }

            switch (moov.trak[i].mdia.hdlr.subType) {
                case HANDLER_VIDE:
                    tracks[i].kind = TrackKind.Video;
                    break;
                case HANDLER_SOUN:
                    tracks[i].kind = TrackKind.Audio;
                    break;
                case HANDLER_SUBT:
                    tracks[i].kind = TrackKind.Subtitles;
                    break;
                default:
                    tracks[i].kind = TrackKind.Other;
                    break;
            }
        }

        backupBox = box;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,selectTrack,Mp4Track selectTrack(int),"[145, 148]","{'A328': [(145, 148)]}",{'A328': 1.0},A328,,"    Mp4Track selectTrack(final int index) {
        selectedTrack = index;
        return tracks[index];
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,getBrands,int[] getBrands(),"[150, 155]","{'A328': [(150, 155)]}",{'A328': 1.0},A328,,"    public int[] getBrands() {
        if (brands == null) {
            throw new IllegalStateException(""Not parsed"");
        }
        return brands;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,rewind,void rewind(),"[157, 170]","{'A328': [(157, 170)]}",{'A328': 1.0},A328,,"    public void rewind() throws IOException {
        if (!stream.canRewind()) {
            throw new IOException(""The provided stream doesn't allow seek"");
        }
        if (box == null) {
            return;
        }

        box = backupBox;
        chunkZero = false;

        stream.rewind();
        stream.skipBytes(backupBox.offset + (DataReader.INTEGER_SIZE * 2));
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,getAvailableTracks,Mp4Track[] getAvailableTracks(),"[172, 174]","{'A328': [(172, 174)]}",{'A328': 1.0},A328,,"    public Mp4Track[] getAvailableTracks() {
        return tracks;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,getNextChunk,Mp4DashChunk getNextChunk(boolean),"[176, 251]","{'A328': [(176, 176), (178, 235), (237, 251)], 'A294': [(177, 177), (236, 236)]}","{'A328': 0.9736842105263158, 'A294': 0.02631578947368421}",A328,,"    public Mp4DashChunk getNextChunk(final boolean infoOnly) throws IOException {
        final Mp4Track track = tracks[selectedTrack];

        while (stream.available()) {

            if (chunkZero) {
                ensure(box);
                if (!stream.available()) {
                    break;
                }
                box = readBox();
            } else {
                chunkZero = true;
            }

            switch (box.type) {
                case ATOM_MOOF:
                    if (moof != null) {
                        throw new IOException(""moof found without mdat"");
                    }

                    moof = parseMoof(box, track.trak.tkhd.trackId);

                    if (moof.traf != null) {

                        if (hasFlag(moof.traf.trun.bFlags, 0x0001)) {
                            moof.traf.trun.dataOffset -= box.size + 8;
                            if (moof.traf.trun.dataOffset < 0) {
                                throw new IOException(""trun box has wrong data offset, ""
                                        + ""points outside of concurrent mdat box"");
                            }
                        }

                        if (moof.traf.trun.chunkSize < 1) {
                            if (hasFlag(moof.traf.tfhd.bFlags, 0x10)) {
                                moof.traf.trun.chunkSize = moof.traf.tfhd.defaultSampleSize
                                        * moof.traf.trun.entryCount;
                            } else {
                                moof.traf.trun.chunkSize = (int) (box.size - 8);
                            }
                        }
                        if (!hasFlag(moof.traf.trun.bFlags, 0x900)
                                && moof.traf.trun.chunkDuration == 0) {
                            if (hasFlag(moof.traf.tfhd.bFlags, 0x20)) {
                                moof.traf.trun.chunkDuration = moof.traf.tfhd.defaultSampleDuration
                                        * moof.traf.trun.entryCount;
                            }
                        }
                    }
                    break;
                case ATOM_MDAT:
                    if (moof == null) {
                        throw new IOException(""mdat found without moof"");
                    }

                    if (moof.traf == null) {
                        moof = null;
                        continue; // find another chunk
                    }

                    final Mp4DashChunk chunk = new Mp4DashChunk();
                    chunk.moof = moof;
                    if (!infoOnly) {
                        chunk.data = stream.getView(moof.traf.trun.chunkSize);
                    }

                    moof = null;

                    stream.skipBytes(chunk.moof.traf.trun.dataOffset);
                    return chunk;
                default:
            }
        }

        return null;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,hasFlag,"boolean hasFlag(int,int)","[253, 255]","{'A328': [(253, 255)]}",{'A328': 1.0},A328,,"    public static boolean hasFlag(final int flags, final int mask) {
        return (flags & mask) == mask;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,boxName,String boxName(Box),"[257, 259]","{'A328': [(257, 259)]}",{'A328': 1.0},A328,,"    private String boxName(final Box ref) {
        return boxName(ref.type);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,boxName,String boxName(int),"[261, 263]","{'A328': [(261, 261), (263, 263)], 'A299': [(262, 262)]}","{'A328': 0.6666666666666666, 'A299': 0.3333333333333333}",A328,,"    private String boxName(final int type) {
        return new String(ByteBuffer.allocate(4).putInt(type).array(), StandardCharsets.UTF_8);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,readBox,Box readBox(),"[265, 276]","{'A328': [(265, 265), (267, 276)], 'A294': [(266, 266)]}","{'A328': 0.9166666666666666, 'A294': 0.08333333333333333}",A328,,"    private Box readBox() throws IOException {
        final Box b = new Box();
        b.offset = stream.position();
        b.size = stream.readUnsignedInt();
        b.type = stream.readInt();

        if (b.size == 1) {
            b.size = stream.readLong();
        }

        return b;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,readBox,Box readBox(int),"[278, 285]","{'A328': [(278, 278), (280, 285)], 'A294': [(279, 279)]}","{'A328': 0.875, 'A294': 0.125}",A328,,"    private Box readBox(final int expected) throws IOException {
        final Box b = readBox();
        if (b.type != expected) {
            throw new NoSuchElementException(""expected "" + boxName(expected)
                    + "" found "" + boxName(b));
        }
        return b;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,readFullBox,byte[] readFullBox(Box),"[287, 303]","{'A328': [(287, 288), (290, 290), (292, 294), (296, 303)], 'A294': [(289, 289), (291, 291), (295, 295)]}","{'A328': 0.8235294117647058, 'A294': 0.17647058823529413}",A328,,"    private byte[] readFullBox(final Box ref) throws IOException {
        // full box reading is limited to 2 GiB, and should be enough
        final int size = (int) ref.size;

        final ByteBuffer buffer = ByteBuffer.allocate(size);
        buffer.putInt(size);
        buffer.putInt(ref.type);

        final int read = size - 8;

        if (stream.read(buffer.array(), 8, read) != read) {
            throw new EOFException(String.format(""EOF reached in box: type=%s offset=%s size=%s"",
                    boxName(ref.type), ref.offset, ref.size));
        }

        return buffer.array();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,ensure,void ensure(Box),"[305, 318]","{'A328': [(305, 305), (307, 318)], 'A294': [(306, 306)]}","{'A328': 0.9285714285714286, 'A294': 0.07142857142857142}",A328,,"    private void ensure(final Box ref) throws IOException {
        final long skip = ref.offset + ref.size - stream.position();

        if (skip == 0) {
            return;
        } else if (skip < 0) {
            throw new EOFException(String.format(
                    ""parser go beyond limits of the box. type=%s offset=%s size=%s position=%s"",
                    boxName(ref), ref.offset, ref.size, stream.position()
            ));
        }

        stream.skipBytes((int) skip);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,untilBox,Box untilBox(Box),"[320, 333]","{'A328': [(320, 323), (325, 333)], 'A294': [(324, 324)]}","{'A328': 0.9285714285714286, 'A294': 0.07142857142857142}",A328,,"    private Box untilBox(final Box ref, final int... expected) throws IOException {
        Box b;
        while (stream.position() < (ref.offset + ref.size)) {
            b = readBox();
            for (final int type : expected) {
                if (b.type == type) {
                    return b;
                }
            }
            ensure(b);
        }

        return null;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,untilAnyBox,Box untilAnyBox(Box),"[335, 341]","{'A328': [(335, 341)]}",{'A328': 1.0},A328,,"    private Box untilAnyBox(final Box ref) throws IOException {
        if (stream.position() >= (ref.offset + ref.size)) {
            return null;
        }

        return readBox();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMoof,"Moof parseMoof(Box,int)","[343, 360]","{'A328': [(343, 343), (345, 360)], 'A294': [(344, 344)]}","{'A328': 0.9444444444444444, 'A294': 0.05555555555555555}",A328,,"    private Moof parseMoof(final Box ref, final int trackId) throws IOException {
        final Moof obj = new Moof();

        Box b = readBox(ATOM_MFHD);
        obj.mfhdSequenceNumber = parseMfhd();
        ensure(b);

        while ((b = untilBox(ref, ATOM_TRAF)) != null) {
            obj.traf = parseTraf(b, trackId);
            ensure(b);

            if (obj.traf != null) {
                return obj;
            }
        }

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMfhd,int parseMfhd(),"[362, 368]","{'A328': [(362, 368)]}",{'A328': 1.0},A328,,"    private int parseMfhd() throws IOException {
        // version
        // flags
        stream.skipBytes(4);

        return stream.readInt();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTraf,"Traf parseTraf(Box,int)","[370, 393]","{'A328': [(370, 370), (372, 393)], 'A294': [(371, 371)]}","{'A328': 0.9583333333333334, 'A294': 0.041666666666666664}",A328,,"    private Traf parseTraf(final Box ref, final int trackId) throws IOException {
        final Traf traf = new Traf();

        Box b = readBox(ATOM_TFHD);
        traf.tfhd = parseTfhd(trackId);
        ensure(b);

        if (traf.tfhd == null) {
            return null;
        }

        b = untilBox(ref, ATOM_TRUN, ATOM_TFDT);

        if (b.type == ATOM_TFDT) {
            traf.tfdt = parseTfdt();
            ensure(b);
            b = readBox(ATOM_TRUN);
        }

        traf.trun = parseTrun();
        ensure(b);

        return traf;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTfhd,Tfhd parseTfhd(int),"[395, 422]","{'A328': [(395, 395), (397, 422)], 'A294': [(396, 396)]}","{'A328': 0.9642857142857143, 'A294': 0.03571428571428571}",A328,,"    private Tfhd parseTfhd(final int trackId) throws IOException {
        final Tfhd obj = new Tfhd();

        obj.bFlags = stream.readInt();
        obj.trackId = stream.readInt();

        if (trackId != -1 && obj.trackId != trackId) {
            return null;
        }

        if (hasFlag(obj.bFlags, 0x01)) {
            stream.skipBytes(8);
        }
        if (hasFlag(obj.bFlags, 0x02)) {
            stream.skipBytes(4);
        }
        if (hasFlag(obj.bFlags, 0x08)) {
            obj.defaultSampleDuration = stream.readInt();
        }
        if (hasFlag(obj.bFlags, 0x10)) {
            obj.defaultSampleSize = stream.readInt();
        }
        if (hasFlag(obj.bFlags, 0x20)) {
            obj.defaultSampleFlags = stream.readInt();
        }

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTfdt,long parseTfdt(),"[424, 428]","{'A328': [(424, 424), (426, 428)], 'A294': [(425, 425)]}","{'A328': 0.8, 'A294': 0.2}",A328,,"    private long parseTfdt() throws IOException {
        final int version = stream.read();
        stream.skipBytes(3); // flags
        return version == 0 ? stream.readUnsignedInt() : stream.readLong();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTrun,Trun parseTrun(),"[430, 475]","{'A328': [(430, 430), (432, 459), (461, 475)], 'A294': [(431, 431), (460, 460)]}","{'A328': 0.9565217391304348, 'A294': 0.043478260869565216}",A328,,"    private Trun parseTrun() throws IOException {
        final Trun obj = new Trun();
        obj.bFlags = stream.readInt();
        obj.entryCount = stream.readInt(); // unsigned int

        obj.entriesRowSize = 0;
        if (hasFlag(obj.bFlags, 0x0100)) {
            obj.entriesRowSize += 4;
        }
        if (hasFlag(obj.bFlags, 0x0200)) {
            obj.entriesRowSize += 4;
        }
        if (hasFlag(obj.bFlags, 0x0400)) {
            obj.entriesRowSize += 4;
        }
        if (hasFlag(obj.bFlags, 0x0800)) {
            obj.entriesRowSize += 4;
        }
        obj.bEntries = new byte[obj.entriesRowSize * obj.entryCount];

        if (hasFlag(obj.bFlags, 0x0001)) {
            obj.dataOffset = stream.readInt();
        }
        if (hasFlag(obj.bFlags, 0x0004)) {
            obj.bFirstSampleFlags = stream.readInt();
        }

        stream.read(obj.bEntries);

        for (int i = 0; i < obj.entryCount; i++) {
            final TrunEntry entry = obj.getEntry(i);
            if (hasFlag(obj.bFlags, 0x0100)) {
                obj.chunkDuration += entry.sampleDuration;
            }
            if (hasFlag(obj.bFlags, 0x0200)) {
                obj.chunkSize += entry.sampleSize;
            }
            if (hasFlag(obj.bFlags, 0x0800)) {
                if (!hasFlag(obj.bFlags, 0x0100)) {
                    obj.chunkDuration += entry.sampleCompositionTimeOffset;
                }
            }
        }

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseFtyp,int[] parseFtyp(Box),"[477, 490]","{'A328': [(477, 478), (480, 490)], 'A294': [(479, 479)]}","{'A328': 0.9285714285714286, 'A294': 0.07142857142857142}",A328,,"    private int[] parseFtyp(final Box ref) throws IOException {
        int i = 0;
        final int[] list = new int[(int) ((ref.offset + ref.size - stream.position() - 4) / 4)];

        list[i++] = stream.readInt(); // major brand

        stream.skipBytes(4); // minor version

        for (; i < list.length; i++) {
            list[i] = stream.readInt(); // compatible brands
        }

        return list;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMvhd,Mvhd parseMvhd(),"[492, 516]","{'A328': [(492, 492), (494, 499), (501, 516)], 'A294': [(493, 493), (500, 500)]}","{'A328': 0.92, 'A294': 0.08}",A328,,"    private Mvhd parseMvhd() throws IOException {
        final int version = stream.read();
        stream.skipBytes(3); // flags

        // creation entries_time
        // modification entries_time
        stream.skipBytes(2 * (version == 0 ? 4 : 8));

        final Mvhd obj = new Mvhd();
        obj.timeScale = stream.readUnsignedInt();

        // chunkDuration
        stream.skipBytes(version == 0 ? 4 : 8);

        // rate
        // volume
        // reserved
        // matrix array
        // predefined
        stream.skipBytes(76);

        obj.nextTrackId = stream.readUnsignedInt();

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTkhd,Tkhd parseTkhd(),"[518, 549]","{'A328': [(518, 518), (520, 520), (522, 549)], 'A294': [(519, 519), (521, 521)]}","{'A328': 0.9375, 'A294': 0.0625}",A328,,"    private Tkhd parseTkhd() throws IOException {
        final int version = stream.read();

        final Tkhd obj = new Tkhd();

        // flags
        // creation entries_time
        // modification entries_time
        stream.skipBytes(3 + (2 * (version == 0 ? 4 : 8)));

        obj.trackId = stream.readInt();

        stream.skipBytes(4); // reserved

        obj.duration = version == 0 ? stream.readUnsignedInt() : stream.readLong();

        stream.skipBytes(2 * 4); // reserved

        obj.bLayer = stream.readShort();
        obj.bAlternateGroup = stream.readShort();
        obj.bVolume = stream.readShort();

        stream.skipBytes(2); // reserved

        obj.matrix = new byte[9 * 4];
        stream.read(obj.matrix);

        obj.bWidth = stream.readInt();
        obj.bHeight = stream.readInt();

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTrak,Trak parseTrak(Box),"[551, 572]","{'A328': [(551, 551), (553, 572)], 'A294': [(552, 552)]}","{'A328': 0.9545454545454546, 'A294': 0.045454545454545456}",A328,,"    private Trak parseTrak(final Box ref) throws IOException {
        final Trak trak = new Trak();

        Box b = readBox(ATOM_TKHD);
        trak.tkhd = parseTkhd();
        ensure(b);

        while ((b = untilBox(ref, ATOM_MDIA, ATOM_EDTS)) != null) {
            switch (b.type) {
                case ATOM_MDIA:
                    trak.mdia = parseMdia(b);
                    break;
                case ATOM_EDTS:
                    trak.edstElst = parseEdts(b);
                    break;
            }

            ensure(b);
        }

        return trak;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMdia,Mdia parseMdia(Box),"[574, 600]","{'A328': [(574, 574), (576, 583), (586, 600)], 'A294': [(575, 575), (584, 585)]}","{'A328': 0.8888888888888888, 'A294': 0.1111111111111111}",A328,,"    private Mdia parseMdia(final Box ref) throws IOException {
        final Mdia obj = new Mdia();

        Box b;
        while ((b = untilBox(ref, ATOM_MDHD, ATOM_HDLR, ATOM_MINF)) != null) {
            switch (b.type) {
                case ATOM_MDHD:
                    obj.mdhd = readFullBox(b);

                    // read time scale
                    final ByteBuffer buffer = ByteBuffer.wrap(obj.mdhd);
                    final byte version = buffer.get(8);
                    buffer.position(12 + ((version == 0 ? 4 : 8) * 2));
                    obj.mdhdTimeScale = buffer.getInt();
                    break;
                case ATOM_HDLR:
                    obj.hdlr = parseHdlr(b);
                    break;
                case ATOM_MINF:
                    obj.minf = parseMinf(b);
                    break;
            }
            ensure(b);
        }

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseHdlr,Hdlr parseHdlr(Box),"[602, 618]","{'A328': [(602, 606), (608, 618)], 'A294': [(607, 607)]}","{'A328': 0.9411764705882353, 'A294': 0.058823529411764705}",A328,,"    private Hdlr parseHdlr(final Box ref) throws IOException {
        // version
        // flags
        stream.skipBytes(4);

        final Hdlr obj = new Hdlr();
        obj.bReserved = new byte[12];

        obj.type = stream.readInt();
        obj.subType = stream.readInt();
        stream.read(obj.bReserved);

        // component name (is a ansi/ascii string)
        stream.skipBytes((ref.offset + ref.size) - stream.position());

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMoov,Moov parseMoov(Box),"[620, 644]","{'A328': [(620, 621), (623, 625), (627, 644)], 'A294': [(622, 622), (626, 626)]}","{'A328': 0.92, 'A294': 0.08}",A328,,"    private Moov parseMoov(final Box ref) throws IOException {
        Box b = readBox(ATOM_MVHD);
        final Moov moov = new Moov();
        moov.mvhd = parseMvhd();
        ensure(b);

        final ArrayList<Trak> tmp = new ArrayList<>((int) moov.mvhd.nextTrackId);
        while ((b = untilBox(ref, ATOM_TRAK, ATOM_MVEX)) != null) {

            switch (b.type) {
                case ATOM_TRAK:
                    tmp.add(parseTrak(b));
                    break;
                case ATOM_MVEX:
                    moov.mvexTrex = parseMvex(b, (int) moov.mvhd.nextTrackId);
                    break;
            }

            ensure(b);
        }

        moov.trak = tmp.toArray(new Trak[0]);

        return moov;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMvex,"Trex[] parseMvex(Box,int)","[646, 656]","{'A328': [(646, 646), (648, 656)], 'A294': [(647, 647)]}","{'A328': 0.9090909090909091, 'A294': 0.09090909090909091}",A328,,"    private Trex[] parseMvex(final Box ref, final int possibleTrackCount) throws IOException {
        final ArrayList<Trex> tmp = new ArrayList<>(possibleTrackCount);

        Box b;
        while ((b = untilBox(ref, ATOM_TREX)) != null) {
            tmp.add(parseTrex());
            ensure(b);
        }

        return tmp.toArray(new Trex[0]);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseTrex,Trex parseTrex(),"[658, 671]","{'A328': [(658, 662), (664, 671)], 'A294': [(663, 663)]}","{'A328': 0.9285714285714286, 'A294': 0.07142857142857142}",A328,,"    private Trex parseTrex() throws IOException {
        // version
        // flags
        stream.skipBytes(4);

        final Trex obj = new Trex();
        obj.trackId = stream.readInt();
        obj.defaultSampleDescriptionIndex = stream.readInt();
        obj.defaultSampleDuration = stream.readInt();
        obj.defaultSampleSize = stream.readInt();
        obj.defaultSampleFlags = stream.readInt();

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseEdts,Elst parseEdts(Box),"[673, 703]","{'A328': [(673, 673), (675, 678), (680, 680), (682, 683), (685, 703)], 'A294': [(674, 674), (679, 679), (681, 681), (684, 684)]}","{'A328': 0.8709677419354839, 'A294': 0.12903225806451613}",A328,,"    private Elst parseEdts(final Box ref) throws IOException {
        final Box b = untilBox(ref, ATOM_ELST);
        if (b == null) {
            return null;
        }

        final Elst obj = new Elst();

        final boolean v1 = stream.read() == 1;
        stream.skipBytes(3); // flags

        final int entryCount = stream.readInt();
        if (entryCount < 1) {
            obj.bMediaRate = 0x00010000; // default media rate (1.0)
            return obj;
        }

        if (v1) {
            stream.skipBytes(DataReader.LONG_SIZE); // segment duration
            obj.mediaTime = stream.readLong();
            // ignore all remain entries
            stream.skipBytes((entryCount - 1) * (DataReader.LONG_SIZE * 2));
        } else {
            stream.skipBytes(DataReader.INTEGER_SIZE); // segment duration
            obj.mediaTime = stream.readInt();
        }

        obj.bMediaRate = stream.readInt();

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseMinf,Minf parseMinf(Box),"[705, 728]","{'A328': [(705, 705), (707, 728)], 'A294': [(706, 706)]}","{'A328': 0.9583333333333334, 'A294': 0.041666666666666664}",A328,,"    private Minf parseMinf(final Box ref) throws IOException {
        final Minf obj = new Minf();

        Box b;
        while ((b = untilAnyBox(ref)) != null) {

            switch (b.type) {
                case ATOM_DINF:
                    obj.dinf = readFullBox(b);
                    break;
                case ATOM_STBL:
                    obj.stblStsd = parseStbl(b);
                    break;
                case ATOM_VMHD:
                case ATOM_SMHD:
                    obj.mhd = readFullBox(b);
                    break;

            }
            ensure(b);
        }

        return obj;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader,parseStbl,byte[] parseStbl(Box),"[736, 744]","{'A328': [(736, 736), (738, 744)], 'A294': [(737, 737)]}","{'A328': 0.8888888888888888, 'A294': 0.1111111111111111}",A328,,"    private byte[] parseStbl(final Box ref) throws IOException {
        final Box b = untilBox(ref, ATOM_STSD);

        if (b == null) {
            return new byte[0]; // this never should happens (missing codec startup data)
        }

        return readFullBox(b);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader.Trun,getEntry,TrunEntry getEntry(int),"[794, 815]","{'A328': [(794, 794), (797, 815)], 'A294': [(795, 796)]}","{'A328': 0.9090909090909091, 'A294': 0.09090909090909091}",A328,,"        public TrunEntry getEntry(final int i) {
            final ByteBuffer buffer = ByteBuffer.wrap(bEntries, i * entriesRowSize, entriesRowSize);
            final TrunEntry entry = new TrunEntry();

            if (hasFlag(bFlags, 0x0100)) {
                entry.sampleDuration = buffer.getInt();
            }
            if (hasFlag(bFlags, 0x0200)) {
                entry.sampleSize = buffer.getInt();
            }
            if (hasFlag(bFlags, 0x0400)) {
                entry.sampleFlags = buffer.getInt();
            }
            if (hasFlag(bFlags, 0x0800)) {
                entry.sampleCompositionTimeOffset = buffer.getInt();
            }

            entry.hasCompositionTimeOffset = hasFlag(bFlags, 0x0800);
            entry.isKeyframe = !hasFlag(entry.sampleFlags, 0x10000);

            return entry;
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader.Trun,getAbsoluteEntry,"TrunEntry getAbsoluteEntry(int,Tfhd)","[817, 837]","{'A328': [(817, 817), (819, 837)], 'A294': [(818, 818)]}","{'A328': 0.9523809523809523, 'A294': 0.047619047619047616}",A328,,"        public TrunEntry getAbsoluteEntry(final int i, final Tfhd header) {
            final TrunEntry entry = getEntry(i);

            if (!hasFlag(bFlags, 0x0100) && hasFlag(header.bFlags, 0x20)) {
                entry.sampleFlags = header.defaultSampleFlags;
            }

            if (!hasFlag(bFlags, 0x0200) && hasFlag(header.bFlags, 0x10)) {
                entry.sampleSize = header.defaultSampleSize;
            }

            if (!hasFlag(bFlags, 0x0100) && hasFlag(header.bFlags, 0x08)) {
                entry.sampleDuration = header.defaultSampleDuration;
            }

            if (i == 0 && hasFlag(bFlags, 0x0004)) {
                entry.sampleFlags = bFirstSampleFlags;
            }

            return entry;
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader.Mp4DashChunk,getNextSampleInfo,TrunEntry getNextSampleInfo(),"[912, 917]","{'A328': [(912, 917)]}",{'A328': 1.0},A328,,"        public TrunEntry getNextSampleInfo() {
            if (i >= moof.traf.trun.entryCount) {
                return null;
            }
            return moof.traf.trun.getAbsoluteEntry(i++, moof.traf.tfhd);
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4DashReader.java,Mp4DashReader.Mp4DashChunk,getNextSample,Mp4DashSample getNextSample(),"[919, 936]","{'A328': [(919, 926), (928, 936)], 'A294': [(927, 927)]}","{'A328': 0.9444444444444444, 'A294': 0.05555555555555555}",A328,,"        public Mp4DashSample getNextSample() throws IOException {
            if (data == null) {
                throw new IllegalStateException(""This chunk has info only"");
            }
            if (i >= moof.traf.trun.entryCount) {
                return null;
            }

            final Mp4DashSample sample = new Mp4DashSample();
            sample.info = moof.traf.trun.getAbsoluteEntry(i++, moof.traf.tfhd);
            sample.data = new byte[sample.info.sampleSize];

            if (data.read(sample.data) != sample.info.sampleSize) {
                throw new EOFException(""EOF reached while reading a sample"");
            }

            return sample;
        }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java,SrtFromTtmlWriter,getTimestamp,"String getTimestamp(Element,String)","[34, 38]","{'A328': [(35, 36), (38, 38)], 'A294': [(34, 34), (37, 37)]}","{'A328': 0.6, 'A294': 0.4}",A328,,"    private static String getTimestamp(final Element frame, final String attr) {
        return frame
                .attr(attr)
                .replace('.', ','); // SRT subtitles uses comma as decimal separator
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java,SrtFromTtmlWriter,writeFrame,"void writeFrame(String,String,StringBuilder)","[40, 51]","{'A328': [(42, 51)], 'A294': [(40, 41)]}","{'A328': 0.8333333333333334, 'A294': 0.16666666666666666}",A328,,"    private void writeFrame(final String begin, final String end, final StringBuilder text)
            throws IOException {
        writeString(String.valueOf(frameIndex++));
        writeString(NEW_LINE);
        writeString(begin);
        writeString("" --> "");
        writeString(end);
        writeString(NEW_LINE);
        writeString(text.toString());
        writeString(NEW_LINE);
        writeString(NEW_LINE);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java,SrtFromTtmlWriter,writeString,void writeString(String),"[53, 55]","{'A328': [(54, 55)], 'A294': [(53, 53)]}","{'A328': 0.6666666666666666, 'A294': 0.3333333333333333}",A328,,"    private void writeString(final String text) throws IOException {
        out.write(text.getBytes(charset));
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java,SrtFromTtmlWriter,build,void build(SharpStream),"[57, 102]","{'A328': [(58, 67), (69, 69), (72, 72), (75, 76), (80, 80), (82, 83), (86, 86), (89, 89), (91, 92), (96, 96), (99, 102)], 'A294': [(57, 57), (68, 68), (70, 71), (73, 74), (77, 79), (81, 81), (84, 85), (87, 88), (90, 90), (93, 95), (97, 98)]}","{'A328': 0.5652173913043478, 'A294': 0.43478260869565216}",A328,,"    public void build(final SharpStream ttml) throws IOException {
        /*
         * TTML parser with BASIC support
         * multiple CUE is not supported
         * styling is not supported
         * tag timestamps (in auto-generated subtitles) are not supported, maybe in the future
         * also TimestampTagOption enum is not applicable
         * Language parsing is not supported
         */

        // parse XML
        final byte[] buffer = new byte[(int) ttml.available()];
        ttml.read(buffer);
        final Document doc = Jsoup.parse(new ByteArrayInputStream(buffer), ""UTF-8"", """",
                Parser.xmlParser());

        final StringBuilder text = new StringBuilder(128);
        final Elements paragraphList = doc.select(""body > div > p"");

        // check if has frames
        if (paragraphList.size() < 1) {
            return;
        }

        for (final Element paragraph : paragraphList) {
            text.setLength(0);

            for (final Node children : paragraph.childNodes()) {
                if (children instanceof TextNode) {
                    text.append(((TextNode) children).text());
                } else if (children instanceof Element
                        && ((Element) children).tagName().equalsIgnoreCase(""br"")) {
                    text.append(NEW_LINE);
                }
            }

            if (ignoreEmptyFrames && text.length() < 1) {
                continue;
            }

            final String begin = getTimestamp(paragraph, ""begin"");
            final String end = getTimestamp(paragraph, ""end"");

            writeFrame(begin, end, text);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,isDone,boolean isDone(),"[72, 74]","{'A298': [(72, 74)]}",{'A298': 1.0},A298,,"    public boolean isDone() {
        return done;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,isParsed,boolean isParsed(),"[76, 78]","{'A298': [(76, 78)]}",{'A298': 1.0},A298,,"    public boolean isParsed() {
        return parsed;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,getTracksFromSource,WebMTrack[] getTracksFromSource(),"[80, 86]","{'A298': [(80, 86)]}",{'A298': 1.0},A298,,"    public WebMTrack[] getTracksFromSource() throws IllegalStateException {
        if (!parsed) {
            throw new IllegalStateException(""source must be parsed first"");
        }

        return webm.getAvailableTracks();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,parseSource,void parseSource(),"[88, 103]","{'A298': [(88, 103)]}",{'A298': 1.0},A298,,"    public void parseSource() throws IOException, IllegalStateException {
        if (done) {
            throw new IllegalStateException(""already done"");
        }
        if (parsed) {
            throw new IllegalStateException(""already parsed"");
        }

        try {
            webm = new WebMReader(source);
            webm.parse();
            webmSegment = webm.getNextSegment();
        } finally {
            parsed = true;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,selectTrack,void selectTrack(int),"[105, 129]","{'A298': [(105, 129)]}",{'A298': 1.0},A298,,"    public void selectTrack(final int trackIndex) throws IOException {
        if (!parsed) {
            throw new IllegalStateException(""source must be parsed first"");
        }
        if (done) {
            throw new IOException(""already done"");
        }
        if (webmTrack != null) {
            throw new IOException(""tracks already selected"");
        }

        switch (webm.getAvailableTracks()[trackIndex].kind) {
            case Audio:
            case Video:
                break;
            default:
                throw new UnsupportedOperationException(""the track must an audio or video stream"");
        }

        try {
            webmTrack = webm.selectTrack(trackIndex);
        } finally {
            parsed = true;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,close,void close(),"[131, 145]","{'A298': [(131, 145)]}",{'A298': 1.0},A298,,"    @Override
    public void close() throws IOException {
        done = true;
        parsed = true;

        webmTrack = null;
        webm = null;

        if (!output.isClosed()) {
            output.flush();
        }

        source.close();
        output.close();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,build,void build(),"[147, 237]","{'A298': [(147, 237)]}",{'A298': 1.0},A298,,"    public void build() throws IOException {
        final float resolution;
        SimpleBlock bloq;
        final ByteBuffer header = ByteBuffer.allocate(27 + (255 * 255));
        final ByteBuffer page = ByteBuffer.allocate(64 * 1024);

        header.order(ByteOrder.LITTLE_ENDIAN);

        /* step 1: get the amount of frames per seconds */
        switch (webmTrack.kind) {
            case Audio:
                resolution = getSampleFrequencyFromTrack(webmTrack.bMetadata);
                if (resolution == 0f) {
                    throw new RuntimeException(""cannot get the audio sample rate"");
                }
                break;
            case Video:
                // WARNING: untested
                if (webmTrack.defaultDuration == 0) {
                    throw new RuntimeException(""missing default frame time"");
                }
                resolution = 1000f / ((float) webmTrack.defaultDuration
                        / webmSegment.info.timecodeScale);
                break;
            default:
                throw new RuntimeException(""not implemented"");
        }

        /* step 2: create packet with code init data */
        if (webmTrack.codecPrivate != null) {
            addPacketSegment(webmTrack.codecPrivate.length);
            makePacketheader(0x00, header, webmTrack.codecPrivate);
            write(header);
            output.write(webmTrack.codecPrivate);
        }

        /* step 3: create packet with metadata */
        final byte[] buffer = makeMetadata();
        if (buffer != null) {
            addPacketSegment(buffer.length);
            makePacketheader(0x00, header, buffer);
            write(header);
            output.write(buffer);
        }

        /* step 4: calculate amount of packets */
        while (webmSegment != null) {
            bloq = getNextBlock();

            if (bloq != null && addPacketSegment(bloq)) {
                final int pos = page.position();
                //noinspection ResultOfMethodCallIgnored
                bloq.data.read(page.array(), pos, bloq.dataSize);
                page.position(pos + bloq.dataSize);
                continue;
            }

            // calculate the current packet duration using the next block
            double elapsedNs = webmTrack.codecDelay;

            if (bloq == null) {
                packetFlag = FLAG_LAST; // note: if the flag is FLAG_CONTINUED, is changed
                elapsedNs += webmBlockLastTimecode;

                if (webmTrack.defaultDuration > 0) {
                    elapsedNs += webmTrack.defaultDuration;
                } else {
                    // hardcoded way, guess the sample duration
                    elapsedNs += webmBlockNearDuration;
                }
            } else {
                elapsedNs += bloq.absoluteTimeCodeNs;
            }

            // get the sample count in the page
            elapsedNs = elapsedNs / TIME_SCALE_NS;
            elapsedNs = Math.ceil(elapsedNs * resolution);

            // create header and calculate page checksum
            int checksum = makePacketheader((long) elapsedNs, header, null);
            checksum = calcCrc32(checksum, page.array(), page.position());

            header.putInt(HEADER_CHECKSUM_OFFSET, checksum);

            // dump data
            write(header);
            write(page);

            webmBlock = bloq;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,makePacketheader,"int makePacketheader(long,ByteBuffer,byte[])","[239, 270]","{'A298': [(239, 270)]}",{'A298': 1.0},A298,,"    private int makePacketheader(final long granPos, @NonNull final ByteBuffer buffer,
                                 final byte[] immediatePage) {
        short length = HEADER_SIZE;

        buffer.putInt(0x5367674f); // ""OggS"" binary string in little-endian
        buffer.put((byte) 0x00); // version
        buffer.put(packetFlag); // type

        buffer.putLong(granPos); // granulate position

        buffer.putInt(streamId); // bitstream serial number
        buffer.putInt(sequenceCount++); // page sequence number

        buffer.putInt(0x00); // page checksum

        buffer.put((byte) segmentTableSize); // segment table
        buffer.put(segmentTable, 0, segmentTableSize); // segment size

        length += segmentTableSize;

        clearSegmentTable(); // clear segment table for next header

        int checksumCrc32 = calcCrc32(0x00, buffer.array(), length);

        if (immediatePage != null) {
            checksumCrc32 = calcCrc32(checksumCrc32, immediatePage, immediatePage.length);
            buffer.putInt(HEADER_CHECKSUM_OFFSET, checksumCrc32);
            segmentTableNextTimestamp -= TIME_SCALE_NS;
        }

        return checksumCrc32;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,makeMetadata,byte[] makeMetadata(),"[272, 291]","{'A298': [(272, 291)]}",{'A298': 1.0},A298,,"    @Nullable
    private byte[] makeMetadata() {
        if (""A_OPUS"".equals(webmTrack.codecId)) {
            return new byte[]{
                    0x4F, 0x70, 0x75, 0x73, 0x54, 0x61, 0x67, 0x73, // ""OpusTags"" binary string
                    0x00, 0x00, 0x00, 0x00, // writing application string size (not present)
                    0x00, 0x00, 0x00, 0x00 // additional tags count (zero means no tags)
            };
        } else if (""A_VORBIS"".equals(webmTrack.codecId)) {
            return new byte[]{
                    0x03, // ¿¿¿???
                    0x76, 0x6f, 0x72, 0x62, 0x69, 0x73, // ""vorbis"" binary string
                    0x00, 0x00, 0x00, 0x00, // writing application string size (not present)
                    0x00, 0x00, 0x00, 0x00 // additional tags count (zero means no tags)
            };
        }

        // not implemented for the desired codec
        return null;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,write,void write(ByteBuffer),"[293, 296]","{'A298': [(293, 296)]}",{'A298': 1.0},A298,,"    private void write(final ByteBuffer buffer) throws IOException {
        output.write(buffer.array(), 0, buffer.position());
        buffer.position(0);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,getNextBlock,SimpleBlock getNextBlock(),"[298, 333]","{'A298': [(298, 333)]}",{'A298': 1.0},A298,,"    @Nullable
    private SimpleBlock getNextBlock() throws IOException {
        SimpleBlock res;

        if (webmBlock != null) {
            res = webmBlock;
            webmBlock = null;
            return res;
        }

        if (webmSegment == null) {
            webmSegment = webm.getNextSegment();
            if (webmSegment == null) {
                return null; // no more blocks in the selected track
            }
        }

        if (webmCluster == null) {
            webmCluster = webmSegment.getNextCluster();
            if (webmCluster == null) {
                webmSegment = null;
                return getNextBlock();
            }
        }

        res = webmCluster.getNextSimpleBlock();
        if (res == null) {
            webmCluster = null;
            return getNextBlock();
        }

        webmBlockNearDuration = res.absoluteTimeCodeNs - webmBlockLastTimecode;
        webmBlockLastTimecode = res.absoluteTimeCodeNs;

        return res;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,getSampleFrequencyFromTrack,float getSampleFrequencyFromTrack(byte[]),"[335, 347]","{'A298': [(335, 347)]}",{'A298': 1.0},A298,,"    private float getSampleFrequencyFromTrack(final byte[] bMetadata) {
        // hardcoded way
        final ByteBuffer buffer = ByteBuffer.wrap(bMetadata);

        while (buffer.remaining() >= 6) {
            final int id = buffer.getShort() & 0xFFFF;
            if (id == 0x0000B584) {
                return buffer.getFloat();
            }
        }

        return 0.0f;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,clearSegmentTable,void clearSegmentTable(),"[349, 353]","{'A298': [(349, 353)]}",{'A298': 1.0},A298,,"    private void clearSegmentTable() {
        segmentTableNextTimestamp += TIME_SCALE_NS;
        packetFlag = FLAG_UNSET;
        segmentTableSize = 0;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,addPacketSegment,boolean addPacketSegment(SimpleBlock),"[355, 363]","{'A298': [(355, 363)]}",{'A298': 1.0},A298,,"    private boolean addPacketSegment(final SimpleBlock block) {
        final long timestamp = block.absoluteTimeCodeNs + webmTrack.codecDelay;

        if (timestamp >= segmentTableNextTimestamp) {
            return false;
        }

        return addPacketSegment(block.dataSize);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,addPacketSegment,boolean addPacketSegment(int),"[365, 393]","{'A298': [(365, 393)]}",{'A298': 1.0},A298,,"    private boolean addPacketSegment(final int size) {
        if (size > 65025) {
            throw new UnsupportedOperationException(""page size cannot be larger than 65025"");
        }

        int available = (segmentTable.length - segmentTableSize) * 255;
        final boolean extra = (size % 255) == 0;

        if (extra) {
            // add a zero byte entry in the table
            // required to indicate the sample size is multiple of 255
            available -= 255;
        }

        // check if possible add the segment, without overflow the table
        if (available < size) {
            return false; // not enough space on the page
        }

        for (int seg = size; seg > 0; seg -= 255) {
            segmentTable[segmentTableSize++] = (byte) Math.min(seg, 255);
        }

        if (extra) {
            segmentTable[segmentTableSize++] = 0x00;
        }

        return true;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,populateCrc32Table,void populateCrc32Table(),"[395, 405]","{'A298': [(395, 405)]}",{'A298': 1.0},A298,,"    private void populateCrc32Table() {
        for (int i = 0; i < 0x100; i++) {
            int crc = i << 24;
            for (int j = 0; j < 8; j++) {
                final long b = crc >>> 31;
                crc <<= 1;
                crc ^= (int) (0x100000000L - b) & 0x04c11db7;
            }
            crc32Table[i] = crc;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/OggFromWebMWriter.java,OggFromWebMWriter,calcCrc32,"int calcCrc32(int,byte[],int)","[407, 415]","{'A298': [(407, 415)]}",{'A298': 1.0},A298,,"    private int calcCrc32(final int initialCrc, final byte[] buffer, final int size) {
        int crc = initialCrc;
        for (int i = 0; i < size; i++) {
            final int reg = (crc >>> 24) & 0xff;
            crc = (crc << 8) ^ crc32Table[reg ^ (buffer[i] & 0xff)];
        }

        return crc;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,position,long position(),"[31, 33]","{'A328': [(31, 33)]}",{'A328': 1.0},A328,,"    public long position() {
        return position;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,read,int read(),"[35, 44]","{'A328': [(35, 44)]}",{'A328': 1.0},A328,,"    public int read() throws IOException {
        if (fillBuffer()) {
            return -1;
        }

        position++;
        readCount--;

        return readBuffer[readOffset++] & 0xFF;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,skipBytes,long skipBytes(long),"[46, 65]","{'A328': [(46, 65)]}",{'A328': 1.0},A328,,"    public long skipBytes(final long byteAmount) throws IOException {
        long amount = byteAmount;
        if (readCount < 0) {
            return 0;
        } else if (readCount == 0) {
            amount = stream.skip(amount);
        } else {
            if (readCount > amount) {
                readCount -= (int) amount;
                readOffset += (int) amount;
            } else {
                amount = readCount + stream.skip(amount - readCount);
                readCount = 0;
                readOffset = readBuffer.length;
            }
        }

        position += amount;
        return amount;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,readInt,int readInt(),"[67, 70]","{'A328': [(67, 70)]}",{'A328': 1.0},A328,,"    public int readInt() throws IOException {
        primitiveRead(INTEGER_SIZE);
        return primitive[0] << 24 | primitive[1] << 16 | primitive[2] << 8 | primitive[3];
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,readUnsignedInt,long readUnsignedInt(),"[72, 75]","{'A328': [(72, 72), (74, 75)], 'A294': [(73, 73)]}","{'A328': 0.75, 'A294': 0.25}",A328,,"    public long readUnsignedInt()  throws IOException {
        final long value = readInt();
        return value & 0xffffffffL;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,readShort,short readShort(),"[78, 81]","{'A328': [(78, 81)]}",{'A328': 1.0},A328,,"    public short readShort() throws IOException {
        primitiveRead(SHORT_SIZE);
        return (short) (primitive[0] << 8 | primitive[1]);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,readLong,long readLong(),"[83, 89]","{'A328': [(83, 84), (88, 89)], 'A294': [(87, 87)], 'A300': [(85, 86)]}","{'A328': 0.5714285714285714, 'A294': 0.14285714285714285, 'A300': 0.2857142857142857}",A328,,"    public long readLong() throws IOException {
        primitiveRead(LONG_SIZE);
        final long high =
                primitive[0] << 24 | primitive[1] << 16 | primitive[2] << 8 | primitive[3];
        final long low = primitive[4] << 24 | primitive[5] << 16 | primitive[6] << 8 | primitive[7];
        return high << 32 | low;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,read,int read(byte[]),"[91, 93]","{'A328': [(92, 93)], 'A294': [(91, 91)]}","{'A328': 0.6666666666666666, 'A294': 0.3333333333333333}",A328,,"    public int read(final byte[] buffer) throws IOException {
        return read(buffer, 0, buffer.length);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,read,"int read(byte[],int,int)","[95, 133]","{'A328': [(95, 117), (119, 133)], 'A294': [(118, 118)]}","{'A328': 0.9743589743589743, 'A294': 0.02564102564102564}",A328,,"    public int read(final byte[] buffer, final int off, final int c) throws IOException {
        int offset = off;
        int count = c;

        if (readCount < 0) {
            return -1;
        }
        int total = 0;

        if (count >= readBuffer.length) {
            if (readCount > 0) {
                System.arraycopy(readBuffer, readOffset, buffer, offset, readCount);
                readOffset += readCount;

                offset += readCount;
                count -= readCount;

                total = readCount;
                readCount = 0;
            }
            total += Math.max(stream.read(buffer, offset, count), 0);
        } else {
            while (count > 0 && !fillBuffer()) {
                final int read = Math.min(readCount, count);
                System.arraycopy(readBuffer, readOffset, buffer, offset, read);

                readOffset += read;
                readCount -= read;

                offset += read;
                count -= read;

                total += read;
            }
        }

        position += total;
        return total;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,available,boolean available(),"[135, 137]","{'A328': [(135, 137)]}",{'A328': 1.0},A328,,"    public boolean available() {
        return readCount > 0 || stream.available() > 0;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,rewind,void rewind(),"[139, 151]","{'A328': [(139, 151)]}",{'A328': 1.0},A328,,"    public void rewind() throws IOException {
        stream.rewind();

        if ((position - viewSize) > 0) {
            viewSize = 0; // drop view
        } else {
            viewSize += position;
        }

        position = 0;
        readOffset = readBuffer.length;
        readCount = 0;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,canRewind,boolean canRewind(),"[153, 155]","{'A328': [(153, 155)]}",{'A328': 1.0},A328,,"    public boolean canRewind() {
        return stream.canRewind();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,getView,InputStream getView(int),"[165, 229]","{'A328': [(165, 172), (174, 191), (193, 202), (204, 229)], 'A294': [(173, 173), (192, 192), (203, 203)]}","{'A328': 0.9538461538461539, 'A294': 0.046153846153846156}",A328,,"    public InputStream getView(final int size) {
        if (view == null) {
            view = new InputStream() {
                @Override
                public int read() throws IOException {
                    if (viewSize < 1) {
                        return -1;
                    }
                    final int res = DataReader.this.read();
                    if (res > 0) {
                        viewSize--;
                    }
                    return res;
                }

                @Override
                public int read(final byte[] buffer) throws IOException {
                    return read(buffer, 0, buffer.length);
                }

                @Override
                public int read(final byte[] buffer, final int offset, final int count)
                        throws IOException {
                    if (viewSize < 1) {
                        return -1;
                    }

                    final int res = DataReader.this.read(buffer, offset, Math.min(viewSize, count));
                    viewSize -= res;

                    return res;
                }

                @Override
                public long skip(final long amount) throws IOException {
                    if (viewSize < 1) {
                        return 0;
                    }
                    final int res = (int) DataReader.this.skipBytes(Math.min(amount, viewSize));
                    viewSize -= res;

                    return res;
                }

                @Override
                public int available() {
                    return viewSize;
                }

                @Override
                public void close() {
                    viewSize = 0;
                }

                @Override
                public boolean markSupported() {
                    return false;
                }

            };
        }
        viewSize = size;

        return view;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,read,int read(),"[168, 178]","{'A328': [(168, 172), (174, 178)], 'A294': [(173, 173)]}","{'A328': 0.9090909090909091, 'A294': 0.09090909090909091}",A328,,"                @Override
                public int read() throws IOException {
                    if (viewSize < 1) {
                        return -1;
                    }
                    final int res = DataReader.this.read();
                    if (res > 0) {
                        viewSize--;
                    }
                    return res;
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,read,int read(byte[]),"[180, 183]","{'A328': [(180, 183)]}",{'A328': 1.0},A328,,"                @Override
                public int read(final byte[] buffer) throws IOException {
                    return read(buffer, 0, buffer.length);
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,read,"int read(byte[],int,int)","[185, 196]","{'A328': [(185, 191), (193, 196)], 'A294': [(192, 192)]}","{'A328': 0.9166666666666666, 'A294': 0.08333333333333333}",A328,,"                @Override
                public int read(final byte[] buffer, final int offset, final int count)
                        throws IOException {
                    if (viewSize < 1) {
                        return -1;
                    }

                    final int res = DataReader.this.read(buffer, offset, Math.min(viewSize, count));
                    viewSize -= res;

                    return res;
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,skip,long skip(long),"[198, 207]","{'A328': [(198, 202), (204, 207)], 'A294': [(203, 203)]}","{'A328': 0.9, 'A294': 0.1}",A328,,"                @Override
                public long skip(final long amount) throws IOException {
                    if (viewSize < 1) {
                        return 0;
                    }
                    final int res = (int) DataReader.this.skipBytes(Math.min(amount, viewSize));
                    viewSize -= res;

                    return res;
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,available,int available(),"[209, 212]","{'A328': [(209, 212)]}",{'A328': 1.0},A328,,"                @Override
                public int available() {
                    return viewSize;
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,close,void close(),"[214, 217]","{'A328': [(214, 217)]}",{'A328': 1.0},A328,,"                @Override
                public void close() {
                    viewSize = 0;
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,markSupported,boolean markSupported(),"[219, 222]","{'A328': [(219, 222)]}",{'A328': 1.0},A328,,"                @Override
                public boolean markSupported() {
                    return false;
                }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,primitiveRead,void primitiveRead(int),"[233, 246]","{'A328': [(233, 233), (236, 238), (240, 246)], 'A294': [(234, 235)], 'A299': [(239, 239)]}","{'A328': 0.7857142857142857, 'A294': 0.14285714285714285, 'A299': 0.07142857142857142}",A328,,"    private void primitiveRead(final int amount) throws IOException {
        final byte[] buffer = new byte[amount];
        final int read = read(buffer, 0, amount);

        if (read != amount) {
            throw new EOFException(""Truncated stream, missing ""
                    + (amount - read) + "" bytes"");
        }

        for (int i = 0; i < amount; i++) {
            // the ""byte"" data type in java is signed and is very annoying
            primitive[i] = (short) (buffer[i] & 0xFF);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/DataReader.java,DataReader,fillBuffer,boolean fillBuffer(),"[252, 266]","{'A328': [(252, 266)]}",{'A328': 1.0},A328,,"    private boolean fillBuffer() throws IOException {
        if (readCount < 0) {
            return true;
        }
        if (readOffset >= readBuffer.length) {
            readCount = stream.read(readBuffer);
            if (readCount < 1) {
                readCount = -1;
                return true;
            }
            readOffset = 0;
        }

        return readCount < 1;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/NoFileManagerSafeGuard.java,NoFileManagerSafeGuard,showActivityNotFoundAlert,void showActivityNotFoundAlert(Context),"[25, 47]","{'A300': [(25, 47)]}",{'A300': 1.0},A300,,"    private static void showActivityNotFoundAlert(final Context context) {
        if (context == null) {
            throw new IllegalArgumentException(
                    ""Unable to open no file manager alert dialog: Context is null"");
        }

        final String message;
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
            // Android 10+ only allows SAF
            message = context.getString(R.string.no_appropriate_file_manager_message_android_10);
        } else {
            message = context.getString(
                    R.string.no_appropriate_file_manager_message,
                    context.getString(R.string.downloads_storage_use_saf_title));
        }


        new AlertDialog.Builder(context)
                .setTitle(R.string.no_app_to_open_intent)
                .setMessage(message)
                .setPositiveButton(R.string.ok, null)
                .show();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/NoFileManagerSafeGuard.java,NoFileManagerSafeGuard,launchSafe,"void launchSafe(ActivityResultLauncher<I>,I,String,Context)","[62, 74]","{'A300': [(62, 74)]}",{'A300': 1.0},A300,,"    public static <I> void launchSafe(
            final ActivityResultLauncher<I> activityResultLauncher,
            final I input,
            final String tag,
            final Context context
    ) {
        try {
            activityResultLauncher.launch(input);
        } catch (final ActivityNotFoundException aex) {
            Log.w(tag, ""Unable to launch file/directory picker"", aex);
            NoFileManagerSafeGuard.showActivityNotFoundAlert(context);
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpStream.java,SharpStream,canSetLength,boolean canSetLength(),"[41, 43]","{'A294': [(41, 43)]}",{'A294': 1.0},A294,,"    public boolean canSetLength() {
        return false;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpStream.java,SharpStream,canSeek,boolean canSeek(),"[45, 47]","{'A294': [(45, 47)]}",{'A294': 1.0},A294,,"    public boolean canSeek() {
        return false;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpStream.java,SharpStream,flush,void flush(),"[55, 57]","{'A294': [(55, 57)]}",{'A294': 1.0},A294,,"    public void flush() throws IOException {
        // STUB
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpStream.java,SharpStream,setLength,void setLength(long),"[59, 61]","{'A294': [(59, 61)]}",{'A294': 1.0},A294,,"    public void setLength(final long length) throws IOException {
        throw new IOException(""Not implemented"");
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpStream.java,SharpStream,seek,void seek(long),"[63, 65]","{'A294': [(63, 65)]}",{'A294': 1.0},A294,,"    public void seek(final long offset) throws IOException {
        throw new IOException(""Not implemented"");
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpStream.java,SharpStream,length,long length(),"[67, 69]","{'A294': [(67, 69)]}",{'A294': 1.0},A294,,"    public long length() throws IOException {
        throw new UnsupportedOperationException(""Unsupported operation"");
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpInputStream.java,SharpInputStream,read,int read(),"[22, 25]","{'A294': [(22, 25)]}",{'A294': 1.0},A294,,"    @Override
    public int read() throws IOException {
        return stream.read();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpInputStream.java,SharpInputStream,read,int read(byte[]),"[27, 30]","{'A294': [(27, 30)]}",{'A294': 1.0},A294,,"    @Override
    public int read(@NonNull final byte[] b) throws IOException {
        return stream.read(b);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpInputStream.java,SharpInputStream,read,"int read(byte[],int,int)","[32, 35]","{'A294': [(32, 35)]}",{'A294': 1.0},A294,,"    @Override
    public int read(@NonNull final byte[] b, final int off, final int len) throws IOException {
        return stream.read(b, off, len);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpInputStream.java,SharpInputStream,skip,long skip(long),"[37, 40]","{'A294': [(37, 40)]}",{'A294': 1.0},A294,,"    @Override
    public long skip(final long n) throws IOException {
        return stream.skip(n);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpInputStream.java,SharpInputStream,available,int available(),"[42, 46]","{'A294': [(42, 46)]}",{'A294': 1.0},A294,,"    @Override
    public int available() {
        final long res = stream.available();
        return res > Integer.MAX_VALUE ? Integer.MAX_VALUE : (int) res;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpInputStream.java,SharpInputStream,close,void close(),"[48, 51]","{'A294': [(48, 51)]}",{'A294': 1.0},A294,,"    @Override
    public void close() {
        stream.close();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpOutputStream.java,SharpOutputStream,write,void write(int),"[22, 25]","{'A294': [(22, 25)]}",{'A294': 1.0},A294,,"    @Override
    public void write(final int b) throws IOException {
        stream.write((byte) b);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpOutputStream.java,SharpOutputStream,write,void write(byte[]),"[27, 30]","{'A294': [(27, 30)]}",{'A294': 1.0},A294,,"    @Override
    public void write(@NonNull final byte[] b) throws IOException {
        stream.write(b);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpOutputStream.java,SharpOutputStream,write,"void write(byte[],int,int)","[32, 35]","{'A294': [(32, 35)]}",{'A294': 1.0},A294,,"    @Override
    public void write(@NonNull final byte[] b, final int off, final int len) throws IOException {
        stream.write(b, off, len);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpOutputStream.java,SharpOutputStream,flush,void flush(),"[37, 40]","{'A294': [(37, 40)]}",{'A294': 1.0},A294,,"    @Override
    public void flush() throws IOException {
        stream.flush();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/SharpOutputStream.java,SharpOutputStream,close,void close(),"[42, 45]","{'A294': [(42, 45)]}",{'A294': 1.0},A294,,"    @Override
    public void close() {
        stream.close();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,createFile,"StoredFileHelper createFile(String,String)","[77, 79]","{'A294': [(77, 77)], 'A328': [(78, 79)]}","{'A294': 0.3333333333333333, 'A328': 0.6666666666666666}",A328,,"    public StoredFileHelper createFile(final String filename, final String mime) {
        return createFile(filename, mime, false);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,createUniqueFile,"StoredFileHelper createUniqueFile(String,String)","[81, 141]","{'A294': [(81, 81), (83, 83), (93, 93), (96, 97), (99, 101), (103, 103), (106, 106), (108, 108), (123, 123), (136, 136), (139, 140)], 'A328': [(85, 85), (94, 95), (98, 98), (102, 102), (105, 105), (109, 112), (114, 114), (116, 116), (124, 125), (131, 133), (135, 135), (137, 138), (141, 141)], 'A295': [(82, 82), (84, 84), (87, 92), (104, 104), (107, 107), (134, 134)], 'A300': [(86, 86)], 'A298': [(113, 113), (115, 115), (117, 122), (126, 130)]}","{'A294': 0.2459016393442623, 'A328': 0.3442622950819672, 'A295': 0.18032786885245902, 'A300': 0.01639344262295082, 'A298': 0.21311475409836064}",A328,,"    public StoredFileHelper createUniqueFile(final String name, final String mime) {
        final List<String> matches = new ArrayList<>();
        final String[] filename = splitFilename(name);
        final String lcFileName = filename[0].toLowerCase();

        if (docTree == null) {
            try (Stream<Path> stream = Files.list(ioTree)) {
                matches.addAll(stream.map(path -> path.getFileName().toString().toLowerCase())
                        .filter(fileName -> fileName.startsWith(lcFileName))
                        .collect(Collectors.toList()));
            } catch (final IOException e) {
                Log.e(TAG, ""Exception while traversing "" + ioTree, e);
            }
        } else {
            // warning: SAF file listing is very slow
            final Uri docTreeChildren = DocumentsContract.buildChildDocumentsUriUsingTree(
                    docTree.getUri(), DocumentsContract.getDocumentId(docTree.getUri()));

            final String[] projection = new String[]{COLUMN_DISPLAY_NAME};
            final String selection = ""(LOWER("" + COLUMN_DISPLAY_NAME + "") LIKE ?%"";
            final ContentResolver cr = context.getContentResolver();

            try (Cursor cursor = cr.query(docTreeChildren, projection, selection,
                    new String[]{lcFileName}, null)) {
                if (cursor != null) {
                    while (cursor.moveToNext()) {
                        addIfStartWith(matches, lcFileName, cursor.getString(0));
                    }
                }
            }
        }

        if (matches.isEmpty()) {
            return createFile(name, mime, true);
        }

        // check if the filename is in use
        String lcName = name.toLowerCase();
        for (final String testName : matches) {
            if (testName.equals(lcName)) {
                lcName = null;
                break;
            }
        }

        // create file if filename not in use
        if (lcName != null) {
            return createFile(name, mime, true);
        }

        Collections.sort(matches, String::compareTo);

        for (int i = 1; i < 1000; i++) {
            if (Collections.binarySearch(matches, makeFileName(lcFileName, i, filename[1])) < 0) {
                return createFile(makeFileName(filename[0], i, filename[1]), mime, true);
            }
        }

        return createFile(String.valueOf(System.currentTimeMillis()).concat(filename[1]), mime,
                false);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,createFile,"StoredFileHelper createFile(String,String,boolean)","[143, 160]","{'A294': [(143, 145), (148, 148), (150, 150), (152, 153)], 'A328': [(146, 147), (149, 149), (151, 151), (154, 160)]}","{'A294': 0.3888888888888889, 'A328': 0.6111111111111112}",A328,,"    private StoredFileHelper createFile(final String filename, final String mime,
                                        final boolean safe) {
        final StoredFileHelper storage;

        try {
            if (docTree == null) {
                storage = new StoredFileHelper(ioTree, filename, mime);
            } else {
                storage = new StoredFileHelper(context, docTree, filename, mime, safe);
            }
        } catch (final IOException e) {
            return null;
        }

        storage.tag = tag;

        return storage;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,getUri,Uri getUri(),"[162, 164]","{'A328': [(162, 162), (164, 164)], 'A295': [(163, 163)]}","{'A328': 0.6666666666666666, 'A295': 0.3333333333333333}",A328,,"    public Uri getUri() {
        return docTree == null ? Uri.fromFile(ioTree.toFile()) : docTree.getUri();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,exists,boolean exists(),"[166, 168]","{'A328': [(166, 166), (168, 168)], 'A295': [(167, 167)]}","{'A328': 0.6666666666666666, 'A295': 0.3333333333333333}",A328,,"    public boolean exists() {
        return docTree == null ? Files.exists(ioTree) : docTree.exists();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,isDirect,boolean isDirect(),"[175, 177]","{'A328': [(175, 177)]}",{'A328': 1.0},A328,,"    public boolean isDirect() {
        return docTree == null;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,getFreeStorageSpace,long getFreeStorageSpace(),"[188, 217]","{'A305': [(188, 190), (192, 203), (205, 206), (209, 215)], 'A424': [(191, 191), (204, 204), (207, 208), (216, 217)]}","{'A305': 0.8, 'A424': 0.2}",A305,,"    public long getFreeStorageSpace() {
        try {
            final StructStatVfs stat;

            if (ioTree != null) {
                // non-SAF file, use statvfs with the path directly (also, `context` would be null
                // for non-SAF files, so we wouldn't be able to call `getContentResolver` anyway)
                stat = Os.statvfs(ioTree.toString());

            } else {
                // SAF file, we can't get a path directly, so obtain a file descriptor first
                // and then use fstatvfs with the file descriptor
                try (ParcelFileDescriptor parcelFileDescriptor =
                             context.getContentResolver().openFileDescriptor(getUri(), ""r"")) {
                    if (parcelFileDescriptor == null) {
                        return Long.MAX_VALUE;
                    }
                    final FileDescriptor fileDescriptor = parcelFileDescriptor.getFileDescriptor();
                    stat = Os.fstatvfs(fileDescriptor);
                }
            }

            // this is the same formula used inside the FsStat class
            return stat.f_bavail * stat.f_frsize;
        } catch (final Throwable e) {
            // ignore any error
            Log.e(TAG, ""Could not get free storage space"", e);
            return Long.MAX_VALUE;
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,mkdirs,boolean mkdirs(),"[229, 265]","{'A294': [(239, 241), (249, 254), (258, 258), (260, 260)], 'A328': [(229, 230), (237, 238), (242, 248), (255, 257), (259, 259), (261, 265)], 'A295': [(231, 236)]}","{'A294': 0.2972972972972973, 'A328': 0.5405405405405406, 'A295': 0.16216216216216217}",A328,,"    public boolean mkdirs() {
        if (docTree == null) {
            try {
                Files.createDirectories(ioTree);
            } catch (final IOException e) {
                Log.e(TAG, ""Error while creating directories at "" + ioTree, e);
            }
            return Files.exists(ioTree);
        }

        if (docTree.exists()) {
            return true;
        }

        try {
            DocumentFile parent;
            String child = docTree.getName();

            while (true) {
                parent = docTree.getParentFile();
                if (parent == null || child == null) {
                    break;
                }
                if (parent.exists()) {
                    return true;
                }

                parent.createDirectory(child);

                child = parent.getName(); // for the next iteration
            }
        } catch (final Exception ignored) {
            // no more parent directories or unsupported by the storage provider
        }

        return false;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,getTag,String getTag(),"[267, 269]","{'A328': [(267, 269)]}",{'A328': 1.0},A328,,"    public String getTag() {
        return tag;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,findFile,Uri findFile(String),"[271, 279]","{'A294': [(271, 271), (277, 277)], 'A328': [(272, 272), (275, 276), (278, 279)], 'A295': [(273, 274)]}","{'A294': 0.2222222222222222, 'A328': 0.5555555555555556, 'A295': 0.2222222222222222}",A328,,"    public Uri findFile(final String filename) {
        if (docTree == null) {
            final Path res = ioTree.resolve(filename);
            return Files.exists(res) ? Uri.fromFile(res.toFile()) : null;
        }

        final DocumentFile res = findFileSAFHelper(context, docTree, filename);
        return res == null ? null : res.getUri();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,canWrite,boolean canWrite(),"[281, 283]","{'A328': [(281, 281), (283, 283)], 'A295': [(282, 282)]}","{'A328': 0.6666666666666666, 'A295': 0.3333333333333333}",A328,,"    public boolean canWrite() {
        return docTree == null ? Files.isWritable(ioTree) : docTree.canWrite();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,isInvalidSafStorage,boolean isInvalidSafStorage(),"[290, 292]","{'A305': [(290, 292)]}",{'A305': 1.0},A305,,"    public boolean isInvalidSafStorage() {
        return docTree != null && docTree.getName() == null;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,toString,String toString(),"[294, 298]","{'A328': [(294, 296), (298, 298)], 'A295': [(297, 297)]}","{'A328': 0.8, 'A295': 0.2}",A328,,"    @NonNull
    @Override
    public String toString() {
        return (docTree == null ? Uri.fromFile(ioTree.toFile()) : docTree.getUri()).toString();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,addIfStartWith,"void addIfStartWith(List<String>,String,String)","[304, 313]","{'A294': [(305, 312)], 'A328': [(313, 313)], 'A295': [(304, 304)]}","{'A294': 0.8, 'A328': 0.1, 'A295': 0.1}",A294,,"    private static void addIfStartWith(final List<String> list, @NonNull final String base,
                                       final String str) {
        if (isNullOrEmpty(str)) {
            return;
        }
        final String lowerStr = str.toLowerCase();
        if (lowerStr.startsWith(base)) {
            list.add(lowerStr);
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,splitFilename,String[] splitFilename(String),"[321, 329]","{'A294': [(321, 322), (324, 324), (326, 326)], 'A328': [(323, 323), (325, 325), (327, 329)]}","{'A294': 0.4444444444444444, 'A328': 0.5555555555555556}",A328,,"    private static String[] splitFilename(@NonNull final String filename) {
        final int dotIndex = filename.lastIndexOf('.');

        if (dotIndex < 0 || (dotIndex == filename.length() - 1)) {
            return new String[]{filename, """"};
        }

        return new String[]{filename.substring(0, dotIndex), filename.substring(dotIndex)};
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,makeFileName,"String makeFileName(String,int,String)","[331, 333]","{'A294': [(331, 331)], 'A328': [(333, 333)], 'A295': [(332, 332)]}","{'A294': 0.3333333333333333, 'A328': 0.3333333333333333, 'A295': 0.3333333333333333}",A294,,"    private static String makeFileName(final String name, final int idx, final String ext) {
        return name + ""("" + idx + "")"" + ext;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,findFileSAFHelper,"DocumentFile findFileSAFHelper(Context,DocumentFile,String)","[343, 386]","{'A294': [(343, 344), (346, 346), (349, 351), (357, 358), (360, 363), (365, 365), (367, 371), (374, 375), (377, 377), (379, 381)], 'A328': [(347, 348), (352, 356), (359, 359), (364, 364), (366, 366), (372, 373), (376, 376), (378, 378), (382, 386)], 'A300': [(345, 345)]}","{'A294': 0.5454545454545454, 'A328': 0.4318181818181818, 'A300': 0.022727272727272728}",A294,,"    static DocumentFile findFileSAFHelper(@Nullable final Context context, final DocumentFile tree,
                                          final String filename) {
        if (context == null) {
            return tree.findFile(filename); // warning: this is very slow
        }

        if (!tree.canRead()) {
            return null; // missing read permission
        }

        final int name = 0;
        final int documentId = 1;

        // LOWER() SQL function is not supported
        final String selection = COLUMN_DISPLAY_NAME + "" = ?"";
        //final String selection = COLUMN_DISPLAY_NAME + "" LIKE ?%"";

        final Uri childrenUri = DocumentsContract.buildChildDocumentsUriUsingTree(tree.getUri(),
                DocumentsContract.getDocumentId(tree.getUri()));
        final String[] projection = {COLUMN_DISPLAY_NAME, COLUMN_DOCUMENT_ID};
        final ContentResolver contentResolver = context.getContentResolver();

        final String lowerFilename = filename.toLowerCase();

        try (Cursor cursor = contentResolver.query(childrenUri, projection, selection,
                new String[]{lowerFilename}, null)) {
            if (cursor == null) {
                return null;
            }

            while (cursor.moveToNext()) {
                if (cursor.isNull(name)
                        || !cursor.getString(name).toLowerCase().startsWith(lowerFilename)) {
                    continue;
                }

                return DocumentFile.fromSingleUri(context,
                        DocumentsContract.buildDocumentUriUsingTree(tree.getUri(),
                                cursor.getString(documentId)));
            }
        }

        return null;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredDirectoryHelper.java,StoredDirectoryHelper,getPicker,Intent getPicker(Context),"[388, 401]","{'A294': [(388, 401)]}",{'A294': 1.0},A294,,"    public static Intent getPicker(final Context ctx) {
        if (NewPipeSettings.useStorageAccessFramework(ctx)) {
            return new Intent(Intent.ACTION_OPEN_DOCUMENT_TREE)
                    .putExtra(""android.content.extra.SHOW_ADVANCED"", true)
                    .addFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
                            | StoredDirectoryHelper.PERMISSION_FLAGS);
        } else {
            return new Intent(ctx, FilePickerActivityHelper.class)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_MULTIPLE, false)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_CREATE_DIR, true)
                    .putExtra(FilePickerActivityHelper.EXTRA_MODE,
                            FilePickerActivityHelper.MODE_DIR);
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,deserialize,"StoredFileHelper deserialize(StoredFileHelper,Context)","[160, 180]","{'A294': [(160, 162), (164, 164), (166, 166), (168, 169), (172, 177)], 'A328': [(163, 163), (165, 165), (167, 167), (170, 171), (178, 180)]}","{'A294': 0.6190476190476191, 'A328': 0.38095238095238093}",A294,,"    public static StoredFileHelper deserialize(@NonNull final StoredFileHelper storage,
                                               final Context context) throws IOException {
        final Uri treeUri = storage.sourceTree == null ? null : Uri.parse(storage.sourceTree);

        if (storage.isInvalid()) {
            return new StoredFileHelper(treeUri, storage.srcName, storage.srcType, storage.tag);
        }

        final StoredFileHelper instance = new StoredFileHelper(context, treeUri,
                Uri.parse(storage.source), storage.tag);

        // under SAF, if the target document is deleted, conserve the filename and mime
        if (instance.srcName == null) {
            instance.srcName = storage.srcName;
        }
        if (instance.srcType == null) {
            instance.srcType = storage.srcType;
        }

        return instance;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getStream,SharpStream getStream(),"[182, 190]","{'A294': [(183, 183), (185, 185), (187, 187), (189, 189)], 'A328': [(182, 182), (184, 184), (188, 188), (190, 190)], 'A295': [(186, 186)]}","{'A294': 0.4444444444444444, 'A328': 0.4444444444444444, 'A295': 0.1111111111111111}",A294,,"    public SharpStream getStream() throws IOException {
        assertValid();

        if (docFile == null) {
            return new FileStream(ioPath.toFile());
        } else {
            return new FileStreamSAF(context.getContentResolver(), docFile.getUri());
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,openAndTruncateStream,SharpStream openAndTruncateStream(),"[192, 203]","{'A305': [(192, 203)]}",{'A305': 1.0},A305,,"    public SharpStream openAndTruncateStream() throws IOException {
        final SharpStream sharpStream = getStream();
        try {
            sharpStream.setLength(0);
        } catch (final Throwable e) {
            // we can't use try-with-resources here, since we only want to close the stream if an
            // exception occurs, but leave it open if everything goes well
            sharpStream.close();
            throw e;
        }
        return sharpStream;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,isDirect,boolean isDirect(),"[210, 214]","{'A294': [(211, 211)], 'A328': [(210, 210), (212, 214)]}","{'A294': 0.2, 'A328': 0.8}",A328,,"    public boolean isDirect() {
        assertValid();

        return docFile == null;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,isInvalid,boolean isInvalid(),"[216, 218]","{'A328': [(216, 218)]}",{'A328': 1.0},A328,,"    public boolean isInvalid() {
        return source == null;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getUri,Uri getUri(),"[220, 224]","{'A294': [(221, 221)], 'A328': [(220, 220), (222, 222), (224, 224)], 'A295': [(223, 223)]}","{'A294': 0.2, 'A328': 0.6, 'A295': 0.2}",A328,,"    public Uri getUri() {
        assertValid();

        return docFile == null ? Uri.fromFile(ioPath.toFile()) : docFile.getUri();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getParentUri,Uri getParentUri(),"[226, 230]","{'A294': [(227, 227)], 'A328': [(226, 226), (228, 230)]}","{'A294': 0.2, 'A328': 0.8}",A328,,"    public Uri getParentUri() {
        assertValid();

        return sourceTree == null ? null : Uri.parse(sourceTree);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,truncate,void truncate(),"[232, 238]","{'A294': [(233, 233)], 'A328': [(232, 232), (234, 238)]}","{'A294': 0.14285714285714285, 'A328': 0.8571428571428571}",A328,,"    public void truncate() throws IOException {
        assertValid();

        try (SharpStream fs = getStream()) {
            fs.setLength(0);
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,delete,boolean delete(),"[240, 264]","{'A294': [(241, 244), (251, 251), (253, 253), (256, 257), (259, 259)], 'A328': [(240, 240), (252, 252), (254, 255), (258, 258), (260, 264)], 'A295': [(245, 250)]}","{'A294': 0.36, 'A328': 0.4, 'A295': 0.24}",A328,,"    public boolean delete() {
        if (source == null) {
            return true;
        }
        if (docFile == null) {
            try {
                return Files.deleteIfExists(ioPath);
            } catch (final IOException e) {
                Log.e(TAG, ""Exception while deleting "" + ioPath, e);
                return false;
            }
        }

        final boolean res = docFile.delete();

        try {
            final int flags = Intent.FLAG_GRANT_READ_URI_PERMISSION
                    | Intent.FLAG_GRANT_WRITE_URI_PERMISSION;
            context.getContentResolver().releasePersistableUriPermission(docFile.getUri(), flags);
        } catch (final Exception ex) {
            // nothing to do
        }

        return res;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,length,long length(),"[266, 279]","{'A294': [(267, 267)], 'A328': [(266, 266), (268, 268), (279, 279)], 'A295': [(269, 278)]}","{'A294': 0.07142857142857142, 'A328': 0.21428571428571427, 'A295': 0.7142857142857143}",A295,,"    public long length() {
        assertValid();

        if (docFile == null) {
            try {
                return Files.size(ioPath);
            } catch (final IOException e) {
                Log.e(TAG, ""Exception while getting the size of "" + ioPath, e);
                return 0;
            }
        } else {
            return docFile.length();
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,canWrite,boolean canWrite(),"[281, 286]","{'A294': [(282, 284)], 'A328': [(281, 281), (286, 286)], 'A295': [(285, 285)]}","{'A294': 0.5, 'A328': 0.3333333333333333, 'A295': 0.16666666666666666}",A294,,"    public boolean canWrite() {
        if (source == null) {
            return false;
        }
        return docFile == null ? Files.isWritable(ioPath) : docFile.canWrite();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getName,String getName(),"[288, 297]","{'A294': [(289, 289), (291, 291), (293, 293), (295, 295)], 'A328': [(288, 288), (290, 290), (294, 294), (296, 297)], 'A295': [(292, 292)]}","{'A294': 0.4, 'A328': 0.5, 'A295': 0.1}",A328,,"    public String getName() {
        if (source == null) {
            return srcName;
        } else if (docFile == null) {
            return ioPath.getFileName().toString();
        }

        final String name = docFile.getName();
        return name == null ? srcName : name;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getType,String getType(),"[299, 306]","{'A294': [(300, 300), (302, 302), (304, 304)], 'A328': [(299, 299), (301, 301), (303, 303), (305, 306)]}","{'A294': 0.375, 'A328': 0.625}",A328,,"    public String getType() {
        if (source == null || docFile == null) {
            return srcType;
        }

        final String type = docFile.getType();
        return type == null ? srcType : type;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getTag,String getTag(),"[308, 310]","{'A328': [(308, 310)]}",{'A328': 1.0},A328,,"    public String getTag() {
        return tag;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,existsAsFile,boolean existsAsFile(),"[312, 327]","{'A294': [(319, 320)], 'A328': [(312, 312), (321, 322), (327, 327)], 'A305': [(314, 316), (318, 318), (323, 324), (326, 326)], 'A295': [(313, 313), (317, 317), (325, 325)]}","{'A294': 0.125, 'A328': 0.25, 'A305': 0.4375, 'A295': 0.1875}",A305,,"    public boolean existsAsFile() {
        if (source == null || (docFile == null && ioPath == null)) {
            if (DEBUG) {
                Log.d(TAG, ""existsAsFile called but something is null: source = [""
                        + (source == null ? ""null => storage is invalid"" : source)
                        + ""], docFile = ["" + docFile + ""], ioPath = ["" + ioPath + ""]"");
            }
            return false;
        }

        // WARNING: DocumentFile.exists() and DocumentFile.isFile() methods are slow
        // docFile.isVirtual() means it is non-physical?
        return docFile == null
                ? Files.isRegularFile(ioPath)
                : (docFile.exists() && docFile.isFile());
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,create,boolean create(),"[329, 366]","{'A294': [(330, 331), (337, 337), (344, 346), (349, 351), (353, 353)], 'A328': [(329, 329), (332, 334), (339, 343), (347, 348), (352, 352), (354, 358), (361, 366)], 'A295': [(335, 336), (338, 338), (359, 360)]}","{'A294': 0.2631578947368421, 'A328': 0.6052631578947368, 'A295': 0.13157894736842105}",A328,,"    public boolean create() {
        assertValid();
        final boolean result;

        if (docFile == null) {
            try {
                Files.createFile(ioPath);
                result = true;
            } catch (final IOException e) {
                Log.e(TAG, ""Exception while creating "" + ioPath, e);
                return false;
            }
        } else if (docTree == null) {
            result = false;
        } else {
            if (!docTree.canRead() || !docTree.canWrite()) {
                return false;
            }
            try {
                docFile = createSAF(context, srcType, srcName);
                if (docFile.getName() == null) {
                    return false;
                }
                result = true;
            } catch (final IOException e) {
                return false;
            }
        }

        if (result) {
            source = (docFile == null ? Uri.fromFile(ioPath.toFile()) : docFile.getUri())
                    .toString();
            srcName = getName();
            srcType = getType();
        }

        return result;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,invalidate,void invalidate(),"[368, 382]","{'A294': [(369, 371)], 'A328': [(368, 368), (372, 379), (381, 382)], 'A295': [(380, 380)]}","{'A294': 0.2, 'A328': 0.7333333333333333, 'A295': 0.06666666666666667}",A328,,"    public void invalidate() {
        if (source == null) {
            return;
        }

        srcName = getName();
        srcType = getType();

        source = null;

        docTree = null;
        docFile = null;
        ioPath = null;
        context = null;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,equals,boolean equals(StoredFileHelper),"[384, 416]","{'A294': [(384, 387), (392, 392), (394, 394), (397, 403), (406, 408), (410, 410), (412, 412), (414, 415)], 'A328': [(388, 391), (393, 393), (395, 396), (404, 405), (409, 409), (413, 413), (416, 416)], 'A295': [(411, 411)]}","{'A294': 0.6060606060606061, 'A328': 0.36363636363636365, 'A295': 0.030303030303030304}",A294,,"    public boolean equals(final StoredFileHelper storage) {
        if (this == storage) {
            return true;
        }

        // note: do not compare tags, files can have the same parent folder
        //if (stringMismatch(this.tag, storage.tag)) return false;

        if (stringMismatch(getLowerCase(this.sourceTree), getLowerCase(this.sourceTree))) {
            return false;
        }

        if (this.isInvalid() || storage.isInvalid()) {
            if (this.srcName == null || storage.srcName == null || this.srcType == null
                    || storage.srcType == null) {
                return false;
            }

            return this.srcName.equalsIgnoreCase(storage.srcName)
                    && this.srcType.equalsIgnoreCase(storage.srcType);
        }

        if (this.isDirect() != storage.isDirect()) {
            return false;
        }

        if (this.isDirect()) {
            return this.ioPath.equals(storage.ioPath);
        }

        return DocumentsContract.getDocumentId(this.docFile.getUri())
                .equalsIgnoreCase(DocumentsContract.getDocumentId(storage.docFile.getUri()));
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,toString,String toString(),"[418, 427]","{'A294': [(421, 421), (423, 426)], 'A328': [(418, 420), (422, 422), (427, 427)]}","{'A294': 0.5, 'A328': 0.5}",A294,,"    @NonNull
    @Override
    public String toString() {
        if (source == null) {
            return ""[Invalid state] name="" + srcName + ""  type="" + srcType + ""  tag="" + tag;
        } else {
            return ""sourceFile="" + source + ""  treeSource="" + (sourceTree == null ? """" : sourceTree)
                    + ""  tag="" + tag;
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,assertValid,void assertValid(),"[430, 434]","{'A294': [(430, 431), (433, 433)], 'A328': [(432, 432), (434, 434)]}","{'A294': 0.6, 'A328': 0.4}",A294,,"    private void assertValid() {
        if (source == null) {
            throw new IllegalStateException(""In invalid state"");
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,takePermissionSAF,void takePermissionSAF(),"[436, 445]","{'A294': [(438, 443)], 'A328': [(436, 437), (444, 445)]}","{'A294': 0.6, 'A328': 0.4}",A294,,"    private void takePermissionSAF() throws IOException {
        try {
            context.getContentResolver().takePersistableUriPermission(docFile.getUri(),
                    StoredDirectoryHelper.PERMISSION_FLAGS);
        } catch (final Exception e) {
            if (docFile.getName() == null) {
                throw new IOException(e);
            }
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,createSAF,"DocumentFile createSAF(Context,String,String)","[447, 467]","{'A294': [(448, 450), (453, 453), (455, 455), (461, 463)], 'A328': [(451, 452), (454, 454), (456, 460), (464, 467)], 'A298': [(447, 447)]}","{'A294': 0.38095238095238093, 'A328': 0.5714285714285714, 'A298': 0.047619047619047616}",A328,,"    @NonNull
    private DocumentFile createSAF(@Nullable final Context ctx, final String mime,
                                   final String filename) throws IOException {
        DocumentFile res = StoredDirectoryHelper.findFileSAFHelper(ctx, docTree, filename);

        if (res != null && res.exists() && res.isDirectory()) {
            if (!res.delete()) {
                throw new IOException(""Directory with the same name found but cannot delete"");
            }
            res = null;
        }

        if (res == null) {
            res = this.docTree.createFile(srcType == null ? DEFAULT_MIME : mime, filename);
            if (res == null) {
                throw new IOException(""Cannot create the file"");
            }
        }

        return res;
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getLowerCase,String getLowerCase(String),"[469, 471]","{'A294': [(469, 469)], 'A328': [(470, 471)]}","{'A294': 0.3333333333333333, 'A328': 0.6666666666666666}",A328,,"    private String getLowerCase(final String str) {
        return str == null ? null : str.toLowerCase();
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,stringMismatch,"boolean stringMismatch(String,String)","[473, 482]","{'A294': [(473, 479)], 'A328': [(480, 482)]}","{'A294': 0.7, 'A328': 0.3}",A294,,"    private boolean stringMismatch(final String str1, final String str2) {
        if (str1 == null && str2 == null) {
            return false;
        }
        if ((str1 == null) != (str2 == null)) {
            return true;
        }

        return !str1.equals(str2);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getPicker,"Intent getPicker(Context,String)","[484, 501]","{'A294': [(486, 488), (490, 501)], 'A305': [(484, 485), (489, 489)]}","{'A294': 0.8333333333333334, 'A305': 0.16666666666666666}",A294,,"    public static Intent getPicker(@NonNull final Context ctx,
                                   @NonNull final String mimeType) {
        if (NewPipeSettings.useStorageAccessFramework(ctx)) {
            return new Intent(Intent.ACTION_OPEN_DOCUMENT)
                    .putExtra(""android.content.extra.SHOW_ADVANCED"", true)
                    .setType(mimeType)
                    .addCategory(Intent.CATEGORY_OPENABLE)
                    .addFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
                            | StoredDirectoryHelper.PERMISSION_FLAGS);
        } else {
            return new Intent(ctx, FilePickerActivityHelper.class)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_MULTIPLE, false)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_CREATE_DIR, true)
                    .putExtra(FilePickerActivityHelper.EXTRA_SINGLE_CLICK, true)
                    .putExtra(FilePickerActivityHelper.EXTRA_MODE,
                            FilePickerActivityHelper.MODE_FILE);
        }
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getPicker,"Intent getPicker(Context,String,Uri)","[503, 507]","{'A305': [(503, 507)]}",{'A305': 1.0},A305,,"    public static Intent getPicker(@NonNull final Context ctx,
                                   @NonNull final String mimeType,
                                   @Nullable final Uri initialPath) {
        return applyInitialPathToPickerIntent(ctx, getPicker(ctx, mimeType), initialPath, null);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,getNewPicker,"Intent getNewPicker(Context,String,String,Uri)","[509, 533]","{'A294': [(513, 516), (518, 530)], 'A305': [(509, 512), (517, 517), (531, 533)]}","{'A294': 0.68, 'A305': 0.32}",A294,,"    public static Intent getNewPicker(@NonNull final Context ctx,
                                      @Nullable final String filename,
                                      @NonNull final String mimeType,
                                      @Nullable final Uri initialPath) {
        final Intent i;
        if (NewPipeSettings.useStorageAccessFramework(ctx)) {
            i = new Intent(Intent.ACTION_CREATE_DOCUMENT)
                    .putExtra(""android.content.extra.SHOW_ADVANCED"", true)
                    .setType(mimeType)
                    .addCategory(Intent.CATEGORY_OPENABLE)
                    .addFlags(Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
                            | StoredDirectoryHelper.PERMISSION_FLAGS);
            if (filename != null) {
                i.putExtra(Intent.EXTRA_TITLE, filename);
            }
        } else {
            i = new Intent(ctx, FilePickerActivityHelper.class)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_MULTIPLE, false)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_CREATE_DIR, true)
                    .putExtra(FilePickerActivityHelper.EXTRA_ALLOW_EXISTING_FILE, true)
                    .putExtra(FilePickerActivityHelper.EXTRA_MODE,
                            FilePickerActivityHelper.MODE_NEW_FILE);
        }
        return applyInitialPathToPickerIntent(ctx, i, initialPath, filename);
    }
"
org.schabi.newpipe.streams.io,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/io/StoredFileHelper.java,StoredFileHelper,applyInitialPathToPickerIntent,"Intent applyInitialPathToPickerIntent(Context,Intent,Uri,String)","[535, 589]","{'A294': [(568, 568), (577, 577), (579, 579), (588, 589)], 'A305': [(535, 567), (569, 576), (578, 578), (580, 587)]}","{'A294': 0.09090909090909091, 'A305': 0.9090909090909091}",A305,,"    private static Intent applyInitialPathToPickerIntent(@NonNull final Context ctx,
                                                         @NonNull final Intent intent,
                                                         @Nullable final Uri initialPath,
                                                         @Nullable final String filename) {

        if (NewPipeSettings.useStorageAccessFramework(ctx)) {
            if (initialPath == null) {
                return intent; // nothing to do, no initial path provided
            }

            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
                return intent.putExtra(DocumentsContract.EXTRA_INITIAL_URI, initialPath);
            } else {
                return intent; // can't set initial path on API < 26
            }

        } else {
            if (initialPath == null && filename == null) {
                return intent; // nothing to do, no initial path and no file name provided
            }

            File file;
            if (initialPath == null) {
                // The only way to set the previewed filename in non-SAF FilePicker is to set a
                // starting path ending with that filename. So when the initialPath is null but
                // filename isn't just default to the external storage directory.
                file = Environment.getExternalStorageDirectory();
            } else {
                try {
                    file = Utils.getFileForUri(initialPath);
                } catch (final Throwable ignored) {
                    // getFileForUri() can't decode paths to 'storage', fallback to this
                    file = new File(initialPath.toString());
                }
            }

            // remove any filename at the end of the path (get the parent directory in that case)
            if (!file.exists() || !file.isDirectory()) {
                file = file.getParentFile();
                if (file == null || !file.exists()) {
                    // default to the external storage directory in case of an invalid path
                    file = Environment.getExternalStorageDirectory();
                }
                // else: file is surely a directory
            }

            if (filename != null) {
                // append a filename so that the non-SAF FilePicker shows it as the preview
                file = new File(file, filename);
            }

            return intent
                    .putExtra(FilePickerActivityHelper.EXTRA_START_PATH, file.getAbsolutePath());
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,getTracksFromSource,Mp4Track[] getTracksFromSource(int),"[70, 76]","{'A328': [(71, 76)], 'A294': [(70, 70)]}","{'A328': 0.8571428571428571, 'A294': 0.14285714285714285}",A328,,"    public Mp4Track[] getTracksFromSource(final int sourceIndex) throws IllegalStateException {
        if (!parsed) {
            throw new IllegalStateException(""All sources must be parsed first"");
        }

        return readers[sourceIndex].getAvailableTracks();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,parseSources,void parseSources(),"[78, 95]","{'A328': [(78, 95)]}",{'A328': 1.0},A328,,"    public void parseSources() throws IOException, IllegalStateException {
        if (done) {
            throw new IllegalStateException(""already done"");
        }
        if (parsed) {
            throw new IllegalStateException(""already parsed"");
        }

        try {
            for (int i = 0; i < readers.length; i++) {
                readers[i] = new Mp4DashReader(sourceTracks[i]);
                readers[i].parse();
            }

        } finally {
            parsed = true;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,selectTracks,void selectTracks(),"[97, 113]","{'A328': [(98, 113)], 'A294': [(97, 97)]}","{'A328': 0.9411764705882353, 'A294': 0.058823529411764705}",A328,,"    public void selectTracks(final int... trackIndex) throws IOException {
        if (done) {
            throw new IOException(""already done"");
        }
        if (tracks != null) {
            throw new IOException(""tracks already selected"");
        }

        try {
            tracks = new Mp4Track[readers.length];
            for (int i = 0; i < readers.length; i++) {
                tracks[i] = readers[i].selectTrack(trackIndex[i]);
            }
        } finally {
            parsed = true;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,setMainBrand,void setMainBrand(int),"[115, 117]","{'A328': [(116, 117)], 'A294': [(115, 115)]}","{'A328': 0.6666666666666666, 'A294': 0.3333333333333333}",A328,,"    public void setMainBrand(final int brand) {
        overrideMainBrand = brand;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,isDone,boolean isDone(),"[119, 121]","{'A328': [(119, 121)]}",{'A328': 1.0},A328,,"    public boolean isDone() {
        return done;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,isParsed,boolean isParsed(),"[123, 125]","{'A328': [(123, 125)]}",{'A328': 1.0},A328,,"    public boolean isParsed() {
        return parsed;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,close,void close(),"[127, 143]","{'A328': [(127, 130), (132, 143)], 'A294': [(131, 131)]}","{'A328': 0.9411764705882353, 'A294': 0.058823529411764705}",A328,,"    public void close() throws IOException {
        done = true;
        parsed = true;

        for (final SharpStream src : sourceTracks) {
            src.close();
        }

        tracks = null;
        sourceTracks = null;

        readers = null;
        readersChunks = null;

        auxBuffer = null;
        outStream = null;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,build,void build(SharpStream),"[145, 404]","{'A328': [(147, 158), (160, 160), (165, 165), (167, 170), (172, 173), (175, 175), (177, 192), (194, 227), (230, 237), (239, 239), (241, 243), (245, 248), (250, 253), (255, 256), (258, 259), (261, 265), (267, 270), (272, 272), (274, 279), (281, 283), (286, 290), (294, 294), (296, 306), (308, 308), (313, 319), (321, 322), (324, 324), (328, 333), (335, 337), (340, 352), (355, 387), (390, 399), (401, 404)], 'A294': [(146, 146), (159, 159), (161, 164), (166, 166), (171, 171), (174, 174), (176, 176), (193, 193), (228, 229), (238, 238), (240, 240), (244, 244), (249, 249), (254, 254), (257, 257), (260, 260), (266, 266), (271, 271), (273, 273), (280, 280), (284, 285), (291, 293), (295, 295), (307, 307), (309, 309), (312, 312), (320, 320), (323, 323), (325, 327), (334, 334), (338, 339), (353, 354), (388, 389), (400, 400)], 'A305': [(145, 145)], 'A300': [(310, 311)]}","{'A328': 0.8115384615384615, 'A294': 0.17692307692307693, 'A305': 0.0038461538461538464, 'A300': 0.007692307692307693}",A328,,"    @SuppressWarnings(""MethodLength"")
    public void build(final SharpStream output) throws IOException {
        if (done) {
            throw new RuntimeException(""already done"");
        }
        if (!output.canWrite()) {
            throw new IOException(""the provided output is not writable"");
        }

        //
        // WARNING: the muxer requires at least 8 samples of every track
        //          not allowed for very short tracks (less than 0.5 seconds)
        //
        outStream = output;
        long read = 8; // mdat box header size
        long totalSampleSize = 0;
        final int[] sampleExtra = new int[readers.length];
        final int[] defaultMediaTime = new int[readers.length];
        final int[] defaultSampleDuration = new int[readers.length];
        final int[] sampleCount = new int[readers.length];

        final TablesInfo[] tablesInfo = new TablesInfo[tracks.length];
        for (int i = 0; i < tablesInfo.length; i++) {
            tablesInfo[i] = new TablesInfo();
        }

        final int singleSampleBuffer;
        if (tracks.length == 1 && tracks[0].kind == TrackKind.Audio) {
            // near 1 second of audio data per chunk, avoid split the audio stream in large chunks
            singleSampleBuffer = tracks[0].trak.mdia.mdhdTimeScale / 1000;
        } else {
            singleSampleBuffer = -1;
        }


        for (int i = 0; i < readers.length; i++) {
            int samplesSize = 0;
            int sampleSizeChanges = 0;
            int compositionOffsetLast = -1;

            Mp4DashChunk chunk;
            while ((chunk = readers[i].getNextChunk(true)) != null) {

                if (defaultMediaTime[i] < 1 && chunk.moof.traf.tfhd.defaultSampleDuration > 0) {
                    defaultMediaTime[i] = chunk.moof.traf.tfhd.defaultSampleDuration;
                }

                read += chunk.moof.traf.trun.chunkSize;
                sampleExtra[i] += chunk.moof.traf.trun.chunkDuration; // calculate track duration

                TrunEntry info;
                while ((info = chunk.getNextSampleInfo()) != null) {
                    if (info.isKeyframe) {
                        tablesInfo[i].stss++;
                    }

                    if (info.sampleDuration > defaultSampleDuration[i]) {
                        defaultSampleDuration[i] = info.sampleDuration;
                    }

                    tablesInfo[i].stsz++;
                    if (samplesSize != info.sampleSize) {
                        samplesSize = info.sampleSize;
                        sampleSizeChanges++;
                    }

                    if (info.hasCompositionTimeOffset) {
                        if (info.sampleCompositionTimeOffset != compositionOffsetLast) {
                            tablesInfo[i].ctts++;
                            compositionOffsetLast = info.sampleCompositionTimeOffset;
                        }
                    }

                    totalSampleSize += info.sampleSize;
                }
            }

            if (defaultMediaTime[i] < 1) {
                defaultMediaTime[i] = defaultSampleDuration[i];
            }

            readers[i].rewind();

            if (singleSampleBuffer > 0) {
                initChunkTables(tablesInfo[i], singleSampleBuffer, singleSampleBuffer);
            } else {
                initChunkTables(tablesInfo[i], SAMPLES_PER_CHUNK_INIT, SAMPLES_PER_CHUNK);
            }

            sampleCount[i] = tablesInfo[i].stsz;

            if (sampleSizeChanges == 1) {
                tablesInfo[i].stsz = 0;
                tablesInfo[i].stszDefault = samplesSize;
            } else {
                tablesInfo[i].stszDefault = 0;
            }

            if (tablesInfo[i].stss == tablesInfo[i].stsz) {
                tablesInfo[i].stss = -1; // for audio tracks (all samples are keyframes)
            }

            // ensure track duration
            if (tracks[i].trak.tkhd.duration < 1) {
                tracks[i].trak.tkhd.duration = sampleExtra[i]; // this never should happen
            }
        }


        final boolean is64 = read > THRESHOLD_FOR_CO64;

        // calculate the moov size
        final int auxSize = makeMoov(defaultMediaTime, tablesInfo, is64);

        if (auxSize < THRESHOLD_MOOV_LENGTH) {
            auxBuffer = ByteBuffer.allocate(auxSize); // cache moov in the memory
        }

        moovSimulation = false;
        writeOffset = 0;

        final int ftypSize = makeFtyp();

        // reserve moov space in the output stream
        if (auxSize > 0) {
            int length = auxSize;
            final byte[] buffer = new byte[64 * 1024]; // 64 KiB
            while (length > 0) {
                final int count = Math.min(length, buffer.length);
                outWrite(buffer, count);
                length -= count;
            }
        }

        if (auxBuffer == null) {
            outSeek(ftypSize);
        }

        // tablesInfo contains row counts
        // and after returning from makeMoov() will contain those table offsets
        makeMoov(defaultMediaTime, tablesInfo, is64);

        // write tables: stts stsc sbgp
        // reset for ctts table: sampleCount sampleExtra
        for (int i = 0; i < readers.length; i++) {
            writeEntryArray(tablesInfo[i].stts, 2, sampleCount[i], defaultSampleDuration[i]);
            writeEntryArray(tablesInfo[i].stsc, tablesInfo[i].stscBEntries.length,
                    tablesInfo[i].stscBEntries);
            tablesInfo[i].stscBEntries = null;
            if (tablesInfo[i].ctts > 0) {
                sampleCount[i] = 1; // the index is not base zero
                sampleExtra[i] = -1;
            }
            if (tablesInfo[i].sbgp > 0) {
                writeEntryArray(tablesInfo[i].sbgp, 1, sampleCount[i]);
            }
        }

        if (auxBuffer == null) {
            outRestore();
        }

        outWrite(makeMdat(totalSampleSize, is64));

        final int[] sampleIndex = new int[readers.length];
        final int[] sizes =
                new int[singleSampleBuffer > 0 ? singleSampleBuffer : SAMPLES_PER_CHUNK];
        final int[] sync = new int[singleSampleBuffer > 0 ? singleSampleBuffer : SAMPLES_PER_CHUNK];

        int written = readers.length;
        while (written > 0) {
            written = 0;

            for (int i = 0; i < readers.length; i++) {
                if (sampleIndex[i] < 0) {
                    continue; // track is done
                }

                final long chunkOffset = writeOffset;
                int syncCount = 0;
                final int limit;
                if (singleSampleBuffer > 0) {
                    limit = singleSampleBuffer;
                } else {
                    limit = sampleIndex[i] == 0 ? SAMPLES_PER_CHUNK_INIT : SAMPLES_PER_CHUNK;
                }

                int j = 0;
                for (; j < limit; j++) {
                    final Mp4DashSample sample = getNextSample(i);

                    if (sample == null) {
                        if (tablesInfo[i].ctts > 0 && sampleExtra[i] >= 0) {
                            writeEntryArray(tablesInfo[i].ctts, 1, sampleCount[i],
                                    sampleExtra[i]); // flush last entries
                            outRestore();
                        }
                        sampleIndex[i] = -1;
                        break;
                    }

                    sampleIndex[i]++;

                    if (tablesInfo[i].ctts > 0) {
                        if (sample.info.sampleCompositionTimeOffset == sampleExtra[i]) {
                            sampleCount[i]++;
                        } else {
                            if (sampleExtra[i] >= 0) {
                                tablesInfo[i].ctts = writeEntryArray(tablesInfo[i].ctts, 2,
                                        sampleCount[i], sampleExtra[i]);
                                outRestore();
                            }
                            sampleCount[i] = 1;
                            sampleExtra[i] = sample.info.sampleCompositionTimeOffset;
                        }
                    }

                    if (tablesInfo[i].stss > 0 && sample.info.isKeyframe) {
                        sync[syncCount++] = sampleIndex[i];
                    }

                    if (tablesInfo[i].stsz > 0) {
                        sizes[j] = sample.data.length;
                    }

                    outWrite(sample.data, sample.data.length);
                }

                if (j > 0) {
                    written++;

                    if (tablesInfo[i].stsz > 0) {
                        tablesInfo[i].stsz = writeEntryArray(tablesInfo[i].stsz, j, sizes);
                    }

                    if (syncCount > 0) {
                        tablesInfo[i].stss = writeEntryArray(tablesInfo[i].stss, syncCount, sync);
                    }

                    if (tablesInfo[i].stco > 0) {
                        if (is64) {
                            tablesInfo[i].stco = writeEntry64(tablesInfo[i].stco, chunkOffset);
                        } else {
                            tablesInfo[i].stco = writeEntryArray(tablesInfo[i].stco, 1,
                                    (int) chunkOffset);
                        }
                    }

                    outRestore();
                }
            }
        }

        if (auxBuffer != null) {
            // dump moov
            outSeek(ftypSize);
            outStream.write(auxBuffer.array(), 0, auxBuffer.capacity());
            auxBuffer = null;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,getNextSample,Mp4DashSample getNextSample(int),"[406, 421]","{'A328': [(407, 409), (411, 413), (415, 421)], 'A294': [(406, 406), (410, 410), (414, 414)]}","{'A328': 0.8125, 'A294': 0.1875}",A328,,"    private Mp4DashSample getNextSample(final int track) throws IOException {
        if (readersChunks[track] == null) {
            readersChunks[track] = readers[track].getNextChunk(false);
            if (readersChunks[track] == null) {
                return null; // EOF reached
            }
        }

        final Mp4DashSample sample = readersChunks[track].getNextSample();
        if (sample == null) {
            readersChunks[track] = null;
            return getNextSample(track);
        } else {
            return sample;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,writeEntry64,"int writeEntry64(int,long)","[424, 431]","{'A328': [(425, 431)], 'A294': [(424, 424)]}","{'A328': 0.875, 'A294': 0.125}",A328,,"    private int writeEntry64(final int offset, final long value) throws IOException {
        outBackup();

        auxSeek(offset);
        auxWrite(ByteBuffer.allocate(8).putLong(value).array());

        return offset + 8;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,writeEntryArray,"int writeEntryArray(int,int)","[433, 449]","{'A328': [(435, 438), (441, 449)], 'A294': [(433, 434), (439, 440)]}","{'A328': 0.7647058823529411, 'A294': 0.23529411764705882}",A328,,"    private int writeEntryArray(final int offset, final int count, final int... values)
            throws IOException {
        outBackup();

        auxSeek(offset);

        final int size = count * 4;
        final ByteBuffer buffer = ByteBuffer.allocate(size);

        for (int i = 0; i < count; i++) {
            buffer.putInt(values[i]);
        }

        auxWrite(buffer.array());

        return offset + size;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,outBackup,void outBackup(),"[451, 455]","{'A328': [(451, 455)]}",{'A328': 1.0},A328,,"    private void outBackup() {
        if (auxBuffer == null && lastWriteOffset < 0) {
            lastWriteOffset = writeOffset;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,outRestore,void outRestore(),"[461, 466]","{'A328': [(461, 466)]}",{'A328': 1.0},A328,,"    private void outRestore() throws IOException {
        if (lastWriteOffset > 0) {
            outSeek(lastWriteOffset);
            lastWriteOffset = -1;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,initChunkTables,"void initChunkTables(TablesInfo,int,int)","[468, 504]","{'A328': [(469, 470), (475, 485), (488, 488), (492, 493), (495, 495), (497, 499), (501, 501), (503, 504)], 'A294': [(468, 468), (471, 474), (486, 486), (489, 491), (494, 494), (496, 496), (500, 500), (502, 502)], 'A317': [(487, 487)]}","{'A328': 0.6216216216216216, 'A294': 0.35135135135135137, 'A317': 0.02702702702702703}",A328,,"    private void initChunkTables(final TablesInfo tables, final int firstCount,
                                 final int successiveCount) {
        // tables.stsz holds amount of samples of the track (total)
        final int totalSamples = (tables.stsz - firstCount);
        final float chunkAmount = totalSamples / (float) successiveCount;
        final int remainChunkOffset = (int) Math.ceil(chunkAmount);
        final boolean remain = remainChunkOffset != (int) chunkAmount;
        int index = 0;

        tables.stsc = 1;
        if (firstCount != successiveCount) {
            tables.stsc++;
        }
        if (remain) {
            tables.stsc++;
        }

        // stsc_table_entry = [first_chunk, samples_per_chunk, sample_description_index]
        tables.stscBEntries = new int[tables.stsc * 3];
        tables.stco = remainChunkOffset + 1; // total entries in chunk offset box

        tables.stscBEntries[index++] = 1;
        tables.stscBEntries[index++] = firstCount;
        tables.stscBEntries[index++] = 1;

        if (firstCount != successiveCount) {
            tables.stscBEntries[index++] = 2;
            tables.stscBEntries[index++] = successiveCount;
            tables.stscBEntries[index++] = 1;
        }

        if (remain) {
            tables.stscBEntries[index++] = remainChunkOffset + 1;
            tables.stscBEntries[index++] = totalSamples % successiveCount;
            tables.stscBEntries[index] = 1;
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,outWrite,void outWrite(byte[]),"[506, 508]","{'A328': [(507, 508)], 'A294': [(506, 506)]}","{'A328': 0.6666666666666666, 'A294': 0.3333333333333333}",A328,,"    private void outWrite(final byte[] buffer) throws IOException {
        outWrite(buffer, buffer.length);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,outWrite,"void outWrite(byte[],int)","[510, 513]","{'A328': [(511, 513)], 'A294': [(510, 510)]}","{'A328': 0.75, 'A294': 0.25}",A328,,"    private void outWrite(final byte[] buffer, final int count) throws IOException {
        writeOffset += count;
        outStream.write(buffer, 0, count);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,outSeek,void outSeek(long),"[515, 526]","{'A328': [(516, 526)], 'A294': [(515, 515)]}","{'A328': 0.9166666666666666, 'A294': 0.08333333333333333}",A328,,"    private void outSeek(final long offset) throws IOException {
        if (outStream.canSeek()) {
            outStream.seek(offset);
            writeOffset = offset;
        } else if (outStream.canRewind()) {
            outStream.rewind();
            writeOffset = 0;
            outSkip(offset);
        } else {
            throw new IOException(""cannot seek or rewind the output stream"");
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,outSkip,void outSkip(long),"[528, 531]","{'A328': [(529, 531)], 'A294': [(528, 528)]}","{'A328': 0.75, 'A294': 0.25}",A328,,"    private void outSkip(final long amount) throws IOException {
        outStream.skip(amount);
        writeOffset += amount;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,lengthFor,int lengthFor(int),"[533, 545]","{'A328': [(535, 545)], 'A294': [(533, 534)]}","{'A328': 0.8461538461538461, 'A294': 0.15384615384615385}",A328,,"    private int lengthFor(final int offset) throws IOException {
        final int size = auxOffset() - offset;

        if (moovSimulation) {
            return size;
        }

        auxSeek(offset);
        auxWrite(size);
        auxSkip(size - 4);

        return size;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,make,"int make(int,int,int,int)","[547, 574]","{'A328': [(549, 549), (551, 574)], 'A294': [(547, 548), (550, 550)]}","{'A328': 0.8928571428571429, 'A294': 0.10714285714285714}",A328,,"    private int make(final int type, final int extra, final int columns, final int rows)
            throws IOException {
        final byte base = 16;
        final int size = columns * rows * 4;
        int total = size + base;
        int offset = auxOffset();

        if (extra >= 0) {
            total += 4;
        }

        auxWrite(ByteBuffer.allocate(12)
                .putInt(total)
                .putInt(type)
                .putInt(0x00)// default version & flags
                .array()
        );

        if (extra >= 0) {
            offset += 4;
            auxWrite(extra);
        }

        auxWrite(rows);
        auxSkip(size);

        return offset + base;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,auxWrite,void auxWrite(int),"[576, 581]","{'A328': [(577, 581)], 'A294': [(576, 576)]}","{'A328': 0.8333333333333334, 'A294': 0.16666666666666666}",A328,,"    private void auxWrite(final int value) throws IOException {
        auxWrite(ByteBuffer.allocate(4)
                .putInt(value)
                .array()
        );
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,auxWrite,void auxWrite(byte[]),"[583, 591]","{'A328': [(584, 591)], 'A294': [(583, 583)]}","{'A328': 0.8888888888888888, 'A294': 0.1111111111111111}",A328,,"    private void auxWrite(final byte[] buffer) throws IOException {
        if (moovSimulation) {
            writeOffset += buffer.length;
        } else if (auxBuffer == null) {
            outWrite(buffer, buffer.length);
        } else {
            auxBuffer.put(buffer);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,auxSeek,void auxSeek(int),"[593, 601]","{'A328': [(594, 601)], 'A294': [(593, 593)]}","{'A328': 0.8888888888888888, 'A294': 0.1111111111111111}",A328,,"    private void auxSeek(final int offset) throws IOException {
        if (moovSimulation) {
            writeOffset = offset;
        } else if (auxBuffer == null) {
            outSeek(offset);
        } else {
            auxBuffer.position(offset);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,auxSkip,void auxSkip(int),"[603, 611]","{'A328': [(604, 611)], 'A294': [(603, 603)]}","{'A328': 0.8888888888888888, 'A294': 0.1111111111111111}",A328,,"    private void auxSkip(final int amount) throws IOException {
        if (moovSimulation) {
            writeOffset += amount;
        } else if (auxBuffer == null) {
            outSkip(amount);
        } else {
            auxBuffer.position(auxBuffer.position() + amount);
        }
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,auxOffset,int auxOffset(),"[613, 615]","{'A328': [(613, 615)]}",{'A328': 1.0},A328,,"    private int auxOffset() {
        return auxBuffer == null ? (int) writeOffset : auxBuffer.position();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeFtyp,int makeFtyp(),"[617, 643]","{'A328': [(618, 618), (622, 622), (624, 624), (626, 627), (630, 632), (634, 635), (638, 643)], 'A294': [(617, 617), (619, 621), (623, 623), (625, 625), (628, 629), (633, 633), (636, 637)]}","{'A328': 0.5925925925925926, 'A294': 0.4074074074074074}",A328,,"    private int makeFtyp() throws IOException {
        int size = 16 + (compatibleBrands.size() * 4);
        if (overrideMainBrand != 0) {
            size += 4;
        }

        final ByteBuffer buffer = ByteBuffer.allocate(size);
        buffer.putInt(size);
        buffer.putInt(0x66747970); // ""ftyp""

        if (overrideMainBrand == 0) {
            buffer.putInt(0x6D703432); // mayor brand ""mp42""
            buffer.putInt(512); // default minor version
        } else {
            buffer.putInt(overrideMainBrand);
            buffer.putInt(0);
            buffer.putInt(0x6D703432); // ""mp42"" compatible brand
        }

        for (final Integer brand : compatibleBrands) {
            buffer.putInt(brand); // compatible brand
        }

        outWrite(buffer.array());

        return size;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeMdat,"byte[] makeMdat(long,boolean)","[645, 662]","{'A328': [(645, 652), (654, 654), (656, 662)], 'A294': [(653, 653), (655, 655)]}","{'A328': 0.8888888888888888, 'A294': 0.1111111111111111}",A328,,"    private byte[] makeMdat(final long refSize, final boolean is64) {
        long size = refSize;
        if (is64) {
            size += 16;
        } else {
            size += 8;
        }

        final ByteBuffer buffer = ByteBuffer.allocate(is64 ? 16 : 8)
                .putInt(is64 ? 0x01 : (int) size)
                .putInt(0x6D646174); // mdat

        if (is64) {
            buffer.putLong(size);
        }

        return buffer.array();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeMvhd,void makeMvhd(long),"[664, 690]","{'A328': [(665, 676), (679, 684), (686, 690)], 'A294': [(664, 664), (677, 678), (685, 685)]}","{'A328': 0.8518518518518519, 'A294': 0.14814814814814814}",A328,,"    private void makeMvhd(final long longestTrack) throws IOException {
        auxWrite(new byte[]{
                0x00, 0x00, 0x00, 0x78, 0x6D, 0x76, 0x68, 0x64, 0x01, 0x00, 0x00, 0x00
        });
        auxWrite(ByteBuffer.allocate(28)
                .putLong(time)
                .putLong(time)
                .putInt(DEFAULT_TIMESCALE)
                .putLong(longestTrack)
                .array()
        );

        auxWrite(new byte[]{
                0x00, 0x01, 0x00, 0x00, 0x01, 0x00, // default volume and rate
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reserved values
                // default matrix
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00,
                0x40, 0x00, 0x00, 0x00
        });
        auxWrite(new byte[24]); // predefined
        auxWrite(ByteBuffer.allocate(4)
                .putInt(tracks.length + 1)
                .array()
        );
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeMoov,"int makeMoov(int[],TablesInfo[],boolean)","[692, 724]","{'A328': [(695, 700), (702, 704), (707, 712), (714, 716), (719, 719), (721, 724)], 'A294': [(692, 694), (701, 701), (705, 706), (713, 713), (720, 720)], 'A378': [(717, 718)]}","{'A328': 0.696969696969697, 'A294': 0.24242424242424243, 'A378': 0.06060606060606061}",A328,,"    private int makeMoov(final int[] defaultMediaTime, final TablesInfo[] tablesInfo,
                         final boolean is64) throws RuntimeException, IOException {
        final int start = auxOffset();

        auxWrite(new byte[]{
                0x00, 0x00, 0x00, 0x00, 0x6D, 0x6F, 0x6F, 0x76
        });

        long longestTrack = 0;
        final long[] durations = new long[tracks.length];

        for (int i = 0; i < durations.length; i++) {
            durations[i] = (long) Math.ceil(
                    ((double) tracks[i].trak.tkhd.duration / tracks[i].trak.mdia.mdhdTimeScale)
                            * DEFAULT_TIMESCALE);

            if (durations[i] > longestTrack) {
                longestTrack = durations[i];
            }
        }

        makeMvhd(longestTrack);

        for (int i = 0; i < tracks.length; i++) {
            if (tracks[i].trak.tkhd.matrix.length != 36) {
                throw
                    new RuntimeException(""bad track matrix length (expected 36) in track n°"" + i);
            }
            makeTrak(i, durations[i], defaultMediaTime[i], tablesInfo[i], is64);
        }

        return lengthFor(start);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeTrak,"void makeTrak(int,long,int,TablesInfo,boolean)","[726, 785]","{'A328': [(729, 730), (735, 736), (738, 756), (758, 761), (764, 764), (766, 766), (768, 769), (772, 781), (783, 785)], 'A294': [(726, 728), (731, 734), (737, 737), (757, 757), (762, 763), (765, 765), (767, 767), (770, 771), (782, 782)]}","{'A328': 0.7333333333333333, 'A294': 0.26666666666666666}",A328,,"    private void makeTrak(final int index, final long duration, final int defaultMediaTime,
                          final TablesInfo tables, final boolean is64) throws IOException {
        final int start = auxOffset();

        auxWrite(new byte[]{
                // trak header
                0x00, 0x00, 0x00, 0x00, 0x74, 0x72, 0x61, 0x6B,
                // tkhd header
                0x00, 0x00, 0x00, 0x68, 0x74, 0x6B, 0x68, 0x64, 0x01, 0x00, 0x00, 0x03
        });

        final ByteBuffer buffer = ByteBuffer.allocate(48);
        buffer.putLong(time);
        buffer.putLong(time);
        buffer.putInt(index + 1);
        buffer.position(24);
        buffer.putLong(duration);
        buffer.position(40);
        buffer.putShort(tracks[index].trak.tkhd.bLayer);
        buffer.putShort(tracks[index].trak.tkhd.bAlternateGroup);
        buffer.putShort(tracks[index].trak.tkhd.bVolume);
        auxWrite(buffer.array());

        auxWrite(tracks[index].trak.tkhd.matrix);
        auxWrite(ByteBuffer.allocate(8)
                .putInt(tracks[index].trak.tkhd.bWidth)
                .putInt(tracks[index].trak.tkhd.bHeight)
                .array()
        );

        auxWrite(new byte[]{
                0x00, 0x00, 0x00, 0x24, 0x65, 0x64, 0x74, 0x73, // edts header
                0x00, 0x00, 0x00, 0x1C, 0x65, 0x6C, 0x73, 0x74,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 // elst header
        });

        final int bMediaRate;
        final int mediaTime;

        if (tracks[index].trak.edstElst == null) {
            // is a audio track ¿is edst/elst optional for audio tracks?
            mediaTime = 0x00; // ffmpeg set this value as zero, instead of defaultMediaTime
            bMediaRate = 0x00010000;
        } else {
            mediaTime = (int) tracks[index].trak.edstElst.mediaTime;
            bMediaRate = tracks[index].trak.edstElst.bMediaRate;
        }

        auxWrite(ByteBuffer
                .allocate(12)
                .putInt((int) duration)
                .putInt(mediaTime)
                .putInt(bMediaRate)
                .array()
        );

        makeMdia(tracks[index].trak.mdia, tables, is64, tracks[index].kind == TrackKind.Audio);

        lengthFor(start);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeMdia,"void makeMdia(Mdia,TablesInfo,boolean,boolean)","[787, 840]","{'A328': [(791, 791), (793, 793), (797, 798), (802, 807), (809, 815), (817, 826), (830, 832), (835, 836), (840, 840)], 'A294': [(787, 790), (792, 792), (794, 796), (799, 801), (808, 808), (816, 816), (827, 829), (833, 834), (837, 839)]}","{'A328': 0.6111111111111112, 'A294': 0.3888888888888889}",A328,,"    private void makeMdia(final Mdia mdia, final TablesInfo tablesInfo, final boolean is64,
                          final boolean isAudio) throws IOException {
        final int startMdia = auxOffset();
        auxWrite(new byte[]{0x00, 0x00, 0x00, 0x00, 0x6D, 0x64, 0x69, 0x61}); // mdia
        auxWrite(mdia.mdhd);
        auxWrite(makeHdlr(mdia.hdlr));

        final int startMinf = auxOffset();
        auxWrite(new byte[]{0x00, 0x00, 0x00, 0x00, 0x6D, 0x69, 0x6E, 0x66}); // minf
        auxWrite(mdia.minf.mhd);
        auxWrite(mdia.minf.dinf);

        final int startStbl = auxOffset();
        auxWrite(new byte[]{0x00, 0x00, 0x00, 0x00, 0x73, 0x74, 0x62, 0x6C}); // stbl
        auxWrite(mdia.minf.stblStsd);

        //
        // In audio tracks the following tables is not required: ssts ctts
        // And stsz can be empty if has a default sample size
        //
        if (moovSimulation) {
            make(0x73747473, -1, 2, 1); // stts
            if (tablesInfo.stss > 0) {
                make(0x73747373, -1, 1, tablesInfo.stss);
            }
            if (tablesInfo.ctts > 0) {
                make(0x63747473, -1, 2, tablesInfo.ctts);
            }
            make(0x73747363, -1, 3, tablesInfo.stsc);
            make(0x7374737A, tablesInfo.stszDefault, 1, tablesInfo.stsz);
            make(is64 ? 0x636F3634 : 0x7374636F, -1, is64 ? 2 : 1, tablesInfo.stco);
        } else {
            tablesInfo.stts = make(0x73747473, -1, 2, 1);
            if (tablesInfo.stss > 0) {
                tablesInfo.stss = make(0x73747373, -1, 1, tablesInfo.stss);
            }
            if (tablesInfo.ctts > 0) {
                tablesInfo.ctts = make(0x63747473, -1, 2, tablesInfo.ctts);
            }
            tablesInfo.stsc = make(0x73747363, -1, 3, tablesInfo.stsc);
            tablesInfo.stsz = make(0x7374737A, tablesInfo.stszDefault, 1, tablesInfo.stsz);
            tablesInfo.stco = make(is64 ? 0x636F3634 : 0x7374636F, -1, is64 ? 2 : 1,
                    tablesInfo.stco);
        }

        if (isAudio) {
            auxWrite(makeSgpd());
            tablesInfo.sbgp = makeSbgp(); // during simulation the returned offset is ignored
        }

        lengthFor(startStbl);
        lengthFor(startMinf);
        lengthFor(startMdia);
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeHdlr,byte[] makeHdlr(Hdlr),"[842, 856]","{'A328': [(844, 852), (854, 856)], 'A294': [(842, 843), (853, 853)]}","{'A328': 0.8, 'A294': 0.2}",A328,,"    private byte[] makeHdlr(final Hdlr hdlr) {
        final ByteBuffer buffer = ByteBuffer.wrap(new byte[]{
                0x00, 0x00, 0x00, 0x21, 0x68, 0x64, 0x6C, 0x72, // hdlr
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00// null string character
        });

        buffer.position(12);
        buffer.putInt(hdlr.type);
        buffer.putInt(hdlr.subType);
        buffer.put(hdlr.bReserved); // always is a zero array

        return buffer.array();
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeSbgp,int makeSbgp(),"[858, 872]","{'A328': [(860, 861), (869, 872)], 'A294': [(858, 859), (862, 868)]}","{'A328': 0.4, 'A294': 0.6}",A294,,"    private int makeSbgp() throws IOException {
        final int offset = auxOffset();

        auxWrite(new byte[] {
                0x00, 0x00, 0x00, 0x1C, // box size
                0x73, 0x62, 0x67, 0x70, // ""sbpg""
                0x00, 0x00, 0x00, 0x00, // default box flags
                0x72, 0x6F, 0x6C, 0x6C, // group type ""roll""
                0x00, 0x00, 0x00, 0x01, // group table size
                0x00, 0x00, 0x00, 0x00, // group[0] total samples (to be set later)
                0x00, 0x00, 0x00, 0x01 // group[0] description index
        });

        return offset + 0x14;
    }
"
org.schabi.newpipe.streams,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/streams/Mp4FromDashWriter.java,Mp4FromDashWriter,makeSgpd,byte[] makeSgpd(),"[874, 899]","{'A328': [(875, 887), (892, 892), (896, 899)], 'A294': [(874, 874), (888, 891), (893, 895)]}","{'A328': 0.6923076923076923, 'A294': 0.3076923076923077}",A328,,"    private byte[] makeSgpd() {
        /*
         * Sample Group Description Box
         *
         * ¿whats does?
         * the table inside of this box gives information about the
         * characteristics of sample groups. The descriptive information is any other
         * information needed to define or characterize the sample group.
         *
         * ¿is replicable this box?
         * NO due lacks of documentation about this box but...
         * most of m4a encoders and ffmpeg uses this box with dummy values (same values)
         */

        final ByteBuffer buffer = ByteBuffer.wrap(new byte[] {
                0x00, 0x00, 0x00, 0x1A, // box size
                0x73, 0x67, 0x70, 0x64, // ""sgpd""
                0x01, 0x00, 0x00, 0x00, // box flags (unknown flag sets)
                0x72, 0x6F, 0x6C, 0x6C, // ¿¿group type??
                0x00, 0x00, 0x00, 0x02, // ¿¿??
                0x00, 0x00, 0x00, 0x01, // ¿¿??
                (byte) 0xFF, (byte) 0xFF // ¿¿??
        });

        return buffer.array();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PlayButtonHelper.java,PlayButtonHelper,initPlaylistControlClickListener,"void initPlaylistControlClickListener(AppCompatActivity,PlaylistControlBinding,PlaylistControlViewHolder)","[34, 61]","{'A298': [(34, 61)]}",{'A298': 1.0},A298,,"    public static void initPlaylistControlClickListener(
            @NonNull final AppCompatActivity activity,
            @NonNull final PlaylistControlBinding playlistControlBinding,
            @NonNull final PlaylistControlViewHolder fragment) {
        // click listener
        playlistControlBinding.playlistCtrlPlayAllButton.setOnClickListener(view -> {
            NavigationHelper.playOnMainPlayer(activity, fragment.getPlayQueue());
            showHoldToAppendToastIfNeeded(activity);
        });
        playlistControlBinding.playlistCtrlPlayPopupButton.setOnClickListener(view -> {
            NavigationHelper.playOnPopupPlayer(activity, fragment.getPlayQueue(), false);
            showHoldToAppendToastIfNeeded(activity);
        });
        playlistControlBinding.playlistCtrlPlayBgButton.setOnClickListener(view -> {
            NavigationHelper.playOnBackgroundPlayer(activity, fragment.getPlayQueue(), false);
            showHoldToAppendToastIfNeeded(activity);
        });

        // long click listener
        playlistControlBinding.playlistCtrlPlayPopupButton.setOnLongClickListener(view -> {
            NavigationHelper.enqueueOnPlayer(activity, fragment.getPlayQueue(), PlayerType.POPUP);
            return true;
        });
        playlistControlBinding.playlistCtrlPlayBgButton.setOnLongClickListener(view -> {
            NavigationHelper.enqueueOnPlayer(activity, fragment.getPlayQueue(), PlayerType.AUDIO);
            return true;
        });
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PlayButtonHelper.java,PlayButtonHelper,showHoldToAppendToastIfNeeded,void showHoldToAppendToastIfNeeded(Context),"[68, 73]","{'A298': [(68, 73)]}",{'A298': 1.0},A298,,"    private static void showHoldToAppendToastIfNeeded(@NonNull final Context context) {
        if (shouldShowHoldToAppendTip(context)) {
            Toast.makeText(context, R.string.hold_to_append, Toast.LENGTH_SHORT).show();
        }

    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PlayButtonHelper.java,PlayButtonHelper,shouldShowHoldToAppendTip,boolean shouldShowHoldToAppendTip(Context),"[86, 89]","{'A298': [(86, 89)]}",{'A298': 1.0},A298,,"    public static boolean shouldShowHoldToAppendTip(@NonNull final Context context) {
        return PreferenceManager.getDefaultSharedPreferences(context)
                .getBoolean(context.getString(R.string.show_hold_to_append_key), true);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,setPreferredImageQuality,void setPreferredImageQuality(PreferredImageQuality),"[26, 28]","{'A305': [(26, 28)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    public static void setPreferredImageQuality(final PreferredImageQuality preferredImageQuality) {
        ImageStrategy.preferredImageQuality = preferredImageQuality;
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,shouldLoadImages,boolean shouldLoadImages(),"[30, 32]","{'A305': [(30, 32)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    public static boolean shouldLoadImages() {
        return preferredImageQuality != PreferredImageQuality.NONE;
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,estimatePixelCount,"double estimatePixelCount(Image,double)","[35, 49]","{'A305': [(35, 49)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    static double estimatePixelCount(final Image image, final double widthOverHeight) {
        if (image.getHeight() == HEIGHT_UNKNOWN) {
            if (image.getWidth() == WIDTH_UNKNOWN) {
                // images whose size is completely unknown will be in their own subgroups, so
                // any one of them will do, hence returning the same value for all of them
                return 0;
            } else {
                return image.getWidth() * image.getWidth() / widthOverHeight;
            }
        } else if (image.getWidth() == WIDTH_UNKNOWN) {
            return image.getHeight() * image.getHeight() * widthOverHeight;
        } else {
            return image.getHeight() * image.getWidth();
        }
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,choosePreferredImage,"String choosePreferredImage(List<Image>,PreferredImageQuality)","[59, 115]","{'A305': [(59, 115)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    @Nullable
    static String choosePreferredImage(@NonNull final List<Image> images,
                                       final PreferredImageQuality nonNoneQuality) {
        // this will be used to estimate the pixel count for images where only one of height or
        // width are known
        final double widthOverHeight = images.stream()
                .filter(image -> image.getHeight() != HEIGHT_UNKNOWN
                        && image.getWidth() != WIDTH_UNKNOWN)
                .mapToDouble(image -> ((double) image.getWidth()) / image.getHeight())
                .findFirst()
                .orElse(1.0);

        final Image.ResolutionLevel preferredLevel = nonNoneQuality.toResolutionLevel();
        final Comparator<Image> initialComparator = Comparator
                // the first step splits the images into groups of resolution levels
                .<Image>comparingInt(i -> {
                    if (i.getEstimatedResolutionLevel() == Image.ResolutionLevel.UNKNOWN) {
                        return 3; // avoid unknowns as much as possible
                    } else if (i.getEstimatedResolutionLevel() == preferredLevel) {
                        return 0; // prefer a matching resolution level
                    } else if (i.getEstimatedResolutionLevel() == Image.ResolutionLevel.MEDIUM) {
                        return 1; // the preferredLevel is only 1 ""step"" away (either HIGH or LOW)
                    } else {
                        return 2; // the preferredLevel is the furthest away possible (2 ""steps"")
                    }
                })
                // then each level's group is further split into two subgroups, one with known image
                // size (which is also the preferred subgroup) and the other without
                .thenComparing(image ->
                        image.getHeight() == HEIGHT_UNKNOWN && image.getWidth() == WIDTH_UNKNOWN);

        // The third step chooses, within each subgroup with known image size, the best image based
        // on how close its size is to BEST_LOW_H or BEST_MEDIUM_H (with proper units). Subgroups
        // without known image size will be left untouched since estimatePixelCount always returns
        // the same number for those.
        final Comparator<Image> finalComparator = switch (nonNoneQuality) {
            case NONE -> initialComparator; // unreachable
            case LOW -> initialComparator.thenComparingDouble(image -> {
                final double pixelCount = estimatePixelCount(image, widthOverHeight);
                return Math.abs(pixelCount - BEST_LOW_H * BEST_LOW_H * widthOverHeight);
            });
            case MEDIUM -> initialComparator.thenComparingDouble(image -> {
                final double pixelCount = estimatePixelCount(image, widthOverHeight);
                return Math.abs(pixelCount - BEST_MEDIUM_H * BEST_MEDIUM_H * widthOverHeight);
            });
            case HIGH -> initialComparator.thenComparingDouble(
                    // this is reversed with a - so that the highest resolution is chosen
                    i -> -estimatePixelCount(i, widthOverHeight));
        };

        return images.stream()
                // using ""min"" basically means ""take the first group, then take the first subgroup,
                // then choose the best image, while ignoring all other groups and subgroups""
                .min(finalComparator)
                .map(Image::getUrl)
                .orElse(null);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,choosePreferredImage,String choosePreferredImage(List<Image>),"[140, 147]","{'A305': [(140, 147)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    @Nullable
    public static String choosePreferredImage(@NonNull final List<Image> images) {
        if (preferredImageQuality == PreferredImageQuality.NONE) {
            return null; // do not load images
        }

        return choosePreferredImage(images, preferredImageQuality);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,imageListToDbUrl,String imageListToDbUrl(List<Image>),"[162, 172]","{'A305': [(162, 172)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    @Nullable
    public static String imageListToDbUrl(@NonNull final List<Image> images) {
        final PreferredImageQuality quality;
        if (preferredImageQuality == PreferredImageQuality.NONE) {
            quality = PreferredImageQuality.MEDIUM;
        } else {
            quality = preferredImageQuality;
        }

        return choosePreferredImage(images, quality);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/ImageStrategy.java,ImageStrategy,dbUrlToImageList,List<Image> dbUrlToImageList(String),"[187, 194]","{'A305': [(187, 194)]}",{'A305': 1.0},A305,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/image/ImageStrategyTest.java,"    @NonNull
    public static List<Image> dbUrlToImageList(@Nullable final String url) {
        if (url == null) {
            return List.of();
        } else {
            return List.of(new Image(url, -1, -1, Image.ResolutionLevel.UNKNOWN));
        }
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,init,void init(Context),"[50, 64]","{'A305': [(50, 64)]}",{'A305': 1.0},A305,,"    public static void init(final Context context) {
        picassoCache = new LruCache(10 * 1024 * 1024);
        picassoDownloaderClient = new OkHttpClient.Builder()
                .cache(new okhttp3.Cache(new File(context.getExternalCacheDir(), ""picasso""),
                        50L * 1024L * 1024L))
                // this should already be the default timeout in OkHttp3, but just to be sure...
                .callTimeout(15, TimeUnit.SECONDS)
                .build();

        picassoInstance = new Picasso.Builder(context)
                .memoryCache(picassoCache) // memory cache
                .downloader(new OkHttp3Downloader(picassoDownloaderClient)) // disk cache
                .defaultBitmapConfig(Bitmap.Config.RGB_565)
                .build();
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,terminate,void terminate(),"[66, 74]","{'A305': [(66, 74)]}",{'A305': 1.0},A305,,"    public static void terminate() {
        picassoCache = null;
        picassoDownloaderClient = null;

        if (picassoInstance != null) {
            picassoInstance.shutdown();
            picassoInstance = null;
        }
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,clearCache,void clearCache(Context),"[76, 84]","{'A305': [(76, 84)]}",{'A305': 1.0},A305,,"    public static void clearCache(final Context context) throws IOException {
        picassoInstance.shutdown();
        picassoCache.clear(); // clear memory cache
        final okhttp3.Cache diskCache = picassoDownloaderClient.cache();
        if (diskCache != null) {
            diskCache.delete(); // clear disk cache
        }
        init(context);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,cancelTag,void cancelTag(Object),"[86, 88]","{'A305': [(86, 88)]}",{'A305': 1.0},A305,,"    public static void cancelTag(final Object tag) {
        picassoInstance.cancelTag(tag);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,setIndicatorsEnabled,void setIndicatorsEnabled(boolean),"[90, 92]","{'A305': [(90, 92)]}",{'A305': 1.0},A305,,"    public static void setIndicatorsEnabled(final boolean enabled) {
        picassoInstance.setIndicatorsEnabled(enabled); // useful for debugging
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadAvatar,RequestCreator loadAvatar(List<Image>),"[95, 97]","{'A305': [(95, 97)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadAvatar(@NonNull final List<Image> images) {
        return loadImageDefault(images, R.drawable.placeholder_person);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadAvatar,RequestCreator loadAvatar(String),"[99, 101]","{'A305': [(99, 101)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadAvatar(@Nullable final String url) {
        return loadImageDefault(url, R.drawable.placeholder_person);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadThumbnail,RequestCreator loadThumbnail(List<Image>),"[103, 105]","{'A305': [(103, 105)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadThumbnail(@NonNull final List<Image> images) {
        return loadImageDefault(images, R.drawable.placeholder_thumbnail_video);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadThumbnail,RequestCreator loadThumbnail(String),"[107, 109]","{'A305': [(107, 109)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadThumbnail(@Nullable final String url) {
        return loadImageDefault(url, R.drawable.placeholder_thumbnail_video);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadDetailsThumbnail,RequestCreator loadDetailsThumbnail(List<Image>),"[111, 114]","{'A305': [(111, 114)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadDetailsThumbnail(@NonNull final List<Image> images) {
        return loadImageDefault(choosePreferredImage(images),
                R.drawable.placeholder_thumbnail_video, false);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadBanner,RequestCreator loadBanner(List<Image>),"[116, 118]","{'A305': [(116, 117)], 'A312': [(118, 118)]}","{'A305': 0.6666666666666666, 'A312': 0.3333333333333333}",A305,,"    public static RequestCreator loadBanner(@NonNull final List<Image> images) {
        return loadImageDefault(images, R.drawable.placeholder_channel_banner);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadPlaylistThumbnail,RequestCreator loadPlaylistThumbnail(List<Image>),"[120, 122]","{'A305': [(120, 122)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadPlaylistThumbnail(@NonNull final List<Image> images) {
        return loadImageDefault(images, R.drawable.placeholder_thumbnail_playlist);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadPlaylistThumbnail,RequestCreator loadPlaylistThumbnail(String),"[124, 126]","{'A305': [(124, 126)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadPlaylistThumbnail(@Nullable final String url) {
        return loadImageDefault(url, R.drawable.placeholder_thumbnail_playlist);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadSeekbarThumbnailPreview,RequestCreator loadSeekbarThumbnailPreview(String),"[128, 130]","{'A305': [(128, 130)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadSeekbarThumbnailPreview(@Nullable final String url) {
        return picassoInstance.load(url);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadNotificationIcon,RequestCreator loadNotificationIcon(String),"[132, 134]","{'A305': [(132, 134)]}",{'A305': 1.0},A305,,"    public static RequestCreator loadNotificationIcon(@Nullable final String url) {
        return loadImageDefault(url, R.drawable.ic_newpipe_triangle_white);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadScaledDownThumbnail,"RequestCreator loadScaledDownThumbnail(Context,List<Image>)","[137, 184]","{'A305': [(137, 152), (154, 157), (159, 160), (162, 163), (165, 168), (170, 184)], 'A295': [(153, 153), (158, 158), (161, 161), (164, 164), (169, 169)]}","{'A305': 0.8958333333333334, 'A295': 0.10416666666666667}",A305,,"    public static RequestCreator loadScaledDownThumbnail(final Context context,
                                                         @NonNull final List<Image> images) {
        // scale down the notification thumbnail for performance
        return PicassoHelper.loadThumbnail(images)
                .transform(new Transformation() {
                    @Override
                    public Bitmap transform(final Bitmap source) {
                        if (DEBUG) {
                            Log.d(TAG, ""Thumbnail - transform() called"");
                        }

                        final float notificationThumbnailWidth = Math.min(
                                context.getResources()
                                        .getDimension(R.dimen.player_notification_thumbnail_width),
                                source.getWidth());

                        final Bitmap result = BitmapCompat.createScaledBitmap(
                                source,
                                (int) notificationThumbnailWidth,
                                (int) (source.getHeight()
                                        / (source.getWidth() / notificationThumbnailWidth)),
                                null,
                                true);

                        if (result == source || !result.isMutable()) {
                            // create a new mutable bitmap to prevent strange crashes on some
                            // devices (see #4638)
                            final Bitmap copied = BitmapCompat.createScaledBitmap(
                                    source,
                                    (int) notificationThumbnailWidth - 1,
                                    (int) (source.getHeight() / (source.getWidth()
                                            / (notificationThumbnailWidth - 1))),
                                    null,
                                    true);
                            source.recycle();
                            return copied;
                        } else {
                            source.recycle();
                            return result;
                        }
                    }

                    @Override
                    public String key() {
                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;
                    }
                });
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,transform,Bitmap transform(Bitmap),"[142, 177]","{'A305': [(142, 152), (154, 157), (159, 160), (162, 163), (165, 168), (170, 177)], 'A295': [(153, 153), (158, 158), (161, 161), (164, 164), (169, 169)]}","{'A305': 0.8611111111111112, 'A295': 0.1388888888888889}",A305,,"                    @Override
                    public Bitmap transform(final Bitmap source) {
                        if (DEBUG) {
                            Log.d(TAG, ""Thumbnail - transform() called"");
                        }

                        final float notificationThumbnailWidth = Math.min(
                                context.getResources()
                                        .getDimension(R.dimen.player_notification_thumbnail_width),
                                source.getWidth());

                        final Bitmap result = BitmapCompat.createScaledBitmap(
                                source,
                                (int) notificationThumbnailWidth,
                                (int) (source.getHeight()
                                        / (source.getWidth() / notificationThumbnailWidth)),
                                null,
                                true);

                        if (result == source || !result.isMutable()) {
                            // create a new mutable bitmap to prevent strange crashes on some
                            // devices (see #4638)
                            final Bitmap copied = BitmapCompat.createScaledBitmap(
                                    source,
                                    (int) notificationThumbnailWidth - 1,
                                    (int) (source.getHeight() / (source.getWidth()
                                            / (notificationThumbnailWidth - 1))),
                                    null,
                                    true);
                            source.recycle();
                            return copied;
                        } else {
                            source.recycle();
                            return result;
                        }
                    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,key,String key(),"[179, 182]","{'A305': [(179, 182)]}",{'A305': 1.0},A305,,"                    @Override
                    public String key() {
                        return PLAYER_THUMBNAIL_TRANSFORMATION_KEY;
                    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,getImageFromCacheIfPresent,Bitmap getImageFromCacheIfPresent(String),"[186, 190]","{'A305': [(187, 189)], 'A293': [(186, 186), (190, 190)]}","{'A305': 0.6, 'A293': 0.4}",A305,,"    @Nullable
    public static Bitmap getImageFromCacheIfPresent(@NonNull final String imageUrl) {
        // URLs in the internal cache finish with \n so we need to add \n to image URLs
        return picassoCache.get(imageUrl + ""\n"");
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadImageDefault,"RequestCreator loadImageDefault(List<Image>,int)","[193, 196]","{'A305': [(193, 196)]}",{'A305': 1.0},A305,,"    private static RequestCreator loadImageDefault(@NonNull final List<Image> images,
                                                   @DrawableRes final int placeholderResId) {
        return loadImageDefault(choosePreferredImage(images), placeholderResId);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadImageDefault,"RequestCreator loadImageDefault(String,int)","[198, 201]","{'A305': [(198, 199)], 'A312': [(200, 201)]}","{'A305': 0.5, 'A312': 0.5}",A305,,"    private static RequestCreator loadImageDefault(@Nullable final String url,
                                                   @DrawableRes final int placeholderResId) {
        return loadImageDefault(url, placeholderResId, true);
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PicassoHelper.java,PicassoHelper,loadImageDefault,"RequestCreator loadImageDefault(String,int,boolean)","[203, 223]","{'A305': [(203, 204), (206, 214), (216, 216), (222, 223)], 'A312': [(205, 205), (215, 215), (217, 221)]}","{'A305': 0.6666666666666666, 'A312': 0.3333333333333333}",A305,,"    private static RequestCreator loadImageDefault(@Nullable final String url,
                                                   @DrawableRes final int placeholderResId,
                                                   final boolean showPlaceholderWhileLoading) {
        // if the URL was chosen with `choosePreferredImage` it will be null, but check again
        // `shouldLoadImages` in case the URL was chosen with `imageListToDbUrl` (which is the case
        // for URLs stored in the database)
        if (isNullOrEmpty(url) || !ImageStrategy.shouldLoadImages()) {
            return picassoInstance
                    .load((String) null)
                    .placeholder(placeholderResId) // show placeholder when no image should load
                    .error(placeholderResId);
        } else {
            final RequestCreator requestCreator = picassoInstance
                    .load(url)
                    .error(placeholderResId);
            if (showPlaceholderWhileLoading) {
                requestCreator.placeholder(placeholderResId);
            }
            return requestCreator;
        }
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PreferredImageQuality.java,PreferredImageQuality,fromPreferenceKey,"PreferredImageQuality fromPreferenceKey(Context,String)","[14, 24]","{'A305': [(14, 24)]}",{'A305': 1.0},A305,,"    public static PreferredImageQuality fromPreferenceKey(final Context context, final String key) {
        if (context.getString(R.string.image_quality_none_key).equals(key)) {
            return NONE;
        } else if (context.getString(R.string.image_quality_low_key).equals(key)) {
            return LOW;
        } else if (context.getString(R.string.image_quality_high_key).equals(key)) {
            return HIGH;
        } else {
            return MEDIUM; // default to medium
        }
    }
"
org.schabi.newpipe.util.image,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/image/PreferredImageQuality.java,PreferredImageQuality,toResolutionLevel,Image.ResolutionLevel toResolutionLevel(),"[26, 38]","{'A305': [(26, 38)]}",{'A305': 1.0},A305,,"    public Image.ResolutionLevel toResolutionLevel() {
        switch (this) {
            case LOW:
                return Image.ResolutionLevel.LOW;
            case MEDIUM:
                return Image.ResolutionLevel.MEDIUM;
            case HIGH:
                return Image.ResolutionLevel.HIGH;
            default:
            case NONE:
                return Image.ResolutionLevel.UNKNOWN;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamTypeUtil.java,StreamTypeUtil,isAudio,boolean isAudio(StreamType),"[20, 24]","{'A333': [(20, 24)]}",{'A333': 1.0},A333,,"    public static boolean isAudio(final StreamType streamType) {
        return streamType == StreamType.AUDIO_STREAM
                || streamType == StreamType.AUDIO_LIVE_STREAM
                || streamType == StreamType.POST_LIVE_AUDIO_STREAM;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamTypeUtil.java,StreamTypeUtil,isVideo,boolean isVideo(StreamType),"[33, 37]","{'A333': [(33, 37)]}",{'A333': 1.0},A333,,"    public static boolean isVideo(final StreamType streamType) {
        return streamType == StreamType.VIDEO_STREAM
                || streamType == StreamType.LIVE_STREAM
                || streamType == StreamType.POST_LIVE_STREAM;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamTypeUtil.java,StreamTypeUtil,isLiveStream,boolean isLiveStream(StreamType),"[46, 49]","{'A300': [(46, 49)]}",{'A300': 1.0},A300,,"    public static boolean isLiveStream(final StreamType streamType) {
        return streamType == StreamType.LIVE_STREAM
                || streamType == StreamType.AUDIO_LIVE_STREAM;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,setTheme,void setTheme(Context),"[59, 61]","{'A301': [(60, 61)], 'A294': [(59, 59)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    public static void setTheme(final Context context) {
        setTheme(context, -1);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,setTheme,"void setTheme(Context,int)","[74, 76]","{'A301': [(75, 76)], 'A294': [(74, 74)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    public static void setTheme(final Context context, final int serviceId) {
        context.setTheme(getThemeForService(context, serviceId));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,isLightThemeSelected,boolean isLightThemeSelected(Context),"[84, 91]","{'A301': [(91, 91)], 'A305': [(85, 85), (88, 89)], 'A322': [(86, 87), (90, 90)], 'A294': [(84, 84)]}","{'A301': 0.125, 'A305': 0.375, 'A322': 0.375, 'A294': 0.125}",A305,,"    public static boolean isLightThemeSelected(final Context context) {
        final String selectedThemeKey = getSelectedThemeKey(context);
        final Resources res = context.getResources();

        return selectedThemeKey.equals(res.getString(R.string.light_theme_key))
                || (selectedThemeKey.equals(res.getString(R.string.auto_device_theme_key))
                && !isDeviceDarkThemeEnabled(context));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getDialogTheme,int getDialogTheme(Context),"[99, 102]","{'A301': [(99, 99), (101, 102)], 'A294': [(100, 100)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    @StyleRes
    public static int getDialogTheme(final Context context) {
        return isLightThemeSelected(context) ? R.style.LightDialogTheme : R.style.DarkDialogTheme;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getMinWidthDialogTheme,int getMinWidthDialogTheme(Context),"[110, 114]","{'A301': [(110, 110), (114, 114)], 'A294': [(111, 113)]}","{'A301': 0.4, 'A294': 0.6}",A294,,"    @StyleRes
    public static int getMinWidthDialogTheme(final Context context) {
        return isLightThemeSelected(context) ? R.style.LightDialogMinWidthTheme
                : R.style.DarkDialogMinWidthTheme;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getThemeForService,"int getThemeForService(Context,int)","[124, 181]","{'A301': [(124, 124), (130, 130), (132, 132), (154, 155), (157, 161), (164, 165), (172, 172), (176, 179), (181, 181)], 'A305': [(127, 129), (131, 131), (134, 139), (142, 145), (147, 147), (151, 151), (156, 156), (163, 163), (166, 167), (169, 169), (174, 174), (180, 180)], 'A322': [(126, 126), (140, 141), (146, 146), (148, 150), (152, 152)], 'A294': [(125, 125), (153, 153), (162, 162), (168, 168), (170, 171)], 'A312': [(133, 133)], 'A302': [(173, 173), (175, 175)]}","{'A301': 0.3103448275862069, 'A305': 0.39655172413793105, 'A322': 0.13793103448275862, 'A294': 0.10344827586206896, 'A312': 0.017241379310344827, 'A302': 0.034482758620689655}",A305,,"    @StyleRes
    public static int getThemeForService(final Context context, final int serviceId) {
        final Resources res = context.getResources();
        final String lightThemeKey = res.getString(R.string.light_theme_key);
        final String blackThemeKey = res.getString(R.string.black_theme_key);
        final String automaticDeviceThemeKey = res.getString(R.string.auto_device_theme_key);

        final String selectedThemeKey = getSelectedThemeKey(context);


        int baseTheme = R.style.DarkTheme; // default to dark theme
        if (selectedThemeKey.equals(lightThemeKey)) {
            baseTheme = R.style.LightTheme;
        } else if (selectedThemeKey.equals(blackThemeKey)) {
            baseTheme = R.style.BlackTheme;
        } else if (selectedThemeKey.equals(automaticDeviceThemeKey)) {

            if (isDeviceDarkThemeEnabled(context)) {
                // use the dark theme variant preferred by the user
                final String selectedNightThemeKey = getSelectedNightThemeKey(context);
                if (selectedNightThemeKey.equals(blackThemeKey)) {
                    baseTheme = R.style.BlackTheme;
                } else {
                    baseTheme = R.style.DarkTheme;
                }
            } else {
                // there is only one day theme
                baseTheme = R.style.LightTheme;
            }
        }

        if (serviceId <= -1) {
            return baseTheme;
        }

        final StreamingService service;
        try {
            service = NewPipe.getService(serviceId);
        } catch (final ExtractionException ignored) {
            return baseTheme;
        }

        String themeName = ""DarkTheme""; // default
        if (baseTheme == R.style.LightTheme) {
            themeName = ""LightTheme"";
        } else if (baseTheme == R.style.BlackTheme) {
            themeName = ""BlackTheme"";
        }

        themeName += ""."" + service.getServiceInfo().getName();
        final int resourceId = context.getResources()
                .getIdentifier(themeName, ""style"", context.getPackageName());

        if (resourceId > 0) {
            return resourceId;
        }
        return baseTheme;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getSettingsThemeStyle,int getSettingsThemeStyle(Context),"[183, 214]","{'A305': [(183, 214)]}",{'A305': 1.0},A305,,"    @StyleRes
    public static int getSettingsThemeStyle(final Context context) {
        final Resources res = context.getResources();
        final String lightTheme = res.getString(R.string.light_theme_key);
        final String blackTheme = res.getString(R.string.black_theme_key);
        final String automaticDeviceTheme = res.getString(R.string.auto_device_theme_key);


        final String selectedTheme = getSelectedThemeKey(context);

        if (selectedTheme.equals(lightTheme)) {
            return R.style.LightSettingsTheme;
        } else if (selectedTheme.equals(blackTheme)) {
            return R.style.BlackSettingsTheme;
        } else if (selectedTheme.equals(automaticDeviceTheme)) {
            if (isDeviceDarkThemeEnabled(context)) {
                // use the dark theme variant preferred by the user
                final String selectedNightTheme = getSelectedNightThemeKey(context);
                if (selectedNightTheme.equals(blackTheme)) {
                    return R.style.BlackSettingsTheme;
                } else {
                    return R.style.DarkSettingsTheme;
                }
            } else {
                // there is only one day theme
                return R.style.LightSettingsTheme;
            }
        } else {
            // default to dark theme
            return R.style.DarkSettingsTheme;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,resolveColorFromAttr,"int resolveColorFromAttr(Context,int)","[223, 232]","{'A301': [(224, 232)], 'A294': [(223, 223)]}","{'A301': 0.9, 'A294': 0.1}",A301,,"    public static int resolveColorFromAttr(final Context context, @AttrRes final int attrColor) {
        final TypedValue value = new TypedValue();
        context.getTheme().resolveAttribute(attrColor, value, true);

        if (value.resourceId != 0) {
            return ContextCompat.getColor(context, value.resourceId);
        }

        return value.data;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,resolveDrawable,"Drawable resolveDrawable(Context,int)","[241, 246]","{'A300': [(243, 244), (246, 246)], 'A295': [(241, 242), (245, 245)]}","{'A300': 0.5, 'A295': 0.5}",A300,,"    public static Drawable resolveDrawable(@NonNull final Context context,
                                           @AttrRes final int attrResId) {
        final TypedValue typedValue = new TypedValue();
        context.getTheme().resolveAttribute(attrResId, typedValue, true);
        return AppCompatResources.getDrawable(context, typedValue.resourceId);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getAndroidDimenPx,"int getAndroidDimenPx(Context,String)","[256, 262]","{'A305': [(256, 262)]}",{'A305': 1.0},A305,,"    public static int getAndroidDimenPx(@NonNull final Context context, final String name) {
        final int resId = context.getResources().getIdentifier(name, ""dimen"", ""android"");
        if (resId <= 0) {
            return 0;
        }
        return context.getResources().getDimensionPixelSize(resId);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getSelectedThemeKey,String getSelectedThemeKey(Context),"[264, 269]","{'A301': [(269, 269)], 'A305': [(264, 264)], 'A294': [(265, 268)]}","{'A301': 0.16666666666666666, 'A305': 0.16666666666666666, 'A294': 0.6666666666666666}",A294,,"    private static String getSelectedThemeKey(final Context context) {
        final String themeKey = context.getString(R.string.theme_key);
        final String defaultTheme = context.getResources().getString(R.string.default_theme_value);
        return PreferenceManager.getDefaultSharedPreferences(context)
                .getString(themeKey, defaultTheme);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getSelectedNightThemeKey,String getSelectedNightThemeKey(Context),"[271, 277]","{'A305': [(271, 271)], 'A322': [(272, 277)]}","{'A305': 0.14285714285714285, 'A322': 0.8571428571428571}",A322,,"    private static String getSelectedNightThemeKey(final Context context) {
        final String nightThemeKey = context.getString(R.string.night_theme_key);
        final String defaultNightTheme = context.getResources()
                .getString(R.string.default_night_theme_value);
        return PreferenceManager.getDefaultSharedPreferences(context)
                .getString(nightThemeKey, defaultNightTheme);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,setTitleToAppCompatActivity,"void setTitleToAppCompatActivity(Activity,CharSequence)","[286, 294]","{'A305': [(286, 294)]}",{'A305': 1.0},A305,,"    public static void setTitleToAppCompatActivity(@Nullable final Activity activity,
                                                   final CharSequence title) {
        if (activity instanceof AppCompatActivity) {
            final ActionBar actionBar = ((AppCompatActivity) activity).getSupportActionBar();
            if (actionBar != null) {
                actionBar.setTitle(title);
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,isDeviceDarkThemeEnabled,boolean isDeviceDarkThemeEnabled(Context),"[306, 317]","{'A322': [(306, 317)]}",{'A322': 1.0},A322,,"    public static boolean isDeviceDarkThemeEnabled(final Context context) {
        final int deviceTheme = context.getResources().getConfiguration().uiMode
                & Configuration.UI_MODE_NIGHT_MASK;
        switch (deviceTheme) {
            case Configuration.UI_MODE_NIGHT_YES:
                return true;
            case Configuration.UI_MODE_NIGHT_UNDEFINED:
            case Configuration.UI_MODE_NIGHT_NO:
            default:
                return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,setDayNightMode,void setDayNightMode(Context),"[319, 321]","{'A312': [(319, 321)]}",{'A312': 1.0},A312,,"    public static void setDayNightMode(final Context context) {
        setDayNightMode(context, ThemeHelper.getSelectedThemeKey(context));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,setDayNightMode,"void setDayNightMode(Context,String)","[323, 334]","{'A312': [(323, 334)]}",{'A312': 1.0},A312,,"    public static void setDayNightMode(final Context context, final String selectedThemeKey) {
        final Resources res = context.getResources();

        if (selectedThemeKey.equals(res.getString(R.string.light_theme_key))) {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_NO);
        } else if (selectedThemeKey.equals(res.getString(R.string.dark_theme_key))
                || selectedThemeKey.equals(res.getString(R.string.black_theme_key))) {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_YES);
        } else {
            AppCompatDelegate.setDefaultNightMode(AppCompatDelegate.MODE_NIGHT_FOLLOW_SYSTEM);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,shouldUseGridLayout,boolean shouldUseGridLayout(Context),"[343, 346]","{'A305': [(343, 343), (346, 346)], 'A339': [(344, 345)]}","{'A305': 0.5, 'A339': 0.5}",A305,,"    public static boolean shouldUseGridLayout(final Context context) {
        final ItemViewMode mode = getItemViewMode(context);
        return mode == ItemViewMode.GRID;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getGridSpanCountChannels,int getGridSpanCountChannels(Context),"[354, 357]","{'A305': [(354, 357)]}",{'A305': 1.0},A305,,"    public static int getGridSpanCountChannels(final Context context) {
        return getGridSpanCount(context,
                context.getResources().getDimensionPixelSize(R.dimen.channel_item_grid_min_width));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getItemViewMode,ItemViewMode getItemViewMode(Context),"[364, 387]","{'A339': [(364, 387)]}",{'A339': 1.0},A339,,"    public static ItemViewMode getItemViewMode(final Context context) {
        final String listMode = PreferenceManager.getDefaultSharedPreferences(context)
                .getString(context.getString(R.string.list_view_mode_key),
                        context.getString(R.string.list_view_mode_value));
        final ItemViewMode result;
        if (listMode.equals(context.getString(R.string.list_view_mode_list_key))) {
            result = ItemViewMode.LIST;
        } else if (listMode.equals(context.getString(R.string.list_view_mode_grid_key))) {
            result = ItemViewMode.GRID;
        } else if (listMode.equals(context.getString(R.string.list_view_mode_card_key))) {
            result = ItemViewMode.CARD;
        } else {
            // Auto mode - evaluate whether to use Grid based on screen real estate.
            final Configuration configuration = context.getResources().getConfiguration();
            final boolean useGrid = configuration.orientation == Configuration.ORIENTATION_LANDSCAPE
                    && configuration.isLayoutSizeAtLeast(Configuration.SCREENLAYOUT_SIZE_LARGE);
            if (useGrid) {
                result = ItemViewMode.GRID;
            } else {
                result = ItemViewMode.LIST;
            }
        }
        return result;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getGridSpanCountStreams,int getGridSpanCountStreams(Context),"[397, 402]","{'A305': [(397, 402)]}",{'A305': 1.0},A305,,"    public static int getGridSpanCountStreams(final Context context) {
        final Resources res = context.getResources();
        return getGridSpanCount(context,
                res.getDimensionPixelSize(R.dimen.video_item_grid_thumbnail_image_width)
                        + res.getDimensionPixelSize(R.dimen.video_item_search_padding) * 2);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ThemeHelper.java,ThemeHelper,getGridSpanCount,"int getGridSpanCount(Context,int)","[412, 414]","{'A305': [(412, 414)]}",{'A305': 1.0},A305,,"    public static int getGridSpanCount(final Context context, final int minWidth) {
        return Math.max(1, context.getResources().getDisplayMetrics().widthPixels / minWidth);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getAll,List<T> getAll(),"[76, 78]","{'A301': [(76, 78)]}",{'A301': 1.0},A301,,"    public List<T> getAll() {
        return streamsWrapper.getStreamsList();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getAllSecondary,SparseArrayCompat<SecondaryStreamHelper<U>> getAllSecondary(),"[80, 82]","{'A295': [(80, 80)], 'A328': [(81, 82)]}","{'A295': 0.3333333333333333, 'A328': 0.6666666666666666}",A328,,"    public SparseArrayCompat<SecondaryStreamHelper<U>> getAllSecondary() {
        return secondaryStreams;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getCount,int getCount(),"[84, 87]","{'A301': [(84, 87)]}",{'A301': 1.0},A301,,"    @Override
    public int getCount() {
        return streamsWrapper.getStreamsList().size();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getItem,T getItem(int),"[89, 92]","{'A301': [(89, 89), (91, 92)], 'A294': [(90, 90)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    @Override
    public T getItem(final int position) {
        return streamsWrapper.getStreamsList().get(position);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getItemId,long getItemId(int),"[94, 97]","{'A301': [(94, 94), (96, 97)], 'A294': [(95, 95)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"    @Override
    public long getItemId(final int position) {
        return position;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getDropDownView,"View getDropDownView(int,View,ViewGroup)","[99, 104]","{'A301': [(99, 99), (103, 104)], 'A333': [(100, 101)], 'A294': [(102, 102)]}","{'A301': 0.5, 'A333': 0.3333333333333333, 'A294': 0.16666666666666666}",A301,,"    @Override
    public View getDropDownView(final int position,
                                final View convertView,
                                final ViewGroup parent) {
        return getCustomView(position, convertView, parent, true);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getView,"View getView(int,View,ViewGroup)","[106, 110]","{'A301': [(106, 106), (110, 110)], 'A294': [(107, 109)]}","{'A301': 0.4, 'A294': 0.6}",A294,,"    @Override
    public View getView(final int position, final View convertView, final ViewGroup parent) {
        return getCustomView(((Spinner) parent).getSelectedItemPosition(),
                convertView, parent, false);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,getCustomView,"View getCustomView(int,View,ViewGroup,boolean)","[112, 203]","{'A301': [(119, 119), (122, 129), (131, 135), (142, 147), (151, 152), (164, 164), (170, 172), (181, 185), (199, 203)], 'A298': [(130, 130)], 'A333': [(112, 115), (154, 158), (166, 166), (169, 169), (175, 176), (189, 196)], 'A295': [(117, 117), (141, 141), (173, 173)], 'A305': [(165, 165), (167, 168)], 'A328': [(137, 138), (140, 140), (148, 150), (159, 163), (174, 174), (177, 180), (186, 188), (197, 198)], 'A294': [(116, 116), (118, 118), (120, 121), (136, 136), (153, 153)], 'A300': [(139, 139)]}","{'A301': 0.391304347826087, 'A298': 0.010869565217391304, 'A333': 0.22826086956521738, 'A295': 0.03260869565217391, 'A305': 0.03260869565217391, 'A328': 0.22826086956521738, 'A294': 0.06521739130434782, 'A300': 0.010869565217391304}",A301,,"    @NonNull
    private View getCustomView(final int position,
                               final View view,
                               final ViewGroup parent,
                               final boolean isDropdownItem) {
        final var context = parent.getContext();
        View convertView = view;
        if (convertView == null) {
            convertView = LayoutInflater.from(context).inflate(
                    R.layout.stream_quality_item, parent, false);
        }

        final ImageView woSoundIconView = convertView.findViewById(R.id.wo_sound_icon);
        final TextView formatNameView = convertView.findViewById(R.id.stream_format_name);
        final TextView qualityView = convertView.findViewById(R.id.stream_quality);
        final TextView sizeView = convertView.findViewById(R.id.stream_size);

        final T stream = getItem(position);
        final MediaFormat mediaFormat = streamsWrapper.getFormat(position);

        int woSoundIconVisibility = View.GONE;
        String qualityString;

        if (stream instanceof VideoStream) {
            final VideoStream videoStream = ((VideoStream) stream);
            qualityString = videoStream.getResolution();

            if (hasAnyVideoOnlyStreamWithNoSecondaryStream) {
                if (videoStream.isVideoOnly()) {
                    woSoundIconVisibility = secondaryStreams.get(position) != null
                            // It has a secondary stream associated with it, so check if it's a
                            // dropdown view so it doesn't look out of place (missing margin)
                            // compared to those that don't.
                            ? (isDropdownItem ? View.INVISIBLE : View.GONE)
                            // It doesn't have a secondary stream, icon is visible no matter what.
                            : View.VISIBLE;
                } else if (isDropdownItem) {
                    woSoundIconVisibility = View.INVISIBLE;
                }
            }
        } else if (stream instanceof AudioStream) {
            final AudioStream audioStream = ((AudioStream) stream);
            if (audioStream.getAverageBitrate() > 0) {
                qualityString = audioStream.getAverageBitrate() + ""kbps"";
            } else {
                qualityString = context.getString(R.string.unknown_quality);
            }
        } else if (stream instanceof SubtitlesStream) {
            qualityString = ((SubtitlesStream) stream).getDisplayLanguageName();
            if (((SubtitlesStream) stream).isAutoGenerated()) {
                qualityString += "" ("" + context.getString(R.string.caption_auto_generated) + "")"";
            }
        } else {
            if (mediaFormat == null) {
                qualityString = context.getString(R.string.unknown_quality);
            } else {
                qualityString = mediaFormat.getSuffix();
            }
        }

        if (streamsWrapper.getSizeInBytes(position) > 0) {
            final var secondary = secondaryStreams.get(position);
            if (secondary != null) {
                final long size = secondary.getSizeInBytes()
                        + streamsWrapper.getSizeInBytes(position);
                sizeView.setText(Utility.formatBytes(size));
            } else {
                sizeView.setText(streamsWrapper.getFormattedSize(position));
            }
            sizeView.setVisibility(View.VISIBLE);
        } else {
            sizeView.setVisibility(View.GONE);
        }

        if (stream instanceof SubtitlesStream) {
            formatNameView.setText(((SubtitlesStream) stream).getLanguageTag());
        } else {
            if (mediaFormat == null) {
                formatNameView.setText(context.getString(R.string.unknown_format));
            } else if (mediaFormat == MediaFormat.WEBMA_OPUS) {
                // noinspection AndroidLintSetTextI18n
                formatNameView.setText(""opus"");
            } else {
                formatNameView.setText(mediaFormat.getName());
            }
        }

        qualityView.setText(qualityString);
        woSoundIconView.setVisibility(woSoundIconVisibility);

        return convertView;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter,checkHasAnyVideoOnlyStreamWithNoSecondaryStream,boolean checkHasAnyVideoOnlyStreamWithNoSecondaryStream(),"[209, 221]","{'A301': [(210, 213), (215, 221)], 'A295': [(214, 214)], 'A300': [(209, 209)]}","{'A301': 0.8461538461538461, 'A295': 0.07692307692307693, 'A300': 0.07692307692307693}",A301,,"    private boolean checkHasAnyVideoOnlyStreamWithNoSecondaryStream() {
        for (int i = 0; i < streamsWrapper.getStreamsList().size(); i++) {
            final T stream = streamsWrapper.getStreamsList().get(i);
            if (stream instanceof VideoStream) {
                final boolean videoOnly = ((VideoStream) stream).isVideoOnly();
                if (videoOnly && secondaryStreams.get(i) == null) {
                    return true;
                }
            }
        }

        return false;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,fetchMoreInfoForWrapper,Single<Boolean> fetchMoreInfoForWrapper(StreamInfoWrapper<X>),"[256, 288]","{'A301': [(259, 260), (265, 266), (280, 288)], 'A298': [(257, 258), (262, 264), (267, 279)], 'A333': [(256, 256)], 'A294': [(261, 261)]}","{'A301': 0.3939393939393939, 'A298': 0.5454545454545454, 'A333': 0.030303030303030304, 'A294': 0.030303030303030304}",A298,,"        @NonNull
        public static <X extends Stream> Single<Boolean> fetchMoreInfoForWrapper(
                final StreamInfoWrapper<X> streamsWrapper) {
            final Callable<Boolean> fetchAndSet = () -> {
                boolean hasChanged = false;
                for (final X stream : streamsWrapper.getStreamsList()) {
                    final boolean changeSize = streamsWrapper.getSizeInBytes(stream) <= SIZE_UNSET;
                    final boolean changeFormat = stream.getFormat() == null;
                    if (!changeSize && !changeFormat) {
                        continue;
                    }
                    final Response response = DownloaderImpl.getInstance()
                            .head(stream.getContent());
                    if (changeSize) {
                        final String contentLength = response.getHeader(""Content-Length"");
                        if (!isNullOrEmpty(contentLength)) {
                            streamsWrapper.setSize(stream, Long.parseLong(contentLength));
                            hasChanged = true;
                        }
                    }
                    if (changeFormat) {
                        hasChanged = retrieveMediaFormat(stream, streamsWrapper, response)
                                || hasChanged;
                    }
                }
                return hasChanged;
            };

            return Single.fromCallable(fetchAndSet)
                    .subscribeOn(Schedulers.io())
                    .observeOn(AndroidSchedulers.mainThread())
                    .onErrorReturnItem(true);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,retrieveMediaFormat,"boolean retrieveMediaFormat(X,StreamInfoWrapper<X>,Response)","[299, 308]","{'A298': [(299, 308)]}",{'A298': 1.0},A298,,"        @VisibleForTesting
        public static <X extends Stream> boolean retrieveMediaFormat(
                @NonNull final X stream,
                @NonNull final StreamInfoWrapper<X> streamsWrapper,
                @NonNull final Response response) {
            return retrieveMediaFormatFromFileTypeHeaders(stream, streamsWrapper, response)
                    || retrieveMediaFormatFromContentDispositionHeader(
                            stream, streamsWrapper, response)
                    || retrieveMediaFormatFromContentTypeHeader(stream, streamsWrapper, response);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,retrieveMediaFormatFromFileTypeHeaders,"boolean retrieveMediaFormatFromFileTypeHeaders(X,StreamInfoWrapper<X>,Response)","[310, 330]","{'A298': [(310, 330)]}",{'A298': 1.0},A298,,"        @VisibleForTesting
        public static <X extends Stream> boolean retrieveMediaFormatFromFileTypeHeaders(
                @NonNull final X stream,
                @NonNull final StreamInfoWrapper<X> streamsWrapper,
                @NonNull final Response response) {
            // try to use additional headers from CDNs or servers,
            // e.g. x-amz-meta-file-type (e.g. for SoundCloud)
            final List<String> keys = response.responseHeaders().keySet().stream()
                    .filter(k -> k.endsWith(""file-type"")).collect(Collectors.toList());
            if (!keys.isEmpty()) {
                for (final String key : keys) {
                    final String suffix = response.getHeader(key);
                    final MediaFormat format = MediaFormat.getFromSuffix(suffix);
                    if (format != null) {
                        streamsWrapper.setFormat(stream, format);
                        return true;
                    }
                }
            }
            return false;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,retrieveMediaFormatFromContentDispositionHeader,"boolean retrieveMediaFormatFromContentDispositionHeader(X,StreamInfoWrapper<X>,Response)","[345, 393]","{'A298': [(345, 393)]}",{'A298': 1.0},A298,,"        @VisibleForTesting
        public static <X extends Stream> boolean retrieveMediaFormatFromContentDispositionHeader(
                @NonNull final X stream,
                @NonNull final StreamInfoWrapper<X> streamsWrapper,
                @NonNull final Response response) {
            // parse the Content-Disposition header,
            // see
            // there can be two filename directives
            String contentDisposition = response.getHeader(""Content-Disposition"");
            if (contentDisposition == null) {
                return false;
            }
            try {
                contentDisposition = Utils.decodeUrlUtf8(contentDisposition);
                final String[] parts = contentDisposition.split("";"");
                for (String part : parts) {
                    final String fileName;
                    part = part.trim();

                    // extract the filename
                    if (part.startsWith(""filename="")) {
                        // remove directive and decode
                        fileName = Utils.decodeUrlUtf8(part.substring(9));
                    } else if (part.startsWith(""filename*="")) {
                        fileName = Utils.decodeUrlUtf8(part.substring(10));
                    } else {
                        continue;
                    }

                    // extract the file extension / suffix
                    final String[] p = fileName.split(""\\."");
                    String suffix = p[p.length - 1];
                    if (suffix.endsWith(""\"""") || suffix.endsWith(""'"")) {
                        // remove trailing quotes if present, end index is exclusive
                        suffix = suffix.substring(0, suffix.length() - 1);
                    }

                    // get the corresponding media format
                    final MediaFormat format = MediaFormat.getFromSuffix(suffix);
                    if (format != null) {
                        streamsWrapper.setFormat(stream, format);
                        return true;
                    }
                }
            } catch (final Exception ignored) {
                // fail silently
            }
            return false;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,retrieveMediaFormatFromContentTypeHeader,"boolean retrieveMediaFormatFromContentTypeHeader(X,StreamInfoWrapper<X>,Response)","[395, 420]","{'A298': [(395, 401), (413, 414), (417, 420)], 'A305': [(402, 412), (415, 416)]}","{'A298': 0.5, 'A305': 0.5}",A298,,"        @VisibleForTesting
        public static <X extends Stream> boolean retrieveMediaFormatFromContentTypeHeader(
                @NonNull final X stream,
                @NonNull final StreamInfoWrapper<X> streamsWrapper,
                @NonNull final Response response) {
            // try to get the format by content type
            // some mime types are not unique for every format, those are omitted
            final String contentTypeHeader = response.getHeader(""Content-Type"");
            if (contentTypeHeader == null) {
                return false;
            }

            @Nullable MediaFormat foundFormat = null;
            for (final MediaFormat format : MediaFormat.getAllFromMimeType(contentTypeHeader)) {
                if (foundFormat == null) {
                    foundFormat = format;
                } else if (foundFormat.id != format.id) {
                    return false;
                }
            }
            if (foundFormat != null) {
                streamsWrapper.setFormat(stream, foundFormat);
                return true;
            }
            return false;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,resetInfo,void resetInfo(),"[422, 428]","{'A298': [(422, 422), (424, 427)], 'A386': [(423, 423), (428, 428)]}","{'A298': 0.7142857142857143, 'A386': 0.2857142857142857}",A298,,"        public void resetInfo() {
            Arrays.fill(streamSizes, SIZE_UNSET);
            for (int i = 0; i < streamsList.size(); i++) {
                streamFormats[i] = streamsList.get(i) == null // test for invalid streams
                        ? null : streamsList.get(i).getFormat();
            }
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,empty,StreamInfoWrapper<X> empty(),"[430, 433]","{'A298': [(430, 430), (432, 432)], 'A294': [(431, 431), (433, 433)]}","{'A298': 0.5, 'A294': 0.5}",A298,,"        public static <X extends Stream> StreamInfoWrapper<X> empty() {
            //noinspection unchecked
            return (StreamInfoWrapper<X>) EMPTY;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,getStreamsList,List<T> getStreamsList(),"[435, 437]","{'A301': [(435, 437)]}",{'A301': 1.0},A301,,"        public List<T> getStreamsList() {
            return streamsList;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,getSizeInBytes,long getSizeInBytes(int),"[439, 441]","{'A301': [(440, 441)], 'A294': [(439, 439)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"        public long getSizeInBytes(final int streamIndex) {
            return streamSizes[streamIndex];
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,getSizeInBytes,long getSizeInBytes(T),"[443, 445]","{'A301': [(444, 445)], 'A294': [(443, 443)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"        public long getSizeInBytes(final T stream) {
            return streamSizes[streamsList.indexOf(stream)];
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,getFormattedSize,String getFormattedSize(int),"[447, 449]","{'A301': [(449, 449)], 'A328': [(448, 448)], 'A294': [(447, 447)]}","{'A301': 0.3333333333333333, 'A328': 0.3333333333333333, 'A294': 0.3333333333333333}",A301,,"        public String getFormattedSize(final int streamIndex) {
            return formatSize(getSizeInBytes(streamIndex));
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,formatSize,String formatSize(long),"[451, 456]","{'A301': [(456, 456)], 'A328': [(452, 455)], 'A294': [(451, 451)]}","{'A301': 0.16666666666666666, 'A328': 0.6666666666666666, 'A294': 0.16666666666666666}",A328,,"        private String formatSize(final long size) {
            if (size > -1) {
                return Utility.formatBytes(size);
            }
            return unknownSize;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,setSize,"void setSize(T,long)","[458, 460]","{'A301': [(459, 460)], 'A294': [(458, 458)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"        public void setSize(final T stream, final long sizeInBytes) {
            streamSizes[streamsList.indexOf(stream)] = sizeInBytes;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,getFormat,MediaFormat getFormat(int),"[462, 464]","{'A298': [(462, 464)]}",{'A298': 1.0},A298,,"        public MediaFormat getFormat(final int streamIndex) {
            return streamFormats[streamIndex];
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StreamItemAdapter.java,StreamItemAdapter.StreamInfoWrapper,setFormat,"void setFormat(T,MediaFormat)","[466, 468]","{'A298': [(466, 468)]}",{'A298': 1.0},A298,,"        public void setFormat(final T stream, final MediaFormat format) {
            streamFormats[streamsList.indexOf(stream)] = format;
        }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/LongPressLinkMovementMethod.java,LongPressLinkMovementMethod,onTouchEvent,"boolean onTouchEvent(TextView,Spannable,MotionEvent)","[28, 67]","{'A333': [(28, 67)]}",{'A333': 1.0},A333,,"    @Override
    public boolean onTouchEvent(@NonNull final TextView widget,
                                @NonNull final Spannable buffer,
                                @NonNull final MotionEvent event) {
        final int action = event.getAction();

        if (action == MotionEvent.ACTION_CANCEL && longClickHandler != null) {
            longClickHandler.removeCallbacksAndMessages(null);
        }

        if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_DOWN) {
            final int offset = getOffsetForHorizontalLine(widget, event);
            final LongPressClickableSpan[] link = buffer.getSpans(offset, offset,
                    LongPressClickableSpan.class);

            if (link.length != 0) {
                if (action == MotionEvent.ACTION_UP) {
                    if (longClickHandler != null) {
                        longClickHandler.removeCallbacksAndMessages(null);
                    }
                    if (!isLongPressed) {
                        link[0].onClick(widget);
                    }
                    isLongPressed = false;
                } else {
                    Selection.setSelection(buffer, buffer.getSpanStart(link[0]),
                            buffer.getSpanEnd(link[0]));
                    if (longClickHandler != null) {
                        longClickHandler.postDelayed(() -> {
                            link[0].onLongClick(widget);
                            isLongPressed = true;
                        }, LONG_PRESS_TIME);
                    }
                }
                return true;
            }
        }

        return super.onTouchEvent(widget, buffer, event);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/LongPressLinkMovementMethod.java,LongPressLinkMovementMethod,getInstance,MovementMethod getInstance(),"[69, 76]","{'A333': [(69, 76)]}",{'A333': 1.0},A333,,"    public static MovementMethod getInstance() {
        if (instance == null) {
            instance = new LongPressLinkMovementMethod();
            instance.longClickHandler = new Handler(Looper.myLooper());
        }

        return instance;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/InternalUrlsHandler.java,InternalUrlsHandler,handleUrlCommentsTimestamp,"boolean handleUrlCommentsTimestamp(CompositeDisposable,Context,String)","[55, 60]","{'A305': [(59, 59)], 'A293': [(55, 58), (60, 60)]}","{'A305': 0.16666666666666666, 'A293': 0.8333333333333334}",A293,,"    public static boolean handleUrlCommentsTimestamp(@NonNull final CompositeDisposable
                                                             disposables,
                                                     final Context context,
                                                     @NonNull final String url) {
        return handleUrl(context, url, HASHTAG_TIMESTAMP_PATTERN, disposables);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/InternalUrlsHandler.java,InternalUrlsHandler,handleUrlDescriptionTimestamp,"boolean handleUrlDescriptionTimestamp(CompositeDisposable,Context,String)","[75, 80]","{'A305': [(79, 79)], 'A293': [(75, 78), (80, 80)]}","{'A305': 0.16666666666666666, 'A293': 0.8333333333333334}",A293,,"    public static boolean handleUrlDescriptionTimestamp(@NonNull final CompositeDisposable
                                                                disposables,
                                                        final Context context,
                                                        @NonNull final String url) {
        return handleUrl(context, url, AMPERSAND_TIMESTAMP_PATTERN, disposables);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/InternalUrlsHandler.java,InternalUrlsHandler,handleUrl,"boolean handleUrl(Context,String,Pattern,CompositeDisposable)","[95, 129]","{'A305': [(95, 95), (97, 98), (100, 100), (103, 103), (111, 112), (116, 118), (122, 122), (124, 124)], 'A293': [(96, 96), (99, 99), (101, 102), (110, 110), (113, 115), (119, 121), (123, 123), (125, 129)], 'A298': [(104, 109)]}","{'A305': 0.34285714285714286, 'A293': 0.4857142857142857, 'A298': 0.17142857142857143}",A293,,"    private static boolean handleUrl(final Context context,
                                     @NonNull final String url,
                                     @NonNull final Pattern pattern,
                                     @NonNull final CompositeDisposable disposables) {
        final Matcher matcher = pattern.matcher(url);
        if (!matcher.matches()) {
            return false;
        }
        final String matchedUrl = matcher.group(1);
        final int seconds;
        if (matcher.group(2) == null) {
            seconds = -1;
        } else {
            seconds = Integer.parseInt(matcher.group(2));
        }

        final StreamingService service;
        final StreamingService.LinkType linkType;
        try {
            service = NewPipe.getServiceByUrl(matchedUrl);
            linkType = service.getLinkTypeByUrl(matchedUrl);
            if (linkType == StreamingService.LinkType.NONE) {
                return false;
            }
        } catch (final ExtractionException e) {
            return false;
        }

        if (linkType == StreamingService.LinkType.STREAM && seconds != -1) {
            return playOnPopup(context, matchedUrl, service, seconds, disposables);
        } else {
            NavigationHelper.openRouterActivity(context, matchedUrl);
            return true;
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/InternalUrlsHandler.java,InternalUrlsHandler,playOnPopup,"boolean playOnPopup(Context,String,StreamingService,int,CompositeDisposable)","[142, 176]","{'A305': [(142, 142), (145, 146)], 'A293': [(143, 144), (147, 155), (158, 160), (163, 163), (174, 176)], 'A298': [(164, 171), (173, 173)], 'A300': [(156, 157), (161, 162)], 'A299': [(172, 172)]}","{'A305': 0.08571428571428572, 'A293': 0.5142857142857142, 'A298': 0.2571428571428571, 'A300': 0.11428571428571428, 'A299': 0.02857142857142857}",A293,,"    public static boolean playOnPopup(final Context context,
                                      final String url,
                                      @NonNull final StreamingService service,
                                      final int seconds,
                                      @NonNull final CompositeDisposable disposables) {
        final LinkHandlerFactory factory = service.getStreamLHFactory();
        final String cleanUrl;

        try {
            cleanUrl = factory.getUrl(factory.getId(url));
        } catch (final ParsingException e) {
            return false;
        }

        final Single<StreamInfo> single =
                ExtractorHelper.getStreamInfo(service.getServiceId(), cleanUrl, false);
        disposables.add(single.subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(info -> {
                    final PlayQueue playQueue =
                            new SinglePlayQueue(info, seconds * 1000L);
                    NavigationHelper.playOnPopupPlayer(context, playQueue, false);
                }, throwable -> {
                    if (DEBUG) {
                        Log.e(TAG, ""Could not play on popup: "" + url, throwable);
                    }
                    new AlertDialog.Builder(context)
                            .setTitle(R.string.player_stream_failure)
                            .setMessage(
                                    ErrorPanelHelper.Companion.getExceptionDescription(throwable))
                            .setPositiveButton(R.string.ok, null)
                            .show();
                }));
        return true;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/HashtagLongPressClickableSpan.java,HashtagLongPressClickableSpan,onClick,void onClick(View),"[27, 30]","{'A305': [(29, 29)], 'A333': [(27, 28), (30, 30)]}","{'A305': 0.25, 'A333': 0.75}",A333,,"    @Override
    public void onClick(@NonNull final View view) {
        NavigationHelper.openSearch(context, relatedInfoServiceId, parsedHashtag);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/HashtagLongPressClickableSpan.java,HashtagLongPressClickableSpan,onLongClick,void onLongClick(View),"[32, 35]","{'A333': [(32, 35)]}",{'A333': 1.0},A333,,"    @Override
    public void onLongClick(@NonNull final View view) {
        ShareUtils.copyToClipboard(context, parsedHashtag);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TouchUtils.java,TouchUtils,getOffsetForHorizontalLine,"int getOffsetForHorizontalLine(TextView,MotionEvent)","[22, 37]","{'A333': [(22, 37)]}",{'A333': 1.0},A333,,"    public static int getOffsetForHorizontalLine(@NonNull final TextView textView,
                                                 @NonNull final MotionEvent event) {

        int x = (int) event.getX();
        int y = (int) event.getY();

        x -= textView.getTotalPaddingLeft();
        y -= textView.getTotalPaddingTop();

        x += textView.getScrollX();
        y += textView.getScrollY();

        final Layout layout = textView.getLayout();
        final int line = layout.getLineForVertical(y);
        return layout.getOffsetForHorizontal(line, x);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,setOnContentChanged,void setOnContentChanged(Consumer<Boolean>),"[55, 57]","{'A298': [(55, 57)]}",{'A298': 1.0},A298,,"    public void setOnContentChanged(@Nullable final Consumer<Boolean> onContentChanged) {
        this.onContentChanged = onContentChanged;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,setContent,void setContent(Description),"[59, 71]","{'A298': [(59, 60), (62, 64), (66, 67), (69, 71)], 'A305': [(61, 61), (65, 65), (68, 68)]}","{'A298': 0.7692307692307693, 'A305': 0.23076923076923078}",A298,,"    public void setContent(@NonNull final Description content) {
        this.content = content;
        canBeEllipsized = null;
        linkifyContentView(v -> {
            final int currentMaxLines = view.getMaxLines();
            view.setMaxLines(EXPANDED_LINES);
            canBeEllipsized = view.getLineCount() > maxLines;
            view.setMaxLines(currentMaxLines);
            if (onContentChanged != null) {
                onContentChanged.accept(canBeEllipsized);
            }
        });
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,setStreamUrl,void setStreamUrl(String),"[73, 75]","{'A298': [(73, 75)]}",{'A298': 1.0},A298,,"    public void setStreamUrl(@Nullable final String streamUrl) {
        this.streamUrl = streamUrl;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,setStreamingService,void setStreamingService(StreamingService),"[77, 79]","{'A298': [(77, 79)]}",{'A298': 1.0},A298,,"    public void setStreamingService(@NonNull final StreamingService streamingService) {
        this.streamingService = streamingService;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,expand,void expand(),"[84, 87]","{'A298': [(84, 87)]}",{'A298': 1.0},A298,,"    public void expand() {
        view.setMaxLines(EXPANDED_LINES);
        linkifyContentView(v -> isEllipsized = false);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,ellipsize,void ellipsize(),"[94, 136]","{'A298': [(94, 136)]}",{'A298': 1.0},A298,,"    public void ellipsize() {
        // expand text to see whether it is necessary to ellipsize the text
        view.setMaxLines(EXPANDED_LINES);
        linkifyContentView(v -> {
            final CharSequence charSeqText = view.getText();
            if (charSeqText != null && view.getLineCount() > maxLines) {
                // Note that converting to String removes spans (i.e. links), but that's something
                // we actually want since when the text is ellipsized we want all clicks on the
                // comment to expand the comment, not to open links.
                final String text = charSeqText.toString();

                final Layout layout = view.getLayout();
                final float lineWidth = layout.getLineWidth(maxLines - 1);
                final float layoutWidth = layout.getWidth();
                final int lineStart = layout.getLineStart(maxLines - 1);
                final int lineEnd = layout.getLineEnd(maxLines - 1);

                // remove characters up until there is enough space for the ellipsis
                // (also summing 2 more pixels, just to be sure to avoid float rounding errors)
                int end = lineEnd;
                float removedCharactersWidth = 0.0f;
                while (lineWidth - removedCharactersWidth + ellipsisWidthPx + 2.0f > layoutWidth
                        && end >= lineStart) {
                    end -= 1;
                    // recalculate each time to account for ligatures or other similar things
                    removedCharactersWidth = paintAtContentSize.measureText(
                            text.substring(end, lineEnd));
                }

                // remove trailing spaces and newlines
                while (end > 0 && Character.isWhitespace(text.charAt(end - 1))) {
                    end -= 1;
                }

                final String newVal = text.substring(0, end) + ELLIPSIS;
                view.setText(newVal);
                isEllipsized = true;
            } else {
                isEllipsized = false;
            }
            view.setMaxLines(maxLines);
        });
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,toggle,void toggle(),"[141, 147]","{'A298': [(141, 147)]}",{'A298': 1.0},A298,,"    public void toggle() {
        if (isEllipsized) {
            expand();
        } else {
            ellipsize();
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,canBeEllipsized,Boolean canBeEllipsized(),"[158, 161]","{'A298': [(158, 159), (161, 161)], 'A305': [(160, 160)]}","{'A298': 0.75, 'A305': 0.25}",A298,,"    @Nullable
    public Boolean canBeEllipsized() {
        return canBeEllipsized;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,linkifyContentView,void linkifyContentView(Consumer<View>),"[163, 173]","{'A298': [(163, 173)]}",{'A298': 1.0},A298,,"    private void linkifyContentView(final Consumer<View> consumer) {
        final boolean oldState = isEllipsized;
        disposable.clear();
        TextLinkifier.fromDescription(view, content,
                HtmlCompat.FROM_HTML_MODE_LEGACY, streamingService, streamUrl, disposable,
                v -> {
                    consumer.accept(v);
                    notifyStateChangeListener(oldState);
                });

    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,setStateChangeListener,void setStateChangeListener(Consumer<Boolean>),"[183, 185]","{'A298': [(184, 185)], 'A305': [(183, 183)]}","{'A298': 0.6666666666666666, 'A305': 0.3333333333333333}",A298,,"    public void setStateChangeListener(@Nullable final Consumer<Boolean> listener) {
        this.stateChangeListener = listener;
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextEllipsizer.java,TextEllipsizer,notifyStateChangeListener,void notifyStateChangeListener(boolean),"[187, 191]","{'A298': [(187, 191)]}",{'A298': 1.0},A298,,"    private void notifyStateChangeListener(final boolean oldState) {
        if (oldState != isEllipsized && stateChangeListener != null) {
            stateChangeListener.accept(isEllipsized);
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,fromDescription,"void fromDescription(TextView,Description,int,StreamingService,String,CompositeDisposable,Consumer<TextView>)","[63, 84]","{'A305': [(63, 84)]}",{'A305': 1.0},A305,,"    public static void fromDescription(@NonNull final TextView textView,
                                       @NonNull final Description description,
                                       final int htmlCompatFlag,
                                       @Nullable final StreamingService relatedInfoService,
                                       @Nullable final String relatedStreamUrl,
                                       @NonNull final CompositeDisposable disposables,
                                       @Nullable final Consumer<TextView> onCompletion) {
        switch (description.getType()) {
            case Description.HTML:
                TextLinkifier.fromHtml(textView, description.getContent(), htmlCompatFlag,
                        relatedInfoService, relatedStreamUrl, disposables, onCompletion);
                break;
            case Description.MARKDOWN:
                TextLinkifier.fromMarkdown(textView, description.getContent(),
                        relatedInfoService, relatedStreamUrl, disposables, onCompletion);
                break;
            case Description.PLAIN_TEXT: default:
                TextLinkifier.fromPlainText(textView, description.getContent(),
                        relatedInfoService, relatedStreamUrl, disposables, onCompletion);
                break;
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,fromHtml,"void fromHtml(TextView,String,int,StreamingService,String,CompositeDisposable,Consumer<TextView>)","[109, 119]","{'A305': [(109, 118)], 'A293': [(119, 119)]}","{'A305': 0.9090909090909091, 'A293': 0.09090909090909091}",A305,,"    public static void fromHtml(@NonNull final TextView textView,
                                @NonNull final String htmlBlock,
                                final int htmlCompatFlag,
                                @Nullable final StreamingService relatedInfoService,
                                @Nullable final String relatedStreamUrl,
                                @NonNull final CompositeDisposable disposables,
                                @Nullable final Consumer<TextView> onCompletion) {
        changeLinkIntents(
                textView, HtmlCompat.fromHtml(htmlBlock, htmlCompatFlag), relatedInfoService,
                relatedStreamUrl, disposables, onCompletion);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,fromPlainText,"void fromPlainText(TextView,String,StreamingService,String,CompositeDisposable,Consumer<TextView>)","[143, 153]","{'A305': [(143, 148), (151, 152)], 'A293': [(149, 150), (153, 153)]}","{'A305': 0.7272727272727273, 'A293': 0.2727272727272727}",A305,,"    public static void fromPlainText(@NonNull final TextView textView,
                                     @NonNull final String plainTextBlock,
                                     @Nullable final StreamingService relatedInfoService,
                                     @Nullable final String relatedStreamUrl,
                                     @NonNull final CompositeDisposable disposables,
                                     @Nullable final Consumer<TextView> onCompletion) {
        textView.setAutoLinkMask(Linkify.WEB_URLS);
        textView.setText(plainTextBlock, TextView.BufferType.SPANNABLE);
        changeLinkIntents(textView, textView.getText(), relatedInfoService,
                relatedStreamUrl, disposables, onCompletion);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,fromMarkdown,"void fromMarkdown(TextView,String,StreamingService,String,CompositeDisposable,Consumer<TextView>)","[176, 186]","{'A305': [(176, 185)], 'A293': [(186, 186)]}","{'A305': 0.9090909090909091, 'A293': 0.09090909090909091}",A305,,"    public static void fromMarkdown(@NonNull final TextView textView,
                                    @NonNull final String markdownBlock,
                                    @Nullable final StreamingService relatedInfoService,
                                    @Nullable final String relatedStreamUrl,
                                    @NonNull final CompositeDisposable disposables,
                                    @Nullable final Consumer<TextView> onCompletion) {
        final Markwon markwon = Markwon.builder(textView.getContext())
                .usePlugin(LinkifyPlugin.create()).build();
        changeLinkIntents(textView, markwon.toMarkdown(markdownBlock),
                relatedInfoService, relatedStreamUrl, disposables, onCompletion);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,changeLinkIntents,"void changeLinkIntents(TextView,CharSequence,StreamingService,String,CompositeDisposable,Consumer<TextView>)","[225, 273]","{'A305': [(225, 230), (252, 255), (257, 257), (259, 259), (266, 267), (271, 271)], 'A333': [(231, 251), (256, 256), (258, 258), (260, 265), (268, 270), (272, 273)]}","{'A305': 0.30612244897959184, 'A333': 0.6938775510204082}",A333,,"    private static void changeLinkIntents(@NonNull final TextView textView,
                                          @NonNull final CharSequence chars,
                                          @Nullable final StreamingService relatedInfoService,
                                          @Nullable final String relatedStreamUrl,
                                          @NonNull final CompositeDisposable disposables,
                                          @Nullable final Consumer<TextView> onCompletion) {
        disposables.add(Single.fromCallable(() -> {
                    final Context context = textView.getContext();

                    // add custom click actions on web links
                    final SpannableStringBuilder textBlockLinked =
                            new SpannableStringBuilder(chars);
                    final URLSpan[] urls = textBlockLinked.getSpans(0, chars.length(),
                            URLSpan.class);

                    for (final URLSpan span : urls) {
                        final String url = span.getURL();
                        final LongPressClickableSpan longPressClickableSpan =
                                new UrlLongPressClickableSpan(context, disposables, url);

                        textBlockLinked.setSpan(longPressClickableSpan,
                                textBlockLinked.getSpanStart(span),
                                textBlockLinked.getSpanEnd(span),
                                textBlockLinked.getSpanFlags(span));
                        textBlockLinked.removeSpan(span);
                    }

                    // add click actions on plain text timestamps only for description of contents,
                    // unneeded for meta-info or other TextViews
                    if (relatedInfoService != null) {
                        if (relatedStreamUrl != null) {
                            addClickListenersOnTimestamps(context, textBlockLinked,
                                    relatedInfoService, relatedStreamUrl, disposables);
                        }
                        addClickListenersOnHashtags(context, textBlockLinked, relatedInfoService);
                    }

                    return textBlockLinked;
                }).subscribeOn(Schedulers.computation())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(
                        textBlockLinked ->
                                setTextViewCharSequence(textView, textBlockLinked, onCompletion),
                        throwable -> {
                            Log.e(TAG, ""Unable to linkify text"", throwable);
                            // this should never happen, but if it does, just fallback to it
                            setTextViewCharSequence(textView, chars, onCompletion);
                        }));
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,addClickListenersOnHashtags,"void addClickListenersOnHashtags(Context,SpannableStringBuilder,StreamingService)","[291, 313]","{'A305': [(294, 294), (307, 307), (309, 309)], 'A293': [(295, 302), (305, 305), (311, 313)], 'A333': [(291, 293), (303, 304), (306, 306), (308, 308), (310, 310)]}","{'A305': 0.13043478260869565, 'A293': 0.5217391304347826, 'A333': 0.34782608695652173}",A293,,"    private static void addClickListenersOnHashtags(
            @NonNull final Context context,
            @NonNull final SpannableStringBuilder spannableDescription,
            @NonNull final StreamingService relatedInfoService) {
        final String descriptionText = spannableDescription.toString();
        final Matcher hashtagsMatches = HASHTAGS_PATTERN.matcher(descriptionText);

        while (hashtagsMatches.find()) {
            final int hashtagStart = hashtagsMatches.start(1);
            final int hashtagEnd = hashtagsMatches.end(1);
            final String parsedHashtag = descriptionText.substring(hashtagStart, hashtagEnd);

            // Don't add a LongPressClickableSpan if there is already one, which should be a part
            // of an URL, already parsed before
            if (spannableDescription.getSpans(hashtagStart, hashtagEnd,
                    LongPressClickableSpan.class).length == 0) {
                final int serviceId = relatedInfoService.getServiceId();
                spannableDescription.setSpan(
                        new HashtagLongPressClickableSpan(context, parsedHashtag, serviceId),
                        hashtagStart, hashtagEnd, 0);
            }
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,addClickListenersOnTimestamps,"void addClickListenersOnTimestamps(Context,SpannableStringBuilder,StreamingService,String,CompositeDisposable)","[333, 358]","{'A305': [(336, 337), (351, 353)], 'A293': [(339, 339), (342, 343), (348, 350), (357, 358)], 'A300': [(344, 344), (346, 347), (354, 356)], 'A333': [(333, 335), (338, 338), (340, 341), (345, 345)]}","{'A305': 0.19230769230769232, 'A293': 0.3076923076923077, 'A300': 0.23076923076923078, 'A333': 0.2692307692307692}",A293,,"    private static void addClickListenersOnTimestamps(
            @NonNull final Context context,
            @NonNull final SpannableStringBuilder spannableDescription,
            @NonNull final StreamingService relatedInfoService,
            @NonNull final String relatedStreamUrl,
            @NonNull final CompositeDisposable disposables) {
        final String descriptionText = spannableDescription.toString();
        final Matcher timestampsMatches = TimestampExtractor.TIMESTAMPS_PATTERN.matcher(
                descriptionText);

        while (timestampsMatches.find()) {
            final TimestampExtractor.TimestampMatchDTO timestampMatchDTO =
                    TimestampExtractor.getTimestampFromMatcher(timestampsMatches, descriptionText);

            if (timestampMatchDTO == null) {
                continue;
            }

            spannableDescription.setSpan(
                    new TimestampLongPressClickableSpan(context, descriptionText, disposables,
                            relatedInfoService, relatedStreamUrl, timestampMatchDTO),
                    timestampMatchDTO.timestampStart(),
                    timestampMatchDTO.timestampEnd(),
                    0);
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TextLinkifier.java,TextLinkifier,setTextViewCharSequence,"void setTextViewCharSequence(TextView,CharSequence,Consumer<TextView>)","[360, 368]","{'A305': [(361, 367)], 'A293': [(360, 360), (368, 368)]}","{'A305': 0.7777777777777778, 'A293': 0.2222222222222222}",A305,,"    private static void setTextViewCharSequence(@NonNull final TextView textView,
                                                @Nullable final CharSequence charSequence,
                                                @Nullable final Consumer<TextView> onCompletion) {
        textView.setText(charSequence);
        textView.setVisibility(View.VISIBLE);
        if (onCompletion != null) {
            onCompletion.accept(textView);
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampExtractor.java,TimestampExtractor,getTimestampFromMatcher,"TimestampMatchDTO getTimestampFromMatcher(Matcher,String)","[29, 55]","{'A300': [(30, 30), (33, 55)], 'A333': [(29, 29), (31, 32)]}","{'A300': 0.8888888888888888, 'A333': 0.1111111111111111}",A300,,"    @Nullable
    public static TimestampMatchDTO getTimestampFromMatcher(
            @NonNull final Matcher timestampMatches,
            @NonNull final String baseText) {
        int timestampStart = timestampMatches.start(1);
        if (timestampStart == -1) {
            timestampStart = timestampMatches.start(2);
        }
        final int timestampEnd = timestampMatches.end(3);

        final String parsedTimestamp = baseText.substring(timestampStart, timestampEnd);
        final String[] timestampParts = parsedTimestamp.split("":"");

        final int seconds;
        if (timestampParts.length == 3) { // timestamp format: XX:XX:XX
            seconds = Integer.parseInt(timestampParts[0]) * 3600 // hours
                    + Integer.parseInt(timestampParts[1]) * 60 // minutes
                    + Integer.parseInt(timestampParts[2]); // seconds
        } else if (timestampParts.length == 2) { // timestamp format: XX:XX
            seconds = Integer.parseInt(timestampParts[0]) * 60 // minutes
                    + Integer.parseInt(timestampParts[1]); // seconds
        } else {
            return null;
        }

        return new TimestampMatchDTO(timestampStart, timestampEnd, seconds);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampExtractor.java,TimestampExtractor.TimestampMatchDTO,timestampStart,int timestampStart(),"[71, 73]","{'A300': [(71, 73)]}",{'A300': 1.0},A300,,"        public int timestampStart() {
            return timestampStart;
        }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampExtractor.java,TimestampExtractor.TimestampMatchDTO,timestampEnd,int timestampEnd(),"[75, 77]","{'A300': [(75, 77)]}",{'A300': 1.0},A300,,"        public int timestampEnd() {
            return timestampEnd;
        }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampExtractor.java,TimestampExtractor.TimestampMatchDTO,seconds,int seconds(),"[79, 81]","{'A300': [(79, 81)]}",{'A300': 1.0},A300,,"        public int seconds() {
            return seconds;
        }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/UrlLongPressClickableSpan.java,UrlLongPressClickableSpan,onClick,void onClick(View),"[29, 35]","{'A305': [(33, 33)], 'A333': [(29, 32), (34, 35)]}","{'A305': 0.14285714285714285, 'A333': 0.8571428571428571}",A333,,"    @Override
    public void onClick(@NonNull final View view) {
        if (!InternalUrlsHandler.handleUrlDescriptionTimestamp(
                disposables, context, url)) {
            ShareUtils.openUrlInApp(context, url);
        }
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/UrlLongPressClickableSpan.java,UrlLongPressClickableSpan,onLongClick,void onLongClick(View),"[37, 40]","{'A333': [(37, 40)]}",{'A333': 1.0},A333,,"    @Override
    public void onLongClick(@NonNull final View view) {
        ShareUtils.copyToClipboard(context, url);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampLongPressClickableSpan.java,TimestampLongPressClickableSpan,onClick,void onClick(View),"[46, 50]","{'A305': [(48, 48)], 'A333': [(46, 47), (49, 50)]}","{'A305': 0.2, 'A333': 0.8}",A333,,"    @Override
    public void onClick(@NonNull final View view) {
        playOnPopup(context, relatedStreamUrl, relatedInfoService,
                timestampMatchDTO.seconds(), disposables);
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampLongPressClickableSpan.java,TimestampLongPressClickableSpan,onLongClick,void onLongClick(View),"[52, 56]","{'A305': [(54, 55)], 'A333': [(52, 53), (56, 56)]}","{'A305': 0.4, 'A333': 0.6}",A333,,"    @Override
    public void onLongClick(@NonNull final View view) {
        ShareUtils.copyToClipboard(context, getTimestampTextToCopy(
                relatedInfoService, relatedStreamUrl, descriptionText, timestampMatchDTO));
    }
"
org.schabi.newpipe.util.text,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/text/TimestampLongPressClickableSpan.java,TimestampLongPressClickableSpan,getTimestampTextToCopy,"String getTimestampTextToCopy(StreamingService,String,String,TimestampExtractor.TimestampMatchDTO)","[58, 77]","{'A305': [(60, 61), (65, 71)], 'A333': [(58, 59), (62, 64), (72, 77)]}","{'A305': 0.45, 'A333': 0.55}",A333,,"    @NonNull
    private static String getTimestampTextToCopy(
            @NonNull final StreamingService relatedInfoService,
            @NonNull final String relatedStreamUrl,
            @NonNull final String descriptionText,
            @NonNull final TimestampExtractor.TimestampMatchDTO timestampMatchDTO) {
        // TODO: use extractor methods to get timestamps when this feature will be implemented in it
        if (relatedInfoService == ServiceList.YouTube) {
            return relatedStreamUrl + ""&t="" + timestampMatchDTO.seconds();
        } else if (relatedInfoService == ServiceList.SoundCloud
                || relatedInfoService == ServiceList.MediaCCC) {
            return relatedStreamUrl + ""#t="" + timestampMatchDTO.seconds();
        } else if (relatedInfoService == ServiceList.PeerTube) {
            return relatedStreamUrl + ""?start="" + timestampMatchDTO.seconds();
        }

        // Return timestamp text for other services
        return descriptionText.subSequence(timestampMatchDTO.timestampStart(),
                timestampMatchDTO.timestampEnd()).toString();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PeertubeHelper.java,PeertubeHelper,getInstanceList,List<PeertubeInstance> getInstanceList(Context),"[25, 49]","{'A291': [(29, 30), (32, 34), (38, 38), (42, 45), (48, 49)], 'A294': [(25, 28), (35, 37), (39, 41), (46, 46)], 'A295': [(31, 31), (47, 47)]}","{'A291': 0.48, 'A294': 0.44, 'A295': 0.08}",A291,,"    public static List<PeertubeInstance> getInstanceList(final Context context) {
        final SharedPreferences sharedPreferences = PreferenceManager
                .getDefaultSharedPreferences(context);
        final String savedInstanceListKey = context.getString(R.string.peertube_instance_list_key);
        final String savedJson = sharedPreferences.getString(savedInstanceListKey, null);
        if (null == savedJson) {
            return List.of(getCurrentInstance());
        }

        try {
            final JsonArray array = JsonParser.object().from(savedJson).getArray(""instances"");
            final List<PeertubeInstance> result = new ArrayList<>();
            for (final Object o : array) {
                if (o instanceof JsonObject) {
                    final JsonObject instance = (JsonObject) o;
                    final String name = instance.getString(""name"");
                    final String url = instance.getString(""url"");
                    result.add(new PeertubeInstance(url, name));
                }
            }
            return result;
        } catch (final JsonParserException e) {
            return List.of(getCurrentInstance());
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PeertubeHelper.java,PeertubeHelper,selectInstance,"PeertubeInstance selectInstance(PeertubeInstance,Context)","[51, 64]","{'A291': [(58, 59), (61, 64)], 'A294': [(51, 54), (57, 57), (60, 60)], 'A300': [(55, 56)]}","{'A291': 0.42857142857142855, 'A294': 0.42857142857142855, 'A300': 0.14285714285714285}",A291,,"    public static PeertubeInstance selectInstance(final PeertubeInstance instance,
                                                  final Context context) {
        final SharedPreferences sharedPreferences = PreferenceManager
                .getDefaultSharedPreferences(context);
        final String selectedInstanceKey =
                context.getString(R.string.peertube_selected_instance_key);
        final JsonStringWriter jsonWriter = JsonWriter.string().object();
        jsonWriter.value(""name"", instance.getName());
        jsonWriter.value(""url"", instance.getUrl());
        final String jsonToSave = jsonWriter.end().done();
        sharedPreferences.edit().putString(selectedInstanceKey, jsonToSave).apply();
        ServiceList.PeerTube.setInstance(instance);
        return instance;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PeertubeHelper.java,PeertubeHelper,getCurrentInstance,PeertubeInstance getCurrentInstance(),"[66, 68]","{'A291': [(67, 68)], 'A294': [(66, 66)]}","{'A291': 0.6666666666666666, 'A294': 0.3333333333333333}",A291,,"    public static PeertubeInstance getCurrentInstance() {
        return ServiceList.PeerTube.getInstance();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,isStreamsTab,boolean isStreamsTab(String),"[23, 34]","{'A305': [(23, 26), (28, 34)], 'A434': [(27, 27)]}","{'A305': 0.9166666666666666, 'A434': 0.08333333333333333}",A305,,"    public static boolean isStreamsTab(final String tab) {
        switch (tab) {
            case ChannelTabs.VIDEOS:
            case ChannelTabs.TRACKS:
            case ChannelTabs.LIKES:
            case ChannelTabs.SHORTS:
            case ChannelTabs.LIVESTREAMS:
                return true;
            default:
                return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,isStreamsTab,boolean isStreamsTab(ListLinkHandler),"[40, 47]","{'A305': [(40, 47)]}",{'A305': 1.0},A305,,"    public static boolean isStreamsTab(final ListLinkHandler tab) {
        final List<String> contentFilters = tab.getContentFilters();
        if (contentFilters.isEmpty()) {
            return false; // this should never happen, but check just to be sure
        } else {
            return isStreamsTab(contentFilters.get(0));
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,getShowTabKey,int getShowTabKey(String),"[49, 71]","{'A386': [(49, 51), (56, 57), (60, 61), (64, 65), (70, 71)], 'A305': [(52, 55), (58, 59), (62, 63), (68, 69)], 'A434': [(66, 67)]}","{'A386': 0.4782608695652174, 'A305': 0.43478260869565216, 'A434': 0.08695652173913043}",A386,,"    @StringRes
    private static int getShowTabKey(final String tab) {
        switch (tab) {
            case ChannelTabs.VIDEOS:
                return R.string.show_channel_tabs_videos;
            case ChannelTabs.TRACKS:
                return R.string.show_channel_tabs_tracks;
            case ChannelTabs.SHORTS:
                return R.string.show_channel_tabs_shorts;
            case ChannelTabs.LIVESTREAMS:
                return R.string.show_channel_tabs_livestreams;
            case ChannelTabs.CHANNELS:
                return R.string.show_channel_tabs_channels;
            case ChannelTabs.PLAYLISTS:
                return R.string.show_channel_tabs_playlists;
            case ChannelTabs.ALBUMS:
                return R.string.show_channel_tabs_albums;
            case ChannelTabs.LIKES:
                return R.string.show_channel_tabs_likes;
            default:
                return -1;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,getFetchFeedTabKey,int getFetchFeedTabKey(String),"[73, 89]","{'A386': [(73, 83), (86, 89)], 'A434': [(84, 85)]}","{'A386': 0.8823529411764706, 'A434': 0.11764705882352941}",A386,,"    @StringRes
    private static int getFetchFeedTabKey(final String tab) {
        switch (tab) {
            case ChannelTabs.VIDEOS:
                return R.string.fetch_channel_tabs_videos;
            case ChannelTabs.TRACKS:
                return R.string.fetch_channel_tabs_tracks;
            case ChannelTabs.SHORTS:
                return R.string.fetch_channel_tabs_shorts;
            case ChannelTabs.LIVESTREAMS:
                return R.string.fetch_channel_tabs_livestreams;
            case ChannelTabs.LIKES:
                return R.string.fetch_channel_tabs_likes;
            default:
                return -1;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,getTranslationKey,int getTranslationKey(String),"[91, 113]","{'A386': [(91, 93), (98, 99), (102, 103), (106, 107), (112, 113)], 'A305': [(94, 97), (100, 101), (104, 105), (110, 111)], 'A434': [(108, 109)]}","{'A386': 0.4782608695652174, 'A305': 0.43478260869565216, 'A434': 0.08695652173913043}",A386,,"    @StringRes
    public static int getTranslationKey(final String tab) {
        switch (tab) {
            case ChannelTabs.VIDEOS:
                return R.string.channel_tab_videos;
            case ChannelTabs.TRACKS:
                return R.string.channel_tab_tracks;
            case ChannelTabs.SHORTS:
                return R.string.channel_tab_shorts;
            case ChannelTabs.LIVESTREAMS:
                return R.string.channel_tab_livestreams;
            case ChannelTabs.CHANNELS:
                return R.string.channel_tab_channels;
            case ChannelTabs.PLAYLISTS:
                return R.string.channel_tab_playlists;
            case ChannelTabs.ALBUMS:
                return R.string.channel_tab_albums;
            case ChannelTabs.LIKES:
                return R.string.channel_tab_likes;
            default:
                return R.string.unknown_content;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,showChannelTab,"boolean showChannelTab(Context,SharedPreferences,int)","[115, 125]","{'A386': [(115, 125)]}",{'A386': 1.0},A386,,"    public static boolean showChannelTab(final Context context,
                                         final SharedPreferences sharedPreferences,
                                         @StringRes final int key) {
        final Set<String> enabledTabs = sharedPreferences.getStringSet(
                context.getString(R.string.show_channel_tabs_key), null);
        if (enabledTabs == null) {
            return true; // default to true
        } else {
            return enabledTabs.contains(context.getString(key));
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,showChannelTab,"boolean showChannelTab(Context,SharedPreferences,String)","[127, 135]","{'A386': [(127, 135)]}",{'A386': 1.0},A386,,"    public static boolean showChannelTab(final Context context,
                                         final SharedPreferences sharedPreferences,
                                         final String tab) {
        final int key = ChannelTabHelper.getShowTabKey(tab);
        if (key == -1) {
            return false;
        }
        return showChannelTab(context, sharedPreferences, key);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ChannelTabHelper.java,ChannelTabHelper,fetchFeedChannelTab,"boolean fetchFeedChannelTab(Context,SharedPreferences,ListLinkHandler)","[137, 157]","{'A386': [(137, 157)]}",{'A386': 1.0},A386,,"    public static boolean fetchFeedChannelTab(final Context context,
                                              final SharedPreferences sharedPreferences,
                                              final ListLinkHandler tab) {
        final List<String> contentFilters = tab.getContentFilters();
        if (contentFilters.isEmpty()) {
            return false; // this should never happen, but check just to be sure
        }

        final int key = ChannelTabHelper.getFetchFeedTabKey(contentFilters.get(0));
        if (key == -1) {
            return false;
        }

        final Set<String> enabledTabs = sharedPreferences.getStringSet(
                context.getString(R.string.feed_fetch_channel_tabs_key), null);
        if (enabledTabs == null) {
            return true; // default to true
        } else {
            return enabledTabs.contains(context.getString(key));
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper,isOwnFileUri,"boolean isOwnFileUri(Context,Uri)","[30, 35]","{'A294': [(30, 35)]}",{'A294': 1.0},A294,,"    public static boolean isOwnFileUri(@NonNull final Context context, @NonNull final Uri uri) {
        if (uri.getAuthority() == null) {
            return false;
        }
        return uri.getAuthority().startsWith(context.getPackageName());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper,onCreate,void onCreate(Bundle),"[37, 45]","{'A382': [(37, 37), (40, 45)], 'A328': [(39, 39)], 'A294': [(38, 38)]}","{'A382': 0.7777777777777778, 'A328': 0.1111111111111111, 'A294': 0.1111111111111111}",A382,,"    @Override
    public void onCreate(final Bundle savedInstanceState) {
        if (ThemeHelper.isLightThemeSelected(this)) {
            this.setTheme(R.style.FilePickerThemeLight);
        } else {
            this.setTheme(R.style.FilePickerThemeDark);
        }
        super.onCreate(savedInstanceState);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper,onBackPressed,void onBackPressed(),"[47, 56]","{'A301': [(47, 56)]}",{'A301': 1.0},A301,,"    @Override
    public void onBackPressed() {
        // If at top most level, normal behaviour
        if (currentFragment.isBackTop()) {
            super.onBackPressed();
        } else {
            // Else go up
            currentFragment.goUp();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper,getFragment,"AbstractFilePickerFragment<File> getFragment(String,int,boolean,boolean,boolean,boolean)","[58, 71]","{'A301': [(58, 58), (65, 65), (68, 68)], 'A328': [(71, 71)], 'A294': [(59, 64), (66, 67), (69, 70)]}","{'A301': 0.21428571428571427, 'A328': 0.07142857142857142, 'A294': 0.7142857142857143}",A294,,"    @Override
    protected AbstractFilePickerFragment<File> getFragment(@Nullable final String startPath,
                                                           final int mode,
                                                           final boolean allowMultiple,
                                                           final boolean allowCreateDir,
                                                           final boolean allowExistingFile,
                                                           final boolean singleClick) {
        final CustomFilePickerFragment fragment = new CustomFilePickerFragment();
        fragment.setArgs(startPath != null ? startPath
                        : Environment.getExternalStorageDirectory().getPath(),
                mode, allowMultiple, allowCreateDir, allowExistingFile, singleClick);
        currentFragment = fragment;
        return currentFragment;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[78, 82]","{'A301': [(78, 78), (81, 82)], 'A294': [(80, 80)], 'A299': [(79, 79)]}","{'A301': 0.6, 'A294': 0.2, 'A299': 0.2}",A301,,"        @Override
        public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,
                                 final Bundle savedInstanceState) {
            return super.onCreateView(inflater, container, savedInstanceState);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,onCreateViewHolder,"RecyclerView.ViewHolder onCreateViewHolder(ViewGroup,int)","[84, 97]","{'A301': [(84, 85), (88, 91), (94, 97)], 'A294': [(86, 87), (92, 93)]}","{'A301': 0.7142857142857143, 'A294': 0.2857142857142857}",A301,,"        @NonNull
        @Override
        public RecyclerView.ViewHolder onCreateViewHolder(@NonNull final ViewGroup parent,
                                                          final int viewType) {
            final RecyclerView.ViewHolder viewHolder = super.onCreateViewHolder(parent, viewType);

            final View view = viewHolder.itemView.findViewById(android.R.id.text1);
            if (view instanceof TextView) {
                ((TextView) view).setTextSize(TypedValue.COMPLEX_UNIT_PX,
                        getResources().getDimension(R.dimen.file_picker_items_text_size));
            }

            return viewHolder;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,onClickOk,void onClickOk(View),"[99, 112]","{'A301': [(99, 99), (101, 101), (107, 112)], 'A294': [(100, 100), (102, 106)]}","{'A301': 0.5714285714285714, 'A294': 0.42857142857142855}",A301,,"        @Override
        public void onClickOk(@NonNull final View view) {
            if (mode == MODE_NEW_FILE && getNewFileName().isEmpty()) {
                if (mToast != null) {
                    mToast.cancel();
                }
                mToast = Toast.makeText(getActivity(), R.string.file_name_empty_error,
                        Toast.LENGTH_SHORT);
                mToast.show();
                return;
            }

            super.onClickOk(view);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,isItemVisible,boolean isItemVisible(File),"[114, 120]","{'A328': [(114, 114), (119, 120)], 'A294': [(115, 118)]}","{'A328': 0.42857142857142855, 'A294': 0.5714285714285714}",A294,,"        @Override
        protected boolean isItemVisible(@NonNull final File file) {
            if (file.isDirectory() && file.isHidden()) {
                return true;
            }
            return super.isItemVisible(file);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,getBackTop,File getBackTop(),"[122, 133]","{'A301': [(122, 122), (126, 133)], 'A294': [(123, 125)]}","{'A301': 0.75, 'A294': 0.25}",A301,,"        public File getBackTop() {
            if (getArguments() == null) {
                return Environment.getExternalStorageDirectory();
            }

            final String path = getArguments().getString(KEY_START_PATH, ""/"");
            if (path.contains(Environment.getExternalStorageDirectory().getPath())) {
                return Environment.getExternalStorageDirectory();
            }

            return getPath(path);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,isBackTop,boolean isBackTop(),"[135, 138]","{'A301': [(135, 135), (138, 138)], 'A294': [(136, 137)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"        public boolean isBackTop() {
            return compareFiles(mCurrentPath,
                    getBackTop()) == 0 || compareFiles(mCurrentPath, new File(""/"")) == 0;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilePickerActivityHelper.java,FilePickerActivityHelper.CustomFilePickerFragment,onLoadFinished,"void onLoadFinished(Loader<SortedList<File>>,SortedList<File>)","[140, 145]","{'A301': [(140, 140), (143, 145)], 'A294': [(142, 142)], 'A299': [(141, 141)]}","{'A301': 0.6666666666666666, 'A294': 0.16666666666666666, 'A299': 0.16666666666666666}",A301,,"        @Override
        public void onLoadFinished(@NonNull final Loader<SortedList<File>> loader,
                                   final SortedList<File> data) {
            super.onLoadFinished(loader, data);
            layoutManager.scrollToPosition(0);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,getInstance,InfoCache getInstance(),"[62, 64]","{'A301': [(62, 62)], 'A294': [(63, 64)]}","{'A301': 0.3333333333333333, 'A294': 0.6666666666666666}",A294,,"    public static InfoCache getInstance() {
        return INSTANCE;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,keyOf,"String keyOf(int,String,Type)","[66, 71]","{'A294': [(66, 66), (71, 71)], 'A305': [(67, 70)]}","{'A294': 0.3333333333333333, 'A305': 0.6666666666666666}",A305,,"    @NonNull
    private static String keyOf(final int serviceId,
                                @NonNull final String url,
                                @NonNull final Type cacheType) {
        return serviceId + "":"" + cacheType.ordinal() + "":"" + url;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,removeStaleCache,void removeStaleCache(),"[73, 80]","{'A301': [(80, 80)], 'A294': [(73, 79)]}","{'A301': 0.125, 'A294': 0.875}",A294,,"    private static void removeStaleCache() {
        for (final Map.Entry<String, CacheData> entry : InfoCache.LRU_CACHE.snapshot().entrySet()) {
            final CacheData data = entry.getValue();
            if (data != null && data.isExpired()) {
                InfoCache.LRU_CACHE.remove(entry.getKey());
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,getInfo,Info getInfo(String),"[82, 95]","{'A294': [(83, 95)], 'A310': [(82, 82)]}","{'A294': 0.9285714285714286, 'A310': 0.07142857142857142}",A294,,"    @Nullable
    private static Info getInfo(@NonNull final String key) {
        final CacheData data = InfoCache.LRU_CACHE.get(key);
        if (data == null) {
            return null;
        }

        if (data.isExpired()) {
            InfoCache.LRU_CACHE.remove(key);
            return null;
        }

        return data.info;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,getFromKey,"Info getFromKey(int,String,Type)","[97, 108]","{'A301': [(107, 108)], 'A294': [(97, 97), (101, 105)], 'A305': [(98, 100), (106, 106)]}","{'A301': 0.16666666666666666, 'A294': 0.5, 'A305': 0.3333333333333333}",A294,,"    @Nullable
    public Info getFromKey(final int serviceId,
                           @NonNull final String url,
                           @NonNull final Type cacheType) {
        if (DEBUG) {
            Log.d(TAG, ""getFromKey() called with: ""
                    + ""serviceId = ["" + serviceId + ""], url = ["" + url + ""]"");
        }
        synchronized (LRU_CACHE) {
            return getInfo(keyOf(serviceId, url, cacheType));
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,putInfo,"void putInfo(int,String,Info,Type)","[110, 123]","{'A301': [(122, 123)], 'A294': [(114, 116), (119, 119)], 'A310': [(117, 118), (120, 120)], 'A305': [(110, 113), (121, 121)]}","{'A301': 0.14285714285714285, 'A294': 0.2857142857142857, 'A310': 0.21428571428571427, 'A305': 0.35714285714285715}",A305,,"    public void putInfo(final int serviceId,
                        @NonNull final String url,
                        @NonNull final Info info,
                        @NonNull final Type cacheType) {
        if (DEBUG) {
            Log.d(TAG, ""putInfo() called with: info = ["" + info + ""]"");
        }

        final long expirationMillis = ServiceHelper.getCacheExpirationMillis(info.getServiceId());
        synchronized (LRU_CACHE) {
            final CacheData data = new CacheData(info, expirationMillis);
            LRU_CACHE.put(keyOf(serviceId, url, cacheType), data);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,removeInfo,"void removeInfo(int,String,Type)","[125, 135]","{'A301': [(134, 135)], 'A294': [(128, 132)], 'A305': [(125, 127), (133, 133)]}","{'A301': 0.18181818181818182, 'A294': 0.45454545454545453, 'A305': 0.36363636363636365}",A294,,"    public void removeInfo(final int serviceId,
                           @NonNull final String url,
                           @NonNull final Type cacheType) {
        if (DEBUG) {
            Log.d(TAG, ""removeInfo() called with: ""
                    + ""serviceId = ["" + serviceId + ""], url = ["" + url + ""]"");
        }
        synchronized (LRU_CACHE) {
            LRU_CACHE.remove(keyOf(serviceId, url, cacheType));
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,clearCache,void clearCache(),"[137, 144]","{'A301': [(137, 137), (143, 144)], 'A294': [(138, 142)]}","{'A301': 0.375, 'A294': 0.625}",A294,,"    public void clearCache() {
        if (DEBUG) {
            Log.d(TAG, ""clearCache() called"");
        }
        synchronized (LRU_CACHE) {
            LRU_CACHE.evictAll();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,trimCache,void trimCache(),"[146, 154]","{'A301': [(146, 146), (153, 154)], 'A294': [(147, 150), (152, 152)], 'A369': [(151, 151)]}","{'A301': 0.3333333333333333, 'A294': 0.5555555555555556, 'A369': 0.1111111111111111}",A294,,"    public void trimCache() {
        if (DEBUG) {
            Log.d(TAG, ""trimCache() called"");
        }
        synchronized (LRU_CACHE) {
            removeStaleCache();
            LRU_CACHE.trimToSize(TRIM_CACHE_TO);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache,getSize,long getSize(),"[156, 160]","{'A301': [(156, 156)], 'A294': [(157, 158)], 'A310': [(159, 160)]}","{'A301': 0.2, 'A294': 0.4, 'A310': 0.4}",A294,,"    public long getSize() {
        synchronized (LRU_CACHE) {
            return LRU_CACHE.size();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/InfoCache.java,InfoCache.CacheData,isExpired,boolean isExpired(),"[171, 173]","{'A310': [(171, 173)]}",{'A310': 1.0},A310,,"        private boolean isExpired() {
            return System.currentTimeMillis() > expireTimestamp;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilenameUtils.java,FilenameUtils,createFilename,"String createFilename(Context,String)","[26, 56]","{'A324': [(33, 33), (56, 56)], 'A435': [(55, 55)], 'A294': [(26, 28), (30, 31), (34, 37), (41, 43), (45, 45), (47, 47), (50, 50), (53, 53)], 'A328': [(29, 29), (32, 32), (38, 40), (44, 44), (46, 46), (48, 49), (51, 52), (54, 54)]}","{'A324': 0.06451612903225806, 'A435': 0.03225806451612903, 'A294': 0.5161290322580645, 'A328': 0.3870967741935484}",A294,,"    public static String createFilename(final Context context, final String title) {
        final SharedPreferences sharedPreferences = PreferenceManager
                .getDefaultSharedPreferences(context);

        final String charsetLd = context.getString(R.string.charset_letters_and_digits_value);
        final String charsetMs = context.getString(R.string.charset_most_special_value);
        final String defaultCharset = context.getString(R.string.default_file_charset_value);

        final String replacementChar = sharedPreferences.getString(
                context.getString(R.string.settings_file_replacement_character_key), ""_"");
        String selectedCharset = sharedPreferences.getString(
                context.getString(R.string.settings_file_charset_key), null);

        final String charset;

        if (selectedCharset == null || selectedCharset.isEmpty()) {
            selectedCharset = defaultCharset;
        }

        if (selectedCharset.equals(charsetLd)) {
            charset = CHARSET_ONLY_LETTERS_AND_DIGITS;
        } else if (selectedCharset.equals(charsetMs)) {
            charset = CHARSET_MOST_SPECIAL;
        } else {
            charset = selectedCharset; // Is the user using a custom charset?
        }

        final Pattern pattern = Pattern.compile(charset);

        return createFilename(title, pattern, Matcher.quoteReplacement(replacementChar));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/FilenameUtils.java,FilenameUtils,createFilename,"String createFilename(String,Pattern,String)","[66, 69]","{'A324': [(68, 69)], 'A294': [(66, 67)]}","{'A324': 0.5, 'A294': 0.5}",A324,,"    private static String createFilename(final String title, final Pattern invalidCharacters,
                                         final String replacementChar) {
        return title.replaceAll(invalidCharacters.pattern(), replacementChar);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getIcon,int getIcon(int),"[33, 49]","{'A301': [(33, 33), (35, 36), (38, 38), (46, 46), (48, 49)], 'A300': [(37, 37), (39, 39), (41, 41), (43, 43), (45, 45), (47, 47)], 'A289': [(40, 40)], 'A291': [(42, 42)], 'A294': [(34, 34)], 'A397': [(44, 44)]}","{'A301': 0.4117647058823529, 'A300': 0.35294117647058826, 'A289': 0.058823529411764705, 'A291': 0.058823529411764705, 'A294': 0.058823529411764705, 'A397': 0.058823529411764705}",A301,,"    @DrawableRes
    public static int getIcon(final int serviceId) {
        switch (serviceId) {
            case 0:
                return R.drawable.ic_smart_display;
            case 1:
                return R.drawable.ic_cloud;
            case 2:
                return R.drawable.ic_placeholder_media_ccc;
            case 3:
                return R.drawable.ic_placeholder_peertube;
            case 4:
                return R.drawable.ic_placeholder_bandcamp;
            default:
                return R.drawable.ic_circle;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getTranslatedFilterString,"String getTranslatedFilterString(String,Context)","[51, 81]","{'A294': [(51, 51), (53, 55), (57, 79)], 'A302': [(80, 81)], 'A298': [(52, 52)], 'A322': [(56, 56)]}","{'A294': 0.8709677419354839, 'A302': 0.06451612903225806, 'A298': 0.03225806451612903, 'A322': 0.03225806451612903}",A294,,"    public static String getTranslatedFilterString(final String filter, final Context c) {
        switch (filter) {
            case ""all"":
                return c.getString(R.string.all);
            case ""videos"":
            case ""sepia_videos"":
            case ""music_videos"":
                return c.getString(R.string.videos_string);
            case ""channels"":
                return c.getString(R.string.channels);
            case ""playlists"":
            case ""music_playlists"":
                return c.getString(R.string.playlists);
            case ""tracks"":
                return c.getString(R.string.tracks);
            case ""users"":
                return c.getString(R.string.users);
            case ""conferences"":
                return c.getString(R.string.conferences);
            case ""events"":
                return c.getString(R.string.events);
            case ""music_songs"":
                return c.getString(R.string.songs);
            case ""music_albums"":
                return c.getString(R.string.albums);
            case ""music_artists"":
                return c.getString(R.string.artists);
            default:
                return filter;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getImportInstructions,int getImportInstructions(int),"[89, 99]","{'A301': [(89, 89), (91, 99)], 'A294': [(90, 90)]}","{'A301': 0.9090909090909091, 'A294': 0.09090909090909091}",A301,,"    @StringRes
    public static int getImportInstructions(final int serviceId) {
        switch (serviceId) {
            case 0:
                return R.string.import_youtube_instructions;
            case 1:
                return R.string.import_soundcloud_instructions;
            default:
                return -1;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getImportInstructionsHint,int getImportInstructionsHint(int),"[108, 116]","{'A301': [(108, 108), (110, 116)], 'A294': [(109, 109)]}","{'A301': 0.8888888888888888, 'A294': 0.1111111111111111}",A301,,"    @StringRes
    public static int getImportInstructionsHint(final int serviceId) {
        switch (serviceId) {
            case 1:
                return R.string.import_soundcloud_instructions_hint;
            default:
                return -1;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getSelectedServiceId,int getSelectedServiceId(Context),"[118, 122]","{'A300': [(119, 122)], 'A294': [(118, 118)]}","{'A300': 0.8, 'A294': 0.2}",A300,,"    public static int getSelectedServiceId(final Context context) {
        return Optional.ofNullable(getSelectedService(context))
                .orElse(DEFAULT_FALLBACK_SERVICE)
                .getServiceId();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getSelectedService,StreamingService getSelectedService(Context),"[124, 135]","{'A301': [(126, 126), (129, 130), (134, 134)], 'A300': [(124, 125), (131, 131), (133, 133), (135, 135)], 'A294': [(127, 128), (132, 132)]}","{'A301': 0.3333333333333333, 'A300': 0.4166666666666667, 'A294': 0.25}",A300,,"    @Nullable
    public static StreamingService getSelectedService(final Context context) {
        final String serviceName = PreferenceManager.getDefaultSharedPreferences(context)
                .getString(context.getString(R.string.current_service_key),
                        context.getString(R.string.default_service_value));

        try {
            return NewPipe.getService(serviceName);
        } catch (final ExtractionException e) {
            return null;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getNameOfServiceById,String getNameOfServiceById(int),"[137, 145]","{'A301': [(145, 145)], 'A300': [(137, 144)]}","{'A301': 0.1111111111111111, 'A300': 0.8888888888888888}",A300,,"    @NonNull
    public static String getNameOfServiceById(final int serviceId) {
        return ServiceList.all().stream()
                .filter(s -> s.getServiceId() == serviceId)
                .findFirst()
                .map(StreamingService::getServiceInfo)
                .map(StreamingService.ServiceInfo::getName)
                .orElse(""<unknown>"");
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getServiceById,StreamingService getServiceById(int),"[152, 158]","{'A305': [(152, 158)]}",{'A305': 1.0},A305,,"    @NonNull
    public static StreamingService getServiceById(final int serviceId) {
        return ServiceList.all().stream()
                .filter(s -> s.getServiceId() == serviceId)
                .findFirst()
                .orElseThrow();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,setSelectedServiceId,"void setSelectedServiceId(Context,int)","[160, 169]","{'A301': [(161, 162), (166, 169)], 'A294': [(160, 160), (164, 164)], 'A302': [(163, 163), (165, 165)]}","{'A301': 0.6, 'A294': 0.2, 'A302': 0.2}",A301,,"    public static void setSelectedServiceId(final Context context, final int serviceId) {
        String serviceName;
        try {
            serviceName = NewPipe.getService(serviceId).getServiceInfo().getName();
        } catch (final ExtractionException e) {
            serviceName = DEFAULT_FALLBACK_SERVICE.getServiceInfo().getName();
        }

        setSelectedServicePreferences(context, serviceName);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,setSelectedServicePreferences,"void setSelectedServicePreferences(Context,String)","[171, 175]","{'A301': [(173, 175)], 'A294': [(171, 172)]}","{'A301': 0.6, 'A294': 0.4}",A301,,"    private static void setSelectedServicePreferences(final Context context,
                                                      final String serviceName) {
        PreferenceManager.getDefaultSharedPreferences(context).edit().
                putString(context.getString(R.string.current_service_key), serviceName).apply();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,getCacheExpirationMillis,long getCacheExpirationMillis(int),"[177, 183]","{'A310': [(177, 183)]}",{'A310': 1.0},A310,,"    public static long getCacheExpirationMillis(final int serviceId) {
        if (serviceId == SoundCloud.getServiceId()) {
            return TimeUnit.MILLISECONDS.convert(5, TimeUnit.MINUTES);
        } else {
            return TimeUnit.MILLISECONDS.convert(1, TimeUnit.HOURS);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,initService,"void initService(Context,int)","[185, 206]","{'A289': [(205, 206)], 'A291': [(186, 186), (191, 194), (196, 197), (199, 200), (204, 204)], 'A294': [(185, 185), (187, 190), (195, 195), (198, 198), (201, 203)]}","{'A289': 0.09090909090909091, 'A291': 0.45454545454545453, 'A294': 0.45454545454545453}",A291,,"    public static void initService(final Context context, final int serviceId) {
        if (serviceId == ServiceList.PeerTube.getServiceId()) {
            final SharedPreferences sharedPreferences = PreferenceManager
                    .getDefaultSharedPreferences(context);
            final String json = sharedPreferences.getString(context.getString(
                    R.string.peertube_selected_instance_key), null);
            if (null == json) {
                return;
            }

            final JsonObject jsonObject;
            try {
                jsonObject = JsonParser.object().from(json);
            } catch (final JsonParserException e) {
                return;
            }
            final String name = jsonObject.getString(""name"");
            final String url = jsonObject.getString(""url"");
            final PeertubeInstance instance = new PeertubeInstance(url, name);
            ServiceList.PeerTube.setInstance(instance);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ServiceHelper.java,ServiceHelper,initServices,void initServices(Context),"[208, 212]","{'A289': [(210, 212)], 'A294': [(208, 209)]}","{'A289': 0.6, 'A294': 0.4}",A289,,"    public static void initServices(final Context context) {
        for (final StreamingService s : ServiceList.all()) {
            initService(context, s.getServiceId());
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NewPipeTextViewHelper.java,NewPipeTextViewHelper,shareSelectedTextWithShareUtils,void shareSelectedTextWithShareUtils(TextView),"[33, 39]","{'A293': [(33, 39)]}",{'A293': 1.0},A293,,"    public static void shareSelectedTextWithShareUtils(@NonNull final TextView textView) {
        final CharSequence textViewText = textView.getText();
        shareSelectedTextIfNotNullAndNotEmpty(textView, getSelectedText(textView, textViewText));
        if (textViewText instanceof Spannable) {
            Selection.setSelection((Spannable) textViewText, textView.getSelectionEnd());
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NewPipeTextViewHelper.java,NewPipeTextViewHelper,getSelectedText,"CharSequence getSelectedText(TextView,CharSequence)","[41, 52]","{'A293': [(41, 52)]}",{'A293': 1.0},A293,,"    @Nullable
    private static CharSequence getSelectedText(@NonNull final TextView textView,
                                                @Nullable final CharSequence text) {
        if (!textView.hasSelection() || text == null) {
            return null;
        }

        final int start = textView.getSelectionStart();
        final int end = textView.getSelectionEnd();
        return String.valueOf(start > end ? text.subSequence(end, start)
                : text.subSequence(start, end));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NewPipeTextViewHelper.java,NewPipeTextViewHelper,shareSelectedTextIfNotNullAndNotEmpty,"void shareSelectedTextIfNotNullAndNotEmpty(TextView,CharSequence)","[54, 60]","{'A293': [(54, 60)]}",{'A293': 1.0},A293,,"    private static void shareSelectedTextIfNotNullAndNotEmpty(
            @NonNull final TextView textView,
            @Nullable final CharSequence selectedText) {
        if (selectedText != null && selectedText.length() != 0) {
            ShareUtils.shareText(textView.getContext(), """", selectedText.toString());
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,getInstance,SerializedCache getInstance(),"[30, 32]","{'A310': [(30, 30), (32, 32)], 'A294': [(31, 31)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    public static SerializedCache getInstance() {
        return INSTANCE;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,take,"T take(String,Class<T>)","[34, 42]","{'A310': [(34, 35), (41, 42)], 'A294': [(36, 40)]}","{'A310': 0.4444444444444444, 'A294': 0.5555555555555556}",A294,,"    @Nullable
    public <T> T take(@NonNull final String key, @NonNull final Class<T> type) {
        if (DEBUG) {
            Log.d(TAG, ""take() called with: key = ["" + key + ""]"");
        }
        synchronized (LRU_CACHE) {
            return LRU_CACHE.get(key) != null ? getItem(LRU_CACHE.remove(key), type) : null;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,get,"T get(String,Class<T>)","[44, 53]","{'A310': [(44, 45), (51, 53)], 'A294': [(46, 49)], 'A305': [(50, 50)]}","{'A310': 0.5, 'A294': 0.4, 'A305': 0.1}",A310,,"    @Nullable
    public <T> T get(@NonNull final String key, @NonNull final Class<T> type) {
        if (DEBUG) {
            Log.d(TAG, ""get() called with: key = ["" + key + ""]"");
        }
        synchronized (LRU_CACHE) {
            final CacheData<?> data = LRU_CACHE.get(key);
            return data != null ? getItem(data, type) : null;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,put,"String put(T,Class<T>)","[55, 60]","{'A310': [(55, 55), (58, 60)], 'A294': [(56, 57)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"    @Nullable
    public <T extends Serializable> String put(@NonNull final T item,
                                               @NonNull final Class<T> type) {
        final String key = UUID.randomUUID().toString();
        return put(key, item, type) ? key : null;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,put,"boolean put(String,T,Class<T>)","[62, 76]","{'A310': [(63, 63), (68, 68), (70, 76)], 'A294': [(62, 62), (64, 67), (69, 69)]}","{'A310': 0.6, 'A294': 0.4}",A310,,"    public <T extends Serializable> boolean put(@NonNull final String key, @NonNull final T item,
                                                @NonNull final Class<T> type) {
        if (DEBUG) {
            Log.d(TAG, ""put() called with: key = ["" + key + ""], item = ["" + item + ""]"");
        }
        synchronized (LRU_CACHE) {
            try {
                LRU_CACHE.put(key, new CacheData<>(clone(item, type), type));
                return true;
            } catch (final Exception error) {
                Log.e(TAG, ""Serialization failed for: "", error);
            }
        }
        return false;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,clear,void clear(),"[78, 85]","{'A310': [(78, 78), (84, 85)], 'A294': [(79, 83)]}","{'A310': 0.375, 'A294': 0.625}",A294,,"    public void clear() {
        if (DEBUG) {
            Log.d(TAG, ""clear() called"");
        }
        synchronized (LRU_CACHE) {
            LRU_CACHE.evictAll();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,size,long size(),"[87, 91]","{'A310': [(87, 87), (90, 91)], 'A294': [(88, 89)]}","{'A310': 0.6, 'A294': 0.4}",A310,,"    public long size() {
        synchronized (LRU_CACHE) {
            return LRU_CACHE.size();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,getItem,"T getItem(CacheData<?>,Class<T>)","[93, 96]","{'A310': [(93, 93), (95, 96)], 'A305': [(94, 94)]}","{'A310': 0.75, 'A305': 0.25}",A310,,"    @Nullable
    private <T> T getItem(@NonNull final CacheData<?> data, @NonNull final Class<T> type) {
        return type.isAssignableFrom(data.type) ? type.cast(data.item) : null;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SerializedCache.java,SerializedCache,clone,"T clone(T,Class<T>)","[98, 109]","{'A310': [(98, 98), (100, 101), (103, 109)], 'A294': [(99, 99), (102, 102)]}","{'A310': 0.8333333333333334, 'A294': 0.16666666666666666}",A310,,"    @NonNull
    private <T extends Serializable> T clone(@NonNull final T item,
                                             @NonNull final Class<T> type) throws Exception {
        final ByteArrayOutputStream bytesOutput = new ByteArrayOutputStream();
        try (ObjectOutputStream objectOutput = new ObjectOutputStream(bytesOutput)) {
            objectOutput.writeObject(item);
            objectOutput.flush();
        }
        final Object clone = new ObjectInputStream(
                new ByteArrayInputStream(bytesOutput.toByteArray())).readObject();
        return type.cast(clone);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/AudioTrackAdapter.java,AudioTrackAdapter,getCount,int getCount(),"[32, 35]","{'A386': [(32, 35)]}",{'A386': 1.0},A386,,"    @Override
    public int getCount() {
        return tracksWrapper.size();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/AudioTrackAdapter.java,AudioTrackAdapter,getItem,List<AudioStream> getItem(int),"[37, 40]","{'A386': [(37, 40)]}",{'A386': 1.0},A386,,"    @Override
    public List<AudioStream> getItem(final int position) {
        return tracksWrapper.getTracksList().get(position).getStreamsList();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/AudioTrackAdapter.java,AudioTrackAdapter,getItemId,long getItemId(int),"[42, 45]","{'A386': [(42, 45)]}",{'A386': 1.0},A386,,"    @Override
    public long getItemId(final int position) {
        return position;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/AudioTrackAdapter.java,AudioTrackAdapter,getView,"View getView(int,View,ViewGroup)","[47, 75]","{'A386': [(47, 75)]}",{'A386': 1.0},A386,,"    @Override
    public View getView(final int position, final View convertView, final ViewGroup parent) {
        final var context = parent.getContext();
        final View view;
        if (convertView == null) {
            view = LayoutInflater.from(context).inflate(
                    R.layout.stream_quality_item, parent, false);
        } else {
            view = convertView;
        }

        final ImageView woSoundIconView = view.findViewById(R.id.wo_sound_icon);
        final TextView formatNameView = view.findViewById(R.id.stream_format_name);
        final TextView qualityView = view.findViewById(R.id.stream_quality);
        final TextView sizeView = view.findViewById(R.id.stream_size);

        final List<AudioStream> streams = getItem(position);
        final AudioStream stream = streams.get(0);

        woSoundIconView.setVisibility(View.GONE);
        sizeView.setVisibility(View.VISIBLE);

        if (stream.getAudioTrackId() != null) {
            formatNameView.setText(stream.getAudioTrackId());
        }
        qualityView.setText(Localization.audioTrackName(context, stream));

        return view;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/AudioTrackAdapter.java,AudioTrackAdapter.AudioTracksWrapper,getTracksList,List<StreamInfoWrapper<AudioStream>> getTracksList(),"[86, 88]","{'A386': [(87, 88)], 'A298': [(86, 86)]}","{'A386': 0.6666666666666666, 'A298': 0.3333333333333333}",A386,,"        public List<StreamInfoWrapper<AudioStream>> getTracksList() {
            return tracksList;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/AudioTrackAdapter.java,AudioTrackAdapter.AudioTracksWrapper,size,int size(),"[90, 92]","{'A386': [(90, 92)]}",{'A386': 1.0},A386,,"        public int size() {
            return tracksList.size();
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,checkServiceId,void checkServiceId(int),"[71, 75]","{'A289': [(72, 72)], 'A294': [(71, 71)], 'A324': [(73, 75)]}","{'A289': 0.2, 'A294': 0.2, 'A324': 0.6}",A324,,"    private static void checkServiceId(final int serviceId) {
        if (serviceId == Constants.NO_SERVICE_ID) {
            throw new IllegalArgumentException(""serviceId is NO_SERVICE_ID"");
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,searchFor,"Single<SearchInfo> searchFor(int,String,List<String>,String)","[77, 86]","{'A301': [(86, 86)], 'A302': [(78, 79), (81, 81)], 'A294': [(77, 77), (82, 85)], 'A324': [(80, 80)]}","{'A301': 0.1, 'A302': 0.3, 'A294': 0.5, 'A324': 0.1}",A294,,"    public static Single<SearchInfo> searchFor(final int serviceId, final String searchString,
                                               final List<String> contentFilter,
                                               final String sortFilter) {
        checkServiceId(serviceId);
        return Single.fromCallable(() ->
                SearchInfo.getInfo(NewPipe.getService(serviceId),
                        NewPipe.getService(serviceId)
                                .getSearchQHFactory()
                                .fromQuery(searchString, contentFilter, sortFilter)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getMoreSearchItems,"Single<InfoItemsPage<InfoItem>> getMoreSearchItems(int,String,List<String>,String,Page)","[88, 101]","{'A301': [(101, 101)], 'A305': [(88, 93)], 'A302': [(95, 97), (100, 100)], 'A294': [(98, 99)], 'A324': [(94, 94)]}","{'A301': 0.07142857142857142, 'A305': 0.42857142857142855, 'A302': 0.2857142857142857, 'A294': 0.14285714285714285, 'A324': 0.07142857142857142}",A305,,"    public static Single<InfoItemsPage<InfoItem>> getMoreSearchItems(
            final int serviceId,
            final String searchString,
            final List<String> contentFilter,
            final String sortFilter,
            final Page page) {
        checkServiceId(serviceId);
        return Single.fromCallable(() ->
                SearchInfo.getMoreItems(NewPipe.getService(serviceId),
                        NewPipe.getService(serviceId)
                                .getSearchQHFactory()
                                .fromQuery(searchString, contentFilter, sortFilter), page));

    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,suggestionsFor,"Single<List<String>> suggestionsFor(int,String)","[103, 112]","{'A301': [(112, 112)], 'A302': [(105, 105), (107, 111)], 'A294': [(103, 103), (106, 106)], 'A324': [(104, 104)]}","{'A301': 0.1, 'A302': 0.6, 'A294': 0.2, 'A324': 0.1}",A302,,"    public static Single<List<String>> suggestionsFor(final int serviceId, final String query) {
        checkServiceId(serviceId);
        return Single.fromCallable(() -> {
            final SuggestionExtractor extractor = NewPipe.getService(serviceId)
                    .getSuggestionExtractor();
            return extractor != null
                    ? extractor.suggestionList(query)
                    : Collections.emptyList();
        });
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getStreamInfo,"Single<StreamInfo> getStreamInfo(int,String,boolean)","[114, 119]","{'A301': [(119, 119)], 'A305': [(117, 117)], 'A294': [(114, 115), (118, 118)], 'A324': [(116, 116)]}","{'A301': 0.16666666666666666, 'A305': 0.16666666666666666, 'A294': 0.5, 'A324': 0.16666666666666666}",A294,,"    public static Single<StreamInfo> getStreamInfo(final int serviceId, final String url,
                                                   final boolean forceLoad) {
        checkServiceId(serviceId);
        return checkCache(forceLoad, serviceId, url, InfoCache.Type.STREAM,
                Single.fromCallable(() -> StreamInfo.getInfo(NewPipe.getService(serviceId), url)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getChannelInfo,"Single<ChannelInfo> getChannelInfo(int,String,boolean)","[121, 127]","{'A301': [(127, 127)], 'A305': [(124, 124)], 'A294': [(121, 122), (125, 126)], 'A324': [(123, 123)]}","{'A301': 0.14285714285714285, 'A305': 0.14285714285714285, 'A294': 0.5714285714285714, 'A324': 0.14285714285714285}",A294,,"    public static Single<ChannelInfo> getChannelInfo(final int serviceId, final String url,
                                                     final boolean forceLoad) {
        checkServiceId(serviceId);
        return checkCache(forceLoad, serviceId, url, InfoCache.Type.CHANNEL,
                Single.fromCallable(() ->
                        ChannelInfo.getInfo(NewPipe.getService(serviceId), url)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getChannelTab,"Single<ChannelTabInfo> getChannelTab(int,ListLinkHandler,boolean)","[129, 137]","{'A305': [(134, 134)], 'A386': [(129, 133), (135, 137)]}","{'A305': 0.1111111111111111, 'A386': 0.8888888888888888}",A386,,"    public static Single<ChannelTabInfo> getChannelTab(final int serviceId,
                                                       final ListLinkHandler listLinkHandler,
                                                       final boolean forceLoad) {
        checkServiceId(serviceId);
        return checkCache(forceLoad, serviceId,
                listLinkHandler.getUrl(), InfoCache.Type.CHANNEL_TAB,
                Single.fromCallable(() ->
                        ChannelTabInfo.getInfo(NewPipe.getService(serviceId), listLinkHandler)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getMoreChannelTabItems,"Single<InfoItemsPage<InfoItem>> getMoreChannelTabItems(int,ListLinkHandler,Page)","[139, 147]","{'A386': [(143, 147)], 'A298': [(139, 142)]}","{'A386': 0.5555555555555556, 'A298': 0.4444444444444444}",A386,,"    public static Single<InfoItemsPage<InfoItem>> getMoreChannelTabItems(
            final int serviceId,
            final ListLinkHandler listLinkHandler,
            final Page nextPage) {
        checkServiceId(serviceId);
        return Single.fromCallable(() ->
                ChannelTabInfo.getMoreItems(NewPipe.getService(serviceId),
                        listLinkHandler, nextPage));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getCommentsInfo,"Single<CommentsInfo> getCommentsInfo(int,String,boolean)","[149, 156]","{'A305': [(149, 150), (153, 153)], 'A289': [(152, 152), (156, 156)], 'A294': [(151, 151), (154, 155)]}","{'A305': 0.375, 'A289': 0.25, 'A294': 0.375}",A305,,"    public static Single<CommentsInfo> getCommentsInfo(final int serviceId,
                                                       final String url,
                                                       final boolean forceLoad) {
        checkServiceId(serviceId);
        return checkCache(forceLoad, serviceId, url, InfoCache.Type.COMMENTS,
                Single.fromCallable(() ->
                        CommentsInfo.getInfo(NewPipe.getService(serviceId), url)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getMoreCommentItems,"Single<InfoItemsPage<CommentsInfoItem>> getMoreCommentItems(int,CommentsInfo,Page)","[158, 165]","{'A305': [(158, 161)], 'A289': [(162, 163), (165, 165)], 'A294': [(164, 164)]}","{'A305': 0.5, 'A289': 0.375, 'A294': 0.125}",A305,,"    public static Single<InfoItemsPage<CommentsInfoItem>> getMoreCommentItems(
            final int serviceId,
            final CommentsInfo info,
            final Page nextPage) {
        checkServiceId(serviceId);
        return Single.fromCallable(() ->
                CommentsInfo.getMoreItems(NewPipe.getService(serviceId), info, nextPage));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getMoreCommentItems,"Single<InfoItemsPage<CommentsInfoItem>> getMoreCommentItems(int,String,Page)","[167, 174]","{'A305': [(167, 174)]}",{'A305': 1.0},A305,,"    public static Single<InfoItemsPage<CommentsInfoItem>> getMoreCommentItems(
            final int serviceId,
            final String url,
            final Page nextPage) {
        checkServiceId(serviceId);
        return Single.fromCallable(() ->
                CommentsInfo.getMoreItems(NewPipe.getService(serviceId), url, nextPage));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getPlaylistInfo,"Single<PlaylistInfo> getPlaylistInfo(int,String,boolean)","[176, 183]","{'A301': [(183, 183)], 'A305': [(176, 177), (180, 180)], 'A294': [(178, 178), (181, 182)], 'A324': [(179, 179)]}","{'A301': 0.125, 'A305': 0.375, 'A294': 0.375, 'A324': 0.125}",A305,,"    public static Single<PlaylistInfo> getPlaylistInfo(final int serviceId,
                                                       final String url,
                                                       final boolean forceLoad) {
        checkServiceId(serviceId);
        return checkCache(forceLoad, serviceId, url, InfoCache.Type.PLAYLIST,
                Single.fromCallable(() ->
                        PlaylistInfo.getInfo(NewPipe.getService(serviceId), url)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getMorePlaylistItems,"Single<InfoItemsPage<StreamInfoItem>> getMorePlaylistItems(int,String,Page)","[185, 191]","{'A305': [(185, 187)], 'A302': [(189, 189), (191, 191)], 'A294': [(190, 190)], 'A324': [(188, 188)]}","{'A305': 0.42857142857142855, 'A302': 0.2857142857142857, 'A294': 0.14285714285714285, 'A324': 0.14285714285714285}",A305,,"    public static Single<InfoItemsPage<StreamInfoItem>> getMorePlaylistItems(final int serviceId,
                                                                             final String url,
                                                                             final Page nextPage) {
        checkServiceId(serviceId);
        return Single.fromCallable(() ->
                PlaylistInfo.getMoreItems(NewPipe.getService(serviceId), url, nextPage));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getKioskInfo,"Single<KioskInfo> getKioskInfo(int,String,boolean)","[193, 198]","{'A305': [(193, 194), (196, 196)], 'A302': [(198, 198)], 'A294': [(195, 195), (197, 197)]}","{'A305': 0.5, 'A302': 0.16666666666666666, 'A294': 0.3333333333333333}",A305,,"    public static Single<KioskInfo> getKioskInfo(final int serviceId,
                                                 final String url,
                                                 final boolean forceLoad) {
        return checkCache(forceLoad, serviceId, url, InfoCache.Type.KIOSK,
                Single.fromCallable(() -> KioskInfo.getInfo(NewPipe.getService(serviceId), url)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,getMoreKioskItems,"Single<InfoItemsPage<StreamInfoItem>> getMoreKioskItems(int,String,Page)","[200, 205]","{'A301': [(205, 205)], 'A305': [(200, 202)], 'A302': [(203, 203)], 'A294': [(204, 204)]}","{'A301': 0.16666666666666666, 'A305': 0.5, 'A302': 0.16666666666666666, 'A294': 0.16666666666666666}",A305,,"    public static Single<InfoItemsPage<StreamInfoItem>> getMoreKioskItems(final int serviceId,
                                                                          final String url,
                                                                          final Page nextPage) {
        return Single.fromCallable(() ->
                KioskInfo.getMoreItems(NewPipe.getService(serviceId), url, nextPage));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,checkCache,"Single<I> checkCache(boolean,int,String,InfoCache.Type,Single<I>)","[224, 245]","{'A301': [(232, 232), (234, 234), (237, 237), (241, 245)], 'A305': [(225, 228), (231, 231), (235, 235), (238, 238)], 'A294': [(224, 224), (230, 230), (233, 233), (236, 236), (240, 240)], 'A386': [(239, 239)], 'A324': [(229, 229)]}","{'A301': 0.36363636363636365, 'A305': 0.3181818181818182, 'A294': 0.22727272727272727, 'A386': 0.045454545454545456, 'A324': 0.045454545454545456}",A301,,"    private static <I extends Info> Single<I> checkCache(final boolean forceLoad,
                                                         final int serviceId,
                                                         @NonNull final String url,
                                                         @NonNull final InfoCache.Type cacheType,
                                                         @NonNull final Single<I> loadFromNetwork) {
        checkServiceId(serviceId);
        final Single<I> actualLoadFromNetwork = loadFromNetwork
                .doOnSuccess(info -> CACHE.putInfo(serviceId, url, info, cacheType));

        final Single<I> load;
        if (forceLoad) {
            CACHE.removeInfo(serviceId, url, cacheType);
            load = actualLoadFromNetwork;
        } else {
            load = Maybe.concat(ExtractorHelper.loadFromCache(serviceId, url, cacheType),
                            actualLoadFromNetwork.toMaybe())
                    .firstElement() // Take the first valid
                    .toSingle();
        }

        return load;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,loadFromCache,"Maybe<I> loadFromCache(int,String,InfoCache.Type)","[256, 275]","{'A301': [(267, 267), (272, 272), (275, 275)], 'A305': [(256, 259), (263, 263)], 'A289': [(262, 262), (268, 271), (273, 274)], 'A302': [(261, 261)], 'A294': [(264, 266)], 'A324': [(260, 260)]}","{'A301': 0.15, 'A305': 0.25, 'A289': 0.35, 'A302': 0.05, 'A294': 0.15, 'A324': 0.05}",A289,,"    private static <I extends Info> Maybe<I> loadFromCache(
            final int serviceId,
            @NonNull final String url,
            @NonNull final InfoCache.Type cacheType) {
        checkServiceId(serviceId);
        return Maybe.defer(() -> {
            //noinspection unchecked
            final I info = (I) CACHE.getFromKey(serviceId, url, cacheType);
            if (MainActivity.DEBUG) {
                Log.d(TAG, ""loadFromCache() called, info > "" + info);
            }

            // Only return info if it's not null (it is cached)
            if (info != null) {
                return Maybe.just(info);
            }

            return Maybe.empty();
        });
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,isCached,"boolean isCached(int,String,InfoCache.Type)","[277, 281]","{'A305': [(277, 280)], 'A291': [(281, 281)]}","{'A305': 0.8, 'A291': 0.2}",A305,,"    public static boolean isCached(final int serviceId,
                                   @NonNull final String url,
                                   @NonNull final InfoCache.Type cacheType) {
        return null != loadFromCache(serviceId, url, cacheType).blockingGet();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,showMetaInfoInTextView,"void showMetaInfoInTextView(List<MetaInfo>,TextView,View,CompositeDisposable)","[299, 343]","{'A305': [(299, 305), (307, 343)], 'A386': [(306, 306)]}","{'A305': 0.9777777777777777, 'A386': 0.022222222222222223}",A305,,"    public static void showMetaInfoInTextView(@Nullable final List<MetaInfo> metaInfos,
                                              final TextView metaInfoTextView,
                                              final View metaInfoSeparator,
                                              final CompositeDisposable disposables) {
        final Context context = metaInfoTextView.getContext();
        if (metaInfos == null || metaInfos.isEmpty()
                || !PreferenceManager.getDefaultSharedPreferences(context).getBoolean(
                context.getString(R.string.show_meta_info_key), true)) {
            metaInfoTextView.setVisibility(View.GONE);
            metaInfoSeparator.setVisibility(View.GONE);

        } else {
            final StringBuilder stringBuilder = new StringBuilder();
            for (final MetaInfo metaInfo : metaInfos) {
                if (!isNullOrEmpty(metaInfo.getTitle())) {
                    stringBuilder.append(""<b>"").append(metaInfo.getTitle()).append(""</b>"")
                            .append(Localization.DOT_SEPARATOR);
                }

                String content = metaInfo.getContent().getContent().trim();
                if (content.endsWith(""."")) {
                    content = content.substring(0, content.length() - 1); // remove . at end
                }
                stringBuilder.append(content);

                for (int i = 0; i < metaInfo.getUrls().size(); i++) {
                    if (i == 0) {
                        stringBuilder.append(Localization.DOT_SEPARATOR);
                    } else {
                        stringBuilder.append(""<br/><br/>"");
                    }

                    stringBuilder
                            .append(""<a href=\"""").append(metaInfo.getUrls().get(i)).append(""\"">"")
                            .append(capitalizeIfAllUppercase(metaInfo.getUrlTexts().get(i).trim()))
                            .append(""</a>"");
                }
            }

            metaInfoSeparator.setVisibility(View.VISIBLE);
            TextLinkifier.fromHtml(metaInfoTextView, stringBuilder.toString(),
                    HtmlCompat.FROM_HTML_SEPARATOR_LINE_BREAK_HEADING, null, null, disposables,
                    SET_LINK_MOVEMENT_METHOD);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ExtractorHelper.java,ExtractorHelper,capitalizeIfAllUppercase,String capitalizeIfAllUppercase(String),"[345, 357]","{'A305': [(345, 357)]}",{'A305': 1.0},A305,,"    private static String capitalizeIfAllUppercase(final String text) {
        for (int i = 0; i < text.length(); i++) {
            if (Character.isLowerCase(text.charAt(i))) {
                return text; // there is at least a lowercase letter -> not all uppercase
            }
        }

        if (text.isEmpty()) {
            return text;
        } else {
            return text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/KeyboardUtil.java,KeyboardUtil,showKeyboard,"void showKeyboard(Activity,EditText)","[19, 41]","{'A300': [(19, 26), (40, 41)], 'A407': [(27, 39)]}","{'A300': 0.43478260869565216, 'A407': 0.5652173913043478}",A407,,"    public static void showKeyboard(final Activity activity, final EditText editText) {
        if (activity == null || editText == null) {
            return;
        }

        if (editText.requestFocus()) {
            final InputMethodManager imm = ContextCompat.getSystemService(activity,
                    InputMethodManager.class);
            if (!imm.showSoftInput(editText, InputMethodManager.SHOW_FORCED)) {
                /*
                 * Sometimes the keyboard can't be shown because Android's ImeFocusController is in
                 * a incorrect state e.g. when animations are disabled or the unfocus event of the
                 * previous view arrives in the wrong moment (see #7647 for details).
                 * The invalid state can be fixed by to re-focusing the editText.
                 */
                editText.clearFocus();
                editText.requestFocus();

                // Try again
                imm.showSoftInput(editText, InputMethodManager.SHOW_FORCED);
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/KeyboardUtil.java,KeyboardUtil,hideKeyboard,"void hideKeyboard(Activity,EditText)","[43, 54]","{'A300': [(43, 54)]}",{'A300': 1.0},A300,,"    public static void hideKeyboard(final Activity activity, final EditText editText) {
        if (activity == null || editText == null) {
            return;
        }

        final InputMethodManager imm = ContextCompat.getSystemService(activity,
                InputMethodManager.class);
        imm.hideSoftInputFromWindow(editText.getWindowToken(),
                InputMethodManager.RESULT_UNCHANGED_SHOWN);

        editText.clearFocus();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/BridgeStateSaverInitializer.java,BridgeStateSaverInitializer,init,void init(Context),"[21, 57]","{'A300': [(21, 57)]}",{'A300': 1.0},A300,,"    public static void init(final Context context) {
        Bridge.initialize(
            context,
            new SavedStateHandler() {
                @Override
                public void saveInstanceState(
                    @NonNull final Object target,
                    @NonNull final Bundle state) {
                    StateSaver.saveInstanceState(target, state);
                }

                @Override
                public void restoreInstanceState(
                    @NonNull final Object target,
                    @Nullable final Bundle state) {
                    StateSaver.restoreInstanceState(target, state);
                }
            },
            new ViewSavedStateHandler() {
                @NonNull
                @Override
                public <T extends View> Parcelable saveInstanceState(
                    @NonNull final T target,
                    @Nullable final Parcelable parentState) {
                    return StateSaver.saveInstanceState(target, parentState);
                }

                @Nullable
                @Override
                public <T extends View> Parcelable restoreInstanceState(
                    @NonNull final T target,
                    @Nullable final Parcelable state) {
                    return StateSaver.restoreInstanceState(target, state);
                }
            }
        );
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/BridgeStateSaverInitializer.java,BridgeStateSaverInitializer,saveInstanceState,"void saveInstanceState(Object,Bundle)","[25, 30]","{'A300': [(25, 30)]}",{'A300': 1.0},A300,,"                @Override
                public void saveInstanceState(
                    @NonNull final Object target,
                    @NonNull final Bundle state) {
                    StateSaver.saveInstanceState(target, state);
                }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/BridgeStateSaverInitializer.java,BridgeStateSaverInitializer,restoreInstanceState,"void restoreInstanceState(Object,Bundle)","[32, 37]","{'A300': [(32, 37)]}",{'A300': 1.0},A300,,"                @Override
                public void restoreInstanceState(
                    @NonNull final Object target,
                    @Nullable final Bundle state) {
                    StateSaver.restoreInstanceState(target, state);
                }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/BridgeStateSaverInitializer.java,BridgeStateSaverInitializer,saveInstanceState,"Parcelable saveInstanceState(T,Parcelable)","[40, 46]","{'A300': [(40, 46)]}",{'A300': 1.0},A300,,"                @NonNull
                @Override
                public <T extends View> Parcelable saveInstanceState(
                    @NonNull final T target,
                    @Nullable final Parcelable parentState) {
                    return StateSaver.saveInstanceState(target, parentState);
                }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/BridgeStateSaverInitializer.java,BridgeStateSaverInitializer,restoreInstanceState,"Parcelable restoreInstanceState(T,Parcelable)","[48, 54]","{'A300': [(48, 54)]}",{'A300': 1.0},A300,,"                @Nullable
                @Override
                public <T extends View> Parcelable restoreInstanceState(
                    @NonNull final T target,
                    @Nullable final Parcelable state) {
                    return StateSaver.restoreInstanceState(target, state);
                }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/KioskTranslator.java,KioskTranslator,getTranslatedKioskName,"String getTranslatedKioskName(String,Context)","[31, 58]","{'A302': [(33, 38), (45, 46), (55, 58)], 'A298': [(47, 50)], 'A294': [(31, 31)], 'A306': [(32, 32)], 'A291': [(39, 44)], 'A397': [(51, 54)]}","{'A302': 0.42857142857142855, 'A298': 0.14285714285714285, 'A294': 0.03571428571428571, 'A306': 0.03571428571428571, 'A291': 0.21428571428571427, 'A397': 0.14285714285714285}",A302,,"    public static String getTranslatedKioskName(final String kioskId, final Context c) {
        switch (kioskId) {
            case ""Trending"":
                return c.getString(R.string.trending);
            case ""Top 50"":
                return c.getString(R.string.top_50);
            case ""New & hot"":
                return c.getString(R.string.new_and_hot);
            case ""Local"":
                return c.getString(R.string.local);
            case ""Recently added"":
                return c.getString(R.string.recently_added);
            case ""Most liked"":
                return c.getString(R.string.most_liked);
            case ""conferences"":
                return c.getString(R.string.conferences);
            case ""recent"":
                return c.getString(R.string.recent);
            case ""live"":
                return c.getString(R.string.duration_live);
            case ""Featured"":
                return c.getString(R.string.featured);
            case ""Radio"":
                return c.getString(R.string.radio);
            default:
                return kioskId;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/KioskTranslator.java,KioskTranslator,getKioskIcon,int getKioskIcon(String),"[60, 83]","{'A298': [(70, 70), (74, 74)], 'A294': [(61, 61), (65, 65)], 'A306': [(62, 64), (80, 83)], 'A291': [(72, 72)], 'A397': [(76, 76), (78, 78)], 'A299': [(60, 60)], 'A312': [(66, 66), (68, 68), (71, 71), (73, 73), (75, 75), (77, 77), (79, 79)], 'A289': [(67, 67), (69, 69)]}","{'A298': 0.08333333333333333, 'A294': 0.08333333333333333, 'A306': 0.2916666666666667, 'A291': 0.041666666666666664, 'A397': 0.08333333333333333, 'A299': 0.041666666666666664, 'A312': 0.2916666666666667, 'A289': 0.08333333333333333}",A306,,"    public static int getKioskIcon(final String kioskId) {
        switch (kioskId) {
            case ""Trending"":
            case ""Top 50"":
            case ""New & hot"":
            case ""conferences"":
                return R.drawable.ic_whatshot;
            case ""Local"":
                return R.drawable.ic_home;
            case ""Recently added"":
            case ""recent"":
                return R.drawable.ic_add_circle_outline;
            case ""Most liked"":
                return R.drawable.ic_thumb_up;
            case ""live"":
                return R.drawable.ic_live_tv;
            case ""Featured"":
                return R.drawable.ic_stars;
            case ""Radio"":
                return R.drawable.ic_radio;
            default:
                return 0;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getDefaultResolutionIndex,"int getDefaultResolutionIndex(Context,List<VideoStream>)","[81, 86]","{'A436': [(84, 85)], 'A294': [(81, 83)], 'A310': [(86, 86)]}","{'A436': 0.3333333333333333, 'A294': 0.5, 'A310': 0.16666666666666666}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getDefaultResolutionIndex(final Context context,
                                                final List<VideoStream> videoStreams) {
        final String defaultResolution = computeDefaultResolution(context,
                R.string.default_resolution_key, R.string.default_resolution_value);
        return getDefaultResolutionWithDefaultFormat(context, defaultResolution, videoStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getResolutionIndex,"int getResolutionIndex(Context,List<VideoStream>,String)","[95, 99]","{'A301': [(98, 99)], 'A294': [(95, 97)]}","{'A301': 0.4, 'A294': 0.6}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getResolutionIndex(final Context context,
                                         final List<VideoStream> videoStreams,
                                         final String defaultResolution) {
        return getDefaultResolutionWithDefaultFormat(context, defaultResolution, videoStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getPopupDefaultResolutionIndex,"int getPopupDefaultResolutionIndex(Context,List<VideoStream>)","[107, 112]","{'A436': [(110, 111)], 'A294': [(107, 109)], 'A310': [(112, 112)]}","{'A436': 0.3333333333333333, 'A294': 0.5, 'A310': 0.16666666666666666}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getPopupDefaultResolutionIndex(final Context context,
                                                     final List<VideoStream> videoStreams) {
        final String defaultResolution = computeDefaultResolution(context,
                R.string.default_popup_resolution_key, R.string.default_popup_resolution_value);
        return getDefaultResolutionWithDefaultFormat(context, defaultResolution, videoStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getPopupResolutionIndex,"int getPopupResolutionIndex(Context,List<VideoStream>,String)","[121, 125]","{'A301': [(124, 125)], 'A294': [(121, 123)]}","{'A301': 0.4, 'A294': 0.6}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getPopupResolutionIndex(final Context context,
                                              final List<VideoStream> videoStreams,
                                              final String defaultResolution) {
        return getDefaultResolutionWithDefaultFormat(context, defaultResolution, videoStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getDefaultAudioFormat,"int getDefaultAudioFormat(Context,List<AudioStream>)","[127, 131]","{'A294': [(127, 128)], 'A386': [(129, 131)]}","{'A294': 0.4, 'A386': 0.6}",A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getDefaultAudioFormat(final Context context,
                                            final List<AudioStream> audioStreams) {
        return getAudioIndexByHighestRank(audioStreams,
                getAudioTrackComparator(context).thenComparing(getAudioFormatComparator(context)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getDefaultAudioTrackGroup,"int getDefaultAudioTrackGroup(Context,List<List<AudioStream>>)","[133, 144]","{'A386': [(133, 144)]}",{'A386': 1.0},A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getDefaultAudioTrackGroup(final Context context,
                                                final List<List<AudioStream>> groupedAudioStreams) {
        if (groupedAudioStreams == null || groupedAudioStreams.isEmpty()) {
            return -1;
        }

        final Comparator<AudioStream> cmp = getAudioTrackComparator(context);
        final List<AudioStream> highestRanked = groupedAudioStreams.stream()
                .max((o1, o2) -> cmp.compare(o1.get(0), o2.get(0)))
                .orElse(null);
        return groupedAudioStreams.indexOf(highestRanked);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioFormatIndex,"int getAudioFormatIndex(Context,List<AudioStream>,String)","[146, 159]","{'A301': [(157, 157), (159, 159)], 'A386': [(146, 156), (158, 158)]}","{'A301': 0.14285714285714285, 'A386': 0.8571428571428571}",A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static int getAudioFormatIndex(final Context context,
                                          final List<AudioStream> audioStreams,
                                          @Nullable final String trackId) {
        if (trackId != null) {
            for (int i = 0; i < audioStreams.size(); i++) {
                final AudioStream s = audioStreams.get(i);
                if (s.getAudioTrackId() != null
                        && s.getAudioTrackId().equals(trackId)) {
                    return i;
                }
            }
        }
        return getDefaultAudioFormat(context, audioStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getStreamsOfSpecifiedDelivery,"List<S> getStreamsOfSpecifiedDelivery(List<S>,DeliveryMethod)","[170, 176]","{'A298': [(172, 172)], 'A333': [(170, 171), (173, 176)]}","{'A298': 0.14285714285714285, 'A333': 0.8571428571428571}",A333,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @NonNull
    public static <S extends Stream> List<S> getStreamsOfSpecifiedDelivery(
            @Nullable final List<S> streamList,
            final DeliveryMethod deliveryMethod) {
        return getFilteredStreamList(streamList,
                stream -> stream.getDeliveryMethod() == deliveryMethod);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getUrlAndNonTorrentStreams,List<S> getUrlAndNonTorrentStreams(List<S>),"[185, 190]","{'A298': [(187, 187)], 'A333': [(185, 185), (188, 190)], 'A305': [(186, 186)]}","{'A298': 0.16666666666666666, 'A333': 0.6666666666666666, 'A305': 0.16666666666666666}",A333,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @NonNull
    public static <S extends Stream> List<S> getUrlAndNonTorrentStreams(
            @Nullable final List<S> streamList) {
        return getFilteredStreamList(streamList,
                stream -> stream.isUrl() && stream.getDeliveryMethod() != DeliveryMethod.TORRENT);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getPlayableStreams,"List<S> getPlayableStreams(List<S>,int)","[206, 217]","{'A298': [(207, 209), (211, 211), (214, 216)], 'A333': [(206, 206), (210, 210), (212, 213), (217, 217)]}","{'A298': 0.5833333333333334, 'A333': 0.4166666666666667}",A298,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @NonNull
    public static <S extends Stream> List<S> getPlayableStreams(
            @Nullable final List<S> streamList, final int serviceId) {
        final int youtubeServiceId = YouTube.getServiceId();
        return getFilteredStreamList(streamList,
                stream -> stream.getDeliveryMethod() != DeliveryMethod.TORRENT
                        && (stream.getDeliveryMethod() != DeliveryMethod.HLS
                        || stream.getFormat() != MediaFormat.OPUS)
                        && (serviceId != youtubeServiceId
                        || stream.getItagItem() == null
                        || SUPPORTED_ITAG_IDS.contains(stream.getItagItem().id)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getSortedStreamVideosList,"List<VideoStream> getSortedStreamVideosList(Context,List<VideoStream>,List<VideoStream>,boolean,boolean)","[231, 248]","{'A301': [(240, 240), (245, 245), (248, 248)], 'A293': [(231, 237), (247, 247)], 'A294': [(241, 244), (246, 246)], 'A300': [(238, 239)]}","{'A301': 0.16666666666666666, 'A293': 0.4444444444444444, 'A294': 0.2777777777777778, 'A300': 0.1111111111111111}",A293,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @NonNull
    public static List<VideoStream> getSortedStreamVideosList(
            @NonNull final Context context,
            @Nullable final List<VideoStream> videoStreams,
            @Nullable final List<VideoStream> videoOnlyStreams,
            final boolean ascendingOrder,
            final boolean preferVideoOnlyStreams) {
        final SharedPreferences preferences =
                PreferenceManager.getDefaultSharedPreferences(context);

        final boolean showHigherResolutions = preferences.getBoolean(
                context.getString(R.string.show_higher_resolutions_key), false);
        final MediaFormat defaultFormat = getDefaultFormat(context,
                R.string.default_video_format_key, R.string.default_video_format_value);

        return getSortedStreamVideosList(defaultFormat, showHigherResolutions, videoStreams,
                videoOnlyStreams, ascendingOrder, preferVideoOnlyStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getSortedResolutionList,"List<String> getSortedResolutionList(Resources,int,int,boolean)","[260, 275]","{'A298': [(265, 265), (268, 268), (272, 274)], 'A377': [(260, 264), (266, 267), (269, 271), (275, 275)]}","{'A298': 0.3125, 'A377': 0.6875}",A377,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static List<String> getSortedResolutionList(
            final Resources resources,
            final int defaultResolutionKey,
            final int additionalResolutionKey,
            final boolean showHigherResolutions) {
        final List<String> resolutions = new ArrayList<>(Arrays.asList(
                resources.getStringArray(defaultResolutionKey)));
        if (!showHigherResolutions) {
            return resolutions;
        }
        final List<String> additionalResolutions = Arrays.asList(
                resources.getStringArray(additionalResolutionKey));
        // keep ""best resolution"" at the top
        resolutions.addAll(1, additionalResolutions);
        return resolutions;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,isHighResolutionSelected,"boolean isHighResolutionSelected(String,int,Resources)","[277, 283]","{'A377': [(277, 283)]}",{'A377': 1.0},A377,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static boolean isHighResolutionSelected(final String selectedResolution,
                                             final int additionalResolutionKey,
                                             final Resources resources) {
        return Arrays.asList(resources.getStringArray(
                        additionalResolutionKey))
                .contains(selectedResolution);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getFilteredAudioStreams,"List<AudioStream> getFilteredAudioStreams(Context,List<AudioStream>)","[293, 327]","{'A295': [(325, 325)], 'A386': [(293, 304), (308, 324), (326, 327)], 'A333': [(305, 307)]}","{'A295': 0.02857142857142857, 'A386': 0.8857142857142857, 'A333': 0.08571428571428572}",A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static List<AudioStream> getFilteredAudioStreams(
            @NonNull final Context context,
            @Nullable final List<AudioStream> audioStreams) {
        if (audioStreams == null) {
            return Collections.emptyList();
        }

        final HashMap<String, AudioStream> collectedStreams = new HashMap<>();

        final Comparator<AudioStream> cmp = getAudioFormatComparator(context);

        for (final AudioStream stream : audioStreams) {
            if (stream.getDeliveryMethod() == DeliveryMethod.TORRENT
                    || (stream.getDeliveryMethod() == DeliveryMethod.HLS
                    && stream.getFormat() == MediaFormat.OPUS)) {
                continue;
            }

            final String trackId = Objects.toString(stream.getAudioTrackId(), """");

            final AudioStream presentStream = collectedStreams.get(trackId);
            if (presentStream == null || cmp.compare(stream, presentStream) > 0) {
                collectedStreams.put(trackId, stream);
            }
        }

        // Filter unknown audio tracks if there are multiple tracks
        if (collectedStreams.size() > 1) {
            collectedStreams.remove("""");
        }

        // Sort collected streams by name
        return collectedStreams.values().stream().sorted(getAudioTrackNameComparator())
                .collect(Collectors.toList());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getGroupedAudioStreams,"List<List<AudioStream>> getGroupedAudioStreams(Context,List<AudioStream>)","[336, 369]","{'A295': [(362, 362)], 'A386': [(336, 361), (363, 369)]}","{'A295': 0.029411764705882353, 'A386': 0.9705882352941176}",A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static List<List<AudioStream>> getGroupedAudioStreams(
            @NonNull final Context context,
            @Nullable final List<AudioStream> audioStreams) {
        if (audioStreams == null) {
            return Collections.emptyList();
        }

        final HashMap<String, List<AudioStream>> collectedStreams = new HashMap<>();

        for (final AudioStream stream : audioStreams) {
            final String trackId = Objects.toString(stream.getAudioTrackId(), """");
            if (collectedStreams.containsKey(trackId)) {
                collectedStreams.get(trackId).add(stream);
            } else {
                final List<AudioStream> list = new ArrayList<>();
                list.add(stream);
                collectedStreams.put(trackId, list);
            }
        }

        // Filter unknown audio tracks if there are multiple tracks
        if (collectedStreams.size() > 1) {
            collectedStreams.remove("""");
        }

        // Sort tracks alphabetically, sort track streams by quality
        final Comparator<AudioStream> nameCmp = getAudioTrackNameComparator();
        final Comparator<AudioStream> formatCmp = getAudioFormatComparator(context);

        return collectedStreams.values().stream()
                .sorted((o1, o2) -> nameCmp.compare(o1.get(0), o2.get(0)))
                .map(streams -> streams.stream().sorted(formatCmp).collect(Collectors.toList()))
                .collect(Collectors.toList());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getFilteredStreamList,"List<S> getFilteredStreamList(List<S>,Predicate<S>)","[383, 393]","{'A298': [(384, 384)], 'A333': [(383, 383), (385, 393)]}","{'A298': 0.09090909090909091, 'A333': 0.9090909090909091}",A333,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static <S extends Stream> List<S> getFilteredStreamList(
            @Nullable final List<S> streamList,
            final Predicate<S> streamListPredicate) {
        if (streamList == null) {
            return Collections.emptyList();
        }

        return streamList.stream()
                .filter(streamListPredicate)
                .collect(Collectors.toList());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,computeDefaultResolution,"String computeDefaultResolution(Context,int,int)","[395, 412]","{'A298': [(395, 395), (400, 400)], 'A436': [(399, 399), (401, 404), (409, 412)], 'A294': [(396, 396), (405, 407)], 'A300': [(397, 398)], 'A437': [(408, 408)]}","{'A298': 0.1111111111111111, 'A436': 0.5, 'A294': 0.2222222222222222, 'A300': 0.1111111111111111, 'A437': 0.05555555555555555}",A436,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static String computeDefaultResolution(@NonNull final Context context, final int key,
                                                   final int value) {
        final SharedPreferences preferences =
                PreferenceManager.getDefaultSharedPreferences(context);

        // Load the preferred resolution otherwise the best available
        String resolution = preferences != null
                ? preferences.getString(context.getString(key), context.getString(value))
                : context.getString(R.string.best_resolution_key);

        final String maxResolution = getResolutionLimit(context);
        if (maxResolution != null
                && (resolution.equals(context.getString(R.string.best_resolution_key))
                || compareVideoStreamResolution(maxResolution, resolution) < 1)) {
            resolution = maxResolution;
        }
        return resolution;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getDefaultResolutionIndex,"int getDefaultResolutionIndex(String,String,MediaFormat,List<VideoStream>)","[425, 447]","{'A436': [(432, 437), (440, 447)], 'A294': [(425, 427), (429, 431)], 'A333': [(428, 428)], 'A300': [(438, 439)]}","{'A436': 0.6086956521739131, 'A294': 0.2608695652173913, 'A333': 0.043478260869565216, 'A300': 0.08695652173913043}",A436,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    static int getDefaultResolutionIndex(final String defaultResolution,
                                         final String bestResolutionKey,
                                         final MediaFormat defaultFormat,
                                         @Nullable final List<VideoStream> videoStreams) {
        if (videoStreams == null || videoStreams.isEmpty()) {
            return -1;
        }

        sortStreamList(videoStreams, false);
        if (defaultResolution.equals(bestResolutionKey)) {
            return 0;
        }

        final int defaultStreamIndex =
                getVideoStreamIndex(defaultResolution, defaultFormat, videoStreams);

        // this is actually an error,
        // but maybe there is really no stream fitting to the default value.
        if (defaultStreamIndex == -1) {
            return 0;
        }
        return defaultStreamIndex;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getSortedStreamVideosList,"List<VideoStream> getSortedStreamVideosList(MediaFormat,boolean,List<VideoStream>,List<VideoStream>,boolean,boolean)","[462, 504]","{'A301': [(488, 488), (490, 490), (494, 495), (500, 501), (504, 504)], 'A293': [(462, 468)], 'A294': [(492, 493), (497, 499)], 'A386': [(485, 486)], 'A333': [(484, 484)], 'A300': [(469, 483), (487, 487), (489, 489), (491, 491), (496, 496), (502, 503)]}","{'A301': 0.16279069767441862, 'A293': 0.16279069767441862, 'A294': 0.11627906976744186, 'A386': 0.046511627906976744, 'A333': 0.023255813953488372, 'A300': 0.4883720930232558}",A300,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @NonNull
    static List<VideoStream> getSortedStreamVideosList(
            @Nullable final MediaFormat defaultFormat,
            final boolean showHigherResolutions,
            @Nullable final List<VideoStream> videoStreams,
            @Nullable final List<VideoStream> videoOnlyStreams,
            final boolean ascendingOrder,
            final boolean preferVideoOnlyStreams
    ) {
        // Determine order of streams
        // The last added list is preferred
        final List<List<VideoStream>> videoStreamsOrdered =
                preferVideoOnlyStreams
                        ? Arrays.asList(videoStreams, videoOnlyStreams)
                        : Arrays.asList(videoOnlyStreams, videoStreams);

        final List<VideoStream> allInitialStreams = videoStreamsOrdered.stream()
                // Ignore lists that are null
                .filter(Objects::nonNull)
                .flatMap(List::stream)
                // Filter out higher resolutions (or not if high resolutions should always be shown)
                .filter(stream -> showHigherResolutions
                        || !HIGH_RESOLUTION_LIST.contains(stream.getResolution()
                        // Replace any frame rate with nothing
                        .replaceAll(""p\\d+$"", ""p"")))
                .collect(Collectors.toList());

        final HashMap<String, VideoStream> hashMap = new HashMap<>();
        // Add all to the hashmap
        for (final VideoStream videoStream : allInitialStreams) {
            hashMap.put(videoStream.getResolution(), videoStream);
        }

        // Override the values when the key == resolution, with the defaultFormat
        for (final VideoStream videoStream : allInitialStreams) {
            if (videoStream.getFormat() == defaultFormat) {
                hashMap.put(videoStream.getResolution(), videoStream);
            }
        }

        // Return the sorted list
        return sortStreamList(new ArrayList<>(hashMap.values()), ascendingOrder);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,sortStreamList,"List<VideoStream> sortStreamList(List<VideoStream>,boolean)","[526, 534]","{'A301': [(534, 534)], 'A295': [(528, 532)], 'A300': [(526, 527), (533, 533)]}","{'A301': 0.1111111111111111, 'A295': 0.5555555555555556, 'A300': 0.3333333333333333}",A295,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static List<VideoStream> sortStreamList(final List<VideoStream> videoStreams,
                                                    final boolean ascendingOrder) {
        // Compares the quality of two video streams.
        final Comparator<VideoStream> comparator = Comparator.nullsLast(Comparator
                .comparing(VideoStream::getResolution, ListHelper::compareVideoStreamResolution)
                .thenComparingInt(s -> VIDEO_FORMAT_QUALITY_RANKING.indexOf(s.getFormat())));
        Collections.sort(videoStreams, ascendingOrder ? comparator : comparator.reversed());
        return videoStreams;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioIndexByHighestRank,"int getAudioIndexByHighestRank(List<AudioStream>,Comparator<AudioStream>)","[544, 554]","{'A436': [(554, 554)], 'A386': [(544, 545), (551, 551)], 'A300': [(546, 550), (552, 553)]}","{'A436': 0.09090909090909091, 'A386': 0.2727272727272727, 'A300': 0.6363636363636364}",A300,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    static int getAudioIndexByHighestRank(@Nullable final List<AudioStream> audioStreams,
                                          final Comparator<AudioStream> comparator) {
        if (audioStreams == null || audioStreams.isEmpty()) {
            return -1;
        }

        final AudioStream highestRankedAudioStream = audioStreams.stream()
                .max(comparator).orElse(null);

        return audioStreams.indexOf(highestRankedAudioStream);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getVideoStreamIndex,"int getVideoStreamIndex(String,MediaFormat,List<VideoStream>)","[575, 628]","{'A301': [(595, 595), (612, 614), (628, 628)], 'A436': [(578, 582), (584, 585), (591, 594), (596, 603), (606, 608), (611, 611), (615, 627)], 'A294': [(583, 583), (589, 590), (604, 605), (609, 610)], 'A333': [(575, 577)], 'A300': [(586, 588)]}","{'A301': 0.09259259259259259, 'A436': 0.6666666666666666, 'A294': 0.12962962962962962, 'A333': 0.05555555555555555, 'A300': 0.05555555555555555}",A436,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    static int getVideoStreamIndex(@NonNull final String targetResolution,
                                   final MediaFormat targetFormat,
                                   @NonNull final List<VideoStream> videoStreams) {
        int fullMatchIndex = -1;
        int fullMatchNoRefreshIndex = -1;
        int resMatchOnlyIndex = -1;
        int resMatchOnlyNoRefreshIndex = -1;
        int lowerResMatchNoRefreshIndex = -1;
        final String targetResolutionNoRefresh = targetResolution.replaceAll(""p\\d+$"", ""p"");

        for (int idx = 0; idx < videoStreams.size(); idx++) {
            final MediaFormat format = targetFormat == null
                    ? null
                    : videoStreams.get(idx).getFormat();
            final String resolution = videoStreams.get(idx).getResolution();
            final String resolutionNoRefresh = resolution.replaceAll(""p\\d+$"", ""p"");

            if (format == targetFormat && resolution.equals(targetResolution)) {
                fullMatchIndex = idx;
            }

            if (format == targetFormat && resolutionNoRefresh.equals(targetResolutionNoRefresh)) {
                fullMatchNoRefreshIndex = idx;
            }

            if (resMatchOnlyIndex == -1 && resolution.equals(targetResolution)) {
                resMatchOnlyIndex = idx;
            }

            if (resMatchOnlyNoRefreshIndex == -1
                    && resolutionNoRefresh.equals(targetResolutionNoRefresh)) {
                resMatchOnlyNoRefreshIndex = idx;
            }

            if (lowerResMatchNoRefreshIndex == -1 && compareVideoStreamResolution(
                    resolutionNoRefresh, targetResolutionNoRefresh) < 0) {
                lowerResMatchNoRefreshIndex = idx;
            }
        }

        if (fullMatchIndex != -1) {
            return fullMatchIndex;
        }
        if (fullMatchNoRefreshIndex != -1) {
            return fullMatchNoRefreshIndex;
        }
        if (resMatchOnlyIndex != -1) {
            return resMatchOnlyIndex;
        }
        if (resMatchOnlyNoRefreshIndex != -1) {
            return resMatchOnlyNoRefreshIndex;
        }
        return lowerResMatchNoRefreshIndex;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getDefaultResolutionWithDefaultFormat,"int getDefaultResolutionWithDefaultFormat(Context,String,List<VideoStream>)","[639, 646]","{'A301': [(646, 646)], 'A294': [(640, 645)], 'A333': [(639, 639)]}","{'A301': 0.125, 'A294': 0.75, 'A333': 0.125}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static int getDefaultResolutionWithDefaultFormat(@NonNull final Context context,
                                                             final String defaultResolution,
                                                             final List<VideoStream> videoStreams) {
        final MediaFormat defaultFormat = getDefaultFormat(context,
                R.string.default_video_format_key, R.string.default_video_format_value);
        return getDefaultResolutionIndex(defaultResolution,
                context.getString(R.string.best_resolution_key), defaultFormat, videoStreams);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getDefaultFormat,"MediaFormat getDefaultFormat(Context,int,int)","[648, 662]","{'A301': [(654, 654), (660, 660), (662, 662)], 'A294': [(650, 651), (655, 656)], 'A333': [(649, 649)], 'A300': [(652, 653)], 'A327': [(648, 648), (657, 659), (661, 661)]}","{'A301': 0.2, 'A294': 0.26666666666666666, 'A333': 0.06666666666666667, 'A300': 0.13333333333333333, 'A327': 0.3333333333333333}",A327,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @Nullable
    private static MediaFormat getDefaultFormat(@NonNull final Context context,
                                                @StringRes final int defaultFormatKey,
                                                @StringRes final int defaultFormatValueKey) {
        final SharedPreferences preferences =
                PreferenceManager.getDefaultSharedPreferences(context);

        final String defaultFormat = context.getString(defaultFormatValueKey);
        final String defaultFormatString = preferences.getString(
                context.getString(defaultFormatKey),
                defaultFormat
        );

        return getMediaFormatFromKey(context, defaultFormatString);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getMediaFormatFromKey,"MediaFormat getMediaFormatFromKey(Context,String)","[664, 680]","{'A301': [(667, 680)], 'A333': [(665, 666)], 'A327': [(664, 664)]}","{'A301': 0.8235294117647058, 'A333': 0.11764705882352941, 'A327': 0.058823529411764705}",A301,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    @Nullable
    private static MediaFormat getMediaFormatFromKey(@NonNull final Context context,
                                                     @NonNull final String formatKey) {
        MediaFormat format = null;
        if (formatKey.equals(context.getString(R.string.video_webm_key))) {
            format = MediaFormat.WEBM;
        } else if (formatKey.equals(context.getString(R.string.video_mp4_key))) {
            format = MediaFormat.MPEG_4;
        } else if (formatKey.equals(context.getString(R.string.video_3gp_key))) {
            format = MediaFormat.v3GPP;
        } else if (formatKey.equals(context.getString(R.string.audio_webm_key))) {
            format = MediaFormat.WEBMA;
        } else if (formatKey.equals(context.getString(R.string.audio_m4a_key))) {
            format = MediaFormat.M4A;
        }
        return format;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,compareVideoStreamResolution,"int compareVideoStreamResolution(String,String)","[682, 696]","{'A436': [(696, 696)], 'A333': [(682, 695)]}","{'A436': 0.06666666666666667, 'A333': 0.9333333333333333}",A333,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static int compareVideoStreamResolution(@NonNull final String r1,
                                                    @NonNull final String r2) {
        try {
            final int res1 = Integer.parseInt(r1.replaceAll(""0p\\d+$"", ""1"")
                    .replaceAll(""[^\\d.]"", """"));
            final int res2 = Integer.parseInt(r2.replaceAll(""0p\\d+$"", ""1"")
                    .replaceAll(""[^\\d.]"", """"));
            return res1 - res2;
        } catch (final NumberFormatException e) {
            // Consider the first one greater because we don't know if the two streams are
            // different or not (a NumberFormatException was thrown so we don't know the resolution
            // of one stream or of all streams)
            return 1;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,isLimitingDataUsage,boolean isLimitingDataUsage(Context),"[698, 700]","{'A436': [(699, 700)], 'A333': [(698, 698)]}","{'A436': 0.6666666666666666, 'A333': 0.3333333333333333}",A436,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    static boolean isLimitingDataUsage(@NonNull final Context context) {
        return getResolutionLimit(context) != null;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getResolutionLimit,String getResolutionLimit(Context),"[708, 719]","{'A436': [(709, 709), (715, 715), (717, 719)], 'A294': [(713, 714)], 'A333': [(708, 708)], 'A300': [(711, 712)], 'A328': [(710, 710), (716, 716)]}","{'A436': 0.4166666666666667, 'A294': 0.16666666666666666, 'A333': 0.08333333333333333, 'A300': 0.16666666666666666, 'A328': 0.16666666666666666}",A436,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static String getResolutionLimit(@NonNull final Context context) {
        String resolutionLimit = null;
        if (isMeteredNetwork(context)) {
            final SharedPreferences preferences =
                    PreferenceManager.getDefaultSharedPreferences(context);
            final String defValue = context.getString(R.string.limit_data_usage_none_key);
            final String value = preferences.getString(
                    context.getString(R.string.limit_mobile_data_usage_key), defValue);
            resolutionLimit = defValue.equals(value) ? null : value;
        }
        return resolutionLimit;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,isMeteredNetwork,boolean isMeteredNetwork(Context),"[727, 735]","{'A436': [(735, 735)], 'A294': [(730, 732)], 'A333': [(727, 727)], 'A300': [(728, 729)], 'A328': [(733, 734)]}","{'A436': 0.1111111111111111, 'A294': 0.3333333333333333, 'A333': 0.1111111111111111, 'A300': 0.2222222222222222, 'A328': 0.2222222222222222}",A294,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    public static boolean isMeteredNetwork(@NonNull final Context context) {
        final ConnectivityManager manager =
                ContextCompat.getSystemService(context, ConnectivityManager.class);
        if (manager == null || manager.getActiveNetworkInfo() == null) {
            return false;
        }

        return manager.isActiveNetworkMetered();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioFormatComparator,Comparator<AudioStream> getAudioFormatComparator(Context),"[745, 750]","{'A386': [(745, 750)]}",{'A386': 1.0},A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static Comparator<AudioStream> getAudioFormatComparator(
            final @NonNull Context context) {
        final MediaFormat defaultFormat = getDefaultFormat(context,
                R.string.default_audio_format_key, R.string.default_audio_format_value);
        return getAudioFormatComparator(defaultFormat, isLimitingDataUsage(context));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioFormatComparator,"Comparator<AudioStream> getAudioFormatComparator(MediaFormat,boolean)","[761, 779]","{'A386': [(761, 779)]}",{'A386': 1.0},A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    static Comparator<AudioStream> getAudioFormatComparator(
            @Nullable final MediaFormat defaultFormat, final boolean limitDataUsage) {
        final List<MediaFormat> formatRanking = limitDataUsage
                ? AUDIO_FORMAT_EFFICIENCY_RANKING : AUDIO_FORMAT_QUALITY_RANKING;

        Comparator<AudioStream> bitrateComparator =
                Comparator.comparingInt(AudioStream::getAverageBitrate);
        if (limitDataUsage) {
            bitrateComparator = bitrateComparator.reversed();
        }

        return Comparator.comparing(AudioStream::getFormat, (o1, o2) -> {
            if (defaultFormat != null) {
                return Boolean.compare(o1 == defaultFormat, o2 == defaultFormat);
            }
            return 0;
        }).thenComparing(bitrateComparator).thenComparingInt(
                stream -> formatRanking.indexOf(stream.getFormat()));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioTrackComparator,Comparator<AudioStream> getAudioTrackComparator(Context),"[802, 816]","{'A386': [(802, 816)]}",{'A386': 1.0},A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static Comparator<AudioStream> getAudioTrackComparator(
            @NonNull final Context context) {
        final SharedPreferences preferences =
                PreferenceManager.getDefaultSharedPreferences(context);
        final Locale preferredLanguage = Localization.getPreferredLocale(context);
        final boolean preferOriginalAudio =
                preferences.getBoolean(context.getString(R.string.prefer_original_audio_key),
                        false);
        final boolean preferDescriptiveAudio =
                preferences.getBoolean(context.getString(R.string.prefer_descriptive_audio_key),
                        false);

        return getAudioTrackComparator(preferredLanguage, preferOriginalAudio,
                preferDescriptiveAudio);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioTrackComparator,"Comparator<AudioStream> getAudioTrackComparator(Locale,boolean,boolean)","[841, 864]","{'A386': [(841, 864)]}",{'A386': 1.0},A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    static Comparator<AudioStream> getAudioTrackComparator(
            final Locale preferredLanguage,
            final boolean preferOriginalAudio,
            final boolean preferDescriptiveAudio) {
        final String langCode = preferredLanguage.getISO3Language();
        final List<AudioTrackType> trackTypeRanking = preferDescriptiveAudio
                ? AUDIO_TRACK_TYPE_RANKING_DESCRIPTIVE : AUDIO_TRACK_TYPE_RANKING;

        return Comparator.comparing(AudioStream::getAudioTrackType, (o1, o2) -> {
                    if (preferOriginalAudio) {
                        return Boolean.compare(
                                o1 == AudioTrackType.ORIGINAL, o2 == AudioTrackType.ORIGINAL);
                    }
                    return 0;
                }).thenComparing(AudioStream::getAudioLocale,
                        Comparator.nullsFirst(Comparator.comparing(
                                locale -> locale.getISO3Language().equals(langCode))))
                .thenComparing(AudioStream::getAudioTrackType,
                        Comparator.nullsFirst(Comparator.comparingInt(trackTypeRanking::indexOf)))
                .thenComparing(AudioStream::getAudioLocale,
                        Comparator.nullsFirst(Comparator.comparing(
                                locale -> locale.getISO3Language().equals(
                                        Locale.ENGLISH.getISO3Language()))));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ListHelper.java,ListHelper,getAudioTrackNameComparator,Comparator<AudioStream> getAudioTrackNameComparator(),"[872, 879]","{'A295': [(872, 873)], 'A386': [(874, 876), (879, 879)], 'A305': [(877, 878)]}","{'A295': 0.25, 'A386': 0.5, 'A305': 0.25}",A386,../projects/NewPipe/app/src/test/java/org/schabi/newpipe/util/ListHelperTest.java,"    private static Comparator<AudioStream> getAudioTrackNameComparator() {
        final Locale appLoc = Localization.getAppLocale();

        return Comparator.comparing(AudioStream::getAudioLocale, Comparator.nullsLast(
                        Comparator.comparing(locale -> locale.getDisplayName(appLoc))))
                .thenComparing(AudioStream::getAudioTrackType, Comparator.nullsLast(
                        Comparator.naturalOrder()));
    }
"
org.schabi.newpipe.util.debounce,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/debounce/DebounceSaver.java,DebounceSaver,getIsModified,boolean getIsModified(),"[52, 54]","{'A352': [(52, 54)]}",{'A352': 1.0},A352,,"    public boolean getIsModified() {
        return isModified.get();
    }
"
org.schabi.newpipe.util.debounce,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/debounce/DebounceSaver.java,DebounceSaver,setNoChangesToSave,void setNoChangesToSave(),"[56, 58]","{'A352': [(56, 58)]}",{'A352': 1.0},A352,,"    public void setNoChangesToSave() {
        isModified.set(false);
    }
"
org.schabi.newpipe.util.debounce,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/debounce/DebounceSaver.java,DebounceSaver,getDebouncedSaveSignal,PublishSubject<Long> getDebouncedSaveSignal(),"[60, 62]","{'A352': [(60, 62)]}",{'A352': 1.0},A352,,"    public PublishSubject<Long> getDebouncedSaveSignal() {
        return debouncedSaveSignal;
    }
"
org.schabi.newpipe.util.debounce,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/debounce/DebounceSaver.java,DebounceSaver,getDebouncedSaver,Disposable getDebouncedSaver(),"[64, 71]","{'A352': [(64, 71)]}",{'A352': 1.0},A352,,"    public Disposable getDebouncedSaver() {
        return debouncedSaveSignal
                .debounce(saveDebounceMillis, TimeUnit.MILLISECONDS)
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(ignored -> debounceSavable.saveImmediate(), throwable ->
                        debounceSavable.showError(new ErrorInfo(throwable,
                                UserAction.SOMETHING_ELSE, ""Debounced saver"")));
    }
"
org.schabi.newpipe.util.debounce,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/debounce/DebounceSaver.java,DebounceSaver,setHasChangesToSave,void setHasChangesToSave(),"[73, 80]","{'A352': [(73, 80)]}",{'A352': 1.0},A352,,"    public void setHasChangesToSave() {
        if (isModified == null || debouncedSaveSignal == null) {
            return;
        }

        isModified.set(true);
        debouncedSaveSignal.onNext(System.currentTimeMillis());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/OnClickGesture.java,,held,void held(T),"[8, 10]","{'A310': [(9, 10)], 'A295': [(8, 8)]}","{'A310': 0.6666666666666666, 'A295': 0.3333333333333333}",A310,,"    default void held(final T selectedItem) {
        // Optional gesture
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/OnClickGesture.java,,drag,"void drag(T,RecyclerView.ViewHolder)","[12, 14]","{'A310': [(13, 14)], 'A295': [(12, 12)]}","{'A310': 0.6666666666666666, 'A295': 0.3333333333333333}",A310,,"    default void drag(final T selectedItem, final RecyclerView.ViewHolder viewHolder) {
        // Optional gesture
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DependentPreferenceHelper.java,DependentPreferenceHelper,getResumePlaybackEnabled,boolean getResumePlaybackEnabled(Context),"[27, 34]","{'A343': [(27, 34)]}",{'A343': 1.0},A343,,"    public static boolean getResumePlaybackEnabled(final Context context) {
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);

        return prefs.getBoolean(context.getString(
                        R.string.enable_watch_history_key), true)
                && prefs.getBoolean(context.getString(
                        R.string.enable_playback_resume_key), true);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DependentPreferenceHelper.java,DependentPreferenceHelper,getPositionsInListsEnabled,boolean getPositionsInListsEnabled(Context),"[43, 50]","{'A343': [(43, 50)]}",{'A343': 1.0},A343,,"    public static boolean getPositionsInListsEnabled(final Context context) {
        final SharedPreferences prefs = PreferenceManager.getDefaultSharedPreferences(context);

        return prefs.getBoolean(context.getString(
                        R.string.enable_watch_history_key), true)
                && prefs.getBoolean(context.getString(
                        R.string.enable_playback_state_lists_key), true);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,concatenateStrings,String concatenateStrings(),"[74, 77]","{'A295': [(76, 76)], 'A310': [(74, 75), (77, 77)]}","{'A295': 0.25, 'A310': 0.75}",A310,,"    @NonNull
    public static String concatenateStrings(final String... strings) {
        return concatenateStrings(DOT_SEPARATOR, Arrays.asList(strings));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,concatenateStrings,"String concatenateStrings(String,List<String>)","[79, 84]","{'A295': [(80, 83)], 'A310': [(79, 79), (84, 84)]}","{'A295': 0.6666666666666666, 'A310': 0.3333333333333333}",A295,,"    @NonNull
    public static String concatenateStrings(final String delimiter, final List<String> strings) {
        return strings.stream()
                .filter(string -> !TextUtils.isEmpty(string))
                .collect(Collectors.joining(delimiter));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeUserName,String localizeUserName(String),"[95, 98]","{'A346': [(95, 96), (98, 98)], 'A327': [(97, 97)]}","{'A346': 0.75, 'A327': 0.25}",A346,,"    @NonNull
    public static String localizeUserName(final String plainName) {
        return BidiFormatter.getInstance().unicodeWrap(plainName);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getPreferredLocalization,org.schabi.newpipe.extractor.localization.Localization getPreferredLocalization(Context),"[100, 104]","{'A301': [(104, 104)], 'A295': [(103, 103)], 'A294': [(100, 102)]}","{'A301': 0.2, 'A295': 0.2, 'A294': 0.6}",A294,,"    public static org.schabi.newpipe.extractor.localization.Localization getPreferredLocalization(
            final Context context) {
        return org.schabi.newpipe.extractor.localization.Localization
                .fromLocale(getPreferredLocale(context));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getPreferredContentCountry,ContentCountry getPreferredContentCountry(Context),"[106, 114]","{'A301': [(113, 113)], 'A305': [(106, 106)], 'A322': [(110, 112)], 'A302': [(114, 114)], 'A294': [(107, 109)]}","{'A301': 0.1111111111111111, 'A305': 0.1111111111111111, 'A322': 0.3333333333333333, 'A302': 0.1111111111111111, 'A294': 0.3333333333333333}",A322,,"    public static ContentCountry getPreferredContentCountry(@NonNull final Context context) {
        final String contentCountry = PreferenceManager.getDefaultSharedPreferences(context)
                .getString(context.getString(R.string.content_country_key),
                        context.getString(R.string.default_localization_key));
        if (contentCountry.equals(context.getString(R.string.default_localization_key))) {
            return new ContentCountry(Locale.getDefault().getCountry());
        }
        return new ContentCountry(contentCountry);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getPreferredLocale,Locale getPreferredLocale(Context),"[116, 118]","{'A305': [(116, 116)], 'A295': [(117, 118)]}","{'A305': 0.3333333333333333, 'A295': 0.6666666666666666}",A295,,"    public static Locale getPreferredLocale(@NonNull final Context context) {
        return getLocaleFromPrefs(context, R.string.content_language_key);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getAppLocale,Locale getAppLocale(),"[120, 123]","{'A438': [(123, 123)], 'A295': [(120, 122)]}","{'A438': 0.25, 'A295': 0.75}",A295,,"    public static Locale getAppLocale() {
        final Locale customLocale = AppCompatDelegate.getApplicationLocales().get(0);
        return customLocale != null ? customLocale : Locale.getDefault();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeNumber,String localizeNumber(long),"[125, 127]","{'A322': [(127, 127)], 'A295': [(125, 126)]}","{'A322': 0.3333333333333333, 'A295': 0.6666666666666666}",A295,,"    public static String localizeNumber(final long number) {
        return localizeNumber((double) number);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeNumber,String localizeNumber(double),"[129, 132]","{'A438': [(131, 132)], 'A295': [(129, 130)]}","{'A438': 0.5, 'A295': 0.5}",A438,,"    public static String localizeNumber(final double number) {
        final NumberFormat nf = NumberFormat.getInstance(getAppLocale());
        return nf.format(number);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,formatDate,String formatDate(OffsetDateTime),"[134, 138]","{'A438': [(138, 138)], 'A295': [(134, 137)]}","{'A438': 0.2, 'A295': 0.8}",A295,,"    public static String formatDate(@NonNull final OffsetDateTime offsetDateTime) {
        return DateTimeFormatter.ofLocalizedDate(FormatStyle.MEDIUM)
                .withLocale(getAppLocale()).format(offsetDateTime
                        .atZoneSameInstant(ZoneId.systemDefault()));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeUploadDate,"String localizeUploadDate(Context,OffsetDateTime)","[140, 144]","{'A438': [(144, 144)], 'A305': [(141, 142)], 'A322': [(140, 140)], 'A295': [(143, 143)]}","{'A438': 0.2, 'A305': 0.4, 'A322': 0.2, 'A295': 0.2}",A305,,"    @SuppressLint(""StringFormatInvalid"")
    public static String localizeUploadDate(@NonNull final Context context,
                                            @NonNull final OffsetDateTime offsetDateTime) {
        return context.getString(R.string.upload_date_text, formatDate(offsetDateTime));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeViewCount,"String localizeViewCount(Context,long)","[146, 149]","{'A301': [(149, 149)], 'A305': [(146, 146)], 'A295': [(148, 148)], 'A294': [(147, 147)]}","{'A301': 0.25, 'A305': 0.25, 'A295': 0.25, 'A294': 0.25}",A301,,"    public static String localizeViewCount(@NonNull final Context context, final long viewCount) {
        return getQuantity(context, R.plurals.views, R.string.no_views, viewCount,
                localizeNumber(viewCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeStreamCount,"String localizeStreamCount(Context,long)","[151, 164]","{'A301': [(164, 164)], 'A305': [(151, 161), (163, 163)], 'A295': [(162, 162)]}","{'A301': 0.07142857142857142, 'A305': 0.8571428571428571, 'A295': 0.07142857142857142}",A305,,"    public static String localizeStreamCount(@NonNull final Context context,
                                             final long streamCount) {
        switch ((int) streamCount) {
            case (int) ListExtractor.ITEM_COUNT_UNKNOWN:
                return """";
            case (int) ListExtractor.ITEM_COUNT_INFINITE:
                return context.getResources().getString(R.string.infinite_videos);
            case (int) ListExtractor.ITEM_COUNT_MORE_THAN_100:
                return context.getResources().getString(R.string.more_than_100_videos);
            default:
                return getQuantity(context, R.plurals.videos, R.string.no_videos, streamCount,
                        localizeNumber(streamCount));
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeStreamCountMini,"String localizeStreamCountMini(Context,long)","[166, 178]","{'A305': [(166, 178)]}",{'A305': 1.0},A305,,"    public static String localizeStreamCountMini(@NonNull final Context context,
                                                 final long streamCount) {
        switch ((int) streamCount) {
            case (int) ListExtractor.ITEM_COUNT_UNKNOWN:
                return """";
            case (int) ListExtractor.ITEM_COUNT_INFINITE:
                return context.getResources().getString(R.string.infinite_videos_mini);
            case (int) ListExtractor.ITEM_COUNT_MORE_THAN_100:
                return context.getResources().getString(R.string.more_than_100_videos_mini);
            default:
                return String.valueOf(streamCount);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeWatchingCount,"String localizeWatchingCount(Context,long)","[180, 184]","{'A305': [(180, 181)], 'A322': [(184, 184)], 'A295': [(183, 183)], 'A294': [(182, 182)]}","{'A305': 0.4, 'A322': 0.2, 'A295': 0.2, 'A294': 0.2}",A305,,"    public static String localizeWatchingCount(@NonNull final Context context,
                                               final long watchingCount) {
        return getQuantity(context, R.plurals.watching, R.string.no_one_watching, watchingCount,
                localizeNumber(watchingCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,shortCount,"String shortCount(Context,long)","[186, 205]","{'A301': [(193, 193), (196, 196), (199, 199), (202, 202), (204, 205)], 'A305': [(186, 186)], 'A439': [(189, 191)], 'A295': [(188, 188), (194, 194), (197, 197), (200, 200), (203, 203)], 'A294': [(192, 192), (195, 195), (198, 198), (201, 201)], 'A299': [(187, 187)]}","{'A301': 0.3, 'A305': 0.05, 'A439': 0.15, 'A295': 0.25, 'A294': 0.2, 'A299': 0.05}",A301,,"    public static String shortCount(@NonNull final Context context, final long count) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            return CompactDecimalFormat.getInstance(getAppLocale(),
                    CompactDecimalFormat.CompactStyle.SHORT).format(count);
        }

        final double value = (double) count;
        if (count >= 1000000000) {
            return localizeNumber(round(value / 1000000000))
                    + context.getString(R.string.short_billion);
        } else if (count >= 1000000) {
            return localizeNumber(round(value / 1000000))
                    + context.getString(R.string.short_million);
        } else if (count >= 1000) {
            return localizeNumber(round(value / 1000))
                    + context.getString(R.string.short_thousand);
        } else {
            return localizeNumber(value);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,listeningCount,"String listeningCount(Context,long)","[207, 210]","{'A301': [(210, 210)], 'A305': [(207, 207)], 'A294': [(208, 209)]}","{'A301': 0.25, 'A305': 0.25, 'A294': 0.5}",A294,,"    public static String listeningCount(@NonNull final Context context, final long listeningCount) {
        return getQuantity(context, R.plurals.listening, R.string.no_one_listening, listeningCount,
                shortCount(context, listeningCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,shortWatchingCount,"String shortWatchingCount(Context,long)","[212, 216]","{'A301': [(216, 216)], 'A305': [(212, 213)], 'A294': [(214, 215)]}","{'A301': 0.2, 'A305': 0.4, 'A294': 0.4}",A305,,"    public static String shortWatchingCount(@NonNull final Context context,
                                            final long watchingCount) {
        return getQuantity(context, R.plurals.watching, R.string.no_one_watching, watchingCount,
                shortCount(context, watchingCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,shortViewCount,"String shortViewCount(Context,long)","[218, 221]","{'A301': [(221, 221)], 'A305': [(218, 218)], 'A294': [(219, 220)]}","{'A301': 0.25, 'A305': 0.25, 'A294': 0.5}",A294,,"    public static String shortViewCount(@NonNull final Context context, final long viewCount) {
        return getQuantity(context, R.plurals.views, R.string.no_views, viewCount,
                shortCount(context, viewCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,shortSubscriberCount,"String shortSubscriberCount(Context,long)","[223, 227]","{'A301': [(227, 227)], 'A305': [(223, 224)], 'A294': [(225, 226)]}","{'A301': 0.2, 'A305': 0.4, 'A294': 0.4}",A305,,"    public static String shortSubscriberCount(@NonNull final Context context,
                                              final long subscriberCount) {
        return getQuantity(context, R.plurals.subscribers, R.string.no_subscribers, subscriberCount,
                shortCount(context, subscriberCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,downloadCount,"String downloadCount(Context,int)","[229, 232]","{'A305': [(229, 229)], 'A440': [(230, 232)]}","{'A305': 0.25, 'A440': 0.75}",A440,,"    public static String downloadCount(@NonNull final Context context, final int downloadCount) {
        return getQuantity(context, R.plurals.download_finished_notification, 0,
                downloadCount, shortCount(context, downloadCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,deletedDownloadCount,"String deletedDownloadCount(Context,int)","[234, 238]","{'A305': [(234, 235)], 'A440': [(236, 238)]}","{'A305': 0.4, 'A440': 0.6}",A440,,"    public static String deletedDownloadCount(@NonNull final Context context,
                                              final int deletedCount) {
        return getQuantity(context, R.plurals.deleted_downloads_toast, 0,
                deletedCount, shortCount(context, deletedCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,replyCount,"String replyCount(Context,int)","[240, 243]","{'A305': [(240, 243)]}",{'A305': 1.0},A305,,"    public static String replyCount(@NonNull final Context context, final int replyCount) {
        return getQuantity(context, R.plurals.replies, 0, replyCount,
                String.valueOf(replyCount));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,likeCount,"String likeCount(Context,int)","[251, 257]","{'A305': [(251, 257)]}",{'A305': 1.0},A305,,"    public static String likeCount(@NonNull final Context context, final int likeCount) {
        if (likeCount < 0) {
            return ""-"";
        } else {
            return shortCount(context, likeCount);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getDurationString,String getDurationString(long),"[265, 267]","{'A295': [(266, 266)], 'A294': [(265, 265)], 'A363': [(267, 267)]}","{'A295': 0.3333333333333333, 'A294': 0.3333333333333333, 'A363': 0.3333333333333333}",A295,,"    public static String getDurationString(final long duration) {
        return DateUtils.formatElapsedTime(Math.max(duration, 0));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getDurationString,"String getDurationString(long,boolean,boolean)","[278, 284]","{'A301': [(284, 284)], 'A295': [(280, 280)], 'A363': [(278, 279), (281, 283)]}","{'A301': 0.14285714285714285, 'A295': 0.14285714285714285, 'A363': 0.7142857142857143}",A363,,"    public static String getDurationString(final long duration, final boolean isDurationComplete,
                                           final boolean showDurationPrefix) {
        final String output = getDurationString(duration);
        final String durationPrefix = showDurationPrefix ? ""⏱ "" : """";
        final String durationPostfix = isDurationComplete ? """" : ""+"";
        return durationPrefix + output + durationPostfix;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,localizeDuration,"String localizeDuration(Context,int)","[296, 319]","{'A301': [(296, 296), (299, 302), (307, 319)], 'A305': [(297, 298)], 'A294': [(303, 306)]}","{'A301': 0.75, 'A305': 0.08333333333333333, 'A294': 0.16666666666666666}",A301,,"    @NonNull
    public static String localizeDuration(@NonNull final Context context,
                                          final int durationInSecs) {
        if (durationInSecs < 0) {
            throw new IllegalArgumentException(""duration can not be negative"");
        }

        final int days = (int) (durationInSecs / (24 * 60 * 60L));
        final int hours = (int) (durationInSecs % (24 * 60 * 60L) / (60 * 60L));
        final int minutes = (int) (durationInSecs % (24 * 60 * 60L) % (60 * 60L) / 60L);
        final int seconds = (int) (durationInSecs % (24 * 60 * 60L) % (60 * 60L) % 60L);

        final Resources resources = context.getResources();

        if (days > 0) {
            return resources.getQuantityString(R.plurals.days, days, days);
        } else if (hours > 0) {
            return resources.getQuantityString(R.plurals.hours, hours, hours);
        } else if (minutes > 0) {
            return resources.getQuantityString(R.plurals.minutes, minutes, minutes);
        } else {
            return resources.getQuantityString(R.plurals.seconds, seconds, seconds);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,audioTrackName,"String audioTrackName(Context,AudioStream)","[335, 350]","{'A305': [(335, 335)], 'A313': [(338, 338)], 'A386': [(336, 337), (339, 346), (348, 350)], 'A333': [(347, 347)]}","{'A305': 0.0625, 'A313': 0.0625, 'A386': 0.8125, 'A333': 0.0625}",A386,,"    public static String audioTrackName(@NonNull final Context context, final AudioStream track) {
        final String name;
        if (track.getAudioLocale() != null) {
            name = track.getAudioLocale().getDisplayName();
        } else if (track.getAudioTrackName() != null) {
            name = track.getAudioTrackName();
        } else {
            name = context.getString(R.string.unknown_audio_track);
        }

        if (track.getAudioTrackType() != null) {
            final String trackType = audioTrackType(context, track.getAudioTrackType());
            return context.getString(R.string.audio_track_name, name, trackType);
        }
        return name;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,audioTrackType,"String audioTrackType(Context,AudioTrackType)","[352, 361]","{'A305': [(353, 353)], 'A386': [(361, 361)], 'A333': [(352, 352), (354, 360)]}","{'A305': 0.1, 'A386': 0.1, 'A333': 0.8}",A333,,"    @NonNull
    private static String audioTrackType(@NonNull final Context context,
                                         @NonNull final AudioTrackType trackType) {
        return switch (trackType) {
            case ORIGINAL -> context.getString(R.string.audio_track_type_original);
            case DUBBED -> context.getString(R.string.audio_track_type_dubbed);
            case DESCRIPTIVE -> context.getString(R.string.audio_track_type_descriptive);
            case SECONDARY -> context.getString(R.string.audio_track_type_secondary);
        };
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,initPrettyTime,void initPrettyTime(PrettyTime),"[367, 371]","{'A301': [(369, 371)], 'A305': [(367, 367)], 'A371': [(368, 368)]}","{'A301': 0.6, 'A305': 0.2, 'A371': 0.2}",A301,,"    public static void initPrettyTime(@NonNull final PrettyTime time) {
        prettyTime = time;
        // Do not use decades as YouTube doesn't either.
        prettyTime.removeUnit(Decade.class);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,resolvePrettyTime,PrettyTime resolvePrettyTime(),"[373, 375]","{'A295': [(373, 374)], 'A371': [(375, 375)]}","{'A295': 0.6666666666666666, 'A371': 0.3333333333333333}",A295,,"    public static PrettyTime resolvePrettyTime() {
        return new PrettyTime(getAppLocale());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,relativeTime,String relativeTime(OffsetDateTime),"[377, 379]","{'A301': [(379, 379)], 'A305': [(377, 377)], 'A295': [(378, 378)]}","{'A301': 0.3333333333333333, 'A305': 0.3333333333333333, 'A295': 0.3333333333333333}",A301,,"    public static String relativeTime(@NonNull final OffsetDateTime offsetDateTime) {
        return prettyTime.formatUnrounded(offsetDateTime);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,relativeTimeOrTextual,"String relativeTimeOrTextual(Context,DateWrapper,String)","[392, 404]","{'A305': [(392, 404)]}",{'A305': 1.0},A305,,"    public static String relativeTimeOrTextual(@Nullable final Context context,
                                               @Nullable final DateWrapper parsed,
                                               final String textual) {
        if (parsed == null) {
            return textual;
        } else if (DEBUG && context != null && PreferenceManager
                .getDefaultSharedPreferences(context)
                .getBoolean(context.getString(R.string.show_original_time_ago_key), false)) {
            return relativeTime(parsed.offsetDateTime()) + "" ("" + textual + "")"";
        } else {
            return relativeTime(parsed.offsetDateTime());
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getLocaleFromPrefs,"Locale getLocaleFromPrefs(Context,int)","[406, 417]","{'A305': [(406, 407)], 'A295': [(408, 417)]}","{'A305': 0.16666666666666666, 'A295': 0.8333333333333334}",A295,,"    private static Locale getLocaleFromPrefs(@NonNull final Context context,
                                             @StringRes final int prefKey) {
        final SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);
        final String defaultKey = context.getString(R.string.default_localization_key);
        final String languageCode = sp.getString(context.getString(prefKey), defaultKey);

        if (languageCode.equals(defaultKey)) {
            return Locale.getDefault();
        } else {
            return Locale.forLanguageTag(languageCode);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,round,double round(double),"[419, 421]","{'A322': [(421, 421)], 'A295': [(419, 420)]}","{'A322': 0.3333333333333333, 'A295': 0.6666666666666666}",A295,,"    private static double round(final double value) {
        return new BigDecimal(value).setScale(1, RoundingMode.HALF_UP).doubleValue();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,getQuantity,"String getQuantity(Context,int,int,long,String)","[423, 438]","{'A305': [(423, 426)], 'A322': [(438, 438)], 'A295': [(427, 437)]}","{'A305': 0.25, 'A322': 0.0625, 'A295': 0.6875}",A295,,"    private static String getQuantity(@NonNull final Context context,
                                      @PluralsRes final int pluralId,
                                      @StringRes final int zeroCaseStringId,
                                      final long count,
                                      final String formattedCount) {
        if (count == 0) {
            return context.getString(zeroCaseStringId);
        }

        // As we use the already formatted count
        // is not the responsibility of this method handle long numbers
        // (it probably will fall in the ""other"" category,
        // or some language have some specific rule... then we have to change it)
        final int safeCount = (int) MathUtils.clamp(count, Integer.MIN_VALUE, Integer.MAX_VALUE);
        return context.getResources().getQuantityString(pluralId, safeCount, formattedCount);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/Localization.java,Localization,migrateAppLanguageSettingIfNecessary,void migrateAppLanguageSettingIfNecessary(Context),"[446, 469]","{'A295': [(447, 450), (453, 453), (455, 459), (462, 465)], 'A313': [(446, 446), (454, 454), (466, 469)], 'A300': [(451, 452), (460, 461)]}","{'A295': 0.5833333333333334, 'A313': 0.25, 'A300': 0.16666666666666666}",A295,,"    public static void migrateAppLanguageSettingIfNecessary(@NonNull final Context context) {
        final SharedPreferences sp = PreferenceManager.getDefaultSharedPreferences(context);
        final String appLanguageKey = context.getString(R.string.app_language_key);
        final String appLanguageValue = sp.getString(appLanguageKey, null);
        if (appLanguageValue != null) {
            // The app language key is used on Android versions < 33
            // for more info, see ContentSettingsFragment
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
                sp.edit().remove(appLanguageKey).apply();
            }
            final String appLanguageDefaultValue =
                    context.getString(R.string.default_localization_key);
            if (!appLanguageValue.equals(appLanguageDefaultValue)) {
                try {
                    AppCompatDelegate.setApplicationLocales(
                        LocaleListCompat.forLanguageTags(appLanguageValue));
                } catch (final RuntimeException e) {
                    Log.e(TAG, ""Failed to migrate previous custom app language ""
                            + ""setting to public per-app language APIs""
                    );
                }
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,addFileToZip,"void addFileToZip(ZipOutputStream,String,String)","[64, 70]","{'A305': [(64, 70)]}",{'A305': 1.0},A305,,"    public static void addFileToZip(final ZipOutputStream outZip,
                                    final String nameInZip,
                                    final String fileOnDisk) throws IOException {
        try (FileInputStream fi = new FileInputStream(fileOnDisk)) {
            addFileToZip(outZip, nameInZip, fi);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,addFileToZip,"void addFileToZip(ZipOutputStream,String,OutputStreamConsumer)","[79, 91]","{'A305': [(79, 91)]}",{'A305': 1.0},A305,,"    public static void addFileToZip(final ZipOutputStream outZip,
                                    final String nameInZip,
                                    final OutputStreamConsumer streamConsumer) throws IOException {
        final byte[] bytes;
        try (ByteArrayOutputStream byteOutput = new ByteArrayOutputStream()) {
            streamConsumer.acceptStream(byteOutput);
            bytes = byteOutput.toByteArray();
        }

        try (ByteArrayInputStream byteInput = new ByteArrayInputStream(bytes)) {
            ZipHelper.addFileToZip(outZip, nameInZip, byteInput);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,addFileToZip,"void addFileToZip(ZipOutputStream,String,InputStream)","[100, 113]","{'A302': [(112, 113)], 'A294': [(103, 103)], 'A305': [(100, 102), (104, 106), (109, 109)], 'A295': [(107, 108), (110, 111)]}","{'A302': 0.14285714285714285, 'A294': 0.07142857142857142, 'A305': 0.5, 'A295': 0.2857142857142857}",A305,,"    public static void addFileToZip(final ZipOutputStream outZip,
                                    final String nameInZip,
                                    final InputStream inputStream) throws IOException {
        final byte[] data = new byte[BUFFER_SIZE];
        try (BufferedInputStream bufferedInputStream =
                     new BufferedInputStream(inputStream, BUFFER_SIZE)) {
            final ZipEntry entry = new ZipEntry(nameInZip);
            outZip.putNextEntry(entry);
            int count;
            while ((count = bufferedInputStream.read(data, 0, BUFFER_SIZE)) != -1) {
                outZip.write(data, 0, count);
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,extractFileFromZip,"boolean extractFileFromZip(StoredFileHelper,String,String)","[123, 143]","{'A305': [(123, 143)]}",{'A305': 1.0},A305,,"    public static boolean extractFileFromZip(final StoredFileHelper zipFile,
                                             final String nameInZip,
                                             final String fileOnDisk) throws IOException {
        return extractFileFromZip(zipFile, nameInZip, input -> {
            // delete old file first
            final File oldFile = new File(fileOnDisk);
            if (oldFile.exists()) {
                if (!oldFile.delete()) {
                    throw new IOException(""Could not delete "" + fileOnDisk);
                }
            }

            final byte[] data = new byte[BUFFER_SIZE];
            try (FileOutputStream outFile = new FileOutputStream(fileOnDisk)) {
                int count;
                while ((count = input.read(data)) != -1) {
                    outFile.write(data, 0, count);
                }
            }
        });
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,extractFileFromZip,"boolean extractFileFromZip(StoredFileHelper,String,InputStreamConsumer)","[153, 169]","{'A305': [(153, 169)]}",{'A305': 1.0},A305,,"    public static boolean extractFileFromZip(final StoredFileHelper zipFile,
                                             final String nameInZip,
                                             final InputStreamConsumer streamConsumer)
            throws IOException {
        try (ZipInputStream inZip = new ZipInputStream(new BufferedInputStream(
                new SharpInputStream(zipFile.getStream())))) {
            ZipEntry ze;
            while ((ze = inZip.getNextEntry()) != null) {
                if (ze.getName().equals(nameInZip)) {
                    streamConsumer.acceptStream(inZip);
                    return true;
                }
            }

            return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,zipContainsFile,"boolean zipContainsFile(StoredFileHelper,String)","[176, 189]","{'A302': [(185, 186), (188, 189)], 'A294': [(179, 179), (181, 181)], 'A305': [(176, 177), (183, 184), (187, 187)], 'A295': [(178, 178), (180, 180), (182, 182)]}","{'A302': 0.2857142857142857, 'A294': 0.14285714285714285, 'A305': 0.35714285714285715, 'A295': 0.21428571428571427}",A305,,"    public static boolean zipContainsFile(final StoredFileHelper zipFile, final String fileInZip)
            throws Exception {
        try (ZipInputStream inZip = new ZipInputStream(new BufferedInputStream(
                new SharpInputStream(zipFile.getStream())))) {
            ZipEntry ze;

            while ((ze = inZip.getNextEntry()) != null) {
                if (ze.getName().equals(fileInZip)) {
                    return true;
                }
            }
            return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/ZipHelper.java,ZipHelper,isValidZipFile,boolean isValidZipFile(StoredFileHelper),"[191, 198]","{'A294': [(191, 193)], 'A371': [(194, 198)]}","{'A294': 0.375, 'A371': 0.625}",A371,,"    public static boolean isValidZipFile(final StoredFileHelper file) {
        try (ZipInputStream ignored = new ZipInputStream(new BufferedInputStream(
                new SharpInputStream(file.getStream())))) {
            return true;
        } catch (final IOException ioe) {
            return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SliderStrategy.java,Quadratic,progressOf,int progressOf(double),"[60, 68]","{'A310': [(60, 60), (62, 62), (65, 68)], 'A294': [(61, 61), (63, 64)]}","{'A310': 0.6666666666666666, 'A294': 0.3333333333333333}",A310,,"        @Override
        public int progressOf(final double value) {
            final double difference = value - center;
            final double root = difference >= 0 ? Math.sqrt(difference / rightGap)
                    : -Math.sqrt(Math.abs(difference / leftGap));
            final double offset = Math.round(root * centerProgress);

            return (int) (centerProgress + offset);
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SliderStrategy.java,Quadratic,valueOf,double valueOf(int),"[70, 77]","{'A310': [(70, 70), (72, 77)], 'A294': [(71, 71)]}","{'A310': 0.875, 'A294': 0.125}",A310,,"        @Override
        public double valueOf(final int progress) {
            final int offset = progress - centerProgress;
            final double square = Math.pow(((double) offset) / ((double) centerProgress), 2);
            final double difference = square * (offset >= 0 ? rightGap : leftGap);

            return difference + center;
        }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isFireTv,boolean isFireTv(),"[128, 136]","{'A373': [(128, 136)]}",{'A373': 1.0},A373,,"    public static boolean isFireTv() {
        if (isFireTV != null) {
            return isFireTV;
        }

        isFireTV =
                App.getApp().getPackageManager().hasSystemFeature(AMAZON_FEATURE_FIRE_TV);
        return isFireTV;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isTv,boolean isTv(Context),"[138, 163]","{'A322': [(138, 138), (141, 142), (144, 145), (147, 147), (150, 152), (154, 160)], 'A295': [(146, 146), (153, 153)], 'A300': [(149, 149)], 'A290': [(139, 140), (161, 163)], 'A373': [(148, 148)], 'A294': [(143, 143)]}","{'A322': 0.6153846153846154, 'A295': 0.07692307692307693, 'A300': 0.038461538461538464, 'A290': 0.19230769230769232, 'A373': 0.038461538461538464, 'A294': 0.038461538461538464}",A322,,"    public static boolean isTv(final Context context) {
        if (isTV != null) {
            return isTV;
        }

        final PackageManager pm = App.getApp().getPackageManager();

        // from doc: https://developer.android.com/training/tv/start/hardware.html#runtime-check
        boolean isTv = ContextCompat.getSystemService(context, UiModeManager.class)
                .getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION
                || isFireTv()
                || pm.hasSystemFeature(PackageManager.FEATURE_LEANBACK);

        // from https://stackoverflow.com/a/58932366
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            final boolean isBatteryAbsent = context.getSystemService(BatteryManager.class)
                    .getIntProperty(BatteryManager.BATTERY_PROPERTY_CAPACITY) == 0;
            isTv = isTv || (isBatteryAbsent
                    && !pm.hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN)
                    && pm.hasSystemFeature(PackageManager.FEATURE_USB_HOST)
                    && pm.hasSystemFeature(PackageManager.FEATURE_ETHERNET));
        }

        DeviceUtils.isTV = isTv;
        return DeviceUtils.isTV;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isDesktopMode,boolean isDesktopMode(Context),"[171, 239]","{'A288': [(194, 197)], 'A410': [(191, 192), (198, 209), (212, 212), (214, 216), (218, 231), (235, 236), (238, 239)], 'A441': [(173, 177), (183, 186)], 'A333': [(171, 172), (178, 182), (187, 190), (193, 193), (210, 211), (213, 213), (217, 217), (232, 234), (237, 237)]}","{'A288': 0.057971014492753624, 'A410': 0.5217391304347826, 'A441': 0.13043478260869565, 'A333': 0.2898550724637681}",A410,,"    @SuppressWarnings(""JavaReflectionMemberAccess"")
    public static boolean isDesktopMode(@NonNull final Context context) {
        // Adapted from https://stackoverflow.com/a/64615568
        // to check for all input devices that have an active cursor
        final InputManager im = (InputManager) context.getSystemService(INPUT_SERVICE);
        for (final int id : im.getInputDeviceIds()) {
            final InputDevice inputDevice = im.getInputDevice(id);
            if (inputDevice.supportsSource(InputDevice.SOURCE_BLUETOOTH_STYLUS)
                    || inputDevice.supportsSource(InputDevice.SOURCE_MOUSE)
                    || inputDevice.supportsSource(InputDevice.SOURCE_STYLUS)
                    || inputDevice.supportsSource(InputDevice.SOURCE_TOUCHPAD)
                    || inputDevice.supportsSource(InputDevice.SOURCE_TRACKBALL)) {
                return true;
            }
        }

        final UiModeManager uiModeManager =
                ContextCompat.getSystemService(context, UiModeManager.class);
        if (uiModeManager != null
                && uiModeManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_DESK) {
            return true;
        }

        if (!SAMSUNG) {
            return false;
            // DeX is Samsung-specific, skip the checks below on non-Samsung devices
        }
        // DeX check for standalone and multi-window mode, from:
        // https://developer.samsung.com/samsung-dex/modify-optimizing.html
        try {
            final Configuration config = context.getResources().getConfiguration();
            final Class<?> configClass = config.getClass();
            final int semDesktopModeEnabledConst =
                    configClass.getField(""SEM_DESKTOP_MODE_ENABLED"").getInt(configClass);
            final int currentMode =
                    configClass.getField(""semDesktopModeEnabled"").getInt(config);
            if (semDesktopModeEnabledConst == currentMode) {
                return true;
            }
        } catch (final NoSuchFieldException | IllegalAccessException ignored) {
            // Device doesn't seem to support DeX
        }

        @SuppressLint(""WrongConstant"") final Object desktopModeManager = context
                .getApplicationContext()
                .getSystemService(""desktopmode"");

        if (desktopModeManager != null) {
            try {
                final Method getDesktopModeStateMethod = desktopModeManager.getClass()
                        .getDeclaredMethod(""getDesktopModeState"");
                final Object desktopModeState = getDesktopModeStateMethod
                        .invoke(desktopModeManager);
                final Class<?> desktopModeStateClass = desktopModeState.getClass();
                final Method getEnabledMethod = desktopModeStateClass
                        .getDeclaredMethod(""getEnabled"");
                final int enabledStatus = (int) getEnabledMethod.invoke(desktopModeState);
                if (enabledStatus == desktopModeStateClass
                        .getDeclaredField(""ENABLED"").getInt(desktopModeStateClass)) {
                    return true;
                }
            } catch (final Exception ignored) {
                // Device does not support DeX 3.0 or something went wrong when trying to determine
                // if it supports this feature
            }
        }

        return false;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isTablet,boolean isTablet(Context),"[241, 254]","{'A423': [(254, 254)], 'A290': [(241, 241)], 'A442': [(242, 253)]}","{'A423': 0.07142857142857142, 'A290': 0.07142857142857142, 'A442': 0.8571428571428571}",A442,,"    public static boolean isTablet(@NonNull final Context context) {
        final String tabletModeSetting = PreferenceManager.getDefaultSharedPreferences(context)
                .getString(context.getString(R.string.tablet_mode_key), """");

        if (tabletModeSetting.equals(context.getString(R.string.tablet_mode_on_key))) {
            return true;
        } else if (tabletModeSetting.equals(context.getString(R.string.tablet_mode_off_key))) {
            return false;
        }

        // else automatically determine whether we are in a tablet or not
        return (context.getResources().getConfiguration().screenLayout
                & Configuration.SCREENLAYOUT_SIZE_MASK) >= Configuration.SCREENLAYOUT_SIZE_LARGE;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isConfirmKey,boolean isConfirmKey(int),"[256, 266]","{'A297': [(256, 266)]}",{'A297': 1.0},A297,,"    public static boolean isConfirmKey(final int keyCode) {
        switch (keyCode) {
            case KeyEvent.KEYCODE_DPAD_CENTER:
            case KeyEvent.KEYCODE_ENTER:
            case KeyEvent.KEYCODE_SPACE:
            case KeyEvent.KEYCODE_NUMPAD_ENTER:
                return true;
            default:
                return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,dpToPx,"int dpToPx(int,Context)","[268, 274]","{'A298': [(268, 274)]}",{'A298': 1.0},A298,,"    public static int dpToPx(@Dimension(unit = Dimension.DP) final int dp,
                             @NonNull final Context context) {
        return (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_DIP,
                dp,
                context.getResources().getDisplayMetrics());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,spToPx,"int spToPx(int,Context)","[276, 282]","{'A298': [(276, 282)]}",{'A298': 1.0},A298,,"    public static int spToPx(@Dimension(unit = Dimension.SP) final int sp,
                             @NonNull final Context context) {
        return (int) TypedValue.applyDimension(
                TypedValue.COMPLEX_UNIT_SP,
                sp,
                context.getResources().getDisplayMetrics());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isLandscape,boolean isLandscape(Context),"[284, 287]","{'A305': [(284, 287)]}",{'A305': 1.0},A305,,"    public static boolean isLandscape(final Context context) {
        return context.getResources().getDisplayMetrics().heightPixels < context.getResources()
                .getDisplayMetrics().widthPixels;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,isInMultiWindow,boolean isInMultiWindow(AppCompatActivity),"[289, 291]","{'A305': [(289, 291)]}",{'A305': 1.0},A305,,"    public static boolean isInMultiWindow(final AppCompatActivity activity) {
        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && activity.isInMultiWindowMode();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,hasAnimationsAnimatorDurationEnabled,boolean hasAnimationsAnimatorDurationEnabled(Context),"[293, 298]","{'A300': [(293, 298)]}",{'A300': 1.0},A300,,"    public static boolean hasAnimationsAnimatorDurationEnabled(final Context context) {
        return Settings.System.getFloat(
                context.getContentResolver(),
                Settings.Global.ANIMATOR_DURATION_SCALE,
                1F) != 0F;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,getWindowHeight,int getWindowHeight(WindowManager),"[300, 312]","{'A295': [(300, 312)]}",{'A295': 1.0},A295,,"    public static int getWindowHeight(@NonNull final WindowManager windowManager) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
            final var windowMetrics = windowManager.getCurrentWindowMetrics();
            final var windowInsets = windowMetrics.getWindowInsets();
            final var insets = windowInsets.getInsetsIgnoringVisibility(
                    WindowInsets.Type.navigationBars() | WindowInsets.Type.displayCutout());
            return windowMetrics.getBounds().height() - (insets.top + insets.bottom);
        } else {
            final Point point = new Point();
            windowManager.getDefaultDisplay().getSize(point);
            return point.y;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,shouldSupportMediaTunneling,boolean shouldSupportMediaTunneling(),"[325, 338]","{'A298': [(325, 338)]}",{'A298': 1.0},A298,,"    public static boolean shouldSupportMediaTunneling() {
        // Maintainers note: update MEDIA_TUNNELING_DEVICES_UPDATE_APP_VERSION_CODE
        return !HI3798MV200
                && !CVT_MT5886_EU_1G
                && !REALTEKATV
                && !QM16XE_U
                && !BRAVIA_VH1
                && !BRAVIA_VH2
                && !BRAVIA_ATV2
                && !BRAVIA_ATV3_4K
                && !PH7M_EU_5596
                && !TX_50JXW834
                && !HMB9213NW;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/DeviceUtils.java,DeviceUtils,supportsWebView,boolean supportsWebView(),"[344, 351]","{'A305': [(344, 351)]}",{'A305': 1.0},A305,,"    public static boolean supportsWebView() {
        try {
            CookieManager.getInstance();
            return true;
        } catch (final Throwable ignored) {
            return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SecondaryStreamHelper.java,SecondaryStreamHelper,getAudioStreamFor,"AudioStream getAudioStreamFor(Context,List<AudioStream>,VideoStream)","[40, 66]","{'A328': [(65, 66)], 'A333': [(40, 42), (44, 45)], 'A294': [(43, 43)], 'A305': [(46, 64)]}","{'A328': 0.07407407407407407, 'A333': 0.18518518518518517, 'A294': 0.037037037037037035, 'A305': 0.7037037037037037}",A305,,"    @Nullable
    public static AudioStream getAudioStreamFor(@NonNull final Context context,
                                                @NonNull final List<AudioStream> audioStreams,
                                                @NonNull final VideoStream videoStream) {
        final MediaFormat mediaFormat = videoStream.getFormat();

        if (mediaFormat == MediaFormat.WEBM) {
            return audioStreams
                    .stream()
                    .filter(audioStream -> audioStream.getFormat() == MediaFormat.WEBMA
                            || audioStream.getFormat() == MediaFormat.WEBMA_OPUS)
                    .max(ListHelper.getAudioFormatComparator(MediaFormat.WEBMA,
                            ListHelper.isLimitingDataUsage(context)))
                    .orElse(null);

        } else if (mediaFormat == MediaFormat.MPEG_4) {
            return audioStreams
                    .stream()
                    .filter(audioStream -> audioStream.getFormat() == MediaFormat.M4A)
                    .max(ListHelper.getAudioFormatComparator(MediaFormat.M4A,
                            ListHelper.isLimitingDataUsage(context)))
                    .orElse(null);

        } else {
            return null;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SecondaryStreamHelper.java,SecondaryStreamHelper,getStream,T getStream(),"[68, 70]","{'A294': [(68, 70)]}",{'A294': 1.0},A294,,"    public T getStream() {
        return streams.getStreamsList().get(position);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SecondaryStreamHelper.java,SecondaryStreamHelper,getSizeInBytes,long getSizeInBytes(),"[72, 74]","{'A294': [(72, 74)]}",{'A294': 1.0},A294,,"    public long getSizeInBytes() {
        return streams.getSizeInBytes(position);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SparseItemUtil.java,SparseItemUtil,fetchItemInfoIfSparse,"void fetchItemInfoIfSparse(Context,StreamInfoItem,Consumer<SinglePlayQueue>)","[47, 61]","{'A305': [(47, 49), (52, 54), (56, 61)], 'A333': [(50, 51)], 'A300': [(55, 55)]}","{'A305': 0.8, 'A333': 0.13333333333333333, 'A300': 0.06666666666666667}",A305,,"    public static void fetchItemInfoIfSparse(@NonNull final Context context,
                                             @NonNull final StreamInfoItem item,
                                             @NonNull final Consumer<SinglePlayQueue> callback) {
        if ((StreamTypeUtil.isLiveStream(item.getStreamType()) || item.getDuration() >= 0)
                && !isNullOrEmpty(item.getUploaderUrl())) {
            // if the duration is >= 0 (provided that the item is not a livestream) and there is an
            // uploader url, probably all info is already there, so there is no need to fetch it
            callback.accept(new SinglePlayQueue(item));
            return;
        }

        // either the duration or the uploader url are not available, so fetch more info
        fetchStreamInfoAndSaveToDatabase(context, item.getServiceId(), item.getUrl(),
                streamInfo -> callback.accept(new SinglePlayQueue(streamInfo)));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SparseItemUtil.java,SparseItemUtil,fetchUploaderUrlIfSparse,"void fetchUploaderUrlIfSparse(Context,int,String,String,Consumer<String>)","[77, 88]","{'A305': [(77, 81), (83, 83), (85, 85), (88, 88)], 'A300': [(82, 82), (84, 84), (86, 87)]}","{'A305': 0.6666666666666666, 'A300': 0.3333333333333333}",A305,,"    public static void fetchUploaderUrlIfSparse(@NonNull final Context context,
                                                final int serviceId,
                                                @NonNull final String url,
                                                @Nullable final String uploaderUrl,
                                                @NonNull final Consumer<String> callback) {
        if (!isNullOrEmpty(uploaderUrl)) {
            callback.accept(uploaderUrl);
            return;
        }
        fetchStreamInfoAndSaveToDatabase(context, serviceId, url,
                streamInfo -> callback.accept(streamInfo.getUploaderUrl()));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/SparseItemUtil.java,SparseItemUtil,fetchStreamInfoAndSaveToDatabase,"void fetchStreamInfoAndSaveToDatabase(Context,int,String,Consumer<StreamInfo>)","[100, 126]","{'A305': [(104, 126)], 'A334': [(100, 103)]}","{'A305': 0.8518518518518519, 'A334': 0.14814814814814814}",A305,,"    public static void fetchStreamInfoAndSaveToDatabase(@NonNull final Context context,
                                                        final int serviceId,
                                                        @NonNull final String url,
                                                        final Consumer<StreamInfo> callback) {
        Toast.makeText(context, R.string.loading_stream_details, Toast.LENGTH_SHORT).show();
        ExtractorHelper.getStreamInfo(serviceId, url, false)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(result -> {
                    // save to database in the background (not on main thread)
                    Completable.fromAction(() -> NewPipeDatabase.getInstance(context)
                            .streamDAO().upsert(new StreamEntity(result)))
                            .subscribeOn(Schedulers.io())
                            .observeOn(Schedulers.io())
                            .doOnError(throwable ->
                                    ErrorUtil.createNotification(context,
                                            new ErrorInfo(throwable, UserAction.REQUESTED_STREAM,
                                                    ""Saving stream info to database"", result)))
                            .subscribe();

                    // call callback on main thread with the obtained result
                    callback.accept(result);
                }, throwable -> ErrorUtil.createNotification(context,
                        new ErrorInfo(throwable, UserAction.REQUESTED_STREAM,
                                ""Loading stream info: "" + url, serviceId)
                ));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getPlayerIntent,"Intent getPlayerIntent(Context,Class<T>,PlayQueue,boolean)","[84, 102]","{'A301': [(102, 102)], 'A305': [(85, 88), (91, 95), (97, 99)], 'A310': [(84, 84), (90, 90), (101, 101)], 'A294': [(89, 89), (96, 96)], 'A290': [(100, 100)]}","{'A301': 0.05263157894736842, 'A305': 0.631578947368421, 'A310': 0.15789473684210525, 'A294': 0.10526315789473684, 'A290': 0.05263157894736842}",A305,,"    @NonNull
    public static <T> Intent getPlayerIntent(@NonNull final Context context,
                                             @NonNull final Class<T> targetClazz,
                                             @Nullable final PlayQueue playQueue,
                                             final boolean resumePlayback) {
        final Intent intent = new Intent(context, targetClazz);

        if (playQueue != null) {
            final String cacheKey = SerializedCache.getInstance().put(playQueue, PlayQueue.class);
            if (cacheKey != null) {
                intent.putExtra(Player.PLAY_QUEUE_KEY, cacheKey);
            }
        }
        intent.putExtra(Player.PLAYER_TYPE, PlayerType.MAIN.valueForIntent());
        intent.putExtra(Player.RESUME_PLAYBACK, resumePlayback);
        intent.putExtra(PlayerService.SHOULD_START_FOREGROUND_EXTRA, true);

        return intent;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getPlayerIntent,"Intent getPlayerIntent(Context,Class<T>,PlayQueue,boolean,boolean)","[104, 112]","{'A305': [(105, 111)], 'A310': [(104, 104)], 'A390': [(112, 112)]}","{'A305': 0.7777777777777778, 'A310': 0.1111111111111111, 'A390': 0.1111111111111111}",A305,,"    @NonNull
    public static <T> Intent getPlayerIntent(@NonNull final Context context,
                                             @NonNull final Class<T> targetClazz,
                                             @Nullable final PlayQueue playQueue,
                                             final boolean resumePlayback,
                                             final boolean playWhenReady) {
        return getPlayerIntent(context, targetClazz, playQueue, resumePlayback)
                .putExtra(Player.PLAY_WHEN_READY, playWhenReady);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getPlayerEnqueueIntent,"Intent getPlayerEnqueueIntent(Context,Class<T>,PlayQueue)","[114, 127]","{'A305': [(115, 116), (118, 125)], 'A310': [(114, 114)], 'A384': [(117, 117), (126, 127)]}","{'A305': 0.7142857142857143, 'A310': 0.07142857142857142, 'A384': 0.21428571428571427}",A305,,"    @NonNull
    public static <T> Intent getPlayerEnqueueIntent(@NonNull final Context context,
                                                    @NonNull final Class<T> targetClazz,
                                                    @Nullable final PlayQueue playQueue) {
        // when enqueueing `resumePlayback` is always `false` since:
        // - if there is a video already playing, the value of `resumePlayback` just doesn't make
        //   any difference.
        // - if there is nothing already playing, it is useful for the enqueue action to have a
        //   slightly different behaviour than the normal play action: the latter resumes playback,
        //   the former doesn't. (note that enqueue can be triggered when nothing is playing only
        //   by long pressing the video detail fragment, playlist or channel controls
        return getPlayerIntent(context, targetClazz, playQueue, false)
                .putExtra(Player.ENQUEUE, true);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getPlayerEnqueueNextIntent,"Intent getPlayerEnqueueNextIntent(Context,Class<T>,PlayQueue)","[129, 136]","{'A301': [(136, 136)], 'A305': [(133, 134)], 'A384': [(129, 132), (135, 135)]}","{'A301': 0.125, 'A305': 0.25, 'A384': 0.625}",A384,,"    @NonNull
    public static <T> Intent getPlayerEnqueueNextIntent(@NonNull final Context context,
                                                        @NonNull final Class<T> targetClazz,
                                                        @Nullable final PlayQueue playQueue) {
        // see comment in `getPlayerEnqueueIntent` as to why `resumePlayback` is false
        return getPlayerIntent(context, targetClazz, playQueue, false)
                .putExtra(Player.ENQUEUE_NEXT, true);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnMainPlayer,"void playOnMainPlayer(AppCompatActivity,PlayQueue)","[139, 147]","{'A301': [(147, 147)], 'A305': [(139, 141)], 'A325': [(142, 146)]}","{'A301': 0.1111111111111111, 'A305': 0.3333333333333333, 'A325': 0.5555555555555556}",A325,,"    public static void playOnMainPlayer(final AppCompatActivity activity,
                                        @NonNull final PlayQueue playQueue) {
        final PlayQueueItem item = playQueue.getItem();
        if (item != null) {
            openVideoDetailFragment(activity, activity.getSupportFragmentManager(),
                    item.getServiceId(), item.getUrl(), item.getTitle(), playQueue,
                    false);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnMainPlayer,"void playOnMainPlayer(Context,PlayQueue,boolean)","[149, 158]","{'A305': [(149, 152), (158, 158)], 'A325': [(153, 157)]}","{'A305': 0.5, 'A325': 0.5}",A305,,"    public static void playOnMainPlayer(final Context context,
                                        @NonNull final PlayQueue playQueue,
                                        final boolean switchingPlayers) {
        final PlayQueueItem item = playQueue.getItem();
        if (item != null) {
            openVideoDetail(context,
                    item.getServiceId(), item.getUrl(), item.getTitle(), playQueue,
                    switchingPlayers);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnPopupPlayer,"void playOnPopupPlayer(Context,PlayQueue,boolean)","[160, 172]","{'A301': [(166, 166)], 'A305': [(160, 161), (163, 163), (169, 170)], 'A310': [(164, 165), (172, 172)], 'A294': [(162, 162)], 'A295': [(171, 171)], 'A300': [(167, 168)]}","{'A301': 0.07692307692307693, 'A305': 0.38461538461538464, 'A310': 0.23076923076923078, 'A294': 0.07692307692307693, 'A295': 0.07692307692307693, 'A300': 0.15384615384615385}",A305,,"    public static void playOnPopupPlayer(final Context context,
                                         final PlayQueue queue,
                                         final boolean resumePlayback) {
        if (!PermissionHelper.isPopupEnabledElseAsk(context)) {
            return;
        }

        Toast.makeText(context, R.string.popup_playing_toast, Toast.LENGTH_SHORT).show();

        final Intent intent = getPlayerIntent(context, PlayerService.class, queue, resumePlayback);
        intent.putExtra(Player.PLAYER_TYPE, PlayerType.POPUP.valueForIntent());
        ContextCompat.startForegroundService(context, intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnBackgroundPlayer,"void playOnBackgroundPlayer(Context,PlayQueue,boolean)","[174, 183]","{'A305': [(180, 181)], 'A310': [(183, 183)], 'A295': [(182, 182)], 'A290': [(174, 176)], 'A300': [(177, 177)], 'A314': [(178, 179)]}","{'A305': 0.2, 'A310': 0.1, 'A295': 0.1, 'A290': 0.3, 'A300': 0.1, 'A314': 0.2}",A290,,"    public static void playOnBackgroundPlayer(final Context context,
                                              final PlayQueue queue,
                                              final boolean resumePlayback) {
        Toast.makeText(context, R.string.background_player_playing_toast, Toast.LENGTH_SHORT)
                .show();

        final Intent intent = getPlayerIntent(context, PlayerService.class, queue, resumePlayback);
        intent.putExtra(Player.PLAYER_TYPE, PlayerType.AUDIO.valueForIntent());
        ContextCompat.startForegroundService(context, intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,enqueueOnPlayer,"void enqueueOnPlayer(Context,PlayQueue,PlayerType)","[186, 198]","{'A305': [(189, 189), (194, 194), (196, 196)], 'A296': [(193, 193), (195, 195), (198, 198)], 'A295': [(197, 197)], 'A384': [(186, 188)], 'A418': [(190, 192)]}","{'A305': 0.23076923076923078, 'A296': 0.23076923076923078, 'A295': 0.07692307692307693, 'A384': 0.23076923076923078, 'A418': 0.23076923076923078}",A305,,"    public static void enqueueOnPlayer(final Context context,
                                       final PlayQueue queue,
                                       final PlayerType playerType) {
        if (playerType == PlayerType.POPUP && !PermissionHelper.isPopupEnabledElseAsk(context)) {
            return;
        }

        Toast.makeText(context, R.string.enqueued, Toast.LENGTH_SHORT).show();
        final Intent intent = getPlayerEnqueueIntent(context, PlayerService.class, queue);

        intent.putExtra(Player.PLAYER_TYPE, playerType.valueForIntent());
        ContextCompat.startForegroundService(context, intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,enqueueOnPlayer,"void enqueueOnPlayer(Context,PlayQueue)","[200, 208]","{'A301': [(206, 206)], 'A305': [(202, 202), (204, 204)], 'A310': [(205, 205), (208, 208)], 'A384': [(200, 201), (203, 203), (207, 207)]}","{'A301': 0.1111111111111111, 'A305': 0.2222222222222222, 'A310': 0.2222222222222222, 'A384': 0.4444444444444444}",A384,,"    public static void enqueueOnPlayer(final Context context, final PlayQueue queue) {
        PlayerType playerType = PlayerHolder.getInstance().getType();
        if (playerType == null) {
            Log.e(TAG, ""Enqueueing but no player is open; defaulting to background player"");
            playerType = PlayerType.AUDIO;
        }

        enqueueOnPlayer(context, queue, playerType);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,enqueueNextOnPlayer,"void enqueueNextOnPlayer(Context,PlayQueue)","[211, 222]","{'A301': [(219, 219), (222, 222)], 'A305': [(213, 213), (215, 215), (218, 218), (220, 220)], 'A295': [(221, 221)], 'A384': [(211, 212), (214, 214), (216, 217)]}","{'A301': 0.16666666666666666, 'A305': 0.3333333333333333, 'A295': 0.08333333333333333, 'A384': 0.4166666666666667}",A384,,"    public static void enqueueNextOnPlayer(final Context context, final PlayQueue queue) {
        PlayerType playerType = PlayerHolder.getInstance().getType();
        if (playerType == null) {
            Log.e(TAG, ""Enqueueing next but no player is open; defaulting to background player"");
            playerType = PlayerType.AUDIO;
        }
        Toast.makeText(context, R.string.enqueued_next, Toast.LENGTH_SHORT).show();
        final Intent intent = getPlayerEnqueueNextIntent(context, PlayerService.class, queue);

        intent.putExtra(Player.PLAYER_TYPE, playerType.valueForIntent());
        ContextCompat.startForegroundService(context, intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnExternalAudioPlayer,"void playOnExternalAudioPlayer(Context,StreamInfo)","[228, 248]","{'A301': [(232, 234), (243, 243), (247, 248)], 'A305': [(237, 237)], 'A333': [(230, 231), (235, 236), (238, 242), (244, 246)], 'A293': [(228, 229)]}","{'A301': 0.2857142857142857, 'A305': 0.047619047619047616, 'A333': 0.5714285714285714, 'A293': 0.09523809523809523}",A333,,"    public static void playOnExternalAudioPlayer(@NonNull final Context context,
                                                 @NonNull final StreamInfo info) {
        final List<AudioStream> audioStreams = info.getAudioStreams();
        if (audioStreams == null || audioStreams.isEmpty()) {
            Toast.makeText(context, R.string.audio_streams_empty, Toast.LENGTH_SHORT).show();
            return;
        }

        final List<AudioStream> audioStreamsForExternalPlayers =
                getUrlAndNonTorrentStreams(audioStreams);
        if (audioStreamsForExternalPlayers.isEmpty()) {
            Toast.makeText(context, R.string.no_audio_streams_available_for_external_players,
                    Toast.LENGTH_SHORT).show();
            return;
        }

        final int index = ListHelper.getDefaultAudioFormat(context, audioStreamsForExternalPlayers);
        final AudioStream audioStream = audioStreamsForExternalPlayers.get(index);

        playOnExternalPlayer(context, info.getName(), info.getUploaderName(), audioStream);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnExternalVideoPlayer,"void playOnExternalVideoPlayer(Context,StreamInfo)","[250, 272]","{'A301': [(254, 256), (269, 269), (271, 272)], 'A305': [(260, 260)], 'A333': [(250, 250), (252, 253), (257, 259), (261, 268), (270, 270)], 'A293': [(251, 251)]}","{'A301': 0.2608695652173913, 'A305': 0.043478260869565216, 'A333': 0.6521739130434783, 'A293': 0.043478260869565216}",A333,,"    public static void playOnExternalVideoPlayer(final Context context,
                                                 @NonNull final StreamInfo info) {
        final List<VideoStream> videoStreams = info.getVideoStreams();
        if (videoStreams == null || videoStreams.isEmpty()) {
            Toast.makeText(context, R.string.video_streams_empty, Toast.LENGTH_SHORT).show();
            return;
        }

        final List<VideoStream> videoStreamsForExternalPlayers =
                ListHelper.getSortedStreamVideosList(context,
                        getUrlAndNonTorrentStreams(videoStreams), null, false, false);
        if (videoStreamsForExternalPlayers.isEmpty()) {
            Toast.makeText(context, R.string.no_video_streams_available_for_external_players,
                    Toast.LENGTH_SHORT).show();
            return;
        }

        final int index = ListHelper.getDefaultResolutionIndex(context,
                videoStreamsForExternalPlayers);

        final VideoStream videoStream = videoStreamsForExternalPlayers.get(index);
        playOnExternalPlayer(context, info.getName(), info.getUploaderName(), videoStream);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,playOnExternalPlayer,"void playOnExternalPlayer(Context,String,String,Stream)","[274, 326]","{'A301': [(318, 318), (320, 326)], 'A294': [(317, 317)], 'A333': [(278, 316), (319, 319)], 'A293': [(274, 277)]}","{'A301': 0.1509433962264151, 'A294': 0.018867924528301886, 'A333': 0.7547169811320755, 'A293': 0.07547169811320754}",A333,,"    public static void playOnExternalPlayer(@NonNull final Context context,
                                            @Nullable final String name,
                                            @Nullable final String artist,
                                            @NonNull final Stream stream) {
        final DeliveryMethod deliveryMethod = stream.getDeliveryMethod();
        final String mimeType;

        if (!stream.isUrl() || deliveryMethod == DeliveryMethod.TORRENT) {
            Toast.makeText(context, R.string.selected_stream_external_player_not_supported,
                    Toast.LENGTH_SHORT).show();
            return;
        }

        switch (deliveryMethod) {
            case PROGRESSIVE_HTTP:
                if (stream.getFormat() == null) {
                    if (stream instanceof AudioStream) {
                        mimeType = ""audio/*"";
                    } else if (stream instanceof VideoStream) {
                        mimeType = ""video/*"";
                    } else {
                        // This should never be reached, because subtitles are not opened in
                        // external players
                        return;
                    }
                } else {
                    mimeType = stream.getFormat().getMimeType();
                }
                break;
            case HLS:
                mimeType = ""application/x-mpegURL"";
                break;
            case DASH:
                mimeType = ""application/dash+xml"";
                break;
            case SS:
                mimeType = ""application/vnd.ms-sstr+xml"";
                break;
            default:
                // Torrent streams are not exposed to external players
                mimeType = """";
        }

        final Intent intent = new Intent();
        intent.setAction(Intent.ACTION_VIEW);
        intent.setDataAndType(Uri.parse(stream.getContent()), mimeType);
        intent.putExtra(Intent.EXTRA_TITLE, name);
        intent.putExtra(""title"", name);
        intent.putExtra(""artist"", artist);
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        resolveActivityOrAskToInstall(context, intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,resolveActivityOrAskToInstall,"void resolveActivityOrAskToInstall(Context,Intent)","[328, 344]","{'A301': [(331, 333), (339, 343)], 'A305': [(330, 330), (336, 336)], 'A310': [(344, 344)], 'A293': [(328, 329)], 'A299': [(334, 335), (337, 338)]}","{'A301': 0.47058823529411764, 'A305': 0.11764705882352941, 'A310': 0.058823529411764705, 'A293': 0.11764705882352941, 'A299': 0.23529411764705882}",A301,,"    public static void resolveActivityOrAskToInstall(@NonNull final Context context,
                                                     @NonNull final Intent intent) {
        if (!ShareUtils.tryOpenIntentInApp(context, intent)) {
            if (context instanceof Activity) {
                new AlertDialog.Builder(context)
                        .setMessage(R.string.no_player_found)
                        .setPositiveButton(R.string.install, (dialog, which) ->
                                ShareUtils.installApp(context,
                                        context.getString(R.string.vlc_package)))
                        .setNegativeButton(R.string.cancel, (dialog, which) ->
                                Log.i(""NavigationHelper"", ""You unlocked a secret unicorn.""))
                        .show();
            } else {
                Toast.makeText(context, R.string.no_player_found_toast, Toast.LENGTH_LONG).show();
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,defaultTransaction,FragmentTransaction defaultTransaction(FragmentManager),"[350, 355]","{'A301': [(350, 350), (352, 352), (355, 355)], 'A294': [(351, 351), (353, 354)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"    @SuppressLint(""CommitTransaction"")
    private static FragmentTransaction defaultTransaction(final FragmentManager fragmentManager) {
        return fragmentManager.beginTransaction()
                .setCustomAnimations(R.animator.custom_fade_in, R.animator.custom_fade_out,
                        R.animator.custom_fade_in, R.animator.custom_fade_out);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,gotoMainFragment,void gotoMainFragment(FragmentManager),"[357, 362]","{'A301': [(362, 362)], 'A294': [(357, 361)]}","{'A301': 0.16666666666666666, 'A294': 0.8333333333333334}",A294,,"    public static void gotoMainFragment(final FragmentManager fragmentManager) {
        final boolean popped = fragmentManager.popBackStackImmediate(MAIN_FRAGMENT_TAG, 0);
        if (!popped) {
            openMainFragment(fragmentManager);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openMainFragment,void openMainFragment(FragmentManager),"[364, 372]","{'A301': [(365, 372)], 'A294': [(364, 364)]}","{'A301': 0.8888888888888888, 'A294': 0.1111111111111111}",A301,,"    public static void openMainFragment(final FragmentManager fragmentManager) {
        InfoCache.getInstance().trimCache();

        fragmentManager.popBackStackImmediate(null, FragmentManager.POP_BACK_STACK_INCLUSIVE);
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, new MainFragment())
                .addToBackStack(MAIN_FRAGMENT_TAG)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,tryGotoSearchFragment,boolean tryGotoSearchFragment(FragmentManager),"[374, 383]","{'A301': [(375, 376), (379, 383)], 'A294': [(374, 374), (377, 378)]}","{'A301': 0.7, 'A294': 0.3}",A301,,"    public static boolean tryGotoSearchFragment(final FragmentManager fragmentManager) {
        if (MainActivity.DEBUG) {
            for (int i = 0; i < fragmentManager.getBackStackEntryCount(); i++) {
                Log.d(""NavigationHelper"", ""tryGoToSearchFragment() ["" + i + ""]""
                        + "" = ["" + fragmentManager.getBackStackEntryAt(i) + ""]"");
            }
        }

        return fragmentManager.popBackStackImmediate(SEARCH_FRAGMENT_TAG, 0);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openSearchFragment,"void openSearchFragment(FragmentManager,int,String)","[385, 391]","{'A301': [(387, 387), (389, 391)], 'A294': [(385, 386)], 'A302': [(388, 388)]}","{'A301': 0.5714285714285714, 'A294': 0.2857142857142857, 'A302': 0.14285714285714285}",A301,,"    public static void openSearchFragment(final FragmentManager fragmentManager,
                                          final int serviceId, final String searchString) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, SearchFragment.getInstance(serviceId, searchString))
                .addToBackStack(SEARCH_FRAGMENT_TAG)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,expandMainPlayer,void expandMainPlayer(Context),"[393, 395]","{'A290': [(393, 395)]}",{'A290': 1.0},A290,,"    public static void expandMainPlayer(final Context context) {
        context.sendBroadcast(new Intent(VideoDetailFragment.ACTION_SHOW_MAIN_PLAYER));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,sendPlayerStartedEvent,void sendPlayerStartedEvent(Context),"[397, 399]","{'A290': [(397, 399)]}",{'A290': 1.0},A290,,"    public static void sendPlayerStartedEvent(final Context context) {
        context.sendBroadcast(new Intent(VideoDetailFragment.ACTION_PLAYER_STARTED));
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,showMiniPlayer,void showMiniPlayer(FragmentManager),"[401, 407]","{'A305': [(406, 406)], 'A290': [(401, 405), (407, 407)]}","{'A305': 0.14285714285714285, 'A290': 0.8571428571428571}",A290,,"    public static void showMiniPlayer(final FragmentManager fragmentManager) {
        final VideoDetailFragment instance = VideoDetailFragment.getInstanceInCollapsedState();
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_player_holder, instance)
                .runOnCommit(() -> sendPlayerStartedEvent(instance.requireActivity()))
                .commitAllowingStateLoss();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openVideoDetailFragment,"void openVideoDetailFragment(Context,FragmentManager,int,String,String,PlayQueue,boolean)","[413, 469]","{'A305': [(413, 427), (429, 436), (438, 469)], 'A298': [(437, 437)], 'A320': [(428, 428)]}","{'A305': 0.9649122807017544, 'A298': 0.017543859649122806, 'A320': 0.017543859649122806}",A305,,"    public static void openVideoDetailFragment(@NonNull final Context context,
                                               @NonNull final FragmentManager fragmentManager,
                                               final int serviceId,
                                               @Nullable final String url,
                                               @NonNull final String title,
                                               @Nullable final PlayQueue playQueue,
                                               final boolean switchingPlayers) {

        final boolean autoPlay;
        @Nullable final PlayerType playerType = PlayerHolder.getInstance().getType();
        if (playerType == null) {
            // no player open
            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);
        } else if (switchingPlayers) {
            // switching player to main player
            autoPlay = PlayerHolder.getInstance().isPlaying(); // keep play/pause state
        } else if (playerType == PlayerType.MAIN) {
            // opening new stream while already playing in main player
            autoPlay = PlayerHelper.isAutoplayAllowedByUser(context);
        } else {
            // opening new stream while already playing in another player
            autoPlay = false;
        }

        final RunnableWithVideoDetailFragment onVideoDetailFragmentReady = detailFragment -> {
            expandMainPlayer(detailFragment.requireActivity());
            detailFragment.setAutoPlay(autoPlay);
            if (switchingPlayers) {
                // Situation when user switches from players to main player. All needed data is
                // here, we can start watching (assuming newQueue equals playQueue).
                // Starting directly in fullscreen if the previous player type was popup.
                detailFragment.openVideoPlayer(playerType == PlayerType.POPUP
                        || PlayerHelper.isStartMainPlayerFullscreenEnabled(context));
            } else {
                detailFragment.selectAndLoadVideo(serviceId, url, title, playQueue);
            }
            detailFragment.scrollToTop();
        };

        final Fragment fragment = fragmentManager.findFragmentById(R.id.fragment_player_holder);
        if (fragment instanceof VideoDetailFragment && fragment.isVisible()) {
            onVideoDetailFragmentReady.run((VideoDetailFragment) fragment);
        } else {
            // Specify no url here, otherwise the VideoDetailFragment will start loading the
            // stream automatically if it's the first time it is being opened, but then
            // onVideoDetailFragmentReady will kick in and start another loading process.
            // See VideoDetailFragment.wasCleared() and its usage in doInitialLoadLogic().
            final VideoDetailFragment instance = VideoDetailFragment
                    .getInstance(serviceId, null, title, playQueue);
            instance.setAutoPlay(autoPlay);

            defaultTransaction(fragmentManager)
                    .replace(R.id.fragment_player_holder, instance)
                    .runOnCommit(() -> onVideoDetailFragmentReady.run(instance))
                    .commit();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openChannelFragment,"void openChannelFragment(FragmentManager,int,String,String)","[471, 478]","{'A301': [(474, 474), (476, 478)], 'A305': [(473, 473), (475, 475)], 'A294': [(471, 472)]}","{'A301': 0.5, 'A305': 0.25, 'A294': 0.25}",A301,,"    public static void openChannelFragment(final FragmentManager fragmentManager,
                                           final int serviceId, final String url,
                                           @NonNull final String name) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, ChannelFragment.getInstance(serviceId, url, name))
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openChannelFragment,"void openChannelFragment(Fragment,StreamInfoItem,String)","[480, 487]","{'A298': [(480, 487)]}",{'A298': 1.0},A298,,"    public static void openChannelFragment(@NonNull final Fragment fragment,
                                           @NonNull final StreamInfoItem item,
                                           final String uploaderUrl) {
        // For some reason `getParentFragmentManager()` doesn't work, but this does.
        openChannelFragment(
                fragment.requireActivity().getSupportFragmentManager(),
                item.getServiceId(), uploaderUrl, item.getUploaderName());
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openCommentAuthorIfPresent,"void openCommentAuthorIfPresent(FragmentActivity,CommentsInfoItem)","[496, 507]","{'A305': [(496, 507)]}",{'A305': 1.0},A305,,"    public static void openCommentAuthorIfPresent(@NonNull final FragmentActivity activity,
                                                  @NonNull final CommentsInfoItem comment) {
        if (isEmpty(comment.getUploaderUrl())) {
            return;
        }
        try {
            openChannelFragment(activity.getSupportFragmentManager(), comment.getServiceId(),
                    comment.getUploaderUrl(), comment.getUploaderName());
        } catch (final Exception e) {
            ErrorUtil.showUiErrorSnackbar(activity, ""Opening channel fragment"", e);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openCommentRepliesFragment,"void openCommentRepliesFragment(FragmentActivity,CommentsInfoItem)","[509, 516]","{'A305': [(509, 512), (515, 516)], 'A298': [(513, 514)]}","{'A305': 0.75, 'A298': 0.25}",A305,,"    public static void openCommentRepliesFragment(@NonNull final FragmentActivity activity,
                                                  @NonNull final CommentsInfoItem comment) {
        defaultTransaction(activity.getSupportFragmentManager())
                .replace(R.id.fragment_holder, new CommentRepliesFragment(comment),
                        CommentRepliesFragment.TAG)
                .addToBackStack(CommentRepliesFragment.TAG)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openPlaylistFragment,"void openPlaylistFragment(FragmentManager,int,String,String)","[518, 525]","{'A301': [(521, 521), (523, 525)], 'A305': [(520, 520), (522, 522)], 'A294': [(518, 519)]}","{'A301': 0.5, 'A305': 0.25, 'A294': 0.25}",A301,,"    public static void openPlaylistFragment(final FragmentManager fragmentManager,
                                            final int serviceId, final String url,
                                            @NonNull final String name) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, PlaylistFragment.getInstance(serviceId, url, name))
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openFeedFragment,void openFeedFragment(FragmentManager),"[527, 529]","{'A301': [(528, 529)], 'A294': [(527, 527)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    public static void openFeedFragment(final FragmentManager fragmentManager) {
        openFeedFragment(fragmentManager, FeedGroupEntity.GROUP_ALL_ID, null);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openFeedFragment,"void openFeedFragment(FragmentManager,long,String)","[531, 537]","{'A301': [(533, 534)], 'A294': [(531, 532)], 'A338': [(535, 537)]}","{'A301': 0.2857142857142857, 'A294': 0.2857142857142857, 'A338': 0.42857142857142855}",A338,,"    public static void openFeedFragment(final FragmentManager fragmentManager, final long groupId,
                                        @Nullable final String groupName) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, FeedFragment.newInstance(groupId, groupName))
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openBookmarksFragment,void openBookmarksFragment(FragmentManager),"[539, 544]","{'A294': [(539, 539)], 'A306': [(540, 544)]}","{'A294': 0.16666666666666666, 'A306': 0.8333333333333334}",A306,,"    public static void openBookmarksFragment(final FragmentManager fragmentManager) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, new BookmarkFragment())
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openSubscriptionFragment,void openSubscriptionFragment(FragmentManager),"[546, 551]","{'A294': [(546, 546)], 'A306': [(547, 551)]}","{'A294': 0.16666666666666666, 'A306': 0.8333333333333334}",A306,,"    public static void openSubscriptionFragment(final FragmentManager fragmentManager) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, new SubscriptionFragment())
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openKioskFragment,"void openKioskFragment(FragmentManager,int,String)","[553, 559]","{'A301': [(555, 555)], 'A294': [(553, 554)], 'A302': [(556, 559)]}","{'A301': 0.14285714285714285, 'A294': 0.2857142857142857, 'A302': 0.5714285714285714}",A302,,"    public static void openKioskFragment(final FragmentManager fragmentManager, final int serviceId,
                                         final String kioskId) throws ExtractionException {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, KioskFragment.getInstance(serviceId, kioskId))
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openLocalPlaylistFragment,"void openLocalPlaylistFragment(FragmentManager,long,String)","[561, 568]","{'A301': [(563, 563)], 'A310': [(566, 568)], 'A294': [(561, 562), (564, 565)]}","{'A301': 0.125, 'A310': 0.375, 'A294': 0.5}",A294,,"    public static void openLocalPlaylistFragment(final FragmentManager fragmentManager,
                                                 final long playlistId, final String name) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, LocalPlaylistFragment.getInstance(playlistId,
                        name == null ? """" : name))
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openStatisticFragment,void openStatisticFragment(FragmentManager),"[570, 575]","{'A301': [(571, 571)], 'A310': [(573, 575)], 'A294': [(570, 570)], 'A302': [(572, 572)]}","{'A301': 0.16666666666666666, 'A310': 0.5, 'A294': 0.16666666666666666, 'A302': 0.16666666666666666}",A310,,"    public static void openStatisticFragment(final FragmentManager fragmentManager) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, new StatisticsPlaylistFragment())
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openSubscriptionsImportFragment,"void openSubscriptionsImportFragment(FragmentManager,int)","[577, 583]","{'A301': [(579, 583)], 'A294': [(577, 578)]}","{'A301': 0.7142857142857143, 'A294': 0.2857142857142857}",A301,,"    public static void openSubscriptionsImportFragment(final FragmentManager fragmentManager,
                                                       final int serviceId) {
        defaultTransaction(fragmentManager)
                .replace(R.id.fragment_holder, SubscriptionsImportFragment.getInstance(serviceId))
                .addToBackStack(null)
                .commit();
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openSearch,"void openSearch(Context,int,String)","[589, 596]","{'A301': [(592, 592), (594, 596)], 'A294': [(589, 591)], 'A302': [(593, 593)]}","{'A301': 0.5, 'A294': 0.375, 'A302': 0.125}",A301,,"    public static void openSearch(final Context context, final int serviceId,
                                  final String searchString) {
        final Intent mIntent = new Intent(context, MainActivity.class);
        mIntent.putExtra(Constants.KEY_SERVICE_ID, serviceId);
        mIntent.putExtra(Constants.KEY_SEARCH_STRING, searchString);
        mIntent.putExtra(Constants.KEY_OPEN_SEARCH, true);
        context.startActivity(mIntent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openVideoDetail,"void openVideoDetail(Context,int,String,String,PlayQueue,boolean)","[598, 615]","{'A301': [(604, 604), (615, 615)], 'A305': [(598, 603), (607, 612), (614, 614)], 'A294': [(613, 613)], 'A295': [(605, 606)]}","{'A301': 0.1111111111111111, 'A305': 0.7222222222222222, 'A294': 0.05555555555555555, 'A295': 0.1111111111111111}",A305,,"    public static void openVideoDetail(final Context context,
                                       final int serviceId,
                                       final String url,
                                       @NonNull final String title,
                                       @Nullable final PlayQueue playQueue,
                                       final boolean switchingPlayers) {

        final Intent intent = getStreamIntent(context, serviceId, url, title)
                .putExtra(VideoDetailFragment.KEY_SWITCHING_PLAYERS, switchingPlayers);

        if (playQueue != null) {
            final String cacheKey = SerializedCache.getInstance().put(playQueue, PlayQueue.class);
            if (cacheKey != null) {
                intent.putExtra(Player.PLAY_QUEUE_KEY, cacheKey);
            }
        }
        context.startActivity(intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openChannelFragmentUsingIntent,"void openChannelFragmentUsingIntent(Context,int,String,String)","[626, 636]","{'A349': [(626, 636)]}",{'A349': 1.0},A349,,"    public static void openChannelFragmentUsingIntent(final Context context,
                                                      final int serviceId,
                                                      final String url,
                                                      @NonNull final String title) {
        final Intent intent = getOpenIntent(context, url, serviceId,
                StreamingService.LinkType.CHANNEL);
        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.putExtra(Constants.KEY_TITLE, title);

        context.startActivity(intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openMainActivity,void openMainActivity(Context),"[638, 643]","{'A301': [(640, 643)], 'A294': [(638, 639)]}","{'A301': 0.6666666666666666, 'A294': 0.3333333333333333}",A301,,"    public static void openMainActivity(final Context context) {
        final Intent mIntent = new Intent(context, MainActivity.class);
        mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        mIntent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TASK);
        context.startActivity(mIntent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openRouterActivity,"void openRouterActivity(Context,String)","[645, 649]","{'A294': [(645, 646)], 'A289': [(647, 649)]}","{'A294': 0.4, 'A289': 0.6}",A289,,"    public static void openRouterActivity(final Context context, final String url) {
        final Intent mIntent = new Intent(context, RouterActivity.class);
        mIntent.setData(Uri.parse(url));
        context.startActivity(mIntent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openAbout,void openAbout(Context),"[651, 654]","{'A301': [(653, 654)], 'A294': [(651, 652)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"    public static void openAbout(final Context context) {
        final Intent intent = new Intent(context, AboutActivity.class);
        context.startActivity(intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openSettings,void openSettings(Context),"[656, 659]","{'A301': [(658, 659)], 'A294': [(656, 657)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"    public static void openSettings(final Context context) {
        final Intent intent = new Intent(context, SettingsActivity.class);
        context.startActivity(intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openDownloads,void openDownloads(Activity),"[661, 667]","{'A301': [(667, 667)], 'A305': [(661, 662), (664, 665)], 'A294': [(663, 663)], 'A328': [(666, 666)]}","{'A301': 0.14285714285714285, 'A305': 0.5714285714285714, 'A294': 0.14285714285714285, 'A328': 0.14285714285714285}",A305,,"    public static void openDownloads(final Activity activity) {
        if (PermissionHelper.checkStoragePermissions(
                activity, PermissionHelper.DOWNLOADS_REQUEST_CODE)) {
            final Intent intent = new Intent(activity, DownloadActivity.class);
            activity.startActivity(intent);
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getPlayQueueActivityIntent,Intent getPlayQueueActivityIntent(Context),"[669, 675]","{'A305': [(669, 670)], 'A310': [(671, 673)], 'A443': [(674, 675)]}","{'A305': 0.2857142857142857, 'A310': 0.42857142857142855, 'A443': 0.2857142857142857}",A310,,"    public static Intent getPlayQueueActivityIntent(final Context context) {
        final Intent intent = new Intent(context, PlayQueueActivity.class);
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
            intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        }
        return intent;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,openPlayQueue,void openPlayQueue(Context),"[677, 680]","{'A415': [(677, 680)]}",{'A415': 1.0},A415,,"    public static void openPlayQueue(final Context context) {
        final Intent intent = new Intent(context, PlayQueueActivity.class);
        context.startActivity(intent);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getOpenIntent,"Intent getOpenIntent(Context,String,int,StreamingService.LinkType)","[686, 693]","{'A301': [(689, 693)], 'A294': [(686, 688)]}","{'A301': 0.625, 'A294': 0.375}",A301,,"    private static Intent getOpenIntent(final Context context, final String url,
                                        final int serviceId, final StreamingService.LinkType type) {
        final Intent mIntent = new Intent(context, MainActivity.class);
        mIntent.putExtra(Constants.KEY_SERVICE_ID, serviceId);
        mIntent.putExtra(Constants.KEY_URL, url);
        mIntent.putExtra(Constants.KEY_LINK_TYPE, type);
        return mIntent;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getIntentByLink,"Intent getIntentByLink(Context,String)","[695, 698]","{'A294': [(695, 696)], 'A422': [(697, 698)]}","{'A294': 0.5, 'A422': 0.5}",A294,,"    public static Intent getIntentByLink(final Context context, final String url)
            throws ExtractionException {
        return getIntentByLink(context, NewPipe.getServiceByUrl(url), url);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getIntentByLink,"Intent getIntentByLink(Context,StreamingService,String)","[700, 711]","{'A301': [(704, 705), (708, 709)], 'A305': [(700, 701), (710, 710)], 'A324': [(711, 711)], 'A294': [(702, 703), (706, 707)]}","{'A301': 0.3333333333333333, 'A305': 0.25, 'A324': 0.08333333333333333, 'A294': 0.3333333333333333}",A301,,"    public static Intent getIntentByLink(final Context context,
                                         final StreamingService service,
                                         final String url) throws ExtractionException {
        final StreamingService.LinkType linkType = service.getLinkTypeByUrl(url);

        if (linkType == StreamingService.LinkType.NONE) {
            throw new ExtractionException(""Url not known to service. service="" + service
                    + "" url="" + url);
        }

        return getOpenIntent(context, url, service.getServiceId(), linkType);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getChannelIntent,"Intent getChannelIntent(Context,int,String)","[713, 717]","{'A340': [(713, 717)]}",{'A340': 1.0},A340,,"    public static Intent getChannelIntent(final Context context,
                                          final int serviceId,
                                          final String url) {
        return getOpenIntent(context, url, serviceId, StreamingService.LinkType.CHANNEL);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,getStreamIntent,"Intent getStreamIntent(Context,int,String,String)","[719, 726]","{'A295': [(719, 726)]}",{'A295': 1.0},A295,,"    public static Intent getStreamIntent(final Context context,
                                         final int serviceId,
                                         final String url,
                                         @Nullable final String title) {
        return getOpenIntent(context, url, serviceId, StreamingService.LinkType.STREAM)
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                .putExtra(Constants.KEY_TITLE, title);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/NavigationHelper.java,NavigationHelper,restartApp,void restartApp(Activity),"[734, 738]","{'A298': [(735, 735)], 'A300': [(736, 737)], 'A431': [(734, 734), (738, 738)]}","{'A298': 0.2, 'A300': 0.4, 'A431': 0.4}",A300,,"    public static void restartApp(final Activity activity) {
        NewPipeDatabase.close();

        ProcessPhoenix.triggerRebirth(activity.getApplicationContext());
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,installApp,"void installApp(Context,String)","[53, 62]","{'A293': [(53, 54), (56, 56), (59, 59), (61, 62)], 'A305': [(55, 55), (57, 58), (60, 60)]}","{'A293': 0.6, 'A305': 0.4}",A293,,"    public static void installApp(@NonNull final Context context, final String packageId) {
        // Try market scheme
        final Intent marketSchemeIntent = new Intent(Intent.ACTION_VIEW,
                Uri.parse(""market://details?id="" + packageId))
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        if (!tryOpenIntentInApp(context, marketSchemeIntent)) {
            // Fall back to Google Play Store Web URL (F-Droid can handle it)
            openUrlInApp(context, ""https://play.google.com/store/apps/details?id="" + packageId);
        }
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,openUrlInBrowser,"void openUrlInBrowser(Context,String)","[79, 119]","{'A293': [(105, 105), (107, 109), (117, 119)], 'A305': [(79, 91), (95, 95), (101, 104), (106, 106), (110, 116)], 'A333': [(92, 94), (96, 100)]}","{'A293': 0.17073170731707318, 'A305': 0.6341463414634146, 'A333': 0.1951219512195122}",A305,,"    public static void openUrlInBrowser(@NonNull final Context context, final String url) {
        // Resolve using a generic http://, so we are sure to get a browser and not e.g. the yt app.
        // Note that this requires the `http` schema to be added to `<queries>` in the manifest.
        final ResolveInfo defaultBrowserInfo;
        final Intent browserIntent = new Intent(Intent.ACTION_VIEW, Uri.parse(""http://""));
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
            defaultBrowserInfo = context.getPackageManager().resolveActivity(browserIntent,
                    PackageManager.ResolveInfoFlags.of(PackageManager.MATCH_DEFAULT_ONLY));
        } else {
            defaultBrowserInfo = context.getPackageManager().resolveActivity(browserIntent,
                    PackageManager.MATCH_DEFAULT_ONLY);
        }

        final Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(url))
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        if (defaultBrowserInfo == null) {
            // No app installed to open a web URL, but it may be handled by other apps so try
            // opening a system chooser for the link in this case (it could be bypassed by the
            // system if there is only one app which can open the link or a default app associated
            // with the link domain on Android 12 and higher)
            openAppChooser(context, intent, true);
            return;
        }

        final String defaultBrowserPackage = defaultBrowserInfo.activityInfo.packageName;

        if (defaultBrowserPackage.equals(""android"")) {
            // No browser set as default (doesn't work on some devices)
            openAppChooser(context, intent, true);
        } else {
            try {
                intent.setPackage(defaultBrowserPackage);
                context.startActivity(intent);
            } catch (final ActivityNotFoundException e) {
                // Not a browser but an app chooser because of OEMs changes
                intent.setPackage(null);
                openAppChooser(context, intent, true);
            }
        }
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,openUrlInApp,"void openUrlInApp(Context,String)","[128, 131]","{'A293': [(131, 131)], 'A305': [(128, 130)]}","{'A293': 0.25, 'A305': 0.75}",A305,,"    public static void openUrlInApp(@NonNull final Context context, final String url) {
        openIntentInApp(context, new Intent(Intent.ACTION_VIEW, Uri.parse(url))
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK));
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,tryOpenIntentInApp,"boolean tryOpenIntentInApp(Context,Intent)","[142, 150]","{'A293': [(145, 145), (149, 149)], 'A305': [(142, 144), (146, 147)], 'A322': [(148, 148), (150, 150)]}","{'A293': 0.2222222222222222, 'A305': 0.5555555555555556, 'A322': 0.2222222222222222}",A305,,"    public static boolean tryOpenIntentInApp(@NonNull final Context context,
                                             @NonNull final Intent intent) {
        try {
            context.startActivity(intent);
        } catch (final ActivityNotFoundException e) {
            return false;
        }
        return true;
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,openIntentInApp,"void openIntentInApp(Context,Intent)","[161, 167]","{'A305': [(161, 167)]}",{'A305': 1.0},A305,,"    public static void openIntentInApp(@NonNull final Context context,
                                       @NonNull final Intent intent) {
        if (!tryOpenIntentInApp(context, intent)) {
            Toast.makeText(context, R.string.no_app_to_open_intent, Toast.LENGTH_LONG)
                    .show();
        }
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,openAppChooser,"void openAppChooser(Context,Intent,boolean)","[183, 221]","{'A293': [(183, 193), (198, 214), (221, 221)], 'A333': [(215, 220)], 'A300': [(194, 197)]}","{'A293': 0.7435897435897436, 'A333': 0.15384615384615385, 'A300': 0.10256410256410256}",A293,,"    private static void openAppChooser(@NonNull final Context context,
                                       @NonNull final Intent intent,
                                       final boolean setTitleChooser) {
        final Intent chooserIntent = new Intent(Intent.ACTION_CHOOSER);
        chooserIntent.putExtra(Intent.EXTRA_INTENT, intent);
        chooserIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        if (setTitleChooser) {
            chooserIntent.putExtra(Intent.EXTRA_TITLE, context.getString(R.string.open_with));
        }

        // Migrate any clip data and flags from the original intent.
        final int permFlags = intent.getFlags() & (Intent.FLAG_GRANT_READ_URI_PERMISSION
                | Intent.FLAG_GRANT_WRITE_URI_PERMISSION
                | Intent.FLAG_GRANT_PERSISTABLE_URI_PERMISSION
                | Intent.FLAG_GRANT_PREFIX_URI_PERMISSION);
        if (permFlags != 0) {
            ClipData targetClipData = intent.getClipData();
            if (targetClipData == null && intent.getData() != null) {
                final ClipData.Item item = new ClipData.Item(intent.getData());
                final String[] mimeTypes;
                if (intent.getType() != null) {
                    mimeTypes = new String[] {intent.getType()};
                } else {
                    mimeTypes = new String[] {};
                }
                targetClipData = new ClipData(null, mimeTypes, item);
            }
            if (targetClipData != null) {
                chooserIntent.setClipData(targetClipData);
                chooserIntent.addFlags(permFlags);
            }
        }

        try {
            context.startActivity(chooserIntent);
        } catch (final ActivityNotFoundException e) {
            Toast.makeText(context, R.string.no_app_to_open_intent, Toast.LENGTH_LONG).show();
        }
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,shareText,"void shareText(Context,String,String,String)","[237, 265]","{'A293': [(237, 243), (245, 245), (247, 254), (262, 264)], 'A305': [(255, 261), (265, 265)], 'A288': [(244, 244)], 'A444': [(246, 246)]}","{'A293': 0.6551724137931034, 'A305': 0.27586206896551724, 'A288': 0.034482758620689655, 'A444': 0.034482758620689655}",A293,,"    public static void shareText(@NonNull final Context context,
                                 @NonNull final String title,
                                 final String content,
                                 final String imagePreviewUrl) {
        final Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType(""text/plain"");
        shareIntent.putExtra(Intent.EXTRA_TEXT, content);
        if (!TextUtils.isEmpty(title)) {
            shareIntent.putExtra(Intent.EXTRA_TITLE, title);
            shareIntent.putExtra(Intent.EXTRA_SUBJECT, title);
        }

        // Content preview in the share sheet has been added in Android 10, so it's not needed to
        // set a content preview which will be never displayed
        // See https://developer.android.com/training/sharing/send#adding-rich-content-previews
        // If loading of images has been disabled, don't try to generate a content preview
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q
                && !TextUtils.isEmpty(imagePreviewUrl)
                && ImageStrategy.shouldLoadImages()) {

            final ClipData clipData = generateClipDataForImagePreview(context, imagePreviewUrl);
            if (clipData != null) {
                shareIntent.setClipData(clipData);
                shareIntent.setFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
            }
        }

        openAppChooser(context, shareIntent, false);
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,shareText,"void shareText(Context,String,String,List<Image>)","[283, 288]","{'A305': [(283, 288)]}",{'A305': 1.0},A305,,"    public static void shareText(@NonNull final Context context,
                                 @NonNull final String title,
                                 final String content,
                                 final List<Image> images) {
        shareText(context, title, content, ImageStrategy.choosePreferredImage(images));
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,shareText,"void shareText(Context,String,String)","[303, 307]","{'A293': [(303, 307)]}",{'A293': 1.0},A293,,"    public static void shareText(@NonNull final Context context,
                                 @NonNull final String title,
                                 final String content) {
        shareText(context, title, content, """");
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,copyToClipboard,"void copyToClipboard(Context,String)","[316, 335]","{'A293': [(316, 316), (321, 321)], 'A305': [(335, 335)], 'A348': [(317, 317), (319, 320), (322, 324)], 'A295': [(318, 318)], 'A333': [(325, 333)], 'A445': [(334, 334)]}","{'A293': 0.1, 'A305': 0.05, 'A348': 0.3, 'A295': 0.05, 'A333': 0.45, 'A445': 0.05}",A333,,"    public static void copyToClipboard(@NonNull final Context context, final String text) {
        final ClipboardManager clipboardManager =
                ContextCompat.getSystemService(context, ClipboardManager.class);

        if (clipboardManager == null) {
            Toast.makeText(context, R.string.permission_denied, Toast.LENGTH_LONG).show();
            return;
        }

        try {
            clipboardManager.setPrimaryClip(ClipData.newPlainText(null, text));
            if (Build.VERSION.SDK_INT < 33) {
                // Android 13 has its own ""copied to clipboard"" dialog
                Toast.makeText(context, R.string.msg_copied, Toast.LENGTH_SHORT).show();
            }
        } catch (final Exception e) {
            Log.e(TAG, ""Error when trying to copy text to clipboard"", e);
            Toast.makeText(context, R.string.msg_failed_to_copy, Toast.LENGTH_SHORT).show();
        }
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/ShareUtils.java,ShareUtils,generateClipDataForImagePreview,"ClipData generateClipDataForImagePreview(Context,String)","[376, 412]","{'A293': [(376, 380), (382, 397), (399, 401), (403, 406), (408, 409), (411, 412)], 'A305': [(381, 381), (398, 398), (402, 402), (407, 407), (410, 410)]}","{'A293': 0.8648648648648649, 'A305': 0.13513513513513514}",A293,,"    @Nullable
    private static ClipData generateClipDataForImagePreview(
            @NonNull final Context context,
            @NonNull final String thumbnailUrl) {
        try {
            final Bitmap bitmap = PicassoHelper.getImageFromCacheIfPresent(thumbnailUrl);
            if (bitmap == null) {
                return null;
            }

            // Save the image in memory to the application's cache because we need a URI to the
            // image to generate a ClipData which will show the share sheet, and so an image file
            final Context applicationContext = context.getApplicationContext();
            final String appFolder = applicationContext.getCacheDir().getAbsolutePath();
            final File thumbnailPreviewFile = new File(appFolder
                    + ""/android_share_sheet_image_preview.jpg"");

            // Any existing file will be overwritten with FileOutputStream
            final FileOutputStream fileOutputStream = new FileOutputStream(thumbnailPreviewFile);
            bitmap.compress(Bitmap.CompressFormat.JPEG, 90, fileOutputStream);
            fileOutputStream.close();

            final ClipData clipData = ClipData.newUri(applicationContext.getContentResolver(), """",
                        FileProvider.getUriForFile(applicationContext,
                                BuildConfig.APPLICATION_ID + "".provider"",
                                thumbnailPreviewFile));

            if (DEBUG) {
                Log.d(TAG, ""ClipData successfully generated for Android share sheet: "" + clipData);
            }
            return clipData;

        } catch (final Exception e) {
            Log.w(TAG, ""Error when setting preview image for share sheet"", e);
            return null;
        }
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/KoreUtils.java,KoreUtils,isServiceSupportedByKore,boolean isServiceSupportedByKore(int),"[24, 27]","{'A305': [(24, 27)]}",{'A305': 1.0},A305,,"    public static boolean isServiceSupportedByKore(final int serviceId) {
        return (serviceId == ServiceList.YouTube.getServiceId()
                || serviceId == ServiceList.SoundCloud.getServiceId());
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/KoreUtils.java,KoreUtils,shouldShowPlayWithKodi,"boolean shouldShowPlayWithKodi(Context,int)","[29, 34]","{'A293': [(29, 30)], 'A337': [(31, 34)]}","{'A293': 0.3333333333333333, 'A337': 0.6666666666666666}",A337,,"    public static boolean shouldShowPlayWithKodi(@NonNull final Context context,
                                                 final int serviceId) {
        return isServiceSupportedByKore(serviceId)
                && PreferenceManager.getDefaultSharedPreferences(context)
                .getBoolean(context.getString(R.string.show_play_with_kodi_key), false);
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/KoreUtils.java,KoreUtils,installKore,void installKore(Context),"[41, 43]","{'A305': [(41, 43)]}",{'A305': 1.0},A305,,"    public static void installKore(final Context context) {
        installApp(context, context.getString(R.string.kore_package));
    }
"
org.schabi.newpipe.util.external_communication,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/external_communication/KoreUtils.java,KoreUtils,playWithKore,"void playWithKore(Context,Uri)","[57, 71]","{'A446': [(71, 71)], 'A305': [(57, 63), (70, 70)], 'A299': [(64, 69)]}","{'A446': 0.06666666666666667, 'A305': 0.5333333333333333, 'A299': 0.4}",A305,,"    public static void playWithKore(final Context context, final Uri streamUrl) {
        final Intent intent = new Intent(Intent.ACTION_VIEW)
                .setPackage(context.getString(R.string.kore_package))
                .setData(streamUrl)
                .setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);

        if (!tryOpenIntentInApp(context, intent)) {
            new AlertDialog.Builder(context)
                    .setMessage(R.string.kore_not_found)
                    .setPositiveButton(R.string.install, (dialog, which) ->
                            installKore(context))
                    .setNegativeButton(R.string.cancel, null)
                    .show();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PermissionHelper.java,PermissionHelper,checkStoragePermissions,"boolean checkStoragePermissions(Activity,int)","[28, 37]","{'A324': [(35, 35), (37, 37)], 'A294': [(28, 32)], 'A299': [(33, 34)], 'A303': [(36, 36)]}","{'A324': 0.2, 'A294': 0.5, 'A299': 0.2, 'A303': 0.1}",A294,,"    public static boolean checkStoragePermissions(final Activity activity, final int requestCode) {
        if (NewPipeSettings.useStorageAccessFramework(activity)) {
            return true; // Storage permissions are not needed for SAF
        }

        if (!checkReadStoragePermissions(activity, requestCode)) {
            return false;
        }
        return checkWriteStoragePermissions(activity, requestCode);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PermissionHelper.java,PermissionHelper,checkReadStoragePermissions,"boolean checkReadStoragePermissions(Activity,int)","[39, 52]","{'A324': [(41, 46), (48, 52)], 'A294': [(39, 40)], 'A303': [(47, 47)]}","{'A324': 0.7857142857142857, 'A294': 0.14285714285714285, 'A303': 0.07142857142857142}",A324,,"    public static boolean checkReadStoragePermissions(final Activity activity,
                                                      final int requestCode) {
        if (ContextCompat.checkSelfPermission(activity, Manifest.permission.READ_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(activity,
                    new String[]{
                            Manifest.permission.READ_EXTERNAL_STORAGE,
                            Manifest.permission.WRITE_EXTERNAL_STORAGE},
                    requestCode);

            return false;
        }
        return true;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PermissionHelper.java,PermissionHelper,checkWriteStoragePermissions,"boolean checkWriteStoragePermissions(Activity,int)","[55, 82]","{'A324': [(57, 72), (74, 82)], 'A294': [(55, 56)], 'A305': [(73, 73)]}","{'A324': 0.8928571428571429, 'A294': 0.07142857142857142, 'A305': 0.03571428571428571}",A324,,"    public static boolean checkWriteStoragePermissions(final Activity activity,
                                                       final int requestCode) {
        // Here, thisActivity is the current activity
        if (ContextCompat.checkSelfPermission(activity,
                Manifest.permission.WRITE_EXTERNAL_STORAGE)
                != PackageManager.PERMISSION_GRANTED) {

            // Should we show an explanation?
            /*if (ActivityCompat.shouldShowRequestPermissionRationale(activity,
                    Manifest.permission.WRITE_EXTERNAL_STORAGE)) {

                // Show an explanation to the user *asynchronously* -- don't block
                // this thread waiting for the user's response! After the user
                // sees the explanation, try again to request the permission.
            } else {*/

            // No explanation needed, we can request the permission.
            ActivityCompat.requestPermissions(activity,
                    new String[]{Manifest.permission.WRITE_EXTERNAL_STORAGE}, requestCode);

            // PERMISSION_WRITE_STORAGE is an
            // app-defined int constant. The callback method gets the
            // result of the request.
            /*}*/
            return false;
        }
        return true;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PermissionHelper.java,PermissionHelper,checkPostNotificationsPermission,"boolean checkPostNotificationsPermission(Activity,int)","[84, 95]","{'A305': [(84, 95)]}",{'A305': 1.0},A305,,"    public static boolean checkPostNotificationsPermission(final Activity activity,
                                                           final int requestCode) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU
                && ContextCompat.checkSelfPermission(activity,
                Manifest.permission.POST_NOTIFICATIONS)
                != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(activity,
                    new String[] {Manifest.permission.POST_NOTIFICATIONS}, requestCode);
            return false;
        }
        return true;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PermissionHelper.java,PermissionHelper,checkSystemAlertWindowPermission,boolean checkSystemAlertWindowPermission(Context),"[113, 127]","{'A297': [(119, 120), (122, 122)], 'A301': [(113, 113), (115, 115), (118, 118), (123, 123), (127, 127)], 'A294': [(114, 114), (116, 117), (121, 121), (124, 126)]}","{'A297': 0.2, 'A301': 0.3333333333333333, 'A294': 0.4666666666666667}",A294,,"    @RequiresApi(api = Build.VERSION_CODES.M)
    public static boolean checkSystemAlertWindowPermission(final Context context) {
        if (!Settings.canDrawOverlays(context)) {
            final Intent i = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION,
                    Uri.parse(""package:"" + context.getPackageName()));
            i.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
            try {
                context.startActivity(i);
            } catch (final ActivityNotFoundException ignored) {
            }
            return false;
        } else {
            return true;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/PermissionHelper.java,PermissionHelper,isPopupEnabledElseAsk,boolean isPopupEnabledElseAsk(Context),"[137, 145]","{'A310': [(145, 145)], 'A294': [(144, 144)], 'A305': [(137, 143)]}","{'A310': 0.1111111111111111, 'A294': 0.1111111111111111, 'A305': 0.7777777777777778}",A305,,"    public static boolean isPopupEnabledElseAsk(final Context context) {
        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M
                || checkSystemAlertWindowPermission(context)) {
            return true;
        } else {
            Toast.makeText(context, R.string.msg_popup_permission, Toast.LENGTH_LONG).show();
            return false;
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,init,void init(Context),"[65, 73]","{'A301': [(73, 73)], 'A294': [(65, 72)]}","{'A301': 0.1111111111111111, 'A294': 0.8888888888888888}",A294,,"    public static void init(final Context context) {
        final File externalCacheDir = context.getExternalCacheDir();
        if (externalCacheDir != null) {
            cacheDirPath = externalCacheDir.getAbsolutePath();
        }
        if (TextUtils.isEmpty(cacheDirPath)) {
            cacheDirPath = context.getCacheDir().getAbsolutePath();
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,tryToRestore,"SavedState tryToRestore(Bundle,WriteRead)","[81, 93]","{'A301': [(85, 85), (91, 93)], 'A294': [(81, 84), (88, 90)], 'A299': [(86, 87)]}","{'A301': 0.3076923076923077, 'A294': 0.5384615384615384, 'A299': 0.15384615384615385}",A294,,"    public static SavedState tryToRestore(final Bundle outState, final WriteRead writeRead) {
        if (outState == null || writeRead == null) {
            return null;
        }

        final SavedState savedState = BundleCompat.getParcelable(
                outState, KEY_SAVED_STATE, SavedState.class);
        if (savedState == null) {
            return null;
        }

        return tryToRestore(savedState, writeRead);
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,tryToRestore,"SavedState tryToRestore(SavedState,WriteRead)","[103, 146]","{'A301': [(106, 106), (109, 111), (114, 116), (119, 122), (130, 130), (137, 141), (144, 146)], 'A294': [(104, 105), (107, 108), (117, 118), (123, 123), (125, 125), (142, 142)], 'A324': [(103, 103), (124, 124), (126, 129), (143, 143)], 'A300': [(112, 113)], 'A295': [(131, 136)]}","{'A301': 0.45454545454545453, 'A294': 0.20454545454545456, 'A324': 0.1590909090909091, 'A300': 0.045454545454545456, 'A295': 0.13636363636363635}",A301,,"    @Nullable
    private static SavedState tryToRestore(@NonNull final SavedState savedState,
                                           @NonNull final WriteRead writeRead) {
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""tryToRestore() called with: savedState = ["" + savedState + ""], ""
                    + ""writeRead = ["" + writeRead + ""]"");
        }

        try {
            Queue<Object> savedObjects =
                    STATE_OBJECTS_HOLDER.remove(savedState.getPrefixFileSaved());
            if (savedObjects != null) {
                writeRead.readFrom(savedObjects);
                if (MainActivity.DEBUG) {
                    Log.d(TAG, ""tryToSave: reading objects from holder > "" + savedObjects
                            + "", stateObjectsHolder > "" + STATE_OBJECTS_HOLDER);
                }
                return savedState;
            }

            final File file = new File(savedState.getPathFileSaved());
            if (!file.exists()) {
                if (MainActivity.DEBUG) {
                    Log.d(TAG, ""Cache file doesn't exist: "" + file.getAbsolutePath());
                }
                return null;
            }

            try (FileInputStream fileInputStream = new FileInputStream(file);
                 ObjectInputStream inputStream = new ObjectInputStream(fileInputStream)) {
                //noinspection unchecked
                savedObjects = (Queue<Object>) inputStream.readObject();
            }

            if (savedObjects != null) {
                writeRead.readFrom(savedObjects);
            }

            return savedState;
        } catch (final Exception e) {
            Log.e(TAG, ""Failed to restore state"", e);
        }
        return null;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,tryToSave,"SavedState tryToSave(boolean,SavedState,Bundle,WriteRead)","[156, 177]","{'A301': [(168, 168), (174, 177)], 'A294': [(157, 159), (169, 173)], 'A324': [(156, 156), (161, 167)], 'A447': [(160, 160)]}","{'A301': 0.22727272727272727, 'A294': 0.36363636363636365, 'A324': 0.36363636363636365, 'A447': 0.045454545454545456}",A294,,"    @Nullable
    public static SavedState tryToSave(final boolean isChangingConfig,
                                       @Nullable final SavedState savedState, final Bundle outState,
                                       final WriteRead writeRead) {
        @NonNull final String currentSavedPrefix;
        if (savedState == null || TextUtils.isEmpty(savedState.getPrefixFileSaved())) {
            // Generate unique prefix
            currentSavedPrefix = System.nanoTime() - writeRead.hashCode() + """";
        } else {
            // Reuse prefix
            currentSavedPrefix = savedState.getPrefixFileSaved();
        }

        final SavedState newSavedState = tryToSave(isChangingConfig, currentSavedPrefix,
                writeRead.generateSuffix(), writeRead);
        if (newSavedState != null) {
            outState.putParcelable(StateSaver.KEY_SAVED_STATE, newSavedState);
            return newSavedState;
        }

        return null;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,tryToSave,"SavedState tryToSave(boolean,String,String,WriteRead)","[199, 265]","{'A301': [(202, 202), (208, 209), (211, 214), (216, 216), (223, 226), (230, 231), (239, 240), (243, 247), (253, 254), (259, 260), (263, 265)], 'A294': [(200, 201), (203, 207), (210, 210), (215, 215), (218, 220), (227, 229), (232, 235), (241, 242), (250, 250), (261, 261)], 'A299': [(248, 249)], 'A324': [(199, 199), (217, 217), (221, 222), (236, 238), (251, 252), (262, 262)], 'A295': [(255, 258)]}","{'A301': 0.417910447761194, 'A294': 0.34328358208955223, 'A299': 0.029850746268656716, 'A324': 0.14925373134328357, 'A295': 0.05970149253731343}",A301,,"    @Nullable
    private static SavedState tryToSave(final boolean isChangingConfig, final String prefixFileName,
                                        final String suffixFileName, final WriteRead writeRead) {
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""tryToSave() called with: ""
                    + ""isChangingConfig = ["" + isChangingConfig + ""], ""
                    + ""prefixFileName = ["" + prefixFileName + ""], ""
                    + ""suffixFileName = ["" + suffixFileName + ""], ""
                    + ""writeRead = ["" + writeRead + ""]"");
        }

        final LinkedList<Object> savedObjects = new LinkedList<>();
        writeRead.writeTo(savedObjects);

        if (isChangingConfig) {
            if (savedObjects.size() > 0) {
                STATE_OBJECTS_HOLDER.put(prefixFileName, savedObjects);
                return new SavedState(prefixFileName, """");
            } else {
                if (MainActivity.DEBUG) {
                    Log.d(TAG, ""Nothing to save"");
                }
                return null;
            }
        }

        try {
            File cacheDir = new File(cacheDirPath);
            if (!cacheDir.exists()) {
                throw new RuntimeException(""Cache dir does not exist > "" + cacheDirPath);
            }
            cacheDir = new File(cacheDir, CACHE_DIR_NAME);
            if (!cacheDir.exists()) {
                if (!cacheDir.mkdir()) {
                    if (BuildConfig.DEBUG) {
                        Log.e(TAG,
                                ""Failed to create cache directory "" + cacheDir.getAbsolutePath());
                    }
                    return null;
                }
            }

            final File file = new File(cacheDir, prefixFileName
                    + (TextUtils.isEmpty(suffixFileName) ? "".cache"" : suffixFileName));
            if (file.exists() && file.length() > 0) {
                // If the file already exists, just return it
                return new SavedState(prefixFileName, file.getAbsolutePath());
            } else {
                // Delete any file that contains the prefix
                final File[] files = cacheDir.listFiles((dir, name) ->
                        name.contains(prefixFileName));
                for (final File fileToDelete : files) {
                    fileToDelete.delete();
                }
            }

            try (FileOutputStream fileOutputStream = new FileOutputStream(file);
                 ObjectOutputStream outputStream = new ObjectOutputStream(fileOutputStream)) {
                outputStream.writeObject(savedObjects);
            }

            return new SavedState(prefixFileName, file.getAbsolutePath());
        } catch (final Exception e) {
            Log.e(TAG, ""Failed to save state"", e);
        }
        return null;
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,onDestroy,void onDestroy(SavedState),"[273, 286]","{'A301': [(277, 277), (280, 281), (284, 286)], 'A294': [(273, 276), (279, 279), (283, 283)], 'A324': [(282, 282)], 'A295': [(278, 278)]}","{'A301': 0.42857142857142855, 'A294': 0.42857142857142855, 'A324': 0.07142857142857142, 'A295': 0.07142857142857142}",A301,,"    public static void onDestroy(final SavedState savedState) {
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""onDestroy() called with: savedState = ["" + savedState + ""]"");
        }

        if (savedState != null && !savedState.getPathFileSaved().isEmpty()) {
            STATE_OBJECTS_HOLDER.remove(savedState.getPrefixFileSaved());
            try {
                //noinspection ResultOfMethodCallIgnored
                new File(savedState.getPathFileSaved()).delete();
            } catch (final Exception ignored) {
            }
        }
    }
"
org.schabi.newpipe.util,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/util/StateSaver.java,StateSaver,clearStateFiles,void clearStateFiles(),"[291, 311]","{'A301': [(291, 291), (295, 295), (297, 297), (301, 303), (310, 311)], 'A294': [(292, 294), (296, 296), (298, 300), (309, 309)], 'A447': [(304, 308)]}","{'A301': 0.38095238095238093, 'A294': 0.38095238095238093, 'A447': 0.23809523809523808}",A301,,"    public static void clearStateFiles() {
        if (MainActivity.DEBUG) {
            Log.d(TAG, ""clearStateFiles() called"");
        }

        STATE_OBJECTS_HOLDER.clear();
        File cacheDir = new File(cacheDirPath);
        if (!cacheDir.exists()) {
            return;
        }

        cacheDir = new File(cacheDir, CACHE_DIR_NAME);
        if (cacheDir.exists()) {
            final File[] list = cacheDir.listFiles();
            if (list != null) {
                for (final File file : list) {
                    file.delete();
                }
            }
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/NewPipeDatabase.java,NewPipeDatabase,getDatabase,AppDatabase getDatabase(Context),"[28, 34]","{'A352': [(31, 31)], 'A305': [(32, 32)], 'A301': [(29, 30), (34, 34)], 'A294': [(28, 28)], 'A310': [(33, 33)]}","{'A352': 0.14285714285714285, 'A305': 0.14285714285714285, 'A301': 0.42857142857142855, 'A294': 0.14285714285714285, 'A310': 0.14285714285714285}",A301,,"    private static AppDatabase getDatabase(final Context context) {
        return Room
                .databaseBuilder(context.getApplicationContext(), AppDatabase.class, DATABASE_NAME)
                .addMigrations(MIGRATION_1_2, MIGRATION_2_3, MIGRATION_3_4, MIGRATION_4_5,
                        MIGRATION_5_6, MIGRATION_6_7, MIGRATION_7_8, MIGRATION_8_9)
                .build();
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/NewPipeDatabase.java,NewPipeDatabase,getInstance,AppDatabase getInstance(Context),"[36, 50]","{'A338': [(36, 36)], 'A301': [(38, 42), (45, 49)], 'A294': [(37, 37), (43, 44)], 'A310': [(50, 50)]}","{'A338': 0.06666666666666667, 'A301': 0.6666666666666666, 'A294': 0.2, 'A310': 0.06666666666666667}",A301,,"    @NonNull
    public static AppDatabase getInstance(@NonNull final Context context) {
        AppDatabase result = databaseInstance;
        if (result == null) {
            synchronized (NewPipeDatabase.class) {
                result = databaseInstance;
                if (result == null) {
                    databaseInstance = getDatabase(context);
                    result = databaseInstance;
                }
            }
        }

        return result;
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/NewPipeDatabase.java,NewPipeDatabase,checkpoint,void checkpoint(),"[52, 60]","{'A291': [(52, 52), (54, 55), (58, 60)], 'A294': [(56, 56)], 'A382': [(53, 53), (57, 57)]}","{'A291': 0.6666666666666666, 'A294': 0.1111111111111111, 'A382': 0.2222222222222222}",A291,,"    public static void checkpoint() {
        if (databaseInstance == null) {
            throw new IllegalStateException(""database is not initialized"");
        }
        final Cursor c = databaseInstance.query(""pragma wal_checkpoint(full)"", null);
        if (c.moveToFirst() && c.getInt(0) == 1) {
            throw new RuntimeException(""Checkpoint was blocked from completing"");
        }
    }
"
org.schabi.newpipe,../projects/NewPipe/app/src/main/java/org/schabi/newpipe/NewPipeDatabase.java,NewPipeDatabase,close,void close(),"[62, 71]","{'A298': [(62, 71)]}",{'A298': 1.0},A298,,"    public static void close() {
        if (databaseInstance != null) {
            synchronized (NewPipeDatabase.class) {
                if (databaseInstance != null) {
                    databaseInstance.close();
                    databaseInstance = null;
                }
            }
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,run,void run(),"[43, 67]","{'A298': [(43, 67)]}",{'A298': 1.0},A298,,"    @Override
    public void run() {
        if (mMission.source == null) {
            mMission.notifyError(mErrCode, null);
            return;
        }

        Exception err = null;
        int attempt = 0;

        while (attempt++ < mMission.maxRetry) {
            try {
                tryRecover();
                return;
            } catch (InterruptedIOException | ClosedByInterruptException e) {
                return;
            } catch (Exception e) {
                if (!mMission.running || super.isInterrupted()) return;
                err = e;
            }
        }

        // give up
        mMission.notifyError(mErrCode, err);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,tryRecover,void tryRecover(),"[69, 122]","{'A298': [(69, 122)]}",{'A298': 1.0},A298,,"    private void tryRecover() throws ExtractionException, IOException, HttpError {
        if (mExtractor == null) {
            try {
                StreamingService svr = NewPipe.getServiceByUrl(mMission.source);
                mExtractor = svr.getStreamExtractor(mMission.source);
                mExtractor.fetchPage();
            } catch (ExtractionException e) {
                mExtractor = null;
                throw e;
            }
        }

        // maybe the following check is redundant
        if (!mMission.running || super.isInterrupted()) return;

        if (!mNotInitialized) {
            // set the current download url to null in case if the recovery
            // process is canceled. Next time start() method is called the
            // recovery will be executed, saving time
            mMission.urls[mMission.current] = null;

            mRecovery = mMission.recoveryInfo[mMission.current];
            resolveStream();
            return;
        }

        Log.w(TAG, ""mission is not fully initialized, this will take a while"");

        try {
            for (; mMission.current < mMission.urls.length; mMission.current++) {
                mRecovery = mMission.recoveryInfo[mMission.current];

                if (test()) continue;
                if (!mMission.running) return;

                resolveStream();
                if (!mMission.running) return;

                // before continue, check if the current stream was resolved
                if (mMission.urls[mMission.current] == null) {
                    break;
                }
            }
        } finally {
            mMission.current = 0;
        }

        mMission.writeThisToFile();

        if (!mMission.running || super.isInterrupted()) return;

        mMission.running = false;
        mMission.start();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,resolveStream,void resolveStream(),"[124, 176]","{'A298': [(124, 134), (140, 144), (146, 149), (155, 159), (162, 162), (167, 176)], 'A333': [(135, 139), (145, 145), (150, 154), (160, 161), (163, 166)]}","{'A298': 0.6792452830188679, 'A333': 0.32075471698113206}",A298,,"    private void resolveStream() throws IOException, ExtractionException, HttpError {
        // FIXME: this getErrorMessage() always returns ""video is unavailable""
        /*if (mExtractor.getErrorMessage() != null) {
            mMission.notifyError(mErrCode, new ExtractionException(mExtractor.getErrorMessage()));
            return;
        }*/

        String url = null;

        switch (mRecovery.getKind()) {
            case 'a':
                for (final AudioStream audio : mExtractor.getAudioStreams()) {
                    if (audio.getAverageBitrate() == mRecovery.getDesiredBitrate()
                            && audio.getFormat() == mRecovery.getFormat()
                            && audio.getDeliveryMethod() == DeliveryMethod.PROGRESSIVE_HTTP) {
                        url = audio.getContent();
                        break;
                    }
                }
                break;
            case 'v':
                final List<VideoStream> videoStreams;
                if (mRecovery.isDesired2())
                    videoStreams = mExtractor.getVideoOnlyStreams();
                else
                    videoStreams = mExtractor.getVideoStreams();
                for (final VideoStream video : videoStreams) {
                    if (video.getResolution().equals(mRecovery.getDesired())
                            && video.getFormat() == mRecovery.getFormat()
                            && video.getDeliveryMethod() == DeliveryMethod.PROGRESSIVE_HTTP) {
                        url = video.getContent();
                        break;
                    }
                }
                break;
            case 's':
                for (final SubtitlesStream subtitles : mExtractor.getSubtitles(mRecovery
                        .getFormat())) {
                    String tag = subtitles.getLanguageTag();
                    if (tag.equals(mRecovery.getDesired())
                            && subtitles.isAutoGenerated() == mRecovery.isDesired2()
                            && subtitles.getDeliveryMethod() == DeliveryMethod.PROGRESSIVE_HTTP) {
                        url = subtitles.getContent();
                        break;
                    }
                }
                break;
            default:
                throw new RuntimeException(""Unknown stream type"");
        }

        resolve(url);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,resolve,void resolve(String),"[178, 217]","{'A298': [(178, 217)]}",{'A298': 1.0},A298,,"    private void resolve(String url) throws IOException, HttpError {
        if (mRecovery.getValidateCondition() == null) {
            Log.w(TAG, ""validation condition not defined, the resource can be stale"");
        }

        if (mMission.unknownLength || mRecovery.getValidateCondition() == null) {
            recover(url, false);
            return;
        }

        ///////////////////////////////////////////////////////////////////////
        ////// Validate the http resource doing a range request
        /////////////////////
        try {
            mConn = mMission.openConnection(url, true, mMission.length - 10, mMission.length);
            mConn.setRequestProperty(""If-Range"", mRecovery.getValidateCondition());
            mMission.establishConnection(mID, mConn);

            int code = mConn.getResponseCode();

            switch (code) {
                case 200:
                case 413:
                    // stale
                    recover(url, true);
                    return;
                case 206:
                    // in case of validation using the Last-Modified date, check the resource length
                    long[] contentRange = parseContentRange(mConn.getHeaderField(""Content-Range""));
                    boolean lengthMismatch = contentRange[2] != -1 && contentRange[2] != mMission.length;

                    recover(url, lengthMismatch);
                    return;
            }

            throw new HttpError(code);
        } finally {
            disconnect();
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,recover,"void recover(String,boolean)","[219, 244]","{'A298': [(219, 244)]}",{'A298': 1.0},A298,,"    private void recover(String url, boolean stale) {
        Log.i(TAG,
                String.format(""recover()  name=%s  isStale=%s  url=%s"", mMission.storage.getName(), stale, url)
        );

        mMission.urls[mMission.current] = url;

        if (url == null) {
            mMission.urls = new String[0];
            mMission.notifyError(ERROR_RESOURCE_GONE, null);
            return;
        }

        if (mNotInitialized) return;

        if (stale) {
            mMission.resetState(false, false, DownloadMission.ERROR_NOTHING);
        }

        mMission.writeThisToFile();

        if (!mMission.running || super.isInterrupted()) return;

        mMission.running = false;
        mMission.start();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,parseContentRange,long[] parseContentRange(String),"[246, 283]","{'A298': [(246, 283)]}",{'A298': 1.0},A298,,"    private long[] parseContentRange(String value) {
        long[] range = new long[3];

        if (value == null) {
            // this never should happen
            return range;
        }

        try {
            value = value.trim();

            if (!value.startsWith(""bytes"")) {
                return range;// unknown range type
            }

            int space = value.lastIndexOf(' ') + 1;
            int dash = value.indexOf('-', space) + 1;
            int bar = value.indexOf('/', dash);

            // start
            range[0] = Long.parseLong(value.substring(space, dash - 1));

            // end
            range[1] = Long.parseLong(value.substring(dash, bar));

            // resource length
            value = value.substring(bar + 1);
            if (value.equals(""*"")) {
                range[2] = -1;// unknown length received from the server but should be valid
            } else {
                range[2] = Long.parseLong(value);
            }
        } catch (Exception e) {
            // nothing to do
        }

        return range;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,test,boolean test(),"[285, 300]","{'A298': [(285, 300)]}",{'A298': 1.0},A298,,"    private boolean test() {
        if (mMission.urls[mMission.current] == null) return false;

        try {
            mConn = mMission.openConnection(mMission.urls[mMission.current], true, -1, -1);
            mMission.establishConnection(mID, mConn);

            if (mConn.getResponseCode() == 200) return true;
        } catch (Exception e) {
            // nothing to do
        } finally {
            disconnect();
        }

        return false;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,disconnect,void disconnect(),"[302, 314]","{'A298': [(302, 314)]}",{'A298': 1.0},A298,,"    private void disconnect() {
        try {
            try {
                mConn.getInputStream().close();
            } finally {
                mConn.disconnect();
            }
        } catch (Exception e) {
            // nothing to do
        } finally {
            mConn = null;
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMissionRecover.java,DownloadMissionRecover,interrupt,void interrupt(),"[316, 320]","{'A298': [(316, 320)]}",{'A298': 1.0},A298,,"    @Override
    public void interrupt() {
        super.interrupt();
        if (mConn != null) disconnect();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadInitializer.java,DownloadInitializer,dispose,void dispose(),"[34, 40]","{'A328': [(34, 40)]}",{'A328': 1.0},A328,,"    private void dispose() {
        try {
            mConn.getInputStream().close();
        } catch (Exception e) {
            // nothing to do
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadInitializer.java,DownloadInitializer,run,void run(),"[42, 201]","{'A328': [(42, 56), (58, 61), (63, 86), (88, 93), (95, 149), (154, 162), (164, 164), (166, 166), (168, 201)], 'A386': [(57, 57), (62, 62), (87, 87), (94, 94)], 'A295': [(150, 153), (163, 163), (165, 165), (167, 167)]}","{'A328': 0.93125, 'A386': 0.025, 'A295': 0.04375}",A328,,"    @Override
    public void run() {
        if (mMission.current > 0) mMission.resetState(false, true, DownloadMission.ERROR_NOTHING);

        int retryCount = 0;
        int httpCode = 204;

        while (true) {
            try {
                if (mMission.blocks == null && mMission.current == 0) {
                    // calculate the whole size of the mission
                    long finalLength = 0;
                    long lowestSize = Long.MAX_VALUE;

                    for (int i = 0; i < mMission.urls.length && mMission.running; i++) {
                        mConn = mMission.openConnection(mMission.urls[i], true, 0, 0);
                        mMission.establishConnection(mId, mConn);
                        dispose();

                        if (Thread.interrupted()) return;
                        long length = Utility.getTotalContentLength(mConn);

                        if (i == 0) {
                            httpCode = mConn.getResponseCode();
                            mMission.length = length;
                        }

                        if (length > 0) finalLength += length;
                        if (length < lowestSize) lowestSize = length;
                    }

                    mMission.nearLength = finalLength;

                    // reserve space at the start of the file
                    if (mMission.psAlgorithm != null && mMission.psAlgorithm.reserveSpace) {
                        if (lowestSize < 1) {
                            // the length is unknown use the default size
                            mMission.offsets[0] = RESERVE_SPACE_DEFAULT;
                        } else {
                            // use the smallest resource size to download, otherwise, use the maximum
                            mMission.offsets[0] = lowestSize < RESERVE_SPACE_MAXIMUM ? lowestSize : RESERVE_SPACE_MAXIMUM;
                        }
                    }
                } else {
                    // ask for the current resource length
                    mConn = mMission.openConnection(true, 0, 0);
                    mMission.establishConnection(mId, mConn);
                    dispose();

                    if (!mMission.running || Thread.interrupted()) return;

                    httpCode = mConn.getResponseCode();
                    mMission.length = Utility.getTotalContentLength(mConn);
                }

                if (mMission.length == 0 || httpCode == 204) {
                    mMission.notifyError(DownloadMission.ERROR_HTTP_NO_CONTENT, null);
                    return;
                }

                // check for dynamic generated content
                if (mMission.length == -1 && mConn.getResponseCode() == 200) {
                    mMission.blocks = new int[0];
                    mMission.length = 0;
                    mMission.unknownLength = true;

                    if (DEBUG) {
                        Log.d(TAG, ""falling back (unknown length)"");
                    }
                } else {
                    // Open again
                    mConn = mMission.openConnection(true, mMission.length - 10, mMission.length);
                    mMission.establishConnection(mId, mConn);
                    dispose();

                    if (!mMission.running || Thread.interrupted()) return;

                    synchronized (mMission.LOCK) {
                        if (mConn.getResponseCode() == 206) {

                            if (mMission.threadCount > 1) {
                                int count = (int) (mMission.length / DownloadMission.BLOCK_SIZE);
                                if ((count * DownloadMission.BLOCK_SIZE) < mMission.length) count++;

                                mMission.blocks = new int[count];
                            } else {
                                // if one thread is required don't calculate blocks, is useless
                                mMission.blocks = new int[0];
                                mMission.unknownLength = false;
                            }

                            if (DEBUG) {
                                Log.d(TAG, ""http response code = "" + mConn.getResponseCode());
                            }
                        } else {
                            // Fallback to single thread
                            mMission.blocks = new int[0];
                            mMission.unknownLength = false;

                            if (DEBUG) {
                                Log.d(TAG, ""falling back due http response code = "" + mConn.getResponseCode());
                            }
                        }
                    }

                    if (!mMission.running || Thread.interrupted()) return;
                }

                try (SharpStream fs = mMission.storage.getStream()) {
                    fs.setLength(mMission.offsets[mMission.current] + mMission.length);
                    fs.seek(mMission.offsets[mMission.current]);
                }

                if (!mMission.running || Thread.interrupted()) return;

                if (!mMission.unknownLength && mMission.recoveryInfo != null) {
                    String entityTag = mConn.getHeaderField(""ETAG"");
                    String lastModified = mConn.getHeaderField(""Last-Modified"");
                    MissionRecoveryInfo recovery = mMission.recoveryInfo[mMission.current];

                    if (!TextUtils.isEmpty(entityTag)) {
                        recovery.setValidateCondition(entityTag);
                    } else if (!TextUtils.isEmpty(lastModified)) {
                        recovery.setValidateCondition(lastModified);// Note: this is less precise
                    } else {
                        recovery.setValidateCondition(null);
                    }
                }

                mMission.running = false;
                break;
            } catch (InterruptedIOException | ClosedByInterruptException e) {
                return;
            } catch (Exception e) {
                if (!mMission.running || super.isInterrupted()) return;

                if (e instanceof DownloadMission.HttpError && ((DownloadMission.HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {
                    // for youtube streams. The url has expired
                    interrupt();
                    mMission.doRecover(ERROR_HTTP_FORBIDDEN);
                    return;
                }

                if (e instanceof IOException && e.getMessage().contains(""Permission denied"")) {
                    mMission.notifyError(DownloadMission.ERROR_PERMISSION_DENIED, e);
                    return;
                }

                if (retryCount++ > mMission.maxRetry) {
                    Log.e(TAG, ""initializer failed"", e);
                    mMission.notifyError(e);
                    return;
                }

                Log.e(TAG, ""initializer failed, retrying"", e);
            }
        }

        mMission.start();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadInitializer.java,DownloadInitializer,interrupt,void interrupt(),"[203, 207]","{'A328': [(203, 207)]}",{'A328': 1.0},A328,,"    @Override
    public void interrupt() {
        super.interrupt();
        if (mConn != null) dispose();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadRunnable.java,DownloadRunnable,releaseBlock,"void releaseBlock(Block,long)","[37, 40]","{'A328': [(37, 40)]}",{'A328': 1.0},A328,,"    private void releaseBlock(Block block, long remain) {
        // set the block offset to -1 if it is completed
        mMission.releaseBlock(block.position, remain < 0 ? -1 : block.done);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadRunnable.java,DownloadRunnable,run,void run(),"[42, 171]","{'A328': [(44, 58), (61, 62), (67, 70), (73, 74), (76, 77), (83, 98), (100, 103), (105, 105), (107, 107), (111, 124), (128, 128), (131, 147), (149, 151), (155, 161), (165, 165), (167, 167)], 'A324': [(42, 43), (59, 60), (63, 66), (71, 72), (75, 75), (78, 82), (99, 99), (104, 104), (106, 106), (108, 110), (125, 127), (129, 130), (148, 148), (152, 154), (162, 164), (166, 166), (168, 171)]}","{'A328': 0.7, 'A324': 0.3}",A328,,"    @Override
    public void run() {
        boolean retry = false;
        Block block = null;
        int retryCount = 0;
        SharpStream f;

        try {
            f = mMission.storage.getStream();
        } catch (IOException e) {
            mMission.notifyError(e);// this never should happen
            return;
        }

        while (mMission.running && mMission.errCode == DownloadMission.ERROR_NOTHING) {
            if (!retry) {
                block = mMission.acquireBlock();
            }

            if (block == null) {
                if (DEBUG) Log.d(TAG, mId + "":no more blocks left, exiting"");
                break;
            }

            if (DEBUG) {
                if (retry)
                    Log.d(TAG, mId + "":retry block at position="" + block.position + "" from the start"");
                else
                    Log.d(TAG, mId + "":acquired block at position="" + block.position + "" done="" + block.done);
            }

            long start = (long)block.position * DownloadMission.BLOCK_SIZE;
            long end = start + DownloadMission.BLOCK_SIZE - 1;

            start += block.done;

            if (end >= mMission.length) {
                end = mMission.length - 1;
            }

            try {
                mConn = mMission.openConnection(false, start, end);
                mMission.establishConnection(mId, mConn);

                // check if the download can be resumed
                if (mConn.getResponseCode() == 416) {
                    if (block.done > 0) {
                        // try again from the start (of the block)
                        mMission.notifyProgress(-block.done);
                        block.done = 0;
                        retry = true;
                        mConn.disconnect();
                        continue;
                    }

                    throw new DownloadMission.HttpError(416);
                }

                retry = false;

                // The server may be ignoring the range request
                if (mConn.getResponseCode() != 206) {
                    if (DEBUG) {
                        Log.e(TAG, mId + "":Unsupported "" + mConn.getResponseCode());
                    }
                    mMission.notifyError(new DownloadMission.HttpError(mConn.getResponseCode()));
                    break;
                }

                f.seek(mMission.offsets[mMission.current] + start);

                try (InputStream is = mConn.getInputStream()) {
                    byte[] buf = new byte[DownloadMission.BUFFER_SIZE];
                    int len;

                    // use always start <= end
                    // fixes a deadlock because in some videos, youtube is sending one byte alone
                    while (start <= end && mMission.running && (len = is.read(buf, 0, buf.length)) != -1) {
                        f.write(buf, 0, len);
                        start += len;
                        block.done += len;
                        mMission.notifyProgress(len);
                    }
                }

                if (DEBUG && mMission.running) {
                    Log.d(TAG, mId + "":position "" + block.position + "" stopped "" + start + ""/"" + end);
                }
            } catch (Exception e) {
                if (!mMission.running || e instanceof ClosedByInterruptException) break;

                if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {
                    // for youtube streams. The url has expired, recover
                    f.close();

                    if (mId == 1) {
                        // only the first thread will execute the recovery procedure
                        mMission.doRecover(ERROR_HTTP_FORBIDDEN);
                    }
                    return;
                }

                if (retryCount++ >= mMission.maxRetry) {
                    mMission.notifyError(e);
                    break;
                }

                retry = true;
            } finally {
                if (!retry) releaseBlock(block, end - start);
            }
        }

        f.close();

        if (DEBUG) {
            Log.d(TAG, ""thread "" + mId + "" exited from main download loop"");
        }

        if (mMission.errCode == DownloadMission.ERROR_NOTHING && mMission.running) {
            if (DEBUG) {
                Log.d(TAG, ""no error has happened, notifying"");
            }
            mMission.notifyFinished();
        }

        if (DEBUG && !mMission.running) {
            Log.d(TAG, ""The mission has been paused. Passing."");
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadRunnable.java,DownloadRunnable,interrupt,void interrupt(),"[173, 182]","{'A328': [(173, 182)]}",{'A328': 1.0},A328,,"    @Override
    public void interrupt() {
        super.interrupt();

        try {
            if (mConn != null) mConn.disconnect();
        } catch (Exception e) {
            // nothing to do
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/Mission.java,Mission,getTimestamp,long getTimestamp(),"[28, 30]","{'A294': [(28, 30)]}",{'A294': 1.0},A294,,"    public long getTimestamp() {
        return timestamp;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/Mission.java,Mission,delete,boolean delete(),"[47, 50]","{'A298': [(47, 50)]}",{'A298': 1.0},A298,,"    public boolean delete() {
        if (storage != null) return storage.delete();
        return true;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/Mission.java,Mission,toString,String toString(),"[57, 63]","{'A298': [(57, 59), (61, 63)], 'A294': [(60, 60)]}","{'A298': 0.8571428571428571, 'A294': 0.14285714285714285}",A298,,"    @NonNull
    @Override
    public String toString() {
        final Calendar calendar = Calendar.getInstance();
        calendar.setTimeInMillis(timestamp);
        return ""["" + calendar.getTime().toString() + ""] "" + (storage.isInvalid() ? storage.getName() : storage.getUri());
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,acquireBlock,Block acquireBlock(),"[177, 193]","{'A328': [(177, 189), (192, 192)], 'A324': [(190, 191), (193, 193)]}","{'A328': 0.8235294117647058, 'A324': 0.17647058823529413}",A328,,"    @Nullable
    Block acquireBlock() {
        synchronized (LOCK) {
            for (int i = 0; i < blockAcquired.length; i++) {
                if (!blockAcquired[i] && blocks[i] >= 0) {
                    Block block = new Block();
                    block.position = i;
                    block.done = blocks[i];

                    blockAcquired[i] = true;
                    return block;
                }
            }
        }

        return null;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,releaseBlock,"void releaseBlock(int,int)","[201, 206]","{'A328': [(201, 206)]}",{'A328': 1.0},A328,,"    void releaseBlock(int position, int done) {
        synchronized (LOCK) {
            blockAcquired[position] = false;
            blocks[position] = done;
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,openConnection,"HttpURLConnection openConnection(boolean,long,long)","[217, 219]","{'A328': [(217, 219)]}",{'A328': 1.0},A328,,"    HttpURLConnection openConnection(boolean headRequest, long rangeStart, long rangeEnd) throws IOException {
        return openConnection(urls[current], headRequest, rangeStart, rangeEnd);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,openConnection,"HttpURLConnection openConnection(String,boolean,long,long)","[221, 241]","{'A328': [(221, 223), (225, 225), (227, 241)], 'A301': [(224, 224)], 'A404': [(226, 226)]}","{'A328': 0.9047619047619048, 'A301': 0.047619047619047616, 'A404': 0.047619047619047616}",A328,,"    HttpURLConnection openConnection(String url, boolean headRequest, long rangeStart, long rangeEnd) throws IOException {
        HttpURLConnection conn = (HttpURLConnection) new URL(url).openConnection();
        conn.setInstanceFollowRedirects(true);
        conn.setRequestProperty(""User-Agent"", DownloaderImpl.USER_AGENT);
        conn.setRequestProperty(""Accept"", ""*/*"");
        conn.setRequestProperty(""Accept-Encoding"", ""*"");

        if (headRequest) conn.setRequestMethod(""HEAD"");

        // BUG workaround: switching between networks can freeze the download forever
        conn.setConnectTimeout(30000);

        if (rangeStart >= 0) {
            String req = ""bytes="" + rangeStart + ""-"";
            if (rangeEnd > 0) req += rangeEnd;

            conn.setRequestProperty(""Range"", req);
        }

        return conn;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,establishConnection,"void establishConnection(int,HttpURLConnection)","[249, 273]","{'A328': [(249, 273)]}",{'A328': 1.0},A328,,"    void establishConnection(int threadId, HttpURLConnection conn) throws IOException, HttpError {
        int statusCode = conn.getResponseCode();

        if (DEBUG) {
            Log.d(TAG, threadId + "":[request]  Range="" + conn.getRequestProperty(""Range""));
            Log.d(TAG, threadId + "":[response] Code="" + statusCode);
            Log.d(TAG, threadId + "":[response] Content-Length="" + conn.getContentLength());
            Log.d(TAG, threadId + "":[response] Content-Range="" + conn.getHeaderField(""Content-Range""));
        }


        switch (statusCode) {
            case 204:
            case 205:
            case 207:
                throw new HttpError(statusCode);
            case 416:
                return;// let the download thread handle this error
            default:
                if (statusCode < 200 || statusCode > 299) {
                    throw new HttpError(statusCode);
                }
        }

    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,notify,void notify(int),"[276, 278]","{'A328': [(276, 278)]}",{'A328': 1.0},A328,,"    private void notify(int what) {
        mHandler.obtainMessage(what, this).sendToTarget();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,notifyProgress,void notifyProgress(long),"[280, 294]","{'A328': [(280, 284), (287, 287), (289, 292)], 'A324': [(285, 286), (288, 288), (293, 294)]}","{'A328': 0.6666666666666666, 'A324': 0.3333333333333333}",A328,,"    synchronized void notifyProgress(long deltaLen) {
        if (unknownLength) {
            length += deltaLen;// Update length before proceeding
        }

        done += deltaLen;

        if (metadata == null) return;

        if (!writingToFile && (done > writingToFileNext || deltaLen < 0)) {
            writingToFile = true;
            writingToFileNext = done + BLOCK_SIZE;
            writeThisToFileAsync();
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,notifyError,void notifyError(Exception),"[296, 314]","{'A328': [(296, 312)], 'A324': [(313, 314)]}","{'A328': 0.8947368421052632, 'A324': 0.10526315789473684}",A328,,"    synchronized void notifyError(Exception err) {
        Log.e(TAG, ""notifyError()"", err);

        if (err instanceof FileNotFoundException) {
            notifyError(ERROR_FILE_CREATION, null);
        } else if (err instanceof SSLException) {
            notifyError(ERROR_SSL_EXCEPTION, null);
        } else if (err instanceof HttpError) {
            notifyError(((HttpError) err).statusCode, null);
        } else if (err instanceof ConnectException) {
            notifyError(ERROR_CONNECT_HOST, null);
        } else if (err instanceof UnknownHostException) {
            notifyError(ERROR_UNKNOWN_HOST, null);
        } else if (err instanceof SocketTimeoutException) {
            notifyError(ERROR_TIMEOUT, null);
        } else {
            notifyError(ERROR_UNKNOWN_EXCEPTION, err);
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,notifyError,"void notifyError(int,Exception)","[316, 361]","{'A328': [(316, 317), (326, 356), (358, 361)], 'A324': [(357, 357)], 'A300': [(318, 325)]}","{'A328': 0.8043478260869565, 'A324': 0.021739130434782608, 'A300': 0.17391304347826086}",A328,,"    public synchronized void notifyError(int code, Exception err) {
        Log.e(TAG, ""notifyError() code = "" + code, err);
        if (err != null && err.getCause() instanceof ErrnoException) {
            int errno = ((ErrnoException) err.getCause()).errno;
            if (errno == OsConstants.ENOSPC) {
                code = ERROR_INSUFFICIENT_STORAGE;
                err = null;
            } else if (errno == OsConstants.EACCES) {
                code = ERROR_PERMISSION_DENIED;
                err = null;
            }
        }

        if (err instanceof IOException) {
            if (err.getMessage().contains(""Permission denied"")) {
                code = ERROR_PERMISSION_DENIED;
                err = null;
            } else if (err.getMessage().contains(""ENOSPC"")) {
                code = ERROR_INSUFFICIENT_STORAGE;
                err = null;
            } else if (!storage.canWrite()) {
                code = ERROR_FILE_CREATION;
                err = null;
            }
        }

        errCode = code;
        errObject = err;

        switch (code) {
            case ERROR_SSL_EXCEPTION:
            case ERROR_UNKNOWN_HOST:
            case ERROR_CONNECT_HOST:
            case ERROR_TIMEOUT:
                // do not change the queue flag for network errors, can be
                // recovered silently without the user interaction
                break;
            default:
                // also checks for server errors
                if (code < 500 || code > 599) enqueued = false;
        }

        notify(DownloadManagerService.MESSAGE_ERROR);

        if (running) pauseThreads();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,notifyFinished,void notifyFinished(),"[363, 396]","{'A328': [(363, 376), (378, 378), (380, 385), (388, 395)], 'A324': [(377, 377), (379, 379), (386, 387), (396, 396)]}","{'A328': 0.8529411764705882, 'A324': 0.14705882352941177}",A328,,"    synchronized void notifyFinished() {
        if (current < urls.length) {
            if (++finishCount < threads.length) return;

            if (DEBUG) {
                Log.d(TAG, ""onFinish: downloaded "" + (current + 1) + ""/"" + urls.length);
            }

            current++;
            if (current < urls.length) {
                // prepare next sub-mission
                offsets[current] = offsets[current - 1] + length;
                initializer();
                return;
            }
        }

        if (psAlgorithm != null && psState == 0) {
            threads = new Thread[]{
                    runAsync(1, this::doPostprocessing)
            };
            return;
        }


        // this mission is fully finished

        unknownLength = false;
        enqueued = false;
        running = false;

        deleteThisFromFile();
        notify(DownloadManagerService.MESSAGE_FINISHED);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,notifyPostProcessing,void notifyPostProcessing(int),"[398, 423]","{'A328': [(398, 409), (411, 421)], 'A324': [(410, 410), (422, 423)]}","{'A328': 0.8846153846153846, 'A324': 0.11538461538461539}",A328,,"    private void notifyPostProcessing(int state) {
        String action;
        switch (state) {
            case 1:
                action = ""Running"";
                break;
            case 2:
                action = ""Completed"";
                break;
            default:
                action = ""Failed"";
        }

        Log.d(TAG, action + "" postprocessing on "" + storage.getName());

        if (state == 2) {
            psState = state;
            return;
        }

        synchronized (LOCK) {
            // don't return without fully write the current state
            psState = state;
            writeThisToFile();
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,start,void start(),"[429, 481]","{'A328': [(430, 458), (460, 478)], 'A324': [(429, 429), (459, 459), (479, 481)]}","{'A328': 0.9056603773584906, 'A324': 0.09433962264150944}",A328,,"    public void start() {
        if (running || isFinished() || urls.length < 1) return;

        // ensure that the previous state is completely paused.
        joinForThreads(10000);

        running = true;
        errCode = ERROR_NOTHING;

        if (hasInvalidStorage()) {
            notifyError(ERROR_FILE_CREATION, null);
            return;
        }

        if (current >= urls.length) {
            notifyFinished();
            return;
        }

        notify(DownloadManagerService.MESSAGE_RUNNING);

        if (urls[current] == null) {
            doRecover(ERROR_RESOURCE_GONE);
            return;
        }

        if (blocks == null) {
            initializer();
            return;
        }

        init = null;
        finishCount = 0;
        blockAcquired = new boolean[blocks.length];

        if (blocks.length < 1) {
            threads = new Thread[]{runAsync(1, new DownloadRunnableFallback(this))};
        } else {
            int remainingBlocks = 0;
            for (int block : blocks) if (block >= 0) remainingBlocks++;

            if (remainingBlocks < 1) {
                notifyFinished();
                return;
            }

            threads = new Thread[Math.min(threadCount, remainingBlocks)];

            for (int i = 0; i < threads.length; i++) {
                threads[i] = runAsync(i + 1, new DownloadRunnable(this, i));
            }
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,pause,void pause(),"[486, 514]","{'A328': [(486, 510), (512, 514)], 'A324': [(511, 511)]}","{'A328': 0.9655172413793104, 'A324': 0.034482758620689655}",A328,,"    public void pause() {
        if (!running) return;

        if (isPsRunning()) {
            if (DEBUG) {
                Log.w(TAG, ""pause during post-processing is not applicable."");
            }
            return;
        }

        running = false;
        notify(DownloadManagerService.MESSAGE_PAUSED);

        if (init != null && init.isAlive()) {
            // NOTE: if start() method is running ¡will no have effect!
            init.interrupt();
            synchronized (LOCK) {
                resetState(false, true, ERROR_NOTHING);
            }
            return;
        }

        if (DEBUG && unknownLength) {
            Log.w(TAG, ""pausing a download that can not be resumed (range requests not allowed by the server)."");
        }

        init = null;
        pauseThreads();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,pauseThreads,void pauseThreads(),"[516, 520]","{'A328': [(516, 519)], 'A324': [(520, 520)]}","{'A328': 0.8, 'A324': 0.2}",A328,,"    private void pauseThreads() {
        running = false;
        joinForThreads(-1);
        writeThisToFile();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,delete,boolean delete(),"[525, 535]","{'A328': [(525, 535)]}",{'A328': 1.0},A328,,"    @Override
    public boolean delete() {
        if (psAlgorithm != null) psAlgorithm.cleanupTemporalDir();

        notify(DownloadManagerService.MESSAGE_DELETED);

        boolean res = deleteThisFromFile();

        if (!super.delete()) return false;
        return res;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,resetState,"void resetState(boolean,boolean,int)","[544, 556]","{'A328': [(544, 556)]}",{'A328': 1.0},A328,,"    public void resetState(boolean rollback, boolean persistChanges, int errorCode) {
        length = 0;
        errCode = errorCode;
        errObject = null;
        unknownLength = false;
        threads = new Thread[0];
        fallbackResumeOffset = 0;
        blocks = null;
        blockAcquired = null;

        if (rollback) current = 0;
        if (persistChanges) writeThisToFile();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,initializer,void initializer(),"[558, 560]","{'A328': [(558, 559)], 'A324': [(560, 560)]}","{'A328': 0.6666666666666666, 'A324': 0.3333333333333333}",A328,,"    private void initializer() {
        init = runAsync(DownloadInitializer.mId, new DownloadInitializer(this));
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,writeThisToFileAsync,void writeThisToFileAsync(),"[562, 564]","{'A328': [(562, 564)]}",{'A328': 1.0},A328,,"    private void writeThisToFileAsync() {
        runAsync(-2, this::writeThisToFile);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,writeThisToFile,void writeThisToFile(),"[570, 576]","{'A328': [(570, 574)], 'A324': [(575, 576)]}","{'A328': 0.7142857142857143, 'A324': 0.2857142857142857}",A328,,"    void writeThisToFile() {
        synchronized (LOCK) {
            if (metadata == null) return;
            Utility.writeToFile(metadata, this);
            writingToFile = false;
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,isFinished,boolean isFinished(),"[583, 585]","{'A328': [(583, 585)]}",{'A328': 1.0},A328,,"    public boolean isFinished() {
        return current >= urls.length && (psAlgorithm == null || psState == 2);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,isPsFailed,boolean isPsFailed(),"[592, 600]","{'A328': [(592, 600)]}",{'A328': 1.0},A328,,"    public boolean isPsFailed() {
        switch (errCode) {
            case ERROR_POSTPROCESSING:
            case ERROR_POSTPROCESSING_STOPPED:
                return psAlgorithm.worksOnSameFile;
        }

        return false;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,isPsRunning,boolean isPsRunning(),"[607, 609]","{'A328': [(607, 609)]}",{'A328': 1.0},A328,,"    public boolean isPsRunning() {
        return psAlgorithm != null && (psState == 1 || psState == 3);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,isInitialized,boolean isInitialized(),"[616, 618]","{'A328': [(616, 617)], 'A324': [(618, 618)]}","{'A328': 0.6666666666666666, 'A324': 0.3333333333333333}",A328,,"    public boolean isInitialized() {
        return blocks != null; // DownloadMissionInitializer was executed
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,getLength,long getLength(),"[625, 635]","{'A328': [(625, 633), (635, 635)], 'A299': [(634, 634)]}","{'A328': 0.9090909090909091, 'A299': 0.09090909090909091}",A328,,"    public long getLength() {
        long calculated;
        if (psState == 1 || psState == 3) {
            return length;
        }

        calculated = offsets[current < offsets.length ? current : (offsets.length - 1)] + length;
        calculated -= offsets[0];// don't count reserved space

        return Math.max(calculated, nearLength);
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,setEnqueued,void setEnqueued(boolean),"[642, 645]","{'A328': [(642, 645)]}",{'A328': 1.0},A328,,"    public void setEnqueued(boolean queue) {
        enqueued = queue;
        writeThisToFileAsync();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,psContinue,void psContinue(boolean),"[652, 656]","{'A328': [(652, 656)]}",{'A328': 1.0},A328,,"    public void psContinue(boolean recover) {
        psState = 1;
        errCode = recover ? ERROR_NOTHING : ERROR_POSTPROCESSING;
        threads[0].interrupt();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,hasInvalidStorage,boolean hasInvalidStorage(),"[663, 665]","{'A328': [(663, 663), (665, 665)], 'A305': [(664, 664)]}","{'A328': 0.6666666666666666, 'A305': 0.3333333333333333}",A328,,"    public boolean hasInvalidStorage() {
        return errCode == ERROR_PROGRESS_LOST || storage == null || !storage.existsAsFile();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,isCorrupt,boolean isCorrupt(),"[672, 675]","{'A328': [(672, 675)]}",{'A328': 1.0},A328,,"    public boolean isCorrupt() {
        if (urls.length < 1) return false;
        return (isPsFailed() || errCode == ERROR_POSTPROCESSING_HOLD) || isFinished();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,isRecovering,boolean isRecovering(),"[682, 684]","{'A328': [(682, 684)]}",{'A328': 1.0},A328,,"    public boolean isRecovering() {
        return threads.length > 0 && threads[0] instanceof DownloadMissionRecover && threads[0].isAlive();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,doPostprocessing,void doPostprocessing(),"[686, 723]","{'A328': [(686, 722)], 'A448': [(723, 723)]}","{'A328': 0.9736842105263158, 'A448': 0.02631578947368421}",A328,,"    private void doPostprocessing() {
        errCode = ERROR_NOTHING;
        errObject = null;
        Thread thread = Thread.currentThread();

        notifyPostProcessing(1);

        if (DEBUG) {
            thread.setName(""["" + TAG + ""]  ps = "" + psAlgorithm + ""  filename = "" + storage.getName());
        }

        Exception exception = null;

        try {
            psAlgorithm.run(this);
        } catch (Exception err) {
            Log.e(TAG, ""Post-processing failed. "" + psAlgorithm.toString(), err);

            if (err instanceof InterruptedIOException || err instanceof ClosedByInterruptException || thread.isInterrupted()) {
                notifyError(DownloadMission.ERROR_POSTPROCESSING_STOPPED, null);
                return;
            }

            if (errCode == ERROR_NOTHING) errCode = ERROR_POSTPROCESSING;

            exception = err;
        } finally {
            notifyPostProcessing(errCode == ERROR_NOTHING ? 2 : 0);
        }

        if (errCode != ERROR_NOTHING) {
            if (exception == null) exception = errObject;
            notifyError(ERROR_POSTPROCESSING, exception);
            return;
        }

        notifyFinished();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,doRecover,void doRecover(int),"[730, 744]","{'A328': [(730, 744)]}",{'A328': 1.0},A328,,"    void doRecover(int errorCode) {
        Log.i(TAG, ""Attempting to recover the mission: "" + storage.getName());

        if (recoveryInfo == null) {
            notifyError(errorCode, null);
            urls = new String[0];// mark this mission as dead
            return;
        }

        joinForThreads(0);

        threads = new Thread[]{
                runAsync(DownloadMissionRecover.mID, new DownloadMissionRecover(this, errorCode))
        };
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,deleteThisFromFile,boolean deleteThisFromFile(),"[746, 752]","{'A328': [(746, 751)], 'A324': [(752, 752)]}","{'A328': 0.8571428571428571, 'A324': 0.14285714285714285}",A328,,"    private boolean deleteThisFromFile() {
        synchronized (LOCK) {
            boolean res = metadata.delete();
            metadata = null;
            return res;
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,runAsync,"Thread runAsync(int,Runnable)","[760, 762]","{'A328': [(760, 762)]}",{'A328': 1.0},A328,,"    private Thread runAsync(int id, Runnable who) {
        return runAsync(id, new Thread(who));
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,runAsync,"Thread runAsync(int,Thread)","[771, 785]","{'A328': [(771, 780), (782, 784)], 'A324': [(781, 781), (785, 785)]}","{'A328': 0.8666666666666667, 'A324': 0.13333333333333333}",A328,,"    private Thread runAsync(int id, Thread who) {
        // known thread ids:
        //   -2:     state saving by  notifyProgress()  method
        //   -1:     wait for saving the state by  pause()  method
        //    0:     initializer
        //  >=1:     any download thread

        if (DEBUG) {
            who.setName(String.format(""%s[%s] %s"", TAG, id, storage.getName()));
        }

        who.start();

        return who;
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission,joinForThreads,void joinForThreads(int),"[792, 829]","{'A328': [(792, 829)]}",{'A328': 1.0},A328,,"    private void joinForThreads(int millis) {
        final Thread currentThread = Thread.currentThread();

        if (init != null && init != currentThread && init.isAlive()) {
            init.interrupt();

            if (millis > 0) {
                try {
                    init.join(millis);
                } catch (InterruptedException e) {
                    Log.w(TAG, ""Initializer thread is still running"", e);
                    return;
                }
            }
        }

        // if a thread is still alive, possible reasons:
        //      slow device
        //      the user is spamming start/pause buttons
        //      start() method called quickly after pause()

        for (Thread thread : threads) {
            if (!thread.isAlive() || thread == Thread.currentThread()) continue;
            thread.interrupt();
        }

        try {
            for (Thread thread : threads) {
                if (!thread.isAlive()) continue;
                if (DEBUG) {
                    Log.w(TAG, ""thread alive: "" + thread.getName());
                }
                if (millis > 0) thread.join(millis);
            }
        } catch (InterruptedException e) {
            throw new RuntimeException(""A download thread is still running"", e);
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadMission.java,DownloadMission.HttpError,getMessage,String getMessage(),"[839, 842]","{'A328': [(839, 842)]}",{'A328': 1.0},A328,,"        @Override
        public String getMessage() {
            return ""HTTP "" + statusCode;
        }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadRunnableFallback.java,DownloadRunnableFallback,dispose,void dispose(),"[37, 49]","{'A328': [(37, 37), (39, 45), (48, 48)], 'A324': [(38, 38), (46, 47), (49, 49)]}","{'A328': 0.6923076923076923, 'A324': 0.3076923076923077}",A328,,"    private void dispose() {
        try {
            try {
                if (mIs != null) mIs.close();
            } finally {
                mConn.disconnect();
            }
        } catch (IOException e) {
            // nothing to do
        }

        if (mF != null) mF.close();
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadRunnableFallback.java,DownloadRunnableFallback,run,void run(),"[51, 140]","{'A328': [(51, 57), (60, 132), (135, 135), (137, 138)], 'A324': [(58, 59), (133, 134), (136, 136), (139, 140)]}","{'A328': 0.9222222222222223, 'A324': 0.07777777777777778}",A328,,"    @Override
    public void run() {
        boolean done;
        long start = mMission.fallbackResumeOffset;

        if (DEBUG && !mMission.unknownLength && start > 0) {
            Log.i(TAG, ""Resuming a single-thread download at "" + start);
        }

        try {
            long rangeStart = (mMission.unknownLength || start < 1) ? -1 : start;

            int mId = 1;
            mConn = mMission.openConnection(false, rangeStart, -1);

            if (mRetryCount == 0 && rangeStart == -1) {
                // workaround: bypass android connection pool
                mConn.setRequestProperty(""Range"", ""bytes=0-"");
            }

            mMission.establishConnection(mId, mConn);

            // check if the download can be resumed
            if (mConn.getResponseCode() == 416 && start > 0) {
                mMission.notifyProgress(-start);
                start = 0;
                mRetryCount--;
                throw new DownloadMission.HttpError(416);
            }

            // secondary check for the file length
            if (!mMission.unknownLength)
                mMission.unknownLength = Utility.getContentLength(mConn) == -1;

            if (mMission.unknownLength || mConn.getResponseCode() == 200) {
                // restart amount of bytes downloaded
                mMission.done = mMission.offsets[mMission.current] - mMission.offsets[0];
            }

            mF = mMission.storage.getStream();
            mF.seek(mMission.offsets[mMission.current] + start);

            mIs = mConn.getInputStream();

            byte[] buf = new byte[DownloadMission.BUFFER_SIZE];
            int len = 0;

            while (mMission.running && (len = mIs.read(buf, 0, buf.length)) != -1) {
                mF.write(buf, 0, len);
                start += len;
                mMission.notifyProgress(len);
            }

            dispose();

            // if thread goes interrupted check if the last part is written. This avoid re-download the whole file
            done = len == -1;
        } catch (Exception e) {
            dispose();

            mMission.fallbackResumeOffset = start;

            if (!mMission.running || e instanceof ClosedByInterruptException) return;

            if (e instanceof HttpError && ((HttpError) e).statusCode == ERROR_HTTP_FORBIDDEN) {
                // for youtube streams. The url has expired, recover
                dispose();
                mMission.doRecover(ERROR_HTTP_FORBIDDEN);
                return;
            }

            if (mRetryCount++ >= mMission.maxRetry) {
                mMission.notifyError(e);
                return;
            }

            if (DEBUG) {
                Log.e(TAG, ""got exception, retrying..."", e);
            }

            run();// try again
            return;
        }

        if (done) {
            mMission.notifyFinished();
        } else {
            mMission.fallbackResumeOffset = start;
        }
    }
"
us.shandian.giga.get,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/DownloadRunnableFallback.java,DownloadRunnableFallback,interrupt,void interrupt(),"[142, 154]","{'A328': [(142, 154)]}",{'A328': 1.0},A328,,"    @Override
    public void interrupt() {
        super.interrupt();

        if (mConn != null) {
            try {
                mConn.disconnect();
            } catch (Exception e) {
                // nothing to do
            }

        }
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,onCreate,void onCreate(SQLiteDatabase),"[79, 82]","{'A328': [(79, 82)]}",{'A328': 1.0},A328,,"    @Override
    public void onCreate(SQLiteDatabase db) {
        db.execSQL(MISSIONS_CREATE_TABLE);
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,onUpgrade,"void onUpgrade(SQLiteDatabase,int,int)","[84, 125]","{'A328': [(84, 125)]}",{'A328': 1.0},A328,,"    @Override
    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
        if (oldVersion == 2) {
            db.execSQL(""ALTER TABLE "" + MISSIONS_TABLE_NAME_v2 + "" ADD COLUMN "" + KEY_KIND + "" TEXT;"");
            oldVersion++;
        }

        if (oldVersion == 3) {
            final String KEY_LOCATION = ""location"";
            final String KEY_NAME = ""name"";

            db.execSQL(MISSIONS_CREATE_TABLE);

            Cursor cursor = db.query(MISSIONS_TABLE_NAME_v2, null, null,
                    null, null, null, KEY_TIMESTAMP);

            int count = cursor.getCount();
            if (count > 0) {
                db.beginTransaction();
                while (cursor.moveToNext()) {
                    ContentValues values = new ContentValues();
                    values.put(KEY_SOURCE, cursor.getString(cursor.getColumnIndex(KEY_SOURCE)));
                    values.put(KEY_DONE, cursor.getString(cursor.getColumnIndex(KEY_DONE)));
                    values.put(KEY_TIMESTAMP, cursor.getLong(cursor.getColumnIndex(KEY_TIMESTAMP)));
                    values.put(KEY_KIND, cursor.getString(cursor.getColumnIndex(KEY_KIND)));
                    values.put(KEY_PATH, Uri.fromFile(
                            new File(
                                    cursor.getString(cursor.getColumnIndex(KEY_LOCATION)),
                                    cursor.getString(cursor.getColumnIndex(KEY_NAME))
                            )
                    ).toString());

                    db.insert(FINISHED_TABLE_NAME, null, values);
                }
                db.setTransactionSuccessful();
                db.endTransaction();
            }

            cursor.close();
            db.execSQL(""DROP TABLE "" + MISSIONS_TABLE_NAME_v2);
        }
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,getValuesOfMission,ContentValues getValuesOfMission(Mission),"[133, 141]","{'A328': [(133, 141)]}",{'A328': 1.0},A328,,"    private ContentValues getValuesOfMission(@NonNull Mission downloadMission) {
        ContentValues values = new ContentValues();
        values.put(KEY_SOURCE, downloadMission.source);
        values.put(KEY_PATH, downloadMission.storage.getUri().toString());
        values.put(KEY_DONE, downloadMission.length);
        values.put(KEY_TIMESTAMP, downloadMission.timestamp);
        values.put(KEY_KIND, String.valueOf(downloadMission.kind));
        return values;
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,getMissionFromCursor,FinishedMission getMissionFromCursor(Cursor),"[143, 164]","{'A328': [(143, 143), (145, 164)], 'A295': [(144, 144)]}","{'A328': 0.9545454545454546, 'A295': 0.045454545454545456}",A328,,"    private FinishedMission getMissionFromCursor(Cursor cursor) {
        String kind = Objects.requireNonNull(cursor).getString(cursor.getColumnIndex(KEY_KIND));
        if (kind == null || kind.isEmpty()) kind = ""?"";

        String path = cursor.getString(cursor.getColumnIndexOrThrow(KEY_PATH));

        FinishedMission mission = new FinishedMission();

        mission.source = cursor.getString(cursor.getColumnIndexOrThrow(KEY_SOURCE));
        mission.length = cursor.getLong(cursor.getColumnIndexOrThrow(KEY_DONE));
        mission.timestamp = cursor.getLong(cursor.getColumnIndexOrThrow(KEY_TIMESTAMP));
        mission.kind = kind.charAt(0);

        try {
            mission.storage = new StoredFileHelper(context,null, Uri.parse(path), """");
        } catch (Exception e) {
            Log.e(""FinishedMissionStore"", ""failed to load the storage path of: "" + path, e);
            mission.storage = new StoredFileHelper(null, path, """", """");
        }

        return mission;
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,loadFinishedMissions,ArrayList<FinishedMission> loadFinishedMissions(),"[171, 185]","{'A328': [(171, 185)]}",{'A328': 1.0},A328,,"    public ArrayList<FinishedMission> loadFinishedMissions() {
        SQLiteDatabase database = getReadableDatabase();
        Cursor cursor = database.query(FINISHED_TABLE_NAME, null, null,
                null, null, null, KEY_TIMESTAMP + "" DESC"");

        int count = cursor.getCount();
        if (count == 0) return new ArrayList<>(1);

        ArrayList<FinishedMission> result = new ArrayList<>(count);
        while (cursor.moveToNext()) {
            result.add(getMissionFromCursor(cursor));
        }

        return result;
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,addFinishedMission,void addFinishedMission(DownloadMission),"[187, 191]","{'A328': [(187, 187), (189, 191)], 'A295': [(188, 188)]}","{'A328': 0.8, 'A295': 0.2}",A328,,"    public void addFinishedMission(DownloadMission downloadMission) {
        ContentValues values = getValuesOfMission(Objects.requireNonNull(downloadMission));
        SQLiteDatabase database = getWritableDatabase();
        database.insert(FINISHED_TABLE_NAME, null, values);
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,deleteMission,void deleteMission(Mission),"[193, 209]","{'A328': [(193, 193), (195, 209)], 'A295': [(194, 194)]}","{'A328': 0.9411764705882353, 'A295': 0.058823529411764705}",A328,,"    public void deleteMission(Mission mission) {
        String ts = String.valueOf(Objects.requireNonNull(mission).timestamp);

        SQLiteDatabase database = getWritableDatabase();

        if (mission instanceof FinishedMission) {
            if (mission.storage.isInvalid()) {
                database.delete(FINISHED_TABLE_NAME, KEY_TIMESTAMP + "" = ?"", new String[]{ts});
            } else {
                database.delete(FINISHED_TABLE_NAME, KEY_TIMESTAMP + "" = ? AND "" + KEY_PATH + "" = ?"", new String[]{
                        ts, mission.storage.getUri().toString()
                });
            }
        } else {
            throw new UnsupportedOperationException(""DownloadMission"");
        }
    }
"
us.shandian.giga.get.sqlite,../projects/NewPipe/app/src/main/java/us/shandian/giga/get/sqlite/FinishedMissionStore.java,FinishedMissionStore,updateMission,void updateMission(Mission),"[211, 233]","{'A328': [(211, 211), (213, 233)], 'A295': [(212, 212)]}","{'A328': 0.9565217391304348, 'A295': 0.043478260869565216}",A328,,"    public void updateMission(Mission mission) {
        ContentValues values = getValuesOfMission(Objects.requireNonNull(mission));
        SQLiteDatabase database = getWritableDatabase();
        String ts = String.valueOf(mission.timestamp);

        int rowsAffected;

        if (mission instanceof FinishedMission) {
            if (mission.storage.isInvalid()) {
                rowsAffected = database.update(FINISHED_TABLE_NAME, values, KEY_TIMESTAMP + "" = ?"", new String[]{ts});
            } else {
                rowsAffected = database.update(FINISHED_TABLE_NAME, values, KEY_PATH + "" = ?"", new String[]{
                        mission.storage.getUri().toString()
                });
            }
        } else {
            throw new UnsupportedOperationException(""DownloadMission"");
        }

        if (rowsAffected != 1) {
            Log.e(""FinishedMissionStore"", ""Expected 1 row to be affected by update but got "" + rowsAffected);
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,notifyMediaScanner,void notifyMediaScanner(Uri),"[126, 128]","{'A328': [(126, 127)], 'A324': [(128, 128)]}","{'A328': 0.6666666666666666, 'A324': 0.3333333333333333}",A328,,"    private void notifyMediaScanner(Uri file) {
        sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, file));
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,onCreate,void onCreate(),"[130, 188]","{'A295': [(148, 148), (150, 150), (163, 166)], 'A328': [(138, 143), (152, 152), (155, 155), (157, 157), (167, 167), (173, 173), (180, 187)], 'A324': [(130, 137), (144, 147), (149, 149), (151, 151), (153, 153), (156, 156), (158, 162), (188, 188)], 'A390': [(154, 154)], 'A300': [(168, 172), (174, 179)]}","{'A295': 0.1016949152542373, 'A328': 0.3220338983050847, 'A324': 0.3728813559322034, 'A390': 0.01694915254237288, 'A300': 0.1864406779661017}",A324,,"    @Override
    public void onCreate() {
        super.onCreate();

        if (DEBUG) {
            Log.d(TAG, ""onCreate"");
        }

        mBinder = new DownloadManagerBinder();
        mHandler = new Handler(this::handleMessage);

        mPrefs = PreferenceManager.getDefaultSharedPreferences(this);

        mManager = new DownloadManager(this, mHandler, loadMainVideoStorage(), loadMainAudioStorage());

        Intent openDownloadListIntent = new Intent(this, DownloadActivity.class)
                .setAction(Intent.ACTION_MAIN);

        mOpenDownloadList = PendingIntentCompat.getActivity(this, 0,
                openDownloadListIntent,
                PendingIntent.FLAG_UPDATE_CURRENT, false);

        icLauncher = BitmapFactory.decodeResource(this.getResources(), R.mipmap.ic_launcher);

        Builder builder = new Builder(this, getString(R.string.notification_channel_id))
                .setContentIntent(mOpenDownloadList)
                .setSmallIcon(android.R.drawable.stat_sys_download)
                .setLargeIcon(icLauncher)
                .setContentTitle(getString(R.string.msg_running))
                .setContentText(getString(R.string.msg_running_detail));

        mNotification = builder.build();

        mNotificationManager = ContextCompat.getSystemService(this,
                NotificationManager.class);
        mConnectivityManager = ContextCompat.getSystemService(this,
                ConnectivityManager.class);

        mNetworkStateListenerL = new ConnectivityManager.NetworkCallback() {
            @Override
            public void onAvailable(Network network) {
                handleConnectivityState(false);
            }

            @Override
            public void onLost(Network network) {
                handleConnectivityState(false);
            }
        };
        mConnectivityManager.registerNetworkCallback(new NetworkRequest.Builder().build(), mNetworkStateListenerL);

        mPrefs.registerOnSharedPreferenceChangeListener(mPrefChangeListener);

        handlePreferenceChange(mPrefs, getString(R.string.downloads_cross_network));
        handlePreferenceChange(mPrefs, getString(R.string.downloads_maximum_retry));
        handlePreferenceChange(mPrefs, getString(R.string.downloads_queue_limit));

        mLock = new LockManager(this);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,onAvailable,void onAvailable(Network),"[169, 172]","{'A300': [(169, 172)]}",{'A300': 1.0},A300,,"            @Override
            public void onAvailable(Network network) {
                handleConnectivityState(false);
            }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,onLost,void onLost(Network),"[174, 177]","{'A300': [(174, 177)]}",{'A300': 1.0},A300,,"            @Override
            public void onLost(Network network) {
                handleConnectivityState(false);
            }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,onStartCommand,"int onStartCommand(Intent,int,int)","[190, 219]","{'A328': [(191, 191), (193, 193), (195, 197), (200, 215), (217, 218)], 'A324': [(190, 190), (192, 192), (194, 194), (198, 199), (216, 216), (219, 219)]}","{'A328': 0.7666666666666667, 'A324': 0.23333333333333334}",A328,,"    @Override
    public int onStartCommand(final Intent intent, int flags, int startId) {
        if (DEBUG) {
            Log.d(TAG, intent == null ? ""Restarting"" : ""Starting"");
        }

        if (intent == null) return START_NOT_STICKY;

        Log.i(TAG, ""Got intent: "" + intent);
        String action = intent.getAction();
        if (action != null) {
            if (action.equals(Intent.ACTION_RUN)) {
                mHandler.post(() -> startMission(intent));
            } else if (downloadDoneNotification != null) {
                if (action.equals(ACTION_RESET_DOWNLOAD_FINISHED) || action.equals(ACTION_OPEN_DOWNLOADS_FINISHED)) {
                    downloadDoneCount = 0;
                    downloadDoneList.setLength(0);
                }
                if (action.equals(ACTION_OPEN_DOWNLOADS_FINISHED)) {
                    startActivity(new Intent(this, DownloadActivity.class)
                            .setAction(Intent.ACTION_MAIN)
                            .addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
                    );
                }
                return START_NOT_STICKY;
            }
        }

        return START_STICKY;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,onDestroy,void onDestroy(),"[221, 248]","{'A295': [(229, 229)], 'A328': [(230, 233), (236, 237), (239, 247)], 'A324': [(221, 228), (234, 235), (248, 248)], 'A300': [(238, 238)]}","{'A295': 0.03571428571428571, 'A328': 0.5357142857142857, 'A324': 0.39285714285714285, 'A300': 0.03571428571428571}",A328,,"    @Override
    public void onDestroy() {
        super.onDestroy();

        if (DEBUG) {
            Log.d(TAG, ""Destroying"");
        }

        ServiceCompat.stopForeground(this, ServiceCompat.STOP_FOREGROUND_REMOVE);

        if (mNotificationManager != null && downloadDoneNotification != null) {
            downloadDoneNotification.setDeleteIntent(null);// prevent NewPipe running when is killed, cleared from recent, etc
            mNotificationManager.notify(DOWNLOADS_NOTIFICATION_ID, downloadDoneNotification.build());
        }

        manageLock(false);

        mConnectivityManager.unregisterNetworkCallback(mNetworkStateListenerL);

        mPrefs.unregisterOnSharedPreferenceChangeListener(mPrefChangeListener);

        if (icDownloadDone != null) icDownloadDone.recycle();
        if (icDownloadFailed != null) icDownloadFailed.recycle();
        if (icLauncher != null) icLauncher.recycle();

        mHandler = null;
        mManager.pauseAllMissions(true);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,onBind,IBinder onBind(Intent),"[250, 253]","{'A324': [(250, 253)]}",{'A324': 1.0},A324,,"    @Override
    public IBinder onBind(Intent intent) {
        return mBinder;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,handleMessage,boolean handleMessage(Message),"[255, 288]","{'A295': [(282, 282)], 'A328': [(255, 281), (283, 287)], 'A324': [(288, 288)]}","{'A295': 0.029411764705882353, 'A328': 0.9411764705882353, 'A324': 0.029411764705882353}",A328,,"    private boolean handleMessage(@NonNull Message msg) {
        if (mHandler == null) return true;

        DownloadMission mission = (DownloadMission) msg.obj;

        switch (msg.what) {
            case MESSAGE_FINISHED:
                notifyMediaScanner(mission.storage.getUri());
                notifyFinishedDownload(mission.storage.getName());
                mManager.setFinished(mission);
                handleConnectivityState(false);
                updateForegroundState(mManager.runMissions());
                break;
            case MESSAGE_RUNNING:
                updateForegroundState(true);
                break;
            case MESSAGE_ERROR:
                notifyFailedDownload(mission);
                handleConnectivityState(false);
                updateForegroundState(mManager.runMissions());
                break;
            case MESSAGE_PAUSED:
                updateForegroundState(mManager.getRunningMissionsCount() > 0);
                break;
        }

        if (msg.what != MESSAGE_ERROR)
            mFailedDownloads.remove(mFailedDownloads.indexOfValue(mission));

        for (Callback observer : mEchoObservers)
            observer.handleMessage(msg);

        return true;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,handleConnectivityState,void handleConnectivityState(boolean),"[290, 311]","{'A328': [(290, 311)]}",{'A328': 1.0},A328,,"    private void handleConnectivityState(boolean updateOnly) {
        NetworkInfo info = mConnectivityManager.getActiveNetworkInfo();
        NetworkState status;

        if (info == null) {
            status = NetworkState.Unavailable;
            Log.i(TAG, ""Active network [connectivity is unavailable]"");
        } else {
            boolean connected = info.isConnected();
            boolean metered = mConnectivityManager.isActiveNetworkMetered();

            if (connected)
                status = metered ? NetworkState.MeteredOperating : NetworkState.Operating;
            else
                status = NetworkState.Unavailable;

            Log.i(TAG, ""Active network [connected="" + connected + "" metered="" + metered + ""] "" + info.toString());
        }

        if (mManager == null) return;// avoid race-conditions while the service is starting
        mManager.handleConnectivityState(status, updateOnly);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,handlePreferenceChange,"void handlePreferenceChange(SharedPreferences,String)","[313, 331]","{'A328': [(313, 313), (315, 321), (323, 323), (325, 325), (327, 327), (329, 331)], 'A305': [(314, 314), (322, 322), (324, 324), (326, 326), (328, 328)]}","{'A328': 0.7368421052631579, 'A305': 0.2631578947368421}",A328,,"    private void handlePreferenceChange(SharedPreferences prefs, @NonNull String key) {
        if (getString(R.string.downloads_maximum_retry).equals(key)) {
            try {
                String value = prefs.getString(key, getString(R.string.downloads_maximum_retry_default));
                mManager.mPrefMaxRetry = value == null ? 0 : Integer.parseInt(value);
            } catch (Exception e) {
                mManager.mPrefMaxRetry = 0;
            }
            mManager.updateMaximumAttempts();
        } else if (getString(R.string.downloads_cross_network).equals(key)) {
            mManager.mPrefMeteredDownloads = prefs.getBoolean(key, false);
        } else if (getString(R.string.downloads_queue_limit).equals(key)) {
            mManager.mPrefQueueLimit = prefs.getBoolean(key, true);
        } else if (getString(R.string.download_path_video_key).equals(key)) {
            mManager.mMainStorageVideo = loadMainVideoStorage();
        } else if (getString(R.string.download_path_audio_key).equals(key)) {
            mManager.mMainStorageAudio = loadMainAudioStorage();
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,updateForegroundState,void updateForegroundState(boolean),"[333, 345]","{'A295': [(339, 339)], 'A328': [(333, 337), (341, 344)], 'A324': [(338, 338), (340, 340), (345, 345)]}","{'A295': 0.07692307692307693, 'A328': 0.6923076923076923, 'A324': 0.23076923076923078}",A328,,"    public void updateForegroundState(boolean state) {
        if (state == mForeground) return;

        if (state) {
            startForeground(FOREGROUND_NOTIFICATION_ID, mNotification);
        } else {
            ServiceCompat.stopForeground(this, ServiceCompat.STOP_FOREGROUND_REMOVE);
        }

        manageLock(state);

        mForeground = state;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,startMission,"void startMission(Context,String[],StoredFileHelper,char,int,String,String,String[],long,ArrayList<MissionRecoveryInfo>)","[361, 380]","{'A295': [(363, 377)], 'A328': [(361, 362), (378, 378)], 'A324': [(379, 380)]}","{'A295': 0.75, 'A328': 0.15, 'A324': 0.1}",A295,,"    public static void startMission(Context context, String[] urls, StoredFileHelper storage,
                                    char kind, int threads, String source, String psName,
                                    String[] psArgs, long nearLength,
                                    ArrayList<MissionRecoveryInfo> recoveryInfo) {
        final Intent intent = new Intent(context, DownloadManagerService.class)
                .setAction(Intent.ACTION_RUN)
                .putExtra(EXTRA_URLS, urls)
                .putExtra(EXTRA_KIND, kind)
                .putExtra(EXTRA_THREADS, threads)
                .putExtra(EXTRA_SOURCE, source)
                .putExtra(EXTRA_POSTPROCESSING_NAME, psName)
                .putExtra(EXTRA_POSTPROCESSING_ARGS, psArgs)
                .putExtra(EXTRA_NEAR_LENGTH, nearLength)
                .putExtra(EXTRA_RECOVERY_INFO, recoveryInfo)
                .putExtra(EXTRA_PARENT_PATH, storage.getParentUri())
                .putExtra(EXTRA_PATH, storage.getUri())
                .putExtra(EXTRA_STORAGE_TAG, storage.getTag());

        context.startService(intent);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,startMission,void startMission(Intent),"[382, 422]","{'A295': [(384, 385), (393, 395)], 'A328': [(382, 383), (386, 392), (396, 413), (415, 419), (421, 422)], 'A324': [(420, 420)], 'A305': [(414, 414)]}","{'A295': 0.12195121951219512, 'A328': 0.8292682926829268, 'A324': 0.024390243902439025, 'A305': 0.024390243902439025}",A328,,"    private void startMission(Intent intent) {
        String[] urls = intent.getStringArrayExtra(EXTRA_URLS);
        Uri path = IntentCompat.getParcelableExtra(intent, EXTRA_PATH, Uri.class);
        Uri parentPath = IntentCompat.getParcelableExtra(intent, EXTRA_PARENT_PATH, Uri.class);
        int threads = intent.getIntExtra(EXTRA_THREADS, 1);
        char kind = intent.getCharExtra(EXTRA_KIND, '?');
        String psName = intent.getStringExtra(EXTRA_POSTPROCESSING_NAME);
        String[] psArgs = intent.getStringArrayExtra(EXTRA_POSTPROCESSING_ARGS);
        String source = intent.getStringExtra(EXTRA_SOURCE);
        long nearLength = intent.getLongExtra(EXTRA_NEAR_LENGTH, 0);
        String tag = intent.getStringExtra(EXTRA_STORAGE_TAG);
        final var recovery = IntentCompat.getParcelableArrayListExtra(intent, EXTRA_RECOVERY_INFO,
                MissionRecoveryInfo.class);
        Objects.requireNonNull(recovery);

        StoredFileHelper storage;
        try {
            storage = new StoredFileHelper(this, parentPath, path, tag);
        } catch (IOException e) {
            throw new RuntimeException(e);// this never should happen
        }

        Postprocessing ps;
        if (psName == null)
            ps = null;
        else
            ps = Postprocessing.getAlgorithm(psName, psArgs);

        final DownloadMission mission = new DownloadMission(urls, storage, kind, ps);
        mission.threadCount = threads;
        mission.source = source;
        mission.nearLength = nearLength;
        mission.recoveryInfo = recovery.toArray(new MissionRecoveryInfo[0]);

        if (ps != null)
            ps.setTemporalDir(DownloadManager.pickAvailableTemporalDir(this));

        handleConnectivityState(true);// first check the actual network status

        mManager.startMission(mission);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,notifyFinishedDownload,void notifyFinishedDownload(String),"[424, 461]","{'A328': [(424, 426), (429, 438), (443, 444), (447, 447), (449, 455), (457, 457), (459, 460)], 'A324': [(427, 428), (439, 440), (458, 458), (461, 461)], 'A300': [(445, 445)], 'A440': [(441, 442), (446, 446), (448, 448), (456, 456)]}","{'A328': 0.6842105263157895, 'A324': 0.15789473684210525, 'A300': 0.02631578947368421, 'A440': 0.13157894736842105}",A328,,"    public void notifyFinishedDownload(String name) {
        if (!mDownloadNotificationEnable || mNotificationManager == null) {
            return;
        }

        if (downloadDoneNotification == null) {
            downloadDoneList = new StringBuilder(name.length());

            icDownloadDone = BitmapFactory.decodeResource(this.getResources(), android.R.drawable.stat_sys_download_done);
            downloadDoneNotification = new Builder(this, getString(R.string.notification_channel_id))
                    .setAutoCancel(true)
                    .setLargeIcon(icDownloadDone)
                    .setSmallIcon(android.R.drawable.stat_sys_download_done)
                    .setDeleteIntent(makePendingIntent(ACTION_RESET_DOWNLOAD_FINISHED))
                    .setContentIntent(makePendingIntent(ACTION_OPEN_DOWNLOADS_FINISHED));
        }

        downloadDoneCount++;
        if (downloadDoneCount == 1) {
            downloadDoneList.append(name);

            downloadDoneNotification.setContentTitle(null);
            downloadDoneNotification.setContentText(Localization.downloadCount(this, downloadDoneCount));
            downloadDoneNotification.setStyle(new NotificationCompat.BigTextStyle()
                    .setBigContentTitle(Localization.downloadCount(this, downloadDoneCount))
                    .bigText(name)
            );
        } else {
            downloadDoneList.append('\n');
            downloadDoneList.append(name);

            downloadDoneNotification.setStyle(new NotificationCompat.BigTextStyle().bigText(downloadDoneList));
            downloadDoneNotification.setContentTitle(Localization.downloadCount(this, downloadDoneCount));
            downloadDoneNotification.setContentText(downloadDoneList);
        }

        mNotificationManager.notify(DOWNLOADS_NOTIFICATION_ID, downloadDoneNotification.build());
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,notifyFailedDownload,void notifyFailedDownload(DownloadMission),"[463, 484]","{'A295': [(464, 464)], 'A328': [(463, 463), (465, 477), (482, 484)], 'A300': [(478, 481)]}","{'A295': 0.045454545454545456, 'A328': 0.7727272727272727, 'A300': 0.18181818181818182}",A328,,"    public void notifyFailedDownload(DownloadMission mission) {
        if (!mDownloadNotificationEnable || mFailedDownloads.containsValue(mission)) return;

        int id = downloadFailedNotificationID++;
        mFailedDownloads.put(id, mission);

        if (downloadFailedNotification == null) {
            icDownloadFailed = BitmapFactory.decodeResource(this.getResources(), android.R.drawable.stat_sys_warning);
            downloadFailedNotification = new Builder(this, getString(R.string.notification_channel_id))
                    .setAutoCancel(true)
                    .setLargeIcon(icDownloadFailed)
                    .setSmallIcon(android.R.drawable.stat_sys_warning)
                    .setContentIntent(mOpenDownloadList);
        }

        downloadFailedNotification.setContentTitle(getString(R.string.download_failed));
        downloadFailedNotification.setContentText(mission.storage.getName());
        downloadFailedNotification.setStyle(new NotificationCompat.BigTextStyle()
                .bigText(mission.storage.getName()));

        mNotificationManager.notify(id, downloadFailedNotification.build());
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,makePendingIntent,PendingIntent makePendingIntent(String),"[486, 490]","{'A295': [(488, 489)], 'A328': [(486, 487), (490, 490)]}","{'A295': 0.4, 'A328': 0.6}",A328,,"    private PendingIntent makePendingIntent(String action) {
        Intent intent = new Intent(this, DownloadManagerService.class).setAction(action);
        return PendingIntentCompat.getService(this, intent.hashCode(), intent,
                PendingIntent.FLAG_UPDATE_CURRENT, false);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,manageLock,void manageLock(boolean),"[492, 501]","{'A328': [(492, 501)]}",{'A328': 1.0},A328,,"    private void manageLock(boolean acquire) {
        if (acquire == mLockAcquired) return;

        if (acquire)
            mLock.acquireWifiAndCpu();
        else
            mLock.releaseWifiAndCpu();

        mLockAcquired = acquire;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,loadMainVideoStorage,StoredDirectoryHelper loadMainVideoStorage(),"[503, 505]","{'A328': [(503, 505)]}",{'A328': 1.0},A328,,"    private StoredDirectoryHelper loadMainVideoStorage() {
        return loadMainStorage(R.string.download_path_video_key, DownloadManager.TAG_VIDEO);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,loadMainAudioStorage,StoredDirectoryHelper loadMainAudioStorage(),"[507, 509]","{'A328': [(507, 509)]}",{'A328': 1.0},A328,,"    private StoredDirectoryHelper loadMainAudioStorage() {
        return loadMainStorage(R.string.download_path_audio_key, DownloadManager.TAG_AUDIO);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService,loadMainStorage,"StoredDirectoryHelper loadMainStorage(int,String)","[511, 530]","{'A328': [(511, 517), (519, 530)], 'A300': [(518, 518)]}","{'A328': 0.95, 'A300': 0.05}",A328,,"    private StoredDirectoryHelper loadMainStorage(@StringRes int prefKey, String tag) {
        String path = mPrefs.getString(getString(prefKey), null);

        if (path == null || path.isEmpty()) return null;

        if (path.charAt(0) == File.separatorChar) {
            Log.i(TAG, ""Old save path style present: "" + path);
            path = """";
            mPrefs.edit().putString(getString(prefKey), """").apply();
        }

        try {
            return new StoredDirectoryHelper(this, Uri.parse(path), tag);
        } catch (Exception e) {
            Log.e(TAG, ""Failed to load the storage of "" + tag + "" from "" + path, e);
            Toast.makeText(this, R.string.no_available_dir, Toast.LENGTH_LONG).show();
        }

        return null;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,getDownloadManager,DownloadManager getDownloadManager(),"[537, 539]","{'A324': [(537, 539)]}",{'A324': 1.0},A324,,"        public DownloadManager getDownloadManager() {
            return mManager;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,getMainStorageVideo,StoredDirectoryHelper getMainStorageVideo(),"[541, 544]","{'A328': [(541, 544)]}",{'A328': 1.0},A328,,"        @Nullable
        public StoredDirectoryHelper getMainStorageVideo() {
            return mManager.mMainStorageVideo;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,getMainStorageAudio,StoredDirectoryHelper getMainStorageAudio(),"[546, 549]","{'A328': [(546, 549)]}",{'A328': 1.0},A328,,"        @Nullable
        public StoredDirectoryHelper getMainStorageAudio() {
            return mManager.mMainStorageAudio;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,askForSavePath,boolean askForSavePath(),"[551, 556]","{'A328': [(551, 556)]}",{'A328': 1.0},A328,,"        public boolean askForSavePath() {
            return DownloadManagerService.this.mPrefs.getBoolean(
                    DownloadManagerService.this.getString(R.string.downloads_storage_ask),
                    false
            );
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,addMissionEventListener,void addMissionEventListener(Callback),"[558, 560]","{'A328': [(558, 560)]}",{'A328': 1.0},A328,,"        public void addMissionEventListener(Callback handler) {
            mEchoObservers.add(handler);
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,removeMissionEventListener,void removeMissionEventListener(Callback),"[562, 564]","{'A328': [(562, 563)], 'A324': [(564, 564)]}","{'A328': 0.6666666666666666, 'A324': 0.3333333333333333}",A328,,"        public void removeMissionEventListener(Callback handler) {
            mEchoObservers.remove(handler);
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,clearDownloadNotifications,void clearDownloadNotifications(),"[566, 580]","{'A328': [(566, 580)]}",{'A328': 1.0},A328,,"        public void clearDownloadNotifications() {
            if (mNotificationManager == null) return;
            if (downloadDoneNotification != null) {
                mNotificationManager.cancel(DOWNLOADS_NOTIFICATION_ID);
                downloadDoneList.setLength(0);
                downloadDoneCount = 0;
            }
            if (downloadFailedNotification != null) {
                for (; downloadFailedNotificationID > DOWNLOADS_NOTIFICATION_ID; downloadFailedNotificationID--) {
                    mNotificationManager.cancel(downloadFailedNotificationID);
                }
                mFailedDownloads.clear();
                downloadFailedNotificationID++;
            }
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManagerService.java,DownloadManagerService.DownloadManagerBinder,enableNotifications,void enableNotifications(boolean),"[582, 584]","{'A328': [(582, 583)], 'A324': [(584, 584)]}","{'A328': 0.6666666666666666, 'A324': 0.3333333333333333}",A328,,"        public void enableNotifications(boolean enable) {
            mDownloadNotificationEnable = enable;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getPendingDir,File getPendingDir(Context),"[80, 88]","{'A328': [(80, 88)]}",{'A328': 1.0},A328,,"    private static File getPendingDir(@NonNull Context context) {
        File dir = context.getExternalFilesDir(DOWNLOADS_METADATA_FOLDER);
        if (testDir(dir)) return dir;

        dir = new File(context.getFilesDir(), DOWNLOADS_METADATA_FOLDER);
        if (testDir(dir)) return dir;

        throw new RuntimeException(""path to pending downloads are not accessible"");
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,testDir,boolean testDir(File),"[90, 106]","{'A328': [(90, 106)]}",{'A328': 1.0},A328,,"    private static boolean testDir(@Nullable File dir) {
        if (dir == null) return false;

        try {
            if (!Utility.mkdir(dir, false)) {
                Log.e(TAG, ""testDir() cannot create the directory in path: "" + dir.getAbsolutePath());
                return false;
            }

            File tmp = new File(dir, "".tmp"");
            if (!tmp.createNewFile()) return false;
            return tmp.delete();// if the file was created, SHOULD BE deleted too
        } catch (Exception e) {
            Log.e(TAG, ""testDir() failed: "" + dir.getAbsolutePath(), e);
            return false;
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,loadFinishedMissions,ArrayList<FinishedMission> loadFinishedMissions(),"[112, 128]","{'A328': [(112, 128)]}",{'A328': 1.0},A328,,"    private ArrayList<FinishedMission> loadFinishedMissions() {
        ArrayList<FinishedMission> finishedMissions = mFinishedMissionStore.loadFinishedMissions();

        // check if the files exists, otherwise, forget the download
        for (int i = finishedMissions.size() - 1; i >= 0; i--) {
            FinishedMission mission = finishedMissions.get(i);

            if (!mission.storage.existsAsFile()) {
                if (DEBUG) Log.d(TAG, ""downloaded file removed: "" + mission.storage.getName());

                mFinishedMissionStore.deleteMission(mission);
                finishedMissions.remove(i);
            }
        }

        return finishedMissions;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,loadPendingMissions,void loadPendingMissions(Context),"[130, 204]","{'A328': [(130, 151), (153, 202), (204, 204)], 'A295': [(203, 203)], 'A305': [(152, 152)]}","{'A328': 0.9733333333333334, 'A295': 0.013333333333333334, 'A305': 0.013333333333333334}",A328,,"    private void loadPendingMissions(Context ctx) {
        File[] subs = mPendingMissionsDir.listFiles();

        if (subs == null) {
            Log.e(TAG, ""listFiles() returned null"");
            return;
        }
        if (subs.length < 1) {
            return;
        }
        if (DEBUG) {
            Log.d(TAG, ""Loading pending downloads from directory: "" + mPendingMissionsDir.getAbsolutePath());
        }

        File tempDir = pickAvailableTemporalDir(ctx);
        Log.i(TAG, ""using '"" + tempDir + ""' as temporal directory"");

        for (File sub : subs) {
            if (!sub.isFile()) continue;
            if (sub.getName().equals("".tmp"")) continue;

            DownloadMission mis = Utility.readFromFile(sub);
            if (mis == null || mis.isFinished() || mis.hasInvalidStorage()) {
                //noinspection ResultOfMethodCallIgnored
                sub.delete();
                continue;
            }

            mis.threads = new Thread[0];

            boolean exists;
            try {
                mis.storage = StoredFileHelper.deserialize(mis.storage, ctx);
                exists = !mis.storage.isInvalid() && mis.storage.existsAsFile();
            } catch (Exception ex) {
                Log.e(TAG, ""Failed to load the file source of "" + mis.storage.toString(), ex);
                mis.storage.invalidate();
                exists = false;
            }

            if (mis.isPsRunning()) {
                if (mis.psAlgorithm.worksOnSameFile) {
                    // Incomplete post-processing results in a corrupted download file
                    // because the selected algorithm works on the same file to save space.
                    // the file will be deleted if the storage API
                    // is Java IO (avoid showing the ""Save as..."" dialog)
                    if (exists && mis.storage.isDirect() && !mis.storage.delete())
                        Log.w(TAG, ""Unable to delete incomplete download file: "" + sub.getPath());
                }

                mis.psState = 0;
                mis.errCode = DownloadMission.ERROR_POSTPROCESSING_STOPPED;
            } else if (!exists) {
                tryRecover(mis);

                // the progress is lost, reset mission state
                if (mis.isInitialized())
                    mis.resetState(true, true, DownloadMission.ERROR_PROGRESS_LOST);
            }

            if (mis.psAlgorithm != null) {
                mis.psAlgorithm.cleanupTemporalDir();
                mis.psAlgorithm.setTemporalDir(tempDir);
            }

            mis.metadata = sub;
            mis.maxRetry = mPrefMaxRetry;
            mis.mHandler = mHandler;

            mMissionsPending.add(mis);
        }

        if (mMissionsPending.size() > 1)
            Collections.sort(mMissionsPending, Comparator.comparingLong(Mission::getTimestamp));
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,startMission,void startMission(DownloadMission),"[211, 252]","{'A328': [(211, 252)]}",{'A328': 1.0},A328,,"    void startMission(DownloadMission mission) {
        synchronized (this) {
            mission.timestamp = System.currentTimeMillis();
            mission.mHandler = mHandler;
            mission.maxRetry = mPrefMaxRetry;

            // create metadata file
            while (true) {
                mission.metadata = new File(mPendingMissionsDir, String.valueOf(mission.timestamp));
                if (!mission.metadata.isFile() && !mission.metadata.exists()) {
                    try {
                        if (!mission.metadata.createNewFile())
                            throw new RuntimeException(""Cant create download metadata file"");
                    } catch (IOException e) {
                        throw new RuntimeException(e);
                    }
                    break;
                }
                mission.timestamp = System.currentTimeMillis();
            }

            mSelfMissionsControl = true;
            mMissionsPending.add(mission);

            // Before continue, save the metadata in case the internet connection is not available
            Utility.writeToFile(mission.metadata, mission);

            if (mission.storage == null) {
                // noting to do here
                mission.errCode = DownloadMission.ERROR_FILE_CREATION;
                if (mission.errObject != null)
                    mission.errObject = new IOException(""DownloadMission.storage == NULL"");
                return;
            }

            boolean start = !mPrefQueueLimit || getRunningMissionsCount() < 1;

            if (canDownloadInCurrentNetwork() && start) {
                mission.start();
            }
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,resumeMission,void resumeMission(DownloadMission),"[255, 259]","{'A328': [(255, 259)]}",{'A328': 1.0},A328,,"    public void resumeMission(DownloadMission mission) {
        if (!mission.running) {
            mission.start();
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,pauseMission,void pauseMission(DownloadMission),"[261, 266]","{'A328': [(261, 266)]}",{'A328': 1.0},A328,,"    public void pauseMission(DownloadMission mission) {
        if (mission.running) {
            mission.setEnqueued(false);
            mission.pause();
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,deleteMission,void deleteMission(Mission),"[268, 279]","{'A328': [(268, 279)]}",{'A328': 1.0},A328,,"    public void deleteMission(Mission mission) {
        synchronized (this) {
            if (mission instanceof DownloadMission) {
                mMissionsPending.remove(mission);
            } else if (mission instanceof FinishedMission) {
                mMissionsFinished.remove(mission);
                mFinishedMissionStore.deleteMission(mission);
            }

            mission.delete();
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,forgetMission,void forgetMission(StoredFileHelper),"[281, 296]","{'A328': [(281, 296)]}",{'A328': 1.0},A328,,"    public void forgetMission(StoredFileHelper storage) {
        synchronized (this) {
            Mission mission = getAnyMission(storage);
            if (mission == null) return;

            if (mission instanceof DownloadMission) {
                mMissionsPending.remove(mission);
            } else if (mission instanceof FinishedMission) {
                mMissionsFinished.remove(mission);
                mFinishedMissionStore.deleteMission(mission);
            }

            mission.storage = null;
            mission.delete();
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,tryRecover,void tryRecover(DownloadMission),"[298, 315]","{'A328': [(298, 315)]}",{'A328': 1.0},A328,,"    public void tryRecover(DownloadMission mission) {
        StoredDirectoryHelper mainStorage = getMainStorage(mission.storage.getTag());

        if (!mission.storage.isInvalid() && mission.storage.create()) return;

        // using javaIO cannot recreate the file
        // using SAF in older devices (no tree available)
        //
        // force the user to pick again the save path
        mission.storage.invalidate();

        if (mainStorage == null) return;

        // if the user has changed the save path before this download, the original save path will be lost
        StoredFileHelper newStorage = mainStorage.createFile(mission.storage.getName(), mission.storage.getType());

        if (newStorage != null) mission.storage = newStorage;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getPendingMission,DownloadMission getPendingMission(StoredFileHelper),"[324, 332]","{'A328': [(324, 332)]}",{'A328': 1.0},A328,,"    @Nullable
    private DownloadMission getPendingMission(StoredFileHelper storage) {
        for (DownloadMission mission : mMissionsPending) {
            if (mission.storage.equals(storage)) {
                return mission;
            }
        }
        return null;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getFinishedMissionIndex,int getFinishedMissionIndex(StoredFileHelper),"[343, 363]","{'A328': [(343, 345), (358, 363)], 'A305': [(346, 357)]}","{'A328': 0.42857142857142855, 'A305': 0.5714285714285714}",A305,,"    private int getFinishedMissionIndex(StoredFileHelper storage) {
        for (int i = 0; i < mMissionsFinished.size(); i++) {
            if (mMissionsFinished.get(i).storage.equals(storage)) {
                // If the file does not exist the mission is not valid anymore. Also checking if
                // length == 0 since the file picker may create an empty file before yielding it,
                // but that does not mean the file really belonged to a previous mission.
                if (!storage.existsAsFile() || storage.length() == 0) {
                    if (DEBUG) {
                        Log.d(TAG, ""matched downloaded file removed: "" + storage.getName());
                    }

                    mFinishedMissionStore.deleteMission(mMissionsFinished.get(i));
                    mMissionsFinished.remove(i);
                    return -1; // finished mission whose associated file was removed
                }
                return i;
            }
        }

        return -1;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getAnyMission,Mission getAnyMission(StoredFileHelper),"[365, 375]","{'A328': [(365, 375)]}",{'A328': 1.0},A328,,"    private Mission getAnyMission(StoredFileHelper storage) {
        synchronized (this) {
            Mission mission = getPendingMission(storage);
            if (mission != null) return mission;

            int idx = getFinishedMissionIndex(storage);
            if (idx >= 0) return mMissionsFinished.get(idx);
        }

        return null;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getRunningMissionsCount,int getRunningMissionsCount(),"[377, 387]","{'A328': [(377, 387)]}",{'A328': 1.0},A328,,"    int getRunningMissionsCount() {
        int count = 0;
        synchronized (this) {
            for (DownloadMission mission : mMissionsPending) {
                if (mission.running && !mission.isPsFailed() && !mission.isFinished())
                    count++;
            }
        }

        return count;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,pauseAllMissions,void pauseAllMissions(boolean),"[389, 403]","{'A328': [(389, 403)]}",{'A328': 1.0},A328,,"    public void pauseAllMissions(boolean force) {
        synchronized (this) {
            for (DownloadMission mission : mMissionsPending) {
                if (!mission.running || mission.isPsRunning() || mission.isFinished()) continue;

                if (force) {
                    // avoid waiting for threads
                    mission.init = null;
                    mission.threads = new Thread[0];
                }

                mission.pause();
            }
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,startAllMissions,void startAllMissions(),"[405, 413]","{'A328': [(405, 413)]}",{'A328': 1.0},A328,,"    public void startAllMissions() {
        synchronized (this) {
            for (DownloadMission mission : mMissionsPending) {
                if (mission.running || mission.isCorrupt()) continue;

                mission.start();
            }
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,setFinished,void setFinished(DownloadMission),"[420, 426]","{'A328': [(420, 426)]}",{'A328': 1.0},A328,,"    void setFinished(DownloadMission mission) {
        synchronized (this) {
            mMissionsPending.remove(mission);
            mMissionsFinished.add(0, new FinishedMission(mission));
            mFinishedMissionStore.addFinishedMission(mission);
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,runMissions,boolean runMissions(),"[433, 457]","{'A328': [(433, 457)]}",{'A328': 1.0},A328,,"    boolean runMissions() {
        synchronized (this) {
            if (mMissionsPending.size() < 1) return false;
            if (!canDownloadInCurrentNetwork()) return false;

            if (mPrefQueueLimit) {
                for (DownloadMission mission : mMissionsPending)
                    if (!mission.isFinished() && mission.running) return true;
            }

            boolean flag = false;
            for (DownloadMission mission : mMissionsPending) {
                if (mission.running || !mission.enqueued || mission.isFinished())
                    continue;

                resumeMission(mission);
                if (mission.errCode != DownloadMission.ERROR_NOTHING) continue;

                if (mPrefQueueLimit) return true;
                flag = true;
            }

            return flag;
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getIterator,MissionIterator getIterator(),"[459, 462]","{'A328': [(459, 462)]}",{'A328': 1.0},A328,,"    public MissionIterator getIterator() {
        mSelfMissionsControl = true;
        return new MissionIterator();
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,forgetFinishedDownloads,void forgetFinishedDownloads(),"[467, 474]","{'A328': [(467, 474)]}",{'A328': 1.0},A328,,"    public void forgetFinishedDownloads() {
        synchronized (this) {
            for (FinishedMission mission : mMissionsFinished) {
                mFinishedMissionStore.deleteMission(mission);
            }
            mMissionsFinished.clear();
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,canDownloadInCurrentNetwork,boolean canDownloadInCurrentNetwork(),"[476, 479]","{'A328': [(476, 479)]}",{'A328': 1.0},A328,,"    private boolean canDownloadInCurrentNetwork() {
        if (mLastNetworkStatus == NetworkState.Unavailable) return false;
        return !(mPrefMeteredDownloads && mLastNetworkStatus == NetworkState.MeteredOperating);
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,handleConnectivityState,"void handleConnectivityState(NetworkState,boolean)","[481, 505]","{'A328': [(481, 505)]}",{'A328': 1.0},A328,,"    void handleConnectivityState(NetworkState currentStatus, boolean updateOnly) {
        if (currentStatus == mLastNetworkStatus) return;

        mLastNetworkStatus = currentStatus;
        if (currentStatus == NetworkState.Unavailable) return;

        if (!mSelfMissionsControl || updateOnly) {
            return;// don't touch anything without the user interaction
        }

        boolean isMetered = mPrefMeteredDownloads && mLastNetworkStatus == NetworkState.MeteredOperating;

        synchronized (this) {
            for (DownloadMission mission : mMissionsPending) {
                if (mission.isCorrupt() || mission.isPsRunning()) continue;

                if (mission.running && isMetered) {
                    mission.pause();
                } else if (!mission.running && !isMetered && mission.enqueued) {
                    mission.start();
                    if (mPrefQueueLimit) break;
                }
            }
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,updateMaximumAttempts,void updateMaximumAttempts(),"[507, 511]","{'A328': [(507, 511)]}",{'A328': 1.0},A328,,"    void updateMaximumAttempts() {
        synchronized (this) {
            for (DownloadMission mission : mMissionsPending) mission.maxRetry = mPrefMaxRetry;
        }
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,checkForExistingMission,MissionState checkForExistingMission(StoredFileHelper),"[513, 529]","{'A328': [(513, 529)]}",{'A328': 1.0},A328,,"    public MissionState checkForExistingMission(StoredFileHelper storage) {
        synchronized (this) {
            DownloadMission pending = getPendingMission(storage);

            if (pending == null) {
                if (getFinishedMissionIndex(storage) >= 0) return MissionState.Finished;
            } else {
                if (pending.isFinished()) {
                    return MissionState.Finished;// this never should happen (race-condition)
                } else {
                    return pending.running ? MissionState.PendingRunning : MissionState.Pending;
                }
            }
        }

        return MissionState.None;
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,isDirectoryAvailable,boolean isDirectoryAvailable(File),"[531, 533]","{'A328': [(531, 533)]}",{'A328': 1.0},A328,,"    private static boolean isDirectoryAvailable(File directory) {
        return directory != null && directory.canWrite() && directory.exists();
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,pickAvailableTemporalDir,File pickAvailableTemporalDir(Context),"[535, 551]","{'A328': [(535, 551)]}",{'A328': 1.0},A328,,"    static File pickAvailableTemporalDir(@NonNull Context ctx) {
        File dir = ctx.getExternalFilesDir(null);
        if (isDirectoryAvailable(dir)) return dir;

        dir = ctx.getFilesDir();
        if (isDirectoryAvailable(dir)) return dir;

        // this never should happen
        dir = ctx.getDir(""muxing_tmp"", Context.MODE_PRIVATE);
        if (isDirectoryAvailable(dir)) return dir;

        // fallback to cache dir
        dir = ctx.getCacheDir();
        if (isDirectoryAvailable(dir)) return dir;

        throw new RuntimeException(""Not temporal directories are available"");
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager,getMainStorage,StoredDirectoryHelper getMainStorage(String),"[553, 561]","{'A328': [(553, 561)]}",{'A328': 1.0},A328,,"    @Nullable
    private StoredDirectoryHelper getMainStorage(@NonNull String tag) {
        if (tag.equals(TAG_AUDIO)) return mMainStorageAudio;
        if (tag.equals(TAG_VIDEO)) return mMainStorageVideo;

        Log.w(TAG, ""Unknown download category, not [audio video]: "" + tag);

        return null;// this never should happen
    }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,getSpecialItems,ArrayList<Object> getSpecialItems(),"[579, 608]","{'A328': [(579, 582), (584, 585), (587, 608)], 'A295': [(583, 583), (586, 586)]}","{'A328': 0.9333333333333333, 'A295': 0.06666666666666667}",A328,,"        private ArrayList<Object> getSpecialItems() {
            synchronized (DownloadManager.this) {
                ArrayList<Mission> pending = new ArrayList<>(mMissionsPending);
                ArrayList<Mission> finished = new ArrayList<>(mMissionsFinished);
                List<Mission> remove = new ArrayList<>(hidden);

                // hide missions (if required)
                remove.removeIf(mission -> pending.remove(mission) || finished.remove(mission));

                int fakeTotal = pending.size();
                if (fakeTotal > 0) fakeTotal++;

                fakeTotal += finished.size();
                if (finished.size() > 0) fakeTotal++;

                ArrayList<Object> list = new ArrayList<>(fakeTotal);
                if (pending.size() > 0) {
                    list.add(PENDING);
                    list.addAll(pending);
                }
                if (finished.size() > 0) {
                    list.add(FINISHED);
                    list.addAll(finished);
                }

                hasFinished = finished.size() > 0;

                return list;
            }
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,getItem,MissionItem getItem(int),"[610, 617]","{'A328': [(610, 617)]}",{'A328': 1.0},A328,,"        public MissionItem getItem(int position) {
            Object object = snapshot.get(position);

            if (object == PENDING) return new MissionItem(SPECIAL_PENDING);
            if (object == FINISHED) return new MissionItem(SPECIAL_FINISHED);

            return new MissionItem(SPECIAL_NOTHING, (Mission) object);
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,getSpecialAtItem,int getSpecialAtItem(int),"[619, 626]","{'A328': [(619, 626)]}",{'A328': 1.0},A328,,"        public int getSpecialAtItem(int position) {
            Object object = snapshot.get(position);

            if (object == PENDING) return SPECIAL_PENDING;
            if (object == FINISHED) return SPECIAL_FINISHED;

            return SPECIAL_NOTHING;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,start,void start(),"[629, 631]","{'A328': [(629, 631)]}",{'A328': 1.0},A328,,"        public void start() {
            current = getSpecialItems();
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,end,void end(),"[633, 636]","{'A328': [(633, 636)]}",{'A328': 1.0},A328,,"        public void end() {
            snapshot = current;
            current = null;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,hide,void hide(Mission),"[638, 640]","{'A328': [(638, 640)]}",{'A328': 1.0},A328,,"        public void hide(Mission mission) {
            hidden.add(mission);
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,unHide,void unHide(Mission),"[642, 644]","{'A328': [(642, 644)]}",{'A328': 1.0},A328,,"        public void unHide(Mission mission) {
            hidden.remove(mission);
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,hasFinishedMissions,boolean hasFinishedMissions(),"[646, 648]","{'A328': [(646, 648)]}",{'A328': 1.0},A328,,"        public boolean hasFinishedMissions() {
            return hasFinished;
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,hasValidPendingMissions,boolean[] hasValidPendingMissions(),"[657, 674]","{'A328': [(657, 674)]}",{'A328': 1.0},A328,,"        public boolean[] hasValidPendingMissions() {
            boolean running = false;
            boolean paused = false;

            synchronized (DownloadManager.this) {
                for (DownloadMission mission : mMissionsPending) {
                    if (hidden.contains(mission) || mission.isCorrupt())
                        continue;

                    if (mission.running)
                        running = true;
                    else
                        paused = true;
                }
            }

            return new boolean[]{running, paused};
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,getOldListSize,int getOldListSize(),"[677, 680]","{'A328': [(677, 680)]}",{'A328': 1.0},A328,,"        @Override
        public int getOldListSize() {
            return snapshot.size();
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,getNewListSize,int getNewListSize(),"[682, 685]","{'A328': [(682, 685)]}",{'A328': 1.0},A328,,"        @Override
        public int getNewListSize() {
            return current.size();
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,areItemsTheSame,"boolean areItemsTheSame(int,int)","[687, 690]","{'A328': [(687, 690)]}",{'A328': 1.0},A328,,"        @Override
        public boolean areItemsTheSame(int oldItemPosition, int newItemPosition) {
            return snapshot.get(oldItemPosition) == current.get(newItemPosition);
        }
"
us.shandian.giga.service,../projects/NewPipe/app/src/main/java/us/shandian/giga/service/DownloadManager.java,DownloadManager.MissionIterator,areContentsTheSame,"boolean areContentsTheSame(int,int)","[692, 702]","{'A328': [(692, 702)]}",{'A328': 1.0},A328,,"        @Override
        public boolean areContentsTheSame(int oldItemPosition, int newItemPosition) {
            Object x = snapshot.get(oldItemPosition);
            Object y = current.get(newItemPosition);

            if (x instanceof Mission && y instanceof Mission) {
                return ((Mission) x).storage.equals(((Mission) y).storage);
            }

            return false;
        }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onServiceConnected,"void onServiceConnected(ComponentName,IBinder)","[75, 90]","{'A328': [(77, 89)], 'A324': [(75, 76), (90, 90)]}","{'A328': 0.8125, 'A324': 0.1875}",A328,,"        @Override
        public void onServiceConnected(ComponentName name, IBinder binder) {
            mBinder = (DownloadManagerBinder) binder;
            mBinder.clearDownloadNotifications();

            mAdapter = new MissionAdapter(mContext, mBinder.getDownloadManager(), mEmpty, getView());

            mAdapter.setRecover(MissionsFragment.this::recoverMission);

            setAdapterButtons();

            mBinder.addMissionEventListener(mAdapter);
            mBinder.enableNotifications(false);

            updateList();
        }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onServiceDisconnected,void onServiceDisconnected(ComponentName),"[92, 95]","{'A324': [(92, 95)]}",{'A324': 1.0},A324,,"        @Override
        public void onServiceDisconnected(ComponentName name) {
            // What to do?
        }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onCreateView,"View onCreateView(LayoutInflater,ViewGroup,Bundle)","[100, 133]","{'A328': [(101, 101), (108, 108), (111, 111), (114, 127)], 'A299': [(104, 104)], 'A301': [(112, 112)], 'A324': [(100, 100), (102, 103), (105, 107), (109, 110), (113, 113), (128, 133)]}","{'A328': 0.5, 'A299': 0.029411764705882353, 'A301': 0.029411764705882353, 'A324': 0.4411764705882353}",A328,,"    @Override
    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View v = inflater.inflate(R.layout.missions, container, false);

        mPrefs = PreferenceManager.getDefaultSharedPreferences(requireActivity());
        mLinear = mPrefs.getBoolean(""linear"", false);

        // Bind the service
        mContext.bindService(new Intent(mContext, DownloadManagerService.class), mConnection, Context.BIND_AUTO_CREATE);

        // Views
        mEmpty = v.findViewById(R.id.list_empty_view);
        mList = v.findViewById(R.id.mission_recycler);

        // Init layouts managers
        mGridManager = new GridLayoutManager(getActivity(), SPAN_SIZE);
        mGridManager.setSpanSizeLookup(new GridLayoutManager.SpanSizeLookup() {
            @Override
            public int getSpanSize(int position) {
                switch (mAdapter.getItemViewType(position)) {
                    case DownloadManager.SPECIAL_PENDING:
                    case DownloadManager.SPECIAL_FINISHED:
                        return SPAN_SIZE;
                    default:
                        return 1;
                }
            }
        });
        mLinearManager = new LinearLayoutManager(getActivity());

        setHasOptionsMenu(true);

        return v;
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,getSpanSize,int getSpanSize(int),"[117, 126]","{'A328': [(117, 126)]}",{'A328': 1.0},A328,,"            @Override
            public int getSpanSize(int position) {
                switch (mAdapter.getItemViewType(position)) {
                    case DownloadManager.SPECIAL_PENDING:
                    case DownloadManager.SPECIAL_FINISHED:
                        return SPAN_SIZE;
                    default:
                        return 1;
                }
            }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onAttach,void onAttach(Context),"[138, 146]","{'A328': [(139, 140), (144, 145)], 'A324': [(138, 138), (141, 143), (146, 146)]}","{'A328': 0.4444444444444444, 'A324': 0.5555555555555556}",A324,,"    @Override
    public void onAttach(@NonNull Context context) {
        super.onAttach(context);

        // Bug: in api< 23 this is never called
        // so mActivity=null
        // so app crashes with null-pointer exception
        mContext = context;
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onAttach,void onAttach(Activity),"[152, 158]","{'A328': [(152, 152), (154, 154), (156, 157)], 'A324': [(153, 153), (155, 155), (158, 158)]}","{'A328': 0.5714285714285714, 'A324': 0.42857142857142855}",A328,,"    @SuppressWarnings(""deprecation"")
    @Override
    public void onAttach(@NonNull Activity activity) {
        super.onAttach(activity);

        mContext = activity;
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onDestroy,void onDestroy(),"[161, 173]","{'A328': [(162, 172)], 'A342': [(161, 161), (173, 173)]}","{'A328': 0.8461538461538461, 'A342': 0.15384615384615385}",A328,,"    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mBinder == null || mAdapter == null) return;

        mBinder.removeMissionEventListener(mAdapter);
        mBinder.enableNotifications(true);
        mContext.unbindService(mConnection);
        mAdapter.onDestroy();

        mBinder = null;
        mAdapter = null;
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onPrepareOptionsMenu,void onPrepareOptionsMenu(Menu),"[175, 185]","{'A328': [(176, 184)], 'A450': [(185, 185)], 'A324': [(175, 175)]}","{'A328': 0.8181818181818182, 'A450': 0.09090909090909091, 'A324': 0.09090909090909091}",A328,,"    @Override
    public void onPrepareOptionsMenu(Menu menu) {
        mSwitch = menu.findItem(R.id.switch_mode);
        mClear = menu.findItem(R.id.clear_list);
        mStart = menu.findItem(R.id.start_downloads);
        mPause = menu.findItem(R.id.pause_downloads);

        if (mAdapter != null) setAdapterButtons();

        super.onPrepareOptionsMenu(menu);
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onOptionsItemSelected,boolean onOptionsItemSelected(MenuItem),"[187, 206]","{'A328': [(191, 194), (196, 205)], 'A450': [(187, 189)], 'A324': [(190, 190), (206, 206)], 'A451': [(195, 195)]}","{'A328': 0.7, 'A450': 0.15, 'A324': 0.1, 'A451': 0.05}",A328,,"    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        switch (item.getItemId()) {
            case R.id.switch_mode:
                mLinear = !mLinear;
                updateList();
                return true;
            case R.id.clear_list:
                showClearDownloadHistoryPrompt();
                return true;
            case R.id.start_downloads:
                mBinder.getDownloadManager().startAllMissions();
                return true;
            case R.id.pause_downloads:
                mBinder.getDownloadManager().pauseAllMissions(false);
                mAdapter.refreshMissionItems();// update items view
            default:
                return super.onOptionsItemSelected(item);
        }
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,showClearDownloadHistoryPrompt,void showClearDownloadHistoryPrompt(),"[208, 220]","{'A299': [(214, 215), (217, 218)], 'A451': [(208, 213), (216, 216), (219, 220)]}","{'A299': 0.3076923076923077, 'A451': 0.6923076923076923}",A451,,"    public void showClearDownloadHistoryPrompt() {
        // ask the user whether he wants to just clear history or instead delete files on disk
        new AlertDialog.Builder(mContext)
                .setTitle(R.string.clear_download_history)
                .setMessage(R.string.confirm_prompt)
                // Intentionally misusing buttons' purpose in order to achieve good order
                .setNegativeButton(R.string.clear_download_history, (dialog, which) ->
                        mAdapter.clearFinishedDownloads(false))
                .setNeutralButton(R.string.cancel, null)
                .setPositiveButton(R.string.delete_downloaded_files, (dialog, which) ->
                        showDeleteDownloadedFilesConfirmationPrompt())
                .show();
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,showDeleteDownloadedFilesConfirmationPrompt,void showDeleteDownloadedFilesConfirmationPrompt(),"[222, 230]","{'A299': [(227, 228)], 'A451': [(222, 226), (229, 230)]}","{'A299': 0.2222222222222222, 'A451': 0.7777777777777778}",A451,,"    public void showDeleteDownloadedFilesConfirmationPrompt() {
        // make sure the user confirms once more before deleting files on disk
        new AlertDialog.Builder(mContext)
                .setTitle(R.string.delete_downloaded_files_confirm)
                .setNegativeButton(R.string.cancel, null)
                .setPositiveButton(R.string.ok, (dialog, which) ->
                        mAdapter.clearFinishedDownloads(true))
                .show();
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,updateList,void updateList(),"[232, 254]","{'A328': [(239, 244), (251, 254)], 'A324': [(232, 238), (245, 247)], 'A312': [(248, 250)]}","{'A328': 0.43478260869565216, 'A324': 0.43478260869565216, 'A312': 0.13043478260869565}",A328,,"    private void updateList() {
        if (mLinear) {
            mList.setLayoutManager(mLinearManager);
        } else {
            mList.setLayoutManager(mGridManager);
        }

        // destroy all created views in the recycler
        mList.setAdapter(null);
        mAdapter.notifyDataSetChanged();

        // re-attach the adapter in grid/lineal mode
        mAdapter.setLinear(mLinear);
        mList.setAdapter(mAdapter);

        if (mSwitch != null) {
            mSwitch.setIcon(mLinear
                            ? R.drawable.ic_apps
                            : R.drawable.ic_list);
            mSwitch.setTitle(mLinear ? R.string.grid : R.string.list);
            mPrefs.edit().putBoolean(""linear"", mLinear).apply();
        }
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,setAdapterButtons,void setAdapterButtons(),"[256, 261]","{'A328': [(256, 261)]}",{'A328': 1.0},A328,,"    private void setAdapterButtons() {
        if (mClear == null || mStart == null || mPause == null) return;

        mAdapter.setClearButton(mClear);
        mAdapter.setMasterButtons(mStart, mPause);
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,recoverMission,void recoverMission(DownloadMission),"[263, 286]","{'A328': [(263, 265), (267, 267), (269, 269), (272, 272), (277, 277), (286, 286)], 'A300': [(279, 285)], 'A305': [(266, 266), (268, 268), (276, 276)], 'A294': [(270, 271), (273, 275), (278, 278)]}","{'A328': 0.3333333333333333, 'A300': 0.2916666666666667, 'A305': 0.125, 'A294': 0.25}",A328,,"    private void recoverMission(@NonNull DownloadMission mission) {
        unsafeMissionTarget = mission;

        final Uri initialPath;
        if (NewPipeSettings.useStorageAccessFramework(mContext)) {
            initialPath = null;
        } else {
            final File initialSavePath;
            if (DownloadManager.TAG_AUDIO.equals(mission.storage.getType())) {
                initialSavePath = NewPipeSettings.getDir(Environment.DIRECTORY_MUSIC);
            } else {
                initialSavePath = NewPipeSettings.getDir(Environment.DIRECTORY_MOVIES);
            }
            initialPath = Uri.parse(initialSavePath.getAbsolutePath());
        }

        NoFileManagerSafeGuard.launchSafe(
                requestDownloadSaveAsLauncher,
                StoredFileHelper.getNewPicker(mContext, mission.storage.getName(),
                        mission.storage.getType(), initialPath),
                TAG,
                mContext
        );
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onResume,void onResume(),"[288, 304]","{'A328': [(288, 304)]}",{'A328': 1.0},A328,,"    @Override
    public void onResume() {
        super.onResume();

        if (mAdapter != null) {
            mAdapter.onResume();

            if (mForceUpdate) {
                mForceUpdate = false;
                mAdapter.forceUpdate();
            }

            mBinder.addMissionEventListener(mAdapter);
            mAdapter.checkMasterButtonsVisibility();
        }
        if (mBinder != null) mBinder.enableNotifications(false);
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,onPause,void onPause(),"[306, 317]","{'A328': [(306, 317)]}",{'A328': 1.0},A328,,"    @Override
    public void onPause() {
        super.onPause();

        if (mAdapter != null) {
            mForceUpdate = true;
            mBinder.removeMissionEventListener(mAdapter);
            mAdapter.onPaused();
        }

        if (mBinder != null) mBinder.enableNotifications(true);
    }
"
us.shandian.giga.ui.fragment,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/fragment/MissionsFragment.java,MissionsFragment,requestDownloadSaveAsResult,void requestDownloadSaveAsResult(ActivityResult),"[319, 340]","{'A328': [(323, 323), (325, 328), (330, 340)], 'A299': [(319, 322), (324, 324), (329, 329)]}","{'A328': 0.7272727272727273, 'A299': 0.2727272727272727}",A328,,"    private void requestDownloadSaveAsResult(final ActivityResult result) {
        if (result.getResultCode() != Activity.RESULT_OK) {
            return;
        }

        if (unsafeMissionTarget == null || result.getData() == null) {
            return;
        }

        try {
            Uri fileUri = result.getData().getData();
            if (fileUri.getAuthority() != null && FilePickerActivityHelper.isOwnFileUri(mContext, fileUri)) {
                fileUri = Uri.fromFile(Utils.getFileForUri(fileUri));
            }

            String tag = unsafeMissionTarget.storage.getTag();
            unsafeMissionTarget.storage = new StoredFileHelper(mContext, null, fileUri, tag);
            mAdapter.recoverMission(unsafeMissionTarget);
        } catch (IOException e) {
            Toast.makeText(mContext, R.string.general_error, Toast.LENGTH_LONG).show();
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,onCreateViewHolder,"ViewHolder onCreateViewHolder(ViewGroup,int)","[145, 155]","{'A328': [(146, 152), (154, 154)], 'A324': [(145, 145), (153, 153), (155, 155)]}","{'A328': 0.7272727272727273, 'A324': 0.2727272727272727}",A328,,"    @Override
    @NonNull
    public ViewHolder onCreateViewHolder(@NonNull ViewGroup parent, int viewType) {
        switch (viewType) {
            case DownloadManager.SPECIAL_PENDING:
            case DownloadManager.SPECIAL_FINISHED:
                return new ViewHolderHeader(mInflater.inflate(R.layout.missions_header, parent, false));
        }

        return new ViewHolderItem(mInflater.inflate(mLayout, parent, false));
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,onViewRecycled,void onViewRecycled(ViewHolder),"[157, 174]","{'A328': [(158, 173)], 'A324': [(157, 157), (174, 174)]}","{'A328': 0.8888888888888888, 'A324': 0.1111111111111111}",A328,,"    @Override
    public void onViewRecycled(@NonNull ViewHolder view) {
        super.onViewRecycled(view);

        if (view instanceof ViewHolderHeader) return;
        ViewHolderItem h = (ViewHolderItem) view;

        if (h.item.mission instanceof DownloadMission) {
            mPendingDownloadsItems.remove(h);
            if (mPendingDownloadsItems.size() < 1) {
                checkMasterButtonsVisibility();
            }
        }

        h.popupMenu.dismiss();
        h.item = null;
        h.resetSpeedMeasure();
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,onBindViewHolder,"void onBindViewHolder(ViewHolder,int)","[176, 226]","{'A328': [(177, 193), (195, 196), (198, 198), (200, 201), (203, 203), (205, 213), (216, 218), (220, 220), (225, 225)], 'A324': [(176, 176), (194, 194), (197, 197), (199, 199), (202, 202), (204, 204), (226, 226)], 'A453': [(214, 215), (221, 224)], 'A290': [(219, 219)]}","{'A328': 0.7254901960784313, 'A324': 0.13725490196078433, 'A453': 0.11764705882352941, 'A290': 0.0196078431372549}",A328,,"    @Override
    @SuppressLint(""SetTextI18n"")
    public void onBindViewHolder(@NonNull ViewHolder view, @SuppressLint(""RecyclerView"") int pos) {
        DownloadManager.MissionItem item = mIterator.getItem(pos);

        if (view instanceof ViewHolderHeader) {
            if (item.special == DownloadManager.SPECIAL_NOTHING) return;
            int str;
            if (item.special == DownloadManager.SPECIAL_PENDING) {
                str = R.string.missions_header_pending;
            } else {
                str = R.string.missions_header_finished;
                if (mClear != null) mClear.setVisible(true);
            }

            ((ViewHolderHeader) view).header.setText(str);
            return;
        }

        ViewHolderItem h = (ViewHolderItem) view;
        h.item = item;

        Utility.FileType type = Utility.getFileType(item.mission.kind, item.mission.storage.getName());

        h.icon.setImageResource(Utility.getIconForFileType(type));
        h.name.setText(item.mission.storage.getName());

        h.progress.setColors(Utility.getBackgroundForFileType(mContext, type), Utility.getForegroundForFileType(mContext, type));

        if (h.item.mission instanceof DownloadMission) {
            DownloadMission mission = (DownloadMission) item.mission;
            String length = Utility.formatBytes(mission.getLength());
            if (mission.running && !mission.isPsRunning()) length += "" --.- kB/s"";

            h.size.setText(length);
            h.pause.setTitle(mission.unknownLength ? R.string.stop : R.string.pause);
            updateProgress(h);
            mPendingDownloadsItems.add(h);

            h.date.setText("""");
        } else {
            h.progress.setMarquee(false);
            h.status.setText(""100%"");
            h.progress.setProgress(1.0f);
            h.size.setText(Utility.formatBytes(item.mission.length));

            DateFormat dateFormat = DateFormat.getDateInstance(DateFormat.MEDIUM, Locale.getDefault());
            Date date = new Date(item.mission.timestamp);
            h.date.setText(dateFormat.format(date));
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,getItemCount,int getItemCount(),"[228, 231]","{'A328': [(230, 230)], 'A324': [(228, 229), (231, 231)]}","{'A328': 0.25, 'A324': 0.75}",A324,,"    @Override
    public int getItemCount() {
        return mIterator.getOldListSize();
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,getItemViewType,int getItemViewType(int),"[233, 236]","{'A328': [(234, 235)], 'A324': [(233, 233), (236, 236)]}","{'A328': 0.5, 'A324': 0.5}",A328,,"    @Override
    public int getItemViewType(int position) {
        return mIterator.getSpecialAtItem(position);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,updateProgress,void updateProgress(ViewHolderItem),"[238, 342]","{'A328': [(238, 240), (242, 255), (257, 259), (261, 268), (271, 272), (274, 284), (287, 292), (294, 302), (304, 308), (310, 314), (316, 320), (322, 322), (324, 325), (327, 341)], 'A324': [(241, 241), (260, 260), (269, 270), (273, 273), (285, 286), (293, 293), (303, 303), (309, 309), (323, 323), (326, 326), (342, 342)], 'A299': [(315, 315)], 'A290': [(256, 256), (321, 321)]}","{'A328': 0.8476190476190476, 'A324': 0.12380952380952381, 'A299': 0.009523809523809525, 'A290': 0.01904761904761905}",A328,,"    @SuppressLint(""DefaultLocale"")
    private void updateProgress(ViewHolderItem h) {
        if (h == null || h.item == null || h.item.mission instanceof FinishedMission) return;

        DownloadMission mission = (DownloadMission) h.item.mission;
        double done = mission.done;
        long length = mission.getLength();
        long now = System.currentTimeMillis();
        boolean hasError = mission.errCode != ERROR_NOTHING;

        // hide on error
        // show if current resource length is not fetched
        // show if length is unknown
        h.progress.setMarquee(mission.isRecovering() || !hasError && (!mission.isInitialized() || mission.unknownLength));

        double progress;
        if (mission.unknownLength) {
            progress = Double.NaN;
            h.progress.setProgress(0.0f);
        } else {
            progress = done / length;
        }

        if (hasError) {
            h.progress.setProgress(isNotFinite(progress) ? 1d : progress);
            h.status.setText(R.string.msg_error);
        } else if (isNotFinite(progress)) {
            h.status.setText(UNDEFINED_PROGRESS);
        } else {
            h.status.setText(String.format(""%.2f%%"", progress * 100));
            h.progress.setProgress(progress);
        }

        @StringRes int state;
        String sizeStr = Utility.formatBytes(length).concat(""  "");

        if (mission.isPsFailed() || mission.errCode == ERROR_POSTPROCESSING_HOLD) {
            h.size.setText(sizeStr);
            return;
        } else if (!mission.running) {
            state = mission.enqueued ? R.string.queued : R.string.paused;
        } else if (mission.isPsRunning()) {
            state = R.string.post_processing;
        } else if (mission.isRecovering()) {
            state = R.string.recovering;
        } else {
            state = 0;
        }

        if (state != 0) {
            // update state without download speed
            h.size.setText(sizeStr.concat(""("").concat(mContext.getString(state)).concat("")""));
            h.resetSpeedMeasure();
            return;
        }

        if (h.lastTimestamp < 0) {
            h.size.setText(sizeStr);
            h.lastTimestamp = now;
            h.lastDone = done;
            return;
        }

        long deltaTime = now - h.lastTimestamp;
        double deltaDone = done - h.lastDone;

        if (h.lastDone > done) {
            h.lastDone = done;
            h.size.setText(sizeStr);
            return;
        }

        if (deltaDone > 0 && deltaTime > 0) {
            float speed = (float) ((deltaDone * 1000d) / deltaTime);
            float averageSpeed = speed;

            if (h.lastSpeedIdx < 0) {
                Arrays.fill(h.lastSpeed, speed);
                h.lastSpeedIdx = 0;
            } else {
                for (int i = 0; i < h.lastSpeed.length; i++) {
                    averageSpeed += h.lastSpeed[i];
                }
                averageSpeed /= h.lastSpeed.length + 1.0f;
            }

            String speedStr = Utility.formatSpeed(averageSpeed);
            String etaStr;

            if (mission.unknownLength) {
                etaStr = """";
            } else {
                long eta = (long) Math.ceil((length - done) / averageSpeed);
                etaStr = Utility.formatBytes((long) done) + ""/"" + Utility.stringifySeconds(eta) + ""  "";
            }

            h.size.setText(sizeStr.concat(etaStr).concat(speedStr));

            h.lastTimestamp = now;
            h.lastDone = done;
            h.lastSpeed[h.lastSpeedIdx++] = speed;

            if (h.lastSpeedIdx >= h.lastSpeed.length) h.lastSpeedIdx = 0;
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,viewWithFileProvider,void viewWithFileProvider(Mission),"[344, 357]","{'A328': [(344, 351), (357, 357)], 'A324': [(354, 354)], 'A305': [(356, 356)], 'A293': [(352, 353)], 'A300': [(355, 355)]}","{'A328': 0.6428571428571429, 'A324': 0.07142857142857142, 'A305': 0.07142857142857142, 'A293': 0.14285714285714285, 'A300': 0.07142857142857142}",A328,,"    private void viewWithFileProvider(Mission mission) {
        if (checkInvalidFile(mission)) return;

        String mimeType = resolveMimeType(mission);

        if (BuildConfig.DEBUG)
            Log.v(TAG, ""Mime: "" + mimeType + "" package: "" + BuildConfig.APPLICATION_ID + "".provider"");

        Intent intent = new Intent(Intent.ACTION_VIEW);
        intent.setDataAndType(resolveShareableUri(mission), mimeType);
        intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);
        intent.addFlags(FLAG_GRANT_PREFIX_URI_PERMISSION);
        ShareUtils.openIntentInApp(mContext, intent);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,shareFile,void shareFile(Mission),"[359, 378]","{'A328': [(359, 361), (378, 378)], 'A293': [(362, 377)]}","{'A328': 0.2, 'A293': 0.8}",A293,,"    private void shareFile(Mission mission) {
        if (checkInvalidFile(mission)) return;

        final Intent shareIntent = new Intent(Intent.ACTION_SEND);
        shareIntent.setType(resolveMimeType(mission));
        shareIntent.putExtra(Intent.EXTRA_STREAM, resolveShareableUri(mission));
        shareIntent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);

        final Intent intent = new Intent(Intent.ACTION_CHOOSER);
        intent.putExtra(Intent.EXTRA_INTENT, shareIntent);
        // unneeded to set a title to the chooser on Android P and higher because the system
        // ignores this title on these versions
        if (Build.VERSION.SDK_INT <= Build.VERSION_CODES.O_MR1) {
            intent.putExtra(Intent.EXTRA_TITLE, mContext.getString(R.string.share_dialog_title));
        }
        intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
        intent.addFlags(FLAG_GRANT_READ_URI_PERMISSION);

        mContext.startActivity(intent);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,resolveShareableUri,Uri resolveShareableUri(Mission),"[386, 396]","{'A356': [(386, 396)]}",{'A356': 1.0},A356,,"    private Uri resolveShareableUri(Mission mission) {
        if (mission.storage.isDirect()) {
            return FileProvider.getUriForFile(
                mContext,
                BuildConfig.APPLICATION_ID + "".provider"",
                new File(URI.create(mission.storage.getUri().toString()))
            );
        } else {
            return mission.storage.getUri();
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,resolveMimeType,String resolveMimeType(Mission),"[398, 413]","{'A328': [(398, 413)]}",{'A328': 1.0},A328,,"    private static String resolveMimeType(@NonNull Mission mission) {
        String mimeType;

        if (!mission.storage.isInvalid()) {
            mimeType = mission.storage.getType();
            if (mimeType != null && mimeType.length() > 0 && !mimeType.equals(StoredFileHelper.DEFAULT_MIME))
                return mimeType;
        }

        String ext = Utility.getFileExt(mission.storage.getName());
        if (ext == null) return DEFAULT_MIME_TYPE;

        mimeType = MimeTypeMap.getSingleton().getMimeTypeFromExtension(ext.substring(1));

        return mimeType == null ? DEFAULT_MIME_TYPE : mimeType;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,checkInvalidFile,boolean checkInvalidFile(Mission),"[415, 420]","{'A328': [(415, 419)], 'A324': [(420, 420)]}","{'A328': 0.8333333333333334, 'A324': 0.16666666666666666}",A328,,"    private boolean checkInvalidFile(@NonNull Mission mission) {
        if (mission.storage.existsAsFile()) return false;

        Toast.makeText(mContext, R.string.missing_file, Toast.LENGTH_SHORT).show();
        return true;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,getViewHolder,ViewHolderItem getViewHolder(Object),"[422, 427]","{'A328': [(422, 427)]}",{'A328': 1.0},A328,,"    private ViewHolderItem getViewHolder(Object mission) {
        for (ViewHolderItem h : mPendingDownloadsItems) {
            if (h.item.mission == mission) return h;
        }
        return null;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,handleMessage,boolean handleMessage(Message),"[429, 458]","{'A328': [(429, 453), (455, 457)], 'A324': [(454, 454), (458, 458)]}","{'A328': 0.9333333333333333, 'A324': 0.06666666666666667}",A328,,"    @Override
    public boolean handleMessage(@NonNull Message msg) {
        if (mStartButton != null && mPauseButton != null) {
            checkMasterButtonsVisibility();
        }

        switch (msg.what) {
            case DownloadManagerService.MESSAGE_ERROR:
            case DownloadManagerService.MESSAGE_FINISHED:
            case DownloadManagerService.MESSAGE_DELETED:
            case DownloadManagerService.MESSAGE_PAUSED:
                break;
            default:
                return false;
        }

        ViewHolderItem h = getViewHolder(msg.obj);
        if (h == null) return false;

        switch (msg.what) {
            case DownloadManagerService.MESSAGE_FINISHED:
            case DownloadManagerService.MESSAGE_DELETED:
                // DownloadManager should mark the download as finished
                applyChanges();
                return true;
        }

        updateProgress(h);
        return true;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,showError,void showError(DownloadMission),"[460, 551]","{'A328': [(460, 501), (503, 531), (533, 545), (549, 551)], 'A324': [(532, 532), (546, 547)], 'A305': [(548, 548)], 'A298': [(502, 502)]}","{'A328': 0.9456521739130435, 'A324': 0.03260869565217391, 'A305': 0.010869565217391304, 'A298': 0.010869565217391304}",A328,,"    private void showError(@NonNull DownloadMission mission) {
        @StringRes int msg = R.string.general_error;
        String msgEx = null;

        switch (mission.errCode) {
            case 416:
                msg = R.string.error_http_unsupported_range;
                break;
            case 404:
                msg = R.string.error_http_not_found;
                break;
            case ERROR_NOTHING:
                return;// this never should happen
            case ERROR_FILE_CREATION:
                msg = R.string.error_file_creation;
                break;
            case ERROR_HTTP_NO_CONTENT:
                msg = R.string.error_http_no_content;
                break;
            case ERROR_PATH_CREATION:
                msg = R.string.error_path_creation;
                break;
            case ERROR_PERMISSION_DENIED:
                msg = R.string.permission_denied;
                break;
            case ERROR_SSL_EXCEPTION:
                msg = R.string.error_ssl_exception;
                break;
            case ERROR_UNKNOWN_HOST:
                msg = R.string.error_unknown_host;
                break;
            case ERROR_CONNECT_HOST:
                msg = R.string.error_connect_host;
                break;
            case ERROR_POSTPROCESSING_STOPPED:
                msg = R.string.error_postprocessing_stopped;
                break;
            case ERROR_POSTPROCESSING:
            case ERROR_POSTPROCESSING_HOLD:
                showError(mission, UserAction.DOWNLOAD_POSTPROCESSING, R.string.error_postprocessing_failed);
                return;
            case ERROR_INSUFFICIENT_STORAGE:
                msg = R.string.error_insufficient_storage_left;
                break;
            case ERROR_UNKNOWN_EXCEPTION:
                if (mission.errObject != null) {
                    showError(mission, UserAction.DOWNLOAD_FAILED, R.string.general_error);
                    return;
                } else {
                    msg = R.string.msg_error;
                    break;
                }
            case ERROR_PROGRESS_LOST:
                msg = R.string.error_progress_lost;
                break;
            case ERROR_TIMEOUT:
                msg = R.string.error_timeout;
                break;
            case ERROR_RESOURCE_GONE:
                msg = R.string.error_download_resource_gone;
                break;
            default:
                if (mission.errCode >= 100 && mission.errCode < 600) {
                    msgEx = ""HTTP "" + mission.errCode;
                } else if (mission.errObject == null) {
                    msgEx = ""(not_decelerated_error_code)"";
                } else {
                    showError(mission, UserAction.DOWNLOAD_FAILED, msg);
                    return;
                }
                break;
        }

        AlertDialog.Builder builder = new AlertDialog.Builder(mContext);

        if (msgEx != null)
            builder.setMessage(msgEx);
        else
            builder.setMessage(msg);

        // add report button for non-HTTP errors (range 100-599)
        if (mission.errObject != null && (mission.errCode < 100 || mission.errCode >= 600)) {
            @StringRes final int mMsg = msg;
            builder.setPositiveButton(R.string.error_report_title, (dialog, which) ->
                    showError(mission, UserAction.DOWNLOAD_FAILED, mMsg)
            );
        }

        builder.setNegativeButton(R.string.ok, (dialog, which) -> dialog.cancel())
                .setTitle(mission.storage.getName())
                .show();
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,showError,"void showError(DownloadMission,UserAction,int)","[553, 576]","{'A328': [(553, 569), (571, 572), (576, 576)], 'A305': [(570, 570), (573, 575)]}","{'A328': 0.8333333333333334, 'A305': 0.16666666666666666}",A328,,"    private void showError(DownloadMission mission, UserAction action, @StringRes int reason) {
        StringBuilder request = new StringBuilder(256);
        request.append(mission.source);

        request.append("" ["");
        if (mission.recoveryInfo != null) {
            for (MissionRecoveryInfo recovery : mission.recoveryInfo)
                request.append(' ')
                        .append(recovery.toString())
                        .append(' ');
        }
        request.append(""]"");

        String service;
        try {
            service = NewPipe.getServiceByUrl(mission.source).getServiceInfo().getName();
        } catch (Exception e) {
            service = ErrorInfo.SERVICE_NONE;
        }

        ErrorUtil.createNotification(mContext,
                new ErrorInfo(ErrorInfo.Companion.throwableToStringList(mission.errObject), action,
                        service, request.toString(), reason));
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,clearFinishedDownloads,void clearFinishedDownloads(boolean),"[578, 608]","{'A295': [(598, 598), (603, 603)], 'A452': [(578, 588), (590, 597), (599, 602), (604, 608)], 'A440': [(589, 589)]}","{'A295': 0.06451612903225806, 'A452': 0.9032258064516129, 'A440': 0.03225806451612903}",A452,,"    public void clearFinishedDownloads(boolean delete) {
        if (delete && mIterator.hasFinishedMissions() && mHidden.isEmpty()) {
            for (int i = 0; i < mIterator.getOldListSize(); i++) {
                FinishedMission mission = mIterator.getItem(i).mission instanceof FinishedMission ? (FinishedMission) mIterator.getItem(i).mission : null;
                if (mission != null) {
                    mIterator.hide(mission);
                    mHidden.add(mission);
                }
            }
            applyChanges();

            String msg = Localization.deletedDownloadCount(mContext, mHidden.size());
            mSnackbar = Snackbar.make(mView, msg, Snackbar.LENGTH_INDEFINITE);
            mSnackbar.setAction(R.string.undo, s -> {
                Iterator<Mission> i = mHidden.iterator();
                while (i.hasNext()) {
                    mIterator.unHide(i.next());
                    i.remove();
                }
                applyChanges();
                mHandler.removeCallbacksAndMessages(DELETE);
            });
            mSnackbar.setActionTextColor(Color.YELLOW);
            mSnackbar.show();

            HandlerCompat.postDelayed(mHandler, this::deleteFinishedDownloads, DELETE, 5000);
        } else if (!delete) {
            mDownloadManager.forgetFinishedDownloads();
            applyChanges();
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,deleteFinishedDownloads,void deleteFinishedDownloads(),"[610, 622]","{'A328': [(622, 622)], 'A452': [(610, 621)]}","{'A328': 0.07692307692307693, 'A452': 0.9230769230769231}",A452,,"    private void deleteFinishedDownloads() {
        if (mSnackbar != null) mSnackbar.dismiss();

        Iterator<Mission> i = mHidden.iterator();
        while (i.hasNext()) {
            Mission mission = i.next();
            if (mission != null) {
                mDownloadManager.deleteMission(mission);
                mContext.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, mission.storage.getUri()));
            }
            i.remove();
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,handlePopupItem,"boolean handlePopupItem(ViewHolderItem,MenuItem)","[624, 721]","{'A295': [(683, 701), (703, 705)], 'A328': [(624, 662), (665, 675), (706, 721)], 'A324': [(663, 664)], 'A454': [(676, 682)], 'A333': [(702, 702)]}","{'A295': 0.22448979591836735, 'A328': 0.673469387755102, 'A324': 0.02040816326530612, 'A454': 0.07142857142857142, 'A333': 0.01020408163265306}",A328,,"    private boolean handlePopupItem(@NonNull ViewHolderItem h, @NonNull MenuItem option) {
        if (h.item == null) return true;

        int id = option.getItemId();
        DownloadMission mission = h.item.mission instanceof DownloadMission ? (DownloadMission) h.item.mission : null;

        if (mission != null) {
            switch (id) {
                case R.id.start:
                    h.status.setText(UNDEFINED_PROGRESS);
                    mDownloadManager.resumeMission(mission);
                    return true;
                case R.id.pause:
                    mDownloadManager.pauseMission(mission);
                    return true;
                case R.id.error_message_view:
                    showError(mission);
                    return true;
                case R.id.queue:
                    boolean flag = !h.queue.isChecked();
                    h.queue.setChecked(flag);
                    mission.setEnqueued(flag);
                    updateProgress(h);
                    return true;
                case R.id.retry:
                    if (mission.isPsRunning()) {
                        mission.psContinue(true);
                    } else {
                        mDownloadManager.tryRecover(mission);
                        if (mission.storage.isInvalid())
                            mRecover.tryRecover(mission);
                        else
                            recoverMission(mission);
                    }
                    return true;
                case R.id.cancel:
                    mission.psContinue(false);
                    return false;
            }
        }

        switch (id) {
            case R.id.menu_item_share:
                shareFile(h.item.mission);
                return true;
            case R.id.delete:
                mDeleter.append(h.item.mission);
                applyChanges();
                checkMasterButtonsVisibility();
                return true;
            case R.id.md5:
            case R.id.sha1:
                final StoredFileHelper storage = h.item.mission.storage;
                if (!storage.existsAsFile()) {
                    Toast.makeText(mContext, R.string.missing_file, Toast.LENGTH_SHORT).show();
                    mDeleter.append(h.item.mission);
                    applyChanges();
                    return true;
                }
                final NotificationManager notificationManager
                        = ContextCompat.getSystemService(mContext, NotificationManager.class);
                final NotificationCompat.Builder progressNotificationBuilder
                        = new NotificationCompat.Builder(mContext,
                        mContext.getString(R.string.hash_channel_id))
                        .setPriority(NotificationCompat.PRIORITY_HIGH)
                        .setSmallIcon(R.drawable.ic_newpipe_triangle_white)
                        .setContentTitle(mContext.getString(R.string.msg_calculating_hash))
                        .setContentText(mContext.getString(R.string.msg_wait))
                        .setProgress(0, 0, true)
                        .setOngoing(true);

                notificationManager.notify(HASH_NOTIFICATION_ID, progressNotificationBuilder
                        .build());
                compositeDisposable.add(
                        Observable.fromCallable(() -> Utility.checksum(storage, id))
                                .subscribeOn(Schedulers.computation())
                                .observeOn(AndroidSchedulers.mainThread())
                                .subscribe(result -> {
                                    ShareUtils.copyToClipboard(mContext, result);
                                    notificationManager.cancel(HASH_NOTIFICATION_ID);
                                })
                );
                return true;
            case R.id.source:
                /*Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(h.item.mission.source));
                mContext.startActivity(intent);*/
                try {
                    Intent intent = NavigationHelper.getIntentByLink(mContext, h.item.mission.source);
                    intent.addFlags(Intent.FLAG_ACTIVITY_PREVIOUS_IS_TOP);
                    mContext.startActivity(intent);
                } catch (Exception e) {
                    Log.w(TAG, ""Selected item has a invalid source"", e);
                }
                return true;
            default:
                return false;
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,applyChanges,void applyChanges(),"[723, 730]","{'A328': [(723, 730)]}",{'A328': 1.0},A328,,"    public void applyChanges() {
        mIterator.start();
        DiffUtil.calculateDiff(mIterator, true).dispatchUpdatesTo(this);
        mIterator.end();

        checkEmptyMessageVisibility();
        if (mClear != null) mClear.setVisible(mIterator.hasFinishedMissions());
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,forceUpdate,void forceUpdate(),"[732, 741]","{'A328': [(732, 741)]}",{'A328': 1.0},A328,,"    public void forceUpdate() {
        mIterator.start();
        mIterator.end();

        for (ViewHolderItem item : mPendingDownloadsItems) {
            item.resetSpeedMeasure();
        }

        notifyDataSetChanged();
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,setLinear,void setLinear(boolean),"[743, 745]","{'A328': [(743, 745)]}",{'A328': 1.0},A328,,"    public void setLinear(boolean isLinear) {
        mLayout = isLinear ? R.layout.mission_item_linear : R.layout.mission_item;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,setClearButton,void setClearButton(MenuItem),"[747, 752]","{'A328': [(747, 752)]}",{'A328': 1.0},A328,,"    public void setClearButton(MenuItem clearButton) {
        if (mClear == null)
            clearButton.setVisible(mIterator.hasFinishedMissions());

        mClear = clearButton;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,setMasterButtons,"void setMasterButtons(MenuItem,MenuItem)","[754, 761]","{'A328': [(754, 761)]}",{'A328': 1.0},A328,,"    public void setMasterButtons(MenuItem startButton, MenuItem pauseButton) {
        boolean init = mStartButton == null || mPauseButton == null;

        mStartButton = startButton;
        mPauseButton = pauseButton;

        if (init) checkMasterButtonsVisibility();
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,checkEmptyMessageVisibility,void checkEmptyMessageVisibility(),"[763, 766]","{'A328': [(763, 766)]}",{'A328': 1.0},A328,,"    private void checkEmptyMessageVisibility() {
        int flag = mIterator.getOldListSize() > 0 ? View.GONE : View.VISIBLE;
        if (mEmptyMessage.getVisibility() != flag) mEmptyMessage.setVisibility(flag);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,checkMasterButtonsVisibility,void checkMasterButtonsVisibility(),"[768, 773]","{'A328': [(768, 773)]}",{'A328': 1.0},A328,,"    public void checkMasterButtonsVisibility() {
        boolean[] state = mIterator.hasValidPendingMissions();
        Log.d(TAG, ""checkMasterButtonsVisibility() running="" + state[0] + "" paused="" + state[1]);
        setButtonVisible(mPauseButton, state[0]);
        setButtonVisible(mStartButton, state[1]);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,setButtonVisible,"void setButtonVisible(MenuItem,boolean)","[775, 778]","{'A328': [(775, 778)]}",{'A328': 1.0},A328,,"    private static void setButtonVisible(MenuItem button, boolean visible) {
        if (button.isVisible() != visible)
            button.setVisible(visible);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,refreshMissionItems,void refreshMissionItems(),"[780, 786]","{'A328': [(780, 786)]}",{'A328': 1.0},A328,,"    public void refreshMissionItems() {
        for (ViewHolderItem h : mPendingDownloadsItems) {
            if (((DownloadMission) h.item.mission).running) continue;
            updateProgress(h);
            h.resetSpeedMeasure();
        }
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,onDestroy,void onDestroy(),"[788, 791]","{'A295': [(789, 789)], 'A328': [(788, 788), (790, 791)]}","{'A295': 0.25, 'A328': 0.75}",A328,,"    public void onDestroy() {
        compositeDisposable.dispose();
        mDeleter.dispose();
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,onResume,void onResume(),"[793, 796]","{'A295': [(795, 795)], 'A328': [(793, 794), (796, 796)]}","{'A295': 0.25, 'A328': 0.75}",A328,,"    public void onResume() {
        mDeleter.resume();
        HandlerCompat.postDelayed(mHandler, this::updater, UPDATER, 0);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,onPaused,void onPaused(),"[798, 801]","{'A295': [(800, 800)], 'A328': [(798, 799), (801, 801)]}","{'A295': 0.25, 'A328': 0.75}",A328,,"    public void onPaused() {
        mDeleter.pause();
        mHandler.removeCallbacksAndMessages(UPDATER);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,recoverMission,void recoverMission(DownloadMission),"[803, 815]","{'A328': [(803, 815)]}",{'A328': 1.0},A328,,"    public void recoverMission(DownloadMission mission) {
        ViewHolderItem h = getViewHolder(mission);
        if (h == null) return;

        mission.errObject = null;
        mission.resetState(true, false, DownloadMission.ERROR_NOTHING);

        h.status.setText(UNDEFINED_PROGRESS);
        h.size.setText(Utility.formatBytes(mission.getLength()));
        h.progress.setMarquee(true);

        mDownloadManager.resumeMission(mission);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,updater,void updater(),"[817, 826]","{'A295': [(825, 825)], 'A328': [(817, 824), (826, 826)]}","{'A295': 0.1, 'A328': 0.9}",A328,,"    private void updater() {
        for (ViewHolderItem h : mPendingDownloadsItems) {
            // check if the mission is running first
            if (!((DownloadMission) h.item.mission).running) continue;

            updateProgress(h);
        }

        HandlerCompat.postDelayed(mHandler, this::updater, UPDATER, 1000);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,isNotFinite,boolean isNotFinite(double),"[828, 830]","{'A328': [(828, 830)]}",{'A328': 1.0},A328,,"    private boolean isNotFinite(double value) {
        return Double.isNaN(value) || Double.isInfinite(value);
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter,setRecover,void setRecover(RecoverHelper),"[832, 834]","{'A328': [(832, 834)]}",{'A328': 1.0},A328,,"    public void setRecover(@NonNull RecoverHelper callback) {
        mRecover = callback;
    }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter.ViewHolderItem,showPopupMenu,void showPopupMenu(),"[909, 965]","{'A328': [(909, 961), (963, 964)], 'A324': [(962, 962), (965, 965)]}","{'A328': 0.9649122807017544, 'A324': 0.03508771929824561}",A328,,"        private void showPopupMenu() {
            retry.setVisible(false);
            cancel.setVisible(false);
            start.setVisible(false);
            pause.setVisible(false);
            open.setVisible(false);
            queue.setVisible(false);
            showError.setVisible(false);
            delete.setVisible(false);
            source.setVisible(false);
            checksum.setVisible(false);

            DownloadMission mission = item.mission instanceof DownloadMission ? (DownloadMission) item.mission : null;

            if (mission != null) {
                if (mission.hasInvalidStorage()) {
                    retry.setVisible(true);
                    delete.setVisible(true);
                    showError.setVisible(true);
                } else if (mission.isPsRunning()) {
                    switch (mission.errCode) {
                        case ERROR_INSUFFICIENT_STORAGE:
                        case ERROR_POSTPROCESSING_HOLD:
                            retry.setVisible(true);
                            cancel.setVisible(true);
                            showError.setVisible(true);
                            break;
                    }
                } else {
                    if (mission.running) {
                        pause.setVisible(true);
                    } else {
                        if (mission.errCode != ERROR_NOTHING) {
                            showError.setVisible(true);
                        }

                        queue.setChecked(mission.enqueued);

                        delete.setVisible(true);

                        boolean flag = !mission.isPsFailed() && mission.urls.length > 0;
                        start.setVisible(flag);
                        queue.setVisible(flag);
                    }
                }
            } else {
                open.setVisible(true);
                delete.setVisible(true);
                checksum.setVisible(true);
            }

            if (item.mission.source != null && !item.mission.source.isEmpty()) {
                source.setVisible(true);
            }

            popupMenu.show();
        }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter.ViewHolderItem,buildPopup,PopupMenu buildPopup(View),"[967, 973]","{'A328': [(967, 972)], 'A324': [(973, 973)]}","{'A328': 0.8571428571428571, 'A324': 0.14285714285714285}",A328,,"        private PopupMenu buildPopup(final View button) {
            PopupMenu popup = new PopupMenu(mContext, button);
            popup.inflate(R.menu.mission);
            popup.setOnMenuItemClickListener(option -> handlePopupItem(this, option));

            return popup;
        }
"
us.shandian.giga.ui.adapter,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/adapter/MissionAdapter.java,MissionAdapter.ViewHolderItem,resetSpeedMeasure,void resetSpeedMeasure(),"[975, 979]","{'A328': [(975, 979)]}",{'A328': 1.0},A328,,"        private void resetSpeedMeasure() {
            estimatedTimeArrival = UNDEFINED_ETA;
            lastTimestamp = -1;
            lastSpeedIdx = -1;
        }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,setColors,"void setColors(int,int)","[34, 37]","{'A328': [(34, 34)], 'A324': [(35, 37)]}","{'A328': 0.25, 'A324': 0.75}",A324,,"    public void setColors(@ColorInt int background, @ColorInt int foreground) {
        mBackgroundColor = background;
        mForegroundColor = foreground;
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,setProgress,void setProgress(double),"[39, 42]","{'A328': [(39, 40)], 'A324': [(41, 42)]}","{'A328': 0.5, 'A324': 0.5}",A328,,"    public void setProgress(double progress) {
        mProgress = (float) progress;
        invalidateSelf();
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,setMarquee,void setMarquee(boolean),"[44, 52]","{'A328': [(44, 52)]}",{'A328': 1.0},A328,,"    public void setMarquee(boolean marquee) {
        if (marquee == (mMarqueeLine != null)) {
            return;
        }
        mMarqueeLine = marquee ? new Path() : null;
        mMarqueeHandler = marquee ? new Handler(Looper.getMainLooper()) : null;
        mMarqueeSize = 0;
        mMarqueeNext = 0;
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,draw,void draw(Canvas),"[54, 102]","{'A328': [(56, 57), (65, 85), (88, 100)], 'A324': [(54, 55), (58, 64), (101, 102)], 'A455': [(86, 87)]}","{'A328': 0.7346938775510204, 'A324': 0.22448979591836735, 'A455': 0.04081632653061224}",A328,,"    @Override
    public void draw(@NonNull Canvas canvas) {
        int width = getBounds().width();
        int height = getBounds().height();

        Paint paint = new Paint();

        paint.setColor(mBackgroundColor);
        canvas.drawRect(0, 0, width, height, paint);

        paint.setColor(mForegroundColor);

        if (mMarqueeLine != null) {
            if (mMarqueeSize < 1) setupMarquee(width, height);

            int size = mMarqueeSize;
            Paint paint2 = new Paint();
            paint2.setColor(mForegroundColor);
            paint2.setStrokeWidth(size);
            paint2.setStyle(Paint.Style.STROKE);

            size *= 2;

            if (mMarqueeProgress >= size) {
                mMarqueeProgress = 1;
            } else {
                mMarqueeProgress++;
            }

            // render marquee
            width += size * 2;
            Path marquee = new Path();
            for (int i = -size; i < width; i += size) {
                marquee.addPath(mMarqueeLine, ((float)i + mMarqueeProgress), 0);
            }
            marquee.close();

            canvas.drawPath(marquee, paint2);// draw marquee

            if (System.currentTimeMillis() >= mMarqueeNext) {
                // program next update
                mMarqueeNext = System.currentTimeMillis() + MARQUEE_INTERVAL;
                mMarqueeHandler.postDelayed(this::invalidateSelf, MARQUEE_INTERVAL);
            }
            return;
        }

        canvas.drawRect(0, 0, (int) (mProgress * width), height, paint);
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,setAlpha,void setAlpha(int),"[104, 107]","{'A324': [(104, 107)]}",{'A324': 1.0},A324,,"    @Override
    public void setAlpha(int alpha) {
        // Unsupported
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,setColorFilter,void setColorFilter(ColorFilter),"[109, 112]","{'A324': [(109, 112)]}",{'A324': 1.0},A324,,"    @Override
    public void setColorFilter(ColorFilter filter) {
        // Unsupported
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,getOpacity,int getOpacity(),"[114, 117]","{'A324': [(114, 117)]}",{'A324': 1.0},A324,,"    @Override
    public int getOpacity() {
        return PixelFormat.OPAQUE;
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,onBoundsChange,void onBoundsChange(Rect),"[119, 122]","{'A328': [(119, 122)]}",{'A328': 1.0},A328,,"    @Override
    public void onBoundsChange(Rect rect) {
        if (mMarqueeLine != null) setupMarquee(rect.width(), rect.height());
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ProgressDrawable.java,ProgressDrawable,setupMarquee,"void setupMarquee(int,int)","[124, 131]","{'A328': [(124, 124), (126, 131)], 'A290': [(125, 125)]}","{'A328': 0.875, 'A290': 0.125}",A328,,"    private void setupMarquee(int width, int height) {
        mMarqueeSize = (int) ((width * 10.0f) / 100.0f);// the size is 10% of the width

        mMarqueeLine.rewind();
        mMarqueeLine.moveTo(-mMarqueeSize, -mMarqueeSize);
        mMarqueeLine.lineTo(-mMarqueeSize * 4, height + mMarqueeSize);
        mMarqueeLine.close();
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/ToolbarActivity.java,ToolbarActivity,onCreate,void onCreate(Bundle),"[13, 21]","{'A324': [(13, 17), (19, 21)], 'A301': [(18, 18)]}","{'A324': 0.8888888888888888, 'A301': 0.1111111111111111}",A324,,"    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(getLayoutResource());

        mToolbar = this.findViewById(R.id.toolbar);

        setSupportActionBar(mToolbar);
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,append,void append(Mission),"[54, 66]","{'A298': [(54, 54), (62, 66)], 'A295': [(59, 59)], 'A456': [(55, 58), (60, 61)]}","{'A298': 0.46153846153846156, 'A295': 0.07692307692307693, 'A456': 0.46153846153846156}",A298,,"    public void append(Mission item) {
        /* If a mission is removed from the list while the Snackbar for a previously
         * removed item is still showing, commit the action for the previous item
         * immediately. This prevents Snackbars from stacking up in reverse order.
         */
        mHandler.removeCallbacksAndMessages(COMMIT);
        commit();

        mIterator.hide(item);
        items.add(0, item);

        show();
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,forget,void forget(),"[68, 73]","{'A298': [(68, 73)]}",{'A298': 1.0},A298,,"    private void forget() {
        mIterator.unHide(items.remove(0));
        mAdapter.applyChanges();

        show();
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,show,void show(),"[75, 82]","{'A298': [(75, 80), (82, 82)], 'A295': [(81, 81)]}","{'A298': 0.875, 'A295': 0.125}",A298,,"    private void show() {
        if (items.size() < 1) return;

        pause();
        running = true;

        HandlerCompat.postDelayed(mHandler, this::next, NEXT, DELAY);
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,next,void next(),"[84, 95]","{'A298': [(84, 93), (95, 95)], 'A295': [(94, 94)]}","{'A298': 0.9166666666666666, 'A295': 0.08333333333333333}",A298,,"    private void next() {
        if (items.size() < 1) return;

        String msg = mContext.getString(R.string.file_deleted).concat("":\n"").concat(items.get(0).storage.getName());

        snackbar = Snackbar.make(mView, msg, Snackbar.LENGTH_INDEFINITE);
        snackbar.setAction(R.string.undo, s -> forget());
        snackbar.setActionTextColor(Color.YELLOW);
        snackbar.show();

        HandlerCompat.postDelayed(mHandler, this::commit, COMMIT, TIMEOUT);
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,commit,void commit(),"[97, 119]","{'A298': [(97, 119)]}",{'A298': 1.0},A298,,"    private void commit() {
        if (items.size() < 1) return;

        while (items.size() > 0) {
            Mission mission = items.remove(0);
            if (mission.deleted) continue;

            mIterator.unHide(mission);
            mDownloadManager.deleteMission(mission);

            if (mission instanceof FinishedMission) {
                mContext.sendBroadcast(new Intent(Intent.ACTION_MEDIA_SCANNER_SCAN_FILE, mission.storage.getUri()));
            }
            break;
        }

        if (items.size() < 1) {
            pause();
            return;
        }

        show();
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,pause,void pause(),"[121, 127]","{'A298': [(121, 122), (126, 127)], 'A295': [(123, 125)]}","{'A298': 0.5714285714285714, 'A295': 0.42857142857142855}",A298,,"    public void pause() {
        running = false;
        mHandler.removeCallbacksAndMessages(NEXT);
        mHandler.removeCallbacksAndMessages(SHOW);
        mHandler.removeCallbacksAndMessages(COMMIT);
        if (snackbar != null) snackbar.dismiss();
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,resume,void resume(),"[129, 133]","{'A298': [(129, 129), (133, 133)], 'A295': [(130, 132)]}","{'A298': 0.4, 'A295': 0.6}",A295,,"    public void resume() {
        if (!running) {
            HandlerCompat.postDelayed(mHandler, this::show, SHOW, DELAY_RESUME);
        }
    }
"
us.shandian.giga.ui.common,../projects/NewPipe/app/src/main/java/us/shandian/giga/ui/common/Deleter.java,Deleter,dispose,void dispose(),"[135, 142]","{'A298': [(135, 142)]}",{'A298': 1.0},A298,,"    public void dispose() {
        if (items.size() < 1) return;

        pause();

        for (Mission mission : items) mDownloadManager.deleteMission(mission);
        items = null;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/WebMMuxer.java,WebMMuxer,process,int process(SharpStream),"[19, 42]","{'A328': [(19, 42)]}",{'A328': 1.0},A328,,"    @Override
    int process(SharpStream out, SharpStream... sources) throws IOException {
        WebMWriter muxer = new WebMWriter(sources);
        muxer.parseSources();

        // youtube uses a webm with a fake video track that acts as a ""cover image""
        int[] indexes = new int[sources.length];

        for (int i = 0; i < sources.length; i++) {
            WebMTrack[] tracks = muxer.getTracksFromSource(i);
            for (int j = 0; j < tracks.length; j++) {
                if (tracks[j].kind == TrackKind.Audio) {
                    indexes[i] = j;
                    i = sources.length;
                    break;
                }
            }
        }

        muxer.selectTracks(indexes);
        muxer.build(out);

        return OK_RESULT;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,getAlgorithm,"Postprocessing getAlgorithm(String,String[])","[33, 60]","{'A328': [(33, 60)]}",{'A328': 1.0},A328,,"    public static Postprocessing getAlgorithm(@NonNull String algorithmName, String[] args) {
        Postprocessing instance;

        switch (algorithmName) {
            case ALGORITHM_TTML_CONVERTER:
                instance = new TtmlConverter();
                break;
            case ALGORITHM_WEBM_MUXER:
                instance = new WebMMuxer();
                break;
            case ALGORITHM_MP4_FROM_DASH_MUXER:
                instance = new Mp4FromDashMuxer();
                break;
            case ALGORITHM_M4A_NO_DASH:
                instance = new M4aNoDash();
                break;
            case ALGORITHM_OGG_FROM_WEBM_DEMUXER:
                instance = new OggFromWebmDemuxer();
                break;
            /*case ""example-algorithm"":
                instance = new ExampleAlgorithm();*/
            default:
                throw new UnsupportedOperationException(""Unimplemented post-processing algorithm: "" + algorithmName);
        }

        instance.args = args;
        return instance;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,setTemporalDir,void setTemporalDir(File),"[91, 94]","{'A328': [(91, 91), (93, 94)], 'A290': [(92, 92)]}","{'A328': 0.75, 'A290': 0.25}",A328,,"    public void setTemporalDir(@NonNull File directory) {
        long rnd = (int) (Math.random() * 100000.0f);
        tempFile = new File(directory, rnd + ""_"" + System.nanoTime() + "".tmp"");
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,cleanupTemporalDir,void cleanupTemporalDir(),"[96, 105]","{'A328': [(96, 105)]}",{'A328': 1.0},A328,,"    public void cleanupTemporalDir() {
        if (tempFile != null && tempFile.exists()) {
            try {
                //noinspection ResultOfMethodCallIgnored
                tempFile.delete();
            } catch (Exception e) {
                // nothing to do
            }
        }
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,run,void run(DownloadMission),"[108, 210]","{'A328': [(108, 116), (118, 152), (169, 170), (173, 173), (175, 175), (179, 210)], 'A299': [(117, 117)], 'A295': [(153, 168), (171, 172), (174, 174), (176, 178)]}","{'A328': 0.7766990291262136, 'A299': 0.009708737864077669, 'A295': 0.21359223300970873}",A328,,"    public void run(DownloadMission target) throws IOException {
        this.mission = target;

        int result;
        long finalLength = -1;

        mission.done = 0;

        long length = mission.storage.length() - mission.offsets[0];
        mission.length = Math.max(length, mission.nearLength);

        final ProgressReport readProgress = (long position) -> {
            position -= mission.offsets[0];
            if (position > mission.done) mission.done = position;
        };

        if (worksOnSameFile) {
            ChunkFileInputStream[] sources = new ChunkFileInputStream[mission.urls.length];
            try {
                for (int i = 0, j = 1; i < sources.length; i++, j++) {
                    SharpStream source = mission.storage.getStream();
                    long end = j < sources.length ? mission.offsets[j] : source.length();

                    sources[i] = new ChunkFileInputStream(source, mission.offsets[i], end, readProgress);
                }

                if (test(sources)) {
                    for (SharpStream source : sources) source.rewind();

                    OffsetChecker checker = () -> {
                        for (ChunkFileInputStream source : sources) {
                            /*
                             * WARNING: never use rewind() in any chunk after any writing (especially on first chunks)
                             *          or the CircularFileWriter can lead to unexpected results
                             */
                            if (source.isClosed() || source.available() < 1) {
                                continue;// the selected source is not used anymore
                            }

                            return source.getFilePointer() - 1;
                        }

                        return -1;
                    };

                    try (CircularFileWriter out = new CircularFileWriter(
                            mission.storage.getStream(), tempFile, checker)) {
                        out.onProgress = (long position) -> mission.done = position;

                        out.onWriteError = err -> {
                            mission.psState = 3;
                            mission.notifyError(ERROR_POSTPROCESSING_HOLD, err);

                            try {
                                synchronized (this) {
                                    while (mission.psState == 3)
                                        wait();
                                }
                            } catch (InterruptedException e) {
                                // nothing to do
                                Log.e(getClass().getSimpleName(), ""got InterruptedException"");
                            }

                            return mission.errCode == ERROR_NOTHING;
                        };

                        result = process(out, sources);

                        if (result == OK_RESULT)
                            finalLength = out.finalizeFile();
                    }
                } else {
                    result = OK_RESULT;
                }
            } finally {
                for (SharpStream source : sources) {
                    if (source != null && !source.isClosed()) {
                        source.close();
                    }
                }
                if (tempFile != null) {
                    //noinspection ResultOfMethodCallIgnored
                    tempFile.delete();
                    tempFile = null;
                }
            }
        } else {
            result = test() ? process(null) : OK_RESULT;
        }

        if (result == OK_RESULT) {
            if (finalLength != -1) {
                mission.length = finalLength;
            }
        } else {
            mission.errCode = ERROR_POSTPROCESSING;
            mission.errObject = new RuntimeException(""post-processing algorithm returned "" + result);
        }

        if (result != OK_RESULT && worksOnSameFile) mission.storage.delete();

        this.mission = null;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,test,boolean test(),"[219, 221]","{'A328': [(219, 221)]}",{'A328': 1.0},A328,,"    boolean test(SharpStream... sources) throws IOException {
        return true;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,getArgumentAt,"String getArgumentAt(int,String)","[233, 239]","{'A328': [(233, 239)]}",{'A328': 1.0},A328,,"    String getArgumentAt(int index, String defaultValue) {
        if (args == null || index >= args.length) {
            return defaultValue;
        }

        return args[index];
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Postprocessing.java,Postprocessing,toString,String toString(),"[241, 257]","{'A328': [(241, 257)]}",{'A328': 1.0},A328,,"    @NonNull
    @Override
    public String toString() {
        StringBuilder str = new StringBuilder();

        str.append(""{ name="").append(name).append('[');

        if (args != null) {
            for (String arg : args) {
                str.append("", "");
                str.append(arg);
            }
            str.delete(0, 1);
        }

        return str.append(""] }"").toString();
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/OggFromWebmDemuxer.java,OggFromWebmDemuxer,test,boolean test(),"[17, 33]","{'A298': [(17, 33)]}",{'A298': 1.0},A298,,"    @Override
    boolean test(SharpStream... sources) throws IOException {
        ByteBuffer buffer = ByteBuffer.allocate(4);
        sources[0].read(buffer.array());

        // youtube uses WebM as container, but the file extension (format suffix) is ""*.opus""
        // check if the file is a webm/mkv file before proceed

        switch (buffer.getInt()) {
            case 0x1a45dfa3:
                return true;// webm/mkv
            case 0x4F676753:
                return false;// ogg
        }

        throw new UnsupportedOperationException(""file not recognized, failed to demux the audio stream"");
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/OggFromWebmDemuxer.java,OggFromWebmDemuxer,process,int process(SharpStream),"[35, 43]","{'A298': [(35, 43)]}",{'A298': 1.0},A298,,"    @Override
    int process(SharpStream out, @NonNull SharpStream... sources) throws IOException {
        OggFromWebMWriter demuxer = new OggFromWebMWriter(sources[0], out);
        demuxer.parseSource();
        demuxer.selectTrack(0);
        demuxer.build();

        return OK_RESULT;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/Mp4FromDashMuxer.java,Mp4FromDashMuxer,process,int process(SharpStream),"[17, 25]","{'A328': [(17, 25)]}",{'A328': 1.0},A328,,"    @Override
    int process(SharpStream out, SharpStream... sources) throws IOException {
        Mp4FromDashWriter muxer = new Mp4FromDashWriter(sources);
        muxer.parseSources();
        muxer.selectTracks(0, 0);
        muxer.build(out);

        return OK_RESULT;
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/TtmlConverter.java,TtmlConverter,process,int process(SharpStream),"[21, 48]","{'A328': [(21, 48)]}",{'A328': 1.0},A328,,"    @Override
    int process(SharpStream out, SharpStream... sources) throws IOException {
        // check if the subtitle is already in srt and copy, this should never happen
        String format = getArgumentAt(0, null);
        boolean ignoreEmptyFrames = getArgumentAt(1, ""true"").equals(""true"");

        if (format == null || format.equals(""ttml"")) {
            SrtFromTtmlWriter writer = new SrtFromTtmlWriter(out, ignoreEmptyFrames);

            try {
                writer.build(sources[0]);
            } catch (Exception err) {
                Log.e(TAG, ""subtitle parse failed"", err);
                return err instanceof IOException ? 1 : 8;
            }

            return OK_RESULT;
        } else if (format.equals(""srt"")) {
            byte[] buffer = new byte[8 * 1024];
            int read;
            while ((read = sources[0].read(buffer)) > 0) {
                out.write(buffer, 0, read);
            }
            return OK_RESULT;
        }

        throw new UnsupportedOperationException(""Can't convert this subtitle, unimplemented format: "" + format);
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/M4aNoDash.java,M4aNoDash,test,boolean test(),"[15, 29]","{'A328': [(15, 29)]}",{'A328': 1.0},A328,,"    @Override
    boolean test(SharpStream... sources) throws IOException {
        // check if the mp4 file is DASH (youtube)

        Mp4DashReader reader = new Mp4DashReader(sources[0]);
        reader.parse();

        switch (reader.getBrands()[0]) {
            case 0x64617368:// DASH
            case 0x69736F35:// ISO5
                return true;
            default:
                return false;
        }
    }
"
us.shandian.giga.postprocessing,../projects/NewPipe/app/src/main/java/us/shandian/giga/postprocessing/M4aNoDash.java,M4aNoDash,process,int process(SharpStream),"[31, 40]","{'A328': [(31, 40)]}",{'A328': 1.0},A328,,"    @Override
    int process(SharpStream out, SharpStream... sources) throws IOException {
        Mp4FromDashWriter muxer = new Mp4FromDashWriter(sources[0]);
        muxer.setMainBrand(0x4D344120);// binary string ""M4A ""
        muxer.parseSources();
        muxer.selectTracks(0);
        muxer.build(out);

        return OK_RESULT;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,read,int read(),"[27, 30]","{'A328': [(27, 30)]}",{'A328': 1.0},A328,,"    @Override
    public int read() throws IOException {
        return source.read();
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,read,int read(byte[]),"[32, 35]","{'A328': [(32, 32), (34, 35)], 'A299': [(33, 33)]}","{'A328': 0.75, 'A299': 0.25}",A328,,"    @Override
    public int read(byte[] b) throws IOException {
        return source.read(b);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,read,"int read(byte[],int,int)","[37, 40]","{'A328': [(37, 37), (39, 40)], 'A299': [(38, 38)]}","{'A328': 0.75, 'A299': 0.25}",A328,,"    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        return source.read(b, off, len);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,skip,long skip(long),"[42, 45]","{'A328': [(42, 45)]}",{'A328': 1.0},A328,,"    @Override
    public long skip(long pos) throws IOException {
        return source.skipBytes((int) pos);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,available,long available(),"[47, 54]","{'A328': [(47, 54)]}",{'A328': 1.0},A328,,"    @Override
    public long available() {
        try {
            return source.length() - source.getFilePointer();
        } catch (IOException e) {
            return 0;
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,close,void close(),"[56, 65]","{'A328': [(56, 65)]}",{'A328': 1.0},A328,,"    @Override
    public void close() {
        if (source == null) return;
        try {
            source.close();
        } catch (IOException err) {
            // nothing to do
        }
        source = null;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,isClosed,boolean isClosed(),"[67, 70]","{'A328': [(67, 70)]}",{'A328': 1.0},A328,,"    @Override
    public boolean isClosed() {
        return source == null;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,rewind,void rewind(),"[72, 75]","{'A328': [(72, 75)]}",{'A328': 1.0},A328,,"    @Override
    public void rewind() throws IOException {
        source.seek(0);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,canRewind,boolean canRewind(),"[77, 80]","{'A328': [(77, 80)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRewind() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,canRead,boolean canRead(),"[82, 85]","{'A328': [(82, 85)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRead() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,canWrite,boolean canWrite(),"[87, 90]","{'A328': [(87, 90)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canWrite() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,canSeek,boolean canSeek(),"[92, 95]","{'A328': [(92, 95)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canSeek() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,canSetLength,boolean canSetLength(),"[97, 100]","{'A328': [(97, 100)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canSetLength() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,write,void write(byte),"[102, 105]","{'A328': [(102, 105)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte value) throws IOException {
        source.write(value);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,write,void write(byte[]),"[107, 110]","{'A328': [(107, 110)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] buffer) throws IOException {
        source.write(buffer);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,write,"void write(byte[],int,int)","[112, 115]","{'A328': [(112, 115)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] buffer, int offset, int count) throws IOException {
        source.write(buffer, offset, count);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,setLength,void setLength(long),"[117, 120]","{'A328': [(117, 120)]}",{'A328': 1.0},A328,,"    @Override
    public void setLength(long length) throws IOException {
        source.setLength(length);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,seek,void seek(long),"[122, 125]","{'A328': [(122, 125)]}",{'A328': 1.0},A328,,"    @Override
    public void seek(long offset) throws IOException {
        source.seek(offset);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStream.java,FileStream,length,long length(),"[127, 130]","{'A328': [(127, 130)]}",{'A328': 1.0},A328,,"    @Override
    public long length() throws IOException {
        return source.length();
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,flushAuxiliar,void flushAuxiliar(long),"[47, 130]","{'A328': [(47, 130)]}",{'A328': 1.0},A328,,"    private void flushAuxiliar(long amount) throws IOException {
        if (aux.length < 1) {
            return;
        }

        out.flush();
        aux.flush();

        boolean underflow = aux.offset < aux.length || out.offset < out.length;
        byte[] buffer = new byte[COPY_BUFFER_SIZE];

        aux.target.seek(0);
        out.target.seek(out.length);

        long length = amount;
        while (length > 0) {
            int read = (int) Math.min(length, Integer.MAX_VALUE);
            read = aux.target.read(buffer, 0, Math.min(read, buffer.length));

            if (read < 1) {
                amount -= length;
                break;
            }

            out.writeProof(buffer, read);
            length -= read;
        }

        if (underflow) {
            if (out.offset >= out.length) {
                // calculate the aux underflow pointer
                if (aux.offset < amount) {
                    out.offset += aux.offset;
                    aux.offset = 0;
                    out.target.seek(out.offset);
                } else {
                    aux.offset -= amount;
                    out.offset = out.length + amount;
                }
            } else {
                aux.offset = 0;
            }
        } else {
            out.offset += amount;
            aux.offset -= amount;
        }

        out.length += amount;

        if (out.length > maxLengthKnown) {
            maxLengthKnown = out.length;
        }

        if (amount < aux.length) {
            // move the excess data to the beginning of the file
            long readOffset = amount;
            long writeOffset = 0;

            aux.length -= amount;
            length = aux.length;
            while (length > 0) {
                int read = (int) Math.min(length, Integer.MAX_VALUE);
                read = aux.target.read(buffer, 0, Math.min(read, buffer.length));

                aux.target.seek(writeOffset);
                aux.writeProof(buffer, read);

                writeOffset += read;
                readOffset += read;
                length -= read;

                aux.target.seek(readOffset);
            }

            aux.target.setLength(aux.length);
            return;
        }

        if (aux.length > THRESHOLD_AUX_LENGTH) {
            aux.target.setLength(THRESHOLD_AUX_LENGTH);// or setLength(0);
        }

        aux.reset();
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,finalizeFile,long finalizeFile(),"[139, 153]","{'A328': [(139, 153)]}",{'A328': 1.0},A328,,"    public long finalizeFile() throws IOException {
        flushAuxiliar(aux.length);

        out.flush();

        // change file length (if required)
        long length = Math.max(maxLengthKnown, out.length);
        if (length != out.target.length()) {
            out.target.setLength(length);
        }

        close();

        return length;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,close,void close(),"[158, 168]","{'A328': [(158, 168)]}",{'A328': 1.0},A328,,"    @Override
    public void close() {
        if (out != null) {
            out.close();
            out = null;
        }
        if (aux != null) {
            aux.close();
            aux = null;
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,write,void write(byte),"[170, 173]","{'A328': [(170, 173)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte b) throws IOException {
        write(new byte[]{b}, 0, 1);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,write,void write(byte[]),"[175, 178]","{'A328': [(175, 178)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] b) throws IOException {
        write(b, 0, b.length);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,write,"void write(byte[],int,int)","[180, 241]","{'A328': [(180, 241)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        if (len == 0) {
            return;
        }

        long available;
        long offsetOut = out.getOffset();
        long offsetAux = aux.getOffset();
        long end = callback.check();

        if (end == -1) {
            available = Integer.MAX_VALUE;
        } else if (end < offsetOut) {
            throw new IOException(""The reported offset is invalid: "" + end + ""<"" + offsetOut);
        } else {
            available = end - offsetOut;
        }

        boolean usingAux = aux.length > 0 && offsetOut >= out.length;
        boolean underflow = offsetAux < aux.length || offsetOut < out.length;

        if (usingAux) {
            // before continue calculate the final length of aux
            long length = offsetAux + len;
            if (underflow) {
                if (aux.length > length) {
                    length = aux.length;// the length is not changed
                }
            } else {
                length = aux.length + len;
            }

            aux.write(b, off, len);

            if (length >= THRESHOLD_AUX_LENGTH && length <= available) {
                flushAuxiliar(available);
            }
        } else {
            if (underflow) {
                available = out.length - offsetOut;
            }

            int length = Math.min(len, (int) Math.min(Integer.MAX_VALUE, available));
            out.write(b, off, length);

            len -= length;
            off += length;

            if (len > 0) {
                aux.write(b, off, len);
            }
        }

        if (onProgress != null) {
            long absoluteOffset = out.getOffset() + aux.getOffset();
            if (absoluteOffset > reportPosition) {
                reportPosition = absoluteOffset + NOTIFY_BYTES_INTERVAL;
                onProgress.report(absoluteOffset);
            }
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,flush,void flush(),"[243, 252]","{'A328': [(243, 252)]}",{'A328': 1.0},A328,,"    @Override
    public void flush() throws IOException {
        aux.flush();
        out.flush();

        long total = out.length + aux.length;
        if (total > maxLengthKnown) {
            maxLengthKnown = total;// save the current file length in case the method {@code rewind()} is called
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,skip,long skip(long),"[254, 258]","{'A328': [(254, 258)]}",{'A328': 1.0},A328,,"    @Override
    public long skip(long amount) throws IOException {
        seek(out.getOffset() + aux.getOffset() + amount);
        return amount;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,rewind,void rewind(),"[260, 269]","{'A328': [(260, 269)]}",{'A328': 1.0},A328,,"    @Override
    public void rewind() throws IOException {
        if (onProgress != null) {
            onProgress.report(0);// rollback the whole progress
        }

        seek(0);

        reportPosition = NOTIFY_BYTES_INTERVAL;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,seek,void seek(long),"[271, 297]","{'A328': [(271, 297)]}",{'A328': 1.0},A328,,"    @Override
    public void seek(long offset) throws IOException {
        long total = out.length + aux.length;

        if (offset == total) {
            // do not ignore the seek offset if a underflow exists
            long relativeOffset = out.getOffset() + aux.getOffset();
            if (relativeOffset == total) {
                return;
            }
        }

        // flush everything, avoid any underflow
        flush();

        if (offset < 0 || offset > total) {
            throw new IOException(""desired offset is outside of range=0-"" + total + "" offset="" + offset);
        }

        if (offset > out.length) {
            out.seek(out.length);
            aux.seek(offset - out.length);
        } else {
            out.seek(offset);
            aux.seek(0);
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,isClosed,boolean isClosed(),"[299, 302]","{'A328': [(299, 302)]}",{'A328': 1.0},A328,,"    @Override
    public boolean isClosed() {
        return out == null;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,canRewind,boolean canRewind(),"[304, 307]","{'A328': [(304, 307)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRewind() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,canWrite,boolean canWrite(),"[309, 312]","{'A328': [(309, 312)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canWrite() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,canSeek,boolean canSeek(),"[314, 317]","{'A328': [(314, 317)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canSeek() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,canRead,boolean canRead(),"[320, 323]","{'A328': [(320, 323)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRead() {
        return false;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,read,int read(),"[325, 328]","{'A328': [(325, 328)]}",{'A328': 1.0},A328,,"    @Override
    public int read() {
        throw new UnsupportedOperationException(""write-only"");
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,read,int read(byte[]),"[330, 334]","{'A328': [(330, 334)]}",{'A328': 1.0},A328,,"    @Override
    public int read(byte[] buffer
    ) {
        throw new UnsupportedOperationException(""write-only"");
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,read,"int read(byte[],int,int)","[336, 340]","{'A328': [(336, 340)]}",{'A328': 1.0},A328,,"    @Override
    public int read(byte[] buffer, int offset, int count
    ) {
        throw new UnsupportedOperationException(""write-only"");
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter,available,long available(),"[342, 345]","{'A328': [(342, 345)]}",{'A328': 1.0},A328,,"    @Override
    public long available() {
        throw new UnsupportedOperationException(""write-only"");
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,getOffset,long getOffset(),"[389, 391]","{'A328': [(389, 391)]}",{'A328': 1.0},A328,,"        long getOffset() {
            return offset + queueSize;// absolute offset in the file
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,close,void close(),"[393, 396]","{'A328': [(393, 396)]}",{'A328': 1.0},A328,,"        void close() {
            queue = null;
            target.close();
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,write,"void write(byte[],int,int)","[398, 415]","{'A328': [(398, 415)]}",{'A328': 1.0},A328,,"        void write(byte[] b, int off, int len) throws IOException {
            while (len > 0) {
                // if the queue is full, the method available() will flush the queue
                int read = Math.min(available(), len);

                // enqueue incoming buffer
                System.arraycopy(b, off, queue, queueSize, read);
                queueSize += read;

                len -= read;
                off += read;
            }

            long total = offset + queueSize;
            if (total > length) {
                length = total;// save length
            }
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,flush,void flush(),"[417, 421]","{'A328': [(417, 421)]}",{'A328': 1.0},A328,,"        void flush() throws IOException {
            writeProof(queue, queueSize);
            offset += queueSize;
            queueSize = 0;
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,rewind,void rewind(),"[423, 426]","{'A328': [(423, 426)]}",{'A328': 1.0},A328,,"        protected void rewind() throws IOException {
            offset = 0;
            target.seek(0);
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,available,int available(),"[428, 435]","{'A328': [(428, 435)]}",{'A328': 1.0},A328,,"        int available() throws IOException {
            if (queueSize >= queue.length) {
                flush();
                return queue.length;
            }

            return queue.length - queueSize;
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,reset,void reset(),"[437, 441]","{'A328': [(437, 441)]}",{'A328': 1.0},A328,,"        void reset() throws IOException {
            offset = 0;
            length = 0;
            target.seek(0);
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,seek,void seek(long),"[443, 449]","{'A328': [(443, 449)]}",{'A328': 1.0},A328,,"        void seek(long absoluteOffset) throws IOException {
            if (absoluteOffset == offset) {
                return;// nothing to do
            }
            offset = absoluteOffset;
            target.seek(absoluteOffset);
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,writeProof,"void writeProof(byte[],int)","[451, 467]","{'A328': [(451, 467)]}",{'A328': 1.0},A328,,"        void writeProof(byte[] buffer, int length) throws IOException {
            if (onWriteError == null) {
                target.write(buffer, 0, length);
                return;
            }

            while (true) {
                try {
                    target.write(buffer, 0, length);
                    return;
                } catch (Exception e) {
                    if (!onWriteError.handle(e)) {
                        throw e;// give up
                    }
                }
            }
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/CircularFileWriter.java,CircularFileWriter.BufferedFile,toString,String toString(),"[469, 484]","{'A328': [(469, 484)]}",{'A328': 1.0},A328,,"        @NonNull
        @Override
        public String toString() {
            String absLength;

            try {
                absLength = Long.toString(target.length());
            } catch (IOException e) {
                absLength = ""["" + e.getLocalizedMessage() + ""]"";
            }

            return String.format(
                    ""offset=%s  length=%s  queue=%s  absLength=%s"",
                    offset, length, queueSize, absLength
            );
        }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,getFilePointer,long getFilePointer(),"[46, 48]","{'A328': [(46, 48)]}",{'A328': 1.0},A328,,"    public long getFilePointer() {
        return offset + position;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,read,int read(),"[50, 62]","{'A328': [(50, 62)]}",{'A328': 1.0},A328,,"    @Override
    public int read() throws IOException {
        if ((position + 1) > length) {
            return 0;
        }

        int res = source.read();
        if (res >= 0) {
            position++;
        }

        return res;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,read,int read(byte[]),"[64, 67]","{'A328': [(64, 67)]}",{'A328': 1.0},A328,,"    @Override
    public int read(byte[] b) throws IOException {
        return read(b, 0, b.length);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,read,"int read(byte[],int,int)","[69, 87]","{'A328': [(69, 87)]}",{'A328': 1.0},A328,,"    @Override
    public int read(byte[] b, int off, int len) throws IOException {
        if ((position + len) > length) {
            len = (int) (length - position);
        }
        if (len == 0) {
            return 0;
        }

        int res = source.read(b, off, len);
        position += res;

        if (onProgress != null && position > progressReport) {
            onProgress.report(position);
            progressReport = position + REPORT_INTERVAL;
        }

        return res;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,skip,long skip(long),"[89, 103]","{'A328': [(89, 103)]}",{'A328': 1.0},A328,,"    @Override
    public long skip(long pos) throws IOException {
        pos = Math.min(pos + position, length);

        if (pos == 0) {
            return 0;
        }

        source.seek(offset + pos);

        long oldPos = position;
        position = pos;

        return pos - oldPos;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,available,long available(),"[105, 108]","{'A328': [(105, 108)]}",{'A328': 1.0},A328,,"    @Override
    public long available() {
        return length - position;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,close,void close(),"[110, 115]","{'A328': [(110, 115)]}",{'A328': 1.0},A328,,"    @SuppressWarnings(""EmptyCatchBlock"")
    @Override
    public void close() {
        source.close();
        source = null;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,isClosed,boolean isClosed(),"[117, 120]","{'A328': [(117, 120)]}",{'A328': 1.0},A328,,"    @Override
    public boolean isClosed() {
        return source == null;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,rewind,void rewind(),"[122, 126]","{'A328': [(122, 126)]}",{'A328': 1.0},A328,,"    @Override
    public void rewind() throws IOException {
        position = 0;
        source.seek(offset);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,canRewind,boolean canRewind(),"[128, 131]","{'A328': [(128, 131)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRewind() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,canRead,boolean canRead(),"[133, 136]","{'A328': [(133, 136)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRead() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,canWrite,boolean canWrite(),"[138, 141]","{'A328': [(138, 141)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canWrite() {
        return false;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,write,void write(byte),"[143, 145]","{'A328': [(143, 145)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte value) {
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,write,void write(byte[]),"[147, 149]","{'A328': [(147, 149)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] buffer) {
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/ChunkFileInputStream.java,ChunkFileInputStream,write,"void write(byte[],int,int)","[151, 153]","{'A328': [(151, 153)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] buffer, int offset, int count) {
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,read,int read(),"[43, 46]","{'A328': [(43, 46)]}",{'A328': 1.0},A328,,"    @Override
    public int read() throws IOException {
        return in.read();
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,read,int read(byte[]),"[48, 51]","{'A328': [(48, 51)]}",{'A328': 1.0},A328,,"    @Override
    public int read(byte[] buffer) throws IOException {
        return in.read(buffer);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,read,"int read(byte[],int,int)","[53, 56]","{'A328': [(53, 56)]}",{'A328': 1.0},A328,,"    @Override
    public int read(byte[] buffer, int offset, int count) throws IOException {
        return in.read(buffer, offset, count);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,skip,long skip(long),"[58, 61]","{'A328': [(58, 61)]}",{'A328': 1.0},A328,,"    @Override
    public long skip(long amount) throws IOException {
        return in.skip(amount);// ¿or use channel.position(channel.position() + amount)?
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,available,long available(),"[63, 70]","{'A328': [(63, 70)]}",{'A328': 1.0},A328,,"    @Override
    public long available() {
        try {
            return in.available();
        } catch (IOException e) {
            return 0;// ¡but not -1!
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,rewind,void rewind(),"[72, 75]","{'A328': [(72, 75)]}",{'A328': 1.0},A328,,"    @Override
    public void rewind() throws IOException {
        seek(0);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,close,void close(),"[77, 89]","{'A328': [(77, 89)]}",{'A328': 1.0},A328,,"    @Override
    public void close() {
        try {
            disposed = true;

            file.close();
            in.close();
            out.close();
            channel.close();
        } catch (IOException e) {
            Log.e(""FileStreamSAF"", ""close() error"", e);
        }
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,isClosed,boolean isClosed(),"[91, 94]","{'A328': [(91, 94)]}",{'A328': 1.0},A328,,"    @Override
    public boolean isClosed() {
        return disposed;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,canRewind,boolean canRewind(),"[96, 99]","{'A328': [(96, 99)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRewind() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,canRead,boolean canRead(),"[101, 104]","{'A328': [(101, 104)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canRead() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,canWrite,boolean canWrite(),"[106, 109]","{'A328': [(106, 109)]}",{'A328': 1.0},A328,,"    @Override
    public boolean canWrite() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,canSetLength,boolean canSetLength(),"[111, 114]","{'A328': [(112, 114)], 'A298': [(111, 111)]}","{'A328': 0.75, 'A298': 0.25}",A328,,"    @Override
    public boolean canSetLength() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,canSeek,boolean canSeek(),"[116, 119]","{'A328': [(117, 119)], 'A298': [(116, 116)]}","{'A328': 0.75, 'A298': 0.25}",A328,,"    @Override
    public boolean canSeek() {
        return true;
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,write,void write(byte),"[121, 124]","{'A328': [(121, 124)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte value) throws IOException {
        out.write(value);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,write,void write(byte[]),"[126, 129]","{'A328': [(126, 129)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] buffer) throws IOException {
        out.write(buffer);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,write,"void write(byte[],int,int)","[131, 134]","{'A328': [(131, 134)]}",{'A328': 1.0},A328,,"    @Override
    public void write(byte[] buffer, int offset, int count) throws IOException {
        out.write(buffer, offset, count);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,setLength,void setLength(long),"[136, 139]","{'A328': [(137, 139)], 'A298': [(136, 136)]}","{'A328': 0.75, 'A298': 0.25}",A328,,"    @Override
    public void setLength(long length) throws IOException {
        channel.truncate(length);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,seek,void seek(long),"[141, 144]","{'A328': [(142, 144)], 'A298': [(141, 141)]}","{'A328': 0.75, 'A298': 0.25}",A328,,"    @Override
    public void seek(long offset) throws IOException {
        channel.position(offset);
    }
"
us.shandian.giga.io,../projects/NewPipe/app/src/main/java/us/shandian/giga/io/FileStreamSAF.java,FileStreamSAF,length,long length(),"[146, 149]","{'A328': [(146, 149)]}",{'A328': 1.0},A328,,"    @Override
    public long length() throws IOException {
        return channel.size();
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,formatBytes,String formatBytes(long),"[43, 54]","{'A328': [(44, 44), (46, 46), (48, 48), (50, 50), (52, 52)], 'A324': [(43, 43), (45, 45), (47, 47), (49, 49), (51, 51), (53, 54)]}","{'A328': 0.4166666666666667, 'A324': 0.5833333333333334}",A324,,"    public static String formatBytes(long bytes) {
        Locale locale = Locale.getDefault();
        if (bytes < 1024) {
            return String.format(locale, ""%d B"", bytes);
        } else if (bytes < 1024 * 1024) {
            return String.format(locale, ""%.2f kB"", bytes / 1024d);
        } else if (bytes < 1024 * 1024 * 1024) {
            return String.format(locale, ""%.2f MB"", bytes / 1024d / 1024d);
        } else {
            return String.format(locale, ""%.2f GB"", bytes / 1024d / 1024d / 1024d);
        }
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,formatSpeed,String formatSpeed(double),"[56, 67]","{'A328': [(56, 57), (59, 59), (61, 61), (63, 63), (65, 65)], 'A324': [(58, 58), (60, 60), (62, 62), (64, 64), (66, 67)]}","{'A328': 0.5, 'A324': 0.5}",A328,,"    public static String formatSpeed(double speed) {
        Locale locale = Locale.getDefault();
        if (speed < 1024) {
            return String.format(locale, ""%.2f B/s"", speed);
        } else if (speed < 1024 * 1024) {
            return String.format(locale, ""%.2f kB/s"", speed / 1024);
        } else if (speed < 1024 * 1024 * 1024) {
            return String.format(locale, ""%.2f MB/s"", speed / 1024 / 1024);
        } else {
            return String.format(locale, ""%.2f GB/s"", speed / 1024 / 1024 / 1024);
        }
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,writeToFile,"void writeToFile(File,Serializable)","[69, 77]","{'A328': [(69, 69), (71, 71), (76, 76)], 'A324': [(73, 73), (75, 75)], 'A342': [(70, 70), (72, 72), (74, 74), (77, 77)]}","{'A328': 0.3333333333333333, 'A324': 0.2222222222222222, 'A342': 0.4444444444444444}",A342,,"    public static void writeToFile(@NonNull File file, @NonNull Serializable serializable) {

        try (ObjectOutputStream objectOutputStream = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(file)))) {
            objectOutputStream.writeObject(serializable);
        } catch (Exception e) {
            //nothing to do
        }
        //nothing to do
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,readFromFile,T readFromFile(File),"[79, 93]","{'A328': [(81, 82), (88, 89)], 'A295': [(84, 85)], 'A324': [(83, 83), (87, 87), (90, 91), (93, 93)], 'A342': [(79, 80), (86, 86), (92, 92)]}","{'A328': 0.26666666666666666, 'A295': 0.13333333333333333, 'A324': 0.3333333333333333, 'A342': 0.26666666666666666}",A324,,"    @Nullable
    @SuppressWarnings(""unchecked"")
    public static <T> T readFromFile(File file) {
        T object;

        try (ObjectInputStream objectInputStream =
                     new ObjectInputStream(new FileInputStream(file))) {
            object = (T) objectInputStream.readObject();
        } catch (Exception e) {
            Log.e(""Utility"", ""Failed to deserialize the object"", e);
            object = null;
        }

        return object;
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getFileExt,String getFileExt(String),"[95, 115]","{'A324': [(95, 115)]}",{'A324': 1.0},A324,,"    @Nullable
    public static String getFileExt(String url) {
        int index;
        if ((index = url.indexOf(""?"")) > -1) {
            url = url.substring(0, index);
        }

        index = url.lastIndexOf(""."");
        if (index == -1) {
            return null;
        } else {
            String ext = url.substring(index);
            if ((index = ext.indexOf(""%"")) > -1) {
                ext = ext.substring(0, index);
            }
            if ((index = ext.indexOf(""/"")) > -1) {
                ext = ext.substring(0, index);
            }
            return ext.toLowerCase();
        }
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getFileType,"FileType getFileType(char,String)","[117, 138]","{'A328': [(117, 130), (136, 137)], 'A324': [(131, 135), (138, 138)]}","{'A328': 0.7272727272727273, 'A324': 0.2727272727272727}",A328,,"    public static FileType getFileType(char kind, String file) {
        switch (kind) {
            case 'v':
                return FileType.VIDEO;
            case 'a':
                return FileType.MUSIC;
            case 's':
                return FileType.SUBTITLE;
            //default '?':
        }

        if (file.endsWith("".srt"") || file.endsWith("".vtt"") || file.endsWith("".ssa"")) {
            return FileType.SUBTITLE;
        } else if (file.endsWith("".mp3"") || file.endsWith("".wav"") || file.endsWith("".flac"") || file.endsWith("".m4a"") || file.endsWith("".opus"")) {
            return FileType.MUSIC;
        } else if (file.endsWith("".mp4"") || file.endsWith("".mpeg"") || file.endsWith("".rm"") || file.endsWith("".rmvb"")
                || file.endsWith("".flv"") || file.endsWith("".webp"") || file.endsWith("".webm"")) {
            return FileType.VIDEO;
        }

        return FileType.UNKNOWN;
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getBackgroundForFileType,"int getBackgroundForFileType(Context,FileType)","[140, 158]","{'A328': [(140, 142), (145, 146), (148, 152), (154, 154), (156, 157)], 'A324': [(143, 144), (147, 147), (153, 153), (155, 155), (158, 158)]}","{'A328': 0.6842105263157895, 'A324': 0.3157894736842105}",A328,,"    @ColorInt
    public static int getBackgroundForFileType(Context ctx, FileType type) {
        int colorRes;
        switch (type) {
            case MUSIC:
                colorRes = R.color.audio_left_to_load_color;
                break;
            case VIDEO:
                colorRes = R.color.video_left_to_load_color;
                break;
            case SUBTITLE:
                colorRes = R.color.subtitle_left_to_load_color;
                break;
            default:
                colorRes = R.color.gray;
        }

        return ContextCompat.getColor(ctx, colorRes);
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getForegroundForFileType,"int getForegroundForFileType(Context,FileType)","[160, 179]","{'A328': [(160, 162), (165, 166), (168, 172), (174, 175), (177, 178)], 'A324': [(163, 164), (167, 167), (173, 173), (176, 176), (179, 179)]}","{'A328': 0.7, 'A324': 0.3}",A328,,"    @ColorInt
    public static int getForegroundForFileType(Context ctx, FileType type) {
        int colorRes;
        switch (type) {
            case MUSIC:
                colorRes = R.color.audio_already_load_color;
                break;
            case VIDEO:
                colorRes = R.color.video_already_load_color;
                break;
            case SUBTITLE:
                colorRes = R.color.subtitle_already_load_color;
                break;
            default:
                colorRes = R.color.gray;
                break;
        }

        return ContextCompat.getColor(ctx, colorRes);
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getIconForFileType,int getIconForFileType(FileType),"[181, 192]","{'A328': [(186, 186), (189, 189)], 'A324': [(181, 184), (187, 187), (191, 192)], 'A312': [(185, 185), (188, 188), (190, 190)]}","{'A328': 0.16666666666666666, 'A324': 0.5833333333333334, 'A312': 0.25}",A324,,"    @DrawableRes
    public static int getIconForFileType(FileType type) {
        switch (type) {
            case MUSIC:
                return R.drawable.ic_headset;
            default:
            case VIDEO:
                return R.drawable.ic_movie;
            case SUBTITLE:
                return R.drawable.ic_subtitles;
        }
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,checksum,"String checksum(StoredFileHelper,int)","[194, 206]","{'A295': [(194, 198), (200, 203), (205, 205)], 'A324': [(199, 199), (204, 204), (206, 206)]}","{'A295': 0.7692307692307693, 'A324': 0.23076923076923078}",A295,,"    public static String checksum(final StoredFileHelper source, final int algorithmId)
            throws IOException {
        ByteString byteString;
        try (var inputStream = new SharpInputStream(source.getStream())) {
            byteString = ByteString.of(Util.toByteArray(inputStream));
        }
        if (algorithmId == R.id.md5) {
            byteString = byteString.md5();
        } else if (algorithmId == R.id.sha1) {
            byteString = byteString.sha1();
        }
        return byteString.hex();
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,mkdir,"boolean mkdir(File,boolean)","[208, 218]","{'A328': [(208, 218)]}",{'A328': 1.0},A328,,"    @SuppressWarnings(""ResultOfMethodCallIgnored"")
    public static boolean mkdir(File p, boolean allDirs) {
        if (p.exists()) return true;

        if (allDirs)
            p.mkdirs();
        else
            p.mkdir();

        return p.exists();
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getContentLength,long getContentLength(HttpURLConnection),"[220, 232]","{'A328': [(220, 232)]}",{'A328': 1.0},A328,,"    public static long getContentLength(HttpURLConnection connection) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
            return connection.getContentLengthLong();
        }

        try {
            return Long.parseLong(connection.getHeaderField(""Content-Length""));
        } catch (Exception err) {
            // nothing to do
        }

        return -1;
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,getTotalContentLength,long getTotalContentLength(HttpURLConnection),"[240, 254]","{'A386': [(240, 254)]}",{'A386': 1.0},A386,,"    public static long getTotalContentLength(final HttpURLConnection connection) {
        try {
            if (connection.getResponseCode() == 206) {
                final String rangeStr = connection.getHeaderField(""Content-Range"");
                final String bytesStr = rangeStr.split(""/"", 2)[1];
                return Long.parseLong(bytesStr);
            } else {
                return getContentLength(connection);
            }
        } catch (Exception err) {
            // nothing to do
        }

        return -1;
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,pad,String pad(int),"[256, 258]","{'A328': [(256, 258)]}",{'A328': 1.0},A328,,"    private static String pad(int number) {
        return number < 10 ? (""0"" + number) : String.valueOf(number);
    }
"
us.shandian.giga.util,../projects/NewPipe/app/src/main/java/us/shandian/giga/util/Utility.java,Utility,stringifySeconds,String stringifySeconds(long),"[260, 275]","{'A328': [(264, 275)], 'A295': [(260, 263)]}","{'A328': 0.75, 'A295': 0.25}",A328,,"    public static String stringifySeconds(final long seconds) {
        final int h = (int) Math.floorDiv(seconds, 3600);
        final int m = (int) Math.floorDiv(seconds - (h * 3600L), 60);
        final int s = (int) (seconds - (h * 3600) - (m * 60));

        String str = """";

        if (h < 1 && m < 1) {
            str = ""00:"";
        } else {
            if (h > 0) str = pad(h) + "":"";
            if (m > 0) str += pad(m) + "":"";
        }

        return str + pad(s);
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,startUpdate,void startUpdate(ViewGroup),"[142, 148]","{'A301': [(142, 142), (144, 148)], 'A294': [(143, 143)]}","{'A301': 0.8571428571428571, 'A294': 0.14285714285714285}",A301,,"    @Override
    public void startUpdate(@NonNull final ViewGroup container) {
        if (container.getId() == View.NO_ID) {
            throw new IllegalStateException(""ViewPager with adapter "" + this
                    + "" requires a view id"");
        }
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,instantiateItem,"Object instantiateItem(ViewGroup,int)","[150, 195]","{'A301': [(150, 152), (154, 158), (160, 168), (173, 173), (175, 195)], 'A294': [(153, 153), (159, 159), (169, 172), (174, 174)]}","{'A301': 0.8478260869565217, 'A294': 0.15217391304347827}",A301,,"    @SuppressWarnings(""deprecation"")
    @NonNull
    @Override
    public Object instantiateItem(@NonNull final ViewGroup container, final int position) {
        // If we already have this item instantiated, there is nothing
        // to do.  This can happen when we are restoring the entire pager
        // from its saved state, where the fragment manager has already
        // taken care of restoring the fragments we previously had instantiated.
        if (mFragments.size() > position) {
            final Fragment f = mFragments.get(position);
            if (f != null) {
                return f;
            }
        }

        if (mCurTransaction == null) {
            mCurTransaction = mFragmentManager.beginTransaction();
        }

        final Fragment fragment = getItem(position);
        if (DEBUG) {
            Log.v(TAG, ""Adding item #"" + position + "": f="" + fragment);
        }
        if (mSavedState.size() > position) {
            final Fragment.SavedState fss = mSavedState.get(position);
            if (fss != null) {
                fragment.setInitialSavedState(fss);
            }
        }
        while (mFragments.size() <= position) {
            mFragments.add(null);
        }
        fragment.setMenuVisibility(false);
        if (mBehavior == BEHAVIOR_SET_USER_VISIBLE_HINT) {
            fragment.setUserVisibleHint(false);
        }

        mFragments.set(position, fragment);
        mCurTransaction.add(container.getId(), fragment);

        if (mBehavior == BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {
            mCurTransaction.setMaxLifecycle(fragment, Lifecycle.State.STARTED);
        }

        return fragment;
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,destroyItem,"void destroyItem(ViewGroup,int,Object)","[197, 220]","{'A301': [(197, 197), (201, 204), (209, 216), (218, 220)], 'A294': [(198, 200), (205, 208)], 'A299': [(217, 217)]}","{'A301': 0.6666666666666666, 'A294': 0.2916666666666667, 'A299': 0.041666666666666664}",A301,,"    @Override
    public void destroyItem(@NonNull final ViewGroup container, final int position,
                            @NonNull final Object object) {
        final Fragment fragment = (Fragment) object;

        if (mCurTransaction == null) {
            mCurTransaction = mFragmentManager.beginTransaction();
        }
        if (DEBUG) {
            Log.v(TAG, ""Removing item #"" + position + "": f="" + object
                    + "" v="" + ((Fragment) object).getView());
        }
        while (mSavedState.size() <= position) {
            mSavedState.add(null);
        }
        mSavedState.set(position, fragment.isAdded()
                ? mFragmentManager.saveFragmentInstanceState(fragment) : null);
        mFragments.set(position, null);

        mCurTransaction.remove(fragment);
        if (fragment.equals(mCurrentPrimaryItem)) {
            mCurrentPrimaryItem = null;
        }
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,setPrimaryItem,"void setPrimaryItem(ViewGroup,int,Object)","[222, 251]","{'A301': [(222, 223), (227, 251)], 'A294': [(224, 226)]}","{'A301': 0.9, 'A294': 0.1}",A301,,"    @Override
    @SuppressWarnings({""ReferenceEquality"", ""deprecation""})
    public void setPrimaryItem(@NonNull final ViewGroup container, final int position,
                               @NonNull final Object object) {
        final Fragment fragment = (Fragment) object;
        if (fragment != mCurrentPrimaryItem) {
            if (mCurrentPrimaryItem != null) {
                mCurrentPrimaryItem.setMenuVisibility(false);
                if (mBehavior == BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {
                    if (mCurTransaction == null) {
                        mCurTransaction = mFragmentManager.beginTransaction();
                    }
                    mCurTransaction.setMaxLifecycle(mCurrentPrimaryItem, Lifecycle.State.STARTED);
                } else {
                    mCurrentPrimaryItem.setUserVisibleHint(false);
                }
            }
            fragment.setMenuVisibility(true);
            if (mBehavior == BEHAVIOR_RESUME_ONLY_CURRENT_FRAGMENT) {
                if (mCurTransaction == null) {
                    mCurTransaction = mFragmentManager.beginTransaction();
                }
                mCurTransaction.setMaxLifecycle(fragment, Lifecycle.State.RESUMED);
            } else {
                fragment.setUserVisibleHint(true);
            }

            mCurrentPrimaryItem = fragment;
        }
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,finishUpdate,void finishUpdate(ViewGroup),"[253, 271]","{'A301': [(253, 253), (255, 255), (269, 271)], 'A294': [(254, 254)], 'A299': [(256, 268)]}","{'A301': 0.2631578947368421, 'A294': 0.05263157894736842, 'A299': 0.6842105263157895}",A299,,"    @Override
    public void finishUpdate(@NonNull final ViewGroup container) {
        if (mCurTransaction != null) {
            // We drop any transactions that attempt to be committed
            // from a re-entrant call to finishUpdate(). We need to
            // do this as a workaround for Robolectric running measure/layout
            // calls inline rather than allowing them to be posted
            // as they would on a real device.
            if (!mExecutingFinishUpdate) {
                try {
                    mExecutingFinishUpdate = true;
                    mCurTransaction.commitNowAllowingStateLoss();
                } finally {
                    mExecutingFinishUpdate = false;
                }
            }
            mCurTransaction = null;
        }
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,isViewFromObject,"boolean isViewFromObject(View,Object)","[273, 276]","{'A301': [(273, 273), (276, 276)], 'A294': [(274, 275)]}","{'A301': 0.5, 'A294': 0.5}",A301,,"    @Override
    public boolean isViewFromObject(@NonNull final View view, @NonNull final Object object) {
        return ((Fragment) object).getView() == view;
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,saveState,Parcelable saveState(),"[282, 308]","{'A301': [(282, 285), (287, 287), (289, 289), (292, 295), (297, 301), (303, 308)], 'A295': [(286, 286), (288, 288)], 'A294': [(290, 291), (296, 296), (302, 302)]}","{'A301': 0.7777777777777778, 'A295': 0.07407407407407407, 'A294': 0.14814814814814814}",A301,,"    @Override
    @Nullable
    public Parcelable saveState() {
        Bundle state = null;
        if (!mSavedState.isEmpty()) {
            state = new Bundle();
            state.putParcelableArrayList(""states"", mSavedState);
        }
        for (int i = 0; i < mFragments.size(); i++) {
            final Fragment f = mFragments.get(i);
            if (f != null && f.isAdded()) {
                if (state == null) {
                    state = new Bundle();
                }
                final String key = ""f"" + i;
                mFragmentManager.putFragment(state, key, f);

                //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                // Check if it's the same fragment instance
                if (f == mCurrentPrimaryItem) {
                    state.putString(selectedFragment, key);
                }
                //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
            }
        }
        return state;
    }
"
androidx.fragment.app,../projects/NewPipe/app/src/main/java/androidx/fragment/app/FragmentStatePagerAdapterMenuWorkaround.java,FragmentStatePagerAdapterMenuWorkaround,restoreState,"void restoreState(Parcelable,ClassLoader)","[310, 343]","{'A301': [(310, 310), (312, 312), (314, 314), (317, 318), (321, 321), (324, 324), (327, 331), (334, 343)], 'A295': [(315, 316), (319, 320)], 'A294': [(311, 311), (313, 313), (322, 323), (325, 326), (332, 333)]}","{'A301': 0.6470588235294118, 'A295': 0.11764705882352941, 'A294': 0.23529411764705882}",A301,,"    @Override
    public void restoreState(@Nullable final Parcelable state, @Nullable final ClassLoader loader) {
        if (state != null) {
            final Bundle bundle = (Bundle) state;
            bundle.setClassLoader(loader);
            final var states = BundleCompat.getParcelableArrayList(bundle, ""states"",
                    Fragment.SavedState.class);
            mSavedState.clear();
            mFragments.clear();
            if (states != null) {
                mSavedState.addAll(states);
            }
            final Iterable<String> keys = bundle.keySet();
            for (final String key : keys) {
                if (key.startsWith(""f"")) {
                    final int index = Integer.parseInt(key.substring(1));
                    final Fragment f = mFragmentManager.getFragment(bundle, key);
                    if (f != null) {
                        while (mFragments.size() <= index) {
                            mFragments.add(null);
                        }
                        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        final boolean wasSelected = bundle.getString(selectedFragment, """")
                                .equals(key);
                        f.setMenuVisibility(wasSelected);
                        //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                        mFragments.set(index, f);
                    } else {
                        Log.w(TAG, ""Bad fragment at key "" + key);
                    }
                }
            }
        }
    }
"
