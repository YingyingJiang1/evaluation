package,filepath,class_path,method_name,signature,line_range,author_lines_map,author_edit_ratio_map,dominant_author,test_class,code
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,configure,void configure(Properties),"[140, 167]","{'A584': [(140, 142), (160, 160), (167, 167)], 'A585': [(143, 143)], 'A586': [(161, 166)], 'A588': [(144, 159)]}","{'A584': 0.17857142857142858, 'A585': 0.03571428571428571, 'A586': 0.21428571428571427, 'A588': 0.5714285714285714}",A588,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @Override
    public void configure(Properties configuration) throws MetricsProviderLifeCycleException {
        LOG.info(""Initializing metrics, configuration: {}"", configuration);
        this.host = configuration.getProperty(""httpHost"", ""0.0.0.0"");
        if (configuration.containsKey(""httpsPort"")) {
            this.httpsPort = Integer.parseInt(configuration.getProperty(""httpsPort""));
            this.keyStorePath = configuration.getProperty(SSL_KEYSTORE_LOCATION);
            this.keyStorePassword = configuration.getProperty(SSL_KEYSTORE_PASSWORD);
            this.keyStoreType = configuration.getProperty(SSL_KEYSTORE_TYPE);
            this.trustStorePath = configuration.getProperty(SSL_TRUSTSTORE_LOCATION);
            this.trustStorePassword = configuration.getProperty(SSL_TRUSTSTORE_PASSWORD);
            this.trustStoreType = configuration.getProperty(SSL_TRUSTSTORE_TYPE);
            this.needClientAuth = Boolean.parseBoolean(configuration.getProperty(SSL_NEED_CLIENT_AUTH, ""true""));
            this.wantClientAuth = Boolean.parseBoolean(configuration.getProperty(SSL_WANT_CLIENT_AUTH, ""true""));
            //check if httpPort is also configured
            this.httpPort = Integer.parseInt(configuration.getProperty(""httpPort"", ""-1""));
        } else {
            // Use the default HTTP port (7000) or the configured port if HTTPS is not set.
            this.httpPort = Integer.parseInt(configuration.getProperty(""httpPort"", ""7000""));
        }
        this.exportJvmInfo = Boolean.parseBoolean(configuration.getProperty(""exportJvmInfo"", ""true""));
        this.numWorkerThreads = Integer.parseInt(
                configuration.getProperty(NUM_WORKER_THREADS, ""1""));
        this.maxQueueSize = Integer.parseInt(
                configuration.getProperty(MAX_QUEUE_SIZE, ""1000000""));
        this.workerShutdownTimeoutMs = Long.parseLong(
                configuration.getProperty(WORKER_SHUTDOWN_TIMEOUT_MS, ""1000""));
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,start,void start(),"[169, 215]","{'A584': [(169, 170), (172, 172), (177, 179), (196, 197), (199, 215)], 'A586': [(171, 171)], 'A587': [(198, 198)], 'A588': [(173, 176), (180, 195)]}","{'A584': 0.5319148936170213, 'A586': 0.02127659574468085, 'A587': 0.02127659574468085, 'A588': 0.425531914893617}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @Override
    public void start() throws MetricsProviderLifeCycleException {
        this.executorOptional = createExecutor();
        try {
            LOG.info(""Starting /metrics {} endpoint at HTTP port: {}, HTTPS port: {}, exportJvmInfo: {}"",
                    httpPort > 0 ? httpPort : ""disabled"",
                    httpsPort > 0 ? httpsPort : ""disabled"",
                    exportJvmInfo);
            if (exportJvmInfo) {
                DefaultExports.initialize();
            }
            if (httpPort == -1) {
                server = new Server();
            } else {
                server = new Server(new InetSocketAddress(host, httpPort));
            }
            if (httpsPort != -1) {
                SslContextFactory sslServerContextFactory = new SslContextFactory.Server();
                configureSslContextFactory(sslServerContextFactory);
                KeyStoreScanner keystoreScanner = new KeyStoreScanner(sslServerContextFactory);
                keystoreScanner.setScanInterval(SCAN_INTERVAL);
                server.addBean(keystoreScanner);
                ServerConnector connector = new ServerConnector(server, sslServerContextFactory);
                connector.setPort(httpsPort);
                connector.setHost(host);
                server.addConnector(connector);
            }
            ServletContextHandler context = new ServletContextHandler();
            context.setContextPath(""/"");
            constrainTraceMethod(context);
            server.setHandler(context);
            context.addServlet(new ServletHolder(servlet), ""/metrics"");
            server.start();
        } catch (Exception err) {
            LOG.error(""Cannot start /metrics server"", err);
            if (server != null) {
                try {
                    server.stop();
                } catch (Exception suppressed) {
                    err.addSuppressed(suppressed);
                } finally {
                    server = null;
                }
            }
            throw new MetricsProviderLifeCycleException(err);
        }
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,configureSslContextFactory,void configureSslContextFactory(SslContextFactory),"[217, 253]","{'A588': [(217, 253)]}",{'A588': 1.0},A588,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @SuppressWarnings(""deprecation"")
    private void configureSslContextFactory(SslContextFactory sslServerContextFactory) {
        if (keyStorePath != null) {
            sslServerContextFactory.setKeyStorePath(keyStorePath);
        } else {
            LOG.error(""KeyStore configuration is incomplete keyStorePath: {}"", keyStorePath);
            throw new IllegalStateException(""KeyStore configuration is incomplete keyStorePath: "" + keyStorePath);
        }
        if (keyStorePassword != null) {
            sslServerContextFactory.setKeyStorePassword(keyStorePassword);
        } else {
            LOG.error(""keyStorePassword configuration is incomplete "");
            throw new IllegalStateException(""keyStorePassword configuration is incomplete "");
        }
        if (keyStoreType != null) {
            sslServerContextFactory.setKeyStoreType(keyStoreType);
        }
        if (trustStorePath != null) {
            sslServerContextFactory.setTrustStorePath(trustStorePath);
        } else {
            LOG.error(""TrustStore configuration is incomplete trustStorePath: {}"", trustStorePath);
            throw new IllegalStateException(""TrustStore configuration is incomplete trustStorePath: "" + trustStorePath);
        }
        if (trustStorePassword != null) {
            sslServerContextFactory.setTrustStorePassword(trustStorePassword);
        } else {
            LOG.error(""trustStorePassword configuration is incomplete"");
            throw new IllegalStateException(""trustStorePassword configuration is incomplete"");
        }
        if (trustStoreType != null) {
            sslServerContextFactory.setTrustStoreType(trustStoreType);
        }
        sslServerContextFactory
                .setNeedClientAuth(needClientAuth);
        sslServerContextFactory
                .setWantClientAuth(wantClientAuth);
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,getServlet,MetricsServletImpl getServlet(),"[256, 258]","{'A584': [(256, 258)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    MetricsServletImpl getServlet() {
        return servlet;
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,getRootContext,MetricsContext getRootContext(),"[260, 263]","{'A584': [(260, 263)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @Override
    public MetricsContext getRootContext() {
        return rootContext;
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,stop,void stop(),"[265, 277]","{'A584': [(265, 266), (268, 277)], 'A586': [(267, 267)]}","{'A584': 0.9230769230769231, 'A586': 0.07692307692307693}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @Override
    public void stop() {
        shutdownExecutor();
        if (server != null) {
            try {
                server.stop();
            } catch (Exception err) {
                LOG.error(""Cannot safely stop Jetty server"", err);
            } finally {
                server = null;
            }
        }
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,dump,"void dump(BiConsumer<String, Object>)","[289, 300]","{'A584': [(289, 300)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @Override
    public void dump(BiConsumer<String, Object> sink) {
        sampleGauges();
        Enumeration<Collector.MetricFamilySamples> samplesFamilies = collectorRegistry.metricFamilySamples();
        while (samplesFamilies.hasMoreElements()) {
            Collector.MetricFamilySamples samples = samplesFamilies.nextElement();
            samples.samples.forEach(sample -> {
                String key = buildKeyForDump(sample);
                sink.accept(key, sample.value);
            });
        }
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,buildKeyForDump,String buildKeyForDump(Collector.MetricFamilySamples.Sample),"[302, 319]","{'A584': [(302, 319)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    private static String buildKeyForDump(Collector.MetricFamilySamples.Sample sample) {
        StringBuilder keyBuilder = new StringBuilder();
        keyBuilder.append(sample.name);
        if (sample.labelNames.size() > 0) {
            keyBuilder.append('{');
            for (int i = 0; i < sample.labelNames.size(); ++i) {
                if (i > 0) {
                    keyBuilder.append(',');
                }
                keyBuilder.append(sample.labelNames.get(i));
                keyBuilder.append(""=\"""");
                keyBuilder.append(sample.labelValues.get(i));
                keyBuilder.append('""');
            }
            keyBuilder.append('}');
        }
        return keyBuilder.toString();
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,sampleGauges,void sampleGauges(),"[325, 331]","{'A584': [(325, 327), (331, 331)], 'A586': [(328, 330)]}","{'A584': 0.5714285714285714, 'A586': 0.42857142857142855}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    private void sampleGauges() {
        rootContext.gauges.values()
                .forEach(PrometheusGaugeWrapper::sample);

        rootContext.gaugeSets.values()
                .forEach(PrometheusLabelledGaugeWrapper::sample);
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,resetAllValues,void resetAllValues(),"[333, 336]","{'A584': [(333, 336)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    @Override
    public void resetAllValues() {
        // not supported on Prometheus
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,constrainTraceMethod,void constrainTraceMethod(ServletContextHandler),"[342, 355]","{'A587': [(342, 355)]}",{'A587': 1.0},A587,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    private void constrainTraceMethod(ServletContextHandler ctxHandler) {
        Constraint c = new Constraint();
        c.setAuthenticate(true);

        ConstraintMapping cmt = new ConstraintMapping();
        cmt.setConstraint(c);
        cmt.setMethod(""TRACE"");
        cmt.setPathSpec(""/*"");

        ConstraintSecurityHandler securityHandler = new ConstraintSecurityHandler();
        securityHandler.setConstraintMappings(new ConstraintMapping[] {cmt});

        ctxHandler.setSecurityHandler(securityHandler);
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,getContext,MetricsContext getContext(String),"[368, 372]","{'A584': [(368, 372)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public MetricsContext getContext(String name) {
            // no hierarchy yet
            return this;
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,getCounter,Counter getCounter(String),"[374, 377]","{'A583': [(376, 376)], 'A584': [(374, 375), (377, 377)]}","{'A583': 0.25, 'A584': 0.75}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public Counter getCounter(String name) {
            return counters.computeIfAbsent(name, PrometheusCounter::new);
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,getCounterSet,CounterSet getCounterSet(String),"[379, 383]","{'A586': [(379, 383)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public CounterSet getCounterSet(final String name) {
            Objects.requireNonNull(name, ""Cannot register a CounterSet with null name"");
            return counterSets.computeIfAbsent(name, PrometheusLabelledCounter::new);
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,registerGauge,"void registerGauge(String,Gauge)","[392, 397]","{'A583': [(395, 396)], 'A584': [(392, 394), (397, 397)]}","{'A583': 0.3333333333333333, 'A584': 0.6666666666666666}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void registerGauge(String name, Gauge gauge) {
            Objects.requireNonNull(name);
            gauges.compute(name, (id, prev) ->
                    new PrometheusGaugeWrapper(id, gauge, prev != null ? prev.inner : null));
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,unregisterGauge,void unregisterGauge(String),"[399, 405]","{'A584': [(399, 405)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void unregisterGauge(String name) {
            PrometheusGaugeWrapper existing = gauges.remove(name);
            if (existing != null) {
                existing.unregister();
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,registerGaugeSet,"void registerGaugeSet(String,GaugeSet)","[407, 414]","{'A586': [(407, 414)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void registerGaugeSet(final String name, final GaugeSet gaugeSet) {
            Objects.requireNonNull(name, ""Cannot register a GaugeSet with null name"");
            Objects.requireNonNull(gaugeSet, ""Cannot register a null GaugeSet for "" + name);

            gaugeSets.compute(name, (id, prev) ->
                new PrometheusLabelledGaugeWrapper(name, gaugeSet, prev != null ? prev.inner : null));
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,unregisterGaugeSet,void unregisterGaugeSet(String),"[416, 424]","{'A586': [(416, 424)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void unregisterGaugeSet(final String name) {
            Objects.requireNonNull(name, ""Cannot unregister GaugeSet with null name"");

            final PrometheusLabelledGaugeWrapper existing = gaugeSets.remove(name);
            if (existing != null) {
                existing.unregister();
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,getSummary,"Summary getSummary(String,DetailLevel)","[426, 443]","{'A584': [(426, 443)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public Summary getSummary(String name, DetailLevel detailLevel) {
            if (detailLevel == DetailLevel.BASIC) {
                return basicSummaries.computeIfAbsent(name, (n) -> {
                    if (summaries.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a non basic summary as "" + n);
                    }
                    return new PrometheusSummary(name, detailLevel);
                });
            } else {
                return summaries.computeIfAbsent(name, (n) -> {
                    if (basicSummaries.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a basic summary as "" + n);
                    }
                    return new PrometheusSummary(name, detailLevel);
                });
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.Context,getSummarySet,"SummarySet getSummarySet(String,DetailLevel)","[445, 462]","{'A584': [(445, 462)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public SummarySet getSummarySet(String name, DetailLevel detailLevel) {
            if (detailLevel == DetailLevel.BASIC) {
                return basicSummarySets.computeIfAbsent(name, (n) -> {
                    if (summarySets.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a non basic summary set as "" + n);
                    }
                    return new PrometheusLabelledSummary(name, detailLevel);
                });
            } else {
                return summarySets.computeIfAbsent(name, (n) -> {
                    if (basicSummarySets.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a basic summary set as "" + n);
                    }
                    return new PrometheusLabelledSummary(name, detailLevel);
                });
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusCounter,add,void add(long),"[478, 485]","{'A583': [(483, 483)], 'A584': [(478, 482), (484, 485)]}","{'A583': 0.125, 'A584': 0.875}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void add(long delta) {
            try {
                inner.inc(delta);
            } catch (IllegalArgumentException err) {
                LOG.error(""invalid delta {} for metric {}"", delta, name, err);
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusCounter,get,long get(),"[487, 494]","{'A584': [(487, 494)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public long get() {
            // this method is used only for tests
            // Prometheus returns a ""double""
            // it is safe to fine to a long
            // we are never setting non-integer values
            return (long) inner.get();
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusLabelledCounter,add,"void add(String,long)","[510, 517]","{'A586': [(510, 517)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void add(final String key, final long delta) {
            try {
                inner.labels(key).inc(delta);
            } catch (final IllegalArgumentException e) {
                LOG.error(""invalid delta {} for metric {} with key {}"", delta, name, key, e);
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusGaugeWrapper,sample,void sample(),"[539, 542]","{'A584': [(539, 542)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        private void sample() {
            Number value = gauge.get();
            this.inner.set(value != null ? value.doubleValue() : 0);
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusGaugeWrapper,unregister,void unregister(),"[544, 546]","{'A584': [(544, 546)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        private void unregister() {
            collectorRegistry.unregister(inner);
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusLabelledGaugeWrapper,sample,void sample(),"[572, 575]","{'A586': [(572, 575)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        private void sample() {
            gaugeSet.values().forEach((key, value) ->
                this.inner.labels(key).set(value != null ? value.doubleValue() : 0));
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusLabelledGaugeWrapper,unregister,void unregister(),"[577, 579]","{'A586': [(577, 579)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        private void unregister() {
            collectorRegistry.unregister(inner);
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusSummary,add,void add(long),"[604, 607]","{'A584': [(604, 605)], 'A586': [(606, 607)]}","{'A584': 0.5, 'A586': 0.5}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void add(long delta) {
            reportMetrics(() -> observe(delta));
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusSummary,observe,void observe(long),"[609, 615]","{'A583': [(613, 613)], 'A584': [(610, 611), (614, 615)], 'A586': [(609, 609), (612, 612)]}","{'A583': 0.14285714285714285, 'A584': 0.5714285714285714, 'A586': 0.2857142857142857}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        private void observe(final long delta) {
            try {
                inner.observe(delta);
            } catch (final IllegalArgumentException err) {
                LOG.error(""invalid delta {} for metric {}"", delta, name, err);
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusLabelledSummary,add,"void add(String,long)","[642, 645]","{'A584': [(642, 643)], 'A586': [(644, 645)]}","{'A584': 0.5, 'A586': 0.5}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public void add(String key, long value) {
            reportMetrics(() -> observe(key, value));
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusLabelledSummary,observe,"void observe(String,long)","[647, 653]","{'A583': [(651, 651)], 'A584': [(648, 649), (652, 653)], 'A586': [(647, 647), (650, 650)]}","{'A583': 0.14285714285714285, 'A584': 0.5714285714285714, 'A586': 0.2857142857142857}",A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        private void observe(final String key, final long value) {
            try {
                inner.labels(key).observe(value);
            } catch (final IllegalArgumentException err) {
                LOG.error(""invalid value {} for metric {} with key {}"", value, name, key, err);
            }
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.MetricsServletImpl,doGet,"void doGet(HttpServletRequest,HttpServletResponse)","[659, 666]","{'A584': [(659, 666)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
            // little trick: update the Gauges before serving data
            // from Prometheus CollectorRegistry
            sampleGauges();
            // serve data using Prometheus built in client.
            super.doGet(req, resp);
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,createExecutor,Optional<ExecutorService> createExecutor(),"[669, 685]","{'A586': [(669, 685)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    private Optional<ExecutorService> createExecutor() {
        if (numWorkerThreads < 1) {
            LOG.info(""Executor service was not created as numWorkerThreads {} is less than 1"", numWorkerThreads);
            return Optional.empty();
        }

        final BlockingQueue<Runnable> queue = new LinkedBlockingQueue<>(maxQueueSize);
        final ThreadPoolExecutor executor = new ThreadPoolExecutor(numWorkerThreads,
                numWorkerThreads,
                0L,
                TimeUnit.MILLISECONDS,
                queue, new PrometheusWorkerThreadFactory());
        LOG.info(""Executor service was created with numWorkerThreads {} and maxQueueSize {}"",
                numWorkerThreads,
                maxQueueSize);
        return Optional.of(executor);
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,shutdownExecutor,void shutdownExecutor(),"[687, 703]","{'A586': [(687, 703)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    private void shutdownExecutor() {
        if (executorOptional.isPresent()) {
            LOG.info(""Shutdown executor service with timeout {}"", workerShutdownTimeoutMs);
            final ExecutorService executor = executorOptional.get();
            executor.shutdown();
            try {
                if (!executor.awaitTermination(workerShutdownTimeoutMs, TimeUnit.MILLISECONDS)) {
                    LOG.error(""Not all the Prometheus worker threads terminated properly after {} timeout"",
                            workerShutdownTimeoutMs);
                    executor.shutdownNow();
                }
            } catch (final Exception e) {
                LOG.error(""Error occurred while terminating Prometheus worker threads"", e);
                executor.shutdownNow();
            }
        }
    }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider.PrometheusWorkerThreadFactory,newThread,Thread newThread(Runnable),"[708, 714]","{'A586': [(708, 714)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"        @Override
        public Thread newThread(final Runnable runnable) {
            final String threadName = ""PrometheusMetricsProviderWorker-"" + workerCounter.getAndIncrement();
            final Thread thread = new Thread(runnable, threadName);
            thread.setDaemon(true);
            return thread;
        }
"
org.apache.zookeeper.metrics.prometheus,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/main/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProvider.java,PrometheusMetricsProvider,reportMetrics,void reportMetrics(Runnable),"[717, 728]","{'A586': [(717, 728)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-metrics-providers/zookeeper-prometheus-metrics/src/test/java/org/apache/zookeeper/metrics/prometheus/PrometheusMetricsProviderTest.java,"    private void reportMetrics(final Runnable task) {
        if (executorOptional.isPresent()) {
            try {
                executorOptional.get().submit(task);
            } catch (final RejectedExecutionException e) {
                rateLogger.rateLimitLog(""Prometheus metrics reporting task queue size exceeded the max"",
                        String.valueOf(maxQueueSize));
            }
        } else {
            task.run();
        }
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,getArchive,BinaryInputArchive getArchive(InputStream),"[53, 55]","{'A583': [(53, 54)], 'A590': [(55, 55)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public static BinaryInputArchive getArchive(InputStream stream) {
        return new BinaryInputArchive(new DataInputStream(stream));
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive.BinaryIndex,done,boolean done(),"[64, 66]","{'A583': [(65, 65)], 'A590': [(64, 64), (66, 66)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"        public boolean done() {
            return (n <= 0);
        }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive.BinaryIndex,incr,void incr(),"[68, 70]","{'A583': [(69, 69)], 'A590': [(68, 68), (70, 70)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"        public void incr() {
            n--;
        }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readByte,byte readByte(String),"[89, 91]","{'A590': [(89, 91)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public byte readByte(String tag) throws IOException {
        return in.readByte();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readBool,boolean readBool(String),"[93, 95]","{'A590': [(93, 95)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public boolean readBool(String tag) throws IOException {
        return in.readBoolean();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readInt,int readInt(String),"[97, 99]","{'A590': [(97, 99)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public int readInt(String tag) throws IOException {
        return in.readInt();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readLong,long readLong(String),"[101, 103]","{'A590': [(101, 103)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public long readLong(String tag) throws IOException {
        return in.readLong();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readFloat,float readFloat(String),"[105, 107]","{'A590': [(105, 107)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public float readFloat(String tag) throws IOException {
        return in.readFloat();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readDouble,double readDouble(String),"[109, 111]","{'A590': [(109, 111)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public double readDouble(String tag) throws IOException {
        return in.readDouble();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readString,String readString(String),"[113, 122]","{'A583': [(114, 117), (119, 121)], 'A590': [(113, 113), (122, 122)], 'A593': [(118, 118)]}","{'A583': 0.7, 'A590': 0.2, 'A593': 0.1}",A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public String readString(String tag) throws IOException {
        int len = in.readInt();
        if (len == -1) {
            return null;
        }
        checkLength(len);
        byte[] b = new byte[len];
        in.readFully(b);
        return new String(b, StandardCharsets.UTF_8);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readBuffer,byte[] readBuffer(String),"[124, 133]","{'A583': [(126, 128)], 'A590': [(124, 125), (130, 133)], 'A593': [(129, 129)]}","{'A583': 0.3, 'A590': 0.6, 'A593': 0.1}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public byte[] readBuffer(String tag) throws IOException {
        int len = readInt(tag);
        if (len == -1) {
            return null;
        }
        checkLength(len);
        byte[] arr = new byte[len];
        in.readFully(arr);
        return arr;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,readRecord,"void readRecord(Record,String)","[135, 137]","{'A590': [(135, 137)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public void readRecord(Record r, String tag) throws IOException {
        r.deserialize(this, tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,startRecord,void startRecord(String),"[139, 140]","{'A583': [(139, 140)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public void startRecord(String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,endRecord,void endRecord(String),"[142, 143]","{'A583': [(142, 143)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public void endRecord(String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,startVector,Index startVector(String),"[145, 151]","{'A583': [(148, 148), (150, 151)], 'A590': [(145, 147), (149, 149)]}","{'A583': 0.42857142857142855, 'A590': 0.5714285714285714}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public Index startVector(String tag) throws IOException {
        int len = readInt(tag);
        if (len == -1) {
            return null;
        }
        return new BinaryIndex(len);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,endVector,void endVector(String),"[153, 154]","{'A583': [(153, 153)], 'A590': [(154, 154)]}","{'A583': 0.5, 'A590': 0.5}",A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public void endVector(String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,startMap,Index startMap(String),"[156, 158]","{'A590': [(156, 158)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public Index startMap(String tag) throws IOException {
        return new BinaryIndex(readInt(tag));
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,endMap,void endMap(String),"[160, 161]","{'A583': [(160, 161)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    public void endMap(String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryInputArchive.java,BinaryInputArchive,checkLength,void checkLength(int),"[166, 170]","{'A592': [(167, 167)], 'A593': [(166, 166), (168, 170)]}","{'A592': 0.2, 'A593': 0.8}",A593,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryInputArchiveTest.java,"    private void checkLength(int len) throws IOException {
        if (len < 0 || len > totalBufferSize) {
            throw new IOException(UNREASONBLE_LENGTH + len);
        }
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,getArchive,BinaryOutputArchive getArchive(OutputStream),"[39, 41]","{'A590': [(39, 41)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public static BinaryOutputArchive getArchive(OutputStream strm) {
        return new BinaryOutputArchive(new DataOutputStream(strm));
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeByte,"void writeByte(byte,String)","[50, 53]","{'A590': [(50, 51), (53, 53)], 'A595': [(52, 52)]}","{'A590': 0.75, 'A595': 0.25}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeByte(byte b, String tag) throws IOException {
        out.writeByte(b);
        dataSize += 1;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeBool,"void writeBool(boolean,String)","[55, 58]","{'A590': [(55, 56), (58, 58)], 'A595': [(57, 57)]}","{'A590': 0.75, 'A595': 0.25}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeBool(boolean b, String tag) throws IOException {
        out.writeBoolean(b);
        dataSize += 1;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeInt,"void writeInt(int,String)","[60, 63]","{'A590': [(60, 61), (63, 63)], 'A595': [(62, 62)]}","{'A590': 0.75, 'A595': 0.25}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeInt(int i, String tag) throws IOException {
        out.writeInt(i);
        dataSize += 4;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeLong,"void writeLong(long,String)","[65, 68]","{'A590': [(65, 66), (68, 68)], 'A595': [(67, 67)]}","{'A590': 0.75, 'A595': 0.25}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeLong(long l, String tag) throws IOException {
        out.writeLong(l);
        dataSize += 8;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeFloat,"void writeFloat(float,String)","[70, 73]","{'A590': [(70, 71), (73, 73)], 'A595': [(72, 72)]}","{'A590': 0.75, 'A595': 0.25}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeFloat(float f, String tag) throws IOException {
        out.writeFloat(f);
        dataSize += 4;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeDouble,"void writeDouble(double,String)","[75, 78]","{'A590': [(75, 76), (78, 78)], 'A595': [(77, 77)]}","{'A590': 0.75, 'A595': 0.25}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeDouble(double d, String tag) throws IOException {
        out.writeDouble(d);
        dataSize += 8;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,stringToByteBuffer,ByteBuffer stringToByteBuffer(CharSequence),"[87, 111]","{'A583': [(87, 87)], 'A590': [(88, 111)]}","{'A583': 0.04, 'A590': 0.96}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    private ByteBuffer stringToByteBuffer(CharSequence s) {
        bb.clear();
        final int len = s.length();
        for (int i = 0; i < len; i++) {
            if (bb.remaining() < 3) {
                ByteBuffer n = ByteBuffer.allocate(bb.capacity() << 1);
                bb.flip();
                n.put(bb);
                bb = n;
            }
            char c = s.charAt(i);
            if (c < 0x80) {
                bb.put((byte) c);
            } else if (c < 0x800) {
                bb.put((byte) (0xc0 | (c >> 6)));
                bb.put((byte) (0x80 | (c & 0x3f)));
            } else {
                bb.put((byte) (0xe0 | (c >> 12)));
                bb.put((byte) (0x80 | ((c >> 6) & 0x3f)));
                bb.put((byte) (0x80 | (c & 0x3f)));
            }
        }
        bb.flip();
        return bb;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeString,"void writeString(String,String)","[113, 123]","{'A590': [(113, 118), (121, 121), (123, 123)], 'A595': [(119, 120), (122, 122)]}","{'A590': 0.7272727272727273, 'A595': 0.2727272727272727}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeString(String s, String tag) throws IOException {
        if (s == null) {
            writeInt(-1, ""len"");
            return;
        }
        ByteBuffer bb = stringToByteBuffer(s);
        int strLen = bb.remaining();
        writeInt(strLen, ""len"");
        out.write(bb.array(), bb.position(), bb.limit());
        dataSize += strLen;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeBuffer,"void writeBuffer(byte[],String)","[125, 135]","{'A583': [(125, 127), (129, 130)], 'A590': [(133, 133), (135, 135)], 'A595': [(128, 128), (131, 132), (134, 134)]}","{'A583': 0.45454545454545453, 'A590': 0.18181818181818182, 'A595': 0.36363636363636365}",A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeBuffer(byte[] barr, String tag)
            throws IOException {
        if (barr == null) {
            writeInt(-1, ""len"");
            return;
        }
        int len = barr.length;
        writeInt(len, ""len"");
        out.write(barr);
        dataSize += len;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,writeRecord,"void writeRecord(Record,String)","[137, 139]","{'A590': [(137, 139)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void writeRecord(Record r, String tag) throws IOException {
        r.serialize(this, tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,startRecord,"void startRecord(Record,String)","[141, 142]","{'A583': [(141, 142)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void startRecord(Record r, String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,endRecord,"void endRecord(Record,String)","[144, 145]","{'A583': [(144, 145)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void endRecord(Record r, String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,startVector,"void startVector(List<?>,String)","[147, 153]","{'A583': [(148, 151)], 'A590': [(152, 153)], 'A591': [(147, 147)]}","{'A583': 0.5714285714285714, 'A590': 0.2857142857142857, 'A591': 0.14285714285714285}",A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void startVector(List<?> v, String tag) throws IOException {
        if (v == null) {
            writeInt(-1, tag);
            return;
        }
        writeInt(v.size(), tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,endVector,"void endVector(List<?>,String)","[155, 156]","{'A583': [(155, 156)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void endVector(List<?> v, String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,startMap,"void startMap(TreeMap<?, ?>,String)","[158, 160]","{'A583': [(158, 158)], 'A590': [(159, 160)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void startMap(TreeMap<?, ?> v, String tag) throws IOException {
        writeInt(v.size(), tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,endMap,"void endMap(TreeMap<?, ?>,String)","[162, 163]","{'A583': [(162, 163)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    public void endMap(TreeMap<?, ?> v, String tag) throws IOException {
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/BinaryOutputArchive.java,BinaryOutputArchive,getDataSize,long getDataSize(),"[165, 168]","{'A595': [(165, 168)]}",{'A595': 1.0},A595,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/BinaryOutputArchiveTest.java,"    @Override
    public long getDataSize() {
        return dataSize;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/Utils.java,Utils,compareBytes,"int compareBytes(byte[],int,int,byte[],int,int)","[33, 44]","{'A583': [(33, 33), (35, 37)], 'A590': [(44, 44)], 'A597': [(34, 34), (38, 43)]}","{'A583': 0.3333333333333333, 'A590': 0.08333333333333333, 'A597': 0.5833333333333334}",A597,,"    public static int compareBytes(byte[] b1, int off1, int len1, byte[] b2, int off2, int len2) {
        int i;
        for (i = 0; i < len1 && i < len2; i++) {
            if (b1[off1 + i] != b2[off2 + i]) {
                return b1[off1 + i] < b2[off2 + i] ? -1 : 1;
            }
        }
        if (len1 != len2) {
            return len1 < len2 ? -1 : 1;
        }
        return 0;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,getId,String getId(String),"[28, 30]","{'A583': [(28, 30)]}",{'A583': 1.0},A583,,"    private static String getId(String id) {
        return id + getLevel();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,getLevel,String getLevel(),"[32, 34]","{'A583': [(32, 34)]}",{'A583': 1.0},A583,,"    private static String getLevel() {
        return Integer.toString(level);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,incrLevel,void incrLevel(),"[36, 38]","{'A583': [(36, 38)]}",{'A583': 1.0},A583,,"    private static void incrLevel() {
        level++;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,decrLevel,void decrLevel(),"[40, 42]","{'A583': [(40, 42)]}",{'A583': 1.0},A583,,"    private static void decrLevel() {
        level--;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,getSignature,String getSignature(),"[55, 57]","{'A590': [(55, 57)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""["" + mElement.getSignature() + ""]"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genJavaCompareTo,String genJavaCompareTo(String),"[59, 62]","{'A583': [(61, 61)], 'A590': [(59, 60), (62, 62)]}","{'A583': 0.25, 'A590': 0.75}",A590,,"    public String genJavaCompareTo(String fname) {
        return ""    throw new UnsupportedOperationException(\""comparing ""
                + fname + "" is unimplemented\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genJavaReadWrapper,"String genJavaReadWrapper(String,String,boolean)","[64, 83]","{'A583': [(67, 67), (71, 74), (76, 76), (79, 79)], 'A590': [(64, 64), (66, 66), (68, 70), (75, 75), (77, 78), (80, 83)], 'A600': [(65, 65)]}","{'A583': 0.35, 'A590': 0.6, 'A600': 0.05}",A590,,"    public String genJavaReadWrapper(String fname, String tag, boolean decl) {
        StringBuilder ret = new StringBuilder("""");
        if (decl) {
            ret.append(""      java.util.List "" + fname + "";\n"");
        }
        ret.append(""    {\n"");
        incrLevel();
        ret.append(""      Index "" + getId(""vidx"") + "" = a_.startVector(\"""" + tag + ""\"");\n"");
        ret.append(""      if ("" + getId(""vidx"") + ""!= null) {"");
        ret.append(""          "" + fname + ""=new java.util.ArrayList<"" + mElement.getJavaType() + "">();\n"");
        ret.append(""          for (; !"" + getId(""vidx"") + "".done(); "" + getId(""vidx"") + "".incr()) {\n"");
        ret.append(mElement.genJavaReadWrapper(getId(""e""), getId(""e""), true));
        ret.append(""            "" + fname + "".add("" + getId(""e"") + "");\n"");
        ret.append(""          }\n"");
        ret.append(""      }\n"");
        ret.append(""    a_.endVector(\"""" + tag + ""\"");\n"");
        decrLevel();
        ret.append(""    }\n"");
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genJavaReadMethod,"String genJavaReadMethod(String,String)","[85, 87]","{'A590': [(85, 87)]}",{'A590': 1.0},A590,,"    public String genJavaReadMethod(String fname, String tag) {
        return genJavaReadWrapper(fname, tag, false);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genJavaWriteWrapper,"String genJavaWriteWrapper(String,String)","[89, 104]","{'A583': [(92, 96), (100, 100)], 'A590': [(89, 89), (91, 91), (97, 99), (101, 104)], 'A600': [(90, 90)]}","{'A583': 0.375, 'A590': 0.5625, 'A600': 0.0625}",A590,,"    public String genJavaWriteWrapper(String fname, String tag) {
        StringBuilder ret = new StringBuilder(""    {\n"");
        incrLevel();
        ret.append(""      a_.startVector("" + fname + "",\"""" + tag + ""\"");\n"");
        ret.append(""      if ("" + fname + ""!= null) {"");
        ret.append(""          int "" + getId(""len"") + "" = "" + fname + "".size();\n"");
        ret.append(""          for(int "" + getId(""vidx"") + "" = 0; "" + getId(""vidx"") + ""<"" + getId(""len"") + ""; "" + getId(""vidx"") + ""++) {\n"");
        ret.append(""            "" + mElement.getJavaWrapperType() + "" "" + getId(""e"") + "" = ("" + mElement.getJavaWrapperType() + "") "" + fname + "".get("" + getId(""vidx"") + "");\n"");
        ret.append(mElement.genJavaWriteWrapper(getId(""e""), getId(""e"")));
        ret.append(""          }\n"");
        ret.append(""      }\n"");
        ret.append(""      a_.endVector("" + fname + "",\"""" + tag + ""\"");\n"");
        ret.append(""    }\n"");
        decrLevel();
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genJavaWriteMethod,"String genJavaWriteMethod(String,String)","[106, 108]","{'A590': [(106, 108)]}",{'A590': 1.0},A590,,"    public String genJavaWriteMethod(String fname, String tag) {
        return genJavaWriteWrapper(fname, tag);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,getElementType,JType getElementType(),"[110, 112]","{'A583': [(111, 111)], 'A590': [(110, 110), (112, 112)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public JType getElementType() {
        return mElement;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genCsharpWriteWrapper,"String genCsharpWriteWrapper(String,String)","[114, 129]","{'A583': [(117, 121), (125, 125)], 'A591': [(114, 116), (122, 124), (126, 129)]}","{'A583': 0.375, 'A591': 0.625}",A591,,"    public String genCsharpWriteWrapper(String fname, String tag) {
        StringBuilder ret = new StringBuilder(""    {\n"");
        incrLevel();
        ret.append(""      a_.StartVector("" + capitalize(fname) + "",\"""" + tag + ""\"");\n"");
        ret.append(""      if ("" + capitalize(fname) + ""!= null) {"");
        ret.append(""          int "" + getId(""len"") + "" = "" + capitalize(fname) + "".Count;\n"");
        ret.append(""          for(int "" + getId(""vidx"") + "" = 0; "" + getId(""vidx"") + ""<"" + getId(""len"") + ""; "" + getId(""vidx"") + ""++) {\n"");
        ret.append(""            "" + mElement.getCsharpWrapperType() + "" "" + getId(""e"") + "" = ("" + mElement.getCsharpWrapperType() + "") "" + capitalize(fname) + ""["" + getId(""vidx"") + ""];\n"");
        ret.append(mElement.genCsharpWriteWrapper(getId(""e""), getId(""e"")));
        ret.append(""          }\n"");
        ret.append(""      }\n"");
        ret.append(""      a_.EndVector("" + capitalize(fname) + "",\"""" + tag + ""\"");\n"");
        ret.append(""    }\n"");
        decrLevel();
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genCsharpWriteMethod,"String genCsharpWriteMethod(String,String)","[131, 133]","{'A591': [(131, 133)]}",{'A591': 1.0},A591,,"    String genCsharpWriteMethod(String fname, String tag) {
        return genCsharpWriteWrapper(fname, tag);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genCsharpReadWrapper,"String genCsharpReadWrapper(String,String,boolean)","[135, 154]","{'A583': [(136, 136), (138, 138), (142, 145), (147, 147), (150, 150)], 'A591': [(135, 135), (137, 137), (139, 141), (146, 146), (148, 149), (151, 154)]}","{'A583': 0.4, 'A591': 0.6}",A591,,"    public String genCsharpReadWrapper(String fname, String tag, boolean decl) {
        StringBuilder ret = new StringBuilder();
        if (decl) {
            ret.append(""      System.Collections.Generic.List<"" + mElement.getCsharpType() + ""> "" + capitalize(fname) + "";\n"");
        }
        ret.append(""    {\n"");
        incrLevel();
        ret.append(""      IIndex "" + getId(""vidx"") + "" = a_.StartVector(\"""" + tag + ""\"");\n"");
        ret.append(""      if ("" + getId(""vidx"") + ""!= null) {"");
        ret.append(""          "" + capitalize(fname) + ""=new System.Collections.Generic.List<"" + mElement.getCsharpType() + "">();\n"");
        ret.append(""          for (; !"" + getId(""vidx"") + "".Done(); "" + getId(""vidx"") + "".Incr()) {\n"");
        ret.append(mElement.genCsharpReadWrapper(getId(""e""), getId(""e""), true));
        ret.append(""            "" + capitalize(fname) + "".Add("" + getId(""e"") + "");\n"");
        ret.append(""          }\n"");
        ret.append(""      }\n"");
        ret.append(""    a_.EndVector(\"""" + tag + ""\"");\n"");
        decrLevel();
        ret.append(""    }\n"");
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,genCsharpReadMethod,"String genCsharpReadMethod(String,String)","[156, 158]","{'A591': [(156, 158)]}",{'A591': 1.0},A591,,"    String genCsharpReadMethod(String fname, String tag) {
        return genCsharpReadWrapper(fname, tag, false);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JVector.java,JVector,extractVectorName,String extractVectorName(JType),"[160, 162]","{'A583': [(160, 162)]}",{'A583': 1.0},A583,,"    static String extractVectorName(JType jvType) {
        return JRecord.extractMethodSuffix(jvType) + ""_vector"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JByte.java,JByte,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""b"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getTypeToken,Token getTypeToken(),"[54, 56]","{'A601': [(54, 56)]}",{'A601': 1.0},A601,,"    public Token getTypeToken() {
        return mTypeToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,setTypeToken,void setTypeToken(Token),"[58, 60]","{'A601': [(58, 60)]}",{'A601': 1.0},A601,,"    public void setTypeToken(Token typeToken) {
        this.mTypeToken = typeToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getNextToken,Token getNextToken(),"[62, 64]","{'A601': [(62, 64)]}",{'A601': 1.0},A601,,"    public Token getNextToken() {
        return nextToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,setNextToken,void setNextToken(Token),"[66, 68]","{'A601': [(66, 68)]}",{'A601': 1.0},A601,,"    public void setNextToken(Token nextToken) {
        this.nextToken = nextToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getPreviousToken,Token getPreviousToken(),"[70, 72]","{'A601': [(70, 72)]}",{'A601': 1.0},A601,,"    public Token getPreviousToken() {
        return previousToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,setPreviousToken,void setPreviousToken(Token),"[74, 76]","{'A601': [(74, 76)]}",{'A601': 1.0},A601,,"    public void setPreviousToken(Token previousToken) {
        this.previousToken = previousToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getSignature,String getSignature(),"[78, 80]","{'A590': [(78, 80)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return mType.getSignature();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCppDecl,String genCppDecl(),"[82, 84]","{'A590': [(82, 84)]}",{'A590': 1.0},A590,,"    public String genCppDecl() {
        return mType.genCppDecl(mName);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCDecl,String genCDecl(),"[86, 88]","{'A583': [(86, 88)]}",{'A583': 1.0},A583,,"    public String genCDecl() {
        return mType.genCDecl(mName);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpDecl,String genCsharpDecl(),"[90, 92]","{'A591': [(90, 92)]}",{'A591': 1.0},A591,,"    public String genCsharpDecl() {
        return mType.genCsharpDecl(mName);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpConstructorParam,String genCsharpConstructorParam(String),"[94, 96]","{'A591': [(94, 96)]}",{'A591': 1.0},A591,,"    public String genCsharpConstructorParam(String fname) {
        return mType.genCsharpConstructorParam(fname);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaDecl,String genJavaDecl(),"[98, 100]","{'A590': [(98, 100)]}",{'A590': 1.0},A590,,"    public String genJavaDecl() {
        return mType.genJavaDecl(mName);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaConstructorParam,String genJavaConstructorParam(String),"[102, 104]","{'A590': [(102, 104)]}",{'A590': 1.0},A590,,"    public String genJavaConstructorParam(String fname) {
        return mType.genJavaConstructorParam(fname);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getName,String getName(),"[106, 108]","{'A590': [(106, 108)]}",{'A590': 1.0},A590,,"    public String getName() {
        return mName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getCsharpName,String getCsharpName(),"[110, 112]","{'A591': [(110, 112)]}",{'A591': 1.0},A591,,"    public String getCsharpName() {
        return ""Id"".equals(mName) ? ""ZKId"" : mName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getTag,String getTag(),"[114, 116]","{'A590': [(114, 116)]}",{'A590': 1.0},A590,,"    public String getTag() {
        return mName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,getType,JType getType(),"[118, 120]","{'A590': [(118, 120)]}",{'A590': 1.0},A590,,"    public JType getType() {
        return mType;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCppGetSet,String genCppGetSet(int),"[122, 124]","{'A590': [(122, 124)]}",{'A590': 1.0},A590,,"    public String genCppGetSet(int fIdx) {
        return mType.genCppGetSet(mName, fIdx);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpConstructorSet,String genCsharpConstructorSet(String),"[126, 128]","{'A591': [(126, 128)]}",{'A591': 1.0},A591,,"    public String genCsharpConstructorSet(String fname) {
        return mType.genCsharpConstructorSet(mName, fname);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpGetSet,String genCsharpGetSet(int),"[130, 132]","{'A591': [(130, 132)]}",{'A591': 1.0},A591,,"    public String genCsharpGetSet(int fIdx) {
        return mType.genCsharpGetSet(getCsharpName(), fIdx);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpWriteMethodName,String genCsharpWriteMethodName(),"[134, 136]","{'A591': [(134, 136)]}",{'A591': 1.0},A591,,"    public String genCsharpWriteMethodName() {
        return mType.genCsharpWriteMethod(getCsharpName(), getTag());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpReadMethodName,String genCsharpReadMethodName(),"[138, 140]","{'A591': [(138, 140)]}",{'A591': 1.0},A591,,"    public String genCsharpReadMethodName() {
        return mType.genCsharpReadMethod(getCsharpName(), getTag());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpCompareTo,String genCsharpCompareTo(),"[142, 144]","{'A591': [(142, 144)]}",{'A591': 1.0},A591,,"    public String genCsharpCompareTo() {
        return mType.genCsharpCompareTo(getCsharpName());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpEquals,String genCsharpEquals(),"[146, 148]","{'A583': [(147, 147)], 'A591': [(146, 146), (148, 148)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    public String genCsharpEquals() {
        return mType.genCsharpEquals(getCsharpName(), ""peer."" + getCsharpName());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genCsharpHashCode,String genCsharpHashCode(),"[150, 152]","{'A591': [(150, 152)]}",{'A591': 1.0},A591,,"    public String genCsharpHashCode() {
        return mType.genCsharpHashCode(getCsharpName());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaGetSet,String genJavaGetSet(int),"[155, 157]","{'A590': [(155, 157)]}",{'A590': 1.0},A590,,"    public String genJavaGetSet(int fIdx) {
        return mType.genJavaGetSet(mName, fIdx);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaWriteMethodName,String genJavaWriteMethodName(),"[159, 161]","{'A590': [(159, 161)]}",{'A590': 1.0},A590,,"    public String genJavaWriteMethodName() {
        return mType.genJavaWriteMethod(getName(), getTag());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaReadMethodName,String genJavaReadMethodName(),"[163, 165]","{'A590': [(163, 165)]}",{'A590': 1.0},A590,,"    public String genJavaReadMethodName() {
        return mType.genJavaReadMethod(getName(), getTag());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaCompareTo,String genJavaCompareTo(),"[167, 169]","{'A590': [(167, 169)]}",{'A590': 1.0},A590,,"    public String genJavaCompareTo() {
        return mType.genJavaCompareTo(getName());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaEquals,String genJavaEquals(),"[171, 173]","{'A583': [(172, 172)], 'A590': [(171, 171), (173, 173)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String genJavaEquals() {
        return mType.genJavaEquals(getName(), ""peer."" + getName());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaHashCode,String genJavaHashCode(),"[175, 177]","{'A590': [(175, 177)]}",{'A590': 1.0},A590,,"    public String genJavaHashCode() {
        return mType.genJavaHashCode(getName());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JField.java,JField,genJavaConstructorSet,String genJavaConstructorSet(String),"[179, 181]","{'A590': [(179, 181)]}",{'A590': 1.0},A590,,"    public String genJavaConstructorSet(String fname) {
        return mType.genJavaConstructorSet(mName, fname);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JString.java,JString,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""s"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JString.java,JString,genJavaReadWrapper,"String genJavaReadWrapper(String,String,boolean)","[37, 43]","{'A583': [(40, 40), (42, 42)], 'A590': [(37, 39), (41, 41), (43, 43)]}","{'A583': 0.2857142857142857, 'A590': 0.7142857142857143}",A590,,"    public String genJavaReadWrapper(String fname, String tag, boolean decl) {
        String ret = """";
        if (decl) {
            ret = ""    String "" + fname + "";\n"";
        }
        return ret + ""        "" + fname + ""=a_.readString(\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JString.java,JString,genJavaWriteWrapper,"String genJavaWriteWrapper(String,String)","[45, 47]","{'A583': [(46, 46)], 'A590': [(45, 45), (47, 47)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String genJavaWriteWrapper(String fname, String tag) {
        return ""        a_.writeString("" + fname + "",\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JDouble.java,JDouble,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""d"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JDouble.java,JDouble,genJavaHashCode,String genJavaHashCode(String),"[37, 39]","{'A590': [(37, 37), (39, 39)], 'A602': [(38, 38)]}","{'A590': 0.6666666666666666, 'A602': 0.3333333333333333}",A590,,"    public String genJavaHashCode(String fname) {
        return ""    ret = java.lang.Double.hashCode("" + fname + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/CppGenerator.java,CppGenerator,genCode,void genCode(),"[57, 123]","{'A590': [(57, 63), (123, 123)], 'A600': [(64, 64), (86, 86), (105, 105), (108, 108), (115, 115), (120, 120)], 'A604': [(65, 85), (87, 104), (106, 107), (109, 114), (116, 119), (121, 122)]}","{'A590': 0.11940298507462686, 'A600': 0.08955223880597014, 'A604': 0.7910447761194029}",A604,,"    void genCode() throws IOException {
        if (!outputDirectory.exists()) {
            if (!outputDirectory.mkdirs()) {
                throw new IOException(""unable to create output directory ""
                        + outputDirectory);
            }
        }

        try (FileWriter cc = new FileWriter(new File(outputDirectory, mName + "".cc""));
             FileWriter hh = new FileWriter(new File(outputDirectory, mName + "".hh""));
        ) {
            hh.write(""/**\n"");
            hh.write(""* Licensed to the Apache Software Foundation (ASF) under one\n"");
            hh.write(""* or more contributor license agreements.  See the NOTICE file\n"");
            hh.write(""* distributed with this work for additional information\n"");
            hh.write(""* regarding copyright ownership.  The ASF licenses this file\n"");
            hh.write(""* to you under the Apache License, Version 2.0 (the\n"");
            hh.write(""* \""License\""); you may not use this file except in compliance\n"");
            hh.write(""* with the License.  You may obtain a copy of the License at\n"");
            hh.write(""*\n"");
            hh.write(""*     http://www.apache.org/licenses/LICENSE-2.0\n"");
            hh.write(""*\n"");
            hh.write(""* Unless required by applicable law or agreed to in writing, software\n"");
            hh.write(""* distributed under the License is distributed on an \""AS IS\"" BASIS,\n"");
            hh.write(""* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"");
            hh.write(""* See the License for the specific language governing permissions and\n"");
            hh.write(""* limitations under the License.\n"");
            hh.write(""*/\n"");
            hh.write(""\n"");

            cc.write(""/**\n"");
            cc.write(""* Licensed to the Apache Software Foundation (ASF) under one\n"");
            cc.write(""* or more contributor license agreements.  See the NOTICE file\n"");
            cc.write(""* distributed with this work for additional information\n"");
            cc.write(""* regarding copyright ownership.  The ASF licenses this file\n"");
            cc.write(""* to you under the Apache License, Version 2.0 (the\n"");
            cc.write(""* \""License\""); you may not use this file except in compliance\n"");
            cc.write(""* with the License.  You may obtain a copy of the License at\n"");
            cc.write(""*\n"");
            cc.write(""*     http://www.apache.org/licenses/LICENSE-2.0\n"");
            cc.write(""*\n"");
            cc.write(""* Unless required by applicable law or agreed to in writing, software\n"");
            cc.write(""* distributed under the License is distributed on an \""AS IS\"" BASIS,\n"");
            cc.write(""* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"");
            cc.write(""* See the License for the specific language governing permissions and\n"");
            cc.write(""* limitations under the License.\n"");
            cc.write(""*/\n"");
            cc.write(""\n"");

            hh.write(""#ifndef __"" + mName.toUpperCase().replace('.', '_') + ""__\n"");
            hh.write(""#define __"" + mName.toUpperCase().replace('.', '_') + ""__\n"");

            hh.write(""#include \""recordio.hh\""\n"");
            for (Iterator<JFile> i = mInclFiles.iterator(); i.hasNext(); ) {
                JFile f = i.next();
                hh.write(""#include \"""" + f.getName() + "".hh\""\n"");
            }
            cc.write(""#include \"""" + mName + "".hh\""\n"");

            for (Iterator<JRecord> i = mRecList.iterator(); i.hasNext(); ) {
                JRecord jr = i.next();
                jr.genCppCode(hh, cc);
            }

            hh.write(""#endif //"" + mName.toUpperCase().replace('.', '_') + ""__\n"");
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genCppGetSet,"String genCppGetSet(String,int)","[42, 50]","{'A583': [(43, 44), (46, 47)], 'A590': [(42, 42), (45, 45), (48, 50)]}","{'A583': 0.4444444444444444, 'A590': 0.5555555555555556}",A590,,"    String genCppGetSet(String fname, int fIdx) {
        String cgetFunc = ""  virtual const "" + getCppType() + ""& get"" + fname + ""() const {\n"";
        cgetFunc += ""    return m"" + fname + "";\n"";
        cgetFunc += ""  }\n"";
        String getFunc = ""  virtual "" + getCppType() + ""& get"" + fname + ""() {\n"";
        getFunc += ""    bs_.set("" + fIdx + "");return m"" + fname + "";\n"";
        getFunc += ""  }\n"";
        return cgetFunc + getFunc;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genJavaCompareTo,String genJavaCompareTo(String),"[52, 54]","{'A583': [(53, 53)], 'A590': [(52, 52), (54, 54)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaCompareTo(String fname) {
        return ""    ret = "" + fname + "".compareTo(peer."" + fname + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genJavaEquals,"String genJavaEquals(String,String)","[56, 58]","{'A583': [(57, 57)], 'A590': [(56, 56), (58, 58)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaEquals(String fname, String peer) {
        return ""    ret = "" + fname + "".equals("" + peer + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genJavaHashCode,String genJavaHashCode(String),"[60, 62]","{'A583': [(61, 61)], 'A590': [(60, 60), (62, 62)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaHashCode(String fname) {
        return ""    ret = "" + fname + "".hashCode();\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genCsharpHashCode,String genCsharpHashCode(String),"[64, 66]","{'A583': [(65, 65)], 'A591': [(64, 64), (66, 66)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpHashCode(String fname) {
        return ""    ret = "" + capitalize(fname) + "".GetHashCode();\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genCsharpEquals,"String genCsharpEquals(String,String)","[68, 71]","{'A583': [(70, 70)], 'A591': [(68, 69), (71, 71)]}","{'A583': 0.25, 'A591': 0.75}",A591,,"    String genCsharpEquals(String name, String peer) {
        String[] peerSplit = peer.split(""\\."");
        return ""    ret = "" + capitalize(name) + "".Equals("" + peerSplit[0] + ""."" + capitalize(peerSplit[1]) + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JCompType.java,JCompType,genCsharpCompareTo,String genCsharpCompareTo(String),"[73, 75]","{'A583': [(74, 74)], 'A591': [(73, 73), (75, 75)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpCompareTo(String name) {
        return ""    ret = "" + capitalize(name) + "".CompareTo(peer."" + capitalize(name) + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JInt.java,JInt,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""i"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getName,String getName(),"[58, 60]","{'A590': [(58, 60)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getName() {
        return mName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getRecordToken,Token getRecordToken(),"[62, 64]","{'A601': [(62, 64)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public Token getRecordToken() {
        return mRecordToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCsharpName,String getCsharpName(),"[66, 68]","{'A591': [(66, 68)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getCsharpName() {
        return ""Id"".equals(mName) ? ""ZKId"" : mName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getJavaFQName,String getJavaFQName(),"[70, 72]","{'A590': [(70, 72)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getJavaFQName() {
        return mFQName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCppFQName,String getCppFQName(),"[74, 76]","{'A590': [(74, 76)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getCppFQName() {
        return mFQName.replaceAll(""\\."", ""::"");
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getJavaPackage,String getJavaPackage(),"[78, 80]","{'A590': [(78, 80)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getJavaPackage() {
        return mModule;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCppNameSpace,String getCppNameSpace(),"[82, 84]","{'A590': [(82, 84)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getCppNameSpace() {
        return mModule.replaceAll(""\\."", ""::"");
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCsharpNameSpace,String getCsharpNameSpace(),"[86, 97]","{'A583': [(92, 94)], 'A591': [(86, 91), (95, 97)]}","{'A583': 0.25, 'A591': 0.75}",A591,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getCsharpNameSpace() {
        String[] parts = mModule.split(""\\."");
        StringBuffer namespace = new StringBuffer();
        for (int i = 0; i < parts.length; i++) {
            String capitalized = parts[i].substring(0, 1).toUpperCase() + parts[i].substring(1).toLowerCase();
            namespace.append(capitalized);
            if (i != parts.length - 1) {
                namespace.append(""."");
            }
        }
        return namespace.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getFields,List<JField> getFields(),"[99, 101]","{'A590': [(100, 101)], 'A603': [(99, 99)]}","{'A590': 0.6666666666666666, 'A603': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public List<JField> getFields() {
        return mFields;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getSignature,String getSignature(),"[103, 112]","{'A583': [(106, 106)], 'A590': [(103, 103), (105, 105), (107, 112)], 'A600': [(104, 104)]}","{'A583': 0.1, 'A590': 0.8, 'A600': 0.1}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getSignature() {
        StringBuilder sb = new StringBuilder();
        sb.append(""L"").append(mName).append(""("");
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); ) {
            String s = i.next().getSignature();
            sb.append(s);
        }
        sb.append("")"");
        return sb.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCppDecl,String genCppDecl(String),"[114, 116]","{'A583': [(115, 115)], 'A590': [(114, 114), (116, 116)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String genCppDecl(String fname) {
        return ""  "" + getCppNameSpace() + ""::"" + mName + "" m"" + fname + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genJavaReadMethod,"String genJavaReadMethod(String,String)","[118, 120]","{'A590': [(118, 120)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String genJavaReadMethod(String fname, String tag) {
        return genJavaReadWrapper(fname, tag, false);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genJavaReadWrapper,"String genJavaReadWrapper(String,String,boolean)","[122, 130]","{'A583': [(125, 125), (127, 128)], 'A590': [(122, 122), (124, 124), (126, 126), (129, 130)], 'A600': [(123, 123)]}","{'A583': 0.3333333333333333, 'A590': 0.5555555555555556, 'A600': 0.1111111111111111}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String genJavaReadWrapper(String fname, String tag, boolean decl) {
        StringBuilder ret = new StringBuilder("""");
        if (decl) {
            ret.append(""    "" + getJavaFQName() + "" "" + fname + "";\n"");
        }
        ret.append(""    "" + fname + ""= new "" + getJavaFQName() + ""();\n"");
        ret.append(""    a_.readRecord("" + fname + "",\"""" + tag + ""\"");\n"");
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genJavaWriteWrapper,"String genJavaWriteWrapper(String,String)","[132, 134]","{'A583': [(133, 133)], 'A590': [(132, 132), (134, 134)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String genJavaWriteWrapper(String fname, String tag) {
        return ""    a_.writeRecord("" + fname + "",\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCsharpReadMethod,"String genCsharpReadMethod(String,String)","[136, 139]","{'A591': [(136, 139)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    String genCsharpReadMethod(String fname, String tag) {
        //return ""    ""+capitalize(fname)+""=a_.Read""+mMethodSuffix+""("" + capitalize(fname) + "",\""""+tag+""\"");\n"";
        return genCsharpReadWrapper(capitalize(fname), tag, false);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCsharpReadWrapper,"String genCsharpReadWrapper(String,String,boolean)","[141, 149]","{'A583': [(144, 144), (146, 147)], 'A591': [(141, 143), (145, 145), (148, 149)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String genCsharpReadWrapper(String fname, String tag, boolean decl) {
        StringBuilder ret = new StringBuilder("""");
        if (decl) {
            ret.append(""    "" + getCsharpFQName(mFQName) + "" "" + fname + "";\n"");
        }
        ret.append(""    "" + fname + ""= new "" + getCsharpFQName(mFQName) + ""();\n"");
        ret.append(""    a_.ReadRecord("" + fname + "",\"""" + tag + ""\"");\n"");
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCsharpWriteWrapper,"String genCsharpWriteWrapper(String,String)","[151, 153]","{'A583': [(152, 152)], 'A591': [(151, 151), (153, 153)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String genCsharpWriteWrapper(String fname, String tag) {
        return ""    a_.WriteRecord("" + fname + "",\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCCode,"void genCCode(FileWriter,FileWriter)","[157, 270]","{'A583': [(162, 170), (180, 180), (191, 191), (203, 203), (219, 219), (225, 225), (234, 237), (247, 247), (257, 257)], 'A590': [(157, 157)], 'A601': [(220, 224), (227, 230)], 'A600': [(216, 217), (267, 268), (270, 270)], 'A604': [(158, 161), (171, 179), (181, 190), (192, 202), (204, 215), (218, 218), (226, 226), (231, 233), (238, 246), (248, 256), (258, 266), (269, 269)]}","{'A583': 0.17543859649122806, 'A590': 0.008771929824561403, 'A601': 0.07894736842105263, 'A600': 0.043859649122807015, 'A604': 0.6929824561403509}",A604,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public void genCCode(FileWriter h, FileWriter c) throws IOException {
        for (JField f : mFields) {
            if (f.getType() instanceof JVector) {
                JVector jv = (JVector) f.getType();
                JType jvType = jv.getElementType();
                String structName = JVector.extractVectorName(jvType);
                if (vectorStructs.get(structName) == null) {
                    vectorStructs.put(structName, structName);
                    h.write(""struct "" + structName + "" {\n    int32_t count;\n"" + jv.getElementType().genCDecl(""*data"") + ""\n};\n"");
                    h.write(""int serialize_"" + structName + ""(struct oarchive *out, const char *tag, struct "" + structName + "" *v);\n"");
                    h.write(""int deserialize_"" + structName + ""(struct iarchive *in, const char *tag, struct "" + structName + "" *v);\n"");
                    h.write(""int allocate_"" + structName + ""(struct "" + structName + "" *v, int32_t len);\n"");
                    h.write(""int deallocate_"" + structName + ""(struct "" + structName + "" *v);\n"");
                    c.write(""int allocate_"" + structName + ""(struct "" + structName + "" *v, int32_t len) {\n"");
                    c.write(""    if (!len) {\n"");
                    c.write(""        v->count = 0;\n"");
                    c.write(""        v->data = 0;\n"");
                    c.write(""    } else {\n"");
                    c.write(""        v->count = len;\n"");
                    c.write(""        v->data = calloc(sizeof(*v->data), len);\n"");
                    c.write(""    }\n"");
                    c.write(""    return 0;\n"");
                    c.write(""}\n"");
                    c.write(""int deallocate_"" + structName + ""(struct "" + structName + "" *v) {\n"");
                    c.write(""    if (v->data) {\n"");
                    c.write(""        int32_t i;\n"");
                    c.write(""        for(i=0;i<v->count; i++) {\n"");
                    c.write(""            deallocate_"" + JRecord.extractMethodSuffix(jvType) + ""(&v->data[i]);\n"");
                    c.write(""        }\n"");
                    c.write(""        free(v->data);\n"");
                    c.write(""        v->data = 0;\n"");
                    c.write(""    }\n"");
                    c.write(""    return 0;\n"");
                    c.write(""}\n"");
                    c.write(""int serialize_"" + structName + ""(struct oarchive *out, const char *tag, struct "" + structName + "" *v)\n"");
                    c.write(""{\n"");
                    c.write(""    int32_t count = v->count;\n"");
                    c.write(""    int rc = 0;\n"");
                    c.write(""    int32_t i;\n"");
                    c.write(""    rc = out->start_vector(out, tag, &count);\n"");
                    c.write(""    for(i=0;i<v->count;i++) {\n"");
                    genSerialize(c, jvType, ""data"", ""data[i]"");
                    c.write(""    }\n"");
                    c.write(""    rc = rc ? rc : out->end_vector(out, tag);\n"");
                    c.write(""    return rc;\n"");
                    c.write(""}\n"");
                    c.write(""int deserialize_"" + structName + ""(struct iarchive *in, const char *tag, struct "" + structName + "" *v)\n"");
                    c.write(""{\n"");
                    c.write(""    int rc = 0;\n"");
                    c.write(""    int32_t i;\n"");
                    c.write(""    rc = in->start_vector(in, tag, &v->count);\n"");
                    c.write(""    v->data = calloc(v->count, sizeof(*v->data));\n"");
                    c.write(""    for(i=0;i<v->count;i++) {\n"");
                    genDeserialize(c, jvType, ""value"", ""data[i]"");
                    c.write(""    }\n"");
                    c.write(""    rc = in->end_vector(in, tag);\n"");
                    c.write(""    return rc;\n"");
                    c.write(""}\n"");

                }
            }
        }
        String recName = getName();

        String recordComments = getRecordComments();
        if (recordComments != null && !recordComments.isEmpty()) {
            h.write(recordComments);
        }
        h.write(""struct "" + recName + "" {\n"");
        for (JField f : mFields) {
            String fieldComments = getCFieldComments(f);
            if (fieldComments != null && !fieldComments.isEmpty()) {
                h.write(fieldComments);
            }
            h.write(f.genCDecl());
        }
        h.write(""};\n"");
        h.write(""int serialize_"" + recName + ""(struct oarchive *out, const char *tag, struct "" + recName + "" *v);\n"");
        h.write(""int deserialize_"" + recName + ""(struct iarchive *in, const char *tag, struct "" + recName + ""*v);\n"");
        h.write(""void deallocate_"" + recName + ""(struct "" + recName + ""*);\n"");
        c.write(""int serialize_"" + recName + ""(struct oarchive *out, const char *tag, struct "" + recName + "" *v)"");
        c.write(""{\n"");
        c.write(""    int rc;\n"");
        c.write(""    rc = out->start_record(out, tag);\n"");
        for (JField f : mFields) {
            genSerialize(c, f.getType(), f.getTag(), f.getName());
        }
        c.write(""    rc = rc ? rc : out->end_record(out, tag);\n"");
        c.write(""    return rc;\n"");
        c.write(""}\n"");
        c.write(""int deserialize_"" + recName + ""(struct iarchive *in, const char *tag, struct "" + recName + ""*v)"");
        c.write(""{\n"");
        c.write(""    int rc;\n"");
        c.write(""    rc = in->start_record(in, tag);\n"");
        for (JField f : mFields) {
            genDeserialize(c, f.getType(), f.getTag(), f.getName());
        }
        c.write(""    rc = rc ? rc : in->end_record(in, tag);\n"");
        c.write(""    return rc;\n"");
        c.write(""}\n"");
        c.write(""void deallocate_"" + recName + ""(struct "" + recName + ""*v)"");
        c.write(""{\n"");
        for (JField f : mFields) {
            if (f.getType() instanceof JRecord) {
                c.write(""    deallocate_"" + extractStructName(f.getType()) + ""(&v->"" + f.getName() + "");\n"");
            } else if (f.getType() instanceof JVector) {
                JVector vt = (JVector) f.getType();
                c.write(""    deallocate_"" + JVector.extractVectorName(vt.getElementType()) + ""(&v->"" + f.getName() + "");\n"");
            } else if (f.getType() instanceof JCompType) {
                c.write(""    deallocate_"" + extractMethodSuffix(f.getType()) + ""(&v->"" + f.getName() + "");\n"");
            }
        }
        c.write(""}\n"");
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genSerialize,"void genSerialize(FileWriter,JType,String,String)","[272, 280]","{'A583': [(276, 276)], 'A600': [(272, 273), (275, 275), (277, 277), (279, 280)], 'A593': [(274, 274), (278, 278)]}","{'A583': 0.1111111111111111, 'A600': 0.6666666666666666, 'A593': 0.2222222222222222}",A600,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private void genSerialize(FileWriter c, JType type, String tag, String name) throws IOException {
        if (type instanceof JRecord) {
            c.write(""    rc = rc ? rc : serialize_"" + extractStructName(type) + ""(out, \"""" + tag + ""\"", &v->"" + name + "");\n"");
        } else if (type instanceof JVector) {
            c.write(""    rc = rc ? rc : serialize_"" + JVector.extractVectorName(((JVector) type).getElementType()) + ""(out, \"""" + tag + ""\"", &v->"" + name + "");\n"");
        } else {
            c.write(""    rc = rc ? rc : out->serialize_"" + extractMethodSuffix(type) + ""(out, \"""" + tag + ""\"", &v->"" + name + "");\n"");
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genDeserialize,"void genDeserialize(FileWriter,JType,String,String)","[282, 290]","{'A583': [(286, 286)], 'A600': [(282, 283), (285, 285), (287, 287), (289, 290)], 'A593': [(284, 284), (288, 288)]}","{'A583': 0.1111111111111111, 'A600': 0.6666666666666666, 'A593': 0.2222222222222222}",A600,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private void genDeserialize(FileWriter c, JType type, String tag, String name) throws IOException {
        if (type instanceof JRecord) {
            c.write(""    rc = rc ? rc : deserialize_"" + extractStructName(type) + ""(in, \"""" + tag + ""\"", &v->"" + name + "");\n"");
        } else if (type instanceof JVector) {
            c.write(""    rc = rc ? rc : deserialize_"" + JVector.extractVectorName(((JVector) type).getElementType()) + ""(in, \"""" + tag + ""\"", &v->"" + name + "");\n"");
        } else {
            c.write(""    rc = rc ? rc : in->deserialize_"" + extractMethodSuffix(type) + ""(in, \"""" + tag + ""\"", &v->"" + name + "");\n"");
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,extractMethodSuffix,String extractMethodSuffix(JType),"[292, 297]","{'A600': [(292, 297)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    static String extractMethodSuffix(JType t) {
        if (t instanceof JRecord) {
            return extractStructName(t);
        }
        return t.getMethodSuffix();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,extractStructName,String extractStructName(JType),"[299, 307]","{'A583': [(299, 299), (301, 305)], 'A590': [(307, 307)], 'A600': [(300, 300), (306, 306)]}","{'A583': 0.6666666666666666, 'A590': 0.1111111111111111, 'A600': 0.2222222222222222}",A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private static String extractStructName(JType t) {
        String type = t.getCType();

        if (!type.startsWith(""struct "")) {
            return type;
        }

        return type.substring(""struct "".length());
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCppCode,"void genCppCode(FileWriter,FileWriter)","[309, 419]","{'A583': [(310, 310), (313, 313), (316, 316), (319, 319), (323, 323), (330, 332), (338, 340), (342, 342), (350, 350), (352, 352), (354, 354), (360, 360), (367, 367), (369, 369), (371, 371), (377, 377), (383, 383), (389, 389), (391, 391), (394, 394), (399, 399), (401, 401), (404, 404), (409, 410), (414, 415)], 'A590': [(309, 309), (311, 312), (314, 314), (317, 317), (320, 322), (324, 329), (333, 337), (341, 341), (343, 349), (351, 351), (353, 353), (355, 358), (361, 366), (368, 368), (370, 370), (372, 375), (378, 378), (380, 382), (384, 387), (390, 390), (392, 393), (395, 397), (400, 400), (402, 403), (405, 407), (411, 412), (416, 417), (419, 419)], 'A591': [(379, 379)], 'A600': [(315, 315), (318, 318), (359, 359), (376, 376), (388, 388), (398, 398), (408, 408), (413, 413), (418, 418)]}","{'A583': 0.27927927927927926, 'A590': 0.6306306306306306, 'A591': 0.009009009009009009, 'A600': 0.08108108108108109}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public void genCppCode(FileWriter hh, FileWriter cc)
            throws IOException {
        String[] ns = getCppNameSpace().split(""::"");
        for (int i = 0; i < ns.length; i++) {
            hh.write(""namespace "" + ns[i] + "" {\n"");
        }

        hh.write(""class "" + getName() + "" : public ::hadoop::Record {\n"");
        hh.write(""private:\n"");

        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); ) {
            JField jf = i.next();
            hh.write(jf.genCppDecl());
        }
        hh.write(""  mutable std::bitset<"" + mFields.size() + ""> bs_;\n"");
        hh.write(""public:\n"");
        hh.write(""  virtual void serialize(::hadoop::OArchive& a_, const char* tag) const;\n"");
        hh.write(""  virtual void deserialize(::hadoop::IArchive& a_, const char* tag);\n"");
        hh.write(""  virtual const ::std::string& type() const;\n"");
        hh.write(""  virtual const ::std::string& signature() const;\n"");
        hh.write(""  virtual bool validate() const;\n"");
        hh.write(""  virtual bool operator<(const "" + getName() + ""& peer_) const;\n"");
        hh.write(""  virtual bool operator==(const "" + getName() + ""& peer_) const;\n"");
        hh.write(""  virtual ~"" + getName() + ""() {};\n"");
        int fIdx = 0;
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
            JField jf = i.next();
            hh.write(jf.genCppGetSet(fIdx));
        }
        hh.write(""}; // end record "" + getName() + ""\n"");
        for (int i = ns.length - 1; i >= 0; i--) {
            hh.write(""} // end namespace "" + ns[i] + ""\n"");
        }
        cc.write(""void "" + getCppFQName() + ""::serialize(::hadoop::OArchive& a_, const char* tag) const {\n"");
        cc.write(""  if (!validate()) throw new ::hadoop::IOException(\""All fields not set.\"");\n"");
        cc.write(""  a_.startRecord(*this,tag);\n"");
        fIdx = 0;
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
            JField jf = i.next();
            String name = jf.getName();
            if (jf.getType() instanceof JBuffer) {
                cc.write(""  a_.serialize(m"" + name + "",m"" + name + "".length(),\"""" + jf.getTag() + ""\"");\n"");
            } else {
                cc.write(""  a_.serialize(m"" + name + "",\"""" + jf.getTag() + ""\"");\n"");
            }
            cc.write(""  bs_.reset("" + fIdx + "");\n"");
        }
        cc.write(""  a_.endRecord(*this,tag);\n"");
        cc.write(""  return;\n"");
        cc.write(""}\n"");

        cc.write(""void "" + getCppFQName() + ""::deserialize(::hadoop::IArchive& a_, const char* tag) {\n"");
        cc.write(""  a_.startRecord(*this,tag);\n"");
        fIdx = 0;
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
            JField jf = i.next();
            String name = jf.getName();
            if (jf.getType() instanceof JBuffer) {
                cc.write(""  { size_t len=0; a_.deserialize(m"" + name + "",len,\"""" + jf.getTag() + ""\"");}\n"");
            } else {
                cc.write(""  a_.deserialize(m"" + name + "",\"""" + jf.getTag() + ""\"");\n"");
            }
            cc.write(""  bs_.set("" + fIdx + "");\n"");
        }
        cc.write(""  a_.endRecord(*this,tag);\n"");
        cc.write(""  return;\n"");
        cc.write(""}\n"");

        cc.write(""bool "" + getCppFQName() + ""::validate() const {\n"");
        cc.write(""  if (bs_.size() != bs_.count()) return false;\n"");
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
            JField jf = (JField) i.next();
            JType type = jf.getType();
            if (type instanceof JRecord) {
                cc.write(""  if (!m"" + jf.getName() + "".validate()) return false;\n"");
            }
        }
        cc.write(""  return true;\n"");
        cc.write(""}\n"");

        cc.write(""bool "" + getCppFQName() + ""::operator< (const "" + getCppFQName() + ""& peer_) const {\n"");
        cc.write(""  return (1\n"");
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); ) {
            JField jf = i.next();
            String name = jf.getName();
            cc.write(""    && (m"" + name + "" < peer_.m"" + name + "")\n"");
        }
        cc.write(""  );\n"");
        cc.write(""}\n"");

        cc.write(""bool "" + getCppFQName() + ""::operator== (const "" + getCppFQName() + ""& peer_) const {\n"");
        cc.write(""  return (1\n"");
        for (Iterator<JField> i = mFields.iterator(); i.hasNext(); ) {
            JField jf = i.next();
            String name = jf.getName();
            cc.write(""    && (m"" + name + "" == peer_.m"" + name + "")\n"");
        }
        cc.write(""  );\n"");
        cc.write(""}\n"");

        cc.write(""const ::std::string&"" + getCppFQName() + ""::type() const {\n"");
        cc.write(""  static const ::std::string type_(\"""" + mName + ""\"");\n"");
        cc.write(""  return type_;\n"");
        cc.write(""}\n"");

        cc.write(""const ::std::string&"" + getCppFQName() + ""::signature() const {\n"");
        cc.write(""  static const ::std::string sig_(\"""" + getSignature() + ""\"");\n"");
        cc.write(""  return sig_;\n"");
        cc.write(""}\n"");

    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genJavaCode,void genJavaCode(File),"[421, 603]","{'A583': [(433, 433), (518, 519)], 'A590': [(422, 423), (425, 427), (429, 432), (510, 510), (530, 530), (579, 580), (583, 584), (603, 603)], 'A591': [(421, 421), (424, 424)], 'A601': [(457, 460), (465, 468)], 'A600': [(473, 473), (503, 503), (586, 586), (600, 600)], 'A604': [(434, 454), (462, 464), (469, 472), (474, 502), (504, 509), (511, 517), (520, 526), (528, 529), (531, 578), (581, 582), (585, 585), (587, 599), (601, 602)], 'A589': [(428, 428)], 'A584': [(455, 455)], 'A594': [(456, 456), (461, 461)], 'A602': [(527, 527)]}","{'A583': 0.01639344262295082, 'A590': 0.08743169398907104, 'A591': 0.01092896174863388, 'A601': 0.04371584699453552, 'A600': 0.02185792349726776, 'A604': 0.7923497267759563, 'A589': 0.00546448087431694, 'A584': 0.00546448087431694, 'A594': 0.01092896174863388, 'A602': 0.00546448087431694}",A604,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public void genJavaCode(File outputDirectory) throws IOException {
        String pkg = getJavaPackage();
        String pkgpath = pkg.replaceAll(""\\."", ""/"");
        File pkgdir = new File(outputDirectory, pkgpath);
        if (!pkgdir.exists()) {
            // create the pkg directory
            if (!pkgdir.mkdirs()) {
                throw new IOException(""Cannot create directory: "" + pkgpath);
            }
        } else if (!pkgdir.isDirectory()) {
            throw new IOException(pkgpath + "" is not a directory."");
        }
        try (FileWriter jj = new FileWriter(new File(pkgdir, getName() + "".java""))) {
            jj.write(""// File generated by hadoop record compiler. Do not edit.\n"");
            jj.write(""/**\n"");
            jj.write(""* Licensed to the Apache Software Foundation (ASF) under one\n"");
            jj.write(""* or more contributor license agreements.  See the NOTICE file\n"");
            jj.write(""* distributed with this work for additional information\n"");
            jj.write(""* regarding copyright ownership.  The ASF licenses this file\n"");
            jj.write(""* to you under the Apache License, Version 2.0 (the\n"");
            jj.write(""* \""License\""); you may not use this file except in compliance\n"");
            jj.write(""* with the License.  You may obtain a copy of the License at\n"");
            jj.write(""*\n"");
            jj.write(""*     http://www.apache.org/licenses/LICENSE-2.0\n"");
            jj.write(""*\n"");
            jj.write(""* Unless required by applicable law or agreed to in writing, software\n"");
            jj.write(""* distributed under the License is distributed on an \""AS IS\"" BASIS,\n"");
            jj.write(""* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"");
            jj.write(""* See the License for the specific language governing permissions and\n"");
            jj.write(""* limitations under the License.\n"");
            jj.write(""*/\n"");
            jj.write(""\n"");
            jj.write(""package "" + getJavaPackage() + "";\n\n"");
            jj.write(""import org.apache.jute.*;\n"");
            jj.write(""import org.apache.jute.Record; // JDK14 needs explicit import due to clash with java.lang.Record\n"");
            jj.write(""import org.apache.yetus.audience.InterfaceAudience;\n"");
            String recordComments = getRecordComments();
            if (recordComments != null && !recordComments.isEmpty()) {
                jj.write(recordComments);
            }
            jj.write(""@InterfaceAudience.Public\n"");
            jj.write(""public class "" + getName() + "" implements Record {\n"");
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); ) {
                JField jf = i.next();
                String fieldComments = getJavaFieldComments(jf);
                if (fieldComments != null && !fieldComments.isEmpty()) {
                    jj.write(fieldComments);
                }
                jj.write(jf.genJavaDecl());
            }
            jj.write(""  public "" + getName() + ""() {\n"");
            jj.write(""  }\n"");

            jj.write(""  public "" + getName() + ""(\n"");
            int fIdx = 0;
            int fLen = mFields.size();
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaConstructorParam(jf.getName()));
                jj.write((fLen - 1 == fIdx) ? """" : "",\n"");
            }
            jj.write("") {\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaConstructorSet(jf.getName()));
            }
            jj.write(""  }\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaGetSet(fIdx));
            }
            jj.write(""  public void serialize(OutputArchive a_, String tag) throws java.io.IOException {\n"");
            jj.write(""    a_.startRecord(this,tag);\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaWriteMethodName());
            }
            jj.write(""    a_.endRecord(this,tag);\n"");
            jj.write(""  }\n"");

            jj.write(""  public void deserialize(InputArchive a_, String tag) throws java.io.IOException {\n"");
            jj.write(""    a_.startRecord(tag);\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaReadMethodName());
            }
            jj.write(""    a_.endRecord(tag);\n"");
            jj.write(""}\n"");

            jj.write(""  public String toString() {\n"");
            jj.write(""    try {\n"");
            jj.write(""      java.io.ByteArrayOutputStream s =\n"");
            jj.write(""        new java.io.ByteArrayOutputStream();\n"");
            jj.write(""      ToStringOutputArchive a_ = \n"");
            jj.write(""        new ToStringOutputArchive(s);\n"");
            jj.write(""      a_.startRecord(this,\""\"");\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaWriteMethodName());
            }
            jj.write(""      a_.endRecord(this,\""\"");\n"");
            jj.write(""      return new String(s.toByteArray(), java.nio.charset.StandardCharsets.UTF_8);\n"");
            jj.write(""    } catch (Throwable ex) {\n"");
            jj.write(""      ex.printStackTrace();\n"");
            jj.write(""    }\n"");
            jj.write(""    return \""ERROR\"";\n"");
            jj.write(""  }\n"");

            jj.write(""  public void write(java.io.DataOutput out) throws java.io.IOException {\n"");
            jj.write(""    BinaryOutputArchive archive = new BinaryOutputArchive(out);\n"");
            jj.write(""    serialize(archive, \""\"");\n"");
            jj.write(""  }\n"");

            jj.write(""  public void readFields(java.io.DataInput in) throws java.io.IOException {\n"");
            jj.write(""    BinaryInputArchive archive = new BinaryInputArchive(in);\n"");
            jj.write(""    deserialize(archive, \""\"");\n"");
            jj.write(""  }\n"");

            jj.write(""  public int compareTo (Object peer_) throws ClassCastException {\n"");
            boolean unimplemented = false;
            for (JField f : mFields) {
                if ((f.getType() instanceof JMap)
                        || (f.getType() instanceof JVector)) {
                    unimplemented = true;
                }
            }
            if (unimplemented) {
                jj.write(""    throw new UnsupportedOperationException(\""comparing ""
                        + getName() + "" is unimplemented\"");\n"");
            } else {
                jj.write(""    if (!(peer_ instanceof "" + getName() + "")) {\n"");
                jj.write(""      throw new ClassCastException(\""Comparing different types of records.\"");\n"");
                jj.write(""    }\n"");
                jj.write(""    "" + getName() + "" peer = ("" + getName() + "") peer_;\n"");
                jj.write(""    int ret = 0;\n"");
                for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                    JField jf = i.next();
                    jj.write(jf.genJavaCompareTo());
                    jj.write(""    if (ret != 0) return ret;\n"");
                }
                jj.write(""     return ret;\n"");
            }
            jj.write(""  }\n"");

            jj.write(""  public boolean equals(Object peer_) {\n"");
            jj.write(""    if (!(peer_ instanceof "" + getName() + "")) {\n"");
            jj.write(""      return false;\n"");
            jj.write(""    }\n"");
            jj.write(""    if (peer_ == this) {\n"");
            jj.write(""      return true;\n"");
            jj.write(""    }\n"");
            jj.write(""    "" + getName() + "" peer = ("" + getName() + "") peer_;\n"");
            jj.write(""    boolean ret = false;\n"");
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaEquals());
                jj.write(""    if (!ret) return ret;\n"");
            }
            jj.write(""     return ret;\n"");
            jj.write(""  }\n"");

            jj.write(""  public int hashCode() {\n"");
            jj.write(""    int result = 17;\n"");
            jj.write(""    int ret;\n"");
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                jj.write(jf.genJavaHashCode());
                jj.write(""    result = 37*result + ret;\n"");
            }
            jj.write(""    return result;\n"");
            jj.write(""  }\n"");
            jj.write(""  public static String signature() {\n"");
            jj.write(""    return \"""" + getSignature() + ""\"";\n"");
            jj.write(""  }\n"");

            jj.write(""}\n"");
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,genCsharpCode,void genCsharpCode(File),"[605, 780]","{'A591': [(605, 608), (610, 613), (634, 634), (677, 677), (684, 684), (706, 706), (755, 756), (759, 760), (762, 762), (776, 776), (780, 780)], 'A604': [(614, 633), (635, 676), (678, 683), (685, 705), (707, 754), (757, 758), (761, 761), (763, 775), (777, 779)], 'A589': [(609, 609)]}","{'A591': 0.10795454545454546, 'A604': 0.8863636363636364, 'A589': 0.005681818181818182}",A604,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public void genCsharpCode(File outputDirectory) throws IOException {
        if (!outputDirectory.exists()) {
            // create the pkg directory
            if (!outputDirectory.mkdirs()) {
                throw new IOException(""Cannot create directory: "" + outputDirectory);
            }
        } else if (!outputDirectory.isDirectory()) {
            throw new IOException(outputDirectory + "" is not a directory."");
        }

        try (FileWriter cs = new FileWriter(new File(outputDirectory, getName() + "".cs""));) {
            cs.write(""// File generated by hadoop record compiler. Do not edit.\n"");
            cs.write(""/**\n"");
            cs.write(""* Licensed to the Apache Software Foundation (ASF) under one\n"");
            cs.write(""* or more contributor license agreements.  See the NOTICE file\n"");
            cs.write(""* distributed with this work for additional information\n"");
            cs.write(""* regarding copyright ownership.  The ASF licenses this file\n"");
            cs.write(""* to you under the Apache License, Version 2.0 (the\n"");
            cs.write(""* \""License\""); you may not use this file except in compliance\n"");
            cs.write(""* with the License.  You may obtain a copy of the License at\n"");
            cs.write(""*\n"");
            cs.write(""*     http://www.apache.org/licenses/LICENSE-2.0\n"");
            cs.write(""*\n"");
            cs.write(""* Unless required by applicable law or agreed to in writing, software\n"");
            cs.write(""* distributed under the License is distributed on an \""AS IS\"" BASIS,\n"");
            cs.write(""* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"");
            cs.write(""* See the License for the specific language governing permissions and\n"");
            cs.write(""* limitations under the License.\n"");
            cs.write(""*/\n"");
            cs.write(""\n"");
            cs.write(""using System;\n"");
            cs.write(""using Org.Apache.Jute;\n"");
            cs.write(""\n"");
            cs.write(""namespace "" + getCsharpNameSpace() + ""\n"");
            cs.write(""{\n"");

            String className = getCsharpName();
            cs.write(""public class "" + className + "" : IRecord, IComparable \n"");
            cs.write(""{\n"");
            cs.write(""  public "" + className + ""() {\n"");
            cs.write(""  }\n"");

            cs.write(""  public "" + className + ""(\n"");
            int fIdx = 0;
            int fLen = mFields.size();
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpConstructorParam(jf.getCsharpName()));
                cs.write((fLen - 1 == fIdx) ? """" : "",\n"");
            }
            cs.write("") {\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpConstructorSet(jf.getCsharpName()));
            }
            cs.write(""  }\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpGetSet(fIdx));
                cs.write(""\n"");
            }
            cs.write(""  public void Serialize(IOutputArchive a_, String tag) {\n"");
            cs.write(""    a_.StartRecord(this,tag);\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpWriteMethodName());
            }
            cs.write(""    a_.EndRecord(this,tag);\n"");
            cs.write(""  }\n"");

            cs.write(""  public void Deserialize(IInputArchive a_, String tag) {\n"");
            cs.write(""    a_.StartRecord(tag);\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpReadMethodName());
            }
            cs.write(""    a_.EndRecord(tag);\n"");
            cs.write(""}\n"");

            cs.write(""  public override String ToString() {\n"");
            cs.write(""    try {\n"");
            cs.write(""      System.IO.MemoryStream ms = new System.IO.MemoryStream();\n"");
            cs.write(""      MiscUtil.IO.EndianBinaryWriter writer =\n"");
            cs.write(""        new MiscUtil.IO.EndianBinaryWriter(MiscUtil.Conversion.EndianBitConverter.Big, ms, System.Text.Encoding.UTF8);\n"");
            cs.write(""      BinaryOutputArchive a_ = \n"");
            cs.write(""        new BinaryOutputArchive(writer);\n"");
            cs.write(""      a_.StartRecord(this,\""\"");\n"");
            fIdx = 0;
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpWriteMethodName());
            }
            cs.write(""      a_.EndRecord(this,\""\"");\n"");
            cs.write(""      ms.Position = 0;\n"");
            cs.write(""      return System.Text.Encoding.UTF8.GetString(ms.ToArray());\n"");
            cs.write(""    } catch (Exception ex) {\n"");
            cs.write(""      Console.WriteLine(ex.StackTrace);\n"");
            cs.write(""    }\n"");
            cs.write(""    return \""ERROR\"";\n"");
            cs.write(""  }\n"");

            cs.write(""  public void Write(MiscUtil.IO.EndianBinaryWriter writer) {\n"");
            cs.write(""    BinaryOutputArchive archive = new BinaryOutputArchive(writer);\n"");
            cs.write(""    Serialize(archive, \""\"");\n"");
            cs.write(""  }\n"");

            cs.write(""  public void ReadFields(MiscUtil.IO.EndianBinaryReader reader) {\n"");
            cs.write(""    BinaryInputArchive archive = new BinaryInputArchive(reader);\n"");
            cs.write(""    Deserialize(archive, \""\"");\n"");
            cs.write(""  }\n"");

            cs.write(""  public int CompareTo (object peer_) {\n"");
            boolean unimplemented = false;
            for (JField f : mFields) {
                if ((f.getType() instanceof JMap)
                        || (f.getType() instanceof JVector)) {
                    unimplemented = true;
                }
            }
            if (unimplemented) {
                cs.write(""    throw new InvalidOperationException(\""comparing ""
                        + getCsharpName() + "" is unimplemented\"");\n"");
            } else {
                cs.write(""    if (!(peer_ is "" + getCsharpName() + "")) {\n"");
                cs.write(""      throw new InvalidOperationException(\""Comparing different types of records.\"");\n"");
                cs.write(""    }\n"");
                cs.write(""    "" + getCsharpName() + "" peer = ("" + getCsharpName() + "") peer_;\n"");
                cs.write(""    int ret = 0;\n"");
                for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                    JField jf = i.next();
                    cs.write(jf.genCsharpCompareTo());
                    cs.write(""    if (ret != 0) return ret;\n"");
                }
                cs.write(""     return ret;\n"");
            }
            cs.write(""  }\n"");

            cs.write(""  public override bool Equals(object peer_) {\n"");
            cs.write(""    if (!(peer_ is "" + getCsharpName() + "")) {\n"");
            cs.write(""      return false;\n"");
            cs.write(""    }\n"");
            cs.write(""    if (peer_ == this) {\n"");
            cs.write(""      return true;\n"");
            cs.write(""    }\n"");
            cs.write(""    bool ret = false;\n"");
            cs.write(""    "" + getCsharpName() + "" peer = ("" + getCsharpName() + "")peer_;\n"");
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpEquals());
                cs.write(""    if (!ret) return ret;\n"");
            }
            cs.write(""     return ret;\n"");
            cs.write(""  }\n"");

            cs.write(""  public override int GetHashCode() {\n"");
            cs.write(""    int result = 17;\n"");
            cs.write(""    int ret;\n"");
            for (Iterator<JField> i = mFields.iterator(); i.hasNext(); fIdx++) {
                JField jf = i.next();
                cs.write(jf.genCsharpHashCode());
                cs.write(""    result = 37*result + ret;\n"");
            }
            cs.write(""    return result;\n"");
            cs.write(""  }\n"");
            cs.write(""  public static string Signature() {\n"");
            cs.write(""    return \"""" + getSignature() + ""\"";\n"");
            cs.write(""  }\n"");

            cs.write(""}\n"");
            cs.write(""}\n"");
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCsharpFQName,String getCsharpFQName(String),"[782, 795]","{'A583': [(790, 792), (795, 795)], 'A591': [(782, 789), (793, 794)]}","{'A583': 0.2857142857142857, 'A591': 0.7142857142857143}",A591,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public static String getCsharpFQName(String name) {
        String[] packages = name.split(""\\."");
        StringBuffer fQName = new StringBuffer();
        for (int i = 0; i < packages.length; i++) {
            String pack = packages[i];
            pack = capitalize(pack);
            pack = ""Id"".equals(pack) ? ""ZKId"" : pack;
            fQName.append(capitalize(pack));
            if (i != packages.length - 1) {
                fQName.append(""."");
            }
        }
        return fQName.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getJavaFieldComments,String getJavaFieldComments(JField),"[797, 799]","{'A601': [(797, 799)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getJavaFieldComments(JField jField) {
        return getFieldComments(jField, ""  "");
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCFieldComments,String getCFieldComments(JField),"[801, 803]","{'A601': [(801, 803)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getCFieldComments(JField jField) {
        return getFieldComments(jField, ""    "");
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getFieldComments,"String getFieldComments(JField,String)","[805, 821]","{'A601': [(805, 821)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private String getFieldComments(JField jField, String indent) {
        if (jField == null || jField.getTypeToken() == null || jField.getNextToken() == null) {
            return """";
        }

        // get the comment before the line
        Token beforeTheLineCommentToken = getCommentToken(jField.getTypeToken(), jField.getPreviousToken());
        List<String> comments = extractComments(beforeTheLineCommentToken, Integer.MAX_VALUE);

        Token endOfLineCommentToken = getCommentToken(jField.getNextToken(), null);
        if (endOfLineCommentToken != null && jField.getTypeToken().beginLine == endOfLineCommentToken.beginLine) {

            comments.addAll(extractComments(endOfLineCommentToken, endOfLineCommentToken.beginLine));
        }

        return formatComments(indent, comments);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getCommentToken,"Token getCommentToken(Token,Token)","[823, 837]","{'A601': [(823, 837)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private Token getCommentToken(Token token, Token previousToken) {
        if (token == null || token.specialToken == null) {
            return null;
        }

        Token commentToken = token.specialToken;
        while (commentToken.specialToken != null) {
            commentToken = commentToken.specialToken;
        }
        // Skip end of line comment belong to previous token.
        while (previousToken != null && commentToken != null && commentToken.beginLine == previousToken.endLine) {
            commentToken = commentToken.next;
        }
        return commentToken;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,getRecordComments,String getRecordComments(),"[839, 847]","{'A601': [(839, 847)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    public String getRecordComments() {
        if (getRecordToken() == null || getRecordToken().specialToken == null) {
            return """";
        }

        // get the comments before the class
        Token commentToken = getCommentToken(getRecordToken(), null);
        return formatComments("""", extractComments(commentToken, Integer.MAX_VALUE));
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,formatComments,"String formatComments(String,List<String>)","[849, 863]","{'A601': [(849, 863)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private static String formatComments(String indent, List<String> commentLines) {
        if (commentLines == null || commentLines.isEmpty()) {
            return """";
        }

        StringBuilder builder = new StringBuilder();
        for (String line : commentLines) {
            if (!line.isEmpty()) {
                builder.append(indent).append(line);
            }
            builder.append(System.lineSeparator());
        }

        return builder.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JRecord.java,JRecord,extractComments,"List<String> extractComments(Token,int)","[870, 913]","{'A601': [(870, 913)]}",{'A601': 1.0},A601,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/compiler/JRecordTest.java,"    private static List<String> extractComments(Token token, int endLine) {
        List<String> comments = new ArrayList<>();

        if (token == null) {
            return comments;
        }

        int nextLine = token.beginLine;
        while (token != null && token.beginLine <= endLine) {
            while (nextLine < token.beginLine) {
                comments.add("""");
                nextLine++;
            }
            nextLine = token.endLine + 1;
            switch (token.kind) {
                case RccConstants.ONE_LINE_COMMENT:
                    comments.add(token.image);
                    break;
                case RccConstants.MULTI_LINE_COMMENT: {
                    List<String> lines = Arrays.asList(token.image.split(""\r|\n|\r\n""));
                    // First line captures no indentation.
                    comments.add(lines.get(0));
                    int indentSpaces = token.beginColumn - 1;
                    for (int i = 1; i < lines.size(); i++) {
                        String line = lines.get(i);
                        int j = 0;
                        while (j < indentSpaces && j < line.length()) {
                            if (line.charAt(j) != ' ') {
                                break;
                            }
                            j++;
                        }
                        comments.add(line.substring(j));
                    }
                }
                break;
                default:
                    throw new IllegalStateException(""expect comment token, but get token kind "" + token.kind);
            }
            token = token.next;
        }

        return comments;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JFloat.java,JFloat,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""f"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JFloat.java,JFloat,genJavaHashCode,String genJavaHashCode(String),"[37, 39]","{'A590': [(37, 37), (39, 39)], 'A602': [(38, 38)]}","{'A590': 0.6666666666666666, 'A602': 0.3333333333333333}",A590,,"    public String genJavaHashCode(String fname) {
        return ""    ret = java.lang.Float.hashCode("" + fname + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,getLevel,String getLevel(),"[28, 30]","{'A583': [(28, 30)]}",{'A583': 1.0},A583,,"    private static String getLevel() {
        return Integer.toString(level);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,incrLevel,void incrLevel(),"[32, 34]","{'A583': [(32, 34)]}",{'A583': 1.0},A583,,"    private static void incrLevel() {
        level++;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,decrLevel,void decrLevel(),"[36, 38]","{'A583': [(36, 38)]}",{'A583': 1.0},A583,,"    private static void decrLevel() {
        level--;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,getId,String getId(String),"[40, 42]","{'A583': [(40, 42)]}",{'A583': 1.0},A583,,"    private static String getId(String id) {
        return id + getLevel();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,getSignature,String getSignature(),"[57, 59]","{'A583': [(58, 58)], 'A590': [(57, 57), (59, 59)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String getSignature() {
        return ""{"" + mKey.getSignature() + mValue.getSignature() + ""}"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genJavaCompareTo,String genJavaCompareTo(String),"[61, 64]","{'A583': [(63, 63)], 'A590': [(61, 62), (64, 64)]}","{'A583': 0.25, 'A590': 0.75}",A590,,"    public String genJavaCompareTo(String fname) {
        return ""    throw new UnsupportedOperationException(\""comparing ""
                + fname + "" is unimplemented\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genJavaReadWrapper,"String genJavaReadWrapper(String,String,boolean)","[66, 84]","{'A583': [(69, 69), (73, 78), (80, 80)], 'A590': [(66, 66), (68, 68), (70, 72), (79, 79), (81, 84)], 'A600': [(67, 67)]}","{'A583': 0.42105263157894735, 'A590': 0.5263157894736842, 'A600': 0.05263157894736842}",A590,,"    public String genJavaReadWrapper(String fname, String tag, boolean decl) {
        StringBuilder ret = new StringBuilder("""");
        if (decl) {
            ret.append(""    java.util.TreeMap "" + fname + "";\n"");
        }
        ret.append(""    {\n"");
        incrLevel();
        ret.append(""      org.apache.jute.Index "" + getId(""midx"") + "" = a_.startMap(\"""" + tag + ""\"");\n"");
        ret.append(""      "" + fname + ""=new java.util.TreeMap();\n"");
        ret.append(""      for (; !"" + getId(""midx"") + "".done(); "" + getId(""midx"") + "".incr()) {\n"");
        ret.append(mKey.genJavaReadWrapper(getId(""k""), getId(""k""), true));
        ret.append(mValue.genJavaReadWrapper(getId(""v""), getId(""v""), true));
        ret.append(""        "" + fname + "".put("" + getId(""k"") + "","" + getId(""v"") + "");\n"");
        ret.append(""      }\n"");
        ret.append(""    a_.endMap(\"""" + tag + ""\"");\n"");
        decrLevel();
        ret.append(""    }\n"");
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genJavaReadMethod,"String genJavaReadMethod(String,String)","[86, 88]","{'A590': [(86, 88)]}",{'A590': 1.0},A590,,"    public String genJavaReadMethod(String fname, String tag) {
        return genJavaReadWrapper(fname, tag, false);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genJavaWriteWrapper,"String genJavaWriteWrapper(String,String)","[90, 106]","{'A583': [(93, 100), (102, 102)], 'A590': [(90, 90), (92, 92), (101, 101), (103, 106)], 'A600': [(91, 91)]}","{'A583': 0.5294117647058824, 'A590': 0.4117647058823529, 'A600': 0.058823529411764705}",A583,,"    public String genJavaWriteWrapper(String fname, String tag) {
        StringBuilder ret = new StringBuilder(""    {\n"");
        incrLevel();
        ret.append(""      a_.startMap("" + fname + "",\"""" + tag + ""\"");\n"");
        ret.append(""      java.util.Set "" + getId(""es"") + "" = "" + fname + "".entrySet();\n"");
        ret.append(""      for(java.util.Iterator "" + getId(""midx"") + "" = "" + getId(""es"") + "".iterator(); "" + getId(""midx"") + "".hasNext(); ) {\n"");
        ret.append(""        java.util.Map.Entry "" + getId(""me"") + "" = (java.util.Map.Entry) "" + getId(""midx"") + "".next();\n"");
        ret.append(""        "" + mKey.getJavaWrapperType() + "" "" + getId(""k"") + "" = ("" + mKey.getJavaWrapperType() + "") "" + getId(""me"") + "".getKey();\n"");
        ret.append(""        "" + mValue.getJavaWrapperType() + "" "" + getId(""v"") + "" = ("" + mValue.getJavaWrapperType() + "") "" + getId(""me"") + "".getValue();\n"");
        ret.append(mKey.genJavaWriteWrapper(getId(""k""), getId(""k"")));
        ret.append(mValue.genJavaWriteWrapper(getId(""v""), getId(""v"")));
        ret.append(""      }\n"");
        ret.append(""      a_.endMap("" + fname + "",\"""" + tag + ""\"");\n"");
        ret.append(""    }\n"");
        decrLevel();
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genJavaWriteMethod,"String genJavaWriteMethod(String,String)","[108, 110]","{'A590': [(108, 110)]}",{'A590': 1.0},A590,,"    public String genJavaWriteMethod(String fname, String tag) {
        return genJavaWriteWrapper(fname, tag);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genCsharpWriteWrapper,"String genCsharpWriteWrapper(String,int)","[112, 128]","{'A583': [(115, 122), (124, 124)], 'A591': [(112, 114), (123, 123), (125, 128)]}","{'A583': 0.5294117647058824, 'A591': 0.47058823529411764}",A583,,"    public String genCsharpWriteWrapper(String fname, int tag) {
        StringBuilder ret = new StringBuilder(""    {\n"");
        incrLevel();
        ret.append(""      a_.StartMap("" + fname + "",\"""" + tag + ""\"");\n"");
        ret.append(""      java.util.Set "" + getId(""es"") + "" = "" + fname + "".entrySet();\n"");
        ret.append(""      for(java.util.Iterator "" + getId(""midx"") + "" = "" + getId(""es"") + "".iterator(); "" + getId(""midx"") + "".hasNext(); ) {\n"");
        ret.append(""        java.util.Map.Entry "" + getId(""me"") + "" = (java.util.Map.Entry) "" + getId(""midx"") + "".next();\n"");
        ret.append(""        "" + mKey.getCsharpWrapperType() + "" "" + getId(""k"") + "" = ("" + mKey.getCsharpWrapperType() + "") "" + getId(""me"") + "".getKey();\n"");
        ret.append(""        "" + mValue.getCsharpWrapperType() + "" "" + getId(""v"") + "" = ("" + mValue.getCsharpWrapperType() + "") "" + getId(""me"") + "".getValue();\n"");
        ret.append(mKey.genCsharpWriteWrapper(getId(""k""), getId(""k"")));
        ret.append(mValue.genCsharpWriteWrapper(getId(""v""), getId(""v"")));
        ret.append(""      }\n"");
        ret.append(""      a_.EndMap("" + fname + "",\"""" + tag + ""\"");\n"");
        ret.append(""    }\n"");
        decrLevel();
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genCsharpWriteMethod,"String genCsharpWriteMethod(String,int)","[130, 132]","{'A591': [(130, 132)]}",{'A591': 1.0},A591,,"    String genCsharpWriteMethod(String fname, int tag) {
        return genCsharpWriteWrapper(fname, tag);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genCsharpReadWrapper,"String genCsharpReadWrapper(String,int,boolean)","[134, 152]","{'A583': [(137, 137), (141, 146), (148, 148)], 'A591': [(134, 136), (138, 140), (147, 147), (149, 152)]}","{'A583': 0.42105263157894735, 'A591': 0.5789473684210527}",A591,,"    public String genCsharpReadWrapper(String fname, int tag, boolean decl) {
        StringBuilder ret = new StringBuilder("""");
        if (decl) {
            ret.append(""    System.Collections.SortedDictionary<string,string> "" + capitalize(fname) + "";\n"");
        }
        ret.append(""    {\n"");
        incrLevel();
        ret.append(""      Org.Apache.Jute.IIndex "" + getId(""midx"") + "" = a_.StartMap(\"""" + tag + ""\"");\n"");
        ret.append(""      "" + fname + ""= new System.Collections.SortedDictionary<string,string>();\n"");
        ret.append(""      for (; !"" + getId(""midx"") + "".done(); "" + getId(""midx"") + "".incr()) {\n"");
        ret.append(mKey.genCsharpReadWrapper(getId(""k""), getId(""k""), true));
        ret.append(mValue.genCsharpReadWrapper(getId(""v""), getId(""v""), true));
        ret.append(""        "" + fname + "".Add("" + getId(""k"") + "","" + getId(""v"") + "");\n"");
        ret.append(""      }\n"");
        ret.append(""    a_.EndMap(\"""" + tag + ""\"");\n"");
        decrLevel();
        ret.append(""    }\n"");
        return ret.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JMap.java,JMap,genCsharpReadMethod,"String genCsharpReadMethod(String,int)","[155, 157]","{'A591': [(155, 157)]}",{'A591': 1.0},A591,,"    String genCsharpReadMethod(String fname, int tag) {
        return genCsharpReadWrapper(fname, tag, false);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JLong.java,JLong,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""l"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JLong.java,JLong,genJavaHashCode,String genJavaHashCode(String),"[37, 39]","{'A590': [(37, 37), (39, 39)], 'A602': [(38, 38)]}","{'A590': 0.6666666666666666, 'A602': 0.3333333333333333}",A590,,"    public String genJavaHashCode(String fname) {
        return ""    ret = java.lang.Long.hashCode("" + fname + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBoolean.java,JBoolean,getSignature,String getSignature(),"[33, 35]","{'A590': [(33, 35)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""z"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBoolean.java,JBoolean,genJavaCompareTo,String genJavaCompareTo(String),"[37, 39]","{'A583': [(38, 38)], 'A590': [(37, 37), (39, 39)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String genJavaCompareTo(String fname) {
        return ""    ret = ("" + fname + "" == peer."" + fname + "")? 0 : ("" + fname + ""?1:-1);\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBoolean.java,JBoolean,genJavaHashCode,String genJavaHashCode(String),"[41, 43]","{'A590': [(41, 41), (43, 43)], 'A602': [(42, 42)]}","{'A590': 0.6666666666666666, 'A602': 0.3333333333333333}",A590,,"    public String genJavaHashCode(String fname) {
        return ""     ret = java.lang.Boolean.hashCode("" + fname + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBoolean.java,JBoolean,genCsharpHashCode,String genCsharpHashCode(String),"[45, 47]","{'A583': [(46, 46)], 'A591': [(45, 45), (47, 47)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpHashCode(String fname) {
        return ""     ret = ("" + capitalize(fname) + "")?0:1;\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBoolean.java,JBoolean,genCsharpCompareTo,String genCsharpCompareTo(String),"[49, 51]","{'A583': [(50, 50)], 'A591': [(49, 49), (51, 51)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpCompareTo(String name) {
        return ""    ret = ("" + capitalize(name) + "" == peer."" + capitalize(name) + "")? 0 : ("" + capitalize(name) + ""?1:-1);\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCppDecl,String genCppDecl(String),"[51, 53]","{'A583': [(52, 53)], 'A590': [(51, 51)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    String genCppDecl(String fname) {
        return ""  "" + mCppName + "" m"" + fname + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCDecl,String genCDecl(String),"[55, 57]","{'A583': [(55, 56)], 'A590': [(57, 57)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    String genCDecl(String name) {
        return ""    "" + mCName + "" "" + name + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpDecl,String genCsharpDecl(String),"[59, 61]","{'A583': [(60, 60)], 'A591': [(59, 59), (61, 61)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    public String genCsharpDecl(String name) {
        return ""  private "" + mCsharpName + "" "" + name + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaDecl,String genJavaDecl(String),"[63, 65]","{'A583': [(63, 64)], 'A590': [(65, 65)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    String genJavaDecl(String fname) {
        return ""  private "" + mJavaName + "" "" + fname + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaConstructorParam,String genJavaConstructorParam(String),"[67, 69]","{'A583': [(67, 68)], 'A590': [(69, 69)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    String genJavaConstructorParam(String fname) {
        return ""        "" + mJavaName + "" "" + fname;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCppGetSet,"String genCppGetSet(String,int)","[71, 79]","{'A583': [(72, 73), (75, 76), (78, 78)], 'A590': [(71, 71), (74, 74), (77, 77), (79, 79)]}","{'A583': 0.5555555555555556, 'A590': 0.4444444444444444}",A583,,"    String genCppGetSet(String fname, int fIdx) {
        String getFunc = ""  virtual "" + mCppName + "" get"" + fname + ""() const {\n"";
        getFunc += ""    return m"" + fname + "";\n"";
        getFunc += ""  }\n"";
        String setFunc = ""  virtual void set"" + fname + ""("" + mCppName + "" m_) {\n"";
        setFunc += ""    m"" + fname + ""=m_; bs_.set("" + fIdx + "");\n"";
        setFunc += ""  }\n"";
        return getFunc + setFunc;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpGetSet,"String genCsharpGetSet(String,int)","[81, 84]","{'A591': [(81, 84)]}",{'A591': 1.0},A591,,"    String genCsharpGetSet(String fname, int fIdx) {
        String getFunc = ""  public "" + getCsharpType() + "" "" + capitalize(fname) + "" { get; set; } "";
        return getFunc;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,capitalize,String capitalize(String),"[86, 88]","{'A583': [(87, 87)], 'A590': [(86, 86), (88, 88)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    static String capitalize(String s) {
        return s.substring(0, 1).toUpperCase() + s.substring(1);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaGetSet,"String genJavaGetSet(String,int)","[90, 98]","{'A583': [(91, 92), (94, 95), (97, 97)], 'A590': [(90, 90), (93, 93), (96, 96), (98, 98)]}","{'A583': 0.5555555555555556, 'A590': 0.4444444444444444}",A583,,"    String genJavaGetSet(String fname, int fIdx) {
        String getFunc = ""  public "" + mJavaName + "" get"" + capitalize(fname) + ""() {\n"";
        getFunc += ""    return "" + fname + "";\n"";
        getFunc += ""  }\n"";
        String setFunc = ""  public void set"" + capitalize(fname) + ""("" + mJavaName + "" m_) {\n"";
        setFunc += ""    "" + fname + ""=m_;\n"";
        setFunc += ""  }\n"";
        return getFunc + setFunc;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getCType,String getCType(),"[100, 102]","{'A583': [(101, 101)], 'A590': [(100, 100), (102, 102)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String getCType() {
        return mCName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getCppType,String getCppType(),"[104, 106]","{'A590': [(104, 106)]}",{'A590': 1.0},A590,,"    String getCppType() {
        return mCppName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getCsharpType,String getCsharpType(),"[108, 110]","{'A591': [(108, 110)]}",{'A591': 1.0},A591,,"    String getCsharpType() {
        return mCsharpName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getJavaType,String getJavaType(),"[112, 114]","{'A590': [(112, 114)]}",{'A590': 1.0},A590,,"    String getJavaType() {
        return mJavaName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getJavaWrapperType,String getJavaWrapperType(),"[116, 118]","{'A590': [(116, 118)]}",{'A590': 1.0},A590,,"    String getJavaWrapperType() {
        return mWrapper;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getCsharpWrapperType,String getCsharpWrapperType(),"[120, 122]","{'A591': [(120, 122)]}",{'A591': 1.0},A591,,"    String getCsharpWrapperType() {
        return mSharpWrapper;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,getMethodSuffix,String getMethodSuffix(),"[124, 126]","{'A590': [(124, 126)]}",{'A590': 1.0},A590,,"    String getMethodSuffix() {
        return mMethodSuffix;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaWriteMethod,"String genJavaWriteMethod(String,String)","[128, 130]","{'A583': [(129, 129)], 'A590': [(128, 128), (130, 130)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaWriteMethod(String fname, String tag) {
        return ""    a_.write"" + mMethodSuffix + ""("" + fname + "",\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaReadMethod,"String genJavaReadMethod(String,String)","[132, 134]","{'A583': [(133, 133)], 'A590': [(132, 132), (134, 134)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaReadMethod(String fname, String tag) {
        return ""    "" + fname + ""=a_.read"" + mMethodSuffix + ""(\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaReadWrapper,"String genJavaReadWrapper(String,String,boolean)","[136, 142]","{'A583': [(139, 139), (141, 141)], 'A590': [(136, 138), (140, 140), (142, 142)]}","{'A583': 0.2857142857142857, 'A590': 0.7142857142857143}",A590,,"    String genJavaReadWrapper(String fname, String tag, boolean decl) {
        String ret = """";
        if (decl) {
            ret = ""    "" + mWrapper + "" "" + fname + "";\n"";
        }
        return ret + ""    "" + fname + ""=new "" + mWrapper + ""(a_.read"" + mMethodSuffix + ""(\"""" + tag + ""\""));\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaWriteWrapper,"String genJavaWriteWrapper(String,String)","[144, 146]","{'A583': [(145, 145)], 'A590': [(144, 144), (146, 146)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaWriteWrapper(String fname, String tag) {
        return ""        a_.write"" + mMethodSuffix + ""("" + fname + ""."" + mUnwrapMethod + ""(),\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaCompareTo,String genJavaCompareTo(String),"[148, 150]","{'A583': [(149, 149)], 'A590': [(148, 148), (150, 150)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaCompareTo(String fname) {
        return ""    ret = ("" + fname + "" == peer."" + fname + "")? 0 :(("" + fname + ""<peer."" + fname + "")?-1:1);\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaEquals,"String genJavaEquals(String,String)","[152, 154]","{'A583': [(153, 153)], 'A590': [(152, 152), (154, 154)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaEquals(String fname, String peer) {
        return ""    ret = ("" + fname + ""=="" + peer + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaHashCode,String genJavaHashCode(String),"[156, 158]","{'A583': [(157, 157)], 'A590': [(156, 156), (158, 158)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaHashCode(String fname) {
        return ""    ret = (int)"" + fname + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genJavaConstructorSet,"String genJavaConstructorSet(String,String)","[160, 162]","{'A583': [(161, 161)], 'A590': [(160, 160), (162, 162)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    String genJavaConstructorSet(String fname, String name) {
        return ""    this."" + fname + ""="" + name + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpWriteMethod,"String genCsharpWriteMethod(String,String)","[164, 166]","{'A583': [(165, 165)], 'A591': [(164, 164), (166, 166)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpWriteMethod(String fname, String tag) {
        return ""    a_.Write"" + mMethodSuffix + ""("" + capitalize(fname) + "",\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpReadMethod,"String genCsharpReadMethod(String,String)","[168, 170]","{'A583': [(169, 169)], 'A591': [(168, 168), (170, 170)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpReadMethod(String fname, String tag) {
        return ""    "" + capitalize(fname) + ""=a_.Read"" + mMethodSuffix + ""(\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpReadWrapper,"String genCsharpReadWrapper(String,String,boolean)","[172, 178]","{'A583': [(175, 175), (177, 177)], 'A591': [(172, 174), (176, 176), (178, 178)]}","{'A583': 0.2857142857142857, 'A591': 0.7142857142857143}",A591,,"    String genCsharpReadWrapper(String fname, String tag, boolean decl) {
        String ret = """";
        if (decl) {
            ret = ""    "" + mWrapper + "" "" + fname + "";\n"";
        }
        return ret + ""    "" + fname + ""=a_.Read"" + mMethodSuffix + ""(\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpWriteWrapper,"String genCsharpWriteWrapper(String,String)","[180, 184]","{'A583': [(181, 183)], 'A591': [(180, 180), (184, 184)]}","{'A583': 0.6, 'A591': 0.4}",A583,,"    String genCsharpWriteWrapper(String fname, String tag) {
        return (mUnwrapMethod == null)
                ? ""        a_.Write"" + mMethodSuffix + ""("" + fname + "","" + tag + "");\n""
                : ""        a_.Write"" + mMethodSuffix + ""("" + fname + ""."" + mUnwrapMethod + ""(),\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpCompareTo,String genCsharpCompareTo(String),"[186, 188]","{'A583': [(187, 187)], 'A591': [(186, 186), (188, 188)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpCompareTo(String name) {
        return ""    ret = ("" + capitalize(name) + "" == peer."" + capitalize(name) + "")? 0 :(("" + capitalize(name) + ""<peer."" + capitalize(name) + "")?-1:1);\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpEquals,"String genCsharpEquals(String,String)","[190, 193]","{'A583': [(192, 192)], 'A591': [(190, 191), (193, 193)]}","{'A583': 0.25, 'A591': 0.75}",A591,,"    String genCsharpEquals(String name, String peer) {
        String[] peerSplit = peer.split(""\\."");
        return ""    ret = ("" + capitalize(name) + ""=="" + peerSplit[0] + ""."" + capitalize(peerSplit[1]) + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpHashCode,String genCsharpHashCode(String),"[195, 197]","{'A583': [(196, 196)], 'A591': [(195, 195), (197, 197)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpHashCode(String fname) {
        return ""    ret = (int)"" + capitalize(fname) + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpConstructorSet,"String genCsharpConstructorSet(String,String)","[199, 201]","{'A583': [(200, 200)], 'A591': [(199, 199), (201, 201)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    String genCsharpConstructorSet(String mName, String fname) {
        return capitalize(fname) + ""="" + mName + "";\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JType.java,JType,genCsharpConstructorParam,String genCsharpConstructorParam(String),"[203, 205]","{'A583': [(204, 204)], 'A591': [(203, 203), (205, 205)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    public String genCsharpConstructorParam(String fname) {
        return ""  "" + mCsharpName + "" "" + fname + ""\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/CGenerator.java,CGenerator,genCode,void genCode(),"[57, 128]","{'A590': [(57, 63), (128, 128)], 'A600': [(64, 64), (86, 86), (105, 105), (108, 108), (116, 116), (119, 119), (124, 124)], 'A604': [(65, 85), (87, 104), (106, 107), (109, 115), (117, 118), (120, 123), (125, 127)]}","{'A590': 0.1111111111111111, 'A600': 0.09722222222222222, 'A604': 0.7916666666666666}",A604,,"    void genCode() throws IOException {
        if (!outputDirectory.exists()) {
            if (!outputDirectory.mkdirs()) {
                throw new IOException(""unable to create output directory ""
                        + outputDirectory);
            }
        }

        try (FileWriter c = new FileWriter(new File(outputDirectory, mName + "".c""));
             FileWriter h = new FileWriter(new File(outputDirectory, mName + "".h""));
        ) {
            h.write(""/**\n"");
            h.write(""* Licensed to the Apache Software Foundation (ASF) under one\n"");
            h.write(""* or more contributor license agreements.  See the NOTICE file\n"");
            h.write(""* distributed with this work for additional information\n"");
            h.write(""* regarding copyright ownership.  The ASF licenses this file\n"");
            h.write(""* to you under the Apache License, Version 2.0 (the\n"");
            h.write(""* \""License\""); you may not use this file except in compliance\n"");
            h.write(""* with the License.  You may obtain a copy of the License at\n"");
            h.write(""*\n"");
            h.write(""*     http://www.apache.org/licenses/LICENSE-2.0\n"");
            h.write(""*\n"");
            h.write(""* Unless required by applicable law or agreed to in writing, software\n"");
            h.write(""* distributed under the License is distributed on an \""AS IS\"" BASIS,\n"");
            h.write(""* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"");
            h.write(""* See the License for the specific language governing permissions and\n"");
            h.write(""* limitations under the License.\n"");
            h.write(""*/\n"");
            h.write(""\n"");

            c.write(""/**\n"");
            c.write(""* Licensed to the Apache Software Foundation (ASF) under one\n"");
            c.write(""* or more contributor license agreements.  See the NOTICE file\n"");
            c.write(""* distributed with this work for additional information\n"");
            c.write(""* regarding copyright ownership.  The ASF licenses this file\n"");
            c.write(""* to you under the Apache License, Version 2.0 (the\n"");
            c.write(""* \""License\""); you may not use this file except in compliance\n"");
            c.write(""* with the License.  You may obtain a copy of the License at\n"");
            c.write(""*\n"");
            c.write(""*     http://www.apache.org/licenses/LICENSE-2.0\n"");
            c.write(""*\n"");
            c.write(""* Unless required by applicable law or agreed to in writing, software\n"");
            c.write(""* distributed under the License is distributed on an \""AS IS\"" BASIS,\n"");
            c.write(""* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n"");
            c.write(""* See the License for the specific language governing permissions and\n"");
            c.write(""* limitations under the License.\n"");
            c.write(""*/\n"");
            c.write(""\n"");

            h.write(""#ifndef __"" + mName.toUpperCase().replace('.', '_') + ""__\n"");
            h.write(""#define __"" + mName.toUpperCase().replace('.', '_') + ""__\n"");

            h.write(""#include \""recordio.h\""\n"");
            for (Iterator<JFile> i = mInclFiles.iterator(); i.hasNext(); ) {
                JFile f = i.next();
                h.write(""#include \"""" + f.getName() + "".h\""\n"");
            }
            // required for compilation from C++
            h.write(""\n#ifdef __cplusplus\nextern \""C\"" {\n#endif\n\n"");

            c.write(""#include <stdlib.h>\n""); // need it for calloc() & free()
            c.write(""#include \"""" + mName + "".h\""\n\n"");

            for (Iterator<JRecord> i = mRecList.iterator(); i.hasNext(); ) {
                JRecord jr = i.next();
                jr.genCCode(h, c);
            }

            h.write(""\n#ifdef __cplusplus\n}\n#endif\n\n"");
            h.write(""#endif //"" + mName.toUpperCase().replace('.', '_') + ""__\n"");
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JavaGenerator.java,JavaGenerator,genCode,void genCode(),"[51, 56]","{'A590': [(51, 53), (55, 56)], 'A591': [(54, 54)]}","{'A590': 0.8333333333333334, 'A591': 0.16666666666666666}",A590,,"    void genCode() throws IOException {
        for (Iterator<JRecord> i = mRecList.iterator(); i.hasNext(); ) {
            JRecord rec = i.next();
            rec.genJavaCode(outputDirectory);
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/CSharpGenerator.java,CSharpGenerator,genCode,void genCode(),"[51, 55]","{'A591': [(51, 55)]}",{'A591': 1.0},A591,,"    void genCode() throws IOException {
        for (JRecord rec : mRecList) {
            rec.genCsharpCode(outputDirectory);
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JFile.java,JFile,getName,String getName(),"[54, 57]","{'A583': [(56, 56)], 'A590': [(54, 55), (57, 57)]}","{'A583': 0.25, 'A590': 0.75}",A590,,"    String getName() {
        int idx = mName.lastIndexOf('/');
        return (idx > 0) ? mName.substring(idx) : mName;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JFile.java,JFile,genCode,"void genCode(String,File)","[65, 86]","{'A583': [(66, 66), (76, 78), (80, 82)], 'A590': [(65, 65), (67, 75), (83, 83), (85, 86)], 'A591': [(79, 79)], 'A589': [(84, 84)]}","{'A583': 0.3181818181818182, 'A590': 0.5909090909090909, 'A591': 0.045454545454545456, 'A589': 0.045454545454545456}",A590,,"    public void genCode(String language, File outputDirectory)
            throws IOException {
        if (""c++"".equals(language)) {
            CppGenerator gen = new CppGenerator(mName, mInclFiles, mRecords,
                    outputDirectory);
            gen.genCode();
        } else if (""java"".equals(language)) {
            JavaGenerator gen = new JavaGenerator(mName, mInclFiles, mRecords,
                    outputDirectory);
            gen.genCode();
        } else if (""c"".equals(language)) {
            CGenerator gen = new CGenerator(mName, mInclFiles, mRecords,
                    outputDirectory);
            gen.genCode();
        } else if (""csharp"".equals(language)) {
            CSharpGenerator gen = new CSharpGenerator(mName, mInclFiles, mRecords,
                    outputDirectory);
            gen.genCode();
        } else {
            throw new IOException(""Cannot recognize language:"" + language);
        }
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genCppGetSet,"String genCppGetSet(String,int)","[33, 41]","{'A583': [(34, 35), (37, 38)], 'A590': [(33, 33), (36, 36), (39, 41)]}","{'A583': 0.4444444444444444, 'A590': 0.5555555555555556}",A590,,"    public String genCppGetSet(String fname, int fIdx) {
        String cgetFunc = ""  virtual const "" + getCppType() + ""& get"" + fname + ""() const {\n"";
        cgetFunc += ""    return m"" + fname + "";\n"";
        cgetFunc += ""  }\n"";
        String getFunc = ""  virtual "" + getCppType() + ""& get"" + fname + ""() {\n"";
        getFunc += ""    bs_.set("" + fIdx + "");return m"" + fname + "";\n"";
        getFunc += ""  }\n"";
        return cgetFunc + getFunc;
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,getSignature,String getSignature(),"[43, 45]","{'A590': [(43, 45)]}",{'A590': 1.0},A590,,"    public String getSignature() {
        return ""B"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaReadWrapper,"String genJavaReadWrapper(String,String,boolean)","[47, 53]","{'A583': [(50, 50), (52, 52)], 'A590': [(47, 49), (51, 51), (53, 53)]}","{'A583': 0.2857142857142857, 'A590': 0.7142857142857143}",A590,,"    public String genJavaReadWrapper(String fname, String tag, boolean decl) {
        String ret = """";
        if (decl) {
            ret = ""    byte[] "" + fname + "";\n"";
        }
        return ret + ""        "" + fname + ""=a_.readBuffer(\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaWriteWrapper,"String genJavaWriteWrapper(String,String)","[55, 57]","{'A583': [(56, 56)], 'A590': [(55, 55), (57, 57)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String genJavaWriteWrapper(String fname, String tag) {
        return ""        a_.writeBuffer("" + fname + "",\"""" + tag + ""\"");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaCompareTo,"String genJavaCompareTo(String,String)","[59, 67]","{'A583': [(60, 66)], 'A590': [(59, 59), (67, 67)]}","{'A583': 0.7777777777777778, 'A590': 0.2222222222222222}",A583,,"    public String genJavaCompareTo(String fname, String other) {
        StringBuilder sb = new StringBuilder();
        sb.append(""    {\n"");
        sb.append(""      byte[] my = "" + fname + "";\n"");
        sb.append(""      byte[] ur = "" + other + "";\n"");
        sb.append(""      ret = org.apache.jute.Utils.compareBytes(my,0,my.length,ur,0,ur.length);\n"");
        sb.append(""    }\n"");
        return sb.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaCompareTo,String genJavaCompareTo(String),"[69, 71]","{'A583': [(70, 70)], 'A590': [(69, 69), (71, 71)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String genJavaCompareTo(String fname) {
        return genJavaCompareTo(fname, ""peer."" + fname);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaCompareToWrapper,"String genJavaCompareToWrapper(String,String)","[73, 75]","{'A583': [(74, 74)], 'A590': [(73, 73), (75, 75)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String genJavaCompareToWrapper(String fname, String other) {
        return ""    "" + genJavaCompareTo(fname, other);
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaEquals,"String genJavaEquals(String,String)","[77, 79]","{'A590': [(77, 77), (79, 79)], 'A602': [(78, 78)]}","{'A590': 0.6666666666666666, 'A602': 0.3333333333333333}",A590,,"    public String genJavaEquals(String fname, String peer) {
        return ""    ret = java.util.Arrays.equals("" + fname + "","" + peer + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaHashCode,String genJavaHashCode(String),"[81, 83]","{'A590': [(81, 81), (83, 83)], 'A602': [(82, 82)]}","{'A590': 0.6666666666666666, 'A602': 0.3333333333333333}",A590,,"    public String genJavaHashCode(String fname) {
        return ""    ret = java.util.Arrays.hashCode("" + fname + "");\n"";
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaSlurpBytes,"String genJavaSlurpBytes(String,String,String)","[85, 93]","{'A583': [(86, 92)], 'A590': [(85, 85), (93, 93)]}","{'A583': 0.7777777777777778, 'A590': 0.2222222222222222}",A583,,"    public String genJavaSlurpBytes(String b, String s, String l) {
        StringBuilder sb = new StringBuilder();
        sb.append(""        {\n"");
        sb.append(""           int i = org.apache.jute.Utils.readVInt("" + b + "", "" + s + "");\n"");
        sb.append(""           int z = WritableUtils.getVIntSize(i);\n"");
        sb.append(""           "" + s + "" += z+i; "" + l + "" -= (z+i);\n"");
        sb.append(""        }\n"");
        return sb.toString();
    }
"
org.apache.jute.compiler,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/compiler/JBuffer.java,JBuffer,genJavaCompareBytes,String genJavaCompareBytes(),"[95, 108]","{'A583': [(96, 107)], 'A590': [(95, 95), (108, 108)]}","{'A583': 0.8571428571428571, 'A590': 0.14285714285714285}",A583,,"    public String genJavaCompareBytes() {
        StringBuilder sb = new StringBuilder();
        sb.append(""        {\n"");
        sb.append(""           int i1 = org.apache.jute.Utils.readVInt(b1, s1);\n"");
        sb.append(""           int i2 = org.apache.jute.Utils.readVInt(b2, s2);\n"");
        sb.append(""           int z1 = WritableUtils.getVIntSize(i1);\n"");
        sb.append(""           int z2 = WritableUtils.getVIntSize(i2);\n"");
        sb.append(""           s1+=z1; s2+=z2; l1-=z1; l2-=z2;\n"");
        sb.append(""           int r1 = org.apache.jute.Utils.compareBytes(b1,s1,l1,b2,s2,l2);\n"");
        sb.append(""           if (r1 != 0) { return (r1<0)?-1:0; }\n"");
        sb.append(""           s1+=i1; s2+=i2; l1-=i1; l1-=i2;\n"");
        sb.append(""        }\n"");
        return sb.toString();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,throwExceptionOnError,void throwExceptionOnError(String),"[37, 41]","{'A583': [(39, 39)], 'A590': [(37, 38), (40, 41)]}","{'A583': 0.2, 'A590': 0.8}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    private void throwExceptionOnError(String tag) throws IOException {
        if (stream.checkError()) {
            throw new IOException(""Error serializing "" + tag);
        }
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,printCommaUnlessFirst,void printCommaUnlessFirst(),"[43, 49]","{'A590': [(43, 45), (47, 49)], 'A595': [(46, 46)]}","{'A590': 0.8571428571428571, 'A595': 0.14285714285714285}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    private void printCommaUnlessFirst() {
        if (!isFirst) {
            stream.print("","");
            dataSize += 1;
        }
        isFirst = false;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeByte,"void writeByte(byte,String)","[58, 60]","{'A583': [(59, 59)], 'A590': [(58, 58), (60, 60)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeByte(byte b, String tag) throws IOException {
        writeLong((long) b, tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeBool,"void writeBool(boolean,String)","[62, 68]","{'A590': [(62, 65), (67, 68)], 'A595': [(66, 66)]}","{'A590': 0.8571428571428571, 'A595': 0.14285714285714285}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeBool(boolean b, String tag) throws IOException {
        printCommaUnlessFirst();
        String val = b ? ""T"" : ""F"";
        stream.print(val);
        dataSize += 1;
        throwExceptionOnError(tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeInt,"void writeInt(int,String)","[70, 72]","{'A583': [(71, 71)], 'A590': [(70, 70), (72, 72)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeInt(int i, String tag) throws IOException {
        writeLong((long) i, tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeLong,"void writeLong(long,String)","[74, 80]","{'A590': [(74, 75), (79, 80)], 'A595': [(76, 78)]}","{'A590': 0.5714285714285714, 'A595': 0.42857142857142855}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeLong(long l, String tag) throws IOException {
        printCommaUnlessFirst();
        String strValue = String.valueOf(l);
        stream.print(strValue);
        dataSize += strValue.length();
        throwExceptionOnError(tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeFloat,"void writeFloat(float,String)","[82, 84]","{'A583': [(83, 83)], 'A590': [(82, 82), (84, 84)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeFloat(float f, String tag) throws IOException {
        writeDouble((double) f, tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeDouble,"void writeDouble(double,String)","[86, 92]","{'A590': [(86, 87), (91, 92)], 'A595': [(88, 90)]}","{'A590': 0.5714285714285714, 'A595': 0.42857142857142855}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeDouble(double d, String tag) throws IOException {
        printCommaUnlessFirst();
        String strValue = String.valueOf(d);
        stream.print(strValue);
        dataSize += strValue.length();
        throwExceptionOnError(tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeString,"void writeString(String,String)","[94, 100]","{'A590': [(94, 95), (99, 100)], 'A595': [(96, 98)]}","{'A590': 0.5714285714285714, 'A595': 0.42857142857142855}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeString(String s, String tag) throws IOException {
        printCommaUnlessFirst();
        String strValue = escapeString(s);
        stream.print(strValue);
        dataSize += strValue.length();
        throwExceptionOnError(tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeBuffer,"void writeBuffer(byte[],String)","[102, 109]","{'A583': [(102, 103)], 'A590': [(104, 104), (108, 109)], 'A595': [(105, 107)]}","{'A583': 0.25, 'A590': 0.375, 'A595': 0.375}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeBuffer(byte[] buf, String tag)
            throws IOException {
        printCommaUnlessFirst();
        String strValue = escapeBuffer(buf);
        stream.print(strValue);
        dataSize += strValue.length();
        throwExceptionOnError(tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,writeRecord,"void writeRecord(Record,String)","[111, 116]","{'A590': [(111, 111), (115, 116)], 'A597': [(112, 114)]}","{'A590': 0.5, 'A597': 0.5}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void writeRecord(Record r, String tag) throws IOException {
        if (r == null) {
            return;
        }
        r.serialize(this, tag);
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,startRecord,"void startRecord(Record,String)","[118, 125]","{'A590': [(118, 121), (123, 125)], 'A595': [(122, 122)]}","{'A590': 0.875, 'A595': 0.125}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void startRecord(Record r, String tag) throws IOException {
        if (tag != null && !"""".equals(tag)) {
            printCommaUnlessFirst();
            stream.print(""s{"");
            dataSize += 2;
            isFirst = true;
        }
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,endRecord,"void endRecord(Record,String)","[127, 137]","{'A590': [(127, 129), (131, 133), (135, 137)], 'A595': [(130, 130), (134, 134)]}","{'A590': 0.8181818181818182, 'A595': 0.18181818181818182}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void endRecord(Record r, String tag) throws IOException {
        if (tag == null || """".equals(tag)) {
            stream.print(""\n"");
            dataSize += 1;
            isFirst = true;
        } else {
            stream.print(""}"");
            dataSize += 1;
            isFirst = false;
        }
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,startVector,"void startVector(List<?>,String)","[139, 144]","{'A590': [(140, 141), (143, 144)], 'A591': [(139, 139)], 'A595': [(142, 142)]}","{'A590': 0.6666666666666666, 'A591': 0.16666666666666666, 'A595': 0.16666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void startVector(List<?> v, String tag) throws IOException {
        printCommaUnlessFirst();
        stream.print(""v{"");
        dataSize += 2;
        isFirst = true;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,endVector,"void endVector(List<?>,String)","[146, 150]","{'A590': [(147, 147), (149, 150)], 'A591': [(146, 146)], 'A595': [(148, 148)]}","{'A590': 0.6, 'A591': 0.2, 'A595': 0.2}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void endVector(List<?> v, String tag) throws IOException {
        stream.print(""}"");
        dataSize += 1;
        isFirst = false;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,startMap,"void startMap(TreeMap<?, ?>,String)","[152, 157]","{'A583': [(152, 152)], 'A590': [(153, 154), (156, 157)], 'A595': [(155, 155)]}","{'A583': 0.16666666666666666, 'A590': 0.6666666666666666, 'A595': 0.16666666666666666}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void startMap(TreeMap<?, ?> v, String tag) throws IOException {
        printCommaUnlessFirst();
        stream.print(""m{"");
        dataSize += 2;
        isFirst = true;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,endMap,"void endMap(TreeMap<?, ?>,String)","[159, 163]","{'A583': [(159, 159)], 'A590': [(160, 160), (162, 163)], 'A595': [(161, 161)]}","{'A583': 0.2, 'A590': 0.6, 'A595': 0.2}",A590,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    public void endMap(TreeMap<?, ?> v, String tag) throws IOException {
        stream.print(""}"");
        dataSize += 1;
        isFirst = false;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,getDataSize,long getDataSize(),"[165, 168]","{'A595': [(165, 168)]}",{'A595': 1.0},A595,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    @Override
    public long getDataSize() {
        return dataSize;
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,escapeString,String escapeString(String),"[170, 205]","{'A583': [(170, 205)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    private static String escapeString(String s) {
        if (s == null) {
            return """";
        }

        StringBuilder sb = new StringBuilder(s.length() + 1);
        sb.append('\'');
        int len = s.length();
        for (int i = 0; i < len; i++) {
            char c = s.charAt(i);
            switch (c) {
                case '\0':
                    sb.append(""%00"");
                    break;
                case '\n':
                    sb.append(""%0A"");
                    break;
                case '\r':
                    sb.append(""%0D"");
                    break;
                case ',':
                    sb.append(""%2C"");
                    break;
                case '}':
                    sb.append(""%7D"");
                    break;
                case '%':
                    sb.append(""%25"");
                    break;
                default:
                    sb.append(c);
            }
        }

        return sb.toString();
    }
"
org.apache.jute,../projects/zookeeper/zookeeper-jute/src/main/java/org/apache/jute/ToStringOutputArchive.java,ToStringOutputArchive,escapeBuffer,String escapeBuffer(byte[]),"[207, 220]","{'A583': [(207, 220)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-jute/src/test/java/org/apache/jute/ToStringOutputArchiveTest.java,"    private static String escapeBuffer(byte[] barr) {
        if (barr == null || barr.length == 0) {
            return """";
        }

        StringBuilder sb = new StringBuilder(barr.length + 1);
        sb.append('#');

        for (byte b : barr) {
            sb.append(Integer.toHexString(b));
        }

        return sb.toString();
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java,FatJarMain,main,void main(String[]),"[67, 112]","{'A596': [(67, 112)]}",{'A596': 1.0},A596,,"    public static void main(String[] args) throws IOException, ClassNotFoundException, SecurityException, NoSuchMethodException, IllegalArgumentException, IllegalAccessException {
        InputStream is = FatJarMain.class.getResourceAsStream(""/mainClasses"");
        if (is == null) {
            System.err.println(""Couldn't find /mainClasses in classpath."");
            System.exit(3);
        }
        BufferedReader br = new BufferedReader(new InputStreamReader(is));
        String line;
        while((line = br.readLine()) != null) {
            String parts[] = line.split("":"", 3);
            if (parts.length != 3 || (parts[0].length() > 0 && parts[0].charAt(0) == '#')) {
                continue;
            }
            if (parts[0].length() > 0) {
                cmds.put(parts[0], new Cmd(parts[0], parts[1], parts[2]));
                // We use the order array to preserve the order of the commands
                // for help. The hashmap will not preserver order. (It may be overkill.)
                order.add(parts[0]);
            } else {
                // Just put the description in
                order.add(parts[2]);
            }
        }
        if (args.length == 0) {
            doHelp();
            return;
        }
        Cmd cmd = cmds.get(args[0]);
        if (cmd == null) {
            doHelp();
            return;
        }
        Class<?> clazz = Class.forName(cmd.clazz);
        Method main = clazz.getMethod(""main"", String[].class);
        String newArgs[] = new String[args.length-1];
        System.arraycopy(args, 1, newArgs, 0, newArgs.length);
        try {
            main.invoke(null, (Object)newArgs);
        } catch(InvocationTargetException e) {
            if (e.getCause() != null) {
                e.getCause().printStackTrace();
            } else {
                e.printStackTrace();
            }
        }
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-fatjar/src/main/java/org/apache/zookeeper/util/FatJarMain.java,FatJarMain,doHelp,void doHelp(),"[114, 126]","{'A596': [(114, 126)]}",{'A596': 1.0},A596,,"    private static void doHelp() {
        System.err.println(""USAGE: FatJarMain cmd args"");
        System.err.println(""Available cmds:"");
        for(String c: order) {
            Cmd cmd = cmds.get(c);
            if (cmd != null) {
                System.err.println(""  "" + c + "" "" + cmd.desc);
            } else {
                System.err.println(c);
            }
        }
        System.exit(2);
    }
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster.SingleToaster,initComponents,void initComponents(),"[155, 178]","{'A591': [(155, 178)]}",{'A591': 1.0},A591,,"		private void initComponents()
		{

			setSize(toasterWidth, toasterHeight);
			message.setFont( getToasterMessageFont() );
			JPanel externalPanel = new JPanel(new BorderLayout(1, 1));
			externalPanel.setBackground( getBorderColor() );
			JPanel innerPanel = new JPanel(new BorderLayout( getMargin(), getMargin() ));
			innerPanel.setBackground( getToasterColor() );
			message.setBackground( getToasterColor() );
			message.setMargin( new Insets( 2,2,2,2 ) );
			message.setLineWrap( true );
			message.setWrapStyleWord( true );

			EtchedBorder etchedBorder = (EtchedBorder) BorderFactory
					.createEtchedBorder();
			externalPanel.setBorder(etchedBorder);

			externalPanel.add(innerPanel);
      message.setForeground( getMessageColor() );
			innerPanel.add(iconLabel, BorderLayout.WEST);
			innerPanel.add(message, BorderLayout.CENTER);
			getContentPane().add(externalPanel);
		}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster.SingleToaster,animate,void animate(),"[184, 187]","{'A591': [(184, 187)]}",{'A591': 1.0},A591,,"		public void animate()
		{
			( new Animation( this ) ).start();
		}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster.Animation,animateVertically,"void animateVertically(int,int,int)","[212, 233]","{'A591': [(212, 233)]}",{'A591': 1.0},A591,,"		protected void animateVertically( int posx, int fromY, int toY ) throws InterruptedException
		{

			toaster.setLocation( posx, fromY );
			if ( toY < fromY )
			{
				for (int i = fromY; i > toY; i -= step)
				{
					toaster.setLocation(posx, i);
					Thread.sleep(stepTime);
				}
			}
			else
			{
				for (int i = fromY; i < toY; i += step)
				{
					toaster.setLocation(posx, i);
					Thread.sleep(stepTime);
				}
			}
			toaster.setLocation( posx, toY );
		}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster.Animation,run,void run(),"[235, 309]","{'A591': [(235, 309)]}",{'A591': 1.0},A591,,"		public void run()
		{
			try
			{
				boolean animateFromBottom = true;
				GraphicsEnvironment ge = GraphicsEnvironment
						.getLocalGraphicsEnvironment();
				Rectangle screenRect = ge.getMaximumWindowBounds();

				int screenHeight = (int) screenRect.height;

				int startYPosition;
				int stopYPosition;

				if ( screenRect.y > 0 )
				{
				  animateFromBottom = false; // Animate from top!
				}

				maxToasterInSceen = screenHeight / toasterHeight;


				int posx = (int) screenRect.width - toasterWidth - 1;

				toaster.setLocation(posx, screenHeight);
				toaster.setVisible(true);
				if ( useAlwaysOnTop )
				{
				  toaster.setAlwaysOnTop(true);
				}

				if ( animateFromBottom )
				{
					startYPosition = screenHeight;
					stopYPosition = startYPosition - toasterHeight - 1;
					if ( currentNumberOfToaster > 0 )
					{
						stopYPosition = stopYPosition - ( maxToaster % maxToasterInSceen * toasterHeight );
					}
					else
					{
						maxToaster = 0;
					}
				}
				else
				{
					startYPosition = screenRect.y - toasterHeight;
					stopYPosition = screenRect.y;

					if ( currentNumberOfToaster > 0 )
					{
						stopYPosition = stopYPosition + ( maxToaster % maxToasterInSceen * toasterHeight );
					}
					else
					{
						maxToaster = 0;
					}
				}

				currentNumberOfToaster++;
				maxToaster++;


				animateVertically( posx, startYPosition, stopYPosition );
				Thread.sleep(displayTime);
				animateVertically( posx, stopYPosition, startYPosition );

				currentNumberOfToaster--;
				toaster.setVisible(false);
				toaster.dispose();
			} catch (Exception e)
			{
				e.printStackTrace();
			}
		}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,showToaster,"void showToaster(Icon,String)","[317, 326]","{'A591': [(317, 326)]}",{'A591': 1.0},A591,,"	public void showToaster(Icon icon, String msg)
	{
    SingleToaster singleToaster = new SingleToaster();
    if ( icon != null )
    {
      singleToaster.iconLabel.setIcon( icon );
    }
    singleToaster.message.setText( msg );
		singleToaster.animate();
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,showToaster,void showToaster(String),"[331, 334]","{'A591': [(331, 334)]}",{'A591': 1.0},A591,,"	public void showToaster( String msg )
	{
		showToaster( null, msg );
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getToasterMessageFont,Font getToasterMessageFont(),"[339, 343]","{'A591': [(339, 343)]}",{'A591': 1.0},A591,,"	public Font getToasterMessageFont()
	{
		// TODO Auto-generated method stub
		return font;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setToasterMessageFont,void setToasterMessageFont(Font),"[348, 351]","{'A591': [(348, 351)]}",{'A591': 1.0},A591,,"	public void setToasterMessageFont( Font f)
	{
    font = f;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getBorderColor,Color getBorderColor(),"[357, 360]","{'A591': [(357, 360)]}",{'A591': 1.0},A591,,"	public Color getBorderColor()
	{
		return borderColor;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setBorderColor,void setBorderColor(Color),"[367, 370]","{'A591': [(367, 370)]}",{'A591': 1.0},A591,,"	public void setBorderColor(Color borderColor)
	{
		this.borderColor = borderColor;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getDisplayTime,int getDisplayTime(),"[377, 380]","{'A591': [(377, 380)]}",{'A591': 1.0},A591,,"	public int getDisplayTime()
	{
		return displayTime;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setDisplayTime,void setDisplayTime(int),"[387, 390]","{'A591': [(387, 390)]}",{'A591': 1.0},A591,,"	public void setDisplayTime(int displayTime)
	{
		this.displayTime = displayTime;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getMargin,int getMargin(),"[397, 400]","{'A591': [(397, 400)]}",{'A591': 1.0},A591,,"	public int getMargin()
	{
		return margin;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setMargin,void setMargin(int),"[407, 410]","{'A591': [(407, 410)]}",{'A591': 1.0},A591,,"	public void setMargin(int margin)
	{
		this.margin = margin;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getMessageColor,Color getMessageColor(),"[417, 420]","{'A591': [(417, 420)]}",{'A591': 1.0},A591,,"	public Color getMessageColor()
	{
		return messageColor;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setMessageColor,void setMessageColor(Color),"[427, 430]","{'A591': [(427, 430)]}",{'A591': 1.0},A591,,"	public void setMessageColor(Color messageColor)
	{
		this.messageColor = messageColor;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getStep,int getStep(),"[437, 440]","{'A591': [(437, 440)]}",{'A591': 1.0},A591,,"	public int getStep()
	{
		return step;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setStep,void setStep(int),"[447, 450]","{'A591': [(447, 450)]}",{'A591': 1.0},A591,,"	public void setStep(int step)
	{
		this.step = step;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getStepTime,int getStepTime(),"[457, 460]","{'A591': [(457, 460)]}",{'A591': 1.0},A591,,"	public int getStepTime()
	{
		return stepTime;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setStepTime,void setStepTime(int),"[467, 470]","{'A591': [(467, 470)]}",{'A591': 1.0},A591,,"	public void setStepTime(int stepTime)
	{
		this.stepTime = stepTime;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getToasterColor,Color getToasterColor(),"[477, 480]","{'A591': [(477, 480)]}",{'A591': 1.0},A591,,"	public Color getToasterColor()
	{
		return toasterColor;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setToasterColor,void setToasterColor(Color),"[487, 490]","{'A591': [(487, 490)]}",{'A591': 1.0},A591,,"	public void setToasterColor(Color toasterColor)
	{
		this.toasterColor = toasterColor;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getToasterHeight,int getToasterHeight(),"[497, 500]","{'A591': [(497, 500)]}",{'A591': 1.0},A591,,"	public int getToasterHeight()
	{
		return toasterHeight;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setToasterHeight,void setToasterHeight(int),"[507, 510]","{'A591': [(507, 510)]}",{'A591': 1.0},A591,,"	public void setToasterHeight(int toasterHeight)
	{
		this.toasterHeight = toasterHeight;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,getToasterWidth,int getToasterWidth(),"[517, 520]","{'A591': [(517, 520)]}",{'A591': 1.0},A591,,"	public int getToasterWidth()
	{
		return toasterWidth;
	}
"
com.nitido.utils.toaster,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/com/nitido/utils/toaster/Toaster.java,Toaster,setToasterWidth,void setToasterWidth(int),"[527, 530]","{'A591': [(527, 530)]}",{'A591': 1.0},A591,,"	public void setToasterWidth(int toasterWidth)
	{
		this.toasterWidth = toasterWidth;
	}
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,close,void close(),"[69, 73]","{'A593': [(69, 73)]}",{'A593': 1.0},A593,,"    @Override
    public synchronized void close() throws InterruptedException {
        this.closed = true;
        super.close();
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,create,"String create(String,byte[],List<ACL>,CreateMode)","[75, 93]","{'A593': [(75, 93)]}",{'A593': 1.0},A593,,"    @Override
    public String create(String path, byte[] data, List<ACL> acl,
            CreateMode createMode) throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.create(path, data, acl, createMode);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
                if (exists(path, false) != null) {
                    return path;
                }
            } catch (KeeperException.NodeExistsException e) {
                return path;
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,delete,"void delete(String,int)","[95, 112]","{'A593': [(95, 112)]}",{'A593': 1.0},A593,,"    @Override
    public void delete(String path, int version) throws InterruptedException,
            KeeperException {
        int count = 0;
        do {
            try {
                super.delete(path, version);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
                if (exists(path, false) == null) {
                    return;
                }
            } catch (KeeperException.NoNodeException e) {
                break;
            }
        } while (!closed && (limit == -1 || count++ < limit));
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,exists,"Stat exists(String,boolean)","[114, 127]","{'A593': [(114, 127)]}",{'A593': 1.0},A593,,"    @Override
    public Stat exists(String path, boolean watch) throws KeeperException,
            InterruptedException {
        int count = 0;
        do {
            try {
                return super.exists(path, watch ? watcher : null);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,exists,"Stat exists(String,Watcher)","[129, 142]","{'A593': [(129, 142)]}",{'A593': 1.0},A593,,"    @Override
    public Stat exists(String path, Watcher watcher) throws KeeperException,
            InterruptedException {
        int count = 0;
        do {
            try {
                return super.exists(path, watcher);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,getACL,"List<ACL> getACL(String,Stat)","[144, 157]","{'A593': [(144, 157)]}",{'A593': 1.0},A593,,"    @Override
    public List<ACL> getACL(String path, Stat stat) throws KeeperException,
            InterruptedException {
        int count = 0;
        do {
            try {
                return super.getACL(path, stat);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,getChildren,"List<String> getChildren(String,boolean)","[159, 172]","{'A593': [(159, 172)]}",{'A593': 1.0},A593,,"    @Override
    public List<String> getChildren(String path, boolean watch)
            throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.getChildren(path, watch ? watcher : null);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return new ArrayList<String>();
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,getChildren,"List<String> getChildren(String,Watcher)","[174, 187]","{'A593': [(174, 187)]}",{'A593': 1.0},A593,,"    @Override
    public List<String> getChildren(String path, Watcher watcher)
            throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.getChildren(path, watcher);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return new ArrayList<String>();
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,getData,"byte[] getData(String,boolean,Stat)","[189, 202]","{'A593': [(189, 202)]}",{'A593': 1.0},A593,,"    @Override
    public byte[] getData(String path, boolean watch, Stat stat)
            throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.getData(path, watch ? watcher : null, stat);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,getData,"byte[] getData(String,Watcher,Stat)","[204, 217]","{'A593': [(204, 217)]}",{'A593': 1.0},A593,,"    @Override
    public byte[] getData(String path, Watcher watcher, Stat stat)
            throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.getData(path, watcher, stat);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,setACL,"Stat setACL(String,List<ACL>,int)","[219, 240]","{'A593': [(219, 219), (221, 224), (226, 240)], 'A607': [(220, 220), (225, 225)]}","{'A593': 0.9090909090909091, 'A607': 0.09090909090909091}",A593,,"    @Override
    public Stat setACL(String path, List<ACL> acl, int aclVersion)
            throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.setACL(path, acl, aclVersion);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
                Stat s = exists(path, false);
                if (s != null) {
                    if (getACL(path, s).equals(acl)) {
                        return s;
                    }
                } else {
                    return null;
                }
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,setData,"Stat setData(String,byte[],int)","[242, 263]","{'A593': [(242, 263)]}",{'A593': 1.0},A593,,"    @Override
    public Stat setData(String path, byte[] data, int version)
            throws KeeperException, InterruptedException {
        int count = 0;
        do {
            try {
                return super.setData(path, data, version);
            } catch (KeeperException.ConnectionLossException e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
                Stat s = exists(path, false);
                if (s != null) {
                    if (getData(path, false, s) == data) {
                        return s;
                    }
                } else {
                    return null;
                }
            }
        } while (!closed && (limit == -1 || count++ < limit));
        return null;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,setRetryLimit,void setRetryLimit(int),"[268, 270]","{'A593': [(268, 270)]}",{'A593': 1.0},A593,,"    public void setRetryLimit(int limit) {
        this.limit = limit;
    }
"
org.apache.zookeeper.retry,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/retry/ZooKeeperRetry.java,ZooKeeperRetry,testConnection,boolean testConnection(),"[275, 286]","{'A593': [(275, 286)]}",{'A593': 1.0},A593,,"    public boolean testConnection() {
        int count = 0;
        do {
            try {
                return super.exists(""/"", null) != null;
            } catch (Exception e) {
                LoggerFactory.getLogger().warn(
                        ""ZooKeeper connection lost.  Trying to reconnect."");
            }
        } while (count++ < 5);
        return false;
    }
"
org.apache.zookeeper.inspector.logger,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/logger/LoggerFactory.java,LoggerFactory,getLogger,org.slf4j.Logger getLogger(),"[31, 34]","{'A606': [(31, 34)]}",{'A606': 1.0},A606,,"    public static org.slf4j.Logger getLogger()
    {
        return logger;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,getKey,K getKey(),"[49, 51]","{'A593': [(49, 51)]}",{'A593': 1.0},A593,,"    public K getKey() {
        return key;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,setKey,void setKey(K),"[56, 58]","{'A593': [(56, 58)]}",{'A593': 1.0},A593,,"    public void setKey(K key) {
        this.key = key;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,getValue,V getValue(),"[63, 65]","{'A593': [(63, 65)]}",{'A593': 1.0},A593,,"    public V getValue() {
        return value;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,setValue,void setValue(V),"[70, 72]","{'A593': [(70, 72)]}",{'A593': 1.0},A593,,"    public void setValue(V value) {
        this.value = value;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,toString,String toString(),"[74, 77]","{'A593': [(74, 77)]}",{'A593': 1.0},A593,,"    @Override
    public String toString() {
        return ""Pair ["" + key + "", "" + value + ""]"";
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,hashCode,int hashCode(),"[84, 91]","{'A593': [(84, 91)]}",{'A593': 1.0},A593,,"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((key == null) ? 0 : key.hashCode());
        result = prime * result + ((value == null) ? 0 : value.hashCode());
        return result;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/Pair.java,Pair,equals,boolean equals(Object),"[98, 118]","{'A593': [(98, 118)]}",{'A593': 1.0},A593,,"    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        Pair<?, ?> other = (Pair<?, ?>) obj;
        if (key == null) {
            if (other.key != null)
                return false;
        } else if (!key.equals(other.key))
            return false;
        if (value == null) {
            if (other.value != null)
                return false;
        } else if (!value.equals(other.value))
            return false;
        return true;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,connect,boolean connect(Properties),"[142, 201]","{'A593': [(142, 195), (199, 201)], 'A591': [(197, 198)], 'A606': [(196, 196)]}","{'A593': 0.95, 'A591': 0.03333333333333333, 'A606': 0.016666666666666666}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public boolean connect(Properties connectionProps) {
        try {
            if (this.zooKeeper == null) {
                String connectString = connectionProps
                        .getProperty(CONNECT_STRING);
                String sessionTimeout = connectionProps
                        .getProperty(SESSION_TIMEOUT);
                String encryptionManager = connectionProps
                        .getProperty(DATA_ENCRYPTION_MANAGER);
                String authScheme = connectionProps
                        .getProperty(AUTH_SCHEME_KEY);
                String authData = connectionProps
                        .getProperty(AUTH_DATA_KEY);

                if (connectString == null || sessionTimeout == null) {
                    throw new IllegalArgumentException(
                            ""Both connect string and session timeout are required."");
                }
                if (encryptionManager == null) {
                    this.encryptionManager = new BasicDataEncryptionManager();
                } else {
                    Class<?> clazz = Class.forName(encryptionManager);

                    if (Arrays.asList(clazz.getInterfaces()).contains(
                            DataEncryptionManager.class)) {
                        this.encryptionManager = (DataEncryptionManager) Class
                                .forName(encryptionManager).newInstance();
                    } else {
                        throw new IllegalArgumentException(
                                ""Data encryption manager must implement DataEncryptionManager interface"");
                    }
                }
                this.connectString = connectString;
                this.sessionTimeout = Integer.valueOf(sessionTimeout);
                this.zooKeeper = new ZooKeeperRetry(connectString, Integer
                        .valueOf(sessionTimeout), new Watcher() {

                    public void process(WatchedEvent event) {
                        if (event.getState() == KeeperState.Expired) {
                            connected = false;
                        }
                    }
                });
                if (authData != null && authData.length() > 0){
                    this.zooKeeper.addAuthInfo(authScheme, authData.getBytes());
                }
                ((ZooKeeperRetry) this.zooKeeper).setRetryLimit(10);
                connected = ((ZooKeeperRetry) this.zooKeeper).testConnection();
            }
        } catch (Exception e) {
            connected = false;
            e.printStackTrace();
        }
        if (!connected){
            disconnect();
        } else {
            this.nodesCache = new NodesCache(zooKeeper);
        }
        return connected;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,process,void process(WatchedEvent),"[179, 183]","{'A593': [(179, 183)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"                    public void process(WatchedEvent event) {
                        if (event.getState() == KeeperState.Expired) {
                            connected = false;
                        }
                    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,disconnect,boolean disconnect(),"[209, 224]","{'A593': [(209, 224)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public boolean disconnect() {
        try {
            if (this.zooKeeper != null) {
                this.zooKeeper.close();
                this.zooKeeper = null;
                connected = false;
                removeWatchers(this.watchers.keySet());
                return true;
            }
        } catch (Exception e) {
            LoggerFactory.getLogger().error(
                    ""Error occurred while disconnecting from ZooKeeper server"",
                    e);
        }
        return false;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getChildren,List<String> getChildren(String),"[232, 238]","{'A593': [(232, 233), (235, 238)], 'A591': [(234, 234)]}","{'A593': 0.8571428571428571, 'A591': 0.14285714285714285}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public List<String> getChildren(String nodePath) {
        if (connected) {
            return nodesCache.getChildren(nodePath);
        }
        return null;

    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getData,String getData(String),"[247, 264]","{'A593': [(247, 264)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public String getData(String nodePath) {
        if (connected) {
            try {
                if (nodePath.length() == 0) {
                    nodePath = ""/"";
                }
                Stat s = zooKeeper.exists(nodePath, false);
                if (s != null) {
                    return this.encryptionManager.decryptData(zooKeeper
                            .getData(nodePath, false, s));
                }
            } catch (Exception e) {
                LoggerFactory.getLogger().error(
                        ""Error occurred getting data for node: "" + nodePath, e);
            }
        }
        return null;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getACLs,"List<Map<String, String>> getACLs(String)","[273, 333]","{'A593': [(273, 325), (327, 333)], 'A606': [(326, 326)]}","{'A593': 0.9836065573770492, 'A606': 0.01639344262295082}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public List<Map<String, String>> getACLs(String nodePath) {
        List<Map<String, String>> returnACLs = new ArrayList<Map<String, String>>();
        if (connected) {
            try {
                if (nodePath.length() == 0) {
                    nodePath = ""/"";
                }
                Stat s = zooKeeper.exists(nodePath, false);
                if (s != null) {
                    List<ACL> acls = zooKeeper.getACL(nodePath, s);
                    for (ACL acl : acls) {
                        Map<String, String> aclMap = new LinkedHashMap<String, String>();
                        aclMap.put(ACL_SCHEME, acl.getId().getScheme());
                        aclMap.put(ACL_ID, acl.getId().getId());
                        StringBuilder sb = new StringBuilder();
                        int perms = acl.getPerms();
                        boolean addedPerm = false;
                        if ((perms & Perms.READ) == Perms.READ) {
                            sb.append(""Read"");
                            addedPerm = true;
                        }
                        if (addedPerm) {
                            sb.append("", "");
                        }
                        if ((perms & Perms.WRITE) == Perms.WRITE) {
                            sb.append(""Write"");
                            addedPerm = true;
                        }
                        if (addedPerm) {
                            sb.append("", "");
                        }
                        if ((perms & Perms.CREATE) == Perms.CREATE) {
                            sb.append(""Create"");
                            addedPerm = true;
                        }
                        if (addedPerm) {
                            sb.append("", "");
                        }
                        if ((perms & Perms.DELETE) == Perms.DELETE) {
                            sb.append(""Delete"");
                            addedPerm = true;
                        }
                        if (addedPerm) {
                            sb.append("", "");
                        }
                        if ((perms & Perms.ADMIN) == Perms.ADMIN) {
                            sb.append(""Admin"");
                            addedPerm = true;
                        }
                        aclMap.put(ACL_PERMS, sb.toString());
                        returnACLs.add(aclMap);
                    }
                }
            } catch (InterruptedException | KeeperException e) {
                LoggerFactory.getLogger().error(
                        ""Error occurred retrieving ACLs of node: "" + nodePath,
                        e);
            }
        }
        return returnACLs;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getNodeMeta,"Map<String, String> getNodeMeta(String)","[341, 372]","{'A593': [(341, 372)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public Map<String, String> getNodeMeta(String nodePath) {
        Map<String, String> nodeMeta = new LinkedHashMap<String, String>();
        if (connected) {
            try {
                if (nodePath.length() == 0) {
                    nodePath = ""/"";
                }
                Stat s = zooKeeper.exists(nodePath, false);
                if (s != null) {
                    nodeMeta.put(A_VERSION, String.valueOf(s.getAversion()));
                    nodeMeta.put(C_TIME, String.valueOf(s.getCtime()));
                    nodeMeta.put(C_VERSION, String.valueOf(s.getCversion()));
                    nodeMeta.put(CZXID, String.valueOf(s.getCzxid()));
                    nodeMeta
                            .put(DATA_LENGTH, String.valueOf(s.getDataLength()));
                    nodeMeta.put(EPHEMERAL_OWNER, String.valueOf(s
                            .getEphemeralOwner()));
                    nodeMeta.put(M_TIME, String.valueOf(s.getMtime()));
                    nodeMeta.put(MZXID, String.valueOf(s.getMzxid()));
                    nodeMeta.put(NUM_CHILDREN, String.valueOf(s
                            .getNumChildren()));
                    nodeMeta.put(PZXID, String.valueOf(s.getPzxid()));
                    nodeMeta.put(VERSION, String.valueOf(s.getVersion()));
                }
            } catch (Exception e) {
                LoggerFactory.getLogger().error(
                        ""Error occurred retrieving meta data for node: ""
                                + nodePath, e);
            }
        }
        return nodeMeta;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getNumChildren,int getNumChildren(String),"[380, 382]","{'A593': [(380, 380), (382, 382)], 'A606': [(381, 381)]}","{'A593': 0.6666666666666666, 'A606': 0.3333333333333333}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public int getNumChildren(String nodePath) {
        return connected ? getChildren(nodePath).size() : -1;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,createNode,"boolean createNode(String,String)","[391, 420]","{'A593': [(391, 395), (404, 420)], 'A610': [(396, 403)]}","{'A593': 0.7333333333333333, 'A610': 0.26666666666666666}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public boolean createNode(String parent, String nodeName) {
        if (connected) {
            try {
                String[] nodeElements = nodeName.split(""/"");
                for (String nodeElement : nodeElements) {
                    String node;
                    //for case parent is ""/"" and maybe other cases
                    if (parent.endsWith(""/"")) {
                        node = parent + nodeElement;
                    }
                    else {
                        node = parent + ""/"" + nodeElement;
                    }
                    Stat s = zooKeeper.exists(node, false);
                    if (s == null) {
                        zooKeeper.create(node, this.encryptionManager
                                .encryptData(null), Ids.OPEN_ACL_UNSAFE,
                                CreateMode.PERSISTENT);
                        parent = node;
                    }
                }
                return true;
            } catch (Exception e) {
                LoggerFactory.getLogger().error(
                        ""Error occurred creating node: "" + parent + ""/""
                                + nodeName, e);
            }
        }
        return false;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,deleteNode,boolean deleteNode(String),"[429, 449]","{'A593': [(429, 449)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public boolean deleteNode(String nodePath) {
        if (connected) {
            try {
                Stat s = zooKeeper.exists(nodePath, false);
                if (s != null) {
                    List<String> children = zooKeeper.getChildren(nodePath,
                            false);
                    for (String child : children) {
                        String node = nodePath + ""/"" + child;
                        deleteNode(node);
                    }
                    zooKeeper.delete(nodePath, -1);
                }
                return true;
            } catch (Exception e) {
                LoggerFactory.getLogger().error(
                        ""Error occurred deleting node: "" + nodePath, e);
            }
        }
        return false;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,setData,"boolean setData(String,String)","[458, 470]","{'A593': [(458, 470)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public boolean setData(String nodePath, String data) {
        if (connected) {
            try {
                zooKeeper.setData(nodePath, this.encryptionManager
                        .encryptData(data), -1);
                return true;
            } catch (Exception e) {
                LoggerFactory.getLogger().error(
                        ""Error occurred setting data for node: "" + nodePath, e);
            }
        }
        return false;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getConnectionPropertiesTemplate,"Pair<Map<String, List<String>>, Map<String, String>> getConnectionPropertiesTemplate()","[478, 498]","{'A593': [(478, 498)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public Pair<Map<String, List<String>>, Map<String, String>> getConnectionPropertiesTemplate() {
        Map<String, List<String>> template = new LinkedHashMap<String, List<String>>();
        template.put(CONNECT_STRING, Arrays
                .asList(new String[] { defaultHosts }));
        template.put(SESSION_TIMEOUT, Arrays
                .asList(new String[] { defaultTimeout }));
        template.put(DATA_ENCRYPTION_MANAGER, Arrays
                .asList(new String[] { defaultEncryptionManager }));
        template.put(AUTH_SCHEME_KEY, Arrays
                .asList(new String[] { defaultAuthScheme }));
        template.put(AUTH_DATA_KEY, Arrays
                .asList(new String[] { defaultAuthValue }));
        Map<String, String> labels = new LinkedHashMap<String, String>();
        labels.put(CONNECT_STRING, ""Connect String"");
        labels.put(SESSION_TIMEOUT, ""Session Timeout"");
        labels.put(DATA_ENCRYPTION_MANAGER, ""Data Encryption Manager"");
        labels.put(AUTH_SCHEME_KEY, ""Authentication Scheme"");
        labels.put(AUTH_DATA_KEY, ""Authentication Data"");
        return new Pair<Map<String, List<String>>, Map<String, String>>(
                template, labels);
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,addWatchers,"void addWatchers(Collection<String>,NodeListener)","[508, 526]","{'A593': [(508, 519), (521, 526)], 'A611': [(520, 520)]}","{'A593': 0.9473684210526315, 'A611': 0.05263157894736842}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public void addWatchers(Collection<String> selectedNodes,
            NodeListener nodeListener) {
        // add watcher for each node and add node to collection of
        // watched nodes
        if (connected) {
            for (String node : selectedNodes) {
                if (!watchers.containsKey(node)) {
                    try {
                        watchers.put(node, new NodeWatcher(node, nodeListener,
                                zooKeeper));
                    } catch (Exception e) {
                        LoggerFactory.getLogger().error(
                                ""Error occurred adding node watcher for node: ""
                                        + node, e);
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,removeWatchers,void removeWatchers(Collection<String>),"[535, 548]","{'A593': [(535, 548)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public void removeWatchers(Collection<String> selectedNodes) {
        // remove watcher for each node and remove node from
        // collection of watched nodes
        if (connected) {
            for (String node : selectedNodes) {
                if (watchers.containsKey(node)) {
                    NodeWatcher watcher = watchers.remove(node);
                    if (watcher != null) {
                        watcher.stop();
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl.NodeWatcher,process,void process(WatchedEvent),"[583, 601]","{'A593': [(583, 594), (596, 601)], 'A606': [(595, 595)]}","{'A593': 0.9473684210526315, 'A606': 0.05263157894736842}",A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"        public void process(WatchedEvent event) {
            if (!closed) {
                try {
                    if (event.getType() != EventType.NodeDeleted) {

                        Stat s = zooKeeper.exists(nodePath, this);
                        if (s != null) {
                            zookeeper.getChildren(nodePath, this);
                        }
                    }
                } catch (Exception e) {
                    LoggerFactory.getLogger().error(
                            ""Error occurred re-adding node watcher for node ""
                                    + nodePath, e);
                }
                nodeListener.processEvent(event.getPath(), event.getType()
                        .name(), null);
            }
        }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl.NodeWatcher,stop,void stop(),"[603, 605]","{'A593': [(603, 605)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"        public void stop() {
            this.closed = true;
        }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,loadNodeViewersFile,List<String> loadNodeViewersFile(File),"[615, 637]","{'A593': [(615, 617), (631, 634), (636, 637)], 'A608': [(618, 630), (635, 635)]}","{'A593': 0.391304347826087, 'A608': 0.6086956521739131}",A608,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public List<String> loadNodeViewersFile(File selectedFile)
            throws IOException {
        List<String> result = new ArrayList<String>();

        try(BufferedReader reader = getReaderForFile(selectedFile)) {
            if(reader == null) {
                return result;
            }

            String line = """";
            while (line != null) {
                line = reader.readLine();
                if(line != null) {
                    line = line.trim();
                    if (!line.isEmpty() && !line.startsWith(""#"")) {
                        result.add(line);
                    }
                }
            }
        }

        return result;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,loadDefaultConnectionFile,void loadDefaultConnectionFile(),"[639, 659]","{'A593': [(639, 639), (641, 641), (645, 647), (659, 659)], 'A608': [(640, 640), (642, 644), (648, 658)]}","{'A593': 0.2857142857142857, 'A608': 0.7142857142857143}",A608,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    private void loadDefaultConnectionFile() throws IOException {
        Properties props = new Properties();

        try(BufferedReader reader = getReaderForFile(defaultConnectionFile)) {
            //If reader is null, it's OK.  Default values will get set below.
            if(reader != null) {
                props.load(reader);
            }
        }

        defaultEncryptionManager = props.getProperty(DATA_ENCRYPTION_MANAGER) == null ?
            DEFAULT_ENCRYPTION_MANAGER : props.getProperty(DATA_ENCRYPTION_MANAGER);
        defaultTimeout = props.getProperty(SESSION_TIMEOUT) == null ?
            Integer.toString(DEFAULT_TIMEOUT) : props.getProperty(SESSION_TIMEOUT);
        defaultHosts = props.getProperty(CONNECT_STRING) == null ?
            DEFAULT_HOSTS : props.getProperty(CONNECT_STRING);
        defaultAuthScheme = props.getProperty(AUTH_SCHEME_KEY) == null ?
            DEFAULT_AUTH_SCHEME : props.getProperty(AUTH_SCHEME_KEY);
        defaultAuthValue = props.getProperty(AUTH_DATA_KEY) == null ?
            DEFAULT_AUTH_VALUE : props.getProperty(AUTH_DATA_KEY);
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,saveDefaultConnectionFile,void saveDefaultConnectionFile(Properties),"[667, 689]","{'A593': [(667, 689)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public void saveDefaultConnectionFile(Properties props) throws IOException {
        File defaultDir = defaultConnectionFile.getParentFile();
        if (!defaultDir.exists()) {
            if (!defaultDir.mkdirs()) {
                throw new IOException(
                        ""Failed to create configuration directory: ""
                                + defaultDir.getAbsolutePath());
            }
        }
        if (!defaultConnectionFile.exists()) {
            if (!defaultConnectionFile.createNewFile()) {
                throw new IOException(
                        ""Failed to create default connection file: ""
                                + defaultConnectionFile.getAbsolutePath());
            }
        }
        FileWriter writer = new FileWriter(defaultConnectionFile);
        try {
            props.store(writer, ""Default connection for ZooInspector"");
        } finally {
            writer.close();
        }
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,saveNodeViewersFile,"void saveNodeViewersFile(File,List<String>)","[697, 721]","{'A593': [(697, 721)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public void saveNodeViewersFile(File selectedFile,
            List<String> nodeViewersClassNames) throws IOException {
        if (!selectedFile.exists()) {
            if (!selectedFile.createNewFile()) {
                throw new IOException(
                        ""Failed to create node viewers configuration file: ""
                                + selectedFile.getAbsolutePath());
            }
        }
        FileWriter writer = new FileWriter(selectedFile);
        try {
            BufferedWriter buff = new BufferedWriter(writer);
            try {
                for (String nodeViewersClassName : nodeViewersClassNames) {
                    buff.append(nodeViewersClassName);
                    buff.append(""\n"");
                }
            } finally {
                buff.flush();
                buff.close();
            }
        } finally {
            writer.close();
        }
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,setDefaultNodeViewerConfiguration,void setDefaultNodeViewerConfiguration(List<String>),"[729, 740]","{'A593': [(729, 740)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public void setDefaultNodeViewerConfiguration(
            List<String> nodeViewersClassNames) throws IOException {
        File defaultDir = defaultNodeViewersFile.getParentFile();
        if (!defaultDir.exists()) {
            if (!defaultDir.mkdirs()) {
                throw new IOException(
                        ""Failed to create configuration directory: ""
                                + defaultDir.getAbsolutePath());
            }
        }
        saveNodeViewersFile(defaultNodeViewersFile, nodeViewersClassNames);
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getDefaultNodeViewerConfiguration,List<String> getDefaultNodeViewerConfiguration(),"[742, 748]","{'A593': [(742, 742), (748, 748)], 'A591': [(743, 747)]}","{'A593': 0.2857142857142857, 'A591': 0.7142857142857143}",A591,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public List<String> getDefaultNodeViewerConfiguration() throws IOException {
        List<String> defaultNodeViewers = loadNodeViewersFile(defaultNodeViewersFile);
        if (defaultNodeViewers.isEmpty()) {
            LoggerFactory.getLogger().warn(""List of default node viewers is empty"");
        }
        return defaultNodeViewers;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getLastConnectionProps,Properties getLastConnectionProps(),"[756, 758]","{'A593': [(756, 758)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public Properties getLastConnectionProps() {
        return this.lastConnectionProps;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,setLastConnectionProps,void setLastConnectionProps(Properties),"[766, 768]","{'A593': [(766, 768)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    public void setLastConnectionProps(Properties connectionProps) {
        this.lastConnectionProps = connectionProps;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImpl.java,ZooInspectorManagerImpl,getReaderForFile,BufferedReader getReaderForFile(File),"[770, 790]","{'A608': [(770, 790)]}",{'A608': 1.0},A608,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/test/java/org/apache/zookeeper/inspector/manager/ZooInspectorManagerImplTest.java,"    private static BufferedReader getReaderForFile(File file) {
        //check the filesystem first
        if (file.exists()) {
            try {
                return new BufferedReader(new FileReader(file));
            } catch (FileNotFoundException e) {
                return null;
            }
        }

        //fall back to checking the CLASSPATH with only the filename
        //(for cases where the file exists in src/main/resources)
        InputStream classpathStream = ZooInspectorManagerImpl.class.getClassLoader()
            .getResourceAsStream(file.getName());
        if (classpathStream != null) {
            return new BufferedReader(new InputStreamReader(classpathStream));
        }

        //couldn't find the file anywhere
        return null;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/NodesCache.java,NodesCache,load,List<String> load(String),"[51, 54]","{'A606': [(51, 54)]}",{'A606': 1.0},A606,,"                           @Override
                           public List<String> load(String nodePath) {
                               return getChildrenRemote(nodePath);
                           }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/NodesCache.java,NodesCache,getChildrenRemote,List<String> getChildrenRemote(String),"[68, 82]","{'A591': [(69, 77), (79, 82)], 'A606': [(68, 68), (78, 78)]}","{'A591': 0.8666666666666667, 'A606': 0.13333333333333333}",A591,,"    private List<String> getChildrenRemote(String nodePath) {
        try {
            Stat s = zooKeeper.exists(nodePath, false);
            if (s != null) {
                List<String> children = this.zooKeeper.getChildren(nodePath, false);
                Collections.sort(children);
                return children;
            }
        } catch (Exception e) {
            LoggerFactory.getLogger().error(
                    ""Error occurred retrieving children of node: "" + nodePath, e
            );
        }
        return null;
    }
"
org.apache.zookeeper.inspector.manager,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/manager/NodesCache.java,NodesCache,getChildren,List<String> getChildren(String),"[91, 98]","{'A591': [(92, 92), (96, 98)], 'A606': [(91, 91), (93, 95)]}","{'A591': 0.5, 'A606': 0.5}",A591,,"    public List<String> getChildren(String nodePath) {
        try {
            return nodes.get(nodePath);
        } catch (Exception e) {
            LoggerFactory.getLogger().error(""Error occurred retrieving children of node: "" + nodePath, e);
        }
        return null;
    }
"
org.apache.zookeeper.inspector,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/ZooInspector.java,ZooInspector,main,void main(String[]),"[44, 70]","{'A593': [(44, 70)]}",{'A593': 1.0},A593,,"    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            JFrame frame = new JFrame(""ZooInspector"");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            iconResource = new IconResource();
            final ZooInspectorPanel zooInspectorPanel = new ZooInspectorPanel(
                    new ZooInspectorManagerImpl(), iconResource);
            frame.addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosed(WindowEvent e) {
                    super.windowClosed(e);
                    zooInspectorPanel.disconnect(true);
                }
            });

            frame.setContentPane(zooInspectorPanel);
            frame.setSize(1024, 768);
            frame.setVisible(true);
        } catch (Exception e) {
            LoggerFactory.getLogger().error(
                    ""Error occurred loading ZooInspector"", e);
            JOptionPane.showMessageDialog(null,
                    ""ZooInspector failed to start: "" + e.getMessage(), ""Error"",
                    JOptionPane.ERROR_MESSAGE);
        }
    }
"
org.apache.zookeeper.inspector,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/ZooInspector.java,ZooInspector,windowClosed,void windowClosed(WindowEvent),"[53, 57]","{'A593': [(53, 57)]}",{'A593': 1.0},A593,,"                @Override
                public void windowClosed(WindowEvent e) {
                    super.windowClosed(e);
                    zooInspectorPanel.disconnect(true);
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,addNodeSelectionListener,void addNodeSelectionListener(NodeSelectionListener),"[122, 126]","{'A606': [(122, 126)]}",{'A606': 1.0},A606,,"    public void addNodeSelectionListener(NodeSelectionListener l) {
        if (!this.nodeSelectionListeners.contains(l)) {
            this.nodeSelectionListeners.add(l);
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,removeNodeSelectionListener,void removeNodeSelectionListener(NodeSelectionListener),"[128, 131]","{'A606': [(128, 131)]}",{'A606': 1.0},A606,,"    @SuppressWarnings(""unused"")
    public void removeNodeSelectionListener(NodeSelectionListener l) {
        this.nodeSelectionListeners.remove(l);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.NodeEventHandler,processEvent,"void processEvent(String,String,Map<String, String>)","[136, 152]","{'A606': [(136, 152)]}",{'A606': 1.0},A606,,"        @Override
        public void processEvent(String nodePath, String eventType, Map<String, String> eventInfo) {
            StringBuilder sb = new StringBuilder(256);
            sb.append(""Node: "");
            sb.append(nodePath);
            sb.append(""\nEvent: "");
            sb.append(eventType);
            if (eventInfo != null) {
                for (Map.Entry<String, String> entry : eventInfo.entrySet()) {
                    sb.append(""\n"");
                    sb.append(entry.getKey());
                    sb.append("": "");
                    sb.append(entry.getValue());
                }
            }
            toasterManager.showToaster(toasterIcon, sb.toString());
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.TreeEventHandler,treeExpanded,void treeExpanded(TreeExpansionEvent),"[156, 175]","{'A606': [(156, 175)]}",{'A606': 1.0},A606,,"        @Override
        public void treeExpanded(TreeExpansionEvent event) {
            ZooInspectorTreeNode expandingNode = (ZooInspectorTreeNode) event.getPath().getLastPathComponent();

            // This whole chunk of code before the ""refreshNode"" call is to deal with the fact that when lazy-loading a
            // node, we first give it a single ""placeholder"" empty child node to mark it as having children, but we don't
            // actually load those children until the user decides to expand it.  These ""if"" statements figure out if the
            // node has a single placeholder child or not.

            if (expandingNode.isLeaf() || expandingNode.getChildCount() != 1) {
                return;
            }

            ZooInspectorTreeNode onlyChild = ((ZooInspectorTreeNode) expandingNode.getChildAt(0));
            if (!onlyChild.isPlaceholder()) {
                return;
            }

            treeModel.refreshNode(expandingNode);
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.TreeEventHandler,treeCollapsed,void treeCollapsed(TreeExpansionEvent),"[177, 179]","{'A606': [(177, 179)]}",{'A606': 1.0},A606,,"        @Override
        public void treeCollapsed(TreeExpansionEvent event) {
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.TreeEventHandler,valueChanged,void valueChanged(TreeSelectionEvent),"[181, 188]","{'A606': [(181, 188)]}",{'A606': 1.0},A606,,"        @Override
        public void valueChanged(TreeSelectionEvent e) {
            ZooInspectorTreeNode node = (ZooInspectorTreeNode) e.getPath().getLastPathComponent();
            String selectedPath = node.getPathString();
            for (NodeSelectionListener listener : nodeSelectionListeners) {
                listener.nodePathSelected(selectedPath);
            }
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.KeyEventHandler,keyReleased,void keyReleased(KeyEvent),"[192, 211]","{'A606': [(192, 211)]}",{'A606': 1.0},A606,,"        @Override
        public void keyReleased(KeyEvent e) {
            if (!tree.hasFocus()) {
                return;
            }

            switch (e.getKeyCode()) {
                case KeyEvent.VK_D:
                    deleteNode();
                    break;
                case KeyEvent.VK_N:
                    createNode();
                    break;
                case KeyEvent.VK_R:
                    refreshNode();
                    break;
                default:
                    break;
            }
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ActionEventHandler,actionPerformed,void actionPerformed(ActionEvent),"[215, 228]","{'A606': [(215, 228)]}",{'A606': 1.0},A606,,"        @Override
        public void actionPerformed(ActionEvent e) {
            if (e.getSource() == createChildNodeMenuItem) {
                createNode();
            } else if (e.getSource() == deleteNodeMenuItem) {
                deleteNode();
            } else if (e.getSource() == refreshNodeMenuItem) {
                refreshNode();
            } else if (e.getSource() == addWatchMenuItem) {
                addWatch();
            } else if (e.getSource() == removeWatchMenuItem) {
                removeWatch();
            }
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.MouseEventHandler,mouseClicked,void mouseClicked(MouseEvent),"[233, 252]","{'A606': [(233, 252)]}",{'A606': 1.0},A606,,"        @Override
        public void mouseClicked(MouseEvent e) {
            ZooInspectorTreeNode selectedNode = getSelectedNode();
            if (selectedNode == null) {
                //If there's no node currently selected, see if the mouse is on top of one and select it
                int selectedRow = tree.getRowForLocation(e.getX(), e.getY());
                if (selectedRow == -1) {
                    return;
                }
                tree.setSelectionRow(selectedRow);

                TreePath selectedPath = tree.getPathForLocation(e.getX(), e.getY());
                tree.setSelectionPath(selectedPath);
            }

            boolean shouldShowPopup = e.isPopupTrigger() || SwingUtilities.isRightMouseButton(e);
            if (shouldShowPopup) {
                rightClickMenu.show(ZooInspectorTreeView.this, e.getX(), e.getY());
            }
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,initialize,void initialize(),"[260, 262]","{'A606': [(260, 262)]}",{'A606': 1.0},A606,,"    public void initialize() {
        this.treeModel.init();
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,clear,void clear(),"[267, 269]","{'A606': [(267, 269)]}",{'A606': 1.0},A606,,"    public void clear() {
        this.treeModel.clear();
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,createNode,void createNode(),"[274, 291]","{'A606': [(274, 291)]}",{'A606': 1.0},A606,,"    public void createNode() {
        ZooInspectorTreeNode parentNode = getSelectedNode();
        if (parentNode == null) {
            return;
        }

        final String newNodeName = JOptionPane.showInputDialog(
                this,
                ""Please enter a name for the new node: "",
                ""Create Child Node"",
                JOptionPane.INFORMATION_MESSAGE);

        if (newNodeName == null || newNodeName.trim().isEmpty()) {
            return;
        }

        this.treeModel.createNode(parentNode, newNodeName);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,deleteNode,void deleteNode(),"[296, 316]","{'A606': [(296, 316)]}",{'A606': 1.0},A606,,"    public void deleteNode() {
        ZooInspectorTreeNode nodeToDelete = getSelectedNode();
        if (nodeToDelete == null) {
            return;
        }

        int answer = JOptionPane.showConfirmDialog(
                this,
                ""Are you sure you want to delete the selected node '"" + nodeToDelete.getPathString() + ""'?\n"" +
                        ""(This action cannot be reverted)"",
                ""Confirm Delete"",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE
        );

        if (answer != JOptionPane.YES_OPTION) {
            return;
        }

        this.treeModel.deleteNode(nodeToDelete);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,refreshNode,void refreshNode(),"[321, 327]","{'A606': [(321, 327)]}",{'A606': 1.0},A606,,"    public void refreshNode() {
        ZooInspectorTreeNode nodeToRefresh = getSelectedNode();
        if (nodeToRefresh == null) {
            return;
        }
        this.treeModel.refreshNode(nodeToRefresh);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,addWatch,void addWatch(),"[332, 338]","{'A606': [(332, 338)]}",{'A606': 1.0},A606,,"    public void addWatch() {
        ZooInspectorTreeNode nodeToWatch = getSelectedNode();
        if (nodeToWatch == null) {
            return;
        }
        this.treeModel.addWatch(nodeToWatch);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,removeWatch,void removeWatch(),"[343, 349]","{'A606': [(343, 349)]}",{'A606': 1.0},A606,,"    public void removeWatch() {
        ZooInspectorTreeNode nodeToUnwatch = getSelectedNode();
        if (nodeToUnwatch == null) {
            return;
        }
        this.treeModel.removeWatch(nodeToUnwatch);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,getSelectedNode,ZooInspectorTreeNode getSelectedNode(),"[354, 357]","{'A606': [(354, 357)]}",{'A606': 1.0},A606,,"    private ZooInspectorTreeNode getSelectedNode() {
        TreePath selected = this.tree.getSelectionPath();
        return selected != null ? ((ZooInspectorTreeNode) selected.getLastPathComponent()) : null;
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView,showWarnDialog,void showWarnDialog(String),"[359, 363]","{'A610': [(359, 363)]}",{'A610': 1.0},A610,,"    private void showWarnDialog(String message){
        JOptionPane.showMessageDialog(this,
                message, ""Error"",
                JOptionPane.ERROR_MESSAGE);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,createNode,"void createNode(ZooInspectorTreeNode,String)","[385, 425]","{'A606': [(385, 395), (404, 404), (416, 416), (419, 425)], 'A610': [(396, 403), (405, 415), (417, 418)]}","{'A606': 0.4878048780487805, 'A610': 0.5121951219512195}",A610,,"        public void createNode(ZooInspectorTreeNode parentNode, String newNodeName) {
            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                @Override
                protected Boolean doInBackground() {
                    //runs on a background non-UI thread
                    return manager.createNode(parentNode.getPathString(), newNodeName);
                }

                @Override
                protected void done() {
                    //runs on the UI event thread
                    boolean success;
                    try {
                        success = get();
                    } catch (Exception e) {
                        success = false;
                        LoggerFactory.getLogger().error(""create fail for {} {}"", parentNode, newNodeName, e);
                        showWarnDialog(""create "" + newNodeName + "" in "" + parentNode + "" fail, exception is "" + e.getMessage());
                    }

                    if (!success) {
                        showWarnDialog(""create "" + newNodeName + "" in "" + parentNode + "" fail, see log for more detail"");
                    }
                    else {
                        //extra logic to find the correct spot alphabetically to insert the new node in the tree`
                        int i = 0;
                        for (; i < parentNode.getChildCount(); i++) {
                            ZooInspectorTreeNode existingChild = (ZooInspectorTreeNode) parentNode.getChildAt(i);
                            if (newNodeName.compareTo(existingChild.getName()) < 0) {
                                break;
                            }
                        }
                        insertNodeInto(new ZooInspectorTreeNode(newNodeName, parentNode, 0), parentNode, i);
                        parentNode.setNumDisplayChildren(parentNode.getNumDisplayChildren() + 1);
                    }
                    getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            };
            getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            worker.execute();
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,doInBackground,Boolean doInBackground(),"[387, 391]","{'A606': [(387, 391)]}",{'A606': 1.0},A606,,"                @Override
                protected Boolean doInBackground() {
                    //runs on a background non-UI thread
                    return manager.createNode(parentNode.getPathString(), newNodeName);
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,done,void done(),"[393, 421]","{'A606': [(393, 395), (404, 404), (416, 416), (419, 421)], 'A610': [(396, 403), (405, 415), (417, 418)]}","{'A606': 0.27586206896551724, 'A610': 0.7241379310344828}",A610,,"                @Override
                protected void done() {
                    //runs on the UI event thread
                    boolean success;
                    try {
                        success = get();
                    } catch (Exception e) {
                        success = false;
                        LoggerFactory.getLogger().error(""create fail for {} {}"", parentNode, newNodeName, e);
                        showWarnDialog(""create "" + newNodeName + "" in "" + parentNode + "" fail, exception is "" + e.getMessage());
                    }

                    if (!success) {
                        showWarnDialog(""create "" + newNodeName + "" in "" + parentNode + "" fail, see log for more detail"");
                    }
                    else {
                        //extra logic to find the correct spot alphabetically to insert the new node in the tree`
                        int i = 0;
                        for (; i < parentNode.getChildCount(); i++) {
                            ZooInspectorTreeNode existingChild = (ZooInspectorTreeNode) parentNode.getChildAt(i);
                            if (newNodeName.compareTo(existingChild.getName()) < 0) {
                                break;
                            }
                        }
                        insertNodeInto(new ZooInspectorTreeNode(newNodeName, parentNode, 0), parentNode, i);
                        parentNode.setNumDisplayChildren(parentNode.getNumDisplayChildren() + 1);
                    }
                    getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,deleteNode,void deleteNode(ZooInspectorTreeNode),"[432, 451]","{'A606': [(432, 451)]}",{'A606': 1.0},A606,,"        public void deleteNode(ZooInspectorTreeNode nodeToDelete) {
            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                @Override
                protected Boolean doInBackground() {
                    //runs on a background non-UI thread
                    return manager.deleteNode(nodeToDelete.getPathString());
                }

                @Override
                protected void done() {
                    //runs on the UI event thread
                    ZooInspectorTreeNode parent = (ZooInspectorTreeNode) nodeToDelete.getParent();
                    parent.setNumDisplayChildren(parent.getNumDisplayChildren() - 1);
                    removeNodeFromParent(nodeToDelete);
                    getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            };
            getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            worker.execute();
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,doInBackground,Boolean doInBackground(),"[434, 438]","{'A606': [(434, 438)]}",{'A606': 1.0},A606,,"                @Override
                protected Boolean doInBackground() {
                    //runs on a background non-UI thread
                    return manager.deleteNode(nodeToDelete.getPathString());
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,done,void done(),"[440, 447]","{'A606': [(440, 447)]}",{'A606': 1.0},A606,,"                @Override
                protected void done() {
                    //runs on the UI event thread
                    ZooInspectorTreeNode parent = (ZooInspectorTreeNode) nodeToDelete.getParent();
                    parent.setNumDisplayChildren(parent.getNumDisplayChildren() - 1);
                    removeNodeFromParent(nodeToDelete);
                    getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,refreshNode,void refreshNode(ZooInspectorTreeNode),"[459, 505]","{'A606': [(459, 505)]}",{'A606': 1.0},A606,,"        public void refreshNode(ZooInspectorTreeNode nodeToRefresh) {
            SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {
                final LinkedList<Pair<String, Integer>> childrenToAdd = new LinkedList<>();

                @Override
                protected Boolean doInBackground() {
                    //runs on a background non-UI thread
                    //Make all the network calls here (to get children and their child counts) and collect the children,
                    //but we can't add them to the UI until we're back on the event thread in done()
                    List<String> children = manager.getChildren(nodeToRefresh.getPathString());
                    if (children == null) {
                        return false;
                    }
                    nodeToRefresh.setNumDisplayChildren(children.size());

                    for (String childName : children) {
                        ZooInspectorTreeNode childNode = new ZooInspectorTreeNode(childName, nodeToRefresh, 0);
                        int numChildren = manager.getNumChildren(childNode.getPathString());
                        childrenToAdd.add(new Pair<>(childName, numChildren));
                    }
                    return true;
                }

                @Override
                protected void done() {
                    //runs on the UI event thread
                    nodeToRefresh.removeAllChildren();

                    for (Pair<String, Integer> childPair : childrenToAdd) {
                        ZooInspectorTreeNode childNode = new ZooInspectorTreeNode(childPair.getKey(),
                                nodeToRefresh,
                                childPair.getValue());

                        if (childPair.getValue() > 0) {
                            // add a placeholder child so the UI renders this node like it has children
                            childNode.add(new ZooInspectorTreeNode());
                        }
                        nodeToRefresh.add(childNode);
                    }

                    reload(nodeToRefresh);
                    getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            };
            getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            worker.execute();
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,doInBackground,Boolean doInBackground(),"[463, 480]","{'A606': [(463, 480)]}",{'A606': 1.0},A606,,"                @Override
                protected Boolean doInBackground() {
                    //runs on a background non-UI thread
                    //Make all the network calls here (to get children and their child counts) and collect the children,
                    //but we can't add them to the UI until we're back on the event thread in done()
                    List<String> children = manager.getChildren(nodeToRefresh.getPathString());
                    if (children == null) {
                        return false;
                    }
                    nodeToRefresh.setNumDisplayChildren(children.size());

                    for (String childName : children) {
                        ZooInspectorTreeNode childNode = new ZooInspectorTreeNode(childName, nodeToRefresh, 0);
                        int numChildren = manager.getNumChildren(childNode.getPathString());
                        childrenToAdd.add(new Pair<>(childName, numChildren));
                    }
                    return true;
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,done,void done(),"[482, 501]","{'A606': [(482, 501)]}",{'A606': 1.0},A606,,"                @Override
                protected void done() {
                    //runs on the UI event thread
                    nodeToRefresh.removeAllChildren();

                    for (Pair<String, Integer> childPair : childrenToAdd) {
                        ZooInspectorTreeNode childNode = new ZooInspectorTreeNode(childPair.getKey(),
                                nodeToRefresh,
                                childPair.getValue());

                        if (childPair.getValue() > 0) {
                            // add a placeholder child so the UI renders this node like it has children
                            childNode.add(new ZooInspectorTreeNode());
                        }
                        nodeToRefresh.add(childNode);
                    }

                    reload(nodeToRefresh);
                    getRootPane().setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,addWatch,void addWatch(ZooInspectorTreeNode),"[512, 514]","{'A606': [(512, 514)]}",{'A606': 1.0},A606,,"        public void addWatch(ZooInspectorTreeNode nodeToWatch) {
            this.manager.addWatchers(Collections.singletonList(nodeToWatch.getPathString()), new NodeEventHandler());
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,removeWatch,void removeWatch(ZooInspectorTreeNode),"[521, 523]","{'A606': [(521, 523)]}",{'A606': 1.0},A606,,"        public void removeWatch(ZooInspectorTreeNode nodeToUnwatch) {
            this.manager.removeWatchers(Collections.singletonList(nodeToUnwatch.getPathString()));
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,init,void init(),"[528, 530]","{'A606': [(528, 530)]}",{'A606': 1.0},A606,,"        public void init() {
            refreshNode((ZooInspectorTreeNode) getRoot());
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeModel,clear,void clear(),"[535, 540]","{'A606': [(535, 540)]}",{'A606': 1.0},A606,,"        public void clear() {
            ZooInspectorTreeNode root = (ZooInspectorTreeNode) getRoot();
            root.setNumDisplayChildren(0);
            root.removeAllChildren();
            reload();
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,equals,boolean equals(Object),"[566, 578]","{'A606': [(566, 578)]}",{'A606': 1.0},A606,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }

            if (o == null || getClass() != o.getClass()) {
                return false;
            }

            ZooInspectorTreeNode that = (ZooInspectorTreeNode) o;
            return this.pathString.equals(that.pathString);
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,hashCode,int hashCode(),"[580, 583]","{'A606': [(580, 583)]}",{'A606': 1.0},A606,,"        @Override
        public int hashCode() {
            return this.pathString.hashCode();
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,isPlaceholder,boolean isPlaceholder(),"[585, 588]","{'A606': [(585, 588)]}",{'A606': 1.0},A606,,"        public boolean isPlaceholder() {
            //A placeholder node renders as ""Loading..."" on the UI and is identified by having an empty name and path
            return this.name.isEmpty() && this.getPathString().isEmpty();
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,getName,String getName(),"[590, 592]","{'A606': [(590, 592)]}",{'A606': 1.0},A606,,"        public String getName() {
            return this.name;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,getPathString,String getPathString(),"[594, 596]","{'A606': [(594, 596)]}",{'A606': 1.0},A606,,"        public String getPathString() {
            return this.pathString;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,getNumDisplayChildren,int getNumDisplayChildren(),"[598, 600]","{'A606': [(598, 600)]}",{'A606': 1.0},A606,,"        public int getNumDisplayChildren() {
            return this.numDisplayChildren;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,setNumDisplayChildren,void setNumDisplayChildren(int),"[602, 604]","{'A606': [(602, 604)]}",{'A606': 1.0},A606,,"        public void setNumDisplayChildren(int numDisplayChildren) {
            this.numDisplayChildren = numDisplayChildren;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeNode,toString,String toString(),"[606, 611]","{'A606': [(606, 611)]}",{'A606': 1.0},A606,,"        @Override
        public String toString() {
            //NOTE: Don't mess with this; it's actually used to construct the TreePath entries; if you want to
            //change the name on the UI display, use the TreeCellRenderer below
            return this.name;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorTreeView.java,ZooInspectorTreeView.ZooInspectorTreeCellRenderer,getTreeCellRendererComponent,"Component getTreeCellRendererComponent(JTree,Object,boolean,boolean,boolean,int,boolean)","[625, 640]","{'A606': [(625, 640)]}",{'A606': 1.0},A606,,"        @Override
        public Component getTreeCellRendererComponent(JTree tree, Object value, boolean sel, boolean expanded,
                                                      boolean leaf, int row, boolean hasFocus) {
            ZooInspectorTreeNode node = (ZooInspectorTreeNode) value;
            String text = node.getName();

            if (node.isPlaceholder()) {
                text = ""Loading..."";
            }

            if (node.getNumDisplayChildren() > 0) {
                text += "" ("" + node.getNumDisplayChildren() + "")"";
            }

            return super.getTreeCellRendererComponent(tree, text, sel, expanded, leaf, row, hasFocus);
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[89, 95]","{'A593': [(89, 95)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorConnectionPropertiesDialog zicpd = new ZooInspectorConnectionPropertiesDialog(
                        zooInspectorManager.getLastConnectionProps(),
                        zooInspectorManager.getConnectionPropertiesTemplate(),
                        ZooInspectorPanel.this);
                zicpd.setVisible(true);
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[98, 100]","{'A593': [(98, 100)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                disconnect();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[103, 105]","{'A593': [(103, 103)], 'A606': [(104, 105)]}","{'A593': 0.3333333333333333, 'A606': 0.6666666666666666}",A606,,"            public void actionPerformed(ActionEvent e) {
                treeViewer.initialize();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[108, 110]","{'A606': [(108, 110)]}",{'A606': 1.0},A606,,"            public void actionPerformed(ActionEvent e) {
                treeViewer.createNode();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[113, 115]","{'A593': [(115, 115)], 'A606': [(113, 114)]}","{'A593': 0.3333333333333333, 'A606': 0.6666666666666666}",A606,,"            public void actionPerformed(ActionEvent e) {
                treeViewer.deleteNode();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[118, 123]","{'A593': [(118, 123)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorNodeViewersDialog nvd = new ZooInspectorNodeViewersDialog(
                        JOptionPane.getRootFrame(), nodeViewers, listeners,
                        zooInspectorManager, iconResource);
                nvd.setVisible(true);
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,actionPerformed,void actionPerformed(ActionEvent),"[126, 130]","{'A593': [(126, 130)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorAboutDialog zicpd = new ZooInspectorAboutDialog(
                        JOptionPane.getRootFrame(), iconResource);
                zicpd.setVisible(true);
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,connect,void connect(Properties),"[146, 177]","{'A593': [(146, 158), (160, 165), (167, 177)], 'A606': [(159, 159), (166, 166)]}","{'A593': 0.9375, 'A606': 0.0625}",A593,,"    public void connect(final Properties connectionProps) {
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                zooInspectorManager.setLastConnectionProps(connectionProps);
                return zooInspectorManager.connect(connectionProps);
            }

            @Override
            protected void done() {
                try {
                    if (get()) {
                        treeViewer.initialize();
                        toolbar.toggleButtons(true);
                    } else {
                        JOptionPane.showMessageDialog(ZooInspectorPanel.this,
                                ""Unable to connect to zookeeper"", ""Error"",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    LoggerFactory
                            .getLogger()
                            .error(
                                    ""Error occurred while connecting to ZooKeeper server"",
                                    e);
                }
            }

        };
        worker.execute();
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,doInBackground,Boolean doInBackground(),"[149, 153]","{'A593': [(149, 153)]}",{'A593': 1.0},A593,,"            @Override
            protected Boolean doInBackground() throws Exception {
                zooInspectorManager.setLastConnectionProps(connectionProps);
                return zooInspectorManager.connect(connectionProps);
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,done,void done(),"[155, 173]","{'A593': [(155, 158), (160, 165), (167, 173)], 'A606': [(159, 159), (166, 166)]}","{'A593': 0.8947368421052632, 'A606': 0.10526315789473684}",A593,,"            @Override
            protected void done() {
                try {
                    if (get()) {
                        treeViewer.initialize();
                        toolbar.toggleButtons(true);
                    } else {
                        JOptionPane.showMessageDialog(ZooInspectorPanel.this,
                                ""Unable to connect to zookeeper"", ""Error"",
                                JOptionPane.ERROR_MESSAGE);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    LoggerFactory
                            .getLogger()
                            .error(
                                    ""Error occurred while connecting to ZooKeeper server"",
                                    e);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,disconnect,void disconnect(),"[179, 181]","{'A593': [(179, 181)]}",{'A593': 1.0},A593,,"    public void disconnect() {
        disconnect(false);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,disconnect,void disconnect(boolean),"[188, 227]","{'A593': [(188, 199), (201, 202), (204, 227)], 'A606': [(200, 200), (203, 203)]}","{'A593': 0.95, 'A606': 0.05}",A593,,"    public void disconnect(boolean wait) {
        SwingWorker<Boolean, Void> worker = new SwingWorker<Boolean, Void>() {

            @Override
            protected Boolean doInBackground() throws Exception {
                return ZooInspectorPanel.this.zooInspectorManager.disconnect();
            }

            @Override
            protected void done() {
                try {
                    if (get()) {
                        treeViewer.clear();
                        toolbar.toggleButtons(false);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    LoggerFactory
                            .getLogger()
                            .error(
                                    ""Error occurred while disconnecting from ZooKeeper server"",
                                    e);
                }
            }

        };
        worker.execute();
        if (wait) {
            while (!worker.isDone()) {
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    LoggerFactory
                            .getLogger()
                            .error(
                                    ""Error occurred while disconnecting from ZooKeeper server"",
                                    e);
                }
            }
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,doInBackground,Boolean doInBackground(),"[191, 194]","{'A593': [(191, 194)]}",{'A593': 1.0},A593,,"            @Override
            protected Boolean doInBackground() throws Exception {
                return ZooInspectorPanel.this.zooInspectorManager.disconnect();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,done,void done(),"[196, 210]","{'A593': [(196, 199), (201, 202), (204, 210)], 'A606': [(200, 200), (203, 203)]}","{'A593': 0.8666666666666667, 'A606': 0.13333333333333333}",A593,,"            @Override
            protected void done() {
                try {
                    if (get()) {
                        treeViewer.clear();
                        toolbar.toggleButtons(false);
                    }
                } catch (InterruptedException | ExecutionException e) {
                    LoggerFactory
                            .getLogger()
                            .error(
                                    ""Error occurred while disconnecting from ZooKeeper server"",
                                    e);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,nodeViewersChanged,void nodeViewersChanged(List<ZooInspectorNodeViewer>),"[235, 237]","{'A593': [(235, 237)]}",{'A593': 1.0},A593,,"    public void nodeViewersChanged(List<ZooInspectorNodeViewer> newViewers) {
        this.nodeViewersPanel.setNodeViewers(newViewers);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorPanel.java,ZooInspectorPanel,setdefaultConnectionProps,void setdefaultConnectionProps(Properties),"[243, 246]","{'A593': [(243, 246)]}",{'A593': 1.0},A593,,"    public void setdefaultConnectionProps(Properties connectionProps)
            throws IOException {
        this.zooInspectorManager.saveDefaultConnectionFile(connectionProps);
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerData.java,NodeViewerData,actionPerformed,void actionPerformed(ActionEvent),"[60, 71]","{'A593': [(60, 62), (64, 71)], 'A606': [(63, 63)]}","{'A593': 0.9166666666666666, 'A606': 0.08333333333333333}",A593,,"            public void actionPerformed(ActionEvent e) {
                if (selectedNode != null) {
                    if (JOptionPane.showConfirmDialog(NodeViewerData.this,
                            ""Are you sure you want to save the node '"" + selectedNode + ""'?\n""
                                    + "" (this action cannot be reverted)"",
                            ""Confirm Save"", JOptionPane.YES_NO_OPTION,
                            JOptionPane.WARNING_MESSAGE) == JOptionPane.YES_OPTION) {
                        zooInspectorManager.setData(selectedNode, dataArea
                                .getText());
                    }
                }
            }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerData.java,NodeViewerData,getTitle,String getTitle(),"[84, 87]","{'A593': [(84, 87)]}",{'A593': 1.0},A593,,"    @Override
    public String getTitle() {
        return ""Node Data"";
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerData.java,NodeViewerData,nodeSelectionChanged,void nodeSelectionChanged(List<String>),"[96, 123]","{'A593': [(96, 112), (114, 123)], 'A606': [(113, 113)]}","{'A593': 0.9642857142857143, 'A606': 0.03571428571428571}",A593,,"    @Override
    public void nodeSelectionChanged(List<String> selectedNodes) {
        if (selectedNodes.size() > 0) {
            this.selectedNode = selectedNodes.get(0);
            SwingWorker<String, Void> worker = new SwingWorker<String, Void>() {

                @Override
                protected String doInBackground() throws Exception {
                    return NodeViewerData.this.zooInspectorManager
                            .getData(NodeViewerData.this.selectedNode);
                }

                @Override
                protected void done() {
                    String data = """";
                    try {
                        data = get();
                    } catch (InterruptedException | ExecutionException e) {
                        LoggerFactory.getLogger().error(
                                ""Error retrieving data for node: ""
                                        + NodeViewerData.this.selectedNode, e);
                    }
                    NodeViewerData.this.dataArea.setText(data);
                }
            };
            worker.execute();
        }
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerData.java,NodeViewerData,doInBackground,String doInBackground(),"[102, 106]","{'A593': [(102, 106)]}",{'A593': 1.0},A593,,"                @Override
                protected String doInBackground() throws Exception {
                    return NodeViewerData.this.zooInspectorManager
                            .getData(NodeViewerData.this.selectedNode);
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerData.java,NodeViewerData,done,void done(),"[108, 119]","{'A593': [(108, 112), (114, 119)], 'A606': [(113, 113)]}","{'A593': 0.9166666666666666, 'A606': 0.08333333333333333}",A593,,"                @Override
                protected void done() {
                    String data = """";
                    try {
                        data = get();
                    } catch (InterruptedException | ExecutionException e) {
                        LoggerFactory.getLogger().error(
                                ""Error retrieving data for node: ""
                                        + NodeViewerData.this.selectedNode, e);
                    }
                    NodeViewerData.this.dataArea.setText(data);
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerData.java,NodeViewerData,setZooInspectorManager,void setZooInspectorManager(ZooInspectorNodeManager),"[133, 137]","{'A593': [(133, 137)]}",{'A593': 1.0},A593,,"    @Override
    public void setZooInspectorManager(
            ZooInspectorNodeManager zooInspectorManager) {
        this.zooInspectorManager = zooInspectorManager;
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/ZooInspectorNodeViewer.java,ZooInspectorNodeViewer,getTransferData,Object getTransferData(DataFlavor),"[71, 78]","{'A593': [(71, 78)]}",{'A593': 1.0},A593,,"    public Object getTransferData(DataFlavor flavor)
            throws UnsupportedFlavorException, IOException {
        if (flavor.equals(nodeViewerDataFlavor)) {
            return this.getClass().getCanonicalName();
        } else {
            return null;
        }
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/ZooInspectorNodeViewer.java,ZooInspectorNodeViewer,getTransferDataFlavors,DataFlavor[] getTransferDataFlavors(),"[85, 87]","{'A593': [(85, 87)]}",{'A593': 1.0},A593,,"    public DataFlavor[] getTransferDataFlavors() {
        return new DataFlavor[] { nodeViewerDataFlavor };
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/ZooInspectorNodeViewer.java,ZooInspectorNodeViewer,isDataFlavorSupported,boolean isDataFlavorSupported(DataFlavor),"[95, 97]","{'A593': [(95, 97)]}",{'A593': 1.0},A593,,"    public boolean isDataFlavorSupported(DataFlavor flavor) {
        return flavor.equals(nodeViewerDataFlavor);
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/ZooInspectorNodeViewer.java,ZooInspectorNodeViewer,hashCode,int hashCode(),"[104, 111]","{'A593': [(104, 111)]}",{'A593': 1.0},A593,,"    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result
                + ((getTitle() == null) ? 0 : getTitle().hashCode());
        return result;
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/ZooInspectorNodeViewer.java,ZooInspectorNodeViewer,equals,boolean equals(Object),"[118, 137]","{'A593': [(118, 137)]}",{'A593': 1.0},A593,,"    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ZooInspectorNodeViewer other = (ZooInspectorNodeViewer) obj;
        if (getClass().getCanonicalName() != other.getClass()
                .getCanonicalName()) {
            return false;
        }
        if (getTitle() == null) {
            if (other.getTitle() != null)
                return false;
        } else if (!getTitle().equals(other.getTitle()))
            return false;
        return true;
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java,NodeViewerMetaData,getTitle,String getTitle(),"[68, 71]","{'A593': [(68, 71)]}",{'A593': 1.0},A593,,"    @Override
    public String getTitle() {
        return ""Node Metadata"";
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java,NodeViewerMetaData,nodeSelectionChanged,void nodeSelectionChanged(List<String>),"[80, 185]","{'A593': [(80, 120), (122, 166), (182, 185)], 'A610': [(121, 121), (167, 169), (171, 173), (175, 179), (181, 181)], 'A589': [(170, 170), (174, 174), (180, 180)]}","{'A593': 0.8490566037735849, 'A610': 0.12264150943396226, 'A589': 0.02830188679245283}",A593,,"    @Override
    public void nodeSelectionChanged(List<String> selectedNodes) {
        this.metaDataPanel.removeAll();
        if (selectedNodes.size() > 0) {
            this.selectedNode = selectedNodes.get(0);
            SwingWorker<Map<String, String>, Void> worker = new SwingWorker<Map<String, String>, Void>() {

                @Override
                protected Map<String, String> doInBackground() throws Exception {
                    return NodeViewerMetaData.this.zooInspectorManager
                            .getNodeMeta(NodeViewerMetaData.this.selectedNode);
                }

                @Override
                protected void done() {
                    Map<String, String> data = null;
                    try {
                        data = get();
                    } catch (InterruptedException e) {
                        data = new HashMap<String, String>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving meta data for node: ""
                                        + NodeViewerMetaData.this.selectedNode,
                                e);
                    } catch (ExecutionException e) {
                        data = new HashMap<String, String>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving meta data for node: ""
                                        + NodeViewerMetaData.this.selectedNode,
                                e);
                    }
                    NodeViewerMetaData.this.metaDataPanel
                            .setLayout(new GridBagLayout());
                    JPanel infoPanel = new JPanel();
                    infoPanel.setBackground(Color.WHITE);
                    infoPanel.setLayout(new GridBagLayout());
                    int i = 0;
                    int rowPos = 0;
                    for (Map.Entry<String, String> entry : data.entrySet()) {
                        rowPos = 2 * i + 1;
                        JLabel label = new JLabel(entry.getKey());
                        JTextField text = new JTextField(formatValByKeyType(entry.getKey(),entry.getValue()));
                        text.setEditable(false);
                        GridBagConstraints c1 = new GridBagConstraints();
                        c1.gridx = 0;
                        c1.gridy = rowPos;
                        c1.gridwidth = 1;
                        c1.gridheight = 1;
                        c1.weightx = 0;
                        c1.weighty = 0;
                        c1.anchor = GridBagConstraints.WEST;
                        c1.fill = GridBagConstraints.HORIZONTAL;
                        c1.insets = new Insets(5, 5, 5, 5);
                        c1.ipadx = 0;
                        c1.ipady = 0;
                        infoPanel.add(label, c1);
                        GridBagConstraints c2 = new GridBagConstraints();
                        c2.gridx = 2;
                        c2.gridy = rowPos;
                        c2.gridwidth = 1;
                        c2.gridheight = 1;
                        c2.weightx = 0;
                        c2.weighty = 0;
                        c2.anchor = GridBagConstraints.WEST;
                        c2.fill = GridBagConstraints.HORIZONTAL;
                        c2.insets = new Insets(5, 5, 5, 5);
                        c2.ipadx = 0;
                        c2.ipady = 0;
                        infoPanel.add(text, c2);
                        i++;
                    }
                    GridBagConstraints c = new GridBagConstraints();
                    c.gridx = 1;
                    c.gridy = rowPos;
                    c.gridwidth = 1;
                    c.gridheight = 1;
                    c.weightx = 1;
                    c.weighty = 1;
                    c.anchor = GridBagConstraints.NORTHWEST;
                    c.fill = GridBagConstraints.NONE;
                    c.insets = new Insets(5, 5, 5, 5);
                    c.ipadx = 0;
                    c.ipady = 0;
                    NodeViewerMetaData.this.metaDataPanel.add(infoPanel, c);
                    NodeViewerMetaData.this.metaDataPanel.revalidate();
                    NodeViewerMetaData.this.metaDataPanel.repaint();
                }

                private String formatValByKeyType(String key, String value) {
                    if(key==null) return value;
                    String formattedVal=value;
                    switch (key){
                        case ""Ephemeral Owner"":
                            try{
                                formattedVal = String.format(""0x%x"", Long.parseLong(value));
                            }catch (NumberFormatException e){
                                LoggerFactory.getLogger().warn(""parse {}'s value {} to hex fail"",key,value,e);
                            }
                            break;
                    }
                    return formattedVal;
                }
            };
            worker.execute();
        }
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java,NodeViewerMetaData,doInBackground,"Map<String, String> doInBackground()","[87, 91]","{'A593': [(87, 91)]}",{'A593': 1.0},A593,,"                @Override
                protected Map<String, String> doInBackground() throws Exception {
                    return NodeViewerMetaData.this.zooInspectorManager
                            .getNodeMeta(NodeViewerMetaData.this.selectedNode);
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java,NodeViewerMetaData,done,void done(),"[93, 166]","{'A593': [(93, 120), (122, 166)], 'A610': [(121, 121)]}","{'A593': 0.9864864864864865, 'A610': 0.013513513513513514}",A593,,"                @Override
                protected void done() {
                    Map<String, String> data = null;
                    try {
                        data = get();
                    } catch (InterruptedException e) {
                        data = new HashMap<String, String>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving meta data for node: ""
                                        + NodeViewerMetaData.this.selectedNode,
                                e);
                    } catch (ExecutionException e) {
                        data = new HashMap<String, String>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving meta data for node: ""
                                        + NodeViewerMetaData.this.selectedNode,
                                e);
                    }
                    NodeViewerMetaData.this.metaDataPanel
                            .setLayout(new GridBagLayout());
                    JPanel infoPanel = new JPanel();
                    infoPanel.setBackground(Color.WHITE);
                    infoPanel.setLayout(new GridBagLayout());
                    int i = 0;
                    int rowPos = 0;
                    for (Map.Entry<String, String> entry : data.entrySet()) {
                        rowPos = 2 * i + 1;
                        JLabel label = new JLabel(entry.getKey());
                        JTextField text = new JTextField(formatValByKeyType(entry.getKey(),entry.getValue()));
                        text.setEditable(false);
                        GridBagConstraints c1 = new GridBagConstraints();
                        c1.gridx = 0;
                        c1.gridy = rowPos;
                        c1.gridwidth = 1;
                        c1.gridheight = 1;
                        c1.weightx = 0;
                        c1.weighty = 0;
                        c1.anchor = GridBagConstraints.WEST;
                        c1.fill = GridBagConstraints.HORIZONTAL;
                        c1.insets = new Insets(5, 5, 5, 5);
                        c1.ipadx = 0;
                        c1.ipady = 0;
                        infoPanel.add(label, c1);
                        GridBagConstraints c2 = new GridBagConstraints();
                        c2.gridx = 2;
                        c2.gridy = rowPos;
                        c2.gridwidth = 1;
                        c2.gridheight = 1;
                        c2.weightx = 0;
                        c2.weighty = 0;
                        c2.anchor = GridBagConstraints.WEST;
                        c2.fill = GridBagConstraints.HORIZONTAL;
                        c2.insets = new Insets(5, 5, 5, 5);
                        c2.ipadx = 0;
                        c2.ipady = 0;
                        infoPanel.add(text, c2);
                        i++;
                    }
                    GridBagConstraints c = new GridBagConstraints();
                    c.gridx = 1;
                    c.gridy = rowPos;
                    c.gridwidth = 1;
                    c.gridheight = 1;
                    c.weightx = 1;
                    c.weighty = 1;
                    c.anchor = GridBagConstraints.NORTHWEST;
                    c.fill = GridBagConstraints.NONE;
                    c.insets = new Insets(5, 5, 5, 5);
                    c.ipadx = 0;
                    c.ipady = 0;
                    NodeViewerMetaData.this.metaDataPanel.add(infoPanel, c);
                    NodeViewerMetaData.this.metaDataPanel.revalidate();
                    NodeViewerMetaData.this.metaDataPanel.repaint();
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java,NodeViewerMetaData,formatValByKeyType,"String formatValByKeyType(String,String)","[168, 181]","{'A610': [(168, 169), (171, 173), (175, 179), (181, 181)], 'A589': [(170, 170), (174, 174), (180, 180)]}","{'A610': 0.7857142857142857, 'A589': 0.21428571428571427}",A610,,"                private String formatValByKeyType(String key, String value) {
                    if(key==null) return value;
                    String formattedVal=value;
                    switch (key){
                        case ""Ephemeral Owner"":
                            try{
                                formattedVal = String.format(""0x%x"", Long.parseLong(value));
                            }catch (NumberFormatException e){
                                LoggerFactory.getLogger().warn(""parse {}'s value {} to hex fail"",key,value,e);
                            }
                            break;
                    }
                    return formattedVal;
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerMetaData.java,NodeViewerMetaData,setZooInspectorManager,void setZooInspectorManager(ZooInspectorNodeManager),"[195, 199]","{'A593': [(195, 199)]}",{'A593': 1.0},A593,,"    @Override
    public void setZooInspectorManager(
            ZooInspectorNodeManager zooInspectorManager) {
        this.zooInspectorManager = zooInspectorManager;
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerACL.java,NodeViewerACL,getTitle,String getTitle(),"[66, 69]","{'A593': [(66, 69)]}",{'A593': 1.0},A593,,"    @Override
    public String getTitle() {
        return ""Node ACLs"";
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerACL.java,NodeViewerACL,nodeSelectionChanged,void nodeSelectionChanged(List<String>),"[78, 171]","{'A593': [(78, 171)]}",{'A593': 1.0},A593,,"    @Override
    public void nodeSelectionChanged(List<String> selectedNodes) {
        this.aclDataPanel.removeAll();
        if (selectedNodes.size() > 0) {
            this.selectedNode = selectedNodes.get(0);
            SwingWorker<List<Map<String, String>>, Void> worker = new SwingWorker<List<Map<String, String>>, Void>() {

                @Override
                protected List<Map<String, String>> doInBackground()
                        throws Exception {
                    return NodeViewerACL.this.zooInspectorManager
                            .getACLs(NodeViewerACL.this.selectedNode);
                }

                @Override
                protected void done() {
                    List<Map<String, String>> acls = null;
                    try {
                        acls = get();
                    } catch (InterruptedException e) {
                        acls = new ArrayList<Map<String, String>>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving ACL Information for node: ""
                                        + NodeViewerACL.this.selectedNode, e);
                    } catch (ExecutionException e) {
                        acls = new ArrayList<Map<String, String>>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving ACL Information for node: ""
                                        + NodeViewerACL.this.selectedNode, e);
                    }
                    aclDataPanel.setLayout(new GridBagLayout());
                    int j = 0;
                    for (Map<String, String> data : acls) {
                        int rowPos = 2 * j + 1;
                        JPanel aclPanel = new JPanel();
                        aclPanel.setBorder(BorderFactory
                                .createLineBorder(Color.BLACK));
                        aclPanel.setBackground(Color.WHITE);
                        aclPanel.setLayout(new GridBagLayout());
                        int i = 0;
                        for (Map.Entry<String, String> entry : data.entrySet()) {
                            int rowPosACL = 2 * i + 1;
                            JLabel label = new JLabel(entry.getKey());
                            JTextField text = new JTextField(entry.getValue());
                            text.setEditable(false);
                            GridBagConstraints c1 = new GridBagConstraints();
                            c1.gridx = 1;
                            c1.gridy = rowPosACL;
                            c1.gridwidth = 1;
                            c1.gridheight = 1;
                            c1.weightx = 0;
                            c1.weighty = 0;
                            c1.anchor = GridBagConstraints.NORTHWEST;
                            c1.fill = GridBagConstraints.BOTH;
                            c1.insets = new Insets(5, 5, 5, 5);
                            c1.ipadx = 0;
                            c1.ipady = 0;
                            aclPanel.add(label, c1);
                            GridBagConstraints c2 = new GridBagConstraints();
                            c2.gridx = 3;
                            c2.gridy = rowPosACL;
                            c2.gridwidth = 1;
                            c2.gridheight = 1;
                            c2.weightx = 0;
                            c2.weighty = 0;
                            c2.anchor = GridBagConstraints.NORTHWEST;
                            c2.fill = GridBagConstraints.BOTH;
                            c2.insets = new Insets(5, 5, 5, 5);
                            c2.ipadx = 0;
                            c2.ipady = 0;
                            aclPanel.add(text, c2);
                            i++;
                        }
                        GridBagConstraints c = new GridBagConstraints();
                        c.gridx = 1;
                        c.gridy = rowPos;
                        c.gridwidth = 1;
                        c.gridheight = 1;
                        c.weightx = 1;
                        c.weighty = 1;
                        c.anchor = GridBagConstraints.NORTHWEST;
                        c.fill = GridBagConstraints.NONE;
                        c.insets = new Insets(5, 5, 5, 5);
                        c.ipadx = 0;
                        c.ipady = 0;
                        aclDataPanel.add(aclPanel, c);
                    }
                    NodeViewerACL.this.aclDataPanel.revalidate();
                    NodeViewerACL.this.aclDataPanel.repaint();
                }
            };
            worker.execute();
        }
    }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerACL.java,NodeViewerACL,doInBackground,"List<Map<String, String>> doInBackground()","[85, 90]","{'A593': [(85, 90)]}",{'A593': 1.0},A593,,"                @Override
                protected List<Map<String, String>> doInBackground()
                        throws Exception {
                    return NodeViewerACL.this.zooInspectorManager
                            .getACLs(NodeViewerACL.this.selectedNode);
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerACL.java,NodeViewerACL,done,void done(),"[92, 167]","{'A593': [(92, 167)]}",{'A593': 1.0},A593,,"                @Override
                protected void done() {
                    List<Map<String, String>> acls = null;
                    try {
                        acls = get();
                    } catch (InterruptedException e) {
                        acls = new ArrayList<Map<String, String>>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving ACL Information for node: ""
                                        + NodeViewerACL.this.selectedNode, e);
                    } catch (ExecutionException e) {
                        acls = new ArrayList<Map<String, String>>();
                        LoggerFactory.getLogger().error(
                                ""Error retrieving ACL Information for node: ""
                                        + NodeViewerACL.this.selectedNode, e);
                    }
                    aclDataPanel.setLayout(new GridBagLayout());
                    int j = 0;
                    for (Map<String, String> data : acls) {
                        int rowPos = 2 * j + 1;
                        JPanel aclPanel = new JPanel();
                        aclPanel.setBorder(BorderFactory
                                .createLineBorder(Color.BLACK));
                        aclPanel.setBackground(Color.WHITE);
                        aclPanel.setLayout(new GridBagLayout());
                        int i = 0;
                        for (Map.Entry<String, String> entry : data.entrySet()) {
                            int rowPosACL = 2 * i + 1;
                            JLabel label = new JLabel(entry.getKey());
                            JTextField text = new JTextField(entry.getValue());
                            text.setEditable(false);
                            GridBagConstraints c1 = new GridBagConstraints();
                            c1.gridx = 1;
                            c1.gridy = rowPosACL;
                            c1.gridwidth = 1;
                            c1.gridheight = 1;
                            c1.weightx = 0;
                            c1.weighty = 0;
                            c1.anchor = GridBagConstraints.NORTHWEST;
                            c1.fill = GridBagConstraints.BOTH;
                            c1.insets = new Insets(5, 5, 5, 5);
                            c1.ipadx = 0;
                            c1.ipady = 0;
                            aclPanel.add(label, c1);
                            GridBagConstraints c2 = new GridBagConstraints();
                            c2.gridx = 3;
                            c2.gridy = rowPosACL;
                            c2.gridwidth = 1;
                            c2.gridheight = 1;
                            c2.weightx = 0;
                            c2.weighty = 0;
                            c2.anchor = GridBagConstraints.NORTHWEST;
                            c2.fill = GridBagConstraints.BOTH;
                            c2.insets = new Insets(5, 5, 5, 5);
                            c2.ipadx = 0;
                            c2.ipady = 0;
                            aclPanel.add(text, c2);
                            i++;
                        }
                        GridBagConstraints c = new GridBagConstraints();
                        c.gridx = 1;
                        c.gridy = rowPos;
                        c.gridwidth = 1;
                        c.gridheight = 1;
                        c.weightx = 1;
                        c.weighty = 1;
                        c.anchor = GridBagConstraints.NORTHWEST;
                        c.fill = GridBagConstraints.NONE;
                        c.insets = new Insets(5, 5, 5, 5);
                        c.ipadx = 0;
                        c.ipady = 0;
                        aclDataPanel.add(aclPanel, c);
                    }
                    NodeViewerACL.this.aclDataPanel.revalidate();
                    NodeViewerACL.this.aclDataPanel.repaint();
                }
"
org.apache.zookeeper.inspector.gui.nodeviewer,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/nodeviewer/NodeViewerACL.java,NodeViewerACL,setZooInspectorManager,void setZooInspectorManager(ZooInspectorNodeManager),"[181, 185]","{'A593': [(181, 185)]}",{'A593': 1.0},A593,,"    @Override
    public void setZooInspectorManager(
            ZooInspectorNodeManager zooInspectorManager) {
        this.zooInspectorManager = zooInspectorManager;
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersPanel.java,ZooInspectorNodeViewersPanel,setNodeViewers,void setNodeViewers(List<ZooInspectorNodeViewer>),"[68, 80]","{'A593': [(68, 68), (71, 72), (74, 80)], 'A606': [(69, 70), (73, 73)]}","{'A593': 0.7692307692307693, 'A606': 0.23076923076923078}",A593,,"    public void setNodeViewers(List<ZooInspectorNodeViewer> nodeViewers) {
        this.nodeViewers.clear();
        this.nodeViewers.addAll(nodeViewers);
        needsReload.clear();
        tabbedPane.removeAll();
        for (ZooInspectorNodeViewer nodeViewer : nodeViewers) {
            nodeViewer.setZooInspectorManager(zooInspectorManager);
            needsReload.add(true);
            tabbedPane.add(nodeViewer.getTitle(), nodeViewer);
        }
        this.revalidate();
        this.repaint();
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersPanel.java,ZooInspectorNodeViewersPanel,reloadSelectedViewer,void reloadSelectedViewer(),"[82, 89]","{'A593': [(82, 84), (86, 89)], 'A606': [(85, 85)]}","{'A593': 0.875, 'A606': 0.125}",A593,,"    private void reloadSelectedViewer() {
        int index = this.tabbedPane.getSelectedIndex();
        if (index != -1 && this.needsReload.get(index)) {
            ZooInspectorNodeViewer viewer = this.nodeViewers.get(index);
            viewer.nodeSelectionChanged(selectedNodes);
            this.needsReload.set(index, false);
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersPanel.java,ZooInspectorNodeViewersPanel,nodePathSelected,void nodePathSelected(String),"[94, 102]","{'A593': [(96, 96), (98, 102)], 'A606': [(94, 95), (97, 97)]}","{'A593': 0.6666666666666666, 'A606': 0.3333333333333333}",A593,,"    @Override
    public void nodePathSelected(String nodePath) {
        selectedNodes.clear();
        selectedNodes.add(nodePath);
        for (int i = 0; i < needsReload.size(); i++) {
            this.needsReload.set(i, true);
        }
        reloadSelectedViewer();
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersPanel.java,ZooInspectorNodeViewersPanel,stateChanged,void stateChanged(ChangeEvent),"[111, 113]","{'A593': [(111, 113)]}",{'A593': 1.0},A593,,"    public void stateChanged(ChangeEvent e) {
        reloadSelectedViewer();
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/Toolbar.java,Toolbar,addActionListener,"void addActionListener(Button,ActionListener)","[43, 45]","{'A591': [(43, 45)]}",{'A591': 1.0},A591,,"    public void addActionListener(Button button, ActionListener actionListener) {
        buttons.get(button).addActionListener(actionListener);
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/Toolbar.java,Toolbar,getJToolBar,JToolBar getJToolBar(),"[47, 49]","{'A591': [(47, 49)]}",{'A591': 1.0},A591,,"    public JToolBar getJToolBar() {
        return toolbar;
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/Toolbar.java,Toolbar,toggleButtons,void toggleButtons(boolean),"[51, 55]","{'A591': [(51, 55)]}",{'A591': 1.0},A591,,"    public void toggleButtons(boolean connected) {
        for(Button button : buttonsToToggle) {
            buttons.get(button).setEnabled(connected != button.enabled);
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/Toolbar.java,Toolbar,init,void init(),"[57, 64]","{'A591': [(57, 64)]}",{'A591': 1.0},A591,,"    private void init() {
        toolbar.setFloatable(false);
        for(Button button : Button.values()) {
            JButton jbutton = button.createJButton(iconResource);
            buttons.put(button, jbutton);
            toolbar.add(jbutton);
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/Toolbar.java,Toolbar.Button,createJButton,JButton createJButton(IconResource),"[85, 90]","{'A591': [(85, 90)]}",{'A591': 1.0},A591,,"        public JButton createJButton(IconResource iconResource) {
            JButton jbutton = new JButton(iconResource.get(icon, toolTip));
            jbutton.setEnabled(enabled);
            jbutton.setToolTipText(toolTip);
            return jbutton;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,getListCellRendererComponent,"Component getListCellRendererComponent(JList,Object,int,boolean,boolean)","[107, 116]","{'A593': [(107, 116)]}",{'A593': 1.0},A593,,"            @Override
            public Component getListCellRendererComponent(JList list,
                    Object value, int index, boolean isSelected,
                    boolean cellHasFocus) {
                ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) value;
                JLabel label = (JLabel) super.getListCellRendererComponent(
                        list, value, index, isSelected, cellHasFocus);
                label.setText(viewer.getTitle());
                return label;
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,canImport,boolean canImport(TransferHandler.TransferSupport),"[125, 139]","{'A593': [(125, 139)]}",{'A593': 1.0},A593,,"            @Override
            public boolean canImport(TransferHandler.TransferSupport info) {
                // we only import NodeViewers
                if (!info
                        .isDataFlavorSupported(ZooInspectorNodeViewer.nodeViewerDataFlavor)) {
                    return false;
                }

                JList.DropLocation dl = (JList.DropLocation) info
                        .getDropLocation();
                if (dl.getIndex() == -1) {
                    return false;
                }
                return true;
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,importData,boolean importData(TransferHandler.TransferSupport),"[141, 176]","{'A593': [(141, 176)]}",{'A593': 1.0},A593,,"            @Override
            public boolean importData(TransferHandler.TransferSupport info) {
                JList.DropLocation dl = (JList.DropLocation) info
                        .getDropLocation();
                DefaultListModel listModel = (DefaultListModel) viewersList
                        .getModel();
                int index = dl.getIndex();
                boolean insert = dl.isInsert();
                // Get the string that is being dropped.
                Transferable t = info.getTransferable();
                String data;
                try {
                    data = (String) t
                            .getTransferData(ZooInspectorNodeViewer.nodeViewerDataFlavor);
                } catch (Exception e) {
                    return false;
                }
                try {
                    ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) Class
                            .forName(data).newInstance();
                    if (listModel.contains(viewer)) {
                        listModel.removeElement(viewer);
                    }
                    if (insert) {
                        listModel.add(index, viewer);
                    } else {
                        listModel.set(index, viewer);
                    }
                    return true;
                } catch (Exception e) {
                    LoggerFactory.getLogger().error(
                            ""Error instantiating class: "" + data, e);
                    return false;
                }

            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,getSourceActions,int getSourceActions(JComponent),"[178, 181]","{'A593': [(178, 181)]}",{'A593': 1.0},A593,,"            @Override
            public int getSourceActions(JComponent c) {
                return MOVE;
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,createTransferable,Transferable createTransferable(JComponent),"[183, 189]","{'A593': [(183, 189)]}",{'A593': 1.0},A593,,"            @Override
            protected Transferable createTransferable(JComponent c) {
                JList list = (JList) c;
                ZooInspectorNodeViewer value = (ZooInspectorNodeViewer) list
                        .getSelectedValue();
                return value;
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[279, 290]","{'A593': [(279, 290)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                DefaultListModel listModel = (DefaultListModel) viewersList
                        .getModel();
                ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) viewersList
                        .getSelectedValue();
                int index = viewersList.getSelectedIndex();
                if (listModel.contains(viewer)) {
                    listModel.removeElementAt(index);
                    listModel.insertElementAt(viewer, index - 1);
                    viewersList.setSelectedValue(viewer, true);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[294, 305]","{'A593': [(294, 305)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                DefaultListModel listModel = (DefaultListModel) viewersList
                        .getModel();
                ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) viewersList
                        .getSelectedValue();
                int index = viewersList.getSelectedIndex();
                if (listModel.contains(viewer)) {
                    listModel.removeElementAt(index);
                    listModel.insertElementAt(viewer, index + 1);
                    viewersList.setSelectedValue(viewer, true);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[309, 321]","{'A593': [(309, 321)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                DefaultListModel listModel = (DefaultListModel) viewersList
                        .getModel();
                ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) viewersList
                        .getSelectedValue();
                int index = viewersList.getSelectedIndex();
                if (listModel.contains(viewer)) {
                    listModel.removeElement(viewer);
                    viewersList
                            .setSelectedIndex(index == listModel.size() ? index - 1
                                    : index);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[325, 362]","{'A593': [(325, 362)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                String className = newViewerTextField.getText();
                if (className == null || className.length() == 0) {
                    JOptionPane
                            .showMessageDialog(
                                    ZooInspectorNodeViewersDialog.this,
                                    ""Please enter the full class name for a Node Viewer and click the add button"",
                                    ""Input Error"", JOptionPane.ERROR_MESSAGE);
                } else {
                    try {
                        DefaultListModel listModel = (DefaultListModel) viewersList
                                .getModel();
                        ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) Class
                                .forName(className).newInstance();
                        if (listModel.contains(viewer)) {
                            JOptionPane
                                    .showMessageDialog(
                                            ZooInspectorNodeViewersDialog.this,
                                            ""Node viewer already exists.  Each node viewer can only be added once."",
                                            ""Input Error"",
                                            JOptionPane.ERROR_MESSAGE);
                        } else {
                            listModel.addElement(viewer);
                        }
                    } catch (Exception ex) {
                        LoggerFactory
                                .getLogger()
                                .error(
                                        ""An error occurred while instaniating the node viewer. "",
                                        ex);
                        JOptionPane.showMessageDialog(
                                ZooInspectorNodeViewersDialog.this,
                                ""An error occurred while instaniating the node viewer: ""
                                        + ex.getMessage(), ""Error"",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[406, 448]","{'A593': [(406, 448)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                int result = fileChooser
                        .showSaveDialog(ZooInspectorNodeViewersDialog.this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File selectedFile = fileChooser.getSelectedFile();
                    int answer = JOptionPane.YES_OPTION;
                    if (selectedFile.exists()) {
                        answer = JOptionPane
                                .showConfirmDialog(
                                        ZooInspectorNodeViewersDialog.this,
                                        ""The specified file already exists.  do you want to overwrite it?"",
                                        ""Confirm Overwrite"",
                                        JOptionPane.YES_NO_OPTION,
                                        JOptionPane.WARNING_MESSAGE);
                    }
                    if (answer == JOptionPane.YES_OPTION) {
                        DefaultListModel listModel = (DefaultListModel) viewersList
                                .getModel();
                        List<String> nodeViewersClassNames = new ArrayList<String>();
                        Object[] modelContents = listModel.toArray();
                        for (Object o : modelContents) {
                            nodeViewersClassNames
                                    .add(((ZooInspectorNodeViewer) o)
                                            .getClass().getCanonicalName());
                        }
                        try {
                            manager.saveNodeViewersFile(selectedFile,
                                    nodeViewersClassNames);
                        } catch (IOException ex) {
                            LoggerFactory
                                    .getLogger()
                                    .error(
                                            ""Error saving node viewer configuration from file."",
                                            ex);
                            JOptionPane.showMessageDialog(
                                    ZooInspectorNodeViewersDialog.this,
                                    ""Error saving node viewer configuration from file: ""
                                            + ex.getMessage(), ""Error"",
                                    JOptionPane.ERROR_MESSAGE);
                        }
                    }
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[452, 487]","{'A593': [(452, 487)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                int result = fileChooser
                        .showOpenDialog(ZooInspectorNodeViewersDialog.this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    try {
                        List<String> nodeViewersClassNames = manager
                                .loadNodeViewersFile(fileChooser
                                        .getSelectedFile());
                        List<ZooInspectorNodeViewer> nodeViewers = new ArrayList<ZooInspectorNodeViewer>();
                        for (String nodeViewersClassName : nodeViewersClassNames) {
                            ZooInspectorNodeViewer viewer = (ZooInspectorNodeViewer) Class
                                    .forName(nodeViewersClassName)
                                    .newInstance();
                            nodeViewers.add(viewer);
                        }
                        DefaultListModel model = new DefaultListModel();
                        for (ZooInspectorNodeViewer viewer : nodeViewers) {
                            model.addElement(viewer);
                        }
                        viewersList.setModel(model);
                        panel.revalidate();
                        panel.repaint();
                    } catch (Exception ex) {
                        LoggerFactory
                                .getLogger()
                                .error(
                                        ""Error loading node viewer configuration from file."",
                                        ex);
                        JOptionPane.showMessageDialog(
                                ZooInspectorNodeViewersDialog.this,
                                ""Error loading node viewer configuration from file: ""
                                        + ex.getMessage(), ""Error"",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[491, 524]","{'A593': [(491, 524)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                int answer = JOptionPane
                        .showConfirmDialog(
                                ZooInspectorNodeViewersDialog.this,
                                ""Are you sure you want to save this configuration as the default?"",
                                ""Confirm Set Defaults"",
                                JOptionPane.YES_NO_OPTION,
                                JOptionPane.WARNING_MESSAGE);
                if (answer == JOptionPane.YES_OPTION) {
                    DefaultListModel listModel = (DefaultListModel) viewersList
                            .getModel();
                    List<String> nodeViewersClassNames = new ArrayList<String>();
                    Object[] modelContents = listModel.toArray();
                    for (Object o : modelContents) {
                        nodeViewersClassNames.add(((ZooInspectorNodeViewer) o)
                                .getClass().getCanonicalName());
                    }
                    try {
                        manager
                                .setDefaultNodeViewerConfiguration(nodeViewersClassNames);
                    } catch (IOException ex) {
                        LoggerFactory
                                .getLogger()
                                .error(
                                        ""Error setting default node viewer configuration."",
                                        ex);
                        JOptionPane.showMessageDialog(
                                ZooInspectorNodeViewersDialog.this,
                                ""Error setting default node viewer configuration: ""
                                        + ex.getMessage(), ""Error"",
                                JOptionPane.ERROR_MESSAGE);
                    }
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[531, 545]","{'A593': [(531, 545)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorNodeViewersDialog.this.dispose();
                DefaultListModel listModel = (DefaultListModel) viewersList
                        .getModel();
                newViewers.clear();
                Object[] modelContents = listModel.toArray();
                for (Object o : modelContents) {
                    newViewers.add((ZooInspectorNodeViewer) o);
                }
                currentViewers.clear();
                currentViewers.addAll(newViewers);
                for (NodeViewersChangeListener listener : listeners) {
                    listener.nodeViewersChanged(currentViewers);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,actionPerformed,void actionPerformed(ActionEvent),"[550, 552]","{'A593': [(550, 552)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorNodeViewersDialog.this.dispose();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog,valueChanged,void valueChanged(ListSelectionEvent),"[567, 590]","{'A593': [(567, 590)]}",{'A593': 1.0},A593,,"    public void valueChanged(ListSelectionEvent e) {
        JButton removeButton = buttons.get(Button.remove);
        JButton upButton = buttons.get(Button.up);
        JButton downButton = buttons.get(Button.down);
        int index = viewersList.getSelectedIndex();

        if (index == -1) {
            removeButton.setEnabled(false);
            upButton.setEnabled(false);
            downButton.setEnabled(false);
        } else {
            removeButton.setEnabled(true);
            if (index == 0) {
                upButton.setEnabled(false);
            } else {
                upButton.setEnabled(true);
            }
            if (index == ((DefaultListModel) viewersList.getModel()).getSize()) {
                downButton.setEnabled(false);
            } else {
                downButton.setEnabled(true);
            }
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorNodeViewersDialog.java,ZooInspectorNodeViewersDialog.Button,createJButton,JButton createJButton(IconResource),"[615, 628]","{'A593': [(615, 628)]}",{'A593': 1.0},A593,,"        public JButton createJButton(IconResource iconResource) {
            ImageIcon imageIcon = iconResource.get(icon, toolTip);
            JButton jbutton;

            if(imageIcon == null) {
                jbutton = new JButton(icon);
            } else {
                jbutton = new JButton(imageIcon);
            }

            jbutton.setEnabled(enabled);
            jbutton.setToolTipText(toolTip);
            return jbutton;
        }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorAboutDialog.java,ZooInspectorAboutDialog,actionPerformed,void actionPerformed(ActionEvent),"[71, 73]","{'A593': [(71, 73)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorAboutDialog.this.dispose();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java,ZooInspectorConnectionPropertiesDialog,actionPerformed,void actionPerformed(ActionEvent),"[162, 192]","{'A593': [(162, 192)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                int result = fileChooser
                        .showOpenDialog(ZooInspectorConnectionPropertiesDialog.this);
                if (result == JFileChooser.APPROVE_OPTION) {
                    File propsFilePath = fileChooser.getSelectedFile();
                    Properties props = new Properties();
                    try {
                        FileReader reader = new FileReader(propsFilePath);
                        try {
                            props.load(reader);
                            loadConnectionProps(props);
                        } finally {
                            reader.close();
                        }
                    } catch (IOException ex) {
                        LoggerFactory
                                .getLogger()
                                .error(
                                        ""An Error occurred loading connection properties from file"",
                                        ex);
                        JOptionPane
                                .showMessageDialog(
                                        ZooInspectorConnectionPropertiesDialog.this,
                                        ""An Error occurred loading connection properties from file"",
                                        ""Error"", JOptionPane.ERROR_MESSAGE);
                    }
                    options.revalidate();
                    options.repaint();
                }

            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java,ZooInspectorConnectionPropertiesDialog,actionPerformed,void actionPerformed(ActionEvent),"[210, 228]","{'A593': [(210, 228)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {

                Properties connectionProps = getConnectionProps();
                try {
                    zooInspectorPanel
                            .setdefaultConnectionProps(connectionProps);
                } catch (IOException ex) {
                    LoggerFactory
                            .getLogger()
                            .error(
                                    ""An Error occurred saving the default connection properties file"",
                                    ex);
                    JOptionPane
                            .showMessageDialog(
                                    ZooInspectorConnectionPropertiesDialog.this,
                                    ""An Error occurred saving the default connection properties file"",
                                    ""Error"", JOptionPane.ERROR_MESSAGE);
                }
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java,ZooInspectorConnectionPropertiesDialog,actionPerformed,void actionPerformed(ActionEvent),"[246, 250]","{'A593': [(246, 250)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorConnectionPropertiesDialog.this.dispose();
                Properties connectionProps = getConnectionProps();
                zooInspectorPanel.connect(connectionProps);
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java,ZooInspectorConnectionPropertiesDialog,actionPerformed,void actionPerformed(ActionEvent),"[268, 270]","{'A593': [(268, 270)]}",{'A593': 1.0},A593,,"            public void actionPerformed(ActionEvent e) {
                ZooInspectorConnectionPropertiesDialog.this.dispose();
            }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java,ZooInspectorConnectionPropertiesDialog,loadConnectionProps,void loadConnectionProps(Properties),"[290, 305]","{'A593': [(290, 305)]}",{'A593': 1.0},A593,,"    private void loadConnectionProps(Properties props) {
        if (props != null) {
            for (Object key : props.keySet()) {
                String propsKey = (String) key;
                if (components.containsKey(propsKey)) {
                    JComponent component = components.get(propsKey);
                    String value = props.getProperty(propsKey);
                    if (component instanceof JTextField) {
                        ((JTextField) component).setText(value);
                    } else if (component instanceof JComboBox) {
                        ((JComboBox) component).setSelectedItem(value);
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/ZooInspectorConnectionPropertiesDialog.java,ZooInspectorConnectionPropertiesDialog,getConnectionProps,Properties getConnectionProps(),"[307, 320]","{'A593': [(307, 320)]}",{'A593': 1.0},A593,,"    private Properties getConnectionProps() {
        Properties connectionProps = new Properties();
        for (Entry<String, JComponent> entry : components.entrySet()) {
            String value = null;
            JComponent component = entry.getValue();
            if (component instanceof JTextField) {
                value = ((JTextField) component).getText();
            } else if (component instanceof JComboBox) {
                value = ((JComboBox) component).getSelectedItem().toString();
            }
            connectionProps.put(entry.getKey(), value);
        }
        return connectionProps;
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/IconResource.java,IconResource,find,URL find(String),"[69, 79]","{'A591': [(69, 79)]}",{'A591': 1.0},A591,,"    public URL find(String name) {
        String iconPath = buildIconPath(name);
        URL iconUrl = findInPaths(iconPath);
        if(null != iconUrl) return iconUrl;

        iconUrl = getClass().getResource(iconPath);
        if(null != iconUrl) return iconUrl;

        if(!name.equals(FALLBACK_ICON)) return find(FALLBACK_ICON);
        return null;
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/IconResource.java,IconResource,get,"ImageIcon get(String,String)","[81, 90]","{'A591': [(81, 90)]}",{'A591': 1.0},A591,,"    public ImageIcon get(String name, String description) {
        URL iconUrl = find(name);
        if(null==iconUrl) {
            ImageIcon icon = new ImageIcon();
            icon.setDescription(description);
            return icon;
        } else {
            return new ImageIcon(iconUrl, description);
        }
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/IconResource.java,IconResource,findInPaths,URL findInPaths(String),"[92, 104]","{'A591': [(92, 104)]}",{'A591': 1.0},A591,,"    private URL findInPaths(String iconPath) {
        for(String dataDir : DEFAULT_XDG_DATA_DIRS) {
            File file = new File(dataDir + iconPath);
            if(file.exists()) {
                try {
                    return file.toURI().toURL();
                } catch (MalformedURLException e) {
                    LoggerFactory.getLogger().warn(e.toString());
                }
            }
        }
        return null;
    }
"
org.apache.zookeeper.inspector.gui,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/gui/IconResource.java,IconResource,buildIconPath,String buildIconPath(String),"[106, 108]","{'A591': [(106, 108)]}",{'A591': 1.0},A591,,"    private String buildIconPath(String name) {
        return ""/icons/"" + theme + ""/"" + size + ""/"" + name + "".png"";
    }
"
org.apache.zookeeper.inspector.encryption,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/encryption/BasicDataEncryptionManager.java,BasicDataEncryptionManager,decryptData,String decryptData(byte[]),"[32, 37]","{'A593': [(32, 32), (36, 37)], 'A608': [(33, 35)]}","{'A593': 0.5, 'A608': 0.5}",A593,,"    public String decryptData(byte[] encrypted) throws Exception {
        if(encrypted == null) {
            return """";
        }
        return new String(encrypted);
    }
"
org.apache.zookeeper.inspector.encryption,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-zooinspector/src/main/java/org/apache/zookeeper/inspector/encryption/BasicDataEncryptionManager.java,BasicDataEncryptionManager,encryptData,byte[] encryptData(String),"[46, 51]","{'A593': [(46, 51)]}",{'A593': 1.0},A593,,"    public byte[] encryptData(String data) throws Exception {
        if (data == null) {
            return new byte[0];
        }
        return data.getBytes();
    }
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/GraphData.java,GraphData,handleRequest,String handleRequest(JsonRequest),"[35, 68]","{'A591': [(35, 68)]}",{'A591': 1.0},A591,,"    String handleRequest(JsonRequest request) throws Exception {
	

	long starttime = 0;
	long endtime = 0;
	long period = 0;
	FilterOp fo = null;

	starttime = request.getNumber(""start"", 0);
	endtime = request.getNumber(""end"", 0);
	period = request.getNumber(""period"", 0);
	String filterstr = request.getString(""filter"", """");

	if (filterstr.length() > 0) {
	    fo = new FilterParser(filterstr).parse();
	}
	
	if (starttime == 0) { starttime = source.getStartTime(); }
	if (endtime == 0) { 
	    if (period > 0) {
		endtime = starttime + period;
	    } else {
		endtime = starttime + DEFAULT_PERIOD; 
	    }
	}

	if (LOG.isDebugEnabled()) {
	    LOG.debug(""handle(start= "" + starttime + "", end="" + endtime + "", period="" + period + "")"");
	}
	
	LogIterator iterator = (fo != null) ? 
	    source.iterator(starttime, endtime, fo) : source.iterator(starttime, endtime);
	return new JsonGenerator(iterator).toString();
    }
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/NumEvents.java,NumEvents,handleRequest,String handleRequest(JsonRequest),"[39, 77]","{'A591': [(39, 39), (63, 63), (69, 69), (74, 74), (77, 77)], 'A603': [(40, 62), (64, 68), (70, 73), (75, 76)]}","{'A591': 0.1282051282051282, 'A603': 0.8717948717948718}",A603,,"    String handleRequest(JsonRequest request) throws Exception {
		String output = """";

		long starttime = 0;
		long endtime = 0;
		long period = 0;

		starttime = request.getNumber(""start"", 0);
		endtime = request.getNumber(""end"", 0);
		period = request.getNumber(""period"", 0);

		if (starttime == 0) { starttime = source.getStartTime(); }
		if (endtime == 0) {
	 	   if (period > 0) {
				endtime = starttime + period;
	 	   }
	 	   else {
				endtime = source.getEndTime();
	 	   }
		}

		long size = 0;
		LogIterator iter = source.iterator(starttime, endtime);
		size = iter.size();

		ObjectMapper mapper = new ObjectMapper();
		JsonNode data = mapper.createObjectNode();
		((ObjectNode) data).put(""startTime"", starttime);
		((ObjectNode) data).put(""endTime"", endtime);
		((ObjectNode) data).put(""numEntries"",  iter.size());

		if (LOG.isDebugEnabled()) {
		    LOG.debug(""handle(start= "" + starttime + "", end="" + endtime + "", numEntries="" + size +"")"");
		}
		iter.close();

		String jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(data);
		return jsonString;
    }
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Throughput.java,Throughput,handleRequest,String handleRequest(JsonRequest),"[42, 75]","{'A591': [(42, 42), (75, 75)], 'A603': [(43, 74)]}","{'A591': 0.058823529411764705, 'A603': 0.9411764705882353}",A603,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/test/java/org/apache/zookeeper/graph/servlets/ThroughputTest.java,"    public String handleRequest(JsonRequest request) throws Exception {
		long startTime = 0;
		long endTime = 0;
		long period = 0;
		long scale = 0;

		startTime = request.getNumber(""start"", 0);
		endTime = request.getNumber(""end"", 0);
		period = request.getNumber(""period"", 0);


		if (startTime == 0) { startTime = source.getStartTime(); }
		if (endTime == 0) {
			if (period > 0) {
			endTime = startTime + period;
			} else {
			endTime = source.getEndTime();
			}
		}

		String scalestr = request.getString(""scale"", ""minutes"");
		if (scalestr.equals(""seconds"")) {
			scale = MS_PER_SEC;
		} else if (scalestr.equals(""hours"")) {
			scale = MS_PER_HOUR;
		} else {
			scale = MS_PER_MIN;
		}

		LogIterator iter = source.iterator(startTime, endTime);
		String jsonString = getJSON(iter, scale);
		iter.close();
		return jsonString;
	}
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Throughput.java,Throughput,getJSON,"String getJSON(LogIterator,long)","[77, 122]","{'A603': [(77, 122)]}",{'A603': 1.0},A603,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/test/java/org/apache/zookeeper/graph/servlets/ThroughputTest.java,"	protected String getJSON(final LogIterator iter, final long scale) throws IOException {
		long current = 0;
		long currentms = 0;
		Set<Long> zxids_ms = new HashSet<Long>();
		long zxidCount = 0;

		ObjectMapper mapper = new ObjectMapper();
		ArrayNode events = mapper.createArrayNode();

		while (iter.hasNext()) {
			LogEntry e = iter.next();
			if (e.getType() != LogEntry.Type.TXN) {
			continue;
			}

			TransactionEntry cxn = (TransactionEntry)e;

			long ms = cxn.getTimestamp();
			long inscale = ms/ scale;

			if (currentms != ms && currentms != 0) {
				zxidCount += zxids_ms.size();
				zxids_ms.clear();
			}

			if (inscale != current && current != 0) {
				JsonNode node = mapper.createObjectNode();
				((ObjectNode) node).put(""time"", current * scale);
				((ObjectNode) node).put(""count"", zxidCount);
				events.add(node);
				zxidCount = 0;
			}
			current = inscale;
			currentms = ms;

			zxids_ms.add(cxn.getZxid());
		}

		JsonNode node = mapper.createObjectNode();
		((ObjectNode) node).put(""time"", current * scale);
		((ObjectNode) node).put(""count"", zxidCount);
		events.add(node);

		String jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(events);
		return jsonString;
	}
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java,JsonServlet.JsonRequest,getNumber,"long getNumber(String,long)","[43, 55]","{'A591': [(48, 48)], 'A603': [(43, 47), (49, 55)]}","{'A591': 0.07692307692307693, 'A603': 0.9230769230769231}",A603,,"		public long getNumber(String name, long defaultnum) {
			String[] vals = (String[])map.get(name);
			if (vals == null || vals.length == 0) {
			return defaultnum;
			}

			try {
				return Long.valueOf(vals[0]);
			}
			catch (NumberFormatException e) {
				return defaultnum;
			}
		}
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java,JsonServlet.JsonRequest,getString,"String getString(String,String)","[57, 65]","{'A603': [(57, 65)]}",{'A603': 1.0},A603,,"		public String getString(String name, String defaultstr) {
			String[] vals = (String[])map.get(name);
			if (vals == null || vals.length == 0) {
			return defaultstr;
			}
			else {
				return vals[0];
			}
		}
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/JsonServlet.java,JsonServlet,doGet,"void doGet(HttpServletRequest,HttpServletResponse)","[68, 93]","{'A591': [(69, 71), (93, 93)], 'A603': [(68, 68), (72, 92)]}","{'A591': 0.15384615384615385, 'A603': 0.8461538461538461}",A603,,"    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        response.setContentType(""text/plain;charset=utf-8"");
        response.setStatus(HttpServletResponse.SC_OK);

		try {
			String req = request.getRequestURI().substring(request.getServletPath().length());

			response.getWriter().println(handleRequest(new JsonRequest(request)));
		}
		catch (Exception e) {
			ObjectMapper mapper = new ObjectMapper();
			JsonNode rootNode = mapper.createObjectNode();
			((ObjectNode) rootNode).put(""error"", e.toString());
			String jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(rootNode);

			response.getWriter().println(jsonString);
		}
		catch (java.lang.OutOfMemoryError oom) {
			ObjectMapper mapper = new ObjectMapper();
			JsonNode rootNode = mapper.createObjectNode();
			((ObjectNode) rootNode).put(""error"", ""Out of memory. Perhaps you've requested too many logs. Try narrowing you're filter criteria."");
			String jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(rootNode);

			response.getWriter().println(jsonString);
		}
    }
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java,Fs,handleRequest,String handleRequest(JsonRequest),"[35, 56]","{'A591': [(51, 51), (56, 56)], 'A603': [(35, 50), (52, 55)]}","{'A591': 0.09090909090909091, 'A603': 0.9090909090909091}",A603,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/test/java/org/apache/zookeeper/graph/servlets/FsTest.java,"    String handleRequest(JsonRequest request) throws Exception {
		File base = new File(request.getString(""path"", ""/""));
		if (!base.exists() || !base.isDirectory()) {
			throw new FileNotFoundException(""Couldn't find ["" + request + ""]"");
		}
		File[] files = base.listFiles();
		Arrays.sort(files, new Comparator<File>() {
			public int compare(File o1, File o2) {
				if (o1.isDirectory() != o2.isDirectory()) {
				if (o1.isDirectory()) {
					return -1;
				} else {
					return 1;
				}
				}
				return o1.getName().compareToIgnoreCase(o2.getName());
			}
			});

		String jsonString = generateJSON(files);
		return jsonString;
    }
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java,Fs,compare,"int compare(File,File)","[42, 51]","{'A591': [(51, 51)], 'A603': [(42, 50)]}","{'A591': 0.1, 'A603': 0.9}",A603,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/test/java/org/apache/zookeeper/graph/servlets/FsTest.java,"			public int compare(File o1, File o2) {
				if (o1.isDirectory() != o2.isDirectory()) {
				if (o1.isDirectory()) {
					return -1;
				} else {
					return 1;
				}
				}
				return o1.getName().compareToIgnoreCase(o2.getName());
			}
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/Fs.java,Fs,generateJSON,String generateJSON(File[]),"[58, 72]","{'A603': [(58, 72)]}",{'A603': 1.0},A603,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/test/java/org/apache/zookeeper/graph/servlets/FsTest.java,"    protected static String generateJSON(File[] files) throws IOException {
		ObjectMapper mapper = new ObjectMapper();
		ArrayNode fileList = mapper.createArrayNode();

		for (File f : files) {
			JsonNode node = mapper.createObjectNode().objectNode();
			((ObjectNode) node).put(""file"", f.getName());
			((ObjectNode) node).put(""type"", f.isDirectory() ? ""D"" : ""F"");
			((ObjectNode) node).put(""path"", f.getCanonicalPath());
			fileList.add(node);
		}

		String jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(fileList);
		return jsonString;
	}
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/FileLoader.java,FileLoader,handleRequest,String handleRequest(JsonRequest),"[35, 49]","{'A591': [(49, 49)], 'A603': [(35, 48)]}","{'A591': 0.06666666666666667, 'A603': 0.9333333333333333}",A603,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/test/java/org/apache/zookeeper/graph/servlets/FileLoaderTest.java,"    String handleRequest(JsonRequest request) throws Exception {
		String file = request.getString(""path"", ""/"");
		ObjectMapper mapper = new ObjectMapper();
		JsonNode rootNode = mapper.createObjectNode();
		try {
	    	this.source.addSource(file);
			((ObjectNode) rootNode).put(""status"", ""OK"");
		}
		catch (Exception e) {
			((ObjectNode) rootNode).put(""status"", ""ERR"");
			((ObjectNode) rootNode).put(""error"", e.toString());
		}
		String jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(rootNode);
		return jsonString;
    }
"
org.apache.zookeeper.graph.servlets,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/servlets/StaticContent.java,StaticContent,doGet,"void doGet(HttpServletRequest,HttpServletResponse)","[32, 51]","{'A591': [(32, 41), (44, 44), (48, 51)], 'A597': [(42, 43), (45, 47)]}","{'A591': 0.75, 'A597': 0.25}",A591,,"    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException
    {
	String path = request.getRequestURI().substring(request.getServletPath().length());

	InputStream resource = ClassLoader.getSystemResourceAsStream(""org/apache/zookeeper/graph/resources"" + path);	  
	if (resource == null) {
	    response.getWriter().println(path + "" not found!"");
	    response.setStatus(HttpServletResponse.SC_NOT_FOUND);
	    return;
	}
	try {
	  while (resource.available() > 0) {
	    response.getWriter().write(resource.read());
	  }
	} finally {
	  resource.close();
	}
	//        response.setContentType(""text/plain;charset=utf-8"");
        response.setStatus(HttpServletResponse.SC_OK);
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/AndOp.java,AndOp,matches,boolean matches(LogEntry),"[25, 32]","{'A591': [(25, 32)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {
	for (FilterOp f : subOps) {
	    if (!f.matches(entry)) {
		return false;
	    }
	}
	return true;
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/GreaterThanOp.java,GreaterThanOp,matches,boolean matches(LogEntry),"[25, 68]","{'A591': [(25, 68)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {
	Arg first = args.get(0);
	
	if (first != null) {
	    FilterOp.ArgType type = first.getType();
	    if (type == FilterOp.ArgType.SYMBOL) {
		String key = (String)first.getValue();
		Object v = entry.getAttribute(key);
		if (v instanceof String) {
		    type = FilterOp.ArgType.STRING;
		} else if (v instanceof Double || v instanceof Long || v instanceof Integer || v instanceof Short) {
		    type = FilterOp.ArgType.NUMBER;
		} else {
		    throw new FilterException(""LessThanOp: Invalid argument, first argument resolves to neither a String nor a Number"");
		}
	    }
	    
	    Object last = null;
	    for (Arg a : args) {
		Object v = a.getValue();
		if (a.getType() == FilterOp.ArgType.SYMBOL) {
		    String key = (String)a.getValue();
		    v = entry.getAttribute(key);
		}

		if (last != null) {
		    if (type == FilterOp.ArgType.STRING) {
			if (((String)last).compareTo((String)v) <= 0) {
			    return false;
			}
		    } else if (type == FilterOp.ArgType.NUMBER) {
			//			System.out.println(""last["" + ((Number)last).longValue() + ""] v[""+ ((Number)v).longValue() + ""]"");
			if (((Number)last).longValue() <= ((Number)v).longValue()) {
			    return false;
			}
		    }
		}
		last = v;
	    }
	    return true;
	} else { 
	    return true; 
	}
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/NotOp.java,NotOp,matches,boolean matches(LogEntry),"[25, 30]","{'A591': [(25, 30)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {
	if (subOps.size() != 1) {
	    throw new FilterException(""Not operation can only take one argument"");
	}
	return !subOps.get(0).matches(entry);
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/LessThanOp.java,LessThanOp,matches,boolean matches(LogEntry),"[25, 67]","{'A591': [(25, 67)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {
	Arg first = args.get(0);
	
	if (first != null) {
	    FilterOp.ArgType type = first.getType();
	    if (type == FilterOp.ArgType.SYMBOL) {
		String key = (String)first.getValue();
		Object v = entry.getAttribute(key);
		if (v instanceof String) {
		    type = FilterOp.ArgType.STRING;
		} else if (v instanceof Double || v instanceof Long || v instanceof Integer || v instanceof Short) {
		    type = FilterOp.ArgType.NUMBER;
		} else {
		    throw new FilterException(""LessThanOp: Invalid argument, first argument resolves to neither a String nor a Number"");
		}
	    }
	    
	    Object last = null;
	    for (Arg a : args) {
		Object v = a.getValue();
		if (a.getType() == FilterOp.ArgType.SYMBOL) {
		    String key = (String)a.getValue();
		    v = entry.getAttribute(key);
		}

		if (last != null) {
		    if (type == FilterOp.ArgType.STRING) {
			if (((String)last).compareTo((String)v) >= 0) {
			    return false;
			}
		    } else if (type == FilterOp.ArgType.NUMBER) {
			if (((Number)last).doubleValue() >= ((Number)v).doubleValue()) {
			    return false;
			}
		    }
		}
		last = v;
	    }
	    return true;
	} else { 
	    return true; 
	}
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/XorOp.java,XorOp,matches,boolean matches(LogEntry),"[25, 39]","{'A591': [(25, 39)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {
	int count = 0;
	for (FilterOp f : subOps) {
	    if (f.matches(entry)) {
		count++;
		if (count > 1) {
		    return false;
		}
	    }
	}
	if (count == 1) {
	    return true;
	}
	return false;
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/Arg.java,Arg,getType,ArgType getType(),"[30, 30]","{'A591': [(30, 30)]}",{'A591': 1.0},A591,,"    public ArgType getType() { return type; }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/Arg.java,Arg,getValue,T getValue(),"[31, 31]","{'A591': [(31, 31)]}",{'A591': 1.0},A591,,"    public T getValue() { return value; }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/Arg.java,Arg,toString,String toString(),"[33, 35]","{'A591': [(33, 35)]}",{'A591': 1.0},A591,,"    public String toString() {
	return ""["" + type + "":"" + value + ""]"";
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/EqualsOp.java,EqualsOp,matches,boolean matches(LogEntry),"[25, 43]","{'A591': [(25, 43)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {

	Object last = null;
	for (Arg a : args) {
	    Object v = a.getValue();
	    if (a.getType() == FilterOp.ArgType.SYMBOL) {
		String key = (String)a.getValue();
		v = entry.getAttribute(key);
	    }

	    if (last != null
		&& !last.equals(v)) {
		return false;
	    }
	    last = v;
	}

	return true;
    }
"
org.apache.zookeeper.graph.filterops,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/filterops/OrOp.java,OrOp,matches,boolean matches(LogEntry),"[25, 32]","{'A591': [(25, 32)]}",{'A591': 1.0},A591,,"    public boolean matches(LogEntry entry) throws FilterException {
	for (FilterOp f : subOps) {
	    if (f.matches(entry)) {
		return true;
	    }
	}
	return false;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterParser.java,FilterParser,readUntilSpace,String readUntilSpace(),"[34, 48]","{'A591': [(34, 48)]}",{'A591': 1.0},A591,,"    private String readUntilSpace() throws IOException {
	StringBuffer buffer = new StringBuffer();

	int c = reader.read();
	while (!Character.isWhitespace(c) && c != ')' && c != '(') {
	    buffer.append((char)c);
	    c = reader.read();
	    if (c == -1) {
		break;
	    }
	}	
	reader.unread(c);

	return buffer.toString().trim();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterParser.java,FilterParser,readStringArg,StringArg readStringArg(),"[50, 71]","{'A591': [(50, 71)]}",{'A591': 1.0},A591,,"    private StringArg readStringArg() throws IOException, FilterException {
	int c = reader.read();
	int last = 0;
	if (c != '""') {
	    throw new FilterException(""Check the parser, trying to read a string that doesn't begin with quotes"");
	}
	StringBuffer buffer = new StringBuffer();
	while (reader.ready()) {
	    last = c;
	    c = reader.read();
	    if (c == -1) {
		break;
	    }
	    
	    if (c == '""' && last != '\\') {
		return new StringArg(buffer.toString());
	    } else {
		buffer.append((char)c);
	    }
	}
	throw new FilterException(""Unterminated string"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterParser.java,FilterParser,readNumberArg,NumberArg readNumberArg(),"[73, 85]","{'A591': [(73, 85)]}",{'A591': 1.0},A591,,"    private NumberArg readNumberArg() throws IOException, FilterException {
	String strval = readUntilSpace();
	
	try {
	    if (strval.startsWith(""0x"")) {
		return new NumberArg(Long.valueOf(strval.substring(2), 16));
	    } else {
		return new NumberArg(Long.valueOf(strval));
	    }
	} catch (NumberFormatException e) {
	    throw new FilterException(""Not a number ["" + strval + ""]\n"" + e);
	}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterParser.java,FilterParser,readSymbolArg,SymbolArg readSymbolArg(),"[87, 89]","{'A591': [(87, 89)]}",{'A591': 1.0},A591,,"    private SymbolArg readSymbolArg() throws IOException, FilterException {
	return new SymbolArg(readUntilSpace());
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterParser.java,FilterParser,parse,FilterOp parse(),"[91, 122]","{'A591': [(91, 122)]}",{'A591': 1.0},A591,,"    public FilterOp parse() throws IOException, FilterException {
	int c = reader.read();
	if (c != '(') {
	    throw new FilterException(""Invalid format"");
	}

	String opstr = readUntilSpace();
	FilterOp op = FilterOp.newOp(opstr);

	while (reader.ready()) {
	    c = reader.read();
	    if (c == -1) {
		break;
	    }
	    if (c == '(') {
		reader.unread(c);
		op.addSubOp(parse());
	    } else if (c == ')') {
		return op;
	    } else if (c == '""') {
		reader.unread(c);
		op.addArg(readStringArg());
	    } else if (Character.isDigit(c) || c == '-' || c == '+') {
		reader.unread(c);
		op.addArg(readNumberArg());
	    } else if (Character.isJavaIdentifierStart(c)) {
		reader.unread(c);
		op.addArg(readSymbolArg());
	    }
	}
	throw new FilterException(""Incomplete filter"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterParser.java,FilterParser,main,void main(String[]),"[124, 130]","{'A591': [(124, 130)]}",{'A591': 1.0},A591,,"    public static void main(String[] args) throws IOException, FilterException {
	if (args.length == 1) {
	    System.out.println(new FilterParser(args[0]).parse());
	} else {
	    System.out.println(new FilterParser(""(or (and (= session foobar) (= session barfoo)) (= session sdfs))"").parse());
	}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,overlapsRange,"boolean overlapsRange(long,long)","[70, 72]","{'A591': [(70, 72)]}",{'A591': 1.0},A591,,"    public boolean overlapsRange(long starttime, long endtime) {
	return (starttime <= this.endtime && endtime >= this.starttime);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,size,long size(),"[74, 74]","{'A591': [(74, 74)]}",{'A591': 1.0},A591,,"    public long size() { return size; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,getStartTime,long getStartTime(),"[75, 75]","{'A591': [(75, 75)]}",{'A591': 1.0},A591,,"    public long getStartTime() { return starttime; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,getEndTime,long getEndTime(),"[76, 76]","{'A591': [(76, 76)]}",{'A591': 1.0},A591,,"    public long getEndTime() { return endtime; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,getSkipList,LogSkipList getSkipList(),"[77, 77]","{'A591': [(77, 77)]}",{'A591': 1.0},A591,,"    public LogSkipList getSkipList() { return skiplist; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,isTransactionFile,boolean isTransactionFile(String),"[79, 87]","{'A591': [(79, 87)]}",{'A591': 1.0},A591,,"    public static boolean isTransactionFile(String file) throws IOException {
        RandomAccessFileReader reader = new RandomAccessFileReader(new File(file));
        BinaryInputArchive logStream = new BinaryInputArchive(reader);
        FileHeader fhdr = new FileHeader();
        fhdr.deserialize(logStream, ""fileheader"");
	reader.close();

        return fhdr.getMagic() == FileTxnLog.TXNLOG_MAGIC;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource.TxnLogSourceIterator,size,long size(),"[138, 160]","{'A591': [(138, 160)]}",{'A591': 1.0},A591,,"	public long size() throws IOException {
	    if (this.endtime >= src.getEndTime()) {
		return src.size() - skippedAtStart;
	    }
	    
	    long pos = reader.getPosition();
	    LogEntry e;

	    LogSkipList.Mark lastseg = src.getSkipList().findMarkBefore(this.endtime);
	    reader.seek(lastseg.getBytes());
	    // number of entries skipped to get to the end of the iterator, less the number skipped to get to the start
	    long count = lastseg.getEntriesSkipped() - skippedAtStart; 

	    while ((e = readNextEntry()) != null) {
		if (e.getTimestamp() > this.endtime) {
		    break;
		}
		count++;
	    }
	    reader.seek(pos);;

	    return count;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource.TxnLogSourceIterator,readNextEntry,LogEntry readNextEntry(),"[162, 239]","{'A591': [(162, 183), (188, 239)], 'A612': [(184, 187)]}","{'A591': 0.9487179487179487, 'A612': 0.05128205128205128}",A591,,"	private LogEntry readNextEntry() {
	    LogEntry e = null;
	    try {
		long crcValue;
		byte[] bytes;
		try {
		    crcValue = logStream.readLong(""crcvalue"");
		    
		    bytes = logStream.readBuffer(""txnEntry"");
		} catch (EOFException ex) {
		    return null;
		}
		
		if (bytes.length == 0) {
		    return null;
		}
		Checksum crc = new Adler32();
		crc.update(bytes, 0, bytes.length);
		if (crcValue != crc.getValue()) {
		    throw new IOException(""CRC doesn't match "" + crcValue +
					  "" vs "" + crc.getValue());
		}
    
		TxnLogEntry logEntry = SerializeUtils.deserializeTxn(bytes);
		TxnHeader hdr = logEntry.getHeader();
		Record r = logEntry.getTxn();

		switch (hdr.getType()) {
		case OpCode.createSession: {
		    e = new TransactionEntry(hdr.getTime(), hdr.getClientId(), hdr.getCxid(), hdr.getZxid(), ""createSession"");
		}
		    break;
		case OpCode.closeSession: {
		    e = new TransactionEntry(hdr.getTime(), hdr.getClientId(), hdr.getCxid(), hdr.getZxid(), ""closeSession"");
		}
		    break;
		case OpCode.create:
		    if (r != null) {
			CreateTxn create = (CreateTxn)r;
			String path = create.getPath();
			e = new TransactionEntry(hdr.getTime(), hdr.getClientId(), hdr.getCxid(), hdr.getZxid(), ""create"", path);
		    }
		    break;
		case OpCode.setData:
		    if (r != null) {
			SetDataTxn set = (SetDataTxn)r;
			String path = set.getPath();
			e = new TransactionEntry(hdr.getTime(), hdr.getClientId(), hdr.getCxid(), hdr.getZxid(), ""setData"", path);
		    }
		    break;
		case OpCode.setACL:
		    if (r != null) {
			SetACLTxn setacl = (SetACLTxn)r;
			String path = setacl.getPath();
		    e = new TransactionEntry(hdr.getTime(), hdr.getClientId(), hdr.getCxid(), hdr.getZxid(), ""setACL"", path);
		    }
		    break;
		case OpCode.error:
		    if (r != null)  {
			ErrorTxn error = (ErrorTxn)r;
			
			e = new TransactionEntry(hdr.getTime(), hdr.getClientId(), hdr.getCxid(), hdr.getZxid(), ""error"", ""Error: "" + error.getErr());
		    }
		    break;
		default:
		    LOG.info(""Unknown op: "" + hdr.getType());
		    break;
		}
		
		if (logStream.readByte(""EOR"") != 'B') {
		    throw new EOFException(""Last transaction was partial."");
		}
	    } catch (Exception ex) {
		LOG.error(""Error reading transaction from ("" + src.file + "") :"" + e);
		return null;
	    }
	    return e;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource.TxnLogSourceIterator,hasNext,boolean hasNext(),"[241, 243]","{'A591': [(241, 243)]}",{'A591': 1.0},A591,,"	public boolean hasNext() {
	    return next != null;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource.TxnLogSourceIterator,next,LogEntry next(),"[245, 264]","{'A591': [(245, 264)]}",{'A591': 1.0},A591,,"	public LogEntry next() throws NoSuchElementException {
	    LogEntry ret = next;
	    LogEntry e = readNextEntry();

	    if (filter != null) {
		try {
		    while (e != null && !filter.matches(e)) {
			e = readNextEntry();
		    }
		} catch (FilterException fe) {
		    throw new NoSuchElementException(fe.toString());
		}
	    }
	    if (e != null && e.getTimestamp() < endtime) {
		next = e;
	    } else {
		next = null;
	    }
	    return ret;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource.TxnLogSourceIterator,remove,void remove(),"[266, 268]","{'A591': [(266, 268)]}",{'A591': 1.0},A591,,"	public void remove() throws UnsupportedOperationException {
	    throw new UnsupportedOperationException(""remove not supported for Txn logs"");
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource.TxnLogSourceIterator,close,void close(),"[270, 272]","{'A591': [(270, 272)]}",{'A591': 1.0},A591,,"	public void close() throws IOException {
	    reader.close();
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,iterator,"LogIterator iterator(long,long)","[275, 282]","{'A591': [(275, 282)]}",{'A591': 1.0},A591,,"    public LogIterator iterator(long starttime, long endtime) throws IllegalArgumentException {
	try {
	    return iterator(starttime, endtime, null);
	} catch (FilterException fe) {
	    assert(false); // should never ever happen
	    return null;
	}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,iterator,"LogIterator iterator(long,long,FilterOp)","[284, 291]","{'A591': [(284, 291)]}",{'A591': 1.0},A591,,"    public LogIterator iterator(long starttime, long endtime, FilterOp filter) throws IllegalArgumentException, FilterException {
	// sanitise start and end times
	if (endtime < starttime) {
	    throw new IllegalArgumentException(""End time ("" +  endtime + "") must be greater or equal to starttime ("" + starttime + "")"");
	}

	return new TxnLogSourceIterator(this, starttime, endtime, filter);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,iterator,LogIterator iterator(),"[293, 295]","{'A591': [(293, 295)]}",{'A591': 1.0},A591,,"    public LogIterator iterator() throws IllegalArgumentException {
	return iterator(starttime, endtime+1);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,toString,String toString(),"[355, 357]","{'A591': [(355, 357)]}",{'A591': 1.0},A591,,"    public String toString() {
	return ""TxnLogSource(file="" + file + "", size="" + size + "", start="" + starttime + "", end="" + endtime +"")"";
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TxnLogSource.java,TxnLogSource,main,void main(String[]),"[359, 379]","{'A591': [(359, 379)]}",{'A591': 1.0},A591,,"    public static void main(String[] args) throws IOException, FilterException {
	TxnLogSource s = new TxnLogSource(args[0]);
	System.out.println(s);

	LogIterator iter;

	if (args.length == 3) {
	    long starttime = Long.valueOf(args[1]);
	    long endtime = Long.valueOf(args[2]);
	    FilterOp fo = new FilterParser(""(or (and (> zxid 0x2f0bd6f5e0) (< zxid 0x2f0bd6f5e9)) (= operation \""error\""))"").parse();
	    System.out.println(""fo: "" + fo);
	    iter = s.iterator(starttime, endtime, fo);
	} else {
	    iter = s.iterator();
	}
	System.out.println(iter);
	while (iter.hasNext()) {
	    	    System.out.println(iter.next());
	}
	iter.close();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogServer.java,LogServer,main,void main(String[]),"[50, 65]","{'A591': [(50, 65)]}",{'A591': 1.0},A591,,"    public static void main(String[] args) {  
	try {  
	    MergedLogSource src = new MergedLogSource(args);
	    System.out.println(src);

	    Server server = new Server(8182);
	    server.setHandler(new LogServer(src));
	    
	    server.start();
	    server.join();

	} catch (Exception e) {  
	    // Something is wrong.  
	    e.printStackTrace();  
	}  
    } 
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,overlapsRange,"boolean overlapsRange(long,long)","[34, 36]","{'A591': [(34, 36)]}",{'A591': 1.0},A591,,"    public boolean overlapsRange(long starttime, long endtime) {
	return (starttime <= this.endtime && endtime >= this.starttime);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,size,long size(),"[38, 38]","{'A591': [(38, 38)]}",{'A591': 1.0},A591,,"    public long size() { return size; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,getStartTime,long getStartTime(),"[39, 39]","{'A591': [(39, 39)]}",{'A591': 1.0},A591,,"    public long getStartTime() { return starttime; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,getEndTime,long getEndTime(),"[40, 40]","{'A591': [(40, 40)]}",{'A591': 1.0},A591,,"    public long getEndTime() { return endtime; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource.MergedLogSourceIterator,size,long size(),"[73, 79]","{'A603': [(73, 79)]}",{'A603': 1.0},A603,,"		public long size() throws IOException {
			long size = 0;
			for (LogIterator i : sources) {
			size += i.size();
			}
			return size;
		}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource.MergedLogSourceIterator,hasNext,boolean hasNext(),"[81, 86]","{'A603': [(81, 86)]}",{'A603': 1.0},A603,,"		public boolean hasNext() {
			for (LogEntry n : nexts) {
			if (n != null) return true;
			}
			return false;
		}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource.MergedLogSourceIterator,next,LogEntry next(),"[88, 106]","{'A603': [(88, 106)]}",{'A603': 1.0},A603,,"		public LogEntry next() {
			int min = -1;
			for (int i = 0; i < nexts.length; i++) {
			if (nexts[i] != null) {
				if (min == -1) {
				min = i;
				} else if (nexts[i].getTimestamp() < nexts[min].getTimestamp()) {
				min = i;
				}
			}
			}
			if (min == -1) {
			return null;
			} else {
			LogEntry e =  nexts[min];
			nexts[min] = sources[min].next();
			return e;
			}
		}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource.MergedLogSourceIterator,remove,void remove(),"[108, 110]","{'A603': [(108, 110)]}",{'A603': 1.0},A603,,"		public void remove() throws UnsupportedOperationException {
			throw new UnsupportedOperationException(""remove not supported for Merged logs"");
		}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource.MergedLogSourceIterator,close,void close(),"[112, 116]","{'A603': [(112, 116)]}",{'A603': 1.0},A603,,"		public void close() throws IOException {
			for (LogIterator i : sources) {
			i.close();
			}
		}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,iterator,"LogIterator iterator(long,long)","[119, 127]","{'A591': [(119, 119), (127, 127)], 'A603': [(120, 126)]}","{'A591': 0.2222222222222222, 'A603': 0.7777777777777778}",A603,,"    public LogIterator iterator(long starttime, long endtime) throws IllegalArgumentException {
		try {
	    	return iterator(starttime, endtime, null);
		}
		catch (FilterException fe) {
	    	assert(false); // shouldn't happen without filter
	    	return null;
		}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,iterator,"LogIterator iterator(long,long,FilterOp)","[129, 136]","{'A591': [(129, 129), (134, 134)], 'A603': [(130, 133), (135, 136)]}","{'A591': 0.25, 'A603': 0.75}",A603,,"    public LogIterator iterator(long starttime, long endtime, FilterOp filter) throws IllegalArgumentException, FilterException {
		// sanitise start and end times
		if (endtime < starttime) {
			throw new IllegalArgumentException(""End time ("" +  endtime + "") must be greater or equal to starttime ("" + starttime + "")"");
		}

		return new MergedLogSourceIterator(this, starttime, endtime, filter);
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,iterator,LogIterator iterator(),"[138, 140]","{'A591': [(140, 140)], 'A603': [(138, 139)]}","{'A591': 0.3333333333333333, 'A603': 0.6666666666666666}",A603,,"	public LogIterator iterator() throws IllegalArgumentException {
		return iterator(starttime, endtime+1);
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,addSource,void addSource(String),"[149, 162]","{'A591': [(149, 149), (157, 157), (162, 162)], 'A603': [(150, 156), (158, 161)]}","{'A591': 0.21428571428571427, 'A603': 0.7857142857142857}",A603,,"    public void addSource(String f) throws IOException {
		LogSource s = null;
		if (TxnLogSource.isTransactionFile(f)) {
			s = new TxnLogSource(f);
		}
		else {
			s = new Log4JSource(f);
		}

		size += s.size();
		endtime = s.getEndTime() > endtime ? s.getEndTime() : endtime;
		starttime = s.getStartTime() < starttime || starttime == 0 ? s.getStartTime() : starttime;
		sources.add(s);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,toString,String toString(),"[164, 170]","{'A591': [(164, 164), (170, 170)], 'A603': [(165, 169)]}","{'A591': 0.2857142857142857, 'A603': 0.7142857142857143}",A603,,"    public String toString() {
		String s = ""MergedLogSource(size="" + size + "", start="" + starttime + "", end="" + endtime +"")"";
		for (LogSource src : sources) {
			s += ""\n\t- "" +src;
		}
		return s;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MergedLogSource.java,MergedLogSource,main,void main(String[]),"[172, 188]","{'A591': [(172, 172), (188, 188)], 'A603': [(173, 187)]}","{'A591': 0.11764705882352941, 'A603': 0.8823529411764706}",A603,,"    public static void main(String[] args) throws IOException {
		System.out.println(""Time: "" + System.currentTimeMillis());
		MergedLogSource s = new MergedLogSource(args);
		System.out.println(s);

		LogIterator iter;

		iter = s.iterator();
		System.out.println(""Time: "" + System.currentTimeMillis());
		System.out.println(""Iterator Size: "" + iter.size());
		System.out.println(""Time: "" + System.currentTimeMillis());
		/*	while (iter.hasNext()) {
			System.out.println(iter.next());
			}*/
		iter.close();
		System.out.println(""Time: "" + System.currentTimeMillis());
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,overlapsRange,"boolean overlapsRange(long,long)","[59, 61]","{'A591': [(59, 61)]}",{'A591': 1.0},A591,,"    public boolean overlapsRange(long starttime, long endtime) {
	return (starttime <= this.endtime && endtime >= this.starttime);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,size,long size(),"[63, 63]","{'A591': [(63, 63)]}",{'A591': 1.0},A591,,"    public long size() { return size; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,getStartTime,long getStartTime(),"[64, 64]","{'A591': [(64, 64)]}",{'A591': 1.0},A591,,"    public long getStartTime() { return starttime; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,getEndTime,long getEndTime(),"[65, 65]","{'A591': [(65, 65)]}",{'A591': 1.0},A591,,"    public long getEndTime() { return endtime; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,getSkipList,LogSkipList getSkipList(),"[66, 66]","{'A591': [(66, 66)]}",{'A591': 1.0},A591,,"    public LogSkipList getSkipList() { return skiplist; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,size,long size(),"[117, 157]","{'A591': [(117, 157)]}",{'A591': 1.0},A591,,"	synchronized public long size() throws IOException {
	    if (LOG.isTraceEnabled()) {
		LOG.trace(""size() called"");
	    }

	    if (this.endtime >= src.getEndTime()) {
		return src.size() - skippedAtStart;
	    }
	    
	    long pos = in.getPosition();
	    
	    if (LOG.isTraceEnabled()) {
		LOG.trace(""saved pos () = "" + pos);
	    }
	    
	    LogEntry e;
	  
	    LogSkipList.Mark lastseg = src.getSkipList().findMarkBefore(this.endtime);
	    in.seek(lastseg.getBytes());
	    buf = """";  // clear the buf so we don't get something we read before we sought
	    // number of entries skipped to get to the end of the iterator, less the number skipped to get to the start
	    long count = lastseg.getEntriesSkipped() - skippedAtStart; 

	    while ((e = readNextEntry()) != null) {
		if (LOG.isTraceEnabled()) {
		    //LOG.trace(e);
		}
		if (e.getTimestamp() > this.endtime) {
		    break;
		}
		count++;
	    }
	    in.seek(pos);
	    buf = """";

	    if (LOG.isTraceEnabled()) {
		LOG.trace(""size() = "" + count);
	    }
	    
	    return count;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,readNextEntry,LogEntry readNextEntry(),"[159, 193]","{'A591': [(159, 193)]}",{'A591': 1.0},A591,,"	synchronized private LogEntry readNextEntry() {
	    try {
		try {
		    while (true) {
			String line = in.readLine();
			if (line == null) {
			    break;
			}

			Matcher m = src.timep.matcher(line);
			if (m.lookingAt()) {
			    if (buf.length() > 0) {
				LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);
				buf = line;
				return e;
			    }
			    buf = line;
			} else if (buf.length() > 0) {
			    buf += line + ""\n"";
			}
		    }
		} catch (EOFException eof) {
		    // ignore, we've simply come to the end of the file
		}
		if (buf.length() > 0) {
		    LogEntry e = new Log4JEntry(src.timestampFromText(dateformat, buf), src.getServerId(), buf);
		    buf = """";
		    return e;
		}
	    } catch (Exception e) {
		LOG.error(""Error reading next entry in file ("" + src.file + ""): "" + e);
		return null;
	    }
	    return null;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,hasNext,boolean hasNext(),"[195, 197]","{'A591': [(195, 197)]}",{'A591': 1.0},A591,,"	public boolean hasNext() {
	    return next != null;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,next,LogEntry next(),"[199, 219]","{'A591': [(199, 219)]}",{'A591': 1.0},A591,,"	public LogEntry next() throws NoSuchElementException {
	    LogEntry ret = next;
	    LogEntry e = readNextEntry();

	    if (filter != null) {
		try {
		    while (e != null && !filter.matches(e)) {
			e = readNextEntry();
		    }
		} catch (FilterException fe) {
		    throw new NoSuchElementException(e.toString());
		}
	    }

	    if (e != null && e.getTimestamp() < endtime) {
		next = e;
	    } else {
		next = null;
	    }
	    return ret;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,remove,void remove(),"[221, 223]","{'A591': [(221, 223)]}",{'A591': 1.0},A591,,"	public void remove() throws UnsupportedOperationException {
	    throw new UnsupportedOperationException(""remove not supported for L4J logs"");
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,close,void close(),"[225, 227]","{'A591': [(225, 227)]}",{'A591': 1.0},A591,,"	public void close() throws IOException {
	    in.close();
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource.Log4JSourceIterator,toString,String toString(),"[229, 237]","{'A591': [(229, 237)]}",{'A591': 1.0},A591,,"	public String toString() {
	    String size;
	    try {
		size = new Long(size()).toString();
	    } catch (IOException ioe) {
		size = ""Unable to read"";
	    }
	    return ""Log4JSourceIterator(start="" + starttime + "", end="" + endtime + "", size="" + size + "")"";
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,iterator,"LogIterator iterator(long,long)","[240, 247]","{'A591': [(240, 247)]}",{'A591': 1.0},A591,,"    public LogIterator iterator(long starttime, long endtime) throws IllegalArgumentException {
	try {
	    return iterator(starttime, endtime, null);
	} catch (FilterException fe) {
	    assert(false); //""This should never happen, you can't have a filter exception without a filter"");
	    return null;
	}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,iterator,"LogIterator iterator(long,long,FilterOp)","[249, 256]","{'A591': [(249, 256)]}",{'A591': 1.0},A591,,"    public LogIterator iterator(long starttime, long endtime, FilterOp filter) throws IllegalArgumentException, FilterException{
	// sanitise start and end times
	if (endtime < starttime) {
	    throw new IllegalArgumentException(""End time ("" +  endtime + "") must be greater or equal to starttime ("" + starttime + "")"");
	}

	return new Log4JSourceIterator(this, starttime, endtime, filter);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,iterator,LogIterator iterator(),"[258, 260]","{'A591': [(258, 260)]}",{'A591': 1.0},A591,,"    public LogIterator iterator() throws IllegalArgumentException {
	return iterator(starttime, endtime+1);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,timestampFromText,"long timestampFromText(SimpleDateFormat,String)","[270, 280]","{'A591': [(270, 280)]}",{'A591': 1.0},A591,,"    private static long timestampFromText(SimpleDateFormat format, String s) {
	Date d = null;
	try {
	    d = format.parse(s);
	} catch (ParseException e) {
	    return 0;
	}
	Calendar c = new GregorianCalendar();
	c.setTime(d);
	return c.getTimeInMillis();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,init,void init(),"[282, 333]","{'A591': [(282, 291), (293, 295), (297, 330), (332, 333)], 'A589': [(292, 292)], 'A613': [(296, 296), (331, 331)]}","{'A591': 0.9423076923076923, 'A589': 0.019230769230769232, 'A613': 0.038461538461538464}",A591,,"    private void init() throws IOException {
	File f = new File(file);
	RandomAccessFileReader in = new RandomAccessFileReader(f);
	SimpleDateFormat dateformat = new SimpleDateFormat(DATE_FORMAT);
	Pattern idp = Pattern.compile(""\\[myid:(\\d+)\\]"");

	long lastFp = in.getPosition();
	String line = in.readLine();
	Matcher m = null;

	// if we have read data from the file, and it matches the timep pattern
	if ((line != null) && (m = timep.matcher(line)).lookingAt()) {
	    starttime = timestampFromText(dateformat, m.group(1));
	} else {
	    throw new IOException(""Invalid log format. First line doesn't start with time"");
	}

	/*
	  Count number of log entries. Any line starting with a timestamp counts as an entry
	*/
	String lastentry = line;
	try {
	    while (line != null) {
		m = timep.matcher(line);
		if (m.lookingAt()) {
		    if (size % skipN == 0) {
			long time = timestampFromText(dateformat, m.group(1));
			skiplist.addMark(time, lastFp, size);
		    }
		    size++;
		    lastentry = line;
		} 
		if (serverid == 0 && (m = idp.matcher(line)).find()) {
		    serverid = Integer.valueOf(m.group(1));
		}

		lastFp = in.getPosition();
		line = in.readLine();
	    }
	} catch (EOFException eof) {
	    // ignore, simply end of file, though really (line!=null) should have caught this
	} finally {
	    in.close();
	}

	m = timep.matcher(lastentry);
	if (m.lookingAt()) {
	    endtime = timestampFromText(dateformat, m.group(1));
	} else {
	    throw new IOException(""Invalid log format. Last line doesn't start with time"");
	}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,toString,String toString(),"[335, 337]","{'A591': [(335, 337)]}",{'A591': 1.0},A591,,"    public String toString() {
	return ""Log4JSource(file="" + file + "", size="" + size + "", start="" + starttime + "", end="" + endtime +"", id="" + serverid +"")"";
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,main,void main(String[]),"[339, 386]","{'A591': [(339, 353), (359, 363), (369, 386)], 'A597': [(354, 358), (364, 368)]}","{'A591': 0.7916666666666666, 'A597': 0.20833333333333334}",A591,,"    public static void main(String[] args) throws IOException {
	final Log4JSource s = new Log4JSource(args[0]);
	System.out.println(s);

	LogIterator iter;

	if (args.length == 3) {
	    final long starttime = Long.valueOf(args[1]);
	    final long endtime = Long.valueOf(args[2]);
	    iter = s.iterator(starttime, endtime);
	    
	    Thread t1 = new Thread() { public void run () { 
		
		LogIterator iter = s.iterator(starttime, endtime);
		System.out.println(iter);
		try {
		  iter.close();
		} catch (IOException ioe) {
		  System.out.println(ioe.getMessage());
		}
	    }; };
	    Thread t2 = new Thread() { public void run () { 
		
		LogIterator iter = s.iterator(starttime, endtime);
		System.out.println(iter);
		try {
		  iter.close();
		} catch (IOException ioe) {
		  System.out.println(ioe.getMessage());
		}
	    }; };
	    Thread t3 = new Thread() { public void run () { 
		
		LogIterator iter = s.iterator(starttime, endtime);
		System.out.println(iter);
	    }; };
	    t1.start();
	    t2.start();
	    //	    t3.start();
	} else {
	    iter = s.iterator();
	}

	/*while (iter.hasNext()) {
	    System.out.println(iter.next());
	    }*/
	iter.close();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,run,void run(),"[350, 359]","{'A591': [(350, 353), (359, 359)], 'A597': [(354, 358)]}","{'A591': 0.5, 'A597': 0.5}",A591,,"	    Thread t1 = new Thread() { public void run () { 
		
		LogIterator iter = s.iterator(starttime, endtime);
		System.out.println(iter);
		try {
		  iter.close();
		} catch (IOException ioe) {
		  System.out.println(ioe.getMessage());
		}
	    }; };
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,run,void run(),"[360, 369]","{'A591': [(360, 363), (369, 369)], 'A597': [(364, 368)]}","{'A591': 0.5, 'A597': 0.5}",A591,,"	    Thread t2 = new Thread() { public void run () { 
		
		LogIterator iter = s.iterator(starttime, endtime);
		System.out.println(iter);
		try {
		  iter.close();
		} catch (IOException ioe) {
		  System.out.println(ioe.getMessage());
		}
	    }; };
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,run,void run(),"[370, 374]","{'A591': [(370, 374)]}",{'A591': 1.0},A591,,"	    Thread t3 = new Thread() { public void run () { 
		
		LogIterator iter = s.iterator(starttime, endtime);
		System.out.println(iter);
	    }; };
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JSource.java,Log4JSource,getServerId,int getServerId(),"[388, 390]","{'A591': [(388, 390)]}",{'A591': 1.0},A591,,"    public int getServerId() {
	return serverid;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterOp.java,FilterOp,newOp,FilterOp newOp(String),"[37, 54]","{'A591': [(37, 54)]}",{'A591': 1.0},A591,,"    public static FilterOp newOp(String op) throws FilterException {
	if (op.equals(""or"")) 
	    return new OrOp();
	if (op.equals(""and""))
	    return new AndOp();
	if (op.equals(""not""))
	    return new NotOp();
	if (op.equals(""xor""))
	    return new XorOp();
	if (op.equals(""=""))
	    return new EqualsOp();
	if (op.equals(""<""))
	    return new LessThanOp();
	if (op.equals("">"")) 
	    return new GreaterThanOp();

	throw new FilterException(""Invalid operation '""+op+""'"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterOp.java,FilterOp,addSubOp,void addSubOp(FilterOp),"[56, 58]","{'A591': [(56, 58)]}",{'A591': 1.0},A591,,"    public void addSubOp(FilterOp op) {
	subOps.add(op);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterOp.java,FilterOp,addArg,void addArg(Arg),"[60, 62]","{'A591': [(60, 62)]}",{'A591': 1.0},A591,,"    public void addArg(Arg arg) {
	args.add(arg); 
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/FilterOp.java,FilterOp,toString,String toString(),"[66, 75]","{'A591': [(66, 75)]}",{'A591': 1.0},A591,,"    public String toString() {
	String op = ""("" + getClass().getName();
	for (FilterOp f :  subOps) {
	    op += "" "" + f;
	}
	for (Arg a : args) {
	    op += "" "" + a;
	}
	return op + "")"";
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/MeasureThroughput.java,MeasureThroughput,main,void main(String[]),"[34, 103]","{'A591': [(34, 48), (50, 103)], 'A603': [(49, 49)]}","{'A591': 0.9857142857142858, 'A603': 0.014285714285714285}",A591,,"    public static void main(String[] args) throws IOException {	
	MergedLogSource source = new MergedLogSource(args);

	PrintStream ps_ms = new PrintStream(new BufferedOutputStream(new FileOutputStream(""throughput-ms.out"")));
	PrintStream ps_sec = new PrintStream(new BufferedOutputStream(new FileOutputStream(""throughput-sec.out"")));
	PrintStream ps_min = new PrintStream(new BufferedOutputStream(new FileOutputStream(""throughput-min.out"")));
	PrintStream ps_hour = new PrintStream(new BufferedOutputStream(new FileOutputStream(""throughput-hour.out"")));
	LogIterator iter;
	
	System.out.println(source);
	iter = source.iterator();
	long currentms = 0;
	long currentsec = 0;
	long currentmin = 0;
	long currenthour = 0;
	Set<Long> zxids_ms = new HashSet<Long>();
	long zxid_sec = 0;
	long zxid_min = 0;
	long zxid_hour = 0;

	while (iter.hasNext()) {
	    LogEntry e = iter.next();
	    TransactionEntry cxn = (TransactionEntry)e;
	    
	    long ms = cxn.getTimestamp();
	    long sec = ms/MS_PER_SEC;
	    long min = ms/MS_PER_MIN;
	    long hour = ms/MS_PER_HOUR;

	    if (currentms != ms && currentms != 0) {
		ps_ms.println("""" + currentms + "" "" + zxids_ms.size());

		zxid_sec += zxids_ms.size();
		zxid_min += zxids_ms.size();
		zxid_hour += zxids_ms.size();
		zxids_ms.clear();
	    }

	    if (currentsec != sec && currentsec != 0) {
		ps_sec.println("""" + currentsec*MS_PER_SEC + "" "" + zxid_sec);

		zxid_sec = 0;
	    }

	    if (currentmin != min && currentmin != 0) {
		ps_min.println("""" + currentmin*MS_PER_MIN + "" "" + zxid_min);
		
		zxid_min = 0;
	    }

	    if (currenthour != hour && currenthour != 0) {
		ps_hour.println("""" + currenthour*MS_PER_HOUR + "" "" + zxid_hour);
		
		zxid_hour = 0;
	    }

	    currentms = ms;
	    currentsec = sec;
	    currentmin = min;
	    currenthour = hour;

	    zxids_ms.add(cxn.getZxid());
	}

	iter.close();
	ps_ms.close();
	ps_sec.close();
	ps_min.close();
	ps_hour.close();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogEntry.java,LogEntry,getTimestamp,long getTimestamp(),"[34, 36]","{'A591': [(34, 36)]}",{'A591': 1.0},A591,,"    public long getTimestamp() {
	return (Long)getAttribute(""timestamp"");
    }    
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogEntry.java,LogEntry,setAttribute,"void setAttribute(String,Object)","[40, 42]","{'A591': [(40, 42)]}",{'A591': 1.0},A591,,"    public void setAttribute(String key, Object v) {
	attributes.put(key, v);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogEntry.java,LogEntry,getAttribute,Object getAttribute(String),"[44, 46]","{'A591': [(44, 46)]}",{'A591': 1.0},A591,,"    public Object getAttribute(String key) {
	return attributes.get(key);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogSkipList.java,LogSkipList.Mark,getTime,long getTime(),"[49, 49]","{'A591': [(49, 49)]}",{'A591': 1.0},A591,,"	public long getTime() { return this.time; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogSkipList.java,LogSkipList.Mark,getBytes,long getBytes(),"[50, 50]","{'A591': [(50, 50)]}",{'A591': 1.0},A591,,"	public long getBytes() { return this.bytes; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogSkipList.java,LogSkipList.Mark,getEntriesSkipped,long getEntriesSkipped(),"[51, 51]","{'A591': [(51, 51)]}",{'A591': 1.0},A591,,"	public long getEntriesSkipped() { return this.skipped; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogSkipList.java,LogSkipList.Mark,toString,String toString(),"[53, 55]","{'A591': [(53, 55)]}",{'A591': 1.0},A591,,"	public String toString() {
	    return ""Mark(time="" + time + "", bytes="" + bytes + "", skipped="" + skipped + "")"";
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogSkipList.java,LogSkipList,addMark,"void addMark(long,long,long)","[65, 70]","{'A591': [(65, 70)]}",{'A591': 1.0},A591,,"    public void addMark(long time, long bytes, long skipped) {
	if (LOG.isTraceEnabled()) {
	    LOG.trace(""addMark (time:"" + time + "", bytes: "" + bytes + "", skipped: "" + skipped + "")"");
	}
	marks.add(new Mark(time, bytes, skipped));
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/LogSkipList.java,LogSkipList,findMarkBefore,Mark findMarkBefore(long),"[75, 93]","{'A591': [(75, 93)]}",{'A591': 1.0},A591,,"    public Mark findMarkBefore(long time) throws NoSuchElementException {
	if (LOG.isTraceEnabled()) {
	    LOG.trace(""findMarkBefore("" + time + "")"");
	}
		    
	Mark last = marks.getFirst();
	for (Mark m: marks) {
	    if (m.getTime() > time) {
		break;
	    } 
	    last = m;
	}
	
	if (LOG.isTraceEnabled()) {
	    LOG.trace(""return "" + last );
	}
	
	return last;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,fill,int fill(),"[68, 86]","{'A591': [(68, 86)]}",{'A591': 1.0},A591,,"    private int fill() throws IOException {
	fileoffset = fp;
	int read = file.read(buffer, 0, buffer.length);

	if (LOG.isDebugEnabled()) {
	    String buf = new String(buffer, 0, 40, ""UTF-8"");
	    LOG.debug(""fill(buffer="" + buf + "")"");
	}

	if (read == -1) { // eof reached
	    buffersize = 0;
	} else {
	    buffersize = read;
	}
	fp += buffersize;
	bufferoffset = 0;

	return buffersize;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,markSupported,boolean markSupported(),"[91, 91]","{'A591': [(91, 91)]}",{'A591': 1.0},A591,,"    public boolean markSupported() { return false; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,read,"int read(char[],int,int)","[96, 112]","{'A591': [(96, 112)]}",{'A591': 1.0},A591,,"    synchronized public int read(char[] cbuf, int off, int len) throws IOException {
	// This could be faster, but probably wont be used
	byte[] b = new byte[2];
	int bytesread = 0;
	while (len > 0) {
	    int read = read(b, 0, 2);
	    bytesread += read;
	    if (read < 2) {
		return bytesread;
	    }
	    cbuf[off] = (char)((b[0] << 8) | (b[1] & 0xff));
	    off += read;
	    len -= read;
	}

	return bytesread;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,read,"int read(byte[],int,int)","[114, 146]","{'A591': [(114, 146)]}",{'A591': 1.0},A591,,"    synchronized public int read(byte[] buf, int off, int len) throws IOException {
	if (LOG.isTraceEnabled()) {
	    LOG.trace(""read(buf, off="" + off + "", len="" + len);
	}

	int read = 0;
	while (len > 0) {
	    if (buffersize == 0) {
		fill();
		if (buffersize == 0) {
		    break;
		}
	    }

	    int tocopy = Math.min(len, buffersize);
	    if (LOG.isTraceEnabled()) {
		LOG.trace(""tocopy="" + tocopy);
	    }

	    System.arraycopy(buffer, bufferoffset, buf, off, tocopy);
	    buffersize -= tocopy;
	    bufferoffset += tocopy;

	    len -= tocopy;
	    read += tocopy;
	    off += tocopy;
	}
	if (LOG.isTraceEnabled()) {
	    LOG.trace(""read="" + read);
	}

	return read;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,close,void close(),"[148, 150]","{'A591': [(148, 150)]}",{'A591': 1.0},A591,,"    public void close() throws IOException {
	file.close();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,getPosition,long getPosition(),"[155, 157]","{'A591': [(155, 157)]}",{'A591': 1.0},A591,,"    public long getPosition() {
	return bufferoffset + fileoffset;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,seek,void seek(long),"[159, 166]","{'A591': [(159, 166)]}",{'A591': 1.0},A591,,"    synchronized public void seek(long pos) throws IOException {
	if (LOG.isDebugEnabled()) {
	    LOG.debug(""seek("" + pos + "")"");
	}
	file.seek(pos);
	fp = pos;
	buffersize = 0; // force a buffer fill on next read
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readLine,String readLine(),"[171, 208]","{'A591': [(171, 208)]}",{'A591': 1.0},A591,,"    synchronized public String readLine() throws IOException {
	StringBuffer s = null;
	
	// go through buffer until i find a \n, if i reach end of buffer first, put whats in buffer into string buffer,
	// repeat
	buffering:
	for (;;) {
	    if (buffersize == 0) {
		fill();
		if (buffersize == 0) {
		    break;
		}
	    }

	    for (int i = 0; i < buffersize; i++) {
		if (buffer[bufferoffset + i] == '\n') { 
		    if (i > 0) { // if \n is first char in buffer, leave the string buffer empty
			if (s == null) { s = new StringBuffer(); }
			s.append(new String(buffer, bufferoffset, i, ""UTF-8""));
		    }
		    bufferoffset += i+1;
		    buffersize -= i+1; 
		    break buffering;
		}
	    }

	    // We didn't find \n, read the whole buffer into string buffer
	    if (s == null) { s = new StringBuffer(); }
	    s.append(new String(buffer, bufferoffset, buffersize, ""UTF-8""));
	    buffersize = 0; 
	}

	if (s == null) {
	    return null;
	} else {
	    return s.toString();
	}	    
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readFully,void readFully(byte[]),"[213, 215]","{'A591': [(213, 215)]}",{'A591': 1.0},A591,,"    public void readFully(byte[] b) throws IOException {
	readFully(b, 0, b.length);
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readFully,"void readFully(byte[],int,int)","[217, 228]","{'A591': [(217, 228)]}",{'A591': 1.0},A591,,"    public void readFully(byte[] b, int off, int len) throws IOException
    {
	while (len > 0) {
	    int read = read(b, off, len);
	    len -= read;
	    off += read;

	    if (read == 0) {
		throw new EOFException(""End of file reached"");
	    }	    
	}
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,skipBytes,int skipBytes(int),"[230, 233]","{'A591': [(230, 233)]}",{'A591': 1.0},A591,,"    public int skipBytes(int n) throws IOException {
	seek(getPosition() + n);
	return n;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readBoolean,boolean readBoolean(),"[235, 237]","{'A591': [(235, 237)]}",{'A591': 1.0},A591,,"    public boolean readBoolean() throws IOException {
	return (readByte() != 0);	    
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readByte,byte readByte(),"[239, 243]","{'A591': [(239, 243)]}",{'A591': 1.0},A591,,"    public byte readByte() throws IOException {
	byte[] b = new byte[1];
	readFully(b, 0, 1);
	return b[0];
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readUnsignedByte,int readUnsignedByte(),"[245, 247]","{'A591': [(245, 247)]}",{'A591': 1.0},A591,,"    public int readUnsignedByte() throws IOException {
	return (int)readByte();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readShort,short readShort(),"[249, 253]","{'A591': [(249, 253)]}",{'A591': 1.0},A591,,"    public short readShort() throws IOException {
	byte[] b = new byte[2];
	readFully(b, 0, 2);
	return (short)((b[0] << 8) | (b[1] & 0xff));
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readUnsignedShort,int readUnsignedShort(),"[255, 259]","{'A591': [(255, 259)]}",{'A591': 1.0},A591,,"    public int readUnsignedShort() throws IOException {
	byte[] b = new byte[2];
	readFully(b, 0, 2);
	return (((b[0] & 0xff) << 8) | (b[1] & 0xff));
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readChar,char readChar(),"[261, 263]","{'A591': [(261, 263)]}",{'A591': 1.0},A591,,"    public char readChar() throws IOException {
	return (char)readShort();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readInt,int readInt(),"[265, 269]","{'A591': [(265, 269)]}",{'A591': 1.0},A591,,"    public int readInt() throws IOException {
	byte[] b = new byte[4];
	readFully(b, 0, 4);
	return (((b[0] & 0xff) << 24) | ((b[1] & 0xff) << 16) |  ((b[2] & 0xff) << 8) | (b[3] & 0xff));
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readLong,long readLong(),"[271, 279]","{'A591': [(271, 279)]}",{'A591': 1.0},A591,,"    public long readLong() throws IOException {
	byte[] b = new byte[8];
	readFully(b, 0, 8);
	
	return (((long)(b[0] & 0xff) << 56) |  ((long)(b[1] & 0xff) << 48) |
		((long)(b[2] & 0xff) << 40) |  ((long)(b[3] & 0xff) << 32) |
		((long)(b[4] & 0xff) << 24) |  ((long)(b[5] & 0xff) << 16) |
		((long)(b[6] & 0xff) <<  8) |  ((long)(b[7] & 0xff)));
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readFloat,float readFloat(),"[281, 283]","{'A591': [(281, 283)]}",{'A591': 1.0},A591,,"    public float readFloat() throws IOException {
	return Float.intBitsToFloat(readInt());
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readDouble,double readDouble(),"[285, 287]","{'A591': [(285, 287)]}",{'A591': 1.0},A591,,"    public double readDouble() throws IOException {
	return Double.longBitsToDouble(readLong());
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,readUTF,String readUTF(),"[289, 297]","{'A591': [(289, 297)]}",{'A591': 1.0},A591,,"    public String readUTF() throws IOException {
	int len = readUnsignedShort();
	byte[] bytes = new byte[len+2];
	bytes[0] = (byte)((len >> 8) & 0xFF);
	bytes[1] = (byte)(len & 0xFF);
	readFully(bytes, 2, len);
	DataInputStream dis = new DataInputStream(new ByteArrayInputStream(bytes));
	return dis.readUTF();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/RandomAccessFileReader.java,RandomAccessFileReader,main,void main(String[]),"[299, 328]","{'A591': [(299, 326), (328, 328)], 'A597': [(327, 327)]}","{'A591': 0.9666666666666667, 'A597': 0.03333333333333333}",A591,,"    public static void main(String[] args) throws IOException {
	RandomAccessFileReader f = new RandomAccessFileReader(new File(args[0]));
	
	long pos0 = f.getPosition();
	for (int i = 0; i < 5; i++) {
	    System.out.println(f.readLine());
	}
	System.out.println(""============="");
	long pos1 = f.getPosition();
	System.out.println(""pos: "" + pos1);
	for (int i = 0; i < 5; i++) {
	    System.out.println(f.readLine());
	}
	System.out.println(""============="");
	f.seek(pos1);
	for (int i = 0; i < 5; i++) {
	    System.out.println(f.readLine());
	}
	System.out.println(""============="");
	f.seek(pos0);
	for (int i = 0; i < 5; i++) {
	    System.out.println(f.readLine());
	}
	long pos2 = f.getPosition();
	System.out.println(""============="");
	System.out.println(f.readLine());
	f.seek(pos2);
	System.out.println(f.readLine());
	f.close();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JEntry.java,Log4JEntry,getEntry,String getEntry(),"[27, 29]","{'A591': [(27, 29)]}",{'A591': 1.0},A591,,"    public String getEntry() {
	return (String) getAttribute(""log-text"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JEntry.java,Log4JEntry,toString,String toString(),"[31, 33]","{'A591': [(31, 33)]}",{'A591': 1.0},A591,,"    public String toString() {
	return """" + getTimestamp() + ""::::"" + getNode() + ""::::""  + getEntry();
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JEntry.java,Log4JEntry,getNode,int getNode(),"[35, 37]","{'A591': [(35, 37)]}",{'A591': 1.0},A591,,"    public int getNode() {
	return (Integer) getAttribute(""node"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/Log4JEntry.java,Log4JEntry,getType,Type getType(),"[39, 39]","{'A591': [(39, 39)]}",{'A591': 1.0},A591,,"    public Type getType() { return LogEntry.Type.LOG4J; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,getClientId,long getClientId(),"[34, 36]","{'A591': [(34, 36)]}",{'A591': 1.0},A591,,"    public long getClientId() {
	return (Long)getAttribute(""client-id"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,getCxid,long getCxid(),"[38, 40]","{'A591': [(38, 40)]}",{'A591': 1.0},A591,,"    public long getCxid() {
	return (Long)getAttribute(""cxid"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,getZxid,long getZxid(),"[42, 44]","{'A591': [(42, 44)]}",{'A591': 1.0},A591,,"    public long getZxid() {
	return (Long)getAttribute(""zxid"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,getOp,String getOp(),"[46, 48]","{'A591': [(46, 48)]}",{'A591': 1.0},A591,,"    public String getOp() {
	return (String)getAttribute(""operation"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,getExtra,String getExtra(),"[50, 52]","{'A591': [(50, 52)]}",{'A591': 1.0},A591,,"    public String getExtra() {
	return (String)getAttribute(""extra"");
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,toString,String toString(),"[54, 56]","{'A591': [(54, 56)]}",{'A591': 1.0},A591,,"    public String toString() {
	return getTimestamp() + "":::session(0x"" + Long.toHexString(getClientId()) + "") cxid(0x"" + Long.toHexString(getCxid()) + "") zxid(0x"" + Long.toHexString(getZxid()) + "") op("" + getOp() + "") extra("" + getExtra() +"")"";
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/TransactionEntry.java,TransactionEntry,getType,Type getType(),"[58, 58]","{'A591': [(58, 58)]}",{'A591': 1.0},A591,,"    public Type getType() { return LogEntry.Type.TXN; }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/JsonGenerator.java,JsonGenerator.Message,equals,boolean equals(Message),"[48, 52]","{'A591': [(48, 52)]}",{'A591': 1.0},A591,,"	public boolean equals(Message m) {
	    return (m.from == this.from 
		    && m.to == this.to
		    && m.zxid == this.zxid);
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/JsonGenerator.java,JsonGenerator,txnEntry,JsonNode txnEntry(TransactionEntry),"[55, 67]","{'A591': [(57, 57), (65, 65), (67, 67)], 'A603': [(55, 56), (58, 64), (66, 66)]}","{'A591': 0.23076923076923078, 'A603': 0.7692307692307693}",A603,,"    public JsonNode txnEntry(TransactionEntry e) {
		JsonNode event = mapper.createObjectNode();

		((ObjectNode) event).put(""time"", Long.toString(e.getTimestamp()));
		((ObjectNode) event).put(""client"", Long.toHexString(e.getClientId()));
		((ObjectNode) event).put(""cxid"", Long.toHexString(e.getCxid()));
		((ObjectNode) event).put(""zxid"", Long.toHexString(e.getZxid()));
		((ObjectNode) event).put(""op"", e.getOp());
		((ObjectNode) event).put(""extra"", e.getExtra());
		((ObjectNode) event).put(""type"", ""transaction"");

		return event;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/JsonGenerator.java,JsonGenerator,add,"JsonNode add(String,long,int,String)","[205, 212]","{'A603': [(205, 212)]}",{'A603': 1.0},A603,,"    private JsonNode add(String type, long timestamp, int node, String entry){
		JsonNode stateChange = mapper.createObjectNode();
		((ObjectNode)stateChange).put(""type"", type);
		((ObjectNode)stateChange).put(""time"", timestamp);
		((ObjectNode)stateChange).put(""server"", node);
		((ObjectNode)stateChange).put(""state"", entry);
		return stateChange;
	}
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/JsonGenerator.java,JsonGenerator,toString,String toString(),"[214, 222]","{'A591': [(214, 214), (222, 222)], 'A603': [(215, 221)]}","{'A591': 0.2222222222222222, 'A603': 0.7777777777777778}",A603,,"    public String toString() {
		String jsonString = null;
		try {
			jsonString = mapper.writer(new MinimalPrettyPrinter()).writeValueAsString(root);
		} catch (JsonProcessingException e) {
			jsonString = ""{\""ERR\"", "" + e.getMessage() + ""}"";
		}
		return jsonString;
    }
"
org.apache.zookeeper.graph,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-loggraph/src/main/java/org/apache/zookeeper/graph/JsonGenerator.java,JsonGenerator,main,void main(String[]),"[224, 228]","{'A591': [(224, 224), (228, 228)], 'A603': [(225, 227)]}","{'A591': 0.4, 'A603': 0.6}",A603,,"    public static void main(String[] args) throws Exception {
		MergedLogSource src = new MergedLogSource(args);
		LogIterator iter = src.iterator();
		System.out.println(new JsonGenerator(iter));
    }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService.MyWatcher,process,void process(WatchedEvent),"[68, 72]","{'A591': [(68, 72)]}",{'A591': 1.0},A591,,"       synchronized public void process(WatchedEvent event) {
           if (event.getState() == KeeperState.Expired) {
               close(contextPath);
           }
       }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService.SessionTimerTask,run,void run(),"[95, 102]","{'A591': [(95, 102)]}",{'A591': 1.0},A591,,"       @Override
       public void run() {
           if (LOG.isInfoEnabled()) {
               LOG.info(String.format(""Session '%s' expired after ""
                       + ""'%d' milliseconds."", session, delay));
           }
           ZooKeeperService.close(contextPath, session);
       }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService.SessionTimerTask,reset,void reset(),"[104, 106]","{'A591': [(104, 106)]}",{'A591': 1.0},A591,,"       public void reset() {
           timer.schedule(this, delay);
       }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,mapContext,"void mapContext(String,Endpoint)","[115, 117]","{'A591': [(115, 117)]}",{'A591': 1.0},A591,,"   synchronized public static void mapContext(String contextPath, Endpoint e) {
       contextMap.put(contextPath, e);
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,resetTimer,"void resetTimer(String,String)","[122, 132]","{'A591': [(122, 132)]}",{'A591': 1.0},A591,,"   synchronized public static void resetTimer(String contextPath,
           String session) {
       if (session != null) {
           String uri = concat(contextPath, session);

           SessionTimerTask t = zkSessionTimers.remove(uri);
           t.cancel();

           zkSessionTimers.put(uri, new SessionTimerTask(t));
       }
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,close,void close(String),"[137, 139]","{'A591': [(137, 139)]}",{'A591': 1.0},A591,,"   public static void close(String contextPath) {
       close(contextPath, null);
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,close,"void close(String,String)","[144, 161]","{'A591': [(144, 161)]}",{'A591': 1.0},A591,,"   synchronized public static void close(String contextPath, String session) {
       String uri = concat(contextPath, session);

       TimerTask t = zkSessionTimers.remove(uri);
       if (t != null) {
           t.cancel();
       }

       ZooKeeper zk = zkMap.remove(uri);
       if (zk == null) {
           return;
       }
       try {
           zk.close();
       } catch (InterruptedException e) {
           LOG.error(""Interrupted while closing ZooKeeper connection."", e);
       }
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,closeAll,void closeAll(),"[166, 171]","{'A591': [(166, 171)]}",{'A591': 1.0},A591,,"   synchronized public static void closeAll() {
       Set<String> sessions = new TreeSet<String>(zkMap.keySet());
       for (String key : sessions) {
           close(key);
       }
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,isConnected,"boolean isConnected(String,String)","[176, 179]","{'A591': [(176, 179)]}",{'A591': 1.0},A591,,"   synchronized public static boolean isConnected(String contextPath,
           String session) {
       return zkMap.containsKey(concat(contextPath, session));
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,getClient,ZooKeeper getClient(String),"[184, 186]","{'A591': [(184, 186)]}",{'A591': 1.0},A591,,"   public static ZooKeeper getClient(String contextPath) throws IOException {
       return getClient(contextPath, null);
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,getClient,"ZooKeeper getClient(String,String)","[193, 196]","{'A591': [(193, 196)]}",{'A591': 1.0},A591,,"   public static ZooKeeper getClient(String contextPath, String session)
           throws IOException {
       return getClient(contextPath, session, 5);
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,getClient,"ZooKeeper getClient(String,String,int)","[204, 233]","{'A591': [(204, 233)]}",{'A591': 1.0},A591,,"   synchronized public static ZooKeeper getClient(String contextPath,
           String session, int expireTime) throws IOException {
       final String connectionId = concat(contextPath, session);

       ZooKeeper zk = zkMap.get(connectionId);
       if (zk == null) {

           if (LOG.isInfoEnabled()) {
               LOG.info(String.format(""creating new ""
                       + ""connection for : '%s'"", connectionId));
           }
           Endpoint e = contextMap.get(contextPath);
           zk = new ZooKeeper(e.getHostPort(), 30000, new MyWatcher(
                   connectionId));
           
           for (Map.Entry<String, String> p : e.getZooKeeperAuthInfo().entrySet()) {
               zk.addAuthInfo(""digest"", String.format(""%s:%s"", p.getKey(),
                       p.getValue()).getBytes());
           }
           
           zkMap.put(connectionId, zk);

           // a session should automatically expire after an amount of time
           if (session != null) {
               zkSessionTimers.put(connectionId, new SessionTimerTask(
                       expireTime, session, contextPath, timer));
           }
       }
       return zk;
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/ZooKeeperService.java,ZooKeeperService,concat,"String concat(String,String)","[235, 240]","{'A591': [(235, 240)]}",{'A591': 1.0},A591,,"   private static String concat(String contextPath, String session) {
       if (session != null) {
           return String.format(""%s@%s"", contextPath, session);
       }
       return contextPath;
   }
"
org.apache.zookeeper.server.jersey.filters,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/filters/HTTPBasicAuth.java,HTTPBasicAuth,doFilter,"void doFilter(ServletRequest,ServletResponse,FilterChain)","[44, 63]","{'A591': [(44, 63)]}",{'A591': 1.0},A591,,"    @Override
    public void doFilter(ServletRequest req0, ServletResponse resp0,
            FilterChain chain) throws IOException, ServletException {

        HttpServletRequest request = (HttpServletRequest) req0;
        HttpServletResponse response = (HttpServletResponse) resp0;

        String authorization = request.getHeader(""Authorization"");
        if (authorization != null) {
            String c[] = parseAuthorization(authorization);
            if (c != null && credentials.containsKey(c[0])
                    && credentials.get(c[0]).equals(c[1])) {
                chain.doFilter(request, response);
                return;
            }
        }

        response.setHeader(""WWW-Authenticate"", ""Basic realm=\""Restricted\"""");
        response.sendError(401);
    }
"
org.apache.zookeeper.server.jersey.filters,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/filters/HTTPBasicAuth.java,HTTPBasicAuth,parseAuthorization,String[] parseAuthorization(String),"[65, 77]","{'A591': [(65, 77)]}",{'A591': 1.0},A591,,"    private String[] parseAuthorization(String authorization) {
        String parts[] = authorization.split("" "");
        if (parts.length == 2 && parts[0].equalsIgnoreCase(""Basic"")) {
            String userPass = Base64.base64Decode(parts[1]);

            int p = userPass.indexOf("":"");
            if (p != -1) {
                return new String[] { userPass.substring(0, p),
                        userPass.substring(p + 1) };
            }
        }
        return null;
    }
"
org.apache.zookeeper.server.jersey.filters,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/filters/HTTPBasicAuth.java,HTTPBasicAuth,init,void init(FilterConfig),"[79, 81]","{'A591': [(79, 81)]}",{'A591': 1.0},A591,,"    @Override
    public void init(FilterConfig arg0) throws ServletException {
    }
"
org.apache.zookeeper.server.jersey.filters,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/filters/HTTPBasicAuth.java,HTTPBasicAuth,destroy,void destroy(),"[83, 85]","{'A591': [(83, 85)]}",{'A591': 1.0},A591,,"    @Override
    public void destroy() {
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZStat.java,ZStat,hashCode,int hashCode(),"[81, 84]","{'A596': [(81, 84)]}",{'A596': 1.0},A596,,"    @Override
    public int hashCode() {
        return path.hashCode();
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZStat.java,ZStat,equals,boolean equals(Object),"[91, 98]","{'A596': [(91, 98)]}",{'A596': 1.0},A596,,"    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ZStat)) {
            return false;
        }
        ZStat o = (ZStat) obj;
        return toString().equals(o.toString());
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZStat.java,ZStat,toString,String toString(),"[100, 105]","{'A596': [(100, 105)]}",{'A596': 1.0},A596,,"    @Override
    public String toString() {
        return ""ZStat("" + path + "","" + ""b64[""
            + (data64 == null ? null : new String(data64)) + ""],""
            + dataUtf8 + "")"";
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZPath.java,ZPath,hashCode,int hashCode(),"[45, 48]","{'A596': [(45, 48)]}",{'A596': 1.0},A596,,"    @Override
    public int hashCode() {
        return path.hashCode();
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZPath.java,ZPath,equals,boolean equals(Object),"[50, 57]","{'A596': [(50, 57)]}",{'A596': 1.0},A596,,"    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ZPath)) {
            return false;
        }
        ZPath o = (ZPath) obj;
        return path.equals(o.path);
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZPath.java,ZPath,toString,String toString(),"[59, 62]","{'A596': [(59, 62)]}",{'A596': 1.0},A596,,"    @Override
    public String toString() {
        return ""ZPath("" + path + "")"";
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZChildrenJSON.java,ZChildrenJSON,hashCode,int hashCode(),"[58, 61]","{'A596': [(58, 61)]}",{'A596': 1.0},A596,,"    @Override
    public int hashCode() {
        return path.hashCode();
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZChildrenJSON.java,ZChildrenJSON,equals,boolean equals(Object),"[63, 70]","{'A596': [(63, 70)]}",{'A596': 1.0},A596,,"    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ZChildrenJSON)) {
            return false;
        }
        ZChildrenJSON o = (ZChildrenJSON) obj;
        return path.equals(o.path) && children.equals(o.children);
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZChildrenJSON.java,ZChildrenJSON,toString,String toString(),"[72, 75]","{'A596': [(72, 75)]}",{'A596': 1.0},A596,,"    @Override
    public String toString() {
        return ""ZChildrenJSON("" + path + "","" + children + "")"";
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZSession.java,ZSession,hashCode,int hashCode(),"[37, 40]","{'A591': [(37, 40)]}",{'A591': 1.0},A591,,"    @Override
    public int hashCode() {
        return id.hashCode();
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZSession.java,ZSession,equals,boolean equals(Object),"[42, 49]","{'A591': [(42, 49)]}",{'A591': 1.0},A591,,"    @Override
    public boolean equals(Object obj) {
        if(!(obj instanceof ZSession)) {
            return false;
        }
        ZSession s = (ZSession) obj;
        return id.equals(s.id);
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZSession.java,ZSession,toString,String toString(),"[51, 54]","{'A591': [(51, 54)]}",{'A591': 1.0},A591,,"    @Override
    public String toString() {
        return ""ZSession("" + id +"")"";   
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZChildren.java,ZChildren,hashCode,int hashCode(),"[62, 65]","{'A596': [(62, 65)]}",{'A596': 1.0},A596,,"    @Override
    public int hashCode() {
        return path.hashCode();
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZChildren.java,ZChildren,equals,boolean equals(Object),"[67, 74]","{'A596': [(67, 74)]}",{'A596': 1.0},A596,,"    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof ZChildren)) {
            return false;
        }
        ZChildren o = (ZChildren) obj;
        return path.equals(o.path) && children.equals(o.children);
    }
"
org.apache.zookeeper.server.jersey.jaxb,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/jaxb/ZChildren.java,ZChildren,toString,String toString(),"[76, 79]","{'A596': [(76, 79)]}",{'A596': 1.0},A596,,"    @Override
    public String toString() {
        return ""ZChildren("" + path + "","" + children + "")"";
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/KeeperExceptionMapper.java,KeeperExceptionMapper,toResponse,Response toResponse(KeeperException),"[42, 85]","{'A596': [(42, 85)]}",{'A596': 1.0},A596,,"    public Response toResponse(KeeperException e) {
        Response.Status status;
        String message;

        String path = e.getPath();

        switch(e.code()) {
        case AUTHFAILED:
            status = Response.Status.UNAUTHORIZED;
            message = path + "" not authorized"";
            break;
        case BADARGUMENTS:
            status = Response.Status.BAD_REQUEST;
            message = path + "" bad arguments"";
            break;
        case BADVERSION:
            status = Response.Status.PRECONDITION_FAILED;
            message = path + "" bad version"";
            break;
        case INVALIDACL:
            status = Response.Status.BAD_REQUEST;
            message = path + "" invalid acl"";
            break;
        case NODEEXISTS:
            status = Response.Status.CONFLICT;
            message = path + "" already exists"";
            break;
        case NONODE:
            status = Response.Status.NOT_FOUND;
            message = path + "" not found"";
            break;
        case NOTEMPTY:
            status = Response.Status.CONFLICT;
            message = path + "" not empty"";
            break;
        default:
            status = Response.Status.fromStatusCode(502); // bad gateway
            message = ""Error processing request for "" + path
                + "" : "" + e.getMessage();
        }

        return Response.status(status).entity(
                new ZError(ui.getRequestUri().toString(), message)).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZErrorWriter.java,ZErrorWriter,getSize,"long getSize(ZError,Class<?>,Type,Annotation[],MediaType)","[43, 46]","{'A596': [(43, 46)]}",{'A596': 1.0},A596,,"    public long getSize(ZError t, Class<?> type, Type genericType,
            Annotation[] annotations, MediaType mediaType)  {
        return -1;
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZErrorWriter.java,ZErrorWriter,isWriteable,"boolean isWriteable(Class<?>,Type,Annotation[],MediaType)","[48, 51]","{'A596': [(48, 51)]}",{'A596': 1.0},A596,,"    public boolean isWriteable(Class<?> type, Type genericType,
            Annotation[] annotations, MediaType mediaType) {
        return ZError.class.isAssignableFrom(type);
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZErrorWriter.java,ZErrorWriter,writeTo,"void writeTo(ZError,Class<?>,Type,Annotation[],MediaType,MultivaluedMap<String, Object>,OutputStream)","[53, 62]","{'A596': [(53, 62)]}",{'A596': 1.0},A596,,"    public void writeTo(ZError t, Class<?> type, Type genericType,
            Annotation[] annotations, MediaType mediaType,
            MultivaluedMap<String, Object> httpHeaders,
            OutputStream os)
        throws IOException, WebApplicationException
    {
        PrintStream p = new PrintStream(os);
        p.print(""Request "" + t.request + "" failed due to "" + t.message);
        p.flush();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,ensurePathNotNull,void ensurePathNotNull(String),"[85, 89]","{'A591': [(85, 89)]}",{'A591': 1.0},A591,,"    private void ensurePathNotNull(String path) {
        if (path == null) {
            throw new IllegalArgumentException(""Invalid path \"""" + path + ""\"""");
        }
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,existsZNode,"Response existsZNode(String,UriInfo)","[91, 101]","{'A596': [(91, 91)], 'A591': [(92, 101)]}","{'A596': 0.09090909090909091, 'A591': 0.9090909090909091}",A591,,"    @HEAD
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML })
    public Response existsZNode(@PathParam(""path"") String path,
            @Context UriInfo ui) throws InterruptedException, KeeperException {
        Stat stat = zk.exists(path, false);
        if (stat == null) {
            throwNotFound(path, ui);
        }
        return Response.status(Response.Status.OK).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,existsZNodeAsOctet,"Response existsZNodeAsOctet(String,UriInfo)","[103, 112]","{'A596': [(107, 110), (112, 112)], 'A591': [(103, 106), (111, 111)]}","{'A596': 0.5, 'A591': 0.5}",A596,,"    @HEAD
    @Produces( { MediaType.APPLICATION_OCTET_STREAM })
    public Response existsZNodeAsOctet(@PathParam(""path"") String path,
            @Context UriInfo ui) throws InterruptedException, KeeperException {
        Stat stat = zk.exists(path, false);
        if (stat == null) {
            throwNotFound(path, ui);
        }
        return Response.status(Response.Status.NO_CONTENT).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,getZNodeListJSON,"Response getZNodeListJSON(String,String,String,String,UriInfo)","[122, 131]","{'A596': [(122, 122), (126, 128), (131, 131)], 'A591': [(123, 125), (129, 130)]}","{'A596': 0.5, 'A591': 0.5}",A596,,"    @GET
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"" })
    public Response getZNodeListJSON(
            @PathParam(""path"") String path,
            @QueryParam(""callback"") String callback,
            @DefaultValue(""data"") @QueryParam(""view"") String view,
            @DefaultValue(""base64"") @QueryParam(""dataformat"") String dataformat,
            @Context UriInfo ui) throws InterruptedException, KeeperException {
        return getZNodeList(true, path, callback, view, dataformat, ui);
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,getZNodeList,"Response getZNodeList(String,String,String,String,UriInfo)","[133, 142]","{'A596': [(133, 134), (137, 139), (141, 142)], 'A591': [(135, 136), (140, 140)]}","{'A596': 0.7, 'A591': 0.3}",A596,,"    @GET
    @Produces(MediaType.APPLICATION_XML)
    public Response getZNodeList(
            @PathParam(""path"") String path,
            @QueryParam(""callback"") String callback,
            @DefaultValue(""data"") @QueryParam(""view"") String view,
            @DefaultValue(""base64"") @QueryParam(""dataformat"") String dataformat,
            @Context UriInfo ui) throws InterruptedException, KeeperException {
        return getZNodeList(false, path, callback, view, dataformat, ui);
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,getZNodeList,"Response getZNodeList(boolean,String,String,String,String,UriInfo)","[144, 197]","{'A596': [(144, 145), (149, 161), (165, 179), (181, 187), (193, 197)], 'A591': [(146, 148), (162, 164), (180, 180), (188, 192)]}","{'A596': 0.7777777777777778, 'A591': 0.2222222222222222}",A596,,"    private Response getZNodeList(boolean json, String path, String callback,
            String view, String dataformat, UriInfo ui)
            throws InterruptedException, KeeperException {
        ensurePathNotNull(path);

        if (view.equals(""children"")) {
            List<String> children = new ArrayList<String>();
            for (String child : zk.getChildren(path, false)) {
                children.add(child);
            }

            Object child;
            String childTemplate = ui.getAbsolutePath().toString();
            if (!childTemplate.endsWith(""/"")) {
                childTemplate += ""/"";
            }
            childTemplate += ""{child}"";
            if (json) {
                child = new ZChildrenJSON(path,
                        ui.getAbsolutePath().toString(), childTemplate,
                        children);
            } else {
                child = new ZChildren(path, ui.getAbsolutePath().toString(),
                        childTemplate, children);
            }
            return Response.status(Response.Status.OK).entity(
                    new JSONWithPadding(child, callback)).build();
        } else {
            Stat stat = new Stat();
            byte[] data = zk.getData(path, false, stat);

            byte[] data64;
            String dataUtf8;
            if (data == null) {
                data64 = null;
                dataUtf8 = null;
            } else if (!dataformat.equals(""utf8"")) {
                data64 = data;
                dataUtf8 = null;
            } else {
                data64 = null;
                dataUtf8 = new String(data);
            }
            ZStat zstat = new ZStat(path, ui.getAbsolutePath().toString(),
                    data64, dataUtf8, stat.getCzxid(), stat.getMzxid(), stat
                            .getCtime(), stat.getMtime(), stat.getVersion(),
                    stat.getCversion(), stat.getAversion(), stat
                            .getEphemeralOwner(), stat.getDataLength(), stat
                            .getNumChildren(), stat.getPzxid());

            return Response.status(Response.Status.OK).entity(
                    new JSONWithPadding(zstat, callback)).build();
        }
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,getZNodeListAsOctet,Response getZNodeListAsOctet(String),"[199, 213]","{'A596': [(199, 201), (205, 213)], 'A591': [(202, 204)]}","{'A596': 0.8, 'A591': 0.2}",A596,,"    @GET
    @Produces(MediaType.APPLICATION_OCTET_STREAM)
    public Response getZNodeListAsOctet(@PathParam(""path"") String path)
            throws InterruptedException, KeeperException {
        ensurePathNotNull(path);

        Stat stat = new Stat();
        byte[] data = zk.getData(path, false, stat);

        if (data == null) {
            return Response.status(Response.Status.NO_CONTENT).build();
        } else {
            return Response.status(Response.Status.OK).entity(data).build();
        }
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,setZNode,"Response setZNode(String,String,String,String,String,UriInfo,byte[])","[215, 254]","{'A596': [(215, 215), (218, 218), (221, 224), (228, 234), (237, 244), (251, 254)], 'A591': [(216, 217), (219, 220), (225, 227), (235, 236), (245, 250)]}","{'A596': 0.625, 'A591': 0.375}",A596,,"    @PUT
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML })
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    public Response setZNode(
            @PathParam(""path"") String path,
            @QueryParam(""callback"") String callback,
            @DefaultValue(""-1"") @QueryParam(""version"") String versionParam,
            @DefaultValue(""base64"") @QueryParam(""dataformat"") String dataformat,
            @DefaultValue(""false"") @QueryParam(""null"") String setNull,
            @Context UriInfo ui, byte[] data) throws InterruptedException,
            KeeperException {
        ensurePathNotNull(path);

        int version;
        try {
            version = Integer.parseInt(versionParam);
        } catch (NumberFormatException e) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).entity(
                    new ZError(ui.getRequestUri().toString(), path
                            + "" bad version "" + versionParam)).build());
        }

        if (setNull.equals(""true"")) {
            data = null;
        }

        Stat stat = zk.setData(path, data, version);

        ZStat zstat = new ZStat(path, ui.getAbsolutePath().toString(), null,
                null, stat.getCzxid(), stat.getMzxid(), stat.getCtime(), stat
                        .getMtime(), stat.getVersion(), stat.getCversion(),
                stat.getAversion(), stat.getEphemeralOwner(), stat
                        .getDataLength(), stat.getNumChildren(), stat
                        .getPzxid());

        return Response.status(Response.Status.OK).entity(
                new JSONWithPadding(zstat, callback)).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,setZNodeAsOctet,"void setZNodeAsOctet(String,String,String,UriInfo,byte[])","[256, 281]","{'A596': [(256, 261), (265, 271), (274, 281)], 'A591': [(262, 264), (272, 273)]}","{'A596': 0.8076923076923077, 'A591': 0.19230769230769232}",A596,,"    @PUT
    @Produces(MediaType.APPLICATION_OCTET_STREAM)
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    public void setZNodeAsOctet(@PathParam(""path"") String path,
            @DefaultValue(""-1"") @QueryParam(""version"") String versionParam,
            @DefaultValue(""false"") @QueryParam(""null"") String setNull,
            @Context UriInfo ui, byte[] data) throws InterruptedException,
            KeeperException {
        ensurePathNotNull(path);

        int version;
        try {
            version = Integer.parseInt(versionParam);
        } catch (NumberFormatException e) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).entity(
                    new ZError(ui.getRequestUri().toString(), path
                            + "" bad version "" + versionParam)).build());
        }

        if (setNull.equals(""true"")) {
            data = null;
        }

        zk.setData(path, data, version);
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,createZNode,"Response createZNode(String,String,String,String,String,String,String,String,UriInfo,byte[])","[283, 337]","{'A596': [(283, 283), (286, 286), (289, 294), (305, 308), (311, 318), (325, 325), (328, 329), (331, 334), (337, 337)], 'A591': [(284, 285), (287, 288), (295, 304), (309, 309), (319, 324), (326, 327), (330, 330), (335, 336)], 'A589': [(310, 310)]}","{'A596': 0.509090909090909, 'A591': 0.4727272727272727, 'A589': 0.01818181818181818}",A596,,"    @POST
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML })
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    public Response createZNode(
            @PathParam(""path"") String path,
            @QueryParam(""callback"") String callback,
            @DefaultValue(""create"") @QueryParam(""op"") String op,
            @QueryParam(""name"") String name,
            @DefaultValue(""base64"") @QueryParam(""dataformat"") String dataformat,
            @DefaultValue(""false"") @QueryParam(""null"") String setNull,
            @DefaultValue(""false"") @QueryParam(""sequence"") String sequence,
            @DefaultValue(""false"") @QueryParam(""ephemeral"") String ephemeral,
            @Context UriInfo ui, byte[] data) throws InterruptedException,
            KeeperException {
        ensurePathNotNull(path);

        if (path.equals(""/"")) {
            path += name;
        } else {
            path += ""/"" + name;
        }

        if (!op.equals(""create"")) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).entity(
                    new ZError(ui.getRequestUri().toString(), path
                            + "" bad operation "" + op)).build());
        }

        if (setNull.equals(""true"")) {
            data = null;
        }

        CreateMode createMode;
        if (sequence.equals(""true"")) {
            if (ephemeral.equals(""false"")) {
                createMode = CreateMode.PERSISTENT_SEQUENTIAL;
            } else {
                createMode = CreateMode.EPHEMERAL_SEQUENTIAL;
            }
        } else if (ephemeral.equals(""false"")) {
            createMode = CreateMode.PERSISTENT;
        } else {
            createMode = CreateMode.EPHEMERAL;
        }

        String newPath = zk.create(path, data, Ids.OPEN_ACL_UNSAFE, createMode);

        URI uri = ui.getAbsolutePathBuilder().path(newPath).build();

        return Response.created(uri).entity(
                new JSONWithPadding(new ZPath(newPath, ui.getAbsolutePath()
                        .toString()))).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,createZNodeAsOctet,"Response createZNodeAsOctet(String,String,String,String,String,UriInfo,byte[])","[339, 381]","{'A596': [(339, 346), (356, 359), (362, 374), (376, 378), (381, 381)], 'A591': [(347, 355), (360, 360), (375, 375), (379, 380)], 'A589': [(361, 361)]}","{'A596': 0.6744186046511628, 'A591': 0.3023255813953488, 'A589': 0.023255813953488372}",A596,,"    @POST
    @Produces(MediaType.APPLICATION_OCTET_STREAM)
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    public Response createZNodeAsOctet(@PathParam(""path"") String path,
            @DefaultValue(""create"") @QueryParam(""op"") String op,
            @QueryParam(""name"") String name,
            @DefaultValue(""false"") @QueryParam(""null"") String setNull,
            @DefaultValue(""false"") @QueryParam(""sequence"") String sequence,
            @Context UriInfo ui, byte[] data) throws InterruptedException,
            KeeperException {
        ensurePathNotNull(path);

        if (path.equals(""/"")) {
            path += name;
        } else {
            path += ""/"" + name;
        }

        if (!op.equals(""create"")) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).entity(
                    new ZError(ui.getRequestUri().toString(), path
                            + "" bad operation "" + op)).build());
        }

        if (setNull.equals(""true"")) {
            data = null;
        }

        CreateMode createMode;
        if (sequence.equals(""true"")) {
            createMode = CreateMode.PERSISTENT_SEQUENTIAL;
        } else {
            createMode = CreateMode.PERSISTENT;
        }

        String newPath = zk.create(path, data, Ids.OPEN_ACL_UNSAFE, createMode);

        URI uri = ui.getAbsolutePathBuilder().path(newPath).build();

        return Response.created(uri).entity(
                new ZPath(newPath, ui.getAbsolutePath().toString())).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,deleteZNode,"void deleteZNode(String,String,UriInfo)","[383, 402]","{'A596': [(383, 383), (386, 387), (390, 396), (399, 402)], 'A591': [(384, 385), (388, 389), (397, 398)]}","{'A596': 0.7, 'A591': 0.3}",A596,,"    @DELETE
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML, MediaType.APPLICATION_OCTET_STREAM })
    public void deleteZNode(@PathParam(""path"") String path,
            @DefaultValue(""-1"") @QueryParam(""version"") String versionParam,
            @Context UriInfo ui) throws InterruptedException, KeeperException {
        ensurePathNotNull(path);

        int version;
        try {
            version = Integer.parseInt(versionParam);
        } catch (NumberFormatException e) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).entity(
                    new ZError(ui.getRequestUri().toString(), path
                            + "" bad version "" + versionParam)).build());
        }

        zk.delete(path, version);
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/ZNodeResource.java,ZNodeResource,throwNotFound,"void throwNotFound(String,UriInfo)","[404, 410]","{'A596': [(404, 404), (406, 407), (410, 410)], 'A591': [(405, 405), (408, 409)]}","{'A596': 0.5714285714285714, 'A591': 0.42857142857142855}",A596,,"    private static void throwNotFound(String path, UriInfo ui)
            throws WebApplicationException {
        throw new WebApplicationException(Response.status(
                Response.Status.NOT_FOUND).entity(
                new ZError(ui.getRequestUri().toString(), path + "" not found""))
                .build());
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/SessionsResource.java,SessionsResource,keepAliveSession,"Response keepAliveSession(String,UriInfo,byte[])","[63, 76]","{'A591': [(63, 76)]}",{'A591': 1.0},A591,,"    @PUT
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML })
    @Consumes(MediaType.APPLICATION_OCTET_STREAM)
    public Response keepAliveSession(@PathParam(""session"") String session,
            @Context UriInfo ui, byte[] data) {

        if (!ZooKeeperService.isConnected(contextPath, session)) {
            throwNotFound(session, ui);
        }

        ZooKeeperService.resetTimer(contextPath, session);
        return Response.status(Response.Status.OK).build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/SessionsResource.java,SessionsResource,createSession,"Response createSession(String,String,UriInfo)","[78, 117]","{'A591': [(78, 117)]}",{'A591': 1.0},A591,,"    @POST
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML })
    public Response createSession(@QueryParam(""op"") String op,
            @DefaultValue(""5"") @QueryParam(""expire"") String expire,
            @Context UriInfo ui) {
        if (!op.equals(""create"")) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).entity(
                    new ZError(ui.getRequestUri().toString(), """")).build());
        }

        int expireInSeconds;
        try {
            expireInSeconds = Integer.parseInt(expire);
        } catch (NumberFormatException e) {
            throw new WebApplicationException(Response.status(
                    Response.Status.BAD_REQUEST).build());
        }

        String uuid = UUID.randomUUID().toString();
        while (ZooKeeperService.isConnected(contextPath, uuid)) {
            uuid = UUID.randomUUID().toString();
        }

        // establish the connection to the ZooKeeper cluster
        try {
            ZooKeeperService.getClient(contextPath, uuid, expireInSeconds);
        } catch (IOException e) {
            LOG.error(""Failed while trying to create a new session"", e);

            throw new WebApplicationException(Response.status(
                    Response.Status.INTERNAL_SERVER_ERROR).build());
        }

        URI uri = ui.getAbsolutePathBuilder().path(uuid).build();
        return Response.created(uri).entity(
                new JSONWithPadding(new ZSession(uuid, uri.toString())))
                .build();
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/SessionsResource.java,SessionsResource,deleteSession,"void deleteSession(String,UriInfo)","[119, 125]","{'A591': [(119, 125)]}",{'A591': 1.0},A591,,"    @DELETE
    @Produces( { MediaType.APPLICATION_JSON, ""application/javascript"",
            MediaType.APPLICATION_XML, MediaType.APPLICATION_OCTET_STREAM })
    public void deleteSession(@PathParam(""session"") String session,
            @Context UriInfo ui) {
        ZooKeeperService.close(contextPath, session);
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/SessionsResource.java,SessionsResource,throwNotFound,"void throwNotFound(String,UriInfo)","[127, 133]","{'A591': [(127, 133)]}",{'A591': 1.0},A591,,"    private static void throwNotFound(String session, UriInfo ui)
            throws WebApplicationException {
        throw new WebApplicationException(Response.status(
                Response.Status.NOT_FOUND).entity(
                new ZError(ui.getRequestUri().toString(), session
                        + "" not found"")).build());
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/JAXBContextResolver.java,JAXBContextResolver,getContext,JAXBContext getContext(Class<?>),"[69, 71]","{'A596': [(69, 71)]}",{'A596': 1.0},A596,,"    public JAXBContext getContext(Class<?> objectType) {
        return (typesSet.contains(objectType)) ? context : null;
    }
"
org.apache.zookeeper.server.jersey.resources,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/resources/RuntimeExceptionMapper.java,RuntimeExceptionMapper,toResponse,Response toResponse(RuntimeException),"[43, 54]","{'A596': [(43, 43), (50, 51), (53, 54)], 'A591': [(44, 49), (52, 52)]}","{'A596': 0.4166666666666667, 'A591': 0.5833333333333334}",A591,,"    public Response toResponse(RuntimeException e) {
        // don't try to handle jersey exceptions ourselves
        if (e instanceof WebApplicationException) { 
            WebApplicationException ie =(WebApplicationException) e; 
            return ie.getResponse(); 
        } 

        return Response.status(Response.Status.INTERNAL_SERVER_ERROR).entity(
                new ZError(ui.getRequestUri().toString(),
                        ""Error processing request due to "" + e
                        )).build();
    }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Credentials.java,Credentials,join,"Credentials join(Credentials,Credentials)","[25, 30]","{'A591': [(25, 30)]}",{'A591': 1.0},A591,,"   public static Credentials join(Credentials a, Credentials b) {
       Credentials result = new Credentials();
       result.putAll(a);
       result.putAll(b);
       return result;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,extractCredentials,void extractCredentials(),"[48, 52]","{'A591': [(48, 52)]}",{'A591': 1.0},A591,,"   private void extractCredentials() {
       if (cfg.containsKey(""rest.http.auth"")) {
           credentials = new Credentials(cfg.getProperty(""rest.http.auth"", """"));
       }
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,extractEndpoints,void extractEndpoints(),"[54, 81]","{'A591': [(54, 81)]}",{'A591': 1.0},A591,,"   private void extractEndpoints() {
       int count = 1;
       while (true) {
           String e = cfg.getProperty(
                   String.format(""rest.endpoint.%d"", count), null);
           if (e == null) {
               break;
           }

           String[] parts = e.split("";"");
           if (parts.length != 2) {
               count++;
               continue;
           }
           Endpoint point = new Endpoint(parts[0], parts[1]);
           
           String c = cfg.getProperty(String.format(
                   ""rest.endpoint.%d.http.auth"", count), """");
           point.setCredentials(c);
           
           String digest = cfg.getProperty(String.format(
                   ""rest.endpoint.%d.zk.digest"", count), """");
           point.setZooKeeperAuthInfo(digest);

           endpoints.add(point);
           count++;
       }
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,getPort,int getPort(),"[83, 85]","{'A591': [(83, 85)]}",{'A591': 1.0},A591,,"   public int getPort() {
       return Integer.parseInt(cfg.getProperty(""rest.port"", ""9998""));
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,useSSL,boolean useSSL(),"[87, 89]","{'A591': [(87, 89)]}",{'A591': 1.0},A591,,"   public boolean useSSL() {
       return Boolean.valueOf(cfg.getProperty(""rest.ssl"", ""false""));
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,getEndpoints,Set<Endpoint> getEndpoints(),"[91, 93]","{'A591': [(91, 93)]}",{'A591': 1.0},A591,,"   public final Set<Endpoint> getEndpoints() {
       return endpoints;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,getCredentials,Credentials getCredentials(),"[95, 97]","{'A591': [(95, 97)]}",{'A591': 1.0},A591,,"   public final Credentials getCredentials() {
       return credentials;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,getJKS,String getJKS(),"[99, 101]","{'A591': [(99, 101)]}",{'A591': 1.0},A591,,"   public String getJKS() {
       return cfg.getProperty(""rest.ssl.jks"");
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,getJKS,String getJKS(String),"[103, 105]","{'A591': [(103, 105)]}",{'A591': 1.0},A591,,"   public String getJKS(String def) {
       return cfg.getProperty(""rest.ssl.jks"", def);
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/RestCfg.java,RestCfg,getJKSPassword,String getJKSPassword(),"[107, 109]","{'A591': [(107, 109)]}",{'A591': 1.0},A591,,"   public String getJKSPassword() {
       return cfg.getProperty(""rest.ssl.jks.pass"");
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/HostPort.java,HostPort,getHost,String getHost(),"[32, 34]","{'A591': [(32, 34)]}",{'A591': 1.0},A591,,"   public String getHost() {
       return host;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/HostPort.java,HostPort,getPort,int getPort(),"[36, 38]","{'A591': [(36, 38)]}",{'A591': 1.0},A591,,"   public int getPort() {
       return port;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/HostPort.java,HostPort,equals,boolean equals(Object),"[40, 44]","{'A591': [(40, 44)]}",{'A591': 1.0},A591,,"   @Override
   public boolean equals(Object o) {
       HostPort p = (HostPort) o;
       return host.equals(p.host) && port == p.port;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/HostPort.java,HostPort,hashCode,int hashCode(),"[46, 49]","{'A591': [(46, 49)]}",{'A591': 1.0},A591,,"   @Override
   public int hashCode() {
       return String.format(""%s:%d"", host, port).hashCode();
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,getContext,String getContext(),"[33, 35]","{'A591': [(33, 35)]}",{'A591': 1.0},A591,,"   public String getContext() {
       return context;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,getHostPort,String getHostPort(),"[37, 39]","{'A591': [(37, 39)]}",{'A591': 1.0},A591,,"   public String getHostPort() {
       return hostPort.toString();
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,getCredentials,Credentials getCredentials(),"[41, 43]","{'A591': [(41, 43)]}",{'A591': 1.0},A591,,"   public Credentials getCredentials() {
       return credentials;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,setCredentials,void setCredentials(String),"[45, 47]","{'A591': [(45, 47)]}",{'A591': 1.0},A591,,"   public void setCredentials(String c) {
       this.credentials = new Credentials(c);
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,setZooKeeperAuthInfo,void setZooKeeperAuthInfo(String),"[49, 51]","{'A591': [(49, 51)]}",{'A591': 1.0},A591,,"   public void setZooKeeperAuthInfo(String digest) {
       zookeeperAuth = new Credentials(digest);
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,getZooKeeperAuthInfo,Credentials getZooKeeperAuthInfo(),"[53, 55]","{'A591': [(53, 55)]}",{'A591': 1.0},A591,,"   public final Credentials getZooKeeperAuthInfo() {
       return zookeeperAuth;
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,equals,boolean equals(Object),"[57, 61]","{'A591': [(57, 61)]}",{'A591': 1.0},A591,,"   @Override
   public boolean equals(Object o) {
       Endpoint e = (Endpoint) o;
       return context.equals(e.context);
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,hashCode,int hashCode(),"[63, 66]","{'A591': [(63, 66)]}",{'A591': 1.0},A591,,"   @Override
   public int hashCode() {
       return context.hashCode();
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/Endpoint.java,Endpoint,toString,String toString(),"[68, 71]","{'A591': [(68, 71)]}",{'A591': 1.0},A591,,"   @Override
   public String toString() {
       return String.format(""<Endpoint %s %s>"", context, hostPort.toString());
   }
"
org.apache.zookeeper.server.jersey.cfg,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/cfg/HostPortSet.java,HostPortSet,toString,String toString(),"[46, 49]","{'A591': [(46, 49)]}",{'A591': 1.0},A591,,"   @Override
   public String toString() {
       return original;
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/RestMain.java,RestMain,start,void start(),"[53, 90]","{'A591': [(53, 56), (59, 90)], 'A614': [(57, 58)]}","{'A591': 0.9473684210526315, 'A614': 0.05263157894736842}",A591,,"   public void start() throws IOException {
       System.out.println(""Starting grizzly ..."");

       boolean useSSL = cfg.useSSL();
       String zkRestResourcesTempPath = Files.createTempDirectory(""zkRestResourcesTempPath"").toFile().getCanonicalPath();
       gws = new GrizzlyWebServer(cfg.getPort(), zkRestResourcesTempPath, useSSL);
       // BUG: Grizzly needs a doc root if you are going to register multiple adapters

       for (Endpoint e : cfg.getEndpoints()) {
           ZooKeeperService.mapContext(e.getContext(), e);
           gws.addGrizzlyAdapter(createJerseyAdapter(e), new String[] { e
                   .getContext() });
       }
       
       if (useSSL) {
           System.out.println(""Starting SSL ..."");
           String jks = cfg.getJKS(""keys/rest.jks"");
           String jksPassword = cfg.getJKSPassword();

           SSLConfig sslConfig = new SSLConfig();
           URL resource = getClass().getClassLoader().getResource(jks);
           if (resource == null) {
               LOG.error(""Unable to find the keystore file: "" + jks);
               System.exit(2);
           }
           try {
               sslConfig.setKeyStoreFile(new File(resource.toURI())
                       .getAbsolutePath());
           } catch (URISyntaxException e1) {
               LOG.error(""Unable to load keystore: "" + jks, e1);
               System.exit(2);
           }
           sslConfig.setKeyStorePass(jksPassword);
           gws.setSSLConfig(sslConfig);
       }

       gws.start();
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/RestMain.java,RestMain,stop,void stop(),"[92, 95]","{'A591': [(92, 95)]}",{'A591': 1.0},A591,,"   public void stop() {
       gws.stop();
       ZooKeeperService.closeAll();
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/RestMain.java,RestMain,createJerseyAdapter,ServletAdapter createJerseyAdapter(Endpoint),"[97, 113]","{'A591': [(97, 113)]}",{'A591': 1.0},A591,,"   private ServletAdapter createJerseyAdapter(Endpoint e) {
       ServletAdapter jersey = new ServletAdapter();

       jersey.setServletInstance(new ServletContainer());
       jersey.addInitParameter(""com.sun.jersey.config.property.packages"",
               ""org.apache.zookeeper.server.jersey.resources"");
       jersey.setContextPath(e.getContext());

       Credentials c = Credentials.join(e.getCredentials(), cfg
               .getCredentials());
       if (!c.isEmpty()) {
           jersey.addFilter(new HTTPBasicAuth(c), e.getContext()
                   + ""-basic-auth"", null);
       }

       return jersey;
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/RestMain.java,RestMain,main,void main(String[]),"[119, 135]","{'A591': [(119, 135)]}",{'A591': 1.0},A591,,"   public static void main(String[] args) throws Exception {
       RestCfg cfg = new RestCfg(""rest.properties"");

       final RestMain main = new RestMain(cfg);
       main.start();

       Runtime.getRuntime().addShutdownHook(new Thread() {
           @Override
           public void run() {
               main.stop();
               System.out.println(""Got exit request. Bye."");
           }
       });

       printEndpoints(cfg);
       System.out.println(""Server started."");
   }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/RestMain.java,RestMain,run,void run(),"[126, 130]","{'A591': [(126, 130)]}",{'A591': 1.0},A591,,"           @Override
           public void run() {
               main.stop();
               System.out.println(""Got exit request. Bye."");
           }
"
org.apache.zookeeper.server.jersey,../projects/zookeeper/zookeeper-contrib/zookeeper-contrib-rest/src/main/java/org/apache/zookeeper/server/jersey/RestMain.java,RestMain,printEndpoints,void printEndpoints(RestCfg),"[137, 151]","{'A591': [(137, 151)]}",{'A591': 1.0},A591,,"   private static void printEndpoints(RestCfg cfg) {
       int port = cfg.getPort();

       for (Endpoint e : cfg.getEndpoints()) {

           String context = e.getContext();
           if (context.charAt(context.length() - 1) != '/') {
               context += ""/"";
           }

           System.out.println(String.format(
                   ""Started %s - WADL: http://localhost:%d%sapplication.wadl"",
                   context, port, context));
       }
   }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/BenchMain.java,BenchMain,main,void main(String),"[27, 29]","{'A612': [(27, 29)]}",{'A612': 1.0},A612,,"    public static void main(String args[]) throws Exception {
        org.openjdk.jmh.Main.main(args);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,setUp,void setUp(),"[56, 62]","{'A591': [(58, 62)], 'A616': [(56, 57)]}","{'A591': 0.7142857142857143, 'A616': 0.2857142857142857}",A591,,"    @Before
    public void setUp() throws Exception {
        if (!fakeMachines) {
            zk = new ZooKeeper(zkHostPort, 15000, new Watcher() {public void process(WatchedEvent e){}});
            im = new InstanceManager(zk, prefix);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,process,void process(WatchedEvent),"[59, 59]","{'A591': [(59, 59)]}",{'A591': 1.0},A591,,"            zk = new ZooKeeper(zkHostPort, 15000, new Watcher() {public void process(WatchedEvent e){}});
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,tearDown,void tearDown(),"[63, 68]","{'A591': [(68, 68)], 'A616': [(63, 67)]}","{'A591': 0.16666666666666666, 'A616': 0.8333333333333334}",A616,,"    @After
    public void tearDown() throws Exception {
        if (null != im) {
            im.close();
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,getHostPort,String getHostPort(),"[81, 83]","{'A591': [(81, 83)]}",{'A591': 1.0},A591,,"    public String getHostPort() {
        return serverHostPort;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,getServerCount,int getServerCount(),"[84, 86]","{'A591': [(84, 86)]}",{'A591': 1.0},A591,,"    public int getServerCount() {
        return serverCount;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,getClientCount,int getClientCount(),"[87, 89]","{'A591': [(87, 89)]}",{'A591': 1.0},A591,,"    public int getClientCount() {
        return clientCount;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,startServers,void startServers(),"[91, 95]","{'A591': [(91, 95)]}",{'A591': 1.0},A591,,"    public void startServers() throws IOException {
        for(int i = 0; i < serverCount; i++) {
            startServer(i);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,stopServers,void stopServers(),"[96, 100]","{'A591': [(96, 100)]}",{'A591': 1.0},A591,,"    public void stopServers() throws IOException {
        for(int i = 0; i < serverCount; i++) {
            stopServer(i);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,startClients,void startClients(),"[101, 105]","{'A591': [(101, 105)]}",{'A591': 1.0},A591,,"    public void startClients() throws IOException {
        for(int i = 0; i < clientCount; i++) {
            startClient(i);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,stopClients,void stopClients(),"[106, 110]","{'A591': [(106, 110)]}",{'A591': 1.0},A591,,"    public void stopClients() throws IOException {
        for(int i = 0; i < clientCount; i++) {
            stopClient(i);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,configureServers,void configureServers(int),"[114, 121]","{'A591': [(114, 121)]}",{'A591': 1.0},A591,,"    public void configureServers(int count) throws Exception {
        serverCount = count;
        if (fakeMachines) {
            fakeConfigureServers(count);
        } else {
            distributedConfigureServers(count);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,distributedConfigureServers,void distributedConfigureServers(int),"[123, 144]","{'A591': [(123, 127), (129, 132), (136, 144)], 'A596': [(128, 128)], 'A617': [(133, 135)]}","{'A591': 0.8181818181818182, 'A596': 0.045454545454545456, 'A617': 0.13636363636363635}",A591,,"    private void distributedConfigureServers(int count) throws IOException {
        StringBuilder sbClient = new StringBuilder();
        StringBuilder sbServer = new StringBuilder();
        try {
            for(int i = 0; i < count; i++) {
                String r[] = QuorumPeerInstance.createServer(im, i);
                if (i > 0) {
                    sbClient.append(',');
                    sbServer.append(',');
                }
                sbClient.append(r[0]); // r[0] == ""host:clientPort""
                sbServer.append(r[1]); // r[1] == ""host:leaderPort:leaderElectionPort""
                sbServer.append("";""+(r[0].split("":""))[1]); // Appending "";clientPort""
            }
            serverHostPort = sbClient.toString();
            quorumHostPort = sbServer.toString();
        } catch(Exception e) {
            IOException ioe = new IOException(e.getMessage());
            ioe.setStackTrace(e.getStackTrace());
            throw ioe;
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,fakeConfigureServers,void fakeConfigureServers(int),"[149, 176]","{'A591': [(149, 153), (160, 162), (166, 176)], 'A616': [(154, 159), (163, 164)], 'A593': [(165, 165)]}","{'A591': 0.6785714285714286, 'A616': 0.2857142857142857, 'A593': 0.03571428571428571}",A591,,"    private void fakeConfigureServers(int count) throws IOException {
        peers = new HashMap<Long,QuorumServer>();
        qps = new QuorumPeer[count];
        qpsDirs = new File[count];
        for(int i = 1; i <= count; i++) {
            InetSocketAddress peerAddress = new InetSocketAddress(""127.0.0.1"",
                    fakeBasePort + i);
            InetSocketAddress electionAddr = new InetSocketAddress(""127.0.0.1"",
                    serverCount + fakeBasePort + i);
            peers.put(Long.valueOf(i), new QuorumServer(i, peerAddress,
                    electionAddr));
        }
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < count; i++) {
            //make that testData exists otherwise it fails on windows
            testData.mkdirs();
            qpsDirs[i] = File.createTempFile(""sysTest"", "".tmp"", testData);
            qpsDirs[i].delete();
            qpsDirs[i].mkdir();
            int port = fakeBasePort+10+i;
            if (sb.length() > 0) {
                sb.append(',');
            }
            sb.append(""localhost:"");
            sb.append(port);
        }
        serverHostPort = sb.toString();
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,startServer,void startServer(int),"[182, 196]","{'A591': [(182, 184), (186, 196)], 'A618': [(185, 185)]}","{'A591': 0.9333333333333333, 'A618': 0.06666666666666667}",A591,,"    public void startServer(int index) throws IOException {
        int port = fakeBasePort+10+index;
        if (fakeMachines) {
            qps[index] = new QuorumPeer(peers, qpsDirs[index], qpsDirs[index], port, 3, index+1, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);
            qps[index].start();
        } else {
            try {
                QuorumPeerInstance.startInstance(im, quorumHostPort, index);
            } catch(Exception e) {
                IOException ioe = new IOException(e.getClass().getName() + "": "" + e.getMessage());
                ioe.setStackTrace(e.getStackTrace());
                throw ioe;
            }
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,stopServer,void stopServer(int),"[197, 209]","{'A591': [(197, 209)]}",{'A591': 1.0},A591,,"    public void stopServer(int index) throws IOException {
        if (fakeMachines) {
            qps[index].shutdown();
        } else {
            try {
                QuorumPeerInstance.stopInstance(im, index);
            } catch(Exception e) {
                IOException ioe = new IOException(e.getMessage());
                ioe.setStackTrace(e.getStackTrace());
                throw ioe;
            }
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,configureClients,"void configureClients(int,Class<? extends Instance>,String)","[211, 218]","{'A591': [(211, 218)]}",{'A591': 1.0},A591,,"    public void configureClients(int count, Class<? extends Instance> clazz, String params) throws Exception {
        clientCount = count;
        if (fakeMachines) {
            fakeConfigureClients(count, clazz, params);
        } else {
            distributedConfigureClients(count, clazz, params);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,distributedConfigureClients,"void distributedConfigureClients(int,Class<? extends Instance>,String)","[221, 225]","{'A591': [(221, 225)]}",{'A591': 1.0},A591,,"    private void distributedConfigureClients(int count, Class<? extends Instance> clazz, String params) throws IOException {
        this.clazz = clazz;
        this.params = params;

    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,fakeConfigureClients,"void fakeConfigureClients(int,Class<? extends Instance>,String)","[227, 241]","{'A591': [(228, 230), (236, 241)], 'A615': [(227, 227), (231, 235)]}","{'A591': 0.6, 'A615': 0.4}",A591,,"    private void fakeConfigureClients(int count, Class<? extends Instance> clazz, String params) {
        fakeBaseClients = new Instance[count];
        for(int i = 0; i < count; i++) {
            try {
                fakeBaseClients[i] = clazz.getConstructor().newInstance();
            } catch (InstantiationException
                    | IllegalAccessException
                    | NoSuchMethodException
                    | InvocationTargetException e) {
                e.printStackTrace();
                return;
            }
            fakeBaseClients[i].configure(i + "" "" + params);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,startClient,void startClient(int),"[242, 248]","{'A591': [(242, 248)]}",{'A591': 1.0},A591,,"    public void startClient(int index) throws IOException {
        if (fakeMachines) {
            fakeStartClient(index);
        } else {
            distributedStartClient(index);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,distributedStartClient,void distributedStartClient(int),"[249, 255]","{'A591': [(249, 255)]}",{'A591': 1.0},A591,,"    private void distributedStartClient(int index) throws IOException {
        try {
            im.assignInstance(""client"" + index, clazz, index + "" "" + params, 1);
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,fakeStartClient,void fakeStartClient(int),"[256, 258]","{'A591': [(256, 258)]}",{'A591': 1.0},A591,,"    private void fakeStartClient(int index) {
        fakeBaseClients[index].start();
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,stopClient,void stopClient(int),"[259, 265]","{'A591': [(259, 265)]}",{'A591': 1.0},A591,,"    public void stopClient(int index) throws IOException {
        if (fakeMachines) {
            fakeStopClient(index);
        } else {
            distributedStopClient(index);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,distributedStopClient,void distributedStopClient(int),"[266, 272]","{'A591': [(266, 272)]}",{'A591': 1.0},A591,,"    private void distributedStopClient(int index) throws IOException {
        try {
            im.removeInstance(""client""+index);
        } catch (Exception e) {
            throw new IOException(e.getMessage());
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,fakeStopClient,void fakeStopClient(int),"[273, 275]","{'A591': [(273, 275)]}",{'A591': 1.0},A591,,"    private void fakeStopClient(int index) {
        fakeBaseClients[index].stop();
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/BaseSysTest.java,BaseSysTest,main,void main(String),"[277, 279]","{'A591': [(277, 279)]}",{'A591': 1.0},A591,,"    static public void main(String args[]) {
        JUnitCore.main(args);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,add,"void add(long,int,Socket)","[86, 102]","{'A596': [(86, 88), (91, 102)], 'A583': [(90, 90)], 'A619': [(89, 89)]}","{'A596': 0.8823529411764706, 'A583': 0.058823529411764705, 'A619': 0.058823529411764705}",A596,,"    synchronized static void add(long time, int count, Socket s) {
        long interval = time / INTERVAL;
        if (currentInterval == 0 || currentInterval > interval) {
            LOG.info(
                ""Dropping "" + count + "" for "" + new Date(time)
                    + "" "" + currentInterval + "">"" + interval);
            return;
        }
        // We track totals by seconds
        Long total = totalByTime.get(interval);
        if (total == null) {
            totalByTime.put(interval, (long) count);
        } else {
            totalByTime.put(interval, total.longValue() + count);
        }
        tf.println(interval + "" "" + count + "" "" + s);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,remove,long remove(long),"[104, 107]","{'A596': [(104, 107)]}",{'A596': 1.0},A596,,"    synchronized static long remove(long interval) {
        Long total = totalByTime.remove(interval);
        return total == null ? -1 : total;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.SlaveThread,run,void run(),"[118, 145]","{'A596': [(118, 119), (121, 126), (128, 135), (137, 145)], 'A619': [(120, 120), (127, 127), (136, 136)]}","{'A596': 0.8928571428571429, 'A619': 0.10714285714285714}",A596,,"        public void run() {
            try {
                LOG.info(""Connected to "" + s);
                BufferedReader is = new BufferedReader(new InputStreamReader(s
                        .getInputStream()));
                String result;
                while ((result = is.readLine()) != null) {
                    String timePercentCount[] = result.split("" "");
                    if (timePercentCount.length != 5) {
                        LOG.error(""Got "" + result + "" from "" + s
                                + "" exitng."");
                        throw new IOException(result);
                    }
                    long time = Long.parseLong(timePercentCount[0]);
                    // int percent = Integer.parseInt(timePercentCount[1]);
                    int count = Integer.parseInt(timePercentCount[2]);
                    int errs = Integer.parseInt(timePercentCount[3]);
                    if (errs > 0) {
                        LOG.error(s + "" Got an error! "" + errs);
                    }
                    add(time, count, s);
                }
            } catch (Exception e) {
                e.printStackTrace();
            } finally {
                close();
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.SlaveThread,send,void send(int),"[147, 153]","{'A596': [(147, 153)]}",{'A596': 1.0},A596,,"        void send(int percentage) {
            try {
                s.getOutputStream().write((percentage + ""\n"").getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.SlaveThread,close,void close(),"[155, 163]","{'A596': [(155, 156), (158, 163)], 'A619': [(157, 157)]}","{'A596': 0.8888888888888888, 'A619': 0.1111111111111111}",A596,,"        void close() {
            try {
                LOG.info(""Closing "" + s);
                slaves.remove(this);
                s.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.AcceptorThread,run,void run(),"[172, 188]","{'A596': [(172, 175), (177, 188)], 'A619': [(176, 176)]}","{'A596': 0.9411764705882353, 'A619': 0.058823529411764705}",A596,,"        public void run() {
            try {
                while (true) {
                    Socket s = ss.accept();
                    LOG.info(""Accepted connection from "" + s);
                    slaves.add(new SlaveThread(s));
                }
            } catch (IOException e) {
                e.printStackTrace();
            } finally {
                for (Iterator<SlaveThread> it = slaves.iterator(); it.hasNext();) {
                    SlaveThread st = it.next();
                    it.remove();
                    st.close();
                }
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.ReporterThread,run,void run(),"[199, 252]","{'A596': [(199, 200), (202, 208), (210, 236), (238, 252)], 'A593': [(201, 201), (209, 209)], 'A619': [(237, 237)]}","{'A596': 0.9444444444444444, 'A593': 0.037037037037037035, 'A619': 0.018518518518518517}",A596,,"        public void run() {
            try {
                currentInterval = Time.currentElapsedTime() / INTERVAL;
                // Give things time to report;
                Thread.sleep(INTERVAL * 2);
                long min = 99999;
                long max = 0;
                long total = 0;
                int number = 0;
                while (true) {
                    long now = Time.currentElapsedTime();
                    long lastInterval = currentInterval;
                    currentInterval += 1;
                    long count = remove(lastInterval);
                    count = count * 1000 / INTERVAL; // Multiply by 1000 to get
                                                     // reqs/sec
                    if (lastChange != 0
                            && (lastChange + INTERVAL * 3) < now) {
                        // We only want to print anything if things have had a
                        // chance to change

                        if (count < min) {
                            min = count;
                        }
                        if (count > max) {
                            max = count;
                        }
                        total += count;
                        number++;
                        Calendar calendar = Calendar.getInstance();
                        calendar.setTimeInMillis(lastInterval * INTERVAL);
                        String report = lastInterval + "" ""
                                + calendar.get(Calendar.HOUR_OF_DAY) + "":""
                                + calendar.get(Calendar.MINUTE) + "":""
                                + calendar.get(Calendar.SECOND) + "" ""
                                + percentage + ""% "" + count + "" "" + min + "" ""
                                + ((double) total / (double) number) + "" ""
                                + max;
                        LOG.info(report);
                        if (sf != null) {
                            sf.println(report);
                        }
                    } else {
                        max = total = 0;
                        min = 999999999;
                        number = 0;
                    }
                    Thread.sleep(INTERVAL);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,sendChange,void sendChange(int),"[255, 268]","{'A596': [(255, 255), (257, 261), (263, 264), (266, 268)], 'A593': [(256, 256), (262, 262)], 'A619': [(265, 265)]}","{'A596': 0.7857142857142857, 'A593': 0.14285714285714285, 'A619': 0.07142857142857142}",A596,,"    synchronized static void sendChange(int percentage) {
        long now = Time.currentElapsedTime();
        long start = now;
        ReporterThread.percentage = percentage;
        for (SlaveThread st : slaves.toArray(new SlaveThread[0])) {
            st.send(percentage);
        }
        now = Time.currentElapsedTime();
        long delay = now - start;
        if (delay > 1000) {
            LOG.info(""Delay of "" + delay + "" to send new percentage"");
        }
        lastChange = now;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.ZooKeeperThread,incOutstanding,void incOutstanding(),"[307, 312]","{'A596': [(307, 312)]}",{'A596': 1.0},A596,,"            synchronized void incOutstanding() throws InterruptedException {
                outstanding++;
                while (outstanding > outstandingLimit) {
                    wait();
                }
            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.ZooKeeperThread,decOutstanding,void decOutstanding(),"[314, 317]","{'A596': [(314, 317)]}",{'A596': 1.0},A596,,"            synchronized void decOutstanding() {
                outstanding--;
                notifyAll();
            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.ZooKeeperThread,run,void run(),"[327, 370]","{'A596': [(327, 346), (348, 370)], 'A619': [(347, 347)]}","{'A596': 0.9772727272727273, 'A619': 0.022727272727272728}",A596,,"            public void run() {
                try {
                    zk = new ZooKeeper(host, 60000, this);
                    synchronized (this) {
                        if (!connected) {
                            wait(20000);
                        }
                    }
                    for (int i = 0; i < 300; i++) {
                        try {
                            Thread.sleep(100);
                            path = zk.create(""/client"", new byte[16],
                                    Ids.OPEN_ACL_UNSAFE,
                                    CreateMode.EPHEMERAL_SEQUENTIAL);
                            break;
                        } catch (KeeperException e) {
                            LOG.error(""keeper exception thrown"", e);
                        }
                    }
                    if (path == null) {
                        LOG.error(""Couldn't create a node in /!"");
                        return;
                    }
                    while (alive) {
                        if (r.nextInt(100) < percentage) {
                            zk.setData(path, bytes, -1, this, System
                                    .currentTimeMillis());
                        } else {
                            zk.getData(path, false, this, System
                                    .currentTimeMillis());
                        }
                        incOutstanding();
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {
                    alive = false;
                    try {
                        zk.close();
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.ZooKeeperThread,process,void process(WatchedEvent),"[372, 380]","{'A596': [(372, 372), (374, 380)], 'A619': [(373, 373)]}","{'A596': 0.8888888888888888, 'A619': 0.1111111111111111}",A596,,"            public void process(WatchedEvent event) {
                LOG.info(event.toString());
                synchronized (this) {
                    if (event.getType() == EventType.None) {
                        connected = (event.getState() == KeeperState.SyncConnected);
                        notifyAll();
                    }
                }
            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.ZooKeeperThread,processResult,"void processResult(int,String,Object,byte[],Stat)","[382, 398]","{'A596': [(382, 389), (391, 393), (395, 398)], 'A593': [(394, 394)], 'A619': [(390, 390)]}","{'A596': 0.8823529411764706, 'A593': 0.058823529411764705, 'A619': 0.058823529411764705}",A596,,"            public void processResult(int rc, String path, Object ctx, byte[] data,
                    Stat stat) {
                decOutstanding();
                synchronized (statSync) {
                    if (!alive) {
                        return;
                    }
                    if (rc != 0) {
                        LOG.info(""Got rc = "" + rc);
                        errors++;
                    } else {
                        finished++;
                        rlatency += Time.currentElapsedTime() - (Long) ctx;
                        reads++;
                    }
                }
            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.ZooKeeperThread,processResult,"void processResult(int,String,Object,Stat)","[400, 412]","{'A596': [(400, 403), (405, 407), (409, 412)], 'A593': [(408, 408)], 'A619': [(404, 404)]}","{'A596': 0.8461538461538461, 'A593': 0.07692307692307693, 'A619': 0.07692307692307693}",A596,,"            public void processResult(int rc, String path, Object ctx, Stat stat) {
                decOutstanding();
                synchronized (statSync) {
                    if (rc != 0) {
                        LOG.info(""Got rc = "" + rc);
                        errors++;
                    } else {
                        finished++;
                        wlatency += Time.currentElapsedTime() - (Long) ctx;
                        writes++;
                    }
                }
            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance.SenderThread,run,void run(),"[424, 454]","{'A596': [(424, 433), (435, 454)], 'A593': [(434, 434)]}","{'A596': 0.967741935483871, 'A593': 0.03225806451612903}",A596,,"            public void run() {
                try {
                    OutputStream os = s.getOutputStream();
                    finished = 0;
                    errors = 0;
                    while (alive) {
                        Thread.sleep(300);
                        if (percentage == -1 || (finished == 0 && errors == 0)) {
                            continue;
                        }
                        String report = Time.currentElapsedTime() + "" ""
                                + percentage + "" "" + finished + "" "" + errors + "" ""
                                + outstanding + ""\n"";
                       /* String subreport = reads + "" ""
                                + (((double) rlatency) / reads) + "" "" + writes
                                + "" "" + (((double) wlatency / writes)); */
                        synchronized (statSync) {
                            finished = 0;
                            errors = 0;
                            reads = 0;
                            writes = 0;
                            rlatency = 0;
                            wlatency = 0;
                        }
                        os.write(report.getBytes());
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance,configure,void configure(String),"[462, 493]","{'A596': [(462, 462), (464, 472), (475, 493)], 'A619': [(463, 463), (473, 474)]}","{'A596': 0.90625, 'A619': 0.09375}",A596,,"        public void configure(final String params) {
            LOG.info(""Got "" + params);
            new Thread() {
                public void run() {
                    try {
                        String parts[] = params.split("" "");
                        String hostPort[] = parts[1].split("":"");
                        int bytesSize = 1024;
                        if (parts.length == 3) {
                            try {
                                bytesSize = Integer.parseInt(parts[2]);
                            } catch (Exception e) {
                                LOG.error(""Not an integer: "" + parts[2]);
                            }
                        }
                        bytes = new byte[bytesSize];
                        s = new Socket(hostPort[0], Integer.parseInt(hostPort[1]));
                        zkThread = new ZooKeeperThread(parts[0]);
                        sendThread = new SenderThread(s);
                        BufferedReader is = new BufferedReader(new InputStreamReader(s
                                .getInputStream()));
                        String line;
                        while ((line = is.readLine()) != null) {
                            percentage = Integer.parseInt(line);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }.start();

        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance,run,void run(),"[465, 490]","{'A596': [(465, 472), (475, 490)], 'A619': [(473, 474)]}","{'A596': 0.9230769230769231, 'A619': 0.07692307692307693}",A596,,"                public void run() {
                    try {
                        String parts[] = params.split("" "");
                        String hostPort[] = parts[1].split("":"");
                        int bytesSize = 1024;
                        if (parts.length == 3) {
                            try {
                                bytesSize = Integer.parseInt(parts[2]);
                            } catch (Exception e) {
                                LOG.error(""Not an integer: "" + parts[2]);
                            }
                        }
                        bytes = new byte[bytesSize];
                        s = new Socket(hostPort[0], Integer.parseInt(hostPort[1]));
                        zkThread = new ZooKeeperThread(parts[0]);
                        sendThread = new SenderThread(s);
                        BufferedReader is = new BufferedReader(new InputStreamReader(s
                                .getInputStream()));
                        String line;
                        while ((line = is.readLine()) != null) {
                            percentage = Integer.parseInt(line);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance,setReporter,void setReporter(Reporter),"[495, 497]","{'A596': [(495, 497)]}",{'A596': 1.0},A596,,"        public void setReporter(Reporter r) {
            this.r = r;
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance,start,void start(),"[499, 505]","{'A596': [(499, 505)]}",{'A596': 1.0},A596,,"        public void start() {
            try {
                r.report(""started"");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.GeneratorInstance,stop,void stop(),"[507, 531]","{'A596': [(507, 531)]}",{'A596': 1.0},A596,,"        public void stop() {
            alive = false;
            zkThread.interrupt();
            sendThread.interrupt();
            try {
                zkThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            try {
                sendThread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            try {
                r.report(""stopped"");
            } catch (Exception e) {
                e.printStackTrace();
            }
            try {
                s.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.StatusWatcher,process,void process(WatchedEvent),"[538, 545]","{'A596': [(538, 545)]}",{'A596': 1.0},A596,,"        public void process(WatchedEvent event) {
            if (event.getType() == Watcher.Event.EventType.None) {
                synchronized (this) {
                    connected = event.getState() == Watcher.Event.KeeperState.SyncConnected;
                    notifyAll();
                }
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad.StatusWatcher,waitConnected,boolean waitConnected(long),"[547, 554]","{'A596': [(547, 548), (552, 554)], 'A593': [(549, 551)]}","{'A596': 0.625, 'A593': 0.375}",A596,,"        synchronized public boolean waitConnected(long timeout)
                throws InterruptedException {
            long endTime = Time.currentElapsedTime() + timeout;
            while (!connected && Time.currentElapsedTime() < endTime) {
                wait(endTime - Time.currentElapsedTime());
            }
            return connected;
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,processOptions,String [] processOptions(String),"[560, 573]","{'A596': [(560, 573)]}",{'A596': 1.0},A596,,"    private static String []processOptions(String args[]) {
        ArrayList<String> newArgs = new ArrayList<String>();
        for(String a: args) {
            if (a.equals(""--leaderOnly"")) {
                leaderOnly = true;
                leaderServes = true;
            } else if (a.equals(""--leaderServes"")) {
                leaderServes = true;
            } else {
                newArgs.add(a);
            }
        }
        return newArgs.toArray(new String[0]);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,main,void main(String[]),"[583, 693]","{'A596': [(583, 592), (594, 608), (612, 628), (630, 672), (677, 678), (680, 686), (688, 693)], 'A609': [(687, 687)], 'A619': [(593, 593), (629, 629), (673, 676), (679, 679)], 'A617': [(609, 611)]}","{'A596': 0.9009009009009009, 'A609': 0.009009009009009009, 'A619': 0.06306306306306306, 'A617': 0.02702702702702703}",A596,,"    public static void main(String[] args) throws InterruptedException,
            KeeperException, NoAvailableContainers, DuplicateNameException,
            NoAssignmentException {

        args = processOptions(args);
        if (args.length == 5) {
            try {
                StatusWatcher statusWatcher = new StatusWatcher();
                ZooKeeper zk = new ZooKeeper(args[0], 15000, statusWatcher);
                if (!statusWatcher.waitConnected(5000)) {
                    LOG.error(""Could not connect to "" + args[0]);
                    return;
                }
                InstanceManager im = new InstanceManager(zk, args[1]);
                ss = new ServerSocket(0);
                int port = ss.getLocalPort();
                int serverCount = Integer.parseInt(args[2]);
                int clientCount = Integer.parseInt(args[3]);
                StringBuilder quorumHostPort = new StringBuilder();
                StringBuilder zkHostPort = new StringBuilder();
                for (int i = 0; i < serverCount; i++) {
                    String r[] = QuorumPeerInstance.createServer(im, i, leaderServes);
                    if (i > 0) {
                        quorumHostPort.append(',');
                        zkHostPort.append(',');
                    }
                    zkHostPort.append(r[0]);     // r[0] == ""host:clientPort""
                    quorumHostPort.append(r[1]); // r[1] == ""host:leaderPort:leaderElectionPort""
                    quorumHostPort.append("";""+(r[0].split("":""))[1]); // Appending "";clientPort""
                }
                for (int i = 0; i < serverCount; i++) {
                    QuorumPeerInstance.startInstance(im, quorumHostPort
                            .toString(), i);
                }
                if (leaderOnly) {
                    int tries = 0;
                    outer:
                        while(true) {
                            Thread.sleep(1000);
                            IOException lastException = null;
                            String parts[] = zkHostPort.toString().split("","");
                            for(int i = 0; i < parts.length; i++) {
                                try {
                                    String mode = getMode(parts[i]);
                                    if (mode.equals(""leader"")) {
                                        zkHostPort = new StringBuilder(parts[i]);
                                        LOG.info(""Connecting exclusively to "" + zkHostPort.toString());
                                        break outer;
                                    }
                                } catch(IOException e) {
                                    lastException = e;
                                }
                            }
                            if (tries++ > 3) {
                                throw lastException;
                            }
                        }
                }
                for (int i = 0; i < clientCount; i++) {
                    im.assignInstance(""client"" + i, GeneratorInstance.class,
                            zkHostPort.toString()
                                    + ' '
                                    + InetAddress.getLocalHost()
                                            .getCanonicalHostName() + ':'
                                    + port, 1);
                }
                new AcceptorThread();
                new ReporterThread();
                BufferedReader is = new BufferedReader(new InputStreamReader(
                        System.in));
                String line;
                while ((line = is.readLine()) != null) {
                    try {
                        String cmdNumber[] = line.split("" "");
                        if (cmdNumber[0].equals(""percentage"")
                                && cmdNumber.length > 1) {
                            int number = Integer.parseInt(cmdNumber[1]);
                            if (number < 0 || number > 100) {
                                throw new NumberFormatException(
                                        ""must be between 0 and 100"");
                            }
                            sendChange(number);
                        } else if (cmdNumber[0].equals(""sleep"")
                                && cmdNumber.length > 1) {
                            int number = Integer.parseInt(cmdNumber[1]);
                            Thread.sleep(number * 1000);
                        } else if (cmdNumber[0].equals(""save"")
                                && cmdNumber.length > 1) {
                            sf = new PrintStream(cmdNumber[1]);
                        } else {
                            LOG.error(""Commands must be:"");
                            LOG.error(""\tpercentage new_write_percentage"");
                            LOG.error(""\tsleep seconds_to_sleep"");
                            LOG.error(""\tsave file_to_save_output"");
                        }
                    } catch (NumberFormatException e) {
                        LOG.error(""Not a valid number: ""
                                + e.getMessage());
                    }
                }
            } catch (NumberFormatException e) {
                doUsage();
            } catch (IOException e) {
                e.printStackTrace();
                System.exit(ExitCode.INVALID_INVOCATION.getValue());
            }
        } else {
            doUsage();
        }

    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,getMode,String getMode(String),"[695, 711]","{'A596': [(695, 700), (703, 703), (705, 705), (710, 711)], 'A597': [(701, 702), (704, 704), (706, 709)]}","{'A596': 0.5882352941176471, 'A597': 0.4117647058823529}",A596,,"    private static String getMode(String hostPort) throws NumberFormatException, UnknownHostException, IOException {
        String parts[] = hostPort.split("":"");
        Socket s = new Socket(parts[0], Integer.parseInt(parts[1]));
        s.getOutputStream().write(""stat"".getBytes());
        BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream()));
        String line;
        try {
          while((line = br.readLine()) != null) {
            if (line.startsWith(""Mode: "")) {
              return line.substring(6);
            }
          }
          return ""unknown"";
        } finally {
          s.close();
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/GenerateLoad.java,GenerateLoad,doUsage,void doUsage(),"[713, 717]","{'A596': [(713, 715), (717, 717)], 'A609': [(716, 716)]}","{'A596': 0.8, 'A609': 0.2}",A596,,"    private static void doUsage() {
        System.err.println(""USAGE: "" + GenerateLoad.class.getName()
                + "" [--leaderOnly] [--leaderServes] zookeeper_host:port containerPrefix #ofServers #ofClients requestSize"");
        System.exit(ExitCode.INVALID_INVOCATION.getValue());
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleSysTest.java,SimpleSysTest,waitForConnect,"boolean waitForConnect(ZooKeeper,long)","[49, 57]","{'A591': [(49, 50), (53, 57)], 'A593': [(51, 52)]}","{'A591': 0.7777777777777778, 'A593': 0.2222222222222222}",A591,,"    synchronized private boolean waitForConnect(ZooKeeper zk, long timeout) throws InterruptedException {
        connected = (zk.getState() == States.CONNECTED);
        long end = Time.currentElapsedTime() + timeout;
        while(!connected && end > Time.currentElapsedTime()) {
            wait(timeout);
            connected = (zk.getState() == States.CONNECTED);
        }
        return connected;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleSysTest.java,SimpleSysTest,testSimpleCase,void testSimpleCase(),"[69, 158]","{'A591': [(69, 79), (81, 85), (87, 88), (90, 94), (96, 102), (104, 106), (108, 116), (118, 120), (122, 122), (124, 126), (128, 131), (133, 136), (138, 139), (141, 146), (148, 154), (156, 158)], 'A616': [(86, 86), (89, 89), (103, 103), (107, 107), (117, 117), (121, 121), (132, 132), (147, 147)], 'A583': [(80, 80), (95, 95), (123, 123), (127, 127), (137, 137), (140, 140), (155, 155)]}","{'A591': 0.8333333333333334, 'A616': 0.08888888888888889, 'A583': 0.07777777777777778}",A591,,"    @Test
    public void testSimpleCase() throws Exception {
        configureServers(serverCount);
        configureClients(clientCount, SimpleClient.class, getHostPort());
        Stat stat = new Stat();
        startServers();
        LOG.debug(""Connecting to "" + getHostPort());
        ZooKeeper zk = new ZooKeeper(getHostPort(), 15000, this);
        waitForConnect(zk, 10000);
        zk.create(""/simpleCase"", ""orig"".getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        startClients();

        // Check that all clients connect properly
        for(int i = 0; i < getClientCount(); i++) {
            for(int j = 0; j < maxTries; j++) {
                try {
                    byte b[] = zk.getData(""/simpleCase/"" + i, false, stat);
                    Assert.assertEquals(""orig"", new String(b));
                } catch(NoNodeException e) {
                    if (j+1 == maxTries) {
                        Assert.fail(""Max tries exceeded on client "" + i);
                    }
                    Thread.sleep(1000);
                }
            }
        }

        // Kill half the servers, make a change, restart the dead
        // servers, and then bounce the other servers one by one
        for(int i = 0; i < getServerCount(); i++) {
            stopServer(i);
            if (i+1 > getServerCount()/2) {
                startServer(i);
            } else if (i+1 == getServerCount()/2) {
                Assert.assertTrue(""Connection didn't recover"", waitForConnect(zk, 10000));
                try {
                    zk.setData(""/simpleCase"", ""new"".getBytes(), -1);
                } catch(ConnectionLossException e) {
                    Assert.assertTrue(""Connection didn't recover"", waitForConnect(zk, 10000));
                    zk.setData(""/simpleCase"", ""new"".getBytes(), -1);
                }
                for(int j = 0; j < i; j++) {
                    LOG.info(""Starting server "" + j);
                    startServer(i);
                }
            }
        }
        Thread.sleep(100); // wait for things to stabilize
        Assert.assertTrue(""Servers didn't bounce"", waitForConnect(zk, 15000));
        try {
            zk.getData(""/simpleCase"", false, stat);
        } catch(ConnectionLossException e) {
            Assert.assertTrue(""Servers didn't bounce"", waitForConnect(zk, 15000));
        }

        // check that the change has propagated to everyone
        for(int i = 0; i < getClientCount(); i++) {
            for(int j = 0; j < maxTries; j++) {
                byte[] data = zk.getData(""/simpleCase/"" + i, false, stat);
                if (new String(data).equals(""new"")) {
                    break;
                }
                if (j+1 == maxTries) {
                    Assert.fail(""max tries exceeded for "" + i);
                }
                Thread.sleep(1000);
            }
        }

        // send out the kill signal
        zk.setData(""/simpleCase"", ""die"".getBytes(), -1);

        // watch for everyone to die
        for(int i = 0; i < getClientCount(); i++) {
            try {
                for(int j = 0; j < maxTries; j++) {
                    zk.getData(""/simpleCase/"" + i, false, stat);
                    if (j+1 == maxTries) {
                        Assert.fail(""max tries exceeded waiting for child "" + i + "" to die"");
                    }
                    Thread.sleep(200);
                }
            } catch(NoNodeException e) {
                // Great this is what we were hoping for!
            }
        }

        stopClients();
        stopServers();
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleSysTest.java,SimpleSysTest,process,void process(WatchedEvent),"[160, 172]","{'A591': [(160, 172)]}",{'A591': 1.0},A591,,"    public void process(WatchedEvent event) {
        if (event.getState() == KeeperState.SyncConnected) {
            synchronized(this) {
                connected = true;
                notifyAll();
            }
        } else if (event.getState() == KeeperState.Disconnected) {
            synchronized(this) {
                connected = false;
                notifyAll();
            }
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,setupNodes,void setupNodes(ZooKeeper),"[113, 130]","{'A591': [(113, 116), (118, 119), (122, 122), (125, 125), (127, 128), (130, 130)], 'A583': [(117, 117), (120, 121), (123, 124), (126, 126), (129, 129)]}","{'A591': 0.6111111111111112, 'A583': 0.3888888888888889}",A591,,"    private void setupNodes(ZooKeeper zk) throws KeeperException,
            InterruptedException {
        try {
            zk.create(prefixNode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        } catch(NodeExistsException e) { /* this is ok */ }
        try {
            zk.create(assignmentsNode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        } catch(NodeExistsException e) { /* this is ok */ }
        try {
            zk.create(statusNode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        } catch(NodeExistsException e) { /* this is ok */ }
        try {
            zk.create(reportsNode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        } catch(NodeExistsException e) { /* this is ok */ }
        try {
            zk.create(readyNode, new byte[0], Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
        } catch(NodeExistsException e) { /* this is ok */ }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,processResult,"void processResult(int,String,Object,List<String>)","[132, 161]","{'A591': [(132, 140), (142, 161)], 'A603': [(141, 141)]}","{'A591': 0.9666666666666667, 'A603': 0.03333333333333333}",A591,,"    synchronized public void processResult(int rc, String path, Object ctx,
            List<String> children) {
        if (rc != KeeperException.Code.OK.intValue()) {
            zk.getChildren(statusNode, this, this, null);
            return;
        }
        if (LOG.isDebugEnabled()) {
            LOG.debug(""Got "" + children + "" children from "" + path);
        }
        Map<String, HashSet<Assigned>> newAssignments = new HashMap<String, HashSet<Assigned>>();
        for(String c: children) {
            HashSet<Assigned> a = assignments.remove(c);
            if (a != null) {
                newAssignments.put(c, a);
            } else {
                newAssignments.put(c, new HashSet<Assigned>());
            }
        }
        // Clean up the dead machines
        for(String dead: assignments.keySet()) {
            try {
                removeInstance(dead);
            } catch (KeeperException e) {
                e.printStackTrace();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
        assignments = newAssignments;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,process,void process(WatchedEvent),"[163, 167]","{'A591': [(163, 167)]}",{'A591': 1.0},A591,,"    public void process(WatchedEvent event) {
        if (event.getPath().equals(statusNode)) {
            zk.getChildren(statusNode, this, this, null);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,assignInstance,"String assignInstance(String,Class<? extends Instance>,String,int)","[168, 226]","{'A591': [(168, 179), (193, 226)], 'A596': [(180, 192)]}","{'A591': 0.7796610169491526, 'A596': 0.22033898305084745}",A591,,"    synchronized public String assignInstance(String name, Class<? extends Instance> clazz, String params, int weight) throws NoAvailableContainers, DuplicateNameException, InterruptedException, KeeperException {
        if (weight < 1) {
            // if the weights are not above zero, things will get messed up
            weight = 1;
        }
        String instanceSpec = clazz.getName() + ' ' + params;
        if (instanceToAssignment.get(name) != null) {
            throw new DuplicateNameException(name + "" already exists"");
        }
        // find most idle node
        String mostIdle = null;
        int mostIdleWeight = Integer.MAX_VALUE;
        for(String preferred: preferredList) {
            HashSet<Assigned> assignmentList = assignments.get(preferred);
            int w = 0;
            if (assignmentList != null) {
                for(Assigned a: assignmentList) {
                    w += a.weight;
                }
                if (w < mostIdleWeight) {
                    mostIdleWeight = w;
                    mostIdle = preferred;
                }
            }
        }
        for(Entry<String, HashSet<Assigned>> e: assignments.entrySet()) {
            int w = 0;
            for(Assigned a: e.getValue()) {
                w += a.weight;
            }
            if (w < mostIdleWeight) {
                mostIdleWeight = w;
                mostIdle = e.getKey();
            }
        }
        if (mostIdle == null) {
            throw new NoAvailableContainers(""No available containers"");
        }
        Assigned a = new Assigned(mostIdle, weight);
        instanceToAssignment.put(name, a);
        HashSet<Assigned> as = assignments.get(mostIdle);
        if (as == null) {
            as = new HashSet<Assigned>();
            assignments.put(mostIdle, as);
        }
        as.add(a);
        KeeperException lastException = null;
        for(int i = 0; i < maxTries; i++) {
            try {
                zk.create(assignmentsNode + '/' + mostIdle + '/' + name, instanceSpec.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
                return mostIdle;
            } catch(NodeExistsException e) {
                return mostIdle;
            } catch (KeeperException e) {
                lastException = e;
            }
        }
        throw lastException;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,reconfigureInstance,"void reconfigureInstance(String,String)","[228, 248]","{'A591': [(228, 248)]}",{'A591': 1.0},A591,,"    public void reconfigureInstance(String name, String params) throws NoAssignmentException, InterruptedException, KeeperException {
        if (LOG.isDebugEnabled()) {
            LOG.debug(""Reconfiguring "" + name + "" with "" + params);
        }
        Assigned assigned = instanceToAssignment.get(name);
        if (assigned == null) {
            throw new NoAssignmentException();
        }
        KeeperException lastException = null;
        for(int i = 0; i < maxTries; i++) {
            try {
                zk.setData(assignmentsNode + '/' + assigned.container + '/' + name, (""update "" + params).getBytes(), -1);
                break;
            } catch (ConnectionLossException e) {
                lastException = e;
            }
        }
        if (lastException != null) {
            throw lastException;
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,doDelete,void doDelete(String),"[250, 263]","{'A591': [(250, 263)]}",{'A591': 1.0},A591,,"    private void doDelete(String path) throws InterruptedException, KeeperException {
        KeeperException lastException = null;
        for(int i = 0; i < maxTries; i++) {
            try {
                zk.delete(path, -1);
                return;
            } catch(NoNodeException e) {
                return;
            } catch (KeeperException e) {
                lastException = e;
            }
        }
        throw lastException;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,removeInstance,void removeInstance(String),"[264, 272]","{'A591': [(264, 272)]}",{'A591': 1.0},A591,,"    synchronized public void removeInstance(String name) throws InterruptedException, KeeperException {
        Assigned assigned = instanceToAssignment.remove(name);
        if (assigned == null) {
            return;
        }
        assignments.get(assigned.container).remove(name);
        doDelete(assignmentsNode + '/' + assigned.container + '/' + name);
        doDelete(reportsNode + '/' + name);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,isAlive,boolean isAlive(String),"[274, 276]","{'A591': [(274, 276)]}",{'A591': 1.0},A591,,"    synchronized boolean isAlive(String name) {
        return instanceToAssignment.get(name) != null;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,resetStatus,void resetStatus(String),"[278, 294]","{'A591': [(278, 294)]}",{'A591': 1.0},A591,,"    public void resetStatus(String name) throws InterruptedException, KeeperException {
        KeeperException lastException = null;
        for(int i = 0; i < maxTries; i++) {
            try {
                zk.delete(reportsNode + '/' + name, -1);
                lastException = null;
                break;
            } catch(ConnectionLossException e) {
                lastException = e;
            } catch(NoNodeException e) {
                // great this is what we want!
            }
        }
        if (lastException != null) {
            throw lastException;
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,getStatus,"String getStatus(String,long)","[296, 332]","{'A591': [(296, 297), (300, 300), (302, 321), (323, 332)], 'A593': [(299, 299), (301, 301), (322, 322)], 'A583': [(298, 298)]}","{'A591': 0.8918918918918919, 'A593': 0.08108108108108109, 'A583': 0.02702702702702703}",A591,,"    public String getStatus(String name, long timeout) throws KeeperException, InterruptedException {
        Stat stat = new Stat();
        byte[] data = null;
        long endTime = Time.currentElapsedTime() + timeout;
        KeeperException lastException = null;
        for(int i = 0; i < maxTries && endTime > Time.currentElapsedTime(); i++) {
            try {
                data = zk.getData(reportsNode + '/' + name, false, stat);
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Got Data: "" + ((data == null) ? ""null"" : new String(data)));
                }
                lastException = null;
                break;
            } catch(ConnectionLossException e) {
                lastException = e;
            } catch(NoNodeException e) {
                final Object eventObj = new Object();
                synchronized(eventObj) {
                    // wait for the node to appear
                    Stat eStat = zk.exists(reportsNode + '/' + name, new Watcher() {
                        public void process(WatchedEvent event) {
                            synchronized(eventObj) {
                                eventObj.notifyAll();
                            }
                        }});
                    if (eStat == null) {
                        eventObj.wait(endTime - Time.currentElapsedTime());
                    }
                }
                lastException = e;
            }
        }
        if (lastException != null) {
            throw lastException;
        }
        return new String(data);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,process,void process(WatchedEvent),"[316, 320]","{'A591': [(316, 320)]}",{'A591': 1.0},A591,,"                        public void process(WatchedEvent event) {
                            synchronized(eventObj) {
                                eventObj.notifyAll();
                            }
                        }});
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceManager.java,InstanceManager,close,void close(),"[333, 346]","{'A591': [(333, 346)]}",{'A591': 1.0},A591,,"    synchronized public void close() throws InterruptedException {
        for(String name: instanceToAssignment.keySet().toArray(new String[0])) {
            try {
                removeInstance(name);
            } catch(KeeperException e) {
                e.printStackTrace();
            }
        }
        try {
            doDelete(readyNode);
        } catch (KeeperException e) {
            e.printStackTrace();
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer.MyWatcher,process,void process(WatchedEvent),"[56, 60]","{'A591': [(56, 60)]}",{'A591': 1.0},A591,,"        public void process(WatchedEvent event) {
            if (event.getPath() != null && event.getPath().equals(myNode)) {
                zk.getData(myNode, this, dc, this);
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer.MyDataCallback,processResult,"void processResult(int,String,Object,byte[],Stat)","[72, 87]","{'A591': [(72, 87)]}",{'A591': 1.0},A591,,"        public void processResult(int rc, String path,
                Object ctx, byte[] data, Stat stat) {
            if (rc == KeeperException.Code.NONODE.intValue()) {
                // we can just ignore because the child watcher takes care of this
                return;
            }
            if (rc != KeeperException.Code.OK.intValue()) {
                zk.getData(myNode, (Watcher)ctx, this, ctx);
            }
            int currVer = stat.getVersion();
            if (currVer != lastVer) {
                String parts[] = new String(data).split("" "", 2);
                myInstance.configure(parts[1]);
                lastVer = currVer;
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer.MyReporter,report,void report(String),"[96, 107]","{'A591': [(96, 107)]}",{'A591': 1.0},A591,,"        public void report(String report) throws KeeperException, InterruptedException {
            for(int j = 0; j < maxTries; j++) {
                try {
                    try {
                        zk.setData(myReportNode, report.getBytes(), -1);
                    } catch(NoNodeException e) {
                        zk.create(myReportNode, report.getBytes(), Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL);
                    }
                    break;
                } catch(ConnectionLossException e) {}
            }
        }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,rmnod,void rmnod(String),"[132, 149]","{'A591': [(132, 149)]}",{'A591': 1.0},A591,,"    private void rmnod(String path) throws InterruptedException, KeeperException {
        KeeperException lastException = null;
        for(int i = 0; i < maxTries; i++) {
            try {
                zk.delete(path, -1);
                lastException = null;
                break;
            } catch (KeeperException.NoNodeException e) {
                // cool this is what we want
                break;
            } catch (KeeperException e) {
                lastException = e;
            }
        }
        if (lastException != null) {
            throw lastException;
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,mknod_inner,"void mknod_inner(String,CreateMode)","[150, 171]","{'A591': [(150, 171)]}",{'A591': 1.0},A591,,"    private void mknod_inner(String path, CreateMode mode) throws KeeperException, InterruptedException {
        for(int i = 0; i < maxTries; i++) {
            try {
                zk.create(path, null, Ids.OPEN_ACL_UNSAFE, mode);
                break;
            } catch (NodeExistsException e) {
                if (mode != CreateMode.EPHEMERAL) {
                    return;
                }
                Stat stat = zk.exists(path, false);
                if (stat == null) {
                    continue;
                }
                if (stat.getEphemeralOwner() != zk.getSessionId()) {
                    throw e;
                }
                break;
            } catch (ConnectionLossException e) {
                e.printStackTrace();
            }
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,mknod,"void mknod(String,CreateMode)","[173, 186]","{'A591': [(173, 186)]}",{'A591': 1.0},A591,,"    private void mknod(String path, CreateMode mode) throws KeeperException, InterruptedException {
        String subpath[] = path.split(""/"");
        StringBuilder sb = new StringBuilder();
        // We start at 1 because / will create an empty part first
        for(int i = 1; i < subpath.length; i++) {
            sb.append(""/"");
            sb.append(subpath[i]);
            CreateMode m = CreateMode.PERSISTENT;
            if (i == subpath.length-1) {
                m = mode;
            }
            mknod_inner(sb.toString(), m);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,run,void run(),"[188, 195]","{'A591': [(188, 195)]}",{'A591': 1.0},A591,,"    public void run() throws IOException, InterruptedException, KeeperException {
        zk = new ZooKeeper(zkHostPort, sessTimeout, this);
        mknod(assignmentsNode, CreateMode.PERSISTENT);
        mknod(statusNode, CreateMode.EPHEMERAL);
        mknod(reportsNode, CreateMode.PERSISTENT);
        // Now we just start watching the assignments directory
        zk.getChildren(assignmentsNode, true, this, null);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,main,void main(String[]),"[206, 215]","{'A591': [(206, 208), (210, 215)], 'A609': [(209, 209)]}","{'A591': 0.9, 'A609': 0.1}",A591,,"    public static void main(String[] args) throws UnknownHostException, IOException, InterruptedException, KeeperException {
        if (args.length != 3) {
            System.err.println(""USAGE: "" + InstanceContainer.class.getName() + "" name zkHostPort znodePrefix"");
            System.exit(ExitCode.INVALID_INVOCATION.getValue());
        }
        new InstanceContainer(args[0], args[1], args[2]).run();
        while(true) {
            Thread.sleep(1000);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,process,void process(WatchedEvent),"[217, 227]","{'A591': [(217, 219), (222, 227)], 'A609': [(221, 221)], 'A593': [(220, 220)]}","{'A591': 0.8181818181818182, 'A609': 0.09090909090909091, 'A593': 0.09090909090909091}",A591,,"    public void process(WatchedEvent event) {
        if (KeeperState.Expired == event.getState()) {
            // It's all over
            LOG.error(""Lost session"");
            System.exit(ExitCode.ERROR_STARTING_ADMIN_SERVER.getValue());
        }
        if (event.getPath() != null && event.getPath().equals(assignmentsNode)) {
            // children have changed, so read in the new list
            zk.getChildren(assignmentsNode, true, this, null);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/InstanceContainer.java,InstanceContainer,processResult,"void processResult(int,String,Object,List<String>)","[231, 310]","{'A591': [(231, 237), (239, 244), (246, 273), (275, 286), (290, 310)], 'A603': [(238, 238)], 'A583': [(245, 245)], 'A615': [(274, 274)], 'A596': [(287, 289)]}","{'A591': 0.925, 'A603': 0.0125, 'A583': 0.0125, 'A615': 0.0125, 'A596': 0.0375}",A591,,"    @Override
    public void processResult(int rc, String path, Object ctx, List<String> children) {
        if (rc != KeeperException.Code.OK.intValue()) {
            // try it again
            zk.getChildren(assignmentsNode, true, this, null);
            return;
        }
        Map<String, Instance> newList = new HashMap<String, Instance>();
        // check for differences
        Stat stat = new Stat();
        for(String child: children) {
            Instance i = instances.remove(child);
            if (i == null) {
                // Start up a new instance
                byte[] data = null;
                String myNode = assignmentsNode + '/' + child;
                while(true) {
                    try {
                        data = zk.getData(myNode, true, stat);
                        break;
                    } catch (NoNodeException e) {
                        // The node doesn't exist anymore, so skip it
                        break;
                    } catch (KeeperException e) {
                        e.printStackTrace();
                    } catch (InterruptedException e) {
                        return;
                    }
                }
                if (data != null) {
                    String instanceSpec = new String(data);
                    int spaceIndex = instanceSpec.indexOf(' ');
                    String clazz;
                    String conf;
                    if (spaceIndex == -1) {
                        clazz = instanceSpec;
                        conf = null;
                    } else {
                        clazz = instanceSpec.substring(0, spaceIndex);
                        conf = instanceSpec.substring(spaceIndex+1);
                    }
                    try {
                        Class<?> c = Class.forName(clazz);
                        i = (Instance) c.getConstructor().newInstance();
                        Reporter reporter = new MyReporter(child);
                        i.setReporter(reporter);
                        i.configure(conf);
                        i.start();
                        newList.put(child, i);
                        int ver = stat.getVersion();
                        Instance myInstance = i;
                        DataCallback dc = new MyDataCallback(myNode, myInstance, ver);
                        Watcher watcher = new MyWatcher(myNode, dc);
                        zk.getData(myNode, watcher, dc, watcher);
                    } catch (Exception e) {
                        LOG.warn(""Skipping "" + child, e);
                        if (e.getCause() != null) {
                            LOG.warn(""Caused by"", e.getCause());
                        }
                    }

                }
            } else {
                // just move it to the new list
                newList.put(child, i);
            }
        }
        // kill anything that was removed for the children
        for(Map.Entry<String,Instance> i: instances.entrySet()) {
            i.getValue().stop();
            try {
                rmnod(reportsNode + '/' + i.getKey());
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            } catch (KeeperException e) {
                e.printStackTrace();
            }
        }
        instances = newList;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,configure,void configure(String),"[43, 48]","{'A591': [(43, 48)]}",{'A591': 1.0},A591,,"    public void configure(String params) {
        String parts[] = params.split("" "");
        hostPort = parts[1];
        this.index = Integer.parseInt(parts[0]);
        myPath = ""/simpleCase/"" + index;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,start,void start(),"[50, 60]","{'A591': [(50, 53), (57, 60)], 'A616': [(54, 56)]}","{'A591': 0.7272727272727273, 'A616': 0.2727272727272727}",A591,,"    public void start() {
        try {
            zk = new ZooKeeper(hostPort, 15000, this);
            zk.getData(""/simpleCase"", true, this, null);
            if (null != r) {
                r.report(""Client "" + index + "" connecting to "" + hostPort);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,stop,void stop(),"[62, 70]","{'A591': [(62, 70)]}",{'A591': 1.0},A591,,"    public void stop() {
        try {
            if (zk != null) {
                zk.close();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,process,void process(WatchedEvent),"[71, 75]","{'A591': [(71, 75)]}",{'A591': 1.0},A591,,"    public void process(WatchedEvent event) {
        if (event.getPath() != null && event.getPath().equals(""/simpleCase"")) {
            zk.getData(""/simpleCase"", true, this, null);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,processResult,"void processResult(int,String,Object,byte[],Stat)","[77, 95]","{'A591': [(77, 93), (95, 95)], 'A583': [(94, 94)]}","{'A591': 0.9473684210526315, 'A583': 0.05263157894736842}",A591,,"    public void processResult(int rc, String path, Object ctx, byte[] data,
            Stat stat) {
        if (rc != 0) {
            zk.getData(""/simpleCase"", true, this, null);
        } else {
            this.data = data;
            String content = new String(data);
            if (content.equals(""die"")) {
                this.stop();
                return;
            }
            if (!createdEphemeral) {
                zk.create(myPath, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL, this, null);
                createdEphemeral = true;
            } else {
                zk.setData(myPath, data, -1, this, null);
            }
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,processResult,"void processResult(int,String,Object,String)","[97, 101]","{'A591': [(97, 101)]}",{'A591': 1.0},A591,,"    public void processResult(int rc, String path, Object ctx, String name) {
        if (rc != 0) {
            zk.create(myPath, data, Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL, this, null);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,processResult,"void processResult(int,String,Object,Stat)","[102, 106]","{'A591': [(102, 106)]}",{'A591': 1.0},A591,,"    public void processResult(int rc, String path, Object ctx, Stat stat) {
        if (rc != 0) {
            zk.setData(myPath, data, -1, this, null);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,toString,String toString(),"[107, 110]","{'A591': [(107, 110)]}",{'A591': 1.0},A591,,"    @Override
    public String toString() {
        return SimpleClient.class.getName() + ""["" + index + ""] using "" + hostPort;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/SimpleClient.java,SimpleClient,setReporter,void setReporter(Reporter),"[113, 115]","{'A591': [(113, 115)]}",{'A591': 1.0},A591,,"    public void setReporter(Reporter r) {
        this.r = r;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,setReporter,void setReporter(Reporter),"[53, 55]","{'A591': [(53, 55)]}",{'A591': 1.0},A591,,"    public void setReporter(Reporter r) {
        this.r = r;
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,configure,void configure(String),"[96, 210]","{'A591': [(96, 97), (99, 100), (102, 102), (104, 104), (110, 119), (128, 131), (134, 175), (185, 193), (196, 210)], 'A596': [(98, 98), (101, 101), (105, 109), (194, 194)], 'A593': [(103, 103), (132, 133)], 'A618': [(195, 195)], 'A617': [(120, 127), (176, 184)]}","{'A591': 0.7478260869565218, 'A596': 0.06956521739130435, 'A593': 0.02608695652173913, 'A618': 0.008695652173913044, 'A617': 0.14782608695652175}",A591,,"    public void configure(String params) {
        if (clientAddr == null) {
            String parts[] = params.split("" "");
            // The first time we are configured, it is just to tell
            // us which machine we are
            serverId = Integer.parseInt(parts[0]);
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Setting up server "" + serverId);
            }
            if (parts.length > 1 && parts[1].equals(""false"")) {
                System.setProperty(""zookeeper.leaderServes"", ""no"");
            } else {
                System.setProperty(""zookeeper.leaderServes"", ""yes"");
            }
            // Let's grab two ports
            try {
                ServerSocket ss = new ServerSocket(0, 1, InetAddress.getLocalHost());
                clientAddr = (InetSocketAddress) ss.getLocalSocketAddress();
                ss.close();
            } catch(IOException e) {
                e.printStackTrace();
            }
            try {
                ServerSocket ss = new ServerSocket(0, 1, InetAddress.getLocalHost());
                quorumLeaderAddr = (InetSocketAddress) ss.getLocalSocketAddress();
                ss.close();
            } catch(IOException e) {
                e.printStackTrace();
            }
            try {
                ServerSocket ss = new ServerSocket(0, 1, InetAddress.getLocalHost());
                quorumLeaderElectionAddr = (InetSocketAddress) ss.getLocalSocketAddress();
                ss.close();
            } catch(IOException e) {
                e.printStackTrace();
            }
            String report = clientAddr.getHostString() + ':' + clientAddr.getPort() +
            ',' + quorumLeaderAddr.getHostString() + ':' + quorumLeaderAddr.getPort() + ':' + quorumLeaderElectionAddr.getPort();
            try {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Reporting "" + report);
                }
                r.report(report);
            } catch (Exception e) {
                e.printStackTrace();
            }
            return;
        } else {
            int spaceIndex = params.indexOf(' ');
            if (spaceIndex == -1) {
                LOG.warn(""looking for host:port,... start|stop, but found "" + params);
                return;
            }
            String quorumSpecs = params.substring(0, spaceIndex);
            String cmd = params.substring(spaceIndex+1);
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Running command: "" + cmd);
            }
            if (!cmd.equals(""start"")) {
                if (peer != null) {
                    peer.shutdown();
                }
                peer = null;
                try {
                    for(int i = 0; i < 5; i++) {
                        Thread.sleep(500);
                        try {
                            // Wait until we can't connect
                            new Socket(""127.0.0.1"", clientAddr.getPort()).close();
                        } catch(IOException e) { break; }
                    }
                    r.report(""stopped"");
                } catch (Exception e) {
                    LOG.error(""Unhandled error"", e);
                }
                return;
            }
            String parts[] = quorumSpecs.split("","");
            peers = new HashMap<Long,QuorumServer>();
            for(int i = 0; i < parts.length; i++) {
                // parts[i] == ""host:leaderPort:leaderElectionPort;clientPort""
                String subparts[] = ((parts[i].split("";""))[0]).split("":"");
                String clientPort = (parts[i].split("";""))[1];
                peers.put(Long.valueOf(i),
                          new QuorumServer(
                                i,
                                new InetSocketAddress(subparts[0], Integer.parseInt(subparts[1])),
                                new InetSocketAddress(subparts[0], Integer.parseInt(subparts[2])),
                                new InetSocketAddress(subparts[0], Integer.parseInt(clientPort))));
            }
            try {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Starting quorumPeer "" + serverId + "" on port "" + clientAddr.getPort());
                }
                if (peer != null) {
                    LOG.warn(""Peer "" + serverId + "" already started"");
                    return;
                }
                System.err.println(""SnapDir = "" + snapDir + "" LogDir = "" + logDir);
                peer = new QuorumPeer(peers, snapDir, logDir, clientAddr.getPort(), 3, serverId, tickTime, initLimit, syncLimit, connectToLearnerMasterLimit);
                peer.start();
                for(int i = 0; i < 5; i++) {
                    Thread.sleep(500);
                    try {
                        // Wait until we can connect
                        new Socket(""127.0.0.1"", clientAddr.getPort()).close();
                        break;
                    } catch(IOException e) {}
                }
                r.report(""started"");
            } catch (Exception e) {
                LOG.error(""Unhandled exception"", e);
            }
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,start,void start(),"[212, 213]","{'A591': [(212, 213)]}",{'A591': 1.0},A591,,"    public void start() {
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,stop,void stop(),"[215, 228]","{'A591': [(215, 221), (228, 228)], 'A596': [(222, 222), (224, 225), (227, 227)], 'A616': [(223, 223), (226, 226)]}","{'A591': 0.5714285714285714, 'A596': 0.2857142857142857, 'A616': 0.14285714285714285}",A591,,"    public void stop() {
        if (LOG.isDebugEnabled()) {
            LOG.debug(""Stopping peer "" + serverId);
        }
        if (peer != null) {
            peer.shutdown();
        }
        if (logDir != null) {
            TestUtils.deleteFileRecursively(logDir);
        }
        if (snapDir != null) {
            TestUtils.deleteFileRecursively(snapDir);
        }
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,createServer,"String[] createServer(InstanceManager,int)","[240, 242]","{'A596': [(240, 242)]}",{'A596': 1.0},A596,,"    public static String[] createServer(InstanceManager im, int i) throws NoAvailableContainers, DuplicateNameException, InterruptedException, KeeperException {
        return createServer(im, i, true);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,createServer,"String[] createServer(InstanceManager,int,boolean)","[255, 259]","{'A591': [(258, 259)], 'A596': [(255, 257)]}","{'A591': 0.4, 'A596': 0.6}",A596,,"    public static String[] createServer(InstanceManager im, int i, boolean leaderServes) throws NoAvailableContainers, DuplicateNameException, InterruptedException, KeeperException {
        im.assignInstance(""server""+i, QuorumPeerInstance.class, Integer.toString(i) + "" "" + leaderServes, 50);
        return im.getStatus(""server""+i, 3000).split("","");
        
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,startInstance,"void startInstance(InstanceManager,String,int)","[270, 274]","{'A591': [(270, 274)]}",{'A591': 1.0},A591,,"    public static void startInstance(InstanceManager im, String quorumHostPort, int index) throws InterruptedException, KeeperException, NoAssignmentException {
        im.resetStatus(""server"" + index);
        im.reconfigureInstance(""server""+index, quorumHostPort + "" start"");
        im.getStatus(""server"" + index, 5000);
    }
"
org.apache.zookeeper.test.system,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/test/system/QuorumPeerInstance.java,QuorumPeerInstance,stopInstance,"void stopInstance(InstanceManager,int)","[284, 289]","{'A591': [(284, 289)]}",{'A591': 1.0},A591,,"    public static void stopInstance(InstanceManager im, int index) throws InterruptedException, KeeperException, NoAssignmentException {
        im.resetStatus(""server"" + index);
        im.reconfigureInstance(""server""+index, Integer.toString(index) + "" stop"");
        im.getStatus(""server"" + index, 3000);
   
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,createWatchManager,IWatchManager createWatchManager(String),"[37, 41]","{'A612': [(37, 37), (39, 39), (41, 41)], 'A615': [(38, 38), (40, 40)]}","{'A612': 0.6, 'A615': 0.4}",A612,,"    static IWatchManager createWatchManager(String className) throws Exception {
        Class<?> clazz = Class.forName(
                ""org.apache.zookeeper.server.watch."" + className);
        return (IWatchManager) clazz.getConstructor().newInstance();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,forceGC,void forceGC(),"[43, 54]","{'A612': [(43, 54)]}",{'A612': 1.0},A612,,"    static void forceGC() {
        int gcTimes = 3;
        for (int i = 0; i < gcTimes; i++) {
            try {
                System.gc();
                Thread.currentThread().sleep(1000);

                System.runFinalization();
                Thread.currentThread().sleep(1000);
            } catch (InterruptedException ex) { /* ignore */ }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,getMemoryUse,long getMemoryUse(),"[56, 63]","{'A612': [(56, 63)]}",{'A612': 1.0},A612,,"    static long getMemoryUse() {
        forceGC();
        long totalMem = Runtime.getRuntime().totalMemory();

        forceGC();
        long freeMem = Runtime.getRuntime().freeMemory();
        return totalMem - freeMem;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.IterationState,setup,void setup(),"[81, 92]","{'A612': [(81, 92)]}",{'A612': 1.0},A612,,"        @Setup(Level.Iteration)
        public void setup() throws Exception {
            paths = new String[pathCount];
            for (int i = 0; i < paths.length; i++) {
                paths[i] = pathPrefix + i;
            }

            watchesAdded = 0;
            watchManager = createWatchManager(watchManagerClass);

            memWhenSetup = getMemoryUse();
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.IterationState,tearDown,void tearDown(),"[94, 103]","{'A612': [(94, 103)]}",{'A612': 1.0},A612,,"        @TearDown(Level.Iteration)
        public void tearDown() {
            long memUsed = getMemoryUse() - memWhenSetup;
            System.out.println(""Memory used: "" + watchesAdded + "" "" + memUsed);

            double memPerMillionWatchesMB = memUsed * 1.0 / watchesAdded ;
            System.out.println(
                    ""Memory used per million watches "" +
                    String.format(""%.2f"", memPerMillionWatchesMB) + ""MB"");
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,testAddConcentrateWatch,void testAddConcentrateWatch(IterationState),"[112, 126]","{'A612': [(112, 126)]}",{'A612': 1.0},A612,,"    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    @Warmup(iterations = 1, time = 10, timeUnit = TimeUnit.SECONDS)
    @Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)
    public void testAddConcentrateWatch(IterationState state) throws Exception {
        Watcher watcher = new DumbWatcher();

        // watch all paths
        for (String path : state.paths) {
            if (state.watchManager.addWatch(path, watcher)) {
                state.watchesAdded++;
            }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.InvocationState,setup,void setup(),"[145, 149]","{'A612': [(145, 149)]}",{'A612': 1.0},A612,,"        @Setup(Level.Invocation)
        public void setup() throws Exception {
            initialize();
            prepare();
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.InvocationState,initialize,void initialize(),"[151, 170]","{'A612': [(151, 170)]}",{'A612': 1.0},A612,,"        void initialize() throws Exception {
            if (paths == null || paths.length != pathCount) {
                paths = new String[pathCount];
                for (int i = 0; i < pathCount; i++) {
                    paths[i] = pathPrefix + i;
                }
            }

            if (watchers == null || watchers.length != watcherCount) {
                watchers = new Watcher[watcherCount];
                for (int i = 0; i < watcherCount; i++) {
                    watchers[i] = new DumbWatcher();
                }
            }
            if (watchManager == null ||
                    !watchManager.getClass().getSimpleName().contains(
                            watchManagerClass)) {
                watchManager = createWatchManager(watchManagerClass);
            }
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.InvocationState,prepare,void prepare(),"[172, 178]","{'A612': [(172, 178)]}",{'A612': 1.0},A612,,"        void prepare() {
            for (String path : paths) {
                for (Watcher watcher : watchers) {
                    watchManager.addWatch(path, watcher);
                }
            }
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,testTriggerConcentrateWatch,void testTriggerConcentrateWatch(InvocationState),"[187, 196]","{'A612': [(187, 193), (195, 196)], 'A613': [(194, 194)]}","{'A612': 0.9, 'A613': 0.1}",A612,,"    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    @Warmup(iterations = 1, time = 10, timeUnit = TimeUnit.SECONDS)
    @Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)
    public void testTriggerConcentrateWatch(InvocationState state) throws Exception {
        for (String path : state.paths) {
            state.watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID, null);
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.AddSparseWatchState,prepare,void prepare(),"[210, 214]","{'A612': [(210, 214)]}",{'A612': 1.0},A612,,"        @Override
        public void prepare() {
            watchesAdded = 0;
            memWhenSetup = getMemoryUse();
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.AddSparseWatchState,tearDown,void tearDown(),"[216, 230]","{'A612': [(216, 227), (229, 230)], 'A613': [(228, 228)]}","{'A612': 0.9333333333333333, 'A613': 0.06666666666666667}",A612,,"        @TearDown(Level.Invocation)
        public void tearDown() {
            long memUsed = getMemoryUse() - memWhenSetup;
            System.out.println(""Memory used: "" + watchesAdded + "" "" + memUsed);

            double memPerMillionWatchesMB = memUsed * 1.0 / watchesAdded ;
            System.out.println(
                    ""Memory used per million sparse watches "" +
                    String.format(""%.2f"", memPerMillionWatchesMB) + ""MB"");

            // clear all the watches
            for (String path : paths) {
                watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID, null);
            }
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,testAddSparseWatch,void testAddSparseWatch(AddSparseWatchState),"[240, 258]","{'A612': [(240, 258)]}",{'A612': 1.0},A612,,"    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    @Warmup(iterations = 1, time = 10, timeUnit = TimeUnit.SECONDS)
    @Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)
    public void testAddSparseWatch(AddSparseWatchState state) throws Exception {
        // All watchers are watching the 1st path
        for (Watcher watcher : state.watchers) {
            if (state.watchManager.addWatch(state.paths[0], watcher)) {
                state.watchesAdded++;
            }
        }
        // The 1st watcher is watching all paths
        for (String path : state.paths) {
            if (state.watchManager.addWatch(path, state.watchers[0])) {
                state.watchesAdded++;
            }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench.TriggerSparseWatchState,prepare,void prepare(),"[269, 280]","{'A612': [(269, 280)]}",{'A612': 1.0},A612,,"        @Override
        public void prepare() {
            // All watchers are watching the 1st path
            for (Watcher watcher : watchers) {
                watchManager.addWatch(paths[0], watcher);
            }

            // The 1st watcher is watching all paths
            for (String path : paths) {
                watchManager.addWatch(path, watchers[0]);
            }
        }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-it/src/main/java/org/apache/zookeeper/server/watch/WatchBench.java,WatchBench,testTriggerSparseWatch,void testTriggerSparseWatch(TriggerSparseWatchState),"[290, 299]","{'A612': [(290, 296), (298, 299)], 'A613': [(297, 297)]}","{'A612': 0.9, 'A613': 0.1}",A612,,"    @Benchmark
    @BenchmarkMode(Mode.AverageTime)
    @OutputTimeUnit(TimeUnit.MILLISECONDS)
    @Warmup(iterations = 1, time = 10, timeUnit = TimeUnit.SECONDS)
    @Measurement(iterations = 3, time = 10, timeUnit = TimeUnit.SECONDS)
    public void testTriggerSparseWatch(TriggerSparseWatchState state) throws Exception {
        for (String path : state.paths) {
            state.watchManager.triggerWatch(path, event, WatchedEvent.NO_ZXID, null);
        }
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,getLockListener,LockListener getLockListener(),"[97, 99]","{'A591': [(98, 99)], 'A584': [(97, 97)]}","{'A591': 0.6666666666666666, 'A584': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public synchronized LockListener getLockListener() {
        return this.callback;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,setLockListener,void setLockListener(LockListener),"[106, 108]","{'A591': [(107, 108)], 'A584': [(106, 106)]}","{'A591': 0.6666666666666666, 'A584': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public synchronized void setLockListener(LockListener callback) {
        this.callback = callback;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,unlock,void unlock(),"[119, 149]","{'A583': [(120, 120), (126, 129), (133, 135), (139, 141)], 'A591': [(119, 119), (121, 125), (130, 132), (136, 138), (145, 149)], 'A584': [(142, 144)]}","{'A583': 0.3548387096774194, 'A591': 0.5483870967741935, 'A584': 0.0967741935483871}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public synchronized void unlock() throws RuntimeException {

        if (!isClosed() && id != null) {
            // we don't need to retry this operation in the case of failure
            // as ZK will remove ephemeral files and we don't wanna hang
            // this process when closing if we cannot reconnect to ZK
            try {

                ZooKeeperOperation zopdel = () -> {
                    zookeeper.delete(id, -1);
                    return Boolean.TRUE;
                };
                zopdel.execute();
            } catch (InterruptedException e) {
                LOG.warn(""Unexpected exception"", e);
                // set that we have been interrupted.
                Thread.currentThread().interrupt();
            } catch (KeeperException.NoNodeException e) {
                // do nothing
            } catch (KeeperException e) {
                LOG.warn(""Unexpected exception"", e);
                throw new RuntimeException(e.getMessage(), e);
            } finally {
                LockListener lockListener = getLockListener();
                if (lockListener != null) {
                    lockListener.lockReleased();
                }
                id = null;
            }
        }
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock.LockWatcher,process,void process(WatchedEvent),"[158, 166]","{'A583': [(164, 164)], 'A591': [(158, 159), (161, 163), (165, 166)], 'A620': [(160, 160)]}","{'A583': 0.1111111111111111, 'A591': 0.7777777777777778, 'A620': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"        public void process(WatchedEvent event) {
            // lets either become the leader or watch the new/updated node
            LOG.debug(""Watcher fired: {}"", event);
            try {
                lock();
            } catch (Exception e) {
                LOG.warn(""Failed to acquire lock"", e);
            }
        }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock.LockZooKeeperOperation,findPrefixInChildren,"void findPrefixInChildren(String,ZooKeeper,String)","[185, 201]","{'A583': [(185, 185), (196, 196)], 'A591': [(186, 190), (192, 195), (197, 197), (199, 201)], 'A620': [(191, 191), (198, 198)]}","{'A583': 0.11764705882352941, 'A591': 0.7647058823529411, 'A620': 0.11764705882352941}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"        private void findPrefixInChildren(String prefix, ZooKeeper zookeeper, String dir)
            throws KeeperException, InterruptedException {
            List<String> names = zookeeper.getChildren(dir, false);
            for (String name : names) {
                if (name.startsWith(prefix)) {
                    id = name;
                    LOG.debug(""Found id created last time: {}"", id);
                    break;
                }
            }
            if (id == null) {
                id = zookeeper.create(dir + ""/"" + prefix, data, getAcl(), EPHEMERAL_SEQUENTIAL);

                LOG.debug(""Created id: {}"", id);
            }

        }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock.LockZooKeeperOperation,execute,boolean execute(),"[209, 258]","{'A583': [(209, 211), (217, 217), (224, 224), (229, 229), (238, 238), (243, 243)], 'A591': [(212, 216), (218, 221), (242, 242), (250, 250), (252, 258)], 'A584': [(222, 223), (225, 227), (230, 237), (239, 241), (244, 249), (251, 251)], 'A589': [(228, 228)]}","{'A583': 0.16, 'A591': 0.36, 'A584': 0.46, 'A589': 0.02}",A584,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"        @SuppressFBWarnings(
            value = ""NP_NULL_PARAM_DEREF_NONVIRTUAL"",
            justification = ""findPrefixInChildren will assign a value to this.id"")
        public boolean execute() throws KeeperException, InterruptedException {
            do {
                if (id == null) {
                    long sessionId = zookeeper.getSessionId();
                    String prefix = ""x-"" + sessionId + ""-"";
                    // lets try look up the current ID if we failed
                    // in the middle of creating the znode
                    findPrefixInChildren(prefix, zookeeper, dir);
                    idName = new ZNodeName(id);
                }
                List<String> names = zookeeper.getChildren(dir, false);
                if (names.isEmpty()) {
                    LOG.warn(""No children in: {} when we've just created one! Lets recreate it..."", dir);
                    // lets force the recreation of the id
                    id = null;
                } else {
                    // lets sort them explicitly (though they do seem to come back in order usually :)
                    SortedSet<ZNodeName> sortedNames = new TreeSet<>();
                    for (String name : names) {
                        sortedNames.add(new ZNodeName(dir + ""/"" + name));
                    }
                    ownerId = sortedNames.first().getName();
                    SortedSet<ZNodeName> lessThanMe = sortedNames.headSet(idName);
                    if (!lessThanMe.isEmpty()) {
                        ZNodeName lastChildName = lessThanMe.last();
                        lastChildId = lastChildName.getName();
                        LOG.debug(""Watching less than me node: {}"", lastChildId);
                        Stat stat = zookeeper.exists(lastChildId, new LockWatcher());
                        if (stat != null) {
                            return Boolean.FALSE;
                        } else {
                            LOG.warn(""Could not find the stats for less than me: {}"", lastChildName.getName());
                        }
                    } else {
                        if (isOwner()) {
                            LockListener lockListener = getLockListener();
                            if (lockListener != null) {
                                lockListener.lockAcquired();
                            }
                            return Boolean.TRUE;
                        }
                    }
                }
            }
            while (id == null);
            return Boolean.FALSE;
        }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,lock,boolean lock(),"[267, 274]","{'A591': [(267, 274)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public synchronized boolean lock() throws KeeperException, InterruptedException {
        if (isClosed()) {
            return false;
        }
        ensurePathExists(dir);

        return (Boolean) retryOperation(zop);
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,getDir,String getDir(),"[281, 283]","{'A591': [(281, 283)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public String getDir() {
        return dir;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,isOwner,boolean isOwner(),"[289, 291]","{'A583': [(290, 290)], 'A591': [(289, 289), (291, 291)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public boolean isOwner() {
        return id != null && id.equals(ownerId);
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/WriteLock.java,WriteLock,getId,String getId(),"[298, 300]","{'A583': [(299, 299)], 'A591': [(298, 298), (300, 300)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/WriteLockTest.java,"    public String getId() {
        return this.id;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,parseSequenceString,Integer parseSequenceString(String),"[67, 74]","{'A591': [(73, 74)], 'A602': [(67, 72)]}","{'A591': 0.25, 'A602': 0.75}",A602,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    private Integer parseSequenceString(final String seq) {
        try {
            return Integer.parseInt(seq);
        } catch (Exception e) {
            LOG.warn(""Number format exception for {}"", seq, e);
            return null;
        }
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,toString,String toString(),"[76, 80]","{'A591': [(76, 77), (80, 80)], 'A602': [(78, 79)]}","{'A591': 0.6, 'A602': 0.4}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    @Override
    public String toString() {
      return ""ZNodeName [name="" + name + "", prefix="" + prefix + "", sequence=""
          + sequence + ""]"";
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,equals,boolean equals(Object),"[82, 94]","{'A583': [(84, 89)], 'A591': [(82, 83), (90, 90), (92, 92), (94, 94)], 'A602': [(91, 91), (93, 93)]}","{'A583': 0.46153846153846156, 'A591': 0.38461538461538464, 'A602': 0.15384615384615385}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }

        ZNodeName other = (ZNodeName) o;

        return name.equals(other.name);
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,hashCode,int hashCode(),"[96, 99]","{'A591': [(96, 97), (99, 99)], 'A602': [(98, 98)]}","{'A591': 0.75, 'A602': 0.25}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    @Override
    public int hashCode() {
        return name.hashCode();
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,compareTo,int compareTo(ZNodeName),"[109, 121]","{'A591': [(119, 119), (121, 121)], 'A602': [(109, 118), (120, 120)]}","{'A591': 0.15384615384615385, 'A602': 0.8461538461538461}",A602,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    public int compareTo(final ZNodeName that) {
        if (this.sequence.isPresent() && that.sequence.isPresent()) {
            int cseq = Integer.compare(this.sequence.get(), that.sequence.get());
            return (cseq != 0) ? cseq : this.prefix.compareTo(that.prefix);
        }
        if (this.sequence.isPresent()) {
            return -1;
        }
        if (that.sequence.isPresent()) {
            return 1;
        }
        return this.prefix.compareTo(that.prefix);
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,getName,String getName(),"[126, 128]","{'A591': [(126, 128)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    public String getName() {
        return name;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,getSequence,Optional<Integer> getSequence(),"[133, 135]","{'A591': [(134, 135)], 'A602': [(133, 133)]}","{'A591': 0.6666666666666666, 'A602': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    public Optional<Integer> getSequence() {
        return sequence;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ZNodeName.java,ZNodeName,getPrefix,String getPrefix(),"[140, 142]","{'A591': [(140, 142)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/test/java/org/apache/zookeeper/recipes/lock/ZNodeNameTest.java,"    public String getPrefix() {
        return prefix;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,close,void close(),"[56, 60]","{'A591': [(56, 60)]}",{'A591': 1.0},A591,,"    public void close() {
        if (closed.compareAndSet(false, true)) {
            doClose();
        }
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,getZookeeper,ZooKeeper getZookeeper(),"[67, 69]","{'A591': [(67, 69)]}",{'A591': 1.0},A591,,"    public ZooKeeper getZookeeper() {
        return zookeeper;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,getAcl,List<ACL> getAcl(),"[76, 78]","{'A591': [(76, 78)]}",{'A591': 1.0},A591,,"    public List<ACL> getAcl() {
        return acl;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,setAcl,void setAcl(List<ACL>),"[85, 87]","{'A591': [(85, 87)]}",{'A591': 1.0},A591,,"    public void setAcl(List<ACL> acl) {
        this.acl = acl;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,getRetryDelay,long getRetryDelay(),"[94, 96]","{'A591': [(94, 96)]}",{'A591': 1.0},A591,,"    public long getRetryDelay() {
        return retryDelay;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,setRetryDelay,void setRetryDelay(long),"[103, 105]","{'A591': [(103, 105)]}",{'A591': 1.0},A591,,"    public void setRetryDelay(long retryDelay) {
        this.retryDelay = retryDelay;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,doClose,void doClose(),"[111, 113]","{'A583': [(113, 113)], 'A591': [(111, 112)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    protected void doClose() {

    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,retryOperation,Object retryOperation(ZooKeeperOperation),"[121, 140]","{'A583': [(121, 121), (124, 124), (128, 128), (134, 134), (138, 138)], 'A591': [(122, 123), (125, 127), (129, 133), (135, 137), (139, 140)]}","{'A583': 0.25, 'A591': 0.75}",A591,,"    protected Object retryOperation(ZooKeeperOperation operation)
        throws KeeperException, InterruptedException {
        KeeperException exception = null;
        for (int i = 0; i < RETRY_COUNT; i++) {
            try {
                return operation.execute();
            } catch (KeeperException.SessionExpiredException e) {
                LOG.warn(""Session expired {}. Reconnecting..."", zookeeper, e);
                throw e;
            } catch (KeeperException.ConnectionLossException e) {
                if (exception == null) {
                    exception = e;
                }
                LOG.debug(""Attempt {} failed with connection loss. Reconnecting..."", i);
                retryDelay(i);
            }
        }

        throw exception;
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,ensurePathExists,void ensurePathExists(String),"[148, 150]","{'A591': [(148, 150)]}",{'A591': 1.0},A591,,"    protected void ensurePathExists(String path) {
        ensureExists(path, null, acl, CreateMode.PERSISTENT);
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,ensureExists,"void ensureExists(String,byte[],List<ACL>,CreateMode)","[159, 176]","{'A583': [(159, 163), (165, 167), (170, 171), (173, 174)], 'A591': [(164, 164), (168, 169), (172, 172), (175, 176)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,,"    protected void ensureExists(
        final String path,
        final byte[] data,
        final List<ACL> acl,
        final CreateMode flags) {
        try {
            retryOperation(() -> {
                Stat stat = zookeeper.exists(path, false);
                if (stat != null) {
                    return true;
                }
                zookeeper.create(path, data, acl, flags);
                return true;
            });
        } catch (KeeperException | InterruptedException e) {
            LOG.warn(""Unexpected exception"", e);
        }
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,isClosed,boolean isClosed(),"[183, 185]","{'A591': [(183, 185)]}",{'A591': 1.0},A591,,"    protected boolean isClosed() {
        return closed.get();
    }
"
org.apache.zookeeper.recipes.lock,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-lock/src/main/java/org/apache/zookeeper/recipes/lock/ProtocolSupport.java,ProtocolSupport,retryDelay,void retryDelay(int),"[192, 200]","{'A583': [(197, 197)], 'A591': [(192, 196), (198, 200)]}","{'A583': 0.1111111111111111, 'A591': 0.8888888888888888}",A591,,"    protected void retryDelay(int attemptCount) {
        if (attemptCount > 0) {
            try {
                Thread.sleep(attemptCount * retryDelay);
            } catch (InterruptedException e) {
                LOG.warn(""Failed to sleep."", e);
            }
        }
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,toString,String toString(),"[43, 50]","{'A591': [(43, 43)], 'A583': [(44, 50)]}","{'A591': 0.125, 'A583': 0.875}",A583,,"    @Override
    public String toString() {
        return ""{""
            + "" id:"" + id
            + "" nodePath:"" + nodePath
            + "" hostName:"" + hostName
            + "" }"";
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,getId,Integer getId(),"[52, 54]","{'A583': [(52, 54)]}",{'A583': 1.0},A583,,"    public Integer getId() {
        return id;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,setId,void setId(Integer),"[56, 58]","{'A583': [(56, 58)]}",{'A583': 1.0},A583,,"    public void setId(Integer id) {
        this.id = id;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,getNodePath,String getNodePath(),"[60, 62]","{'A583': [(60, 62)]}",{'A583': 1.0},A583,,"    public String getNodePath() {
        return nodePath;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,setNodePath,void setNodePath(String),"[64, 66]","{'A583': [(64, 66)]}",{'A583': 1.0},A583,,"    public void setNodePath(String nodePath) {
        this.nodePath = nodePath;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,getHostName,String getHostName(),"[68, 70]","{'A591': [(70, 70)], 'A583': [(68, 69)]}","{'A591': 0.3333333333333333, 'A583': 0.6666666666666666}",A583,,"    public String getHostName() {
        return hostName;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer,setHostName,void setHostName(String),"[72, 74]","{'A583': [(72, 74)]}",{'A583': 1.0},A583,,"    public void setHostName(String hostName) {
        this.hostName = hostName;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderOffer.java,LeaderOffer.IdComparator,compare,"int compare(LeaderOffer,LeaderOffer)","[83, 86]","{'A583': [(83, 86)]}",{'A583': 1.0},A583,,"        @Override
        public int compare(LeaderOffer o1, LeaderOffer o2) {
            return o1.getId().compareTo(o2.getId());
        }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,start,void start(),"[119, 141]","{'A591': [(141, 141)], 'A583': [(119, 140)]}","{'A591': 0.043478260869565216, 'A583': 0.9565217391304348}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public synchronized void start() {
        state = State.START;
        dispatchEvent(EventType.START);

        LOG.info(""Starting leader election support"");

        if (zooKeeper == null) {
            throw new IllegalStateException(
                ""No instance of zookeeper provided. Hint: use setZooKeeper()"");
        }

        if (hostName == null) {
            throw new IllegalStateException(
                ""No hostname provided. Hint: use setHostName()"");
        }

        try {
            makeOffer();
            determineElectionStatus();
        } catch (KeeperException | InterruptedException e) {
            becomeFailed(e);
        }
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,stop,void stop(),"[147, 163]","{'A591': [(163, 163)], 'A583': [(147, 162)]}","{'A591': 0.058823529411764705, 'A583': 0.9411764705882353}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public synchronized void stop() {
        state = State.STOP;
        dispatchEvent(EventType.STOP_START);

        LOG.info(""Stopping leader election support"");

        if (leaderOffer != null) {
            try {
                zooKeeper.delete(leaderOffer.getNodePath(), -1);
                LOG.info(""Removed leader offer {}"", leaderOffer.getNodePath());
            } catch (InterruptedException | KeeperException e) {
                becomeFailed(e);
            }
        }

        dispatchEvent(EventType.STOP_COMPLETE);
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,makeOffer,void makeOffer(),"[165, 182]","{'A591': [(182, 182)], 'A583': [(165, 181)]}","{'A591': 0.05555555555555555, 'A583': 0.9444444444444444}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private void makeOffer() throws KeeperException, InterruptedException {
        state = State.OFFER;
        dispatchEvent(EventType.OFFER_START);

        LeaderOffer newLeaderOffer = new LeaderOffer();
        byte[] hostnameBytes;
        synchronized (this) {
            newLeaderOffer.setHostName(hostName);
            hostnameBytes = hostName.getBytes();
            newLeaderOffer.setNodePath(zooKeeper.create(rootNodeName + ""/"" + ""n_"",
                                                        hostnameBytes, ZooDefs.Ids.OPEN_ACL_UNSAFE,
                                                        CreateMode.EPHEMERAL_SEQUENTIAL));
            leaderOffer = newLeaderOffer;
        }
        LOG.debug(""Created leader offer {}"", leaderOffer);

        dispatchEvent(EventType.OFFER_COMPLETE);
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,getLeaderOffer,LeaderOffer getLeaderOffer(),"[184, 186]","{'A583': [(184, 185)], 'A584': [(186, 186)]}","{'A583': 0.6666666666666666, 'A584': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private synchronized LeaderOffer getLeaderOffer() {
        return leaderOffer;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,determineElectionStatus,void determineElectionStatus(),"[188, 225]","{'A591': [(189, 189), (194, 194), (196, 196), (200, 200), (209, 209), (212, 212), (214, 214), (220, 220)], 'A583': [(188, 188), (190, 191), (193, 193), (195, 195), (197, 197), (199, 199), (201, 208), (210, 211), (213, 213), (215, 219), (221, 225)], 'A584': [(192, 192), (198, 198)]}","{'A591': 0.21052631578947367, 'A583': 0.7368421052631579, 'A584': 0.05263157894736842}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private void determineElectionStatus() throws KeeperException, InterruptedException {

        state = State.DETERMINE;
        dispatchEvent(EventType.DETERMINE_START);

        LeaderOffer currentLeaderOffer = getLeaderOffer();

        String[] components = currentLeaderOffer.getNodePath().split(""/"");

        currentLeaderOffer.setId(Integer.valueOf(components[components.length - 1].substring(""n_"".length())));

        List<LeaderOffer> leaderOffers = toLeaderOffers(zooKeeper.getChildren(rootNodeName, false));

        /*
         * For each leader offer, find out where we fit in. If we're first, we
         * become the leader. If we're not elected the leader, attempt to stat the
         * offer just less than us. If they exist, watch for their failure, but if
         * they don't, become the leader.
         */
        for (int i = 0; i < leaderOffers.size(); i++) {
            LeaderOffer leaderOffer = leaderOffers.get(i);

            if (leaderOffer.getId().equals(currentLeaderOffer.getId())) {
                LOG.debug(""There are {} leader offers. I am {} in line."", leaderOffers.size(), i);

                dispatchEvent(EventType.DETERMINE_COMPLETE);

                if (i == 0) {
                    becomeLeader();
                } else {
                    becomeReady(leaderOffers.get(i - 1));
                }

                /* Once we've figured out where we are, we're done. */
                break;
            }
        }
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,becomeReady,void becomeReady(LeaderOffer),"[227, 259]","{'A591': [(248, 248), (257, 259)], 'A583': [(227, 247), (249, 256)]}","{'A591': 0.12121212121212122, 'A583': 0.8787878787878788}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private void becomeReady(LeaderOffer neighborLeaderOffer)
        throws KeeperException, InterruptedException {

        LOG.info(
            ""{} not elected leader. Watching node: {}"",
            getLeaderOffer().getNodePath(),
            neighborLeaderOffer.getNodePath());

        /*
         * Make sure to pass an explicit Watcher because we could be sharing this
         * zooKeeper instance with someone else.
         */
        Stat stat = zooKeeper.exists(neighborLeaderOffer.getNodePath(), this);

        if (stat != null) {
            dispatchEvent(EventType.READY_START);
            LOG.debug(
                ""We're behind {} in line and they're alive. Keeping an eye on them."",
                neighborLeaderOffer.getNodePath());
            state = State.READY;
            dispatchEvent(EventType.READY_COMPLETE);
        } else {
            /*
             * If the stat fails, the node has gone missing between the call to
             * getChildren() and exists(). We need to try and become the leader.
             */
            LOG.info(
                ""We were behind {} but it looks like they died. Back to determination."",
                neighborLeaderOffer.getNodePath());
            determineElectionStatus();
        }

    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,becomeLeader,void becomeLeader(),"[261, 268]","{'A583': [(261, 268)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private void becomeLeader() {
        state = State.ELECTED;
        dispatchEvent(EventType.ELECTED_START);

        LOG.info(""Becoming leader with node: {}"", getLeaderOffer().getNodePath());

        dispatchEvent(EventType.ELECTED_COMPLETE);
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,becomeFailed,void becomeFailed(Exception),"[270, 275]","{'A591': [(272, 272)], 'A583': [(270, 271), (273, 275)]}","{'A591': 0.16666666666666666, 'A583': 0.8333333333333334}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private void becomeFailed(Exception e) {
        LOG.error(""Failed in state {}"", state, e);

        state = State.FAILED;
        dispatchEvent(EventType.FAILED);
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,getLeaderHostName,String getLeaderHostName(),"[289, 298]","{'A591': [(298, 298)], 'A583': [(289, 297)]}","{'A591': 0.1, 'A583': 0.9}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public String getLeaderHostName() throws KeeperException, InterruptedException {

        List<LeaderOffer> leaderOffers = toLeaderOffers(zooKeeper.getChildren(rootNodeName, false));

        if (leaderOffers.size() > 0) {
            return leaderOffers.get(0).getHostName();
        }

        return null;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,toLeaderOffers,List<LeaderOffer> toLeaderOffers(List<String>),"[300, 324]","{'A591': [(311, 311), (316, 316), (322, 322)], 'A583': [(300, 310), (312, 315), (317, 321), (323, 324)]}","{'A591': 0.12, 'A583': 0.88}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private List<LeaderOffer> toLeaderOffers(List<String> strings)
        throws KeeperException, InterruptedException {

        List<LeaderOffer> leaderOffers = new ArrayList<>(strings.size());

        /*
         * Turn each child of rootNodeName into a leader offer. This is a tuple of
         * the sequence number and the node name.
         */
        for (String offer : strings) {
            String hostName = new String(zooKeeper.getData(rootNodeName + ""/"" + offer, false, null));

            leaderOffers.add(new LeaderOffer(
                Integer.valueOf(offer.substring(""n_"".length())),
                rootNodeName + ""/"" + offer, hostName));
        }

        /*
         * We sort leader offers by sequence number (which may not be zero-based or
         * contiguous) and keep their paths handy for setting watches.
         */
        Collections.sort(leaderOffers, new LeaderOffer.IdComparator());

        return leaderOffers;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,process,void process(WatchedEvent),"[326, 341]","{'A583': [(326, 341)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    @Override
    public void process(WatchedEvent event) {
        if (event.getType().equals(Watcher.Event.EventType.NodeDeleted)) {
            if (!event.getPath().equals(getLeaderOffer().getNodePath())
                && state != State.STOP) {
                LOG.debug(
                    ""Node {} deleted. Need to run through the election process."",
                    event.getPath());
                try {
                    determineElectionStatus();
                } catch (KeeperException | InterruptedException e) {
                    becomeFailed(e);
                }
            }
        }
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,dispatchEvent,void dispatchEvent(EventType),"[343, 353]","{'A591': [(345, 345)], 'A583': [(343, 344), (346, 353)]}","{'A591': 0.09090909090909091, 'A583': 0.9090909090909091}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    private void dispatchEvent(EventType eventType) {
        LOG.debug(""Dispatching event: {}"", eventType);

        synchronized (listeners) {
            if (listeners.size() > 0) {
                for (LeaderElectionAware observer : listeners) {
                    observer.onElectionEvent(eventType);
                }
            }
        }
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,addListener,void addListener(LeaderElectionAware),"[360, 362]","{'A583': [(360, 362)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public void addListener(LeaderElectionAware listener) {
        listeners.add(listener);
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,removeListener,void removeListener(LeaderElectionAware),"[369, 371]","{'A591': [(371, 371)], 'A583': [(369, 370)]}","{'A591': 0.3333333333333333, 'A583': 0.6666666666666666}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public void removeListener(LeaderElectionAware listener) {
        listeners.remove(listener);
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,toString,String toString(),"[373, 382]","{'A583': [(373, 382)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    @Override
    public String toString() {
        return ""{""
            + "" state:"" + state
            + "" leaderOffer:"" + getLeaderOffer()
            + "" zooKeeper:"" + zooKeeper
            + "" hostName:"" + getHostName()
            + "" listeners:"" + listeners
            + "" }"";
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,getRootNodeName,String getRootNodeName(),"[397, 399]","{'A583': [(397, 399)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public String getRootNodeName() {
        return rootNodeName;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,setRootNodeName,void setRootNodeName(String),"[412, 414]","{'A583': [(412, 414)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public void setRootNodeName(String rootNodeName) {
        this.rootNodeName = rootNodeName;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,getZooKeeper,ZooKeeper getZooKeeper(),"[420, 422]","{'A583': [(420, 422)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public ZooKeeper getZooKeeper() {
        return zooKeeper;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,setZooKeeper,void setZooKeeper(ZooKeeper),"[424, 426]","{'A591': [(426, 426)], 'A583': [(424, 425)]}","{'A591': 0.3333333333333333, 'A583': 0.6666666666666666}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public void setZooKeeper(ZooKeeper zooKeeper) {
        this.zooKeeper = zooKeeper;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,getHostName,String getHostName(),"[432, 434]","{'A591': [(434, 434)], 'A583': [(432, 433)]}","{'A591': 0.3333333333333333, 'A583': 0.6666666666666666}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public synchronized String getHostName() {
        return hostName;
    }
"
org.apache.zookeeper.recipes.leader,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/main/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupport.java,LeaderElectionSupport,setHostName,void setHostName(String),"[436, 438]","{'A583': [(436, 438)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-election/src/test/java/org/apache/zookeeper/recipes/leader/LeaderElectionSupportTest.java,"    public synchronized void setHostName(String hostName) {
        this.hostName = hostName;
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,orderedChildren,"Map<Long, String> orderedChildren(Watcher)","[65, 87]","{'A583': [(65, 66), (68, 72), (74, 75), (80, 82)], 'A596': [(67, 67), (73, 73), (76, 78), (83, 87)], 'A584': [(79, 79)]}","{'A583': 0.5217391304347826, 'A596': 0.43478260869565216, 'A584': 0.043478260869565216}",A583,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    private Map<Long, String> orderedChildren(Watcher watcher) throws KeeperException, InterruptedException {
        Map<Long, String> orderedChildren = new TreeMap<>();

        List<String> childNames;
        childNames = zookeeper.getChildren(dir, watcher);

        for (String childName : childNames) {
            try {
                //Check format
                if (!childName.regionMatches(0, prefix, 0, prefix.length())) {
                    LOG.warn(""Found child node with improper name: {}"", childName);
                    continue;
                }
                String suffix = childName.substring(prefix.length());
                Long childId = Long.parseLong(suffix);
                orderedChildren.put(childId, childName);
            } catch (NumberFormatException e) {
                LOG.warn(""Found child node with improper format : {}"", childName, e);
            }
        }

        return orderedChildren;
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,smallestChildName,String smallestChildName(),"[93, 129]","{'A583': [(97, 97), (99, 99), (101, 102), (106, 107), (109, 110), (115, 115), (119, 120), (124, 124), (126, 126)], 'A596': [(93, 96), (98, 98), (100, 100), (103, 105), (108, 108), (111, 114), (116, 118), (121, 123), (125, 125), (127, 129)]}","{'A583': 0.35135135135135137, 'A596': 0.6486486486486487}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    private String smallestChildName() throws KeeperException, InterruptedException {
        long minId = Long.MAX_VALUE;
        String minName = """";

        List<String> childNames;

        try {
            childNames = zookeeper.getChildren(dir, false);
        } catch (KeeperException.NoNodeException e) {
            LOG.warn(""Unexpected exception"", e);
            return null;
        }

        for (String childName : childNames) {
            try {
                //Check format
                if (!childName.regionMatches(0, prefix, 0, prefix.length())) {
                    LOG.warn(""Found child node with improper name: {}"", childName);
                    continue;
                }
                String suffix = childName.substring(prefix.length());
                long childId = Long.parseLong(suffix);
                if (childId < minId) {
                    minId = childId;
                    minName = childName;
                }
            } catch (NumberFormatException e) {
                LOG.warn(""Found child node with improper format : {}"", childName, e);
            }
        }

        if (minId < Long.MAX_VALUE) {
            return minName;
        } else {
            return null;
        }
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,element,byte[] element(),"[138, 167]","{'A583': [(139, 139), (143, 143), (146, 147), (149, 152), (156, 160)], 'A596': [(138, 138), (140, 142), (144, 145), (148, 148), (153, 155), (161, 167)]}","{'A583': 0.43333333333333335, 'A596': 0.5666666666666667}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    public byte[] element() throws NoSuchElementException, KeeperException, InterruptedException {
        Map<Long, String> orderedChildren;

        // element, take, and remove follow the same pattern.
        // We want to return the child node with the smallest sequence number.
        // Since other clients are remove()ing and take()ing nodes concurrently,
        // the child with the smallest sequence number in orderedChildren might be gone by the time we check.
        // We don't call getChildren again until we have tried the rest of the nodes in sequence order.
        while (true) {
            try {
                orderedChildren = orderedChildren(null);
            } catch (KeeperException.NoNodeException e) {
                throw new NoSuchElementException();
            }
            if (orderedChildren.size() == 0) {
                throw new NoSuchElementException();
            }

            for (String headNode : orderedChildren.values()) {
                if (headNode != null) {
                    try {
                        return zookeeper.getData(dir + ""/"" + headNode, false, null);
                    } catch (KeeperException.NoNodeException e) {
                        //Another client removed the node first, try next
                    }
                }
            }

        }
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,remove,byte[] remove(),"[176, 201]","{'A583': [(177, 177), (179, 180), (182, 185), (189, 191), (195, 195)], 'A596': [(176, 176), (178, 178), (181, 181), (186, 188), (192, 194), (196, 201)]}","{'A583': 0.4230769230769231, 'A596': 0.5769230769230769}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    public byte[] remove() throws NoSuchElementException, KeeperException, InterruptedException {
        Map<Long, String> orderedChildren;
        // Same as for element.  Should refactor this.
        while (true) {
            try {
                orderedChildren = orderedChildren(null);
            } catch (KeeperException.NoNodeException e) {
                throw new NoSuchElementException();
            }
            if (orderedChildren.size() == 0) {
                throw new NoSuchElementException();
            }

            for (String headNode : orderedChildren.values()) {
                String path = dir + ""/"" + headNode;
                try {
                    byte[] data = zookeeper.getData(path, false, null);
                    zookeeper.delete(path, -1);
                    return data;
                } catch (KeeperException.NoNodeException e) {
                    // Another client deleted the node first.
                }
            }

        }
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue.LatchChildWatcher,process,void process(WatchedEvent),"[211, 214]","{'A583': [(211, 211)], 'A596': [(213, 214)], 'A620': [(212, 212)]}","{'A583': 0.25, 'A596': 0.5, 'A620': 0.25}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"        public void process(WatchedEvent event) {
            LOG.debug(""Watcher fired: {}"", event);
            latch.countDown();
        }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue.LatchChildWatcher,await,void await(),"[215, 217]","{'A596': [(215, 217)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"        public void await() throws InterruptedException {
            latch.await();
        }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,take,byte[] take(),"[228, 255]","{'A583': [(229, 229), (231, 231), (233, 233), (235, 235), (239, 239), (244, 246), (250, 250)], 'A596': [(228, 228), (230, 230), (232, 232), (234, 234), (236, 238), (240, 243), (247, 249), (251, 255)]}","{'A583': 0.32142857142857145, 'A596': 0.6785714285714286}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    public byte[] take() throws KeeperException, InterruptedException {
        Map<Long, String> orderedChildren;
        // Same as for element.  Should refactor this.
        while (true) {
            LatchChildWatcher childWatcher = new LatchChildWatcher();
            try {
                orderedChildren = orderedChildren(childWatcher);
            } catch (KeeperException.NoNodeException e) {
                zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);
                continue;
            }
            if (orderedChildren.size() == 0) {
                childWatcher.await();
                continue;
            }

            for (String headNode : orderedChildren.values()) {
                String path = dir + ""/"" + headNode;
                try {
                    byte[] data = zookeeper.getData(path, false, null);
                    zookeeper.delete(path, -1);
                    return data;
                } catch (KeeperException.NoNodeException e) {
                    // Another client deleted the node first.
                }
            }
        }
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,offer,boolean offer(byte[]),"[262, 272]","{'A583': [(262, 265), (267, 267)], 'A596': [(266, 266), (268, 272)]}","{'A583': 0.45454545454545453, 'A596': 0.5454545454545454}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    public boolean offer(byte[] data) throws KeeperException, InterruptedException {
        for (; ; ) {
            try {
                zookeeper.create(dir + ""/"" + prefix, data, acl, CreateMode.PERSISTENT_SEQUENTIAL);
                return true;
            } catch (KeeperException.NoNodeException e) {
                zookeeper.create(dir, new byte[0], acl, CreateMode.PERSISTENT);
            }
        }

    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,peek,byte[] peek(),"[280, 286]","{'A583': [(280, 281), (283, 283)], 'A596': [(282, 282), (284, 286)]}","{'A583': 0.42857142857142855, 'A596': 0.5714285714285714}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    public byte[] peek() throws KeeperException, InterruptedException {
        try {
            return element();
        } catch (NoSuchElementException e) {
            return null;
        }
    }
"
org.apache.zookeeper.recipes.queue,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/main/java/org/apache/zookeeper/recipes/queue/DistributedQueue.java,DistributedQueue,poll,byte[] poll(),"[294, 300]","{'A583': [(295, 295), (297, 297)], 'A596': [(294, 294), (296, 296), (298, 300)]}","{'A583': 0.2857142857142857, 'A596': 0.7142857142857143}",A596,../projects/zookeeper/zookeeper-recipes/zookeeper-recipes-queue/src/test/java/org/apache/zookeeper/recipes/queue/DistributedQueueTest.java,"    public byte[] poll() throws KeeperException, InterruptedException {
        try {
            return remove();
        } catch (NoSuchElementException e) {
            return null;
        }
    }
"
org.apache.zookeeper.version,../projects/zookeeper/zookeeper-server/src/main/java-filtered/org/apache/zookeeper/version/VersionInfoMain.java,VersionInfoMain,main,void main(String[]),"[22, 24]","{'A624': [(22, 24)]}",{'A624': 1.0},A624,,"    public static void main(String[] args) {
        System.out.println(""Apache ZooKeeper, version ${project.version} ${build.time}"");
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,setDefaultWatcher,void setDefaultWatcher(Watcher),"[55, 57]","{'A583': [(55, 57)]}",{'A583': 1.0},A583,,"    void setDefaultWatcher(Watcher defaultWatcher) {
        this.defaultWatcher = defaultWatcher;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getDefaultWatcher,Watcher getDefaultWatcher(),"[59, 61]","{'A583': [(59, 61)]}",{'A583': 1.0},A583,,"    Watcher getDefaultWatcher() {
        return defaultWatcher;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getDataWatchList,List<String> getDataWatchList(),"[63, 67]","{'A583': [(63, 67)]}",{'A583': 1.0},A583,,"    List<String> getDataWatchList() {
        synchronized (dataWatches) {
            return new ArrayList<>(dataWatches.keySet());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getChildWatchList,List<String> getChildWatchList(),"[69, 73]","{'A583': [(69, 73)]}",{'A583': 1.0},A583,,"    List<String> getChildWatchList() {
        synchronized (childWatches) {
            return new ArrayList<>(childWatches.keySet());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getExistWatchList,List<String> getExistWatchList(),"[75, 79]","{'A583': [(75, 79)]}",{'A583': 1.0},A583,,"    List<String> getExistWatchList() {
        synchronized (existWatches) {
            return new ArrayList<>(existWatches.keySet());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getPersistentWatchList,List<String> getPersistentWatchList(),"[81, 85]","{'A583': [(81, 85)]}",{'A583': 1.0},A583,,"    List<String> getPersistentWatchList() {
        synchronized (persistentWatches) {
            return new ArrayList<>(persistentWatches.keySet());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getPersistentRecursiveWatchList,List<String> getPersistentRecursiveWatchList(),"[87, 91]","{'A583': [(87, 91)]}",{'A583': 1.0},A583,,"    List<String> getPersistentRecursiveWatchList() {
        synchronized (persistentRecursiveWatches) {
            return new ArrayList<>(persistentRecursiveWatches.keySet());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getDataWatches,"Map<String, Set<Watcher>> getDataWatches()","[93, 95]","{'A583': [(93, 95)]}",{'A583': 1.0},A583,,"    Map<String, Set<Watcher>> getDataWatches() {
        return dataWatches;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getExistWatches,"Map<String, Set<Watcher>> getExistWatches()","[97, 99]","{'A583': [(97, 99)]}",{'A583': 1.0},A583,,"    Map<String, Set<Watcher>> getExistWatches() {
        return existWatches;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getChildWatches,"Map<String, Set<Watcher>> getChildWatches()","[101, 103]","{'A583': [(101, 103)]}",{'A583': 1.0},A583,,"    Map<String, Set<Watcher>> getChildWatches() {
        return childWatches;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getPersistentWatches,"Map<String, Set<Watcher>> getPersistentWatches()","[105, 107]","{'A583': [(105, 107)]}",{'A583': 1.0},A583,,"    Map<String, Set<Watcher>> getPersistentWatches() {
        return persistentWatches;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,getPersistentRecursiveWatches,"Map<String, Set<Watcher>> getPersistentRecursiveWatches()","[109, 111]","{'A583': [(109, 111)]}",{'A583': 1.0},A583,,"    Map<String, Set<Watcher>> getPersistentRecursiveWatches() {
        return persistentRecursiveWatches;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,addTo,"void addTo(Set<Watcher>,Set<Watcher>)","[113, 117]","{'A583': [(113, 117)]}",{'A583': 1.0},A583,,"    private void addTo(Set<Watcher> from, Set<Watcher> to) {
        if (from != null) {
            to.addAll(from);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,removeWatcher,"Map<Watcher.Event.EventType, Set<Watcher>> removeWatcher(String,Watcher,Watcher.WatcherType,boolean,int)","[119, 201]","{'A583': [(119, 155), (168, 201)], 'A625': [(156, 167)]}","{'A583': 0.8554216867469879, 'A625': 0.14457831325301204}",A583,,"    public Map<Watcher.Event.EventType, Set<Watcher>> removeWatcher(
        String clientPath,
        Watcher watcher,
        Watcher.WatcherType watcherType,
        boolean local,
        int rc
    ) throws KeeperException {
        // Validate the provided znode path contains the given watcher of
        // watcherType
        containsWatcher(clientPath, watcher, watcherType);

        Map<Watcher.Event.EventType, Set<Watcher>> removedWatchers = new HashMap<>();
        HashSet<Watcher> childWatchersToRem = new HashSet<>();
        removedWatchers.put(Watcher.Event.EventType.ChildWatchRemoved, childWatchersToRem);
        HashSet<Watcher> dataWatchersToRem = new HashSet<>();
        removedWatchers.put(Watcher.Event.EventType.DataWatchRemoved, dataWatchersToRem);
        HashSet<Watcher> persistentWatchersToRem = new HashSet<>();
        removedWatchers.put(Watcher.Event.EventType.PersistentWatchRemoved, persistentWatchersToRem);
        boolean removedWatcher = false;
        switch (watcherType) {
        case Children: {
            synchronized (childWatches) {
                removedWatcher = removeWatches(childWatches, watcher, clientPath, local, rc, childWatchersToRem);
            }
            break;
        }
        case Data: {
            synchronized (dataWatches) {
                removedWatcher = removeWatches(dataWatches, watcher, clientPath, local, rc, dataWatchersToRem);
            }

            synchronized (existWatches) {
                boolean removedDataWatcher = removeWatches(existWatches, watcher, clientPath, local, rc, dataWatchersToRem);
                removedWatcher |= removedDataWatcher;
            }
            break;
        }
        case Persistent: {
            synchronized (persistentWatches) {
                removedWatcher = removeWatches(persistentWatches, watcher, clientPath, local, rc, persistentWatchersToRem);
            }
            break;
        }
        case PersistentRecursive: {
            synchronized (persistentRecursiveWatches) {
                removedWatcher = removeWatches(persistentRecursiveWatches, watcher, clientPath, local, rc, persistentWatchersToRem);
            }
            break;
        }
        case Any: {
            synchronized (childWatches) {
                removedWatcher = removeWatches(childWatches, watcher, clientPath, local, rc, childWatchersToRem);
            }

            synchronized (dataWatches) {
                boolean removedDataWatcher = removeWatches(dataWatches, watcher, clientPath, local, rc, dataWatchersToRem);
                removedWatcher |= removedDataWatcher;
            }

            synchronized (existWatches) {
                boolean removedDataWatcher = removeWatches(existWatches, watcher, clientPath, local, rc, dataWatchersToRem);
                removedWatcher |= removedDataWatcher;
            }

            synchronized (persistentWatches) {
                boolean removedPersistentWatcher = removeWatches(persistentWatches,
                        watcher, clientPath, local, rc, persistentWatchersToRem);
                removedWatcher |= removedPersistentWatcher;
            }

            synchronized (persistentRecursiveWatches) {
                boolean removedPersistentRecursiveWatcher = removeWatches(persistentRecursiveWatches,
                        watcher, clientPath, local, rc, persistentWatchersToRem);
                removedWatcher |= removedPersistentRecursiveWatcher;
            }
        }
        }
        // Watcher function doesn't exists for the specified params
        if (!removedWatcher) {
            throw new KeeperException.NoWatcherException(clientPath);
        }
        return removedWatchers;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,contains,"boolean contains(String,Watcher,Map<String, Set<Watcher>>)","[203, 218]","{'A583': [(203, 218)]}",{'A583': 1.0},A583,,"    private boolean contains(String path, Watcher watcherObj, Map<String, Set<Watcher>> pathVsWatchers) {
        boolean watcherExists = true;
        if (pathVsWatchers == null || pathVsWatchers.size() == 0) {
            watcherExists = false;
        } else {
            Set<Watcher> watchers = pathVsWatchers.get(path);
            if (watchers == null) {
                watcherExists = false;
            } else if (watcherObj == null) {
                watcherExists = watchers.size() > 0;
            } else {
                watcherExists = watchers.contains(watcherObj);
            }
        }
        return watcherExists;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,containsWatcher,"void containsWatcher(String,Watcher,Watcher.WatcherType)","[232, 297]","{'A583': [(232, 250), (254, 254), (256, 256), (260, 260), (262, 297)], 'A625': [(251, 253), (255, 255), (257, 259), (261, 261)]}","{'A583': 0.8787878787878788, 'A625': 0.12121212121212122}",A583,,"    void containsWatcher(String path, Watcher watcher, Watcher.WatcherType watcherType) throws
            KeeperException.NoWatcherException {
        boolean containsWatcher = false;
        switch (watcherType) {
        case Children: {
            synchronized (childWatches) {
                containsWatcher = contains(path, watcher, childWatches);
            }
            break;
        }
        case Data: {
            synchronized (dataWatches) {
                containsWatcher = contains(path, watcher, dataWatches);
            }

            synchronized (existWatches) {
                boolean contains_temp = contains(path, watcher, existWatches);
                containsWatcher |= contains_temp;
            }
            break;
        }
        case Persistent: {
            synchronized (persistentWatches) {
                containsWatcher |= contains(path, watcher, persistentWatches);
            }
            break;
        }
        case PersistentRecursive: {
            synchronized (persistentRecursiveWatches) {
                containsWatcher |= contains(path, watcher, persistentRecursiveWatches);
            }
            break;
        }
        case Any: {
            synchronized (childWatches) {
                containsWatcher = contains(path, watcher, childWatches);
            }

            synchronized (dataWatches) {
                boolean contains_temp = contains(path, watcher, dataWatches);
                containsWatcher |= contains_temp;
            }

            synchronized (existWatches) {
                boolean contains_temp = contains(path, watcher, existWatches);
                containsWatcher |= contains_temp;
            }

            synchronized (persistentWatches) {
                boolean contains_temp = contains(path, watcher,
                        persistentWatches);
                containsWatcher |= contains_temp;
            }

            synchronized (persistentRecursiveWatches) {
                boolean contains_temp = contains(path, watcher,
                        persistentRecursiveWatches);
                containsWatcher |= contains_temp;
            }
        }
        }
        // Watcher function doesn't exists for the specified params
        if (!containsWatcher) {
            throw new KeeperException.NoWatcherException(path);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,removeWatches,"boolean removeWatches(Map<String, Set<Watcher>>,Watcher,String,boolean,int,Set<Watcher>)","[299, 338]","{'A583': [(299, 338)]}",{'A583': 1.0},A583,,"    protected boolean removeWatches(
        Map<String, Set<Watcher>> pathVsWatcher,
        Watcher watcher,
        String path,
        boolean local,
        int rc,
        Set<Watcher> removedWatchers) throws KeeperException {
        if (!local && rc != KeeperException.Code.OK.intValue()) {
            throw KeeperException.create(KeeperException.Code.get(rc), path);
        }
        boolean success = false;
        // When local flag is true, remove watchers for the given path
        // irrespective of rc. Otherwise shouldn't remove watchers locally
        // when sees failure from server.
        if (rc == KeeperException.Code.OK.intValue() || (local && rc != KeeperException.Code.OK.intValue())) {
            // Remove all the watchers for the given path
            if (watcher == null) {
                Set<Watcher> pathWatchers = pathVsWatcher.remove(path);
                if (pathWatchers != null) {
                    // found path watchers
                    removedWatchers.addAll(pathWatchers);
                    success = true;
                }
            } else {
                Set<Watcher> watchers = pathVsWatcher.get(path);
                if (watchers != null) {
                    if (watchers.remove(watcher)) {
                        // found path watcher
                        removedWatchers.add(watcher);
                        // cleanup <path vs watchlist>
                        if (watchers.size() <= 0) {
                            pathVsWatcher.remove(path);
                        }
                        success = true;
                    }
                }
            }
        }
        return success;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,materialize,"Set<Watcher> materialize(Watcher.Event.KeeperState,Watcher.Event.EventType,String)","[344, 443]","{'A583': [(344, 406), (408, 412), (414, 429), (431, 443)], 'A625': [(407, 407), (413, 413), (430, 430)]}","{'A583': 0.97, 'A625': 0.03}",A583,,"    @Override
    public Set<Watcher> materialize(
        Watcher.Event.KeeperState state,
        Watcher.Event.EventType type,
        String clientPath
    ) {
        final Set<Watcher> result = new HashSet<>();

        switch (type) {
        case None:
            if (defaultWatcher != null) {
                result.add(defaultWatcher);
            }

            boolean clear = disableAutoWatchReset && state != Watcher.Event.KeeperState.SyncConnected;
            synchronized (dataWatches) {
                for (Set<Watcher> ws : dataWatches.values()) {
                    result.addAll(ws);
                }
                if (clear) {
                    dataWatches.clear();
                }
            }

            synchronized (existWatches) {
                for (Set<Watcher> ws : existWatches.values()) {
                    result.addAll(ws);
                }
                if (clear) {
                    existWatches.clear();
                }
            }

            synchronized (childWatches) {
                for (Set<Watcher> ws : childWatches.values()) {
                    result.addAll(ws);
                }
                if (clear) {
                    childWatches.clear();
                }
            }

            synchronized (persistentWatches) {
                for (Set<Watcher> ws: persistentWatches.values()) {
                    result.addAll(ws);
                }
            }

            synchronized (persistentRecursiveWatches) {
                for (Set<Watcher> ws: persistentRecursiveWatches.values()) {
                    result.addAll(ws);
                }
            }

            return result;
        case NodeDataChanged:
        case NodeCreated:
            synchronized (dataWatches) {
                addTo(dataWatches.remove(clientPath), result);
            }
            synchronized (existWatches) {
                addTo(existWatches.remove(clientPath), result);
            }
            addPersistentWatches(clientPath, type, result);
            break;
        case NodeChildrenChanged:
            synchronized (childWatches) {
                addTo(childWatches.remove(clientPath), result);
            }
            addPersistentWatches(clientPath, type, result);
            break;
        case NodeDeleted:
            synchronized (dataWatches) {
                addTo(dataWatches.remove(clientPath), result);
            }
            // TODO This shouldn't be needed, but just in case
            synchronized (existWatches) {
                Set<Watcher> list = existWatches.remove(clientPath);
                if (list != null) {
                    addTo(list, result);
                    LOG.warn(""We are triggering an exists watch for delete! Shouldn't happen!"");
                }
            }
            synchronized (childWatches) {
                addTo(childWatches.remove(clientPath), result);
            }
            addPersistentWatches(clientPath, type, result);
            break;
        default:
            String errorMsg = String.format(
                ""Unhandled watch event type %s with state %s on path %s"",
                type,
                state,
                clientPath);
            LOG.error(errorMsg);
            throw new RuntimeException(errorMsg);
        }

        return result;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKWatchManager.java,ZKWatchManager,addPersistentWatches,"void addPersistentWatches(String,Watcher.Event.EventType,Set<Watcher>)","[445, 461]","{'A583': [(446, 448), (456, 461)], 'A625': [(445, 445), (449, 455)]}","{'A583': 0.5294117647058824, 'A625': 0.47058823529411764}",A583,,"    private void addPersistentWatches(String clientPath, Watcher.Event.EventType type, Set<Watcher> result) {
        synchronized (persistentWatches) {
            addTo(persistentWatches.get(clientPath), result);
        }
        // The semantics of persistent recursive watch promise no child events on descendant nodes. When there
        // are standard child watches on descendants of node being watched in persistent recursive mode, server
        // will deliver child events to client inevitably. So we have to filter out child events for persistent
        // recursive watches on client side.
        if (type == Watcher.Event.EventType.NodeChildrenChanged) {
            return;
        }
        synchronized (persistentRecursiveWatches) {
            for (String path : PathParentIterator.forAll(clientPath).asIterable()) {
                addTo(persistentRecursiveWatches.get(path), result);
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult,getType,int getType(),"[42, 44]","{'A590': [(42, 44)]}",{'A590': 1.0},A590,,"    public int getType() {
        return type;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.CreateResult,getPath,String getPath(),"[70, 72]","{'A590': [(70, 72)]}",{'A590': 1.0},A590,,"        public String getPath() {
            return path;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.CreateResult,getStat,Stat getStat(),"[74, 76]","{'A591': [(74, 76)]}",{'A591': 1.0},A591,,"        public Stat getStat() {
            return stat;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.CreateResult,equals,boolean equals(Object),"[78, 95]","{'A590': [(78, 79), (86, 87), (95, 95)], 'A583': [(80, 85), (89, 94)], 'A591': [(88, 88)]}","{'A590': 0.2777777777777778, 'A583': 0.6666666666666666, 'A591': 0.05555555555555555}",A583,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof CreateResult)) {
                return false;
            }

            CreateResult other = (CreateResult) o;

            boolean statsAreEqual = stat == null
                                    && other.stat == null
                                    || (stat != null
                                        && other.stat != null
                                        && stat.getMzxid() == other.stat.getMzxid());
            return getType() == other.getType() && path.equals(other.getPath()) && statsAreEqual;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.CreateResult,hashCode,int hashCode(),"[97, 100]","{'A590': [(97, 98), (100, 100)], 'A583': [(99, 99)]}","{'A590': 0.75, 'A583': 0.25}",A590,,"        @Override
        public int hashCode() {
            return (int) (getType() * 35 + path.hashCode() + (stat == null ? 0 : stat.getMzxid()));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.DeleteResult,equals,boolean equals(Object),"[113, 124]","{'A590': [(113, 114), (121, 121), (123, 124)], 'A583': [(115, 120)], 'A596': [(122, 122)]}","{'A590': 0.4166666666666667, 'A583': 0.5, 'A596': 0.08333333333333333}",A583,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof DeleteResult)) {
                return false;
            }

            DeleteResult opResult = (DeleteResult) o;
            return getType() == opResult.getType();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.DeleteResult,hashCode,int hashCode(),"[126, 129]","{'A590': [(126, 129)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.SetDataResult,getStat,Stat getStat(),"[146, 148]","{'A590': [(146, 148)]}",{'A590': 1.0},A590,,"        public Stat getStat() {
            return stat;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.SetDataResult,equals,boolean equals(Object),"[150, 161]","{'A590': [(150, 151), (158, 161)], 'A583': [(152, 157)]}","{'A590': 0.5, 'A583': 0.5}",A590,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof SetDataResult)) {
                return false;
            }

            SetDataResult other = (SetDataResult) o;
            return getType() == other.getType() && stat.getMzxid() == other.stat.getMzxid();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.SetDataResult,hashCode,int hashCode(),"[163, 166]","{'A590': [(163, 166)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return (int) (getType() * 35 + stat.getMzxid());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.CheckResult,equals,boolean equals(Object),"[179, 190]","{'A590': [(179, 180), (187, 190)], 'A583': [(181, 186)]}","{'A590': 0.5, 'A583': 0.5}",A590,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof CheckResult)) {
                return false;
            }

            CheckResult other = (CheckResult) o;
            return getType() == other.getType();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.CheckResult,hashCode,int hashCode(),"[192, 195]","{'A590': [(192, 195)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetChildrenResult,getChildren,List<String> getChildren(),"[212, 214]","{'A626': [(212, 214)]}",{'A626': 1.0},A626,,"        public List<String> getChildren() {
            return children;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetChildrenResult,equals,boolean equals(Object),"[216, 227]","{'A626': [(216, 217), (224, 227)], 'A583': [(218, 223)]}","{'A626': 0.5, 'A583': 0.5}",A626,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof GetChildrenResult)) {
                return false;
            }

            GetChildrenResult other = (GetChildrenResult) o;
            return getType() == other.getType() && children.equals(other.children);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetChildrenResult,hashCode,int hashCode(),"[229, 232]","{'A626': [(229, 232)]}",{'A626': 1.0},A626,,"        @Override
        public int hashCode() {
            return getType() * 35 + children.hashCode();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetDataResult,getData,byte[] getData(),"[250, 252]","{'A626': [(250, 252)]}",{'A626': 1.0},A626,,"        public byte[] getData() {
            return data == null ? null : Arrays.copyOf(data, data.length);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetDataResult,getStat,Stat getStat(),"[253, 255]","{'A626': [(253, 255)]}",{'A626': 1.0},A626,,"        public Stat getStat() {
            return stat;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetDataResult,equals,boolean equals(Object),"[257, 268]","{'A626': [(257, 258), (265, 266), (268, 268)], 'A583': [(259, 264), (267, 267)]}","{'A626': 0.4166666666666667, 'A583': 0.5833333333333334}",A583,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof GetDataResult)) {
                return false;
            }

            GetDataResult other = (GetDataResult) o;
            return getType() == other.getType() && stat.equals(other.stat) && Arrays.equals(data, other.data);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.GetDataResult,hashCode,int hashCode(),"[270, 273]","{'A626': [(270, 273)]}",{'A626': 1.0},A626,,"        @Override
        public int hashCode() {
            return (int) (getType() * 35 + stat.getMzxid() + Arrays.hashCode(data));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.ErrorResult,getErr,int getErr(),"[292, 294]","{'A590': [(292, 294)]}",{'A590': 1.0},A590,,"        public int getErr() {
            return err;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.ErrorResult,equals,boolean equals(Object),"[296, 307]","{'A590': [(296, 297), (304, 307)], 'A583': [(298, 303)]}","{'A590': 0.5, 'A583': 0.5}",A590,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof ErrorResult)) {
                return false;
            }

            ErrorResult other = (ErrorResult) o;
            return getType() == other.getType() && err == other.getErr();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/OpResult.java,OpResult.ErrorResult,hashCode,int hashCode(),"[309, 312]","{'A590': [(309, 312)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType() * 35 + err;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,isConnected,boolean isConnected(),"[104, 114]","{'A597': [(104, 107)], 'A627': [(108, 114)]}","{'A597': 0.36363636363636365, 'A627': 0.6363636363636364}",A627,,"    @Override
    boolean isConnected() {
        // Assuming that isConnected() is only used to initiate connection,
        // not used by some other connection status judgement.
        connectLock.lock();
        try {
            return channel != null || connectFuture != null;
        } finally {
            connectLock.unlock();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,configureBootstrapAllocator,Bootstrap configureBootstrapAllocator(Bootstrap),"[116, 123]","{'A597': [(123, 123)], 'A627': [(116, 122)]}","{'A597': 0.125, 'A627': 0.875}",A627,,"    private Bootstrap configureBootstrapAllocator(Bootstrap bootstrap) {
        ByteBufAllocator testAllocator = TEST_ALLOCATOR.get();
        if (testAllocator != null) {
            return bootstrap.option(ChannelOption.ALLOCATOR, testAllocator);
        } else {
            return bootstrap;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,connect,void connect(InetSocketAddress),"[125, 195]","{'A583': [(129, 133), (148, 148)], 'A597': [(125, 128), (136, 136), (190, 190), (195, 195)], 'A627': [(134, 135), (137, 147), (149, 189), (191, 194)]}","{'A583': 0.08450704225352113, 'A597': 0.09859154929577464, 'A627': 0.8169014084507042}",A627,,"    @Override
    void connect(InetSocketAddress addr) throws IOException {
        firstConnect = new CountDownLatch(1);

        Bootstrap bootstrap = new Bootstrap().group(eventLoopGroup)
                                             .channel(NettyUtils.nioOrEpollSocketChannel())
                                             .option(ChannelOption.SO_LINGER, -1)
                                             .option(ChannelOption.TCP_NODELAY, true)
                                             .handler(new ZKClientPipelineFactory(addr.getHostString(), addr.getPort()));
        bootstrap = configureBootstrapAllocator(bootstrap);
        bootstrap.validate();

        connectLock.lock();
        try {
            connectFuture = bootstrap.connect(addr);
            connectFuture.addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture channelFuture) throws Exception {
                    // this lock guarantees that channel won't be assigned after cleanup().
                    boolean connected = false;
                    connectLock.lock();
                    try {
                        if (!channelFuture.isSuccess()) {
                            LOG.warn(""future isn't success."", channelFuture.cause());
                            return;
                        } else if (connectFuture == null) {
                            LOG.info(""connect attempt cancelled"");
                            // If the connect attempt was cancelled but succeeded
                            // anyway, make sure to close the channel, otherwise
                            // we may leak a file descriptor.
                            channelFuture.channel().close();
                            return;
                        }
                        // setup channel, variables, connection, etc.
                        channel = channelFuture.channel();

                        disconnected.set(false);
                        initialized = false;
                        lenBuffer.clear();
                        incomingBuffer = lenBuffer;

                        sendThread.primeConnection();
                        updateNow();
                        updateLastSendAndHeard();

                        if (sendThread.tunnelAuthInProgress()) {
                            waitSasl.drainPermits();
                            needSasl.set(true);
                            sendPrimePacket();
                        } else {
                            needSasl.set(false);
                        }
                        connected = true;
                    } finally {
                        connectFuture = null;
                        connectLock.unlock();
                        if (connected) {
                            LOG.info(""channel is connected: {}"", channelFuture.channel());
                        }
                        // need to wake on connect success or failure to avoid
                        // timing out ClientCnxn.SendThread which may be
                        // blocked waiting for first connect in doTransport().
                        wakeupCnxn();
                        firstConnect.countDown();
                    }
                }
            });
        } finally {
            connectLock.unlock();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,operationComplete,void operationComplete(ChannelFuture),"[141, 190]","{'A583': [(148, 148)], 'A597': [(190, 190)], 'A627': [(141, 147), (149, 189)]}","{'A583': 0.02, 'A597': 0.02, 'A627': 0.96}",A627,,"                @Override
                public void operationComplete(ChannelFuture channelFuture) throws Exception {
                    // this lock guarantees that channel won't be assigned after cleanup().
                    boolean connected = false;
                    connectLock.lock();
                    try {
                        if (!channelFuture.isSuccess()) {
                            LOG.warn(""future isn't success."", channelFuture.cause());
                            return;
                        } else if (connectFuture == null) {
                            LOG.info(""connect attempt cancelled"");
                            // If the connect attempt was cancelled but succeeded
                            // anyway, make sure to close the channel, otherwise
                            // we may leak a file descriptor.
                            channelFuture.channel().close();
                            return;
                        }
                        // setup channel, variables, connection, etc.
                        channel = channelFuture.channel();

                        disconnected.set(false);
                        initialized = false;
                        lenBuffer.clear();
                        incomingBuffer = lenBuffer;

                        sendThread.primeConnection();
                        updateNow();
                        updateLastSendAndHeard();

                        if (sendThread.tunnelAuthInProgress()) {
                            waitSasl.drainPermits();
                            needSasl.set(true);
                            sendPrimePacket();
                        } else {
                            needSasl.set(false);
                        }
                        connected = true;
                    } finally {
                        connectFuture = null;
                        connectLock.unlock();
                        if (connected) {
                            LOG.info(""channel is connected: {}"", channelFuture.channel());
                        }
                        // need to wake on connect success or failure to avoid
                        // timing out ClientCnxn.SendThread which may be
                        // blocked waiting for first connect in doTransport().
                        wakeupCnxn();
                        firstConnect.countDown();
                    }
                }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,cleanup,void cleanup(),"[197, 219]","{'A597': [(197, 201), (203, 205), (207, 219)], 'A627': [(202, 202)], 'A631': [(206, 206)]}","{'A597': 0.9130434782608695, 'A627': 0.043478260869565216, 'A631': 0.043478260869565216}",A597,,"    @Override
    void cleanup() {
        connectLock.lock();
        try {
            if (connectFuture != null) {
                connectFuture.cancel(false);
                connectFuture = null;
            }
            if (channel != null) {
                channel.close();
                channel = null;
            }
        } finally {
            connectLock.unlock();
        }
        Iterator<Packet> iter = outgoingQueue.iterator();
        while (iter.hasNext()) {
            Packet p = iter.next();
            if (p == WakeupPacket.getInstance()) {
                iter.remove();
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,close,void close(),"[221, 224]","{'A597': [(221, 222), (224, 224)], 'A627': [(223, 223)]}","{'A597': 0.75, 'A627': 0.25}",A597,,"    @Override
    void close() {
        eventLoopGroup.shutdownGracefully();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,saslCompleted,void saslCompleted(),"[226, 230]","{'A597': [(226, 230)]}",{'A597': 1.0},A597,,"    @Override
    void saslCompleted() {
        needSasl.set(false);
        waitSasl.release();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,connectionPrimed,void connectionPrimed(),"[232, 234]","{'A597': [(232, 234)]}",{'A597': 1.0},A597,,"    @Override
    void connectionPrimed() {
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,packetAdded,void packetAdded(),"[236, 241]","{'A597': [(236, 237), (241, 241)], 'A627': [(238, 240)]}","{'A597': 0.5, 'A627': 0.5}",A597,,"    @Override
    void packetAdded() {
        // NO-OP. Adding a packet will already wake up a netty connection
        // so we don't need to add a dummy packet to the queue to trigger
        // a wake-up.
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,onClosing,void onClosing(),"[243, 250]","{'A597': [(243, 244), (248, 250)], 'A632': [(245, 247)]}","{'A597': 0.625, 'A632': 0.375}",A597,,"    @Override
    void onClosing() {
        if (firstConnect != null) {
            firstConnect.countDown();
        }
        wakeupCnxn();
        LOG.info(""channel is told closing"");
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,wakeupCnxn,void wakeupCnxn(),"[252, 259]","{'A597': [(252, 255), (259, 259)], 'A632': [(256, 258)]}","{'A597': 0.625, 'A632': 0.375}",A597,,"    private void wakeupCnxn() {
        if (needSasl.get()) {
            waitSasl.release();
        }
        if (outgoingQueue != null) {
          outgoingQueue.add(WakeupPacket.getInstance());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,doTransport,"void doTransport(int,Queue<Packet>,ClientCnxn)","[261, 295]","{'A583': [(262, 265), (287, 287)], 'A597': [(261, 261), (266, 275), (277, 279), (281, 286), (288, 295)], 'A627': [(276, 276), (280, 280)]}","{'A583': 0.14285714285714285, 'A597': 0.8, 'A627': 0.05714285714285714}",A597,,"    @Override
    void doTransport(
        int waitTimeOut,
        Queue<Packet> pendingQueue,
        ClientCnxn cnxn) throws IOException, InterruptedException {
        try {
            if (!firstConnect.await(waitTimeOut, TimeUnit.MILLISECONDS)) {
                return;
            }
            Packet head = null;
            if (needSasl.get()) {
                if (!waitSasl.tryAcquire(waitTimeOut, TimeUnit.MILLISECONDS)) {
                    return;
                }
            } else {
                head = outgoingQueue.poll(waitTimeOut, TimeUnit.MILLISECONDS);
            }
            // check if being waken up on closing.
            if (!sendThread.getZkState().isAlive()) {
                // adding back the packet to notify of failure in conLossPacket().
                addBack(head);
                return;
            }
            // channel disconnection happened
            if (disconnected.get()) {
                addBack(head);
                throw new EndOfStreamException(""channel for sessionid 0x"" + Long.toHexString(sessionId) + "" is lost"");
            }
            if (head != null) {
                doWrite(pendingQueue, head, cnxn);
            }
        } finally {
            updateNow();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,addBack,void addBack(Packet),"[297, 301]","{'A597': [(297, 301)]}",{'A597': 1.0},A597,,"    private void addBack(Packet head) {
        if (head != null && head != WakeupPacket.getInstance()) {
            outgoingQueue.addFirst(head);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,sendPktAndFlush,ChannelFuture sendPktAndFlush(Packet),"[309, 311]","{'A627': [(310, 311)], 'A592': [(309, 309)]}","{'A627': 0.6666666666666666, 'A592': 0.3333333333333333}",A627,,"    private ChannelFuture sendPktAndFlush(Packet p) throws IOException {
        return sendPkt(p, true);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,sendPktOnly,ChannelFuture sendPktOnly(Packet),"[319, 321]","{'A627': [(320, 321)], 'A592': [(319, 319)]}","{'A627': 0.6666666666666666, 'A592': 0.3333333333333333}",A627,,"    private ChannelFuture sendPktOnly(Packet p) throws IOException {
        return sendPkt(p, false);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,sendPkt,"ChannelFuture sendPkt(Packet,boolean)","[330, 342]","{'A583': [(339, 339)], 'A597': [(334, 337), (342, 342)], 'A627': [(338, 338), (340, 341)], 'A592': [(330, 333)]}","{'A583': 0.07692307692307693, 'A597': 0.38461538461538464, 'A627': 0.23076923076923078, 'A592': 0.3076923076923077}",A597,,"    private ChannelFuture sendPkt(Packet p, boolean doFlush) throws IOException {
        if (channel == null) {
            throw new IOException(""channel has been closed"");
        }
        // Assuming the packet will be sent out successfully. Because if it fails,
        // the channel will close and clean up queues.
        p.createBB();
        updateLastSend();
        final ByteBuf writeBuffer = Unpooled.wrappedBuffer(p.bb);
        final ChannelFuture result = doFlush ? channel.writeAndFlush(writeBuffer) : channel.write(writeBuffer);
        result.addListener(onSendPktDoneListener);
        return result;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,sendPrimePacket,void sendPrimePacket(),"[344, 347]","{'A597': [(345, 345), (347, 347)], 'A627': [(346, 346)], 'A592': [(344, 344)]}","{'A597': 0.5, 'A627': 0.25, 'A592': 0.25}",A597,,"    private void sendPrimePacket() throws IOException {
        // assuming the first packet is the priming packet.
        sendPktAndFlush(outgoingQueue.remove());
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,doWrite,"void doWrite(Queue<Packet>,Packet,ClientCnxn)","[352, 378]","{'A583': [(357, 359)], 'A597': [(353, 353), (355, 356), (360, 364), (367, 372), (378, 378)], 'A627': [(354, 354), (365, 366), (373, 377)], 'A592': [(352, 352)]}","{'A583': 0.1111111111111111, 'A597': 0.5555555555555556, 'A627': 0.2962962962962963, 'A592': 0.037037037037037035}",A597,,"    private void doWrite(Queue<Packet> pendingQueue, Packet p, ClientCnxn cnxn) throws IOException {
        updateNow();
        boolean anyPacketsSent = false;
        while (true) {
            if (p != WakeupPacket.getInstance()) {
                if ((p.requestHeader != null)
                    && (p.requestHeader.getType() != ZooDefs.OpCode.ping)
                    && (p.requestHeader.getType() != ZooDefs.OpCode.auth)) {
                    p.requestHeader.setXid(cnxn.getXid());
                    synchronized (pendingQueue) {
                        pendingQueue.add(p);
                    }
                }
                sendPktOnly(p);
                anyPacketsSent = true;
            }
            if (outgoingQueue.isEmpty()) {
                break;
            }
            p = outgoingQueue.remove();
        }
        // TODO: maybe we should flush in the loop above every N packets/bytes?
        // But, how do we determine the right value for N ...
        if (anyPacketsSent) {
            channel.flush();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,sendPacket,void sendPacket(ClientCnxn.Packet),"[380, 383]","{'A597': [(380, 381), (383, 383)], 'A627': [(382, 382)]}","{'A597': 0.75, 'A627': 0.25}",A597,,"    @Override
    void sendPacket(ClientCnxn.Packet p) throws IOException {
        sendPktAndFlush(p);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,getRemoteSocketAddress,SocketAddress getRemoteSocketAddress(),"[385, 389]","{'A597': [(385, 387), (389, 389)], 'A627': [(388, 388)]}","{'A597': 0.8, 'A627': 0.2}",A597,,"    @Override
    SocketAddress getRemoteSocketAddress() {
        Channel copiedChanRef = channel;
        return (copiedChanRef == null) ? null : copiedChanRef.remoteAddress();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,getLocalSocketAddress,SocketAddress getLocalSocketAddress(),"[391, 395]","{'A597': [(391, 393), (395, 395)], 'A627': [(394, 394)]}","{'A597': 0.8, 'A627': 0.2}",A597,,"    @Override
    SocketAddress getLocalSocketAddress() {
        Channel copiedChanRef = channel;
        return (copiedChanRef == null) ? null : copiedChanRef.localAddress();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,testableCloseSocket,void testableCloseSocket(),"[397, 403]","{'A597': [(397, 403)]}",{'A597': 1.0},A597,,"    @Override
    void testableCloseSocket() throws IOException {
        Channel copiedChanRef = channel;
        if (copiedChanRef != null) {
            copiedChanRef.disconnect().awaitUninterruptibly();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.WakeupPacket,getInstance,Packet getInstance(),"[414, 416]","{'A597': [(414, 416)]}",{'A597': 1.0},A597,,"        public static Packet getInstance() {
            return instance;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.ZKClientPipelineFactory,initChannel,void initChannel(SocketChannel),"[434, 441]","{'A597': [(434, 434), (437, 437), (440, 441)], 'A627': [(435, 436)], 'A630': [(438, 439)]}","{'A597': 0.5, 'A627': 0.25, 'A630': 0.25}",A597,,"        @Override
        protected void initChannel(SocketChannel ch) throws Exception {
            ChannelPipeline pipeline = ch.pipeline();
            if (clientConfig.getBoolean(ZKClientConfig.SECURE_CLIENT)) {
                initSSL(pipeline);
            }
            pipeline.addLast(""handler"", new ZKClientHandler());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.ZKClientPipelineFactory,initSSL,void initSSL(ChannelPipeline),"[445, 454]","{'A627': [(450, 450), (453, 453)], 'A628': [(445, 449), (452, 452)], 'A630': [(451, 451), (454, 454)]}","{'A627': 0.2, 'A628': 0.6, 'A630': 0.2}",A628,,"        private synchronized void initSSL(ChannelPipeline pipeline)
            throws X509Exception.KeyManagerException, X509Exception.TrustManagerException, SSLException {
            if (sslContext == null) {
                try (ClientX509Util x509Util = new ClientX509Util()) {
                    sslContext = x509Util.createNettySslContextForClient(clientConfig);
                }
            }
            pipeline.addLast(""ssl"", sslContext.newHandler(pipeline.channel().alloc(), host, port));
            LOG.info(""SSL handler added for channel: {}"", pipeline.channel());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.ZKClientHandler,channelInactive,void channelInactive(ChannelHandlerContext),"[466, 470]","{'A597': [(466, 466), (469, 470)], 'A627': [(467, 468)]}","{'A597': 0.6, 'A627': 0.4}",A597,,"        @Override
        public void channelInactive(ChannelHandlerContext ctx) throws Exception {
            LOG.info(""channel is disconnected: {}"", ctx.channel());
            cleanup();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.ZKClientHandler,cleanup,void cleanup(),"[476, 482]","{'A597': [(476, 482)]}",{'A597': 1.0},A597,,"        private void cleanup() {
            if (!channelClosed.compareAndSet(false, true)) {
                return;
            }
            disconnected.set(true);
            onClosing();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.ZKClientHandler,channelRead0,"void channelRead0(ChannelHandlerContext,ByteBuf)","[484, 517]","{'A583': [(489, 489)], 'A597': [(484, 484), (486, 486), (488, 488), (490, 497), (499, 514), (517, 517)], 'A627': [(485, 485), (487, 487), (498, 498), (515, 516)]}","{'A583': 0.029411764705882353, 'A597': 0.8235294117647058, 'A627': 0.14705882352941177}",A597,,"        @Override
        protected void channelRead0(ChannelHandlerContext ctx, ByteBuf buf) throws Exception {
            updateNow();
            while (buf.isReadable()) {
                if (incomingBuffer.remaining() > buf.readableBytes()) {
                    int newLimit = incomingBuffer.position() + buf.readableBytes();
                    incomingBuffer.limit(newLimit);
                }
                buf.readBytes(incomingBuffer);
                incomingBuffer.limit(incomingBuffer.capacity());

                if (!incomingBuffer.hasRemaining()) {
                    incomingBuffer.flip();
                    if (incomingBuffer == lenBuffer) {
                        recvCount.getAndIncrement();
                        readLength();
                    } else if (!initialized) {
                        readConnectResult();
                        lenBuffer.clear();
                        incomingBuffer = lenBuffer;
                        initialized = true;
                        updateLastHeard();
                    } else {
                        sendThread.readResponse(incomingBuffer);
                        lenBuffer.clear();
                        incomingBuffer = lenBuffer;
                        updateLastHeard();
                    }
                }
            }
            wakeupCnxn();
            // Note: SimpleChannelInboundHandler releases the ByteBuf for us
            // so we don't need to do it.
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty.ZKClientHandler,exceptionCaught,"void exceptionCaught(ChannelHandlerContext,Throwable)","[519, 523]","{'A583': [(521, 521)], 'A597': [(519, 519), (522, 523)], 'A627': [(520, 520)]}","{'A583': 0.2, 'A597': 0.6, 'A627': 0.2}",A597,,"        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) {
            LOG.error(""Unexpected throwable"", cause);
            cleanup();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,setTestAllocator,void setTestAllocator(ByteBufAllocator),"[534, 536]","{'A627': [(534, 536)]}",{'A627': 1.0},A627,,"    static void setTestAllocator(ByteBufAllocator allocator) {
        TEST_ALLOCATOR.set(allocator);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNetty.java,ClientCnxnSocketNetty,clearTestAllocator,void clearTestAllocator(),"[543, 545]","{'A627': [(543, 545)]}",{'A627': 1.0},A627,,"    static void clearTestAllocator() {
        TEST_ALLOCATOR.set(null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Watcher.java,KeeperState,getIntValue,int getIntValue(),"[109, 111]","{'A591': [(109, 111)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatcherTest.java,"            public int getIntValue() {
                return intValue;
            }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Watcher.java,KeeperState,fromInt,KeeperState fromInt(int),"[113, 137]","{'A583': [(114, 135)], 'A591': [(113, 113), (136, 137)]}","{'A583': 0.88, 'A591': 0.12}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatcherTest.java,"            public static KeeperState fromInt(int intValue) {
                switch (intValue) {
                case -1:
                    return KeeperState.Unknown;
                case 0:
                    return KeeperState.Disconnected;
                case 1:
                    return KeeperState.NoSyncConnected;
                case 3:
                    return KeeperState.SyncConnected;
                case 4:
                    return KeeperState.AuthFailed;
                case 5:
                    return KeeperState.ConnectedReadOnly;
                case 6:
                    return KeeperState.SaslAuthenticated;
                case -112:
                    return KeeperState.Expired;
                case 7:
                    return KeeperState.Closed;

                default:
                    throw new RuntimeException(""Invalid integer value for conversion to KeeperState"");
                }
            }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Watcher.java,EventType,getIntValue,int getIntValue(),"[161, 163]","{'A591': [(161, 163)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatcherTest.java,"            public int getIntValue() {
                return intValue;
            }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Watcher.java,EventType,fromInt,EventType fromInt(int),"[165, 187]","{'A583': [(166, 180), (183, 185), (187, 187)], 'A591': [(165, 165), (186, 186)], 'A636': [(181, 182)]}","{'A583': 0.8260869565217391, 'A591': 0.08695652173913043, 'A636': 0.08695652173913043}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatcherTest.java,"            public static EventType fromInt(int intValue) {
                switch (intValue) {
                case -1:
                    return EventType.None;
                case 1:
                    return EventType.NodeCreated;
                case 2:
                    return EventType.NodeDeleted;
                case 3:
                    return EventType.NodeDataChanged;
                case 4:
                    return EventType.NodeChildrenChanged;
                case 5:
                    return EventType.DataWatchRemoved;
                case 6:
                    return EventType.ChildWatchRemoved;
                case 7:
                    return EventType.PersistentWatchRemoved;

                default:
                    throw new RuntimeException(""Invalid integer value for conversion to EventType"");
                }
            }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Watcher.java,WatcherType,getIntValue,int getIntValue(),"[210, 212]","{'A591': [(210, 212)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatcherTest.java,"        public int getIntValue() {
            return intValue;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Watcher.java,WatcherType,fromInt,WatcherType fromInt(int),"[214, 229]","{'A583': [(227, 227)], 'A591': [(214, 221), (226, 226), (228, 229)], 'A625': [(222, 225)]}","{'A583': 0.0625, 'A591': 0.6875, 'A625': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatcherTest.java,"        public static WatcherType fromInt(int intValue) {
            switch (intValue) {
            case 1:
                return WatcherType.Children;
            case 2:
                return WatcherType.Data;
            case 3:
                return WatcherType.Any;
            case 4:
                return Persistent;
            case 5:
                return PersistentRecursive;
            default:
                throw new RuntimeException(""Invalid integer value for conversion to WatcherType"");
            }
        }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,isReadonlyAvailable,boolean isReadonlyAvailable(),"[36, 38]","{'A583': [(36, 38)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    public boolean isReadonlyAvailable() {
        return isReadonlyAvailable != null && isReadonlyAvailable;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,deserializeConnectRequest,ConnectRequest deserializeConnectRequest(InputArchive),"[44, 62]","{'A583': [(44, 62)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    public ConnectRequest deserializeConnectRequest(InputArchive inputArchive) throws IOException {
        if (isReadonlyAvailable != null) {
            if (isReadonlyAvailable) {
                return deserializeConnectRequestWithReadonly(inputArchive);
            } else {
                return deserializeConnectRequestWithoutReadonly(inputArchive);
            }
        }

        final ConnectRequest request = deserializeConnectRequestWithoutReadonly(inputArchive);
        try {
            request.setReadOnly(inputArchive.readBool(""readOnly""));
            this.isReadonlyAvailable = true;
        } catch (Exception e) {
            request.setReadOnly(false); // old version doesn't have readonly concept
            this.isReadonlyAvailable = false;
        }
        return request;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,deserializeConnectRequestWithReadonly,ConnectRequest deserializeConnectRequestWithReadonly(InputArchive),"[64, 68]","{'A583': [(64, 68)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private ConnectRequest deserializeConnectRequestWithReadonly(InputArchive inputArchive) throws IOException {
        final ConnectRequest request = new ConnectRequest();
        request.deserialize(inputArchive, ""connect"");
        return request;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,deserializeConnectRequestWithoutReadonly,ConnectRequest deserializeConnectRequestWithoutReadonly(InputArchive),"[70, 80]","{'A583': [(70, 80)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private ConnectRequest deserializeConnectRequestWithoutReadonly(InputArchive inputArchive) throws IOException {
        final ConnectRequest request = new ConnectRequest();
        inputArchive.startRecord(""connect"");
        request.setProtocolVersion(inputArchive.readInt(""protocolVersion""));
        request.setLastZxidSeen(inputArchive.readLong(""lastZxidSeen""));
        request.setTimeOut(inputArchive.readInt(""timeOut""));
        request.setSessionId(inputArchive.readLong(""sessionId""));
        request.setPasswd(inputArchive.readBuffer(""passwd""));
        inputArchive.endRecord(""connect"");
        return request;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,deserializeConnectResponse,ConnectResponse deserializeConnectResponse(InputArchive),"[86, 104]","{'A583': [(86, 104)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    public ConnectResponse deserializeConnectResponse(InputArchive inputArchive) throws IOException {
        if (isReadonlyAvailable != null) {
            if (isReadonlyAvailable) {
                return deserializeConnectResponseWithReadonly(inputArchive);
            } else {
                return deserializeConnectResponseWithoutReadonly(inputArchive);
            }
        }

        final ConnectResponse response = deserializeConnectResponseWithoutReadonly(inputArchive);
        try {
            response.setReadOnly(inputArchive.readBool(""readOnly""));
            this.isReadonlyAvailable = true;
        } catch (Exception e) {
            response.setReadOnly(false); // old version doesn't have readonly concept
            this.isReadonlyAvailable = false;
        }
        return response;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,deserializeConnectResponseWithReadonly,ConnectResponse deserializeConnectResponseWithReadonly(InputArchive),"[106, 110]","{'A583': [(106, 110)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private ConnectResponse deserializeConnectResponseWithReadonly(InputArchive inputArchive) throws IOException {
        final ConnectResponse response = new ConnectResponse();
        response.deserialize(inputArchive, ""connect"");
        return response;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,deserializeConnectResponseWithoutReadonly,ConnectResponse deserializeConnectResponseWithoutReadonly(InputArchive),"[112, 121]","{'A583': [(112, 121)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private ConnectResponse deserializeConnectResponseWithoutReadonly(InputArchive inputArchive) throws IOException {
        final ConnectResponse response = new ConnectResponse();
        inputArchive.startRecord(""connect"");
        response.setProtocolVersion(inputArchive.readInt(""protocolVersion""));
        response.setTimeOut(inputArchive.readInt(""timeOut""));
        response.setSessionId(inputArchive.readLong(""sessionId""));
        response.setPasswd(inputArchive.readBuffer(""passwd""));
        inputArchive.endRecord(""connect"");
        return response;
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,serializeConnectResponse,"void serializeConnectResponse(ConnectResponse,OutputArchive)","[132, 134]","{'A637': [(132, 134)]}",{'A637': 1.0},A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    public void serializeConnectResponse(final ConnectResponse response, OutputArchive outputArchive) throws IOException {
        serializeConnectResponse(response, outputArchive, isReadonlyAvailable());
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,serializeConnectResponse,"void serializeConnectResponse(ConnectResponse,OutputArchive,boolean)","[136, 142]","{'A637': [(136, 142)]}",{'A637': 1.0},A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private static void serializeConnectResponse(final ConnectResponse response, OutputArchive outputArchive, boolean withReadonly) throws IOException {
        if (withReadonly) {
            serializeConnectResponseWithReadonly(response, outputArchive);
        } else {
            serializeConnectResponseWithoutReadonly(response, outputArchive);
        }
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,serializeConnectResponseWithReadonly,"void serializeConnectResponseWithReadonly(ConnectResponse,OutputArchive)","[144, 146]","{'A637': [(144, 146)]}",{'A637': 1.0},A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private static void serializeConnectResponseWithReadonly(ConnectResponse response, OutputArchive outputArchive) throws IOException {
        response.serialize(outputArchive, ""connect"");
    }
"
org.apache.zookeeper.compat,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/compat/ProtocolManager.java,ProtocolManager,serializeConnectResponseWithoutReadonly,"void serializeConnectResponseWithoutReadonly(ConnectResponse,OutputArchive)","[148, 155]","{'A637': [(148, 155)]}",{'A637': 1.0},A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/compat/ProtocolManagerTest.java,"    private static void serializeConnectResponseWithoutReadonly(ConnectResponse response, OutputArchive outputArchive) throws IOException {
        outputArchive.startRecord(response, ""connect"");
        outputArchive.writeInt(response.getProtocolVersion(), ""protocolVersion"");
        outputArchive.writeInt(response.getTimeOut(), ""timeOut"");
        outputArchive.writeLong(response.getSessionId(), ""sessionId"");
        outputArchive.writeBuffer(response.getPasswd(), ""passwd"");
        outputArchive.endRecord(response, ""connect"");
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,isConnected,boolean isConnected(),"[59, 62]","{'A591': [(59, 62)]}",{'A591': 1.0},A591,,"    @Override
    boolean isConnected() {
        return sockKey != null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,doIO,"void doIO(Queue<Packet>,ClientCnxn)","[68, 155]","{'A583': [(68, 68), (76, 78), (88, 88), (106, 106), (112, 114), (124, 125)], 'A591': [(69, 75), (79, 82), (84, 87), (91, 94), (96, 100), (102, 105), (128, 132), (153, 153)], 'A597': [(108, 111), (115, 115), (117, 120), (122, 123), (126, 127), (133, 152), (154, 155)], 'A627': [(83, 83), (121, 121)], 'A596': [(89, 90), (107, 107), (116, 116)], 'A590': [(95, 95), (101, 101)]}","{'A583': 0.125, 'A591': 0.38636363636363635, 'A597': 0.3977272727272727, 'A627': 0.022727272727272728, 'A596': 0.045454545454545456, 'A590': 0.022727272727272728}",A597,,"    void doIO(Queue<Packet> pendingQueue, ClientCnxn cnxn) throws InterruptedException, IOException {
        SocketChannel sock = (SocketChannel) sockKey.channel();
        if (sock == null) {
            throw new IOException(""Socket is null!"");
        }
        if (sockKey.isReadable()) {
            int rc = sock.read(incomingBuffer);
            if (rc < 0) {
                throw new EndOfStreamException(""Unable to read additional data from server sessionid 0x""
                                               + Long.toHexString(sessionId)
                                               + "", likely server has closed socket"");
            }
            if (!incomingBuffer.hasRemaining()) {
                incomingBuffer.flip();
                if (incomingBuffer == lenBuffer) {
                    recvCount.getAndIncrement();
                    readLength();
                } else if (!initialized) {
                    readConnectResult();
                    enableRead();
                    if (findSendablePacket(outgoingQueue, sendThread.tunnelAuthInProgress()) != null) {
                        // Since SASL authentication has completed (if client is configured to do so),
                        // outgoing packets waiting in the outgoingQueue can now be sent.
                        enableWrite();
                    }
                    lenBuffer.clear();
                    incomingBuffer = lenBuffer;
                    updateLastHeard();
                    initialized = true;
                } else {
                    sendThread.readResponse(incomingBuffer);
                    lenBuffer.clear();
                    incomingBuffer = lenBuffer;
                    updateLastHeard();
                }
            }
        }
        if (sockKey.isWritable()) {
            Packet p = findSendablePacket(outgoingQueue, sendThread.tunnelAuthInProgress());

            if (p != null) {
                updateLastSend();
                // If we already started writing p, p.bb will already exist
                if (p.bb == null) {
                    if ((p.requestHeader != null)
                        && (p.requestHeader.getType() != OpCode.ping)
                        && (p.requestHeader.getType() != OpCode.auth)) {
                        p.requestHeader.setXid(cnxn.getXid());
                    }
                    p.createBB();
                }
                sock.write(p.bb);
                if (!p.bb.hasRemaining()) {
                    sentCount.getAndIncrement();
                    outgoingQueue.removeFirstOccurrence(p);
                    if (p.requestHeader != null
                        && p.requestHeader.getType() != OpCode.ping
                        && p.requestHeader.getType() != OpCode.auth) {
                        synchronized (pendingQueue) {
                            pendingQueue.add(p);
                        }
                    }
                }
            }
            if (outgoingQueue.isEmpty()) {
                // No more packets to send: turn off write interest flag.
                // Will be turned on later by a later call to enableWrite(),
                // from within ZooKeeperSaslClient (if client is configured
                // to attempt SASL authentication), or in either doIO() or
                // in doTransport() if not.
                disableWrite();
            } else if (!initialized && p != null && !p.bb.hasRemaining()) {
                // On initial connection, write the complete connect request
                // packet, but then disable further writes until after
                // receiving a successful connection response.  If the
                // session is expired, then the server sends the expiration
                // response and immediately closes its end of the socket.  If
                // the client is simultaneously writing on its end, then the
                // TCP stack may choose to abort with RST, in which case the
                // client would never receive the session expired event.  See
                // http://docs.oracle.com/javase/6/docs/technotes/guides/net/articles/connection_release.html
                disableWrite();
            } else {
                // Just in case
                enableWrite();
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,findSendablePacket,"Packet findSendablePacket(LinkedBlockingDeque<Packet>,boolean)","[157, 185]","{'A583': [(181, 181)], 'A591': [(159, 160), (185, 185)], 'A597': [(158, 158), (161, 161), (163, 180), (182, 184)], 'A589': [(157, 157), (162, 162)]}","{'A583': 0.034482758620689655, 'A591': 0.10344827586206896, 'A597': 0.7931034482758621, 'A589': 0.06896551724137931}",A597,,"    private Packet findSendablePacket(LinkedBlockingDeque<Packet> outgoingQueue, boolean tunneledAuthInProgress) {
        if (outgoingQueue.isEmpty()) {
            return null;
        }
        // If we've already starting sending the first packet, we better finish
        if (outgoingQueue.getFirst().bb != null || !tunneledAuthInProgress) {
            return outgoingQueue.getFirst();
        }
        // Since client's authentication with server is in progress,
        // send only the null-header packet queued by primeConnection().
        // This packet must be sent so that the SASL authentication process
        // can proceed, but all other packets should wait until
        // SASL authentication completes.
        Iterator<Packet> iter = outgoingQueue.iterator();
        while (iter.hasNext()) {
            Packet p = iter.next();
            if (p.requestHeader == null) {
                // We've found the priming-packet. Move it to the beginning of the queue.
                iter.remove();
                outgoingQueue.addFirst(p);
                return p;
            } else {
                // Non-priming packet: defer it until later, leaving it in the queue
                // until authentication completes.
                LOG.debug(""Deferring non-priming packet {} until SASL authentication completes."", p);
            }
        }
        return null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,cleanup,void cleanup(),"[187, 219]","{'A591': [(187, 194), (196, 199), (201, 204), (206, 209), (211, 215), (217, 219)], 'A620': [(195, 195), (200, 200), (205, 205), (210, 210), (216, 216)]}","{'A591': 0.8484848484848485, 'A620': 0.15151515151515152}",A591,,"    @Override
    void cleanup() {
        if (sockKey != null) {
            SocketChannel sock = (SocketChannel) sockKey.channel();
            sockKey.cancel();
            try {
                sock.socket().shutdownInput();
            } catch (IOException e) {
                LOG.debug(""Ignoring exception during shutdown input"", e);
            }
            try {
                sock.socket().shutdownOutput();
            } catch (IOException e) {
                LOG.debug(""Ignoring exception during shutdown output"", e);
            }
            try {
                sock.socket().close();
            } catch (IOException e) {
                LOG.debug(""Ignoring exception during socket close"", e);
            }
            try {
                sock.close();
            } catch (IOException e) {
                LOG.debug(""Ignoring exception during channel close"", e);
            }
        }
        try {
            Thread.sleep(100);
        } catch (InterruptedException e) {
            LOG.debug(""SendThread interrupted during sleep, ignoring"");
        }
        sockKey = null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,close,void close(),"[221, 236]","{'A583': [(224, 227), (229, 232)], 'A591': [(221, 223), (228, 228), (233, 236)]}","{'A583': 0.5, 'A591': 0.5}",A583,,"    @Override
    void close() {
        try {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Doing client selector close"");
            }

            selector.close();

            if (LOG.isTraceEnabled()) {
                LOG.trace(""Closed client selector"");
            }
        } catch (IOException e) {
            LOG.warn(""Ignoring exception during selector close"", e);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,createSock,SocketChannel createSock(),"[243, 250]","{'A591': [(243, 250)]}",{'A591': 1.0},A591,,"    SocketChannel createSock() throws IOException {
        SocketChannel sock;
        sock = SocketChannel.open();
        sock.configureBlocking(false);
        sock.socket().setSoLinger(false, -1);
        sock.socket().setTcpNoDelay(true);
        return sock;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,registerAndConnect,"void registerAndConnect(SocketChannel,InetSocketAddress)","[258, 264]","{'A583': [(258, 258)], 'A591': [(259, 259), (261, 264)], 'A596': [(260, 260)]}","{'A583': 0.14285714285714285, 'A591': 0.7142857142857143, 'A596': 0.14285714285714285}",A591,,"    void registerAndConnect(SocketChannel sock, InetSocketAddress addr) throws IOException {
        sockKey = sock.register(selector, SelectionKey.OP_CONNECT);
        boolean immediateConnect = sock.connect(addr);
        if (immediateConnect) {
            sendThread.primeConnection();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,connect,void connect(InetSocketAddress),"[266, 283]","{'A583': [(270, 270), (272, 272)], 'A591': [(266, 269), (274, 274), (276, 283)], 'A638': [(271, 271)], 'A639': [(273, 273), (275, 275)]}","{'A583': 0.1111111111111111, 'A591': 0.7222222222222222, 'A638': 0.05555555555555555, 'A639': 0.1111111111111111}",A591,,"    @Override
    void connect(InetSocketAddress addr) throws IOException {
        SocketChannel sock = createSock();
        try {
            registerAndConnect(sock, addr);
        } catch (UnresolvedAddressException | UnsupportedAddressTypeException | SecurityException | IOException e) {
            LOG.error(""Unable to open socket to {}"", addr);
            sock.close();
            throw e;
        }
        initialized = false;

        /*
         * Reset incomingBuffer
         */
        lenBuffer.clear();
        incomingBuffer = lenBuffer;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,getRemoteSocketAddress,SocketAddress getRemoteSocketAddress(),"[291, 294]","{'A591': [(291, 294)]}",{'A591': 1.0},A591,,"    @Override
    SocketAddress getRemoteSocketAddress() {
        return remoteSocketAddress;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,getLocalSocketAddress,SocketAddress getLocalSocketAddress(),"[302, 305]","{'A591': [(302, 305)]}",{'A591': 1.0},A591,,"    @Override
    SocketAddress getLocalSocketAddress() {
        return localSocketAddress;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,updateSocketAddresses,void updateSocketAddresses(),"[307, 311]","{'A591': [(307, 311)]}",{'A591': 1.0},A591,,"    private void updateSocketAddresses() {
        Socket socket = ((SocketChannel) sockKey.channel()).socket();
        localSocketAddress = socket.getLocalSocketAddress();
        remoteSocketAddress = socket.getRemoteSocketAddress();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,packetAdded,void packetAdded(),"[313, 316]","{'A591': [(313, 313)], 'A597': [(314, 316)]}","{'A591': 0.25, 'A597': 0.75}",A597,,"    @Override
    void packetAdded() {
        wakeupCnxn();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,onClosing,void onClosing(),"[318, 321]","{'A597': [(318, 321)]}",{'A597': 1.0},A597,,"    @Override
    void onClosing() {
        wakeupCnxn();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,wakeupCnxn,void wakeupCnxn(),"[323, 325]","{'A591': [(324, 325)], 'A597': [(323, 323)]}","{'A591': 0.6666666666666666, 'A597': 0.3333333333333333}",A591,,"    private synchronized void wakeupCnxn() {
        selector.wakeup();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,doTransport,"void doTransport(int,Queue<Packet>,ClientCnxn)","[327, 359]","{'A583': [(328, 331), (338, 338), (343, 343), (349, 349), (354, 354)], 'A591': [(327, 327), (332, 337), (339, 342), (344, 348), (351, 352), (356, 359)], 'A597': [(350, 350), (355, 355)], 'A600': [(353, 353)]}","{'A583': 0.24242424242424243, 'A591': 0.6666666666666666, 'A597': 0.06060606060606061, 'A600': 0.030303030303030304}",A591,,"    @Override
    void doTransport(
        int waitTimeOut,
        Queue<Packet> pendingQueue,
        ClientCnxn cnxn) throws IOException, InterruptedException {
        selector.select(waitTimeOut);
        Set<SelectionKey> selected;
        synchronized (this) {
            selected = selector.selectedKeys();
        }
        // Everything below and until we get back to the select is
        // non-blocking, so time is effectively a constant. That is
        // Why we just have to do this once, here
        updateNow();
        for (SelectionKey k : selected) {
            SocketChannel sc = ((SocketChannel) k.channel());
            if (k.isConnectable()) {
                if (sc.finishConnect()) {
                    updateLastSendAndHeard();
                    updateSocketAddresses();
                    sendThread.primeConnection();
                }
            } else if (k.isReadable() || k.isWritable()) {
                doIO(pendingQueue, cnxn);
            }
        }
        if (sendThread.getZkState().isConnected()) {
            if (findSendablePacket(outgoingQueue, sendThread.tunnelAuthInProgress()) != null) {
                enableWrite();
            }
        }
        selected.clear();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,testableCloseSocket,void testableCloseSocket(),"[362, 371]","{'A583': [(368, 369)], 'A591': [(362, 364), (371, 371)], 'A593': [(365, 367), (370, 370)]}","{'A583': 0.2, 'A591': 0.4, 'A593': 0.4}",A591,,"    @Override
    void testableCloseSocket() throws IOException {
        LOG.info(""testableCloseSocket() called"");
        // sockKey may be concurrently accessed by multiple
        // threads. We use tmp here to avoid a race condition
        SelectionKey tmp = sockKey;
        if (tmp != null) {
            ((SocketChannel) tmp.channel()).socket().close();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,saslCompleted,void saslCompleted(),"[373, 376]","{'A591': [(373, 373)], 'A597': [(374, 376)]}","{'A591': 0.25, 'A597': 0.75}",A597,,"    @Override
    void saslCompleted() {
        enableWrite();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,enableWrite,void enableWrite(),"[378, 383]","{'A591': [(378, 383)]}",{'A591': 1.0},A591,,"    synchronized void enableWrite() {
        int i = sockKey.interestOps();
        if ((i & SelectionKey.OP_WRITE) == 0) {
            sockKey.interestOps(i | SelectionKey.OP_WRITE);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,disableWrite,void disableWrite(),"[385, 390]","{'A591': [(386, 390)], 'A597': [(385, 385)]}","{'A591': 0.8333333333333334, 'A597': 0.16666666666666666}",A591,,"    private synchronized void disableWrite() {
        int i = sockKey.interestOps();
        if ((i & SelectionKey.OP_WRITE) != 0) {
            sockKey.interestOps(i & (~SelectionKey.OP_WRITE));
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,enableRead,void enableRead(),"[392, 397]","{'A583': [(392, 392)], 'A591': [(393, 397)]}","{'A583': 0.16666666666666666, 'A591': 0.8333333333333334}",A591,,"    private synchronized void enableRead() {
        int i = sockKey.interestOps();
        if ((i & SelectionKey.OP_READ) == 0) {
            sockKey.interestOps(i | SelectionKey.OP_READ);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,connectionPrimed,void connectionPrimed(),"[399, 402]","{'A591': [(399, 399), (401, 402)], 'A597': [(400, 400)]}","{'A591': 0.75, 'A597': 0.25}",A591,,"    @Override
    void connectionPrimed() {
        sockKey.interestOps(SelectionKey.OP_READ | SelectionKey.OP_WRITE);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,getSelector,Selector getSelector(),"[404, 406]","{'A639': [(404, 406)]}",{'A639': 1.0},A639,,"    Selector getSelector() {
        return selector;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocketNIO.java,ClientCnxnSocketNIO,sendPacket,void sendPacket(Packet),"[408, 417]","{'A596': [(408, 417)]}",{'A596': 1.0},A596,,"    @Override
    void sendPacket(Packet p) throws IOException {
        SocketChannel sock = (SocketChannel) sockKey.channel();
        if (sock == null) {
            throw new IOException(""Socket is null!"");
        }
        p.createBB();
        ByteBuffer pbb = p.bb;
        sock.write(pbb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Testable.java,,closeSocket,void closeSocket(),"[43, 43]","{'A640': [(43, 43)]}",{'A640': 1.0},A640,,"    default void closeSocket() throws IOException { }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SyncCommand.java,SyncCommand,parse,CliCommand parse(String[]),"[42, 57]","{'A591': [(42, 43), (45, 57)], 'A603': [(44, 44)]}","{'A591': 0.9375, 'A603': 0.0625}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cl;
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SyncCommand.java,SyncCommand,exec,boolean exec(),"[59, 83]","{'A583': [(68, 68)], 'A591': [(59, 61), (81, 83)], 'A641': [(62, 63), (66, 67), (69, 72), (75, 79)], 'A594': [(64, 64), (73, 74), (80, 80)], 'A642': [(65, 65)]}","{'A583': 0.04, 'A591': 0.24, 'A641': 0.52, 'A594': 0.16, 'A642': 0.04}",A641,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        CompletableFuture<Integer> cf = new CompletableFuture<>();

        try {
            zk.sync(path, (rc, path1, ctx) -> cf.complete(rc), null);

            int resultCode = cf.get(SYNC_TIMEOUT, TimeUnit.MILLISECONDS);
            if (resultCode == 0) {
                out.println(""Sync is OK"");
            } else {
                out.println(""Sync has failed. rc="" + resultCode);
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (InterruptedException ie) {
            Thread.currentThread().interrupt();
            throw new CliWrapperException(ie);
        } catch (TimeoutException | ExecutionException ex) {
            throw new CliWrapperException(ex);
        }

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/HexDumpOutputFormatter.java,HexDumpOutputFormatter,format,String format(byte[]),"[29, 33]","{'A643': [(29, 33)]}",{'A643': 1.0},A643,,"    @Override
    public String format(byte[] data) {
        ByteBuf buf = Unpooled.wrappedBuffer(data);
        return ByteBufUtil.prettyHexDump(buf);
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetEphemeralsCommand.java,GetEphemeralsCommand,parse,CliCommand parse(String[]),"[39, 51]","{'A644': [(39, 40), (42, 51)], 'A603': [(41, 41)]}","{'A644': 0.9230769230769231, 'A603': 0.07692307692307693}",A644,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cl;
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetEphemeralsCommand.java,GetEphemeralsCommand,exec,boolean exec(),"[53, 72]","{'A583': [(67, 67)], 'A644': [(53, 66), (68, 72)]}","{'A583': 0.05, 'A644': 0.95}",A644,,"    @Override
    public boolean exec() throws CliException {
        String path;
        List<String> ephemerals;
        try {
            if (args.length < 2) {
                // gets all the ephemeral nodes for the session
                ephemerals = zk.getEphemerals();
            } else {
                path = args[1];
                ephemerals = zk.getEphemerals(path);
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        out.println(ephemerals);
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/Base64OutputFormatter.java,Base64OutputFormatter,format,String format(byte[]),"[27, 30]","{'A643': [(27, 30)]}",{'A643': 1.0},A643,,"    @Override
    public String format(byte[] data) {
        return Base64.getEncoder().encodeToString(data);
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/WhoAmICommand.java,WhoAmICommand,parse,CliCommand parse(String[]),"[33, 36]","{'A592': [(33, 36)]}",{'A592': 1.0},A592,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/WhoAmICommand.java,WhoAmICommand,exec,boolean exec(),"[38, 53]","{'A592': [(38, 53)]}",{'A592': 1.0},A592,,"    @Override
    public boolean exec() throws CliException {
        try {
            List<ClientInfo> clientInfos = zk.whoAmI();
            out.println(""Auth scheme: User"");
            if (clientInfos != null) {
                // clientInfos will never be null, added null check to pass static checks
                clientInfos.forEach(clientInfo -> {
                    out.println(clientInfo.getAuthScheme() + "": "" + clientInfo.getUser());
                });
            }
        } catch (Exception ex) {
            throw new CliWrapperException(ex);
        }
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CommandFactory.java,CommandFactory.Command,getInstance,CliCommand getInstance(),"[58, 60]","{'A645': [(58, 60)]}",{'A645': 1.0},A645,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/cli/CommandFactoryTest.java,"        private CliCommand getInstance() {
            return instantiator.get();
        }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CommandFactory.java,CommandFactory,getInstance,CliCommand getInstance(Command),"[72, 74]","{'A645': [(72, 74)]}",{'A645': 1.0},A645,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/cli/CommandFactoryTest.java,"    public static CliCommand getInstance (Command command) {
        return command.getInstance();
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/AclParser.java,AclParser,parse,List<ACL> parse(String),"[37, 54]","{'A583': [(39, 39), (49, 49)], 'A591': [(37, 38), (41, 48), (50, 54)], 'A605': [(40, 40)]}","{'A583': 0.1111111111111111, 'A591': 0.8333333333333334, 'A605': 0.05555555555555555}",A591,,"    public static List<ACL> parse(String aclString) {
        List<ACL> acl;
        String[] acls = aclString.split("","");
        acl = new ArrayList<>();
        for (String a : acls) {
            int firstColon = a.indexOf(':');
            int lastColon = a.lastIndexOf(':');
            if (firstColon == -1 || lastColon == -1 || firstColon == lastColon) {
                System.err.println(a + "" does not have the form scheme:id:perm"");
                continue;
            }
            ACL newAcl = new ACL();
            newAcl.setId(new Id(a.substring(0, firstColon), a.substring(firstColon + 1, lastColon)));
            newAcl.setPerms(getPermFromString(a.substring(lastColon + 1)));
            acl.add(newAcl);
        }
        return acl;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/AclParser.java,AclParser,getPermFromString,int getPermFromString(String),"[56, 80]","{'A583': [(56, 56), (60, 76)], 'A591': [(57, 59), (77, 80)]}","{'A583': 0.72, 'A591': 0.28}",A583,,"    private static int getPermFromString(String permString) {
        int perm = 0;
        for (int i = 0; i < permString.length(); i++) {
            switch (permString.charAt(i)) {
            case 'r':
                perm |= ZooDefs.Perms.READ;
                break;
            case 'w':
                perm |= ZooDefs.Perms.WRITE;
                break;
            case 'c':
                perm |= ZooDefs.Perms.CREATE;
                break;
            case 'd':
                perm |= ZooDefs.Perms.DELETE;
                break;
            case 'a':
                perm |= ZooDefs.Perms.ADMIN;
                break;
            default:
                System.err.println(""Unknown perm type: "" + permString.charAt(i));
            }
        }
        return perm;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,parse,CliCommand parse(String[]),"[63, 77]","{'A591': [(63, 64), (66, 77)], 'A603': [(65, 65)]}","{'A591': 0.9333333333333333, 'A603': 0.06666666666666667}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,exec,boolean exec(),"[79, 113]","{'A591': [(79, 82), (87, 87), (101, 101), (106, 108), (110, 113)], 'A641': [(83, 86), (88, 100), (102, 105), (109, 109)]}","{'A591': 0.37142857142857144, 'A641': 0.6285714285714286}",A641,,"    @Override
    public boolean exec() throws CliException {
        // get the args
        String path = args[1];
        if (path.startsWith(Quotas.quotaZookeeper)) {
            err.println(""cannot set a quota under the path: "" + Quotas.quotaZookeeper);
            return false;
        }

        StatsTrack quota = new StatsTrack();
        quota.setCount(-1);
        quota.setBytes(-1L);
        quota.setCountHardLimit(-1);
        quota.setByteHardLimit(-1L);

        if (!checkOptionValue(quota)) {
            return false;
        }

        boolean flagSet = (cl.hasOption(""n"") || cl.hasOption(""N"")
                || cl.hasOption(""b"") || cl.hasOption(""B""));
        if (flagSet) {
            try {
                createQuota(zk, path, quota);
            } catch (IllegalArgumentException ex) {
                throw new MalformedPathException(ex.getMessage());
            } catch (KeeperException | InterruptedException ex) {
                throw new CliWrapperException(ex);
            }
        } else {
            err.println(getUsageStr());
        }

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,checkOptionValue,boolean checkOptionValue(StatsTrack),"[115, 164]","{'A641': [(115, 164)]}",{'A641': 1.0},A641,,"    private boolean checkOptionValue(StatsTrack quota) {

        try {
            if (cl.hasOption(""n"")) {
                // we are setting the num quota
                int count = Integer.parseInt(cl.getOptionValue(""n""));
                if (count > 0) {
                    quota.setCount(count);
                } else {
                    err.println(""the num quota must be greater than zero"");
                    return false;
                }
            }
            if (cl.hasOption(""b"")) {
                // we are setting the bytes quota
                long bytes = Long.parseLong(cl.getOptionValue(""b""));
                if (bytes >= 0) {
                    quota.setBytes(bytes);
                } else {
                    err.println(""the bytes quota must be greater than or equal to zero"");
                    return false;
                }
            }
            if (cl.hasOption(""N"")) {
                // we are setting the num hard quota
                int count = Integer.parseInt(cl.getOptionValue(""N""));
                if (count > 0) {
                    quota.setCountHardLimit(count);
                } else {
                    err.println(""the num quota must be greater than zero"");
                    return false;
                }
            }
            if (cl.hasOption(""B"")) {
                // we are setting the byte hard quota
                long bytes = Long.parseLong(cl.getOptionValue(""B""));
                if (bytes >= 0) {
                    quota.setByteHardLimit(bytes);
                } else {
                    err.println(""the bytes quota must be greater than or equal to zero"");
                    return false;
                }
            }
        } catch (NumberFormatException e) {
            err.println(""NumberFormatException happens when parsing the option value"");
            return false;
        }

        return true;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,createQuota,"boolean createQuota(ZooKeeper,String,StatsTrack)","[173, 278]","{'A583': [(207, 208)], 'A591': [(175, 175), (177, 177), (184, 191), (193, 195), (199, 206), (209, 219), (221, 221), (229, 232), (240, 240), (265, 265), (268, 268), (275, 275), (277, 278)], 'A641': [(173, 174), (176, 176), (196, 198), (222, 228), (233, 239), (241, 264), (266, 267), (269, 274), (276, 276)], 'A594': [(178, 183)], 'A646': [(192, 192), (220, 220)]}","{'A583': 0.018867924528301886, 'A591': 0.4056603773584906, 'A641': 0.5, 'A594': 0.05660377358490566, 'A646': 0.018867924528301886}",A641,,"    public static boolean createQuota(ZooKeeper zk, String path, StatsTrack quota)
            throws KeeperException, InterruptedException, MalformedPathException {
        // check if the path exists. We cannot create
        // quota for a path that doesn't exist in zookeeper
        // for now.
        Stat initStat;
        try {
            initStat = zk.exists(path, false);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        }
        if (initStat == null) {
            throw new IllegalArgumentException(path + "" does not exist."");
        }
        // now check if their is already existing
        // parent or child that has quota

        String quotaPath = Quotas.quotaZookeeper;
        // check for more than 2 children --
        // if zookeeper_stats and zookeeper_quotas
        // are not the children then this path
        // is an ancestor of some path that
        // already has quota

        //check if the child node has a quota.
        checkIfChildQuota(zk, path);

        //check for any parent that has been quota
        checkIfParentQuota(zk, path);

        // this is valid node for quota
        // start creating all the parents
        if (zk.exists(quotaPath, false) == null) {
            try {
                zk.create(Quotas.procZookeeper, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
                zk.create(Quotas.quotaZookeeper, null, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);
            } catch (KeeperException.NodeExistsException ne) {
                // do nothing
            }
        }

        // now create the direct children
        // and the stat and quota nodes
        String[] splits = path.split(""/"");
        StringBuilder sb = new StringBuilder();
        sb.append(quotaPath);
        for (int i = 1; i < splits.length; i++) {
            sb.append(""/"").append(splits[i]);
            quotaPath = sb.toString();
            if (zk.exists(quotaPath, false) == null) {
                try {
                    zk.create(quotaPath, null, ZooDefs.Ids.OPEN_ACL_UNSAFE,
                            CreateMode.PERSISTENT);
                } catch (KeeperException.NodeExistsException ne) {
                    //do nothing
                }
            }
        }
        String statPath = quotaPath + ""/"" + Quotas.statNode;
        quotaPath = quotaPath + ""/"" + Quotas.limitNode;
        byte[] data;

        if (zk.exists(quotaPath, false) == null) {
            zk.create(quotaPath, quota.getStatsBytes(),
                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

            StatsTrack stats = new StatsTrack();
            stats.setCount(0);
            stats.setBytes(0L);

            zk.create(statPath, stats.getStatsBytes(),
                    ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT);

            data = zk.getData(quotaPath, false, new Stat());
            StatsTrack quotaStrack = new StatsTrack(data);

            data = zk.getData(statPath, false, new Stat());
            StatsTrack statStrack = new StatsTrack(data);
            checkQuota(quotaStrack, statStrack);

        } else {
            data = zk.getData(quotaPath, false, new Stat());
            StatsTrack quotaStrack = new StatsTrack(data);

            if (quota.getCount() > -1) {
                quotaStrack.setCount(quota.getCount());
            }
            if (quota.getBytes() > -1L) {
                quotaStrack.setBytes(quota.getBytes());
            }
            if (quota.getCountHardLimit() > -1) {
                quotaStrack.setCountHardLimit(quota.getCountHardLimit());
            }
            if (quota.getByteHardLimit() > -1L) {
                quotaStrack.setByteHardLimit(quota.getByteHardLimit());
            }

            data = zk.getData(statPath, false, new Stat());
            StatsTrack statStrack = new StatsTrack(data);
            checkQuota(quotaStrack, statStrack);

            zk.setData(quotaPath, quotaStrack.getStatsBytes(), -1);
        }

        return true;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,checkQuota,"void checkQuota(StatsTrack,StatsTrack)","[280, 289]","{'A641': [(280, 289)]}",{'A641': 1.0},A641,,"    private static void checkQuota(StatsTrack quotaStrack, StatsTrack statStrack) {
        if ((quotaStrack.getCount() > -1 && quotaStrack.getCount() < statStrack.getCount()) || (quotaStrack.getCountHardLimit() > -1
                && quotaStrack.getCountHardLimit() < statStrack.getCount())) {
            System.out.println(""[Warning]: the count quota you create is less than the existing count:"" + statStrack.getCount());
        }
        if ((quotaStrack.getBytes() > -1 && quotaStrack.getBytes() < statStrack.getBytes()) || (quotaStrack.getByteHardLimit() > -1
                && quotaStrack.getByteHardLimit() < statStrack.getBytes())) {
            System.out.println(""[Warning]: the bytes quota you create is less than the existing bytes:"" + statStrack.getBytes());
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,checkIfChildQuota,"void checkIfChildQuota(ZooKeeper,String)","[291, 318]","{'A641': [(291, 294), (305, 305), (311, 318)], 'A642': [(295, 304), (306, 310)]}","{'A641': 0.4642857142857143, 'A642': 0.5357142857142857}",A642,,"    private static void checkIfChildQuota(ZooKeeper zk, String path) throws KeeperException, InterruptedException {
        String realPath = Quotas.quotaPath(path);

        try {
            ZKUtil.visitSubTreeDFS(zk, realPath, false, (rc, quotaPath, ctx, name) -> {
                List<String> children = new ArrayList<>();
                try {
                    children = zk.getChildren(quotaPath, false);
                } catch (KeeperException.NoNodeException ne) {
                    LOG.debug(""child removed during quota check"", ne);
                    return;
                } catch (InterruptedException | KeeperException e) {
                    e.printStackTrace();
                }

                if (children.size() == 0) {
                    return;
                }
                for (String child : children) {
                    if (!quotaPath.equals(Quotas.quotaZookeeper + path) && Quotas.limitNode.equals(child)) {
                        throw new IllegalArgumentException(path + "" has a child "" + Quotas.trimQuotaPath(quotaPath) + "" which has a quota"");
                    }
                }
            });
        } catch (KeeperException.NoNodeException ne) {
            // this is fine
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetQuotaCommand.java,SetQuotaCommand,checkIfParentQuota,"void checkIfParentQuota(ZooKeeper,String)","[320, 346]","{'A583': [(320, 320)], 'A591': [(321, 322), (330, 340), (343, 346)], 'A641': [(323, 329), (341, 342)]}","{'A583': 0.037037037037037035, 'A591': 0.6296296296296297, 'A641': 0.3333333333333333}",A591,,"    private static void checkIfParentQuota(ZooKeeper zk, String path) throws InterruptedException, KeeperException {
        final String[] splits = path.split(""/"");
        String quotaPath = Quotas.quotaZookeeper;

        StringBuilder sb = new StringBuilder();
        sb.append(quotaPath);
        for (int i = 1; i < splits.length - 1; i++) {
            sb.append(""/"");
            sb.append(splits[i]);
            quotaPath = sb.toString();
            List<String> children = null;
            try {
                children = zk.getChildren(quotaPath, false);
            } catch (KeeperException.NoNodeException ne) {
                LOG.debug(""child removed during quota check"", ne);
                return;
            }
            if (children.size() == 0) {
                return;
            }
            for (String child : children) {
                if (!quotaPath.equals(Quotas.quotaPath(path)) && Quotas.limitNode.equals(child)) {
                    throw new IllegalArgumentException(path + "" has a parent "" + Quotas.trimQuotaPath(quotaPath) + "" which has a quota"");
                }
            }
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetConfigCommand.java,GetConfigCommand,parse,CliCommand parse(String[]),"[49, 64]","{'A590': [(49, 49), (51, 51), (58, 59), (61, 64)], 'A603': [(52, 52)], 'A591': [(50, 50), (53, 57), (60, 60)]}","{'A590': 0.5, 'A603': 0.0625, 'A591': 0.4375}",A590,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {

        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 1) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetConfigCommand.java,GetConfigCommand,exec,boolean exec(),"[66, 88]","{'A583': [(68, 68), (70, 70), (73, 73), (82, 82), (85, 86)], 'A590': [(66, 66), (69, 69), (77, 77), (79, 79), (81, 81), (83, 84), (87, 88)], 'A602': [(76, 76), (78, 78), (80, 80)], 'A591': [(67, 67), (71, 72), (74, 75)]}","{'A583': 0.2608695652173913, 'A590': 0.391304347826087, 'A602': 0.13043478260869565, 'A591': 0.21739130434782608}",A590,,"    @Override
    public boolean exec() throws CliException {
        boolean watch = cl.hasOption(""w"");
        Stat stat = new Stat();
        byte[] data;
        try {
            data = zk.getConfig(watch, stat);
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        data = (data == null) ? ""null"".getBytes(UTF_8) : data;
        if (cl.hasOption(""c"")) {
            out.println(ConfigUtils.getClientConfigStr(new String(data, UTF_8)));
        } else {
            out.println(new String(data, UTF_8));
        }

        if (cl.hasOption(""s"")) {
            new StatPrinter(out).print(stat);
        }

        return watch;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/PlainOutputFormatter.java,PlainOutputFormatter,format,String format(byte[]),"[27, 30]","{'A643': [(27, 30)]}",{'A643': 1.0},A643,,"    @Override
    public String format(byte[] data) {
        return new String(data, UTF_8);
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DeleteCommand.java,DeleteCommand,parse,CliCommand parse(String[]),"[44, 60]","{'A583': [(56, 56)], 'A591': [(44, 45), (47, 55), (57, 60)], 'A603': [(46, 46)]}","{'A583': 0.058823529411764705, 'A591': 0.8823529411764706, 'A603': 0.058823529411764705}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        retainCompatibility(cmdArgs);

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DeleteCommand.java,DeleteCommand,retainCompatibility,void retainCompatibility(String[]),"[62, 74]","{'A583': [(65, 65)], 'A591': [(62, 64), (67, 74)], 'A603': [(66, 66)]}","{'A583': 0.07692307692307693, 'A591': 0.8461538461538461, 'A603': 0.07692307692307693}",A591,,"    private void retainCompatibility(String[] cmdArgs) throws CliParseException {
        if (args.length > 2) {
            err.println(""'delete path [version]' has been deprecated. ""
                        + ""Please use 'delete [-v version] path' instead."");
            DefaultParser parser = new DefaultParser();
            try {
                cl = parser.parse(options, cmdArgs);
            } catch (ParseException ex) {
                throw new CliParseException(ex);
            }
            args = cl.getArgs();
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DeleteCommand.java,DeleteCommand,exec,boolean exec(),"[76, 94]","{'A583': [(85, 85), (90, 90)], 'A591': [(76, 84), (86, 86), (91, 94)], 'A594': [(87, 89)]}","{'A583': 0.10526315789473684, 'A591': 0.7368421052631579, 'A594': 0.15789473684210525}",A591,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        int version;
        if (cl.hasOption(""v"")) {
            version = Integer.parseInt(cl.getOptionValue(""v""));
        } else {
            version = -1;
        }

        try {
            zk.delete(path, version);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,setOut,void setOut(PrintStream),"[69, 71]","{'A591': [(70, 70)], 'A593': [(69, 69), (71, 71)]}","{'A591': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,,"    public void setOut(PrintStream out) {
        this.out = out;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,setErr,void setErr(PrintStream),"[77, 79]","{'A591': [(78, 79)], 'A593': [(77, 77)]}","{'A591': 0.6666666666666666, 'A593': 0.3333333333333333}",A591,,"    public void setErr(PrintStream err) {
        this.err = err;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,setZk,void setZk(ZooKeeper),"[85, 87]","{'A591': [(85, 87)]}",{'A591': 1.0},A591,,"    public void setZk(ZooKeeper zk) {
        this.zk = zk;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,getCmdStr,String getCmdStr(),"[92, 94]","{'A591': [(92, 94)]}",{'A591': 1.0},A591,,"    public String getCmdStr() {
        return cmdStr;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,getOptionStr,String getOptionStr(),"[99, 101]","{'A591': [(99, 101)]}",{'A591': 1.0},A591,,"    public String getOptionStr() {
        return optionStr;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,getUsageStr,String getUsageStr(),"[106, 108]","{'A591': [(106, 106), (108, 108)], 'A643': [(107, 107)]}","{'A591': 0.6666666666666666, 'A643': 0.3333333333333333}",A591,,"    public String getUsageStr() {
        return CommandUsageHelper.getUsage(cmdStr + "" "" + optionStr, options);
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliCommand.java,CliCommand,addToMap,"void addToMap(Map<String, CliCommand>)","[114, 116]","{'A591': [(114, 116)]}",{'A591': 1.0},A591,,"    public void addToMap(Map<String, CliCommand> cmdMap) {
        cmdMap.put(cmdStr, this);
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/RemoveWatchesCommand.java,RemoveWatchesCommand,parse,CliCommand parse(String[]),"[50, 63]","{'A593': [(50, 50), (58, 59), (61, 63)], 'A603': [(52, 52)], 'A591': [(51, 51), (53, 57), (60, 60)]}","{'A593': 0.42857142857142855, 'A603': 0.07142857142857142, 'A591': 0.5}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }
        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/RemoveWatchesCommand.java,RemoveWatchesCommand,exec,boolean exec(),"[65, 93]","{'A583': [(89, 89)], 'A593': [(65, 65), (67, 74), (79, 85), (91, 93)], 'A625': [(75, 78)], 'A591': [(90, 90)], 'A594': [(66, 66), (87, 88)], 'A639': [(86, 86)]}","{'A583': 0.034482758620689655, 'A593': 0.6551724137931034, 'A625': 0.13793103448275862, 'A591': 0.034482758620689655, 'A594': 0.10344827586206896, 'A639': 0.034482758620689655}",A593,,"    @Override
    public boolean exec() throws CliWrapperException, MalformedPathException {
        String path = args[1];
        WatcherType wtype = WatcherType.Any;
        // if no matching option -c or -d or -a is specified, we remove
        // the watches of the given node by choosing WatcherType.Any
        if (cl.hasOption(""c"")) {
            wtype = WatcherType.Children;
        } else if (cl.hasOption(""d"")) {
            wtype = WatcherType.Data;
        } else if (cl.hasOption(""p"")) {
            wtype = WatcherType.Persistent;
        } else if (cl.hasOption(""r"")) {
            wtype = WatcherType.PersistentRecursive;
        } else if (cl.hasOption(""a"")) {
            wtype = WatcherType.Any;
        }
        // whether to remove the watches locally
        boolean local = cl.hasOption(""l"");

        try {
            zk.removeAllWatches(path, wtype, local);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return true;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DeleteAllCommand.java,DeleteAllCommand,parse,CliCommand parse(String[]),"[50, 64]","{'A591': [(50, 51), (53, 64)], 'A603': [(52, 52)]}","{'A591': 0.9333333333333333, 'A603': 0.06666666666666667}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DeleteAllCommand.java,DeleteAllCommand,exec,boolean exec(),"[66, 87]","{'A583': [(83, 83)], 'A591': [(66, 67), (75, 76), (84, 87)], 'A647': [(68, 74), (77, 80)], 'A594': [(81, 82)]}","{'A583': 0.045454545454545456, 'A591': 0.36363636363636365, 'A647': 0.5, 'A594': 0.09090909090909091}",A647,,"    @Override
    public boolean exec() throws CliException {
        int batchSize;
        try {
            batchSize = cl.hasOption(""b"") ? Integer.parseInt(cl.getOptionValue(""b"")) : 1000;
        } catch (NumberFormatException e) {
            throw new MalformedCommandException(""-b argument must be an int value"");
        }

        String path = args[1];
        try {
            boolean success = ZKUtil.deleteRecursive(zk, path, batchSize);
            if (!success) {
                err.println(""Failed to delete some node(s) in the subtree!"");
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CreateCommand.java,CreateCommand,parse,CliCommand parse(String[]),"[55, 68]","{'A583': [(64, 64)], 'A591': [(55, 56), (58, 63), (65, 68)], 'A603': [(57, 57)]}","{'A583': 0.07142857142857142, 'A591': 0.8571428571428571, 'A603': 0.07142857142857142}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }
        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CreateCommand.java,CreateCommand,exec,boolean exec(),"[70, 139]","{'A583': [(94, 94), (123, 125), (127, 127), (129, 129), (135, 135)], 'A591': [(70, 71), (77, 77), (95, 95), (97, 97), (111, 111), (113, 115), (117, 121), (131, 131), (134, 134), (136, 136), (138, 139)], 'A602': [(116, 116)], 'A636': [(75, 75), (79, 84), (86, 93), (99, 99), (102, 110), (112, 112)], 'A648': [(122, 122), (126, 126), (130, 130), (137, 137)], 'A616': [(72, 74), (76, 76), (78, 78), (85, 85), (96, 96), (98, 98), (100, 101)], 'A594': [(128, 128)], 'A593': [(132, 133)]}","{'A583': 0.1, 'A591': 0.2714285714285714, 'A602': 0.014285714285714285, 'A636': 0.37142857142857144, 'A648': 0.05714285714285714, 'A616': 0.14285714285714285, 'A594': 0.014285714285714285, 'A593': 0.02857142857142857}",A636,,"    @Override
    public boolean exec() throws CliException {
        boolean hasE = cl.hasOption(""e"");
        boolean hasS = cl.hasOption(""s"");
        boolean hasC = cl.hasOption(""c"");
        boolean hasT = cl.hasOption(""t"");
        if (hasC && (hasE || hasS)) {
            throw new MalformedCommandException(""-c cannot be combined with -s or -e. Containers cannot be ephemeral or sequential."");
        }
        long ttl;
        try {
            ttl = hasT ? Long.parseLong(cl.getOptionValue(""t"")) : 0;
        } catch (NumberFormatException e) {
            throw new MalformedCommandException(""-t argument must be a long value"");
        }

        if (hasT && hasE) {
            throw new MalformedCommandException(""TTLs cannot be used with Ephemeral znodes"");
        }
        if (hasT && hasC) {
            throw new MalformedCommandException(""TTLs cannot be used with Container znodes"");
        }

        CreateMode flags;
        if (hasE && hasS) {
            flags = CreateMode.EPHEMERAL_SEQUENTIAL;
        } else if (hasE) {
            flags = CreateMode.EPHEMERAL;
        } else if (hasS) {
            flags = hasT ? CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL : CreateMode.PERSISTENT_SEQUENTIAL;
        } else if (hasC) {
            flags = CreateMode.CONTAINER;
        } else {
            flags = hasT ? CreateMode.PERSISTENT_WITH_TTL : CreateMode.PERSISTENT;
        }
        if (hasT) {
            try {
                EphemeralType.TTL.toEphemeralOwner(ttl);
            } catch (IllegalArgumentException e) {
                throw new MalformedCommandException(e.getMessage());
            }
        }

        String path = args[1];
        byte[] data = null;
        if (args.length > 2) {
            data = args[2].getBytes(UTF_8);
        }
        List<ACL> acl = ZooDefs.Ids.OPEN_ACL_UNSAFE;
        if (args.length > 3) {
            acl = AclParser.parse(args[3]);
        }
        try {
            String newPath = hasT
                ? zk.create(path, data, acl, flags, new Stat(), ttl)
                : zk.create(path, data, acl, flags);
            err.println(""Created "" + newPath);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException.EphemeralOnLocalSessionException e) {
            err.println(""Unable to create ephemeral node on a local session"");
            throw new CliWrapperException(e);
        } catch (KeeperException.InvalidACLException ex) {
            err.println(ex.getMessage());
            throw new CliWrapperException(ex);
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return true;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetAclCommand.java,GetAclCommand,parse,CliCommand parse(String[]),"[47, 61]","{'A591': [(47, 48), (50, 61)], 'A603': [(49, 49)]}","{'A591': 0.9333333333333333, 'A603': 0.06666666666666667}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetAclCommand.java,GetAclCommand,exec,boolean exec(),"[63, 84]","{'A583': [(69, 69), (72, 72)], 'A591': [(63, 68), (73, 76), (78, 84)], 'A592': [(77, 77)], 'A594': [(70, 71)]}","{'A583': 0.09090909090909091, 'A591': 0.7727272727272727, 'A592': 0.045454545454545456, 'A594': 0.09090909090909091}",A591,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        Stat stat = new Stat();
        List<ACL> acl;
        try {
            acl = zk.getACL(path, stat);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }

        for (ACL a : acl) {
            out.println(a.getId() + "": "" + ZKUtil.getPermString(a.getPerms()));
        }

        if (cl.hasOption(""s"")) {
            new StatPrinter(out).print(stat);
        }
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/VersionCommand.java,VersionCommand,parse,CliCommand parse(String[]),"[38, 53]","{'A641': [(38, 39), (41, 53)], 'A603': [(40, 40)]}","{'A641': 0.9375, 'A603': 0.0625}",A641,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cl;
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length > 1) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/VersionCommand.java,VersionCommand,exec,boolean exec(),"[55, 60]","{'A641': [(55, 60)]}",{'A641': 1.0},A641,,"    @Override
    public boolean exec() throws CliException {
        out.println(""ZooKeeper CLI version: "" + Version.getFullVersion());

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliException.java,CliException,getExitCode,int getExitCode(),"[55, 57]","{'A591': [(55, 57)]}",{'A591': 1.0},A591,,"    public int getExitCode() {
        return exitCode;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DelQuotaCommand.java,DelQuotaCommand,parse,CliCommand parse(String[]),"[55, 69]","{'A591': [(55, 56), (58, 69)], 'A603': [(57, 57)]}","{'A591': 0.9333333333333333, 'A603': 0.06666666666666667}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DelQuotaCommand.java,DelQuotaCommand,exec,boolean exec(),"[71, 103]","{'A591': [(71, 73), (92, 92), (99, 100), (102, 103)], 'A641': [(74, 91), (93, 98), (101, 101)]}","{'A591': 0.24242424242424243, 'A641': 0.7575757575757576}",A641,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        // Use a StatsTrack object to pass in to delQuota which quotas
        // to delete by setting them to 1 as a flag.
        StatsTrack quota = new StatsTrack();
        if (cl.hasOption(""n"")) {
            quota.setCount(1);
        }
        if (cl.hasOption(""b"")) {
            quota.setBytes(1);
        }
        if (cl.hasOption(""N"")) {
            quota.setCountHardLimit(1);
        }
        if (cl.hasOption(""B"")) {
            quota.setByteHardLimit(1);
        }

        boolean flagSet = (cl.hasOption(""n"") || cl.hasOption(""N"")
                || cl.hasOption(""b"") || cl.hasOption(""B""));
        try {
            delQuota(zk, path, flagSet ? quota : null);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException.NoNodeException ne) {
            err.println(""quota for "" + path + "" does not exist."");
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DelQuotaCommand.java,DelQuotaCommand,delQuota,"boolean delQuota(ZooKeeper,String,StatsTrack)","[116, 162]","{'A591': [(120, 126), (129, 129), (131, 131), (135, 143), (159, 159), (161, 162)], 'A641': [(116, 119), (130, 130), (132, 134), (144, 158), (160, 160)], 'A594': [(127, 128)]}","{'A591': 0.44680851063829785, 'A641': 0.5106382978723404, 'A594': 0.0425531914893617}",A641,,"    public static boolean delQuota(ZooKeeper zk, String path, StatsTrack quota)
            throws KeeperException, InterruptedException, MalformedPathException {
        String parentPath = Quotas.quotaPath(path);
        String quotaPath = Quotas.limitPath(path);
        if (zk.exists(quotaPath, false) == null) {
            System.out.println(""Quota does not exist for "" + path);
            return true;
        }
        byte[] data = null;
        try {
            data = zk.getData(quotaPath, false, new Stat());
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException.NoNodeException ne) {
            throw new KeeperException.NoNodeException(ne.getMessage());
        }
        StatsTrack strack = new StatsTrack(data);

        if (quota == null) {
            // delete till you can find a node with more than
            // one child
            List<String> children = zk.getChildren(parentPath, false);
            /// delete the direct children first
            for (String child : children) {
                zk.delete(parentPath + ""/"" + child, -1);
            }
            // cut the tree till their is more than one child
            trimProcQuotas(zk, parentPath);
        } else {
            if (quota.getCount() > 0) {
                strack.setCount(-1);
            }
            if (quota.getBytes() > 0) {
                strack.setBytes(-1L);
            }
            if (quota.getCountHardLimit() > 0) {
                strack.setCountHardLimit(-1);
            }
            if (quota.getByteHardLimit() > 0) {
                strack.setByteHardLimit(-1L);
            }

            zk.setData(quotaPath, strack.getStatsBytes(), -1);
        }

        return true;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/DelQuotaCommand.java,DelQuotaCommand,trimProcQuotas,"boolean trimProcQuotas(ZooKeeper,String)","[174, 187]","{'A591': [(176, 187)], 'A641': [(174, 175)]}","{'A591': 0.8571428571428571, 'A641': 0.14285714285714285}",A591,,"    private static boolean trimProcQuotas(ZooKeeper zk, String path)
            throws KeeperException, InterruptedException {
        if (Quotas.quotaZookeeper.equals(path)) {
            return true;
        }
        List<String> children = zk.getChildren(path, false);
        if (children.size() == 0) {
            zk.delete(path, -1);
            String parent = path.substring(0, path.lastIndexOf('/'));
            return trimProcQuotas(zk, parent);
        } else {
            return true;
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/ListQuotaCommand.java,ListQuotaCommand,parse,CliCommand parse(String[]),"[45, 60]","{'A583': [(55, 55), (58, 58)], 'A591': [(45, 46), (48, 54), (56, 57), (59, 60)], 'A603': [(47, 47)]}","{'A583': 0.125, 'A591': 0.8125, 'A603': 0.0625}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cl;
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/ListQuotaCommand.java,ListQuotaCommand,exec,boolean exec(),"[62, 86]","{'A583': [(81, 81), (84, 84)], 'A591': [(62, 64), (66, 67), (79, 80), (82, 83), (85, 86)], 'A641': [(65, 65), (68, 76)], 'A594': [(77, 78)]}","{'A583': 0.08, 'A591': 0.44, 'A641': 0.4, 'A594': 0.08}",A591,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        String absolutePath = Quotas.limitPath(path);
        try {
            err.println(""absolute path is "" + absolutePath);
            List<StatsTrack> statsTracks = listQuota(zk, path);
            for (int i = 0; i < statsTracks.size(); i++) {
                StatsTrack st = statsTracks.get(i);
                if (i == 0) {
                    out.println(""Output quota for "" + path + "" "" + st.toString());
                } else {
                    out.println(""Output stat for "" + path + "" "" + st.toString());
                }
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException.NoNodeException ne) {
            err.println(""quota for "" + path + "" does not exist."");
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/ListQuotaCommand.java,ListQuotaCommand,listQuota,"List<StatsTrack> listQuota(ZooKeeper,String)","[89, 101]","{'A641': [(89, 101)]}",{'A641': 1.0},A641,,"    public static List<StatsTrack> listQuota(ZooKeeper zk, String path) throws KeeperException, InterruptedException {
        List<StatsTrack> statsTracks = new ArrayList<>();
        Stat stat = new Stat();
        byte[] data = zk.getData(Quotas.limitPath(path), false, stat);
        StatsTrack st = new StatsTrack(data);
        statsTracks.add(st);

        data = zk.getData(Quotas.statPath(path), false, stat);
        st = new StatsTrack(data);
        statsTracks.add(st);

        return statsTracks;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/StatPrinter.java,StatPrinter,print,void print(Stat),"[36, 48]","{'A583': [(45, 45)], 'A591': [(36, 44), (46, 48)]}","{'A583': 0.07692307692307693, 'A591': 0.9230769230769231}",A591,,"    public void print(Stat stat) {
        out.println(""cZxid = 0x"" + Long.toHexString(stat.getCzxid()));
        out.println(""ctime = "" + new Date(stat.getCtime()).toString());
        out.println(""mZxid = 0x"" + Long.toHexString(stat.getMzxid()));
        out.println(""mtime = "" + new Date(stat.getMtime()).toString());
        out.println(""pZxid = 0x"" + Long.toHexString(stat.getPzxid()));
        out.println(""cversion = "" + stat.getCversion());
        out.println(""dataVersion = "" + stat.getVersion());
        out.println(""aclVersion = "" + stat.getAversion());
        out.println(""ephemeralOwner = 0x"" + Long.toHexString(stat.getEphemeralOwner()));
        out.println(""dataLength = "" + stat.getDataLength());
        out.println(""numChildren = "" + stat.getNumChildren());
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetAclCommand.java,SetAclCommand,parse,CliCommand parse(String[]),"[53, 67]","{'A591': [(53, 54), (56, 67)], 'A603': [(55, 55)]}","{'A591': 0.9333333333333333, 'A603': 0.06666666666666667}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 3) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetAclCommand.java,SetAclCommand,exec,boolean exec(),"[69, 103]","{'A583': [(97, 97)], 'A591': [(69, 80), (94, 94), (98, 103)], 'A649': [(81, 81), (87, 93)], 'A642': [(82, 86)], 'A594': [(95, 96)]}","{'A583': 0.02857142857142857, 'A591': 0.5428571428571428, 'A649': 0.22857142857142856, 'A642': 0.14285714285714285, 'A594': 0.05714285714285714}",A591,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        String aclStr = args[2];
        List<ACL> acl = AclParser.parse(aclStr);
        int version;
        if (cl.hasOption(""v"")) {
            version = Integer.parseInt(cl.getOptionValue(""v""));
        } else {
            version = -1;
        }
        try {
            if (cl.hasOption(""R"")) {
                ZKUtil.visitSubTreeDFS(zk, path, false, (rc, p, ctx, name) -> {
                    try {
                        zk.setACL(p, acl, version);
                    } catch (KeeperException | InterruptedException e) {
                        out.print(e.getMessage());
                    }
                });
            } else {
                Stat stat = zk.setACL(path, acl, version);
                if (cl.hasOption(""s"")) {
                    new StatPrinter(out).print(stat);
                }
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }

        return false;

    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java,LsCommand,printHelp,void printHelp(),"[51, 54]","{'A591': [(51, 54)]}",{'A591': 1.0},A591,,"    private void printHelp() {
        HelpFormatter formatter = new HelpFormatter();
        formatter.printHelp(""ls [options] path"", options);
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java,LsCommand,parse,CliCommand parse(String[]),"[56, 73]","{'A591': [(56, 57), (59, 73)], 'A603': [(58, 58)]}","{'A591': 0.9444444444444444, 'A603': 0.05555555555555555}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }

        args = cl.getArgs();
        if (cl.hasOption(""?"")) {
            printHelp();
        }

        retainCompatibility(cmdArgs);

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java,LsCommand,retainCompatibility,void retainCompatibility(String[]),"[75, 89]","{'A583': [(80, 80)], 'A591': [(75, 79), (82, 89)], 'A603': [(81, 81)]}","{'A583': 0.06666666666666667, 'A591': 0.8666666666666667, 'A603': 0.06666666666666667}",A591,,"    private void retainCompatibility(String[] cmdArgs) throws CliParseException {
        // get path [watch]
        if (args.length > 2) {
            // rewrite to option
            cmdArgs[2] = ""-w"";
            err.println(""'ls path [watch]' has been deprecated. "" + ""Please use 'ls [-w] path' instead."");
            DefaultParser parser = new DefaultParser();
            try {
                cl = parser.parse(options, cmdArgs);
            } catch (ParseException ex) {
                throw new CliParseException(ex);
            }
            args = cl.getArgs();
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java,LsCommand,exec,boolean exec(),"[91, 115]","{'A583': [(111, 111)], 'A591': [(91, 98), (100, 100), (102, 102), (105, 107), (112, 112), (114, 115)], 'A593': [(99, 99), (101, 101), (104, 104), (108, 108), (113, 113)], 'A642': [(103, 103)], 'A594': [(109, 110)]}","{'A583': 0.04, 'A591': 0.64, 'A593': 0.2, 'A642': 0.04, 'A594': 0.08}",A591,,"    @Override
    public boolean exec() throws CliException {
        if (args.length < 2) {
            throw new MalformedCommandException(getUsageStr());
        }

        String path = args[1];
        boolean watch = cl.hasOption(""w"");
        boolean withStat = cl.hasOption(""s"");
        boolean recursive = cl.hasOption(""R"");
        try {
            if (recursive) {
                ZKUtil.visitSubTreeDFS(zk, path, watch, (rc, path1, ctx, name) -> out.println(path1));
            } else {
                Stat stat = withStat ? new Stat() : null;
                List<String> children = zk.getChildren(path, watch, stat);
                printChildren(children, stat);
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return watch;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/LsCommand.java,LsCommand,printChildren,"void printChildren(List<String>,Stat)","[117, 133]","{'A591': [(117, 117), (119, 119), (123, 123), (127, 128), (130, 131)], 'A593': [(118, 118), (120, 122), (124, 126), (132, 133)], 'A650': [(129, 129)]}","{'A591': 0.4117647058823529, 'A593': 0.5294117647058824, 'A650': 0.058823529411764705}",A593,,"    private void printChildren(List<String> children, Stat stat) {
        Collections.sort(children);
        out.append(""["");
        boolean first = true;
        for (String child : children) {
            if (!first) {
                out.append("", "");
            } else {
                first = false;
            }
            out.append(child);
        }
        out.append(""]\n"");
        if (stat != null) {
            new StatPrinter(out).print(stat);
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CloseCommand.java,CloseCommand,parse,CliCommand parse(String[]),"[30, 33]","{'A591': [(30, 33)]}",{'A591': 1.0},A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CloseCommand.java,CloseCommand,exec,boolean exec(),"[35, 44]","{'A583': [(42, 42)], 'A591': [(35, 41), (43, 44)]}","{'A583': 0.1, 'A591': 0.9}",A591,,"    @Override
    public boolean exec() throws CliException {
        try {
            zk.close();
        } catch (Exception ex) {
            throw new CliWrapperException(ex);
        }

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CommandUsageHelper.java,CommandUsageHelper,getUsage,"String getUsage(String,Options)","[29, 41]","{'A643': [(29, 41)]}",{'A643': 1.0},A643,,"    public static String getUsage(String commandSyntax, @Nullable Options options) {
        StringBuilder buffer = new StringBuilder();
        buffer.append(commandSyntax);
        if (options != null && !options.getOptions().isEmpty()) {
            buffer.append(System.lineSeparator());
            StringWriter out = new StringWriter();
            HelpFormatter formatter = new HelpFormatter();
            formatter.printOptions(new PrintWriter(out), formatter.getWidth(), options, formatter.getLeftPadding(),
                    formatter.getDescPadding());
            buffer.append(out);
        }
        return buffer.toString();
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/ReconfigCommand.java,ReconfigCommand,parse,CliCommand parse(String[]),"[81, 139]","{'A583': [(96, 96), (98, 98), (107, 108), (116, 116), (119, 119), (122, 122), (131, 131), (136, 136)], 'A590': [(81, 81), (83, 85), (94, 95), (97, 97), (100, 106), (109, 109), (112, 115), (117, 118), (120, 121), (123, 124), (126, 126), (128, 130), (132, 132), (134, 134), (137, 139)], 'A603': [(86, 86)], 'A646': [(110, 110), (125, 125), (127, 127)], 'A591': [(82, 82), (87, 93), (99, 99), (111, 111), (135, 135)], 'A651': [(133, 133)]}","{'A583': 0.15254237288135594, 'A590': 0.576271186440678, 'A603': 0.01694915254237288, 'A646': 0.05084745762711865, 'A591': 0.1864406779661017, 'A651': 0.01694915254237288}",A590,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        joining = null;
        leaving = null;
        members = null;
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        if (!(cl.hasOption(""file"") || cl.hasOption(""members"")) && !cl.hasOption(""add"") && !cl.hasOption(""remove"")) {
            throw new CliParseException(getUsageStr());
        }
        if (cl.hasOption(""v"")) {
            try {
                version = Long.parseLong(cl.getOptionValue(""v""), 16);
            } catch (NumberFormatException e) {
                throw new CliParseException(""-v must be followed by a long (configuration version)"");
            }
        } else {
            version = -1;
        }

        // Simple error checking for conflicting modes
        if ((cl.hasOption(""file"") || cl.hasOption(""members"")) && (cl.hasOption(""add"") || cl.hasOption(""remove""))) {
            throw new CliParseException(""Can't use -file or -members together with -add or -remove (mixing incremental""
                                        + "" and non-incremental modes is not allowed)"");
        }
        if (cl.hasOption(""file"") && cl.hasOption(""members"")) {
            throw new CliParseException(""Can't use -file and -members together (conflicting non-incremental modes)"");
        }

        // Set the joining/leaving/members values based on the mode we're in
        if (cl.hasOption(""add"")) {
            joining = cl.getOptionValue(""add"").toLowerCase();
        }
        if (cl.hasOption(""remove"")) {
            leaving = cl.getOptionValue(""remove"").toLowerCase();
        }
        if (cl.hasOption(""members"")) {
            members = cl.getOptionValue(""members"").toLowerCase();
        }
        if (cl.hasOption(""file"")) {
            try {
                Properties dynamicCfg = new Properties();
                try (FileInputStream inConfig = new FileInputStream(cl.getOptionValue(""file""))) {
                    dynamicCfg.load(inConfig);
                }
                //check that membership makes sense; leader will make these checks again
                //don't check for leader election ports since
                //client doesn't know what leader election alg is used
                members = QuorumPeerConfig.parseDynamicConfig(dynamicCfg, 0, true, false, null).toString();
            } catch (Exception e) {
                throw new CliParseException(""Error processing "" + cl.getOptionValue(""file"") + e.getMessage());
            }
        }
        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/ReconfigCommand.java,ReconfigCommand,exec,boolean exec(),"[141, 164]","{'A583': [(154, 154), (156, 156), (160, 160)], 'A590': [(141, 141), (143, 144), (157, 159), (162, 164)], 'A602': [(155, 155)], 'A604': [(145, 153)], 'A591': [(142, 142), (161, 161)]}","{'A583': 0.125, 'A590': 0.375, 'A602': 0.041666666666666664, 'A604': 0.375, 'A591': 0.08333333333333333}",A590,,"    @Override
    public boolean exec() throws CliException {
        try {
            Stat stat = new Stat();
            if (!(zk instanceof ZooKeeperAdmin)) {
                // This should never happen when executing reconfig command line,
                // because it is guaranteed that we have a ZooKeeperAdmin instance ready
                // to use in CliCommand stack.
                // The only exception would be in test code where clients can directly set
                // ZooKeeper object to ZooKeeperMain.
                return false;
            }

            byte[] curConfig = ((ZooKeeperAdmin) zk).reconfigure(joining, leaving, members, version, stat);
            out.println(""Committed new configuration:\n"" + new String(curConfig, UTF_8));

            if (cl.hasOption(""s"")) {
                new StatPrinter(out).print(stat);
            }
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/StatCommand.java,StatCommand,parse,CliCommand parse(String[]),"[45, 61]","{'A583': [(54, 54), (56, 57)], 'A591': [(45, 46), (48, 53), (55, 55), (58, 61)], 'A603': [(47, 47)]}","{'A583': 0.17647058823529413, 'A591': 0.7647058823529411, 'A603': 0.058823529411764705}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        retainCompatibility(cmdArgs);

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/StatCommand.java,StatCommand,retainCompatibility,void retainCompatibility(String[]),"[63, 77]","{'A583': [(68, 68)], 'A591': [(63, 67), (70, 77)], 'A603': [(69, 69)]}","{'A583': 0.06666666666666667, 'A591': 0.8666666666666667, 'A603': 0.06666666666666667}",A591,,"    private void retainCompatibility(String[] cmdArgs) throws CliParseException {
        // stat path [watch]
        if (args.length > 2) {
            // rewrite to option
            cmdArgs[2] = ""-w"";
            err.println(""'stat path [watch]' has been deprecated. "" + ""Please use 'stat [-w] path' instead."");
            DefaultParser parser = new DefaultParser();
            try {
                cl = parser.parse(options, cmdArgs);
            } catch (ParseException ex) {
                throw new CliParseException(ex);
            }
            args = cl.getArgs();
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/StatCommand.java,StatCommand,exec,boolean exec(),"[79, 96]","{'A583': [(88, 88)], 'A591': [(79, 85), (89, 96)], 'A594': [(86, 87)]}","{'A583': 0.05555555555555555, 'A591': 0.8333333333333334, 'A594': 0.1111111111111111}",A591,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        boolean watch = cl.hasOption(""w"");
        Stat stat;
        try {
            stat = zk.exists(path, watch);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        if (stat == null) {
            throw new CliWrapperException(new KeeperException.NoNodeException(path));
        }
        new StatPrinter(out).print(stat);
        return watch;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java,SetCommand,parse,CliCommand parse(String[]),"[49, 63]","{'A591': [(49, 50), (52, 63)], 'A603': [(51, 51)]}","{'A591': 0.9333333333333333, 'A603': 0.06666666666666667}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 3) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/SetCommand.java,SetCommand,exec,boolean exec(),"[65, 92]","{'A583': [(88, 88)], 'A591': [(65, 67), (74, 85), (89, 92)], 'A643': [(68, 73)], 'A594': [(86, 87)]}","{'A583': 0.03571428571428571, 'A591': 0.6785714285714286, 'A643': 0.21428571428571427, 'A594': 0.07142857142857142}",A591,,"    @Override
    public boolean exec() throws CliException {
        String path = args[1];
        byte[] data;
        if (cl.hasOption(""b"")) {
            data = Base64.getDecoder().decode(args[2]);
        } else {
            data = args[2].getBytes(UTF_8);
        }
        int version;
        if (cl.hasOption(""v"")) {
            version = Integer.parseInt(cl.getOptionValue(""v""));
        } else {
            version = -1;
        }

        try {
            Stat stat = zk.setData(path, data, version);
            if (cl.hasOption(""s"")) {
                new StatPrinter(out).print(stat);
            }
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetAllChildrenNumberCommand.java,GetAllChildrenNumberCommand,parse,CliCommand parse(String[]),"[38, 50]","{'A641': [(38, 39), (41, 50)], 'A603': [(40, 40)]}","{'A641': 0.9230769230769231, 'A603': 0.07692307692307693}",A641,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cl;
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetAllChildrenNumberCommand.java,GetAllChildrenNumberCommand,exec,boolean exec(),"[52, 70]","{'A641': [(52, 70)]}",{'A641': 1.0},A641,,"    @Override
    public boolean exec() throws CliException {
        if (args.length < 2) {
            throw new MalformedCommandException(getUsageStr());
        }

        try {
            String path = args[1];
            int allChildrenNumber = zk.getAllChildrenNumber(path);

            out.println(allChildrenNumber);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/AddWatchCommand.java,AddWatchCommand,parse,CliCommand parse(String[]),"[50, 71]","{'A636': [(50, 51), (53, 71)], 'A603': [(52, 52)]}","{'A636': 0.9545454545454546, 'A603': 0.045454545454545456}",A636,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        if (cl.getArgs().length != 2) {
            throw new CliParseException(getUsageStr());
        }

        if (cl.hasOption(""m"")) {
            try {
                mode = AddWatchMode.valueOf(cl.getOptionValue(""m"").toUpperCase());
            } catch (IllegalArgumentException e) {
                throw new CliParseException(getUsageStr());
            }
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/AddWatchCommand.java,AddWatchCommand,exec,boolean exec(),"[73, 84]","{'A636': [(73, 84)]}",{'A636': 1.0},A636,,"    @Override
    public boolean exec() throws CliException {
        String path = cl.getArgs()[1];
        try {
            zk.addWatch(path, mode);
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }

        return false;

    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetCommand.java,GetCommand,parse,CliCommand parse(String[]),"[48, 65]","{'A591': [(48, 50), (52, 65)], 'A603': [(51, 51)]}","{'A591': 0.9444444444444444, 'A603': 0.05555555555555555}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {

        DefaultParser parser = new DefaultParser();
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }
        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        retainCompatibility(cmdArgs);

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetCommand.java,GetCommand,retainCompatibility,void retainCompatibility(String[]),"[67, 81]","{'A583': [(72, 72)], 'A591': [(67, 71), (74, 81)], 'A603': [(73, 73)]}","{'A583': 0.06666666666666667, 'A591': 0.8666666666666667, 'A603': 0.06666666666666667}",A591,,"    private void retainCompatibility(String[] cmdArgs) throws CliParseException {
        // get path [watch]
        if (args.length > 2) {
            // rewrite to option
            cmdArgs[2] = ""-w"";
            err.println(""'get path [watch]' has been deprecated. "" + ""Please use 'get [-s] [-w] path' instead."");
            DefaultParser parser = new DefaultParser();
            try {
                cl = parser.parse(options, cmdArgs);
            } catch (ParseException ex) {
                throw new CliParseException(ex);
            }
            args = cl.getArgs();
        }
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/GetCommand.java,GetCommand,exec,boolean exec(),"[83, 109]","{'A583': [(88, 88), (93, 93)], 'A591': [(83, 87), (89, 90), (95, 95), (103, 103), (105, 109)], 'A643': [(96, 102), (104, 104)], 'A594': [(91, 92)], 'A592': [(94, 94)]}","{'A583': 0.07407407407407407, 'A591': 0.5185185185185185, 'A643': 0.2962962962962963, 'A594': 0.07407407407407407, 'A592': 0.037037037037037035}",A591,,"    @Override
    public boolean exec() throws CliException {
        boolean watch = cl.hasOption(""w"");
        String path = args[1];
        Stat stat = new Stat();
        byte[] data;
        try {
            data = zk.getData(path, watch, stat);
        } catch (IllegalArgumentException ex) {
            throw new MalformedPathException(ex.getMessage());
        } catch (KeeperException | InterruptedException ex) {
            throw new CliWrapperException(ex);
        }
        OutputFormatter formatter = PlainOutputFormatter.INSTANCE;
        if (cl.hasOption(""b"")) {
            formatter = Base64OutputFormatter.INSTANCE;
        }
        if (cl.hasOption(""x"")) {
            formatter = HexDumpOutputFormatter.INSTANCE;
        }
        data = (data == null) ? ""null"".getBytes() : data;
        out.println(formatter.format(data));
        if (cl.hasOption(""s"")) {
            new StatPrinter(out).print(stat);
        }
        return watch;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/AddAuthCommand.java,AddAuthCommand,parse,CliCommand parse(String[]),"[39, 55]","{'A591': [(39, 40), (42, 55)], 'A603': [(41, 41)]}","{'A591': 0.9411764705882353, 'A603': 0.058823529411764705}",A591,,"    @Override
    public CliCommand parse(String[] cmdArgs) throws CliParseException {
        DefaultParser parser = new DefaultParser();
        CommandLine cl;
        try {
            cl = parser.parse(options, cmdArgs);
        } catch (ParseException ex) {
            throw new CliParseException(ex);
        }

        args = cl.getArgs();
        if (args.length < 2) {
            throw new CliParseException(getUsageStr());
        }

        return this;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/AddAuthCommand.java,AddAuthCommand,exec,boolean exec(),"[57, 67]","{'A591': [(57, 60), (62, 67)], 'A602': [(61, 61)]}","{'A591': 0.9090909090909091, 'A602': 0.09090909090909091}",A591,,"    @Override
    public boolean exec() throws CliException {
        byte[] b = null;
        if (args.length >= 3) {
            b = args[2].getBytes(UTF_8);
        }

        zk.addAuthInfo(args[1], b);

        return false;
    }
"
org.apache.zookeeper.cli,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/cli/CliWrapperException.java,CliWrapperException,getMessage,String getMessage(Throwable),"[30, 62]","{'A583': [(31, 31), (52, 52), (54, 54), (56, 56)], 'A591': [(30, 30), (32, 45), (47, 51), (53, 53), (59, 62)], 'A592': [(46, 46)], 'A589': [(55, 55)], 'A641': [(57, 58)]}","{'A583': 0.12121212121212122, 'A591': 0.7575757575757576, 'A592': 0.030303030303030304, 'A589': 0.030303030303030304, 'A641': 0.06060606060606061}",A591,,"    private static String getMessage(Throwable cause) {
        if (cause instanceof KeeperException) {
            KeeperException keeperException = (KeeperException) cause;
            if (keeperException instanceof KeeperException.NoNodeException) {
                return ""Node does not exist: "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.NoChildrenForEphemeralsException) {
                return ""Ephemerals cannot have children: "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.NodeExistsException) {
                return ""Node already exists: "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.NotEmptyException) {
                return ""Node not empty: "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.NotReadOnlyException) {
                return ""Not a read-only call: "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.InvalidACLException) {
                return ""Acl is not valid : "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.NoAuthException) {
                return ""Insufficient permission : "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.BadArgumentsException) {
                return ""Arguments are not valid : "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.BadVersionException) {
                return ""version No is not valid : "" + keeperException.getPath();
            } else if (keeperException instanceof KeeperException.ReconfigInProgress) {
                return ""Another reconfiguration is in progress -- concurrent "" + ""reconfigs not supported (yet)"";
            } else if (keeperException instanceof KeeperException.NewConfigNoQuorum) {
                return ""No quorum of new config is connected and ""
                       + ""up-to-date with the leader of last committed config - try invoking reconfiguration after ""
                       + ""new servers are connected and synced"";
            } else if (keeperException instanceof KeeperException.QuotaExceededException) {
                return ""Quota has exceeded : "" + keeperException.getPath();
            }
        }
        return cause.getMessage();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,run,void run(),"[133, 273]","{'A583': [(149, 159), (166, 166), (174, 180), (186, 192), (207, 213), (236, 241), (269, 269)], 'A596': [(133, 136), (138, 142), (144, 148), (160, 165), (167, 173), (181, 185), (193, 195), (199, 199), (201, 206), (215, 216), (218, 221), (223, 229), (231, 235), (242, 257), (259, 263), (265, 268), (270, 273)], 'A597': [(217, 217)], 'A616': [(143, 143), (196, 198), (200, 200), (214, 214), (222, 222), (264, 264)], 'A593': [(137, 137)], 'A653': [(230, 230), (258, 258)]}","{'A583': 0.28368794326241137, 'A596': 0.6312056737588653, 'A597': 0.0070921985815602835, 'A616': 0.05673758865248227, 'A593': 0.0070921985815602835, 'A653': 0.014184397163120567}",A596,,"            public void run() {
                LOG.info(""TGT refresh thread started."");
                while (true) {  // renewal thread's main loop. if it exits from here, thread will exit.
                    KerberosTicket tgt = getTGT();
                    long now = Time.currentWallTime();
                    long nextRefresh;
                    Date nextRefreshDate;
                    if (tgt == null) {
                        nextRefresh = now + MIN_TIME_BEFORE_RELOGIN;
                        nextRefreshDate = new Date(nextRefresh);
                        LOG.warn(""No TGT found: will try again at {}"", nextRefreshDate);
                    } else {
                        nextRefresh = getRefreshTime(tgt);
                        long expiry = tgt.getEndTime().getTime();
                        Date expiryDate = new Date(expiry);
                        if ((isUsingTicketCache) && (tgt.getEndTime().equals(tgt.getRenewTill()))) {
                            LOG.error(
                                ""The TGT cannot be renewed beyond the next expiry date: {}.""
                                    + ""This process will not be able to authenticate new SASL connections after that ""
                                    + ""time (for example, it will not be authenticate a new connection with a Zookeeper ""
                                    + ""Quorum member).  Ask your system administrator to either increase the ""
                                    + ""'renew until' time by doing : 'modprinc -maxrenewlife {}' within ""
                                    + ""kadmin, or instead, to generate a keytab for {}. Because the TGT's ""
                                    + ""expiry cannot be further extended by refreshing, exiting refresh thread now."",
                                expiryDate,
                                principal,
                                principal);
                            return;
                        }
                        // determine how long to sleep from looking at ticket's expiry.
                        // We should not allow the ticket to expire, but we should take into consideration
                        // MIN_TIME_BEFORE_RELOGIN. Will not sleep less than MIN_TIME_BEFORE_RELOGIN, unless doing so
                        // would cause ticket expiration.
                        if ((nextRefresh > expiry) || ((now + MIN_TIME_BEFORE_RELOGIN) > expiry)) {
                            // expiry is before next scheduled refresh).
                            nextRefresh = now;
                        } else {
                            if (nextRefresh < (now + MIN_TIME_BEFORE_RELOGIN)) {
                                // next scheduled refresh is sooner than (now + MIN_TIME_BEFORE_LOGIN).
                                Date until = new Date(nextRefresh);
                                Date newuntil = new Date(now + MIN_TIME_BEFORE_RELOGIN);
                                LOG.warn(
                                    ""TGT refresh thread time adjusted from : {} to : {} since ""
                                        + ""the former is sooner than the minimum refresh interval (""
                                        + ""{} seconds) from now."",
                                    until,
                                    newuntil,
                                    (MIN_TIME_BEFORE_RELOGIN / 1000));
                            }
                            nextRefresh = Math.max(nextRefresh, now + MIN_TIME_BEFORE_RELOGIN);
                        }
                        nextRefreshDate = new Date(nextRefresh);
                        if (nextRefresh > expiry) {
                            LOG.error(
                                ""next refresh: {} is later than expiry {}.""
                                    + "" This may indicate a clock skew problem.""
                                    + "" Check that this host and the KDC's ""
                                    + ""hosts' clocks are in sync. Exiting refresh thread."",
                                nextRefreshDate,
                                expiryDate);
                            return;
                        }
                    }
                    if (now == nextRefresh) {
                        LOG.info(""refreshing now because expiry is before next scheduled refresh time."");
                    } else if (now < nextRefresh) {
                        Date until = new Date(nextRefresh);
                        LOG.info(""TGT refresh sleeping until: {}"", until.toString());
                        try {
                            Thread.sleep(nextRefresh - now);
                        } catch (InterruptedException ie) {
                            LOG.warn(""TGT renewal thread has been interrupted and will exit."");
                            break;
                        }
                    } else {
                        LOG.error(
                            ""nextRefresh:{} is in the past: exiting refresh thread. Check""
                                + "" clock sync between this host and KDC - (KDC's clock is likely ahead of this host).""
                                + "" Manual intervention will be required for this client to successfully authenticate.""
                                + "" Exiting refresh thread."",
                            nextRefreshDate);
                        break;
                    }
                    if (isUsingTicketCache) {
                        String cmd = zkConfig.getProperty(ZKConfig.KINIT_COMMAND, KINIT_COMMAND_DEFAULT);
                        String kinitArgs = ""-R"";
                        int retry = 1;
                        while (retry >= 0) {
                            try {
                                LOG.debug(""running ticket cache refresh command: {} {}"", cmd, kinitArgs);
                                Shell.execCommand(cmd, kinitArgs);
                                break;
                            } catch (Exception e) {
                                if (retry > 0) {
                                    --retry;
                                    // sleep for 10 seconds
                                    try {
                                        sleepBeforeRetryFailedRefresh();
                                    } catch (InterruptedException ie) {
                                        LOG.error(""Interrupted while renewing TGT, exiting Login thread"");
                                        return;
                                    }
                                } else {
                                    LOG.warn(
                                        ""Could not renew TGT due to problem running shell command: '{} {}'.""
                                            + "" Exiting refresh thread."",
                                        cmd,
                                        kinitArgs,
                                        e);
                                    return;
                                }
                            }
                        }
                    }
                    try {
                        int retry = 1;
                        while (retry >= 0) {
                            try {
                                reLogin();
                                break;
                            } catch (LoginException le) {
                                if (retry > 0) {
                                    --retry;
                                    // sleep for 10 seconds.
                                    try {
                                        sleepBeforeRetryFailedRefresh();
                                    } catch (InterruptedException e) {
                                        LOG.error(""Interrupted during login retry after LoginException:"", le);
                                        throw le;
                                    }
                                } else {
                                    LOG.error(""Could not refresh TGT for principal: {}."", principal, le);
                                }
                            }
                        }
                    } catch (LoginException le) {
                        LOG.error(""Failed to refresh TGT: refresh thread exiting now."", le);
                        break;
                    }
                }
            }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,newCallbackHandler,CallbackHandler newCallbackHandler(),"[285, 287]","{'A652': [(285, 287)]}",{'A652': 1.0},A652,,"    public CallbackHandler newCallbackHandler() {
        return callbackHandlerSupplier.get();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,startThreadIfNeeded,void startThreadIfNeeded(),"[289, 294]","{'A596': [(289, 294)]}",{'A596': 1.0},A596,,"    public void startThreadIfNeeded() {
        // thread object 't' will be null if a refresh thread is not needed.
        if (t != null) {
            t.start();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,shutdown,void shutdown(),"[296, 305]","{'A583': [(302, 302)], 'A596': [(296, 301), (303, 305)]}","{'A583': 0.1, 'A596': 0.9}",A596,,"    public void shutdown() {
        if ((t != null) && (t.isAlive())) {
            t.interrupt();
            try {
                t.join();
            } catch (InterruptedException e) {
                LOG.warn(""error while waiting for Login thread to shutdown."", e);
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getSubject,Subject getSubject(),"[307, 309]","{'A596': [(307, 309)]}",{'A596': 1.0},A596,,"    public Subject getSubject() {
        return subject;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getUserName,String getUserName(),"[311, 316]","{'A592': [(311, 316)]}",{'A592': 1.0},A592,,"    public String getUserName() {
        if (principal == null || principal.isEmpty()) {
            return SYSTEM_USER;
        }
        return principal;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getLoginContextName,String getLoginContextName(),"[318, 320]","{'A596': [(318, 320)]}",{'A596': 1.0},A596,,"    public String getLoginContextName() {
        return loginContextName;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,login,LoginContext login(String),"[322, 334]","{'A583': [(324, 328)], 'A596': [(322, 323), (329, 329), (331, 331), (333, 334)], 'A652': [(330, 330)], 'A594': [(332, 332)]}","{'A583': 0.38461538461538464, 'A596': 0.46153846153846156, 'A652': 0.07692307692307693, 'A594': 0.07692307692307693}",A596,,"    private synchronized LoginContext login(final String loginContextName) throws LoginException {
        if (loginContextName == null) {
            throw new LoginException(""loginContext name (JAAS file section header) was null. ""
                                     + ""Please check your java.security.login.auth.config (=""
                                     + System.getProperty(""java.security.login.auth.config"")
                                     + "") and your ""
                                     + getLoginContextMessage());
        }
        LoginContext loginContext = new LoginContext(loginContextName, newCallbackHandler());
        loginContext.login();
        LOG.info(""{} successfully logged in."", loginContextName);
        return loginContext;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getLoginContextMessage,String getLoginContextMessage(),"[336, 348]","{'A583': [(338, 341), (343, 346)], 'A597': [(336, 337), (342, 342), (347, 348)]}","{'A583': 0.6153846153846154, 'A597': 0.38461538461538464}",A583,,"    private String getLoginContextMessage() {
        if (zkConfig instanceof ZKClientConfig) {
            return ZKClientConfig.LOGIN_CONTEXT_NAME_KEY
                   + ""(=""
                   + zkConfig.getProperty(ZKClientConfig.LOGIN_CONTEXT_NAME_KEY, ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT)
                   + "")"";
        } else {
            return ZooKeeperSaslServer.LOGIN_CONTEXT_NAME_KEY
                   + ""(=""
                   + System.getProperty(ZooKeeperSaslServer.LOGIN_CONTEXT_NAME_KEY, ZooKeeperSaslServer.DEFAULT_LOGIN_CONTEXT_NAME)
                   + "")"";
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getRefreshTime,long getRefreshTime(KerberosTicket),"[351, 365]","{'A583': [(362, 362)], 'A596': [(351, 353), (359, 360), (363, 365)], 'A602': [(356, 358)], 'A616': [(354, 355)], 'A593': [(361, 361)]}","{'A583': 0.06666666666666667, 'A596': 0.5333333333333333, 'A602': 0.2, 'A616': 0.13333333333333333, 'A593': 0.06666666666666667}",A596,,"    private long getRefreshTime(KerberosTicket tgt) {
        long start = tgt.getStartTime().getTime();
        long expires = tgt.getEndTime().getTime();
        LOG.info(""TGT valid starting at:        {}"", tgt.getStartTime().toString());
        LOG.info(""TGT expires:                  {}"", tgt.getEndTime().toString());
        long proposedRefresh = start + (long) ((expires - start)
            * (TICKET_RENEW_WINDOW + (TICKET_RENEW_JITTER
                * ThreadLocalRandom.current().nextDouble())));
        if (proposedRefresh > expires) {
            // proposedRefresh is too far in the future: it's after ticket expires: simply return now.
            return Time.currentWallTime();
        } else {
            return proposedRefresh;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getTGT,KerberosTicket getTGT(),"[367, 378]","{'A583': [(369, 369), (373, 373)], 'A596': [(367, 368), (370, 371), (374, 378)], 'A620': [(372, 372)]}","{'A583': 0.16666666666666666, 'A596': 0.75, 'A620': 0.08333333333333333}",A596,,"    private synchronized KerberosTicket getTGT() {
        Set<KerberosTicket> tickets = subject.getPrivateCredentials(KerberosTicket.class);
        for (KerberosTicket ticket : tickets) {
            KerberosPrincipal server = ticket.getServer();
            if (server.getName().equals(""krbtgt/"" + server.getRealm() + ""@"" + server.getRealm())) {
                LOG.debug(""Client principal is \""{}\""."", ticket.getClient().getName());
                LOG.debug(""Server principal is \""{}\""."", ticket.getServer().getName());
                return ticket;
            }
        }
        return null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,hasSufficientTimeElapsed,boolean hasSufficientTimeElapsed(),"[380, 391]","{'A583': [(382, 382), (384, 385)], 'A596': [(380, 380), (386, 391)], 'A616': [(383, 383)], 'A593': [(381, 381)]}","{'A583': 0.25, 'A596': 0.5833333333333334, 'A616': 0.08333333333333333, 'A593': 0.08333333333333333}",A596,,"    private boolean hasSufficientTimeElapsed() {
        long now = Time.currentElapsedTime();
        if (now - getLastLogin() < MIN_TIME_BEFORE_RELOGIN) {
            LOG.warn(""Not attempting to re-login since the last re-login was ""
                     + ""attempted less than {} seconds before."",
                     (MIN_TIME_BEFORE_RELOGIN / 1000));
            return false;
        }
        // register most recent relogin attempt
        setLastLogin(now);
        return true;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getLogin,LoginContext getLogin(),"[397, 399]","{'A596': [(397, 399)]}",{'A596': 1.0},A596,,"    private LoginContext getLogin() {
        return login;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,setLogin,void setLogin(LoginContext),"[405, 407]","{'A596': [(405, 407)]}",{'A596': 1.0},A596,,"    private void setLogin(LoginContext login) {
        this.login = login;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,setLastLogin,void setLastLogin(long),"[413, 415]","{'A596': [(413, 415)]}",{'A596': 1.0},A596,,"    private void setLastLogin(long time) {
        lastLogin = time;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,getLastLogin,long getLastLogin(),"[421, 423]","{'A596': [(422, 423)], 'A653': [(421, 421)]}","{'A596': 0.6666666666666666, 'A653': 0.3333333333333333}",A596,,"    public long getLastLogin() {
        return lastLogin;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,reLogin,void reLogin(),"[430, 454]","{'A583': [(430, 430), (435, 435)], 'A596': [(431, 434), (436, 440), (442, 445), (447, 449), (451, 454)], 'A616': [(441, 441), (450, 450)], 'A653': [(446, 446)]}","{'A583': 0.08, 'A596': 0.8, 'A616': 0.08, 'A653': 0.04}",A596,,"    private synchronized void reLogin() throws LoginException {
        if (!isKrbTicket) {
            return;
        }
        LoginContext login = getLogin();
        if (login == null) {
            throw new LoginException(""login must be done first"");
        }
        if (!hasSufficientTimeElapsed()) {
            return;
        }
        LOG.info(""Initiating logout for {}"", principal);
        synchronized (Login.class) {
            //clear up the kerberos state. But the tokens are not cleared! As per
            //the Java kerberos login module code, only the kerberos credentials
            //are cleared
            logout();
            //login and also update the subject field of this instance to
            //have the new credentials (pass it to the LoginContext constructor)
            login = new LoginContext(loginContextName, getSubject());
            LOG.info(""Initiating re-login for {}"", principal);
            login.login();
            setLogin(login);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,logout,void logout(),"[457, 464]","{'A653': [(457, 464)]}",{'A653': 1.0},A653,,"    protected synchronized void logout() throws LoginException {
        // We need to make sure not to call LoginContext.logout() when we
        // are not logged in. Since Java 9 this could result in an NPE.
        // See ZOOKEEPER-4477 for more details.
        if (subject != null && !subject.getPrincipals().isEmpty()) {
            login.logout();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Login.java,Login,sleepBeforeRetryFailedRefresh,void sleepBeforeRetryFailedRefresh(),"[467, 469]","{'A653': [(467, 469)]}",{'A653': 1.0},A653,,"    protected void sleepBeforeRetryFailedRefresh() throws InterruptedException {
        Thread.sleep(10 * 1000);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,updateServerList,void updateServerList(String),"[218, 232]","{'A583': [(229, 231)], 'A597': [(218, 228), (232, 232)]}","{'A583': 0.2, 'A597': 0.8}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void updateServerList(String connectString) throws IOException {
        ConnectStringParser connectStringParser = new ConnectStringParser(connectString);
        Collection<InetSocketAddress> serverAddresses = connectStringParser.getServerAddresses();

        ClientCnxnSocket clientCnxnSocket = cnxn.sendThread.getClientCnxnSocket();
        InetSocketAddress currentHost = (InetSocketAddress) clientCnxnSocket.getRemoteSocketAddress();

        boolean reconfigMode = hostProvider.updateServerList(serverAddresses, currentHost);

        // cause disconnection - this will cause next to be called
        // which will in turn call nextReconfigMode
        if (reconfigMode) {
            clientCnxnSocket.testableCloseSocket();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getSaslClient,ZooKeeperSaslClient getSaslClient(),"[234, 236]","{'A596': [(234, 234), (236, 236)], 'A654': [(235, 235)]}","{'A596': 0.6666666666666666, 'A654': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public ZooKeeperSaslClient getSaslClient() {
        return cnxn.getZooKeeperSaslClient();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getClientConfig,ZKClientConfig getClientConfig(),"[240, 242]","{'A597': [(240, 242)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public ZKClientConfig getClientConfig() {
        return clientConfig;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getDataWatches,List<String> getDataWatches(),"[244, 246]","{'A583': [(245, 245)], 'A596': [(246, 246)], 'A604': [(244, 244)]}","{'A583': 0.3333333333333333, 'A596': 0.3333333333333333, 'A604': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected List<String> getDataWatches() {
        return getWatchManager().getDataWatchList();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getExistWatches,List<String> getExistWatches(),"[248, 250]","{'A583': [(249, 249)], 'A596': [(250, 250)], 'A604': [(248, 248)]}","{'A583': 0.3333333333333333, 'A596': 0.3333333333333333, 'A604': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected List<String> getExistWatches() {
        return getWatchManager().getExistWatchList();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildWatches,List<String> getChildWatches(),"[252, 254]","{'A583': [(253, 253)], 'A596': [(254, 254)], 'A604': [(252, 252)]}","{'A583': 0.3333333333333333, 'A596': 0.3333333333333333, 'A604': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected List<String> getChildWatches() {
        return getWatchManager().getChildWatchList();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getPersistentWatches,List<String> getPersistentWatches(),"[256, 258]","{'A583': [(257, 257)], 'A636': [(256, 256), (258, 258)]}","{'A583': 0.3333333333333333, 'A636': 0.6666666666666666}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected List<String> getPersistentWatches() {
        return getWatchManager().getPersistentWatchList();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getPersistentRecursiveWatches,List<String> getPersistentRecursiveWatches(),"[260, 262]","{'A583': [(261, 261)], 'A636': [(260, 260), (262, 262)]}","{'A583': 0.3333333333333333, 'A636': 0.6666666666666666}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected List<String> getPersistentRecursiveWatches() {
        return getWatchManager().getPersistentRecursiveWatchList();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getWatchManager,ZKWatchManager getWatchManager(),"[264, 266]","{'A583': [(264, 265)], 'A590': [(266, 266)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    ZKWatchManager getWatchManager() {
        return cnxn.getWatcherManager();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.WatchRegistration,register,void register(int),"[288, 300]","{'A583': [(291, 291)], 'A590': [(288, 289), (293, 293), (296, 300)], 'A625': [(292, 292), (295, 295)], 'A596': [(290, 290)], 'A605': [(294, 294)]}","{'A583': 0.07692307692307693, 'A590': 0.6153846153846154, 'A625': 0.15384615384615385, 'A596': 0.07692307692307693, 'A605': 0.07692307692307693}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        public void register(int rc) {
            if (shouldAddWatch(rc)) {
                Map<String, Set<Watcher>> watches = getWatches(rc);
                synchronized (watches) {
                    Set<Watcher> watchers = watches.get(serverPath);
                    if (watchers == null) {
                        watchers = new HashSet<>();
                        watches.put(serverPath, watchers);
                    }
                    watchers.add(watcher);
                }
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.WatchRegistration,shouldAddWatch,boolean shouldAddWatch(int),"[307, 309]","{'A590': [(307, 307), (309, 309)], 'A655': [(308, 308)]}","{'A590': 0.6666666666666666, 'A655': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        protected boolean shouldAddWatch(int rc) {
            return rc == KeeperException.Code.OK.intValue();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.ExistsWatchRegistration,getWatches,"Map<String, Set<Watcher>> getWatches(int)","[322, 326]","{'A590': [(326, 326)], 'A596': [(322, 323)], 'A655': [(324, 325)]}","{'A590': 0.2, 'A596': 0.4, 'A655': 0.4}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected Map<String, Set<Watcher>> getWatches(int rc) {
            return rc == KeeperException.Code.OK.intValue()
                    ? getWatchManager().getDataWatches() : getWatchManager().getExistWatches();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.ExistsWatchRegistration,shouldAddWatch,boolean shouldAddWatch(int),"[328, 331]","{'A590': [(328, 329), (331, 331)], 'A655': [(330, 330)]}","{'A590': 0.75, 'A655': 0.25}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected boolean shouldAddWatch(int rc) {
            return rc == KeeperException.Code.OK.intValue() || rc == KeeperException.Code.NONODE.intValue();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.ServerDataWatchRegistration,getWatches,"Map<String, Set<Watcher>> getWatches(int)","[340, 343]","{'A625': [(340, 343)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected Map<String, Set<Watcher>> getWatches(int rc) {
            return getWatchManager().getDataWatches();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.DataWatchRegistration,getWatches,"Map<String, Set<Watcher>> getWatches(int)","[353, 356]","{'A583': [(355, 355)], 'A596': [(353, 354), (356, 356)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected Map<String, Set<Watcher>> getWatches(int rc) {
            return getWatchManager().getDataWatches();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.ChildWatchRegistration,getWatches,"Map<String, Set<Watcher>> getWatches(int)","[366, 369]","{'A583': [(368, 368)], 'A596': [(366, 367), (369, 369)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected Map<String, Set<Watcher>> getWatches(int rc) {
            return getWatchManager().getChildWatches();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.AddWatchRegistration,getWatches,"Map<String, Set<Watcher>> getWatches(int)","[381, 390]","{'A583': [(385, 385), (387, 387)], 'A636': [(381, 384), (386, 386), (388, 390)]}","{'A583': 0.2, 'A636': 0.8}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected Map<String, Set<Watcher>> getWatches(int rc) {
            switch (mode) {
                case PERSISTENT:
                    return getWatchManager().getPersistentWatches();
                case PERSISTENT_RECURSIVE:
                    return getWatchManager().getPersistentRecursiveWatches();
            }
            throw new IllegalArgumentException(""Mode not supported: "" + mode);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.AddWatchRegistration,shouldAddWatch,boolean shouldAddWatch(int),"[392, 395]","{'A636': [(392, 393), (395, 395)], 'A655': [(394, 394)]}","{'A636': 0.75, 'A655': 0.25}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        @Override
        protected boolean shouldAddWatch(int rc) {
            return rc == KeeperException.Code.OK.intValue() || rc == KeeperException.Code.NONODE.intValue();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.States,isAlive,boolean isAlive(),"[408, 410]","{'A590': [(408, 410)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        public boolean isAlive() {
            return this != CLOSED && this != AUTH_FAILED;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper.States,isConnected,boolean isConnected(),"[417, 419]","{'A600': [(417, 419)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"        public boolean isConnected() {
            return this == CONNECTED || this == CONNECTEDREADONLY;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,createConnection,"ClientCnxn createConnection(HostProvider,int,ZKClientConfig,Watcher,ClientCnxnSocket,long,byte[],boolean)","[672, 691]","{'A583': [(672, 677), (680, 687), (690, 690)], 'A625': [(678, 679), (688, 689)], 'A592': [(691, 691)]}","{'A583': 0.75, 'A625': 0.2, 'A592': 0.05}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    ClientCnxn createConnection(
        HostProvider hostProvider,
        int sessionTimeout,
        ZKClientConfig clientConfig,
        Watcher defaultWatcher,
        ClientCnxnSocket clientCnxnSocket,
        long sessionId,
        byte[] sessionPasswd,
        boolean canBeReadOnly
    ) throws IOException {
        return new ClientCnxn(
            hostProvider,
            sessionTimeout,
            clientConfig,
            defaultWatcher,
            clientCnxnSocket,
            sessionId,
            sessionPasswd,
            canBeReadOnly);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getTestable,Testable getTestable(),"[1200, 1202]","{'A636': [(1201, 1201)], 'A593': [(1200, 1200), (1202, 1202)]}","{'A636': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public Testable getTestable() {
        return new ZooKeeperTestable(cnxn);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getSessionId,long getSessionId(),"[1213, 1215]","{'A590': [(1213, 1215)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public long getSessionId() {
        return cnxn.getSessionId();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getSessionPasswd,byte[] getSessionPasswd(),"[1226, 1228]","{'A590': [(1226, 1228)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public byte[] getSessionPasswd() {
        return cnxn.getSessionPasswd();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getSessionTimeout,int getSessionTimeout(),"[1239, 1241]","{'A596': [(1239, 1241)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public int getSessionTimeout() {
        return cnxn.getSessionTimeout();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,addAuthInfo,"void addAuthInfo(String,byte[])","[1251, 1253]","{'A583': [(1251, 1251)], 'A590': [(1252, 1253)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void addAuthInfo(String scheme, byte[] auth) {
        cnxn.addAuthInfo(scheme, auth);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,register,void register(Watcher),"[1259, 1261]","{'A583': [(1260, 1260)], 'A590': [(1259, 1259), (1261, 1261)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public synchronized void register(Watcher watcher) {
        getWatchManager().setDefaultWatcher(watcher);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,close,void close(),"[1279, 1294]","{'A583': [(1285, 1285), (1293, 1293)], 'A591': [(1280, 1280)], 'A590': [(1279, 1279), (1282, 1284), (1287, 1289), (1291, 1291), (1294, 1294)], 'A596': [(1286, 1286), (1292, 1292)], 'A620': [(1281, 1281), (1290, 1290)]}","{'A583': 0.125, 'A591': 0.0625, 'A590': 0.5625, 'A596': 0.125, 'A620': 0.125}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public synchronized void close() throws InterruptedException {
        if (!cnxn.getState().isAlive()) {
            LOG.debug(""Close called on already closed client"");
            return;
        }

        LOG.debug(""Closing session: 0x"" + Long.toHexString(getSessionId()));

        try {
            cnxn.close();
        } catch (IOException e) {
            LOG.debug(""Ignoring unexpected exception during close"", e);
        }

        LOG.info(""Session: 0x{} closed"", Long.toHexString(getSessionId()));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,close,boolean close(int),"[1307, 1310]","{'A656': [(1307, 1310)]}",{'A656': 1.0},A656,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public boolean close(int waitForShutdownTimeoutMs) throws InterruptedException {
        close();
        return testableWaitForShutdown(waitForShutdownTimeoutMs);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,prependChroot,String prependChroot(String),"[1319, 1321]","{'A625': [(1320, 1320)], 'A596': [(1319, 1319), (1321, 1321)]}","{'A625': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private String prependChroot(String clientPath) {
        return chroot.prepend(clientPath);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,create,"String create(String,byte[],List<ACL>,CreateMode)","[1378, 1403]","{'A583': [(1378, 1382), (1400, 1400)], 'A591': [(1395, 1395)], 'A590': [(1390, 1390), (1392, 1394), (1397, 1399), (1403, 1403)], 'A625': [(1402, 1402)], 'A639': [(1385, 1385)], 'A596': [(1383, 1384), (1387, 1389), (1396, 1396), (1401, 1401)], 'A657': [(1386, 1386)], 'A616': [(1391, 1391)]}","{'A583': 0.23076923076923078, 'A591': 0.038461538461538464, 'A590': 0.3076923076923077, 'A625': 0.038461538461538464, 'A639': 0.038461538461538464, 'A596': 0.2692307692307692, 'A657': 0.038461538461538464, 'A616': 0.038461538461538464}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public String create(
        final String path,
        byte[] data,
        List<ACL> acl,
        CreateMode createMode) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath, createMode.isSequential());
        EphemeralType.validateTTL(createMode, -1);
        validateACL(acl);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(createMode.isContainer() ? ZooDefs.OpCode.createContainer : ZooDefs.OpCode.create);
        CreateRequest request = new CreateRequest();
        CreateResponse response = new CreateResponse();
        request.setData(data);
        request.setFlags(createMode.toFlag());
        request.setPath(serverPath);
        request.setAcl(acl);
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        return chroot.strip(response.getPath());
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,create,"String create(String,byte[],List<ACL>,CreateMode,Stat)","[1462, 1469]","{'A583': [(1462, 1467)], 'A639': [(1468, 1469)]}","{'A583': 0.75, 'A639': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public String create(
        final String path,
        byte[] data,
        List<ACL> acl,
        CreateMode createMode,
        Stat stat) throws KeeperException, InterruptedException {
        return create(path, data, acl, createMode, stat, -1);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,create,"String create(String,byte[],List<ACL>,CreateMode,Stat,long)","[1479, 1505]","{'A583': [(1479, 1485), (1499, 1499)], 'A591': [(1486, 1487), (1490, 1493), (1495, 1495), (1498, 1498), (1500, 1503), (1505, 1505)], 'A625': [(1504, 1504)], 'A639': [(1488, 1488), (1494, 1494), (1496, 1497)], 'A657': [(1489, 1489)]}","{'A583': 0.2962962962962963, 'A591': 0.48148148148148145, 'A625': 0.037037037037037035, 'A639': 0.14814814814814814, 'A657': 0.037037037037037035}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public String create(
        final String path,
        byte[] data,
        List<ACL> acl,
        CreateMode createMode,
        Stat stat,
        long ttl) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath, createMode.isSequential());
        EphemeralType.validateTTL(createMode, ttl);
        validateACL(acl);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        setCreateHeader(createMode, h);
        Create2Response response = new Create2Response();
        Record record = makeCreateRecord(createMode, serverPath, data, acl, ttl);
        ReplyHeader r = cnxn.submitRequest(h, record, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        if (stat != null) {
            DataTree.copyStat(response.getStat(), stat);
        }
        return chroot.strip(response.getPath());
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,setCreateHeader,"void setCreateHeader(CreateMode,RequestHeader)","[1507, 1513]","{'A639': [(1507, 1513)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private void setCreateHeader(CreateMode createMode, RequestHeader h) {
        if (createMode.isTTL()) {
            h.setType(ZooDefs.OpCode.createTTL);
        } else {
            h.setType(createMode.isContainer() ? ZooDefs.OpCode.createContainer : ZooDefs.OpCode.create2);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,makeCreateRecord,"Record makeCreateRecord(CreateMode,String,byte[],List<ACL>,long)","[1515, 1534]","{'A639': [(1515, 1534)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private Record makeCreateRecord(CreateMode createMode, String serverPath, byte[] data, List<ACL> acl, long ttl) {
        Record record;
        if (createMode.isTTL()) {
            CreateTTLRequest request = new CreateTTLRequest();
            request.setData(data);
            request.setFlags(createMode.toFlag());
            request.setPath(serverPath);
            request.setAcl(acl);
            request.setTtl(ttl);
            record = request;
        } else {
            CreateRequest request = new CreateRequest();
            request.setData(data);
            request.setFlags(createMode.toFlag());
            request.setPath(serverPath);
            request.setAcl(acl);
            record = request;
        }
        return record;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,create,"void create(String,byte[],List<ACL>,CreateMode,StringCallback,Object)","[1541, 1565]","{'A583': [(1541, 1547), (1564, 1564)], 'A591': [(1561, 1563), (1565, 1565)], 'A590': [(1555, 1555), (1557, 1560)], 'A625': [(1553, 1553)], 'A639': [(1550, 1550)], 'A596': [(1548, 1549), (1551, 1552), (1554, 1554)], 'A616': [(1556, 1556)]}","{'A583': 0.32, 'A591': 0.16, 'A590': 0.2, 'A625': 0.04, 'A639': 0.04, 'A596': 0.2, 'A616': 0.04}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void create(
        final String path,
        byte[] data,
        List<ACL> acl,
        CreateMode createMode,
        StringCallback cb,
        Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath, createMode.isSequential());
        EphemeralType.validateTTL(createMode, -1);

        final String serverPath = prependChroot(clientPath);
        cb = chroot.interceptCallback(cb);

        RequestHeader h = new RequestHeader();
        h.setType(createMode.isContainer() ? ZooDefs.OpCode.createContainer : ZooDefs.OpCode.create);
        CreateRequest request = new CreateRequest();
        CreateResponse response = new CreateResponse();
        ReplyHeader r = new ReplyHeader();
        request.setData(data);
        request.setFlags(createMode.toFlag());
        request.setPath(serverPath);
        request.setAcl(acl);
        cnxn.queuePacket(h, r, request, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,create,"void create(String,byte[],List<ACL>,CreateMode,Create2Callback,Object)","[1572, 1580]","{'A583': [(1572, 1578)], 'A639': [(1579, 1580)]}","{'A583': 0.7777777777777778, 'A639': 0.2222222222222222}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void create(
        final String path,
        byte[] data,
        List<ACL> acl,
        CreateMode createMode,
        Create2Callback cb,
        Object ctx) {
        create(path, data, acl, createMode, cb, ctx, -1);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,create,"void create(String,byte[],List<ACL>,CreateMode,Create2Callback,Object,long)","[1587, 1608]","{'A583': [(1587, 1594), (1607, 1607)], 'A591': [(1595, 1596), (1598, 1599), (1601, 1602), (1604, 1604)], 'A590': [(1608, 1608)], 'A625': [(1600, 1600)], 'A639': [(1597, 1597), (1603, 1603), (1605, 1606)]}","{'A583': 0.4090909090909091, 'A591': 0.3181818181818182, 'A590': 0.045454545454545456, 'A625': 0.045454545454545456, 'A639': 0.18181818181818182}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void create(
        final String path,
        byte[] data,
        List<ACL> acl,
        CreateMode createMode,
        Create2Callback cb,
        Object ctx,
        long ttl) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath, createMode.isSequential());
        EphemeralType.validateTTL(createMode, ttl);

        final String serverPath = prependChroot(clientPath);
        cb = chroot.interceptCallback(cb);

        RequestHeader h = new RequestHeader();
        setCreateHeader(createMode, h);
        ReplyHeader r = new ReplyHeader();
        Create2Response response = new Create2Response();
        Record record = makeCreateRecord(createMode, serverPath, data, acl, ttl);
        cnxn.queuePacket(h, r, record, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,delete,"void delete(String,int)","[1637, 1663]","{'A583': [(1637, 1637), (1661, 1661)], 'A590': [(1654, 1656), (1658, 1660), (1662, 1663)], 'A596': [(1638, 1653), (1657, 1657)]}","{'A583': 0.07407407407407407, 'A590': 0.2962962962962963, 'A596': 0.6296296296296297}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void delete(final String path, int version) throws InterruptedException, KeeperException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath;

        // maintain semantics even in chroot case
        // specifically - root cannot be deleted
        // I think this makes sense even in chroot case.
        if (clientPath.equals(""/"")) {
            // a bit of a hack, but delete(/) will never succeed and ensures
            // that the same semantics are maintained
            serverPath = clientPath;
        } else {
            serverPath = prependChroot(clientPath);
        }

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.delete);
        DeleteRequest request = new DeleteRequest();
        request.setPath(serverPath);
        request.setVersion(version);
        ReplyHeader r = cnxn.submitRequest(h, request, null, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,multi,List<OpResult> multi(Iterable<Op>),"[1693, 1698]","{'A591': [(1694, 1696)], 'A590': [(1693, 1693)], 'A639': [(1697, 1698)]}","{'A591': 0.5, 'A590': 0.16666666666666666, 'A639': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<OpResult> multi(Iterable<Op> ops) throws InterruptedException, KeeperException {
        for (Op op : ops) {
            op.validate();
        }
        return multiInternal(generateMultiTransaction(ops));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,multi,"void multi(Iterable<Op>,MultiCallback,Object)","[1705, 1712]","{'A583': [(1708, 1708)], 'A591': [(1706, 1707), (1709, 1710)], 'A639': [(1705, 1705), (1711, 1712)]}","{'A583': 0.125, 'A591': 0.5, 'A639': 0.375}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void multi(Iterable<Op> ops, MultiCallback cb, Object ctx) {
        List<OpResult> results = validatePath(ops);
        if (results.size() > 0) {
            cb.processResult(KeeperException.Code.BADARGUMENTS.intValue(), null, ctx, results);
            return;
        }
        multiInternal(generateMultiTransaction(ops), cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,validatePath,List<OpResult> validatePath(Iterable<Op>),"[1714, 1740]","{'A583': [(1721, 1722), (1727, 1727), (1733, 1733), (1736, 1736)], 'A591': [(1714, 1714), (1716, 1720), (1723, 1726), (1728, 1732), (1734, 1735), (1737, 1740)], 'A605': [(1715, 1715)]}","{'A583': 0.18518518518518517, 'A591': 0.7777777777777778, 'A605': 0.037037037037037035}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private List<OpResult> validatePath(Iterable<Op> ops) {
        List<OpResult> results = new ArrayList<>();
        boolean error = false;
        for (Op op : ops) {
            try {
                op.validate();
            } catch (IllegalArgumentException iae) {
                LOG.error(""Unexpected exception"", iae);
                ErrorResult err = new ErrorResult(KeeperException.Code.BADARGUMENTS.intValue());
                results.add(err);
                error = true;
                continue;
            } catch (KeeperException ke) {
                LOG.error(""Unexpected exception"", ke);
                ErrorResult err = new ErrorResult(ke.code().intValue());
                results.add(err);
                error = true;
                continue;
            }
            ErrorResult err = new ErrorResult(KeeperException.Code.RUNTIMEINCONSISTENCY.intValue());
            results.add(err);
        }
        if (!error) {
            results.clear();
        }
        return results;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,generateMultiTransaction,MultiOperationRecord generateMultiTransaction(Iterable<Op>),"[1742, 1749]","{'A591': [(1743, 1743), (1745, 1747), (1749, 1749)], 'A605': [(1744, 1744)], 'A626': [(1742, 1742), (1748, 1748)]}","{'A591': 0.625, 'A605': 0.125, 'A626': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private MultiOperationRecord generateMultiTransaction(Iterable<Op> ops) {
        // reconstructing transaction with the chroot prefix
        List<Op> transaction = new ArrayList<>();
        for (Op op : ops) {
            transaction.add(withRootPrefix(op));
        }
        return new MultiOperationRecord(transaction);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,withRootPrefix,Op withRootPrefix(Op),"[1751, 1759]","{'A591': [(1751, 1758)], 'A590': [(1759, 1759)]}","{'A591': 0.8888888888888888, 'A590': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private Op withRootPrefix(Op op) {
        if (null != op.getPath()) {
            final String serverPath = prependChroot(op.getPath());
            if (!op.getPath().equals(serverPath)) {
                return op.withChroot(serverPath);
            }
        }
        return op;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,multiInternal,"void multiInternal(MultiOperationRecord,MultiCallback,Object)","[1761, 1783]","{'A583': [(1761, 1764), (1772, 1779)], 'A584': [(1765, 1769)], 'A639': [(1770, 1770), (1781, 1783)], 'A626': [(1771, 1771), (1780, 1780)]}","{'A583': 0.5217391304347826, 'A584': 0.21739130434782608, 'A639': 0.17391304347826086, 'A626': 0.08695652173913043}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected void multiInternal(
        MultiOperationRecord request,
        MultiCallback cb,
        Object ctx) throws IllegalArgumentException {
        if (request.size() == 0) {
            // nothing to do, early exit
            cnxn.queueCallback(cb, KeeperException.Code.OK.intValue(), null, ctx);
            return;
        }
        RequestHeader h = new RequestHeader();
        switch (request.getOpKind()) {
        case TRANSACTION:
            h.setType(ZooDefs.OpCode.multi);
            break;
        case READ:
            h.setType(ZooDefs.OpCode.multiRead);
            break;
        default:
            throw new IllegalArgumentException(""Unsupported OpKind: "" + request.getOpKind());
        }
        MultiResponse response = new MultiResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, null, null, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,multiInternal,List<OpResult> multiInternal(MultiOperationRecord),"[1785, 1831]","{'A583': [(1785, 1786), (1793, 1800), (1817, 1818)], 'A590': [(1787, 1787), (1802, 1808), (1815, 1816), (1819, 1831)], 'A584': [(1788, 1791)], 'A626': [(1792, 1792), (1801, 1801), (1809, 1814)]}","{'A583': 0.2553191489361702, 'A590': 0.48936170212765956, 'A584': 0.0851063829787234, 'A626': 0.1702127659574468}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected List<OpResult> multiInternal(
        MultiOperationRecord request) throws InterruptedException, KeeperException, IllegalArgumentException {
        RequestHeader h = new RequestHeader();
        if (request.size() == 0) {
            // nothing to do, early exit
            return Collections.emptyList();
        }
        switch (request.getOpKind()) {
        case TRANSACTION:
            h.setType(ZooDefs.OpCode.multi);
            break;
        case READ:
            h.setType(ZooDefs.OpCode.multiRead);
            break;
        default:
            throw new IllegalArgumentException(""Unsupported OpKind: "" + request.getOpKind());
        }
        MultiResponse response = new MultiResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()));
        }

        List<OpResult> results = response.getResultList();
        // In case of only read operations there is no need to throw an exception
        // as the subResults are still possibly valid.
        if (request.getOpKind() == Op.OpKind.READ) {
            return results;
        }

        ErrorResult fatalError = null;
        for (OpResult result : results) {
            if (result instanceof ErrorResult
                && ((ErrorResult) result).getErr() != KeeperException.Code.OK.intValue()) {
                fatalError = (ErrorResult) result;
                break;
            }
        }

        if (fatalError != null) {
            KeeperException ex = KeeperException.create(KeeperException.Code.get(fatalError.getErr()));
            ex.setMultiResults(results);
            throw ex;
        }

        return results;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,transaction,Transaction transaction(),"[1842, 1844]","{'A590': [(1842, 1844)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public Transaction transaction() {
        return new Transaction(this);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,delete,"void delete(String,int,VoidCallback,Object)","[1851, 1874]","{'A583': [(1851, 1851), (1873, 1873)], 'A590': [(1868, 1870), (1872, 1872), (1874, 1874)], 'A596': [(1852, 1867), (1871, 1871)]}","{'A583': 0.08333333333333333, 'A590': 0.20833333333333334, 'A596': 0.7083333333333334}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void delete(final String path, int version, VoidCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath;

        // maintain semantics even in chroot case
        // specifically - root cannot be deleted
        // I think this makes sense even in chroot case.
        if (clientPath.equals(""/"")) {
            // a bit of a hack, but delete(/) will never succeed and ensures
            // that the same semantics are maintained
            serverPath = clientPath;
        } else {
            serverPath = prependChroot(clientPath);
        }

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.delete);
        DeleteRequest request = new DeleteRequest();
        request.setPath(serverPath);
        request.setVersion(version);
        cnxn.queuePacket(h, new ReplyHeader(), request, null, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,exists,"Stat exists(String,Watcher)","[1893, 1919]","{'A583': [(1893, 1893), (1915, 1915)], 'A590': [(1904, 1906), (1908, 1911), (1913, 1914), (1916, 1919)], 'A596': [(1894, 1903), (1907, 1907), (1912, 1912)]}","{'A583': 0.07407407407407407, 'A590': 0.48148148148148145, 'A596': 0.4444444444444444}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public Stat exists(final String path, Watcher watcher) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ExistsWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.exists);
        ExistsRequest request = new ExistsRequest();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        SetDataResponse response = new SetDataResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);
        if (r.getErr() != 0) {
            if (r.getErr() == KeeperException.Code.NONODE.intValue()) {
                return null;
            }
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }

        return response.getStat().getCzxid() == -1 ? null : response.getStat();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,exists,"Stat exists(String,boolean)","[1938, 1940]","{'A583': [(1938, 1939)], 'A590': [(1940, 1940)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public Stat exists(String path, boolean watch) throws KeeperException, InterruptedException {
        return exists(path, getDefaultWatcher(watch));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,exists,"void exists(String,Watcher,StatCallback,Object)","[1947, 1965]","{'A583': [(1947, 1947), (1964, 1964)], 'A590': [(1958, 1960), (1962, 1963), (1965, 1965)], 'A596': [(1948, 1957), (1961, 1961)]}","{'A583': 0.10526315789473684, 'A590': 0.3157894736842105, 'A596': 0.5789473684210527}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void exists(final String path, Watcher watcher, StatCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ExistsWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.exists);
        ExistsRequest request = new ExistsRequest();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        SetDataResponse response = new SetDataResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, wcb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,exists,"void exists(String,boolean,StatCallback,Object)","[1974, 1976]","{'A583': [(1975, 1975)], 'A590': [(1974, 1974), (1976, 1976)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void exists(String path, boolean watch, StatCallback cb, Object ctx) {
        exists(path, getDefaultWatcher(watch), cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getData,"byte[] getData(String,Watcher,Stat)","[1997, 2022]","{'A583': [(1997, 1997), (2016, 2016)], 'A590': [(2008, 2010), (2012, 2015), (2017, 2022)], 'A596': [(1998, 2007), (2011, 2011)]}","{'A583': 0.07692307692307693, 'A590': 0.5, 'A596': 0.4230769230769231}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public byte[] getData(final String path, Watcher watcher, Stat stat) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new DataWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getData);
        GetDataRequest request = new GetDataRequest();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        GetDataResponse response = new GetDataResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        if (stat != null) {
            DataTree.copyStat(response.getStat(), stat);
        }
        return response.getData();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getData,"byte[] getData(String,boolean,Stat)","[2043, 2045]","{'A583': [(2043, 2044)], 'A590': [(2045, 2045)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public byte[] getData(String path, boolean watch, Stat stat) throws KeeperException, InterruptedException {
        return getData(path, getDefaultWatcher(watch), stat);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getData,"void getData(String,Watcher,DataCallback,Object)","[2052, 2070]","{'A583': [(2052, 2052), (2069, 2069)], 'A590': [(2063, 2065), (2067, 2068), (2070, 2070)], 'A596': [(2053, 2062), (2066, 2066)]}","{'A583': 0.10526315789473684, 'A590': 0.3157894736842105, 'A596': 0.5789473684210527}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getData(final String path, Watcher watcher, DataCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new DataWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getData);
        GetDataRequest request = new GetDataRequest();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        GetDataResponse response = new GetDataResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, wcb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getData,"void getData(String,boolean,DataCallback,Object)","[2079, 2081]","{'A583': [(2080, 2080)], 'A590': [(2079, 2079), (2081, 2081)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getData(String path, boolean watch, DataCallback cb, Object ctx) {
        getData(path, getDefaultWatcher(watch), cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getConfig,"byte[] getConfig(Watcher,Stat)","[2100, 2123]","{'A583': [(2100, 2100), (2102, 2102), (2117, 2117)], 'A590': [(2101, 2101), (2103, 2105), (2107, 2116), (2118, 2123)], 'A625': [(2106, 2106)]}","{'A583': 0.125, 'A590': 0.8333333333333334, 'A625': 0.041666666666666664}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public byte[] getConfig(Watcher watcher, Stat stat) throws KeeperException, InterruptedException {
        final String configZnode = ZooDefs.CONFIG_NODE;

        // the watch contains the un-chroot path
        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ServerDataWatchRegistration(watcher, configZnode);
        }

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getData);
        GetDataRequest request = new GetDataRequest();
        request.setPath(configZnode);
        request.setWatch(watcher != null);
        GetDataResponse response = new GetDataResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), configZnode);
        }
        if (stat != null) {
            DataTree.copyStat(response.getStat(), stat);
        }
        return response.getData();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getConfig,"void getConfig(Watcher,DataCallback,Object)","[2130, 2146]","{'A583': [(2130, 2130), (2132, 2132), (2145, 2145)], 'A590': [(2131, 2131), (2133, 2135), (2137, 2144), (2146, 2146)], 'A625': [(2136, 2136)]}","{'A583': 0.17647058823529413, 'A590': 0.7647058823529411, 'A625': 0.058823529411764705}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getConfig(Watcher watcher, DataCallback cb, Object ctx) {
        final String configZnode = ZooDefs.CONFIG_NODE;

        // the watch contains the un-chroot path
        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ServerDataWatchRegistration(watcher, configZnode);
        }

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getData);
        GetDataRequest request = new GetDataRequest();
        request.setPath(configZnode);
        request.setWatch(watcher != null);
        GetDataResponse response = new GetDataResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, configZnode, configZnode, ctx, wcb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getConfig,"byte[] getConfig(boolean,Stat)","[2166, 2168]","{'A583': [(2166, 2167)], 'A590': [(2168, 2168)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public byte[] getConfig(boolean watch, Stat stat) throws KeeperException, InterruptedException {
        return getConfig(getDefaultWatcher(watch), stat);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getConfig,"void getConfig(boolean,DataCallback,Object)","[2177, 2179]","{'A583': [(2178, 2178)], 'A590': [(2177, 2177), (2179, 2179)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getConfig(boolean watch, DataCallback cb, Object ctx) {
        getConfig(getDefaultWatcher(watch), cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,setData,"Stat setData(String,byte[],int)","[2209, 2227]","{'A583': [(2209, 2209), (2224, 2224)], 'A590': [(2215, 2217), (2219, 2223), (2225, 2227)], 'A596': [(2210, 2214), (2218, 2218)]}","{'A583': 0.10526315789473684, 'A590': 0.5789473684210527, 'A596': 0.3157894736842105}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public Stat setData(final String path, byte[] data, int version) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.setData);
        SetDataRequest request = new SetDataRequest();
        request.setPath(serverPath);
        request.setData(data);
        request.setVersion(version);
        SetDataResponse response = new SetDataResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        return response.getStat();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,setData,"void setData(String,byte[],int,StatCallback,Object)","[2234, 2248]","{'A583': [(2234, 2234), (2247, 2247)], 'A590': [(2240, 2242), (2244, 2246), (2248, 2248)], 'A596': [(2235, 2239), (2243, 2243)]}","{'A583': 0.13333333333333333, 'A590': 0.4666666666666667, 'A596': 0.4}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void setData(final String path, byte[] data, int version, StatCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.setData);
        SetDataRequest request = new SetDataRequest();
        request.setPath(serverPath);
        request.setData(data);
        request.setVersion(version);
        SetDataResponse response = new SetDataResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getACL,"List<ACL> getACL(String,Stat)","[2266, 2285]","{'A583': [(2266, 2266), (2279, 2279)], 'A590': [(2272, 2274), (2276, 2278), (2280, 2280), (2284, 2285)], 'A630': [(2281, 2283)], 'A596': [(2267, 2271), (2275, 2275)]}","{'A583': 0.1, 'A590': 0.45, 'A630': 0.15, 'A596': 0.3}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<ACL> getACL(final String path, Stat stat) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getACL);
        GetACLRequest request = new GetACLRequest();
        request.setPath(serverPath);
        GetACLResponse response = new GetACLResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        if (stat != null) {
            DataTree.copyStat(response.getStat(), stat);
        }
        return response.getAcl();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getACL,"void getACL(String,Stat,ACLCallback,Object)","[2292, 2304]","{'A583': [(2292, 2292), (2303, 2303)], 'A590': [(2298, 2300), (2302, 2302), (2304, 2304)], 'A596': [(2293, 2297), (2301, 2301)]}","{'A583': 0.15384615384615385, 'A590': 0.38461538461538464, 'A596': 0.46153846153846156}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getACL(final String path, Stat stat, ACLCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getACL);
        GetACLRequest request = new GetACLRequest();
        request.setPath(serverPath);
        GetACLResponse response = new GetACLResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,setACL,"Stat setACL(String,List<ACL>,int)","[2326, 2345]","{'A583': [(2326, 2326), (2342, 2342)], 'A590': [(2333, 2335), (2337, 2337), (2339, 2341), (2343, 2345)], 'A596': [(2327, 2328), (2330, 2332), (2336, 2336)], 'A657': [(2329, 2329)], 'A607': [(2338, 2338)]}","{'A583': 0.1, 'A590': 0.5, 'A596': 0.3, 'A657': 0.05, 'A607': 0.05}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public Stat setACL(final String path, List<ACL> acl, int aclVersion) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);
        validateACL(acl);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.setACL);
        SetACLRequest request = new SetACLRequest();
        request.setPath(serverPath);
        request.setAcl(acl);
        request.setVersion(aclVersion);
        SetACLResponse response = new SetACLResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        return response.getStat();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,setACL,"void setACL(String,List<ACL>,int,StatCallback,Object)","[2352, 2366]","{'A583': [(2352, 2352), (2365, 2365)], 'A590': [(2358, 2360), (2362, 2364), (2366, 2366)], 'A596': [(2353, 2357), (2361, 2361)]}","{'A583': 0.13333333333333333, 'A590': 0.4666666666666667, 'A596': 0.4}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void setACL(final String path, List<ACL> acl, int version, StatCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.setACL);
        SetACLRequest request = new SetACLRequest();
        request.setPath(serverPath);
        request.setAcl(acl);
        request.setVersion(version);
        SetACLResponse response = new SetACLResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"List<String> getChildren(String,Watcher)","[2389, 2412]","{'A583': [(2389, 2389), (2409, 2409)], 'A590': [(2401, 2403), (2405, 2408), (2410, 2412)], 'A596': [(2390, 2400), (2404, 2404)]}","{'A583': 0.08333333333333333, 'A590': 0.4166666666666667, 'A596': 0.5}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<String> getChildren(final String path, Watcher watcher) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        // the watch contains the un-chroot path
        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ChildWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getChildren);
        GetChildrenRequest request = new GetChildrenRequest();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        GetChildrenResponse response = new GetChildrenResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        return response.getChildren();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"List<String> getChildren(String,boolean)","[2435, 2437]","{'A583': [(2435, 2436)], 'A590': [(2437, 2437)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<String> getChildren(String path, boolean watch) throws KeeperException, InterruptedException {
        return getChildren(path, getDefaultWatcher(watch));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"void getChildren(String,Watcher,ChildrenCallback,Object)","[2444, 2463]","{'A583': [(2444, 2444), (2462, 2462)], 'A590': [(2456, 2458), (2460, 2461), (2463, 2463)], 'A596': [(2445, 2455), (2459, 2459)]}","{'A583': 0.1, 'A590': 0.3, 'A596': 0.6}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getChildren(final String path, Watcher watcher, ChildrenCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        // the watch contains the un-chroot path
        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ChildWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getChildren);
        GetChildrenRequest request = new GetChildrenRequest();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        GetChildrenResponse response = new GetChildrenResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, wcb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"void getChildren(String,boolean,ChildrenCallback,Object)","[2472, 2474]","{'A583': [(2472, 2473)], 'A596': [(2474, 2474)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getChildren(String path, boolean watch, ChildrenCallback cb, Object ctx) {
        getChildren(path, getDefaultWatcher(watch), cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"List<String> getChildren(String,Watcher,Stat)","[2500, 2529]","{'A583': [(2500, 2503), (2523, 2523)], 'A596': [(2504, 2522), (2524, 2529)]}","{'A583': 0.16666666666666666, 'A596': 0.8333333333333334}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<String> getChildren(
        final String path,
        Watcher watcher,
        Stat stat) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        // the watch contains the un-chroot path
        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ChildWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getChildren2);
        GetChildren2Request request = new GetChildren2Request();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        GetChildren2Response response = new GetChildren2Response();
        ReplyHeader r = cnxn.submitRequest(h, request, response, wcb);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        if (stat != null) {
            DataTree.copyStat(response.getStat(), stat);
        }
        return response.getChildren();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"List<String> getChildren(String,boolean,Stat)","[2556, 2561]","{'A583': [(2556, 2560)], 'A596': [(2561, 2561)]}","{'A583': 0.8333333333333334, 'A596': 0.16666666666666666}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<String> getChildren(
        String path,
        boolean watch,
        Stat stat) throws KeeperException, InterruptedException {
        return getChildren(path, getDefaultWatcher(watch), stat);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"void getChildren(String,Watcher,Children2Callback,Object)","[2570, 2589]","{'A583': [(2570, 2570), (2588, 2588)], 'A596': [(2571, 2587), (2589, 2589)]}","{'A583': 0.1, 'A596': 0.9}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getChildren(final String path, Watcher watcher, Children2Callback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        // the watch contains the un-chroot path
        WatchRegistration wcb = null;
        if (watcher != null) {
            wcb = new ChildWatchRegistration(watcher, clientPath);
        }

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getChildren2);
        GetChildren2Request request = new GetChildren2Request();
        request.setPath(serverPath);
        request.setWatch(watcher != null);
        GetChildren2Response response = new GetChildren2Response();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, wcb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getChildren,"void getChildren(String,boolean,Children2Callback,Object)","[2600, 2602]","{'A583': [(2600, 2601)], 'A590': [(2602, 2602)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getChildren(String path, boolean watch, Children2Callback cb, Object ctx) {
        getChildren(path, getDefaultWatcher(watch), cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getAllChildrenNumber,int getAllChildrenNumber(String),"[2613, 2630]","{'A583': [(2613, 2613), (2627, 2627)], 'A641': [(2614, 2626), (2628, 2630)]}","{'A583': 0.1111111111111111, 'A641': 0.8888888888888888}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public int getAllChildrenNumber(final String path) throws KeeperException, InterruptedException {

        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getAllChildrenNumber);
        GetAllChildrenNumberRequest request = new GetAllChildrenNumberRequest(serverPath);
        GetAllChildrenNumberResponse response = new GetAllChildrenNumberResponse();

        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
        return response.getTotalNumber();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getAllChildrenNumber,"void getAllChildrenNumber(String,AsyncCallback.AllChildrenNumberCallback,Object)","[2638, 2651]","{'A583': [(2650, 2650)], 'A641': [(2638, 2649), (2651, 2651)]}","{'A583': 0.07142857142857142, 'A641': 0.9285714285714286}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getAllChildrenNumber(final String path, AsyncCallback.AllChildrenNumberCallback cb, Object ctx) {

        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getAllChildrenNumber);
        GetAllChildrenNumberRequest request = new GetAllChildrenNumberRequest(serverPath);
        GetAllChildrenNumberResponse response = new GetAllChildrenNumberResponse();

        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getEphemerals,List<String> getEphemerals(),"[2659, 2661]","{'A583': [(2659, 2659)], 'A644': [(2660, 2661)]}","{'A583': 0.3333333333333333, 'A644': 0.6666666666666666}",A644,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<String> getEphemerals() throws KeeperException, InterruptedException {
        return getEphemerals(""/"");
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getEphemerals,List<String> getEphemerals(String),"[2671, 2682]","{'A583': [(2671, 2671)], 'A644': [(2672, 2682)]}","{'A583': 0.08333333333333333, 'A644': 0.9166666666666666}",A644,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public List<String> getEphemerals(String prefixPath) throws KeeperException, InterruptedException {
        PathUtils.validatePath(prefixPath);
        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getEphemerals);
        GetEphemeralsRequest request = new GetEphemeralsRequest(prefixPath);
        GetEphemeralsResponse response = new GetEphemeralsResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()));
        }
        return response.getEphemerals();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getEphemerals,"void getEphemerals(String,AsyncCallback.EphemeralsCallback,Object)","[2692, 2699]","{'A583': [(2698, 2698)], 'A644': [(2692, 2697), (2699, 2699)]}","{'A583': 0.125, 'A644': 0.875}",A644,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getEphemerals(String prefixPath, AsyncCallback.EphemeralsCallback cb, Object ctx) {
        PathUtils.validatePath(prefixPath);
        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.getEphemerals);
        GetEphemeralsRequest request = new GetEphemeralsRequest(prefixPath);
        GetEphemeralsResponse response = new GetEphemeralsResponse();
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, null, null, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getEphemerals,"void getEphemerals(AsyncCallback.EphemeralsCallback,Object)","[2708, 2710]","{'A644': [(2708, 2710)]}",{'A644': 1.0},A644,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void getEphemerals(AsyncCallback.EphemeralsCallback cb, Object ctx) {
        getEphemerals(""/"", cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,sync,void sync(String),"[2720, 2735]","{'A625': [(2720, 2735)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void sync(final String path) throws KeeperException, InterruptedException {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.sync);
        SyncRequest request = new SyncRequest();
        SyncResponse response = new SyncResponse();
        request.setPath(serverPath);
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,sync,"void sync(String,VoidCallback,Object)","[2744, 2756]","{'A583': [(2744, 2744), (2755, 2755)], 'A590': [(2750, 2753), (2756, 2756)], 'A596': [(2745, 2749), (2754, 2754)]}","{'A583': 0.15384615384615385, 'A590': 0.38461538461538464, 'A596': 0.46153846153846156}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void sync(final String path, VoidCallback cb, Object ctx) {
        final String clientPath = path;
        PathUtils.validatePath(clientPath);

        final String serverPath = prependChroot(clientPath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.sync);
        SyncRequest request = new SyncRequest();
        SyncResponse response = new SyncResponse();
        request.setPath(serverPath);
        cnxn.queuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,removeWatches,"void removeWatches(String,Watcher,WatcherType,boolean)","[2791, 2798]","{'A583': [(2791, 2795), (2797, 2797)], 'A639': [(2796, 2796), (2798, 2798)]}","{'A583': 0.75, 'A639': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void removeWatches(
        String path,
        Watcher watcher,
        WatcherType watcherType,
        boolean local) throws InterruptedException, KeeperException {
        validateWatcher(watcher);
        removeWatches(ZooDefs.OpCode.checkWatches, path, watcher, watcherType, local);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,removeWatches,"void removeWatches(String,Watcher,WatcherType,boolean,VoidCallback,Object)","[2805, 2814]","{'A583': [(2805, 2811), (2813, 2813)], 'A639': [(2812, 2812), (2814, 2814)]}","{'A583': 0.8, 'A639': 0.2}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void removeWatches(
        String path,
        Watcher watcher,
        WatcherType watcherType,
        boolean local,
        VoidCallback cb,
        Object ctx) {
        validateWatcher(watcher);
        removeWatches(ZooDefs.OpCode.checkWatches, path, watcher, watcherType, local, cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,removeAllWatches,"void removeAllWatches(String,WatcherType,boolean)","[2843, 2849]","{'A583': [(2843, 2846), (2848, 2848)], 'A639': [(2847, 2847), (2849, 2849)]}","{'A583': 0.7142857142857143, 'A639': 0.2857142857142857}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void removeAllWatches(
        String path,
        WatcherType watcherType,
        boolean local) throws InterruptedException, KeeperException {

        removeWatches(ZooDefs.OpCode.removeWatches, path, null, watcherType, local);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,removeAllWatches,"void removeAllWatches(String,WatcherType,boolean,VoidCallback,Object)","[2856, 2859]","{'A583': [(2856, 2856), (2858, 2858)], 'A639': [(2857, 2857)], 'A636': [(2859, 2859)]}","{'A583': 0.5, 'A639': 0.25, 'A636': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void removeAllWatches(String path, WatcherType watcherType, boolean local, VoidCallback cb, Object ctx) {

        removeWatches(ZooDefs.OpCode.removeWatches, path, null, watcherType, local, cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,addWatch,"void addWatch(String,Watcher,AddWatchMode)","[2874, 2889]","{'A636': [(2874, 2876), (2878, 2889)], 'A619': [(2877, 2877)]}","{'A636': 0.9375, 'A619': 0.0625}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void addWatch(String basePath, Watcher watcher, AddWatchMode mode)
            throws KeeperException, InterruptedException {
        PathUtils.validatePath(basePath);
        validateWatcher(watcher);
        String serverPath = prependChroot(basePath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.addWatch);
        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());
        ReplyHeader r = cnxn.submitRequest(h, request, new ErrorResponse(),
                new AddWatchRegistration(watcher, basePath, mode));
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()),
                    basePath);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,addWatch,"void addWatch(String,AddWatchMode)","[2904, 2909]","{'A583': [(2904, 2908)], 'A636': [(2909, 2909)]}","{'A583': 0.8333333333333334, 'A636': 0.16666666666666666}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void addWatch(
            String basePath,
            AddWatchMode mode
    ) throws KeeperException, InterruptedException {
        addWatch(basePath, getWatchManager().getDefaultWatcher(), mode);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,addWatch,"void addWatch(String,Watcher,AddWatchMode,VoidCallback,Object)","[2922, 2937]","{'A583': [(2922, 2927)], 'A636': [(2928, 2928), (2930, 2937)], 'A619': [(2929, 2929)]}","{'A583': 0.375, 'A636': 0.5625, 'A619': 0.0625}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void addWatch(
            String basePath,
            Watcher watcher, AddWatchMode mode,
            VoidCallback cb,
            Object ctx
    ) {
        PathUtils.validatePath(basePath);
        validateWatcher(watcher);
        String serverPath = prependChroot(basePath);

        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.addWatch);
        AddWatchRequest request = new AddWatchRequest(serverPath, mode.getMode());
        cnxn.queuePacket(h, new ReplyHeader(), request, new ErrorResponse(), cb,
                basePath, serverPath, ctx, new AddWatchRegistration(watcher, basePath, mode));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,addWatch,"void addWatch(String,AddWatchMode,VoidCallback,Object)","[2949, 2951]","{'A583': [(2949, 2950)], 'A639': [(2951, 2951)]}","{'A583': 0.6666666666666666, 'A639': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public void addWatch(String basePath, AddWatchMode mode, VoidCallback cb, Object ctx) {
        addWatch(basePath, getWatchManager().getDefaultWatcher(), mode, cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,validateWatcher,void validateWatcher(Watcher),"[2953, 2957]","{'A583': [(2955, 2955)], 'A639': [(2953, 2954), (2956, 2957)]}","{'A583': 0.2, 'A639': 0.8}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private void validateWatcher(Watcher watcher) {
        if (watcher == null) {
            throw new IllegalArgumentException(""Invalid Watcher, shouldn't be null!"");
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,removeWatches,"void removeWatches(int,String,Watcher,WatcherType,boolean)","[2959, 2978]","{'A583': [(2959, 2964), (2972, 2972), (2976, 2976)], 'A591': [(2965, 2967), (2970, 2970), (2973, 2975), (2977, 2978)], 'A625': [(2968, 2968)], 'A639': [(2969, 2969), (2971, 2971)]}","{'A583': 0.4, 'A591': 0.45, 'A625': 0.05, 'A639': 0.1}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private void removeWatches(
        int opCode,
        String path,
        Watcher watcher,
        WatcherType watcherType,
        boolean local) throws InterruptedException, KeeperException {
        PathUtils.validatePath(path);
        final String clientPath = path;
        final String serverPath = prependChroot(clientPath);
        WatchDeregistration wcb = new WatchDeregistration(serverPath, chroot.interceptWatcher(watcher), watcherType, local, getWatchManager());

        RequestHeader h = new RequestHeader();
        h.setType(opCode);
        Record request = getRemoveWatchesRequest(opCode, watcherType, serverPath);

        ReplyHeader r = cnxn.submitRequest(h, request, null, null, wcb);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), clientPath);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,removeWatches,"void removeWatches(int,String,Watcher,WatcherType,boolean,VoidCallback,Object)","[2980, 2998]","{'A583': [(2980, 2987), (2995, 2995), (2997, 2997)], 'A591': [(2989, 2990), (2993, 2993), (2998, 2998)], 'A625': [(2991, 2991)], 'A639': [(2988, 2988), (2992, 2992), (2994, 2994), (2996, 2996)]}","{'A583': 0.5263157894736842, 'A591': 0.21052631578947367, 'A625': 0.05263157894736842, 'A639': 0.21052631578947367}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private void removeWatches(
        int opCode,
        String path,
        Watcher watcher,
        WatcherType watcherType,
        boolean local,
        VoidCallback cb,
        Object ctx) {
        PathUtils.validatePath(path);
        final String clientPath = path;
        final String serverPath = prependChroot(clientPath);
        WatchDeregistration wcb = new WatchDeregistration(serverPath, chroot.interceptWatcher(watcher), watcherType, local, getWatchManager());

        RequestHeader h = new RequestHeader();
        h.setType(opCode);
        Record request = getRemoveWatchesRequest(opCode, watcherType, serverPath);

        cnxn.queuePacket(h, new ReplyHeader(), request, null, cb, clientPath, serverPath, ctx, null, wcb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getRemoveWatchesRequest,"Record getRemoveWatchesRequest(int,WatcherType,String)","[3000, 3020]","{'A583': [(3000, 3000)], 'A591': [(3015, 3017)], 'A639': [(3001, 3014), (3018, 3020)]}","{'A583': 0.047619047619047616, 'A591': 0.14285714285714285, 'A639': 0.8095238095238095}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private Record getRemoveWatchesRequest(int opCode, WatcherType watcherType, final String serverPath) {
        Record request = null;
        switch (opCode) {
        case ZooDefs.OpCode.checkWatches:
            CheckWatchesRequest chkReq = new CheckWatchesRequest();
            chkReq.setPath(serverPath);
            chkReq.setType(watcherType.getIntValue());
            request = chkReq;
            break;
        case ZooDefs.OpCode.removeWatches:
            RemoveWatchesRequest rmReq = new RemoveWatchesRequest();
            rmReq.setPath(serverPath);
            rmReq.setType(watcherType.getIntValue());
            request = rmReq;
            break;
        default:
            LOG.warn(""unknown type "" + opCode);
            break;
        }
        return request;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getState,States getState(),"[3022, 3024]","{'A591': [(3023, 3023)], 'A590': [(3022, 3022), (3024, 3024)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public States getState() {
        return cnxn.getState();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,toString,String toString(),"[3035, 3042]","{'A583': [(3038, 3040)], 'A590': [(3035, 3036), (3042, 3042)], 'A596': [(3037, 3037), (3041, 3041)]}","{'A583': 0.375, 'A590': 0.375, 'A596': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    @Override
    public String toString() {
        States state = getState();
        return (""State:""
                + state.toString()
                + (state.isConnected() ? "" Timeout:"" + getSessionTimeout() + "" "" : "" "")
                + cnxn);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,testableWaitForShutdown,boolean testableWaitForShutdown(int),"[3059, 3066]","{'A583': [(3059, 3059), (3061, 3063), (3065, 3065)], 'A590': [(3060, 3060), (3064, 3064), (3066, 3066)]}","{'A583': 0.625, 'A590': 0.375}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected boolean testableWaitForShutdown(int wait) throws InterruptedException {
        cnxn.sendThread.join(wait);
        if (cnxn.sendThread.isAlive()) {
            return false;
        }
        cnxn.eventThread.join(wait);
        return !cnxn.eventThread.isAlive();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,testableRemoteSocketAddress,SocketAddress testableRemoteSocketAddress(),"[3080, 3082]","{'A591': [(3081, 3081)], 'A590': [(3080, 3080), (3082, 3082)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected SocketAddress testableRemoteSocketAddress() {
        return cnxn.sendThread.getClientCnxnSocket().getRemoteSocketAddress();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,testableLocalSocketAddress,SocketAddress testableLocalSocketAddress(),"[3093, 3095]","{'A591': [(3094, 3095)], 'A590': [(3093, 3093)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    protected SocketAddress testableLocalSocketAddress() {
        return cnxn.sendThread.getClientCnxnSocket().getLocalSocketAddress();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getClientCnxnSocket,ClientCnxnSocket getClientCnxnSocket(),"[3097, 3113]","{'A583': [(3098, 3098), (3106, 3107), (3111, 3111)], 'A591': [(3100, 3100), (3103, 3103), (3105, 3105), (3110, 3110), (3112, 3112)], 'A590': [(3113, 3113)], 'A597': [(3097, 3097), (3108, 3109)], 'A659': [(3099, 3099), (3101, 3102), (3104, 3104)]}","{'A583': 0.23529411764705882, 'A591': 0.29411764705882354, 'A590': 0.058823529411764705, 'A597': 0.17647058823529413, 'A659': 0.23529411764705882}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private ClientCnxnSocket getClientCnxnSocket() throws IOException {
        String clientCnxnSocketName = getClientConfig().getProperty(ZKClientConfig.ZOOKEEPER_CLIENT_CNXN_SOCKET);
        if (clientCnxnSocketName == null || clientCnxnSocketName.equals(ClientCnxnSocketNIO.class.getSimpleName())) {
            clientCnxnSocketName = ClientCnxnSocketNIO.class.getName();
        } else if (clientCnxnSocketName.equals(ClientCnxnSocketNetty.class.getSimpleName())) {
            clientCnxnSocketName = ClientCnxnSocketNetty.class.getName();
        }

        try {
            Constructor<?> clientCxnConstructor = Class.forName(clientCnxnSocketName)
                                                       .getDeclaredConstructor(ZKClientConfig.class);
            ClientCnxnSocket clientCxnSocket = (ClientCnxnSocket) clientCxnConstructor.newInstance(getClientConfig());
            return clientCxnSocket;
        } catch (Exception e) {
            throw new IOException(""Couldn't instantiate "" + clientCnxnSocketName, e);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,getDefaultWatcher,Watcher getDefaultWatcher(boolean),"[3122, 3133]","{'A583': [(3122, 3133)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private Watcher getDefaultWatcher(boolean required) {
        if (required) {
            final Watcher defaultWatcher = getWatchManager().getDefaultWatcher();
            if (defaultWatcher != null) {
                return defaultWatcher;
            } else {
                throw new IllegalStateException(""Default watcher is required, but it is null."");
            }
        }

        return null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,validateACL,void validateACL(List<ACL>),"[3143, 3147]","{'A657': [(3143, 3147)]}",{'A657': 1.0},A657,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    private void validateACL(List<ACL> acl) throws KeeperException.InvalidACLException {
        if (acl == null || acl.isEmpty() || acl.contains(null)) {
            throw new KeeperException.InvalidACLException();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeper.java,ZooKeeper,whoAmI,List<ClientInfo> whoAmI(),"[3155, 3161]","{'A592': [(3155, 3161)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZooKeeperTest.java,"    public synchronized List<ClientInfo> whoAmI() throws InterruptedException {
        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.whoAmI);
        WhoAmIResponse response = new WhoAmIResponse();
        cnxn.submitRequest(h, null, response, null);
        return response.getClientInfo();
    }
"
org.apache.zookeeper.metrics,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/CounterSet.java,,inc,void inc(String),"[35, 37]","{'A586': [(35, 37)]}",{'A586': 1.0},A586,,"    default void inc(String key) {
        add(key, 1L);
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/MetricsProviderBootstrap.java,MetricsProviderBootstrap,startMetricsProvider,"MetricsProvider startMetricsProvider(String,Properties)","[35, 58]","{'A583': [(35, 37), (39, 43), (47, 51), (53, 53)], 'A584': [(38, 38), (44, 46), (52, 52), (54, 58)]}","{'A583': 0.5833333333333334, 'A584': 0.4166666666666667}",A583,,"    public static MetricsProvider startMetricsProvider(
        String metricsProviderClassName,
        Properties configuration) throws MetricsProviderLifeCycleException {
        try {
            Class<?> clazz = Class.forName(
                metricsProviderClassName,
                true,
                Thread.currentThread().getContextClassLoader());
            MetricsProvider metricsProvider = (MetricsProvider) clazz.getConstructor().newInstance();
            metricsProvider.configure(configuration);
            metricsProvider.start();
            return metricsProvider;
        } catch (ClassNotFoundException
            | IllegalAccessException
            | InvocationTargetException
            | NoSuchMethodException
            | InstantiationException error) {
            LOG.error(""Cannot boot MetricsProvider {}"", metricsProviderClassName, error);
            throw new MetricsProviderLifeCycleException(""Cannot boot MetricsProvider "" + metricsProviderClassName, error);
        } catch (MetricsProviderLifeCycleException error) {
            LOG.error(""Cannot boot MetricsProvider {}"", metricsProviderClassName, error);
            throw error;
        }
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider,configure,void configure(Properties),"[43, 45]","{'A584': [(43, 45)]}",{'A584': 1.0},A584,,"    @Override
    public void configure(Properties configuration) throws MetricsProviderLifeCycleException {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider,start,void start(),"[47, 49]","{'A584': [(47, 49)]}",{'A584': 1.0},A584,,"    @Override
    public void start() throws MetricsProviderLifeCycleException {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider,getRootContext,MetricsContext getRootContext(),"[51, 54]","{'A584': [(51, 54)]}",{'A584': 1.0},A584,,"    @Override
    public MetricsContext getRootContext() {
        return NullMetricsContext.INSTANCE;
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider,dump,"void dump(BiConsumer<String, Object>)","[56, 58]","{'A584': [(56, 58)]}",{'A584': 1.0},A584,,"    @Override
    public void dump(BiConsumer<String, Object> sink) {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider,resetAllValues,void resetAllValues(),"[60, 62]","{'A584': [(60, 62)]}",{'A584': 1.0},A584,,"    @Override
    public void resetAllValues() {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider,stop,void stop(),"[64, 66]","{'A584': [(64, 66)]}",{'A584': 1.0},A584,,"    @Override
    public void stop() {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,getContext,MetricsContext getContext(String),"[72, 75]","{'A584': [(72, 75)]}",{'A584': 1.0},A584,,"        @Override
        public MetricsContext getContext(String name) {
            return INSTANCE;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,getCounter,Counter getCounter(String),"[77, 80]","{'A584': [(77, 80)]}",{'A584': 1.0},A584,,"        @Override
        public Counter getCounter(String name) {
            return NullCounter.INSTANCE;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,getCounterSet,CounterSet getCounterSet(String),"[82, 85]","{'A586': [(82, 85)]}",{'A586': 1.0},A586,,"        @Override
        public CounterSet getCounterSet(final String name) {
            return NullCounterSet.INSTANCE;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,registerGauge,"void registerGauge(String,Gauge)","[87, 89]","{'A583': [(88, 88)], 'A584': [(87, 87), (89, 89)]}","{'A583': 0.3333333333333333, 'A584': 0.6666666666666666}",A584,,"        @Override
        public void registerGauge(String name, Gauge gauge) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,unregisterGauge,void unregisterGauge(String),"[91, 93]","{'A584': [(91, 93)]}",{'A584': 1.0},A584,,"        @Override
        public void unregisterGauge(String name) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,registerGaugeSet,"void registerGaugeSet(String,GaugeSet)","[95, 97]","{'A586': [(95, 97)]}",{'A586': 1.0},A586,,"        @Override
        public void registerGaugeSet(final String name, final GaugeSet gaugeSet) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,unregisterGaugeSet,void unregisterGaugeSet(String),"[99, 101]","{'A586': [(99, 101)]}",{'A586': 1.0},A586,,"        @Override
        public void unregisterGaugeSet(final String name) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,getSummary,"Summary getSummary(String,DetailLevel)","[103, 106]","{'A584': [(103, 106)]}",{'A584': 1.0},A584,,"        @Override
        public Summary getSummary(String name, DetailLevel detailLevel) {
            return NullSummary.INSTANCE;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullMetricsContext,getSummarySet,"SummarySet getSummarySet(String,DetailLevel)","[108, 111]","{'A584': [(108, 111)]}",{'A584': 1.0},A584,,"        @Override
        public SummarySet getSummarySet(String name, DetailLevel detailLevel) {
            return NullSummarySet.INSTANCE;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullCounter,add,void add(long),"[119, 121]","{'A584': [(119, 121)]}",{'A584': 1.0},A584,,"        @Override
        public void add(long delta) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullCounter,get,long get(),"[123, 126]","{'A584': [(123, 126)]}",{'A584': 1.0},A584,,"        @Override
        public long get() {
            return 0;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullCounterSet,add,"void add(String,long)","[134, 136]","{'A586': [(134, 136)]}",{'A586': 1.0},A586,,"        @Override
        public void add(final String key, final long delta) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullSummary,add,void add(long),"[143, 145]","{'A584': [(143, 145)]}",{'A584': 1.0},A584,,"        @Override
        public void add(long value) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/NullMetricsProvider.java,NullMetricsProvider.NullSummarySet,add,"void add(String,long)","[153, 155]","{'A584': [(153, 155)]}",{'A584': 1.0},A584,,"        @Override
        public void add(String key, long value) {
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider,configure,void configure(Properties),"[53, 55]","{'A584': [(53, 55)]}",{'A584': 1.0},A584,,"    @Override
    public void configure(Properties configuration) throws MetricsProviderLifeCycleException {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider,start,void start(),"[57, 59]","{'A584': [(57, 59)]}",{'A584': 1.0},A584,,"    @Override
    public void start() throws MetricsProviderLifeCycleException {
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider,getRootContext,MetricsContext getRootContext(),"[61, 64]","{'A584': [(61, 64)]}",{'A584': 1.0},A584,,"    @Override
    public MetricsContext getRootContext() {
        return rootMetricsContext;
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider,stop,void stop(),"[66, 71]","{'A584': [(66, 69), (71, 71)], 'A586': [(70, 70)]}","{'A584': 0.8333333333333334, 'A586': 0.16666666666666666}",A584,,"    @Override
    public void stop() {
        // release all references to external objects
        rootMetricsContext.gauges.clear();
        rootMetricsContext.gaugeSets.clear();
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider,dump,"void dump(BiConsumer<String, Object>)","[73, 76]","{'A584': [(73, 76)]}",{'A584': 1.0},A584,,"    @Override
    public void dump(BiConsumer<String, Object> sink) {
        rootMetricsContext.dump(sink);
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider,resetAllValues,void resetAllValues(),"[78, 81]","{'A584': [(78, 81)]}",{'A584': 1.0},A584,,"    @Override
    public void resetAllValues() {
        rootMetricsContext.reset();
    }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,getContext,MetricsContext getContext(String),"[94, 98]","{'A584': [(94, 98)]}",{'A584': 1.0},A584,,"        @Override
        public MetricsContext getContext(String name) {
            // no hierarchy yet
            return this;
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,getCounter,Counter getCounter(String),"[100, 105]","{'A584': [(100, 105)]}",{'A584': 1.0},A584,,"        @Override
        public Counter getCounter(String name) {
            return counters.computeIfAbsent(name, (n) -> {
                return new SimpleCounter(n);
            });
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,getCounterSet,CounterSet getCounterSet(String),"[107, 111]","{'A586': [(107, 111)]}",{'A586': 1.0},A586,,"        @Override
        public CounterSet getCounterSet(final String name) {
            Objects.requireNonNull(name, ""Cannot register a CounterSet with null name"");
            return counterSets.computeIfAbsent(name, SimpleCounterSet::new);
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,registerGauge,"void registerGauge(String,Gauge)","[113, 117]","{'A583': [(115, 115)], 'A584': [(113, 114), (116, 117)]}","{'A583': 0.2, 'A584': 0.8}",A584,,"        @Override
        public void registerGauge(String name, Gauge gauge) {
            Objects.requireNonNull(gauge, ""Cannot register a null Gauge for "" + name);
            gauges.put(name, gauge);
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,unregisterGauge,void unregisterGauge(String),"[119, 122]","{'A584': [(119, 122)]}",{'A584': 1.0},A584,,"        @Override
        public void unregisterGauge(String name) {
            gauges.remove(name);
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,registerGaugeSet,"void registerGaugeSet(String,GaugeSet)","[124, 129]","{'A586': [(124, 129)]}",{'A586': 1.0},A586,,"        @Override
        public void registerGaugeSet(final String name, final GaugeSet gaugeSet) {
            Objects.requireNonNull(name, ""Cannot register a GaugeSet with null name"");
            Objects.requireNonNull(gaugeSet, ""Cannot register a null GaugeSet for "" + name);
            gaugeSets.put(name, gaugeSet);
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,unregisterGaugeSet,void unregisterGaugeSet(String),"[131, 135]","{'A586': [(131, 135)]}",{'A586': 1.0},A586,,"        @Override
        public void unregisterGaugeSet(final String name) {
            Objects.requireNonNull(name, ""Cannot unregister GaugeSet with null name"");
            gaugeSets.remove(name);
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,getSummary,"Summary getSummary(String,DetailLevel)","[137, 154]","{'A584': [(137, 154)]}",{'A584': 1.0},A584,,"        @Override
        public Summary getSummary(String name, DetailLevel detailLevel) {
            if (detailLevel == DetailLevel.BASIC) {
                return basicSummaries.computeIfAbsent(name, (n) -> {
                    if (summaries.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a non basic summary as "" + n);
                    }
                    return new AvgMinMaxCounter(name);
                });
            } else {
                return summaries.computeIfAbsent(name, (n) -> {
                    if (basicSummaries.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a basic summary as "" + n);
                    }
                    return new AvgMinMaxPercentileCounter(name);
                });
            }
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,getSummarySet,"SummarySet getSummarySet(String,DetailLevel)","[156, 173]","{'A584': [(156, 173)]}",{'A584': 1.0},A584,,"        @Override
        public SummarySet getSummarySet(String name, DetailLevel detailLevel) {
            if (detailLevel == DetailLevel.BASIC) {
                return basicSummarySets.computeIfAbsent(name, (n) -> {
                    if (summarySets.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a non basic summary set as "" + n);
                    }
                    return new AvgMinMaxCounterSet(name);
                });
            } else {
                return summarySets.computeIfAbsent(name, (n) -> {
                    if (basicSummarySets.containsKey(n)) {
                        throw new IllegalArgumentException(""Already registered a basic summary set as "" + n);
                    }
                    return new AvgMinMaxPercentileCounterSet(name);
                });
            }
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,dump,"void dump(BiConsumer<String, Object>)","[175, 209]","{'A584': [(175, 181), (191, 193), (197, 209)], 'A586': [(182, 190), (194, 196)]}","{'A584': 0.6571428571428571, 'A586': 0.34285714285714286}",A584,,"        void dump(BiConsumer<String, Object> sink) {
            gauges.forEach((name, metric) -> {
                Number value = metric.get();
                if (value != null) {
                    sink.accept(name, value);
                }
            });

            gaugeSets.forEach((name, gaugeSet) ->
                gaugeSet.values().forEach((key, value) -> {
                    if (key != null) {
                        sink.accept(key + ""_"" + name, value != null ? value : 0);
                    }
                })
            );

            counters.values().forEach(metric -> {
                metric.values().forEach(sink);
            });
            counterSets.values().forEach(metric -> {
                metric.values().forEach(sink);
            });
            basicSummaries.values().forEach(metric -> {
                metric.values().forEach(sink);
            });
            summaries.values().forEach(metric -> {
                metric.values().forEach(sink);
            });
            basicSummarySets.values().forEach(metric -> {
                metric.values().forEach(sink);
            });
            summarySets.values().forEach(metric -> {
                metric.values().forEach(sink);
            });
        }
"
org.apache.zookeeper.metrics.impl,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/impl/DefaultMetricsProvider.java,DefaultMetricsProvider.DefaultMetricsContext,reset,void reset(),"[211, 231]","{'A584': [(211, 214), (218, 231)], 'A586': [(215, 217)]}","{'A584': 0.8571428571428571, 'A586': 0.14285714285714285}",A584,,"        void reset() {
            counters.values().forEach(metric -> {
                metric.reset();
            });
            counterSets.values().forEach(metric -> {
                metric.reset();
            });
            basicSummaries.values().forEach(metric -> {
                metric.reset();
            });
            summaries.values().forEach(metric -> {
                metric.reset();
            });
            basicSummarySets.values().forEach(metric -> {
                metric.reset();
            });
            summarySets.values().forEach(metric -> {
                metric.reset();
            });
            // no need to reset gauges
        }
"
org.apache.zookeeper.metrics,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/metrics/Counter.java,,inc,void inc(),"[31, 33]","{'A660': [(31, 31), (33, 33)], 'A584': [(32, 32)]}","{'A660': 0.6666666666666666, 'A584': 0.3333333333333333}",A660,,"    default void inc() {
        add(1);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,getPrintWatches,boolean getPrintWatches(),"[75, 77]","{'A583': [(75, 75)], 'A596': [(76, 77)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public boolean getPrintWatches() {
        return printWatches;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,usage,void usage(),"[96, 103]","{'A583': [(101, 101)], 'A596': [(96, 96), (102, 103)], 'A591': [(99, 100)], 'A661': [(97, 97)], 'A605': [(98, 98)]}","{'A583': 0.125, 'A596': 0.375, 'A591': 0.25, 'A661': 0.125, 'A605': 0.125}",A596,,"    static void usage() {
        System.err.println(""ZooKeeper -server host:port -client-configuration properties-file cmd args"");
        List<String> cmdList = new ArrayList<>(commandMap.keySet());
        Collections.sort(cmdList);
        for (String cmd : cmdList) {
            System.err.println(""\t"" + cmd + "" "" + commandMap.get(cmd));
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyWatcher,process,void process(WatchedEvent),"[107, 119]","{'A596': [(108, 108), (110, 111), (119, 119)], 'A591': [(107, 107)], 'A614': [(112, 118)], 'A590': [(109, 109)]}","{'A596': 0.3076923076923077, 'A591': 0.07692307692307693, 'A614': 0.5384615384615384, 'A590': 0.07692307692307693}",A614,,"        public void process(WatchedEvent event) {
            if (getPrintWatches()) {
                ZooKeeperMain.printMessage(""WATCHER::"");
                ZooKeeperMain.printMessage(event.toString());
            }
            if (connectLatch != null) {
                // connection success
                if (event.getType() == Event.EventType.None
                    && event.getState() == Event.KeeperState.SyncConnected) {
                    connectLatch.countDown();
                }
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,getOption,String getOption(String),"[140, 142]","{'A596': [(140, 142)]}",{'A596': 1.0},A596,,"        public String getOption(String opt) {
            return options.get(opt);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,getCommand,String getCommand(),"[144, 146]","{'A583': [(144, 144)], 'A596': [(145, 146)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"        public String getCommand() {
            return command;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,getCmdArgument,String getCmdArgument(int),"[148, 150]","{'A583': [(148, 148)], 'A596': [(149, 150)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"        public String getCmdArgument(int index) {
            return cmdArgs.get(index);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,getNumArguments,int getNumArguments(),"[152, 154]","{'A583': [(152, 152)], 'A596': [(153, 154)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"        public int getNumArguments() {
            return cmdArgs.size();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,getArgArray,String[] getArgArray(),"[156, 158]","{'A596': [(156, 158)]}",{'A596': 1.0},A596,,"        public String[] getArgArray() {
            return cmdArgs.toArray(new String[0]);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,parseOptions,boolean parseOptions(String[]),"[166, 200]","{'A583': [(184, 185), (192, 192)], 'A596': [(166, 173), (175, 175), (183, 183), (186, 190), (193, 200)], 'A591': [(174, 174), (176, 176)], 'A614': [(181, 182)], 'A661': [(179, 180)], 'A605': [(191, 191)], 'A600': [(177, 178)]}","{'A583': 0.08571428571428572, 'A596': 0.6571428571428571, 'A591': 0.05714285714285714, 'A614': 0.05714285714285714, 'A661': 0.05714285714285714, 'A605': 0.02857142857142857, 'A600': 0.05714285714285714}",A596,,"        public boolean parseOptions(String[] args) {
            List<String> argList = Arrays.asList(args);
            Iterator<String> it = argList.iterator();

            while (it.hasNext()) {
                String opt = it.next();
                try {
                    if (opt.equals(""-server"")) {
                        options.put(""server"", it.next());
                    } else if (opt.equals(""-timeout"")) {
                        options.put(""timeout"", it.next());
                    } else if (opt.equals(""-r"")) {
                        options.put(""readonly"", ""true"");
                    } else if (opt.equals(""-client-configuration"")) {
                        options.put(""client-configuration"", it.next());
                    } else if (opt.equals(""-waitforconnection"")) {
                        options.put(""waitforconnection"", ""true"");
                    }
                } catch (NoSuchElementException e) {
                    System.err.println(""Error: no argument found for option "" + opt);
                    return false;
                }

                if (!opt.startsWith(""-"")) {
                    command = opt;
                    cmdArgs = new ArrayList<>();
                    cmdArgs.add(command);
                    while (it.hasNext()) {
                        cmdArgs.add(it.next());
                    }
                    return true;
                }
            }
            return true;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain.MyCommandOptions,parseCommand,boolean parseCommand(String),"[207, 225]","{'A583': [(207, 207), (219, 219)], 'A596': [(220, 221), (224, 225)], 'A616': [(208, 209), (211, 217), (222, 223)], 'A605': [(210, 210)], 'A639': [(218, 218)]}","{'A583': 0.10526315789473684, 'A596': 0.21052631578947367, 'A616': 0.5789473684210527, 'A605': 0.05263157894736842, 'A639': 0.05263157894736842}",A616,,"        public boolean parseCommand(String cmdstring) {
            Matcher matcher = ARGS_PATTERN.matcher(cmdstring);

            List<String> args = new LinkedList<>();
            while (matcher.find()) {
                String value = matcher.group(1);
                if (QUOTED_PATTERN.matcher(value).matches()) {
                    // Strip off the surrounding quotes
                    value = value.substring(1, value.length() - 1);
                }
                args.add(value);
            }
            if (args.isEmpty()) {
                return false;
            }
            command = args.get(0);
            cmdArgs = args;
            return true;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,addToHistory,"void addToHistory(int,String)","[235, 237]","{'A583': [(235, 235)], 'A596': [(236, 237)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    protected void addToHistory(int i, String cmd) {
        history.put(i, cmd);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,getCommands,List<String> getCommands(),"[239, 243]","{'A596': [(239, 239), (243, 243)], 'A591': [(241, 242)], 'A605': [(240, 240)]}","{'A596': 0.4, 'A591': 0.4, 'A605': 0.2}",A596,,"    public static List<String> getCommands() {
        List<String> cmdList = new ArrayList<>(commandMap.keySet());
        Collections.sort(cmdList);
        return cmdList;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,getPrompt,String getPrompt(),"[245, 247]","{'A583': [(245, 246)], 'A596': [(247, 247)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    protected String getPrompt() {
        return ""[zk: "" + host + ""("" + zk.getState() + "")"" + "" "" + commandCount + ""] "";
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,printMessage,void printMessage(String),"[249, 251]","{'A583': [(250, 250)], 'A596': [(249, 249), (251, 251)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public static void printMessage(String msg) {
        System.out.println(""\n"" + msg);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,connectToZK,void connectToZK(String),"[253, 289]","{'A614': [(276, 288)], 'A597': [(261, 261)], 'A661': [(264, 275)], 'A590': [(253, 256), (258, 258), (289, 289)], 'A600': [(259, 259)], 'A604': [(257, 257)], 'A630': [(260, 260), (262, 263)]}","{'A614': 0.35135135135135137, 'A597': 0.02702702702702703, 'A661': 0.32432432432432434, 'A590': 0.16216216216216217, 'A600': 0.02702702702702703, 'A604': 0.02702702702702703, 'A630': 0.08108108108108109}",A614,,"    protected void connectToZK(String newHost) throws InterruptedException, IOException {
        if (zk != null && zk.getState().isAlive()) {
            zk.close();
        }

        host = newHost;
        boolean readOnly = cl.getOption(""readonly"") != null;
        if (cl.getOption(""secure"") != null) {
            System.setProperty(ZKClientConfig.SECURE_CLIENT, ""true"");
            System.out.println(""Secure connection is enabled"");
        }

        ZKClientConfig clientConfig = null;

        if (cl.getOption(""client-configuration"") != null) {
            try {
                clientConfig = new ZKClientConfig(cl.getOption(""client-configuration""));
            } catch (QuorumPeerConfig.ConfigException e) {
                e.printStackTrace();
                ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
            }
        }

        if (cl.getOption(""waitforconnection"") != null) {
            connectLatch = new CountDownLatch(1);
        }

        int timeout = Integer.parseInt(cl.getOption(""timeout""));
        zk = new ZooKeeperAdmin(host, timeout, new MyWatcher(), readOnly, clientConfig);
        if (connectLatch != null) {
            if (!connectLatch.await(timeout, TimeUnit.MILLISECONDS)) {
                zk.close();
                throw new IOException(KeeperException.create(KeeperException.Code.CONNECTIONLOSS));
            }
        }

    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,main,void main(String[]),"[291, 294]","{'A596': [(292, 292), (294, 294)], 'A593': [(293, 293)], 'A662': [(291, 291)]}","{'A596': 0.5, 'A593': 0.25, 'A662': 0.25}",A596,,"    public static void main(String[] args) throws IOException, InterruptedException {
        ZooKeeperMain main = new ZooKeeperMain(args);
        main.run();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,run,void run(),"[306, 353]","{'A583': [(318, 318), (326, 326), (329, 334), (341, 341)], 'A596': [(307, 312), (315, 317), (319, 319), (323, 325), (328, 328), (335, 340), (342, 344), (346, 347), (351, 351)], 'A591': [(313, 313), (327, 327), (345, 345), (353, 353)], 'A584': [(352, 352)], 'A593': [(348, 350)], 'A662': [(306, 306)], 'A589': [(314, 314), (320, 322)]}","{'A583': 0.1875, 'A596': 0.5416666666666666, 'A591': 0.08333333333333333, 'A584': 0.020833333333333332, 'A593': 0.0625, 'A662': 0.020833333333333332, 'A589': 0.08333333333333333}",A596,,"    void run() throws IOException, InterruptedException {
        if (cl.getCommand() == null) {
            System.out.println(""Welcome to ZooKeeper!"");

            boolean jlinemissing = false;
            // only use jline if it's in the classpath
            try {
                Class<?> consoleC = Class.forName(""jline.console.ConsoleReader"");
                Class<?> completerC = Class.forName(""org.apache.zookeeper.JLineZNodeCompleter"");

                System.out.println(""JLine support is enabled"");

                Object console = consoleC.getConstructor().newInstance();

                Object completer = completerC.getConstructor(ZooKeeper.class).newInstance(zk);
                Method addCompleter = consoleC.getMethod(""addCompleter"", Class.forName(""jline.console.completer.Completer""));
                addCompleter.invoke(console, completer);

                String line;
                Method readLine = consoleC.getMethod(""readLine"", String.class);
                while ((line = (String) readLine.invoke(console, getPrompt())) != null) {
                    executeLine(line);
                }
            } catch (ClassNotFoundException
                | NoSuchMethodException
                | InvocationTargetException
                | IllegalAccessException
                | InstantiationException e
            ) {
                LOG.debug(""Unable to start jline"", e);
                jlinemissing = true;
            }

            if (jlinemissing) {
                System.out.println(""JLine support is disabled"");
                BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

                String line;
                while ((line = br.readLine()) != null) {
                    executeLine(line);
                }
            }
        } else {
            // Command line args non-null.  Run what was passed.
            processCmd(cl);
        }
        ServiceUtils.requestSystemExit(exitCode);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,executeLine,void executeLine(String),"[355, 362]","{'A583': [(356, 361)], 'A596': [(362, 362)], 'A662': [(355, 355)]}","{'A583': 0.75, 'A596': 0.125, 'A662': 0.125}",A583,,"    public void executeLine(String line) throws InterruptedException, IOException {
        if (!line.equals("""")) {
            cl.parseCommand(line);
            addToHistory(commandCount, line);
            processCmd(cl);
            commandCount++;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,processCmd,boolean processCmd(MyCommandOptions),"[364, 374]","{'A596': [(366, 366), (372, 372), (374, 374)], 'A591': [(365, 365), (367, 367), (369, 371), (373, 373)], 'A609': [(368, 368)], 'A662': [(364, 364)]}","{'A596': 0.2727272727272727, 'A591': 0.5454545454545454, 'A609': 0.09090909090909091, 'A662': 0.09090909090909091}",A591,,"    protected boolean processCmd(MyCommandOptions co) throws IOException, InterruptedException {
        boolean watch = false;
        try {
            watch = processZKCmd(co);
            exitCode = ExitCode.EXECUTION_FINISHED.getValue();
        } catch (CliException ex) {
            exitCode = ex.getExitCode();
            System.err.println(ex.getMessage());
        }
        return watch;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperMain.java,ZooKeeperMain,processZKCmd,boolean processZKCmd(MyCommandOptions),"[376, 443]","{'A583': [(388, 388), (390, 390), (409, 411), (427, 427), (433, 433), (436, 436), (440, 440)], 'A596': [(377, 380), (382, 383), (442, 443)], 'A591': [(376, 376), (381, 381), (386, 386), (389, 389), (392, 392), (399, 399), (402, 403), (406, 406), (408, 408), (421, 421), (424, 424), (426, 426), (429, 429), (434, 435), (437, 438)], 'A597': [(439, 439), (441, 441)], 'A584': [(395, 395)], 'A590': [(384, 385), (387, 387), (393, 394), (396, 397), (400, 401), (404, 405), (407, 407), (412, 420), (422, 423), (425, 425), (428, 428), (430, 432)], 'A630': [(398, 398)], 'A620': [(391, 391)]}","{'A583': 0.1323529411764706, 'A596': 0.11764705882352941, 'A591': 0.2647058823529412, 'A597': 0.029411764705882353, 'A584': 0.014705882352941176, 'A590': 0.4117647058823529, 'A630': 0.014705882352941176, 'A620': 0.014705882352941176}",A590,,"    protected boolean processZKCmd(MyCommandOptions co) throws CliException, IOException, InterruptedException {
        String[] args = co.getArgArray();
        String cmd = co.getCommand();
        if (args.length < 1) {
            usage();
            throw new MalformedCommandException(""No command entered"");
        }

        if (!commandMap.containsKey(cmd)) {
            usage();
            throw new CommandNotFoundException(""Command not found "" + cmd);
        }

        boolean watch = false;

        LOG.debug(""Processing {}"", cmd);

        if (cmd.equals(""quit"")) {
            zk.close();
            ServiceUtils.requestSystemExit(exitCode);
        } else if (cmd.equals(""redo"") && args.length >= 2) {
            Integer i = Integer.decode(args[1]);
            if (commandCount <= i || i < 0) { // don't allow redoing this redo
                throw new MalformedCommandException(""Command index out of range"");
            }
            cl.parseCommand(history.get(i));
            if (cl.getCommand().equals(""redo"")) {
                throw new MalformedCommandException(""No redoing redos"");
            }
            history.put(commandCount, history.get(i));
            processCmd(cl);
        } else if (cmd.equals(""history"")) {
            for (int i = commandCount - 10; i <= commandCount; ++i) {
                if (i < 0) {
                    continue;
                }
                System.out.println(i + "" - "" + history.get(i));
            }
        } else if (cmd.equals(""printwatches"")) {
            if (args.length == 1) {
                System.out.println(""printwatches is "" + (printWatches ? ""on"" : ""off""));
            } else {
                printWatches = args[1].equals(""on"");
            }
        } else if (cmd.equals(""connect"")) {
            if (args.length >= 2) {
                connectToZK(args[1]);
            } else {
                connectToZK(host);
            }
        }

        // Below commands all need a live connection
        if (zk == null || !zk.getState().isAlive()) {
            System.out.println(""Not connected"");
            return false;
        }

        // execute from commandMap
        CliCommand cliCmd = commandMapCli.get(cmd);
        if (cliCmd != null) {
            cliCmd.setZk(zk);
            watch = cliCmd.parse(args).exec();
        } else if (!commandMap.containsKey(cmd)) {
            usage();
        }
        return watch;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getWatcherManager,ZKWatchManager getWatcherManager(),"[224, 226]","{'A583': [(224, 226)]}",{'A583': 1.0},A583,,"    ZKWatchManager getWatcherManager() {
        return watchManager;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getSessionId,long getSessionId(),"[228, 230]","{'A590': [(228, 230)]}",{'A590': 1.0},A590,,"    public long getSessionId() {
        return sessionId;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getSessionPasswd,byte[] getSessionPasswd(),"[232, 234]","{'A590': [(232, 234)]}",{'A590': 1.0},A590,,"    public byte[] getSessionPasswd() {
        return sessionPasswd;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getSessionTimeout,int getSessionTimeout(),"[236, 238]","{'A596': [(236, 238)]}",{'A596': 1.0},A596,,"    public int getSessionTimeout() {
        return negotiatedSessionTimeout;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,toString,String toString(),"[240, 258]","{'A583': [(246, 255)], 'A591': [(244, 245)], 'A590': [(240, 241), (243, 243), (256, 258)], 'A600': [(242, 242)]}","{'A583': 0.5263157894736842, 'A591': 0.10526315789473684, 'A590': 0.3157894736842105, 'A600': 0.05263157894736842}",A583,,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();

        SocketAddress local = sendThread.getClientCnxnSocket().getLocalSocketAddress();
        SocketAddress remote = sendThread.getClientCnxnSocket().getRemoteSocketAddress();
        sb.append(""sessionid:0x"").append(Long.toHexString(getSessionId()))
          .append("" local:"").append(local)
          .append("" remoteserver:"").append(remote)
          .append("" lastZxid:"").append(lastZxid)
          .append("" xid:"").append(xid)
          .append("" sent:"").append(sendThread.getClientCnxnSocket().getSentCount())
          .append("" recv:"").append(sendThread.getClientCnxnSocket().getRecvCount())
          .append("" queuedpkts:"").append(outgoingQueue.size())
          .append("" pendingresp:"").append(pendingQueue.size())
          .append("" queuedevents:"").append(eventThread.waitingEvents.size());

        return sb.toString();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.Packet,createBB,void createBB(),"[305, 325]","{'A583': [(323, 323)], 'A591': [(306, 316), (318, 322)], 'A590': [(317, 317), (324, 325)], 'A596': [(305, 305)]}","{'A583': 0.047619047619047616, 'A591': 0.7619047619047619, 'A590': 0.14285714285714285, 'A596': 0.047619047619047616}",A591,,"        public void createBB() {
            try {
                ByteArrayOutputStream baos = new ByteArrayOutputStream();
                BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);
                boa.writeInt(-1, ""len""); // We'll fill this in later
                if (requestHeader != null) {
                    requestHeader.serialize(boa, ""header"");
                }
                if (request instanceof ConnectRequest) {
                    request.serialize(boa, ""connect"");
                } else if (request != null) {
                    request.serialize(boa, ""request"");
                }
                baos.close();
                this.bb = ByteBuffer.wrap(baos.toByteArray());
                this.bb.putInt(this.bb.capacity() - 4);
                this.bb.rewind();
            } catch (IOException e) {
                LOG.warn(""Unexpected exception"", e);
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.Packet,toString,String toString(),"[327, 342]","{'A591': [(335, 335)], 'A596': [(331, 332)], 'A597': [(327, 328), (330, 330), (333, 334), (336, 342)], 'A600': [(329, 329)]}","{'A591': 0.0625, 'A596': 0.125, 'A597': 0.75, 'A600': 0.0625}",A597,,"        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();

            sb.append(""clientPath:"" + clientPath);
            sb.append("" serverPath:"" + serverPath);
            sb.append("" finished:"" + finished);

            sb.append("" header:: "" + requestHeader);
            sb.append("" replyHeader:: "" + replyHeader);
            sb.append("" request:: "" + request);
            sb.append("" response:: "" + response);

            // jute toString is horrible, remove unnecessary newlines
            return sb.toString().replaceAll(""\r*\n+"", "" "");
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,start,void start(),"[422, 425]","{'A590': [(422, 425)]}",{'A590': 1.0},A590,,"    public void start() {
        sendThread.start();
        eventThread.start();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,makeThreadName,String makeThreadName(String),"[446, 449]","{'A583': [(447, 447)], 'A596': [(446, 446), (448, 449)]}","{'A583': 0.25, 'A596': 0.75}",A596,,"    private static String makeThreadName(String suffix) {
        String name = Thread.currentThread().getName().replaceAll(""-EventThread"", """");
        return name + suffix;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,isInEventThread,boolean isInEventThread(),"[457, 459]","{'A584': [(457, 459)]}",{'A584': 1.0},A584,,"    public static boolean isInEventThread() {
        return Thread.currentThread() instanceof EventThread;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,queueEvent,void queueEvent(WatchedEvent),"[479, 481]","{'A591': [(479, 481)]}",{'A591': 1.0},A591,,"        public void queueEvent(WatchedEvent event) {
            queueEvent(event, null);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,queueEvent,"void queueEvent(WatchedEvent,Set<Watcher>)","[483, 498]","{'A583': [(483, 484), (491, 491), (493, 493)], 'A591': [(488, 490), (492, 492), (494, 495)], 'A590': [(485, 487), (496, 498)]}","{'A583': 0.25, 'A591': 0.375, 'A590': 0.375}",A591,,"        private void queueEvent(WatchedEvent event, Set<Watcher> materializedWatchers) {
            if (event.getType() == EventType.None && sessionState == event.getState()) {
                return;
            }
            sessionState = event.getState();
            final Set<Watcher> watchers;
            if (materializedWatchers == null) {
                // materialize the watchers based on the event
                watchers = watchManager.materialize(event.getState(), event.getType(), event.getPath());
            } else {
                watchers = new HashSet<>(materializedWatchers);
            }
            WatcherSetEventPair pair = new WatcherSetEventPair(watchers, event);
            // queue the pair (watch set & event) for later processing
            waitingEvents.add(pair);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,queueCallback,"void queueCallback(AsyncCallback,int,String,Object)","[500, 502]","{'A583': [(500, 500)], 'A591': [(501, 502)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"        public void queueCallback(AsyncCallback cb, int rc, String path, Object ctx) {
            waitingEvents.add(new LocalCallback(cb, rc, path, ctx));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,queuePacket,void queuePacket(Packet),"[504, 517]","{'A583': [(504, 517)]}",{'A583': 1.0},A583,,"        @SuppressFBWarnings(""JLM_JSR166_UTILCONCURRENT_MONITORENTER"")
        public void queuePacket(Packet packet) {
            if (wasKilled) {
                synchronized (waitingEvents) {
                    if (isRunning) {
                        waitingEvents.add(packet);
                    } else {
                        processEvent(packet);
                    }
                }
            } else {
                waitingEvents.add(packet);
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,queueEventOfDeath,void queueEventOfDeath(),"[519, 521]","{'A590': [(519, 521)]}",{'A590': 1.0},A590,,"        public void queueEventOfDeath() {
            waitingEvents.add(eventOfDeath);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,run,void run(),"[523, 549]","{'A583': [(526, 533), (535, 546), (548, 548)], 'A590': [(523, 523), (525, 525), (534, 534), (549, 549)], 'A584': [(524, 524)], 'A596': [(547, 547)]}","{'A583': 0.7777777777777778, 'A590': 0.14814814814814814, 'A584': 0.037037037037037035, 'A596': 0.037037037037037035}",A583,,"        @Override
        @SuppressFBWarnings(""JLM_JSR166_UTILCONCURRENT_MONITORENTER"")
        public void run() {
            try {
                isRunning = true;
                while (true) {
                    Object event = waitingEvents.take();
                    if (event == eventOfDeath) {
                        wasKilled = true;
                    } else {
                        processEvent(event);
                    }
                    if (wasKilled) {
                        synchronized (waitingEvents) {
                            if (waitingEvents.isEmpty()) {
                                isRunning = false;
                                break;
                            }
                        }
                    }
                }
            } catch (InterruptedException e) {
                LOG.error(""Event thread exiting due to interruption"", e);
            }

            LOG.info(""EventThread shut down for session: 0x{}"", Long.toHexString(getSessionId()));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EventThread,processEvent,void processEvent(Object),"[551, 708]","{'A583': [(551, 562), (566, 566), (568, 568), (570, 570), (572, 572), (574, 574), (576, 576), (578, 578), (580, 580), (584, 584), (587, 591), (593, 598), (600, 612), (614, 620), (622, 628), (630, 636), (638, 644), (646, 652), (654, 657), (659, 664), (666, 669), (671, 677), (679, 694), (696, 708)], 'A591': [(563, 565), (567, 567), (569, 569), (571, 571), (573, 573), (575, 575), (583, 583), (585, 586)], 'A584': [(581, 582)], 'A644': [(577, 577), (592, 592)], 'A641': [(579, 579)], 'A625': [(658, 658), (670, 670)], 'A655': [(599, 599), (613, 613), (621, 621), (629, 629), (637, 637), (645, 645), (653, 653), (665, 665), (678, 678), (695, 695)]}","{'A583': 0.8227848101265823, 'A591': 0.06962025316455696, 'A584': 0.012658227848101266, 'A644': 0.012658227848101266, 'A641': 0.006329113924050633, 'A625': 0.012658227848101266, 'A655': 0.06329113924050633}",A583,,"        private void processEvent(Object event) {
            try {
                if (event instanceof WatcherSetEventPair) {
                    // each watcher will process the event
                    WatcherSetEventPair pair = (WatcherSetEventPair) event;
                    for (Watcher watcher : pair.watchers) {
                        try {
                            watcher.process(pair.event);
                        } catch (Throwable t) {
                            LOG.error(""Error while calling watcher."", t);
                        }
                    }
                } else if (event instanceof LocalCallback) {
                    LocalCallback lcb = (LocalCallback) event;
                    if (lcb.cb instanceof StatCallback) {
                        ((StatCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, null);
                    } else if (lcb.cb instanceof DataCallback) {
                        ((DataCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, null, null);
                    } else if (lcb.cb instanceof ACLCallback) {
                        ((ACLCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, null, null);
                    } else if (lcb.cb instanceof ChildrenCallback) {
                        ((ChildrenCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, null);
                    } else if (lcb.cb instanceof Children2Callback) {
                        ((Children2Callback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, null, null);
                    } else if (lcb.cb instanceof StringCallback) {
                        ((StringCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, null);
                    } else if (lcb.cb instanceof AsyncCallback.EphemeralsCallback) {
                        ((AsyncCallback.EphemeralsCallback) lcb.cb).processResult(lcb.rc, lcb.ctx, null);
                    } else if (lcb.cb instanceof AsyncCallback.AllChildrenNumberCallback) {
                        ((AsyncCallback.AllChildrenNumberCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, -1);
                    } else if (lcb.cb instanceof AsyncCallback.MultiCallback) {
                        ((AsyncCallback.MultiCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx, Collections.emptyList());
                    } else {
                        ((VoidCallback) lcb.cb).processResult(lcb.rc, lcb.path, lcb.ctx);
                    }
                } else {
                    Packet p = (Packet) event;
                    int rc = 0;
                    String clientPath = p.clientPath;
                    if (p.replyHeader.getErr() != 0) {
                        rc = p.replyHeader.getErr();
                    }
                    if (p.cb == null) {
                        LOG.warn(""Somehow a null cb got to EventThread!"");
                    } else if (p.response instanceof ExistsResponse
                               || p.response instanceof SetDataResponse
                               || p.response instanceof SetACLResponse) {
                        StatCallback cb = (StatCallback) p.cb;
                        if (rc == Code.OK.intValue()) {
                            if (p.response instanceof ExistsResponse) {
                                cb.processResult(rc, clientPath, p.ctx, ((ExistsResponse) p.response).getStat());
                            } else if (p.response instanceof SetDataResponse) {
                                cb.processResult(rc, clientPath, p.ctx, ((SetDataResponse) p.response).getStat());
                            } else if (p.response instanceof SetACLResponse) {
                                cb.processResult(rc, clientPath, p.ctx, ((SetACLResponse) p.response).getStat());
                            }
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null);
                        }
                    } else if (p.response instanceof GetDataResponse) {
                        DataCallback cb = (DataCallback) p.cb;
                        GetDataResponse rsp = (GetDataResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(rc, clientPath, p.ctx, rsp.getData(), rsp.getStat());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null, null);
                        }
                    } else if (p.response instanceof GetACLResponse) {
                        ACLCallback cb = (ACLCallback) p.cb;
                        GetACLResponse rsp = (GetACLResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(rc, clientPath, p.ctx, rsp.getAcl(), rsp.getStat());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null, null);
                        }
                    } else if (p.response instanceof GetChildrenResponse) {
                        ChildrenCallback cb = (ChildrenCallback) p.cb;
                        GetChildrenResponse rsp = (GetChildrenResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(rc, clientPath, p.ctx, rsp.getChildren());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null);
                        }
                    } else if (p.response instanceof GetAllChildrenNumberResponse) {
                        AllChildrenNumberCallback cb = (AllChildrenNumberCallback) p.cb;
                        GetAllChildrenNumberResponse rsp = (GetAllChildrenNumberResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(rc, clientPath, p.ctx, rsp.getTotalNumber());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, -1);
                        }
                    } else if (p.response instanceof GetChildren2Response) {
                        Children2Callback cb = (Children2Callback) p.cb;
                        GetChildren2Response rsp = (GetChildren2Response) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(rc, clientPath, p.ctx, rsp.getChildren(), rsp.getStat());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null, null);
                        }
                    } else if (p.response instanceof CreateResponse) {
                        StringCallback cb = (StringCallback) p.cb;
                        CreateResponse rsp = (CreateResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(
                                rc,
                                clientPath,
                                p.ctx,
                                rsp.getPath());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null);
                        }
                    } else if (p.response instanceof Create2Response) {
                        Create2Callback cb = (Create2Callback) p.cb;
                        Create2Response rsp = (Create2Response) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(
                                    rc,
                                    clientPath,
                                    p.ctx,
                                    rsp.getPath(),
                                    rsp.getStat());
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null, null);
                        }
                    } else if (p.response instanceof MultiResponse) {
                        MultiCallback cb = (MultiCallback) p.cb;
                        MultiResponse rsp = (MultiResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            List<OpResult> results = rsp.getResultList();
                            int newRc = rc;
                            for (OpResult result : results) {
                                if (result instanceof ErrorResult
                                    && KeeperException.Code.OK.intValue()
                                       != (newRc = ((ErrorResult) result).getErr())) {
                                    break;
                                }
                            }
                            cb.processResult(newRc, clientPath, p.ctx, results);
                        } else {
                            cb.processResult(rc, clientPath, p.ctx, null);
                        }
                    } else if (p.response instanceof GetEphemeralsResponse) {
                        EphemeralsCallback cb = (EphemeralsCallback) p.cb;
                        GetEphemeralsResponse rsp = (GetEphemeralsResponse) p.response;
                        if (rc == Code.OK.intValue()) {
                            cb.processResult(rc, p.ctx, rsp.getEphemerals());
                        } else {
                            cb.processResult(rc, p.ctx, null);
                        }
                    } else if (p.cb instanceof VoidCallback) {
                        VoidCallback cb = (VoidCallback) p.cb;
                        cb.processResult(rc, clientPath, p.ctx);
                    }
                }
            } catch (Throwable t) {
                LOG.error(""Unexpected throwable"", t);
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,finishPacket,void finishPacket(Packet),"[713, 749]","{'A583': [(724, 724)], 'A591': [(714, 714), (716, 723), (725, 726), (728, 737), (739, 739)], 'A590': [(715, 715), (738, 738), (740, 749)], 'A625': [(727, 727)], 'A592': [(713, 713)]}","{'A583': 0.02702702702702703, 'A591': 0.5945945945945946, 'A590': 0.32432432432432434, 'A625': 0.02702702702702703, 'A592': 0.02702702702702703}",A591,,"    protected void finishPacket(Packet p) {
        int err = p.replyHeader.getErr();
        if (p.watchRegistration != null) {
            p.watchRegistration.register(err);
        }
        // Add all the removed watch events to the event queue, so that the
        // clients will be notified with 'Data/Child WatchRemoved' event type.
        if (p.watchDeregistration != null) {
            Map<EventType, Set<Watcher>> materializedWatchers = null;
            try {
                materializedWatchers = p.watchDeregistration.unregister(err);
                for (Entry<EventType, Set<Watcher>> entry : materializedWatchers.entrySet()) {
                    Set<Watcher> watchers = entry.getValue();
                    if (watchers.size() > 0) {
                        queueEvent(p.watchDeregistration.getServerPath(), err, watchers, entry.getKey());
                        // ignore connectionloss when removing from local
                        // session
                        p.replyHeader.setErr(Code.OK.intValue());
                    }
                }
            } catch (KeeperException.NoWatcherException nwe) {
                p.replyHeader.setErr(nwe.code().intValue());
            } catch (KeeperException ke) {
                p.replyHeader.setErr(ke.code().intValue());
            }
        }

        if (p.cb == null) {
            synchronized (p) {
                p.finished = true;
                p.notifyAll();
            }
        } else {
            p.finished = true;
            eventThread.queuePacket(p);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,queueEvent,"void queueEvent(String,int,Set<Watcher>,EventType)","[751, 759]","{'A583': [(754, 754)], 'A591': [(752, 753), (755, 756), (758, 759)], 'A625': [(751, 751), (757, 757)]}","{'A583': 0.1111111111111111, 'A591': 0.6666666666666666, 'A625': 0.2222222222222222}",A591,,"    void queueEvent(String serverPath, int err, Set<Watcher> materializedWatchers, EventType eventType) {
        KeeperState sessionState = KeeperState.SyncConnected;
        if (KeeperException.Code.SESSIONEXPIRED.intValue() == err
            || KeeperException.Code.CONNECTIONLOSS.intValue() == err) {
            sessionState = Event.KeeperState.Disconnected;
        }
        WatchedEvent event = new WatchedEvent(eventType, sessionState, serverPath);
        eventThread.queueEvent(event, materializedWatchers);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,queueCallback,"void queueCallback(AsyncCallback,int,String,Object)","[761, 763]","{'A591': [(761, 763)]}",{'A591': 1.0},A591,,"    void queueCallback(AsyncCallback cb, int rc, String path, Object ctx) {
        eventThread.queueCallback(cb, rc, path, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,onConnecting,void onConnecting(InetSocketAddress),"[766, 768]","{'A663': [(766, 768)]}",{'A663': 1.0},A663,,"    protected void onConnecting(InetSocketAddress addr) {

    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,conLossPacket,void conLossPacket(Packet),"[770, 785]","{'A591': [(774, 774)], 'A590': [(770, 773), (775, 775), (777, 778), (780, 781), (783, 785)], 'A596': [(776, 776), (779, 779), (782, 782)]}","{'A591': 0.0625, 'A590': 0.75, 'A596': 0.1875}",A590,,"    private void conLossPacket(Packet p) {
        if (p.replyHeader == null) {
            return;
        }
        switch (state) {
        case AUTH_FAILED:
            p.replyHeader.setErr(KeeperException.Code.AUTHFAILED.intValue());
            break;
        case CLOSED:
            p.replyHeader.setErr(KeeperException.Code.SESSIONEXPIRED.intValue());
            break;
        default:
            p.replyHeader.setErr(KeeperException.Code.CONNECTIONLOSS.intValue());
        }
        finishPacket(p);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getLastZxid,long getLastZxid(),"[789, 791]","{'A591': [(789, 791)]}",{'A591': 1.0},A591,,"    public long getLastZxid() {
        return lastZxid;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.EndOfStreamException,toString,String toString(),"[801, 804]","{'A591': [(801, 801)], 'A590': [(802, 804)]}","{'A591': 0.25, 'A590': 0.75}",A590,,"        @Override
        public String toString() {
            return ""EndOfStreamException: "" + getMessage();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,readResponse,void readResponse(ByteBuffer),"[856, 935]","{'A583': [(857, 857), (865, 866), (870, 870), (884, 885), (896, 897), (904, 904), (914, 918), (931, 931)], 'A591': [(856, 856), (875, 875), (901, 901), (903, 903), (905, 905), (913, 913)], 'A590': [(858, 858), (860, 860), (867, 867), (880, 881), (886, 886), (889, 889), (902, 902), (907, 911), (935, 935)], 'A596': [(882, 882), (890, 893), (895, 895), (898, 900), (912, 912), (919, 919), (921, 929), (932, 934)], 'A597': [(859, 859), (861, 861), (894, 894), (906, 906), (920, 920), (930, 930)], 'A602': [(862, 864), (868, 869), (872, 873), (876, 879), (887, 888)], 'A663': [(871, 871)], 'A665': [(874, 874)], 'A634': [(883, 883)]}","{'A583': 0.1875, 'A591': 0.075, 'A590': 0.175, 'A596': 0.2875, 'A597': 0.075, 'A602': 0.1625, 'A663': 0.0125, 'A665': 0.0125, 'A634': 0.0125}",A596,,"        void readResponse(ByteBuffer incomingBuffer) throws IOException {
            ByteBufferInputStream bbis = new ByteBufferInputStream(incomingBuffer);
            BinaryInputArchive bbia = BinaryInputArchive.getArchive(bbis);
            ReplyHeader replyHdr = new ReplyHeader();

            replyHdr.deserialize(bbia, ""header"");
            switch (replyHdr.getXid()) {
            case PING_XID:
                LOG.debug(""Got ping response for session id: 0x{} after {}ms."",
                    Long.toHexString(sessionId),
                    ((System.nanoTime() - lastPingSentNs) / 1000000));
                return;
              case AUTHPACKET_XID:
                LOG.debug(""Got auth session id: 0x{}"", Long.toHexString(sessionId));
                if (replyHdr.getErr() == KeeperException.Code.AUTHFAILED.intValue()) {
                    changeZkState(States.AUTH_FAILED);
                    eventThread.queueEvent(new WatchedEvent(Watcher.Event.EventType.None,
                        Watcher.Event.KeeperState.AuthFailed, null));
                    eventThread.queueEventOfDeath();
                }
              return;
            case NOTIFICATION_XID:
                LOG.debug(""Got notification session id: 0x{}"",
                    Long.toHexString(sessionId));
                WatcherEvent event = new WatcherEvent();
                event.deserialize(bbia, ""response"");

                WatchedEvent we = new WatchedEvent(event, replyHdr.getZxid());
                LOG.debug(""Got {} for session id 0x{}"", we, Long.toHexString(sessionId));
                eventThread.queueEvent(we);
                return;
            default:
                break;
            }

            // If SASL authentication is currently in progress, construct and
            // send a response packet immediately, rather than queuing a
            // response as with other packets.
            if (tunnelAuthInProgress()) {
                GetSASLRequest request = new GetSASLRequest();
                request.deserialize(bbia, ""token"");
                zooKeeperSaslClient.respondToServer(request.getToken(), ClientCnxn.this);
                return;
            }

            Packet packet;
            synchronized (pendingQueue) {
                if (pendingQueue.size() == 0) {
                    throw new IOException(""Nothing in the queue, but got "" + replyHdr.getXid());
                }
                packet = pendingQueue.remove();
            }
            /*
             * Since requests are processed in order, we better get a response
             * to the first request!
             */
            try {
                if (packet.requestHeader.getXid() != replyHdr.getXid()) {
                    packet.replyHeader.setErr(KeeperException.Code.CONNECTIONLOSS.intValue());
                    throw new IOException(""Xid out of order. Got Xid "" + replyHdr.getXid()
                                          + "" with err "" + replyHdr.getErr()
                                          + "" expected Xid "" + packet.requestHeader.getXid()
                                          + "" for a packet with details: "" + packet);
                }

                packet.replyHeader.setXid(replyHdr.getXid());
                packet.replyHeader.setErr(replyHdr.getErr());
                packet.replyHeader.setZxid(replyHdr.getZxid());
                if (replyHdr.getZxid() > 0) {
                    lastZxid = replyHdr.getZxid();
                }
                if (packet.response != null && replyHdr.getErr() == 0) {
                    packet.response.deserialize(bbia, ""response"");
                }

                LOG.debug(""Reading reply session id: 0x{}, packet:: {}"", Long.toHexString(sessionId), packet);
            } finally {
                finishPacket(packet);
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,getZkState,ZooKeeper.States getZkState(),"[953, 955]","{'A591': [(954, 954)], 'A590': [(955, 955)], 'A663': [(953, 953)]}","{'A591': 0.3333333333333333, 'A590': 0.3333333333333333, 'A663': 0.3333333333333333}",A591,,"        synchronized ZooKeeper.States getZkState() {
            return state;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,changeZkState,void changeZkState(ZooKeeper.States),"[957, 964]","{'A663': [(957, 964)]}",{'A663': 1.0},A663,,"        synchronized void changeZkState(ZooKeeper.States newState) throws IOException {
            if (!state.isAlive() && newState == States.CONNECTING) {
                throw new IOException(
                        ""Connection has already been closed and reconnection is not allowed"");
            }
            // It's safer to place state modification at the end.
            state = newState;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,getClientCnxnSocket,ClientCnxnSocket getClientCnxnSocket(),"[966, 968]","{'A591': [(966, 967)], 'A590': [(968, 968)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,,"        ClientCnxnSocket getClientCnxnSocket() {
            return clientCnxnSocket;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,primeConnection,void primeConnection(),"[973, 1063]","{'A583': [(974, 977), (980, 980), (984, 988), (1052, 1053), (1055, 1058), (1060, 1060), (1062, 1062)], 'A591': [(973, 973)], 'A590': [(978, 978), (1059, 1059), (1063, 1063)], 'A596': [(1048, 1048), (1050, 1050)], 'A616': [(996, 997), (1005, 1019), (1026, 1031), (1046, 1047)], 'A597': [(981, 983), (1049, 1049), (1051, 1051), (1061, 1061)], 'A641': [(1044, 1044), (1054, 1054)], 'A636': [(989, 990), (998, 999), (1020, 1025), (1032, 1043), (1045, 1045)], 'A605': [(1000, 1004)], 'A625': [(991, 995)], 'A600': [(979, 979)]}","{'A583': 0.1978021978021978, 'A591': 0.01098901098901099, 'A590': 0.03296703296703297, 'A596': 0.02197802197802198, 'A616': 0.27472527472527475, 'A597': 0.06593406593406594, 'A641': 0.02197802197802198, 'A636': 0.25274725274725274, 'A605': 0.054945054945054944, 'A625': 0.054945054945054944, 'A600': 0.01098901098901099}",A616,,"        void primeConnection() throws IOException {
            LOG.info(
                ""Socket connection established, initiating session, client: {}, server: {}"",
                clientCnxnSocket.getLocalSocketAddress(),
                clientCnxnSocket.getRemoteSocketAddress());
            isFirstConnect = false;
            long sessId = (seenRwServerBefore) ? sessionId : 0;
            ConnectRequest conReq = new ConnectRequest(0, lastZxid, sessionTimeout, sessId, sessionPasswd, readOnly);
            // We add backwards since we are pushing into the front
            // Only send if there's a pending watch
            if (!clientConfig.getBoolean(ZKClientConfig.DISABLE_AUTO_WATCH_RESET)) {
                List<String> dataWatches = watchManager.getDataWatchList();
                List<String> existWatches = watchManager.getExistWatchList();
                List<String> childWatches = watchManager.getChildWatchList();
                List<String> persistentWatches = watchManager.getPersistentWatchList();
                List<String> persistentRecursiveWatches = watchManager.getPersistentRecursiveWatchList();
                if (!dataWatches.isEmpty() || !existWatches.isEmpty() || !childWatches.isEmpty()
                        || !persistentWatches.isEmpty() || !persistentRecursiveWatches.isEmpty()) {
                    Iterator<String> dataWatchesIter = dataWatches.iterator();
                    Iterator<String> existWatchesIter = existWatches.iterator();
                    Iterator<String> childWatchesIter = childWatches.iterator();
                    Iterator<String> persistentWatchesIter = persistentWatches.iterator();
                    Iterator<String> persistentRecursiveWatchesIter = persistentRecursiveWatches.iterator();
                    long setWatchesLastZxid = lastZxid;

                    while (dataWatchesIter.hasNext() || existWatchesIter.hasNext() || childWatchesIter.hasNext()
                            || persistentWatchesIter.hasNext() || persistentRecursiveWatchesIter.hasNext()) {
                        List<String> dataWatchesBatch = new ArrayList<>();
                        List<String> existWatchesBatch = new ArrayList<>();
                        List<String> childWatchesBatch = new ArrayList<>();
                        List<String> persistentWatchesBatch = new ArrayList<>();
                        List<String> persistentRecursiveWatchesBatch = new ArrayList<>();
                        int batchLength = 0;

                        // Note, we may exceed our max length by a bit when we add the last
                        // watch in the batch. This isn't ideal, but it makes the code simpler.
                        while (batchLength < SET_WATCHES_MAX_LENGTH) {
                            final String watch;
                            if (dataWatchesIter.hasNext()) {
                                watch = dataWatchesIter.next();
                                dataWatchesBatch.add(watch);
                            } else if (existWatchesIter.hasNext()) {
                                watch = existWatchesIter.next();
                                existWatchesBatch.add(watch);
                            } else if (childWatchesIter.hasNext()) {
                                watch = childWatchesIter.next();
                                childWatchesBatch.add(watch);
                            }  else if (persistentWatchesIter.hasNext()) {
                                watch = persistentWatchesIter.next();
                                persistentWatchesBatch.add(watch);
                            } else if (persistentRecursiveWatchesIter.hasNext()) {
                                watch = persistentRecursiveWatchesIter.next();
                                persistentRecursiveWatchesBatch.add(watch);
                            } else {
                                break;
                            }
                            batchLength += watch.length();
                        }

                        Record record;
                        int opcode;
                        if (persistentWatchesBatch.isEmpty() && persistentRecursiveWatchesBatch.isEmpty()) {
                            // maintain compatibility with older servers - if no persistent/recursive watchers
                            // are used, use the old version of SetWatches
                            record = new SetWatches(setWatchesLastZxid, dataWatchesBatch, existWatchesBatch, childWatchesBatch);
                            opcode = OpCode.setWatches;
                        } else {
                            record = new SetWatches2(setWatchesLastZxid, dataWatchesBatch, existWatchesBatch,
                                    childWatchesBatch, persistentWatchesBatch, persistentRecursiveWatchesBatch);
                            opcode = OpCode.setWatches2;
                        }
                        RequestHeader header = new RequestHeader(ClientCnxn.SET_WATCHES_XID, opcode);
                        Packet packet = new Packet(header, new ReplyHeader(), record, null, null);
                        outgoingQueue.addFirst(packet);
                    }
                }
            }

            for (AuthData id : authInfo) {
                outgoingQueue.addFirst(
                    new Packet(
                        new RequestHeader(ClientCnxn.AUTHPACKET_XID, OpCode.auth),
                        null,
                        new AuthPacket(0, id.scheme, id.data),
                        null,
                        null));
            }
            outgoingQueue.addFirst(new Packet(null, null, conReq, null, null));
            clientCnxnSocket.connectionPrimed();
            LOG.debug(""Session establishment request sent on {}"", clientCnxnSocket.getRemoteSocketAddress());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,sendPing,void sendPing(),"[1065, 1069]","{'A590': [(1065, 1066), (1069, 1069)], 'A596': [(1068, 1068)], 'A641': [(1067, 1067)]}","{'A590': 0.6, 'A596': 0.2, 'A641': 0.2}",A590,,"        private void sendPing() {
            lastPingSentNs = System.nanoTime();
            RequestHeader h = new RequestHeader(ClientCnxn.PING_XID, OpCode.ping);
            queuePacket(h, null, null, null, null, null, null, null, null);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,startConnect,void startConnect(InetSocketAddress),"[1083, 1118]","{'A583': [(1086, 1086), (1107, 1111)], 'A591': [(1115, 1117)], 'A590': [(1118, 1118)], 'A596': [(1114, 1114)], 'A616': [(1095, 1097)], 'A597': [(1098, 1099), (1102, 1106), (1112, 1113)], 'A602': [(1088, 1088)], 'A628': [(1100, 1101)], 'A639': [(1087, 1087), (1089, 1092)], 'A600': [(1094, 1094)], 'A592': [(1084, 1085)], 'A663': [(1093, 1093)], 'A613': [(1083, 1083)]}","{'A583': 0.16666666666666666, 'A591': 0.08333333333333333, 'A590': 0.027777777777777776, 'A596': 0.027777777777777776, 'A616': 0.08333333333333333, 'A597': 0.25, 'A602': 0.027777777777777776, 'A628': 0.05555555555555555, 'A639': 0.1388888888888889, 'A600': 0.027777777777777776, 'A592': 0.05555555555555555, 'A663': 0.027777777777777776, 'A613': 0.027777777777777776}",A597,,"        private void startConnect(InetSocketAddress addr) throws IOException {
            // initializing it for new connection
            saslLoginFailed = false;
            if (!isFirstConnect) {
                try {
                    Thread.sleep(ThreadLocalRandom.current().nextLong(1000));
                } catch (InterruptedException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
            changeZkState(States.CONNECTING);

            String hostPort = addr.getHostString() + "":"" + addr.getPort();
            MDC.put(""myid"", hostPort);
            setName(getName().replaceAll(""\\(.*\\)"", ""("" + hostPort + "")""));
            if (clientConfig.isSaslClientEnabled()) {
                try {
                    zooKeeperSaslClient = new ZooKeeperSaslClient(
                        SaslServerPrincipal.getServerPrincipal(addr, clientConfig), clientConfig, loginRef);
                } catch (LoginException e) {
                    // An authentication error occurred when the SASL client tried to initialize:
                    // for Kerberos this means that the client failed to authenticate with the KDC.
                    // This is different from an authentication error that occurs during communication
                    // with the Zookeeper server, which is handled below.
                    LOG.warn(
                        ""SASL configuration failed. ""
                            + ""Will continue connection to Zookeeper server without ""
                            + ""SASL authentication, if Zookeeper server allows it."", e);
                    eventThread.queueEvent(new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.AuthFailed, null));
                    saslLoginFailed = true;
                }
            }
            logStartConnect(addr);

            clientCnxnSocket.connect(addr);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,logStartConnect,void logStartConnect(InetSocketAddress),"[1120, 1125]","{'A583': [(1121, 1121), (1123, 1123)], 'A591': [(1120, 1120), (1122, 1122), (1124, 1125)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"        private void logStartConnect(InetSocketAddress addr) {
            LOG.info(""Opening socket connection to server {}."", addr);
            if (zooKeeperSaslClient != null) {
                LOG.info(""SASL config status: {}"", zooKeeperSaslClient.getConfigStatus());
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,run,void run(),"[1127, 1290]","{'A583': [(1165, 1165), (1184, 1184), (1186, 1186), (1194, 1194), (1197, 1200), (1212, 1216), (1235, 1235), (1244, 1244), (1252, 1252), (1255, 1258), (1265, 1265), (1273, 1273), (1286, 1289)], 'A591': [(1131, 1132), (1137, 1137), (1139, 1139), (1220, 1220), (1271, 1272)], 'A590': [(1127, 1127), (1129, 1129), (1133, 1133), (1138, 1138), (1140, 1140), (1142, 1143), (1155, 1155), (1190, 1191), (1193, 1193), (1210, 1210), (1219, 1219), (1221, 1227), (1243, 1243), (1250, 1251), (1262, 1264), (1274, 1274), (1290, 1290)], 'A596': [(1135, 1135), (1156, 1156), (1158, 1164), (1167, 1173), (1175, 1182), (1188, 1189), (1217, 1218)], 'A616': [(1201, 1201), (1203, 1203)], 'A597': [(1130, 1130), (1241, 1241), (1259, 1260)], 'A628': [(1282, 1284)], 'A639': [(1141, 1141), (1242, 1242)], 'A593': [(1134, 1134), (1230, 1230)], 'A625': [(1154, 1154), (1192, 1192), (1195, 1196), (1202, 1202), (1204, 1209), (1254, 1254), (1275, 1280)], 'A600': [(1157, 1157), (1211, 1211), (1228, 1229), (1231, 1234), (1236, 1240)], 'A592': [(1245, 1249), (1261, 1261)], 'A663': [(1150, 1150), (1166, 1166), (1174, 1174)], 'A654': [(1281, 1281), (1285, 1285)], 'A665': [(1185, 1185), (1187, 1187)], 'A613': [(1136, 1136), (1144, 1149), (1151, 1151)], 'A666': [(1128, 1128), (1266, 1266)], 'A667': [(1152, 1153)], 'A646': [(1183, 1183)], 'A599': [(1253, 1253)], 'A630': [(1267, 1270)]}","{'A583': 0.15853658536585366, 'A591': 0.042682926829268296, 'A590': 0.17073170731707318, 'A596': 0.17073170731707318, 'A616': 0.012195121951219513, 'A597': 0.024390243902439025, 'A628': 0.018292682926829267, 'A639': 0.012195121951219513, 'A593': 0.012195121951219513, 'A625': 0.10975609756097561, 'A600': 0.07926829268292683, 'A592': 0.036585365853658534, 'A663': 0.018292682926829267, 'A654': 0.012195121951219513, 'A665': 0.012195121951219513, 'A613': 0.04878048780487805, 'A666': 0.012195121951219513, 'A667': 0.012195121951219513, 'A646': 0.006097560975609756, 'A599': 0.006097560975609756, 'A630': 0.024390243902439025}",A590,,"        @Override
        @SuppressFBWarnings(""JLM_JSR166_UTILCONCURRENT_MONITORENTER"")
        public void run() {
            clientCnxnSocket.introduce(this, sessionId, outgoingQueue);
            clientCnxnSocket.updateNow();
            clientCnxnSocket.updateLastSendAndHeard();
            int to;
            long lastPingRwServer = Time.currentElapsedTime();
            final int MAX_SEND_PING_INTERVAL = 10000; //10 seconds
            InetSocketAddress serverAddress = null;
            while (state.isAlive()) {
                try {
                    if (!clientCnxnSocket.isConnected()) {
                        // don't re-establish connection if we are closing
                        if (closing) {
                            break;
                        }
                        if (rwServerAddress != null) {
                            serverAddress = rwServerAddress;
                            rwServerAddress = null;
                        } else {
                            serverAddress = hostProvider.next(1000);
                        }
                        onConnecting(serverAddress);
                        startConnect(serverAddress);
                        // Update now to start the connection timer right after we make a connection attempt
                        clientCnxnSocket.updateNow();
                        clientCnxnSocket.updateLastSend();
                    }

                    if (state.isConnected()) {
                        // determine whether we need to send an AuthFailed event.
                        if (zooKeeperSaslClient != null) {
                            boolean sendAuthEvent = false;
                            if (zooKeeperSaslClient.getSaslState() == ZooKeeperSaslClient.SaslState.INITIAL) {
                                try {
                                    zooKeeperSaslClient.initialize(ClientCnxn.this);
                                } catch (SaslException e) {
                                    LOG.error(""SASL authentication with Zookeeper Quorum member failed."", e);
                                    changeZkState(States.AUTH_FAILED);
                                    sendAuthEvent = true;
                                }
                            }
                            KeeperState authState = zooKeeperSaslClient.getKeeperState();
                            if (authState != null) {
                                if (authState == KeeperState.AuthFailed) {
                                    // An authentication error occurred during authentication with the Zookeeper Server.
                                    changeZkState(States.AUTH_FAILED);
                                    sendAuthEvent = true;
                                } else {
                                    if (authState == KeeperState.SaslAuthenticated) {
                                        sendAuthEvent = true;
                                    }
                                }
                            }

                            if (sendAuthEvent) {
                                eventThread.queueEvent(new WatchedEvent(Watcher.Event.EventType.None, authState, null));
                                if (state == States.AUTH_FAILED) {
                                    eventThread.queueEventOfDeath();
                                }
                            }
                        }
                        to = readTimeout - clientCnxnSocket.getIdleRecv();
                    } else {
                        to = connectTimeout - clientCnxnSocket.getIdleSend();
                    }

                    int expiration = sessionId == 0 ? Integer.MAX_VALUE : expirationTimeout - clientCnxnSocket.getIdleRecv();
                    if (expiration <= 0) {
                        String warnInfo = String.format(
                            ""Client session timed out, have not heard from server in %dms for session id 0x%s"",
                            clientCnxnSocket.getIdleRecv(),
                            Long.toHexString(sessionId));
                        LOG.warn(warnInfo);
                        changeZkState(States.CLOSED);
                        throw new SessionTimeoutException(warnInfo);
                    } else if (to <= 0) {
                        String warnInfo = String.format(
                            ""Client connection timed out, have not heard from server in %dms for session id 0x%s"",
                            clientCnxnSocket.getIdleRecv(),
                            Long.toHexString(sessionId));
                        throw new ConnectionTimeoutException(warnInfo);
                    }
                    if (state.isConnected()) {
                        //1000(1 second) is to prevent race condition missing to send the second ping
                        //also make sure not to send too many pings when readTimeout is small
                        int timeToNextPing = readTimeout / 2
                                             - clientCnxnSocket.getIdleSend()
                                             - ((clientCnxnSocket.getIdleSend() > 1000) ? 1000 : 0);
                        //send a ping request either time is due or no packet sent out within MAX_SEND_PING_INTERVAL
                        if (timeToNextPing <= 0 || clientCnxnSocket.getIdleSend() > MAX_SEND_PING_INTERVAL) {
                            sendPing();
                            clientCnxnSocket.updateLastSend();
                        } else {
                            if (timeToNextPing < to) {
                                to = timeToNextPing;
                            }
                        }
                    }

                    // If we are in read-only mode, seek for read/write server
                    if (state == States.CONNECTEDREADONLY) {
                        long now = Time.currentElapsedTime();
                        int idlePingRwServer = (int) (now - lastPingRwServer);
                        if (idlePingRwServer >= pingRwTimeout) {
                            lastPingRwServer = now;
                            idlePingRwServer = 0;
                            pingRwTimeout = Math.min(2 * pingRwTimeout, maxPingRwTimeout);
                            pingRwServer();
                        }
                        to = Math.min(to, pingRwTimeout - idlePingRwServer);
                    }

                    clientCnxnSocket.doTransport(to, pendingQueue, ClientCnxn.this);
                } catch (Throwable e) {
                    if (closing) {
                        // closing so this is expected
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(
                                ""An exception was thrown while closing send thread for session 0x{}."",
                                Long.toHexString(getSessionId()), e);
                        }
                        break;
                    } else {
                        LOG.warn(
                            ""Session 0x{} for server {}, Closing socket connection. ""
                                + ""Attempting reconnect except it is a SessionExpiredException or SessionTimeoutException."",
                            Long.toHexString(getSessionId()),
                            serverAddress,
                            e);

                        // At this point, there might still be new packets appended to outgoingQueue.
                        // they will be handled in next connection or cleared up if closed.
                        cleanAndNotifyState();
                    }
                }
            }

            synchronized (outgoingQueue) {
                // When it comes to this point, it guarantees that later queued
                // packet to outgoingQueue will be notified of death.
                cleanup();
            }
            clientCnxnSocket.close();
            if (state.isAlive()) {
                eventThread.queueEvent(new WatchedEvent(Event.EventType.None, Event.KeeperState.Disconnected, null));
            }
            if (closing) {
                eventThread.queueEvent(new WatchedEvent(Event.EventType.None, KeeperState.Closed, null));
            } else if (state == States.CLOSED) {
                eventThread.queueEvent(new WatchedEvent(Event.EventType.None, KeeperState.Expired, null));
            }
            eventThread.queueEventOfDeath();

            Login l = loginRef.getAndSet(null);
            if (l != null) {
                l.shutdown();
            }
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.getTextTraceLevel(),
                ""SendThread exited loop for session: 0x"" + Long.toHexString(getSessionId()));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,cleanAndNotifyState,void cleanAndNotifyState(),"[1292, 1298]","{'A583': [(1295, 1295)], 'A592': [(1292, 1294), (1296, 1298)]}","{'A583': 0.14285714285714285, 'A592': 0.8571428571428571}",A592,,"        private void cleanAndNotifyState() {
            cleanup();
            if (state.isAlive()) {
                eventThread.queueEvent(new WatchedEvent(Event.EventType.None, Event.KeeperState.Disconnected, null));
            }
            clientCnxnSocket.updateNow();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,pingRwServer,void pingRwServer(),"[1300, 1322]","{'A583': [(1303, 1304), (1311, 1311), (1320, 1320)], 'A652': [(1306, 1306), (1309, 1309), (1314, 1314)], 'A600': [(1300, 1302), (1305, 1305), (1307, 1308), (1310, 1310), (1312, 1313), (1315, 1319), (1321, 1322)]}","{'A583': 0.17391304347826086, 'A652': 0.13043478260869565, 'A600': 0.6956521739130435}",A600,,"        private void pingRwServer() throws RWServerFoundException {
            String result = null;
            InetSocketAddress addr = hostProvider.next(0);

            LOG.info(""Checking server {} for being r/w. Timeout {}"", addr, pingRwTimeout);
            try {
                result = FourLetterWordMain.send4LetterWord(addr.getHostString(), addr.getPort(), ""isro"", clientConfig, 1000);
            } catch (ConnectException e) {
                // ignore, this just means server is not up
            } catch (IOException | X509Exception.SSLContextException e) {
                // some unexpected error, warn about it
                LOG.warn(""Exception while seeking for r/w server."", e);
            }

            if (""rw\n"".equals(result)) {
                pingRwTimeout = minPingRwTimeout;
                // save the found address so that it's used during the next
                // connection attempt
                rwServerAddress = addr;
                throw new RWServerFoundException(""Majority server found at ""
                                                 + addr.getHostString() + "":"" + addr.getPort());
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,cleanup,void cleanup(),"[1324, 1341]","{'A591': [(1325, 1325)], 'A590': [(1324, 1324), (1326, 1331), (1340, 1341)], 'A597': [(1332, 1339)]}","{'A591': 0.05555555555555555, 'A590': 0.5, 'A597': 0.4444444444444444}",A590,,"        private void cleanup() {
            clientCnxnSocket.cleanup();
            synchronized (pendingQueue) {
                for (Packet p : pendingQueue) {
                    conLossPacket(p);
                }
                pendingQueue.clear();
            }
            // We can't call outgoingQueue.clear() here because
            // between iterating and clear up there might be new
            // packets added in queuePacket().
            Iterator<Packet> iter = outgoingQueue.iterator();
            while (iter.hasNext()) {
                Packet p = iter.next();
                conLossPacket(p);
                iter.remove();
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,onConnected,"void onConnected(int,long,byte[],boolean)","[1347, 1386]","{'A583': [(1347, 1351), (1356, 1356), (1359, 1361), (1365, 1365), (1369, 1369), (1378, 1385)], 'A591': [(1352, 1353), (1355, 1355), (1357, 1357), (1370, 1370), (1374, 1375), (1386, 1386)], 'A590': [(1364, 1364), (1372, 1373)], 'A616': [(1358, 1358), (1362, 1363)], 'A625': [(1371, 1371)], 'A600': [(1366, 1368), (1377, 1377)], 'A663': [(1354, 1354), (1376, 1376)]}","{'A583': 0.475, 'A591': 0.2, 'A590': 0.075, 'A616': 0.075, 'A625': 0.025, 'A600': 0.1, 'A663': 0.05}",A583,,"        void onConnected(
            int _negotiatedSessionTimeout,
            long _sessionId,
            byte[] _sessionPasswd,
            boolean isRO) throws IOException {
            negotiatedSessionTimeout = _negotiatedSessionTimeout;
            if (negotiatedSessionTimeout <= 0) {
                changeZkState(States.CLOSED);

                eventThread.queueEvent(new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null));
                eventThread.queueEventOfDeath();

                String warnInfo = String.format(
                    ""Unable to reconnect to ZooKeeper service, session 0x%s has expired"",
                    Long.toHexString(sessionId));
                LOG.warn(warnInfo);
                throw new SessionExpiredException(warnInfo);
            }

            if (!readOnly && isRO) {
                LOG.error(""Read/write client got connected to read-only server"");
            }

            readTimeout = negotiatedSessionTimeout * 2 / 3;
            expirationTimeout = negotiatedSessionTimeout * 4 / 3;
            connectTimeout = negotiatedSessionTimeout / hostProvider.size();
            hostProvider.onConnected();
            sessionId = _sessionId;
            sessionPasswd = _sessionPasswd;
            changeZkState((isRO) ? States.CONNECTEDREADONLY : States.CONNECTED);
            seenRwServerBefore |= !isRO;
            LOG.info(
                ""Session establishment complete on server {}, session id = 0x{}, negotiated timeout = {}{}"",
                clientCnxnSocket.getRemoteSocketAddress(),
                Long.toHexString(sessionId),
                negotiatedSessionTimeout,
                (isRO ? "" (READ-ONLY mode)"" : """"));
            KeeperState eventState = (isRO) ? KeeperState.ConnectedReadOnly : KeeperState.SyncConnected;
            eventThread.queueEvent(new WatchedEvent(Watcher.Event.EventType.None, eventState, null));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,close,void close(),"[1388, 1396]","{'A591': [(1388, 1388), (1396, 1396)], 'A597': [(1395, 1395)], 'A663': [(1389, 1394)]}","{'A591': 0.2222222222222222, 'A597': 0.1111111111111111, 'A663': 0.6666666666666666}",A663,,"        void close() {
            try {
                changeZkState(States.CLOSED);
            } catch (IOException e) {
                LOG.warn(""Connection close fails when migrates state from {} to CLOSED"",
                        getZkState());
            }
            clientCnxnSocket.onClosing();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,testableCloseSocket,void testableCloseSocket(),"[1398, 1400]","{'A591': [(1398, 1399)], 'A590': [(1400, 1400)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,,"        void testableCloseSocket() throws IOException {
            clientCnxnSocket.testableCloseSocket();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,tunnelAuthInProgress,boolean tunnelAuthInProgress(),"[1402, 1421]","{'A596': [(1410, 1412), (1414, 1418), (1420, 1421)], 'A597': [(1402, 1408), (1413, 1413), (1419, 1419)], 'A646': [(1409, 1409)]}","{'A596': 0.5, 'A597': 0.45, 'A646': 0.05}",A596,,"        public boolean tunnelAuthInProgress() {
            // 1. SASL client is disabled.
            if (!clientConfig.isSaslClientEnabled()) {
                return false;
            }

            // 2. SASL login failed.
            if (saslLoginFailed) {
                return false;
            }

            // 3. SendThread has not created the authenticating object yet,
            // therefore authentication is (at the earliest stage of being) in progress.
            if (zooKeeperSaslClient == null) {
                return true;
            }

            // 4. authenticating object exists, so ask it for its progress.
            return zooKeeperSaslClient.clientTunneledAuthenticationInProgress();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,sendPacket,void sendPacket(Packet),"[1423, 1425]","{'A596': [(1423, 1425)]}",{'A596': 1.0},A596,,"        public void sendPacket(Packet p) throws IOException {
            clientCnxnSocket.sendPacket(p);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,getZooKeeperSaslClient,ZooKeeperSaslClient getZooKeeperSaslClient(),"[1427, 1429]","{'A654': [(1427, 1429)]}",{'A654': 1.0},A654,,"        public ZooKeeperSaslClient getZooKeeperSaslClient() {
            return zooKeeperSaslClient;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn.SendThread,getLogin,Login getLogin(),"[1432, 1434]","{'A628': [(1432, 1434)]}",{'A628': 1.0},A628,,"        Login getLogin() {
            return loginRef.get();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,disconnect,void disconnect(),"[1443, 1453]","{'A583': [(1444, 1444)], 'A590': [(1443, 1443), (1446, 1446), (1452, 1453)], 'A596': [(1445, 1445)], 'A635': [(1447, 1451)]}","{'A583': 0.09090909090909091, 'A590': 0.36363636363636365, 'A596': 0.09090909090909091, 'A635': 0.45454545454545453}",A635,,"    public void disconnect() {
        LOG.debug(""Disconnecting client for session: 0x{}"", Long.toHexString(getSessionId()));

        sendThread.close();
        try {
            sendThread.join();
        } catch (InterruptedException ex) {
            LOG.warn(""Got interrupted while waiting for the sender thread to close"", ex);
        }
        eventThread.queueEventOfDeath();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,close,void close(),"[1461, 1474]","{'A583': [(1462, 1462)], 'A590': [(1461, 1461), (1463, 1466), (1468, 1474)], 'A596': [(1467, 1467)]}","{'A583': 0.07142857142857142, 'A590': 0.8571428571428571, 'A596': 0.07142857142857142}",A590,,"    public void close() throws IOException {
        LOG.debug(""Closing client for session: 0x{}"", Long.toHexString(getSessionId()));

        try {
            RequestHeader h = new RequestHeader();
            h.setType(ZooDefs.OpCode.closeSession);

            submitRequest(h, null, null, null);
        } catch (InterruptedException e) {
            // ignore, close the send/event threads
        } finally {
            disconnect();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getXid,int getXid(),"[1486, 1494]","{'A583': [(1486, 1486)], 'A590': [(1493, 1494)], 'A668': [(1487, 1492)]}","{'A583': 0.1111111111111111, 'A590': 0.2222222222222222, 'A668': 0.6666666666666666}",A668,,"    public synchronized int getXid() {
        // Avoid negative cxid values.  In particular, cxid values of -4, -2, and -1 are special and
        // must not be used for requests -- see SendThread.readResponse.
        // Skip from MAX to 1.
        if (xid == Integer.MAX_VALUE) {
            xid = 1;
        }
        return xid++;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,submitRequest,"ReplyHeader submitRequest(RequestHeader,Record,Record,WatchRegistration)","[1496, 1502]","{'A583': [(1496, 1500)], 'A591': [(1501, 1502)]}","{'A583': 0.7142857142857143, 'A591': 0.2857142857142857}",A583,,"    public ReplyHeader submitRequest(
        RequestHeader h,
        Record request,
        Record response,
        WatchRegistration watchRegistration) throws InterruptedException {
        return submitRequest(h, request, response, watchRegistration, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,submitRequest,"ReplyHeader submitRequest(RequestHeader,Record,Record,WatchRegistration,WatchDeregistration)","[1504, 1537]","{'A583': [(1504, 1509), (1511, 1521)], 'A590': [(1510, 1510), (1522, 1522), (1531, 1532), (1536, 1537)], 'A592': [(1523, 1530), (1533, 1535)]}","{'A583': 0.5, 'A590': 0.17647058823529413, 'A592': 0.3235294117647059}",A583,,"    public ReplyHeader submitRequest(
        RequestHeader h,
        Record request,
        Record response,
        WatchRegistration watchRegistration,
        WatchDeregistration watchDeregistration) throws InterruptedException {
        ReplyHeader r = new ReplyHeader();
        Packet packet = queuePacket(
            h,
            r,
            request,
            response,
            null,
            null,
            null,
            null,
            watchRegistration,
            watchDeregistration);
        synchronized (packet) {
            if (requestTimeout > 0) {
                // Wait for request completion with timeout
                waitForPacketFinish(r, packet);
            } else {
                // Wait for request completion infinitely
                while (!packet.finished) {
                    packet.wait();
                }
            }
        }
        if (r.getErr() == Code.REQUESTTIMEOUT.intValue()) {
            sendThread.cleanAndNotifyState();
        }
        return r;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,waitForPacketFinish,"void waitForPacketFinish(ReplyHeader,Packet)","[1542, 1554]","{'A583': [(1542, 1542)], 'A592': [(1553, 1554)], 'A601': [(1543, 1552)]}","{'A583': 0.07692307692307693, 'A592': 0.15384615384615385, 'A601': 0.7692307692307693}",A601,,"    private void waitForPacketFinish(ReplyHeader r, Packet packet) throws InterruptedException {
        long remainingTime = requestTimeout;
        while (!packet.finished && remainingTime > 0) {
            long waitStartTime = Time.currentElapsedTime();
            packet.wait(remainingTime);
            remainingTime -= (Time.currentElapsedTime() - waitStartTime);
        }

        if (!packet.finished) {
            LOG.error(""Timeout error occurred for the packet '{}'."", packet);
            r.setErr(Code.REQUESTTIMEOUT.intValue());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,saslCompleted,void saslCompleted(),"[1556, 1558]","{'A596': [(1558, 1558)], 'A597': [(1556, 1557)]}","{'A596': 0.3333333333333333, 'A597': 0.6666666666666666}",A597,,"    public void saslCompleted() {
        sendThread.getClientCnxnSocket().saslCompleted();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,sendPacket,"void sendPacket(Record,Record,AsyncCallback,int)","[1560, 1574]","{'A583': [(1560, 1560), (1571, 1571)], 'A596': [(1561, 1570), (1572, 1574)]}","{'A583': 0.13333333333333333, 'A596': 0.8666666666666667}",A596,,"    public void sendPacket(Record request, Record response, AsyncCallback cb, int opCode) throws IOException {
        // Generate Xid now because it will be sent immediately,
        // by call to sendThread.sendPacket() below.
        int xid = getXid();
        RequestHeader h = new RequestHeader();
        h.setXid(xid);
        h.setType(opCode);

        ReplyHeader r = new ReplyHeader();
        r.setXid(xid);

        Packet p = new Packet(h, r, request, response, null);
        p.cb = cb;
        sendThread.sendPacket(p);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,queuePacket,"Packet queuePacket(RequestHeader,ReplyHeader,Record,Record,AsyncCallback,String,String,Object,WatchRegistration)","[1576, 1587]","{'A583': [(1576, 1586)], 'A591': [(1587, 1587)]}","{'A583': 0.9166666666666666, 'A591': 0.08333333333333333}",A583,,"    public Packet queuePacket(
        RequestHeader h,
        ReplyHeader r,
        Record request,
        Record response,
        AsyncCallback cb,
        String clientPath,
        String serverPath,
        Object ctx,
        WatchRegistration watchRegistration) {
        return queuePacket(h, r, request, response, cb, clientPath, serverPath, ctx, watchRegistration, null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,queuePacket,"Packet queuePacket(RequestHeader,ReplyHeader,Record,Record,AsyncCallback,String,String,Object,WatchRegistration,WatchDeregistration)","[1589, 1630]","{'A583': [(1590, 1600)], 'A590': [(1601, 1601), (1626, 1627), (1629, 1630)], 'A596': [(1602, 1605)], 'A597': [(1606, 1611), (1628, 1628)], 'A666': [(1589, 1589), (1616, 1616)], 'A630': [(1612, 1615), (1617, 1625)]}","{'A583': 0.2619047619047619, 'A590': 0.11904761904761904, 'A596': 0.09523809523809523, 'A597': 0.16666666666666666, 'A666': 0.047619047619047616, 'A630': 0.30952380952380953}",A630,,"    @SuppressFBWarnings(""JLM_JSR166_UTILCONCURRENT_MONITORENTER"")
    public Packet queuePacket(
        RequestHeader h,
        ReplyHeader r,
        Record request,
        Record response,
        AsyncCallback cb,
        String clientPath,
        String serverPath,
        Object ctx,
        WatchRegistration watchRegistration,
        WatchDeregistration watchDeregistration) {
        Packet packet = null;

        // Note that we do not generate the Xid for the packet yet. It is
        // generated later at send-time, by an implementation of ClientCnxnSocket::doIO(),
        // where the packet is actually sent.
        packet = new Packet(h, r, request, response, watchRegistration);
        packet.cb = cb;
        packet.ctx = ctx;
        packet.clientPath = clientPath;
        packet.serverPath = serverPath;
        packet.watchDeregistration = watchDeregistration;
        // The synchronized block here is for two purpose:
        // 1. synchronize with the final cleanup() in SendThread.run() to avoid race
        // 2. synchronized against each packet. So if a closeSession packet is added,
        // later packet will be notified.
        synchronized (outgoingQueue) {
            if (!state.isAlive() || closing) {
                conLossPacket(packet);
            } else {
                // If the client is asking to close the session then
                // mark as closing
                if (h.getType() == OpCode.closeSession) {
                    closing = true;
                }
                outgoingQueue.add(packet);
            }
        }
        sendThread.getClientCnxnSocket().packetAdded();
        return packet;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,addAuthInfo,"void addAuthInfo(String,byte[])","[1632, 1647]","{'A583': [(1632, 1632), (1637, 1637), (1639, 1646)], 'A591': [(1633, 1633)], 'A590': [(1635, 1635), (1647, 1647)], 'A596': [(1634, 1634), (1636, 1636)], 'A641': [(1638, 1638)]}","{'A583': 0.625, 'A591': 0.0625, 'A590': 0.125, 'A596': 0.125, 'A641': 0.0625}",A583,,"    public void addAuthInfo(String scheme, byte[] auth) {
        if (!state.isAlive()) {
            return;
        }
        authInfo.add(new AuthData(scheme, auth));
        queuePacket(
            new RequestHeader(ClientCnxn.AUTHPACKET_XID, OpCode.auth),
            null,
            new AuthPacket(0, scheme, auth),
            null,
            null,
            null,
            null,
            null,
            null);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getState,States getState(),"[1649, 1651]","{'A591': [(1649, 1651)]}",{'A591': 1.0},A591,,"    States getState() {
        return state;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,initRequestTimeout,void initRequestTimeout(),"[1669, 1686]","{'A583': [(1672, 1678), (1681, 1683)], 'A592': [(1669, 1671), (1679, 1680), (1684, 1686)]}","{'A583': 0.5555555555555556, 'A592': 0.4444444444444444}",A583,,"    private void initRequestTimeout() {
        try {
            requestTimeout = clientConfig.getLong(
                ZKClientConfig.ZOOKEEPER_REQUEST_TIMEOUT,
                ZKClientConfig.ZOOKEEPER_REQUEST_TIMEOUT_DEFAULT);
            LOG.info(
                ""{} value is {}. feature enabled={}"",
                ZKClientConfig.ZOOKEEPER_REQUEST_TIMEOUT,
                requestTimeout,
                requestTimeout > 0);
        } catch (NumberFormatException e) {
            LOG.error(
                ""Configured value {} for property {} can not be parsed to long."",
                clientConfig.getProperty(ZKClientConfig.ZOOKEEPER_REQUEST_TIMEOUT),
                ZKClientConfig.ZOOKEEPER_REQUEST_TIMEOUT);
            throw e;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxn.java,ClientCnxn,getZooKeeperSaslClient,ZooKeeperSaslClient getZooKeeperSaslClient(),"[1688, 1690]","{'A654': [(1688, 1690)]}",{'A654': 1.0},A654,,"    public ZooKeeperSaslClient getZooKeeperSaslClient() {
        return sendThread.getZooKeeperSaslClient();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,add,void add(OpResult),"[46, 48]","{'A590': [(46, 48)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    public void add(OpResult x) {
        results.add(x);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,iterator,Iterator<OpResult> iterator(),"[50, 53]","{'A590': [(50, 53)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    @Override
    public Iterator<OpResult> iterator() {
        return results.iterator();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,size,int size(),"[55, 57]","{'A590': [(55, 57)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    public int size() {
        return results.size();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,serialize,"void serialize(OutputArchive,String)","[59, 100]","{'A590': [(59, 63), (65, 68), (96, 100)], 'A583': [(64, 64), (69, 95)]}","{'A590': 0.3333333333333333, 'A583': 0.6666666666666666}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    @Override
    public void serialize(OutputArchive archive, String tag) throws IOException {
        archive.startRecord(this, tag);

        for (OpResult result : results) {
            int err = result.getType() == ZooDefs.OpCode.error ? ((OpResult.ErrorResult) result).getErr() : 0;

            new MultiHeader(result.getType(), false, err).serialize(archive, tag);

            switch (result.getType()) {
            case ZooDefs.OpCode.create:
                new CreateResponse(((OpResult.CreateResult) result).getPath()).serialize(archive, tag);
                break;
            case ZooDefs.OpCode.create2:
                OpResult.CreateResult createResult = (OpResult.CreateResult) result;
                new Create2Response(createResult.getPath(), createResult.getStat()).serialize(archive, tag);
                break;
            case ZooDefs.OpCode.delete:
            case ZooDefs.OpCode.check:
                break;
            case ZooDefs.OpCode.setData:
                new SetDataResponse(((OpResult.SetDataResult) result).getStat()).serialize(archive, tag);
                break;
            case ZooDefs.OpCode.getChildren:
                new GetChildrenResponse(((OpResult.GetChildrenResult) result).getChildren()).serialize(archive, tag);
                break;
            case ZooDefs.OpCode.getData:
                new GetDataResponse(
                    ((OpResult.GetDataResult) result).getData(),
                    ((OpResult.GetDataResult) result).getStat())
                    .serialize(archive, tag);
                break;
            case ZooDefs.OpCode.error:
                new ErrorResponse(((OpResult.ErrorResult) result).getErr()).serialize(archive, tag);
                break;
            default:
                throw new IOException(""Invalid type "" + result.getType() + "" in MultiResponse"");
            }
        }
        new MultiHeader(-1, true, -1).serialize(archive, tag);
        archive.endRecord(this, tag);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,deserialize,"void deserialize(InputArchive,String)","[102, 162]","{'A590': [(102, 103), (105, 110), (158, 162)], 'A583': [(111, 157)], 'A605': [(104, 104)]}","{'A590': 0.21311475409836064, 'A583': 0.7704918032786885, 'A605': 0.01639344262295082}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    @Override
    public void deserialize(InputArchive archive, String tag) throws IOException {
        results = new ArrayList<>();

        archive.startRecord(tag);
        MultiHeader h = new MultiHeader();
        h.deserialize(archive, tag);
        while (!h.getDone()) {
            switch (h.getType()) {
            case ZooDefs.OpCode.create:
                CreateResponse cr = new CreateResponse();
                cr.deserialize(archive, tag);
                results.add(new OpResult.CreateResult(cr.getPath()));
                break;

            case ZooDefs.OpCode.create2:
                Create2Response cr2 = new Create2Response();
                cr2.deserialize(archive, tag);
                results.add(new OpResult.CreateResult(cr2.getPath(), cr2.getStat()));
                break;

            case ZooDefs.OpCode.delete:
                results.add(new OpResult.DeleteResult());
                break;

            case ZooDefs.OpCode.setData:
                SetDataResponse sdr = new SetDataResponse();
                sdr.deserialize(archive, tag);
                results.add(new OpResult.SetDataResult(sdr.getStat()));
                break;

            case ZooDefs.OpCode.check:
                results.add(new OpResult.CheckResult());
                break;

            case ZooDefs.OpCode.getChildren:
                GetChildrenResponse gcr = new GetChildrenResponse();
                gcr.deserialize(archive, tag);
                results.add(new OpResult.GetChildrenResult(gcr.getChildren()));
                break;

            case ZooDefs.OpCode.getData:
                GetDataResponse gdr = new GetDataResponse();
                gdr.deserialize(archive, tag);
                results.add(new OpResult.GetDataResult(gdr.getData(), gdr.getStat()));
                break;

            case ZooDefs.OpCode.error:
                // TODO: need way to more cleanly serialize/deserialize exceptions
                ErrorResponse er = new ErrorResponse();
                er.deserialize(archive, tag);
                results.add(new OpResult.ErrorResult(er.getErr()));
                break;

            default:
                throw new IOException(""Invalid type "" + h.getType() + "" in MultiResponse"");
            }
            h.deserialize(archive, tag);
        }
        archive.endRecord(tag);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,getResultList,List<OpResult> getResultList(),"[164, 166]","{'A590': [(164, 166)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    public List<OpResult> getResultList() {
        return results;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,equals,boolean equals(Object),"[168, 194]","{'A590': [(168, 169), (176, 190), (193, 194)], 'A583': [(170, 175), (191, 192)]}","{'A590': 0.7037037037037037, 'A583': 0.2962962962962963}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MultiResponse)) {
            return false;
        }

        MultiResponse other = (MultiResponse) o;

        if (results != null) {
            Iterator<OpResult> i = other.results.iterator();
            for (OpResult result : results) {
                if (i.hasNext()) {
                    if (!result.equals(i.next())) {
                        return false;
                    }
                } else {
                    return false;
                }
            }
            return !i.hasNext();
        } else {
            return other.results == null;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiResponse.java,MultiResponse,hashCode,int hashCode(),"[196, 203]","{'A590': [(196, 203)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiResponseTest.java,"    @Override
    public int hashCode() {
        int hash = results.size();
        for (OpResult result : results) {
            hash = (hash * 35) + result.hashCode();
        }
        return hash;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,create,"Op create(String,byte[],List<ACL>,int)","[83, 85]","{'A590': [(83, 85)]}",{'A590': 1.0},A590,,"    public static Op create(String path, byte[] data, List<ACL> acl, int flags) {
        return new Create(path, data, acl, flags);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,create,"Op create(String,byte[],List<ACL>,int,long)","[105, 111]","{'A639': [(105, 111)]}",{'A639': 1.0},A639,,"    public static Op create(String path, byte[] data, List<ACL> acl, int flags, long ttl) {
        CreateMode createMode = CreateMode.fromFlag(flags, CreateMode.PERSISTENT);
        if (createMode.isTTL()) {
            return new CreateTTL(path, data, acl, createMode, ttl);
        }
        return new Create(path, data, acl, flags);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,create,"Op create(String,byte[],List<ACL>,CreateMode)","[127, 129]","{'A590': [(127, 129)]}",{'A590': 1.0},A590,,"    public static Op create(String path, byte[] data, List<ACL> acl, CreateMode createMode) {
        return new Create(path, data, acl, createMode);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,create,"Op create(String,byte[],List<ACL>,CreateMode,long)","[148, 153]","{'A639': [(148, 153)]}",{'A639': 1.0},A639,,"    public static Op create(String path, byte[] data, List<ACL> acl, CreateMode createMode, long ttl) {
        if (createMode.isTTL()) {
            return new CreateTTL(path, data, acl, createMode, ttl);
        }
        return new Create(path, data, acl, createMode);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,create,"Op create(String,byte[],CreateOptions,int)","[167, 172]","{'A625': [(167, 172)]}",{'A625': 1.0},A625,,"    static Op create(String path, byte[] data, CreateOptions options, int defaultOpCode) {
        if (options.getCreateMode().isTTL()) {
            return new CreateTTL(path, data, options.getAcl(), options.getCreateMode(), options.getTtl());
        }
        return new Create(path, data, options.getAcl(), options.getCreateMode(), defaultOpCode);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,create,"Op create(String,byte[],CreateOptions)","[187, 189]","{'A625': [(187, 189)]}",{'A625': 1.0},A625,,"    public static Op create(String path, byte[] data, CreateOptions options) {
        return create(path, data, options, ZooDefs.OpCode.create2);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,delete,"Op delete(String,int)","[200, 202]","{'A590': [(200, 202)]}",{'A590': 1.0},A590,,"    public static Op delete(String path, int version) {
        return new Delete(path, version);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,setData,"Op setData(String,byte[],int)","[215, 217]","{'A590': [(215, 217)]}",{'A590': 1.0},A590,,"    public static Op setData(String path, byte[] data, int version) {
        return new SetData(path, data, version);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,check,"Op check(String,int)","[231, 233]","{'A590': [(231, 233)]}",{'A590': 1.0},A590,,"    public static Op check(String path, int version) {
        return new Check(path, version);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,getChildren,Op getChildren(String),"[235, 237]","{'A626': [(235, 237)]}",{'A626': 1.0},A626,,"    public static Op getChildren(String path) {
        return new GetChildren(path);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,getData,Op getData(String),"[239, 241]","{'A626': [(239, 241)]}",{'A626': 1.0},A626,,"    public static Op getData(String path) {
        return new GetData(path);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,getType,int getType(),"[248, 250]","{'A590': [(248, 250)]}",{'A590': 1.0},A590,,"    public int getType() {
        return type;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,getPath,String getPath(),"[256, 258]","{'A590': [(256, 258)]}",{'A590': 1.0},A590,,"    public String getPath() {
        return path;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,getKind,OpKind getKind(),"[264, 266]","{'A626': [(264, 266)]}",{'A626': 1.0},A626,,"    public OpKind getKind() {
        return opKind;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op,validate,void validate(),"[288, 290]","{'A591': [(288, 290)]}",{'A591': 1.0},A591,,"    void validate() throws KeeperException {
        PathUtils.validatePath(path);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Create,getOpcode,"int getOpcode(CreateMode,int)","[312, 317]","{'A639': [(313, 315)], 'A625': [(312, 312), (316, 316)], 'A616': [(317, 317)]}","{'A639': 0.5, 'A625': 0.3333333333333333, 'A616': 0.16666666666666666}",A639,,"        private static int getOpcode(CreateMode createMode, int defaultOpCode) {
            if (createMode.isTTL()) {
                return ZooDefs.OpCode.createTTL;
            }
            return createMode.isContainer() ? ZooDefs.OpCode.createContainer : defaultOpCode;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Create,equals,boolean equals(Object),"[330, 360]","{'A590': [(330, 331), (338, 354), (360, 360)], 'A583': [(332, 337), (355, 359)]}","{'A590': 0.6451612903225806, 'A583': 0.3548387096774194}",A590,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Create)) {
                return false;
            }

            Create op = (Create) o;

            boolean aclEquals = true;
            Iterator<ACL> i = op.acl.iterator();
            for (ACL acl : op.acl) {
                boolean hasMoreData = i.hasNext();
                if (!hasMoreData) {
                    aclEquals = false;
                    break;
                }
                ACL otherAcl = i.next();
                if (!acl.equals(otherAcl)) {
                    aclEquals = false;
                    break;
                }
            }
            return !i.hasNext()
                   && getType() == op.getType()
                   && Arrays.equals(data, op.data)
                   && flags == op.flags
                   && aclEquals;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Create,hashCode,int hashCode(),"[362, 365]","{'A590': [(362, 365)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType() + getPath().hashCode() + Arrays.hashCode(data);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Create,toRequestRecord,Record toRequestRecord(),"[367, 370]","{'A590': [(367, 370)]}",{'A590': 1.0},A590,,"        @Override
        public Record toRequestRecord() {
            return new CreateRequest(getPath(), data, acl, flags);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Create,withChroot,Op withChroot(String),"[372, 375]","{'A591': [(372, 375)]}",{'A591': 1.0},A591,,"        @Override
        Op withChroot(String path) {
            return new Create(path, data, acl, flags);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Create,validate,void validate(),"[377, 382]","{'A591': [(377, 380)], 'A639': [(381, 382)]}","{'A591': 0.6666666666666666, 'A639': 0.3333333333333333}",A591,,"        @Override
        void validate() throws KeeperException {
            CreateMode createMode = CreateMode.fromFlag(flags);
            PathUtils.validatePath(getPath(), createMode.isSequential());
            EphemeralType.validateTTL(createMode, -1);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.CreateTTL,equals,boolean equals(Object),"[400, 403]","{'A583': [(402, 402)], 'A639': [(400, 401), (403, 403)]}","{'A583': 0.25, 'A639': 0.75}",A639,,"        @Override
        public boolean equals(Object o) {
            return super.equals(o) && (o instanceof CreateTTL) && (ttl == ((CreateTTL) o).ttl);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.CreateTTL,hashCode,int hashCode(),"[405, 408]","{'A583': [(407, 407)], 'A639': [(405, 406), (408, 408)]}","{'A583': 0.25, 'A639': 0.75}",A639,,"        @Override
        public int hashCode() {
            return super.hashCode() + (int) (ttl ^ (ttl >>> 32));
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.CreateTTL,toRequestRecord,Record toRequestRecord(),"[410, 413]","{'A639': [(410, 413)]}",{'A639': 1.0},A639,,"        @Override
        public Record toRequestRecord() {
            return new CreateTTLRequest(getPath(), data, acl, flags, ttl);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.CreateTTL,withChroot,Op withChroot(String),"[415, 418]","{'A639': [(415, 418)]}",{'A639': 1.0},A639,,"        @Override
        Op withChroot(String path) {
            return new CreateTTL(path, data, acl, flags, ttl);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.CreateTTL,validate,void validate(),"[420, 425]","{'A591': [(425, 425)], 'A639': [(420, 424)]}","{'A591': 0.16666666666666666, 'A639': 0.8333333333333334}",A639,,"        @Override
        void validate() throws KeeperException {
            CreateMode createMode = CreateMode.fromFlag(flags);
            PathUtils.validatePath(getPath(), createMode.isSequential());
            EphemeralType.validateTTL(createMode, ttl);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Delete,equals,boolean equals(Object),"[438, 450]","{'A590': [(438, 439), (446, 448), (450, 450)], 'A583': [(440, 445), (449, 449)]}","{'A590': 0.46153846153846156, 'A583': 0.5384615384615384}",A583,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Delete)) {
                return false;
            }

            Delete op = (Delete) o;

            return getType() == op.getType() && version == op.version && getPath().equals(op.getPath());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Delete,hashCode,int hashCode(),"[452, 455]","{'A590': [(452, 455)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType() + getPath().hashCode() + version;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Delete,toRequestRecord,Record toRequestRecord(),"[457, 460]","{'A590': [(457, 460)]}",{'A590': 1.0},A590,,"        @Override
        public Record toRequestRecord() {
            return new DeleteRequest(getPath(), version);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Delete,withChroot,Op withChroot(String),"[462, 465]","{'A591': [(462, 465)]}",{'A591': 1.0},A591,,"        @Override
        Op withChroot(String path) {
            return new Delete(path, version);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.SetData,equals,boolean equals(Object),"[480, 495]","{'A590': [(480, 481), (488, 490), (495, 495)], 'A583': [(482, 487), (491, 494)]}","{'A590': 0.375, 'A583': 0.625}",A583,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof SetData)) {
                return false;
            }

            SetData op = (SetData) o;

            return getType() == op.getType()
                   && version == op.version
                   && getPath().equals(op.getPath())
                   && Arrays.equals(data, op.data);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.SetData,hashCode,int hashCode(),"[497, 500]","{'A590': [(497, 500)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType() + getPath().hashCode() + Arrays.hashCode(data) + version;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.SetData,toRequestRecord,Record toRequestRecord(),"[502, 505]","{'A590': [(502, 505)]}",{'A590': 1.0},A590,,"        @Override
        public Record toRequestRecord() {
            return new SetDataRequest(getPath(), data, version);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.SetData,withChroot,Op withChroot(String),"[507, 510]","{'A591': [(507, 510)]}",{'A591': 1.0},A591,,"        @Override
        Op withChroot(String path) {
            return new SetData(path, data, version);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Check,equals,boolean equals(Object),"[523, 535]","{'A590': [(523, 524), (531, 535)], 'A583': [(525, 530)]}","{'A590': 0.5384615384615384, 'A583': 0.46153846153846156}",A590,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof Check)) {
                return false;
            }

            Check op = (Check) o;

            return getType() == op.getType() && getPath().equals(op.getPath()) && version == op.version;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Check,hashCode,int hashCode(),"[537, 540]","{'A590': [(537, 540)]}",{'A590': 1.0},A590,,"        @Override
        public int hashCode() {
            return getType() + getPath().hashCode() + version;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Check,toRequestRecord,Record toRequestRecord(),"[542, 545]","{'A590': [(542, 545)]}",{'A590': 1.0},A590,,"        @Override
        public Record toRequestRecord() {
            return new CheckVersionRequest(getPath(), version);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.Check,withChroot,Op withChroot(String),"[547, 550]","{'A591': [(547, 550)]}",{'A591': 1.0},A591,,"        @Override
        Op withChroot(String path) {
            return new Check(path, version);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetChildren,equals,boolean equals(Object),"[560, 572]","{'A583': [(562, 567)], 'A626': [(560, 561), (568, 572)]}","{'A583': 0.46153846153846156, 'A626': 0.5384615384615384}",A626,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof GetChildren)) {
                return false;
            }

            GetChildren op = (GetChildren) o;

            return getType() == op.getType() && getPath().equals(op.getPath());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetChildren,hashCode,int hashCode(),"[574, 577]","{'A626': [(574, 577)]}",{'A626': 1.0},A626,,"        @Override
        public int hashCode() {
            return getType() + getPath().hashCode();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetChildren,toRequestRecord,Record toRequestRecord(),"[579, 582]","{'A626': [(579, 582)]}",{'A626': 1.0},A626,,"        @Override
        public Record toRequestRecord() {
            return new GetChildrenRequest(getPath(), false);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetChildren,withChroot,Op withChroot(String),"[584, 587]","{'A626': [(584, 587)]}",{'A626': 1.0},A626,,"        @Override
        Op withChroot(String path) {
            return new GetChildren(path);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetData,equals,boolean equals(Object),"[597, 609]","{'A583': [(599, 604)], 'A626': [(597, 598), (605, 609)]}","{'A583': 0.46153846153846156, 'A626': 0.5384615384615384}",A626,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (!(o instanceof GetData)) {
                return false;
            }

            GetData op = (GetData) o;

            return getType() == op.getType() && getPath().equals(op.getPath());
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetData,hashCode,int hashCode(),"[611, 614]","{'A626': [(611, 614)]}",{'A626': 1.0},A626,,"        @Override
        public int hashCode() {
            return getType() + getPath().hashCode();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetData,toRequestRecord,Record toRequestRecord(),"[616, 619]","{'A626': [(616, 619)]}",{'A626': 1.0},A626,,"        @Override
        public Record toRequestRecord() {
            return new GetDataRequest(getPath(), false);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Op.java,Op.GetData,withChroot,Op withChroot(String),"[621, 624]","{'A626': [(621, 624)]}",{'A626': 1.0},A626,,"        @Override
        Op withChroot(String path) {
            return new GetData(path);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Quotas.java,Quotas,quotaPath,String quotaPath(String),"[53, 55]","{'A596': [(53, 53)], 'A641': [(54, 55)]}","{'A596': 0.3333333333333333, 'A641': 0.6666666666666666}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/QuotasTest.java,"    public static String quotaPath(String path) {
        return quotaZookeeper + path;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Quotas.java,Quotas,limitPath,String limitPath(String),"[63, 65]","{'A583': [(64, 64)], 'A596': [(65, 65)], 'A641': [(63, 63)]}","{'A583': 0.3333333333333333, 'A596': 0.3333333333333333, 'A641': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/QuotasTest.java,"    public static String limitPath(String path) {
        return quotaZookeeper + path + ""/"" + limitNode;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Quotas.java,Quotas,statPath,String statPath(String),"[73, 75]","{'A583': [(74, 74)], 'A596': [(73, 73), (75, 75)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/QuotasTest.java,"    public static String statPath(String path) {
        return quotaZookeeper + path + ""/"" + statNode;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Quotas.java,Quotas,trimQuotaPath,String trimQuotaPath(String),"[83, 85]","{'A641': [(83, 85)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/QuotasTest.java,"    public static String trimQuotaPath(String quotaPath) {
        return quotaPath.substring(quotaZookeeper.length());
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZookeeperBanner.java,ZookeeperBanner,printBanner,void printBanner(Logger),"[40, 44]","{'A641': [(40, 44)]}",{'A641': 1.0},A641,,"    public static void printBanner(Logger log) {
        for (String line : BANNER) {
            log.info(line);
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ChrootCreateCallback.java,ChrootCreateCallback,processResult,"void processResult(int,String,Object,String)","[40, 44]","{'A625': [(40, 44)]}",{'A625': 1.0},A625,,"    @Override
    public void processResult(int rc, String path, Object ctx, String name) {
        StringCallback cb = (StringCallback) callback;
        cb.processResult(rc, path, ctx, name == null ? null : chroot.strip(name));
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ChrootCreateCallback.java,ChrootCreateCallback,processResult,"void processResult(int,String,Object,String,Stat)","[46, 50]","{'A625': [(46, 50)]}",{'A625': 1.0},A625,,"    @Override
    public void processResult(int rc, String path, Object ctx, String name, Stat stat) {
        Create2Callback cb = (Create2Callback) callback;
        cb.processResult(rc, path, ctx, name == null ? null : chroot.strip(name), stat);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,withDefaultWatcher,ZooKeeperBuilder withDefaultWatcher(Watcher),"[77, 80]","{'A625': [(77, 80)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    public ZooKeeperBuilder withDefaultWatcher(Watcher watcher) {
        this.defaultWatcher = watcher;
        return this;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,withHostProvider,"ZooKeeperBuilder withHostProvider(Function<Collection<InetSocketAddress>, HostProvider>)","[89, 92]","{'A625': [(89, 92)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    public ZooKeeperBuilder withHostProvider(Function<Collection<InetSocketAddress>, HostProvider> hostProvider) {
        this.hostProvider = hostProvider;
        return this;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,withCanBeReadOnly,ZooKeeperBuilder withCanBeReadOnly(boolean),"[108, 111]","{'A625': [(108, 111)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    public ZooKeeperBuilder withCanBeReadOnly(boolean canBeReadOnly) {
        this.canBeReadOnly = canBeReadOnly;
        return this;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,withSession,"ZooKeeperBuilder withSession(long,byte[])","[124, 129]","{'A625': [(124, 129)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    @SuppressFBWarnings({""EI_EXPOSE_REP"", ""EI_EXPOSE_REP2""})
    public ZooKeeperBuilder withSession(long sessionId, byte[] sessionPasswd) {
        this.sessionId = sessionId;
        this.sessionPasswd = sessionPasswd;
        return this;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,withClientConfig,ZooKeeperBuilder withClientConfig(ZKClientConfig),"[140, 143]","{'A625': [(140, 143)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    public ZooKeeperBuilder withClientConfig(ZKClientConfig clientConfig) {
        this.clientConfig = clientConfig;
        return this;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,toOptions,ZooKeeperOptions toOptions(),"[150, 162]","{'A625': [(150, 162)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    @InterfaceAudience.Private
    public ZooKeeperOptions toOptions() {
        return new ZooKeeperOptions(
            connectString,
            sessionTimeout,
            defaultWatcher,
            hostProvider,
            canBeReadOnly,
            sessionId,
            sessionPasswd,
            clientConfig
        );
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,build,ZooKeeper build(),"[170, 172]","{'A625': [(170, 172)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    public ZooKeeper build() throws IOException {
        return new ZooKeeper(toOptions());
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperBuilder.java,ZooKeeperBuilder,buildAdmin,ZooKeeperAdmin buildAdmin(),"[180, 182]","{'A625': [(180, 182)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZooKeeperBuilderTest.java,"    public ZooKeeperAdmin buildAdmin() throws IOException {
        return new ZooKeeperAdmin(toOptions());
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java,FourLetterWordMain,send4LetterWord,"String send4LetterWord(String,int,String)","[55, 57]","{'A583': [(55, 55)], 'A630': [(56, 57)]}","{'A583': 0.3333333333333333, 'A630': 0.6666666666666666}",A630,,"    public static String send4LetterWord(String host, int port, String cmd) throws IOException, SSLContextException {
        return send4LetterWord(host, port, cmd, false, DEFAULT_SOCKET_TIMEOUT);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java,FourLetterWordMain,send4LetterWord,"String send4LetterWord(String,int,String,boolean)","[69, 75]","{'A583': [(69, 73)], 'A630': [(74, 75)]}","{'A583': 0.7142857142857143, 'A630': 0.2857142857142857}",A583,,"    public static String send4LetterWord(
        String host,
        int port,
        String cmd,
        boolean secure) throws IOException, SSLContextException {
        return send4LetterWord(host, port, cmd, secure, DEFAULT_SOCKET_TIMEOUT);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java,FourLetterWordMain,send4LetterWord,"String send4LetterWord(String,int,String,boolean,int)","[88, 95]","{'A583': [(88, 93)], 'A669': [(94, 95)]}","{'A583': 0.75, 'A669': 0.25}",A583,,"    public static String send4LetterWord(
        String host,
        int port,
        String cmd,
        boolean secure,
        int timeout) throws IOException, SSLContextException {
        return send4LetterWord(host, port, cmd, secure, timeout, null);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java,FourLetterWordMain,send4LetterWord,"String send4LetterWord(String,int,String,ZKClientConfig,int)","[108, 122]","{'A652': [(108, 122)]}",{'A652': 1.0},A652,,"    public static String send4LetterWord(
            String host,
            int port,
            String cmd,
            ZKClientConfig clientConfig,
            int timeout) throws SSLContextException, IOException {
        boolean useSecure = clientConfig.getBoolean(ZKClientConfig.SECURE_CLIENT);
        SSLContext sslContext = null;
        if (useSecure) {
            try (X509Util x509Util = new ClientX509Util()) {
                sslContext = x509Util.createSSLContext(clientConfig);
            }
        }
        return send4LetterWord(host, port, cmd, useSecure, timeout, sslContext);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java,FourLetterWordMain,send4LetterWord,"String send4LetterWord(String,int,String,boolean,int,SSLContext)","[136, 197]","{'A583': [(180, 180), (183, 183)], 'A591': [(146, 147), (170, 170), (172, 172), (174, 174), (179, 179), (181, 182), (185, 186), (189, 189), (193, 197)], 'A602': [(171, 171)], 'A630': [(173, 173), (175, 178), (187, 188)], 'A669': [(136, 143), (153, 156), (158, 162)], 'A652': [(167, 167), (169, 169)], 'A628': [(144, 145), (148, 152), (157, 157), (163, 166), (168, 168), (190, 192)], 'A646': [(184, 184)]}","{'A583': 0.03225806451612903, 'A591': 0.25806451612903225, 'A602': 0.016129032258064516, 'A630': 0.11290322580645161, 'A669': 0.27419354838709675, 'A652': 0.03225806451612903, 'A628': 0.25806451612903225, 'A646': 0.016129032258064516}",A669,,"    public static String send4LetterWord(
        String host,
        int port,
        String cmd,
        boolean secure,
        int timeout,
        SSLContext sslContext) throws IOException, SSLContextException {
        LOG.info(""connecting to {}:{} (secure={})"", host, port, secure);

        Socket sock = null;
        BufferedReader reader = null;
        try {
            InetSocketAddress hostaddress = host != null
                ? new InetSocketAddress(host, port)
                : new InetSocketAddress(InetAddress.getByName(null), port);
            if (secure) {
                LOG.info(""using secure socket"");
                if (sslContext == null) {
                    try (X509Util x509Util = new ClientX509Util()) {
                        sslContext = x509Util.getDefaultSSLContext();
                    }
                }
                SSLSocketFactory socketFactory = sslContext.getSocketFactory();
                SSLSocket sslSock = (SSLSocket) socketFactory.createSocket();
                sslSock.connect(hostaddress, timeout);
                sslSock.startHandshake();
                sock = sslSock;
            } else {
                sock = new Socket();
                sock.connect(hostaddress, timeout);
            }
            sock.setSoLinger(false, -1);
            sock.setSoTimeout(timeout);
            sock.setTcpNoDelay(true);
            OutputStream outstream = sock.getOutputStream();
            outstream.write(cmd.getBytes(UTF_8));
            outstream.flush();

            // this replicates NC - close the output stream before reading
            if (!secure) {
                // SSL prohibits unilateral half-close
                sock.shutdownOutput();
            }

            reader = new BufferedReader(new InputStreamReader(sock.getInputStream()));
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = reader.readLine()) != null) {
                sb.append(line).append(""\n"");
            }
            return sb.toString();
        } catch (SocketTimeoutException e) {
            throw new IOException(""Exception while executing four letter word: "" + cmd, e);
        } finally {
            if (sock != null) {
                sock.close();
            }
            if (reader != null) {
                reader.close();
            }
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/FourLetterWordMain.java,FourLetterWordMain,main,void main(String[]),"[199, 207]","{'A583': [(199, 199)], 'A591': [(201, 201), (206, 207)], 'A630': [(200, 200), (202, 205)]}","{'A583': 0.1111111111111111, 'A591': 0.3333333333333333, 'A630': 0.5555555555555556}",A630,,"    public static void main(String[] args) throws IOException, SSLContextException {
        if (args.length == 3) {
            System.out.println(send4LetterWord(args[0], Integer.parseInt(args[1]), args[2]));
        } else if (args.length == 4) {
            System.out.println(send4LetterWord(args[0], Integer.parseInt(args[1]), args[2], Boolean.parseBoolean(args[3])));
        } else {
            System.out.println(""Usage: FourLetterWordMain <host> <port> <cmd> <secure(optional)>"");
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZKClientConfig.java,ZKClientConfig,initFromJavaSystemProperties,void initFromJavaSystemProperties(),"[85, 88]","{'A583': [(86, 86)], 'A592': [(85, 85), (88, 88)], 'A670': [(87, 87)]}","{'A583': 0.25, 'A592': 0.5, 'A670': 0.25}",A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZKClientConfigTest.java,"    private void initFromJavaSystemProperties() {
        setProperty(ZOOKEEPER_REQUEST_TIMEOUT, System.getProperty(ZOOKEEPER_REQUEST_TIMEOUT));
        setProperty(ZOOKEEPER_SERVER_PRINCIPAL, System.getProperty(ZOOKEEPER_SERVER_PRINCIPAL));
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZKClientConfig.java,ZKClientConfig,handleBackwardCompatibility,void handleBackwardCompatibility(),"[90, 109]","{'A597': [(90, 101), (103, 109)], 'A671': [(102, 102)]}","{'A597': 0.95, 'A671': 0.05}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZKClientConfigTest.java,"    @Override
    protected void handleBackwardCompatibility() {
        /**
         * backward compatibility for properties which are common to both client
         * and server
         */
        super.handleBackwardCompatibility();

        /**
         * backward compatibility for client specific properties
         */
        setProperty(ZK_SASL_CLIENT_USERNAME, System.getProperty(ZK_SASL_CLIENT_USERNAME));
        setProperty(ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME, System.getProperty(ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME));
        setProperty(LOGIN_CONTEXT_NAME_KEY, System.getProperty(LOGIN_CONTEXT_NAME_KEY));
        setProperty(ENABLE_CLIENT_SASL_KEY, System.getProperty(ENABLE_CLIENT_SASL_KEY));
        setProperty(ZOOKEEPER_SERVER_REALM, System.getProperty(ZOOKEEPER_SERVER_REALM));
        setProperty(DISABLE_AUTO_WATCH_RESET, System.getProperty(DISABLE_AUTO_WATCH_RESET));
        setProperty(ZOOKEEPER_CLIENT_CNXN_SOCKET, System.getProperty(ZOOKEEPER_CLIENT_CNXN_SOCKET));
        setProperty(SECURE_CLIENT, System.getProperty(SECURE_CLIENT));
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZKClientConfig.java,ZKClientConfig,isSaslClientEnabled,boolean isSaslClientEnabled(),"[119, 121]","{'A597': [(119, 121)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZKClientConfigTest.java,"    public boolean isSaslClientEnabled() {
        return Boolean.valueOf(getProperty(ENABLE_CLIENT_SASL_KEY, ENABLE_CLIENT_SASL_DEFAULT));
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZKClientConfig.java,ZKClientConfig,getLong,"long getLong(String,long)","[137, 143]","{'A592': [(137, 143)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/client/ZKClientConfigTest.java,"    public long getLong(String key, long defaultValue) {
        String value = getProperty(key);
        if (value != null) {
            return Long.parseLong(value.trim());
        }
        return defaultValue;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,isEnabled,boolean isEnabled(),"[80, 83]","{'A583': [(82, 82)], 'A597': [(80, 81), (83, 83)]}","{'A583': 0.25, 'A597': 0.75}",A597,,"    @Deprecated
    public static boolean isEnabled() {
        return Boolean.parseBoolean(System.getProperty(ZKClientConfig.ENABLE_CLIENT_SASL_KEY, ZKClientConfig.ENABLE_CLIENT_SASL_DEFAULT));
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,getSaslState,SaslState getSaslState(),"[106, 108]","{'A596': [(106, 108)]}",{'A596': 1.0},A596,,"    public SaslState getSaslState() {
        return saslState;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,getLoginContext,String getLoginContext(),"[110, 115]","{'A583': [(111, 111), (113, 113)], 'A596': [(110, 110), (112, 112), (114, 115)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public String getLoginContext() {
        if (login != null) {
            return login.getLoginContextName();
        }
        return null;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,getConfigStatus,String getConfigStatus(),"[202, 204]","{'A591': [(202, 204)]}",{'A591': 1.0},A591,,"    public String getConfigStatus() {
        return configStatus;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,isComplete,boolean isComplete(),"[206, 208]","{'A596': [(206, 208)]}",{'A596': 1.0},A596,,"    public boolean isComplete() {
        return (saslState == SaslState.COMPLETE);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,isFailed,boolean isFailed(),"[210, 212]","{'A596': [(210, 212)]}",{'A596': 1.0},A596,,"    public boolean isFailed() {
        return (saslState == SaslState.FAILED);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient.ServerSaslResponseCallback,processResult,"void processResult(int,String,Object,byte[],Stat)","[216, 234]","{'A583': [(216, 216), (228, 229), (231, 231), (233, 233)], 'A596': [(217, 220), (222, 227), (230, 230), (232, 232), (234, 234)], 'A654': [(221, 221)]}","{'A583': 0.2631578947368421, 'A596': 0.6842105263157895, 'A654': 0.05263157894736842}",A596,,"        public void processResult(int rc, String path, Object ctx, byte[] data, Stat stat) {
            // processResult() is used by ClientCnxn's sendThread to respond to
            // data[] contains the Zookeeper Server's SASL token.
            // ctx is the ZooKeeperSaslClient object. We use this object's respondToServer() method
            // to reply to the Zookeeper Server's SASL token
            ZooKeeperSaslClient client = ((ClientCnxn) ctx).getZooKeeperSaslClient();
            if (client == null) {
                LOG.warn(""sasl client was unexpectedly null: cannot respond to Zookeeper server."");
                return;
            }
            byte[] usedata = data;
            if (data != null) {
                LOG.debug(""ServerSaslResponseCallback(): saslToken server response: (length={})"", usedata.length);
            } else {
                usedata = new byte[0];
                LOG.debug(""ServerSaslResponseCallback(): using empty data[] as server response (length={})"", usedata.length);
            }
            client.respondToServer(usedata, (ClientCnxn) ctx);
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,createSaslClient,"SaslClient createSaslClient(String,String,AtomicReference<Login>)","[238, 263]","{'A583': [(238, 239), (260, 260)], 'A596': [(242, 242), (251, 252), (255, 258), (261, 263)], 'A628': [(240, 241), (243, 244), (249, 250), (253, 254), (259, 259)], 'A652': [(245, 248)]}","{'A583': 0.11538461538461539, 'A596': 0.38461538461538464, 'A628': 0.34615384615384615, 'A652': 0.15384615384615385}",A596,,"    private SaslClient createSaslClient(
        final String servicePrincipal,
        final String loginContext,
        final AtomicReference<Login> loginRef) throws LoginException {
        try {
            if (loginRef.get() == null) {
                LOG.debug(""JAAS loginContext is: {}"", loginContext);
                Supplier<CallbackHandler> callbackHandlerSupplier = () -> {
                    return new SaslClientCallbackHandler(null, ""Client"");
                };
                Login l = new Login(loginContext, callbackHandlerSupplier, clientConfig);
                if (loginRef.compareAndSet(null, l)) {
                    l.startThreadIfNeeded();
                }
            }
            return SecurityUtils.createSaslClient(clientConfig, loginRef.get().getSubject(),
                servicePrincipal, ""zookeeper"", ""zk-sasl-md5"", LOG, ""Client"");
        } catch (LoginException e) {
            // We throw LoginExceptions...
            throw e;
        } catch (Exception e) {
            // ...but consume (with a log message) all other types of exceptions.
            LOG.error(""Exception while trying to create SASL client."", e);
            return null;
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,respondToServer,"void respondToServer(byte[],ClientCnxn)","[265, 302]","{'A583': [(278, 281), (290, 290), (292, 292)], 'A596': [(265, 277), (282, 289), (291, 291), (293, 293), (295, 299), (301, 302)], 'A597': [(300, 300)], 'A591': [(294, 294)]}","{'A583': 0.15789473684210525, 'A596': 0.7894736842105263, 'A597': 0.02631578947368421, 'A591': 0.02631578947368421}",A596,,"    public void respondToServer(byte[] serverToken, ClientCnxn cnxn) {
        if (saslClient == null) {
            LOG.error(""saslClient is unexpectedly null. Cannot respond to server's SASL message; ignoring."");
            return;
        }

        if (!(saslClient.isComplete())) {
            try {
                saslToken = createSaslToken(serverToken);
                if (saslToken != null) {
                    sendSaslPacket(saslToken, cnxn);
                }
            } catch (SaslException e) {
                LOG.error(
                    ""SASL authentication failed using login context '{}'."",
                    this.getLoginContext(),
                    e);
                saslState = SaslState.FAILED;
                gotLastPacket = true;
            }
        }

        if (saslClient.isComplete()) {
            // GSSAPI: server sends a final packet after authentication succeeds
            // or fails.
            if ((serverToken == null) && (saslClient.getMechanismName().equals(""GSSAPI""))) {
                gotLastPacket = true;
            }
            // non-GSSAPI: no final packet from server.
            if (!saslClient.getMechanismName().equals(""GSSAPI"")) {
                gotLastPacket = true;
            }
            // SASL authentication is completed, successfully or not:
            // enable the socket's writable flag so that any packets waiting for authentication to complete in
            // the outgoing queue will be sent to the Zookeeper server.
            cnxn.saslCompleted();
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,createSaslToken,byte[] createSaslToken(),"[304, 307]","{'A596': [(304, 307)]}",{'A596': 1.0},A596,,"    private byte[] createSaslToken() throws SaslException {
        saslState = SaslState.INTERMEDIATE;
        return createSaslToken(saslToken);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,createSaslToken,byte[] createSaslToken(byte[]),"[309, 348]","{'A583': [(318, 318), (320, 325), (327, 329), (332, 332), (334, 336), (344, 346)], 'A596': [(309, 317), (319, 319), (326, 326), (330, 331), (337, 340), (342, 343), (347, 348)], 'A646': [(333, 333)], 'A653': [(341, 341)]}","{'A583': 0.425, 'A596': 0.525, 'A646': 0.025, 'A653': 0.025}",A596,,"    private byte[] createSaslToken(final byte[] saslToken) throws SaslException {
        if (saslToken == null) {
            // TODO: introspect about runtime environment (such as jaas.conf)
            saslState = SaslState.FAILED;
            throw new SaslException(""Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null."");
        }

        Subject subject = login.getSubject();
        if (subject != null) {
            synchronized (login) {
                try {
                    final byte[] retval = Subject.doAs(subject, new PrivilegedExceptionAction<byte[]>() {
                        public byte[] run() throws SaslException {
                            LOG.debug(""saslClient.evaluateChallenge(len={})"", saslToken.length);
                            return saslClient.evaluateChallenge(saslToken);
                        }
                    });
                    return retval;
                } catch (PrivilegedActionException e) {
                    String error = ""An error: ("" + e + "") occurred when evaluating Zookeeper Quorum Member's ""
                                   + "" received SASL token."";
                    // Try to provide hints to use about what went wrong so they can fix their configuration.
                    // TODO: introspect about e: look for GSS information.
                    final String UNKNOWN_SERVER_ERROR_TEXT = ""(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)"";
                    if (e.toString().contains(UNKNOWN_SERVER_ERROR_TEXT)) {
                        error += "" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's""
                                 + "" hostname correctly. You may want to try to adding""
                                 + "" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your client's JVMFLAGS environment."";
                    }
                    error += "" Zookeeper Client will go to AUTH_FAILED state."";
                    LOG.error(error);
                    saslState = SaslState.FAILED;
                    throw new SaslException(error, e);
                }
            }
        } else {
            throw new SaslException(""Cannot make SASL token without subject defined. ""
                                    + ""For diagnosis, please look for WARNs and ERRORs in your log related to the Login class."");
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,run,byte[] run(),"[321, 324]","{'A583': [(321, 324)]}",{'A583': 1.0},A583,,"                        public byte[] run() throws SaslException {
                            LOG.debug(""saslClient.evaluateChallenge(len={})"", saslToken.length);
                            return saslClient.evaluateChallenge(saslToken);
                        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,sendSaslPacket,"void sendSaslPacket(byte[],ClientCnxn)","[350, 363]","{'A583': [(350, 350), (359, 359), (361, 361)], 'A596': [(352, 358), (360, 360), (362, 363)], 'A620': [(351, 351)]}","{'A583': 0.21428571428571427, 'A596': 0.7142857142857143, 'A620': 0.07142857142857142}",A596,,"    private void sendSaslPacket(byte[] saslToken, ClientCnxn cnxn) throws SaslException {
        LOG.debug(""ClientCnxn:sendSaslPacket:length={}"", saslToken.length);

        GetSASLRequest request = new GetSASLRequest();
        request.setToken(saslToken);
        SetSASLResponse response = new SetSASLResponse();
        ServerSaslResponseCallback cb = new ServerSaslResponseCallback();

        try {
            cnxn.sendPacket(request, response, cb, ZooDefs.OpCode.sasl);
        } catch (IOException e) {
            throw new SaslException(""Failed to send SASL packet to server."", e);
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,sendSaslPacket,void sendSaslPacket(ClientCnxn),"[365, 377]","{'A583': [(373, 373), (375, 375)], 'A596': [(365, 365), (368, 372), (374, 374), (376, 377)], 'A620': [(366, 367)]}","{'A583': 0.15384615384615385, 'A596': 0.6923076923076923, 'A620': 0.15384615384615385}",A596,,"    private void sendSaslPacket(ClientCnxn cnxn) throws SaslException {
        LOG.debug(""ClientCnxn:sendSaslPacket:length={}"", saslToken.length);

        GetSASLRequest request = new GetSASLRequest();
        request.setToken(createSaslToken());
        SetSASLResponse response = new SetSASLResponse();
        ServerSaslResponseCallback cb = new ServerSaslResponseCallback();
        try {
            cnxn.sendPacket(request, response, cb, ZooDefs.OpCode.sasl);
        } catch (IOException e) {
            throw new SaslException(""Failed to send SASL packet to server due "" + ""to IOException:"", e);
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,getKeeperState,KeeperState getKeeperState(),"[381, 395]","{'A583': [(384, 384)], 'A596': [(381, 383), (385, 395)]}","{'A583': 0.06666666666666667, 'A596': 0.9333333333333333}",A596,,"    public KeeperState getKeeperState() {
        if (saslClient != null) {
            if (saslState == SaslState.FAILED) {
                return KeeperState.AuthFailed;
            }
            if (saslClient.isComplete()) {
                if (saslState == SaslState.INTERMEDIATE) {
                    saslState = SaslState.COMPLETE;
                    return KeeperState.SaslAuthenticated;
                }
            }
        }
        // No event ready to emit yet.
        return null;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,initialize,void initialize(ClientCnxn),"[399, 413]","{'A583': [(407, 407)], 'A596': [(399, 406), (408, 413)]}","{'A583': 0.06666666666666667, 'A596': 0.9333333333333333}",A596,,"    public void initialize(ClientCnxn cnxn) throws SaslException {
        if (saslClient == null) {
            saslState = SaslState.FAILED;
            throw new SaslException(""saslClient failed to initialize properly: it's null."");
        }
        if (saslState == SaslState.INITIAL) {
            if (saslClient.hasInitialResponse()) {
                sendSaslPacket(cnxn);
            } else {
                byte[] emptyToken = new byte[0];
                sendSaslPacket(emptyToken, cnxn);
            }
            saslState = SaslState.INTERMEDIATE;
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperSaslClient.java,ZooKeeperSaslClient,clientTunneledAuthenticationInProgress,boolean clientTunneledAuthenticationInProgress(),"[415, 456]","{'A583': [(416, 418), (424, 428), (438, 438)], 'A596': [(415, 415), (419, 422), (429, 432), (434, 437), (442, 451), (454, 456)], 'A597': [(423, 423)], 'A646': [(433, 433), (439, 441)], 'A620': [(452, 453)]}","{'A583': 0.21428571428571427, 'A596': 0.6190476190476191, 'A597': 0.023809523809523808, 'A646': 0.09523809523809523, 'A620': 0.047619047619047616}",A596,,"    public boolean clientTunneledAuthenticationInProgress() {
        if (!isSASLConfigured) {
            return false;
        }
        // TODO: Rather than checking a disjunction here, should be a single member
        // variable or method in this class to determine whether the client is
        // configured to use SASL. (see also ZOOKEEPER-1455).
        try {
            if ((clientConfig.getJaasConfKey() != null)
                || ((Configuration.getConfiguration() != null)
                    && (Configuration.getConfiguration().getAppConfigurationEntry(
                clientConfig.getProperty(
                    ZKClientConfig.LOGIN_CONTEXT_NAME_KEY,
                    ZKClientConfig.LOGIN_CONTEXT_NAME_KEY_DEFAULT)) != null))) {
                // Client is configured to use a valid login Configuration, so
                // authentication is either in progress, successful, or failed.

                // 1. Authentication hasn't finished yet: we must wait for it to do so.
                if (!isComplete() && !isFailed()) {
                    return true;
                }

                // 2. SASL authentication has succeeded or failed..
                //noinspection RedundantIfStatement
                if (!gotLastPacket) {
                    // ..but still in progress, because there is a final SASL
                    // message from server which must be received.
                    return true;
                }
            }
            // Either client is not configured to use a tunnelled authentication
            // scheme, or tunnelled authentication has completed (successfully or
            // not), and all server SASL messages have been received.
            return false;
        } catch (SecurityException e) {
            // Thrown if the caller does not have permission to retrieve the Configuration.
            // In this case, simply returning false is correct.
            LOG.debug(""Could not retrieve login configuration"", e);

            return false;
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,,ofNullable,Chroot ofNullable(String),"[29, 34]","{'A625': [(29, 34)]}",{'A625': 1.0},A625,,"    static Chroot ofNullable(String chroot) {
        if (chroot == null) {
            return new Root();
        }
        return new NotRoot(chroot);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,Root,prepend,String prepend(String),"[69, 72]","{'A625': [(69, 72)]}",{'A625': 1.0},A625,,"        @Override
        public String prepend(String clientPath) {
            return clientPath;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,Root,strip,String strip(String),"[74, 77]","{'A625': [(74, 77)]}",{'A625': 1.0},A625,,"        @Override
        public String strip(String serverPath) {
            return serverPath;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,Root,interceptCallback,AsyncCallback.StringCallback interceptCallback(AsyncCallback.StringCallback),"[79, 82]","{'A625': [(79, 82)]}",{'A625': 1.0},A625,,"        @Override
        public AsyncCallback.StringCallback interceptCallback(AsyncCallback.StringCallback callback) {
            return callback;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,Root,interceptCallback,AsyncCallback.Create2Callback interceptCallback(AsyncCallback.Create2Callback),"[84, 87]","{'A625': [(84, 87)]}",{'A625': 1.0},A625,,"        @Override
        public AsyncCallback.Create2Callback interceptCallback(AsyncCallback.Create2Callback callback) {
            return callback;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,Root,interceptWatcher,Watcher interceptWatcher(Watcher),"[89, 92]","{'A625': [(89, 92)]}",{'A625': 1.0},A625,,"        @Override
        public Watcher interceptWatcher(Watcher watcher) {
            return watcher;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,prepend,String prepend(String),"[102, 109]","{'A625': [(102, 109)]}",{'A625': 1.0},A625,,"        @Override
        public String prepend(String clientPath) {
            // handle clientPath = ""/""
            if (clientPath.length() == 1) {
                return chroot;
            }
            return chroot + clientPath;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,strip,String strip(String),"[111, 122]","{'A625': [(111, 122)]}",{'A625': 1.0},A625,,"        @Override
        public String strip(String serverPath) {
            if (!serverPath.startsWith(chroot)) {
                String msg = String.format(""server path %s does no start with chroot %s"", serverPath, chroot);
                throw new IllegalArgumentException(msg);
            }
            if (chroot.length() == serverPath.length()) {
                return ""/"";
            } else {
                return serverPath.substring(chroot.length());
            }
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,interceptCallback,AsyncCallback.StringCallback interceptCallback(AsyncCallback.StringCallback),"[124, 127]","{'A625': [(124, 127)]}",{'A625': 1.0},A625,,"        @Override
        public AsyncCallback.StringCallback interceptCallback(AsyncCallback.StringCallback callback) {
            return new ChrootCreateCallback(this, callback);
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,interceptCallback,AsyncCallback.Create2Callback interceptCallback(AsyncCallback.Create2Callback),"[129, 132]","{'A625': [(129, 132)]}",{'A625': 1.0},A625,,"        @Override
        public AsyncCallback.Create2Callback interceptCallback(AsyncCallback.Create2Callback callback) {
            return new ChrootCreateCallback(this, callback);
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,interceptWatcher,Watcher interceptWatcher(Watcher),"[134, 137]","{'A625': [(134, 137)]}",{'A625': 1.0},A625,,"        @Override
        public Watcher interceptWatcher(Watcher watcher) {
            return new ChrootWatcher(this, watcher);
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,equals,boolean equals(Object),"[139, 145]","{'A625': [(139, 145)]}",{'A625': 1.0},A625,,"        @Override
        public boolean equals(Object other) {
            if (other instanceof NotRoot) {
                return Objects.equals(chroot, ((NotRoot) other).chroot);
            }
            return false;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,hashCode,int hashCode(),"[147, 150]","{'A625': [(147, 150)]}",{'A625': 1.0},A625,,"        @Override
        public int hashCode() {
            return Objects.hash(chroot);
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/Chroot.java,NotRoot,toString,String toString(),"[152, 155]","{'A625': [(152, 155)]}",{'A625': 1.0},A625,,"        @Override
        public String toString() {
            return chroot;
        }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ConnectStringParser.java,ConnectStringParser,getChrootPath,String getChrootPath(),"[92, 94]","{'A590': [(92, 94)]}",{'A590': 1.0},A590,,"    public String getChrootPath() {
        return chrootPath;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ConnectStringParser.java,ConnectStringParser,getServerAddresses,ArrayList<InetSocketAddress> getServerAddresses(),"[96, 98]","{'A590': [(96, 98)]}",{'A590': 1.0},A590,,"    public ArrayList<InetSocketAddress> getServerAddresses() {
        return serverAddresses;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ChrootWatcher.java,ChrootWatcher,equals,boolean equals(Object),"[36, 42]","{'A625': [(36, 42)]}",{'A625': 1.0},A625,,"    @Override
    public boolean equals(Object other) {
        if (other instanceof ChrootWatcher) {
            return chroot.equals(((ChrootWatcher) other).chroot) && watcher.equals(((ChrootWatcher) other).watcher);
        }
        return false;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ChrootWatcher.java,ChrootWatcher,hashCode,int hashCode(),"[44, 47]","{'A625': [(44, 47)]}",{'A625': 1.0},A625,,"    @Override
    public int hashCode() {
        return Objects.hash(chroot, watcher);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ChrootWatcher.java,ChrootWatcher,process,void process(WatchedEvent),"[49, 57]","{'A625': [(49, 57)]}",{'A625': 1.0},A625,,"    @Override
    public void process(WatchedEvent event) {
        String path = event.getPath();
        if (path != null) {
            path = chroot.strip(path);
            event = new WatchedEvent(event.getType(), event.getState(), path, event.getZxid());
        }
        watcher.process(event);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,getAllByName,InetAddress[] getAllByName(String),"[86, 89]","{'A613': [(86, 89)]}",{'A613': 1.0},A613,,"            @Override
            public InetAddress[] getAllByName(String name) throws UnknownHostException {
                return InetAddress.getAllByName(name);
            }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,getAllByName,InetAddress[] getAllByName(String),"[120, 123]","{'A613': [(120, 123)]}",{'A613': 1.0},A613,,"            @Override
            public InetAddress[] getAllByName(String name) throws UnknownHostException {
                return InetAddress.getAllByName(name);
            }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,init,"void init(Collection<InetSocketAddress>,long,Resolver)","[127, 136]","{'A583': [(131, 131)], 'A613': [(127, 130), (132, 133), (135, 135)], 'A597': [(134, 134), (136, 136)]}","{'A583': 0.1, 'A613': 0.7, 'A597': 0.2}",A613,,"    private void init(Collection<InetSocketAddress> serverAddresses, long randomnessSeed, Resolver resolver) {
        this.sourceOfRandomness = new Random(randomnessSeed);
        this.resolver = resolver;
        if (serverAddresses.isEmpty()) {
            throw new IllegalArgumentException(""A HostProvider may not be empty!"");
        }
        this.serverAddresses = shuffle(serverAddresses);
        currentIndex = -1;
        lastIndex = -1;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,resolve,InetSocketAddress resolve(InetSocketAddress),"[138, 151]","{'A590': [(144, 144), (150, 150)], 'A613': [(138, 143), (145, 149), (151, 151)]}","{'A590': 0.14285714285714285, 'A613': 0.8571428571428571}",A613,,"    private InetSocketAddress resolve(InetSocketAddress address) {
        try {
            String curHostString = address.getHostString();
            List<InetAddress> resolvedAddresses = new ArrayList<>(Arrays.asList(this.resolver.getAllByName(curHostString)));
            if (resolvedAddresses.isEmpty()) {
                return address;
            }
            Collections.shuffle(resolvedAddresses);
            return new InetSocketAddress(resolvedAddresses.get(0), address.getPort());
        } catch (UnknownHostException e) {
            LOG.error(""Unable to resolve address: {}"", address.toString(), e);
            return address;
        }
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,shuffle,List<InetSocketAddress> shuffle(Collection<InetSocketAddress>),"[153, 158]","{'A613': [(153, 155), (158, 158)], 'A597': [(156, 157)]}","{'A613': 0.6666666666666666, 'A597': 0.3333333333333333}",A613,,"    private List<InetSocketAddress> shuffle(Collection<InetSocketAddress> serverAddresses) {
        List<InetSocketAddress> tmpList = new ArrayList<>(serverAddresses.size());
        tmpList.addAll(serverAddresses);
        Collections.shuffle(tmpList, sourceOfRandomness);
        return tmpList;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,updateServerList,"boolean updateServerList(Collection<InetSocketAddress>,InetSocketAddress)","[182, 282]","{'A583': [(184, 185), (188, 188), (214, 217), (246, 246), (267, 267)], 'A590': [(189, 189)], 'A613': [(186, 187), (212, 212), (229, 231), (233, 233), (273, 273), (277, 277)], 'A597': [(182, 182), (190, 190), (221, 222), (236, 236), (247, 249), (252, 252), (269, 269), (271, 271), (275, 276)], 'A593': [(183, 183), (192, 211), (213, 213), (218, 220), (223, 228), (232, 232), (234, 235), (237, 245), (250, 251), (253, 266), (268, 268), (270, 270), (272, 272), (274, 274), (278, 282)], 'A591': [(191, 191)]}","{'A583': 0.0891089108910891, 'A590': 0.009900990099009901, 'A613': 0.0891089108910891, 'A597': 0.12871287128712872, 'A593': 0.6732673267326733, 'A591': 0.009900990099009901}",A593,,"    @Override
    public synchronized boolean updateServerList(
        Collection<InetSocketAddress> serverAddresses,
        InetSocketAddress currentHost) {
        List<InetSocketAddress> shuffledList = shuffle(serverAddresses);
        if (shuffledList.isEmpty()) {
            throw new IllegalArgumentException(""A HostProvider may not be empty!"");
        }
        // Check if client's current server is in the new list of servers
        boolean myServerInNewConfig = false;

        InetSocketAddress myServer = currentHost;

        // choose ""current"" server according to the client rebalancing algorithm
        if (reconfigMode) {
            myServer = next(0);
        }

        // if the client is not currently connected to any server
        if (myServer == null) {
            // reconfigMode = false (next shouldn't return null).
            if (lastIndex >= 0) {
                // take the last server to which we were connected
                myServer = this.serverAddresses.get(lastIndex);
            } else {
                // take the first server on the list
                myServer = this.serverAddresses.get(0);
            }
        }

        for (InetSocketAddress addr : shuffledList) {
            if (addr.getPort() == myServer.getPort()
                && ((addr.getAddress() != null
                     && myServer.getAddress() != null
                     && addr.getAddress().equals(myServer.getAddress()))
                    || addr.getHostString().equals(myServer.getHostString()))) {
                myServerInNewConfig = true;
                break;
            }
        }

        reconfigMode = true;

        newServers.clear();
        oldServers.clear();
        // Divide the new servers into oldServers that were in the previous list
        // and newServers that were not in the previous list
        for (InetSocketAddress address : shuffledList) {
            if (this.serverAddresses.contains(address)) {
                oldServers.add(address);
            } else {
                newServers.add(address);
            }
        }

        int numOld = oldServers.size();
        int numNew = newServers.size();

        // number of servers increased
        if (numOld + numNew > this.serverAddresses.size()) {
            if (myServerInNewConfig) {
                // my server is in new config, but load should be decreased.
                // Need to decide if this client
                // is moving to one of the new servers
                if (sourceOfRandomness.nextFloat() <= (1 - ((float) this.serverAddresses.size()) / (numOld + numNew))) {
                    pNew = 1;
                    pOld = 0;
                } else {
                    // do nothing special - stay with the current server
                    reconfigMode = false;
                }
            } else {
                // my server is not in new config, and load on old servers must
                // be decreased, so connect to
                // one of the new servers
                pNew = 1;
                pOld = 0;
            }
        } else { // number of servers stayed the same or decreased
            if (myServerInNewConfig) {
                // my server is in new config, and load should be increased, so
                // stay with this server and do nothing special
                reconfigMode = false;
            } else {
                pOld = ((float) (numOld * (this.serverAddresses.size() - (numOld + numNew))))
                       / ((numOld + numNew) * (this.serverAddresses.size() - numOld));
                pNew = 1 - pOld;
            }
        }

        if (!reconfigMode) {
            currentIndex = shuffledList.indexOf(getServerAtCurrentIndex());
        } else {
            currentIndex = -1;
        }
        this.serverAddresses = shuffledList;
        currentIndexOld = -1;
        currentIndexNew = -1;
        lastIndex = currentIndex;
        return reconfigMode;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,getServerAtIndex,InetSocketAddress getServerAtIndex(int),"[284, 289]","{'A583': [(285, 288)], 'A593': [(284, 284), (289, 289)]}","{'A583': 0.6666666666666666, 'A593': 0.3333333333333333}",A583,,"    public synchronized InetSocketAddress getServerAtIndex(int i) {
        if (i < 0 || i >= serverAddresses.size()) {
            return null;
        }
        return serverAddresses.get(i);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,getServerAtCurrentIndex,InetSocketAddress getServerAtCurrentIndex(),"[291, 293]","{'A583': [(292, 292)], 'A590': [(293, 293)], 'A593': [(291, 291)]}","{'A583': 0.3333333333333333, 'A590': 0.3333333333333333, 'A593': 0.3333333333333333}",A583,,"    public synchronized InetSocketAddress getServerAtCurrentIndex() {
        return getServerAtIndex(currentIndex);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,size,int size(),"[295, 297]","{'A590': [(296, 297)], 'A597': [(295, 295)]}","{'A590': 0.6666666666666666, 'A597': 0.3333333333333333}",A590,,"    public synchronized int size() {
        return serverAddresses.size();
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,nextHostInReconfigMode,InetSocketAddress nextHostInReconfigMode(),"[312, 332]","{'A583': [(320, 320)], 'A597': [(312, 319), (321, 332)]}","{'A583': 0.047619047619047616, 'A597': 0.9523809523809523}",A597,,"    private InetSocketAddress nextHostInReconfigMode() {
        boolean takeNew = (sourceOfRandomness.nextFloat() <= pNew);

        // take one of the new servers if it is possible (there are still such
        // servers we didn't try),
        // and either the probability tells us to connect to one of the new
        // servers or if we already
        // tried all the old servers
        if (((currentIndexNew + 1) < newServers.size()) && (takeNew || (currentIndexOld + 1) >= oldServers.size())) {
            ++currentIndexNew;
            return newServers.get(currentIndexNew);
        }

        // start taking old servers
        if ((currentIndexOld + 1) < oldServers.size()) {
            ++currentIndexOld;
            return oldServers.get(currentIndexOld);
        }

        return null;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,next,InetSocketAddress next(long),"[334, 369]","{'A583': [(338, 338), (342, 343), (348, 348), (352, 352), (355, 355)], 'A590': [(334, 334), (359, 359), (361, 367), (369, 369)], 'A613': [(368, 368)], 'A597': [(335, 337), (339, 340), (345, 347), (349, 351), (353, 354), (356, 358), (360, 360)], 'A593': [(341, 341), (344, 344)]}","{'A583': 0.16666666666666666, 'A590': 0.2777777777777778, 'A613': 0.027777777777777776, 'A597': 0.4722222222222222, 'A593': 0.05555555555555555}",A597,,"    public InetSocketAddress next(long spinDelay) {
        boolean needToSleep = false;
        InetSocketAddress addr;

        synchronized (this) {
            if (reconfigMode) {
                addr = nextHostInReconfigMode();
                if (addr != null) {
                    currentIndex = serverAddresses.indexOf(addr);
                    return resolve(addr);
                }
                //tried all servers and couldn't connect
                reconfigMode = false;
                needToSleep = (spinDelay > 0);
            }
            ++currentIndex;
            if (currentIndex == serverAddresses.size()) {
                currentIndex = 0;
            }
            addr = serverAddresses.get(currentIndex);
            needToSleep = needToSleep || (currentIndex == lastIndex && spinDelay > 0);
            if (lastIndex == -1) {
                // We don't want to sleep on the first ever connect attempt.
                lastIndex = 0;
            }
        }
        if (needToSleep) {
            try {
                Thread.sleep(spinDelay);
            } catch (InterruptedException e) {
                LOG.warn(""Unexpected exception"", e);
            }
        }

        return resolve(addr);
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/StaticHostProvider.java,StaticHostProvider,onConnected,void onConnected(),"[371, 374]","{'A590': [(372, 372), (374, 374)], 'A597': [(371, 371), (373, 373)]}","{'A590': 0.5, 'A597': 0.5}",A590,,"    public synchronized void onConnected() {
        lastIndex = currentIndex;
        reconfigMode = false;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getConnectString,String getConnectString(),"[61, 63]","{'A625': [(61, 63)]}",{'A625': 1.0},A625,,"    public String getConnectString() {
        return connectString;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getSessionTimeoutMs,int getSessionTimeoutMs(),"[65, 67]","{'A625': [(65, 67)]}",{'A625': 1.0},A625,,"    public int getSessionTimeoutMs() {
        return (int) Long.min(Integer.MAX_VALUE, sessionTimeout.toMillis());
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getDefaultWatcher,Watcher getDefaultWatcher(),"[69, 71]","{'A625': [(69, 71)]}",{'A625': 1.0},A625,,"    public Watcher getDefaultWatcher() {
        return defaultWatcher;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getHostProvider,"Function<Collection<InetSocketAddress>, HostProvider> getHostProvider()","[73, 75]","{'A625': [(73, 75)]}",{'A625': 1.0},A625,,"    public Function<Collection<InetSocketAddress>, HostProvider> getHostProvider() {
        return hostProvider;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,isCanBeReadOnly,boolean isCanBeReadOnly(),"[77, 79]","{'A625': [(77, 79)]}",{'A625': 1.0},A625,,"    public boolean isCanBeReadOnly() {
        return canBeReadOnly;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getSessionId,long getSessionId(),"[81, 83]","{'A625': [(81, 83)]}",{'A625': 1.0},A625,,"    public long getSessionId() {
        return sessionId;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getSessionPasswd,byte[] getSessionPasswd(),"[85, 88]","{'A625': [(85, 88)]}",{'A625': 1.0},A625,,"    @SuppressFBWarnings({""EI_EXPOSE_REP"", ""EI_EXPOSE_REP2""})
    public byte[] getSessionPasswd() {
        return sessionPasswd;
    }
"
org.apache.zookeeper.client,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/client/ZooKeeperOptions.java,ZooKeeperOptions,getClientConfig,ZKClientConfig getClientConfig(),"[90, 92]","{'A625': [(90, 92)]}",{'A625': 1.0},A625,,"    public ZKClientConfig getClientConfig() {
        return clientConfig;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateOptions.java,CreateOptions,getCreateMode,CreateMode getCreateMode(),"[34, 36]","{'A625': [(34, 36)]}",{'A625': 1.0},A625,,"    public CreateMode getCreateMode() {
        return createMode;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateOptions.java,CreateOptions,getAcl,List<ACL> getAcl(),"[38, 40]","{'A625': [(38, 40)]}",{'A625': 1.0},A625,,"    public List<ACL> getAcl() {
        return acl;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateOptions.java,CreateOptions,getTtl,long getTtl(),"[42, 44]","{'A625': [(42, 44)]}",{'A625': 1.0},A625,,"    public long getTtl() {
        return ttl;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateOptions.java,CreateOptions,newBuilder,"Builder newBuilder(List<ACL>,CreateMode)","[55, 57]","{'A625': [(55, 57)]}",{'A625': 1.0},A625,,"    public static Builder newBuilder(List<ACL> acl, CreateMode createMode) {
        return new Builder(createMode, acl);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateOptions.java,CreateOptions.Builder,withTtl,Builder withTtl(long),"[79, 82]","{'A625': [(79, 82)]}",{'A625': 1.0},A625,,"        public Builder withTtl(long ttl) {
            this.ttl = ttl;
            return this;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateOptions.java,CreateOptions.Builder,build,CreateOptions build(),"[84, 86]","{'A625': [(84, 86)]}",{'A625': 1.0},A625,,"        public CreateOptions build() {
            return new CreateOptions(createMode, acl, ttl);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/DeleteContainerRequest.java,DeleteContainerRequest,getPath,String getPath(),"[37, 39]","{'A583': [(37, 39)]}",{'A583': 1.0},A583,,"    public String getPath() {
        return path;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/DeleteContainerRequest.java,DeleteContainerRequest,serialize,"void serialize(OutputArchive,String)","[41, 44]","{'A583': [(41, 44)]}",{'A583': 1.0},A583,,"    @Override
    public void serialize(OutputArchive archive, String tag) throws IOException {
        archive.writeBuffer(path.getBytes(StandardCharsets.UTF_8), ""path"");
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/DeleteContainerRequest.java,DeleteContainerRequest,deserialize,"void deserialize(InputArchive,String)","[46, 50]","{'A583': [(46, 50)]}",{'A583': 1.0},A583,,"    @Override
    public void deserialize(InputArchive archive, String tag) throws IOException {
        byte[] bytes = archive.readBuffer(""path"");
        path = new String(bytes, StandardCharsets.UTF_8);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,getCount,long getCount(),"[84, 86]","{'A596': [(86, 86)], 'A641': [(84, 85)]}","{'A596': 0.3333333333333333, 'A641': 0.6666666666666666}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public long getCount() {
        return getValue(countStr);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,setCount,void setCount(long),"[94, 96]","{'A641': [(94, 96)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public void setCount(long count) {
        setValue(countStr, count);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,getCountHardLimit,long getCountHardLimit(),"[103, 105]","{'A641': [(103, 105)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public long getCountHardLimit() {
        return getValue(countHardLimitStr);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,setCountHardLimit,void setCountHardLimit(long),"[112, 114]","{'A596': [(114, 114)], 'A641': [(112, 113)]}","{'A596': 0.3333333333333333, 'A641': 0.6666666666666666}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public void setCountHardLimit(long count) {
        setValue(countHardLimitStr, count);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,getBytes,long getBytes(),"[121, 123]","{'A596': [(121, 121), (123, 123)], 'A641': [(122, 122)]}","{'A596': 0.6666666666666666, 'A641': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public long getBytes() {
        return getValue(byteStr);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,setBytes,void setBytes(long),"[131, 133]","{'A596': [(131, 131)], 'A641': [(132, 133)]}","{'A596': 0.3333333333333333, 'A641': 0.6666666666666666}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public void setBytes(long bytes) {
        setValue(byteStr, bytes);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,getByteHardLimit,long getByteHardLimit(),"[140, 142]","{'A641': [(140, 142)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public long getByteHardLimit() {
        return getValue(byteHardLimitStr);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,setByteHardLimit,void setByteHardLimit(long),"[149, 151]","{'A641': [(149, 151)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public void setByteHardLimit(long bytes) {
        setValue(byteHardLimitStr, bytes);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,getValue,long getValue(String),"[159, 162]","{'A641': [(159, 162)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    private long getValue(String key) {
        Long val = this.stats.get(key);
        return val == null ? -1 : val.longValue();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,setValue,"void setValue(String,long)","[170, 172]","{'A596': [(172, 172)], 'A641': [(170, 171)]}","{'A596': 0.3333333333333333, 'A641': 0.6666666666666666}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    private void setValue(String key, long value) {
        this.stats.put(key, value);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,toString,String toString(),"[186, 214]","{'A596': [(214, 214)], 'A641': [(186, 213)]}","{'A596': 0.034482758620689655, 'A641': 0.9655172413793104}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    @Override
    public String toString() {
        StringBuilder buf = new StringBuilder();
        ArrayList<String> keys = new ArrayList<>(stats.keySet());

        // Special handling for count=,byte= to enforce them coming first
        // for backwards compatibility
        keys.remove(countStr);
        keys.remove(byteStr);
        buf.append(countStr);
        buf.append(""="");
        buf.append(getCount());
        buf.append("","");
        buf.append(byteStr);
        buf.append(""="");
        buf.append(getBytes());
        if (!keys.isEmpty()) {
            // Add extra = to trick old parsing code so it will ignore new flags
            buf.append(""="");
            Collections.sort(keys);
            for (String key : keys) {
                buf.append("";"");
                buf.append(key);
                buf.append(""="");
                buf.append(stats.get(key));
            }
        }
        return buf.toString();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,getStatsBytes,byte[] getStatsBytes(),"[216, 218]","{'A641': [(216, 218)]}",{'A641': 1.0},A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    public byte[] getStatsBytes() {
        return toString().getBytes(StandardCharsets.UTF_8);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,equals,boolean equals(Object),"[220, 230]","{'A586': [(220, 230)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    @Override
    public boolean equals(final Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        final StatsTrack that = (StatsTrack) o;
        return Objects.equals(stats, that.stats);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/StatsTrack.java,StatsTrack,hashCode,int hashCode(),"[232, 235]","{'A586': [(232, 235)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/StatsTrackTest.java,"    @Override
    public int hashCode() {
        return Objects.hash(stats);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,iterator,Iterator<Op> iterator(),"[59, 62]","{'A626': [(59, 60), (62, 62)], 'A583': [(61, 61)]}","{'A626': 0.75, 'A583': 0.25}",A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    @Override
    public Iterator<Op> iterator() {
        return ops.iterator();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,add,void add(Op),"[64, 67]","{'A626': [(64, 67)]}",{'A626': 1.0},A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    public void add(Op op) throws IllegalArgumentException {
        setOrCheckOpKind(op.getKind());
        ops.add(op);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,size,int size(),"[69, 71]","{'A626': [(69, 71)]}",{'A626': 1.0},A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    public int size() {
        return ops.size();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,getOpKind,Op.OpKind getOpKind(),"[77, 79]","{'A626': [(77, 79)]}",{'A626': 1.0},A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    public Op.OpKind getOpKind() {
        return opKind;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,setOrCheckOpKind,void setOrCheckOpKind(Op.OpKind),"[81, 88]","{'A626': [(81, 84), (87, 88)], 'A583': [(85, 86)]}","{'A626': 0.75, 'A583': 0.25}",A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    private void setOrCheckOpKind(Op.OpKind ok) throws IllegalArgumentException {
        if (opKind == null) {
            opKind = ok;
        } else if (ok != opKind) {
            throw new IllegalArgumentException(""Mixing read and write operations (transactions)""
                                               + "" is not allowed in a multi request."");
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,serialize,"void serialize(OutputArchive,String)","[90, 114]","{'A626': [(90, 96), (110, 114)], 'A583': [(97, 109)]}","{'A626': 0.48, 'A583': 0.52}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    @Override
    public void serialize(OutputArchive archive, String tag) throws IOException {
        archive.startRecord(this, tag);
        for (Op op : ops) {
            MultiHeader h = new MultiHeader(op.getType(), false, -1);
            h.serialize(archive, tag);
            switch (op.getType()) {
            case ZooDefs.OpCode.create:
            case ZooDefs.OpCode.create2:
            case ZooDefs.OpCode.createTTL:
            case ZooDefs.OpCode.createContainer:
            case ZooDefs.OpCode.delete:
            case ZooDefs.OpCode.setData:
            case ZooDefs.OpCode.check:
            case ZooDefs.OpCode.getChildren:
            case ZooDefs.OpCode.getData:
                op.toRequestRecord().serialize(archive, tag);
                break;
            default:
                throw new IOException(""Invalid type of op"");
            }
        }
        new MultiHeader(-1, true, -1).serialize(archive, tag);
        archive.endRecord(this, tag);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,deserialize,"void deserialize(InputArchive,String)","[116, 175]","{'A626': [(116, 123), (168, 175)], 'A583': [(124, 128), (135, 167)], 'A625': [(129, 134)]}","{'A626': 0.26666666666666666, 'A583': 0.6333333333333333, 'A625': 0.1}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    @Override
    public void deserialize(InputArchive archive, String tag) throws IOException {
        archive.startRecord(tag);
        MultiHeader h = new MultiHeader();
        h.deserialize(archive, tag);
        try {
            while (!h.getDone()) {
                switch (h.getType()) {
                case ZooDefs.OpCode.create:
                case ZooDefs.OpCode.create2:
                case ZooDefs.OpCode.createContainer:
                    CreateRequest cr = new CreateRequest();
                    cr.deserialize(archive, tag);
                    CreateMode createMode = CreateMode.fromFlag(cr.getFlags(), null);
                    if (createMode == null) {
                        throw new IOException(""invalid flag "" + cr.getFlags() + "" for create mode"");
                    }
                    CreateOptions options = CreateOptions.newBuilder(cr.getAcl(), createMode).build();
                    add(Op.create(cr.getPath(), cr.getData(), options, h.getType()));
                    break;
                case ZooDefs.OpCode.createTTL:
                    CreateTTLRequest crTtl = new CreateTTLRequest();
                    crTtl.deserialize(archive, tag);
                    add(Op.create(crTtl.getPath(), crTtl.getData(), crTtl.getAcl(), crTtl.getFlags(), crTtl.getTtl()));
                    break;
                case ZooDefs.OpCode.delete:
                    DeleteRequest dr = new DeleteRequest();
                    dr.deserialize(archive, tag);
                    add(Op.delete(dr.getPath(), dr.getVersion()));
                    break;
                case ZooDefs.OpCode.setData:
                    SetDataRequest sdr = new SetDataRequest();
                    sdr.deserialize(archive, tag);
                    add(Op.setData(sdr.getPath(), sdr.getData(), sdr.getVersion()));
                    break;
                case ZooDefs.OpCode.check:
                    CheckVersionRequest cvr = new CheckVersionRequest();
                    cvr.deserialize(archive, tag);
                    add(Op.check(cvr.getPath(), cvr.getVersion()));
                    break;
                case ZooDefs.OpCode.getChildren:
                    GetChildrenRequest gcr = new GetChildrenRequest();
                    gcr.deserialize(archive, tag);
                    add(Op.getChildren(gcr.getPath()));
                    break;
                case ZooDefs.OpCode.getData:
                    GetDataRequest gdr = new GetDataRequest();
                    gdr.deserialize(archive, tag);
                    add(Op.getData(gdr.getPath()));
                    break;
                default:
                    throw new IOException(""Invalid type of op"");
                }
                h.deserialize(archive, tag);
            }
        } catch (IllegalArgumentException e) {
            throw new IOException(""Mixing different kind of ops"");
        }
        archive.endRecord(tag);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,equals,boolean equals(Object),"[177, 205]","{'A626': [(177, 178), (185, 205)], 'A583': [(179, 184)]}","{'A626': 0.7931034482758621, 'A583': 0.20689655172413793}",A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (!(o instanceof MultiOperationRecord)) {
            return false;
        }

        MultiOperationRecord that = (MultiOperationRecord) o;

        if (ops != null) {
            Iterator<Op> other = that.ops.iterator();
            for (Op op : ops) {
                boolean hasMoreData = other.hasNext();
                if (!hasMoreData) {
                    return false;
                }
                Op otherOp = other.next();
                if (!op.equals(otherOp)) {
                    return false;
                }
            }
            return !other.hasNext();
        } else {
            return that.ops == null;
        }

    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/MultiOperationRecord.java,MultiOperationRecord,hashCode,int hashCode(),"[207, 214]","{'A626': [(207, 214)]}",{'A626': 1.0},A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/MultiOperationRecordTest.java,"    @Override
    public int hashCode() {
        int h = 1023;
        for (Op op : ops) {
            h = h * 25 + op.hashCode();
        }
        return h;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal,getServerPrincipal,"String getServerPrincipal(InetSocketAddress,ZKClientConfig)","[40, 42]","{'A664': [(40, 42)]}",{'A664': 1.0},A664,,"    static String getServerPrincipal(InetSocketAddress addr, ZKClientConfig clientConfig) {
        return getServerPrincipal(new WrapperInetSocketAddress(addr), clientConfig);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal,getServerPrincipal,"String getServerPrincipal(WrapperInetSocketAddress,ZKClientConfig)","[50, 90]","{'A583': [(56, 57), (62, 63), (68, 72)], 'A664': [(50, 50), (58, 61), (64, 67), (73, 85), (87, 90)], 'A670': [(51, 55)], 'A620': [(86, 86)]}","{'A583': 0.21951219512195122, 'A664': 0.6341463414634146, 'A670': 0.12195121951219512, 'A620': 0.024390243902439025}",A664,,"    static String getServerPrincipal(WrapperInetSocketAddress addr, ZKClientConfig clientConfig) {
        String configuredServerPrincipal = clientConfig.getProperty(ZKClientConfig.ZOOKEEPER_SERVER_PRINCIPAL);
        if (configuredServerPrincipal != null) {
            // If server principal is already configured then return it
            return configuredServerPrincipal;
        }
        String principalUserName = clientConfig.getProperty(
            ZKClientConfig.ZK_SASL_CLIENT_USERNAME,
            ZKClientConfig.ZK_SASL_CLIENT_USERNAME_DEFAULT);
        String hostName = addr.getHostName();

        boolean canonicalize = true;
        String canonicalizeText = clientConfig.getProperty(
            ZKClientConfig.ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME,
            ZKClientConfig.ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME_DEFAULT);
        try {
            canonicalize = Boolean.parseBoolean(canonicalizeText);
        } catch (IllegalArgumentException ea) {
            LOG.warn(
                ""Could not parse config {} \""{}\"" into a boolean using default {}"",
                ZKClientConfig.ZK_SASL_CLIENT_CANONICALIZE_HOSTNAME,
                canonicalizeText,
                canonicalize);
        }

        if (canonicalize) {
            WrapperInetAddress ia = addr.getAddress();
            if (ia == null) {
                throw new IllegalArgumentException(""Unable to canonicalize address "" + addr + "" because it's not resolvable"");
            }

            String canonicalHostName = ia.getCanonicalHostName();
            //avoid using literal IP address when security check fails
            if (!canonicalHostName.equals(ia.getHostAddress())) {
                hostName = canonicalHostName;
            }
            LOG.debug(""Canonicalized address to {}"", hostName);
        }
        String serverPrincipal = principalUserName + ""/"" + hostName;
        return serverPrincipal;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal.WrapperInetSocketAddress,getHostName,String getHostName(),"[104, 106]","{'A664': [(104, 106)]}",{'A664': 1.0},A664,,"        public String getHostName() {
            return addr.getHostName();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal.WrapperInetSocketAddress,getAddress,WrapperInetAddress getAddress(),"[108, 111]","{'A664': [(108, 111)]}",{'A664': 1.0},A664,,"        public WrapperInetAddress getAddress() {
            InetAddress ia = addr.getAddress();
            return ia == null ? null : new WrapperInetAddress(ia);
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal.WrapperInetSocketAddress,toString,String toString(),"[113, 116]","{'A664': [(113, 116)]}",{'A664': 1.0},A664,,"        @Override
        public String toString() {
            return addr.toString();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal.WrapperInetAddress,getCanonicalHostName,String getCanonicalHostName(),"[132, 134]","{'A664': [(132, 134)]}",{'A664': 1.0},A664,,"        public String getCanonicalHostName() {
            return ia.getCanonicalHostName();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal.WrapperInetAddress,getHostAddress,String getHostAddress(),"[136, 138]","{'A664': [(136, 138)]}",{'A664': 1.0},A664,,"        public String getHostAddress() {
            return ia.getHostAddress();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslServerPrincipal.java,SaslServerPrincipal.WrapperInetAddress,toString,String toString(),"[140, 143]","{'A664': [(140, 143)]}",{'A664': 1.0},A664,,"        @Override
        public String toString() {
            return ia.toString();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,ruok,"void ruok(String,int)","[37, 69]","{'A591': [(37, 37), (39, 55), (57, 57), (68, 69)], 'A602': [(56, 56)], 'A597': [(38, 38), (58, 67)]}","{'A591': 0.6363636363636364, 'A602': 0.030303030303030304, 'A597': 0.3333333333333333}",A591,,"    public static void ruok(String host, int port) {
        Socket s = null;
        try {
            byte[] reqBytes = new byte[4];
            ByteBuffer req = ByteBuffer.wrap(reqBytes);
            req.putInt(ByteBuffer.wrap(""ruok"".getBytes()).getInt());
            s = new Socket();
            s.setSoLinger(false, 10);
            s.setSoTimeout(20000);
            s.connect(new InetSocketAddress(host, port));

            InputStream is = s.getInputStream();
            OutputStream os = s.getOutputStream();

            os.write(reqBytes);

            byte[] resBytes = new byte[4];

            int rc = is.read(resBytes);
            String retv = new String(resBytes, UTF_8);
            System.out.println(""rc="" + rc + "" retv="" + retv);
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (IOException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,dump,"void dump(String,int)","[71, 103]","{'A591': [(71, 71), (73, 89), (91, 91), (102, 103)], 'A602': [(90, 90)], 'A597': [(72, 72), (92, 101)]}","{'A591': 0.6363636363636364, 'A602': 0.030303030303030304, 'A597': 0.3333333333333333}",A591,,"    public static void dump(String host, int port) {
        Socket s = null;
        try {
            byte[] reqBytes = new byte[4];
            ByteBuffer req = ByteBuffer.wrap(reqBytes);
            req.putInt(ByteBuffer.wrap(""dump"".getBytes()).getInt());
            s = new Socket();
            s.setSoLinger(false, 10);
            s.setSoTimeout(20000);
            s.connect(new InetSocketAddress(host, port));

            InputStream is = s.getInputStream();
            OutputStream os = s.getOutputStream();

            os.write(reqBytes);

            byte[] resBytes = new byte[1024];

            int rc = is.read(resBytes);
            String retv = new String(resBytes, UTF_8);
            System.out.println(""rc="" + rc + "" retv="" + retv);
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (IOException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,stat,"void stat(String,int)","[105, 137]","{'A591': [(105, 105), (107, 123), (125, 125), (136, 137)], 'A602': [(124, 124)], 'A597': [(106, 106), (126, 135)]}","{'A591': 0.6363636363636364, 'A602': 0.030303030303030304, 'A597': 0.3333333333333333}",A591,,"    public static void stat(String host, int port) {
        Socket s = null;
        try {
            byte[] reqBytes = new byte[4];
            ByteBuffer req = ByteBuffer.wrap(reqBytes);
            req.putInt(ByteBuffer.wrap(""stat"".getBytes()).getInt());
            s = new Socket();
            s.setSoLinger(false, 10);
            s.setSoTimeout(20000);
            s.connect(new InetSocketAddress(host, port));

            InputStream is = s.getInputStream();
            OutputStream os = s.getOutputStream();

            os.write(reqBytes);

            byte[] resBytes = new byte[1024];

            int rc = is.read(resBytes);
            String retv = new String(resBytes, UTF_8);
            System.out.println(""rc="" + rc + "" retv="" + retv);
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (IOException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,kill,"void kill(String,int)","[139, 170]","{'A591': [(139, 139), (141, 156), (158, 158), (169, 170)], 'A602': [(157, 157)], 'A597': [(140, 140), (159, 168)]}","{'A591': 0.625, 'A602': 0.03125, 'A597': 0.34375}",A591,,"    public static void kill(String host, int port) {
        Socket s = null;
        try {
            byte[] reqBytes = new byte[4];
            ByteBuffer req = ByteBuffer.wrap(reqBytes);
            req.putInt(ByteBuffer.wrap(""kill"".getBytes()).getInt());
            s = new Socket();
            s.setSoLinger(false, 10);
            s.setSoTimeout(20000);
            s.connect(new InetSocketAddress(host, port));

            InputStream is = s.getInputStream();
            OutputStream os = s.getOutputStream();

            os.write(reqBytes);
            byte[] resBytes = new byte[4];

            int rc = is.read(resBytes);
            String retv = new String(resBytes, UTF_8);
            System.out.println(""rc="" + rc + "" retv="" + retv);
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (IOException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,setTraceMask,"void setTraceMask(String,int,String)","[172, 211]","{'A583': [(196, 198)], 'A591': [(172, 172), (174, 195), (199, 199), (210, 211)], 'A597': [(173, 173), (200, 209)]}","{'A583': 0.075, 'A591': 0.65, 'A597': 0.275}",A591,,"    public static void setTraceMask(String host, int port, String traceMaskStr) {
        Socket s = null;
        try {
            byte[] reqBytes = new byte[12];
            ByteBuffer req = ByteBuffer.wrap(reqBytes);
            long traceMask = Long.parseLong(traceMaskStr, 8);
            req.putInt(ByteBuffer.wrap(""stmk"".getBytes()).getInt());
            req.putLong(traceMask);

            s = new Socket();
            s.setSoLinger(false, 10);
            s.setSoTimeout(20000);
            s.connect(new InetSocketAddress(host, port));

            InputStream is = s.getInputStream();
            OutputStream os = s.getOutputStream();

            os.write(reqBytes);

            byte[] resBytes = new byte[8];

            int rc = is.read(resBytes);
            ByteBuffer res = ByteBuffer.wrap(resBytes);
            long retv = res.getLong();
            System.out.println(""rc="" + rc
                               + "" retv=0"" + Long.toOctalString(retv)
                               + "" masks=0"" + Long.toOctalString(traceMask));
            assert (retv == traceMask);
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (IOException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,getTraceMask,"void getTraceMask(String,int)","[213, 247]","{'A583': [(235, 235)], 'A591': [(213, 213), (215, 234), (246, 247)], 'A597': [(214, 214), (236, 245)]}","{'A583': 0.02857142857142857, 'A591': 0.6571428571428571, 'A597': 0.3142857142857143}",A591,,"    public static void getTraceMask(String host, int port) {
        Socket s = null;
        try {
            byte[] reqBytes = new byte[12];
            ByteBuffer req = ByteBuffer.wrap(reqBytes);
            req.putInt(ByteBuffer.wrap(""gtmk"".getBytes()).getInt());

            s = new Socket();
            s.setSoLinger(false, 10);
            s.setSoTimeout(20000);
            s.connect(new InetSocketAddress(host, port));

            InputStream is = s.getInputStream();
            OutputStream os = s.getOutputStream();

            os.write(reqBytes);

            byte[] resBytes = new byte[8];

            int rc = is.read(resBytes);
            ByteBuffer res = ByteBuffer.wrap(resBytes);
            long retv = res.getLong();
            System.out.println(""rc="" + rc + "" retv=0"" + Long.toOctalString(retv));
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        } finally {
            if (s != null) {
                try {
                    s.close();
                } catch (IOException e) {
                    LOG.warn(""Unexpected exception"", e);
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,usage,void usage(),"[249, 253]","{'A583': [(250, 251)], 'A591': [(249, 249), (252, 253)]}","{'A583': 0.4, 'A591': 0.6}",A591,,"    private static void usage() {
        System.out.println(""usage: java [-cp CLASSPATH] org.apache.zookeeper.ServerAdminClient ""
                           + ""host port op (ruok|stat|dump|kill|gettracemask|settracemask) [arguments]"");

    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ServerAdminClient.java,ServerAdminClient,main,void main(String[]),"[255, 278]","{'A591': [(255, 278)]}",{'A591': 1.0},A591,,"    public static void main(String[] args) {
        if (args.length < 3) {
            usage();
            return;
        }
        String host = args[0];
        int port = Integer.parseInt(args[1]);
        String op = args[2];
        if (op.equalsIgnoreCase(""gettracemask"")) {
            getTraceMask(host, port);
        } else if (op.equalsIgnoreCase(""settracemask"")) {
            setTraceMask(host, port, args[3]);
        } else if (op.equalsIgnoreCase(""ruok"")) {
            ruok(host, port);
        } else if (op.equalsIgnoreCase(""kill"")) {
            kill(host, port);
        } else if (op.equalsIgnoreCase(""stat"")) {
            stat(host, port);
        } else if (op.equalsIgnoreCase(""dump"")) {
            dump(host, port);
        } else {
            System.out.println(""Unrecognized op: "" + op);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/AddWatchMode.java,AddWatchMode,getMode,int getMode(),"[58, 60]","{'A636': [(58, 60)]}",{'A636': 1.0},A636,,"    public int getMode() {
        return mode;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,getGroupsCommand,String[] getGroupsCommand(),"[61, 63]","{'A583': [(61, 63)]}",{'A583': 1.0},A583,,"    public static String[] getGroupsCommand() {
        return new String[]{""bash"", ""-c"", ""groups""};
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,getGroupsForUserCommand,String[] getGroupsForUserCommand(String),"[65, 68]","{'A583': [(65, 68)]}",{'A583': 1.0},A583,,"    public static String[] getGroupsForUserCommand(final String user) {
        //'groups username' command return is non-consistent across different unixes
        return new String[]{""bash"", ""-c"", ""id -Gn "" + user};
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,getGET_PERMISSION_COMMAND,String[] getGET_PERMISSION_COMMAND(),"[75, 78]","{'A583': [(75, 78)]}",{'A583': 1.0},A583,,"    public static String[] getGET_PERMISSION_COMMAND() {
        //force /bin/ls, except on windows.
        return new String[]{(WINDOWS ? ""ls"" : ""/bin/ls""), ""-ld""};
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,getUlimitMemoryCommand,String[] getUlimitMemoryCommand(int),"[101, 108]","{'A583': [(101, 108)]}",{'A583': 1.0},A583,,"    public static String[] getUlimitMemoryCommand(int memoryLimit) {
        // ulimit isn't supported on Windows
        if (WINDOWS) {
            return null;
        }

        return new String[]{ULIMIT_COMMAND, ""-v"", String.valueOf(memoryLimit)};
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,isWsl,boolean isWsl(),"[115, 126]","{'A673': [(115, 126)]}",{'A673': 1.0},A673,,"    public static boolean isWsl() throws IOException {
        if (WINDOWS) {
            return false;
        }
        final File f = new File(""/proc/version"");
        if (!f.exists()) {
            return false;
        }
        final String output = FileUtils.readFileToString(f, StandardCharsets.UTF_8.name());
        return (output != null)
                && System.getProperty(""os.name"").startsWith(""Linux"") && output.toLowerCase().contains(""microsoft"");
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,setEnvironment,"void setEnvironment(Map<String, String>)","[157, 159]","{'A583': [(157, 158)], 'A596': [(159, 159)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    protected void setEnvironment(Map<String, String> env) {
        this.environment = env;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,setWorkingDirectory,void setWorkingDirectory(File),"[164, 166]","{'A583': [(164, 165)], 'A596': [(166, 166)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    protected void setWorkingDirectory(File dir) {
        this.dir = dir;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,run,void run(),"[169, 175]","{'A583': [(169, 174)], 'A596': [(175, 175)]}","{'A583': 0.8571428571428571, 'A596': 0.14285714285714285}",A583,,"    protected void run() throws IOException {
        if (lastTime + interval > Time.currentElapsedTime()) {
            return;
        }
        exitCode = ExitCode.EXECUTION_FINISHED.getValue(); // reset for next run
        runCommand();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,runCommand,void runCommand(),"[178, 268]","{'A583': [(178, 223), (225, 266)], 'A596': [(224, 224), (267, 268)]}","{'A583': 0.967032967032967, 'A596': 0.03296703296703297}",A583,,"    private void runCommand() throws IOException {
        ProcessBuilder builder = new ProcessBuilder(getExecString());
        Timer timeOutTimer = null;
        ShellTimeoutTimerTask timeoutTimerTask = null;
        timedOut = new AtomicBoolean(false);
        completed = new AtomicBoolean(false);

        if (environment != null) {
            builder.environment().putAll(this.environment);
        }
        if (dir != null) {
            builder.directory(this.dir);
        }

        process = builder.start();
        if (timeOutInterval > 0) {
            timeOutTimer = new Timer();
            timeoutTimerTask = new ShellTimeoutTimerTask(this);
            //One time scheduling.
            timeOutTimer.schedule(timeoutTimerTask, timeOutInterval);
        }
        final BufferedReader errReader = new BufferedReader(new InputStreamReader(process.getErrorStream()));
        BufferedReader inReader = new BufferedReader(new InputStreamReader(process.getInputStream()));
        final StringBuffer errMsg = new StringBuffer();

        // read error and input streams as this would free up the buffers
        // free the error stream buffer
        Thread errThread = new Thread() {
            @Override
            public void run() {
                try {
                    String line = errReader.readLine();
                    while ((line != null) && !isInterrupted()) {
                        errMsg.append(line);
                        errMsg.append(System.getProperty(""line.separator""));
                        line = errReader.readLine();
                    }
                } catch (IOException ioe) {
                    LOG.warn(""Error reading the error stream"", ioe);
                }
            }
        };
        try {
            errThread.start();
        } catch (IllegalStateException ise) {
        }
        try {
            parseExecResult(inReader); // parse the output
            // clear the input stream buffer
            String line = inReader.readLine();
            while (line != null) {
                line = inReader.readLine();
            }
            // wait for the process to finish and check the exit code
            exitCode = process.waitFor();
            try {
                // make sure that the error thread exits
                errThread.join();
            } catch (InterruptedException ie) {
                LOG.warn(""Interrupted while reading the error stream"", ie);
            }
            completed.set(true);
            //the timeout thread handling
            //taken care in finally block
            if (exitCode != ExitCode.EXECUTION_FINISHED.getValue()) {
                throw new ExitCodeException(exitCode, errMsg.toString());
            }
        } catch (InterruptedException ie) {
            throw new IOException(ie.toString());
        } finally {
            if ((timeOutTimer != null) && !timedOut.get()) {
                timeOutTimer.cancel();
            }
            // close the input stream
            try {
                inReader.close();
            } catch (IOException ioe) {
                LOG.warn(""Error while closing the input stream"", ioe);
            }
            if (!completed.get()) {
                errThread.interrupt();
            }
            try {
                errReader.close();
            } catch (IOException ioe) {
                LOG.warn(""Error while closing the error stream"", ioe);
            }
            process.destroy();
            lastTime = Time.currentElapsedTime();
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,run,void run(),"[206, 218]","{'A583': [(206, 218)]}",{'A583': 1.0},A583,,"            @Override
            public void run() {
                try {
                    String line = errReader.readLine();
                    while ((line != null) && !isInterrupted()) {
                        errMsg.append(line);
                        errMsg.append(System.getProperty(""line.separator""));
                        line = errReader.readLine();
                    }
                } catch (IOException ioe) {
                    LOG.warn(""Error reading the error stream"", ioe);
                }
            }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,getProcess,Process getProcess(),"[279, 281]","{'A583': [(279, 280)], 'A596': [(281, 281)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public Process getProcess() {
        return process;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,getExitCode,int getExitCode(),"[286, 288]","{'A583': [(287, 287)], 'A596': [(286, 286), (288, 288)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public int getExitCode() {
        return exitCode;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ExitCodeException,getExitCode,int getExitCode(),"[303, 305]","{'A583': [(303, 305)]}",{'A583': 1.0},A583,,"        public int getExitCode() {
            return exitCode;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ShellCommandExecutor,execute,void execute(),"[360, 362]","{'A583': [(360, 362)]}",{'A583': 1.0},A583,,"        public void execute() throws IOException {
            this.run();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ShellCommandExecutor,getExecString,String[] getExecString(),"[364, 366]","{'A583': [(364, 366)]}",{'A583': 1.0},A583,,"        protected String[] getExecString() {
            return command;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ShellCommandExecutor,parseExecResult,void parseExecResult(BufferedReader),"[368, 375]","{'A583': [(368, 375)]}",{'A583': 1.0},A583,,"        protected void parseExecResult(BufferedReader lines) throws IOException {
            output = new StringBuffer();
            char[] buf = new char[512];
            int nRead;
            while ((nRead = lines.read(buf, 0, buf.length)) > 0) {
                output.append(buf, 0, nRead);
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ShellCommandExecutor,getOutput,String getOutput(),"[378, 380]","{'A583': [(378, 380)]}",{'A583': 1.0},A583,,"        public String getOutput() {
            return (output == null) ? """" : output.toString();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ShellCommandExecutor,toString,String toString(),"[389, 401]","{'A583': [(389, 401)]}",{'A583': 1.0},A583,,"        public String toString() {
            StringBuilder builder = new StringBuilder();
            String[] args = getExecString();
            for (String s : args) {
                if (s.indexOf(' ') >= 0) {
                    builder.append('""').append(s).append('""');
                } else {
                    builder.append(s);
                }
                builder.append(' ');
            }
            return builder.toString();
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,isTimedOut,boolean isTimedOut(),"[411, 413]","{'A583': [(411, 412)], 'A596': [(413, 413)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public boolean isTimedOut() {
        return timedOut.get();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,setTimedOut,void setTimedOut(),"[419, 421]","{'A583': [(419, 420)], 'A596': [(421, 421)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    private void setTimedOut() {
        this.timedOut.set(true);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,execCommand,String execCommand(),"[430, 432]","{'A583': [(430, 431)], 'A596': [(432, 432)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public static String execCommand(String... cmd) throws IOException {
        return execCommand(null, cmd, 0L);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,execCommand,"String execCommand(Map<String, String>,String[],long)","[444, 448]","{'A583': [(444, 447)], 'A596': [(448, 448)]}","{'A583': 0.8, 'A596': 0.2}",A583,,"    public static String execCommand(Map<String, String> env, String[] cmd, long timeout) throws IOException {
        ShellCommandExecutor exec = new ShellCommandExecutor(cmd, null, env, timeout);
        exec.execute();
        return exec.getOutput();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell,execCommand,"String execCommand(Map<String, String>)","[458, 460]","{'A583': [(458, 459)], 'A596': [(460, 460)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public static String execCommand(Map<String, String> env, String... cmd) throws IOException {
        return execCommand(env, cmd, 0L);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Shell.java,Shell.ShellTimeoutTimerTask,run,void run(),"[473, 487]","{'A583': [(473, 486)], 'A596': [(487, 487)]}","{'A583': 0.9333333333333333, 'A596': 0.06666666666666667}",A583,,"        @Override
        public void run() {
            Process p = shell.getProcess();
            try {
                p.exitValue();
            } catch (Exception e) {
                //Process has not terminated.
                //So check if it has completed
                //if not just destroy it.
                if (p != null && !shell.completed.get()) {
                    shell.setTimedOut();
                    p.destroy();
                }
            }
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchDeregistration.java,WatchDeregistration,unregister,"Map<EventType, Set<Watcher>> unregister(int)","[58, 60]","{'A583': [(58, 58)], 'A591': [(60, 60)], 'A625': [(59, 59)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A625': 0.3333333333333333}",A583,,"    public Map<EventType, Set<Watcher>> unregister(int rc) throws KeeperException {
        return zkManager.removeWatcher(serverPath, watcher, watcherType, local, rc);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchDeregistration.java,WatchDeregistration,getServerPath,String getServerPath(),"[67, 69]","{'A591': [(69, 69)], 'A625': [(67, 68)]}","{'A591': 0.3333333333333333, 'A625': 0.6666666666666666}",A625,,"    public String getServerPath() {
        return serverPath;
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/Slf4jAuditLogger.java,Slf4jAuditLogger,logAuditEvent,void logAuditEvent(AuditEvent),"[30, 37]","{'A592': [(30, 37)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/audit/Slf4JAuditLoggerTest.java,"    @Override
    public void logAuditEvent(AuditEvent auditEvent) {
        if (auditEvent.getResult() == Result.FAILURE) {
            LOG.error(auditEvent.toString());
        } else {
            LOG.info(auditEvent.toString());
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditEvent.java,AuditEvent,getLogEntries,"Set<Map.Entry<String, String>> getLogEntries()","[40, 42]","{'A592': [(40, 42)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/audit/AuditEventTest.java,"    public Set<Map.Entry<String, String>> getLogEntries() {
        return logEntries.entrySet();
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditEvent.java,AuditEvent,addEntry,"void addEntry(FieldName,String)","[44, 48]","{'A592': [(44, 48)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/audit/AuditEventTest.java,"    void addEntry(FieldName fieldName, String value) {
        if (value != null) {
            logEntries.put(fieldName.name().toLowerCase(), value);
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditEvent.java,AuditEvent,getValue,String getValue(FieldName),"[50, 52]","{'A592': [(50, 52)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/audit/AuditEventTest.java,"    public String getValue(FieldName fieldName) {
        return logEntries.get(fieldName.name().toLowerCase());
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditEvent.java,AuditEvent,getResult,Result getResult(),"[54, 56]","{'A592': [(54, 56)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/audit/AuditEventTest.java,"    public Result getResult() {
        return result;
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditEvent.java,AuditEvent,toString,String toString(),"[63, 88]","{'A592': [(63, 88)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/audit/AuditEventTest.java,"    @Override
    public String toString() {
        StringBuilder buffer = new StringBuilder();
        boolean first = true;
        for (Map.Entry<String, String> entry : logEntries.entrySet()) {
            String key = entry.getKey();
            String value = entry.getValue();
            if (null != value) {
                // if first field then no need to add the tabs
                if (first) {
                    first = false;
                } else {
                    buffer.append(PAIR_SEPARATOR);
                }
                buffer.append(key).append(KEY_VAL_SEPARATOR)
                        .append(value);
            }
        }
        //add result field
        if (buffer.length() > 0) {
            buffer.append(PAIR_SEPARATOR);
        }
        buffer.append(""result"").append(KEY_VAL_SEPARATOR)
                .append(result.name().toLowerCase());
        return buffer.toString();
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditLogger.java,,initialize,void initialize(),"[25, 26]","{'A592': [(25, 26)]}",{'A592': 1.0},A592,,"    default void initialize() {
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,addAuditLog,"void addAuditLog(Request,ProcessTxnResult)","[46, 48]","{'A592': [(46, 48)]}",{'A592': 1.0},A592,,"    public static void addAuditLog(Request request, ProcessTxnResult rc) {
        addAuditLog(request, rc, false);
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,addAuditLog,"void addAuditLog(Request,ProcessTxnResult,boolean)","[57, 130]","{'A592': [(57, 60), (62, 71), (74, 77), (86, 89), (91, 96), (98, 102), (105, 130)], 'A637': [(73, 73), (78, 85)], 'A583': [(61, 61), (72, 72), (90, 90), (97, 97), (103, 103)], 'A674': [(104, 104)]}","{'A592': 0.7972972972972973, 'A637': 0.12162162162162163, 'A583': 0.06756756756756757, 'A674': 0.013513513513513514}",A592,,"    public static void addAuditLog(Request request, ProcessTxnResult txnResult, boolean failedTxn) {
        if (!ZKAuditProvider.isAuditEnabled()) {
            return;
        }
        String op;
        //For failed transaction rc.path is null
        String path = txnResult.path;
        String acls = null;
        String createMode = null;
        try {
            switch (request.type) {
                case ZooDefs.OpCode.create:
                case ZooDefs.OpCode.create2:
                case ZooDefs.OpCode.createContainer:
                    op = AuditConstants.OP_CREATE;
                    CreateRequest createRequest = request.readRequestRecord(CreateRequest::new);
                    createMode = getCreateMode(createRequest.getFlags());
                    if (failedTxn) {
                        path = createRequest.getPath();
                    }
                    break;
                case ZooDefs.OpCode.createTTL:
                    op = AuditConstants.OP_CREATE;
                    CreateTTLRequest createTtlRequest = request.readRequestRecord(CreateTTLRequest::new);
                    createMode = getCreateMode(createTtlRequest.getFlags());
                    if (failedTxn) {
                        path = createTtlRequest.getPath();
                    }
                    break;
                case ZooDefs.OpCode.delete:
                case ZooDefs.OpCode.deleteContainer:
                    op = AuditConstants.OP_DELETE;
                    if (failedTxn) {
                        DeleteRequest deleteRequest = request.readRequestRecord(DeleteRequest::new);
                        path = deleteRequest.getPath();
                    }
                    break;
                case ZooDefs.OpCode.setData:
                    op = AuditConstants.OP_SETDATA;
                    if (failedTxn) {
                        SetDataRequest setDataRequest = request.readRequestRecord(SetDataRequest::new);
                        path = setDataRequest.getPath();
                    }
                    break;
                case ZooDefs.OpCode.setACL:
                    op = AuditConstants.OP_SETACL;
                    SetACLRequest setACLRequest = request.readRequestRecord(SetACLRequest::new);
                    acls = ZKUtil.aclToString(setACLRequest.getAcl());
                    if (failedTxn) {
                        path = setACLRequest.getPath();
                    }
                    break;
                case ZooDefs.OpCode.multi:
                    if (failedTxn) {
                        op = AuditConstants.OP_MULTI_OP;
                    } else {
                        logMultiOperation(request, txnResult);
                        //operation si already logged
                        return;
                    }
                    break;
                case ZooDefs.OpCode.reconfig:
                    op = AuditConstants.OP_RECONFIG;
                    break;
                default:
                    //Not an audit log operation
                    return;
            }
            Result result = getResult(txnResult, failedTxn);
            log(request, path, op, acls, createMode, result);
        } catch (Throwable e) {
            LOG.error(""Failed to audit log request {}"", request.type, e);
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,getResult,"Result getResult(ProcessTxnResult,boolean)","[132, 138]","{'A592': [(132, 138)]}",{'A592': 1.0},A592,,"    private static Result getResult(ProcessTxnResult rc, boolean failedTxn) {
        if (failedTxn) {
            return Result.FAILURE;
        } else {
            return rc.err == KeeperException.Code.OK.intValue() ? Result.SUCCESS : Result.FAILURE;
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,logMultiOperation,"void logMultiOperation(Request,ProcessTxnResult)","[140, 172]","{'A592': [(140, 172)]}",{'A592': 1.0},A592,,"    private static void logMultiOperation(Request request, ProcessTxnResult rc) throws IOException, KeeperException {
        Map<String, String> createModes = AuditHelper.getCreateModes(request);
        boolean multiFailed = false;
        for (ProcessTxnResult subTxnResult : rc.multiResult) {
            switch (subTxnResult.type) {
                case ZooDefs.OpCode.create:
                case ZooDefs.OpCode.create2:
                case ZooDefs.OpCode.createTTL:
                case ZooDefs.OpCode.createContainer:
                    log(request, subTxnResult.path, AuditConstants.OP_CREATE, null,
                            createModes.get(subTxnResult.path), Result.SUCCESS);
                    break;
                case ZooDefs.OpCode.delete:
                case ZooDefs.OpCode.deleteContainer:
                    log(request, subTxnResult.path, AuditConstants.OP_DELETE, null,
                            null, Result.SUCCESS);
                    break;
                case ZooDefs.OpCode.setData:
                    log(request, subTxnResult.path, AuditConstants.OP_SETDATA, null,
                            null, Result.SUCCESS);
                    break;
                case ZooDefs.OpCode.error:
                    multiFailed = true;
                    break;
                default:
                    // Do nothing, it ok, we do not log all multi operations
            }
        }
        if (multiFailed) {
            log(request, rc.path, AuditConstants.OP_MULTI_OP, null,
                    null, Result.FAILURE);
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,log,"void log(Request,String,String,String,String,Result)","[174, 177]","{'A592': [(174, 174), (176, 177)], 'A637': [(175, 175)]}","{'A592': 0.75, 'A637': 0.25}",A592,,"    private static void log(Request request, String path, String op, String acls, String createMode, Result result) {
        log(request.getUsersForAudit(), op, path, acls, createMode,
                request.cnxn.getSessionIdHex(), request.cnxn.getHostAddress(), result);
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,log,"void log(String,String,String,String,String,String,String,Result)","[179, 182]","{'A592': [(179, 182)]}",{'A592': 1.0},A592,,"    private static void log(String user, String operation, String znode, String acl,
                            String createMode, String session, String ip, Result result) {
        ZKAuditProvider.log(user, operation, znode, acl, createMode, session, ip, result);
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,getCreateMode,String getCreateMode(int),"[184, 186]","{'A592': [(186, 186)], 'A637': [(184, 185)]}","{'A592': 0.3333333333333333, 'A637': 0.6666666666666666}",A637,,"    private static String getCreateMode(int createFlags) throws KeeperException {
        return CreateMode.fromFlag(createFlags).toString().toLowerCase();
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/AuditHelper.java,AuditHelper,getCreateModes,"Map<String, String> getCreateModes(Request)","[188, 204]","{'A592': [(188, 193), (195, 199), (201, 204)], 'A637': [(200, 200)], 'A583': [(194, 194)]}","{'A592': 0.8823529411764706, 'A637': 0.058823529411764705, 'A583': 0.058823529411764705}",A592,,"    private static Map<String, String> getCreateModes(Request request)
            throws IOException, KeeperException {
        Map<String, String> createModes = new HashMap<>();
        if (!ZKAuditProvider.isAuditEnabled()) {
            return createModes;
        }
        MultiOperationRecord multiRequest = request.readRequestRecord(MultiOperationRecord::new);
        for (Op op : multiRequest) {
            if (op.getType() == ZooDefs.OpCode.create || op.getType() == ZooDefs.OpCode.create2
                    || op.getType() == ZooDefs.OpCode.createContainer) {
                CreateRequest requestRecord = (CreateRequest) op.toRequestRecord();
                createModes.put(requestRecord.getPath(),
                        getCreateMode(requestRecord.getFlags()));
            }
        }
        return createModes;
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,getAuditLogger,AuditLogger getAuditLogger(),"[46, 60]","{'A592': [(46, 48), (50, 60)], 'A613': [(49, 49)]}","{'A592': 0.9333333333333333, 'A613': 0.06666666666666667}",A592,,"    private static AuditLogger getAuditLogger() {
        String auditLoggerClass = System.getProperty(AUDIT_IMPL_CLASS);
        if (auditLoggerClass == null) {
            auditLoggerClass = Slf4jAuditLogger.class.getName();
        }
        try {
            Constructor<?> clientCxnConstructor = Class.forName(auditLoggerClass)
                    .getDeclaredConstructor();
            AuditLogger auditLogger = (AuditLogger) clientCxnConstructor.newInstance();
            auditLogger.initialize();
            return auditLogger;
        } catch (Exception e) {
            throw new RuntimeException(""Couldn't instantiate "" + auditLoggerClass, e);
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,isAuditEnabled,boolean isAuditEnabled(),"[65, 67]","{'A592': [(65, 67)]}",{'A592': 1.0},A592,,"    public static boolean isAuditEnabled() {
        return auditEnabled;
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,log,"void log(String,String,String,String,String,String,String,Result)","[69, 72]","{'A592': [(69, 72)]}",{'A592': 1.0},A592,,"    public static void log(String user, String operation, String znode, String acl,
                           String createMode, String session, String ip, Result result) {
        auditLogger.logAuditEvent(createLogEvent(user, operation, znode, acl, createMode, session, ip, result));
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,createLogEvent,"AuditEvent createLogEvent(String,String,Result)","[77, 82]","{'A592': [(77, 82)]}",{'A592': 1.0},A592,,"    static AuditEvent createLogEvent(String user, String operation, Result result) {
        AuditEvent event = new AuditEvent(result);
        event.addEntry(FieldName.USER, user);
        event.addEntry(FieldName.OPERATION, operation);
        return event;
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,createLogEvent,"AuditEvent createLogEvent(String,String,String,String,String,String,String,Result)","[87, 98]","{'A592': [(87, 98)]}",{'A592': 1.0},A592,,"    static AuditEvent createLogEvent(String user, String operation, String znode, String acl,
                                     String createMode, String session, String ip, Result result) {
        AuditEvent event = new AuditEvent(result);
        event.addEntry(FieldName.SESSION, session);
        event.addEntry(FieldName.USER, user);
        event.addEntry(FieldName.IP, ip);
        event.addEntry(FieldName.OPERATION, operation);
        event.addEntry(FieldName.ZNODE, znode);
        event.addEntry(FieldName.ZNODE_TYPE, createMode);
        event.addEntry(FieldName.ACL, acl);
        return event;
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,addZKStartStopAuditLog,void addZKStartStopAuditLog(),"[103, 110]","{'A592': [(103, 110)]}",{'A592': 1.0},A592,,"    public static void addZKStartStopAuditLog() {
        if (isAuditEnabled()) {
            log(getZKUser(), AuditConstants.OP_START, Result.SUCCESS);
            Runtime.getRuntime().addShutdownHook(new Thread(() -> {
                log(getZKUser(), AuditConstants.OP_STOP, Result.INVOKED);
            }));
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,addServerStartFailureAuditLog,void addServerStartFailureAuditLog(),"[115, 119]","{'A592': [(115, 119)]}",{'A592': 1.0},A592,,"    public static void addServerStartFailureAuditLog() {
        if (isAuditEnabled()) {
            log(ZKAuditProvider.getZKUser(), AuditConstants.OP_START, Result.FAILURE);
        }
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,log,"void log(String,String,Result)","[121, 123]","{'A592': [(121, 123)]}",{'A592': 1.0},A592,,"    private static void log(String user, String operation, Result result) {
        auditLogger.logAuditEvent(createLogEvent(user, operation, result));
    }
"
org.apache.zookeeper.audit,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/audit/ZKAuditProvider.java,ZKAuditProvider,getZKUser,String getZKUser(),"[129, 131]","{'A592': [(129, 131)]}",{'A592': 1.0},A592,,"    public static String getZKUser() {
        return ServerCnxnFactory.getUserName();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/SaslClientCallbackHandler.java,SaslClientCallbackHandler,handle,void handle(Callback[]),"[49, 109]","{'A583': [(54, 54), (56, 56), (60, 81), (83, 83), (87, 87), (100, 103)], 'A594': [(49, 53), (55, 55), (57, 59), (82, 82), (84, 86), (88, 99), (104, 109)]}","{'A583': 0.4918032786885246, 'A594': 0.5081967213114754}",A594,,"    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof NameCallback) {
                NameCallback nc = (NameCallback) callback;
                nc.setName(nc.getDefaultName());
            } else {
                if (callback instanceof PasswordCallback) {
                    PasswordCallback pc = (PasswordCallback) callback;
                    if (password != null) {
                        pc.setPassword(this.password.toCharArray());
                    } else {
                        LOG.warn(
                            ""Could not login: the {} is being asked for a password, but the ZooKeeper {}""
                                + "" code does not currently support obtaining a password from the user.""
                                + "" Make sure that the {} is configured to use a ticket cache (using""
                                + "" the JAAS configuration setting 'useTicketCache=true)' and restart the {}. If""
                                + "" you still get this message after that, the TGT in the ticket cache has expired and must""
                                + "" be manually refreshed. To do so, first determine if you are using a password or a""
                                + "" keytab. If the former, run kinit in a Unix shell in the environment of the user who""
                                + "" is running this Zookeeper {} using the command""
                                + "" 'kinit <princ>' (where <princ> is the name of the {}'s Kerberos principal).""
                                + "" If the latter, do""
                                + "" 'kinit -k -t <keytab> <princ>' (where <princ> is the name of the Kerberos principal, and""
                                + "" <keytab> is the location of the keytab file). After manually refreshing your cache,""
                                + "" restart this {}. If you continue to see this message after manually refreshing""
                                + "" your cache, ensure that your KDC host's clock is in sync with this host's clock."",
                            entity,
                            entity,
                            entity,
                            entity,
                            entity,
                            entity,
                            entity);
                    }
                } else {
                    if (callback instanceof RealmCallback) {
                        RealmCallback rc = (RealmCallback) callback;
                        rc.setText(rc.getDefaultText());
                    } else {
                        if (callback instanceof AuthorizeCallback) {
                            AuthorizeCallback ac = (AuthorizeCallback) callback;
                            String authid = ac.getAuthenticationID();
                            String authzid = ac.getAuthorizationID();
                            if (authid.equals(authzid)) {
                                ac.setAuthorized(true);
                            } else {
                                ac.setAuthorized(false);
                            }
                            if (ac.isAuthorized()) {
                                ac.setAuthorizedID(authzid);
                            }
                        } else {
                            throw new UnsupportedCallbackException(
                                callback,
                                ""Unrecognized SASL "" + entity + ""Callback"");
                        }
                    }
                }
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperTestable.java,ZooKeeperTestable,injectSessionExpiration,void injectSessionExpiration(),"[35, 43]","{'A583': [(39, 39)], 'A593': [(35, 38), (40, 41), (43, 43)], 'A597': [(42, 42)]}","{'A583': 0.1111111111111111, 'A593': 0.7777777777777778, 'A597': 0.1111111111111111}",A593,,"    @Override
    public void injectSessionExpiration() {
        LOG.info(""injectSessionExpiration() called"");

        clientCnxn.eventThread.queueEvent(new WatchedEvent(Watcher.Event.EventType.None, Watcher.Event.KeeperState.Expired, null));
        clientCnxn.eventThread.queueEventOfDeath();
        clientCnxn.state = ZooKeeper.States.CLOSED;
        clientCnxn.sendThread.getClientCnxnSocket().onClosing();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperTestable.java,ZooKeeperTestable,queueEvent,void queueEvent(WatchedEvent),"[45, 49]","{'A636': [(45, 49)]}",{'A636': 1.0},A636,,"    @Override
    public void queueEvent(WatchedEvent event) {
        LOG.info(""queueEvent() called: {}"", event);
        clientCnxn.eventThread.queueEvent(event);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZooKeeperTestable.java,ZooKeeperTestable,closeSocket,void closeSocket(),"[51, 55]","{'A640': [(51, 55)]}",{'A640': 1.0},A640,,"    @Override
    public void closeSocket() throws IOException {
        LOG.info(""closeSocket() called"");
        clientCnxn.sendThread.testableCloseSocket();
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,setInstance,void setInstance(MBeanRegistry),"[59, 61]","{'A616': [(59, 61)]}",{'A616': 1.0},A616,,"    public static void setInstance(MBeanRegistry instance) {
        MBeanRegistry.instance = instance;
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,getInstance,MBeanRegistry getInstance(),"[63, 65]","{'A591': [(63, 63)], 'A590': [(64, 65)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public static MBeanRegistry getInstance() {
        return instance;
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,getPlatformMBeanServer,MBeanServer getPlatformMBeanServer(),"[82, 84]","{'A591': [(82, 84)]}",{'A591': 1.0},A591,,"    public MBeanServer getPlatformMBeanServer() {
        return mBeanServer;
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,register,"void register(ZKMBeanInfo,ZKMBeanInfo)","[92, 113]","{'A583': [(92, 92), (100, 100), (102, 102), (110, 110)], 'A590': [(93, 99), (101, 101), (103, 104), (112, 113)], 'A593': [(105, 108)], 'A596': [(109, 109), (111, 111)]}","{'A583': 0.18181818181818182, 'A590': 0.5454545454545454, 'A593': 0.18181818181818182, 'A596': 0.09090909090909091}",A590,,"    public void register(ZKMBeanInfo bean, ZKMBeanInfo parent) throws JMException {
        assert bean != null;
        String path = null;
        if (parent != null) {
            path = mapBean2Path.get(parent);
            assert path != null;
        }
        path = makeFullPath(path, parent);
        if (bean.isHidden()) {
            return;
        }
        ObjectName oname = makeObjectName(path, bean);
        try {
            synchronized (LOCK) {
                mBeanServer.registerMBean(bean, oname);
                mapBean2Path.put(bean, path);
            }
        } catch (JMException e) {
            LOG.warn(""Failed to register MBean {}"", bean.getName());
            throw e;
        }
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,unregister,"void unregister(String,ZKMBeanInfo)","[120, 131]","{'A583': [(120, 121), (123, 123), (128, 128), (130, 130)], 'A590': [(122, 122), (124, 124), (129, 129), (131, 131)], 'A593': [(125, 125), (127, 127)], 'A647': [(126, 126)]}","{'A583': 0.4166666666666667, 'A590': 0.3333333333333333, 'A593': 0.16666666666666666, 'A647': 0.08333333333333333}",A583,,"    private void unregister(String path, ZKMBeanInfo bean) throws JMException {
        if (path == null) {
            return;
        }
        if (!bean.isHidden()) {
            final ObjectName objName = makeObjectName(path, bean);
            LOG.debug(""Unregister MBean [{}]"", objName);
            synchronized (LOCK) {
                mBeanServer.unregisterMBean(objName);
            }
        }
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,getRegisteredBeans,Set<ZKMBeanInfo> getRegisteredBeans(),"[137, 139]","{'A593': [(137, 137), (139, 139)], 'A605': [(138, 138)]}","{'A593': 0.6666666666666666, 'A605': 0.3333333333333333}",A593,,"    public Set<ZKMBeanInfo> getRegisteredBeans() {
        return new HashSet<>(mapBean2Path.keySet());
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,unregister,void unregister(ZKMBeanInfo),"[145, 157]","{'A583': [(146, 146), (148, 148), (151, 151)], 'A590': [(147, 147), (157, 157)], 'A593': [(149, 149), (153, 155)], 'A596': [(145, 145), (150, 150), (152, 152), (156, 156)]}","{'A583': 0.23076923076923078, 'A590': 0.15384615384615385, 'A593': 0.3076923076923077, 'A596': 0.3076923076923077}",A593,,"    public void unregister(ZKMBeanInfo bean) {
        if (bean == null) {
            return;
        }
        String path = mapBean2Path.remove(bean);
        try {
            unregister(path, bean);
        } catch (JMException e) {
            LOG.warn(""Error during unregister of [{}]"", bean.getName(), e);
        } catch (Throwable t) {
            LOG.error(""Unexpected exception during unregister of [{}]. It should be reviewed and fixed."", bean.getName(), t);
        }
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,makeFullPath,String makeFullPath(String),"[165, 180]","{'A583': [(166, 167), (169, 172), (174, 176)], 'A590': [(168, 168), (173, 173), (177, 180)], 'A596': [(165, 165)]}","{'A583': 0.5625, 'A590': 0.375, 'A596': 0.0625}",A583,,"    public String makeFullPath(String prefix, String... name) {
        StringBuilder sb = new StringBuilder(prefix == null ? ""/"" : (prefix.equals(""/"") ? prefix : prefix + ""/""));
        boolean first = true;
        for (String s : name) {
            if (s == null) {
                continue;
            }
            if (!first) {
                sb.append(""/"");
            } else {
                first = false;
            }
            sb.append(s);
        }
        return sb.toString();
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,makeFullPath,"String makeFullPath(String,ZKMBeanInfo)","[182, 184]","{'A590': [(182, 184)]}",{'A590': 1.0},A590,,"    protected String makeFullPath(String prefix, ZKMBeanInfo bean) {
        return makeFullPath(prefix, bean == null ? null : bean.getName());
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,tokenize,"int tokenize(StringBuilder,String,int)","[190, 199]","{'A583': [(190, 190), (192, 193), (195, 196)], 'A590': [(191, 191), (194, 194), (197, 199)]}","{'A583': 0.5, 'A590': 0.5}",A583,,"    private int tokenize(StringBuilder sb, String path, int index) {
        String[] tokens = path.split(""/"");
        for (String s : tokens) {
            if (s.length() == 0) {
                continue;
            }
            sb.append(""name"").append(index++).append(""="").append(s).append("","");
        }
        return index;
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/MBeanRegistry.java,MBeanRegistry,makeObjectName,"ObjectName makeObjectName(String,ZKMBeanInfo)","[206, 221]","{'A583': [(206, 207), (209, 214), (218, 218)], 'A590': [(208, 208), (215, 216), (220, 221)], 'A596': [(217, 217), (219, 219)]}","{'A583': 0.5625, 'A590': 0.3125, 'A596': 0.125}",A583,,"    protected ObjectName makeObjectName(String path, ZKMBeanInfo bean) throws MalformedObjectNameException {
        if (path == null) {
            return null;
        }
        StringBuilder beanName = new StringBuilder(DOMAIN + "":"");
        int counter = 0;
        counter = tokenize(beanName, path, counter);
        tokenize(beanName, bean.getName(), counter);
        beanName.deleteCharAt(beanName.length() - 1);
        try {
            return new ObjectName(beanName.toString());
        } catch (MalformedObjectNameException e) {
            LOG.warn(""Invalid name \""{}\"" for class {}"", beanName, bean.getClass());
            throw e;
        }
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/ManagedUtil.java,ManagedUtil,isLog4jJmxEnabled,boolean isLog4jJmxEnabled(),"[35, 51]","{'A616': [(36, 37), (43, 43), (47, 51)], 'A646': [(35, 35)], 'A624': [(38, 42), (44, 46)]}","{'A616': 0.47058823529411764, 'A646': 0.058823529411764705, 'A624': 0.47058823529411764}",A616,,"    private static boolean isLog4jJmxEnabled() {
        boolean enabled = false;

        if (Boolean.getBoolean(""zookeeper.jmx.log4j.disable"")) {
            LOG.info(""Log4j 1.2 jmx support is disabled by property."");
        } else {
            try {
                Class.forName(""org.apache.log4j.jmx.HierarchyDynamicMBean"");
                enabled = true;
                LOG.info(""Log4j 1.2 jmx support found and enabled."");
            } catch (ClassNotFoundException e) {
                LOG.info(""Log4j 1.2 jmx support not found; jmx disabled."");
            }
        }

        return enabled;
    }
"
org.apache.zookeeper.jmx,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/jmx/ManagedUtil.java,ManagedUtil,registerLog4jMBeans,void registerLog4jMBeans(),"[59, 113]","{'A583': [(78, 79), (83, 85), (92, 93), (97, 98), (104, 106)], 'A596': [(60, 60), (73, 73), (80, 80), (86, 86), (94, 94), (99, 99), (112, 113)], 'A616': [(59, 59), (61, 67), (69, 69), (72, 72), (74, 77), (81, 82), (87, 91), (95, 96), (100, 103), (107, 108), (110, 111)], 'A646': [(68, 68), (70, 71)], 'A624': [(109, 109)]}","{'A583': 0.21818181818181817, 'A596': 0.14545454545454545, 'A616': 0.5636363636363636, 'A646': 0.05454545454545454, 'A624': 0.01818181818181818}",A616,,"    @SuppressWarnings(""rawtypes"")
    public static void registerLog4jMBeans() throws JMException {
        if (isLog4jJmxEnabled()) {
            LOG.debug(""registerLog4jMBeans()"");
            MBeanServer mbs = MBeanRegistry.getInstance().getPlatformMBeanServer();

            try {
                // Create and Register the top level Log4J MBean
                // org.apache.log4j.jmx.HierarchyDynamicMBean hdm = new org.apache.log4j.jmx.HierarchyDynamicMBean();
                Object hdm = Class.forName(""org.apache.log4j.jmx.HierarchyDynamicMBean"").getConstructor().newInstance();

                String mbean = System.getProperty(""zookeeper.jmx.log4j.mbean"", ""log4j:hierarchy=default"");
                ObjectName mbo = new ObjectName(mbean);
                mbs.registerMBean(hdm, mbo);

                // Add the root logger to the Hierarchy MBean
                // org.apache.log4j.Logger rootLogger =
                // org.apache.log4j.Logger.getRootLogger();
                Object rootLogger = Class.forName(""org.apache.log4j.Logger"")
                                         .getMethod(""getRootLogger"", (Class<?>[]) null)
                                         .invoke(null, (Object[]) null);

                // hdm.addLoggerMBean(rootLogger.getName());
                Object rootLoggerName = rootLogger.getClass()
                                                  .getMethod(""getName"", (Class<?>[]) null)
                                                  .invoke(rootLogger, (Object[]) null);
                hdm.getClass().getMethod(""addLoggerMBean"", String.class).invoke(hdm, rootLoggerName);

                // Get each logger from the Log4J Repository and add it to the
                // Hierarchy MBean created above.
                // org.apache.log4j.spi.LoggerRepository r =
                // org.apache.log4j.LogManager.getLoggerRepository();
                Object r = Class.forName(""org.apache.log4j.LogManager"")
                                .getMethod(""getLoggerRepository"", (Class<?>[]) null)
                                .invoke(null, (Object[]) null);

                // Enumeration enumer = r.getCurrentLoggers();
                Enumeration enumer = (Enumeration) r.getClass()
                                                    .getMethod(""getCurrentLoggers"", (Class<?>[]) null)
                                                    .invoke(r, (Object[]) null);

                while (enumer.hasMoreElements()) {
                    Object logger = enumer.nextElement();
                    // hdm.addLoggerMBean(logger.getName());
                    Object loggerName = logger.getClass()
                                              .getMethod(""getName"", (Class<?>[]) null)
                                              .invoke(logger, (Object[]) null);
                    hdm.getClass().getMethod(""addLoggerMBean"", String.class).invoke(hdm, loggerName);
                }
            } catch (Exception e) {
                LOG.error(""Problems while registering log4j 1.2 jmx beans!"", e);
                throw new JMException(e.toString());
            }
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,isEphemeral,boolean isEphemeral(),"[89, 91]","{'A583': [(89, 89)], 'A591': [(90, 91)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public boolean isEphemeral() {
        return ephemeral;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,isSequential,boolean isSequential(),"[93, 95]","{'A583': [(93, 93)], 'A591': [(94, 95)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public boolean isSequential() {
        return sequential;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,isContainer,boolean isContainer(),"[97, 99]","{'A616': [(97, 99)]}",{'A616': 1.0},A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public boolean isContainer() {
        return isContainer;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,isTTL,boolean isTTL(),"[101, 103]","{'A639': [(101, 103)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public boolean isTTL() {
        return isTTL;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,toFlag,int toFlag(),"[105, 107]","{'A591': [(105, 107)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public int toFlag() {
        return flag;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,fromFlag,CreateMode fromFlag(int),"[112, 140]","{'A583': [(112, 115), (117, 118), (120, 121), (123, 124), (126, 127), (129, 130), (132, 133), (136, 136)], 'A591': [(116, 116), (119, 119), (122, 122), (125, 125), (135, 135), (137, 140)], 'A616': [(128, 128)], 'A639': [(131, 131), (134, 134)]}","{'A583': 0.5862068965517241, 'A591': 0.3103448275862069, 'A616': 0.034482758620689655, 'A639': 0.06896551724137931}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public static CreateMode fromFlag(int flag) throws KeeperException {
        switch (flag) {
        case 0:
            return CreateMode.PERSISTENT;

        case 1:
            return CreateMode.EPHEMERAL;

        case 2:
            return CreateMode.PERSISTENT_SEQUENTIAL;

        case 3:
            return CreateMode.EPHEMERAL_SEQUENTIAL;

        case 4:
            return CreateMode.CONTAINER;

        case 5:
            return CreateMode.PERSISTENT_WITH_TTL;

        case 6:
            return CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL;

        default:
            String errMsg = ""Received an invalid flag value: "" + flag + "" to convert to a CreateMode"";
            LOG.error(errMsg);
            throw new KeeperException.BadArgumentsException(errMsg);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/CreateMode.java,CreateMode,fromFlag,"CreateMode fromFlag(int,CreateMode)","[145, 171]","{'A583': [(145, 148), (150, 151), (153, 154), (156, 157), (159, 160), (162, 163), (165, 166), (168, 169)], 'A616': [(149, 149), (152, 152), (155, 155), (158, 158), (161, 161), (170, 171)], 'A639': [(164, 164), (167, 167)]}","{'A583': 0.6666666666666666, 'A616': 0.25925925925925924, 'A639': 0.07407407407407407}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/CreateModeTest.java,"    public static CreateMode fromFlag(int flag, CreateMode defaultMode) {
        switch (flag) {
        case 0:
            return CreateMode.PERSISTENT;

        case 1:
            return CreateMode.EPHEMERAL;

        case 2:
            return CreateMode.PERSISTENT_SEQUENTIAL;

        case 3:
            return CreateMode.EPHEMERAL_SEQUENTIAL;

        case 4:
            return CreateMode.CONTAINER;

        case 5:
            return CreateMode.PERSISTENT_WITH_TTL;

        case 6:
            return CreateMode.PERSISTENT_SEQUENTIAL_WITH_TTL;

        default:
            return defaultMode;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,create,"KeeperException create(Code,String)","[52, 56]","{'A590': [(53, 56)], 'A596': [(52, 52)]}","{'A590': 0.8, 'A596': 0.2}",A590,,"    public static KeeperException create(Code code, String path) {
        KeeperException r = create(code);
        r.path = path;
        return r;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,create,"KeeperException create(int,String)","[62, 67]","{'A596': [(62, 67)]}",{'A596': 1.0},A596,,"    @Deprecated
    public static KeeperException create(int code, String path) {
        KeeperException r = create(Code.get(code));
        r.path = path;
        return r;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,create,KeeperException create(int),"[73, 76]","{'A590': [(74, 74)], 'A596': [(73, 73), (75, 76)]}","{'A590': 0.25, 'A596': 0.75}",A596,,"    @Deprecated
    public static KeeperException create(int code) {
        return create(Code.get(code));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,create,KeeperException create(Code),"[92, 158]","{'A583': [(94, 149), (154, 155)], 'A590': [(93, 93), (157, 158)], 'A596': [(92, 92)], 'A641': [(150, 151), (156, 156)], 'A675': [(152, 153)]}","{'A583': 0.8656716417910447, 'A590': 0.04477611940298507, 'A596': 0.014925373134328358, 'A641': 0.04477611940298507, 'A675': 0.029850746268656716}",A583,,"    public static KeeperException create(Code code) {
        switch (code) {
        case SYSTEMERROR:
            return new SystemErrorException();
        case RUNTIMEINCONSISTENCY:
            return new RuntimeInconsistencyException();
        case DATAINCONSISTENCY:
            return new DataInconsistencyException();
        case CONNECTIONLOSS:
            return new ConnectionLossException();
        case MARSHALLINGERROR:
            return new MarshallingErrorException();
        case UNIMPLEMENTED:
            return new UnimplementedException();
        case OPERATIONTIMEOUT:
            return new OperationTimeoutException();
        case NEWCONFIGNOQUORUM:
            return new NewConfigNoQuorum();
        case RECONFIGINPROGRESS:
            return new ReconfigInProgress();
        case BADARGUMENTS:
            return new BadArgumentsException();
        case APIERROR:
            return new APIErrorException();
        case NONODE:
            return new NoNodeException();
        case NOAUTH:
            return new NoAuthException();
        case BADVERSION:
            return new BadVersionException();
        case NOCHILDRENFOREPHEMERALS:
            return new NoChildrenForEphemeralsException();
        case NODEEXISTS:
            return new NodeExistsException();
        case INVALIDACL:
            return new InvalidACLException();
        case AUTHFAILED:
            return new AuthFailedException();
        case NOTEMPTY:
            return new NotEmptyException();
        case SESSIONEXPIRED:
            return new SessionExpiredException();
        case INVALIDCALLBACK:
            return new InvalidCallbackException();
        case SESSIONMOVED:
            return new SessionMovedException();
        case NOTREADONLY:
            return new NotReadOnlyException();
        case EPHEMERALONLOCALSESSION:
            return new EphemeralOnLocalSessionException();
        case NOWATCHER:
            return new NoWatcherException();
        case RECONFIGDISABLED:
            return new ReconfigDisabledException();
        case SESSIONCLOSEDREQUIRESASLAUTH:
            return new SessionClosedRequireAuthException();
        case REQUESTTIMEOUT:
            return new RequestTimeoutException();
        case QUOTAEXCEEDED:
            return new QuotaExceededException();
        case THROTTLEDOP:
            return new ThrottledOpException();
        case OK:
        default:
            throw new IllegalArgumentException(""Invalid exception code:"" + code.code);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,setCode,void setCode(int),"[166, 169]","{'A590': [(167, 167), (169, 169)], 'A596': [(166, 166), (168, 168)]}","{'A590': 0.5, 'A596': 0.5}",A590,,"    @Deprecated
    public void setCode(int code) {
        this.code = Code.get(code);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException.Code,intValue,int intValue(),"[437, 439]","{'A583': [(437, 439)]}",{'A583': 1.0},A583,,"        public int intValue() {
            return code;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException.Code,get,Code get(int),"[446, 452]","{'A596': [(446, 446), (452, 452)], 'A641': [(447, 451)]}","{'A596': 0.2857142857142857, 'A641': 0.7142857142857143}",A641,,"        public static Code get(int code) {
            Code codeVal = lookup.get(code);
            if (codeVal == null) {
                throw new IllegalArgumentException(""The current client version cannot lookup this code:"" + code);
            }
            return codeVal;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,getCodeMessage,String getCodeMessage(Code),"[455, 520]","{'A583': [(457, 512), (517, 518)], 'A590': [(456, 456), (519, 520)], 'A596': [(455, 455)], 'A641': [(513, 514)], 'A675': [(515, 516)]}","{'A583': 0.8787878787878788, 'A590': 0.045454545454545456, 'A596': 0.015151515151515152, 'A641': 0.030303030303030304, 'A675': 0.030303030303030304}",A583,,"    static String getCodeMessage(Code code) {
        switch (code) {
        case OK:
            return ""ok"";
        case SYSTEMERROR:
            return ""SystemError"";
        case RUNTIMEINCONSISTENCY:
            return ""RuntimeInconsistency"";
        case DATAINCONSISTENCY:
            return ""DataInconsistency"";
        case CONNECTIONLOSS:
            return ""ConnectionLoss"";
        case MARSHALLINGERROR:
            return ""MarshallingError"";
        case NEWCONFIGNOQUORUM:
            return ""NewConfigNoQuorum"";
        case RECONFIGINPROGRESS:
            return ""ReconfigInProgress"";
        case UNIMPLEMENTED:
            return ""Unimplemented"";
        case OPERATIONTIMEOUT:
            return ""OperationTimeout"";
        case BADARGUMENTS:
            return ""BadArguments"";
        case APIERROR:
            return ""APIError"";
        case NONODE:
            return ""NoNode"";
        case NOAUTH:
            return ""NoAuth"";
        case BADVERSION:
            return ""BadVersion"";
        case NOCHILDRENFOREPHEMERALS:
            return ""NoChildrenForEphemerals"";
        case NODEEXISTS:
            return ""NodeExists"";
        case INVALIDACL:
            return ""InvalidACL"";
        case AUTHFAILED:
            return ""AuthFailed"";
        case NOTEMPTY:
            return ""Directory not empty"";
        case SESSIONEXPIRED:
            return ""Session expired"";
        case INVALIDCALLBACK:
            return ""Invalid callback"";
        case SESSIONMOVED:
            return ""Session moved"";
        case NOTREADONLY:
            return ""Not a read-only call"";
        case EPHEMERALONLOCALSESSION:
            return ""Ephemeral node on local session"";
        case NOWATCHER:
            return ""No such watcher"";
        case RECONFIGDISABLED:
            return ""Reconfig is disabled"";
        case SESSIONCLOSEDREQUIRESASLAUTH:
            return ""Session closed because client failed to authenticate"";
        case QUOTAEXCEEDED:
            return ""Quota has exceeded"";
        case THROTTLEDOP:
            return ""Op throttled due to high load"";
        default:
            return ""Unknown error "" + code;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,getCode,int getCode(),"[540, 543]","{'A590': [(541, 541)], 'A596': [(540, 540), (542, 543)]}","{'A590': 0.25, 'A596': 0.75}",A596,,"    @Deprecated
    public int getCode() {
        return code.code;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,code,Code code(),"[549, 551]","{'A590': [(550, 551)], 'A596': [(549, 549)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,,"    public Code code() {
        return code;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,getPath,String getPath(),"[557, 559]","{'A590': [(557, 559)]}",{'A590': 1.0},A590,,"    public String getPath() {
        return path;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,getMessage,String getMessage(),"[561, 567]","{'A590': [(561, 562), (564, 567)], 'A604': [(563, 563)]}","{'A590': 0.8571428571428571, 'A604': 0.14285714285714285}",A590,,"    @Override
    public String getMessage() {
        if (path == null || path.isEmpty()) {
            return ""KeeperErrorCode = "" + getCodeMessage(code);
        }
        return ""KeeperErrorCode = "" + getCodeMessage(code) + "" for "" + path;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,setMultiResults,void setMultiResults(List<OpResult>),"[569, 571]","{'A590': [(569, 571)]}",{'A590': 1.0},A590,,"    void setMultiResults(List<OpResult> results) {
        this.results = results;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/KeeperException.java,KeeperException,getResults,List<OpResult> getResults(),"[581, 583]","{'A590': [(581, 583)]}",{'A590': 1.0},A590,,"    public List<OpResult> getResults() {
        return results != null ? new ArrayList<OpResult>(results) : null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java,Environment.Entry,getKey,String getKey(),"[43, 45]","{'A583': [(43, 45)]}",{'A583': 1.0},A583,,"        public String getKey() {
            return k;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java,Environment.Entry,getValue,String getValue(),"[46, 48]","{'A583': [(46, 48)]}",{'A583': 1.0},A583,,"        public String getValue() {
            return v;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java,Environment.Entry,toString,String toString(),"[50, 53]","{'A596': [(50, 53)]}",{'A596': 1.0},A596,,"        @Override
        public String toString() {
            return k + ""="" + v;
        }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java,Environment,put,"void put(List<Entry>,String,String)","[57, 59]","{'A583': [(58, 58)], 'A596': [(59, 59)], 'A603': [(57, 57)]}","{'A583': 0.3333333333333333, 'A596': 0.3333333333333333, 'A603': 0.3333333333333333}",A583,,"    private static void put(List<Entry> l, String k, String v) {
        l.add(new Entry(k, v));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java,Environment,list,List<Entry> list(),"[61, 93]","{'A583': [(66, 66), (71, 83)], 'A596': [(61, 61), (63, 65), (67, 70), (92, 93)], 'A605': [(62, 62)], 'A630': [(84, 87), (91, 91)], 'A595': [(88, 90)]}","{'A583': 0.42424242424242425, 'A596': 0.30303030303030304, 'A605': 0.030303030303030304, 'A630': 0.15151515151515152, 'A595': 0.09090909090909091}",A583,,"    public static List<Entry> list() {
        List<Entry> l = new ArrayList<>();
        put(l, ""zookeeper.version"", Version.getFullVersion());

        try {
            put(l, ""host.name"", InetAddress.getLocalHost().getCanonicalHostName());
        } catch (UnknownHostException e) {
            put(l, ""host.name"", ""<NA>"");
        }

        put(l, ""java.version"", System.getProperty(""java.version"", ""<NA>""));
        put(l, ""java.vendor"", System.getProperty(""java.vendor"", ""<NA>""));
        put(l, ""java.home"", System.getProperty(""java.home"", ""<NA>""));
        put(l, ""java.class.path"", System.getProperty(""java.class.path"", ""<NA>""));
        put(l, ""java.library.path"", System.getProperty(""java.library.path"", ""<NA>""));
        put(l, ""java.io.tmpdir"", System.getProperty(""java.io.tmpdir"", ""<NA>""));
        put(l, ""java.compiler"", System.getProperty(""java.compiler"", ""<NA>""));
        put(l, ""os.name"", System.getProperty(""os.name"", ""<NA>""));
        put(l, ""os.arch"", System.getProperty(""os.arch"", ""<NA>""));
        put(l, ""os.version"", System.getProperty(""os.version"", ""<NA>""));
        put(l, ""user.name"", System.getProperty(""user.name"", ""<NA>""));
        put(l, ""user.home"", System.getProperty(""user.home"", ""<NA>""));
        put(l, ""user.dir"", System.getProperty(""user.dir"", ""<NA>""));

        // Get memory information.
        Runtime runtime = Runtime.getRuntime();
        int mb = 1024 * 1024;
        put(l, ""jvm.memory.free"", runtime.freeMemory() / mb + ""MB"");
        put(l, ""jvm.memory.max"", runtime.maxMemory() / mb + ""MB"");
        put(l, ""jvm.memory.total"", runtime.totalMemory() / mb + ""MB"");

        return l;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Environment.java,Environment,logEnv,"void logEnv(String,Logger)","[95, 100]","{'A596': [(95, 100)]}",{'A596': 1.0},A596,,"    public static void logEnv(String msg, Logger log) {
        List<Entry> env = Environment.list();
        for (Entry e : env) {
            log.info(msg + e.toString());
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,introduce,"void introduce(ClientCnxn.SendThread,long,LinkedBlockingDeque<Packet>)","[84, 88]","{'A583': [(84, 84)], 'A591': [(85, 86), (88, 88)], 'A597': [(87, 87)]}","{'A583': 0.2, 'A591': 0.6, 'A597': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void introduce(ClientCnxn.SendThread sendThread, long sessionId, LinkedBlockingDeque<Packet> outgoingQueue) {
        this.sendThread = sendThread;
        this.sessionId = sessionId;
        this.outgoingQueue = outgoingQueue;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,updateNow,void updateNow(),"[90, 92]","{'A591': [(90, 90), (92, 92)], 'A593': [(91, 91)]}","{'A591': 0.6666666666666666, 'A593': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void updateNow() {
        now = Time.currentElapsedTime();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,getIdleRecv,int getIdleRecv(),"[94, 96]","{'A591': [(94, 96)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    int getIdleRecv() {
        return (int) (now - lastHeard);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,getIdleSend,int getIdleSend(),"[98, 100]","{'A591': [(98, 100)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    int getIdleSend() {
        return (int) (now - lastSend);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,getSentCount,long getSentCount(),"[102, 104]","{'A591': [(102, 102), (104, 104)], 'A627': [(103, 103)]}","{'A591': 0.6666666666666666, 'A627': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    long getSentCount() {
        return sentCount.get();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,getRecvCount,long getRecvCount(),"[106, 108]","{'A591': [(106, 106), (108, 108)], 'A627': [(107, 107)]}","{'A591': 0.6666666666666666, 'A627': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    long getRecvCount() {
        return recvCount.get();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,updateLastHeard,void updateLastHeard(),"[110, 112]","{'A591': [(110, 112)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void updateLastHeard() {
        this.lastHeard = now;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,updateLastSend,void updateLastSend(),"[114, 116]","{'A591': [(114, 116)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void updateLastSend() {
        this.lastSend = now;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,updateLastSendAndHeard,void updateLastSendAndHeard(),"[118, 121]","{'A591': [(118, 121)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void updateLastSendAndHeard() {
        this.lastSend = now;
        this.lastHeard = now;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,readLength,void readLength(),"[123, 129]","{'A591': [(124, 124), (127, 129)], 'A613': [(123, 123)], 'A676': [(125, 125)], 'A599': [(126, 126)]}","{'A591': 0.5714285714285714, 'A613': 0.14285714285714285, 'A676': 0.14285714285714285, 'A599': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void readLength() throws IOException {
        int len = incomingBuffer.getInt();
        if (len < 0 || len > packetLen) {
            throw new IOException(""Packet len "" + len + "" is out of range!"");
        }
        incomingBuffer = ByteBuffer.allocate(len);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,readConnectResult,void readConnectResult(),"[131, 151]","{'A583': [(135, 135), (138, 140), (142, 142), (145, 146), (150, 150)], 'A591': [(131, 132), (134, 134), (136, 137), (141, 141), (143, 144), (149, 149), (151, 151)], 'A596': [(133, 133)], 'A600': [(147, 148)]}","{'A583': 0.38095238095238093, 'A591': 0.47619047619047616, 'A596': 0.047619047619047616, 'A600': 0.09523809523809523}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    void readConnectResult() throws IOException {
        if (LOG.isTraceEnabled()) {
            StringBuilder buf = new StringBuilder(""0x["");
            for (byte b : incomingBuffer.array()) {
                buf.append(Integer.toHexString(b)).append("","");
            }
            buf.append(""]"");
            if (LOG.isTraceEnabled()) {
                LOG.trace(""readConnectResult {} {}"", incomingBuffer.remaining(), buf);
            }
        }

        ByteBufferInputStream bbis = new ByteBufferInputStream(incomingBuffer);
        BinaryInputArchive bbia = BinaryInputArchive.getArchive(bbis);
        ConnectResponse conRsp = protocolManager.deserializeConnectResponse(bbia);
        if (!protocolManager.isReadonlyAvailable()) {
            LOG.warn(""Connected to an old server; r-o mode will be unavailable"");
        }
        this.sessionId = conRsp.getSessionId();
        sendThread.onConnected(conRsp.getTimeOut(), this.sessionId, conRsp.getPasswd(), conRsp.getReadOnly());
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ClientCnxnSocket.java,ClientCnxnSocket,initProperties,void initProperties(),"[230, 244]","{'A583': [(232, 235), (238, 240)], 'A629': [(230, 231), (236, 237), (241, 242)], 'A597': [(243, 244)]}","{'A583': 0.4666666666666667, 'A629': 0.4, 'A597': 0.13333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ClientCnxnSocketTest.java,"    protected void initProperties() throws IOException {
        try {
            packetLen = clientConfig.getInt(
                ZKConfig.JUTE_MAXBUFFER,
                ZKClientConfig.CLIENT_MAX_PACKET_LENGTH_DEFAULT);
            LOG.info(""{} value is {} Bytes"", ZKConfig.JUTE_MAXBUFFER, packetLen);
        } catch (NumberFormatException e) {
            String msg = MessageFormat.format(
                ""Configured value {0} for property {1} can not be parsed to int"",
                clientConfig.getProperty(ZKConfig.JUTE_MAXBUFFER),
                ZKConfig.JUTE_MAXBUFFER);
            LOG.error(msg);
            throw new IOException(msg);
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,deleteRecursive,"boolean deleteRecursive(ZooKeeper,String,int)","[62, 80]","{'A583': [(62, 65)], 'A596': [(66, 66), (68, 68)], 'A620': [(69, 69)], 'A591': [(67, 67)], 'A592': [(71, 79)], 'A647': [(70, 70), (80, 80)]}","{'A583': 0.21052631578947367, 'A596': 0.10526315789473684, 'A620': 0.05263157894736842, 'A591': 0.05263157894736842, 'A592': 0.47368421052631576, 'A647': 0.10526315789473684}",A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static boolean deleteRecursive(
        ZooKeeper zk,
        final String pathRoot,
        final int batchSize) throws InterruptedException, KeeperException {
        PathUtils.validatePath(pathRoot);

        List<String> tree = listSubTreeBFS(zk, pathRoot);
        LOG.debug(""Deleting tree: {}"", tree);

        if (batchSize > 0) {
            return deleteInBatch(zk, tree, batchSize);
        } else {
            for (int i = tree.size() - 1; i >= 0; --i) {
                //Delete the leaves first and eventually get rid of the root
                zk.delete(tree.get(i), -1); //Delete all versions of the node with -1.
            }
            return true;
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,deleteRecursive,"void deleteRecursive(ZooKeeper,String)","[88, 93]","{'A592': [(91, 92)], 'A584': [(88, 90), (93, 93)]}","{'A592': 0.3333333333333333, 'A584': 0.6666666666666666}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static void deleteRecursive(
        ZooKeeper zk,
        final String pathRoot) throws InterruptedException, KeeperException {
        // batchSize=0 is passed to preserve the backward compatibility with older clients.
        deleteRecursive(zk, pathRoot, 0);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,deleteInBatch,"boolean deleteInBatch(ZooKeeper,List<String>,int)","[107, 137]","{'A583': [(107, 107), (113, 113), (119, 119)], 'A647': [(108, 112), (114, 114), (116, 118), (120, 137)], 'A595': [(115, 115)]}","{'A583': 0.0967741935483871, 'A647': 0.8709677419354839, 'A595': 0.03225806451612903}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    private static boolean deleteInBatch(ZooKeeper zk, List<String> tree, int batchSize) throws InterruptedException {
        int rateLimit = 10;
        List<Op> ops = new ArrayList<>();
        BatchedDeleteCbContext context = new BatchedDeleteCbContext(rateLimit);
        MultiCallback cb = (rc, path, ctx, opResults) -> {
            if (rc != Code.OK.intValue()) {
                ((BatchedDeleteCbContext) ctx).success.set(false);
            }
            ((BatchedDeleteCbContext) ctx).sem.release();
        };

        // Delete the leaves first and eventually get rid of the root
        for (int i = tree.size() - 1; i >= 0; --i) {
            // Create Op to delete all versions of the node with -1.
            ops.add(Op.delete(tree.get(i), -1));

            if (ops.size() == batchSize || i == 0) {
                if (!context.success.get()) {
                    // fail fast
                    break;
                }
                context.sem.acquire();
                zk.multi(ops, cb, context);
                ops = new ArrayList<>();
            }
        }

        // wait for all callbacks to finish
        context.sem.acquire(rateLimit);
        return context.success.get();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,deleteRecursive,"void deleteRecursive(ZooKeeper,String,VoidCallback,Object)","[154, 167]","{'A583': [(154, 158), (163, 163)], 'A596': [(159, 159), (161, 161), (164, 167)], 'A620': [(162, 162)], 'A591': [(160, 160)]}","{'A583': 0.42857142857142855, 'A596': 0.42857142857142855, 'A620': 0.07142857142857142, 'A591': 0.07142857142857142}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static void deleteRecursive(
        ZooKeeper zk,
        final String pathRoot,
        VoidCallback cb,
        Object ctx) throws InterruptedException, KeeperException {
        PathUtils.validatePath(pathRoot);

        List<String> tree = listSubTreeBFS(zk, pathRoot);
        LOG.debug(""Deleting tree: {}"", tree);
        for (int i = tree.size() - 1; i >= 0; --i) {
            //Delete the leaves first and eventually get rid of the root
            zk.delete(tree.get(i), -1, cb, ctx); //Delete all versions of the node with -1.
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,validateFileInput,String validateFileInput(String),"[173, 185]","{'A641': [(173, 181), (183, 185)], 'A677': [(182, 182)]}","{'A641': 0.9230769230769231, 'A677': 0.07692307692307693}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static String validateFileInput(String filePath) {
        File file = new File(filePath);
        if (!file.exists()) {
            return ""File '"" + file.getAbsolutePath() + ""' does not exist."";
        }
        if (!file.canRead()) {
            return ""Read permission is denied on the file '"" + file.getAbsolutePath() + ""'"";
        }
        if (file.isDirectory()) {
            return ""'"" + file.getAbsolutePath() + ""' is a directory. it must be a file."";
        }
        return null;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,listSubTreeBFS,"List<String> listSubTreeBFS(ZooKeeper,String)","[201, 219]","{'A583': [(201, 203)], 'A596': [(206, 207), (210, 211), (214, 219)], 'A620': [(204, 204), (208, 209)], 'A605': [(205, 205)], 'A678': [(212, 213)]}","{'A583': 0.15789473684210525, 'A596': 0.5263157894736842, 'A620': 0.15789473684210525, 'A605': 0.05263157894736842, 'A678': 0.10526315789473684}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static List<String> listSubTreeBFS(
        ZooKeeper zk,
        final String pathRoot) throws KeeperException, InterruptedException {
        Queue<String> queue = new ArrayDeque<>();
        List<String> tree = new ArrayList<>();
        queue.add(pathRoot);
        tree.add(pathRoot);
        while (!queue.isEmpty()) {
            String node = queue.poll();
            List<String> children = zk.getChildren(node, false);
            for (final String child : children) {
                // Fix IllegalArgumentException when list ""/"".
                final String childPath = (node.equals(""/"") ? """" : node) + ""/"" + child;
                queue.add(childPath);
                tree.add(childPath);
            }
        }
        return tree;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,visitSubTreeDFS,"void visitSubTreeDFS(ZooKeeper,String,boolean,StringCallback)","[230, 240]","{'A583': [(230, 233)], 'A591': [(234, 240)]}","{'A583': 0.36363636363636365, 'A591': 0.6363636363636364}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static void visitSubTreeDFS(
        ZooKeeper zk,
        final String path,
        boolean watch,
        StringCallback cb) throws KeeperException, InterruptedException {
        PathUtils.validatePath(path);

        zk.getData(path, watch, null);
        cb.processResult(Code.OK.intValue(), path, null, path);
        visitSubTreeDFSHelper(zk, path, watch, cb);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,visitSubTreeDFSHelper,"void visitSubTreeDFSHelper(ZooKeeper,String,boolean,StringCallback)","[242, 268]","{'A583': [(243, 247), (263, 263)], 'A591': [(242, 242), (248, 262), (264, 268)]}","{'A583': 0.2222222222222222, 'A591': 0.7777777777777778}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    @SuppressWarnings(""unchecked"")
    private static void visitSubTreeDFSHelper(
        ZooKeeper zk,
        final String path,
        boolean watch,
        StringCallback cb) throws KeeperException, InterruptedException {
        // we've already validated, therefore if the path is of length 1 it's the root
        final boolean isRoot = path.length() == 1;
        try {
            List<String> children = zk.getChildren(path, watch, null);
            Collections.sort(children);

            for (String child : children) {
                String childPath = (isRoot ? path : path + ""/"") + child;
                cb.processResult(Code.OK.intValue(), childPath, null, child);
            }

            for (String child : children) {
                String childPath = (isRoot ? path : path + ""/"") + child;
                visitSubTreeDFSHelper(zk, childPath, watch, cb);
            }
        } catch (KeeperException.NoNodeException e) {
            // Handle race condition where a node is listed
            // but gets deleted before it can be queried
            return; // ignore
        }
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,getPermString,String getPermString(int),"[275, 277]","{'A592': [(275, 277)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static String getPermString(int perms) {
        return permCache.computeIfAbsent(perms, k -> constructPermString(k));
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,constructPermString,String constructPermString(int),"[279, 297]","{'A592': [(279, 297)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    private static String constructPermString(int perms) {
        StringBuilder p = new StringBuilder();
        if ((perms & ZooDefs.Perms.CREATE) != 0) {
            p.append('c');
        }
        if ((perms & ZooDefs.Perms.DELETE) != 0) {
            p.append('d');
        }
        if ((perms & ZooDefs.Perms.READ) != 0) {
            p.append('r');
        }
        if ((perms & ZooDefs.Perms.WRITE) != 0) {
            p.append('w');
        }
        if ((perms & ZooDefs.Perms.ADMIN) != 0) {
            p.append('a');
        }
        return p.toString();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/ZKUtil.java,ZKUtil,aclToString,String aclToString(List<ACL>),"[299, 309]","{'A592': [(299, 309)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/ZKUtilTest.java,"    public static String aclToString(List<ACL> acls) {
        StringBuilder sb = new StringBuilder();
        for (ACL acl : acls) {
            sb.append(acl.getId().getScheme());
            sb.append("":"");
            sb.append(acl.getId().getId());
            sb.append("":"");
            sb.append(getPermString(acl.getPerms()));
        }
        return sb.toString();
    }
"
org.apache.zookeeper.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/admin/ZooKeeperAdmin.java,ZooKeeperAdmin,reconfigure,"byte[] reconfigure(String,String,String,long,Stat)","[240, 258]","{'A583': [(240, 245)], 'A604': [(246, 258)]}","{'A583': 0.3157894736842105, 'A604': 0.6842105263157895}",A604,,"    public byte[] reconfigure(
        String joiningServers,
        String leavingServers,
        String newMembers,
        long fromConfig,
        Stat stat) throws KeeperException, InterruptedException {
        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.reconfig);
        ReconfigRequest request = new ReconfigRequest(joiningServers, leavingServers, newMembers, fromConfig);
        GetDataResponse response = new GetDataResponse();
        ReplyHeader r = cnxn.submitRequest(h, request, response, null);
        if (r.getErr() != 0) {
            throw KeeperException.create(KeeperException.Code.get(r.getErr()), """");
        }
        if (stat != null) {
            DataTree.copyStat(response.getStat(), stat);
        }
        return response.getData();
    }
"
org.apache.zookeeper.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/admin/ZooKeeperAdmin.java,ZooKeeperAdmin,reconfigure,"byte[] reconfigure(List<String>,List<String>,List<String>,long,Stat)","[266, 278]","{'A583': [(266, 277)], 'A604': [(278, 278)]}","{'A583': 0.9230769230769231, 'A604': 0.07692307692307693}",A583,,"    public byte[] reconfigure(
        List<String> joiningServers,
        List<String> leavingServers,
        List<String> newMembers,
        long fromConfig,
        Stat stat) throws KeeperException, InterruptedException {
        return reconfigure(
            StringUtils.joinStrings(joiningServers, "",""),
            StringUtils.joinStrings(leavingServers, "",""),
            StringUtils.joinStrings(newMembers, "",""),
            fromConfig,
            stat);
    }
"
org.apache.zookeeper.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/admin/ZooKeeperAdmin.java,ZooKeeperAdmin,reconfigure,"void reconfigure(String,String,String,long,DataCallback,Object)","[286, 307]","{'A583': [(286, 292), (297, 306)], 'A604': [(293, 296), (307, 307)]}","{'A583': 0.7727272727272727, 'A604': 0.22727272727272727}",A583,,"    public void reconfigure(
        String joiningServers,
        String leavingServers,
        String newMembers,
        long fromConfig,
        DataCallback cb,
        Object ctx) {
        RequestHeader h = new RequestHeader();
        h.setType(ZooDefs.OpCode.reconfig);
        ReconfigRequest request = new ReconfigRequest(joiningServers, leavingServers, newMembers, fromConfig);
        GetDataResponse response = new GetDataResponse();
        cnxn.queuePacket(
            h,
            new ReplyHeader(),
            request,
            response,
            cb,
            ZooDefs.CONFIG_NODE,
            ZooDefs.CONFIG_NODE,
            ctx,
            null);
    }
"
org.apache.zookeeper.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/admin/ZooKeeperAdmin.java,ZooKeeperAdmin,reconfigure,"void reconfigure(List<String>,List<String>,List<String>,long,DataCallback,Object)","[315, 329]","{'A583': [(315, 328)], 'A604': [(329, 329)]}","{'A583': 0.9333333333333333, 'A604': 0.06666666666666667}",A583,,"    public void reconfigure(
        List<String> joiningServers,
        List<String> leavingServers,
        List<String> newMembers,
        long fromConfig,
        DataCallback cb,
        Object ctx) {
        reconfigure(
            StringUtils.joinStrings(joiningServers, "",""),
            StringUtils.joinStrings(leavingServers, "",""),
            StringUtils.joinStrings(newMembers, "",""),
            fromConfig,
            cb,
            ctx);
    }
"
org.apache.zookeeper.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/admin/ZooKeeperAdmin.java,ZooKeeperAdmin,toString,String toString(),"[340, 343]","{'A604': [(340, 343)]}",{'A604': 1.0},A604,,"    @Override
    public String toString() {
        return super.toString();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Transaction.java,Transaction,create,"Transaction create(String,byte[],List<ACL>,CreateMode)","[43, 46]","{'A590': [(45, 46)], 'A583': [(43, 43)], 'A591': [(44, 44)]}","{'A590': 0.5, 'A583': 0.25, 'A591': 0.25}",A590,,"    public Transaction create(final String path, byte[] data, List<ACL> acl, CreateMode createMode) {
        ops.add(Op.create(path, data, acl, createMode.toFlag()));
        return this;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Transaction.java,Transaction,delete,"Transaction delete(String,int)","[48, 51]","{'A590': [(48, 48), (50, 51)], 'A591': [(49, 49)]}","{'A590': 0.75, 'A591': 0.25}",A590,,"    public Transaction delete(final String path, int version) {
        ops.add(Op.delete(path, version));
        return this;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Transaction.java,Transaction,check,"Transaction check(String,int)","[53, 56]","{'A590': [(53, 53), (55, 56)], 'A591': [(54, 54)]}","{'A590': 0.75, 'A591': 0.25}",A590,,"    public Transaction check(String path, int version) {
        ops.add(Op.check(path, version));
        return this;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Transaction.java,Transaction,setData,"Transaction setData(String,byte[],int)","[58, 61]","{'A590': [(60, 61)], 'A583': [(58, 58)], 'A591': [(59, 59)]}","{'A590': 0.5, 'A583': 0.25, 'A591': 0.25}",A590,,"    public Transaction setData(final String path, byte[] data, int version) {
        ops.add(Op.setData(path, data, version));
        return this;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Transaction.java,Transaction,commit,List<OpResult> commit(),"[63, 65]","{'A590': [(63, 63), (65, 65)], 'A591': [(64, 64)]}","{'A590': 0.6666666666666666, 'A591': 0.3333333333333333}",A590,,"    public List<OpResult> commit() throws InterruptedException, KeeperException {
        return zk.multi(ops);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Transaction.java,Transaction,commit,"void commit(MultiCallback,Object)","[67, 69]","{'A639': [(67, 69)]}",{'A639': 1.0},A639,,"    public void commit(MultiCallback cb, Object ctx) {
        zk.multi(ops, cb, ctx);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchedEvent.java,WatchedEvent,getState,KeeperState getState(),"[68, 70]","{'A591': [(68, 70)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java,"    public KeeperState getState() {
        return keeperState;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchedEvent.java,WatchedEvent,getType,EventType getType(),"[72, 74]","{'A591': [(72, 74)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java,"    public EventType getType() {
        return eventType;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchedEvent.java,WatchedEvent,getPath,String getPath(),"[76, 78]","{'A591': [(76, 78)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java,"    public String getPath() {
        return path;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchedEvent.java,WatchedEvent,getZxid,long getZxid(),"[91, 93]","{'A634': [(91, 93)]}",{'A634': 1.0},A634,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java,"    public long getZxid() {
        return zxid;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchedEvent.java,WatchedEvent,toString,String toString(),"[95, 98]","{'A591': [(95, 96), (98, 98)], 'A634': [(97, 97)]}","{'A591': 0.75, 'A634': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java,"    @Override
    public String toString() {
        return ""WatchedEvent state:"" + keeperState + "" type:"" + eventType + "" path:"" + path + "" zxid: "" + zxid;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/WatchedEvent.java,WatchedEvent,getWrapper,WatcherEvent getWrapper(),"[103, 105]","{'A583': [(104, 104)], 'A591': [(103, 103), (105, 105)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/test/WatchedEventTest.java,"    public WatcherEvent getWrapper() {
        return new WatcherEvent(eventType.getIntValue(), keeperState.getIntValue(), path);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getConfigPrefix,String getConfigPrefix(),"[45, 48]","{'A613': [(45, 48)]}",{'A613': 1.0},A613,,"    @Override
    protected String getConfigPrefix() {
        return ""zookeeper.ssl."";
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,shouldVerifyClientHostname,boolean shouldVerifyClientHostname(),"[50, 53]","{'A613': [(50, 53)]}",{'A613': 1.0},A613,,"    @Override
    protected boolean shouldVerifyClientHostname() {
        return false;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getSslAuthProviderProperty,String getSslAuthProviderProperty(),"[55, 57]","{'A613': [(55, 57)]}",{'A613': 1.0},A613,,"    public String getSslAuthProviderProperty() {
        return sslAuthProviderProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getSslProviderProperty,String getSslProviderProperty(),"[59, 61]","{'A628': [(59, 61)]}",{'A628': 1.0},A628,,"    public String getSslProviderProperty() {
        return sslProviderProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,createNettySslContextForClient,SslContext createNettySslContextForClient(ZKConfig),"[63, 101]","{'A628': [(63, 82), (88, 101)], 'A679': [(83, 87)]}","{'A628': 0.8717948717948718, 'A679': 0.1282051282051282}",A628,,"    public SslContext createNettySslContextForClient(ZKConfig config)
        throws X509Exception.KeyManagerException, X509Exception.TrustManagerException, SSLException {
        String keyStoreLocation = config.getProperty(getSslKeystoreLocationProperty(), """");
        String keyStorePassword = getPasswordFromConfigPropertyOrFile(config, getSslKeystorePasswdProperty(),
            getSslKeystorePasswdPathProperty());
        String keyStoreType = config.getProperty(getSslKeystoreTypeProperty());

        SslContextBuilder sslContextBuilder = SslContextBuilder.forClient();

        if (keyStoreLocation.isEmpty()) {
            LOG.warn(""{} not specified"", getSslKeystoreLocationProperty());
        } else {
            sslContextBuilder.keyManager(createKeyManager(keyStoreLocation, keyStorePassword, keyStoreType));
        }

        TrustManager tm = getTrustManager(config);
        if (tm != null) {
            sslContextBuilder.trustManager(tm);
        }

        handleTcnativeOcspStapling(sslContextBuilder, config);
        String[] enabledProtocols = getEnabledProtocols(config);
        if (enabledProtocols != null) {
            sslContextBuilder.protocols(enabledProtocols);
        }
        Iterable<String> enabledCiphers = getCipherSuites(config);
        if (enabledCiphers != null) {
            sslContextBuilder.ciphers(enabledCiphers);
        }
        sslContextBuilder.sslProvider(getSslProvider(config));

        SslContext sslContext1 = sslContextBuilder.build();

        if (getFipsMode(config) && isServerHostnameVerificationEnabled(config)) {
            return addHostnameVerification(sslContext1, ""Server"");
        } else {
            return sslContext1;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,createNettySslContextForServer,SslContext createNettySslContextForServer(ZKConfig),"[103, 118]","{'A628': [(103, 118)]}",{'A628': 1.0},A628,,"    public SslContext createNettySslContextForServer(ZKConfig config)
        throws X509Exception.SSLContextException, X509Exception.KeyManagerException, X509Exception.TrustManagerException, SSLException {
        String keyStoreLocation = config.getProperty(getSslKeystoreLocationProperty(), """");
        String keyStorePassword = getPasswordFromConfigPropertyOrFile(config, getSslKeystorePasswdProperty(),
            getSslKeystorePasswdPathProperty());
        String keyStoreType = config.getProperty(getSslKeystoreTypeProperty());

        if (keyStoreLocation.isEmpty()) {
            throw new X509Exception.SSLContextException(
                ""Keystore is required for SSL server: "" + getSslKeystoreLocationProperty());
        }

        KeyManager km = createKeyManager(keyStoreLocation, keyStorePassword, keyStoreType);

        return createNettySslContextForServer(config, km, getTrustManager(config));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,createNettySslContextForServer,"SslContext createNettySslContextForServer(ZKConfig,KeyManager,TrustManager)","[120, 146]","{'A628': [(120, 126), (132, 146)], 'A679': [(127, 131)]}","{'A628': 0.8148148148148148, 'A679': 0.18518518518518517}",A628,,"    public SslContext createNettySslContextForServer(ZKConfig config, KeyManager keyManager, TrustManager trustManager) throws SSLException {
        SslContextBuilder sslContextBuilder = SslContextBuilder.forServer(keyManager);

        if (trustManager != null) {
            sslContextBuilder.trustManager(trustManager);
        }

        handleTcnativeOcspStapling(sslContextBuilder, config);
        String[] enabledProtocols = getEnabledProtocols(config);
        if (enabledProtocols != null) {
            sslContextBuilder.protocols(enabledProtocols);
        }
        sslContextBuilder.clientAuth(getClientAuth(config).toNettyClientAuth());
        Iterable<String> enabledCiphers = getCipherSuites(config);
        if (enabledCiphers != null) {
            sslContextBuilder.ciphers(enabledCiphers);
        }
        sslContextBuilder.sslProvider(getSslProvider(config));

        SslContext sslContext1 = sslContextBuilder.build();

        if (getFipsMode(config) && isClientHostnameVerificationEnabled(config)) {
            return addHostnameVerification(sslContext1, ""Client"");
        } else {
            return sslContext1;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,handleTcnativeOcspStapling,"SslContextBuilder handleTcnativeOcspStapling(SslContextBuilder,ZKConfig)","[148, 157]","{'A679': [(148, 157)]}",{'A679': 1.0},A679,,"    private SslContextBuilder handleTcnativeOcspStapling(SslContextBuilder builder, ZKConfig config) {
        SslProvider sslProvider = getSslProvider(config);
        boolean tcnative = sslProvider == SslProvider.OPENSSL || sslProvider == SslProvider.OPENSSL_REFCNT;
        boolean ocspEnabled = config.getBoolean(getSslOcspEnabledProperty());

        if (tcnative && ocspEnabled && OpenSsl.isOcspSupported()) {
            builder.enableOcsp(ocspEnabled);
        }
        return builder;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,addHostnameVerification,"SslContext addHostnameVerification(SslContext,String)","[159, 171]","{'A628': [(159, 171)]}",{'A628': 1.0},A628,,"    private SslContext addHostnameVerification(SslContext sslContext, String clientOrServer) {
        return new DelegatingSslContext(sslContext) {
            @Override
            protected void initEngine(SSLEngine sslEngine) {
                SSLParameters sslParameters = sslEngine.getSSLParameters();
                sslParameters.setEndpointIdentificationAlgorithm(""HTTPS"");
                sslEngine.setSSLParameters(sslParameters);
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""{} hostname verification: enabled HTTPS style endpoint identification algorithm"", clientOrServer);
                }
            }
        };
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,initEngine,void initEngine(SSLEngine),"[161, 169]","{'A628': [(161, 169)]}",{'A628': 1.0},A628,,"            @Override
            protected void initEngine(SSLEngine sslEngine) {
                SSLParameters sslParameters = sslEngine.getSSLParameters();
                sslParameters.setEndpointIdentificationAlgorithm(""HTTPS"");
                sslEngine.setSSLParameters(sslParameters);
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""{} hostname verification: enabled HTTPS style endpoint identification algorithm"", clientOrServer);
                }
            }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getEnabledProtocols,String[] getEnabledProtocols(ZKConfig),"[173, 179]","{'A628': [(173, 175), (177, 179)], 'A679': [(176, 176)]}","{'A628': 0.8571428571428571, 'A679': 0.14285714285714285}",A628,,"    private String[] getEnabledProtocols(final ZKConfig config) {
        String enabledProtocolsInput = config.getProperty(getSslEnabledProtocolsProperty());
        if (enabledProtocolsInput == null) {
            return null;
        }
        return enabledProtocolsInput.split("","");
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getClientAuth,X509Util.ClientAuth getClientAuth(ZKConfig),"[181, 183]","{'A628': [(181, 183)]}",{'A628': 1.0},A628,,"    private X509Util.ClientAuth getClientAuth(final ZKConfig config) {
        return X509Util.ClientAuth.fromPropertyValue(config.getProperty(getSslClientAuthProperty()));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getCipherSuites,Iterable<String> getCipherSuites(ZKConfig),"[185, 192]","{'A628': [(185, 187), (189, 192)], 'A679': [(188, 188)]}","{'A628': 0.875, 'A679': 0.125}",A628,,"    private Iterable<String> getCipherSuites(final ZKConfig config) {
        String cipherSuitesInput = config.getProperty(getSslCipherSuitesProperty());
        if (cipherSuitesInput == null) {
            return null;
        } else {
            return Arrays.asList(cipherSuitesInput.split("",""));
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getSslProvider,SslProvider getSslProvider(ZKConfig),"[194, 196]","{'A628': [(194, 196)]}",{'A628': 1.0},A628,,"    public SslProvider getSslProvider(ZKConfig config) {
        return SslProvider.valueOf(config.getProperty(getSslProviderProperty(), ""JDK""));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ClientX509Util.java,ClientX509Util,getTrustManager,TrustManager getTrustManager(ZKConfig),"[198, 217]","{'A628': [(198, 217)]}",{'A628': 1.0},A628,,"    private TrustManager getTrustManager(ZKConfig config) throws X509Exception.TrustManagerException {
        String trustStoreLocation = config.getProperty(getSslTruststoreLocationProperty(), """");
        String trustStorePassword = getPasswordFromConfigPropertyOrFile(config, getSslTruststorePasswdProperty(),
            getSslTruststorePasswdPathProperty());
        String trustStoreType = config.getProperty(getSslTruststoreTypeProperty());

        boolean sslCrlEnabled = config.getBoolean(getSslCrlEnabledProperty());
        boolean sslOcspEnabled = config.getBoolean(getSslOcspEnabledProperty());
        boolean sslServerHostnameVerificationEnabled = isServerHostnameVerificationEnabled(config);
        boolean sslClientHostnameVerificationEnabled = isClientHostnameVerificationEnabled(config);

        if (trustStoreLocation.isEmpty()) {
            LOG.warn(""{} not specified"", getSslTruststoreLocationProperty());
            return null;
        } else {
            return createTrustManager(trustStoreLocation, trustStorePassword, trustStoreType,
                sslCrlEnabled, sslOcspEnabled, sslServerHostnameVerificationEnabled,
                sslClientHostnameVerificationEnabled, getFipsMode(config));
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/AtomicFileOutputStream.java,AtomicFileOutputStream,write,"void write(byte[],int,int)","[70, 73]","{'A583': [(71, 71)], 'A612': [(70, 70), (72, 73)]}","{'A583': 0.25, 'A612': 0.75}",A612,,"    @Override
    public void write(byte[] b, int off, int len) throws IOException {
        out.write(b, off, len);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/AtomicFileOutputStream.java,AtomicFileOutputStream,close,void close(),"[75, 106]","{'A583': [(91, 91), (102, 102)], 'A591': [(75, 79), (81, 90), (92, 101), (103, 106)], 'A630': [(80, 80)]}","{'A583': 0.0625, 'A591': 0.90625, 'A630': 0.03125}",A591,,"    @Override
    public void close() throws IOException {
        boolean triedToClose = false, success = false;
        try {
            flush();
            ((FileOutputStream) out).getFD().sync();

            triedToClose = true;
            super.close();
            success = true;
        } finally {
            if (success) {
                boolean renamed = tmpFile.renameTo(origFile);
                if (!renamed) {
                    // On windows, renameTo does not replace.
                    if (!origFile.delete() || !tmpFile.renameTo(origFile)) {
                        throw new IOException(""Could not rename temporary file "" + tmpFile + "" to "" + origFile);
                    }
                }
            } else {
                if (!triedToClose) {
                    // If we failed when flushing, try to close it to not leak
                    // an FD
                    IOUtils.closeStream(out);
                }
                // close wasn't successful, try to delete the tmp file
                if (!tmpFile.delete()) {
                    LOG.warn(""Unable to delete tmp file {}"", tmpFile);
                }
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/AtomicFileOutputStream.java,AtomicFileOutputStream,abort,void abort(),"[112, 122]","{'A583': [(116, 116), (118, 118), (120, 120)], 'A591': [(112, 115), (117, 117), (119, 119), (121, 122)]}","{'A583': 0.2727272727272727, 'A591': 0.7272727272727273}",A591,,"    public void abort() {
        try {
            super.close();
        } catch (IOException ioe) {
            LOG.warn(""Unable to abort file {}"", tmpFile, ioe);
        }

        if (!tmpFile.delete()) {
            LOG.warn(""Unable to delete tmp file during abort {}"", tmpFile);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NettyUtils.java,NettyUtils,createThreadFactory,ThreadFactory createThreadFactory(String),"[59, 62]","{'A679': [(59, 62)]}",{'A679': 1.0},A679,,"    private static ThreadFactory createThreadFactory(String clazz) {
        final String poolName = THREAD_POOL_NAME_PREFIX + clazz;
        return new DefaultThreadFactory(poolName, true);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NettyUtils.java,NettyUtils,newNioOrEpollEventLoopGroup,EventLoopGroup newNioOrEpollEventLoopGroup(),"[71, 73]","{'A627': [(71, 71), (73, 73)], 'A679': [(72, 72)]}","{'A627': 0.6666666666666666, 'A679': 0.3333333333333333}",A627,,"    public static EventLoopGroup newNioOrEpollEventLoopGroup() {
        return newNioOrEpollEventLoopGroup(0);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NettyUtils.java,NettyUtils,newNioOrEpollEventLoopGroup,EventLoopGroup newNioOrEpollEventLoopGroup(int),"[83, 93]","{'A627': [(83, 84), (88, 88), (92, 93)], 'A679': [(85, 87), (89, 91)]}","{'A627': 0.45454545454545453, 'A679': 0.5454545454545454}",A679,,"    public static EventLoopGroup newNioOrEpollEventLoopGroup(int nThreads) {
        if (Epoll.isAvailable()) {
            final String clazz = EpollEventLoopGroup.class.getSimpleName();
            final ThreadFactory factory = createThreadFactory(clazz);
            return new EpollEventLoopGroup(nThreads, factory);
        } else {
            final String clazz = NioEventLoopGroup.class.getSimpleName();
            final ThreadFactory factory = createThreadFactory(clazz);
            return new NioEventLoopGroup(nThreads, factory);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NettyUtils.java,NettyUtils,nioOrEpollSocketChannel,Class<? extends SocketChannel> nioOrEpollSocketChannel(),"[100, 106]","{'A627': [(100, 106)]}",{'A627': 1.0},A627,,"    public static Class<? extends SocketChannel> nioOrEpollSocketChannel() {
        if (Epoll.isAvailable()) {
            return EpollSocketChannel.class;
        } else {
            return NioSocketChannel.class;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NettyUtils.java,NettyUtils,nioOrEpollServerSocketChannel,Class<? extends ServerSocketChannel> nioOrEpollServerSocketChannel(),"[114, 120]","{'A627': [(114, 120)]}",{'A627': 1.0},A627,,"    public static Class<? extends ServerSocketChannel> nioOrEpollServerSocketChannel() {
        if (Epoll.isAvailable()) {
            return EpollServerSocketChannel.class;
        } else {
            return NioServerSocketChannel.class;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NettyUtils.java,NettyUtils,getClientReachableLocalInetAddressCount,int getClientReachableLocalInetAddressCount(),"[140, 167]","{'A583': [(147, 147), (151, 151), (155, 155), (161, 161)], 'A627': [(140, 146), (148, 150), (152, 154), (156, 160), (163, 167)], 'A679': [(162, 162)]}","{'A583': 0.14285714285714285, 'A627': 0.8214285714285714, 'A679': 0.03571428571428571}",A627,,"    public static int getClientReachableLocalInetAddressCount() {
        try {
            Set<InetAddress> validInetAddresses = new HashSet<>();
            Enumeration<NetworkInterface> allNetworkInterfaces = NetworkInterface.getNetworkInterfaces();
            for (NetworkInterface networkInterface : Collections.list(allNetworkInterfaces)) {
                for (InetAddress inetAddress : Collections.list(networkInterface.getInetAddresses())) {
                    if (inetAddress.isLinkLocalAddress()) {
                        LOG.debug(""Ignoring link-local InetAddress {}"", inetAddress);
                        continue;
                    }
                    if (inetAddress.isMulticastAddress()) {
                        LOG.debug(""Ignoring multicast InetAddress {}"", inetAddress);
                        continue;
                    }
                    if (inetAddress.isLoopbackAddress()) {
                        LOG.debug(""Ignoring loopback InetAddress {}"", inetAddress);
                        continue;
                    }
                    validInetAddresses.add(inetAddress);
                }
            }
            LOG.debug(""Detected {} local network addresses: {}"", validInetAddresses.size(), validInetAddresses);
            return !validInetAddresses.isEmpty() ? validInetAddresses.size() : DEFAULT_INET_ADDRESS_COUNT;
        } catch (SocketException ex) {
            LOG.warn(""Failed to list all network interfaces, assuming 1"", ex);
            return DEFAULT_INET_ADDRESS_COUNT;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.SubjectName,IP,SubjectName IP(String),"[66, 68]","{'A613': [(66, 68)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        static SubjectName IP(final String value) {
            return new SubjectName(value, IP);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.SubjectName,DNS,SubjectName DNS(String),"[70, 72]","{'A613': [(70, 72)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        static SubjectName DNS(final String value) {
            return new SubjectName(value, DNS);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.SubjectName,getType,int getType(),"[82, 84]","{'A613': [(82, 84)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        public int getType() {
            return type;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.SubjectName,getValue,String getValue(),"[86, 88]","{'A613': [(86, 88)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        public String getValue() {
            return value;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.SubjectName,toString,String toString(),"[90, 93]","{'A613': [(90, 93)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        @Override
        public String toString() {
            return value;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.InetAddressUtils,isIPv4Address,boolean isIPv4Address(String),"[112, 114]","{'A613': [(112, 114)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        static boolean isIPv4Address(final String input) {
            return IPV4_PATTERN.matcher(input).matches();
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.InetAddressUtils,isIPv6StdAddress,boolean isIPv6StdAddress(String),"[116, 118]","{'A613': [(116, 118)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        static boolean isIPv6StdAddress(final String input) {
            return IPV6_STD_PATTERN.matcher(input).matches();
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.InetAddressUtils,isIPv6HexCompressedAddress,boolean isIPv6HexCompressedAddress(String),"[120, 122]","{'A613': [(120, 122)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        static boolean isIPv6HexCompressedAddress(final String input) {
            return IPV6_HEX_COMPRESSED_PATTERN.matcher(input).matches();
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier.InetAddressUtils,isIPv6Address,boolean isIPv6Address(String),"[124, 126]","{'A613': [(124, 126)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"        static boolean isIPv6Address(final String input) {
            return isIPv6StdAddress(input) || isIPv6HexCompressedAddress(input);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,verify,"boolean verify(String,SSLSession)","[146, 157]","{'A583': [(154, 154)], 'A613': [(146, 153), (155, 157)]}","{'A583': 0.08333333333333333, 'A613': 0.9166666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    @Override
    public boolean verify(final String host, final SSLSession session) {
        try {
            final Certificate[] certs = session.getPeerCertificates();
            final X509Certificate x509 = (X509Certificate) certs[0];
            verify(host, x509);
            return true;
        } catch (final SSLException ex) {
            log.debug(""Unexpected exception"", ex);
            return false;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,verify,"void verify(String,X509Certificate)","[159, 186]","{'A583': [(164, 171), (179, 182)], 'A613': [(159, 163), (172, 178), (183, 186)]}","{'A583': 0.42857142857142855, 'A613': 0.5714285714285714}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    void verify(final String host, final X509Certificate cert) throws SSLException {
        final HostNameType hostType = determineHostFormat(host);
        final List<SubjectName> subjectAlts = getSubjectAltNames(cert);
        if (subjectAlts != null && !subjectAlts.isEmpty()) {
            switch (hostType) {
            case IPv4:
                matchIPAddress(host, subjectAlts);
                break;
            case IPv6:
                matchIPv6Address(host, subjectAlts);
                break;
            default:
                matchDNSName(host, subjectAlts);
            }
        } else {
            // CN matching has been deprecated by rfc2818 and can be used
            // as fallback only when no subjectAlts are available
            final X500Principal subjectPrincipal = cert.getSubjectX500Principal();
            final String cn = extractCN(subjectPrincipal.getName(X500Principal.RFC2253));
            if (cn == null) {
                throw new SSLException(""Certificate subject for <""
                                       + host
                                       + ""> doesn't contain ""
                                       + ""a common name and does not have alternative names"");
            }
            matchCN(host, cn);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,matchIPAddress,"void matchIPAddress(String,List<SubjectName>)","[188, 199]","{'A583': [(197, 198)], 'A613': [(188, 196), (199, 199)]}","{'A583': 0.16666666666666666, 'A613': 0.8333333333333334}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static void matchIPAddress(final String host, final List<SubjectName> subjectAlts) throws SSLException {
        for (int i = 0; i < subjectAlts.size(); i++) {
            final SubjectName subjectAlt = subjectAlts.get(i);
            if (subjectAlt.getType() == SubjectName.IP) {
                if (host.equals(subjectAlt.getValue())) {
                    return;
                }
            }
        }
        throw new SSLPeerUnverifiedException(""Certificate for <"" + host + ""> doesn't match any ""
                                             + ""of the subject alternative names: "" + subjectAlts);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,matchIPv6Address,"void matchIPv6Address(String,List<SubjectName>)","[201, 217]","{'A583': [(212, 216)], 'A613': [(201, 211), (217, 217)]}","{'A583': 0.29411764705882354, 'A613': 0.7058823529411765}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static void matchIPv6Address(final String host, final List<SubjectName> subjectAlts) throws SSLException {
        final String normalisedHost = normaliseAddress(host);
        for (int i = 0; i < subjectAlts.size(); i++) {
            final SubjectName subjectAlt = subjectAlts.get(i);
            if (subjectAlt.getType() == SubjectName.IP) {
                final String normalizedSubjectAlt = normaliseAddress(subjectAlt.getValue());
                if (normalisedHost.equals(normalizedSubjectAlt)) {
                    return;
                }
            }
        }
        throw new SSLPeerUnverifiedException(""Certificate for <""
                                             + host
                                             + ""> doesn't match any ""
                                             + ""of the subject alternative names: ""
                                             + subjectAlts);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,matchDNSName,"void matchDNSName(String,List<SubjectName>)","[219, 232]","{'A583': [(230, 231)], 'A613': [(219, 229), (232, 232)]}","{'A583': 0.14285714285714285, 'A613': 0.8571428571428571}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static void matchDNSName(final String host, final List<SubjectName> subjectAlts) throws SSLException {
        final String normalizedHost = host.toLowerCase(Locale.ROOT);
        for (int i = 0; i < subjectAlts.size(); i++) {
            final SubjectName subjectAlt = subjectAlts.get(i);
            if (subjectAlt.getType() == SubjectName.DNS) {
                final String normalizedSubjectAlt = subjectAlt.getValue().toLowerCase(Locale.ROOT);
                if (matchIdentityStrict(normalizedHost, normalizedSubjectAlt)) {
                    return;
                }
            }
        }
        throw new SSLPeerUnverifiedException(""Certificate for <"" + host + ""> doesn't match any ""
                                             + ""of the subject alternative names: "" + subjectAlts);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,matchCN,"void matchCN(String,String)","[234, 241]","{'A583': [(238, 239)], 'A613': [(234, 237), (240, 241)]}","{'A583': 0.25, 'A613': 0.75}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static void matchCN(final String host, final String cn) throws SSLException {
        final String normalizedHost = host.toLowerCase(Locale.ROOT);
        final String normalizedCn = cn.toLowerCase(Locale.ROOT);
        if (!matchIdentityStrict(normalizedHost, normalizedCn)) {
            throw new SSLPeerUnverifiedException(""Certificate for <"" + host + ""> doesn't match ""
                                                 + ""common name of the certificate subject: "" + cn);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,matchIdentity,"boolean matchIdentity(String,String,boolean)","[243, 267]","{'A583': [(243, 243), (261, 262)], 'A613': [(244, 260), (263, 267)]}","{'A583': 0.12, 'A613': 0.88}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static boolean matchIdentity(final String host, final String identity, final boolean strict) {
        // RFC 2818, 3.1. Server Identity
        // ""...Names may contain the wildcard
        // character * which is considered to match any single domain name
        // component or component fragment...""
        // Based on this statement presuming only singular wildcard is legal
        final int asteriskIdx = identity.indexOf('*');
        if (asteriskIdx != -1) {
            final String prefix = identity.substring(0, asteriskIdx);
            final String suffix = identity.substring(asteriskIdx + 1);
            if (!prefix.isEmpty() && !host.startsWith(prefix)) {
                return false;
            }
            if (!suffix.isEmpty() && !host.endsWith(suffix)) {
                return false;
            }
            // Additional sanity checks on content selected by wildcard can be done here
            if (strict) {
                final String remainder = host.substring(prefix.length(), host.length() - suffix.length());
                return !remainder.contains(""."");
            }
            return true;
        }
        return host.equalsIgnoreCase(identity);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,matchIdentityStrict,"boolean matchIdentityStrict(String,String)","[269, 271]","{'A613': [(269, 271)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static boolean matchIdentityStrict(final String host, final String identity) {
        return matchIdentity(host, identity, true);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,extractCN,String extractCN(String),"[273, 301]","{'A613': [(273, 301)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static String extractCN(final String subjectPrincipal) throws SSLException {
        if (subjectPrincipal == null) {
            return null;
        }
        try {
            final LdapName subjectDN = new LdapName(subjectPrincipal);
            final List<Rdn> rdns = subjectDN.getRdns();
            for (int i = rdns.size() - 1; i >= 0; i--) {
                final Rdn rds = rdns.get(i);
                final Attributes attributes = rds.toAttributes();
                final Attribute cn = attributes.get(""cn"");
                if (cn != null) {
                    try {
                        final Object value = cn.get();
                        if (value != null) {
                            return value.toString();
                        }
                    } catch (final NoSuchElementException ignore) {
                        // ignore exception
                    } catch (final NamingException ignore) {
                        // ignore exception
                    }
                }
            }
            return null;
        } catch (final InvalidNameException e) {
            throw new SSLException(subjectPrincipal + "" is not a valid X500 distinguished name"");
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,determineHostFormat,HostNameType determineHostFormat(String),"[303, 315]","{'A613': [(303, 315)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static HostNameType determineHostFormat(final String host) {
        if (InetAddressUtils.isIPv4Address(host)) {
            return HostNameType.IPv4;
        }
        String s = host;
        if (s.startsWith(""["") && s.endsWith(""]"")) {
            s = host.substring(1, host.length() - 1);
        }
        if (InetAddressUtils.isIPv6Address(s)) {
            return HostNameType.IPv6;
        }
        return HostNameType.DNS;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,getSubjectAltNames,List<SubjectName> getSubjectAltNames(X509Certificate),"[317, 341]","{'A583': [(324, 324)], 'A613': [(317, 322), (325, 341)], 'A605': [(323, 323)]}","{'A583': 0.04, 'A613': 0.92, 'A605': 0.04}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static List<SubjectName> getSubjectAltNames(final X509Certificate cert) {
        try {
            final Collection<List<?>> entries = cert.getSubjectAlternativeNames();
            if (entries == null) {
                return Collections.emptyList();
            }
            final List<SubjectName> result = new ArrayList<>();
            for (List<?> entry : entries) {
                final Integer type = entry.size() >= 2 ? (Integer) entry.get(0) : null;
                if (type != null) {
                    if (type == SubjectName.DNS || type == SubjectName.IP) {
                        final Object o = entry.get(1);
                        if (o instanceof String) {
                            result.add(new SubjectName((String) o, type));
                        } else if (o instanceof byte[]) {
                            // TODO ASN.1 DER encoded form
                        }
                    }
                }
            }
            return result;
        } catch (final CertificateParsingException ignore) {
            return Collections.emptyList();
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKHostnameVerifier.java,ZKHostnameVerifier,normaliseAddress,String normaliseAddress(String),"[346, 356]","{'A613': [(346, 356)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKHostnameVerifierTest.java,"    private static String normaliseAddress(final String hostname) {
        if (hostname == null) {
            return hostname;
        }
        try {
            final InetAddress inetAddress = InetAddress.getByName(hostname);
            return inetAddress.getHostAddress();
        } catch (final UnknownHostException unexpected) { // Should not happen, because we check for IPv6 address above
            return hostname;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoader.java,FileKeyStoreLoader.Builder,setKeyStorePath,Builder<T> setKeyStorePath(String),"[55, 58]","{'A627': [(55, 58)]}",{'A627': 1.0},A627,,"        Builder<T> setKeyStorePath(String keyStorePath) {
            this.keyStorePath = Objects.requireNonNull(keyStorePath);
            return this;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoader.java,FileKeyStoreLoader.Builder,setTrustStorePath,Builder<T> setTrustStorePath(String),"[60, 63]","{'A627': [(60, 63)]}",{'A627': 1.0},A627,,"        Builder<T> setTrustStorePath(String trustStorePath) {
            this.trustStorePath = Objects.requireNonNull(trustStorePath);
            return this;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoader.java,FileKeyStoreLoader.Builder,setKeyStorePassword,Builder<T> setKeyStorePassword(String),"[65, 68]","{'A627': [(65, 68)]}",{'A627': 1.0},A627,,"        Builder<T> setKeyStorePassword(String keyStorePassword) {
            this.keyStorePassword = Objects.requireNonNull(keyStorePassword);
            return this;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoader.java,FileKeyStoreLoader.Builder,setTrustStorePassword,Builder<T> setTrustStorePassword(String),"[70, 73]","{'A627': [(70, 73)]}",{'A627': 1.0},A627,,"        Builder<T> setTrustStorePassword(String trustStorePassword) {
            this.trustStorePassword = Objects.requireNonNull(trustStorePassword);
            return this;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/IOUtils.java,IOUtils,closeStream,void closeStream(Closeable),"[42, 44]","{'A591': [(42, 44)]}",{'A591': 1.0},A591,,"    public static void closeStream(Closeable stream) {
        cleanup(null, stream);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/IOUtils.java,IOUtils,cleanup,void cleanup(Logger),"[55, 67]","{'A591': [(55, 67)]}",{'A591': 1.0},A591,,"    public static void cleanup(Logger log, Closeable... closeables) {
        for (Closeable c : closeables) {
            if (c != null) {
                try {
                    c.close();
                } catch (IOException e) {
                    if (log != null) {
                        log.warn(""Exception in closing "" + c, e);
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/IOUtils.java,IOUtils,copyBytes,"void copyBytes(InputStream,OutputStream,int,boolean)","[82, 97]","{'A583': [(82, 82)], 'A591': [(83, 97)]}","{'A583': 0.0625, 'A591': 0.9375}",A591,,"    public static void copyBytes(InputStream in, OutputStream out, int buffSize, boolean close) throws IOException {
        try {
            copyBytes(in, out, buffSize);
            if (close) {
                out.close();
                out = null;
                in.close();
                in = null;
            }
        } finally {
            if (close) {
                closeStream(out);
                closeStream(in);
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/IOUtils.java,IOUtils,copyBytes,"void copyBytes(InputStream,OutputStream,int)","[109, 120]","{'A583': [(109, 109), (111, 111)], 'A591': [(110, 110), (112, 120)]}","{'A583': 0.16666666666666666, 'A591': 0.8333333333333334}",A591,,"    public static void copyBytes(InputStream in, OutputStream out, int buffSize) throws IOException {
        PrintStream ps = out instanceof PrintStream ? (PrintStream) out : null;
        byte[] buf = new byte[buffSize];
        int bytesRead = in.read(buf);
        while (bytesRead >= 0) {
            out.write(buf, 0, bytesRead);
            if ((ps != null) && ps.checkError()) {
                throw new IOException(""Unable to write to output stream."");
            }
            bytesRead = in.read(buf);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StandardTypeFileKeyStoreLoader.java,StandardTypeFileKeyStoreLoader,loadKeyStore,KeyStore loadKeyStore(),"[51, 58]","{'A680': [(51, 58)]}",{'A680': 1.0},A680,,"    @Override
    public KeyStore loadKeyStore() throws IOException, GeneralSecurityException {
        try (InputStream inputStream = new FileInputStream(new File(keyStorePath))) {
            KeyStore ks = keyStoreInstance();
            ks.load(inputStream, passwordStringToCharArray(keyStorePassword));
            return ks;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StandardTypeFileKeyStoreLoader.java,StandardTypeFileKeyStoreLoader,loadTrustStore,KeyStore loadTrustStore(),"[60, 67]","{'A680': [(60, 67)]}",{'A680': 1.0},A680,,"    @Override
    public KeyStore loadTrustStore() throws IOException, GeneralSecurityException {
        try (InputStream inputStream = new FileInputStream(new File(trustStorePath))) {
            KeyStore ts = keyStoreInstance();
            ts.load(inputStream, passwordStringToCharArray(trustStorePassword));
            return ts;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StandardTypeFileKeyStoreLoader.java,StandardTypeFileKeyStoreLoader,keyStoreInstance,KeyStore keyStoreInstance(),"[69, 71]","{'A653': [(69, 71)]}",{'A653': 1.0},A653,,"    private KeyStore keyStoreInstance() throws KeyStoreException {
        return KeyStore.getInstance(format.name());
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StandardTypeFileKeyStoreLoader.java,StandardTypeFileKeyStoreLoader,passwordStringToCharArray,char[] passwordStringToCharArray(String),"[73, 75]","{'A680': [(73, 75)]}",{'A680': 1.0},A680,,"    private static char[] passwordStringToCharArray(String password) {
        return password == null ? EMPTY_CHAR_ARRAY : password.toCharArray();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,getSSLContext,SSLContext getSSLContext(),"[68, 70]","{'A627': [(68, 70)]}",{'A627': 1.0},A627,,"    public SSLContext getSSLContext() {
        return sslContext;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,createSSLSocket,SSLSocket createSSLSocket(),"[72, 74]","{'A627': [(72, 74)]}",{'A627': 1.0},A627,,"    public SSLSocket createSSLSocket() throws IOException {
        return configureSSLSocket((SSLSocket) sslContext.getSocketFactory().createSocket(), true);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,createSSLSocket,"SSLSocket createSSLSocket(Socket,byte[])","[76, 85]","{'A583': [(79, 80), (82, 82)], 'A627': [(76, 78), (81, 81), (83, 85)]}","{'A583': 0.3, 'A627': 0.7}",A627,,"    public SSLSocket createSSLSocket(Socket socket, byte[] pushbackBytes) throws IOException {
        SSLSocket sslSocket;
        if (pushbackBytes != null && pushbackBytes.length > 0) {
            sslSocket = (SSLSocket) sslContext.getSocketFactory()
                                              .createSocket(socket, new ByteArrayInputStream(pushbackBytes), true);
        } else {
            sslSocket = (SSLSocket) sslContext.getSocketFactory().createSocket(socket, null, socket.getPort(), true);
        }
        return configureSSLSocket(sslSocket, false);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,createSSLServerSocket,SSLServerSocket createSSLServerSocket(),"[87, 90]","{'A583': [(88, 88)], 'A627': [(87, 87), (89, 90)]}","{'A583': 0.25, 'A627': 0.75}",A627,,"    public SSLServerSocket createSSLServerSocket() throws IOException {
        SSLServerSocket sslServerSocket = (SSLServerSocket) sslContext.getServerSocketFactory().createServerSocket();
        return configureSSLServerSocket(sslServerSocket);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,createSSLServerSocket,SSLServerSocket createSSLServerSocket(int),"[92, 95]","{'A583': [(93, 93)], 'A627': [(92, 92), (94, 95)]}","{'A583': 0.25, 'A627': 0.75}",A627,,"    public SSLServerSocket createSSLServerSocket(int port) throws IOException {
        SSLServerSocket sslServerSocket = (SSLServerSocket) sslContext.getServerSocketFactory().createServerSocket(port);
        return configureSSLServerSocket(sslServerSocket);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,getHandshakeDetectionTimeoutMillis,int getHandshakeDetectionTimeoutMillis(),"[97, 99]","{'A627': [(97, 99)]}",{'A627': 1.0},A627,,"    public int getHandshakeDetectionTimeoutMillis() {
        return handshakeDetectionTimeoutMillis;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,configureSSLSocket,"SSLSocket configureSSLSocket(SSLSocket,boolean)","[101, 107]","{'A627': [(101, 107)]}",{'A627': 1.0},A627,,"    private SSLSocket configureSSLSocket(SSLSocket socket, boolean isClientSocket) {
        SSLParameters sslParameters = socket.getSSLParameters();
        configureSslParameters(sslParameters, isClientSocket);
        socket.setSSLParameters(sslParameters);
        socket.setUseClientMode(isClientSocket);
        return socket;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,configureSSLServerSocket,SSLServerSocket configureSSLServerSocket(SSLServerSocket),"[109, 115]","{'A627': [(109, 115)]}",{'A627': 1.0},A627,,"    private SSLServerSocket configureSSLServerSocket(SSLServerSocket socket) {
        SSLParameters sslParameters = socket.getSSLParameters();
        configureSslParameters(sslParameters, false);
        socket.setSSLParameters(sslParameters);
        socket.setUseClientMode(false);
        return socket;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,configureSslParameters,"void configureSslParameters(SSLParameters,boolean)","[117, 147]","{'A583': [(119, 122), (125, 125), (127, 130), (133, 133), (136, 144)], 'A627': [(117, 118), (123, 124), (126, 126), (131, 132), (134, 135), (145, 147)]}","{'A583': 0.6129032258064516, 'A627': 0.3870967741935484}",A583,,"    private void configureSslParameters(SSLParameters sslParameters, boolean isClientSocket) {
        if (cipherSuites != null) {
            LOG.debug(
                ""Setup cipher suites for {} socket: {}"",
                isClientSocket ? ""client"" : ""server"",
                Arrays.toString(cipherSuites));
            sslParameters.setCipherSuites(cipherSuites);
        }

        if (enabledProtocols != null) {
            LOG.debug(
                ""Setup enabled protocols for {} socket: {}"",
                isClientSocket ? ""client"" : ""server"",
                Arrays.toString(enabledProtocols));
            sslParameters.setProtocols(enabledProtocols);
        }

        if (!isClientSocket) {
            switch (clientAuth) {
            case NEED:
                sslParameters.setNeedClientAuth(true);
                break;
            case WANT:
                sslParameters.setWantClientAuth(true);
                break;
            default:
                sslParameters.setNeedClientAuth(false); // also clears the wantClientAuth flag according to docs
                break;
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,getEnabledProtocols,"String[] getEnabledProtocols(ZKConfig,SSLContext)","[149, 158]","{'A627': [(149, 151), (156, 158)], 'A681': [(152, 155)]}","{'A627': 0.6, 'A681': 0.4}",A627,,"    private String[] getEnabledProtocols(final ZKConfig config, final SSLContext sslContext) {
        String enabledProtocolsInput = config.getProperty(x509Util.getSslEnabledProtocolsProperty());
        if (enabledProtocolsInput == null) {
            // Use JDK defaults for enabled protocols:
            // Protocol TLSv1.3 -> enabled protocols TLSv1.3 and TLSv1.2
            // Protocol TLSv1.2 -> enabled protocols TLSv1.2
            return sslContext.getDefaultSSLParameters().getProtocols();
        }
        return enabledProtocolsInput.split("","");
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,getCipherSuites,String[] getCipherSuites(ZKConfig),"[160, 167]","{'A627': [(160, 162), (164, 167)], 'A679': [(163, 163)]}","{'A627': 0.875, 'A679': 0.125}",A627,,"    private String[] getCipherSuites(final ZKConfig config) {
        String cipherSuitesInput = config.getProperty(x509Util.getSslCipherSuitesProperty());
        if (cipherSuitesInput == null) {
            return null;
        } else {
            return cipherSuitesInput.split("","");
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,getClientAuth,X509Util.ClientAuth getClientAuth(ZKConfig),"[169, 171]","{'A627': [(169, 171)]}",{'A627': 1.0},A627,,"    private X509Util.ClientAuth getClientAuth(final ZKConfig config) {
        return X509Util.ClientAuth.fromPropertyValue(config.getProperty(x509Util.getSslClientAuthProperty()));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SSLContextAndOptions.java,SSLContextAndOptions,getHandshakeDetectionTimeoutMillis,int getHandshakeDetectionTimeoutMillis(ZKConfig),"[173, 192]","{'A583': [(183, 187)], 'A627': [(173, 182), (188, 192)]}","{'A583': 0.25, 'A627': 0.75}",A627,,"    private int getHandshakeDetectionTimeoutMillis(final ZKConfig config) {
        String propertyString = config.getProperty(x509Util.getSslHandshakeDetectionTimeoutMillisProperty());
        int result;
        if (propertyString == null) {
            result = X509Util.DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS;
        } else {
            result = Integer.parseInt(propertyString);
            if (result < 1) {
                // Timeout of 0 is not allowed, since an infinite timeout can permanently lock up an
                // accept() thread.
                LOG.warn(
                    ""Invalid value for {}: {}, using the default value of {}"",
                    x509Util.getSslHandshakeDetectionTimeoutMillisProperty(),
                    result,
                    X509Util.DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS);
                result = X509Util.DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS;
            }
        }
        return result;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/Time.java,Time,currentElapsedTime,long currentElapsedTime(),"[39, 41]","{'A593': [(39, 41)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/TimeTest.java,"    public static long currentElapsedTime() {
        return System.nanoTime() / 1000000;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/Time.java,Time,currentWallTime,long currentWallTime(),"[47, 49]","{'A593': [(47, 49)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/TimeTest.java,"    public static long currentWallTime() {
        return System.currentTimeMillis();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/Time.java,Time,elapsedTimeToDate,Date elapsedTimeToDate(long),"[55, 58]","{'A593': [(55, 58)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/TimeTest.java,"    public static Date elapsedTimeToDate(long elapsedTime) {
        long wallTime = currentWallTime() + elapsedTime - currentElapsedTime();
        return new Date(wallTime);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/Time.java,Time,parseTimeInterval,int parseTimeInterval(String),"[67, 95]","{'A588': [(67, 95)]}",{'A588': 1.0},A588,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/TimeTest.java,"    public static int parseTimeInterval(String str) {
        try {
            int len = str.length();
            char suffix = str.charAt(len - 1);
            if (Character.isDigit(suffix)) {
                return Integer.parseInt(str);
            } else {
                if (str.endsWith(""ms"") || str.endsWith(""MS"")) {
                    return Integer.parseInt(str.substring(0, len - 2));
                } else {
                    String numstr = str.substring(0, len - 1);
                    switch (Character.toUpperCase(suffix)) {
                    case 'S':
                        return Integer.parseInt(numstr) * SECOND;
                    case 'M':
                        return Integer.parseInt(numstr) * MINUTE;
                    case 'H':
                        return Integer.parseInt(numstr) * HOUR;
                    case 'D':
                        return Integer.parseInt(numstr) * DAY;
                    default:
                        throw new NumberFormatException(""Illegal time interval suffix: "" + str);
                    }
                }
            }
        } catch (IndexOutOfBoundsException e) {
            throw new NumberFormatException(""empty string"");
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/Time.java,Time,formatTimeIntervalMs,String formatTimeIntervalMs(long),"[105, 119]","{'A625': [(105, 119)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/TimeTest.java,"    public static String formatTimeIntervalMs(long ms) {
        if (ms == 0) {
            return ""0"";
        } else if (ms % DAY == 0) {
            return ms / DAY + ""d"";
        } else if (ms % HOUR == 0) {
            return ms / HOUR + ""h"";
        } else if (ms % MINUTE == 0) {
            return ms / MINUTE + ""m"";
        } else if (ms % SECOND == 0) {
            return ms / SECOND + ""s"";
        } else {
            return ms + ""ms"";
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathUtils.java,PathUtils,validatePath,"void validatePath(String,boolean)","[32, 34]","{'A583': [(32, 34)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathUtilsTest.java,"     public static void validatePath(String path, boolean isSequential) throws IllegalArgumentException {
         validatePath(isSequential ? path + ""1"" : path);
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathUtils.java,PathUtils,validatePath,void validatePath(String),"[41, 93]","{'A583': [(41, 56), (58, 63), (65, 88), (90, 93)], 'A591': [(57, 57), (64, 64), (89, 89)]}","{'A583': 0.9433962264150944, 'A591': 0.05660377358490566}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathUtilsTest.java,"     public static void validatePath(String path) throws IllegalArgumentException {
         if (path == null) {
             throw new IllegalArgumentException(""Path cannot be null"");
         }
         if (path.length() == 0) {
             throw new IllegalArgumentException(""Path length must be > 0"");
         }
         if (path.charAt(0) != '/') {
             throw new IllegalArgumentException(""Path must start with / character"");
         }
         if (path.length() == 1) { // done checking - it's the root
             return;
         }
         if (path.charAt(path.length() - 1) == '/') {
             throw new IllegalArgumentException(""Path must not end with / character"");
         }

         String reason = null;
         char lastc = '/';
         char[] chars = path.toCharArray();
         char c;
         for (int i = 1; i < chars.length; lastc = chars[i], i++) {
             c = chars[i];

             if (c == 0) {
                 reason = ""null character not allowed @"" + i;
                 break;
             } else if (c == '/' && lastc == '/') {
                 reason = ""empty node name specified @"" + i;
                 break;
             } else if (c == '.' && lastc == '.') {
                 if (chars[i - 2] == '/' && ((i + 1 == chars.length) || chars[i + 1] == '/')) {
                     reason = ""relative paths not allowed @"" + i;
                     break;
                 }
             } else if (c == '.') {
                 if (chars[i - 1] == '/' && ((i + 1 == chars.length) || chars[i + 1] == '/')) {
                     reason = ""relative paths not allowed @"" + i;
                     break;
                 }
             } else if (c > '\u0000' && c <= '\u001f'
                        || c >= '\u007f' && c <= '\u009F'
                        || c >= '\ud800' && c <= '\uf8ff'
                        || c >= '\ufff0' && c <= '\uffff') {
                 reason = ""invalid character @"" + i;
                 break;
             }
         }

         if (reason != null) {
             throw new IllegalArgumentException(""Invalid path string \"""" + path + ""\"" caused by "" + reason);
         }
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathUtils.java,PathUtils,normalizeFileSystemPath,String normalizeFileSystemPath(String),"[102, 110]","{'A583': [(102, 110)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathUtilsTest.java,"     public static String normalizeFileSystemPath(String path) {
         if (path != null) {
             String osname = java.lang.System.getProperty(""os.name"");
             if (osname.toLowerCase().contains(""windows"")) {
                 return path.replace('\\', '/');
             }
         }
         return path;
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathUtils.java,PathUtils,getTopNamespace,String getTopNamespace(String),"[119, 125]","{'A586': [(119, 125)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathUtilsTest.java,"     public static String getTopNamespace(final String path) {
         if (path == null) {
             return null;
         }
         final String[] parts = path.split(""/"");
         return parts.length > 1 ? parts[1] : null;
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NetUtils.java,NetUtils,formatInetAddr,String formatInetAddr(InetSocketAddress),"[34, 43]","{'A682': [(34, 34), (36, 37), (40, 40), (42, 43)], 'A613': [(35, 35), (38, 39), (41, 41)]}","{'A682': 0.6, 'A613': 0.4}",A682,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/NetUtilsTest.java,"    public static String formatInetAddr(InetSocketAddress addr) {
        String hostString = addr.getHostString();
        InetAddress ia = addr.getAddress();

        if (ia instanceof Inet6Address && hostString.contains("":"")) {
            return String.format(""[%s]:%s"", hostString, addr.getPort());
        } else {
            return String.format(""%s:%s"", hostString, addr.getPort());
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NetUtils.java,NetUtils,getIPV6HostAndPort,String[] getIPV6HostAndPort(String),"[55, 74]","{'A672': [(55, 74)]}",{'A672': 1.0},A672,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/NetUtilsTest.java,"    public static String[] getIPV6HostAndPort(String hostPort) {
        if (hostPort.startsWith(""["")) {
            int i = hostPort.lastIndexOf(']');
            if (i < 0) {
                throw new IllegalArgumentException(
                    hostPort + "" starts with '[' but has no matching ']'"");
            }
            String host = hostPort.substring(1, i);
            if (host.isEmpty()) {
                throw new IllegalArgumentException(host + "" is empty."");
            }
            if (hostPort.length() > i + 1) {
                return getHostPort(hostPort, i, host);
            }
            return new String[] { host };
        } else {
            //Not an IPV6 host port string
            return new String[] {};
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/NetUtils.java,NetUtils,getHostPort,"String[] getHostPort(String,int,String)","[76, 88]","{'A672': [(76, 88)]}",{'A672': 1.0},A672,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/NetUtilsTest.java,"    private static String[] getHostPort(String hostPort, int indexOfClosingBracket, String host) {
        // [127::1]:2181 , check separator : exits
        if (hostPort.charAt(indexOfClosingBracket + 1) != ':') {
            throw new IllegalArgumentException(hostPort + "" does not have : after ]"");
        }
        // [127::1]: scenario
        if (indexOfClosingBracket + 2 == hostPort.length()) {
            throw new IllegalArgumentException(hostPort + "" doesn't have a port after colon."");
        }
        //do not include
        String port = hostPort.substring(indexOfClosingBracket + 2);
        return new String[] { host, port };
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/JKSFileLoader.java,JKSFileLoader.Builder,build,JKSFileLoader build(),"[37, 40]","{'A627': [(37, 40)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/JKSFileLoaderTest.java,"        @Override
        JKSFileLoader build() {
            return new JKSFileLoader(keyStorePath, trustStorePath, keyStorePassword, trustStorePassword);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StringUtils.java,StringUtils,split,"List<String> split(String,String)","[35, 45]","{'A591': [(35, 36), (38, 40), (42, 45)], 'A583': [(41, 41)], 'A605': [(37, 37)]}","{'A591': 0.8181818181818182, 'A583': 0.09090909090909091, 'A605': 0.09090909090909091}",A591,,"    public static List<String> split(String value, String separator) {
        String[] splits = value.split(separator);
        List<String> results = new ArrayList<>();
        for (int i = 0; i < splits.length; i++) {
            splits[i] = splits[i].trim();
            if (splits[i].length() > 0) {
                results.add(splits[i]);
            }
        }
        return Collections.unmodifiableList(results);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StringUtils.java,StringUtils,joinStrings,"String joinStrings(List<String>,String)","[63, 66]","{'A583': [(63, 63)], 'A602': [(64, 65)], 'A590': [(66, 66)]}","{'A583': 0.25, 'A602': 0.5, 'A590': 0.25}",A602,,"    public static String joinStrings(List<String> list, String delim) {
        Objects.requireNonNull(delim);
        return list == null ? null : String.join(delim, list);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StringUtils.java,StringUtils,isBlank,boolean isBlank(String),"[73, 75]","{'A584': [(73, 75)]}",{'A584': 1.0},A584,,"    public static boolean isBlank(String s) {
        return s == null || s.trim().isEmpty();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/StringUtils.java,StringUtils,isEmpty,boolean isEmpty(String),"[91, 93]","{'A641': [(91, 93)]}",{'A641': 1.0},A641,,"    public static boolean isEmpty(String str) {
        return str == null || str.length() == 0;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,defaultTlsProtocol,String defaultTlsProtocol(),"[92, 107]","{'A681': [(92, 96), (99, 107)], 'A679': [(97, 98)]}","{'A681': 0.875, 'A679': 0.125}",A681,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    private static String defaultTlsProtocol() {
        String defaultProtocol = TLS_1_2;
        List<String> supported = new ArrayList<>();
        try {
            supported = Arrays.asList(SSLContext.getDefault().getSupportedSSLParameters().getProtocols());
            // We cannot use the default protocols directly, because the SSLContext factory methods
            // only accept a single protocol
            if (supported.contains(TLS_1_3)) {
                defaultProtocol = TLS_1_3;
            }
        } catch (NoSuchAlgorithmException e) {
            // Ignore.
        }
        LOG.info(""Default TLS protocol is {}, supported TLS protocols are {}"", defaultProtocol, supported);
        return defaultProtocol;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util.ClientAuth,fromPropertyValue,ClientAuth fromPropertyValue(String),"[139, 144]","{'A627': [(139, 144)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"        public static ClientAuth fromPropertyValue(String prop) {
            if (prop == null || prop.length() == 0) {
                return NEED;
            }
            return ClientAuth.valueOf(prop.toUpperCase());
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util.ClientAuth,toNettyClientAuth,io.netty.handler.ssl.ClientAuth toNettyClientAuth(),"[146, 148]","{'A647': [(146, 148)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"        public io.netty.handler.ssl.ClientAuth toNettyClientAuth() {
            return nettyAuth;
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslProtocolProperty,String getSslProtocolProperty(),"[183, 185]","{'A613': [(183, 185)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslProtocolProperty() {
        return sslProtocolProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslEnabledProtocolsProperty,String getSslEnabledProtocolsProperty(),"[187, 189]","{'A627': [(187, 189)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslEnabledProtocolsProperty() {
        return sslEnabledProtocolsProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getCipherSuitesProperty,String getCipherSuitesProperty(),"[191, 193]","{'A613': [(191, 193)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getCipherSuitesProperty() {
        return cipherSuitesProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslKeystoreLocationProperty,String getSslKeystoreLocationProperty(),"[195, 197]","{'A613': [(195, 197)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslKeystoreLocationProperty() {
        return sslKeystoreLocationProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslCipherSuitesProperty,String getSslCipherSuitesProperty(),"[199, 201]","{'A627': [(199, 201)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslCipherSuitesProperty() {
        return cipherSuitesProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslKeystorePasswdProperty,String getSslKeystorePasswdProperty(),"[203, 205]","{'A613': [(203, 205)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslKeystorePasswdProperty() {
        return sslKeystorePasswdProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslKeystorePasswdPathProperty,String getSslKeystorePasswdPathProperty(),"[207, 209]","{'A586': [(207, 209)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslKeystorePasswdPathProperty() {
        return sslKeystorePasswdPathProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslKeystoreTypeProperty,String getSslKeystoreTypeProperty(),"[211, 213]","{'A627': [(211, 213)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslKeystoreTypeProperty() {
        return sslKeystoreTypeProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslTruststoreLocationProperty,String getSslTruststoreLocationProperty(),"[215, 217]","{'A613': [(215, 217)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslTruststoreLocationProperty() {
        return sslTruststoreLocationProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslTruststorePasswdProperty,String getSslTruststorePasswdProperty(),"[219, 221]","{'A613': [(219, 221)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslTruststorePasswdProperty() {
        return sslTruststorePasswdProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslTruststorePasswdPathProperty,String getSslTruststorePasswdPathProperty(),"[223, 225]","{'A586': [(223, 225)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslTruststorePasswdPathProperty() {
        return sslTruststorePasswdPathProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslTruststoreTypeProperty,String getSslTruststoreTypeProperty(),"[227, 229]","{'A627': [(227, 229)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslTruststoreTypeProperty() {
        return sslTruststoreTypeProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslContextSupplierClassProperty,String getSslContextSupplierClassProperty(),"[231, 233]","{'A683': [(231, 233)]}",{'A683': 1.0},A683,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslContextSupplierClassProperty() {
        return sslContextSupplierClassProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslHostnameVerificationEnabledProperty,String getSslHostnameVerificationEnabledProperty(),"[235, 237]","{'A613': [(235, 237)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslHostnameVerificationEnabledProperty() {
        return sslHostnameVerificationEnabledProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslClientHostnameVerificationEnabledProperty,String getSslClientHostnameVerificationEnabledProperty(),"[239, 241]","{'A685': [(239, 241)]}",{'A685': 1.0},A685,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslClientHostnameVerificationEnabledProperty() {
        return sslClientHostnameVerificationEnabledProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslCrlEnabledProperty,String getSslCrlEnabledProperty(),"[243, 245]","{'A613': [(243, 245)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslCrlEnabledProperty() {
        return sslCrlEnabledProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslOcspEnabledProperty,String getSslOcspEnabledProperty(),"[247, 249]","{'A613': [(247, 249)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslOcspEnabledProperty() {
        return sslOcspEnabledProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslClientAuthProperty,String getSslClientAuthProperty(),"[251, 253]","{'A627': [(251, 253)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslClientAuthProperty() {
        return sslClientAuthProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslHandshakeDetectionTimeoutMillisProperty,String getSslHandshakeDetectionTimeoutMillisProperty(),"[261, 263]","{'A627': [(261, 263)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getSslHandshakeDetectionTimeoutMillisProperty() {
        return sslHandshakeDetectionTimeoutMillisProperty;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getFipsModeProperty,String getFipsModeProperty(),"[265, 267]","{'A628': [(265, 267)]}",{'A628': 1.0},A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getFipsModeProperty() {
        return FIPS_MODE_PROPERTY;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getFipsMode,boolean getFipsMode(ZKConfig),"[269, 271]","{'A628': [(269, 271)]}",{'A628': 1.0},A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public static boolean getFipsMode(ZKConfig config) {
        return config.getBoolean(FIPS_MODE_PROPERTY, FIPS_MODE_DEFAULT);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,isServerHostnameVerificationEnabled,boolean isServerHostnameVerificationEnabled(ZKConfig),"[273, 275]","{'A628': [(273, 275)]}",{'A628': 1.0},A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public boolean isServerHostnameVerificationEnabled(ZKConfig config) {
        return config.getBoolean(this.getSslHostnameVerificationEnabledProperty(), true);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,isClientHostnameVerificationEnabled,boolean isClientHostnameVerificationEnabled(ZKConfig),"[277, 280]","{'A628': [(277, 277), (280, 280)], 'A685': [(278, 279)]}","{'A628': 0.5, 'A685': 0.5}",A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public boolean isClientHostnameVerificationEnabled(ZKConfig config) {
        return isServerHostnameVerificationEnabled(config)
            && config.getBoolean(this.getSslClientHostnameVerificationEnabledProperty(), shouldVerifyClientHostname());
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getDefaultSSLContext,SSLContext getDefaultSSLContext(),"[282, 284]","{'A627': [(283, 284)], 'A613': [(282, 282)]}","{'A627': 0.6666666666666666, 'A613': 0.3333333333333333}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLContext getDefaultSSLContext() throws X509Exception.SSLContextException {
        return getDefaultSSLContextAndOptions().getSSLContext();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLContext,SSLContext createSSLContext(ZKConfig),"[286, 288]","{'A627': [(286, 288)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLContext createSSLContext(ZKConfig config) throws SSLContextException {
        return createSSLContextAndOptions(config).getSSLContext();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getDefaultSSLContextAndOptions,SSLContextAndOptions getDefaultSSLContextAndOptions(),"[290, 300]","{'A627': [(290, 291), (293, 294), (296, 296)], 'A613': [(292, 292), (295, 295), (297, 300)]}","{'A627': 0.45454545454545453, 'A613': 0.5454545454545454}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLContextAndOptions getDefaultSSLContextAndOptions() throws X509Exception.SSLContextException {
        SSLContextAndOptions result = defaultSSLContextAndOptions.get();
        if (result == null) {
            result = createSSLContextAndOptions();
            if (!defaultSSLContextAndOptions.compareAndSet(null, result)) {
                // lost the race, another thread already set the value
                result = defaultSSLContextAndOptions.get();
            }
        }
        return result;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,resetDefaultSSLContextAndOptions,void resetDefaultSSLContextAndOptions(),"[302, 309]","{'A627': [(302, 304), (309, 309)], 'A684': [(305, 308)]}","{'A627': 0.5, 'A684': 0.5}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    private void resetDefaultSSLContextAndOptions() throws X509Exception.SSLContextException {
        SSLContextAndOptions newContext = createSSLContextAndOptions();
        defaultSSLContextAndOptions.set(newContext);

        if (Boolean.getBoolean(NettyServerCnxnFactory.CLIENT_CERT_RELOAD_KEY)) {
            ProviderRegistry.addOrUpdateProvider(ProviderRegistry.AUTHPROVIDER_PROPERTY_PREFIX + ""x509"");
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLContextAndOptions,SSLContextAndOptions createSSLContextAndOptions(),"[311, 318]","{'A627': [(311, 311)], 'A613': [(312, 312)], 'A628': [(317, 317)], 'A597': [(313, 316), (318, 318)]}","{'A627': 0.125, 'A613': 0.125, 'A628': 0.125, 'A597': 0.625}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    private SSLContextAndOptions createSSLContextAndOptions() throws SSLContextException {
        /*
         * Since Configuration initializes the key store and trust store related
         * configuration from system property. Reading property from
         * configuration will be same reading from system property
         */
        return createSSLContextAndOptions(new ZKConfig());
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getSslHandshakeTimeoutMillis,int getSslHandshakeTimeoutMillis(),"[327, 338]","{'A583': [(335, 335)], 'A627': [(327, 334), (336, 338)]}","{'A583': 0.08333333333333333, 'A627': 0.9166666666666666}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public int getSslHandshakeTimeoutMillis() {
        try {
            SSLContextAndOptions ctx = getDefaultSSLContextAndOptions();
            return ctx.getHandshakeDetectionTimeoutMillis();
        } catch (SSLContextException e) {
            LOG.error(""Error creating SSL context and options"", e);
            return DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS;
        } catch (Exception e) {
            LOG.error(""Error parsing config property {}"", getSslHandshakeDetectionTimeoutMillisProperty(), e);
            return DEFAULT_HANDSHAKE_DETECTION_TIMEOUT_MILLIS;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLContextAndOptions,SSLContextAndOptions createSSLContextAndOptions(ZKConfig),"[340, 365]","{'A583': [(344, 345), (350, 360)], 'A627': [(341, 341)], 'A683': [(340, 340), (342, 343), (346, 349), (361, 365)]}","{'A583': 0.5, 'A627': 0.038461538461538464, 'A683': 0.46153846153846156}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    @SuppressWarnings(""unchecked"")
    public SSLContextAndOptions createSSLContextAndOptions(ZKConfig config) throws SSLContextException {
        final String supplierContextClassName = config.getProperty(sslContextSupplierClassProperty);
        if (supplierContextClassName != null) {
            LOG.debug(""Loading SSLContext supplier from property '{}'"", sslContextSupplierClassProperty);

            try {
                Class<?> sslContextClass = Class.forName(supplierContextClassName);
                Supplier<SSLContext> sslContextSupplier = (Supplier<SSLContext>) sslContextClass.getConstructor().newInstance();
                return new SSLContextAndOptions(this, config, sslContextSupplier.get());
            } catch (ClassNotFoundException
                | ClassCastException
                | NoSuchMethodException
                | InvocationTargetException
                | InstantiationException
                | IllegalAccessException e) {
                throw new SSLContextException(""Could not retrieve the SSLContext from supplier source '""
                                              + supplierContextClassName
                                              + ""' provided in the property '""
                                              + sslContextSupplierClassProperty
                                              + ""'"", e);
            }
        } else {
            return createSSLContextAndOptionsFromConfig(config);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLContextAndOptionsFromConfig,SSLContextAndOptions createSSLContextAndOptionsFromConfig(ZKConfig),"[367, 427]","{'A583': [(380, 380), (383, 383), (402, 402), (412, 415)], 'A630': [(368, 370), (374, 375), (378, 378), (381, 382), (388, 390), (394, 394), (403, 404), (416, 418), (420, 420), (422, 422), (426, 427)], 'A627': [(371, 371), (373, 373), (376, 377), (379, 379), (386, 387), (391, 391), (393, 393), (401, 401), (411, 411), (419, 419), (423, 424)], 'A683': [(367, 367)], 'A613': [(384, 385), (395, 396), (400, 400), (409, 410), (421, 421), (425, 425)], 'A628': [(397, 399), (405, 408)], 'A586': [(372, 372), (392, 392)]}","{'A583': 0.11475409836065574, 'A630': 0.3442622950819672, 'A627': 0.22950819672131148, 'A683': 0.01639344262295082, 'A613': 0.14754098360655737, 'A628': 0.11475409836065574, 'A586': 0.03278688524590164}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLContextAndOptions createSSLContextAndOptionsFromConfig(ZKConfig config) throws SSLContextException {
        KeyManager[] keyManagers = null;
        TrustManager[] trustManagers = null;

        String keyStoreLocationProp = config.getProperty(sslKeystoreLocationProperty, """");
        String keyStorePasswordProp = getPasswordFromConfigPropertyOrFile(config, sslKeystorePasswdProperty, sslKeystorePasswdPathProperty);
        String keyStoreTypeProp = config.getProperty(sslKeystoreTypeProperty);

        // There are legal states in some use cases for null KeyManager or TrustManager.
        // But if a user wanna specify one, location is required. Password defaults to empty string if it is not
        // specified by the user.

        if (keyStoreLocationProp.isEmpty()) {
            LOG.warn(""{} not specified"", getSslKeystoreLocationProperty());
        } else {
            try {
                keyManagers = new KeyManager[]{createKeyManager(keyStoreLocationProp, keyStorePasswordProp, keyStoreTypeProp)};
            } catch (KeyManagerException keyManagerException) {
                throw new SSLContextException(""Failed to create KeyManager"", keyManagerException);
            } catch (IllegalArgumentException e) {
                throw new SSLContextException(""Bad value for "" + sslKeystoreTypeProperty + "": "" + keyStoreTypeProp, e);
            }
        }

        String trustStoreLocationProp = config.getProperty(sslTruststoreLocationProperty, """");
        String trustStorePasswordProp = getPasswordFromConfigPropertyOrFile(config, sslTruststorePasswdProperty, sslTruststorePasswdPathProperty);
        String trustStoreTypeProp = config.getProperty(sslTruststoreTypeProperty);

        boolean sslCrlEnabled = config.getBoolean(this.sslCrlEnabledProperty);
        boolean sslOcspEnabled = config.getBoolean(this.sslOcspEnabledProperty);
        boolean sslServerHostnameVerificationEnabled = isServerHostnameVerificationEnabled(config);
        boolean sslClientHostnameVerificationEnabled = isClientHostnameVerificationEnabled(config);
        boolean fipsMode = getFipsMode(config);

        if (trustStoreLocationProp.isEmpty()) {
            LOG.warn(""{} not specified"", getSslTruststoreLocationProperty());
        } else {
            try {
                trustManagers = new TrustManager[]{
                    createTrustManager(trustStoreLocationProp, trustStorePasswordProp, trustStoreTypeProp, sslCrlEnabled,
                        sslOcspEnabled, sslServerHostnameVerificationEnabled, sslClientHostnameVerificationEnabled,
                        fipsMode)};
            } catch (TrustManagerException trustManagerException) {
                throw new SSLContextException(""Failed to create TrustManager"", trustManagerException);
            } catch (IllegalArgumentException e) {
                throw new SSLContextException(""Bad value for ""
                                              + sslTruststoreTypeProperty
                                              + "": ""
                                              + trustStoreTypeProp, e);
            }
        }

        String protocol = config.getProperty(sslProtocolProperty, DEFAULT_PROTOCOL);
        try {
            SSLContext sslContext = SSLContext.getInstance(protocol);
            sslContext.init(keyManagers, trustManagers, null);
            return new SSLContextAndOptions(this, config, sslContext);
        } catch (NoSuchAlgorithmException | KeyManagementException sslContextInitException) {
            throw new SSLContextException(sslContextInitException);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,loadKeyStore,"KeyStore loadKeyStore(String,String,String)","[429, 440]","{'A583': [(430, 433), (435, 439)], 'A686': [(429, 429), (434, 434), (440, 440)]}","{'A583': 0.75, 'A686': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public static KeyStore loadKeyStore(
        String keyStoreLocation,
        String keyStorePassword,
        String keyStoreTypeProp) throws IOException, GeneralSecurityException {
        KeyStoreFileType storeFileType = KeyStoreFileType.fromPropertyValueOrFileName(keyStoreTypeProp, keyStoreLocation);
        return FileKeyStoreLoaderBuilderProvider
            .getBuilderForKeyStoreFileType(storeFileType)
            .setKeyStorePath(keyStoreLocation)
            .setKeyStorePassword(keyStorePassword)
            .build()
            .loadKeyStore();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,loadTrustStore,"KeyStore loadTrustStore(String,String,String)","[442, 453]","{'A583': [(443, 446), (448, 452)], 'A686': [(442, 442), (447, 447), (453, 453)]}","{'A583': 0.75, 'A686': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public static KeyStore loadTrustStore(
        String trustStoreLocation,
        String trustStorePassword,
        String trustStoreTypeProp) throws IOException, GeneralSecurityException {
        KeyStoreFileType storeFileType = KeyStoreFileType.fromPropertyValueOrFileName(trustStoreTypeProp, trustStoreLocation);
        return FileKeyStoreLoaderBuilderProvider
            .getBuilderForKeyStoreFileType(storeFileType)
            .setTrustStorePath(trustStoreLocation)
            .setTrustStorePassword(trustStorePassword)
            .build()
            .loadTrustStore();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,getPasswordFromConfigPropertyOrFile,"String getPasswordFromConfigPropertyOrFile(ZKConfig,String,String)","[464, 473]","{'A586': [(464, 473)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public String getPasswordFromConfigPropertyOrFile(final ZKConfig config,
                                                      final String propertyName,
                                                      final String pathPropertyName) {
        String value = config.getProperty(propertyName, """");
        final String pathProperty = config.getProperty(pathPropertyName, """");
        if (!pathProperty.isEmpty()) {
            value = String.valueOf(SecretUtils.readSecret(pathProperty));
        }
        return value;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createKeyManager,"X509KeyManager createKeyManager(String,String,String)","[487, 508]","{'A583': [(488, 490)], 'A630': [(494, 494), (498, 504), (507, 508)], 'A627': [(487, 487), (491, 493), (497, 497), (505, 506)], 'A613': [(496, 496)], 'A686': [(495, 495)]}","{'A583': 0.13636363636363635, 'A630': 0.45454545454545453, 'A627': 0.3181818181818182, 'A613': 0.045454545454545456, 'A686': 0.045454545454545456}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public static X509KeyManager createKeyManager(
        String keyStoreLocation,
        String keyStorePassword,
        String keyStoreTypeProp) throws KeyManagerException {
        if (keyStorePassword == null) {
            keyStorePassword = """";
        }
        try {
            KeyStore ks = loadKeyStore(keyStoreLocation, keyStorePassword, keyStoreTypeProp);
            KeyManagerFactory kmf = KeyManagerFactory.getInstance(""PKIX"");
            kmf.init(ks, keyStorePassword.toCharArray());

            for (KeyManager km : kmf.getKeyManagers()) {
                if (km instanceof X509KeyManager) {
                    return (X509KeyManager) km;
                }
            }
            throw new KeyManagerException(""Couldn't find X509KeyManager"");
        } catch (IOException | GeneralSecurityException | IllegalArgumentException e) {
            throw new KeyManagerException(e);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createTrustManager,"X509TrustManager createTrustManager(String,String,String,boolean,boolean,boolean,boolean,boolean)","[536, 585]","{'A583': [(537, 542)], 'A630': [(548, 548), (561, 561), (579, 581), (584, 585)], 'A627': [(536, 536), (545, 547), (582, 583)], 'A613': [(550, 560), (562, 567)], 'A628': [(543, 544), (568, 578)], 'A686': [(549, 549)]}","{'A583': 0.12, 'A630': 0.14, 'A627': 0.12, 'A613': 0.34, 'A628': 0.26, 'A686': 0.02}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public static X509TrustManager createTrustManager(
        String trustStoreLocation,
        String trustStorePassword,
        String trustStoreTypeProp,
        boolean crlEnabled,
        boolean ocspEnabled,
        final boolean serverHostnameVerificationEnabled,
        final boolean clientHostnameVerificationEnabled,
        final boolean fipsMode) throws TrustManagerException {
        if (trustStorePassword == null) {
            trustStorePassword = """";
        }
        try {
            KeyStore ts = loadTrustStore(trustStoreLocation, trustStorePassword, trustStoreTypeProp);
            PKIXBuilderParameters pbParams = new PKIXBuilderParameters(ts, new X509CertSelector());
            if (crlEnabled || ocspEnabled) {
                pbParams.setRevocationEnabled(true);
                System.setProperty(""com.sun.net.ssl.checkRevocation"", ""true"");
                System.setProperty(""com.sun.security.enableCRLDP"", ""true"");
                if (ocspEnabled) {
                    Security.setProperty(""ocsp.enable"", ""true"");
                }
            } else {
                pbParams.setRevocationEnabled(false);
            }

            // Revocation checking is only supported with the PKIX algorithm
            TrustManagerFactory tmf = TrustManagerFactory.getInstance(""PKIX"");
            tmf.init(new CertPathTrustManagerParameters(pbParams));

            for (final TrustManager tm : tmf.getTrustManagers()) {
                if (tm instanceof X509ExtendedTrustManager) {
                    if (fipsMode) {
                        if (LOG.isDebugEnabled()) {
                            LOG.debug(""FIPS mode is ON: selecting standard x509 trust manager {}"", tm);
                        }
                        return (X509TrustManager) tm;
                    }
                    if (LOG.isDebugEnabled()) {
                        LOG.debug(""FIPS mode is OFF: creating ZKTrustManager"");
                    }
                    return new ZKTrustManager((X509ExtendedTrustManager) tm, serverHostnameVerificationEnabled,
                        clientHostnameVerificationEnabled);
                }
            }
            throw new TrustManagerException(""Couldn't find X509TrustManager"");
        } catch (IOException | GeneralSecurityException | IllegalArgumentException e) {
            throw new TrustManagerException(e);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLSocket,SSLSocket createSSLSocket(),"[587, 589]","{'A627': [(588, 588)], 'A613': [(587, 587), (589, 589)]}","{'A627': 0.3333333333333333, 'A613': 0.6666666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLSocket createSSLSocket() throws X509Exception, IOException {
        return getDefaultSSLContextAndOptions().createSSLSocket();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLSocket,"SSLSocket createSSLSocket(Socket,byte[])","[591, 593]","{'A627': [(591, 592)], 'A613': [(593, 593)]}","{'A627': 0.6666666666666666, 'A613': 0.3333333333333333}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLSocket createSSLSocket(Socket socket, byte[] pushbackBytes) throws X509Exception, IOException {
        return getDefaultSSLContextAndOptions().createSSLSocket(socket, pushbackBytes);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLServerSocket,SSLServerSocket createSSLServerSocket(),"[595, 597]","{'A627': [(596, 596)], 'A613': [(595, 595), (597, 597)]}","{'A627': 0.3333333333333333, 'A613': 0.6666666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLServerSocket createSSLServerSocket() throws X509Exception, IOException {
        return getDefaultSSLContextAndOptions().createSSLServerSocket();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,createSSLServerSocket,SSLServerSocket createSSLServerSocket(int),"[599, 601]","{'A627': [(600, 600)], 'A613': [(599, 599), (601, 601)]}","{'A627': 0.3333333333333333, 'A613': 0.6666666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public SSLServerSocket createSSLServerSocket(int port) throws X509Exception, IOException {
        return getDefaultSSLContextAndOptions().createSSLServerSocket(port);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,newFileChangeWatcher,FileChangeWatcher newFileChangeWatcher(String),"[603, 615]","{'A583': [(610, 610), (612, 614)], 'A627': [(603, 609), (611, 611), (615, 615)]}","{'A583': 0.3076923076923077, 'A627': 0.6923076923076923}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    private FileChangeWatcher newFileChangeWatcher(String fileLocation) throws IOException {
        if (fileLocation == null || fileLocation.isEmpty()) {
            return null;
        }
        final Path filePath = Paths.get(fileLocation).toAbsolutePath();
        Path parentPath = filePath.getParent();
        if (parentPath == null) {
            throw new IOException(""Key/trust store path does not have a parent: "" + filePath);
        }
        return new FileChangeWatcher(parentPath, watchEvent -> {
            handleWatchEvent(filePath, watchEvent);
        });
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,enableCertFileReloading,void enableCertFileReloading(),"[622, 643]","{'A583': [(625, 625), (634, 634)], 'A627': [(622, 623), (626, 633), (635, 643)], 'A628': [(624, 624)]}","{'A583': 0.09090909090909091, 'A627': 0.8636363636363636, 'A628': 0.045454545454545456}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    public void enableCertFileReloading() throws IOException {
        LOG.info(""enabling cert file reloading"");
        ZKConfig config = new ZKConfig();
        FileChangeWatcher newKeyStoreFileWatcher = newFileChangeWatcher(config.getProperty(sslKeystoreLocationProperty));
        if (newKeyStoreFileWatcher != null) {
            // stop old watcher if there is one
            if (keyStoreFileWatcher != null) {
                keyStoreFileWatcher.stop();
            }
            keyStoreFileWatcher = newKeyStoreFileWatcher;
            keyStoreFileWatcher.start();
        }
        FileChangeWatcher newTrustStoreFileWatcher = newFileChangeWatcher(config.getProperty(sslTruststoreLocationProperty));
        if (newTrustStoreFileWatcher != null) {
            // stop old watcher if there is one
            if (trustStoreFileWatcher != null) {
                trustStoreFileWatcher.stop();
            }
            trustStoreFileWatcher = newTrustStoreFileWatcher;
            trustStoreFileWatcher.start();
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,close,void close(),"[649, 660]","{'A627': [(649, 650), (652, 660)], 'A628': [(651, 651)]}","{'A627': 0.9166666666666666, 'A628': 0.08333333333333333}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    @Override
    public void close() {
        defaultSSLContextAndOptions.set(null);
        if (keyStoreFileWatcher != null) {
            keyStoreFileWatcher.stop();
            keyStoreFileWatcher = null;
        }
        if (trustStoreFileWatcher != null) {
            trustStoreFileWatcher.stop();
            trustStoreFileWatcher = null;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/X509Util.java,X509Util,handleWatchEvent,"void handleWatchEvent(Path,WatchEvent<?>)","[668, 698]","{'A583': [(674, 675), (683, 686), (693, 696)], 'A627': [(668, 673), (676, 682), (687, 692), (697, 698)]}","{'A583': 0.3225806451612903, 'A627': 0.6774193548387096}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/X509UtilTest.java,"    private void handleWatchEvent(Path filePath, WatchEvent<?> event) {
        boolean shouldResetContext = false;
        Path dirPath = filePath.getParent();
        if (event.kind().equals(StandardWatchEventKinds.OVERFLOW)) {
            // If we get notified about possibly missed events, reload the key store / trust store just to be sure.
            shouldResetContext = true;
        } else if (event.kind().equals(StandardWatchEventKinds.ENTRY_MODIFY)
                   || event.kind().equals(StandardWatchEventKinds.ENTRY_CREATE)) {
            Path eventFilePath = dirPath.resolve((Path) event.context());
            if (filePath.equals(eventFilePath)) {
                shouldResetContext = true;
            }
        }
        // Note: we don't care about delete events
        if (shouldResetContext) {
            LOG.debug(
                ""Attempting to reset default SSL context after receiving watch event: {} with context: {}"",
                event.kind(),
                event.context());
            try {
                this.resetDefaultSSLContextAndOptions();
            } catch (SSLContextException e) {
                throw new RuntimeException(e);
            }
        } else {
            LOG.debug(
                ""Ignoring watch event and keeping previous default SSL context. Event kind: {} with context: {}"",
                event.kind(),
                event.context());
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,init,void init(),"[88, 93]","{'A597': [(88, 93)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    private void init() {
        /**
         * backward compatibility for all currently available client properties
         */
        handleBackwardCompatibility();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,handleBackwardCompatibility,void handleBackwardCompatibility(),"[101, 115]","{'A583': [(108, 108)], 'A597': [(101, 104)], 'A613': [(105, 105), (115, 115)], 'A628': [(109, 109)], 'A627': [(106, 107), (110, 114)]}","{'A583': 0.06666666666666667, 'A597': 0.26666666666666666, 'A613': 0.13333333333333333, 'A628': 0.06666666666666667, 'A627': 0.4666666666666667}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    protected void handleBackwardCompatibility() {
        properties.put(JUTE_MAXBUFFER, System.getProperty(JUTE_MAXBUFFER));
        properties.put(KINIT_COMMAND, System.getProperty(KINIT_COMMAND));
        properties.put(JGSS_NATIVE, System.getProperty(JGSS_NATIVE));

        try (ClientX509Util clientX509Util = new ClientX509Util()) {
            putSSLProperties(clientX509Util);
            properties.put(clientX509Util.getSslAuthProviderProperty(), System.getProperty(clientX509Util.getSslAuthProviderProperty()));
            properties.put(clientX509Util.getSslProviderProperty(), System.getProperty(clientX509Util.getSslProviderProperty()));
        }

        try (X509Util x509Util = new QuorumX509Util()) {
            putSSLProperties(x509Util);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,putSSLProperties,void putSSLProperties(X509Util),"[117, 137]","{'A583': [(118, 122), (124, 126), (128, 129), (131, 135)], 'A597': [(137, 137)], 'A613': [(117, 117)], 'A628': [(136, 136)], 'A586': [(123, 123), (127, 127)], 'A685': [(130, 130)]}","{'A583': 0.7142857142857143, 'A597': 0.047619047619047616, 'A613': 0.047619047619047616, 'A628': 0.047619047619047616, 'A586': 0.09523809523809523, 'A685': 0.047619047619047616}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    private void putSSLProperties(X509Util x509Util) {
        properties.put(x509Util.getSslProtocolProperty(), System.getProperty(x509Util.getSslProtocolProperty()));
        properties.put(x509Util.getSslEnabledProtocolsProperty(), System.getProperty(x509Util.getSslEnabledProtocolsProperty()));
        properties.put(x509Util.getSslCipherSuitesProperty(), System.getProperty(x509Util.getSslCipherSuitesProperty()));
        properties.put(x509Util.getSslKeystoreLocationProperty(), System.getProperty(x509Util.getSslKeystoreLocationProperty()));
        properties.put(x509Util.getSslKeystorePasswdProperty(), System.getProperty(x509Util.getSslKeystorePasswdProperty()));
        properties.put(x509Util.getSslKeystorePasswdPathProperty(), System.getProperty(x509Util.getSslKeystorePasswdPathProperty()));
        properties.put(x509Util.getSslKeystoreTypeProperty(), System.getProperty(x509Util.getSslKeystoreTypeProperty()));
        properties.put(x509Util.getSslTruststoreLocationProperty(), System.getProperty(x509Util.getSslTruststoreLocationProperty()));
        properties.put(x509Util.getSslTruststorePasswdProperty(), System.getProperty(x509Util.getSslTruststorePasswdProperty()));
        properties.put(x509Util.getSslTruststorePasswdPathProperty(), System.getProperty(x509Util.getSslTruststorePasswdPathProperty()));
        properties.put(x509Util.getSslTruststoreTypeProperty(), System.getProperty(x509Util.getSslTruststoreTypeProperty()));
        properties.put(x509Util.getSslContextSupplierClassProperty(), System.getProperty(x509Util.getSslContextSupplierClassProperty()));
        properties.put(x509Util.getSslClientHostnameVerificationEnabledProperty(), System.getProperty(x509Util.getSslClientHostnameVerificationEnabledProperty()));
        properties.put(x509Util.getSslHostnameVerificationEnabledProperty(), System.getProperty(x509Util.getSslHostnameVerificationEnabledProperty()));
        properties.put(x509Util.getSslCrlEnabledProperty(), System.getProperty(x509Util.getSslCrlEnabledProperty()));
        properties.put(x509Util.getSslOcspEnabledProperty(), System.getProperty(x509Util.getSslOcspEnabledProperty()));
        properties.put(x509Util.getSslClientAuthProperty(), System.getProperty(x509Util.getSslClientAuthProperty()));
        properties.put(x509Util.getSslHandshakeDetectionTimeoutMillisProperty(), System.getProperty(x509Util.getSslHandshakeDetectionTimeoutMillisProperty()));
        properties.put(x509Util.getFipsModeProperty(), System.getProperty(x509Util.getFipsModeProperty()));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,getProperty,String getProperty(String),"[145, 147]","{'A597': [(145, 147)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public String getProperty(String key) {
        return properties.get(key);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,getProperty,"String getProperty(String,String)","[157, 160]","{'A597': [(157, 160)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public String getProperty(String key, String defaultValue) {
        String value = properties.get(key);
        return (value == null) ? defaultValue : value;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,getJaasConfKey,String getJaasConfKey(),"[167, 169]","{'A597': [(167, 169)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public String getJaasConfKey() {
        return System.getProperty(Environment.JAAS_CONF_KEY);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,setProperty,"void setProperty(String,String)","[180, 188]","{'A583': [(185, 186)], 'A597': [(180, 184), (187, 188)]}","{'A583': 0.2222222222222222, 'A597': 0.7777777777777778}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public void setProperty(String key, String value) {
        if (null == key) {
            throw new IllegalArgumentException(""property key is null."");
        }
        String oldValue = properties.put(key, value);
        if (null != oldValue && !oldValue.equals(value)) {
            LOG.debug(""key {}'s value {} is replaced with new value {}"", key, oldValue, value);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,addConfiguration,void addConfiguration(File),"[197, 215]","{'A583': [(200, 202)], 'A597': [(197, 199), (203, 215)]}","{'A583': 0.15789473684210525, 'A597': 0.8421052631578947}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public void addConfiguration(File configFile) throws ConfigException {
        LOG.info(""Reading configuration from: {}"", configFile.getAbsolutePath());
        try {
            configFile = (new VerifyingFileFactory.Builder(LOG).warnForRelativePath()
                                                               .failForNonExistingPath()
                                                               .build()).validate(configFile);
            Properties cfg = new Properties();
            FileInputStream in = new FileInputStream(configFile);
            try {
                cfg.load(in);
            } finally {
                in.close();
            }
            parseProperties(cfg);
        } catch (IOException | IllegalArgumentException e) {
            LOG.error(""Error while configuration from: {}"", configFile.getAbsolutePath(), e);
            throw new ConfigException(""Error while processing "" + configFile.getAbsolutePath(), e);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,addConfiguration,void addConfiguration(String),"[224, 226]","{'A597': [(224, 226)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public void addConfiguration(String configPath) throws ConfigException {
        addConfiguration(new File(configPath));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,parseProperties,void parseProperties(Properties),"[228, 234]","{'A597': [(228, 234)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    private void parseProperties(Properties cfg) {
        for (Entry<Object, Object> entry : cfg.entrySet()) {
            String key = entry.getKey().toString().trim();
            String value = entry.getValue().toString().trim();
            setProperty(key, value);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,getBoolean,boolean getBoolean(String),"[240, 242]","{'A597': [(240, 240)], 'A613': [(241, 242)]}","{'A597': 0.3333333333333333, 'A613': 0.6666666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public boolean getBoolean(String key) {
        return getBoolean(key, false);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,getBoolean,"boolean getBoolean(String,boolean)","[257, 264]","{'A597': [(264, 264)], 'A613': [(257, 261), (263, 263)], 'A670': [(262, 262)]}","{'A597': 0.125, 'A613': 0.75, 'A670': 0.125}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public boolean getBoolean(String key, boolean defaultValue) {
        String propertyValue = getProperty(key);
        if (propertyValue == null) {
            return defaultValue;
        } else {
            return Boolean.parseBoolean(propertyValue.trim());
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKConfig.java,ZKConfig,getInt,"int getInt(String,int)","[279, 285]","{'A670': [(282, 282)], 'A629': [(279, 281), (283, 285)]}","{'A670': 0.14285714285714285, 'A629': 0.8571428571428571}",A629,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKConfigTest.java,"    public int getInt(String key, int defaultValue) {
        String value = getProperty(key);
        if (value != null) {
            return Integer.decode(value.trim());
        }
        return defaultValue;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PKCS12FileLoader.java,PKCS12FileLoader.Builder,build,PKCS12FileLoader build(),"[37, 40]","{'A680': [(37, 40)]}",{'A680': 1.0},A680,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PKCS12FileLoaderTest.java,"        @Override
        PKCS12FileLoader build() {
            return new PKCS12FileLoader(keyStorePath, trustStorePath, keyStorePassword, trustStorePassword);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileKeyStoreLoaderBuilderProvider.java,FileKeyStoreLoaderBuilderProvider,getBuilderForKeyStoreFileType,FileKeyStoreLoader.Builder<? extends FileKeyStoreLoader> getBuilderForKeyStoreFileType(KeyStoreFileType),"[33, 46]","{'A583': [(33, 33), (35, 40), (43, 44)], 'A627': [(34, 34), (45, 46)], 'A653': [(41, 42)]}","{'A583': 0.6428571428571429, 'A627': 0.21428571428571427, 'A653': 0.14285714285714285}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileKeyStoreLoaderBuilderProviderTest.java,"    static FileKeyStoreLoader.Builder<? extends FileKeyStoreLoader> getBuilderForKeyStoreFileType(KeyStoreFileType type) {
        switch (Objects.requireNonNull(type)) {
        case JKS:
            return new JKSFileLoader.Builder();
        case PEM:
            return new PEMFileLoader.Builder();
        case PKCS12:
            return new PKCS12FileLoader.Builder();
        case BCFKS:
            return new BCFKSFileLoader.Builder();
        default:
            throw new AssertionError(""Unexpected StoreFileType: "" + type.name());
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/SecretUtils.java,SecretUtils,readSecret,char[] readSecret(String),"[36, 52]","{'A586': [(36, 52)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/SecretUtilsTest.java,"    public static char[] readSecret(final String pathToFile) {
        LOG.info(""Reading secret from {}"", pathToFile);

        try {
            final String secretValue = new String(
                    Files.readAllBytes(Paths.get(pathToFile)), StandardCharsets.UTF_8);

            if (secretValue.endsWith(System.lineSeparator())) {
                return secretValue.substring(0, secretValue.length() - System.lineSeparator().length()).toCharArray();
            }

            return secretValue.toCharArray();
        } catch (final Throwable e) {
            LOG.error(""Exception occurred when reading secret from file {}"", pathToFile, e);
            throw new IllegalStateException(""Exception occurred when reading secret from file "" + pathToFile, e);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PEMFileLoader.java,PEMFileLoader,loadKeyStore,KeyStore loadKeyStore(),"[41, 51]","{'A627': [(41, 51)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PEMFileLoaderTest.java,"    @Override
    public KeyStore loadKeyStore() throws IOException, GeneralSecurityException {
        Optional<String> passwordOption;
        if (keyStorePassword == null || keyStorePassword.length() == 0) {
            passwordOption = Optional.empty();
        } else {
            passwordOption = Optional.of(keyStorePassword);
        }
        File file = new File(keyStorePath);
        return PemReader.loadKeyStore(file, file, passwordOption);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PEMFileLoader.java,PEMFileLoader,loadTrustStore,KeyStore loadTrustStore(),"[53, 56]","{'A627': [(53, 56)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PEMFileLoaderTest.java,"    @Override
    public KeyStore loadTrustStore() throws IOException, GeneralSecurityException {
        return PemReader.loadTrustStore(new File(trustStorePath));
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PEMFileLoader.java,PEMFileLoader.Builder,build,PEMFileLoader build(),"[60, 63]","{'A627': [(60, 63)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PEMFileLoaderTest.java,"        @Override
        PEMFileLoader build() {
            return new PEMFileLoader(keyStorePath, trustStorePath, keyStorePassword, trustStorePassword);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,getState,State getState(),"[84, 86]","{'A627': [(84, 86)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    public synchronized State getState() {
        return state;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,waitForState,void waitForState(State),"[94, 98]","{'A627': [(94, 98)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    synchronized void waitForState(State desiredState) throws InterruptedException {
        while (this.state != desiredState) {
            this.wait();
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,setState,void setState(State),"[104, 107]","{'A627': [(104, 107)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    private synchronized void setState(State newState) {
        state = newState;
        this.notifyAll();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,compareAndSetState,"boolean compareAndSetState(State,State)","[117, 124]","{'A627': [(117, 124)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    private synchronized boolean compareAndSetState(State expected, State update) {
        if (state == expected) {
            setState(update);
            return true;
        } else {
            return false;
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,compareAndSetState,"boolean compareAndSetState(State[],State)","[134, 142]","{'A627': [(134, 142)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    private synchronized boolean compareAndSetState(State[] expectedStates, State update) {
        for (State expected : expectedStates) {
            if (state == expected) {
                setState(update);
                return true;
            }
        }
        return false;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,start,void start(),"[148, 154]","{'A627': [(148, 154)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    public void start() {
        if (!compareAndSetState(State.NEW, State.STARTING)) {
            // If previous state was not NEW, start() has already been called.
            return;
        }
        this.watcherThread.start();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher,stop,void stop(),"[159, 163]","{'A583': [(160, 160)], 'A627': [(159, 159), (161, 163)]}","{'A583': 0.2, 'A627': 0.8}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"    public void stop() {
        if (compareAndSetState(new State[]{State.RUNNING, State.STARTING}, State.STOPPING)) {
            watcherThread.interrupt();
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher.WatcherThread,run,void run(),"[181, 207]","{'A583': [(184, 185), (204, 204)], 'A627': [(181, 183), (186, 203), (205, 207)]}","{'A583': 0.1111111111111111, 'A627': 0.8888888888888888}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"        @Override
        public void run() {
            try {
                LOG.info(""{} thread started"", getName());
                if (!compareAndSetState(FileChangeWatcher.State.STARTING, FileChangeWatcher.State.RUNNING)) {
                    // stop() called shortly after start(), before
                    // this thread started running.
                    FileChangeWatcher.State state = FileChangeWatcher.this.getState();
                    if (state != FileChangeWatcher.State.STOPPING) {
                        throw new IllegalStateException(""Unexpected state: "" + state);
                    }
                    return;
                }
                runLoop();
            } catch (Exception e) {
                LOG.warn(""Error in runLoop()"", e);
                throw e;
            } finally {
                try {
                    watchService.close();
                } catch (IOException e) {
                    LOG.warn(""Error closing watch service"", e);
                }
                LOG.info(""{} thread finished"", getName());
                FileChangeWatcher.this.setState(FileChangeWatcher.State.STOPPED);
            }
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/FileChangeWatcher.java,FileChangeWatcher.WatcherThread,runLoop,void runLoop(),"[209, 236]","{'A583': [(214, 214), (219, 219)], 'A627': [(209, 213), (216, 218), (220, 236)], 'A620': [(215, 215)]}","{'A583': 0.07142857142857142, 'A627': 0.8928571428571429, 'A620': 0.03571428571428571}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/FileChangeWatcherTest.java,"        private void runLoop() {
            while (FileChangeWatcher.this.getState() == FileChangeWatcher.State.RUNNING) {
                WatchKey key;
                try {
                    key = watchService.take();
                } catch (InterruptedException | ClosedWatchServiceException e) {
                    LOG.debug(""{} was interrupted and is shutting down..."", getName());
                    break;
                }
                for (WatchEvent<?> event : key.pollEvents()) {
                    LOG.debug(""Got file changed event: {} with context: {}"", event.kind(), event.context());
                    try {
                        callback.accept(event);
                    } catch (Throwable e) {
                        LOG.error(""Error from callback"", e);
                    }
                }
                boolean isKeyValid = key.reset();
                if (!isKeyValid) {
                    // This is likely a problem, it means that file reloading is broken, probably because the
                    // directory we are watching was deleted or otherwise became inaccessible (unmounted, permissions
                    // changed, ???).
                    // For now, we log an error and exit the watcher thread.
                    LOG.error(""Watch key no longer valid, maybe the directory is inaccessible?"");
                    break;
                }
            }
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/KeyStoreFileType.java,KeyStoreFileType,getPropertyValue,String getPropertyValue(),"[41, 43]","{'A627': [(41, 43)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java,"    public String getPropertyValue() {
        return this.name();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/KeyStoreFileType.java,KeyStoreFileType,getDefaultFileExtension,String getDefaultFileExtension(),"[48, 50]","{'A627': [(48, 50)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java,"    public String getDefaultFileExtension() {
        return defaultFileExtension;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/KeyStoreFileType.java,KeyStoreFileType,fromPropertyValue,KeyStoreFileType fromPropertyValue(String),"[61, 66]","{'A627': [(61, 66)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java,"    public static KeyStoreFileType fromPropertyValue(String propertyValue) {
        if (propertyValue == null || propertyValue.length() == 0) {
            return null;
        }
        return KeyStoreFileType.valueOf(propertyValue.toUpperCase());
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/KeyStoreFileType.java,KeyStoreFileType,fromFilename,KeyStoreFileType fromFilename(String),"[80, 91]","{'A583': [(90, 90)], 'A627': [(80, 89), (91, 91)]}","{'A583': 0.08333333333333333, 'A627': 0.9166666666666666}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java,"    public static KeyStoreFileType fromFilename(String filename) {
        int i = filename.lastIndexOf('.');
        if (i >= 0) {
            String extension = filename.substring(i);
            for (KeyStoreFileType storeFileType : KeyStoreFileType.values()) {
                if (storeFileType.getDefaultFileExtension().equals(extension)) {
                    return storeFileType;
                }
            }
        }
        throw new IllegalArgumentException(""Unable to auto-detect store file type from file name: "" + filename);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/KeyStoreFileType.java,KeyStoreFileType,fromPropertyValueOrFileName,"KeyStoreFileType fromPropertyValueOrFileName(String,String)","[109, 115]","{'A583': [(109, 109)], 'A627': [(110, 115)]}","{'A583': 0.14285714285714285, 'A627': 0.8571428571428571}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/KeyStoreFileTypeTest.java,"    public static KeyStoreFileType fromPropertyValueOrFileName(String propertyValue, String filename) {
        KeyStoreFileType result = KeyStoreFileType.fromPropertyValue(propertyValue);
        if (result == null) {
            result = KeyStoreFileType.fromFilename(filename);
        }
        return result;
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,getParent,TrieNode getParent(),"[88, 90]","{'A583': [(88, 90)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         TrieNode getParent() {
             return this.parent;
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,setParent,void setParent(TrieNode),"[97, 99]","{'A583': [(97, 99)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         void setParent(TrieNode parent) {
             this.parent = parent;
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,setProperty,void setProperty(boolean),"[104, 106]","{'A583': [(104, 106)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         void setProperty(boolean prop) {
             this.property = prop;
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,hasProperty,boolean hasProperty(),"[113, 115]","{'A583': [(113, 115)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         boolean hasProperty() {
             return this.property;
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,getValue,String getValue(),"[122, 124]","{'A583': [(122, 124)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         public String getValue() {
             return this.value;
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,addChild,"void addChild(String,TrieNode)","[132, 134]","{'A583': [(132, 134)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         void addChild(String childName, TrieNode node) {
             this.children.putIfAbsent(childName, node);
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,deleteChild,void deleteChild(String),"[141, 154]","{'A583': [(141, 154)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         void deleteChild(String childName) {
             this.children.computeIfPresent(childName, (key, childNode) -> {
                 // Node no longer has an external property associated
                 childNode.setProperty(false);

                 // Delete it if it has no children (is a leaf node)
                 if (childNode.isLeafNode()) {
                     childNode.setParent(null);
                     return null;
                 }

                 return childNode;
             });
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,getChild,TrieNode getChild(String),"[162, 164]","{'A583': [(162, 164)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         TrieNode getChild(String childName) {
             return this.children.get(childName);
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,getChildren,Collection<String> getChildren(),"[171, 173]","{'A583': [(171, 173)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         Collection<String> getChildren() {
             return children.keySet();
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,isLeafNode,boolean isLeafNode(),"[180, 182]","{'A583': [(180, 182)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         boolean isLeafNode() {
             return children.isEmpty();
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie.TrieNode,toString,String toString(),"[184, 187]","{'A583': [(184, 187)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"         @Override
         public String toString() {
             return ""TrieNode [name="" + value + "", property="" + property + "", children="" + children.keySet() + ""]"";
         }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie,addPath,void addPath(String),"[203, 226]","{'A583': [(203, 205), (207, 208), (210, 226)], 'A603': [(206, 206), (209, 209)]}","{'A583': 0.9166666666666666, 'A603': 0.08333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"     public void addPath(final String path) {
         Objects.requireNonNull(path, ""Path cannot be null"");

         if (path.length() == 0) {
             throw new IllegalArgumentException(""Invalid path: "" + path);
         }
         final String[] pathComponents = split(path);

         writeLock.lock();
         try {
             TrieNode parent = rootNode;
             for (final String part : pathComponents) {
                 TrieNode child = parent.getChild(part);
                 if (child == null) {
                     child = new TrieNode(parent, part);
                     parent.addChild(part, child);
                 }
                 parent = child;
             }
             parent.setProperty(true);
         } finally {
             writeLock.unlock();
         }
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie,deletePath,void deletePath(String),"[233, 259]","{'A583': [(233, 235), (237, 238), (241, 259)], 'A603': [(236, 236), (239, 240)]}","{'A583': 0.8888888888888888, 'A603': 0.1111111111111111}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"     public void deletePath(final String path) {
         Objects.requireNonNull(path, ""Path cannot be null"");

         if (path.length() == 0) {
             throw new IllegalArgumentException(""Invalid path: "" + path);
         }
         final String[] pathComponents = split(path);


         writeLock.lock();
         try {
             TrieNode parent = rootNode;
             for (final String part : pathComponents) {
                 if (parent.getChild(part) == null) {
                     // the path does not exist
                     return;
                 }
                 parent = parent.getChild(part);
                 LOG.debug(""{}"", parent);
             }

             final TrieNode realParent = parent.getParent();
             realParent.deleteChild(parent.getValue());
         } finally {
             writeLock.unlock();
         }
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie,existsNode,boolean existsNode(String),"[268, 291]","{'A583': [(268, 270), (272, 273), (275, 291)], 'A603': [(271, 271), (274, 274)]}","{'A583': 0.9166666666666666, 'A603': 0.08333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"     public boolean existsNode(final String path) {
         Objects.requireNonNull(path, ""Path cannot be null"");

         if (path.length() == 0) {
             throw new IllegalArgumentException(""Invalid path: "" + path);
         }
         final String[] pathComponents = split(path);

         readLock.lock();
         try {
             TrieNode parent = rootNode;
             for (final String part : pathComponents) {
                 if (parent.getChild(part) == null) {
                     // the path does not exist
                     return false;
                 }
                 parent = parent.getChild(part);
                 LOG.debug(""{}"", parent);
             }
         } finally {
             readLock.unlock();
         }
         return true;
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie,findMaxPrefix,String findMaxPrefix(String),"[300, 334]","{'A583': [(300, 302), (304, 334)], 'A603': [(303, 303)]}","{'A583': 0.9714285714285714, 'A603': 0.02857142857142857}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"     public String findMaxPrefix(final String path) {
         Objects.requireNonNull(path, ""Path cannot be null"");

         final String[] pathComponents = split(path);

         readLock.lock();
         try {
             TrieNode parent = rootNode;
             TrieNode deepestPropertyNode = null;
             for (final String element : pathComponents) {
                 parent = parent.getChild(element);
                 if (parent == null) {
                     LOG.debug(""{}"", element);
                     break;
                 }
                 if (parent.hasProperty()) {
                     deepestPropertyNode = parent;
                 }
             }

             if (deepestPropertyNode == null) {
                 return ""/"";
             }

             final Deque<String> treePath = new ArrayDeque<>();
             TrieNode node = deepestPropertyNode;
             while (node != this.rootNode) {
                 treePath.offerFirst(node.getValue());
                 node = node.parent;
             }
             return ""/"" + String.join(""/"", treePath);
         } finally {
             readLock.unlock();
         }
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie,clear,void clear(),"[339, 346]","{'A583': [(339, 346)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"     public void clear() {
         writeLock.lock();
         try {
             rootNode.getChildren().clear();
         } finally {
             writeLock.unlock();
         }
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/PathTrie.java,PathTrie,split,String[] split(String),"[348, 352]","{'A603': [(348, 352)]}",{'A603': 1.0},A603,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/PathTrieTest.java,"     private static String[] split(final String path){
         return Stream.of(path.split(""/""))
                 .filter(t -> !t.trim().isEmpty())
                 .toArray(String[]::new);
     }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,getAcceptedIssuers,X509Certificate[] getAcceptedIssuers(),"[78, 81]","{'A613': [(78, 81)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public X509Certificate[] getAcceptedIssuers() {
        return x509ExtendedTrustManager.getAcceptedIssuers();
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,checkClientTrusted,"void checkClientTrusted(X509Certificate[],String,Socket)","[83, 95]","{'A583': [(84, 87)], 'A613': [(83, 83), (88, 95)]}","{'A583': 0.3076923076923077, 'A613': 0.6923076923076923}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public void checkClientTrusted(
        X509Certificate[] chain,
        String authType,
        Socket socket) throws CertificateException {
        x509ExtendedTrustManager.checkClientTrusted(chain, authType, socket);
        if (clientHostnameVerificationEnabled) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Check client trusted socket.getInetAddress(): {}, {}"", socket.getInetAddress(), socket);
            }
            performHostVerification(socket.getInetAddress(), chain[0]);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,checkServerTrusted,"void checkServerTrusted(X509Certificate[],String,Socket)","[97, 109]","{'A583': [(98, 101)], 'A613': [(97, 97), (102, 109)]}","{'A583': 0.3076923076923077, 'A613': 0.6923076923076923}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public void checkServerTrusted(
        X509Certificate[] chain,
        String authType,
        Socket socket) throws CertificateException {
        x509ExtendedTrustManager.checkServerTrusted(chain, authType, socket);
        if (serverHostnameVerificationEnabled) {
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Check server trusted socket.getInetAddress(): {}, {}"", socket.getInetAddress(), socket);
            }
            performHostVerification(socket.getInetAddress(), chain[0]);
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,checkClientTrusted,"void checkClientTrusted(X509Certificate[],String,SSLEngine)","[111, 127]","{'A583': [(112, 115)], 'A613': [(111, 111), (117, 127)], 'A627': [(116, 116)]}","{'A583': 0.23529411764705882, 'A613': 0.7058823529411765, 'A627': 0.058823529411764705}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public void checkClientTrusted(
        X509Certificate[] chain,
        String authType,
        SSLEngine engine) throws CertificateException {
        x509ExtendedTrustManager.checkClientTrusted(chain, authType, engine);
        if (clientHostnameVerificationEnabled) {
            try {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Check client trusted engine.getPeerHost(): {}, {}"", engine.getPeerHost(), engine);
                }
                performHostVerification(InetAddress.getByName(engine.getPeerHost()), chain[0]);
            } catch (UnknownHostException e) {
                throw new CertificateException(""Failed to verify host"", e);
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,checkServerTrusted,"void checkServerTrusted(X509Certificate[],String,SSLEngine)","[129, 146]","{'A583': [(130, 134)], 'A613': [(129, 129), (135, 146)]}","{'A583': 0.2777777777777778, 'A613': 0.7222222222222222}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public void checkServerTrusted(
        X509Certificate[] chain,
        String authType,
        SSLEngine engine
                                  ) throws CertificateException {
        x509ExtendedTrustManager.checkServerTrusted(chain, authType, engine);
        if (serverHostnameVerificationEnabled) {
            try {
                if (LOG.isDebugEnabled()) {
                    LOG.debug(""Check server trusted engine.getPeerHost(): {}, {}"", engine.getPeerHost(), engine);
                }
                performHostVerification(InetAddress.getByName(engine.getPeerHost()), chain[0]);
            } catch (UnknownHostException e) {
                throw new CertificateException(""Failed to verify host"", e);
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,checkClientTrusted,"void checkClientTrusted(X509Certificate[],String)","[148, 151]","{'A613': [(148, 151)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        x509ExtendedTrustManager.checkClientTrusted(chain, authType);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,checkServerTrusted,"void checkServerTrusted(X509Certificate[],String)","[153, 156]","{'A613': [(153, 156)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    @Override
    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException {
        x509ExtendedTrustManager.checkServerTrusted(chain, authType);
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/ZKTrustManager.java,ZKTrustManager,performHostVerification,"void performHostVerification(InetAddress,X509Certificate)","[169, 196]","{'A583': [(169, 171), (193, 193)], 'A613': [(172, 192), (194, 196)]}","{'A583': 0.14285714285714285, 'A613': 0.8571428571428571}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/ZKTrustManagerTest.java,"    private void performHostVerification(
        InetAddress inetAddress,
        X509Certificate certificate
    ) throws CertificateException {
        String hostAddress = """";
        String hostName = """";
        try {
            hostAddress = inetAddress.getHostAddress();
            if (LOG.isDebugEnabled()) {
                LOG.debug(""Trying to verify host address first: {}"", hostAddress);
            }
            hostnameVerifier.verify(hostAddress, certificate);
        } catch (SSLException addressVerificationException) {
            try {
                hostName = inetAddress.getHostName();
                if (LOG.isDebugEnabled()) {
                    LOG.debug(
                        ""Failed to verify host address: {}, trying to verify host name: {}"",
                        hostAddress, hostName);
                }
                hostnameVerifier.verify(hostName, certificate);
            } catch (SSLException hostnameVerificationException) {
                LOG.error(""Failed to verify host address: {}"", hostAddress, addressVerificationException);
                LOG.error(""Failed to verify hostname: {}"", hostName, hostnameVerificationException);
                throw new CertificateException(""Failed to verify both host address and host name"", hostnameVerificationException);
            }
        }
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/BCFKSFileLoader.java,BCFKSFileLoader.Builder,build,BCFKSFileLoader build(),"[34, 37]","{'A653': [(34, 37)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/common/BCFKSFileLoaderTest.java,"        @Override
        BCFKSFileLoader build() {
            return new BCFKSFileLoader(keyStorePath, trustStorePath, keyStorePassword, trustStorePassword);
        }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/QuorumX509Util.java,QuorumX509Util,getConfigPrefix,String getConfigPrefix(),"[26, 29]","{'A613': [(26, 29)]}",{'A613': 1.0},A613,,"    @Override
    protected String getConfigPrefix() {
        return ""zookeeper.ssl.quorum."";
    }
"
org.apache.zookeeper.common,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/common/QuorumX509Util.java,QuorumX509Util,shouldVerifyClientHostname,boolean shouldVerifyClientHostname(),"[31, 34]","{'A613': [(31, 34)]}",{'A613': 1.0},A613,,"    @Override
    protected boolean shouldVerifyClientHostname() {
        return true;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,getRevision,int getRevision(),"[34, 37]","{'A609': [(34, 37)]}",{'A609': 1.0},A609,,"    @Deprecated
    public static int getRevision() {
        return REVISION;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,getRevisionHash,String getRevisionHash(),"[39, 41]","{'A611': [(39, 41)]}",{'A611': 1.0},A611,,"    public static String getRevisionHash() {
        return REVISION_HASH;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,getBuildDate,String getBuildDate(),"[43, 45]","{'A688': [(43, 45)]}",{'A688': 1.0},A688,,"    public static String getBuildDate() {
        return BUILD_DATE;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,getVersion,String getVersion(),"[47, 50]","{'A583': [(47, 47), (49, 49)], 'A688': [(48, 48), (50, 50)]}","{'A583': 0.5, 'A688': 0.5}",A583,,"    @SuppressFBWarnings(value = ""RCN_REDUNDANT_NULLCHECK_OF_NULL_VALUE"", justification = ""Missing QUALIFIER causes redundant null-check"")
    public static String getVersion() {
        return MAJOR + ""."" + MINOR + ""."" + MICRO + (QUALIFIER == null ? """" : ""-"" + QUALIFIER);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,getVersionRevision,String getVersionRevision(),"[52, 54]","{'A688': [(52, 52), (54, 54)], 'A611': [(53, 53)]}","{'A688': 0.6666666666666666, 'A611': 0.3333333333333333}",A688,,"    public static String getVersionRevision() {
        return getVersion() + ""-"" + getRevisionHash();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,getFullVersion,String getFullVersion(),"[56, 58]","{'A688': [(56, 58)]}",{'A688': 1.0},A688,,"    public static String getFullVersion() {
        return getVersionRevision() + "", built on "" + getBuildDate();
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,printUsage,void printUsage(),"[60, 65]","{'A583': [(61, 63)], 'A688': [(60, 60), (65, 65)], 'A584': [(64, 64)]}","{'A583': 0.5, 'A688': 0.3333333333333333, 'A584': 0.16666666666666666}",A583,,"    public static void printUsage() {
        System.out.print(""Usage:\tjava -cp ... org.apache.zookeeper.Version ""
                         + ""[--full | --short | --revision],\n\tPrints --full version ""
                         + ""info if no arg specified."");
        ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/Version.java,Version,main,void main(String[]),"[78, 94]","{'A583': [(86, 86), (88, 88), (90, 90), (92, 92)], 'A688': [(78, 83), (85, 85), (87, 87), (89, 89), (91, 91), (94, 94)], 'A584': [(84, 84), (93, 93)]}","{'A583': 0.23529411764705882, 'A688': 0.6470588235294118, 'A584': 0.11764705882352941}",A688,,"    public static void main(String[] args) {
        if (args.length > 1) {
            printUsage();
        }
        if (args.length == 0 || (args.length == 1 && args[0].equals(""--full""))) {
            System.out.println(getFullVersion());
            ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
        }
        if (args[0].equals(""--short"")) {
            System.out.println(getVersion());
        } else if (args[0].equals(""--revision"")) {
            System.out.println(getVersionRevision());
        } else {
            printUsage();
        }
        ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,roundToNextInterval,long roundToNextInterval(long),"[53, 55]","{'A591': [(53, 55)]}",{'A591': 1.0},A591,,"    private long roundToNextInterval(long time) {
        return (time / expirationInterval + 1) * expirationInterval;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,remove,Long remove(E),"[63, 74]","{'A591': [(63, 74)]}",{'A591': 1.0},A591,,"    public Long remove(E elem) {
        Long expiryTime = elemMap.remove(elem);
        if (expiryTime != null) {
            Set<E> set = expiryMap.get(expiryTime);
            if (set != null) {
                set.remove(elem);
                // We don't need to worry about removing empty sets,
                // they'll eventually be removed when they expire.
            }
        }
        return expiryTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,update,"Long update(E,int)","[84, 118]","{'A591': [(84, 85), (87, 97), (99, 118)], 'A593': [(86, 86)], 'A605': [(98, 98)]}","{'A591': 0.9428571428571428, 'A593': 0.02857142857142857, 'A605': 0.02857142857142857}",A591,,"    public Long update(E elem, int timeout) {
        Long prevExpiryTime = elemMap.get(elem);
        long now = Time.currentElapsedTime();
        Long newExpiryTime = roundToNextInterval(now + timeout);

        if (newExpiryTime.equals(prevExpiryTime)) {
            // No change, so nothing to update
            return null;
        }

        // First add the elem to the new expiry time bucket in expiryMap.
        Set<E> set = expiryMap.get(newExpiryTime);
        if (set == null) {
            // Construct a ConcurrentHashSet using a ConcurrentHashMap
            set = Collections.newSetFromMap(new ConcurrentHashMap<>());
            // Put the new set in the map, but only if another thread
            // hasn't beaten us to it
            Set<E> existingSet = expiryMap.putIfAbsent(newExpiryTime, set);
            if (existingSet != null) {
                set = existingSet;
            }
        }
        set.add(elem);

        // Map the elem to the new expiry time. If a different previous
        // mapping was present, clean up the previous expiry bucket.
        prevExpiryTime = elemMap.put(elem, newExpiryTime);
        if (prevExpiryTime != null && !newExpiryTime.equals(prevExpiryTime)) {
            Set<E> prevSet = expiryMap.get(prevExpiryTime);
            if (prevSet != null) {
                prevSet.remove(elem);
            }
        }
        return newExpiryTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,getWaitTime,long getWaitTime(),"[123, 127]","{'A591': [(123, 123), (125, 127)], 'A593': [(124, 124)]}","{'A591': 0.8, 'A593': 0.2}",A591,,"    public long getWaitTime() {
        long now = Time.currentElapsedTime();
        long expirationTime = nextExpirationTime.get();
        return now < expirationTime ? (expirationTime - now) : 0L;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,poll,Set<E> poll(),"[137, 153]","{'A583': [(146, 146)], 'A591': [(137, 137), (139, 145), (147, 153)], 'A593': [(138, 138)]}","{'A583': 0.058823529411764705, 'A591': 0.8823529411764706, 'A593': 0.058823529411764705}",A591,,"    public Set<E> poll() {
        long now = Time.currentElapsedTime();
        long expirationTime = nextExpirationTime.get();
        if (now < expirationTime) {
            return Collections.emptySet();
        }

        Set<E> set = null;
        long newExpirationTime = expirationTime + expirationInterval;
        if (nextExpirationTime.compareAndSet(expirationTime, newExpirationTime)) {
            set = expiryMap.remove(expirationTime);
        }
        if (set == null) {
            return Collections.emptySet();
        }
        return set;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,dump,void dump(PrintWriter),"[155, 176]","{'A591': [(155, 160), (162, 167), (169, 176)], 'A593': [(168, 168)], 'A605': [(161, 161)]}","{'A591': 0.9090909090909091, 'A593': 0.045454545454545456, 'A605': 0.045454545454545456}",A591,,"    public void dump(PrintWriter pwriter) {
        pwriter.print(""Sets ("");
        pwriter.print(expiryMap.size());
        pwriter.print("")/("");
        pwriter.print(elemMap.size());
        pwriter.println(""):"");
        ArrayList<Long> keys = new ArrayList<>(expiryMap.keySet());
        Collections.sort(keys);
        for (long time : keys) {
            Set<E> set = expiryMap.get(time);
            if (set != null) {
                pwriter.print(set.size());
                pwriter.print("" expire at "");
                pwriter.print(Time.elapsedTimeToDate(time));
                pwriter.println("":"");
                for (E elem : set) {
                    pwriter.print(""\t"");
                    pwriter.println(elem.toString());
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExpiryQueue.java,ExpiryQueue,getExpiryMap,"Map<Long, Set<E>> getExpiryMap()","[181, 183]","{'A591': [(181, 183)]}",{'A591': 1.0},A591,,"    public Map<Long, Set<E>> getExpiryMap() {
        return Collections.unmodifiableMap(expiryMap);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,parse,void parse(String),"[177, 246]","{'A583': [(179, 179), (185, 185), (200, 204), (206, 228), (230, 244)], 'A591': [(178, 178), (180, 184), (246, 246)], 'A596': [(177, 177), (186, 186), (188, 188), (190, 190), (195, 199), (245, 245)], 'A630': [(189, 189)], 'A647': [(191, 194)], 'A690': [(187, 187), (205, 205), (229, 229)]}","{'A583': 0.6428571428571429, 'A591': 0.1, 'A596': 0.14285714285714285, 'A630': 0.014285714285714285, 'A647': 0.05714285714285714, 'A690': 0.04285714285714286}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public void parse(String path) throws ConfigException {
        LOG.info(""Reading configuration from: "" + path);

        try {
            File configFile = (new VerifyingFileFactory.Builder(LOG)
                .warnForRelativePath()
                .failForNonExistingPath()
                .build()).create(path);

            Properties cfg = new Properties();
            try (FileInputStream in = new FileInputStream(configFile)) {
                cfg.load(in);
                configFileStr = path;
            }

            /* Read entire config file as initial configuration */
            initialConfig = new String(Files.readAllBytes(configFile.toPath()));

            parseProperties(cfg);
        } catch (IOException e) {
            throw new ConfigException(""Error processing "" + path, e);
        } catch (IllegalArgumentException e) {
            throw new ConfigException(""Error processing "" + path, e);
        }

        if (dynamicConfigFileStr != null) {
            try {
                Properties dynamicCfg = new Properties();
                try (FileInputStream inConfig = new FileInputStream(dynamicConfigFileStr)) {
                    dynamicCfg.load(inConfig);
                    if (dynamicCfg.getProperty(""version"") != null) {
                        throw new ConfigException(""dynamic file shouldn't have version inside"");
                    }

                    String version = getVersionFromFilename(dynamicConfigFileStr);
                    // If there isn't any version associated with the filename,
                    // the default version is 0.
                    if (version != null) {
                        dynamicCfg.setProperty(""version"", version);
                    }
                }
                setupQuorumPeerConfig(dynamicCfg, false);

            } catch (IOException e) {
                throw new ConfigException(""Error processing "" + dynamicConfigFileStr, e);
            } catch (IllegalArgumentException e) {
                throw new ConfigException(""Error processing "" + dynamicConfigFileStr, e);
            }
            File nextDynamicConfigFile = new File(configFileStr + nextDynamicConfigFileSuffix);
            if (nextDynamicConfigFile.exists()) {
                try {
                    Properties dynamicConfigNextCfg = new Properties();
                    try (FileInputStream inConfigNext = new FileInputStream(nextDynamicConfigFile)) {
                        dynamicConfigNextCfg.load(inConfigNext);
                    }
                    boolean isHierarchical = false;
                    for (Entry<Object, Object> entry : dynamicConfigNextCfg.entrySet()) {
                        String key = entry.getKey().toString().trim();
                        if (key.startsWith(""group"") || key.startsWith(""weight"")) {
                            isHierarchical = true;
                            break;
                        }
                    }
                    lastSeenQuorumVerifier = createQuorumVerifier(dynamicConfigNextCfg, isHierarchical);
                } catch (IOException e) {
                    LOG.warn(""NextQuorumVerifier is initiated to null"");
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getVersionFromFilename,String getVersionFromFilename(String),"[253, 266]","{'A583': [(255, 255), (257, 257)], 'A617': [(253, 254), (256, 256), (258, 266)]}","{'A583': 0.14285714285714285, 'A617': 0.8571428571428571}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static String getVersionFromFilename(String filename) {
        int i = filename.lastIndexOf('.');
        if (i < 0 || i >= filename.length()) {
            return null;
        }

        String hexVersion = filename.substring(i + 1);
        try {
            long version = Long.parseLong(hexVersion, 16);
            return Long.toHexString(version);
        } catch (NumberFormatException e) {
            return null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,parseProperties,void parseProperties(Properties),"[274, 499]","{'A583': [(274, 274), (298, 298), (330, 330), (333, 333), (335, 335), (349, 349), (351, 351), (355, 356), (399, 401), (404, 406), (412, 414), (421, 424), (441, 441), (454, 454), (479, 479)], 'A591': [(280, 281), (285, 285), (287, 287), (337, 339), (395, 395), (397, 397), (417, 420), (425, 426)], 'A596': [(284, 284), (286, 286), (288, 289), (304, 315), (318, 319), (325, 329), (332, 332), (393, 394), (396, 396), (428, 433), (471, 473), (478, 478)], 'A617': [(490, 490), (492, 492), (494, 494), (496, 497)], 'A630': [(279, 279), (296, 297), (299, 299), (434, 434), (436, 440), (443, 444), (446, 447), (449, 453), (456, 457), (463, 463), (488, 489), (491, 491), (498, 498)], 'A590': [(278, 278), (282, 283), (294, 295), (331, 331), (427, 427), (459, 459), (499, 499)], 'A647': [(277, 277), (300, 301), (464, 470)], 'A594': [(358, 358), (360, 360), (362, 362), (364, 371), (398, 398), (402, 403), (407, 411), (415, 416)], 'A588': [(340, 344)], 'A651': [(391, 392)], 'A593': [(345, 345), (357, 357), (474, 477)], 'A604': [(322, 322), (347, 347), (493, 493), (495, 495)], 'A627': [(353, 353)], 'A584': [(380, 384), (480, 487)], 'A648': [(290, 290), (292, 292), (336, 336)], 'A689': [(302, 303)], 'A618': [(316, 317)], 'A597': [(323, 323), (460, 462)], 'A653': [(385, 385), (387, 389)], 'A609': [(372, 378)], 'A691': [(275, 276), (435, 435), (448, 448)], 'A692': [(291, 291), (293, 293), (324, 324), (334, 334), (346, 346), (348, 348), (350, 350), (352, 352), (354, 354), (359, 359), (361, 361), (363, 363), (379, 379), (386, 386), (390, 390)], 'A650': [(320, 321)], 'A682': [(442, 442), (445, 445), (455, 455), (458, 458)]}","{'A583': 0.11061946902654868, 'A591': 0.06637168141592921, 'A596': 0.16371681415929204, 'A617': 0.022123893805309734, 'A630': 0.11504424778761062, 'A590': 0.03982300884955752, 'A647': 0.04424778761061947, 'A594': 0.09292035398230089, 'A588': 0.022123893805309734, 'A651': 0.008849557522123894, 'A593': 0.02654867256637168, 'A604': 0.017699115044247787, 'A627': 0.004424778761061947, 'A584': 0.05752212389380531, 'A648': 0.01327433628318584, 'A689': 0.008849557522123894, 'A618': 0.008849557522123894, 'A597': 0.017699115044247787, 'A653': 0.017699115044247787, 'A609': 0.030973451327433628, 'A691': 0.017699115044247787, 'A692': 0.06637168141592921, 'A650': 0.008849557522123894, 'A682': 0.017699115044247787}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public void parseProperties(Properties zkProp) throws IOException, ConfigException {
        Integer clientPort = null;
        Integer secureClientPort = null;
        int observerMasterPort = 0;
        String clientPortAddress = null;
        String secureClientPortAddress = null;
        VerifyingFileFactory vff = new VerifyingFileFactory.Builder(LOG).warnForRelativePath().build();
        for (Entry<Object, Object> entry : zkProp.entrySet()) {
            String key = entry.getKey().toString().trim();
            String value = entry.getValue().toString().trim();
            if (key.equals(""dataDir"")) {
                dataDir = vff.create(value);
            } else if (key.equals(""dataLogDir"")) {
                dataLogDir = vff.create(value);
            } else if (key.equals(""clientPort"")) {
                clientPort = Integer.parseInt(value);
            } else if (key.equals(""localSessionsEnabled"")) {
                localSessionsEnabled = parseBoolean(key, value);
            } else if (key.equals(""localSessionsUpgradingEnabled"")) {
                localSessionsUpgradingEnabled = parseBoolean(key, value);
            } else if (key.equals(""clientPortAddress"")) {
                clientPortAddress = value.trim();
            } else if (key.equals(""secureClientPort"")) {
                secureClientPort = Integer.parseInt(value);
            } else if (key.equals(""secureClientPortAddress"")) {
                secureClientPortAddress = value.trim();
            } else if (key.equals(""observerMasterPort"")) {
                observerMasterPort = Integer.parseInt(value);
            } else if (key.equals(""clientPortListenBacklog"")) {
                clientPortListenBacklog = Integer.parseInt(value);
            } else if (key.equals(""tickTime"")) {
                tickTime = Integer.parseInt(value);
            } else if (key.equals(""maxClientCnxns"")) {
                maxClientCnxns = Integer.parseInt(value);
            } else if (key.equals(""minSessionTimeout"")) {
                minSessionTimeout = Integer.parseInt(value);
            } else if (key.equals(""maxSessionTimeout"")) {
                maxSessionTimeout = Integer.parseInt(value);
            } else if (key.equals(""initLimit"")) {
                initLimit = Integer.parseInt(value);
            } else if (key.equals(""syncLimit"")) {
                syncLimit = Integer.parseInt(value);
            } else if (key.equals(""connectToLearnerMasterLimit"")) {
                connectToLearnerMasterLimit = Integer.parseInt(value);
            } else if (key.equals(""electionAlg"")) {
                electionAlg = Integer.parseInt(value);
                if (electionAlg != 3) {
                    throw new ConfigException(""Invalid electionAlg value. Only 3 is supported."");
                }
            } else if (key.equals(""quorumListenOnAllIPs"")) {
                quorumListenOnAllIPs = parseBoolean(key, value);
            } else if (key.equals(""peerType"")) {
                if (value.toLowerCase().equals(""observer"")) {
                    peerType = LearnerType.OBSERVER;
                } else if (value.toLowerCase().equals(""participant"")) {
                    peerType = LearnerType.PARTICIPANT;
                } else {
                    throw new ConfigException(""Unrecognised peertype: "" + value);
                }
            } else if (key.equals(""syncEnabled"")) {
                syncEnabled = parseBoolean(key, value);
            } else if (key.equals(""dynamicConfigFile"")) {
                dynamicConfigFileStr = value;
            } else if (key.equals(""autopurge.snapRetainCount"")) {
                snapRetainCount = Integer.parseInt(value);
            } else if (key.equals(""autopurge.purgeInterval"")) {
                if (Character.isDigit(value.charAt(value.length() - 1))) {
                    purgeIntervalInMs = Time.parseTimeInterval(value) * Time.HOUR; // default is hours for backward compatibility
                } else {
                    purgeIntervalInMs = Time.parseTimeInterval(value);
                }
            } else if (key.equals(""standaloneEnabled"")) {
                setStandaloneEnabled(parseBoolean(key, value));
            } else if (key.equals(""reconfigEnabled"")) {
                setReconfigEnabled(parseBoolean(key, value));
            } else if (key.equals(""sslQuorum"")) {
                sslQuorum = parseBoolean(key, value);
            } else if (key.equals(""portUnification"")) {
                shouldUsePortUnification = parseBoolean(key, value);
            } else if (key.equals(""sslQuorumReloadCertFiles"")) {
                sslQuorumReloadCertFiles = parseBoolean(key, value);
            } else if ((key.startsWith(""server."") || key.startsWith(""group"") || key.startsWith(""weight""))
                       && zkProp.containsKey(""dynamicConfigFile"")) {
                throw new ConfigException(""parameter: "" + key + "" must be in a separate dynamic config file"");
            } else if (key.equals(QuorumAuth.QUORUM_SASL_AUTH_ENABLED)) {
                quorumEnableSasl = parseBoolean(key, value);
            } else if (key.equals(QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED)) {
                quorumServerRequireSasl = parseBoolean(key, value);
            } else if (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED)) {
                quorumLearnerRequireSasl = parseBoolean(key, value);
            } else if (key.equals(QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT)) {
                quorumLearnerLoginContext = value;
            } else if (key.equals(QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT)) {
                quorumServerLoginContext = value;
            } else if (key.equals(QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL)) {
                quorumServicePrincipal = value;
            } else if (key.equals(""quorum.cnxn.threads.size"")) {
                quorumCnxnThreadsSize = Integer.parseInt(value);
            } else if (key.equals(JvmPauseMonitor.INFO_THRESHOLD_KEY)) {
                jvmPauseInfoThresholdMs = Long.parseLong(value);
            } else if (key.equals(JvmPauseMonitor.WARN_THRESHOLD_KEY)) {
                jvmPauseWarnThresholdMs = Long.parseLong(value);
            } else if (key.equals(JvmPauseMonitor.SLEEP_TIME_MS_KEY)) {
                jvmPauseSleepTimeMs = Long.parseLong(value);
            } else if (key.equals(JvmPauseMonitor.JVM_PAUSE_MONITOR_FEATURE_SWITCH_KEY)) {
                jvmPauseMonitorToRun = parseBoolean(key, value);
            } else if (key.equals(""metricsProvider.className"")) {
                metricsProviderClassName = value;
            } else if (key.startsWith(""metricsProvider."")) {
                String keyForMetricsProvider = key.substring(16);
                metricsProviderConfiguration.put(keyForMetricsProvider, value);
            } else if (key.equals(""multiAddress.enabled"")) {
                multiAddressEnabled = parseBoolean(key, value);
            } else if (key.equals(""multiAddress.reachabilityCheckTimeoutMs"")) {
                multiAddressReachabilityCheckTimeoutMs = Integer.parseInt(value);
            } else if (key.equals(""multiAddress.reachabilityCheckEnabled"")) {
                multiAddressReachabilityCheckEnabled = parseBoolean(key, value);
            } else if (key.equals(""oraclePath"")) {
                oraclePath = value;
            } else {
                System.setProperty(""zookeeper."" + key, value);
            }
        }

        if (!quorumEnableSasl && quorumServerRequireSasl) {
            throw new IllegalArgumentException(QuorumAuth.QUORUM_SASL_AUTH_ENABLED
                                               + "" is disabled, so cannot enable ""
                                               + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED);
        }
        if (!quorumEnableSasl && quorumLearnerRequireSasl) {
            throw new IllegalArgumentException(QuorumAuth.QUORUM_SASL_AUTH_ENABLED
                                               + "" is disabled, so cannot enable ""
                                               + QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED);
        }
        // If quorumpeer learner is not auth enabled then self won't be able to
        // join quorum. So this condition is ensuring that the quorumpeer learner
        // is also auth enabled while enabling quorum server require sasl.
        if (!quorumLearnerRequireSasl && quorumServerRequireSasl) {
            throw new IllegalArgumentException(QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED
                                               + "" is disabled, so cannot enable ""
                                               + QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED);
        }

        // Reset to MIN_SNAP_RETAIN_COUNT if invalid (less than 3)
        // PurgeTxnLog.purge(File, File, int) will not allow to purge less
        // than 3.
        if (snapRetainCount < MIN_SNAP_RETAIN_COUNT) {
            LOG.warn(""Invalid autopurge.snapRetainCount: ""
                     + snapRetainCount
                     + "". Defaulting to ""
                     + MIN_SNAP_RETAIN_COUNT);
            snapRetainCount = MIN_SNAP_RETAIN_COUNT;
        }

        if (dataDir == null) {
            throw new IllegalArgumentException(""dataDir is not set"");
        }
        if (dataLogDir == null) {
            dataLogDir = dataDir;
        }

        if (clientPort == null) {
            LOG.info(""clientPort is not set"");
            if (clientPortAddress != null) {
                throw new IllegalArgumentException(""clientPortAddress is set but clientPort is not set"");
            }
        } else if (clientPortAddress != null) {
            this.clientPortAddress = new InetSocketAddress(InetAddress.getByName(clientPortAddress), clientPort);
            LOG.info(""clientPortAddress is {}"", formatInetAddr(this.clientPortAddress));
        } else {
            this.clientPortAddress = new InetSocketAddress(clientPort);
            LOG.info(""clientPortAddress is {}"", formatInetAddr(this.clientPortAddress));
        }

        if (secureClientPort == null) {
            LOG.info(""secureClientPort is not set"");
            if (secureClientPortAddress != null) {
                throw new IllegalArgumentException(""secureClientPortAddress is set but secureClientPort is not set"");
            }
        } else if (secureClientPortAddress != null) {
            this.secureClientPortAddress = new InetSocketAddress(InetAddress.getByName(secureClientPortAddress), secureClientPort);
            LOG.info(""secureClientPortAddress is {}"", formatInetAddr(this.secureClientPortAddress));
        } else {
            this.secureClientPortAddress = new InetSocketAddress(secureClientPort);
            LOG.info(""secureClientPortAddress is {}"", formatInetAddr(this.secureClientPortAddress));
        }
        if (this.secureClientPortAddress != null) {
            configureSSLAuth();
        }

        if (observerMasterPort <= 0) {
            LOG.info(""observerMasterPort is not set"");
        } else {
            this.observerMasterPort = observerMasterPort;
            LOG.info(""observerMasterPort is {}"", observerMasterPort);
        }

        if (tickTime == 0) {
            throw new IllegalArgumentException(""tickTime is not set"");
        }

        minSessionTimeout = minSessionTimeout == -1 ? tickTime * 2 : minSessionTimeout;
        maxSessionTimeout = maxSessionTimeout == -1 ? tickTime * 20 : maxSessionTimeout;

        if (minSessionTimeout > maxSessionTimeout) {
            throw new IllegalArgumentException(""minSessionTimeout must not be larger than maxSessionTimeout"");
        }

        LOG.info(""metricsProvider.className is {}"", metricsProviderClassName);
        try {
            Class.forName(metricsProviderClassName, false, Thread.currentThread().getContextClassLoader());
        } catch (ClassNotFoundException error) {
            throw new IllegalArgumentException(""metrics provider class was not found"", error);
        }

        // backward compatibility - dynamic configuration in the same file as
        // static configuration params see writeDynamicConfig()
        if (dynamicConfigFileStr == null) {
            setupQuorumPeerConfig(zkProp, true);
            if (isDistributed() && isReconfigEnabled()) {
                // we don't backup static config for standalone mode.
                // we also don't backup if reconfig feature is disabled.
                backupOldConfig();
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,configureSSLAuth,void configureSSLAuth(),"[508, 523]","{'A583': [(511, 511), (518, 519)], 'A647': [(508, 508)], 'A613': [(510, 510), (513, 515)], 'A627': [(509, 509), (512, 512), (516, 517), (520, 520)], 'A597': [(521, 523)]}","{'A583': 0.1875, 'A647': 0.0625, 'A613': 0.25, 'A627': 0.3125, 'A597': 0.1875}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static void configureSSLAuth() throws ConfigException {
        try (ClientX509Util clientX509Util = new ClientX509Util()) {
            String sslAuthProp = ProviderRegistry.AUTHPROVIDER_PROPERTY_PREFIX
                                 + System.getProperty(clientX509Util.getSslAuthProviderProperty(), ""x509"");
            if (System.getProperty(sslAuthProp) == null) {
                if ((ProviderRegistry.AUTHPROVIDER_PROPERTY_PREFIX + ""x509"").equals(sslAuthProp)) {
                    System.setProperty(ProviderRegistry.AUTHPROVIDER_PROPERTY_PREFIX + ""x509"",
                        ""org.apache.zookeeper.server.auth.X509AuthenticationProvider"");
                } else {
                    throw new ConfigException(""No auth provider configured for the SSL authentication scheme '""
                                              + System.getProperty(clientX509Util.getSslAuthProviderProperty())
                                              + ""'."");
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,backupOldConfig,void backupOldConfig(),"[529, 542]","{'A617': [(529, 530), (532, 532), (534, 539), (542, 542)], 'A630': [(531, 531), (540, 541)], 'A690': [(533, 533)]}","{'A617': 0.7142857142857143, 'A630': 0.21428571428571427, 'A690': 0.07142857142857142}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private void backupOldConfig() throws IOException {
        new AtomicFileWritingIdiom(new File(configFileStr + "".bak""), new OutputStreamStatement() {
            @Override
            public void write(OutputStream output) throws IOException {
                try (InputStream input = new FileInputStream(new File(configFileStr))) {
                    byte[] buf = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = input.read(buf)) > 0) {
                        output.write(buf, 0, bytesRead);
                    }
                }
            }
        });
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,write,void write(OutputStream),"[531, 540]","{'A617': [(532, 532), (534, 539)], 'A630': [(531, 531), (540, 540)], 'A690': [(533, 533)]}","{'A617': 0.7, 'A630': 0.2, 'A690': 0.1}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"            @Override
            public void write(OutputStream output) throws IOException {
                try (InputStream input = new FileInputStream(new File(configFileStr))) {
                    byte[] buf = new byte[1024];
                    int bytesRead;
                    while ((bytesRead = input.read(buf)) > 0) {
                        output.write(buf, 0, bytesRead);
                    }
                }
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,writeDynamicConfig,"void writeDynamicConfig(String,QuorumVerifier,boolean)","[547, 570]","{'A583': [(547, 547), (553, 553), (558, 558), (560, 560), (563, 563)], 'A617': [(548, 552), (554, 554), (556, 557), (559, 559), (561, 562), (564, 570)], 'A605': [(555, 555)]}","{'A583': 0.20833333333333334, 'A617': 0.75, 'A605': 0.041666666666666664}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static void writeDynamicConfig(final String dynamicConfigFilename, final QuorumVerifier qv, final boolean needKeepVersion) throws IOException {

        new AtomicFileWritingIdiom(new File(dynamicConfigFilename), new WriterStatement() {
            @Override
            public void write(Writer out) throws IOException {
                Properties cfg = new Properties();
                cfg.load(new StringReader(qv.toString()));

                List<String> servers = new ArrayList<>();
                for (Entry<Object, Object> entry : cfg.entrySet()) {
                    String key = entry.getKey().toString().trim();
                    if (!needKeepVersion && key.startsWith(""version"")) {
                        continue;
                    }

                    String value = entry.getValue().toString().trim();
                    servers.add(key.concat(""="").concat(value));
                }

                Collections.sort(servers);
                out.write(StringUtils.joinStrings(servers, ""\n""));
            }
        });
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,write,void write(Writer),"[550, 568]","{'A583': [(553, 553), (558, 558), (560, 560), (563, 563)], 'A617': [(550, 552), (554, 554), (556, 557), (559, 559), (561, 562), (564, 568)], 'A605': [(555, 555)]}","{'A583': 0.21052631578947367, 'A617': 0.7368421052631579, 'A605': 0.05263157894736842}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"            @Override
            public void write(Writer out) throws IOException {
                Properties cfg = new Properties();
                cfg.load(new StringReader(qv.toString()));

                List<String> servers = new ArrayList<>();
                for (Entry<Object, Object> entry : cfg.entrySet()) {
                    String key = entry.getKey().toString().trim();
                    if (!needKeepVersion && key.startsWith(""version"")) {
                        continue;
                    }

                    String value = entry.getValue().toString().trim();
                    servers.add(key.concat(""="").concat(value));
                }

                Collections.sort(servers);
                out.write(StringUtils.joinStrings(servers, ""\n""));
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,editStaticConfig,"void editStaticConfig(String,String,boolean,boolean)","[582, 631]","{'A583': [(584, 584), (586, 586), (588, 589), (592, 595), (628, 628)], 'A617': [(583, 583), (585, 585), (587, 587), (590, 590), (596, 596), (598, 613), (618, 626), (629, 631)], 'A630': [(627, 627)], 'A593': [(591, 591)], 'A690': [(597, 597)], 'A669': [(582, 582), (614, 617)]}","{'A583': 0.18, 'A617': 0.66, 'A630': 0.02, 'A593': 0.02, 'A690': 0.02, 'A669': 0.1}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static void editStaticConfig(final String configFileStr, final String dynamicFileStr, final boolean eraseClientPortAddress, final boolean eraseSecureClientPortAddress) throws IOException {
        // Some tests may not have a static config file.
        if (configFileStr == null) {
            return;
        }

        File configFile = (new VerifyingFileFactory.Builder(LOG).warnForRelativePath().failForNonExistingPath().build())
            .create(configFileStr);

        final File dynamicFile = (new VerifyingFileFactory.Builder(LOG)
            .warnForRelativePath()
            .failForNonExistingPath()
            .build()).create(dynamicFileStr);

        final Properties cfg = new Properties();
        try (FileInputStream in = new FileInputStream(configFile)) {
            cfg.load(in);
        }

        new AtomicFileWritingIdiom(new File(configFileStr), new WriterStatement() {
            @Override
            public void write(Writer out) throws IOException {
                for (Entry<Object, Object> entry : cfg.entrySet()) {
                    String key = entry.getKey().toString().trim();

                    if (key.startsWith(""server."")
                        || key.startsWith(""group"")
                        || key.startsWith(""weight"")
                        || key.startsWith(""dynamicConfigFile"")
                        || key.startsWith(""peerType"")
                        || (eraseClientPortAddress
                            && (key.startsWith(""clientPort"")
                                || key.startsWith(""clientPortAddress"")))
                        || (eraseSecureClientPortAddress
                            && (key.startsWith(""secureClientPort"")
                                || key.startsWith(""secureClientPortAddress"")))) {
                        // not writing them back to static file
                        continue;
                    }

                    String value = entry.getValue().toString().trim();
                    out.write(key.concat(""="").concat(value).concat(""\n""));
                }

                // updates the dynamic file pointer
                String dynamicConfigFilePath = PathUtils.normalizeFileSystemPath(dynamicFile.getCanonicalPath());
                out.write(""dynamicConfigFile="".concat(dynamicConfigFilePath).concat(""\n""));
            }
        });
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,write,void write(Writer),"[602, 629]","{'A583': [(628, 628)], 'A617': [(602, 613), (618, 626), (629, 629)], 'A630': [(627, 627)], 'A669': [(614, 617)]}","{'A583': 0.03571428571428571, 'A617': 0.7857142857142857, 'A630': 0.03571428571428571, 'A669': 0.14285714285714285}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"            @Override
            public void write(Writer out) throws IOException {
                for (Entry<Object, Object> entry : cfg.entrySet()) {
                    String key = entry.getKey().toString().trim();

                    if (key.startsWith(""server."")
                        || key.startsWith(""group"")
                        || key.startsWith(""weight"")
                        || key.startsWith(""dynamicConfigFile"")
                        || key.startsWith(""peerType"")
                        || (eraseClientPortAddress
                            && (key.startsWith(""clientPort"")
                                || key.startsWith(""clientPortAddress"")))
                        || (eraseSecureClientPortAddress
                            && (key.startsWith(""secureClientPort"")
                                || key.startsWith(""secureClientPortAddress"")))) {
                        // not writing them back to static file
                        continue;
                    }

                    String value = entry.getValue().toString().trim();
                    out.write(key.concat(""="").concat(value).concat(""\n""));
                }

                // updates the dynamic file pointer
                String dynamicConfigFilePath = PathUtils.normalizeFileSystemPath(dynamicFile.getCanonicalPath());
                out.write(""dynamicConfigFile="".concat(dynamicConfigFilePath).concat(""\n""));
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,deleteFile,void deleteFile(String),"[633, 645]","{'A583': [(633, 644)], 'A590': [(645, 645)]}","{'A583': 0.9230769230769231, 'A590': 0.07692307692307693}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static void deleteFile(String filename) {
        if (filename == null) {
            return;
        }
        File f = new File(filename);
        if (f.exists()) {
            try {
                f.delete();
            } catch (Exception e) {
                LOG.warn(""deleting {} failed"", filename);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,createQuorumVerifier,"QuorumVerifier createQuorumVerifier(Properties,boolean,String)","[648, 654]","{'A651': [(648, 654)]}",{'A651': 1.0},A651,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private static QuorumVerifier createQuorumVerifier(Properties dynamicConfigProp, boolean isHierarchical, String oraclePath) throws ConfigException {
        if (oraclePath == null) {
            return createQuorumVerifier(dynamicConfigProp, isHierarchical);
        } else {
            return new QuorumOracleMaj(dynamicConfigProp, oraclePath);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,createQuorumVerifier,"QuorumVerifier createQuorumVerifier(Properties,boolean)","[656, 666]","{'A583': [(656, 657), (660, 660), (662, 662), (664, 665)], 'A590': [(658, 659), (661, 661), (663, 663), (666, 666)]}","{'A583': 0.5454545454545454, 'A590': 0.45454545454545453}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private static QuorumVerifier createQuorumVerifier(Properties dynamicConfigProp, boolean isHierarchical) throws ConfigException {
        if (isHierarchical) {
            return new QuorumHierarchical(dynamicConfigProp);
        } else {
            /*
             * The default QuorumVerifier is QuorumMaj
             */
            //LOG.info(""Defaulting to majority quorums"");
            return new QuorumMaj(dynamicConfigProp);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setupQuorumPeerConfig,"void setupQuorumPeerConfig(Properties,boolean)","[668, 675]","{'A583': [(668, 668)], 'A617': [(670, 671), (673, 675)], 'A651': [(669, 669)], 'A669': [(672, 672)]}","{'A583': 0.125, 'A617': 0.625, 'A651': 0.125, 'A669': 0.125}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    void setupQuorumPeerConfig(Properties prop, boolean configBackwardCompatibilityMode) throws IOException, ConfigException {
        quorumVerifier = parseDynamicConfig(prop, electionAlg, true, configBackwardCompatibilityMode, oraclePath);
        setupMyId();
        setupClientPort();
        setupSecureClientPort();
        setupPeerType();
        checkValidity();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,parseDynamicConfig,"QuorumVerifier parseDynamicConfig(Properties,int,boolean,boolean,String)","[684, 733]","{'A583': [(685, 685), (687, 687), (689, 692), (695, 695), (697, 697), (702, 703), (720, 720), (727, 729)], 'A591': [(706, 707), (715, 716)], 'A596': [(694, 694)], 'A617': [(701, 701), (704, 704)], 'A590': [(686, 686), (688, 688), (693, 693), (700, 700), (705, 705), (714, 714), (721, 721), (723, 723), (731, 731), (733, 733)], 'A651': [(684, 684), (696, 696)], 'A593': [(698, 699), (708, 713), (717, 719), (724, 724), (732, 732)], 'A604': [(725, 726), (730, 730)], 'A693': [(722, 722)]}","{'A583': 0.28, 'A591': 0.08, 'A596': 0.02, 'A617': 0.04, 'A590': 0.2, 'A651': 0.04, 'A593': 0.26, 'A604': 0.06, 'A693': 0.02}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static QuorumVerifier parseDynamicConfig(Properties dynamicConfigProp, int eAlg, boolean warnings, boolean configBackwardCompatibilityMode, String oraclePath) throws IOException, ConfigException {
        boolean isHierarchical = false;
        for (Entry<Object, Object> entry : dynamicConfigProp.entrySet()) {
            String key = entry.getKey().toString().trim();
            if (key.startsWith(""group"") || key.startsWith(""weight"")) {
                isHierarchical = true;
            } else if (!configBackwardCompatibilityMode && !key.startsWith(""server."") && !key.equals(""version"")) {
                LOG.info(dynamicConfigProp.toString());
                throw new ConfigException(""Unrecognised parameter: "" + key);
            }
        }

        QuorumVerifier qv = createQuorumVerifier(dynamicConfigProp, isHierarchical, oraclePath);

        int numParticipators = qv.getVotingMembers().size();
        int numObservers = qv.getObservingMembers().size();
        if (numParticipators == 0) {
            if (!standaloneEnabled) {
                throw new IllegalArgumentException(""standaloneEnabled = false then ""
                                                   + ""number of participants should be >0"");
            }
            if (numObservers > 0) {
                throw new IllegalArgumentException(""Observers w/o participants is an invalid configuration"");
            }
        } else if (numParticipators == 1 && standaloneEnabled) {
            // HBase currently adds a single server line to the config, for
            // b/w compatibility reasons we need to keep this here. If standaloneEnabled
            // is true, the QuorumPeerMain script will create a standalone server instead
            // of a quorum configuration
            LOG.error(""Invalid configuration, only one server specified (ignoring)"");
            if (numObservers > 0) {
                throw new IllegalArgumentException(""Observers w/o quorum is an invalid configuration"");
            }
        } else {
            if (warnings) {
                if (numParticipators <= 2) {
                    LOG.warn(""No server failure will be tolerated. You need at least 3 servers."");
                } else if (numParticipators % 2 == 0) {
                    LOG.warn(""Non-optimal configuration, consider an odd number of servers."");
                }
            }

            for (QuorumServer s : qv.getVotingMembers().values()) {
                if (s.electionAddr == null) {
                    throw new IllegalArgumentException(""Missing election port for server: "" + s.id);
                }
            }
        }
        return qv;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setupMyId,void setupMyId(),"[735, 754]","{'A583': [(752, 752)], 'A617': [(735, 751), (753, 754)]}","{'A583': 0.05, 'A617': 0.95}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private void setupMyId() throws IOException {
        File myIdFile = new File(dataDir, ""myid"");
        // standalone server doesn't need myid file.
        if (!myIdFile.isFile()) {
            return;
        }
        BufferedReader br = new BufferedReader(new FileReader(myIdFile));
        String myIdString;
        try {
            myIdString = br.readLine();
        } finally {
            br.close();
        }
        try {
            serverId = Long.parseLong(myIdString);
            MDC.put(""myid"", myIdString);
        } catch (NumberFormatException e) {
            throw new IllegalArgumentException(""serverid "" + myIdString + "" is not a number"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setupClientPort,void setupClientPort(),"[756, 777]","{'A583': [(762, 772)], 'A617': [(756, 761), (777, 777)], 'A694': [(773, 776)]}","{'A583': 0.5, 'A617': 0.3181818181818182, 'A694': 0.18181818181818182}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private void setupClientPort() throws ConfigException {
        if (serverId == UNSET_SERVERID) {
            return;
        }
        QuorumServer qs = quorumVerifier.getAllMembers().get(serverId);
        if (clientPortAddress != null && qs != null && qs.clientAddr != null) {
            if ((!clientPortAddress.getAddress().isAnyLocalAddress() && !clientPortAddress.equals(qs.clientAddr)) || (
                clientPortAddress.getAddress().isAnyLocalAddress()
                && clientPortAddress.getPort() != qs.clientAddr.getPort())) {
                throw new ConfigException(""client address for this server (id = "" + serverId
                                          + "") in static config file is "" + clientPortAddress
                                          + "" is different from client address found in dynamic file: "" + qs.clientAddr);
            }
        }
        if (qs != null && qs.clientAddr != null) {
            clientPortAddress = qs.clientAddr;
        }
        if (qs != null && qs.clientAddr == null) {
            qs.clientAddr = clientPortAddress;
            qs.isClientAddrFromStatic = true;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setupSecureClientPort,void setupSecureClientPort(),"[779, 800]","{'A669': [(779, 800)]}",{'A669': 1.0},A669,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private void setupSecureClientPort() throws ConfigException {
        if (serverId == UNSET_SERVERID) {
            return;
        }
        QuorumServer qs = quorumVerifier.getAllMembers().get(serverId);
        if (secureClientPortAddress != null && qs != null && qs.secureClientAddr != null) {
            if ((!secureClientPortAddress.getAddress().isAnyLocalAddress() && !secureClientPortAddress.equals(qs.secureClientAddr)) || (
                secureClientPortAddress.getAddress().isAnyLocalAddress()
                    && secureClientPortAddress.getPort() != qs.secureClientAddr.getPort())) {
                throw new ConfigException(""secure client address for this server (id = "" + serverId
                    + "") in static config file is "" + secureClientPortAddress
                    + "" is different from secure client address found in dynamic file: "" + qs.secureClientAddr);
            }
        }
        if (qs != null && qs.secureClientAddr != null) {
            secureClientPortAddress = qs.secureClientAddr;
        }
        if (qs != null && qs.secureClientAddr == null) {
            qs.secureClientAddr = secureClientPortAddress;
            qs.isSecureClientAddrFromStatic = true;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setupPeerType,void setupPeerType(),"[802, 815]","{'A583': [(804, 806), (808, 811)], 'A617': [(802, 803), (807, 807), (812, 815)]}","{'A583': 0.5, 'A617': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private void setupPeerType() {
        // Warn about inconsistent peer type
        LearnerType roleByServersList = quorumVerifier.getObservingMembers().containsKey(serverId)
            ? LearnerType.OBSERVER
            : LearnerType.PARTICIPANT;
        if (roleByServersList != peerType) {
            LOG.warn(
                ""Peer type from servers list ({}) doesn't match peerType ({}). Defaulting to servers list."",
                roleByServersList,
                peerType);

            peerType = roleByServersList;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,checkValidity,void checkValidity(),"[817, 829]","{'A583': [(817, 817), (828, 828)], 'A591': [(821, 821), (824, 824), (829, 829)], 'A617': [(818, 820), (822, 823), (825, 827)]}","{'A583': 0.15384615384615385, 'A591': 0.23076923076923078, 'A617': 0.6153846153846154}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public void checkValidity() throws IOException, ConfigException {
        if (isDistributed()) {
            if (initLimit == 0) {
                throw new IllegalArgumentException(""initLimit is not set"");
            }
            if (syncLimit == 0) {
                throw new IllegalArgumentException(""syncLimit is not set"");
            }
            if (serverId == UNSET_SERVERID) {
                throw new IllegalArgumentException(""myid file is missing"");
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getClientPortAddress,InetSocketAddress getClientPortAddress(),"[831, 833]","{'A583': [(831, 833)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public InetSocketAddress getClientPortAddress() {
        return clientPortAddress;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getSecureClientPortAddress,InetSocketAddress getSecureClientPortAddress(),"[834, 836]","{'A583': [(834, 836)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public InetSocketAddress getSecureClientPortAddress() {
        return secureClientPortAddress;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getObserverMasterPort,int getObserverMasterPort(),"[837, 839]","{'A583': [(837, 839)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getObserverMasterPort() {
        return observerMasterPort;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getDataDir,File getDataDir(),"[840, 842]","{'A583': [(840, 842)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public File getDataDir() {
        return dataDir;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getDataLogDir,File getDataLogDir(),"[843, 845]","{'A583': [(843, 845)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public File getDataLogDir() {
        return dataLogDir;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getInitialConfig,String getInitialConfig(),"[847, 849]","{'A647': [(847, 849)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public String getInitialConfig() {
        return initialConfig;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getTickTime,int getTickTime(),"[851, 853]","{'A583': [(851, 853)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getTickTime() {
        return tickTime;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getMaxClientCnxns,int getMaxClientCnxns(),"[854, 856]","{'A583': [(854, 856)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getMaxClientCnxns() {
        return maxClientCnxns;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getMinSessionTimeout,int getMinSessionTimeout(),"[857, 859]","{'A583': [(857, 859)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getMinSessionTimeout() {
        return minSessionTimeout;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getMaxSessionTimeout,int getMaxSessionTimeout(),"[860, 862]","{'A583': [(860, 862)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getMaxSessionTimeout() {
        return maxSessionTimeout;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getMetricsProviderClassName,String getMetricsProviderClassName(),"[863, 865]","{'A583': [(863, 865)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public String getMetricsProviderClassName() {
        return metricsProviderClassName;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getMetricsProviderConfiguration,Properties getMetricsProviderConfiguration(),"[866, 868]","{'A583': [(866, 868)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public Properties getMetricsProviderConfiguration() {
        return metricsProviderConfiguration;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,areLocalSessionsEnabled,boolean areLocalSessionsEnabled(),"[869, 871]","{'A583': [(869, 871)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean areLocalSessionsEnabled() {
        return localSessionsEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isLocalSessionsUpgradingEnabled,boolean isLocalSessionsUpgradingEnabled(),"[872, 874]","{'A648': [(872, 874)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean isLocalSessionsUpgradingEnabled() {
        return localSessionsUpgradingEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isSslQuorum,boolean isSslQuorum(),"[875, 877]","{'A613': [(875, 877)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean isSslQuorum() {
        return sslQuorum;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,shouldUsePortUnification,boolean shouldUsePortUnification(),"[879, 881]","{'A613': [(879, 881)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean shouldUsePortUnification() {
        return shouldUsePortUnification;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getClientPortListenBacklog,int getClientPortListenBacklog(),"[882, 884]","{'A583': [(882, 884)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getClientPortListenBacklog() {
        return clientPortListenBacklog;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getInitLimit,int getInitLimit(),"[886, 888]","{'A583': [(886, 888)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getInitLimit() {
        return initLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getSyncLimit,int getSyncLimit(),"[889, 891]","{'A583': [(889, 891)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getSyncLimit() {
        return syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getConnectToLearnerMasterLimit,int getConnectToLearnerMasterLimit(),"[892, 894]","{'A583': [(892, 894)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getConnectToLearnerMasterLimit() {
        return connectToLearnerMasterLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getElectionAlg,int getElectionAlg(),"[895, 897]","{'A583': [(895, 897)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getElectionAlg() {
        return electionAlg;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getElectionPort,int getElectionPort(),"[898, 900]","{'A583': [(898, 900)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getElectionPort() {
        return electionPort;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getSnapRetainCount,int getSnapRetainCount(),"[902, 904]","{'A591': [(902, 904)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getSnapRetainCount() {
        return snapRetainCount;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getPurgeInterval,int getPurgeInterval(),"[911, 914]","{'A625': [(911, 914)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    @Deprecated
    public int getPurgeInterval() {
        return purgeIntervalInMs / Time.HOUR;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getPurgeIntervalInMs,int getPurgeIntervalInMs(),"[916, 918]","{'A591': [(918, 918)], 'A588': [(916, 917)]}","{'A591': 0.3333333333333333, 'A588': 0.6666666666666666}",A588,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getPurgeIntervalInMs() {
        return purgeIntervalInMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getSyncEnabled,boolean getSyncEnabled(),"[920, 922]","{'A648': [(920, 922)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean getSyncEnabled() {
        return syncEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getQuorumVerifier,QuorumVerifier getQuorumVerifier(),"[924, 926]","{'A596': [(925, 926)], 'A648': [(924, 924)]}","{'A596': 0.6666666666666666, 'A648': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public QuorumVerifier getQuorumVerifier() {
        return quorumVerifier;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getLastSeenQuorumVerifier,QuorumVerifier getLastSeenQuorumVerifier(),"[928, 930]","{'A583': [(928, 928)], 'A590': [(929, 930)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public QuorumVerifier getLastSeenQuorumVerifier() {
        return lastSeenQuorumVerifier;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getServers,"Map<Long, QuorumServer> getServers()","[932, 935]","{'A583': [(932, 932)], 'A591': [(933, 935)]}","{'A583': 0.25, 'A591': 0.75}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public Map<Long, QuorumServer> getServers() {
        // returns all configuration servers -- participants and observers
        return Collections.unmodifiableMap(quorumVerifier.getAllMembers());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getJvmPauseInfoThresholdMs,long getJvmPauseInfoThresholdMs(),"[937, 939]","{'A609': [(937, 939)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public long getJvmPauseInfoThresholdMs() {
        return jvmPauseInfoThresholdMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getJvmPauseWarnThresholdMs,long getJvmPauseWarnThresholdMs(),"[940, 942]","{'A609': [(940, 942)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public long getJvmPauseWarnThresholdMs() {
        return jvmPauseWarnThresholdMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getJvmPauseSleepTimeMs,long getJvmPauseSleepTimeMs(),"[943, 945]","{'A609': [(943, 945)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public long getJvmPauseSleepTimeMs() {
        return jvmPauseSleepTimeMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isJvmPauseMonitorToRun,boolean isJvmPauseMonitorToRun(),"[946, 948]","{'A609': [(946, 948)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean isJvmPauseMonitorToRun() {
        return jvmPauseMonitorToRun;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getServerId,long getServerId(),"[950, 952]","{'A583': [(950, 952)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public long getServerId() {
        return serverId;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isDistributed,boolean isDistributed(),"[954, 956]","{'A583': [(955, 955)], 'A593': [(954, 954), (956, 956)]}","{'A583': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean isDistributed() {
        return quorumVerifier != null && (!standaloneEnabled || quorumVerifier.getVotingMembers().size() > 1);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getPeerType,LearnerType getPeerType(),"[958, 960]","{'A596': [(958, 960)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public LearnerType getPeerType() {
        return peerType;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getConfigFilename,String getConfigFilename(),"[962, 964]","{'A583': [(962, 962)], 'A590': [(963, 964)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public String getConfigFilename() {
        return configFileStr;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getQuorumListenOnAllIPs,Boolean getQuorumListenOnAllIPs(),"[966, 968]","{'A597': [(966, 968)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public Boolean getQuorumListenOnAllIPs() {
        return quorumListenOnAllIPs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isMultiAddressEnabled,boolean isMultiAddressEnabled(),"[970, 972]","{'A653': [(970, 972)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean isMultiAddressEnabled() {
        return multiAddressEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isMultiAddressReachabilityCheckEnabled,boolean isMultiAddressReachabilityCheckEnabled(),"[974, 976]","{'A653': [(974, 976)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public boolean isMultiAddressReachabilityCheckEnabled() {
        return multiAddressReachabilityCheckEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,getMultiAddressReachabilityCheckTimeoutMs,int getMultiAddressReachabilityCheckTimeoutMs(),"[978, 980]","{'A653': [(978, 980)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public int getMultiAddressReachabilityCheckTimeoutMs() {
        return multiAddressReachabilityCheckTimeoutMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isStandaloneEnabled,boolean isStandaloneEnabled(),"[982, 984]","{'A583': [(983, 983)], 'A593': [(982, 982), (984, 984)]}","{'A583': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static boolean isStandaloneEnabled() {
        return standaloneEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setStandaloneEnabled,void setStandaloneEnabled(boolean),"[986, 988]","{'A593': [(986, 986)], 'A604': [(987, 988)]}","{'A593': 0.3333333333333333, 'A604': 0.6666666666666666}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static void setStandaloneEnabled(boolean enabled) {
        standaloneEnabled = enabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,isReconfigEnabled,boolean isReconfigEnabled(),"[990, 992]","{'A583': [(990, 992)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static boolean isReconfigEnabled() {
        return reconfigEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,setReconfigEnabled,void setReconfigEnabled(boolean),"[994, 996]","{'A593': [(996, 996)], 'A604': [(994, 995)]}","{'A593': 0.3333333333333333, 'A604': 0.6666666666666666}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    public static void setReconfigEnabled(boolean enabled) {
        reconfigEnabled = enabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerConfig.java,QuorumPeerConfig,parseBoolean,"boolean parseBoolean(String,String)","[998, 1010]","{'A692': [(998, 1010)]}",{'A692': 1.0},A692,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerConfigTest.java,"    private boolean parseBoolean(String key, String value) throws ConfigException {
        if (value.equalsIgnoreCase(""true"")) {
            return true;
        } else if (value.equalsIgnoreCase(""false"")) {
            return false;
        } else {
            throw new ConfigException(""Invalid option ""
                                      + value
                                      + "" for ""
                                      + key
                                      + "". Choose 'true' or 'false.'"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java,ObserverRequestProcessor,run,void run(),"[64, 130]","{'A583': [(72, 72)], 'A596': [(64, 67), (70, 71), (73, 76), (83, 86), (92, 102), (106, 106), (108, 108), (110, 110), (113, 114), (122, 123), (126, 126), (128, 130)], 'A648': [(115, 121)], 'A675': [(68, 69), (88, 91), (124, 125)], 'A593': [(127, 127)], 'A591': [(87, 87)], 'A604': [(77, 82)], 'A630': [(103, 103)], 'A639': [(104, 104)], 'A616': [(105, 105), (107, 107)], 'A590': [(109, 109), (111, 111)], 'A625': [(112, 112)]}","{'A583': 0.014925373134328358, 'A596': 0.5373134328358209, 'A648': 0.1044776119402985, 'A675': 0.11940298507462686, 'A593': 0.014925373134328358, 'A591': 0.014925373134328358, 'A604': 0.08955223880597014, 'A630': 0.014925373134328358, 'A639': 0.014925373134328358, 'A616': 0.029850746268656716, 'A590': 0.029850746268656716, 'A625': 0.014925373134328358}",A596,,"    @Override
    public void run() {
        try {
            while (!finished) {
                ServerMetrics.getMetrics().LEARNER_REQUEST_PROCESSOR_QUEUE_SIZE.add(queuedRequests.size());

                Request request = queuedRequests.take();
                if (LOG.isTraceEnabled()) {
                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, """");
                }
                if (request == Request.requestOfDeath) {
                    break;
                }

                // Screen quorum requests against ACLs first
                if (!zks.authWriteRequest(request)) {
                    continue;
                }

                // We want to queue the request to be processed before we submit
                // the request to the leader so that we are ready to receive
                // the response
                nextProcessor.processRequest(request);

                if (request.isThrottled()) {
                    continue;
                }

                // We now ship the request to the leader. As with all
                // other quorum operations, sync also follows this code
                // path, but different from others, we need to keep track
                // of the sync operations this Observer has pending, so we
                // add it to pendingSyncs.
                switch (request.type) {
                case OpCode.sync:
                    zks.pendingSyncs.add(request);
                    zks.getObserver().request(request);
                    break;
                case OpCode.create:
                case OpCode.create2:
                case OpCode.createTTL:
                case OpCode.createContainer:
                case OpCode.delete:
                case OpCode.deleteContainer:
                case OpCode.setData:
                case OpCode.reconfig:
                case OpCode.setACL:
                case OpCode.multi:
                case OpCode.check:
                    zks.getObserver().request(request);
                    break;
                case OpCode.createSession:
                case OpCode.closeSession:
                    // Don't forward local sessions to the leader.
                    if (!request.isLocalSession()) {
                        zks.getObserver().request(request);
                    }
                    break;
                }
            }
        } catch (RuntimeException e) { // spotbugs require explicit catch of RuntimeException
            handleException(this.getName(), e);
        } catch (Exception e) {
            handleException(this.getName(), e);
        }
        LOG.info(""ObserverRequestProcessor exited loop!"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java,ObserverRequestProcessor,processRequest,void processRequest(Request),"[135, 155]","{'A583': [(146, 146)], 'A596': [(135, 136), (153, 155)], 'A648': [(137, 145), (147, 152)]}","{'A583': 0.047619047619047616, 'A596': 0.23809523809523808, 'A648': 0.7142857142857143}",A648,,"    public void processRequest(Request request) {
        if (!finished) {
            Request upgradeRequest = null;
            try {
                upgradeRequest = zks.checkUpgradeSession(request);
            } catch (KeeperException ke) {
                if (request.getHdr() != null) {
                    request.getHdr().setType(OpCode.error);
                    request.setTxn(new ErrorTxn(ke.code().intValue()));
                }
                request.setException(ke);
                LOG.info(""Error creating upgrade request"", ke);
            } catch (IOException ie) {
                LOG.error(""Unexpected error in upgrade"", ie);
            }
            if (upgradeRequest != null) {
                queuedRequests.add(upgradeRequest);
            }
            queuedRequests.add(request);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverRequestProcessor.java,ObserverRequestProcessor,shutdown,void shutdown(),"[160, 166]","{'A596': [(160, 160), (162, 166)], 'A591': [(161, 161)]}","{'A596': 0.8571428571428571, 'A591': 0.14285714285714285}",A596,,"    public void shutdown() {
        LOG.info(""Shutting down"");
        finished = true;
        queuedRequests.clear();
        queuedRequests.add(Request.requestOfDeath);
        nextProcessor.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,getObserver,Observer getObserver(),"[58, 60]","{'A596': [(58, 60)]}",{'A596': 1.0},A596,,"    public Observer getObserver() {
        return self.observer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,getLearner,Learner getLearner(),"[62, 65]","{'A583': [(65, 65)], 'A596': [(62, 64)]}","{'A583': 0.25, 'A596': 0.75}",A596,,"    @Override
    public Learner getLearner() {
        return self.observer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,commitRequest,void commitRequest(Request),"[75, 81]","{'A583': [(75, 75), (80, 80)], 'A596': [(81, 81)], 'A648': [(76, 79)]}","{'A583': 0.2857142857142857, 'A596': 0.14285714285714285, 'A648': 0.5714285714285714}",A648,,"    public void commitRequest(Request request) {
        if (syncRequestProcessorEnabled) {
            // Write to txnlog and take periodic snapshot
            syncProcessor.processRequest(request);
        }
        commitProcessor.commit(request);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,setupRequestProcessors,void setupRequestProcessors(),"[87, 110]","{'A583': [(88, 89), (93, 93)], 'A596': [(87, 87), (90, 92), (94, 96), (110, 110)], 'A648': [(97, 109)]}","{'A583': 0.125, 'A596': 0.3333333333333333, 'A648': 0.5416666666666666}",A648,,"    @Override
    protected void setupRequestProcessors() {
        // We might consider changing the processor behaviour of
        // Observers to, for example, remove the disk sync requirements.
        // Currently, they behave almost exactly the same as followers.
        RequestProcessor finalProcessor = new FinalRequestProcessor(this);
        commitProcessor = new CommitProcessor(finalProcessor, Long.toString(getServerId()), true, getZooKeeperServerListener());
        commitProcessor.start();
        firstProcessor = new ObserverRequestProcessor(this, commitProcessor);
        ((ObserverRequestProcessor) firstProcessor).start();

        /*
         * Observer should write to disk, so that the it won't request
         * too old txn from the leader which may lead to getting an entire
         * snapshot.
         *
         * However, this may degrade performance as it has to write to disk
         * and do periodic snapshot which may double the memory requirements
         */
        if (syncRequestProcessorEnabled) {
            syncProcessor = new SyncRequestProcessor(this, null);
            syncProcessor.start();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,sync,void sync(),"[115, 123]","{'A583': [(115, 116), (120, 120)], 'A596': [(117, 119), (121, 123)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public synchronized void sync() {
        if (pendingSyncs.size() == 0) {
            LOG.warn(""Not expecting a sync."");
            return;
        }

        Request r = pendingSyncs.remove();
        commitProcessor.commit(r);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,getState,String getState(),"[125, 128]","{'A583': [(128, 128)], 'A596': [(125, 127)]}","{'A583': 0.25, 'A596': 0.75}",A596,,"    @Override
    public String getState() {
        return ""observer"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverZooKeeperServer.java,ObserverZooKeeperServer,dumpMonitorValues,"void dumpMonitorValues(BiConsumer<String, Object>)","[130, 134]","{'A584': [(130, 134)]}",{'A584': 1.0},A584,,"    @Override
    public void dumpMonitorValues(BiConsumer<String, Object> response) {
        super.dumpMonitorValues(response);
        response.accept(""observer_master_id"", getObserver().getLearnerMasterId());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderRequestProcessor.java,LeaderRequestProcessor,processRequest,void processRequest(Request),"[47, 75]","{'A583': [(48, 48), (66, 66)], 'A648': [(47, 47), (54, 65), (67, 75)], 'A604': [(49, 53)]}","{'A583': 0.06896551724137931, 'A648': 0.7586206896551724, 'A604': 0.1724137931034483}",A648,,"    @Override
    public void processRequest(Request request) throws RequestProcessorException {
        // Screen quorum requests against ACLs first
        if (!lzks.authWriteRequest(request)) {
            return;
        }

        // Check if this is a local session and we are trying to create
        // an ephemeral node, in which case we upgrade the session
        Request upgradeRequest = null;
        try {
            upgradeRequest = lzks.checkUpgradeSession(request);
        } catch (KeeperException ke) {
            if (request.getHdr() != null) {
                LOG.debug(""Updating header"");
                request.getHdr().setType(OpCode.error);
                request.setTxn(new ErrorTxn(ke.code().intValue()));
            }
            request.setException(ke);
            LOG.warn(""Error creating upgrade request"", ke);
        } catch (IOException ie) {
            LOG.error(""Unexpected error in upgrade"", ie);
        }
        if (upgradeRequest != null) {
            nextProcessor.processRequest(upgradeRequest);
        }

        nextProcessor.processRequest(request);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderRequestProcessor.java,LeaderRequestProcessor,shutdown,void shutdown(),"[77, 81]","{'A648': [(77, 81)]}",{'A648': 1.0},A648,,"    @Override
    public void shutdown() {
        LOG.info(""Shutting down"");
        nextProcessor.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,setQuorumServer,void setQuorumServer(QuorumPeer.QuorumServer),"[40, 42]","{'A593': [(40, 42)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public void setQuorumServer(QuorumPeer.QuorumServer peer) {
        this.peer = peer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,getName,String getName(),"[44, 46]","{'A583': [(45, 45)], 'A590': [(44, 44), (46, 46)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public String getName() {
        return ""replica."" + peer.id;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,isHidden,boolean isHidden(),"[47, 49]","{'A590': [(47, 49)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,getQuorumAddress,String getQuorumAddress(),"[51, 54]","{'A590': [(51, 51), (54, 54)], 'A592': [(52, 53)]}","{'A590': 0.5, 'A592': 0.5}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public String getQuorumAddress() {
        return peer.addr.getAllAddresses().stream().map(NetUtils::formatInetAddr)
            .collect(Collectors.joining(""|""));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,getElectionAddress,String getElectionAddress(),"[56, 59]","{'A592': [(57, 58)], 'A593': [(56, 56), (59, 59)]}","{'A592': 0.5, 'A593': 0.5}",A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public String getElectionAddress() {
        return peer.electionAddr.getAllAddresses().stream().map(NetUtils::formatInetAddr)
            .collect(Collectors.joining(""|""));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,getClientAddress,String getClientAddress(),"[61, 66]","{'A592': [(65, 65)], 'A593': [(61, 61), (66, 66)], 'A616': [(62, 64)]}","{'A592': 0.16666666666666666, 'A593': 0.3333333333333333, 'A616': 0.5}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public String getClientAddress() {
        if (null == peer.clientAddr) {
            return """";
        }
        return formatInetAddr(peer.clientAddr);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,getLearnerType,String getLearnerType(),"[68, 70]","{'A593': [(68, 70)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    public String getLearnerType() {
        return peer.type.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/RemotePeerBean.java,RemotePeerBean,isLeader,boolean isLeader(),"[72, 75]","{'A584': [(72, 75)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/RemotePeerBeanTest.java,"    @Override
    public boolean isLeader() {
        return localPeer.isLeader(peer.getId());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getName,String getName(),"[36, 38]","{'A591': [(37, 37)], 'A590': [(36, 36), (38, 38)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String getName() {
        return ""Follower"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getQuorumAddress,String getQuorumAddress(),"[40, 42]","{'A591': [(41, 41)], 'A590': [(40, 40), (42, 42)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String getQuorumAddress() {
        return follower.sock.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getLastQueuedZxid,String getLastQueuedZxid(),"[44, 46]","{'A591': [(44, 46)]}",{'A591': 1.0},A591,,"    public String getLastQueuedZxid() {
        return ""0x"" + Long.toHexString(follower.getLastQueued());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getPendingRevalidationCount,int getPendingRevalidationCount(),"[48, 50]","{'A591': [(48, 49)], 'A596': [(50, 50)]}","{'A591': 0.6666666666666666, 'A596': 0.3333333333333333}",A591,,"    public int getPendingRevalidationCount() {
        return follower.getPendingRevalidationsCount();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getElectionTimeTaken,long getElectionTimeTaken(),"[52, 55]","{'A630': [(52, 55)]}",{'A630': 1.0},A630,,"    @Override
    public long getElectionTimeTaken() {
        return follower.self.getElectionTimeTaken();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getObserverMasterPacketSizeLimit,int getObserverMasterPacketSizeLimit(),"[57, 60]","{'A647': [(57, 60)]}",{'A647': 1.0},A647,,"    @Override
    public int getObserverMasterPacketSizeLimit() {
        return follower.om == null ? -1 : follower.om.getPktsSizeLimit();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,setObserverMasterPacketSizeLimit,void setObserverMasterPacketSizeLimit(int),"[62, 65]","{'A647': [(62, 65)]}",{'A647': 1.0},A647,,"    @Override
    public void setObserverMasterPacketSizeLimit(int sizeLimit) {
        ObserverMaster.setPktsSizeLimit(sizeLimit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getMaxConcurrentSnapSyncs,int getMaxConcurrentSnapSyncs(),"[67, 71]","{'A675': [(67, 71)]}",{'A675': 1.0},A675,,"    @Override
    public int getMaxConcurrentSnapSyncs() {
        final ObserverMaster om = follower.om;
        return om == null ? -1 : om.getMaxConcurrentSnapSyncs();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,setMaxConcurrentSnapSyncs,void setMaxConcurrentSnapSyncs(int),"[73, 79]","{'A675': [(73, 79)]}",{'A675': 1.0},A675,,"    @Override
    public void setMaxConcurrentSnapSyncs(int maxConcurrentSnapshots) {
        final ObserverMaster om = follower.om;
        if (om != null) {
            om.setMaxConcurrentSnapSyncs(maxConcurrentSnapshots);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,getMaxConcurrentDiffSyncs,int getMaxConcurrentDiffSyncs(),"[81, 85]","{'A675': [(81, 85)]}",{'A675': 1.0},A675,,"    @Override
    public int getMaxConcurrentDiffSyncs() {
        final ObserverMaster om = follower.om;
        return om == null ? -1 : om.getMaxConcurrentDiffSyncs();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerBean.java,FollowerBean,setMaxConcurrentDiffSyncs,void setMaxConcurrentDiffSyncs(int),"[87, 93]","{'A675': [(87, 93)]}",{'A675': 1.0},A675,,"    @Override
    public void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs) {
        final ObserverMaster om = follower.om;
        if (om != null) {
            om.setMaxConcurrentDiffSyncs(maxConcurrentDiffSyncs);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java,FollowerRequestProcessor,run,void run(),"[63, 129]","{'A583': [(71, 71)], 'A591': [(90, 95)], 'A590': [(63, 66), (69, 69), (73, 75), (82, 84), (96, 96), (99, 101), (105, 105), (107, 110), (113, 113), (121, 122), (125, 125), (127, 129)], 'A648': [(114, 120)], 'A696': [(85, 86)], 'A593': [(126, 126)], 'A675': [(67, 68), (87, 89), (123, 124)], 'A596': [(70, 70), (72, 72), (97, 98)], 'A604': [(76, 81)], 'A630': [(102, 102)], 'A639': [(103, 103)], 'A616': [(104, 104), (106, 106)], 'A625': [(111, 111)], 'A688': [(112, 112)]}","{'A583': 0.014925373134328358, 'A591': 0.08955223880597014, 'A590': 0.40298507462686567, 'A648': 0.1044776119402985, 'A696': 0.029850746268656716, 'A593': 0.014925373134328358, 'A675': 0.1044776119402985, 'A596': 0.05970149253731343, 'A604': 0.08955223880597014, 'A630': 0.014925373134328358, 'A639': 0.014925373134328358, 'A616': 0.029850746268656716, 'A625': 0.014925373134328358, 'A688': 0.014925373134328358}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessorTest.java,"    @Override
    public void run() {
        try {
            while (!finished) {
                ServerMetrics.getMetrics().LEARNER_REQUEST_PROCESSOR_QUEUE_SIZE.add(queuedRequests.size());

                Request request = queuedRequests.take();
                if (LOG.isTraceEnabled()) {
                    ZooTrace.logRequest(LOG, ZooTrace.CLIENT_REQUEST_TRACE_MASK, 'F', request, """");
                }
                if (request == Request.requestOfDeath) {
                    break;
                }

                // Screen quorum requests against ACLs first
                if (!zks.authWriteRequest(request)) {
                    continue;
                }

                // We want to queue the request to be processed before we submit
                // the request to the leader so that we are ready to receive
                // the response
                maybeSendRequestToNextProcessor(request);

                if (request.isThrottled()) {
                    continue;
                }

                // We now ship the request to the leader. As with all
                // other quorum operations, sync also follows this code
                // path, but different from others, we need to keep track
                // of the sync operations this follower has pending, so we
                // add it to pendingSyncs.
                switch (request.type) {
                case OpCode.sync:
                    zks.pendingSyncs.add(request);
                    zks.getFollower().request(request);
                    break;
                case OpCode.create:
                case OpCode.create2:
                case OpCode.createTTL:
                case OpCode.createContainer:
                case OpCode.delete:
                case OpCode.deleteContainer:
                case OpCode.setData:
                case OpCode.reconfig:
                case OpCode.setACL:
                case OpCode.multi:
                case OpCode.check:
                    zks.getFollower().request(request);
                    break;
                case OpCode.createSession:
                case OpCode.closeSession:
                    // Don't forward local sessions to the leader.
                    if (!request.isLocalSession()) {
                        zks.getFollower().request(request);
                    }
                    break;
                }
            }
        } catch (RuntimeException e) { // spotbugs require explicit catch of RuntimeException
            handleException(this.getName(), e);
        } catch (Exception e) {
            handleException(this.getName(), e);
        }
        LOG.info(""FollowerRequestProcessor exited loop!"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java,FollowerRequestProcessor,maybeSendRequestToNextProcessor,void maybeSendRequestToNextProcessor(Request),"[131, 137]","{'A696': [(131, 137)]}",{'A696': 1.0},A696,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessorTest.java,"    private void maybeSendRequestToNextProcessor(Request request) throws RequestProcessorException {
        if (skipLearnerRequestToNextProcessor && request.isFromLearner()) {
            ServerMetrics.getMetrics().SKIP_LEARNER_REQUEST_TO_NEXT_PROCESSOR_COUNT.add(1);
        } else {
            nextProcessor.processRequest(request);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java,FollowerRequestProcessor,processRequest,void processRequest(Request),"[139, 141]","{'A590': [(139, 139)], 'A647': [(140, 141)]}","{'A590': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessorTest.java,"    public void processRequest(Request request) {
        processRequest(request, true);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java,FollowerRequestProcessor,processRequest,"void processRequest(Request,boolean)","[143, 169]","{'A583': [(158, 158)], 'A590': [(144, 144), (167, 169)], 'A648': [(164, 165)], 'A647': [(143, 143), (145, 157), (159, 163), (166, 166)]}","{'A583': 0.037037037037037035, 'A590': 0.14814814814814814, 'A648': 0.07407407407407407, 'A647': 0.7407407407407407}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessorTest.java,"    void processRequest(Request request, boolean checkForUpgrade) {
        if (!finished) {
            if (checkForUpgrade) {
                // Before sending the request, check if the request requires a
                // global session and what we have is a local session. If so do
                // an upgrade.
                Request upgradeRequest = null;
                try {
                    upgradeRequest = zks.checkUpgradeSession(request);
                } catch (KeeperException ke) {
                    if (request.getHdr() != null) {
                        request.getHdr().setType(OpCode.error);
                        request.setTxn(new ErrorTxn(ke.code().intValue()));
                    }
                    request.setException(ke);
                    LOG.warn(""Error creating upgrade request"", ke);
                } catch (IOException ie) {
                    LOG.error(""Unexpected error in upgrade"", ie);
                }
                if (upgradeRequest != null) {
                    queuedRequests.add(upgradeRequest);
                }
            }

            queuedRequests.add(request);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessor.java,FollowerRequestProcessor,shutdown,void shutdown(),"[171, 177]","{'A591': [(172, 172)], 'A590': [(171, 171), (173, 177)]}","{'A591': 0.14285714285714285, 'A590': 0.8571428571428571}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/FollowerRequestProcessorTest.java,"    public void shutdown() {
        LOG.info(""Shutting down"");
        finished = true;
        queuedRequests.clear();
        queuedRequests.add(Request.requestOfDeath);
        nextProcessor.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyBean.java,ReadOnlyBean,getName,String getName(),"[34, 36]","{'A600': [(34, 36)]}",{'A600': 1.0},A600,,"    public String getName() {
        return ""ReadOnlyServer"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalSessionTracker.java,LocalSessionTracker,isLocalSession,boolean isLocalSession(long),"[34, 36]","{'A648': [(34, 36)]}",{'A648': 1.0},A648,,"    public boolean isLocalSession(long sessionId) {
        return isTrackingSession(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalSessionTracker.java,LocalSessionTracker,isGlobalSession,boolean isGlobalSession(long),"[38, 40]","{'A648': [(38, 40)]}",{'A648': 1.0},A648,,"    public boolean isGlobalSession(long sessionId) {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalSessionTracker.java,LocalSessionTracker,createSession,long createSession(int),"[42, 46]","{'A648': [(46, 46)], 'A612': [(42, 45)]}","{'A648': 0.2, 'A612': 0.8}",A612,,"    public long createSession(int sessionTimeout) {
        long sessionId = super.createSession(sessionTimeout);
        commitSession(sessionId, sessionTimeout);
        return sessionId;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalSessionTracker.java,LocalSessionTracker,localSessions,Set<Long> localSessions(),"[48, 50]","{'A604': [(48, 50)]}",{'A604': 1.0},A604,,"    public Set<Long> localSessions() {
        return sessionsWithTimeout.keySet();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyRequestProcessor.java,ReadOnlyRequestProcessor,run,void run(),"[58, 108]","{'A600': [(58, 64), (69, 78), (82, 82), (84, 84), (86, 86), (90, 90), (97, 103), (106, 108)], 'A593': [(105, 105)], 'A591': [(87, 87), (104, 104)], 'A697': [(65, 68)], 'A597': [(79, 79)], 'A639': [(80, 80)], 'A616': [(81, 81), (83, 83)], 'A590': [(85, 85)], 'A625': [(88, 88)], 'A675': [(89, 89), (91, 96)]}","{'A600': 0.6078431372549019, 'A593': 0.0196078431372549, 'A591': 0.0392156862745098, 'A697': 0.0784313725490196, 'A597': 0.0196078431372549, 'A639': 0.0196078431372549, 'A616': 0.0392156862745098, 'A590': 0.0196078431372549, 'A625': 0.0196078431372549, 'A675': 0.13725490196078433}",A600,,"    public void run() {
        try {
            while (!finished) {
                Request request = queuedRequests.take();

                // log request
                if (LOG.isTraceEnabled()) {
                    long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;
                    if (request.type == OpCode.ping) {
                        traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;
                    }
                    ZooTrace.logRequest(LOG, traceMask, 'R', request, """");
                }
                if (Request.requestOfDeath == request) {
                    break;
                }

                // filter read requests
                switch (request.type) {
                case OpCode.sync:
                case OpCode.create:
                case OpCode.create2:
                case OpCode.createTTL:
                case OpCode.createContainer:
                case OpCode.delete:
                case OpCode.deleteContainer:
                case OpCode.setData:
                case OpCode.reconfig:
                case OpCode.setACL:
                case OpCode.multi:
                case OpCode.check:
                    sendErrorResponse(request);
                    continue;
                case OpCode.closeSession:
                case OpCode.createSession:
                    if (!request.isLocalSession()) {
                        sendErrorResponse(request);
                        continue;
                    }
                }

                // proceed to the next processor
                if (nextProcessor != null) {
                    nextProcessor.processRequest(request);
                }
            }
        } catch (Exception e) {
            handleException(this.getName(), e);
        }
        LOG.info(""ReadOnlyRequestProcessor exited loop!"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyRequestProcessor.java,ReadOnlyRequestProcessor,sendErrorResponse,void sendErrorResponse(Request),"[110, 120]","{'A675': [(110, 120)]}",{'A675': 1.0},A675,,"    private void sendErrorResponse(Request request) {
        ReplyHeader hdr = new ReplyHeader(
                request.cxid,
                zks.getZKDatabase().getDataTreeLastProcessedZxid(),
                Code.NOTREADONLY.intValue());
        try {
            request.cnxn.sendResponse(hdr, null, null);
        } catch (IOException e) {
            LOG.error(""IO exception while sending response"", e);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyRequestProcessor.java,ReadOnlyRequestProcessor,processRequest,void processRequest(Request),"[122, 127]","{'A600': [(122, 127)]}",{'A600': 1.0},A600,,"    @Override
    public void processRequest(Request request) {
        if (!finished) {
            queuedRequests.add(request);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyRequestProcessor.java,ReadOnlyRequestProcessor,shutdown,void shutdown(),"[129, 135]","{'A600': [(129, 135)]}",{'A600': 1.0},A600,,"    @Override
    public void shutdown() {
        finished = true;
        queuedRequests.clear();
        queuedRequests.add(Request.requestOfDeath);
        nextProcessor.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderElectionBean.java,LeaderElectionBean,getName,String getName(),"[31, 33]","{'A590': [(31, 33)]}",{'A590': 1.0},A590,,"    public String getName() {
        return ""LeaderElection"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderElectionBean.java,LeaderElectionBean,isHidden,boolean isHidden(),"[35, 37]","{'A590': [(35, 37)]}",{'A590': 1.0},A590,,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderElectionBean.java,LeaderElectionBean,getStartTime,String getStartTime(),"[39, 41]","{'A590': [(39, 41)]}",{'A590': 1.0},A590,,"    public String getStartTime() {
        return startTime.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,setSocketFactory,void setSocketFactory(Supplier<Socket>),"[196, 198]","{'A653': [(196, 198)]}",{'A653': 1.0},A653,,"    static void setSocketFactory(Supplier<Socket> factory) {
        SOCKET_FACTORY = factory;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.InitialMessage,parse,"InitialMessage parse(Long,DataInputStream)","[236, 288]","{'A583': [(236, 236), (240, 240), (247, 247), (254, 254)], 'A602': [(259, 259)], 'A653': [(239, 239), (257, 258), (260, 261), (263, 268), (270, 284), (287, 287)], 'A593': [(237, 238), (241, 246), (248, 253), (255, 256), (262, 262), (269, 269), (285, 286), (288, 288)]}","{'A583': 0.07547169811320754, 'A602': 0.018867924528301886, 'A653': 0.5094339622641509, 'A593': 0.39622641509433965}",A653,,"        public static InitialMessage parse(Long protocolVersion, DataInputStream din) throws InitialMessageException, IOException {
            Long sid;

            if (protocolVersion != PROTOCOL_VERSION_V1 && protocolVersion != PROTOCOL_VERSION_V2) {
                throw new InitialMessageException(""Got unrecognized protocol version %s"", protocolVersion);
            }

            sid = din.readLong();

            int remaining = din.readInt();
            if (remaining <= 0 || remaining > maxBuffer) {
                throw new InitialMessageException(""Unreasonable buffer length: %s"", remaining);
            }

            byte[] b = new byte[remaining];
            int num_read = din.read(b);

            if (num_read != remaining) {
                throw new InitialMessageException(""Read only %s bytes out of %s sent by server %s"", num_read, remaining, sid);
            }

            // in PROTOCOL_VERSION_V1 we expect to get a single address here represented as a 'host:port' string
            // in PROTOCOL_VERSION_V2 we expect to get multiple addresses like: 'host1:port1|host2:port2|...'
            String[] addressStrings = new String(b, UTF_8).split(""\\|"");
            List<InetSocketAddress> addresses = new ArrayList<>(addressStrings.length);
            for (String addr : addressStrings) {

                String[] host_port;
                try {
                    host_port = ConfigUtils.getHostAndPort(addr);
                } catch (ConfigException e) {
                    throw new InitialMessageException(""Badly formed address: %s"", addr);
                }

                if (host_port.length != 2) {
                    throw new InitialMessageException(""Badly formed address: %s"", addr);
                }

                int port;
                try {
                    port = Integer.parseInt(host_port[1]);
                } catch (NumberFormatException e) {
                    throw new InitialMessageException(""Bad port number: %s"", host_port[1]);
                } catch (ArrayIndexOutOfBoundsException e) {
                    throw new InitialMessageException(""No port number in: %s"", addr);
                }
                if (!isWildcardAddress(host_port[0])) {
                    addresses.add(new InetSocketAddress(host_port[0], port));
                }
            }

            return new InitialMessage(sid, addresses);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.InitialMessage,isWildcardAddress,boolean isWildcardAddress(String),"[296, 303]","{'A653': [(296, 303)]}",{'A653': 1.0},A653,,"        static boolean isWildcardAddress(final String hostname) {
            try {
                return InetAddress.getByName(hostname).isAnyLocalAddress();
            } catch (UnknownHostException e) {
                // if we can not resolve, it can not be a wildcard address
                return false;
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.InitialMessage,toString,String toString(),"[305, 308]","{'A653': [(305, 308)]}",{'A653': 1.0},A653,,"        @Override
        public String toString() {
            return ""InitialMessage{sid="" + sid + "", electionAddr="" + electionAddr + '}';
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,initializeConnectionExecutor,"void initializeConnectionExecutor(long,int)","[345, 356]","{'A583': [(348, 348)], 'A594': [(346, 347), (355, 356)], 'A653': [(345, 345), (349, 354)]}","{'A583': 0.08333333333333333, 'A594': 0.3333333333333333, 'A653': 0.5833333333333334}",A653,,"    private void initializeConnectionExecutor(final long mySid, final int quorumCnxnThreadsSize) {
        final AtomicInteger threadIndex = new AtomicInteger(1);
        SecurityManager s = System.getSecurityManager();
        final ThreadGroup group = (s != null) ? s.getThreadGroup() : Thread.currentThread().getThreadGroup();

        final ThreadFactory daemonThFactory = runnable -> new Thread(group, runnable,
            String.format(""QuorumConnectionThread-[myid=%d]-%d"", mySid, threadIndex.getAndIncrement()));

        this.connectionExecutor = new ThreadPoolExecutor(3, quorumCnxnThreadsSize, 60, TimeUnit.SECONDS,
                                                         new SynchronousQueue<>(), daemonThFactory);
        this.connectionExecutor.allowCoreThreadTimeOut(true);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,testInitiateConnection,void testInitiateConnection(long),"[363, 366]","{'A653': [(363, 363), (365, 365)], 'A596': [(366, 366)], 'A620': [(364, 364)]}","{'A653': 0.5, 'A596': 0.25, 'A620': 0.25}",A653,,"    public void testInitiateConnection(long sid) {
        LOG.debug(""Opening channel to server {}"", sid);
        initiateConnection(self.getVotingView().get(sid).electionAddr, sid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,initiateConnection,"void initiateConnection(MultipleAddresses,Long)","[374, 416]","{'A583': [(409, 409)], 'A594': [(406, 408), (414, 416)], 'A653': [(374, 405), (410, 413)]}","{'A583': 0.023255813953488372, 'A594': 0.13953488372093023, 'A653': 0.8372093023255814}",A653,,"    public void initiateConnection(final MultipleAddresses electionAddr, final Long sid) {
        Socket sock = null;
        try {
            LOG.debug(""Opening channel to server {}"", sid);
            if (self.isSslQuorum()) {
                sock = self.getX509Util().createSSLSocket();
            } else {
                sock = SOCKET_FACTORY.get();
            }
            setSockOpts(sock);
            sock.connect(electionAddr.getReachableOrOne(), cnxTO);
            if (sock instanceof SSLSocket) {
                SSLSocket sslSock = (SSLSocket) sock;
                sslSock.startHandshake();
                LOG.info(""SSL handshake complete with {} - {} - {}"",
                         sslSock.getRemoteSocketAddress(),
                         sslSock.getSession().getProtocol(),
                         sslSock.getSession().getCipherSuite());
            }

            LOG.debug(""Connected to server {} using election address: {}:{}"",
                      sid, sock.getInetAddress(), sock.getPort());
        } catch (X509Exception e) {
            LOG.warn(""Cannot open secure channel to {} at election address {}"", sid, electionAddr, e);
            closeSocket(sock);
            return;
        } catch (UnresolvedAddressException | IOException e) {
            LOG.warn(""Cannot open channel to {} at election address {}"", sid, electionAddr, e);
            closeSocket(sock);
            return;
        }

        try {
            startConnection(sock, sid);
        } catch (IOException e) {
            LOG.error(
              ""Exception while connecting, id: {}, addr: {}, closing learner connection"",
              sid,
              sock.getRemoteSocketAddress(),
              e);
            closeSocket(sock);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,initiateConnectionAsync,"boolean initiateConnectionAsync(MultipleAddresses,Long)","[422, 441]","{'A583': [(423, 423), (426, 426)], 'A594': [(424, 425), (428, 429), (431, 437), (439, 439), (441, 441)], 'A653': [(422, 422), (427, 427), (430, 430), (438, 438), (440, 440)]}","{'A583': 0.1, 'A594': 0.65, 'A653': 0.25}",A594,,"    public boolean initiateConnectionAsync(final MultipleAddresses electionAddr, final Long sid) {
        if (!inprogressConnections.add(sid)) {
            // simply return as there is a connection request to
            // server 'sid' already in progress.
            LOG.debug(""Connection request to server id: {} is already in progress, so skipping this request"", sid);
            return true;
        }
        try {
            connectionExecutor.execute(new QuorumConnectionReqThread(electionAddr, sid));
            connectionThreadCnt.incrementAndGet();
        } catch (Throwable e) {
            // Imp: Safer side catching all type of exceptions and remove 'sid'
            // from inprogress connections. This is to avoid blocking further
            // connection requests from this 'sid' in case of errors.
            inprogressConnections.remove(sid);
            LOG.error(""Exception while submitting quorum connection request"", e);
            return false;
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.QuorumConnectionReqThread,run,void run(),"[455, 462]","{'A583': [(457, 457)], 'A594': [(455, 456), (459, 462)], 'A653': [(458, 458)]}","{'A583': 0.125, 'A594': 0.75, 'A653': 0.125}",A594,,"        @Override
        public void run() {
            try {
                initiateConnection(electionAddr, sid);
            } finally {
                inprogressConnections.remove(sid);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,startConnection,"boolean startConnection(Socket,Long)","[466, 540]","{'A583': [(466, 466), (498, 498), (525, 525), (527, 527)], 'A591': [(529, 529)], 'A688': [(499, 499), (502, 503), (512, 512), (539, 540)], 'A594': [(467, 468), (474, 474), (497, 497), (504, 505), (507, 511), (520, 520)], 'A699': [(471, 473), (475, 475), (477, 477)], 'A653': [(478, 483), (485, 492)], 'A597': [(470, 470), (496, 496), (500, 501), (515, 517), (519, 519)], 'A590': [(476, 476), (494, 495), (538, 538)], 'A596': [(521, 523), (526, 526), (533, 534)], 'A620': [(530, 531)], 'A612': [(524, 524), (528, 528), (532, 532), (535, 537)], 'A702': [(469, 469), (484, 484), (513, 514), (518, 518)], 'A703': [(493, 493)], 'A704': [(506, 506)]}","{'A583': 0.05333333333333334, 'A591': 0.013333333333333334, 'A688': 0.08, 'A594': 0.16, 'A699': 0.06666666666666667, 'A653': 0.18666666666666668, 'A597': 0.10666666666666667, 'A590': 0.05333333333333334, 'A596': 0.08, 'A620': 0.02666666666666667, 'A612': 0.08, 'A702': 0.06666666666666667, 'A703': 0.013333333333333334, 'A704': 0.013333333333333334}",A653,,"    private boolean startConnection(Socket sock, Long sid) throws IOException {
        DataOutputStream dout = null;
        DataInputStream din = null;
        LOG.debug(""startConnection (myId:{} --> sid:{})"", self.getMyId(), sid);
        try {
            // Use BufferedOutputStream to reduce the number of IP packets. This is
            // important for x-DC scenarios.
            BufferedOutputStream buf = new BufferedOutputStream(sock.getOutputStream());
            dout = new DataOutputStream(buf);

            // Sending id and challenge

            // First sending the protocol version (in other words - message type).
            // For backward compatibility reasons we stick to the old protocol version, unless the MultiAddress
            // feature is enabled. During rolling upgrade, we must make sure that all the servers can
            // understand the protocol version we use to avoid multiple partitions. see ZOOKEEPER-3720
            long protocolVersion = self.isMultiAddressEnabled() ? PROTOCOL_VERSION_V2 : PROTOCOL_VERSION_V1;
            dout.writeLong(protocolVersion);
            dout.writeLong(self.getMyId());

            // now we send our election address. For the new protocol version, we can send multiple addresses.
            Collection<InetSocketAddress> addressesToSend = protocolVersion == PROTOCOL_VERSION_V2
                    ? self.getElectionAddress().getAllAddresses()
                    : Arrays.asList(self.getElectionAddress().getOne());

            String addr = addressesToSend.stream()
                    .map(NetUtils::formatInetAddr).collect(Collectors.joining(""|""));
            byte[] addr_bytes = addr.getBytes(UTF_8);
            dout.writeInt(addr_bytes.length);
            dout.write(addr_bytes);
            dout.flush();

            din = new DataInputStream(new BufferedInputStream(sock.getInputStream()));
        } catch (IOException e) {
            LOG.warn(""Ignoring exception reading or writing challenge: "", e);
            closeSocket(sock);
            return false;
        }

        // authenticate learner
        QuorumPeer.QuorumServer qps = self.getView().get(sid);
        if (qps != null) {
            // TODO - investigate why reconfig makes qps null.
            authLearner.authenticate(sock, qps.hostname);
        }

        // If lost the challenge, then drop the new connection
        if (sid > self.getMyId()) {
            LOG.info(""Have smaller server identifier, so dropping the connection: (myId:{} --> sid:{})"", self.getMyId(), sid);
            closeSocket(sock);
            // Otherwise proceed with the connection
        } else {
            LOG.debug(""Have larger server identifier, so keeping the connection: (myId:{} --> sid:{})"", self.getMyId(), sid);
            SendWorker sw = new SendWorker(sock, sid);
            RecvWorker rw = new RecvWorker(sock, din, sid, sw);
            sw.setRecv(rw);

            SendWorker vsw = senderWorkerMap.get(sid);

            if (vsw != null) {
                vsw.finish();
            }

            senderWorkerMap.put(sid, sw);

            queueSendMap.putIfAbsent(sid, new CircularBlockingQueue<>(SEND_CAPACITY));

            sw.start();
            rw.start();

            return true;

        }
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,receiveConnection,void receiveConnection(Socket),"[549, 561]","{'A583': [(552, 552), (557, 557)], 'A594': [(549, 551), (553, 553), (555, 556), (559, 561)], 'A653': [(554, 554), (558, 558)]}","{'A583': 0.15384615384615385, 'A594': 0.6923076923076923, 'A653': 0.15384615384615385}",A594,,"    public void receiveConnection(final Socket sock) {
        DataInputStream din = null;
        try {
            din = new DataInputStream(new BufferedInputStream(sock.getInputStream()));

            LOG.debug(""Sync handling of connection request received from: {}"", sock.getRemoteSocketAddress());
            handleConnection(sock, din);
        } catch (IOException e) {
            LOG.error(""Exception handling connection, addr: {}, closing server connection"", sock.getRemoteSocketAddress());
            LOG.debug(""Exception details: "", e);
            closeSocket(sock);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,receiveConnectionAsync,void receiveConnectionAsync(Socket),"[567, 577]","{'A583': [(570, 570), (573, 573)], 'A594': [(567, 568), (571, 572), (575, 577)], 'A653': [(569, 569), (574, 574)]}","{'A583': 0.18181818181818182, 'A594': 0.6363636363636364, 'A653': 0.18181818181818182}",A594,,"    public void receiveConnectionAsync(final Socket sock) {
        try {
            LOG.debug(""Async handling of connection request received from: {}"", sock.getRemoteSocketAddress());
            connectionExecutor.execute(new QuorumConnectionReceiverThread(sock));
            connectionThreadCnt.incrementAndGet();
        } catch (Throwable e) {
            LOG.error(""Exception handling connection, addr: {}, closing server connection"", sock.getRemoteSocketAddress());
            LOG.debug(""Exception details: "", e);
            closeSocket(sock);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.QuorumConnectionReceiverThread,run,void run(),"[590, 593]","{'A594': [(590, 593)]}",{'A594': 1.0},A594,,"        @Override
        public void run() {
            receiveConnection(sock);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,handleConnection,"void handleConnection(Socket,DataInputStream)","[597, 683]","{'A583': [(597, 597), (627, 627), (630, 630)], 'A591': [(604, 604), (654, 659), (676, 676)], 'A688': [(601, 601), (629, 629), (633, 633), (637, 637), (647, 647), (683, 683)], 'A594': [(626, 626), (634, 636), (667, 667)], 'A653': [(599, 599), (609, 612), (615, 615), (662, 664)], 'A597': [(621, 621), (631, 631), (639, 646), (648, 651), (653, 653), (660, 660), (666, 666)], 'A590': [(598, 598), (602, 603), (605, 605), (618, 618), (622, 625), (628, 628), (682, 682)], 'A596': [(668, 670), (673, 673), (680, 681)], 'A620': [(678, 678)], 'A593': [(600, 600), (606, 608), (614, 614), (616, 617), (619, 620), (632, 632), (652, 652), (665, 665), (672, 672), (674, 675), (677, 677)], 'A612': [(671, 671), (679, 679)], 'A702': [(613, 613), (638, 638), (661, 661)]}","{'A583': 0.034482758620689655, 'A591': 0.09195402298850575, 'A688': 0.06896551724137931, 'A594': 0.05747126436781609, 'A653': 0.10344827586206896, 'A597': 0.19540229885057472, 'A590': 0.12643678160919541, 'A596': 0.06896551724137931, 'A620': 0.011494252873563218, 'A593': 0.1839080459770115, 'A612': 0.022988505747126436, 'A702': 0.034482758620689655}",A597,,"    private void handleConnection(Socket sock, DataInputStream din) throws IOException {
        Long sid = null, protocolVersion = null;
        MultipleAddresses electionAddr = null;

        try {
            protocolVersion = din.readLong();
            if (protocolVersion >= 0) { // this is a server id and not a protocol version
                sid = protocolVersion;
            } else {
                try {
                    InitialMessage init = InitialMessage.parse(protocolVersion, din);
                    sid = init.sid;
                    if (!init.electionAddr.isEmpty()) {
                        electionAddr = new MultipleAddresses(init.electionAddr,
                                Duration.ofMillis(self.getMultiAddressReachabilityCheckTimeoutMs()));
                    }
                    LOG.debug(""Initial message parsed by {}: {}"", self.getMyId(), init.toString());
                } catch (InitialMessage.InitialMessageException ex) {
                    LOG.error(""Initial message parsing error!"", ex);
                    closeSocket(sock);
                    return;
                }
            }

            if (sid == QuorumPeer.OBSERVER_ID) {
                /*
                 * Choose identifier at random. We need a value to identify
                 * the connection.
                 */
                sid = observerCounter.getAndDecrement();
                LOG.info(""Setting arbitrary identifier to observer: {}"", sid);
            }
        } catch (IOException e) {
            LOG.warn(""Exception reading or writing challenge"", e);
            closeSocket(sock);
            return;
        }

        // do authenticating learner
        authServer.authenticate(sock, din);
        //If wins the challenge, then close the new connection.
        if (sid < self.getMyId()) {
            /*
             * This replica might still believe that the connection to sid is
             * up, so we have to shut down the workers before trying to open a
             * new connection.
             */
            SendWorker sw = senderWorkerMap.get(sid);
            if (sw != null) {
                sw.finish();
            }

            /*
             * Now we start a new connection
             */
            LOG.debug(""Create new connection to server: {}"", sid);
            closeSocket(sock);

            if (electionAddr != null) {
                connectOne(sid, electionAddr);
            } else {
                connectOne(sid);
            }

        } else if (sid == self.getMyId()) {
            // we saw this case in ZOOKEEPER-2164
            LOG.warn(""We got a connection request from a server with our own ID. ""
                     + ""This should be either a configuration error, or a bug."");
        } else { // Otherwise start worker threads to receive data.
            SendWorker sw = new SendWorker(sock, sid);
            RecvWorker rw = new RecvWorker(sock, din, sid, sw);
            sw.setRecv(rw);

            SendWorker vsw = senderWorkerMap.get(sid);

            if (vsw != null) {
                vsw.finish();
            }

            senderWorkerMap.put(sid, sw);

            queueSendMap.putIfAbsent(sid, new CircularBlockingQueue<>(SEND_CAPACITY));

            sw.start();
            rw.start();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,toSend,"void toSend(Long,ByteBuffer)","[689, 707]","{'A583': [(694, 695), (700, 702)], 'A688': [(690, 692), (707, 707)], 'A594': [(693, 693)], 'A597': [(696, 699), (706, 706)], 'A596': [(689, 689)], 'A620': [(703, 703)], 'A705': [(704, 705)]}","{'A583': 0.2631578947368421, 'A688': 0.21052631578947367, 'A594': 0.05263157894736842, 'A597': 0.2631578947368421, 'A596': 0.05263157894736842, 'A620': 0.05263157894736842, 'A705': 0.10526315789473684}",A583,,"    public void toSend(Long sid, ByteBuffer b) {
        /*
         * If sending message to myself, then simply enqueue it (loopback).
         */
        if (this.mySid == sid) {
            b.position(0);
            addToRecvQueue(new Message(b.duplicate(), sid));
            /*
             * Otherwise send to the corresponding thread to send.
             */
        } else {
            /*
             * Start a new connection if doesn't have one already.
             */
            BlockingQueue<ByteBuffer> bq = queueSendMap.computeIfAbsent(sid, serverId -> new CircularBlockingQueue<>(SEND_CAPACITY));
            addToSendQueue(bq, b);
            connectOne(sid);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,connectOne,"boolean connectOne(long,MultipleAddresses)","[718, 734]","{'A653': [(718, 718), (721, 726), (730, 733)], 'A590': [(719, 719), (727, 729), (734, 734)], 'A620': [(720, 720)]}","{'A653': 0.6470588235294118, 'A590': 0.29411764705882354, 'A620': 0.058823529411764705}",A653,,"    synchronized boolean connectOne(long sid, MultipleAddresses electionAddr) {
        if (senderWorkerMap.get(sid) != null) {
            LOG.debug(""There is a connection already for server {}"", sid);
            if (self.isMultiAddressEnabled() && electionAddr.size() > 1 && self.isMultiAddressReachabilityCheckEnabled()) {
                // since ZOOKEEPER-3188 we can use multiple election addresses to reach a server. It is possible, that the
                // one we are using is already dead and we need to clean-up, so when we will create a new connection
                // then we will choose an other one, which is actually reachable
                senderWorkerMap.get(sid).asyncValidateIfSocketIsStillReachable();
            }
            return true;
        }

        // we are doing connection initiation always asynchronously, since it is possible that
        // the socket connection timeouts or the SSL handshake takes too long and don't want
        // to keep the rest of the connections to wait
        return initiateConnectionAsync(electionAddr, sid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,connectOne,void connectOne(long),"[742, 783]","{'A583': [(742, 742), (764, 764), (766, 766), (768, 770), (775, 775), (777, 777), (780, 780)], 'A653': [(745, 750), (771, 771), (774, 774)], 'A590': [(743, 743), (752, 752), (779, 779)], 'A596': [(781, 783)], 'A604': [(751, 751), (753, 754), (758, 762), (765, 765), (767, 767), (772, 772), (776, 776), (778, 778)], 'A620': [(744, 744)], 'A702': [(763, 763), (773, 773)], 'A630': [(755, 757)]}","{'A583': 0.21428571428571427, 'A653': 0.19047619047619047, 'A590': 0.07142857142857142, 'A596': 0.07142857142857142, 'A604': 0.30952380952380953, 'A620': 0.023809523809523808, 'A702': 0.047619047619047616, 'A630': 0.07142857142857142}",A604,,"    synchronized void connectOne(long sid) {
        if (senderWorkerMap.get(sid) != null) {
            LOG.debug(""There is a connection already for server {}"", sid);
            if (self.isMultiAddressEnabled() && self.isMultiAddressReachabilityCheckEnabled()) {
                // since ZOOKEEPER-3188 we can use multiple election addresses to reach a server. It is possible, that the
                // one we are using is already dead and we need to clean-up, so when we will create a new connection
                // then we will choose an other one, which is actually reachable
                senderWorkerMap.get(sid).asyncValidateIfSocketIsStillReachable();
            }
            return;
        }
        synchronized (self.QV_LOCK) {
            boolean knownId = false;
            // Resolve hostname for the remote server before attempting to
            // connect in case the underlying ip address has changed.
            self.recreateSocketAddresses(sid);
            Map<Long, QuorumPeer.QuorumServer> lastCommittedView = self.getView();
            QuorumVerifier lastSeenQV = self.getLastSeenQuorumVerifier();
            Map<Long, QuorumPeer.QuorumServer> lastProposedView = lastSeenQV.getAllMembers();
            if (lastCommittedView.containsKey(sid)) {
                knownId = true;
                LOG.debug(""Server {} knows {} already, it is in the lastCommittedView"", self.getMyId(), sid);
                if (connectOne(sid, lastCommittedView.get(sid).electionAddr)) {
                    return;
                }
            }
            if (lastSeenQV != null
                && lastProposedView.containsKey(sid)
                && (!knownId
                    || !lastProposedView.get(sid).electionAddr.equals(lastCommittedView.get(sid).electionAddr))) {
                knownId = true;
                LOG.debug(""Server {} knows {} already, it is in the lastProposedView"", self.getMyId(), sid);

                if (connectOne(sid, lastProposedView.get(sid).electionAddr)) {
                    return;
                }
            }
            if (!knownId) {
                LOG.warn(""Invalid server id: {} "", sid);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,connectAll,void connectAll(),"[790, 796]","{'A583': [(790, 790), (792, 792)], 'A596': [(791, 791), (793, 794), (796, 796)], 'A612': [(795, 795)]}","{'A583': 0.2857142857142857, 'A596': 0.5714285714285714, 'A612': 0.14285714285714285}",A596,,"    public void connectAll() {
        long sid;
        for (Enumeration<Long> en = queueSendMap.keys(); en.hasMoreElements(); ) {
            sid = en.nextElement();
            connectOne(sid);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,haveDelivered,boolean haveDelivered(),"[801, 811]","{'A688': [(801, 801), (808, 809), (811, 811)], 'A597': [(807, 807)], 'A596': [(806, 806), (810, 810)], 'A620': [(802, 805)]}","{'A688': 0.36363636363636365, 'A597': 0.09090909090909091, 'A596': 0.18181818181818182, 'A620': 0.36363636363636365}",A688,,"    boolean haveDelivered() {
        for (BlockingQueue<ByteBuffer> queue : queueSendMap.values()) {
            final int queueSize = queue.size();
            LOG.debug(""Queue size: {}"", queueSize);
            if (queueSize == 0) {
                return true;
            }
        }

        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,halt,void halt(),"[816, 835]","{'A688': [(817, 817)], 'A594': [(828, 834)], 'A597': [(821, 826)], 'A590': [(816, 816), (819, 819)], 'A596': [(818, 818), (827, 827), (835, 835)], 'A612': [(820, 820)]}","{'A688': 0.05, 'A594': 0.35, 'A597': 0.3, 'A590': 0.1, 'A596': 0.15, 'A612': 0.05}",A594,,"    public void halt() {
        shutdown = true;
        LOG.debug(""Halting listener"");
        listener.halt();

        // Wait for the listener to terminate.
        try {
            listener.join();
        } catch (InterruptedException ex) {
            LOG.warn(""Got interrupted before joining the listener"", ex);
        }
        softHalt();

        // clear data structures used for auth
        if (connectionExecutor != null) {
            connectionExecutor.shutdown();
        }
        inprogressConnections.clear();
        resetConnectionThreadCount();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,softHalt,void softHalt(),"[840, 845]","{'A597': [(840, 841), (843, 845)], 'A702': [(842, 842)]}","{'A597': 0.8333333333333334, 'A702': 0.16666666666666666}",A597,,"    public void softHalt() {
        for (SendWorker sw : senderWorkerMap.values()) {
            LOG.debug(""Server {} is soft-halting sender towards: {}"", self.getMyId(), sw);
            sw.finish();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,setSockOpts,void setSockOpts(Socket),"[853, 857]","{'A597': [(853, 854), (857, 857)], 'A701': [(855, 855)], 'A647': [(856, 856)]}","{'A597': 0.6, 'A701': 0.2, 'A647': 0.2}",A597,,"    private void setSockOpts(Socket sock) throws SocketException {
        sock.setTcpNoDelay(true);
        sock.setKeepAlive(tcpKeepAlive);
        sock.setSoTimeout(this.socketTimeout);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,closeSocket,void closeSocket(Socket),"[865, 875]","{'A688': [(875, 875)], 'A597': [(865, 865), (870, 874)], 'A616': [(866, 869)]}","{'A688': 0.09090909090909091, 'A597': 0.5454545454545454, 'A616': 0.36363636363636365}",A597,,"    private void closeSocket(Socket sock) {
        if (sock == null) {
            return;
        }

        try {
            sock.close();
        } catch (IOException ie) {
            LOG.error(""Exception while closing"", ie);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,getThreadCount,long getThreadCount(),"[880, 882]","{'A590': [(880, 882)]}",{'A590': 1.0},A590,,"    public long getThreadCount() {
        return threadCnt.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,getConnectionThreadCount,long getConnectionThreadCount(),"[887, 889]","{'A594': [(887, 889)]}",{'A594': 1.0},A594,,"    public long getConnectionThreadCount() {
        return connectionThreadCnt.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,resetConnectionThreadCount,void resetConnectionThreadCount(),"[894, 896]","{'A594': [(894, 895)], 'A590': [(896, 896)]}","{'A594': 0.6666666666666666, 'A590': 0.3333333333333333}",A594,,"    private void resetConnectionThreadCount() {
        connectionThreadCnt.set(0);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener,setSocketBindErrorHandler,void setSocketBindErrorHandler(Runnable),"[939, 941]","{'A698': [(939, 940)], 'A593': [(941, 941)]}","{'A698': 0.6666666666666666, 'A593': 0.3333333333333333}",A698,,"        void setSocketBindErrorHandler(Runnable errorHandler) {
            this.socketBindErrorHandler = errorHandler;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener,run,void run(),"[943, 998]","{'A583': [(987, 987)], 'A688': [(944, 944), (982, 983), (998, 998)], 'A698': [(995, 995)], 'A653': [(945, 945), (947, 947), (949, 953), (955, 959), (967, 974), (976, 979), (984, 984), (988, 994)], 'A597': [(986, 986), (997, 997)], 'A590': [(943, 943)], 'A700': [(975, 975), (980, 980)], 'A596': [(981, 981), (985, 985)], 'A613': [(948, 948), (954, 954)], 'A612': [(996, 996)], 'A702': [(946, 946)], 'A706': [(960, 966)]}","{'A583': 0.017857142857142856, 'A688': 0.07142857142857142, 'A698': 0.017857142857142856, 'A653': 0.5714285714285714, 'A597': 0.03571428571428571, 'A590': 0.017857142857142856, 'A700': 0.03571428571428571, 'A596': 0.03571428571428571, 'A613': 0.03571428571428571, 'A612': 0.017857142857142856, 'A702': 0.017857142857142856, 'A706': 0.125}",A653,,"        @Override
        public void run() {
            if (!shutdown) {
                LOG.debug(""Listener thread started, myId: {}"", self.getMyId());
                Set<InetSocketAddress> addresses;

                if (self.getQuorumListenOnAllIPs()) {
                    addresses = self.getElectionAddress().getWildcardAddresses();
                } else {
                    addresses = self.getElectionAddress().getAllAddresses();
                }

                CountDownLatch latch = new CountDownLatch(addresses.size());
                listenerHandlers = addresses.stream().map(address ->
                                new ListenerHandler(address, self.shouldUsePortUnification(), self.isSslQuorum(), latch))
                        .collect(Collectors.toList());

                final ExecutorService executor = Executors.newFixedThreadPool(addresses.size());
                try {
                    listenerHandlers.forEach(executor::submit);
                } finally {
                    // prevent executor's threads to leak after ListenerHandler tasks complete
                    executor.shutdown();
                }

                try {
                    latch.await();
                } catch (InterruptedException ie) {
                    LOG.error(""Interrupted while sleeping. Ignoring exception"", ie);
                } finally {
                    // Clean up for shutdown.
                    for (ListenerHandler handler : listenerHandlers) {
                        try {
                            handler.close();
                        } catch (IOException ie) {
                            // Don't log an error for shutdown.
                            LOG.debug(""Error closing server socket"", ie);
                        }
                    }
                }
            }

            LOG.info(""Leaving listener"");
            if (!shutdown) {
                LOG.error(
                  ""As I'm leaving the listener thread, I won't be able to participate in leader election any longer: {}"",
                  self.getElectionAddress().getAllAddresses().stream()
                    .map(NetUtils::formatInetAddr)
                    .collect(Collectors.joining(""|"")));
                if (socketException.get()) {
                    // After leaving listener thread, the host cannot join the quorum anymore,
                    // this is a severe error that we cannot recover from, so we need to exit
                    socketBindErrorHandler.run();
                }
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener,halt,void halt(),"[1003, 1015]","{'A583': [(1003, 1003)], 'A653': [(1004, 1012), (1014, 1015)], 'A596': [(1013, 1013)]}","{'A583': 0.07692307692307693, 'A653': 0.8461538461538461, 'A596': 0.07692307692307693}",A653,,"        void halt() {
            LOG.debug(""Halt called: Trying to close listeners"");
            if (listenerHandlers != null) {
                LOG.debug(""Closing listener: {}"", QuorumCnxManager.this.mySid);
                for (ListenerHandler handler : listenerHandlers) {
                    try {
                        handler.close();
                    } catch (IOException e) {
                        LOG.warn(""Exception when shutting down listener: "", e);
                    }
                }
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener.ListenerHandler,run,void run(),"[1035, 1051]","{'A653': [(1035, 1051)]}",{'A653': 1.0},A653,,"            @Override
            public void run() {
                try {
                    Thread.currentThread().setName(""ListenerHandler-"" + address);
                    acceptConnections();
                    try {
                        close();
                    } catch (IOException e) {
                        LOG.warn(""Exception when shutting down listener: "", e);
                    }
                } catch (Exception e) {
                    // Output of unexpected exception, should never happen
                    LOG.error(""Unexpected error "", e);
                } finally {
                    latch.countDown();
                }
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener.ListenerHandler,close,void close(),"[1053, 1059]","{'A653': [(1053, 1059)]}",{'A653': 1.0},A653,,"            @Override
            public synchronized void close() throws IOException {
                if (serverSocket != null && !serverSocket.isClosed()) {
                    LOG.debug(""Trying to close listeners: {}"", serverSocket);
                    serverSocket.close();
                }
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener.ListenerHandler,acceptConnections,void acceptConnections(),"[1064, 1124]","{'A653': [(1064, 1098), (1100, 1124)], 'A707': [(1099, 1099)]}","{'A653': 0.9836065573770492, 'A707': 0.01639344262295082}",A653,,"            private void acceptConnections() {
                int numRetries = 0;
                Socket client = null;

                while ((!shutdown) && (portBindMaxRetry == 0 || numRetries < portBindMaxRetry)) {
                    try {
                        serverSocket = createNewServerSocket();
                        LOG.info(""{} is accepting connections now, my election bind port: {}"", QuorumCnxManager.this.mySid, address.toString());
                        while (!shutdown) {
                            try {
                                client = serverSocket.accept();
                                setSockOpts(client);
                                LOG.info(""Received connection request from {}"", client.getRemoteSocketAddress());
                                // Receive and handle the connection request
                                // asynchronously if the quorum sasl authentication is
                                // enabled. This is required because sasl server
                                // authentication process may take few seconds to finish,
                                // this may delay next peer connection requests.
                                if (quorumSaslAuthEnabled) {
                                    receiveConnectionAsync(client);
                                } else {
                                    receiveConnection(client);
                                }
                                numRetries = 0;
                            } catch (SocketTimeoutException e) {
                                LOG.warn(""The socket is listening for the election accepted ""
                                        + ""and it timed out unexpectedly, but will retry.""
                                        + ""see ZOOKEEPER-2836"");
                            }
                        }
                    } catch (IOException e) {
                        if (shutdown) {
                            break;
                        }

                        LOG.error(""Exception while listening to address {}"", address, e);

                        if (e instanceof SocketException) {
                            socketException.set(true);
                        }

                        numRetries++;
                        try {
                            close();
                            Thread.sleep(1000);
                        } catch (IOException ie) {
                            LOG.error(""Error closing server socket"", ie);
                        } catch (InterruptedException ie) {
                            LOG.error(""Interrupted while sleeping. Ignoring exception"", ie);
                        }
                        closeSocket(client);
                    }
                }
                if (!shutdown) {
                    LOG.error(
                      ""Leaving listener thread for address {} after {} errors. Use {} property to increase retry count."",
                      formatInetAddr(address),
                      numRetries,
                      ELECTION_PORT_BIND_RETRY);
                }
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.Listener.ListenerHandler,createNewServerSocket,ServerSocket createNewServerSocket(),"[1126, 1144]","{'A653': [(1126, 1139), (1141, 1143)], 'A590': [(1144, 1144)], 'A708': [(1140, 1140)]}","{'A653': 0.8947368421052632, 'A590': 0.05263157894736842, 'A708': 0.05263157894736842}",A653,,"            private ServerSocket createNewServerSocket() throws IOException {
                ServerSocket socket;

                if (portUnification) {
                    LOG.info(""Creating TLS-enabled quorum server socket"");
                    socket = new UnifiedServerSocket(self.getX509Util(), true);
                } else if (sslQuorum) {
                    LOG.info(""Creating TLS-only quorum server socket"");
                    socket = new UnifiedServerSocket(self.getX509Util(), false);
                } else {
                    socket = new ServerSocket();
                }

                socket.setReuseAddress(true);
                address = new InetSocketAddress(address.getHostString(), address.getPort());
                socket.bind(address);

                return socket;
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.SendWorker,setRecv,void setRecv(RecvWorker),"[1187, 1189]","{'A688': [(1188, 1189)], 'A596': [(1187, 1187)]}","{'A688': 0.6666666666666666, 'A596': 0.3333333333333333}",A688,,"        synchronized void setRecv(RecvWorker recvWorker) {
            this.recvWorker = recvWorker;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.SendWorker,getRecvWorker,RecvWorker getRecvWorker(),"[1196, 1198]","{'A583': [(1196, 1196)], 'A596': [(1197, 1198)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"        synchronized RecvWorker getRecvWorker() {
            return recvWorker;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.SendWorker,finish,boolean finish(),"[1200, 1223]","{'A583': [(1203, 1203)], 'A591': [(1204, 1204), (1206, 1208)], 'A688': [(1210, 1210), (1213, 1213), (1215, 1215), (1222, 1223)], 'A653': [(1201, 1201)], 'A597': [(1211, 1211), (1214, 1214), (1216, 1217), (1220, 1220)], 'A590': [(1221, 1221)], 'A596': [(1200, 1200), (1212, 1212)], 'A620': [(1218, 1218)], 'A612': [(1202, 1202), (1205, 1205), (1209, 1209)], 'A616': [(1219, 1219)]}","{'A583': 0.041666666666666664, 'A591': 0.16666666666666666, 'A688': 0.20833333333333334, 'A653': 0.041666666666666664, 'A597': 0.20833333333333334, 'A590': 0.041666666666666664, 'A596': 0.08333333333333333, 'A620': 0.041666666666666664, 'A612': 0.125, 'A616': 0.041666666666666664}",A688,,"        synchronized boolean finish() {
            LOG.debug(""Calling SendWorker.finish for {}"", sid);

            if (!running) {
                /*
                 * Avoids running finish() twice.
                 */
                return running;
            }

            running = false;
            closeSocket(sock);

            this.interrupt();
            if (recvWorker != null) {
                recvWorker.finish();
            }

            LOG.debug(""Removing entry from senderWorkerMap sid={}"", sid);

            senderWorkerMap.remove(sid, this);
            threadCnt.decrementAndGet();
            return running;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.SendWorker,send,void send(ByteBuffer),"[1225, 1237]","{'A597': [(1226, 1230), (1232, 1236)], 'A596': [(1225, 1225), (1237, 1237)], 'A593': [(1231, 1231)]}","{'A597': 0.7692307692307693, 'A596': 0.15384615384615385, 'A593': 0.07692307692307693}",A597,,"        synchronized void send(ByteBuffer b) throws IOException {
            byte[] msgBytes = new byte[b.capacity()];
            try {
                b.position(0);
                b.get(msgBytes);
            } catch (BufferUnderflowException be) {
                LOG.error(""BufferUnderflowException "", be);
                return;
            }
            dout.writeInt(b.capacity());
            dout.write(b.array());
            dout.flush();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.SendWorker,run,void run(),"[1239, 1301]","{'A583': [(1258, 1262), (1279, 1279), (1283, 1283), (1288, 1288), (1292, 1296), (1299, 1299)], 'A688': [(1240, 1240), (1282, 1282), (1290, 1290), (1297, 1297), (1301, 1301)], 'A653': [(1268, 1268)], 'A597': [(1242, 1255), (1257, 1257), (1263, 1263), (1271, 1271), (1276, 1278)], 'A590': [(1239, 1239), (1241, 1241)], 'A596': [(1264, 1264), (1266, 1267), (1270, 1270), (1272, 1274), (1280, 1281), (1284, 1287), (1289, 1289), (1291, 1291), (1298, 1298)], 'A620': [(1256, 1256), (1275, 1275)], 'A612': [(1269, 1269)], 'A600': [(1265, 1265)], 'A702': [(1300, 1300)]}","{'A583': 0.2222222222222222, 'A688': 0.07936507936507936, 'A653': 0.015873015873015872, 'A597': 0.31746031746031744, 'A590': 0.031746031746031744, 'A596': 0.25396825396825395, 'A620': 0.031746031746031744, 'A612': 0.015873015873015872, 'A600': 0.015873015873015872, 'A702': 0.015873015873015872}",A597,,"        @Override
        public void run() {
            threadCnt.incrementAndGet();
            try {
                /**
                 * If there is nothing in the queue to send, then we
                 * send the lastMessage to ensure that the last message
                 * was received by the peer. The message could be dropped
                 * in case self or the peer shutdown their connection
                 * (and exit the thread) prior to reading/processing
                 * the last message. Duplicate messages are handled correctly
                 * by the peer.
                 *
                 * If the send queue is non-empty, then we have a recent
                 * message than that stored in lastMessage. To avoid sending
                 * stale message, we should send the message in the send queue.
                 */
                BlockingQueue<ByteBuffer> bq = queueSendMap.get(sid);
                if (bq == null || isSendQueueEmpty(bq)) {
                    ByteBuffer b = lastMessageSent.get(sid);
                    if (b != null) {
                        LOG.debug(""Attempting to send lastMessage to sid={}"", sid);
                        send(b);
                    }
                }
            } catch (IOException e) {
                LOG.error(""Failed to send last message. Shutting down thread."", e);
                this.finish();
            }
            LOG.debug(""SendWorker thread started towards {}. myId: {}"", sid, QuorumCnxManager.this.mySid);

            try {
                while (running && !shutdown && sock != null) {

                    ByteBuffer b = null;
                    try {
                        BlockingQueue<ByteBuffer> bq = queueSendMap.get(sid);
                        if (bq != null) {
                            b = pollSendQueue(bq, 1000, TimeUnit.MILLISECONDS);
                        } else {
                            LOG.error(""No queue of incoming messages for server {}"", sid);
                            break;
                        }

                        if (b != null) {
                            lastMessageSent.put(sid, b);
                            send(b);
                        }
                    } catch (InterruptedException e) {
                        LOG.warn(""Interrupted while waiting for message on queue"", e);
                    }
                }
            } catch (Exception e) {
                LOG.warn(
                    ""Exception when using channel: for id {} my id = {}"",
                    sid ,
                    QuorumCnxManager.this.mySid,
                    e);
            }
            this.finish();

            LOG.warn(""Send worker leaving thread id {} my id = {}"", sid, self.getMyId());
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.SendWorker,asyncValidateIfSocketIsStillReachable,void asyncValidateIfSocketIsStillReachable(),"[1304, 1328]","{'A653': [(1304, 1328)]}",{'A653': 1.0},A653,,"        public void asyncValidateIfSocketIsStillReachable() {
            if (ongoingAsyncValidation.compareAndSet(false, true)) {
                new Thread(() -> {
                    LOG.debug(""validate if destination address is reachable for sid {}"", sid);
                    if (sock != null) {
                        InetAddress address = sock.getInetAddress();
                        try {
                            if (address.isReachable(500)) {
                                LOG.debug(""destination address {} is reachable for sid {}"", address.toString(), sid);
                                ongoingAsyncValidation.set(false);
                                return;
                            }
                        } catch (NullPointerException | IOException ignored) {
                        }
                        LOG.warn(
                          ""destination address {} not reachable anymore, shutting down the SendWorker for sid {}"",
                          address.toString(),
                          sid);
                        this.finish();
                    }
                }).start();
            } else {
                LOG.debug(""validation of destination address for sid {} is skipped (it is already running)"", sid);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.RecvWorker,finish,boolean finish(),"[1365, 1378]","{'A583': [(1367, 1367)], 'A591': [(1368, 1368), (1370, 1372), (1374, 1374)], 'A688': [(1375, 1375), (1377, 1378)], 'A653': [(1366, 1366)], 'A590': [(1376, 1376)], 'A596': [(1365, 1365)], 'A612': [(1369, 1369), (1373, 1373)]}","{'A583': 0.07142857142857142, 'A591': 0.35714285714285715, 'A688': 0.21428571428571427, 'A653': 0.07142857142857142, 'A590': 0.07142857142857142, 'A596': 0.07142857142857142, 'A612': 0.14285714285714285}",A591,,"        synchronized boolean finish() {
            LOG.debug(""RecvWorker.finish called. sid: {}. myId: {}"", sid, QuorumCnxManager.this.mySid);
            if (!running) {
                /*
                 * Avoids running finish() twice.
                 */
                return running;
            }
            running = false;

            this.interrupt();
            threadCnt.decrementAndGet();
            return running;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager.RecvWorker,run,void run(),"[1380, 1412]","{'A583': [(1392, 1392), (1402, 1406)], 'A591': [(1393, 1393)], 'A688': [(1381, 1381), (1383, 1383), (1386, 1389), (1394, 1396), (1400, 1400), (1411, 1412)], 'A653': [(1384, 1384), (1408, 1408)], 'A597': [(1385, 1385), (1390, 1391), (1398, 1398)], 'A590': [(1380, 1380), (1382, 1382), (1409, 1409)], 'A596': [(1401, 1401), (1407, 1407)], 'A620': [(1397, 1397), (1399, 1399)], 'A616': [(1410, 1410)]}","{'A583': 0.18181818181818182, 'A591': 0.030303030303030304, 'A688': 0.36363636363636365, 'A653': 0.06060606060606061, 'A597': 0.12121212121212122, 'A590': 0.09090909090909091, 'A596': 0.06060606060606061, 'A620': 0.06060606060606061, 'A616': 0.030303030303030304}",A688,,"        @Override
        public void run() {
            threadCnt.incrementAndGet();
            try {
                LOG.debug(""RecvWorker thread towards {} started. myId: {}"", sid, QuorumCnxManager.this.mySid);
                while (running && !shutdown && sock != null) {
                    /**
                     * Reads the first int to determine the length of the
                     * message
                     */
                    int length = din.readInt();
                    if (length <= 0 || length > PACKETMAXSIZE) {
                        throw new IOException(""Received packet with invalid packet: "" + length);
                    }
                    /**
                     * Allocates a new ByteBuffer to receive the message
                     */
                    final byte[] msgArray = new byte[length];
                    din.readFully(msgArray, 0, length);
                    addToRecvQueue(new Message(ByteBuffer.wrap(msgArray), sid));
                }
            } catch (Exception e) {
                LOG.warn(
                    ""Connection broken for id {}, my id = {}"",
                    sid,
                    QuorumCnxManager.this.mySid,
                    e);
            } finally {
                LOG.warn(""Interrupting SendWorker thread from RecvWorker. sid: {}. myId: {}"", sid, QuorumCnxManager.this.mySid);
                sw.finish();
                closeSocket(sock);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,addToSendQueue,"void addToSendQueue(BlockingQueue<ByteBuffer>,ByteBuffer)","[1425, 1431]","{'A597': [(1430, 1431)], 'A620': [(1425, 1429)]}","{'A597': 0.2857142857142857, 'A620': 0.7142857142857143}",A620,,"    private void addToSendQueue(final BlockingQueue<ByteBuffer> queue,
        final ByteBuffer buffer) {
        final boolean success = queue.offer(buffer);
        if (!success) {
          throw new RuntimeException(""Could not insert into receive queue"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,isSendQueueEmpty,boolean isSendQueueEmpty(BlockingQueue<ByteBuffer>),"[1440, 1442]","{'A597': [(1441, 1442)], 'A620': [(1440, 1440)]}","{'A597': 0.6666666666666666, 'A620': 0.3333333333333333}",A597,,"    private boolean isSendQueueEmpty(final BlockingQueue<ByteBuffer> queue) {
        return queue.isEmpty();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,pollSendQueue,"ByteBuffer pollSendQueue(BlockingQueue<ByteBuffer>,long,TimeUnit)","[1451, 1454]","{'A597': [(1454, 1454)], 'A620': [(1451, 1453)]}","{'A597': 0.25, 'A620': 0.75}",A620,,"    private ByteBuffer pollSendQueue(final BlockingQueue<ByteBuffer> queue,
          final long timeout, final TimeUnit unit) throws InterruptedException {
       return queue.poll(timeout, unit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,addToRecvQueue,void addToRecvQueue(Message),"[1463, 1468]","{'A597': [(1468, 1468)], 'A620': [(1463, 1467)]}","{'A597': 0.16666666666666666, 'A620': 0.8333333333333334}",A620,,"    public void addToRecvQueue(final Message msg) {
      final boolean success = this.recvQueue.offer(msg);
      if (!success) {
          throw new RuntimeException(""Could not insert into receive queue"");
      }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,pollRecvQueue,"Message pollRecvQueue(long,TimeUnit)","[1477, 1480]","{'A597': [(1480, 1480)], 'A620': [(1477, 1479)]}","{'A597': 0.25, 'A620': 0.75}",A620,,"    public Message pollRecvQueue(final long timeout, final TimeUnit unit)
       throws InterruptedException {
       return this.recvQueue.poll(timeout, unit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,connectedToPeer,boolean connectedToPeer(long),"[1482, 1484]","{'A594': [(1482, 1484)]}",{'A594': 1.0},A594,,"    public boolean connectedToPeer(long peerSid) {
        return senderWorkerMap.get(peerSid) != null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumCnxManager.java,QuorumCnxManager,isReconfigEnabled,boolean isReconfigEnabled(),"[1486, 1488]","{'A653': [(1486, 1488)]}",{'A653': 1.0},A653,,"    public boolean isReconfigEnabled() {
        return self.isReconfigEnabled();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/BufferStats.java,BufferStats,getLastBufferSize,int getLastBufferSize(),"[46, 48]","{'A613': [(46, 48)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/BufferStatsTest.java,"    public synchronized int getLastBufferSize() {
        return lastBufferSize;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/BufferStats.java,BufferStats,setLastBufferSize,void setLastBufferSize(int),"[53, 61]","{'A613': [(53, 61)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/BufferStatsTest.java,"    public synchronized void setLastBufferSize(int value) {
        lastBufferSize = value;
        if (minBufferSize == INIT_VALUE || value < minBufferSize) {
            minBufferSize = value;
        }
        if (value > maxBufferSize) {
            maxBufferSize = value;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/BufferStats.java,BufferStats,getMinBufferSize,int getMinBufferSize(),"[66, 68]","{'A613': [(66, 68)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/BufferStatsTest.java,"    public synchronized int getMinBufferSize() {
        return minBufferSize;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/BufferStats.java,BufferStats,getMaxBufferSize,int getMaxBufferSize(),"[73, 75]","{'A613': [(73, 75)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/BufferStatsTest.java,"    public synchronized int getMaxBufferSize() {
        return maxBufferSize;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/BufferStats.java,BufferStats,reset,void reset(),"[80, 84]","{'A613': [(80, 84)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/BufferStatsTest.java,"    public synchronized void reset() {
        lastBufferSize = INIT_VALUE;
        minBufferSize = INIT_VALUE;
        maxBufferSize = INIT_VALUE;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/BufferStats.java,BufferStats,toString,String toString(),"[86, 89]","{'A613': [(86, 89)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/BufferStatsTest.java,"    @Override
    public synchronized String toString() {
        return String.format(""%d/%d/%d"", lastBufferSize, minBufferSize, maxBufferSize);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,isProcessingRequest,boolean isProcessingRequest(),"[165, 167]","{'A591': [(165, 167)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private boolean isProcessingRequest() {
        return numRequestsProcessing.get() != 0;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,needCommit,boolean needCommit(Request),"[169, 194]","{'A583': [(174, 183), (185, 192)], 'A591': [(169, 169), (173, 173), (193, 194)], 'A675': [(170, 172)], 'A625': [(184, 184)]}","{'A583': 0.6923076923076923, 'A591': 0.15384615384615385, 'A675': 0.11538461538461539, 'A625': 0.038461538461538464}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    protected boolean needCommit(Request request) {
        if (request.isThrottled()) {
          return false;
        }
        switch (request.type) {
        case OpCode.create:
        case OpCode.create2:
        case OpCode.createTTL:
        case OpCode.createContainer:
        case OpCode.delete:
        case OpCode.deleteContainer:
        case OpCode.setData:
        case OpCode.reconfig:
        case OpCode.multi:
        case OpCode.setACL:
        case OpCode.check:
            return true;
        case OpCode.sync:
            return matchSyncs;
        case OpCode.createSession:
        case OpCode.closeSession:
            return !request.isLocalSession();
        default:
            return false;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,run,void run(),"[196, 420]","{'A583': [(208, 208), (221, 221), (246, 249), (251, 251), (253, 253), (272, 272), (325, 327), (331, 331), (384, 385), (396, 396)], 'A591': [(197, 198), (226, 227), (235, 235), (243, 243), (259, 260), (280, 280), (282, 282), (418, 418), (420, 420)], 'A617': [(199, 207), (209, 215), (222, 225), (236, 236), (250, 250), (252, 252), (261, 269), (271, 271), (273, 279), (294, 295), (297, 299), (301, 302), (304, 304), (370, 370), (378, 378), (387, 388), (390, 391), (398, 398), (400, 400), (404, 405), (407, 408), (411, 411), (415, 415)], 'A647': [(237, 242), (244, 245), (254, 255), (257, 257), (270, 270), (281, 281), (283, 293), (296, 296), (300, 300), (303, 303), (305, 312), (318, 324), (329, 329), (332, 356), (358, 360), (365, 369), (371, 377), (379, 383), (386, 386), (389, 389), (392, 394), (402, 402), (406, 406), (409, 410)], 'A675': [(228, 234), (256, 256), (258, 258), (313, 317), (361, 364), (395, 395), (397, 397), (399, 399), (401, 401), (403, 403), (412, 414)], 'A593': [(417, 417)], 'A590': [(196, 196), (419, 419)], 'A710': [(216, 220)], 'A711': [(328, 328), (330, 330)], 'A612': [(357, 357)], 'A596': [(416, 416)]}","{'A583': 0.07111111111111111, 'A591': 0.05333333333333334, 'A617': 0.27555555555555555, 'A647': 0.4311111111111111, 'A675': 0.11555555555555555, 'A593': 0.0044444444444444444, 'A590': 0.008888888888888889, 'A710': 0.022222222222222223, 'A711': 0.008888888888888889, 'A612': 0.0044444444444444444, 'A596': 0.0044444444444444444}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    @Override
    public void run() {
        try {
            /*
             * In each iteration of the following loop we process at most
             * requestsToProcess requests of queuedRequests. We have to limit
             * the number of request we poll from queuedRequests, since it is
             * possible to endlessly poll read requests from queuedRequests, and
             * that will lead to a starvation of non-local committed requests.
             */
            int requestsToProcess = 0;
            boolean commitIsWaiting = false;
            do {
                /*
                 * Since requests are placed in the queue before being sent to
                 * the leader, if commitIsWaiting = true, the commit belongs to
                 * the first update operation in the queuedRequests or to a
                 * request from a client on another server (i.e., the order of
                 * the following two lines is important!).
                 */
                synchronized (this) {
                    commitIsWaiting = !committedRequests.isEmpty();
                    requestsToProcess = queuedRequests.size();
                    if (requestsToProcess == 0 && !commitIsWaiting) {
                        // Waiting for requests to process
                        while (!stopped && requestsToProcess == 0 && !commitIsWaiting) {
                            wait();
                            commitIsWaiting = !committedRequests.isEmpty();
                            requestsToProcess = queuedRequests.size();
                        }
                    }
                }

                ServerMetrics.getMetrics().READS_QUEUED_IN_COMMIT_PROCESSOR.add(numReadQueuedRequests.get());
                ServerMetrics.getMetrics().WRITES_QUEUED_IN_COMMIT_PROCESSOR.add(numWriteQueuedRequests.get());
                ServerMetrics.getMetrics().COMMITS_QUEUED_IN_COMMIT_PROCESSOR.add(committedRequests.size());

                long time = Time.currentElapsedTime();

                /*
                 * Processing up to requestsToProcess requests from the incoming
                 * queue (queuedRequests). If maxReadBatchSize is set then no
                 * commits will be processed until maxReadBatchSize number of
                 * reads are processed (or no more reads remain in the queue).
                 * After the loop a single committed request is processed if
                 * one is waiting (or a batch of commits if maxCommitBatchSize
                 * is set).
                 */
                Request request;
                int readsProcessed = 0;
                while (!stopped
                       && requestsToProcess > 0
                       && (maxReadBatchSize < 0 || readsProcessed <= maxReadBatchSize)
                       && (request = queuedRequests.poll()) != null) {
                    requestsToProcess--;
                    if (needCommit(request) || pendingRequests.containsKey(request.sessionId)) {
                        // Add request to pending
                        Deque<Request> requests = pendingRequests.computeIfAbsent(request.sessionId, sid -> new ArrayDeque<>());
                        requests.addLast(request);
                        ServerMetrics.getMetrics().REQUESTS_IN_SESSION_QUEUE.add(requests.size());
                    } else {
                        readsProcessed++;
                        numReadQueuedRequests.decrementAndGet();
                        sendToNextProcessor(request);
                    }
                    /*
                     * Stop feeding the pool if there is a local pending update
                     * and a committed request that is ready. Once we have a
                     * pending request with a waiting committed request, we know
                     * we can process the committed one. This is because commits
                     * for local requests arrive in the order they appeared in
                     * the queue, so if we have a pending request and a
                     * committed request, the committed request must be for that
                     * pending write or for a write originating at a different
                     * server. We skip this if maxReadBatchSize is set.
                     */
                    if (maxReadBatchSize < 0 && !pendingRequests.isEmpty() && !committedRequests.isEmpty()) {
                        /*
                         * We set commitIsWaiting so that we won't check
                         * committedRequests again.
                         */
                        commitIsWaiting = true;
                        break;
                    }
                }
                ServerMetrics.getMetrics().READS_ISSUED_IN_COMMIT_PROC.add(readsProcessed);

                if (!commitIsWaiting) {
                    commitIsWaiting = !committedRequests.isEmpty();
                }

                /*
                 * Handle commits, if any.
                 */
                if (commitIsWaiting && !stopped) {
                    /*
                     * Drain outstanding reads
                     */
                    waitForEmptyPool();

                    if (stopped) {
                        return;
                    }

                    int commitsToProcess = maxCommitBatchSize;

                    /*
                     * Loop through all the commits, and try to drain them.
                     */
                    Set<Long> queuesToDrain = new HashSet<>();
                    long startWriteTime = Time.currentElapsedTime();
                    int commitsProcessed = 0;
                    while (commitIsWaiting && !stopped && commitsToProcess > 0) {

                        // Process committed head
                        request = committedRequests.peek();

                        if (request.isThrottled()) {
                            LOG.error(""Throttled request in committed pool: {}. Exiting."", request);
                            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
                        }

                        /*
                         * Check if this is a local write request is pending,
                         * if so, update it with the committed info. If the commit matches
                         * the first write queued in the blockedRequestQueue, we know this is
                         * a commit for a local write, as commits are received in order. Else
                         * it must be a commit for a remote write.
                         */
                        if (!queuedWriteRequests.isEmpty()
                            && queuedWriteRequests.peek().sessionId == request.sessionId
                            && queuedWriteRequests.peek().cxid == request.cxid) {
                            /*
                             * Commit matches the earliest write in our write queue.
                             */
                            Deque<Request> sessionQueue = pendingRequests.get(request.sessionId);
                            ServerMetrics.getMetrics().PENDING_SESSION_QUEUE_SIZE.add(pendingRequests.size());
                            if (sessionQueue == null || sessionQueue.isEmpty() || !needCommit(sessionQueue.peek())) {
                                /*
                                 * Can't process this write yet.
                                 * Either there are reads pending in this session, or we
                                 * haven't gotten to this write yet.
                                 */
                                break;
                            } else {
                                ServerMetrics.getMetrics().REQUESTS_IN_SESSION_QUEUE.add(sessionQueue.size());
                                // If session queue != null, then it is also not empty.
                                Request topPending = sessionQueue.poll();
                                /*
                                 * Generally, we want to send to the next processor our version of the request,
                                 * since it contains the session information that is needed for post update processing.
                                 * In more details, when a request is in the local queue, there is (or could be) a client
                                 * attached to this server waiting for a response, and there is other bookkeeping of
                                 * requests that are outstanding and have originated from this server
                                 * (e.g., for setting the max outstanding requests) - we need to update this info when an
                                 * outstanding request completes. Note that in the other case, the operation
                                 * originated from a different server and there is no local bookkeeping or a local client
                                 * session that needs to be notified.
                                 */
                                topPending.setHdr(request.getHdr());
                                topPending.setTxn(request.getTxn());
                                topPending.setTxnDigest(request.getTxnDigest());
                                topPending.zxid = request.zxid;
                                topPending.commitRecvTime = request.commitRecvTime;
                                request = topPending;
                                if (request.isThrottled()) {
                                    LOG.error(""Throttled request in committed & pending pool: {}. Exiting."", request);
                                    ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
                                }
                                // Only decrement if we take a request off the queue.
                                numWriteQueuedRequests.decrementAndGet();
                                queuedWriteRequests.poll();
                                queuesToDrain.add(request.sessionId);
                            }
                        }
                        /*
                         * Pull the request off the commit queue, now that we are going
                         * to process it.
                         */
                        committedRequests.remove();
                        commitsToProcess--;
                        commitsProcessed++;

                        // Process the write inline.
                        processWrite(request);

                        commitIsWaiting = !committedRequests.isEmpty();
                    }
                    ServerMetrics.getMetrics().WRITE_BATCH_TIME_IN_COMMIT_PROCESSOR
                        .add(Time.currentElapsedTime() - startWriteTime);
                    ServerMetrics.getMetrics().WRITES_ISSUED_IN_COMMIT_PROC.add(commitsProcessed);

                    /*
                     * Process following reads if any, remove session queue(s) if
                     * empty.
                     */
                    readsProcessed = 0;
                    for (Long sessionId : queuesToDrain) {
                        Deque<Request> sessionQueue = pendingRequests.get(sessionId);
                        int readsAfterWrite = 0;
                        while (!stopped && !sessionQueue.isEmpty() && !needCommit(sessionQueue.peek())) {
                            numReadQueuedRequests.decrementAndGet();
                            sendToNextProcessor(sessionQueue.poll());
                            readsAfterWrite++;
                        }
                        ServerMetrics.getMetrics().READS_AFTER_WRITE_IN_SESSION_QUEUE.add(readsAfterWrite);
                        readsProcessed += readsAfterWrite;

                        // Remove empty queues
                        if (sessionQueue.isEmpty()) {
                            pendingRequests.remove(sessionId);
                        }
                    }
                    ServerMetrics.getMetrics().SESSION_QUEUES_DRAINED.add(queuesToDrain.size());
                    ServerMetrics.getMetrics().READ_ISSUED_FROM_SESSION_QUEUE.add(readsProcessed);
                }

                ServerMetrics.getMetrics().COMMIT_PROCESS_TIME.add(Time.currentElapsedTime() - time);
                endOfIteration();
            } while (!stoppedMainLoop);
        } catch (Throwable e) {
            handleException(this.getName(), e);
        }
        LOG.info(""CommitProcessor exited loop!"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,endOfIteration,void endOfIteration(),"[423, 425]","{'A675': [(423, 425)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    protected void endOfIteration() {

    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,waitForEmptyPool,void waitForEmptyPool(),"[427, 441]","{'A583': [(430, 430), (434, 434), (439, 440)], 'A617': [(435, 436), (438, 438)], 'A675': [(427, 429), (431, 433)], 'A639': [(437, 437), (441, 441)]}","{'A583': 0.26666666666666666, 'A617': 0.2, 'A675': 0.4, 'A639': 0.13333333333333333}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    protected void waitForEmptyPool() throws InterruptedException {
        int numRequestsInProcess = numRequestsProcessing.get();
        if (numRequestsInProcess != 0) {
            ServerMetrics.getMetrics().CONCURRENT_REQUEST_PROCESSING_IN_COMMIT_PROCESSOR.add(numRequestsInProcess);
        }

        long startWaitTime = Time.currentElapsedTime();
        synchronized (emptyPoolSync) {
            while ((!stopped) && isProcessingRequest()) {
                emptyPoolSync.wait();
            }
        }
        ServerMetrics.getMetrics().TIME_WAITING_EMPTY_POOL_IN_COMMIT_PROCESSOR_READ
            .add(Time.currentElapsedTime() - startWaitTime);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,start,void start(),"[443, 460]","{'A583': [(446, 447), (451, 453), (455, 455)], 'A591': [(443, 445), (448, 448), (454, 454), (456, 457), (459, 460)], 'A617': [(458, 458)], 'A647': [(449, 450)]}","{'A583': 0.3333333333333333, 'A591': 0.5, 'A617': 0.05555555555555555, 'A647': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    @Override
    public void start() {
        int numCores = Runtime.getRuntime().availableProcessors();
        int numWorkerThreads = Integer.getInteger(ZOOKEEPER_COMMIT_PROC_NUM_WORKER_THREADS, numCores);
        workerShutdownTimeoutMS = Long.getLong(ZOOKEEPER_COMMIT_PROC_SHUTDOWN_TIMEOUT, 5000);

        initBatchSizes();

        LOG.info(
            ""Configuring CommitProcessor with {} worker threads."",
            numWorkerThreads > 0 ? numWorkerThreads : ""no"");
        if (workerPool == null) {
            workerPool = new WorkerService(""CommitProcWork"", numWorkerThreads, true);
        }
        stopped = false;
        stoppedMainLoop = false;
        super.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,sendToNextProcessor,void sendToNextProcessor(Request),"[466, 470]","{'A591': [(466, 467), (470, 470)], 'A675': [(468, 469)]}","{'A591': 0.6, 'A675': 0.4}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private void sendToNextProcessor(Request request) {
        numRequestsProcessing.incrementAndGet();
        CommitWorkRequest workRequest = new CommitWorkRequest(request);
        workerPool.schedule(workRequest, request.sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,processWrite,void processWrite(Request),"[472, 478]","{'A583': [(477, 477)], 'A647': [(472, 476), (478, 478)]}","{'A583': 0.14285714285714285, 'A647': 0.8571428571428571}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private void processWrite(Request request) throws RequestProcessorException {
        processCommitMetrics(request, true);

        long timeBeforeFinalProc = Time.currentElapsedTime();
        nextProcessor.processRequest(request);
        ServerMetrics.getMetrics().WRITE_FINAL_PROC_TIME.add(Time.currentElapsedTime() - timeBeforeFinalProc);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,initBatchSizes,void initBatchSizes(),"[480, 493]","{'A583': [(481, 482), (485, 485), (489, 492)], 'A647': [(480, 480), (483, 484), (486, 488), (493, 493)]}","{'A583': 0.5, 'A647': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private static void initBatchSizes() {
        maxReadBatchSize = Integer.getInteger(ZOOKEEPER_COMMIT_PROC_MAX_READ_BATCH_SIZE, -1);
        maxCommitBatchSize = Integer.getInteger(ZOOKEEPER_COMMIT_PROC_MAX_COMMIT_BATCH_SIZE, 1);

        if (maxCommitBatchSize <= 0) {
            String errorMsg = ""maxCommitBatchSize must be positive, was "" + maxCommitBatchSize;
            throw new IllegalArgumentException(errorMsg);
        }

        LOG.info
            (""Configuring CommitProcessor with readBatchSize {} commitBatchSize {}"",
             maxReadBatchSize,
             maxCommitBatchSize);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,processCommitMetrics,"void processCommitMetrics(Request,boolean)","[495, 513]","{'A583': [(497, 497), (500, 501), (504, 505), (509, 510)], 'A647': [(495, 496), (498, 499), (502, 503), (506, 508), (511, 513)]}","{'A583': 0.3684210526315789, 'A647': 0.631578947368421}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private static void processCommitMetrics(Request request, boolean isWrite) {
        if (isWrite) {
            if (request.commitProcQueueStartTime != -1 && request.commitRecvTime != -1) {
                // Locally issued writes.
                long currentTime = Time.currentElapsedTime();
                ServerMetrics.getMetrics().WRITE_COMMITPROC_TIME.add(currentTime - request.commitProcQueueStartTime);
                ServerMetrics.getMetrics().LOCAL_WRITE_COMMITTED_TIME.add(currentTime - request.commitRecvTime);
            } else if (request.commitRecvTime != -1) {
                // Writes issued by other servers.
                ServerMetrics.getMetrics().SERVER_WRITE_COMMITTED_TIME
                    .add(Time.currentElapsedTime() - request.commitRecvTime);
            }
        } else {
            if (request.commitProcQueueStartTime != -1) {
                ServerMetrics.getMetrics().READ_COMMITPROC_TIME
                    .add(Time.currentElapsedTime() - request.commitProcQueueStartTime);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,getMaxReadBatchSize,int getMaxReadBatchSize(),"[515, 517]","{'A647': [(515, 517)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    public static int getMaxReadBatchSize() {
        return maxReadBatchSize;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,getMaxCommitBatchSize,int getMaxCommitBatchSize(),"[519, 521]","{'A647': [(519, 521)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    public static int getMaxCommitBatchSize() {
        return maxCommitBatchSize;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,setMaxReadBatchSize,void setMaxReadBatchSize(int),"[523, 526]","{'A583': [(525, 525)], 'A647': [(523, 524), (526, 526)]}","{'A583': 0.25, 'A647': 0.75}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    public static void setMaxReadBatchSize(int size) {
        maxReadBatchSize = size;
        LOG.info(""Configuring CommitProcessor with readBatchSize {}"", maxReadBatchSize);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,setMaxCommitBatchSize,void setMaxCommitBatchSize(int),"[528, 533]","{'A583': [(531, 531)], 'A647': [(528, 530), (532, 533)]}","{'A583': 0.16666666666666666, 'A647': 0.8333333333333334}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    public static void setMaxCommitBatchSize(int size) {
        if (size > 0) {
            maxCommitBatchSize = size;
            LOG.info(""Configuring CommitProcessor with commitBatchSize {}"", maxCommitBatchSize);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor.CommitWorkRequest,cleanup,void cleanup(),"[547, 553]","{'A583': [(550, 550)], 'A591': [(547, 549), (551, 553)]}","{'A583': 0.14285714285714285, 'A591': 0.8571428571428571}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"        @Override
        public void cleanup() {
            if (!stopped) {
                LOG.error(""Exception thrown by downstream processor, unable to continue."");
                CommitProcessor.this.halt();
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor.CommitWorkRequest,doWork,void doWork(),"[555, 575]","{'A583': [(562, 563), (565, 566), (571, 571)], 'A591': [(555, 556), (560, 560), (569, 569), (573, 573), (575, 575)], 'A617': [(572, 572)], 'A647': [(557, 557)], 'A675': [(558, 559), (561, 561), (564, 564), (567, 568), (570, 570)], 'A597': [(574, 574)]}","{'A583': 0.23809523809523808, 'A591': 0.2857142857142857, 'A617': 0.047619047619047616, 'A647': 0.047619047619047616, 'A675': 0.3333333333333333, 'A597': 0.047619047619047616}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"        public void doWork() throws RequestProcessorException {
            try {
                processCommitMetrics(request, needCommit(request));

                long timeBeforeFinalProc = Time.currentElapsedTime();
                nextProcessor.processRequest(request);
                if (needCommit(request)) {
                    ServerMetrics.getMetrics().WRITE_FINAL_PROC_TIME
                        .add(Time.currentElapsedTime() - timeBeforeFinalProc);
                } else {
                    ServerMetrics.getMetrics().READ_FINAL_PROC_TIME
                        .add(Time.currentElapsedTime() - timeBeforeFinalProc);
                }

            } finally {

                if (numRequestsProcessing.decrementAndGet() == 0) {
                    wakeupOnEmpty();
                }
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,wakeup,void wakeup(),"[579, 582]","{'A583': [(580, 580)], 'A591': [(581, 582)], 'A584': [(579, 579)]}","{'A583': 0.25, 'A591': 0.5, 'A584': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    @SuppressFBWarnings(""NN_NAKED_NOTIFY"")
    private synchronized void wakeup() {
        notifyAll();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,wakeupOnEmpty,void wakeupOnEmpty(),"[584, 588]","{'A583': [(585, 585)], 'A617': [(584, 584), (586, 588)]}","{'A583': 0.2, 'A617': 0.8}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private void wakeupOnEmpty() {
        synchronized (emptyPoolSync) {
            emptyPoolSync.notifyAll();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,commit,void commit(Request),"[590, 599]","{'A591': [(590, 593), (597, 597), (599, 599)], 'A620': [(594, 594)], 'A617': [(598, 598)], 'A675': [(595, 596)]}","{'A591': 0.6, 'A620': 0.1, 'A617': 0.1, 'A675': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    public void commit(Request request) {
        if (stopped || request == null) {
            return;
        }
        LOG.debug(""Committing request:: {}"", request);
        request.commitRecvTime = Time.currentElapsedTime();
        ServerMetrics.getMetrics().COMMITS_QUEUED.add(1);
        committedRequests.add(request);
        wakeup();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,processRequest,void processRequest(Request),"[601, 617]","{'A591': [(602, 605), (608, 608), (617, 617)], 'A584': [(601, 601)], 'A620': [(606, 606)], 'A617': [(616, 616)], 'A647': [(611, 611)], 'A675': [(607, 607), (609, 610), (612, 615)]}","{'A591': 0.35294117647058826, 'A584': 0.058823529411764705, 'A620': 0.058823529411764705, 'A617': 0.058823529411764705, 'A647': 0.058823529411764705, 'A675': 0.4117647058823529}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    @Override
    public void processRequest(Request request) {
        if (stopped) {
            return;
        }
        LOG.debug(""Processing request:: {}"", request);
        request.commitProcQueueStartTime = Time.currentElapsedTime();
        queuedRequests.add(request);
        // If the request will block, add it to the queue of blocking requests
        if (needCommit(request)) {
            queuedWriteRequests.add(request);
            numWriteQueuedRequests.incrementAndGet();
        } else {
            numReadQueuedRequests.incrementAndGet();
        }
        wakeup();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,halt,void halt(),"[619, 628]","{'A591': [(619, 619), (621, 621), (623, 628)], 'A617': [(620, 620), (622, 622)]}","{'A591': 0.8, 'A617': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    private void halt() {
        stoppedMainLoop = true;
        stopped = true;
        wakeupOnEmpty();
        wakeup();
        queuedRequests.clear();
        if (workerPool != null) {
            workerPool.stop();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/CommitProcessor.java,CommitProcessor,shutdown,void shutdown(),"[630, 642]","{'A591': [(630, 638), (642, 642)], 'A596': [(639, 641)]}","{'A591': 0.7692307692307693, 'A596': 0.23076923076923078}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/CommitProcessorTest.java,"    public void shutdown() {
        LOG.info(""Shutting down"");

        halt();

        if (workerPool != null) {
            workerPool.join(workerShutdownTimeoutMS);
        }

        if (nextProcessor != null) {
            nextProcessor.shutdown();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncThrottleException.java,SyncThrottleException,getMessage,"String getMessage(int,int,LearnerSyncThrottler.SyncType)","[36, 41]","{'A583': [(36, 36), (38, 40)], 'A597': [(41, 41)], 'A675': [(37, 37)]}","{'A583': 0.6666666666666666, 'A597': 0.16666666666666666, 'A675': 0.16666666666666666}",A583,,"    private static String getMessage(int concurrentSyncNumber, int throttleThreshold, LearnerSyncThrottler.SyncType syncType) {
        return String.format(""new %s sync would make %d concurrently in progress; maximum is %d"",
                             syncType.toString().toLowerCase(),
                             concurrentSyncNumber,
                             throttleThreshold);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getName,String getName(),"[37, 39]","{'A591': [(38, 38)], 'A590': [(37, 37), (39, 39)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    public String getName() {
        return ""Leader"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getCurrentZxid,String getCurrentZxid(),"[41, 43]","{'A591': [(41, 42)], 'A590': [(43, 43)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    public String getCurrentZxid() {
        return ""0x"" + Long.toHexString(zks.getZxid());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,followerInfo,String followerInfo(),"[45, 53]","{'A591': [(45, 45), (51, 52)], 'A590': [(53, 53)], 'A612': [(48, 50)], 'A600': [(46, 46)], 'A639': [(47, 47)]}","{'A591': 0.3333333333333333, 'A590': 0.1111111111111111, 'A612': 0.3333333333333333, 'A600': 0.1111111111111111, 'A639': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    public String followerInfo() {
        StringBuilder sb = new StringBuilder();
        for (LearnerHandler handler : leader.getLearners()) {
            if (handler.getLearnerType() == LearnerType.PARTICIPANT) {
                sb.append(handler.toString()).append(""\n"");
            }
        }
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,nonVotingFollowerInfo,String nonVotingFollowerInfo(),"[55, 62]","{'A612': [(55, 62)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public String nonVotingFollowerInfo() {
        StringBuilder sb = new StringBuilder();
        for (LearnerHandler handler : leader.getNonVotingFollowers()) {
            sb.append(handler.toString()).append(""\n"");
        }
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getElectionTimeTaken,long getElectionTimeTaken(),"[64, 67]","{'A630': [(64, 67)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public long getElectionTimeTaken() {
        return leader.self.getElectionTimeTaken();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getLastProposalSize,int getLastProposalSize(),"[69, 72]","{'A628': [(69, 70), (72, 72)], 'A613': [(71, 71)]}","{'A628': 0.75, 'A613': 0.25}",A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public int getLastProposalSize() {
        return leader.getProposalStats().getLastBufferSize();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getMinProposalSize,int getMinProposalSize(),"[74, 77]","{'A628': [(74, 75), (77, 77)], 'A613': [(76, 76)]}","{'A628': 0.75, 'A613': 0.25}",A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public int getMinProposalSize() {
        return leader.getProposalStats().getMinBufferSize();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getMaxProposalSize,int getMaxProposalSize(),"[79, 82]","{'A628': [(79, 80), (82, 82)], 'A613': [(81, 81)]}","{'A628': 0.75, 'A613': 0.25}",A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public int getMaxProposalSize() {
        return leader.getProposalStats().getMaxBufferSize();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,resetProposalStatistics,void resetProposalStatistics(),"[84, 87]","{'A628': [(84, 87)]}",{'A628': 1.0},A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public void resetProposalStatistics() {
        leader.getProposalStats().reset();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getMaxConcurrentSnapSyncs,int getMaxConcurrentSnapSyncs(),"[89, 92]","{'A675': [(89, 92)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public int getMaxConcurrentSnapSyncs() {
        return leader.getMaxConcurrentSnapSyncs();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,setMaxConcurrentSnapSyncs,void setMaxConcurrentSnapSyncs(int),"[94, 97]","{'A675': [(94, 97)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public void setMaxConcurrentSnapSyncs(int maxConcurrentSnapshots) {
        leader.setMaxConcurrentSnapSyncs(maxConcurrentSnapshots);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,getMaxConcurrentDiffSyncs,int getMaxConcurrentDiffSyncs(),"[99, 102]","{'A675': [(99, 102)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public int getMaxConcurrentDiffSyncs() {
        return leader.getMaxConcurrentDiffSyncs();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderBean.java,LeaderBean,setMaxConcurrentDiffSyncs,void setMaxConcurrentDiffSyncs(int),"[104, 107]","{'A675': [(104, 107)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LeaderBeanTest.java,"    @Override
    public void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs) {
        leader.setMaxConcurrentDiffSyncs(maxConcurrentDiffSyncs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,startSessionTracker,void startSessionTracker(),"[57, 61]","{'A648': [(57, 61)]}",{'A648': 1.0},A648,,"    @Override
    protected void startSessionTracker() {
        upgradeableSessionTracker = (UpgradeableSessionTracker) sessionTracker;
        upgradeableSessionTracker.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,checkUpgradeSession,Request checkUpgradeSession(Request),"[63, 109]","{'A583': [(63, 63), (74, 75), (80, 80), (84, 84), (96, 96)], 'A648': [(68, 73), (76, 77), (101, 101), (103, 109)], 'A647': [(78, 79), (81, 83), (85, 95), (97, 100), (102, 102)], 'A675': [(64, 67)]}","{'A583': 0.1276595744680851, 'A648': 0.3404255319148936, 'A647': 0.44680851063829785, 'A675': 0.0851063829787234}",A647,,"    public Request checkUpgradeSession(Request request) throws IOException, KeeperException {
        if (request.isThrottled()) {
            return null;
        }

        // If this is a request for a local session and it is to
        // create an ephemeral node, then upgrade the session and return
        // a new session request for the leader.
        // This is called by the request processor thread (either follower
        // or observer request processor), which is unique to a learner.
        // So will not be called concurrently by two threads.
        if ((request.type != OpCode.create && request.type != OpCode.create2 && request.type != OpCode.multi)
            || !upgradeableSessionTracker.isLocalSession(request.sessionId)) {
            return null;
        }

        if (OpCode.multi == request.type) {
            MultiOperationRecord multiTransactionRecord = request.readRequestRecord(MultiOperationRecord::new);
            boolean containsEphemeralCreate = false;
            for (Op op : multiTransactionRecord) {
                if (op.getType() == OpCode.create || op.getType() == OpCode.create2) {
                    CreateRequest createRequest = (CreateRequest) op.toRequestRecord();
                    CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags());
                    if (createMode.isEphemeral()) {
                        containsEphemeralCreate = true;
                        break;
                    }
                }
            }
            if (!containsEphemeralCreate) {
                return null;
            }
        } else {
            CreateRequest createRequest = request.readRequestRecord(CreateRequest::new);
            CreateMode createMode = CreateMode.fromFlag(createRequest.getFlags());
            if (!createMode.isEphemeral()) {
                return null;
            }
        }

        // Uh oh.  We need to upgrade before we can proceed.
        if (!self.isLocalSessionsUpgradingEnabled()) {
            throw new KeeperException.EphemeralOnLocalSessionException();
        }

        return makeUpgradeRequest(request.sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,makeUpgradeRequest,Request makeUpgradeRequest(long),"[111, 123]","{'A583': [(118, 119)], 'A648': [(111, 117), (120, 123)]}","{'A583': 0.15384615384615385, 'A648': 0.8461538461538461}",A648,,"    private Request makeUpgradeRequest(long sessionId) {
        // Make sure to atomically check local session status, upgrade
        // session, and make the session creation request.  This is to
        // avoid another thread upgrading the session in parallel.
        synchronized (upgradeableSessionTracker) {
            if (upgradeableSessionTracker.isLocalSession(sessionId)) {
                int timeout = upgradeableSessionTracker.upgradeSession(sessionId);
                CreateSessionTxn txn = new CreateSessionTxn(timeout);
                return new Request(null, sessionId, 0, OpCode.createSession, RequestRecord.fromRecord(txn), null);
            }
        }
        return null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,upgrade,void upgrade(long),"[130, 137]","{'A583': [(133, 133)], 'A648': [(130, 132), (134, 137)]}","{'A583': 0.125, 'A648': 0.875}",A648,,"    public void upgrade(long sessionId) {
        Request request = makeUpgradeRequest(sessionId);
        if (request != null) {
            LOG.info(""Upgrading session 0x{}"", Long.toHexString(sessionId));
            // This must be a global request
            submitRequest(request);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,setLocalSessionFlag,void setLocalSessionFlag(Request),"[139, 161]","{'A583': [(156, 156)], 'A648': [(139, 155), (157, 161)]}","{'A583': 0.043478260869565216, 'A648': 0.9565217391304348}",A648,,"    @Override
    protected void setLocalSessionFlag(Request si) {
        // We need to set isLocalSession to tree for these type of request
        // so that the request processor can process them correctly.
        switch (si.type) {
        case OpCode.createSession:
            if (self.areLocalSessionsEnabled()) {
                // All new sessions local by default.
                si.setLocalSession(true);
            }
            break;
        case OpCode.closeSession:
            String reqType = ""global"";
            if (upgradeableSessionTracker.isLocalSession(si.sessionId)) {
                si.setLocalSession(true);
                reqType = ""local"";
            }
            LOG.info(""Submitting {} closeSession request for session 0x{}"", reqType, Long.toHexString(si.sessionId));
            break;
        default:
            break;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,dumpConf,void dumpConf(PrintWriter),"[163, 183]","{'A596': [(163, 173), (176, 176), (179, 180), (183, 183)], 'A653': [(174, 175), (177, 178)], 'A590': [(181, 181)], 'A602': [(182, 182)]}","{'A596': 0.7142857142857143, 'A653': 0.19047619047619047, 'A590': 0.047619047619047616, 'A602': 0.047619047619047616}",A596,,"    @Override
    public void dumpConf(PrintWriter pwriter) {
        super.dumpConf(pwriter);

        pwriter.print(""initLimit="");
        pwriter.println(self.getInitLimit());
        pwriter.print(""syncLimit="");
        pwriter.println(self.getSyncLimit());
        pwriter.print(""electionAlg="");
        pwriter.println(self.getElectionType());
        pwriter.print(""electionPort="");
        pwriter.println(self.getElectionAddress().getAllPorts()
                .stream().map(Objects::toString).collect(Collectors.joining(""|"")));
        pwriter.print(""quorumPort="");
        pwriter.println(self.getQuorumAddress().getAllPorts()
                        .stream().map(Objects::toString).collect(Collectors.joining(""|"")));
        pwriter.print(""peerType="");
        pwriter.println(self.getLearnerType().ordinal());
        pwriter.println(""membership: "");
        pwriter.print(self.getQuorumVerifier().toString());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,setState,void setState(State),"[185, 188]","{'A597': [(185, 188)]}",{'A597': 1.0},A597,,"    @Override
    protected void setState(State state) {
        this.state = state;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,registerMetrics,void registerMetrics(),"[190, 199]","{'A583': [(194, 194)], 'A584': [(190, 193), (195, 199)]}","{'A583': 0.1, 'A584': 0.9}",A584,,"    @Override
    protected void registerMetrics() {
        super.registerMetrics();

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();

        rootContext.registerGauge(""quorum_size"", () -> {
            return self.getQuorumSize();
        });
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,unregisterMetrics,void unregisterMetrics(),"[201, 208]","{'A583': [(205, 205)], 'A584': [(201, 204), (206, 208)]}","{'A583': 0.125, 'A584': 0.875}",A584,,"    @Override
    protected void unregisterMetrics() {
        super.unregisterMetrics();

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();

        rootContext.unregisterGauge(""quorum_size"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumZooKeeperServer.java,QuorumZooKeeperServer,dumpMonitorValues,"void dumpMonitorValues(BiConsumer<String, Object>)","[210, 214]","{'A647': [(210, 214)]}",{'A647': 1.0},A647,,"    @Override
    public void dumpMonitorValues(BiConsumer<String, Object> response) {
        super.dumpMonitorValues(response);
        response.accept(""peer_state"", self.getDetailedPeerState());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,getLeader,Leader getLeader(),"[61, 63]","{'A583': [(61, 61)], 'A688': [(62, 63)]}","{'A583': 0.3333333333333333, 'A688': 0.6666666666666666}",A688,,"    public Leader getLeader() {
        return self.leader;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,setupRequestProcessors,void setupRequestProcessors(),"[65, 78]","{'A583': [(69, 69), (71, 71)], 'A591': [(68, 68)], 'A590': [(65, 67), (70, 70)], 'A596': [(72, 72)], 'A616': [(76, 78)], 'A648': [(73, 75)]}","{'A583': 0.14285714285714285, 'A591': 0.07142857142857142, 'A590': 0.2857142857142857, 'A596': 0.07142857142857142, 'A616': 0.21428571428571427, 'A648': 0.21428571428571427}",A590,,"    @Override
    protected void setupRequestProcessors() {
        RequestProcessor finalProcessor = new FinalRequestProcessor(this);
        RequestProcessor toBeAppliedProcessor = new Leader.ToBeAppliedRequestProcessor(finalProcessor, getLeader());
        commitProcessor = new CommitProcessor(toBeAppliedProcessor, Long.toString(getServerId()), false, getZooKeeperServerListener());
        commitProcessor.start();
        ProposalRequestProcessor proposalProcessor = new ProposalRequestProcessor(this, commitProcessor);
        proposalProcessor.initialize();
        prepRequestProcessor = new PrepRequestProcessor(this, proposalProcessor);
        prepRequestProcessor.start();
        firstProcessor = new LeaderRequestProcessor(this, prepRequestProcessor);

        setupContainerManager();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,setupContainerManager,void setupContainerManager(),"[80, 88]","{'A583': [(81, 84)], 'A616': [(80, 80), (88, 88)], 'A636': [(85, 87)]}","{'A583': 0.4444444444444444, 'A616': 0.2222222222222222, 'A636': 0.3333333333333333}",A583,,"    private synchronized void setupContainerManager() {
        containerManager = new ContainerManager(
            getZKDatabase(),
            prepRequestProcessor,
            Integer.getInteger(""znode.container.checkIntervalMs"", (int) TimeUnit.MINUTES.toMillis(1)),
            Integer.getInteger(""znode.container.maxPerMinute"", 10000),
            Long.getLong(""znode.container.maxNeverUsedIntervalMs"", 0)
        );
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,startup,void startup(),"[90, 96]","{'A616': [(90, 96)]}",{'A616': 1.0},A616,,"    @Override
    public synchronized void startup() {
        super.startup();
        if (containerManager != null) {
            containerManager.start();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,registerMetrics,void registerMetrics(),"[98, 128]","{'A583': [(102, 102)], 'A712': [(103, 111), (113, 128)], 'A584': [(98, 101), (112, 112)]}","{'A583': 0.03225806451612903, 'A712': 0.8064516129032258, 'A584': 0.16129032258064516}",A712,,"    @Override
    protected void registerMetrics() {
        super.registerMetrics();

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();
        rootContext.registerGauge(""learners"", gaugeWithLeader(
                (leader) -> leader.getLearners().size())
        );
        rootContext.registerGauge(""synced_followers"", gaugeWithLeader(
                (leader) -> leader.getForwardingFollowers().size()
        ));
        rootContext.registerGauge(""synced_non_voting_followers"", gaugeWithLeader(
                (leader) -> leader.getNonVotingFollowers().size()
        ));
        rootContext.registerGauge(""synced_observers"", self::getSynced_observers_metric);
        rootContext.registerGauge(""pending_syncs"", gaugeWithLeader(
                (leader) -> leader.getNumPendingSyncs()
        ));
        rootContext.registerGauge(""leader_uptime"", gaugeWithLeader(
                (leader) -> leader.getUptime()
        ));
        rootContext.registerGauge(""last_proposal_size"", gaugeWithLeader(
                (leader) -> leader.getProposalStats().getLastBufferSize()
        ));
        rootContext.registerGauge(""max_proposal_size"", gaugeWithLeader(
                (leader) -> leader.getProposalStats().getMaxBufferSize()
        ));
        rootContext.registerGauge(""min_proposal_size"", gaugeWithLeader(
                (leader) -> leader.getProposalStats().getMinBufferSize()
        ));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,gaugeWithLeader,"org.apache.zookeeper.metrics.Gauge gaugeWithLeader(Function<Leader, Number>)","[130, 138]","{'A712': [(130, 137)], 'A584': [(138, 138)]}","{'A712': 0.8888888888888888, 'A584': 0.1111111111111111}",A712,,"    private org.apache.zookeeper.metrics.Gauge gaugeWithLeader(Function<Leader, Number> supplier) {
        return () -> {
            final Leader leader = getLeader();
            if (leader == null) {
                return null;
            }
            return supplier.apply(leader);
        };
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,unregisterMetrics,void unregisterMetrics(),"[140, 155]","{'A583': [(144, 144)], 'A584': [(140, 143), (145, 155)]}","{'A583': 0.0625, 'A584': 0.9375}",A584,,"    @Override
    protected void unregisterMetrics() {
        super.unregisterMetrics();

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();
        rootContext.unregisterGauge(""learners"");
        rootContext.unregisterGauge(""synced_followers"");
        rootContext.unregisterGauge(""synced_non_voting_followers"");
        rootContext.unregisterGauge(""synced_observers"");
        rootContext.unregisterGauge(""pending_syncs"");
        rootContext.unregisterGauge(""leader_uptime"");

        rootContext.unregisterGauge(""last_proposal_size"");
        rootContext.unregisterGauge(""max_proposal_size"");
        rootContext.unregisterGauge(""min_proposal_size"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,shutdownComponents,void shutdownComponents(),"[157, 163]","{'A590': [(163, 163)], 'A616': [(157, 157), (159, 161)], 'A695': [(158, 158), (162, 162)]}","{'A590': 0.14285714285714285, 'A616': 0.5714285714285714, 'A695': 0.2857142857142857}",A616,,"    @Override
    protected synchronized void shutdownComponents() {
        if (containerManager != null) {
            containerManager.stop();
        }
        super.shutdownComponents();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,getGlobalOutstandingLimit,int getGlobalOutstandingLimit(),"[165, 170]","{'A613': [(165, 170)]}",{'A613': 1.0},A613,,"    @Override
    public int getGlobalOutstandingLimit() {
        int divisor = self.getQuorumSize() > 2 ? self.getQuorumSize() - 1 : 1;
        int globalOutstandingLimit = super.getGlobalOutstandingLimit() / divisor;
        return globalOutstandingLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,createSessionTracker,void createSessionTracker(),"[172, 181]","{'A583': [(175, 177), (179, 180)], 'A590': [(172, 172)], 'A596': [(173, 173)], 'A648': [(174, 174)], 'A702': [(178, 178)], 'A598': [(181, 181)]}","{'A583': 0.5, 'A590': 0.1, 'A596': 0.1, 'A648': 0.1, 'A702': 0.1, 'A598': 0.1}",A583,,"    @Override
    public void createSessionTracker() {
        sessionTracker = new LeaderSessionTracker(
            this,
            getZKDatabase().getSessionWithTimeOuts(),
            tickTime,
            self.getMyId(),
            self.areLocalSessionsEnabled(),
            getZooKeeperServerListener());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,touch,"boolean touch(long,int)","[183, 185]","{'A590': [(183, 185)]}",{'A590': 1.0},A590,,"    public boolean touch(long sess, int to) {
        return sessionTracker.touchSession(sess, to);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,checkIfValidGlobalSession,"boolean checkIfValidGlobalSession(long,int)","[187, 192]","{'A583': [(188, 188)], 'A648': [(187, 187), (189, 192)]}","{'A583': 0.16666666666666666, 'A648': 0.8333333333333334}",A648,,"    public boolean checkIfValidGlobalSession(long sess, int to) {
        if (self.areLocalSessionsEnabled() && !upgradeableSessionTracker.isGlobalSession(sess)) {
            return false;
        }
        return sessionTracker.touchSession(sess, to);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,submitLearnerRequest,void submitLearnerRequest(Request),"[200, 214]","{'A648': [(200, 214)]}",{'A648': 1.0},A648,,"    public void submitLearnerRequest(Request request) {
        /*
         * Requests coming from the learner should have gone through
         * submitRequest() on each server which already perform some request
         * validation, so we don't need to do it again.
         *
         * Additionally, LearnerHandler should start submitting requests into
         * the leader's pipeline only when the leader's server is started, so we
         * can submit the request directly into PrepRequestProcessor.
         *
         * This is done so that requests from learners won't go through
         * LeaderRequestProcessor which perform local session upgrade.
         */
        prepRequestProcessor.processRequest(request);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,registerJMX,void registerJMX(),"[216, 226]","{'A591': [(216, 219), (221, 223), (225, 226)], 'A596': [(220, 220), (224, 224)]}","{'A591': 0.8181818181818182, 'A596': 0.18181818181818182}",A591,,"    @Override
    protected void registerJMX() {
        // register with JMX
        try {
            jmxDataTreeBean = new DataTreeBean(getZKDatabase().getDataTree());
            MBeanRegistry.getInstance().register(jmxDataTreeBean, jmxServerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxDataTreeBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,registerJMX,"void registerJMX(LeaderBean,LocalPeerBean)","[228, 246]","{'A583': [(228, 228)], 'A591': [(229, 229), (236, 236), (238, 238), (240, 243), (245, 246)], 'A596': [(230, 235), (237, 237), (239, 239), (244, 244)]}","{'A583': 0.05263157894736842, 'A591': 0.47368421052631576, 'A596': 0.47368421052631576}",A591,,"    public void registerJMX(LeaderBean leaderBean, LocalPeerBean localPeerBean) {
        // register with JMX
        if (self.jmxLeaderElectionBean != null) {
            try {
                MBeanRegistry.getInstance().unregister(self.jmxLeaderElectionBean);
            } catch (Exception e) {
                LOG.warn(""Failed to register with JMX"", e);
            }
            self.jmxLeaderElectionBean = null;
        }

        try {
            jmxServerBean = leaderBean;
            MBeanRegistry.getInstance().register(leaderBean, localPeerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxServerBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,registerJMX,boolean registerJMX(LearnerHandlerBean),"[248, 256]","{'A647': [(248, 256)]}",{'A647': 1.0},A647,,"    boolean registerJMX(LearnerHandlerBean handlerBean) {
        try {
            MBeanRegistry.getInstance().register(handlerBean, jmxServerBean);
            return true;
        } catch (JMException e) {
            LOG.warn(""Could not register connection"", e);
        }
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,unregisterJMX,void unregisterJMX(),"[258, 269]","{'A591': [(258, 269)]}",{'A591': 1.0},A591,,"    @Override
    protected void unregisterJMX() {
        // unregister from JMX
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxDataTreeBean = null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,unregisterJMX,void unregisterJMX(Leader),"[271, 281]","{'A591': [(271, 281)]}",{'A591': 1.0},A591,,"    protected void unregisterJMX(Leader leader) {
        // unregister from JMX
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxServerBean = null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,getState,String getState(),"[283, 286]","{'A596': [(283, 286)]}",{'A596': 1.0},A596,,"    @Override
    public String getState() {
        return ""leader"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,getServerId,long getServerId(),"[292, 295]","{'A591': [(295, 295)], 'A596': [(292, 293)], 'A702': [(294, 294)]}","{'A591': 0.25, 'A596': 0.5, 'A702': 0.25}",A596,,"    @Override
    public long getServerId() {
        return self.getMyId();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderZooKeeperServer.java,LeaderZooKeeperServer,revalidateSession,"void revalidateSession(ServerCnxn,long,int)","[297, 307]","{'A583': [(298, 298)], 'A596': [(297, 297), (299, 307)]}","{'A583': 0.09090909090909091, 'A596': 0.9090909090909091}",A596,,"    @Override
    protected void revalidateSession(ServerCnxn cnxn, long sessionId, int sessionTimeout) throws IOException {
        super.revalidateSession(cnxn, sessionId, sessionTimeout);
        try {
            // setowner as the leader itself, unless updated
            // via the follower handlers
            setOwner(sessionId, ServerCnxn.me);
        } catch (SessionExpiredException e) {
            // this is ok, it just means that the session revalidation failed.
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,toString,String toString(),"[91, 97]","{'A583': [(95, 95)], 'A596': [(91, 92), (96, 97)], 'A591': [(94, 94)], 'A600': [(93, 93)]}","{'A583': 0.14285714285714285, 'A596': 0.5714285714285714, 'A591': 0.14285714285714285, 'A600': 0.14285714285714285}",A596,,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""Observer "").append(sock);
        sb.append("" pendingRevalidationCount:"").append(pendingRevalidations.size());
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,observeLeader,void observeLeader(),"[103, 152]","{'A583': [(144, 148)], 'A596': [(104, 104), (107, 107), (110, 110), (113, 113), (121, 121), (126, 126), (128, 128), (130, 130), (132, 132), (137, 138), (140, 140), (151, 152)], 'A590': [(103, 103)], 'A647': [(108, 109), (111, 111), (114, 117), (119, 120), (122, 122), (127, 127), (133, 133), (139, 139)], 'A586': [(118, 118), (124, 125)], 'A591': [(129, 129), (134, 136)], 'A604': [(105, 106), (112, 112), (123, 123), (141, 143), (149, 150)], 'A617': [(131, 131)]}","{'A583': 0.1, 'A596': 0.28, 'A590': 0.02, 'A647': 0.26, 'A586': 0.06, 'A591': 0.08, 'A604': 0.18, 'A617': 0.02}",A596,,"    void observeLeader() throws Exception {
        zk.registerJMX(new ObserverBean(this, zk), self.jmxLocalPeerBean);
        long connectTime = 0;
        boolean completedSync = false;
        try {
            self.setZabState(QuorumPeer.ZabState.DISCOVERY);
            QuorumServer master = findLearnerMaster();
            try {
                connectToLeader(master.addr, master.hostname);
                connectTime = System.currentTimeMillis();
                long newLeaderZxid = registerWithLeader(Leader.OBSERVERINFO);
                if (self.isReconfigStateChange()) {
                    throw new Exception(""learned about role change"");
                }

                final long startTime = Time.currentElapsedTime();
                self.setLeaderAddressAndId(master.addr, master.getId());
                self.setZabState(QuorumPeer.ZabState.SYNCHRONIZATION);
                syncWithLeader(newLeaderZxid);
                self.setZabState(QuorumPeer.ZabState.BROADCAST);
                completedSync = true;
                final long syncTime = Time.currentElapsedTime() - startTime;
                ServerMetrics.getMetrics().OBSERVER_SYNC_TIME.add(syncTime);
                QuorumPacket qp = new QuorumPacket();
                while (this.isRunning() && nextLearnerMaster.get() == null) {
                    readPacket(qp);
                    processPacket(qp);
                }
            } catch (Exception e) {
                LOG.warn(""Exception when observing the leader"", e);
                closeSocket();

                // clear pending revalidations
                pendingRevalidations.clear();
            }
        } finally {
            currentLearnerMaster = null;
            zk.unregisterJMX(this);
            if (connectTime != 0) {
                long connectionDuration = System.currentTimeMillis() - connectTime;

                LOG.info(
                    ""Disconnected from leader (with address: {}). Was connected for {}ms. Sync state: {}"",
                    leaderAddr,
                    connectionDuration,
                    completedSync);
                messageTracker.dumpToLog(leaderAddr.toString());
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,findLearnerMaster,QuorumServer findLearnerMaster(),"[154, 171]","{'A583': [(155, 157), (161, 163)], 'A647': [(154, 154), (158, 160), (164, 171)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,,"    private QuorumServer findLearnerMaster() {
        QuorumPeer.QuorumServer prescribedLearnerMaster = nextLearnerMaster.getAndSet(null);
        if (prescribedLearnerMaster != null
            && self.validateLearnerMaster(Long.toString(prescribedLearnerMaster.id)) == null) {
            LOG.warn(""requested next learner master {} is no longer valid"", prescribedLearnerMaster);
            prescribedLearnerMaster = null;
        }
        final QuorumPeer.QuorumServer master = (prescribedLearnerMaster == null)
            ? self.findLearnerMaster(findLeader())
            : prescribedLearnerMaster;
        currentLearnerMaster = master;
        if (master == null) {
            LOG.warn(""No learner master found"");
        } else {
            LOG.info(""Observing new leader sid={} addr={}"", master.id, master.addr);
        }
        return master;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,processPacket,void processPacket(QuorumPacket),"[178, 236]","{'A583': [(178, 178), (200, 200), (207, 207), (210, 214), (220, 220), (222, 226), (229, 230)], 'A596': [(183, 190), (193, 193), (195, 199), (201, 201), (209, 209), (235, 236)], 'A602': [(219, 219)], 'A590': [(194, 194), (215, 216), (227, 228), (231, 231)], 'A675': [(203, 203), (206, 206)], 'A612': [(179, 182), (204, 204), (217, 218)], 'A591': [(191, 192), (202, 202), (208, 208)], 'A625': [(205, 205), (221, 221)], 'A616': [(232, 234)]}","{'A583': 0.2711864406779661, 'A596': 0.3050847457627119, 'A602': 0.01694915254237288, 'A590': 0.1016949152542373, 'A675': 0.03389830508474576, 'A612': 0.11864406779661017, 'A591': 0.06779661016949153, 'A625': 0.03389830508474576, 'A616': 0.05084745762711865}",A596,,"    protected void processPacket(QuorumPacket qp) throws Exception {
        TxnLogEntry logEntry;
        TxnHeader hdr;
        TxnDigest digest;
        Record txn;
        switch (qp.getType()) {
        case Leader.PING:
            ping(qp);
            break;
        case Leader.PROPOSAL:
            LOG.warn(""Ignoring proposal"");
            break;
        case Leader.COMMIT:
            LOG.warn(""Ignoring commit"");
            break;
        case Leader.UPTODATE:
            LOG.error(""Received an UPTODATE message after Observer started"");
            break;
        case Leader.REVALIDATE:
            revalidate(qp);
            break;
        case Leader.SYNC:
            ((ObserverZooKeeperServer) zk).sync();
            break;
        case Leader.INFORM:
            ServerMetrics.getMetrics().LEARNER_COMMIT_RECEIVED_COUNT.add(1);
            logEntry = SerializeUtils.deserializeTxn(qp.getData());
            Request request = logEntry.toRequest();
            request.logLatency(ServerMetrics.getMetrics().COMMIT_PROPAGATION_LATENCY);
            ObserverZooKeeperServer obs = (ObserverZooKeeperServer) zk;
            obs.commitRequest(request);
            break;
        case Leader.INFORMANDACTIVATE:
            // get new designated leader from (current) leader's message
            ByteBuffer buffer = ByteBuffer.wrap(qp.getData());
            long suggestedLeaderId = buffer.getLong();

            byte[] remainingdata = new byte[buffer.remaining()];
            buffer.get(remainingdata);
            logEntry = SerializeUtils.deserializeTxn(remainingdata);
            txn = logEntry.getTxn();
            QuorumVerifier qv = self.configFromString(new String(((SetDataTxn) txn).getData(), UTF_8));

            request = logEntry.toRequest();
            obs = (ObserverZooKeeperServer) zk;

            boolean majorChange = self.processReconfig(qv, suggestedLeaderId, qp.getZxid(), true);

            obs.commitRequest(request);

            if (majorChange) {
                throw new Exception(""changes proposed in reconfig"");
            }
            break;
        default:
            LOG.warn(""Unknown packet type: {}"", LearnerHandler.packetToString(qp));
            break;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,shutdown,void shutdown(),"[241, 244]","{'A583': [(242, 242)], 'A596': [(243, 244)], 'A591': [(241, 241)]}","{'A583': 0.25, 'A596': 0.5, 'A591': 0.25}",A596,,"    public void shutdown() {
        LOG.info(""shutdown Observer"");
        super.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,waitForReconnectDelay,void waitForReconnectDelay(),"[246, 248]","{'A647': [(246, 248)]}",{'A647': 1.0},A647,,"    static void waitForReconnectDelay() {
        waitForReconnectDelayHelper(reconnectDelayMs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,waitForObserverElectionDelay,void waitForObserverElectionDelay(),"[250, 252]","{'A583': [(250, 250)], 'A647': [(251, 252)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,,"    static void waitForObserverElectionDelay() {
        waitForReconnectDelayHelper(observerElectionDelayMs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,waitForReconnectDelayHelper,void waitForReconnectDelayHelper(long),"[254, 264]","{'A583': [(254, 254), (257, 257), (261, 261)], 'A602': [(256, 256)], 'A647': [(255, 255), (258, 260), (262, 264)]}","{'A583': 0.2727272727272727, 'A602': 0.09090909090909091, 'A647': 0.6363636363636364}",A647,,"    private static void waitForReconnectDelayHelper(long delayValueMs) {
        if (delayValueMs > 0) {
            long randomDelay = ThreadLocalRandom.current().nextLong(delayValueMs);
            LOG.info(""Waiting for {} ms before reconnecting with the leader"", randomDelay);
            try {
                Thread.sleep(randomDelay);
            } catch (InterruptedException e) {
                LOG.warn(""Interrupted while waiting"", e);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,getLearnerMasterId,long getLearnerMasterId(),"[266, 269]","{'A647': [(266, 269)]}",{'A647': 1.0},A647,,"    public long getLearnerMasterId() {
        QuorumPeer.QuorumServer current = currentLearnerMaster;
        return current == null ? -1 : current.id;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,setLearnerMaster,boolean setLearnerMaster(String),"[276, 288]","{'A583': [(281, 281), (284, 284)], 'A647': [(276, 280), (282, 283), (285, 288)]}","{'A583': 0.15384615384615385, 'A647': 0.8461538461538461}",A647,,"    public boolean setLearnerMaster(String learnerMaster) {
        final QuorumPeer.QuorumServer server = self.validateLearnerMaster(learnerMaster);
        if (server == null) {
            return false;
        } else if (server.equals(currentLearnerMaster)) {
            LOG.info(""Already connected to requested learner master sid={} addr={}"", server.id, server.addr);
            return true;
        } else {
            LOG.info(""Requesting disconnect and reconnect to new learner master sid={} addr={}"", server.id, server.addr);
            nextLearnerMaster.set(server);
            return true;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,getCurrentLearnerMaster,QuorumPeer.QuorumServer getCurrentLearnerMaster(),"[290, 292]","{'A647': [(290, 292)]}",{'A647': 1.0},A647,,"    public QuorumPeer.QuorumServer getCurrentLearnerMaster() {
        return currentLearnerMaster;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,getObserverElectionDelayMs,long getObserverElectionDelayMs(),"[294, 296]","{'A583': [(294, 294)], 'A647': [(295, 296)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,,"    public static long getObserverElectionDelayMs() {
        return observerElectionDelayMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Observer.java,Observer,setObserverElectionDelayMs,void setObserverElectionDelayMs(long),"[298, 301]","{'A583': [(300, 300)], 'A647': [(298, 299), (301, 301)]}","{'A583': 0.25, 'A647': 0.75}",A647,,"    public static void setObserverElectionDelayMs(long electionDelayMs) {
        observerElectionDelayMs = electionDelayMs;
        LOG.info(""{} = {}"", OBSERVER_ELECTION_DELAY_MS, observerElectionDelayMs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster.Revalidation,equals,boolean equals(Object),"[111, 122]","{'A583': [(113, 118)], 'A647': [(111, 112), (119, 122)]}","{'A583': 0.5, 'A647': 0.5}",A583,,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }

            final Revalidation that = (Revalidation) o;
            return sessionId == that.sessionId && timeout == that.timeout && handler.equals(that.handler);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster.Revalidation,hashCode,int hashCode(),"[124, 130]","{'A647': [(124, 130)]}",{'A647': 1.0},A647,,"        @Override
        public int hashCode() {
            int result = (int) (sessionId ^ (sessionId >>> 32));
            result = 31 * result + timeout;
            result = 31 * result + handler.hashCode();
            return result;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,run,void run(),"[140, 145]","{'A583': [(142, 142)], 'A647': [(140, 141), (143, 145)]}","{'A583': 0.16666666666666666, 'A647': 0.8333333333333334}",A647,,"        @Override
        public void run() {
            for (LearnerHandler lh : activeObservers) {
                lh.ping();
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,addLearnerHandler,void addLearnerHandler(LearnerHandler),"[154, 159]","{'A647': [(154, 159)]}",{'A647': 1.0},A647,,"    @Override
    public void addLearnerHandler(LearnerHandler learnerHandler) {
        if (!listenerRunning) {
            throw new RuntimeException((""ObserverMaster is not running""));
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,removeLearnerHandler,void removeLearnerHandler(LearnerHandler),"[161, 164]","{'A647': [(161, 164)]}",{'A647': 1.0},A647,,"    @Override
    public void removeLearnerHandler(LearnerHandler learnerHandler) {
        activeObservers.remove(learnerHandler);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,syncTimeout,int syncTimeout(),"[166, 169]","{'A647': [(166, 169)]}",{'A647': 1.0},A647,,"    @Override
    public int syncTimeout() {
        return self.getSyncLimit() * self.getTickTime();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getTickOfNextAckDeadline,int getTickOfNextAckDeadline(),"[171, 174]","{'A647': [(171, 174)]}",{'A647': 1.0},A647,,"    @Override
    public int getTickOfNextAckDeadline() {
        return self.tick.get() + self.syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getTickOfInitialAckDeadline,int getTickOfInitialAckDeadline(),"[176, 179]","{'A647': [(176, 179)]}",{'A647': 1.0},A647,,"    @Override
    public int getTickOfInitialAckDeadline() {
        return self.tick.get() + self.initLimit + self.syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getAndDecrementFollowerCounter,long getAndDecrementFollowerCounter(),"[181, 184]","{'A647': [(181, 184)]}",{'A647': 1.0},A647,,"    @Override
    public long getAndDecrementFollowerCounter() {
        return followerCounter.getAndDecrement();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,waitForEpochAck,"void waitForEpochAck(long,StateSummary)","[186, 189]","{'A647': [(186, 189)]}",{'A647': 1.0},A647,,"    @Override
    public void waitForEpochAck(long sid, StateSummary ss) throws IOException, InterruptedException {
        // since this is done by an active follower, we don't need to wait for anything
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,waitForStartup,void waitForStartup(),"[191, 194]","{'A647': [(191, 194)]}",{'A647': 1.0},A647,,"    @Override
    public void waitForStartup() throws InterruptedException {
        // since this is done by an active follower, we don't need to wait for anything
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getLastProposed,long getLastProposed(),"[196, 199]","{'A583': [(197, 197)], 'A647': [(196, 196), (198, 199)]}","{'A583': 0.25, 'A647': 0.75}",A647,,"    @Override
    public synchronized long getLastProposed() {
        return lastProposedZxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getEpochToPropose,"long getEpochToPropose(long,long)","[201, 204]","{'A647': [(201, 204)]}",{'A647': 1.0},A647,,"    @Override
    public long getEpochToPropose(long sid, long lastAcceptedEpoch) throws InterruptedException, IOException {
        return self.getCurrentEpoch();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getZKDatabase,ZKDatabase getZKDatabase(),"[206, 209]","{'A647': [(206, 209)]}",{'A647': 1.0},A647,,"    @Override
    public ZKDatabase getZKDatabase() {
        return zks.getZKDatabase();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,waitForNewLeaderAck,"void waitForNewLeaderAck(long,long)","[211, 214]","{'A647': [(211, 214)]}",{'A647': 1.0},A647,,"    @Override
    public void waitForNewLeaderAck(long sid, long zxid) throws InterruptedException {
        // no need to wait since we are a follower
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getCurrentTick,int getCurrentTick(),"[216, 219]","{'A647': [(216, 219)]}",{'A647': 1.0},A647,,"    @Override
    public int getCurrentTick() {
        return self.tick.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,processAck,"void processAck(long,long,SocketAddress)","[221, 233]","{'A647': [(221, 233)]}",{'A647': 1.0},A647,,"    @Override
    public void processAck(long sid, long zxid, SocketAddress localSocketAddress) {
        if ((zxid & 0xffffffffL) == 0) {
            /*
             * We no longer process NEWLEADER ack by this method. However,
             * the learner sends ack back to the leader after it gets UPTODATE
             * so we just ignore the message.
             */
            return;
        }

        throw new RuntimeException(""Observers shouldn't send ACKS ack = "" + Long.toHexString(zxid));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,touch,"void touch(long,int)","[235, 238]","{'A647': [(235, 238)]}",{'A647': 1.0},A647,,"    @Override
    public void touch(long sess, int to) {
        zks.getSessionTracker().touchSession(sess, to);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,revalidateLearnerSession,boolean revalidateLearnerSession(QuorumPacket),"[240, 270]","{'A583': [(258, 262)], 'A647': [(240, 257), (263, 270)]}","{'A583': 0.16129032258064516, 'A647': 0.8387096774193549}",A647,,"    boolean revalidateLearnerSession(QuorumPacket qp) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(qp.getData());
        DataInputStream dis = new DataInputStream(bis);
        long id = dis.readLong();
        boolean valid = dis.readBoolean();
        Iterator<Revalidation> itr = pendingRevalidations.iterator();
        if (!itr.hasNext()) {
            // not a learner session, handle locally
            return false;
        }
        Revalidation revalidation = itr.next();
        if (revalidation.sessionId != id) {
            // not a learner session, handle locally
            return false;
        }
        itr.remove();
        LearnerHandler learnerHandler = revalidation.handler;
        // create a copy here as the qp object is reused by the Follower and may be mutated
        QuorumPacket deepCopy = new QuorumPacket(
            qp.getType(),
            qp.getZxid(),
            Arrays.copyOf(qp.getData(), qp.getData().length),
            qp.getAuthinfo() == null ? null : new ArrayList<>(qp.getAuthinfo()));
        learnerHandler.queuePacket(deepCopy);
        // To keep consistent as leader, touch the session when it's
        // revalidating the session, only update if it's a valid session.
        if (valid) {
            touch(revalidation.sessionId, revalidation.timeout);
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,revalidateSession,"void revalidateSession(QuorumPacket,LearnerHandler)","[272, 285]","{'A647': [(272, 285)]}",{'A647': 1.0},A647,,"    @Override
    public void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(qp.getData());
        DataInputStream dis = new DataInputStream(bis);
        long id = dis.readLong();
        int to = dis.readInt();
        synchronized (revalidateSessionLock) {
            pendingRevalidations.add(new Revalidation(id, to, learnerHandler));
            Learner learner = zks.getLearner();
            if (learner != null) {
                learner.writePacket(qp, true);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,submitLearnerRequest,void submitLearnerRequest(Request),"[287, 290]","{'A647': [(287, 290)]}",{'A647': 1.0},A647,,"    @Override
    public void submitLearnerRequest(Request si) {
        zks.processObserverRequest(si);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,startForwarding,"long startForwarding(LearnerHandler,long)","[292, 332]","{'A583': [(293, 293), (298, 303), (319, 328)], 'A647': [(292, 292), (294, 297), (304, 318), (329, 332)]}","{'A583': 0.4146341463414634, 'A647': 0.5853658536585366}",A647,,"    @Override
    public synchronized long startForwarding(LearnerHandler learnerHandler, long lastSeenZxid) {
        Iterator<QuorumPacket> itr = committedPkts.iterator();
        if (itr.hasNext()) {
            QuorumPacket packet = itr.next();
            if (packet.getZxid() > lastSeenZxid + 1) {
                LOG.error(
                    ""LearnerHandler is too far behind (0x{} < 0x{}), disconnecting {} at {}"",
                    Long.toHexString(lastSeenZxid + 1),
                    Long.toHexString(packet.getZxid()),
                    learnerHandler.getSid(),
                    learnerHandler.getRemoteAddress());
                learnerHandler.shutdown();
                return -1;
            } else if (packet.getZxid() == lastSeenZxid + 1) {
                learnerHandler.queuePacket(packet);
            }
            long queueHeadZxid = packet.getZxid();
            long queueBytesUsed = LearnerHandler.packetSize(packet);
            while (itr.hasNext()) {
                packet = itr.next();
                if (packet.getZxid() <= lastSeenZxid) {
                    continue;
                }
                learnerHandler.queuePacket(packet);
                queueBytesUsed += LearnerHandler.packetSize(packet);
            }
            LOG.info(
                ""finished syncing observer from retained commit queue: sid {}, ""
                    + ""queue head 0x{}, queue tail 0x{}, sync position 0x{}, num packets used {}, ""
                    + ""num bytes used {}"",
                learnerHandler.getSid(),
                Long.toHexString(queueHeadZxid),
                Long.toHexString(packet.getZxid()),
                Long.toHexString(lastSeenZxid),
                packet.getZxid() - lastSeenZxid,
                queueBytesUsed);
        }
        activeObservers.add(learnerHandler);
        return lastProposedZxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getQuorumVerifierVersion,long getQuorumVerifierVersion(),"[334, 337]","{'A647': [(334, 337)]}",{'A647': 1.0},A647,,"    @Override
    public long getQuorumVerifierVersion() {
        return self.getQuorumVerifier().getVersion();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getPeerInfo,String getPeerInfo(long),"[339, 343]","{'A647': [(339, 343)]}",{'A647': 1.0},A647,,"    @Override
    public String getPeerInfo(long sid) {
        QuorumPeer.QuorumServer server = self.getView().get(sid);
        return server == null ? """" : server.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getQuorumVerifierBytes,byte[] getQuorumVerifierBytes(),"[345, 348]","{'A647': [(345, 346), (348, 348)], 'A602': [(347, 347)]}","{'A647': 0.75, 'A602': 0.25}",A647,,"    @Override
    public byte[] getQuorumVerifierBytes() {
        return self.getLastSeenQuorumVerifier().toString().getBytes(UTF_8);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getQuorumAuthServer,QuorumAuthServer getQuorumAuthServer(),"[350, 353]","{'A647': [(350, 353)]}",{'A647': 1.0},A647,,"    @Override
    public QuorumAuthServer getQuorumAuthServer() {
        return (self == null) ? null : self.authServer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,proposalReceived,void proposalReceived(QuorumPacket),"[355, 357]","{'A647': [(355, 357)]}",{'A647': 1.0},A647,,"    void proposalReceived(QuorumPacket qp) {
        proposedPkts.add(new QuorumPacket(Leader.INFORM, qp.getZxid(), qp.getData(), null));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,removeProposedPacket,QuorumPacket removeProposedPacket(long),"[359, 375]","{'A583': [(366, 369)], 'A647': [(359, 365), (370, 375)]}","{'A583': 0.23529411764705882, 'A647': 0.7647058823529411}",A647,,"    private synchronized QuorumPacket removeProposedPacket(long zxid) {
        QuorumPacket pkt = proposedPkts.peek();
        if (pkt == null || pkt.getZxid() > zxid) {
            LOG.debug(""ignore missing proposal packet for {}"", Long.toHexString(zxid));
            return null;
        }
        if (pkt.getZxid() != zxid) {
            final String m = String.format(
                ""Unexpected proposal packet on commit ack, expected zxid 0x%d got zxid 0x%d"",
                zxid,
                pkt.getZxid());
            LOG.error(m);
            throw new RuntimeException(m);
        }
        proposedPkts.remove();
        return pkt;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,cacheCommittedPacket,void cacheCommittedPacket(QuorumPacket),"[377, 398]","{'A583': [(381, 381)], 'A647': [(377, 380), (382, 398)]}","{'A583': 0.045454545454545456, 'A647': 0.9545454545454546}",A647,,"    private synchronized void cacheCommittedPacket(final QuorumPacket pkt) {
        committedPkts.add(pkt);
        pktsSize += LearnerHandler.packetSize(pkt);
        // remove 5 packets for every one added as we near the size limit
        for (int i = 0; pktsSize > pktsSizeLimit * 0.8 && i < 5; i++) {
            QuorumPacket oldPkt = committedPkts.poll();
            if (oldPkt == null) {
                pktsSize = 0;
                break;
            }
            pktsSize -= LearnerHandler.packetSize(oldPkt);
        }
        // enforce the size limit as a hard cap
        while (pktsSize > pktsSizeLimit) {
            QuorumPacket oldPkt = committedPkts.poll();
            if (oldPkt == null) {
                pktsSize = 0;
                break;
            }
            pktsSize -= LearnerHandler.packetSize(oldPkt);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,sendPacket,void sendPacket(QuorumPacket),"[400, 405]","{'A583': [(401, 401)], 'A647': [(400, 400), (402, 405)]}","{'A583': 0.16666666666666666, 'A647': 0.8333333333333334}",A647,,"    private synchronized void sendPacket(final QuorumPacket pkt) {
        for (LearnerHandler lh : activeObservers) {
            lh.queuePacket(pkt);
        }
        lastProposedZxid = pkt.getZxid();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,proposalCommitted,void proposalCommitted(long),"[407, 414]","{'A647': [(407, 414)]}",{'A647': 1.0},A647,,"    synchronized void proposalCommitted(long zxid) {
        QuorumPacket pkt = removeProposedPacket(zxid);
        if (pkt == null) {
            return;
        }
        cacheCommittedPacket(pkt);
        sendPacket(pkt);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,informAndActivate,"void informAndActivate(long,long)","[416, 426]","{'A583': [(423, 423)], 'A647': [(416, 422), (424, 426)]}","{'A583': 0.09090909090909091, 'A647': 0.9090909090909091}",A647,,"    synchronized void informAndActivate(long zxid, long suggestedLeaderId) {
        QuorumPacket pkt = removeProposedPacket(zxid);
        if (pkt == null) {
            return;
        }

        // Build the INFORMANDACTIVATE packet
        QuorumPacket informAndActivateQP = Leader.buildInformAndActivePacket(zxid, suggestedLeaderId, pkt.getData());
        cacheCommittedPacket(informAndActivateQP);
        sendPacket(informAndActivateQP);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,start,void start(),"[428, 453]","{'A583': [(428, 428), (452, 452)], 'A647': [(429, 433), (435, 439), (441, 445), (447, 451), (453, 453)], 'A653': [(434, 434), (440, 440), (446, 446)]}","{'A583': 0.07692307692307693, 'A647': 0.8076923076923077, 'A653': 0.11538461538461539}",A647,,"    public synchronized void start() throws IOException {
        if (thread != null && thread.isAlive()) {
            return;
        }
        listenerRunning = true;
        int backlog = 10; // dog science
        InetAddress address = self.getQuorumAddress().getReachableOrOne().getAddress();
        if (self.shouldUsePortUnification() || self.isSslQuorum()) {
            boolean allowInsecureConnection = self.shouldUsePortUnification();
            if (self.getQuorumListenOnAllIPs()) {
                ss = new UnifiedServerSocket(self.getX509Util(), allowInsecureConnection, port, backlog);
            } else {
                ss = new UnifiedServerSocket(self.getX509Util(), allowInsecureConnection, port, backlog, address);
            }
        } else {
            if (self.getQuorumListenOnAllIPs()) {
                ss = new ServerSocket(port, backlog);
            } else {
                ss = new ServerSocket(port, backlog, address);
            }
        }
        thread = new Thread(this, ""ObserverMaster"");
        thread.start();
        pinger = Executors.newSingleThreadScheduledExecutor();
        pinger.scheduleAtFixedRate(ping, self.tickTime / 2, self.tickTime / 2, TimeUnit.MILLISECONDS);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,run,void run(),"[455, 482]","{'A583': [(457, 458)], 'A647': [(455, 455), (460, 462), (464, 482)], 'A584': [(456, 456), (459, 459), (463, 463)]}","{'A583': 0.07142857142857142, 'A647': 0.8214285714285714, 'A584': 0.10714285714285714}",A647,,"    public void run() {
        ServerSocket ss;
        synchronized (this) {
            ss = this.ss;
        }
        while (listenerRunning) {
            try {
                Socket s = ss.accept();

                // start with the initLimit, once the ack is processed
                // in LearnerHandler switch to the syncLimit
                s.setSoTimeout(self.tickTime * self.initLimit);
                BufferedInputStream is = new BufferedInputStream(s.getInputStream());
                LearnerHandler lh = new LearnerHandler(s, is, this);
                lh.start();
            } catch (Exception e) {
                if (listenerRunning) {
                    LOG.debug(""Ignoring accept exception (maybe shutting down)"", e);
                } else {
                    LOG.debug(""Ignoring accept exception (maybe client closed)"", e);
                }
            }
        }
        /*
         * we don't need to close ss because we only got here because listenerRunning is
         * false and that is set and then ss is closed() in stop()
         */
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,stop,void stop(),"[484, 499]","{'A583': [(484, 484), (496, 496)], 'A647': [(485, 495), (497, 499)]}","{'A583': 0.125, 'A647': 0.875}",A647,,"    public synchronized void stop() {
        listenerRunning = false;
        if (pinger != null) {
            pinger.shutdownNow();
        }
        if (ss != null) {
            try {
                ss.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
        for (LearnerHandler lh : activeObservers) {
            lh.shutdown();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getNumActiveObservers,int getNumActiveObservers(),"[501, 503]","{'A647': [(501, 503)]}",{'A647': 1.0},A647,,"    int getNumActiveObservers() {
        return activeObservers.size();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getActiveObservers,"Iterable<Map<String, Object>> getActiveObservers()","[505, 511]","{'A583': [(506, 507)], 'A647': [(505, 505), (508, 511)]}","{'A583': 0.2857142857142857, 'A647': 0.7142857142857143}",A647,,"    public Iterable<Map<String, Object>> getActiveObservers() {
        Set<Map<String, Object>> info = new HashSet<>();
        for (LearnerHandler lh : activeObservers) {
            info.add(lh.getLearnerHandlerInfo());
        }
        return info;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,resetObserverConnectionStats,void resetObserverConnectionStats(),"[513, 517]","{'A583': [(514, 514)], 'A647': [(513, 513), (515, 517)]}","{'A583': 0.2, 'A647': 0.8}",A647,,"    public void resetObserverConnectionStats() {
        for (LearnerHandler lh : activeObservers) {
            lh.resetObserverConnectionStats();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,getPktsSizeLimit,int getPktsSizeLimit(),"[519, 521]","{'A647': [(519, 521)]}",{'A647': 1.0},A647,,"    int getPktsSizeLimit() {
        return pktsSizeLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,setPktsSizeLimit,void setPktsSizeLimit(int),"[523, 525]","{'A647': [(523, 525)]}",{'A647': 1.0},A647,,"    static void setPktsSizeLimit(final int sizeLimit) {
        pktsSizeLimit = sizeLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,registerLearnerHandlerBean,"void registerLearnerHandlerBean(LearnerHandler,Socket)","[527, 533]","{'A647': [(527, 533)]}",{'A647': 1.0},A647,,"    @Override
    public void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket) {
        LearnerHandlerBean bean = new LearnerHandlerBean(learnerHandler, socket);
        if (zks.registerJMX(bean)) {
            connectionBeans.put(learnerHandler, bean);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ObserverMaster.java,ObserverMaster,unregisterLearnerHandlerBean,void unregisterLearnerHandlerBean(LearnerHandler),"[535, 541]","{'A583': [(538, 538)], 'A647': [(535, 537), (539, 541)]}","{'A583': 0.14285714285714285, 'A647': 0.8571428571428571}",A647,,"    @Override
    public void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler) {
        LearnerHandlerBean bean = connectionBeans.remove(learnerHandler);
        if (bean != null) {
            MBeanRegistry.getInstance().unregister(bean);
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/NullQuorumAuthServer.java,NullQuorumAuthServer,authenticate,"void authenticate(Socket,DataInputStream)","[30, 33]","{'A583': [(32, 32)], 'A594': [(30, 31), (33, 33)]}","{'A583': 0.25, 'A594': 0.75}",A594,,"    @Override
    public void authenticate(final Socket sock, final DataInputStream din) {
        // simply return don't require auth
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java,SaslQuorumAuthLearner,authenticate,"void authenticate(Socket,String)","[81, 145]","{'A583': [(84, 87), (91, 91), (93, 93), (96, 96), (98, 103), (110, 110), (114, 114), (121, 121), (124, 124), (127, 127), (130, 130)], 'A594': [(81, 83), (88, 90), (92, 92), (94, 95), (104, 109), (111, 113), (115, 120), (122, 123), (125, 126), (128, 129), (131, 145)], 'A628': [(97, 97)]}","{'A583': 0.2923076923076923, 'A594': 0.6923076923076923, 'A628': 0.015384615384615385}",A594,,"    @Override
    public void authenticate(Socket sock, String hostName) throws IOException {
        if (!quorumRequireSasl) { // let it through, we don't require auth
            LOG.info(
                ""Skipping SASL authentication as {}={}"",
                QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED,
                quorumRequireSasl);
            return;
        }
        SaslClient sc = null;
        String principalConfig = SecurityUtils.getServerPrincipal(quorumServicePrincipal, hostName);
        try {
            DataOutputStream dout = new DataOutputStream(sock.getOutputStream());
            DataInputStream din = new DataInputStream(sock.getInputStream());
            byte[] responseToken = new byte[0];
            sc = SecurityUtils.createSaslClient(
                new ZKConfig(),
                learnerLogin.getSubject(),
                principalConfig,
                QuorumAuth.QUORUM_SERVER_PROTOCOL_NAME,
                QuorumAuth.QUORUM_SERVER_SASL_DIGEST,
                LOG,
                ""QuorumLearner"");

            if (sc.hasInitialResponse()) {
                responseToken = createSaslToken(new byte[0], sc, learnerLogin);
            }
            send(dout, responseToken);
            QuorumAuthPacket authPacket = receive(din);
            QuorumAuth.Status qpStatus = QuorumAuth.Status.getStatus(authPacket.getStatus());
            while (!sc.isComplete()) {
                switch (qpStatus) {
                case SUCCESS:
                    responseToken = createSaslToken(authPacket.getToken(), sc, learnerLogin);
                    // we're done; don't expect to send another BIND
                    if (responseToken != null) {
                        throw new SaslException(""Protocol error: attempting to send response after completion"");
                    }
                    break;
                case IN_PROGRESS:
                    responseToken = createSaslToken(authPacket.getToken(), sc, learnerLogin);
                    send(dout, responseToken);
                    authPacket = receive(din);
                    qpStatus = QuorumAuth.Status.getStatus(authPacket.getStatus());
                    break;
                case ERROR:
                    throw new SaslException(""Authentication failed against server addr: "" + sock.getRemoteSocketAddress());
                default:
                    LOG.warn(""Unknown status:{}!"", qpStatus);
                    throw new SaslException(""Authentication failed against server addr: "" + sock.getRemoteSocketAddress());
                }
            }

            // Validate status code at the end of authentication exchange.
            checkAuthStatus(sock, qpStatus);
        } finally {
            if (sc != null) {
                try {
                    sc.dispose();
                } catch (SaslException e) {
                    LOG.error(""SaslClient dispose() failed"", e);
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java,SaslQuorumAuthLearner,checkAuthStatus,"void checkAuthStatus(Socket,QuorumAuth.Status)","[147, 157]","{'A583': [(147, 147), (149, 152), (154, 155)], 'A594': [(148, 148), (153, 153), (156, 157)]}","{'A583': 0.6363636363636364, 'A594': 0.36363636363636365}",A583,,"    private void checkAuthStatus(Socket sock, QuorumAuth.Status qpStatus) throws SaslException {
        if (qpStatus == QuorumAuth.Status.SUCCESS) {
            LOG.info(
                ""Successfully completed the authentication using SASL. server addr: {}, status: {}"",
                sock.getRemoteSocketAddress(),
                qpStatus);
        } else {
            throw new SaslException(""Authentication failed against server addr: "" + sock.getRemoteSocketAddress()
                                    + "", qpStatus: "" + qpStatus);
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java,SaslQuorumAuthLearner,receive,QuorumAuthPacket receive(DataInputStream),"[159, 164]","{'A594': [(159, 164)]}",{'A594': 1.0},A594,,"    private QuorumAuthPacket receive(DataInputStream din) throws IOException {
        QuorumAuthPacket authPacket = new QuorumAuthPacket();
        BinaryInputArchive bia = BinaryInputArchive.getArchive(din);
        authPacket.deserialize(bia, QuorumAuth.QUORUM_AUTH_MESSAGE_TAG);
        return authPacket;
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java,SaslQuorumAuthLearner,send,"void send(DataOutputStream,byte[])","[166, 173]","{'A583': [(166, 166), (169, 170)], 'A594': [(167, 168), (171, 173)]}","{'A583': 0.375, 'A594': 0.625}",A594,,"    private void send(DataOutputStream dout, byte[] response) throws IOException {
        QuorumAuthPacket authPacket;
        BufferedOutputStream bufferedOutput = new BufferedOutputStream(dout);
        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(bufferedOutput);
        authPacket = QuorumAuth.createPacket(QuorumAuth.Status.IN_PROGRESS, response);
        boa.writeRecord(authPacket, QuorumAuth.QUORUM_AUTH_MESSAGE_TAG);
        bufferedOutput.flush();
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java,SaslQuorumAuthLearner,createSaslToken,"byte[] createSaslToken(byte[],SaslClient,Login)","[176, 212]","{'A583': [(176, 179), (181, 181), (186, 191), (194, 194), (201, 202), (209, 210)], 'A594': [(180, 180), (182, 185), (192, 193), (195, 200), (203, 204), (206, 208), (211, 212)], 'A653': [(205, 205)]}","{'A583': 0.43243243243243246, 'A594': 0.5405405405405406, 'A653': 0.02702702702702703}",A594,,"    private byte[] createSaslToken(
        final byte[] saslToken,
        final SaslClient saslClient,
        final Login login) throws SaslException {
        if (saslToken == null) {
            throw new SaslException(""Error in authenticating with a Zookeeper Quorum member: the quorum member's saslToken is null."");
        }
        if (login.getSubject() != null) {
            synchronized (login) {
                try {
                    final byte[] retval = Subject.doAs(login.getSubject(), new PrivilegedExceptionAction<byte[]>() {
                        public byte[] run() throws SaslException {
                            LOG.debug(""saslClient.evaluateChallenge(len={})"", saslToken.length);
                            return saslClient.evaluateChallenge(saslToken);
                        }
                    });
                    return retval;
                } catch (PrivilegedActionException e) {
                    String error = ""An error: ("" + e + "") occurred when evaluating Zookeeper Quorum Member's received SASL token."";
                    // Try to provide hints to use about what went wrong so they
                    // can fix their configuration.
                    // TODO: introspect about e: look for GSS information.
                    final String UNKNOWN_SERVER_ERROR_TEXT = ""(Mechanism level: Server not found in Kerberos database (7) - UNKNOWN_SERVER)"";
                    if (e.toString().indexOf(UNKNOWN_SERVER_ERROR_TEXT) > -1) {
                        error += "" This may be caused by Java's being unable to resolve the Zookeeper Quorum Member's""
                                 + "" hostname correctly. You may want to try to adding""
                                 + "" '-Dsun.net.spi.nameservice.provider.1=dns,sun' to your server's JVMFLAGS environment."";
                    }
                    LOG.error(error);
                    throw new SaslException(error, e);
                }
            }
        } else {
            throw new SaslException(""Cannot make SASL token without subject defined. ""
                                    + ""For diagnosis, please look for WARNs and ERRORs in your log related to the Login class."");
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthLearner.java,SaslQuorumAuthLearner,run,byte[] run(),"[187, 190]","{'A583': [(187, 190)]}",{'A583': 1.0},A583,,"                        public byte[] run() throws SaslException {
                            LOG.debug(""saslClient.evaluateChallenge(len={})"", saslToken.length);
                            return saslClient.evaluateChallenge(saslToken);
                        }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/QuorumAuth.java,QuorumAuth.Status,getStatus,Status getStatus(int),"[63, 76]","{'A594': [(63, 76)]}",{'A594': 1.0},A594,,"        static Status getStatus(int status) {
            switch (status) {
            case 0:
                return IN_PROGRESS;
            case 1:
                return SUCCESS;
            case -1:
                return ERROR;
            default:
                LOG.error(""Unknown status:{}!"", status);
                assert false : ""Unknown status!"";
                return ERROR;
            }
        }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/QuorumAuth.java,QuorumAuth.Status,status,int status(),"[78, 80]","{'A594': [(78, 80)]}",{'A594': 1.0},A594,,"        int status() {
            return status;
        }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/QuorumAuth.java,QuorumAuth,createPacket,"QuorumAuthPacket createPacket(Status,byte[])","[83, 85]","{'A583': [(84, 84)], 'A594': [(83, 83), (85, 85)]}","{'A583': 0.3333333333333333, 'A594': 0.6666666666666666}",A594,,"    public static QuorumAuthPacket createPacket(Status status, byte[] response) {
        return new QuorumAuthPacket(QUORUM_AUTH_MAGIC_NUMBER, status.status(), response);
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/QuorumAuth.java,QuorumAuth,nextPacketIsAuth,boolean nextPacketIsAuth(DataInputStream),"[87, 93]","{'A583': [(87, 87), (90, 90)], 'A594': [(88, 89), (91, 93)]}","{'A583': 0.2857142857142857, 'A594': 0.7142857142857143}",A594,,"    public static boolean nextPacketIsAuth(DataInputStream din) throws IOException {
        din.mark(32);
        BinaryInputArchive bia = new BinaryInputArchive(din);
        boolean firstIsAuth = (bia.readLong(""NO_TAG"") == QuorumAuth.QUORUM_AUTH_MAGIC_NUMBER);
        din.reset();
        return firstIsAuth;
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthServer.java,SaslQuorumAuthServer,authenticate,"void authenticate(Socket,DataInputStream)","[70, 151]","{'A583': [(71, 71), (77, 77), (88, 91), (93, 93), (100, 103), (113, 115), (132, 132), (135, 140)], 'A594': [(70, 70), (72, 76), (78, 87), (94, 99), (104, 112), (116, 131), (133, 134), (141, 151)], 'A652': [(92, 92)]}","{'A583': 0.25609756097560976, 'A594': 0.7317073170731707, 'A652': 0.012195121951219513}",A594,,"    @Override
    public void authenticate(Socket sock, DataInputStream din) throws SaslException {
        DataOutputStream dout = null;
        SaslServer ss = null;
        try {
            if (!QuorumAuth.nextPacketIsAuth(din)) {
                if (quorumRequireSasl) {
                    throw new SaslException(""Learner not trying to authenticate"" + "" and authentication is required"");
                } else {
                    // let it through, we don't require auth
                    return;
                }
            }

            byte[] token = receive(din);
            int tries = 0;
            dout = new DataOutputStream(sock.getOutputStream());
            byte[] challenge = null;
            ss = SecurityUtils.createSaslServer(
                serverLogin.getSubject(),
                QuorumAuth.QUORUM_SERVER_PROTOCOL_NAME,
                QuorumAuth.QUORUM_SERVER_SASL_DIGEST,
                serverLogin.newCallbackHandler(),
                LOG);
            while (!ss.isComplete()) {
                challenge = ss.evaluateResponse(token);
                if (!ss.isComplete()) {
                    // limited number of retries.
                    if (++tries > MAX_RETRIES) {
                        send(dout, challenge, QuorumAuth.Status.ERROR);
                        LOG.warn(
                            ""Failed to authenticate using SASL, server addr: {}, retries={} exceeded."",
                            sock.getRemoteSocketAddress(),
                            tries);
                        break;
                    }
                    send(dout, challenge, QuorumAuth.Status.IN_PROGRESS);
                    token = receive(din);
                }
            }
            // Authentication exchange has completed
            if (ss.isComplete()) {
                send(dout, challenge, QuorumAuth.Status.SUCCESS);
                LOG.info(
                    ""Successfully completed the authentication using SASL. learner addr: {}"",
                    sock.getRemoteSocketAddress());
            }
        } catch (Exception e) {
            try {
                if (dout != null) {
                    // send error message to the learner
                    send(dout, new byte[0], QuorumAuth.Status.ERROR);
                }
            } catch (IOException ioe) {
                LOG.warn(""Exception while sending failed status"", ioe);
            }
            // If sasl is not required, when a server initializes a
            // connection it will try to log in, but it will also
            // accept connections that do not start with a sasl
            // handshake.
            if (quorumRequireSasl) {
                LOG.error(""Failed to authenticate using SASL"", e);
                throw new SaslException(""Failed to authenticate using SASL: "" + e.getMessage());
            } else {
                LOG.warn(""Failed to authenticate using SASL"", e);
                LOG.warn(
                    ""Maintaining learner connection despite SASL authentication failure. server addr: {}, {}: {}"",
                    sock.getRemoteSocketAddress(),
                    QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED,
                    quorumRequireSasl);
                // let it through, we don't require auth
            }
        } finally {
            if (ss != null) {
                try {
                    ss.dispose();
                } catch (SaslException e) {
                    LOG.error(""SaslServer dispose() failed"", e);
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthServer.java,SaslQuorumAuthServer,receive,byte[] receive(DataInputStream),"[153, 158]","{'A594': [(153, 158)]}",{'A594': 1.0},A594,,"    private byte[] receive(DataInputStream din) throws IOException {
        QuorumAuthPacket authPacket = new QuorumAuthPacket();
        BinaryInputArchive bia = BinaryInputArchive.getArchive(din);
        authPacket.deserialize(bia, QuorumAuth.QUORUM_AUTH_MESSAGE_TAG);
        return authPacket.getToken();
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumAuthServer.java,SaslQuorumAuthServer,send,"void send(DataOutputStream,byte[],QuorumAuth.Status)","[160, 172]","{'A583': [(160, 160), (162, 162), (165, 165)], 'A594': [(161, 161), (163, 164), (166, 172)]}","{'A583': 0.23076923076923078, 'A594': 0.7692307692307693}",A594,,"    private void send(DataOutputStream dout, byte[] challenge, QuorumAuth.Status s) throws IOException {
        BufferedOutputStream bufferedOutput = new BufferedOutputStream(dout);
        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(bufferedOutput);
        QuorumAuthPacket authPacket;
        if (challenge == null && s != QuorumAuth.Status.SUCCESS) {
            authPacket = QuorumAuth.createPacket(QuorumAuth.Status.IN_PROGRESS, null);
        } else {
            authPacket = QuorumAuth.createPacket(s, challenge);
        }

        boa.writeRecord(authPacket, QuorumAuth.QUORUM_AUTH_MESSAGE_TAG);
        bufferedOutput.flush();
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumServerCallbackHandler.java,SaslQuorumServerCallbackHandler,handle,void handle(Callback[]),"[89, 101]","{'A594': [(89, 101)]}",{'A594': 1.0},A594,,"    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof NameCallback) {
                handleNameCallback((NameCallback) callback);
            } else if (callback instanceof PasswordCallback) {
                handlePasswordCallback((PasswordCallback) callback);
            } else if (callback instanceof RealmCallback) {
                handleRealmCallback((RealmCallback) callback);
            } else if (callback instanceof AuthorizeCallback) {
                handleAuthorizeCallback((AuthorizeCallback) callback);
            }
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumServerCallbackHandler.java,SaslQuorumServerCallbackHandler,handleNameCallback,void handleNameCallback(NameCallback),"[103, 111]","{'A583': [(106, 106)], 'A594': [(103, 105), (107, 111)]}","{'A583': 0.1111111111111111, 'A594': 0.8888888888888888}",A594,,"    private void handleNameCallback(NameCallback nc) {
        // check to see if this user is in the user password database.
        if (credentials.get(nc.getDefaultName()) == null) {
            LOG.warn(""User '{}' not found in list of DIGEST-MD5 authenticateable users."", nc.getDefaultName());
            return;
        }
        nc.setName(nc.getDefaultName());
        userName = nc.getDefaultName();
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumServerCallbackHandler.java,SaslQuorumServerCallbackHandler,handlePasswordCallback,void handlePasswordCallback(PasswordCallback),"[113, 119]","{'A583': [(114, 114)], 'A594': [(113, 113), (115, 119)]}","{'A583': 0.14285714285714285, 'A594': 0.8571428571428571}",A594,,"    private void handlePasswordCallback(PasswordCallback pc) {
        if (credentials.containsKey(userName)) {
            pc.setPassword(credentials.get(userName).toCharArray());
        } else {
            LOG.warn(""No password found for user: {}"", userName);
        }
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumServerCallbackHandler.java,SaslQuorumServerCallbackHandler,handleRealmCallback,void handleRealmCallback(RealmCallback),"[121, 124]","{'A594': [(121, 124)]}",{'A594': 1.0},A594,,"    private void handleRealmCallback(RealmCallback rc) {
        LOG.debug(""QuorumLearner supplied realm: {}"", rc.getDefaultText());
        rc.setText(rc.getDefaultText());
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/SaslQuorumServerCallbackHandler.java,SaslQuorumServerCallbackHandler,handleAuthorizeCallback,void handleAuthorizeCallback(AuthorizeCallback),"[126, 157]","{'A583': [(154, 154)], 'A594': [(126, 136), (138, 140), (143, 144), (146, 153), (155, 157)], 'A637': [(137, 137), (141, 142), (145, 145)]}","{'A583': 0.03125, 'A594': 0.84375, 'A637': 0.125}",A594,,"    private void handleAuthorizeCallback(AuthorizeCallback ac) {
        String authenticationID = ac.getAuthenticationID();
        String authorizationID = ac.getAuthorizationID();

        boolean authzFlag = false;
        // 1. Matches authenticationID and authorizationID
        authzFlag = authenticationID.equals(authorizationID);

        // 2. Verify whether the connecting host is present in authorized hosts.
        // If not exists, then connecting peer is not authorized to join the
        // ensemble and will reject it.
        if (!isDigestAuthn && authzFlag) {
            String[] components = authorizationID.split(""[/@]"");
            if (components.length == 3) {
                authzFlag = authzHosts.contains(components[1]);
            } else {
                authzFlag = false;
            }
            if (!authzFlag) {
                LOG.error(""SASL authorization completed, {} is not authorized to connect"", authorizationID);
            }
        }

        // Sets authorization flag
        ac.setAuthorized(authzFlag);
        if (ac.isAuthorized()) {
            ac.setAuthorizedID(authorizationID);
            LOG.info(""Successfully authenticated learner: authenticationID={};  authorizationID={}."",
                     authenticationID, authorizationID);
        }
        LOG.debug(""SASL authorization completed, authorized flag set to {}"", ac.isAuthorized());
    }
"
org.apache.zookeeper.server.quorum.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/auth/NullQuorumAuthLearner.java,NullQuorumAuthLearner,authenticate,"void authenticate(Socket,String)","[29, 32]","{'A594': [(29, 32)]}",{'A594': 1.0},A594,,"    @Override
    public void authenticate(Socket sock, String hostname) {
        return; // simply return don't require auth
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getName,String getName(),"[37, 39]","{'A590': [(37, 37), (39, 39)], 'A702': [(38, 38)]}","{'A590': 0.6666666666666666, 'A702': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public String getName() {
        return ""replica."" + peer.getMyId();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,isHidden,boolean isHidden(),"[41, 43]","{'A590': [(41, 43)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getTickTime,int getTickTime(),"[45, 47]","{'A591': [(45, 47)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getTickTime() {
        return peer.getTickTime();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[49, 51]","{'A591': [(50, 50)], 'A596': [(49, 49), (51, 51)]}","{'A591': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getMaxClientCnxnsPerHost() {
        return peer.getMaxClientCnxnsPerHost();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getMinSessionTimeout,int getMinSessionTimeout(),"[53, 55]","{'A596': [(53, 55)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getMinSessionTimeout() {
        return peer.getMinSessionTimeout();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getMaxSessionTimeout,int getMaxSessionTimeout(),"[57, 59]","{'A596': [(57, 59)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getMaxSessionTimeout() {
        return peer.getMaxSessionTimeout();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getInitLimit,int getInitLimit(),"[61, 63]","{'A591': [(61, 63)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getInitLimit() {
        return peer.getInitLimit();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getSyncLimit,int getSyncLimit(),"[65, 67]","{'A591': [(65, 67)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getSyncLimit() {
        return peer.getSyncLimit();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,setInitLimit,void setInitLimit(int),"[69, 71]","{'A675': [(69, 71)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public void setInitLimit(int initLimit) {
        peer.setInitLimit(initLimit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,setSyncLimit,void setSyncLimit(int),"[73, 75]","{'A675': [(73, 75)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public void setSyncLimit(int syncLimit) {
        peer.setSyncLimit(syncLimit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getTick,int getTick(),"[77, 79]","{'A591': [(77, 79)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getTick() {
        return peer.getTick();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getState,String getState(),"[81, 83]","{'A591': [(81, 81), (83, 83)], 'A616': [(82, 82)]}","{'A591': 0.6666666666666666, 'A616': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public String getState() {
        return peer.getServerState();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getQuorumAddress,String getQuorumAddress(),"[85, 88]","{'A590': [(85, 85), (88, 88)], 'A653': [(86, 87)]}","{'A590': 0.5, 'A653': 0.5}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public String getQuorumAddress() {
        return peer.getQuorumAddress().getAllAddresses().stream().map(NetUtils::formatInetAddr)
                .collect(Collectors.joining(""|""));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getElectionType,int getElectionType(),"[90, 92]","{'A591': [(90, 91)], 'A596': [(92, 92)]}","{'A591': 0.6666666666666666, 'A596': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public int getElectionType() {
        return peer.getElectionType();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getElectionAddress,String getElectionAddress(),"[94, 97]","{'A653': [(95, 96)], 'A593': [(94, 94), (97, 97)]}","{'A653': 0.5, 'A593': 0.5}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public String getElectionAddress() {
        return peer.getElectionAddress().getAllAddresses().stream().map(NetUtils::formatInetAddr)
                .collect(Collectors.joining(""|""));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getClientAddress,String getClientAddress(),"[99, 105]","{'A682': [(101, 101)], 'A616': [(100, 100), (102, 104)], 'A593': [(99, 99), (105, 105)]}","{'A682': 0.14285714285714285, 'A616': 0.5714285714285714, 'A593': 0.2857142857142857}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public String getClientAddress() {
        if (null != peer.cnxnFactory) {
            return formatInetAddr(peer.cnxnFactory.getLocalAddress());
        } else {
            return """";
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getLearnerType,String getLearnerType(),"[107, 109]","{'A583': [(107, 107)], 'A593': [(108, 109)]}","{'A583': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public String getLearnerType() {
        return peer.getLearnerType().toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getConfigVersion,long getConfigVersion(),"[111, 113]","{'A583': [(111, 111)], 'A593': [(112, 113)]}","{'A583': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    public long getConfigVersion() {
        return peer.getQuorumVerifier().getVersion();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getQuorumSystemInfo,String getQuorumSystemInfo(),"[115, 118]","{'A593': [(115, 118)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    @Override
    public String getQuorumSystemInfo() {
        return peer.getQuorumVerifier().toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,isPartOfEnsemble,boolean isPartOfEnsemble(),"[120, 123]","{'A702': [(122, 122)], 'A593': [(120, 121), (123, 123)]}","{'A702': 0.25, 'A593': 0.75}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    @Override
    public boolean isPartOfEnsemble() {
        return peer.getView().containsKey(peer.getMyId());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,isLeader,boolean isLeader(),"[125, 128]","{'A702': [(127, 127)], 'A584': [(125, 126), (128, 128)]}","{'A702': 0.25, 'A584': 0.75}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    @Override
    public boolean isLeader() {
        return peer.isLeader(peer.getMyId());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LocalPeerBean.java,LocalPeerBean,getMaxCnxns,int getMaxCnxns(),"[130, 133]","{'A670': [(130, 133)]}",{'A670': 1.0},A670,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LocalPeerBeanTest.java,"    @Override
    public int getMaxCnxns() {
        return ServerCnxnHelper.getMaxCnxns(peer.secureCnxnFactory, peer.cnxnFactory);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSender.java,LearnerSender,run,void run(),"[40, 67]","{'A675': [(40, 67)]}",{'A675': 1.0},A675,,"    @Override
    public void run() {
        while (true) {
            try {
                QuorumPacket p = queuedPackets.poll();
                if (p == null) {
                    learner.bufferedOutput.flush();
                    p = queuedPackets.take();
                }

                if (p == proposalOfDeath) {
                    // Packet of death!
                    break;
                }

                learner.messageTracker.trackSent(p.getType());
                learner.leaderOs.writeRecord(p, ""packet"");
            } catch (IOException e) {
                handleException(this.getName(), e);
                break;
            } catch (InterruptedException e) {
                handleException(this.getName(), e);
                break;
            }
        }

        LOG.info(""LearnerSender exited"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSender.java,LearnerSender,queuePacket,void queuePacket(QuorumPacket),"[69, 75]","{'A675': [(69, 75)]}",{'A675': 1.0},A675,,"    public void queuePacket(QuorumPacket pp) throws IOException {
        if (pp == null) {
            learner.bufferedOutput.flush();
        } else {
            queuedPackets.add(pp);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSender.java,LearnerSender,shutdown,void shutdown(),"[77, 81]","{'A675': [(77, 81)]}",{'A675': 1.0},A675,,"    public void shutdown() {
        LOG.info(""Shutting down LearnerSender"");
        queuedPackets.clear();
        queuedPackets.add(proposalOfDeath);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumStats.java,QuorumStats,getServerState,String getServerState(),"[41, 43]","{'A583': [(41, 41)], 'A591': [(42, 42)], 'A688': [(43, 43)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A688': 0.3333333333333333}",A583,,"    public String getServerState() {
        return provider.getServerState();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumStats.java,QuorumStats,getQuorumPeers,String[] getQuorumPeers(),"[45, 47]","{'A583': [(45, 45)], 'A591': [(46, 46)], 'A688': [(47, 47)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A688': 0.3333333333333333}",A583,,"    public String[] getQuorumPeers() {
        return provider.getQuorumPeers();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumStats.java,QuorumStats,toString,String toString(),"[49, 70]","{'A583': [(50, 53), (55, 55), (58, 59), (61, 62), (64, 64), (66, 66)], 'A688': [(54, 54), (56, 57), (60, 60), (63, 63), (65, 65), (67, 70)], 'A590': [(49, 49)]}","{'A583': 0.5, 'A688': 0.45454545454545453, 'A590': 0.045454545454545456}",A583,,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder(super.toString());
        String state = getServerState();
        if (state.equals(Provider.LEADING_STATE)) {
            sb.append(""Followers:"");
            for (String f : getQuorumPeers()) {
                sb.append("" "").append(f);
            }
            sb.append(""\n"");
        } else if (state.equals(Provider.FOLLOWING_STATE) || state.equals(Provider.OBSERVING_STATE)) {
            sb.append(""Leader: "");
            String[] ldr = getQuorumPeers();
            if (ldr.length > 0) {
                sb.append(ldr[0]);
            } else {
                sb.append(""not connected"");
            }
            sb.append(""\n"");
        }
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,removeSession,void removeSession(long),"[76, 82]","{'A648': [(76, 82)]}",{'A648': 1.0},A648,,"    public void removeSession(long sessionId) {
        if (localSessionTracker != null) {
            localSessionTracker.removeSession(sessionId);
        }
        globalSessionsWithTimeouts.remove(sessionId);
        touchTable.get().remove(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,start,void start(),"[84, 88]","{'A590': [(88, 88)], 'A648': [(84, 87)]}","{'A590': 0.2, 'A648': 0.8}",A648,,"    public void start() {
        if (localSessionTracker != null) {
            localSessionTracker.start();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,shutdown,void shutdown(),"[90, 94]","{'A590': [(90, 90), (94, 94)], 'A648': [(91, 93)]}","{'A590': 0.4, 'A648': 0.6}",A648,,"    public void shutdown() {
        if (localSessionTracker != null) {
            localSessionTracker.shutdown();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,isGlobalSession,boolean isGlobalSession(long),"[96, 98]","{'A590': [(98, 98)], 'A648': [(96, 97)]}","{'A590': 0.3333333333333333, 'A648': 0.6666666666666666}",A648,,"    public boolean isGlobalSession(long sessionId) {
        return globalSessionsWithTimeouts.containsKey(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,trackSession,"boolean trackSession(long,int)","[100, 103]","{'A612': [(100, 103)]}",{'A612': 1.0},A612,,"    public boolean trackSession(long sessionId, int sessionTimeout) {
        // Learner doesn't track global session, do nothing here
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,commitSession,"boolean commitSession(long,int)","[110, 137]","{'A583': [(110, 111), (116, 116)], 'A590': [(118, 118), (137, 137)], 'A648': [(114, 115), (117, 117), (133, 133), (136, 136)], 'A612': [(112, 113), (119, 132), (134, 135)]}","{'A583': 0.10714285714285714, 'A590': 0.07142857142857142, 'A648': 0.17857142857142858, 'A612': 0.6428571428571429}",A612,,"    public synchronized boolean commitSession(long sessionId, int sessionTimeout) {
        boolean added = globalSessionsWithTimeouts.put(sessionId, sessionTimeout) == null;

        if (added) {
            // Only do extra logging so we know what kind of session this is
            // if we're supporting both kinds of sessions
            LOG.info(""Committing global session 0x{}"", Long.toHexString(sessionId));
        }

        // If the session moved before the session upgrade finished, it's
        // possible that the session will be added to the local session
        // again. Need to double check and remove it from local session
        // tracker when the global session is quorum committed, otherwise the
        // local session might be tracked both locally and on leader.
        //
        // This cannot totally avoid the local session being upgraded again
        // because there is still race condition between create another upgrade
        // request and process the createSession commit, and there is no way
        // to know there is a on flying createSession request because it might
        // be upgraded by other server which owns the session before move.
        if (localSessionsEnabled) {
            removeLocalSession(sessionId);
            finishedUpgrading(sessionId);
        }

        touchTable.get().put(sessionId, sessionTimeout);
        return added;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,touchSession,"boolean touchSession(long,int)","[139, 150]","{'A648': [(139, 143), (145, 150)], 'A612': [(144, 144)]}","{'A648': 0.9166666666666666, 'A612': 0.08333333333333333}",A648,,"    public boolean touchSession(long sessionId, int sessionTimeout) {
        if (localSessionsEnabled) {
            if (localSessionTracker.touchSession(sessionId, sessionTimeout)) {
                return true;
            }
            if (!isGlobalSession(sessionId) && !isUpgradingSession(sessionId)) {
                return false;
            }
        }
        touchTable.get().put(sessionId, sessionTimeout);
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,snapshot,"Map<Long, Integer> snapshot()","[152, 154]","{'A590': [(154, 154)], 'A648': [(152, 152)], 'A605': [(153, 153)]}","{'A590': 0.3333333333333333, 'A648': 0.3333333333333333, 'A605': 0.3333333333333333}",A590,,"    public Map<Long, Integer> snapshot() {
        return touchTable.getAndSet(new ConcurrentHashMap<>());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,createSession,long createSession(int),"[156, 161]","{'A596': [(161, 161)], 'A648': [(156, 160)]}","{'A596': 0.16666666666666666, 'A648': 0.8333333333333334}",A648,,"    public long createSession(int sessionTimeout) {
        if (localSessionsEnabled) {
            return localSessionTracker.createSession(sessionTimeout);
        }
        return nextSessionId.getAndIncrement();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,checkSession,"void checkSession(long,Object)","[163, 178]","{'A583': [(163, 163)], 'A648': [(164, 178)]}","{'A583': 0.0625, 'A648': 0.9375}",A648,,"    public void checkSession(long sessionId, Object owner) throws SessionExpiredException, SessionMovedException {
        if (localSessionTracker != null) {
            try {
                localSessionTracker.checkSession(sessionId, owner);
                return;
            } catch (UnknownSessionException e) {
                // Check whether it's a global session. We can ignore those
                // because they are handled at the leader, but if not, rethrow.
                // We check local session status first to avoid race condition
                // with session upgrading.
                if (!isGlobalSession(sessionId)) {
                    throw new SessionExpiredException();
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,setOwner,"void setOwner(long,Object)","[180, 195]","{'A583': [(180, 180)], 'A590': [(195, 195)], 'A648': [(181, 194)]}","{'A583': 0.0625, 'A590': 0.0625, 'A648': 0.875}",A648,,"    public void setOwner(long sessionId, Object owner) throws SessionExpiredException {
        if (localSessionTracker != null) {
            try {
                localSessionTracker.setOwner(sessionId, owner);
                return;
            } catch (SessionExpiredException e) {
                // Check whether it's a global session. We can ignore those
                // because they are handled at the leader, but if not, rethrow.
                // We check local session status first to avoid race condition
                // with session upgrading.
                if (!isGlobalSession(sessionId)) {
                    throw e;
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,dumpSessions,void dumpSessions(PrintWriter),"[197, 213]","{'A596': [(197, 197), (213, 213)], 'A648': [(198, 204), (206, 212)], 'A605': [(205, 205)]}","{'A596': 0.11764705882352941, 'A648': 0.8235294117647058, 'A605': 0.058823529411764705}",A648,,"    public void dumpSessions(PrintWriter pwriter) {
        if (localSessionTracker != null) {
            pwriter.print(""Local "");
            localSessionTracker.dumpSessions(pwriter);
        }
        pwriter.print(""Global Sessions("");
        pwriter.print(globalSessionsWithTimeouts.size());
        pwriter.println(""):"");
        SortedSet<Long> sessionIds = new TreeSet<>(globalSessionsWithTimeouts.keySet());
        for (long sessionId : sessionIds) {
            pwriter.print(""0x"");
            pwriter.print(Long.toHexString(sessionId));
            pwriter.print(""\t"");
            pwriter.print(globalSessionsWithTimeouts.get(sessionId));
            pwriter.println(""ms"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,setSessionClosing,void setSessionClosing(long),"[215, 221]","{'A648': [(216, 220)], 'A639': [(215, 215), (221, 221)]}","{'A648': 0.7142857142857143, 'A639': 0.2857142857142857}",A648,,"    public void setSessionClosing(long sessionId) {
        // Global sessions handled on the leader; this call is a no-op if
        // not tracked as a local session so safe to call in both cases.
        if (localSessionTracker != null) {
            localSessionTracker.setSessionClosing(sessionId);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,getSessionExpiryMap,"Map<Long, Set<Long>> getSessionExpiryMap()","[223, 226]","{'A591': [(223, 224), (226, 226)], 'A605': [(225, 225)]}","{'A591': 0.75, 'A605': 0.25}",A591,,"    @Override
    public Map<Long, Set<Long>> getSessionExpiryMap() {
        return new HashMap<>();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSessionTracker.java,LearnerSessionTracker,globalSessions,Set<Long> globalSessions(),"[228, 230]","{'A604': [(228, 230)]}",{'A604': 1.0},A604,,"    public Set<Long> globalSessions() {
        return globalSessionsWithTimeouts.keySet();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket,accept,Socket accept(),"[130, 141]","{'A613': [(130, 139)], 'A627': [(140, 141)]}","{'A613': 0.8333333333333334, 'A627': 0.16666666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"    @Override
    public Socket accept() throws IOException {
        if (isClosed()) {
            throw new SocketException(""Socket is closed"");
        }
        if (!isBound()) {
            throw new SocketException(""Socket is not bound yet"");
        }
        final PrependableSocket prependableSocket = new PrependableSocket(null);
        implAccept(prependableSocket);
        return new UnifiedSocket(x509Util, allowInsecureConnection, prependableSocket);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isSecureSocket,boolean isSecureSocket(),"[206, 208]","{'A627': [(206, 208)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        public boolean isSecureSocket() {
            return mode == Mode.TLS;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isPlaintextSocket,boolean isPlaintextSocket(),"[214, 216]","{'A627': [(214, 216)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        public boolean isPlaintextSocket() {
            return mode == Mode.PLAINTEXT;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isModeKnown,boolean isModeKnown(),"[222, 224]","{'A627': [(222, 224)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        public boolean isModeKnown() {
            return mode != Mode.UNKNOWN;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,detectMode,void detectMode(),"[232, 280]","{'A583': [(243, 243), (251, 251), (266, 270)], 'A613': [(237, 237), (274, 274)], 'A627': [(232, 236), (238, 242), (244, 250), (252, 257), (259, 265), (271, 273), (275, 280)], 'A631': [(258, 258)]}","{'A583': 0.14285714285714285, 'A613': 0.04081632653061224, 'A627': 0.7959183673469388, 'A631': 0.02040816326530612}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        private void detectMode() throws IOException {
            byte[] litmus = new byte[5];
            int oldTimeout = -1;
            int bytesRead = 0;
            int newTimeout = x509Util.getSslHandshakeTimeoutMillis();
            try {
                oldTimeout = prependableSocket.getSoTimeout();
                prependableSocket.setSoTimeout(newTimeout);
                bytesRead = prependableSocket.getInputStream().read(litmus, 0, litmus.length);
            } catch (SocketTimeoutException e) {
                // Didn't read anything within the timeout, fallthrough and assume the connection is plaintext.
                LOG.warn(""Socket mode detection timed out after {} ms, assuming PLAINTEXT"", newTimeout);
            } finally {
                // restore socket timeout to the old value
                try {
                    if (oldTimeout != -1) {
                        prependableSocket.setSoTimeout(oldTimeout);
                    }
                } catch (Exception e) {
                    LOG.warn(""Failed to restore old socket timeout value of {} ms"", oldTimeout, e);
                }
            }
            if (bytesRead < 0) { // Got a EOF right away, definitely not using TLS. Fallthrough.
                bytesRead = 0;
            }

            if (bytesRead == litmus.length && SslHandler.isEncrypted(Unpooled.wrappedBuffer(litmus), false)) {
                try {
                    sslSocket = x509Util.createSSLSocket(prependableSocket, litmus);
                } catch (X509Exception e) {
                    throw new IOException(""failed to create SSL context"", e);
                }
                prependableSocket = null;
                mode = Mode.TLS;
                LOG.info(
                    ""Accepted TLS connection from {} - {} - {}"",
                    sslSocket.getRemoteSocketAddress(),
                    sslSocket.getSession().getProtocol(),
                    sslSocket.getSession().getCipherSuite());
            } else if (allowInsecureConnection) {
                prependableSocket.prependToInputStream(litmus, 0, bytesRead);
                mode = Mode.PLAINTEXT;
                LOG.info(""Accepted plaintext connection from {}"", prependableSocket.getRemoteSocketAddress());
            } else {
                prependableSocket.close();
                mode = Mode.PLAINTEXT;
                throw new IOException(""Blocked insecure connection attempt"");
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getSocketAllowUnknownMode,Socket getSocketAllowUnknownMode(),"[282, 288]","{'A627': [(282, 288)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        private Socket getSocketAllowUnknownMode() {
            if (isSecureSocket()) {
                return sslSocket;
            } else { // Note: mode is UNKNOWN or PLAINTEXT
                return prependableSocket;
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getSocket,Socket getSocket(),"[296, 305]","{'A627': [(296, 305)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        private Socket getSocket() throws IOException {
            if (!isModeKnown()) {
                detectMode();
            }
            if (mode == Mode.TLS) {
                return sslSocket;
            } else {
                return prependableSocket;
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getSslSocket,SSLSocket getSslSocket(),"[316, 324]","{'A613': [(322, 324)], 'A627': [(316, 321)]}","{'A613': 0.3333333333333333, 'A627': 0.6666666666666666}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        public SSLSocket getSslSocket() throws IOException {
            if (!isModeKnown()) {
                detectMode();
            }
            if (!isSecureSocket()) {
                throw new SocketException(""Socket mode is not TLS"");
            }
            return sslSocket;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,connect,void connect(SocketAddress),"[329, 332]","{'A627': [(329, 332)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void connect(SocketAddress endpoint) throws IOException {
            getSocketAllowUnknownMode().connect(endpoint);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,connect,"void connect(SocketAddress,int)","[337, 340]","{'A627': [(337, 340)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void connect(SocketAddress endpoint, int timeout) throws IOException {
            getSocketAllowUnknownMode().connect(endpoint, timeout);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,bind,void bind(SocketAddress),"[345, 348]","{'A627': [(345, 348)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void bind(SocketAddress bindpoint) throws IOException {
            getSocketAllowUnknownMode().bind(bindpoint);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getInetAddress,InetAddress getInetAddress(),"[353, 356]","{'A627': [(353, 356)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public InetAddress getInetAddress() {
            return getSocketAllowUnknownMode().getInetAddress();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getLocalAddress,InetAddress getLocalAddress(),"[361, 364]","{'A627': [(361, 364)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public InetAddress getLocalAddress() {
            return getSocketAllowUnknownMode().getLocalAddress();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getPort,int getPort(),"[369, 372]","{'A627': [(369, 372)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int getPort() {
            return getSocketAllowUnknownMode().getPort();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getLocalPort,int getLocalPort(),"[377, 380]","{'A627': [(377, 380)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int getLocalPort() {
            return getSocketAllowUnknownMode().getLocalPort();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getRemoteSocketAddress,SocketAddress getRemoteSocketAddress(),"[385, 388]","{'A627': [(385, 388)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public SocketAddress getRemoteSocketAddress() {
            return getSocketAllowUnknownMode().getRemoteSocketAddress();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getLocalSocketAddress,SocketAddress getLocalSocketAddress(),"[393, 396]","{'A627': [(393, 396)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public SocketAddress getLocalSocketAddress() {
            return getSocketAllowUnknownMode().getLocalSocketAddress();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getChannel,SocketChannel getChannel(),"[401, 404]","{'A627': [(401, 404)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public SocketChannel getChannel() {
            return getSocketAllowUnknownMode().getChannel();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getInputStream,InputStream getInputStream(),"[411, 414]","{'A627': [(411, 414)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public InputStream getInputStream() throws IOException {
            return new UnifiedInputStream(this);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getOutputStream,OutputStream getOutputStream(),"[421, 424]","{'A627': [(421, 424)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public OutputStream getOutputStream() throws IOException {
            return new UnifiedOutputStream(this);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setTcpNoDelay,void setTcpNoDelay(boolean),"[429, 432]","{'A627': [(429, 432)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setTcpNoDelay(boolean on) throws SocketException {
            getSocketAllowUnknownMode().setTcpNoDelay(on);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getTcpNoDelay,boolean getTcpNoDelay(),"[437, 440]","{'A627': [(437, 440)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean getTcpNoDelay() throws SocketException {
            return getSocketAllowUnknownMode().getTcpNoDelay();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setSoLinger,"void setSoLinger(boolean,int)","[445, 448]","{'A627': [(445, 448)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setSoLinger(boolean on, int linger) throws SocketException {
            getSocketAllowUnknownMode().setSoLinger(on, linger);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getSoLinger,int getSoLinger(),"[453, 456]","{'A627': [(453, 456)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int getSoLinger() throws SocketException {
            return getSocketAllowUnknownMode().getSoLinger();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,sendUrgentData,void sendUrgentData(int),"[462, 465]","{'A627': [(462, 465)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void sendUrgentData(int data) throws IOException {
            getSocket().sendUrgentData(data);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setOOBInline,void setOOBInline(boolean),"[470, 473]","{'A627': [(470, 473)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setOOBInline(boolean on) throws SocketException {
            getSocketAllowUnknownMode().setOOBInline(on);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getOOBInline,boolean getOOBInline(),"[478, 481]","{'A627': [(478, 481)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean getOOBInline() throws SocketException {
            return getSocketAllowUnknownMode().getOOBInline();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setSoTimeout,void setSoTimeout(int),"[486, 489]","{'A627': [(486, 489)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized void setSoTimeout(int timeout) throws SocketException {
            getSocketAllowUnknownMode().setSoTimeout(timeout);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getSoTimeout,int getSoTimeout(),"[494, 497]","{'A627': [(494, 497)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized int getSoTimeout() throws SocketException {
            return getSocketAllowUnknownMode().getSoTimeout();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setSendBufferSize,void setSendBufferSize(int),"[502, 505]","{'A627': [(502, 505)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized void setSendBufferSize(int size) throws SocketException {
            getSocketAllowUnknownMode().setSendBufferSize(size);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getSendBufferSize,int getSendBufferSize(),"[510, 513]","{'A627': [(510, 513)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized int getSendBufferSize() throws SocketException {
            return getSocketAllowUnknownMode().getSendBufferSize();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setReceiveBufferSize,void setReceiveBufferSize(int),"[518, 521]","{'A627': [(518, 521)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized void setReceiveBufferSize(int size) throws SocketException {
            getSocketAllowUnknownMode().setReceiveBufferSize(size);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getReceiveBufferSize,int getReceiveBufferSize(),"[526, 529]","{'A627': [(526, 529)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized int getReceiveBufferSize() throws SocketException {
            return getSocketAllowUnknownMode().getReceiveBufferSize();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setKeepAlive,void setKeepAlive(boolean),"[534, 537]","{'A627': [(534, 537)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setKeepAlive(boolean on) throws SocketException {
            getSocketAllowUnknownMode().setKeepAlive(on);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getKeepAlive,boolean getKeepAlive(),"[542, 545]","{'A627': [(542, 545)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean getKeepAlive() throws SocketException {
            return getSocketAllowUnknownMode().getKeepAlive();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setTrafficClass,void setTrafficClass(int),"[550, 553]","{'A627': [(550, 553)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setTrafficClass(int tc) throws SocketException {
            getSocketAllowUnknownMode().setTrafficClass(tc);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getTrafficClass,int getTrafficClass(),"[558, 561]","{'A627': [(558, 561)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int getTrafficClass() throws SocketException {
            return getSocketAllowUnknownMode().getTrafficClass();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setReuseAddress,void setReuseAddress(boolean),"[566, 569]","{'A627': [(566, 569)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setReuseAddress(boolean on) throws SocketException {
            getSocketAllowUnknownMode().setReuseAddress(on);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,getReuseAddress,boolean getReuseAddress(),"[574, 577]","{'A627': [(574, 577)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean getReuseAddress() throws SocketException {
            return getSocketAllowUnknownMode().getReuseAddress();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,close,void close(),"[582, 585]","{'A627': [(582, 585)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized void close() throws IOException {
            getSocketAllowUnknownMode().close();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,shutdownInput,void shutdownInput(),"[590, 593]","{'A627': [(590, 593)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void shutdownInput() throws IOException {
            getSocketAllowUnknownMode().shutdownInput();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,shutdownOutput,void shutdownOutput(),"[598, 601]","{'A627': [(598, 601)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void shutdownOutput() throws IOException {
            getSocketAllowUnknownMode().shutdownOutput();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,toString,String toString(),"[606, 609]","{'A627': [(606, 609)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public String toString() {
            return ""UnifiedSocket[mode="" + mode.toString() + ""socket="" + getSocketAllowUnknownMode().toString() + ""]"";
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isConnected,boolean isConnected(),"[614, 617]","{'A627': [(614, 617)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean isConnected() {
            return getSocketAllowUnknownMode().isConnected();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isBound,boolean isBound(),"[622, 625]","{'A627': [(622, 625)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean isBound() {
            return getSocketAllowUnknownMode().isBound();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isClosed,boolean isClosed(),"[630, 633]","{'A627': [(630, 633)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean isClosed() {
            return getSocketAllowUnknownMode().isClosed();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isInputShutdown,boolean isInputShutdown(),"[638, 641]","{'A627': [(638, 641)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean isInputShutdown() {
            return getSocketAllowUnknownMode().isInputShutdown();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,isOutputShutdown,boolean isOutputShutdown(),"[646, 649]","{'A627': [(646, 649)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean isOutputShutdown() {
            return getSocketAllowUnknownMode().isOutputShutdown();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedSocket,setPerformancePreferences,"void setPerformancePreferences(int,int,int)","[655, 658]","{'A627': [(655, 658)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void setPerformancePreferences(int connectionTime, int latency, int bandwidth) {
            getSocketAllowUnknownMode().setPerformancePreferences(connectionTime, latency, bandwidth);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,read,int read(),"[676, 679]","{'A627': [(676, 679)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int read() throws IOException {
            return getRealInputStream().read();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,read,int read(byte[]),"[686, 689]","{'A627': [(686, 689)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int read(byte[] b) throws IOException {
            return getRealInputStream().read(b);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,read,"int read(byte[],int,int)","[691, 694]","{'A627': [(691, 694)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int read(byte[] b, int off, int len) throws IOException {
            return getRealInputStream().read(b, off, len);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,getRealInputStream,InputStream getRealInputStream(),"[696, 702]","{'A627': [(696, 702)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        private InputStream getRealInputStream() throws IOException {
            if (realInputStream == null) {
                // Note: The first call to getSocket() triggers mode detection which can block
                realInputStream = unifiedSocket.getSocket().getInputStream();
            }
            return realInputStream;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,skip,long skip(long),"[704, 707]","{'A627': [(704, 707)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public long skip(long n) throws IOException {
            return getRealInputStream().skip(n);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,available,int available(),"[709, 712]","{'A627': [(709, 712)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public int available() throws IOException {
            return getRealInputStream().available();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,close,void close(),"[714, 717]","{'A627': [(714, 717)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void close() throws IOException {
            getRealInputStream().close();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,mark,void mark(int),"[719, 726]","{'A627': [(719, 726)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized void mark(int readlimit) {
            try {
                getRealInputStream().mark(readlimit);
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,reset,void reset(),"[728, 731]","{'A627': [(728, 731)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public synchronized void reset() throws IOException {
            getRealInputStream().reset();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedInputStream,markSupported,boolean markSupported(),"[733, 740]","{'A627': [(733, 740)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public boolean markSupported() {
            try {
                return getRealInputStream().markSupported();
            } catch (IOException e) {
                throw new RuntimeException(e);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedOutputStream,write,void write(int),"[754, 757]","{'A627': [(754, 757)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void write(int b) throws IOException {
            getRealOutputStream().write(b);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedOutputStream,write,void write(byte[]),"[759, 762]","{'A627': [(759, 762)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void write(byte[] b) throws IOException {
            getRealOutputStream().write(b);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedOutputStream,write,"void write(byte[],int,int)","[764, 767]","{'A627': [(764, 767)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void write(byte[] b, int off, int len) throws IOException {
            getRealOutputStream().write(b, off, len);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedOutputStream,flush,void flush(),"[769, 772]","{'A627': [(769, 772)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void flush() throws IOException {
            getRealOutputStream().flush();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedOutputStream,close,void close(),"[774, 777]","{'A627': [(774, 777)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        @Override
        public void close() throws IOException {
            getRealOutputStream().close();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UnifiedServerSocket.java,UnifiedServerSocket.UnifiedOutputStream,getRealOutputStream,OutputStream getRealOutputStream(),"[779, 785]","{'A627': [(779, 785)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/UnifiedServerSocketTest.java,"        private OutputStream getRealOutputStream() throws IOException {
            if (realOutputStream == null) {
                // Note: The first call to getSocket() triggers mode detection which can block
                realOutputStream = unifiedSocket.getSocket().getOutputStream();
            }
            return realOutputStream;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,newConcurrentHashSet,Set<InetSocketAddress> newConcurrentHashSet(),"[45, 47]","{'A653': [(45, 47)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    private static Set<InetSocketAddress> newConcurrentHashSet() {
        return Collections.newSetFromMap(new ConcurrentHashMap<>());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,isEmpty,boolean isEmpty(),"[70, 72]","{'A653': [(70, 72)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public boolean isEmpty() {
        return addresses.isEmpty();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getAllAddresses,Set<InetSocketAddress> getAllAddresses(),"[79, 81]","{'A653': [(79, 81)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public Set<InetSocketAddress> getAllAddresses() {
        return Collections.unmodifiableSet(addresses);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getWildcardAddresses,Set<InetSocketAddress> getWildcardAddresses(),"[88, 90]","{'A653': [(88, 90)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public Set<InetSocketAddress> getWildcardAddresses() {
        return addresses.stream().map(a -> new InetSocketAddress(a.getPort())).collect(Collectors.toSet());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getAllPorts,List<Integer> getAllPorts(),"[97, 99]","{'A653': [(97, 99)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public List<Integer> getAllPorts() {
        return addresses.stream().map(InetSocketAddress::getPort).distinct().collect(Collectors.toList());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getAllHostStrings,List<String> getAllHostStrings(),"[106, 108]","{'A653': [(106, 108)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public List<String> getAllHostStrings() {
        return addresses.stream().map(InetSocketAddress::getHostString).distinct().collect(Collectors.toList());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,addAddress,void addAddress(InetSocketAddress),"[110, 112]","{'A653': [(110, 112)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public void addAddress(InetSocketAddress address) {
        addresses.add(address);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getReachableAddress,InetSocketAddress getReachableAddress(),"[122, 128]","{'A653': [(122, 128)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public InetSocketAddress getReachableAddress() throws NoRouteToHostException {
        // using parallelStream() + findAny() will help to minimize the time spent on network operations
        return addresses.parallelStream()
          .filter(this::checkIfAddressIsReachable)
          .findAny()
          .orElseThrow(() -> new NoRouteToHostException(""No valid address among "" + addresses));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getAllReachableAddresses,Set<InetSocketAddress> getAllReachableAddresses(),"[135, 140]","{'A653': [(135, 140)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public Set<InetSocketAddress> getAllReachableAddresses() {
        // using parallelStream() will help to minimize the time spent on network operations
        return addresses.parallelStream()
          .filter(this::checkIfAddressIsReachable)
          .collect(Collectors.toSet());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getAllReachableAddressesOrAll,Set<InetSocketAddress> getAllReachableAddressesOrAll(),"[147, 158]","{'A653': [(147, 158)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public Set<InetSocketAddress> getAllReachableAddressesOrAll() {
        // if there is only a single address provided then we don't need to do any reachability check
        if (addresses.size() == 1) {
            return getAllAddresses();
        }

        Set<InetSocketAddress> allReachable = getAllReachableAddresses();
        if (allReachable.isEmpty()) {
            return getAllAddresses();
        }
        return allReachable;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getReachableOrOne,InetSocketAddress getReachableOrOne(),"[169, 183]","{'A653': [(169, 183)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public InetSocketAddress getReachableOrOne() {
        InetSocketAddress address;

        // if there is only a single address provided then we don't do any reachability check
        if (addresses.size() == 1) {
            return getOne();
        }

        try {
            address = getReachableAddress();
        } catch (NoRouteToHostException e) {
            address = getOne();
        }
        return address;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,recreateSocketAddresses,void recreateSocketAddresses(),"[190, 194]","{'A653': [(190, 194)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public void recreateSocketAddresses() {
        addresses = addresses.parallelStream()
          .map(this::recreateSocketAddress)
          .collect(Collectors.toCollection(MultipleAddresses::newConcurrentHashSet));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,getOne,InetSocketAddress getOne(),"[202, 204]","{'A653': [(202, 204)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public InetSocketAddress getOne() {
        return addresses.iterator().next();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,size,int size(),"[212, 214]","{'A653': [(212, 214)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    public int size() {
        return addresses.size();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,checkIfAddressIsReachable,boolean checkIfAddressIsReachable(InetSocketAddress),"[216, 228]","{'A653': [(216, 228)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    private boolean checkIfAddressIsReachable(InetSocketAddress address) {
        if (address.isUnresolved()) {
            return false;
        }
        try {
            if (address.getAddress().isReachable((int) timeout.toMillis())) {
                return true;
            }
        } catch (IOException ignored) {
            // ignore, we don't really care if we can't reach it for timeout or for IO problems
        }
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,recreateSocketAddress,InetSocketAddress recreateSocketAddress(InetSocketAddress),"[230, 236]","{'A653': [(230, 236)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    private InetSocketAddress recreateSocketAddress(InetSocketAddress address) {
        try {
            return new InetSocketAddress(InetAddress.getByName(address.getHostString()), address.getPort());
        } catch (UnknownHostException e) {
            return address;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,equals,boolean equals(Object),"[238, 248]","{'A653': [(238, 248)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    @Override
    public boolean equals(Object o) {
        if (this == o) {
            return true;
        } else if (o == null || getClass() != o.getClass()) {
            return false;
        }

        MultipleAddresses that = (MultipleAddresses) o;
        return Objects.equals(addresses, that.addresses);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,hashCode,int hashCode(),"[250, 253]","{'A653': [(250, 253)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    @Override
    public int hashCode() {
        return Objects.hash(addresses);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/MultipleAddresses.java,MultipleAddresses,toString,String toString(),"[255, 258]","{'A653': [(255, 258)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/MultipleAddressesTest.java,"    @Override
    public String toString() {
        return addresses.stream().map(InetSocketAddress::toString).collect(Collectors.joining(""|""));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,removeSession,void removeSession(long),"[59, 64]","{'A648': [(59, 64)]}",{'A648': 1.0},A648,,"    public void removeSession(long sessionId) {
        if (localSessionTracker != null) {
            localSessionTracker.removeSession(sessionId);
        }
        globalSessionTracker.removeSession(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,start,void start(),"[66, 71]","{'A648': [(66, 71)]}",{'A648': 1.0},A648,,"    public void start() {
        globalSessionTracker.start();
        if (localSessionTracker != null) {
            localSessionTracker.start();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,shutdown,void shutdown(),"[73, 78]","{'A648': [(73, 78)]}",{'A648': 1.0},A648,,"    public void shutdown() {
        if (localSessionTracker != null) {
            localSessionTracker.shutdown();
        }
        globalSessionTracker.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,isGlobalSession,boolean isGlobalSession(long),"[80, 82]","{'A648': [(80, 82)]}",{'A648': 1.0},A648,,"    public boolean isGlobalSession(long sessionId) {
        return globalSessionTracker.isTrackingSession(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,trackSession,"boolean trackSession(long,int)","[84, 92]","{'A583': [(85, 85), (89, 89)], 'A648': [(87, 88), (90, 90), (92, 92)], 'A612': [(84, 84), (86, 86), (91, 91)]}","{'A583': 0.2222222222222222, 'A648': 0.4444444444444444, 'A612': 0.3333333333333333}",A648,,"    public boolean trackSession(long sessionId, int sessionTimeout) {
        boolean tracked = globalSessionTracker.trackSession(sessionId, sessionTimeout);
        if (localSessionsEnabled && tracked) {
            // Only do extra logging so we know what kind of session this is
            // if we're supporting both kinds of sessions
            LOG.info(""Tracking global session 0x{}"", Long.toHexString(sessionId));
        }
        return tracked;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,commitSession,"boolean commitSession(long,int)","[99, 124]","{'A583': [(100, 101), (104, 104)], 'A648': [(105, 105), (123, 124)], 'A612': [(99, 99), (102, 103), (106, 122)]}","{'A583': 0.11538461538461539, 'A648': 0.11538461538461539, 'A612': 0.7692307692307693}",A612,,"    public synchronized boolean commitSession(
        long sessionId, int sessionTimeout) {
        boolean added = globalSessionTracker.commitSession(sessionId, sessionTimeout);

        if (added) {
            LOG.info(""Committing global session 0x{}"", Long.toHexString(sessionId));
        }

        // If the session moved before the session upgrade finished, it's
        // possible that the session will be added to the local session
        // again. Need to double check and remove it from local session
        // tracker when the global session is quorum committed, otherwise the
        // local session might be tracked both locally and on leader.
        //
        // This cannot totally avoid the local session being upgraded again
        // because there is still race condition between create another upgrade
        // request and process the createSession commit, and there is no way
        // to know there is a on flying createSession request because it might
        // be upgraded by other server which owns the session before move.
        if (localSessionsEnabled) {
            removeLocalSession(sessionId);
            finishedUpgrading(sessionId);
        }

        return added;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,touchSession,"boolean touchSession(long,int)","[126, 131]","{'A583': [(127, 127)], 'A648': [(126, 126), (128, 131)]}","{'A583': 0.16666666666666666, 'A648': 0.8333333333333334}",A648,,"    public boolean touchSession(long sessionId, int sessionTimeout) {
        if (localSessionTracker != null && localSessionTracker.touchSession(sessionId, sessionTimeout)) {
            return true;
        }
        return globalSessionTracker.touchSession(sessionId, sessionTimeout);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,createSession,long createSession(int),"[133, 138]","{'A648': [(133, 138)]}",{'A648': 1.0},A648,,"    public long createSession(int sessionTimeout) {
        if (localSessionsEnabled) {
            return localSessionTracker.createSession(sessionTimeout);
        }
        return globalSessionTracker.createSession(sessionTimeout);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,getServerIdFromSessionId,long getServerIdFromSessionId(long),"[141, 143]","{'A648': [(141, 143)]}",{'A648': 1.0},A648,,"    public static long getServerIdFromSessionId(long sessionId) {
        return sessionId >> 56;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,checkSession,"void checkSession(long,Object)","[145, 173]","{'A583': [(145, 145), (154, 154), (170, 170)], 'A648': [(146, 153), (155, 169), (171, 173)]}","{'A583': 0.10344827586206896, 'A648': 0.896551724137931}",A648,,"    public void checkSession(long sessionId, Object owner) throws SessionExpiredException, SessionMovedException, UnknownSessionException {
        if (localSessionTracker != null) {
            try {
                localSessionTracker.checkSession(sessionId, owner);
                // A session can both be a local and global session during
                // upgrade
                if (!isGlobalSession(sessionId)) {
                    return;
                }
            } catch (UnknownSessionException e) {
                // Ignore. We'll check instead whether it's a global session
            }
        }
        try {
            globalSessionTracker.checkSession(sessionId, owner);
            // if we can get here, it is a valid global session
            return;
        } catch (UnknownSessionException e) {
            // Ignore. This may be local session from other servers.
        }

        /*
         * if local session is not enabled or it used to be our local session
         * throw sessions expires
         */
        if (!localSessionsEnabled || (getServerIdFromSessionId(sessionId) == serverId)) {
            throw new SessionExpiredException();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,checkGlobalSession,"void checkGlobalSession(long,Object)","[175, 182]","{'A583': [(175, 175)], 'A648': [(176, 182)]}","{'A583': 0.125, 'A648': 0.875}",A648,,"    public void checkGlobalSession(long sessionId, Object owner) throws SessionExpiredException, SessionMovedException {
        try {
            globalSessionTracker.checkSession(sessionId, owner);
        } catch (UnknownSessionException e) {
            // For global session, if we don't know it, it is already expired
            throw new SessionExpiredException();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,setOwner,"void setOwner(long,Object)","[184, 194]","{'A583': [(184, 184), (189, 189)], 'A648': [(185, 188), (190, 194)]}","{'A583': 0.18181818181818182, 'A648': 0.8181818181818182}",A648,,"    public void setOwner(long sessionId, Object owner) throws SessionExpiredException {
        if (localSessionTracker != null) {
            try {
                localSessionTracker.setOwner(sessionId, owner);
                return;
            } catch (SessionExpiredException e) {
                // Ignore. We'll check instead whether it's a global session
            }
        }
        globalSessionTracker.setOwner(sessionId, owner);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,dumpSessions,void dumpSessions(PrintWriter),"[196, 203]","{'A583': [(197, 202)], 'A648': [(196, 196), (203, 203)]}","{'A583': 0.75, 'A648': 0.25}",A583,,"    public void dumpSessions(PrintWriter pwriter) {
        if (localSessionTracker != null) {
            pwriter.print(""Local "");
            localSessionTracker.dumpSessions(pwriter);
            pwriter.print(""Global "");
        }
        globalSessionTracker.dumpSessions(pwriter);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,setSessionClosing,void setSessionClosing(long),"[205, 211]","{'A648': [(205, 211)]}",{'A648': 1.0},A648,,"    public void setSessionClosing(long sessionId) {
        // call is no-op if session isn't tracked so safe to call both
        if (localSessionTracker != null) {
            localSessionTracker.setSessionClosing(sessionId);
        }
        globalSessionTracker.setSessionClosing(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,getSessionExpiryMap,"Map<Long, Set<Long>> getSessionExpiryMap()","[213, 224]","{'A591': [(213, 224)]}",{'A591': 1.0},A591,,"    public Map<Long, Set<Long>> getSessionExpiryMap() {
        Map<Long, Set<Long>> sessionExpiryMap;
        // combine local and global sessions, getting local first so upgrades
        // to global are caught
        if (localSessionTracker != null) {
            sessionExpiryMap = localSessionTracker.getSessionExpiryMap();
        } else {
            sessionExpiryMap = new TreeMap<Long, Set<Long>>();
        }
        sessionExpiryMap.putAll(globalSessionTracker.getSessionExpiryMap());
        return sessionExpiryMap;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LeaderSessionTracker.java,LeaderSessionTracker,globalSessions,Set<Long> globalSessions(),"[226, 228]","{'A604': [(226, 228)]}",{'A604': 1.0},A604,,"    public Set<Long> globalSessions() {
        return globalSessionTracker.globalSessions();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java,LearnerMaster,getMaxConcurrentSnapSyncs,int getMaxConcurrentSnapSyncs(),"[60, 62]","{'A675': [(60, 62)]}",{'A675': 1.0},A675,,"    public int getMaxConcurrentSnapSyncs() {
        return maxConcurrentSnapSyncs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java,LearnerMaster,setMaxConcurrentSnapSyncs,void setMaxConcurrentSnapSyncs(int),"[64, 68]","{'A675': [(64, 68)]}",{'A675': 1.0},A675,,"    public void setMaxConcurrentSnapSyncs(int maxConcurrentSnapSyncs) {
        LOG.info(""Set maxConcurrentSnapSyncs to {}"", maxConcurrentSnapSyncs);
        this.maxConcurrentSnapSyncs = maxConcurrentSnapSyncs;
        learnerSnapSyncThrottler.setMaxConcurrentSyncs(maxConcurrentSnapSyncs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java,LearnerMaster,getMaxConcurrentDiffSyncs,int getMaxConcurrentDiffSyncs(),"[70, 72]","{'A675': [(70, 72)]}",{'A675': 1.0},A675,,"    public int getMaxConcurrentDiffSyncs() {
        return maxConcurrentDiffSyncs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java,LearnerMaster,setMaxConcurrentDiffSyncs,void setMaxConcurrentDiffSyncs(int),"[74, 78]","{'A675': [(74, 78)]}",{'A675': 1.0},A675,,"    public void setMaxConcurrentDiffSyncs(int maxConcurrentDiffSyncs) {
        LOG.info(""Set maxConcurrentDiffSyncs to {}"", maxConcurrentDiffSyncs);
        this.maxConcurrentDiffSyncs = maxConcurrentDiffSyncs;
        learnerDiffSyncThrottler.setMaxConcurrentSyncs(maxConcurrentDiffSyncs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java,LearnerMaster,getLearnerSnapSyncThrottler,LearnerSyncThrottler getLearnerSnapSyncThrottler(),"[84, 86]","{'A675': [(84, 86)]}",{'A675': 1.0},A675,,"    public LearnerSyncThrottler getLearnerSnapSyncThrottler() {
        return learnerSnapSyncThrottler;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerMaster.java,LearnerMaster,getLearnerDiffSyncThrottler,LearnerSyncThrottler getLearnerDiffSyncThrottler(),"[92, 94]","{'A675': [(92, 94)]}",{'A675': 1.0},A675,,"    public LearnerSyncThrottler getLearnerDiffSyncThrottler() {
        return learnerDiffSyncThrottler;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/StateSummary.java,StateSummary,getCurrentEpoch,long getCurrentEpoch(),"[34, 36]","{'A583': [(34, 36)]}",{'A583': 1.0},A583,,"    public long getCurrentEpoch() {
        return currentEpoch;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/StateSummary.java,StateSummary,getLastZxid,long getLastZxid(),"[38, 40]","{'A583': [(38, 40)]}",{'A583': 1.0},A583,,"    public long getLastZxid() {
        return lastZxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/StateSummary.java,StateSummary,isMoreRecentThan,boolean isMoreRecentThan(StateSummary),"[42, 44]","{'A583': [(42, 44)]}",{'A583': 1.0},A583,,"    public boolean isMoreRecentThan(StateSummary ss) {
        return (currentEpoch > ss.currentEpoch) || (currentEpoch == ss.currentEpoch && lastZxid > ss.lastZxid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/StateSummary.java,StateSummary,equals,boolean equals(Object),"[45, 52]","{'A583': [(45, 52)]}",{'A583': 1.0},A583,,"    @Override
    public boolean equals(Object obj) {
        if (!(obj instanceof StateSummary)) {
            return false;
        }
        StateSummary ss = (StateSummary) obj;
        return currentEpoch == ss.currentEpoch && lastZxid == ss.lastZxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/StateSummary.java,StateSummary,hashCode,int hashCode(),"[54, 57]","{'A583': [(54, 57)]}",{'A583': 1.0},A583,,"    @Override
    public int hashCode() {
        return (int) (currentEpoch ^ lastZxid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,getVersion,int getVersion(),"[80, 82]","{'A593': [(80, 82)]}",{'A593': 1.0},A593,,"    public int getVersion() {
        return version;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,getId,long getId(),"[84, 86]","{'A590': [(84, 86)]}",{'A590': 1.0},A590,,"    public long getId() {
        return id;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,getZxid,long getZxid(),"[88, 90]","{'A590': [(88, 90)]}",{'A590': 1.0},A590,,"    public long getZxid() {
        return zxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,getElectionEpoch,long getElectionEpoch(),"[92, 94]","{'A590': [(92, 94)]}",{'A590': 1.0},A590,,"    public long getElectionEpoch() {
        return electionEpoch;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,getPeerEpoch,long getPeerEpoch(),"[96, 98]","{'A590': [(96, 98)]}",{'A590': 1.0},A590,,"    public long getPeerEpoch() {
        return peerEpoch;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,getState,ServerState getState(),"[100, 102]","{'A590': [(100, 102)]}",{'A590': 1.0},A590,,"    public ServerState getState() {
        return state;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,equals,boolean equals(Object),"[106, 152]","{'A583': [(113, 117), (122, 129), (134, 135), (140, 140), (143, 143), (149, 149)], 'A688': [(106, 111), (152, 152)], 'A612': [(112, 112), (118, 121), (130, 133), (136, 139), (141, 142), (144, 148), (150, 151)]}","{'A583': 0.3829787234042553, 'A688': 0.14893617021276595, 'A612': 0.46808510638297873}",A612,,"    @Override
    public boolean equals(Object o) {
        if (!(o instanceof Vote)) {
            return false;
        }
        Vote other = (Vote) o;

        if ((state == ServerState.LOOKING) || (other.state == ServerState.LOOKING)) {
            return id == other.id
                   && zxid == other.zxid
                   && electionEpoch == other.electionEpoch
                   && peerEpoch == other.peerEpoch;
        } else {
            /*
             * There are two things going on in the logic below:
             *
             * 1. skip comparing the zxid and electionEpoch for votes for servers
             *    out of election.
             *
             *    Need to skip those because they can be inconsistent due to
             *    scenarios described in QuorumPeer.updateElectionVote.
             *
             *    And given that only one ensemble can be running at a single point
             *    in time and that each epoch is used only once, using only id and
             *    epoch to compare the votes is sufficient.
             *
             *    {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1805}
             *
             * 2. skip comparing peerEpoch if if we're running with mixed ensemble
             *    with (version > 0x0) and without the change (version = 0x0)
             *    introduced in ZOOKEEPER-1732.
             *
             *    {@see https://issues.apache.org/jira/browse/ZOOKEEPER-1732}
             *
             *    The server running with and without ZOOKEEPER-1732 will return
             *    different peerEpoch. During rolling upgrades, it's possible
             *    that 2/5 servers are returning epoch 1, while the other 2/5
             *    are returning epoch 2, the other server need to ignore the
             *    peerEpoch to be able to join it.
             */
            if ((version > 0x0) ^ (other.version > 0x0)) {
                return id == other.id;
            } else {
                return (id == other.id && peerEpoch == other.peerEpoch);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,hashCode,int hashCode(),"[154, 157]","{'A688': [(154, 157)]}",{'A688': 1.0},A688,,"    @Override
    public int hashCode() {
        return (int) (id & zxid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Vote.java,Vote,toString,String toString(),"[159, 161]","{'A590': [(160, 160)], 'A596': [(159, 159), (161, 161)]}","{'A590': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public String toString() {
        return ""("" + id + "", "" + Long.toHexString(zxid) + "", "" + Long.toHexString(peerEpoch) + "")"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java,ProposalRequestProcessor,initialize,void initialize(),"[64, 66]","{'A590': [(65, 66)], 'A596': [(64, 64)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,,"    public void initialize() {
        syncProcessor.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java,ProposalRequestProcessor,processRequest,void processRequest(Request),"[68, 92]","{'A583': [(76, 77)], 'A591': [(68, 69), (72, 73), (82, 82), (84, 88)], 'A590': [(92, 92)], 'A612': [(79, 81)], 'A688': [(83, 83), (89, 91)], 'A596': [(70, 71), (74, 75)], 'A597': [(78, 78)]}","{'A583': 0.08, 'A591': 0.4, 'A590': 0.04, 'A612': 0.12, 'A688': 0.16, 'A596': 0.16, 'A597': 0.04}",A591,,"    public void processRequest(Request request) throws RequestProcessorException {
        /* In the following IF-THEN-ELSE block, we process syncs on the leader.
         * If the sync is coming from a follower, then the follower
         * handler adds it to syncHandler. Otherwise, if it is a client of
         * the leader that issued the sync command, then syncHandler won't
         * contain the handler. In this case, we add it to syncHandler, and
         * call processRequest on the next processor.
         */
        if (request instanceof LearnerSyncRequest) {
            zks.getLeader().processSync((LearnerSyncRequest) request);
        } else {
            if (shouldForwardToNextProcessor(request)) {
                nextProcessor.processRequest(request);
            }
            if (request.getHdr() != null) {
                // We need to sync and get consensus on any transactions
                try {
                    zks.getLeader().propose(request);
                } catch (XidRolloverException e) {
                    throw new RequestProcessorException(e.getMessage(), e);
                }
                syncProcessor.processRequest(request);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java,ProposalRequestProcessor,shutdown,void shutdown(),"[94, 98]","{'A591': [(95, 95)], 'A590': [(94, 94), (96, 98)]}","{'A591': 0.2, 'A590': 0.8}",A590,,"    public void shutdown() {
        LOG.info(""Shutting down"");
        nextProcessor.shutdown();
        syncProcessor.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ProposalRequestProcessor.java,ProposalRequestProcessor,shouldForwardToNextProcessor,boolean shouldForwardToNextProcessor(Request),"[100, 109]","{'A612': [(100, 109)]}",{'A612': 1.0},A612,,"    private boolean shouldForwardToNextProcessor(Request request) {
        if (!forwardLearnerRequestsToCommitProcessorDisabled) {
            return true;
        }
        if (request.getOwner() instanceof LearnerHandler) {
            ServerMetrics.getMetrics().REQUESTS_NOT_FORWARDED_TO_COMMIT_PROCESSOR.add(1);
            return false;
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getSocket,Socket getSocket(),"[81, 83]","{'A596': [(81, 83)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public Socket getSocket() {
        return sock;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getSid,long getSid(),"[100, 102]","{'A583': [(100, 100)], 'A591': [(102, 102)], 'A596': [(101, 101)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    long getSid() {
        return sid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getRemoteAddress,String getRemoteAddress(),"[104, 106]","{'A647': [(104, 106)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    String getRemoteAddress() {
        return sock == null ? ""<null>"" : sock.getRemoteSocketAddress().toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getVersion,int getVersion(),"[110, 112]","{'A583': [(111, 111)], 'A590': [(110, 110), (112, 112)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    int getVersion() {
        return version;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getLastZxid,long getLastZxid(),"[127, 129]","{'A647': [(127, 129)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public synchronized long getLastZxid() {
        return lastZxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getEstablished,Date getEstablished(),"[133, 135]","{'A583': [(134, 134)], 'A647': [(133, 133), (135, 135)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public Date getEstablished() {
        return (Date) established.clone();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler.SyncLimitCheck,start,void start(),"[161, 163]","{'A597': [(161, 163)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"        public synchronized void start() {
            started = true;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler.SyncLimitCheck,updateProposal,"void updateProposal(long,long)","[165, 176]","{'A597': [(165, 176)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"        public synchronized void updateProposal(long zxid, long time) {
            if (!started) {
                return;
            }
            if (currentTime == 0) {
                currentTime = time;
                currentZxid = zxid;
            } else {
                nextTime = time;
                nextZxid = zxid;
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler.SyncLimitCheck,updateAck,void updateAck(long),"[178, 192]","{'A583': [(179, 191)], 'A597': [(178, 178), (192, 192)]}","{'A583': 0.8666666666666667, 'A597': 0.13333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"        public synchronized void updateAck(long zxid) {
            if (currentZxid == zxid) {
                currentTime = nextTime;
                currentZxid = nextZxid;
                nextTime = 0;
                nextZxid = 0;
            } else if (nextZxid == zxid) {
                LOG.warn(
                    ""ACK for 0x{} received before ACK for 0x{}"",
                    Long.toHexString(zxid),
                    Long.toHexString(currentZxid));
                nextTime = 0;
                nextZxid = 0;
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler.SyncLimitCheck,check,boolean check(long),"[194, 201]","{'A647': [(199, 199)], 'A597': [(194, 198), (200, 201)]}","{'A647': 0.125, 'A597': 0.875}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"        public synchronized boolean check(long time) {
            if (currentTime == 0) {
                return true;
            } else {
                long msDelay = (time - currentTime) / 1000000;
                return (msDelay < learnerMaster.syncTimeout());
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler.MarkerQuorumPacket,hashCode,int hashCode(),"[214, 217]","{'A675': [(214, 217)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"        @Override
        public int hashCode() {
            return Objects.hash(time);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler.MarkerQuorumPacket,equals,boolean equals(Object),"[219, 229]","{'A583': [(221, 226)], 'A675': [(219, 220), (227, 229)]}","{'A583': 0.5454545454545454, 'A675': 0.45454545454545453}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }
            MarkerQuorumPacket that = (MarkerQuorumPacket) o;
            return time == that.time;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,setOutputArchive,void setOutputArchive(BinaryOutputArchive),"[243, 245]","{'A675': [(243, 245)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    protected void setOutputArchive(BinaryOutputArchive oa) {
        this.oa = oa;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,setBufferedOutput,void setBufferedOutput(BufferedOutputStream),"[246, 248]","{'A675': [(246, 248)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    protected void setBufferedOutput(BufferedOutputStream bufferedOutput) {
        this.bufferedOutput = bufferedOutput;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,toString,String toString(),"[303, 311]","{'A591': [(303, 304), (308, 311)], 'A596': [(306, 306)], 'A597': [(307, 307)], 'A600': [(305, 305)]}","{'A591': 0.6666666666666666, 'A596': 0.1111111111111111, 'A597': 0.1111111111111111, 'A600': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""LearnerHandler "").append(sock);
        sb.append("" tickOfNextAckDeadline:"").append(tickOfNextAckDeadline());
        sb.append("" synced?:"").append(synced());
        sb.append("" queuedPacketLength:"").append(queuedPackets.size());
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getLearnerType,LearnerType getLearnerType(),"[319, 321]","{'A596': [(319, 321)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public LearnerType getLearnerType() {
        return learnerType;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,sendPackets,void sendPackets(),"[329, 381]","{'A583': [(342, 344)], 'A591': [(329, 331), (369, 369), (372, 372), (378, 381)], 'A647': [(348, 348), (364, 368), (370, 370)], 'A675': [(339, 341), (345, 347), (373, 377)], 'A596': [(332, 338), (349, 352), (357, 357), (362, 363)], 'A597': [(354, 356)], 'A604': [(371, 371)], 'A697': [(353, 353), (358, 361)]}","{'A583': 0.05660377358490566, 'A591': 0.16981132075471697, 'A647': 0.1320754716981132, 'A675': 0.20754716981132076, 'A596': 0.2641509433962264, 'A597': 0.05660377358490566, 'A604': 0.018867924528301886, 'A697': 0.09433962264150944}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    private void sendPackets() throws InterruptedException {
        while (true) {
            try {
                QuorumPacket p;
                p = queuedPackets.poll();
                if (p == null) {
                    bufferedOutput.flush();
                    p = queuedPackets.take();
                }

                ServerMetrics.getMetrics().LEARNER_HANDLER_QP_SIZE.add(Long.toString(this.sid), queuedPackets.size());

                if (p instanceof MarkerQuorumPacket) {
                    MarkerQuorumPacket m = (MarkerQuorumPacket) p;
                    ServerMetrics.getMetrics().LEARNER_HANDLER_QP_TIME
                        .add(Long.toString(this.sid), (System.nanoTime() - m.time) / 1000000L);
                    continue;
                }

                queuedPacketsSize.addAndGet(-packetSize(p));
                if (p == proposalOfDeath) {
                    // Packet of death!
                    break;
                }

                if (p.getType() == Leader.PROPOSAL) {
                    syncLimitCheck.updateProposal(p.getZxid(), System.nanoTime());
                }
                if (LOG.isTraceEnabled()) {
                    long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;
                    if (p.getType() == Leader.PING) {
                        traceMask = ZooTrace.SERVER_PING_TRACE_MASK;
                    }
                    ZooTrace.logQuorumPacket(LOG, traceMask, 'o', p);
                }

                // Log the zxid of the last request, if it is a valid zxid.
                if (p.getZxid() > 0) {
                    lastZxid = p.getZxid();
                }
                oa.writeRecord(p, ""packet"");
                packetsSent.incrementAndGet();
                messageTracker.trackSent(p.getType());
            } catch (IOException e) {
                LOG.error(""Exception while sending packets in LearnerHandler"", e);
                // this will cause everything to shutdown on
                // this learner handler and will help notify
                // the learner/observer instantaneously
                closeSocket();
                break;
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,packetToString,String packetToString(QuorumPacket),"[383, 456]","{'A583': [(383, 383)], 'A591': [(385, 393), (396, 423), (448, 456)], 'A596': [(394, 395)], 'A616': [(384, 384), (424, 447)]}","{'A583': 0.013513513513513514, 'A591': 0.6216216216216216, 'A596': 0.02702702702702703, 'A616': 0.33783783783783783}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public static String packetToString(QuorumPacket p) {
        String type;
        String mess = null;

        switch (p.getType()) {
        case Leader.ACK:
            type = ""ACK"";
            break;
        case Leader.COMMIT:
            type = ""COMMIT"";
            break;
        case Leader.FOLLOWERINFO:
            type = ""FOLLOWERINFO"";
            break;
        case Leader.NEWLEADER:
            type = ""NEWLEADER"";
            break;
        case Leader.PING:
            type = ""PING"";
            break;
        case Leader.PROPOSAL:
            type = ""PROPOSAL"";
            break;
        case Leader.REQUEST:
            type = ""REQUEST"";
            break;
        case Leader.REVALIDATE:
            type = ""REVALIDATE"";
            ByteArrayInputStream bis = new ByteArrayInputStream(p.getData());
            DataInputStream dis = new DataInputStream(bis);
            try {
                long id = dis.readLong();
                mess = "" sessionid = "" + id;
            } catch (IOException e) {
                LOG.warn(""Unexpected exception"", e);
            }

            break;
        case Leader.UPTODATE:
            type = ""UPTODATE"";
            break;
        case Leader.DIFF:
            type = ""DIFF"";
            break;
        case Leader.TRUNC:
            type = ""TRUNC"";
            break;
        case Leader.SNAP:
            type = ""SNAP"";
            break;
        case Leader.ACKEPOCH:
            type = ""ACKEPOCH"";
            break;
        case Leader.SYNC:
            type = ""SYNC"";
            break;
        case Leader.INFORM:
            type = ""INFORM"";
            break;
        case Leader.COMMITANDACTIVATE:
            type = ""COMMITANDACTIVATE"";
            break;
        case Leader.INFORMANDACTIVATE:
            type = ""INFORMANDACTIVATE"";
            break;
        default:
            type = ""UNKNOWN"" + p.getType();
        }
        String entry = null;
        if (type != null) {
            entry = type + "" "" + Long.toHexString(p.getZxid()) + "" "" + mess;
        }
        return entry;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,run,void run(),"[462, 740]","{'A583': [(476, 477), (485, 485), (506, 509), (511, 511), (515, 515), (535, 535), (545, 545), (547, 547), (573, 581), (589, 589), (601, 601), (604, 604), (621, 622), (686, 686), (705, 706), (708, 708), (723, 723), (725, 726), (728, 728)], 'A591': [(463, 464), (470, 473), (479, 480), (516, 517), (521, 521), (527, 527), (557, 557), (595, 595), (613, 613), (640, 640), (642, 642), (655, 657), (659, 659), (668, 668), (670, 677), (683, 685), (687, 690), (692, 694), (697, 703), (713, 714), (717, 719), (722, 722), (730, 730), (738, 740)], 'A647': [(465, 466), (482, 484), (496, 496), (501, 501), (504, 505), (518, 519), (525, 525), (533, 533), (550, 550), (556, 556), (568, 568), (583, 583), (614, 614), (628, 628), (641, 641), (644, 644), (646, 647), (667, 667), (669, 669), (682, 682), (691, 691), (696, 696), (711, 712)], 'A648': [(554, 555), (563, 563), (572, 572), (609, 610)], 'A675': [(558, 558), (560, 561), (564, 566), (590, 592), (631, 638), (695, 695), (720, 721), (724, 724), (727, 727), (729, 729), (731, 734)], 'A590': [(462, 462), (486, 489), (491, 495), (498, 499), (510, 510), (512, 512), (520, 520), (522, 523), (526, 526), (534, 534), (537, 537), (551, 551), (704, 704), (710, 710)], 'A594': [(468, 468)], 'A596': [(500, 500), (502, 503), (514, 514), (524, 524), (528, 532), (536, 536), (538, 538), (540, 542), (544, 544), (546, 546), (548, 549), (552, 552), (562, 562), (612, 612), (615, 618), (623, 624), (643, 643), (645, 645), (648, 651), (653, 654), (660, 660), (665, 666), (678, 678), (680, 680)], 'A713': [(594, 594)], 'A597': [(467, 467), (469, 469), (567, 567), (569, 569), (571, 571), (582, 582), (584, 586), (588, 588), (625, 625), (629, 630), (681, 681), (707, 707), (709, 709)], 'A604': [(474, 475), (478, 478), (539, 539), (543, 543), (570, 570), (619, 620), (658, 658), (735, 735), (737, 737)], 'A612': [(513, 513), (553, 553), (597, 600), (602, 603), (605, 608), (611, 611), (639, 639)], 'A697': [(661, 664)], 'A616': [(715, 716)], 'A715': [(481, 481), (490, 490), (497, 497)], 'A716': [(559, 559)], 'A584': [(587, 587), (593, 593)], 'A620': [(596, 596), (626, 627), (652, 652), (679, 679)], 'A595': [(736, 736)]}","{'A583': 0.12186379928315412, 'A591': 0.20430107526881722, 'A647': 0.10752688172043011, 'A648': 0.021505376344086023, 'A675': 0.0967741935483871, 'A590': 0.08243727598566308, 'A594': 0.0035842293906810036, 'A596': 0.14695340501792115, 'A713': 0.0035842293906810036, 'A597': 0.05734767025089606, 'A604': 0.03942652329749104, 'A612': 0.05017921146953405, 'A697': 0.014336917562724014, 'A616': 0.007168458781362007, 'A715': 0.010752688172043012, 'A716': 0.0035842293906810036, 'A584': 0.007168458781362007, 'A620': 0.017921146953405017, 'A595': 0.0035842293906810036}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    @Override
    public void run() {
        try {
            learnerMaster.addLearnerHandler(this);
            tickOfNextAckDeadline = learnerMaster.getTickOfInitialAckDeadline();

            ia = BinaryInputArchive.getArchive(bufferedInput);
            bufferedOutput = new BufferedOutputStream(sock.getOutputStream());
            oa = BinaryOutputArchive.getArchive(bufferedOutput);

            QuorumPacket qp = new QuorumPacket();
            ia.readRecord(qp, ""packet"");

            messageTracker.trackReceived(qp.getType());
            if (qp.getType() != Leader.FOLLOWERINFO && qp.getType() != Leader.OBSERVERINFO) {
                LOG.error(""First packet {} is not FOLLOWERINFO or OBSERVERINFO!"", qp.toString());

                return;
            }

            if (learnerMaster instanceof ObserverMaster && qp.getType() != Leader.OBSERVERINFO) {
                throw new IOException(""Non observer attempting to connect to ObserverMaster. type = "" + qp.getType());
            }
            byte[] learnerInfoData = qp.getData();
            if (learnerInfoData != null) {
                ByteBuffer bbsid = ByteBuffer.wrap(learnerInfoData);
                if (learnerInfoData.length >= 8) {
                    this.sid = bbsid.getLong();
                }
                if (learnerInfoData.length >= 12) {
                    this.version = bbsid.getInt(); // protocolVersion
                }
                if (learnerInfoData.length >= 20) {
                    long configVersion = bbsid.getLong();
                    if (configVersion > learnerMaster.getQuorumVerifierVersion()) {
                        throw new IOException(""Follower is ahead of the leader (has a later activated configuration)"");
                    }
                }
            } else {
                this.sid = learnerMaster.getAndDecrementFollowerCounter();
            }

            String followerInfo = learnerMaster.getPeerInfo(this.sid);
            if (followerInfo.isEmpty()) {
                LOG.info(
                    ""Follower sid: {} not in the current config {}"",
                    this.sid,
                    Long.toHexString(learnerMaster.getQuorumVerifierVersion()));
            } else {
                LOG.info(""Follower sid: {} : info : {}"", this.sid, followerInfo);
            }

            if (qp.getType() == Leader.OBSERVERINFO) {
                learnerType = LearnerType.OBSERVER;
            }

            learnerMaster.registerLearnerHandlerBean(this, sock);

            long lastAcceptedEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());

            long peerLastZxid;
            StateSummary ss = null;
            long zxid = qp.getZxid();
            long newEpoch = learnerMaster.getEpochToPropose(this.getSid(), lastAcceptedEpoch);
            long newLeaderZxid = ZxidUtils.makeZxid(newEpoch, 0);

            if (this.getVersion() < 0x10000) {
                // we are going to have to extrapolate the epoch information
                long epoch = ZxidUtils.getEpochFromZxid(zxid);
                ss = new StateSummary(epoch, zxid);
                // fake the message
                learnerMaster.waitForEpochAck(this.getSid(), ss);
            } else {
                byte[] ver = new byte[4];
                ByteBuffer.wrap(ver).putInt(0x10000);
                QuorumPacket newEpochPacket = new QuorumPacket(Leader.LEADERINFO, newLeaderZxid, ver, null);
                oa.writeRecord(newEpochPacket, ""packet"");
                messageTracker.trackSent(Leader.LEADERINFO);
                bufferedOutput.flush();
                QuorumPacket ackEpochPacket = new QuorumPacket();
                ia.readRecord(ackEpochPacket, ""packet"");
                messageTracker.trackReceived(ackEpochPacket.getType());
                if (ackEpochPacket.getType() != Leader.ACKEPOCH) {
                    LOG.error(""{} is not ACKEPOCH"", ackEpochPacket.toString());
                    return;
                }
                ByteBuffer bbepoch = ByteBuffer.wrap(ackEpochPacket.getData());
                ss = new StateSummary(bbepoch.getInt(), ackEpochPacket.getZxid());
                learnerMaster.waitForEpochAck(this.getSid(), ss);
            }
            peerLastZxid = ss.getLastZxid();

            // Take any necessary action if we need to send TRUNC or DIFF
            // startForwarding() will be called in all cases
            boolean needSnap = syncFollower(peerLastZxid, learnerMaster);

            // syncs between followers and the leader are exempt from throttling because it
            // is important to keep the state of quorum servers up-to-date. The exempted syncs
            // are counted as concurrent syncs though
            boolean exemptFromThrottle = getLearnerType() != LearnerType.OBSERVER;
            /* if we are not truncating or sending a diff just send a snapshot */
            if (needSnap) {
                syncThrottler = learnerMaster.getLearnerSnapSyncThrottler();
                syncThrottler.beginSync(exemptFromThrottle);
                ServerMetrics.getMetrics().INFLIGHT_SNAP_COUNT.add(syncThrottler.getSyncInProgress());
                try {
                    long zxidToSend = learnerMaster.getZKDatabase().getDataTreeLastProcessedZxid();
                    oa.writeRecord(new QuorumPacket(Leader.SNAP, zxidToSend, null, null), ""packet"");
                    messageTracker.trackSent(Leader.SNAP);
                    bufferedOutput.flush();

                    LOG.info(
                        ""Sending snapshot last zxid of peer is 0x{}, zxid of leader is 0x{}, ""
                            + ""send zxid of db as 0x{}, {} concurrent snapshot sync, ""
                            + ""snapshot sync was {} from throttle"",
                        Long.toHexString(peerLastZxid),
                        Long.toHexString(leaderLastZxid),
                        Long.toHexString(zxidToSend),
                        syncThrottler.getSyncInProgress(),
                        exemptFromThrottle ? ""exempt"" : ""not exempt"");
                    // Dump data to peer
                    learnerMaster.getZKDatabase().serializeSnapshot(oa);
                    oa.writeString(""BenWasHere"", ""signature"");
                    bufferedOutput.flush();
                } finally {
                    ServerMetrics.getMetrics().SNAP_COUNT.add(1);
                }
            } else {
                syncThrottler = learnerMaster.getLearnerDiffSyncThrottler();
                syncThrottler.beginSync(exemptFromThrottle);
                ServerMetrics.getMetrics().INFLIGHT_DIFF_COUNT.add(syncThrottler.getSyncInProgress());
                ServerMetrics.getMetrics().DIFF_COUNT.add(1);
            }

            LOG.debug(""Sending NEWLEADER message to {}"", sid);
            // the version of this quorumVerifier will be set by leader.lead() in case
            // the leader is just being established. waitForEpochAck makes sure that readyToStart is true if
            // we got here, so the version was set
            if (getVersion() < 0x10000) {
                QuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER, newLeaderZxid, null, null);
                oa.writeRecord(newLeaderQP, ""packet"");
            } else {
                QuorumPacket newLeaderQP = new QuorumPacket(Leader.NEWLEADER, newLeaderZxid, learnerMaster.getQuorumVerifierBytes(), null);
                queuedPackets.add(newLeaderQP);
            }
            bufferedOutput.flush();

            // Start thread that blast packets in the queue to learner
            startSendingPackets();

            /*
             * Have to wait for the first ACK, wait until
             * the learnerMaster is ready, and only then we can
             * start processing messages.
             */
            qp = new QuorumPacket();
            ia.readRecord(qp, ""packet"");

            messageTracker.trackReceived(qp.getType());
            if (qp.getType() != Leader.ACK) {
                LOG.error(""Next packet was supposed to be an ACK, but received packet: {}"", packetToString(qp));
                return;
            }

            LOG.debug(""Received NEWLEADER-ACK message from {}"", sid);

            learnerMaster.waitForNewLeaderAck(getSid(), qp.getZxid());

            syncLimitCheck.start();
            // sync ends when NEWLEADER-ACK is received
            syncThrottler.endSync();
            if (needSnap) {
                ServerMetrics.getMetrics().INFLIGHT_SNAP_COUNT.add(syncThrottler.getSyncInProgress());
            } else {
                ServerMetrics.getMetrics().INFLIGHT_DIFF_COUNT.add(syncThrottler.getSyncInProgress());
            }
            syncThrottler = null;

            // now that the ack has been processed expect the syncLimit
            sock.setSoTimeout(learnerMaster.syncTimeout());

            /*
             * Wait until learnerMaster starts up
             */
            learnerMaster.waitForStartup();

            // Mutation packets will be queued during the serialize,
            // so we need to mark when the peer can actually start
            // using the data
            //
            LOG.debug(""Sending UPTODATE message to {}"", sid);
            queuedPackets.add(new QuorumPacket(Leader.UPTODATE, -1, null, null));

            while (true) {
                qp = new QuorumPacket();
                ia.readRecord(qp, ""packet"");
                messageTracker.trackReceived(qp.getType());

                if (LOG.isTraceEnabled()) {
                    long traceMask = ZooTrace.SERVER_PACKET_TRACE_MASK;
                    if (qp.getType() == Leader.PING) {
                        traceMask = ZooTrace.SERVER_PING_TRACE_MASK;
                    }
                    ZooTrace.logQuorumPacket(LOG, traceMask, 'i', qp);
                }
                tickOfNextAckDeadline = learnerMaster.getTickOfNextAckDeadline();

                packetsReceived.incrementAndGet();

                ByteBuffer bb;
                long sessionId;
                int cxid;
                int type;

                switch (qp.getType()) {
                case Leader.ACK:
                    if (this.learnerType == LearnerType.OBSERVER) {
                        LOG.debug(""Received ACK from Observer {}"", this.sid);
                    }
                    syncLimitCheck.updateAck(qp.getZxid());
                    learnerMaster.processAck(this.sid, qp.getZxid(), sock.getLocalSocketAddress());
                    break;
                case Leader.PING:
                    // Process the touches
                    ByteArrayInputStream bis = new ByteArrayInputStream(qp.getData());
                    DataInputStream dis = new DataInputStream(bis);
                    while (dis.available() > 0) {
                        long sess = dis.readLong();
                        int to = dis.readInt();
                        learnerMaster.touch(sess, to);
                    }
                    break;
                case Leader.REVALIDATE:
                    ServerMetrics.getMetrics().REVALIDATE_COUNT.add(1);
                    learnerMaster.revalidateSession(qp, this);
                    break;
                case Leader.REQUEST:
                    bb = ByteBuffer.wrap(qp.getData());
                    sessionId = bb.getLong();
                    cxid = bb.getInt();
                    type = bb.getInt();
                    bb = bb.slice();
                    Request si;
                    if (type == OpCode.sync) {
                        si = new LearnerSyncRequest(this, sessionId, cxid, type, RequestRecord.fromBytes(bb), qp.getAuthinfo());
                    } else {
                        si = new Request(null, sessionId, cxid, type, RequestRecord.fromBytes(bb), qp.getAuthinfo());
                    }
                    si.setOwner(this);
                    learnerMaster.submitLearnerRequest(si);
                    requestsReceived.incrementAndGet();
                    break;
                default:
                    LOG.warn(""unexpected quorum packet, type: {}"", packetToString(qp));
                    break;
                }
            }
        } catch (IOException e) {
            LOG.error(""Unexpected exception in LearnerHandler: "", e);
            closeSocket();
        } catch (InterruptedException e) {
            LOG.error(""Unexpected exception in LearnerHandler."", e);
        } catch (SyncThrottleException e) {
            LOG.error(""too many concurrent sync."", e);
            syncThrottler = null;
        } catch (Exception e) {
            LOG.error(""Unexpected exception in LearnerHandler."", e);
            throw e;
        } finally {
            if (syncThrottler != null) {
                syncThrottler.endSync();
                syncThrottler = null;
            }
            String remoteAddr = getRemoteAddress();
            LOG.warn(""******* GOODBYE sid:{} {} ********"", getSid(), remoteAddr);
            messageTracker.dumpToLog(remoteAddr);
            shutdown();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,startSendingPackets,void startSendingPackets(),"[745, 762]","{'A583': [(750, 750), (754, 754)], 'A648': [(745, 749), (751, 753), (755, 762)]}","{'A583': 0.1111111111111111, 'A648': 0.8888888888888888}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    protected void startSendingPackets() {
        if (!sendingThreadStarted) {
            // Start sending packets
            new Thread() {
                public void run() {
                    Thread.currentThread().setName(""Sender-"" + sock.getRemoteSocketAddress());
                    try {
                        sendPackets();
                    } catch (InterruptedException e) {
                        LOG.warn(""Unexpected interruption"", e);
                    }
                }
            }.start();
            sendingThreadStarted = true;
        } else {
            LOG.error(""Attempting to start sending thread after it already started"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,run,void run(),"[749, 756]","{'A583': [(750, 750), (754, 754)], 'A648': [(749, 749), (751, 753), (755, 756)]}","{'A583': 0.25, 'A648': 0.75}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"                public void run() {
                    Thread.currentThread().setName(""Sender-"" + sock.getRemoteSocketAddress());
                    try {
                        sendPackets();
                    } catch (InterruptedException e) {
                        LOG.warn(""Unexpected interruption"", e);
                    }
                }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,shouldSendMarkerPacketForLogging,boolean shouldSendMarkerPacketForLogging(),"[768, 770]","{'A675': [(768, 770)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    protected boolean shouldSendMarkerPacketForLogging() {
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,syncFollower,"boolean syncFollower(long,LearnerMaster)","[780, 938]","{'A583': [(807, 813), (851, 854), (860, 863), (868, 868), (870, 870), (872, 872), (881, 881), (883, 884), (887, 890), (897, 899), (909, 918), (923, 924), (933, 933)], 'A647': [(780, 780), (787, 788), (796, 796), (818, 818), (834, 834), (847, 847), (886, 886), (891, 896), (900, 901), (920, 922), (925, 925)], 'A648': [(781, 786), (789, 795), (798, 805), (814, 816), (819, 833), (835, 836), (838, 846), (848, 850), (855, 858), (864, 867), (869, 869), (871, 871), (873, 880), (882, 882), (885, 885), (902, 902), (908, 908), (919, 919), (926, 932), (934, 938)], 'A675': [(806, 806)], 'A597': [(903, 907)], 'A612': [(797, 797)], 'A715': [(817, 817), (837, 837), (859, 859)]}","{'A583': 0.2578616352201258, 'A647': 0.12578616352201258, 'A648': 0.5534591194968553, 'A675': 0.006289308176100629, 'A597': 0.031446540880503145, 'A612': 0.006289308176100629, 'A715': 0.018867924528301886}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    boolean syncFollower(long peerLastZxid, LearnerMaster learnerMaster) {
        /*
         * When leader election is completed, the leader will set its
         * lastProcessedZxid to be (epoch < 32). There will be no txn associated
         * with this zxid.
         *
         * The learner will set its lastProcessedZxid to the same value if
         * it get DIFF or SNAP from the learnerMaster. If the same learner come
         * back to sync with learnerMaster using this zxid, we will never find this
         * zxid in our history. In this case, we will ignore TRUNC logic and
         * always send DIFF if we have old enough history
         */
        boolean isPeerNewEpochZxid = (peerLastZxid & 0xffffffffL) == 0;
        // Keep track of the latest zxid which already queued
        long currentZxid = peerLastZxid;
        boolean needSnap = true;
        ZKDatabase db = learnerMaster.getZKDatabase();
        boolean txnLogSyncEnabled = db.isTxnLogSyncEnabled();
        ReentrantReadWriteLock lock = db.getLogLock();
        ReadLock rl = lock.readLock();
        try {
            rl.lock();
            long maxCommittedLog = db.getmaxCommittedLog();
            long minCommittedLog = db.getminCommittedLog();
            long lastProcessedZxid = db.getDataTreeLastProcessedZxid();

            LOG.info(""Synchronizing with Learner sid: {} maxCommittedLog=0x{}""
                     + "" minCommittedLog=0x{} lastProcessedZxid=0x{}""
                     + "" peerLastZxid=0x{}"",
                     getSid(),
                     Long.toHexString(maxCommittedLog),
                     Long.toHexString(minCommittedLog),
                     Long.toHexString(lastProcessedZxid),
                     Long.toHexString(peerLastZxid));

            if (db.getCommittedLog().isEmpty()) {
                /*
                 * It is possible that committedLog is empty. In that case
                 * setting these value to the latest txn in learnerMaster db
                 * will reduce the case that we need to handle
                 *
                 * Here is how each case handle by the if block below
                 * 1. lastProcessZxid == peerZxid -> Handle by (2)
                 * 2. lastProcessZxid < peerZxid -> Handle by (3)
                 * 3. lastProcessZxid > peerZxid -> Handle by (5)
                 */
                minCommittedLog = lastProcessedZxid;
                maxCommittedLog = lastProcessedZxid;
            }

            /*
             * Here are the cases that we want to handle
             *
             * 1. Force sending snapshot (for testing purpose)
             * 2. Peer and learnerMaster is already sync, send empty diff
             * 3. Follower has txn that we haven't seen. This may be old leader
             *    so we need to send TRUNC. However, if peer has newEpochZxid,
             *    we cannot send TRUNC since the follower has no txnlog
             * 4. Follower is within committedLog range or already in-sync.
             *    We may need to send DIFF or TRUNC depending on follower's zxid
             *    We always send empty DIFF if follower is already in-sync
             * 5. Follower missed the committedLog. We will try to use on-disk
             *    txnlog + committedLog to sync with follower. If that fail,
             *    we will send snapshot
             */

            if (forceSnapSync) {
                // Force learnerMaster to use snapshot to sync with follower
                LOG.warn(""Forcing snapshot sync - should not see this in production"");
            } else if (lastProcessedZxid == peerLastZxid) {
                // Follower is already sync with us, send empty diff
                LOG.info(
                    ""Sending DIFF zxid=0x{} for peer sid: {}"",
                    Long.toHexString(peerLastZxid),
                    getSid());
                queueOpPacket(Leader.DIFF, peerLastZxid);
                needOpPacket = false;
                needSnap = false;
            } else if (peerLastZxid > maxCommittedLog && !isPeerNewEpochZxid) {
                // Newer than committedLog, send trunc and done
                LOG.debug(
                    ""Sending TRUNC to follower zxidToSend=0x{} for peer sid:{}"",
                    Long.toHexString(maxCommittedLog),
                    getSid());
                queueOpPacket(Leader.TRUNC, maxCommittedLog);
                currentZxid = maxCommittedLog;
                needOpPacket = false;
                needSnap = false;
            } else if ((maxCommittedLog >= peerLastZxid) && (minCommittedLog <= peerLastZxid)) {
                // Follower is within commitLog range
                LOG.info(""Using committedLog for peer sid: {}"", getSid());
                Iterator<Proposal> itr = db.getCommittedLog().iterator();
                currentZxid = queueCommittedProposals(itr, peerLastZxid, null, maxCommittedLog);
                needSnap = false;
            } else if (peerLastZxid < minCommittedLog && txnLogSyncEnabled) {
                // Use txnlog and committedLog to sync

                // Calculate sizeLimit that we allow to retrieve txnlog from disk
                long sizeLimit = db.calculateTxnLogSizeLimit();
                // This method can return empty iterator if the requested zxid
                // is older than on-disk txnlog
                Iterator<Proposal> txnLogItr = db.getProposalsFromTxnLog(peerLastZxid, sizeLimit);
                if (txnLogItr.hasNext()) {
                    LOG.info(""Use txnlog and committedLog for peer sid: {}"", getSid());
                    currentZxid = queueCommittedProposals(txnLogItr, peerLastZxid, minCommittedLog, maxCommittedLog);

                    if (currentZxid < minCommittedLog) {
                        LOG.info(
                            ""Detected gap between end of txnlog: 0x{} and start of committedLog: 0x{}"",
                            Long.toHexString(currentZxid),
                            Long.toHexString(minCommittedLog));
                        currentZxid = peerLastZxid;
                        // Clear out currently queued requests and revert
                        // to sending a snapshot.
                        queuedPackets.clear();
                        needOpPacket = true;
                    } else {
                        LOG.debug(""Queueing committedLog 0x{}"", Long.toHexString(currentZxid));
                        Iterator<Proposal> committedLogItr = db.getCommittedLog().iterator();
                        currentZxid = queueCommittedProposals(committedLogItr, currentZxid, null, maxCommittedLog);
                        needSnap = false;
                    }
                }
                // closing the resources
                if (txnLogItr instanceof TxnLogProposalIterator) {
                    TxnLogProposalIterator txnProposalItr = (TxnLogProposalIterator) txnLogItr;
                    txnProposalItr.close();
                }
            } else {
                LOG.warn(
                    ""Unhandled scenario for peer sid: {} maxCommittedLog=0x{}""
                        + "" minCommittedLog=0x{} lastProcessedZxid=0x{}""
                        + "" peerLastZxid=0x{} txnLogSyncEnabled={}"",
                    getSid(),
                    Long.toHexString(maxCommittedLog),
                    Long.toHexString(minCommittedLog),
                    Long.toHexString(lastProcessedZxid),
                    Long.toHexString(peerLastZxid),
                    txnLogSyncEnabled);
            }
            if (needSnap) {
                currentZxid = db.getDataTreeLastProcessedZxid();
            }

            LOG.debug(""Start forwarding 0x{} for peer sid: {}"", Long.toHexString(currentZxid), getSid());
            leaderLastZxid = learnerMaster.startForwarding(this, currentZxid);
        } finally {
            rl.unlock();
        }

        if (needOpPacket && !needSnap) {
            // This should never happen, but we should fall back to sending
            // snapshot just in case.
            LOG.error(""Unhandled scenario for peer sid: {} fall back to use snapshot"",  getSid());
            needSnap = true;
        }

        return needSnap;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,queueCommittedProposals,"long queueCommittedProposals(Iterator<Proposal>,long,Long,Long)","[951, 1042]","{'A583': [(951, 951), (978, 981), (988, 995), (998, 998), (1002, 1002), (1006, 1009), (1033, 1033), (1035, 1036)], 'A647': [(996, 996)], 'A648': [(952, 959), (961, 977), (983, 987), (997, 997), (999, 1001), (1003, 1005), (1010, 1022), (1024, 1032), (1038, 1041)], 'A612': [(1042, 1042)], 'A715': [(982, 982), (1037, 1037)], 'A595': [(960, 960), (1023, 1023)], 'A717': [(1034, 1034)]}","{'A583': 0.2391304347826087, 'A647': 0.010869565217391304, 'A648': 0.6847826086956522, 'A612': 0.010869565217391304, 'A715': 0.021739130434782608, 'A595': 0.021739130434782608, 'A717': 0.010869565217391304}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    protected long queueCommittedProposals(Iterator<Proposal> itr, long peerLastZxid, Long maxZxid, Long lastCommittedZxid) {
        boolean isPeerNewEpochZxid = (peerLastZxid & 0xffffffffL) == 0;
        long queuedZxid = peerLastZxid;
        // as we look through proposals, this variable keeps track of previous
        // proposal Id.
        long prevProposalZxid = -1;
        while (itr.hasNext()) {
            Proposal propose = itr.next();

            long packetZxid = propose.getZxid();
            // abort if we hit the limit
            if ((maxZxid != null) && (packetZxid > maxZxid)) {
                break;
            }

            // skip the proposals the peer already has
            if (packetZxid < peerLastZxid) {
                prevProposalZxid = packetZxid;
                continue;
            }

            // If we are sending the first packet, figure out whether to trunc
            // or diff
            if (needOpPacket) {

                // Send diff when we see the follower's zxid in our history
                if (packetZxid == peerLastZxid) {
                    LOG.info(
                        ""Sending DIFF zxid=0x{}  for peer sid: {}"",
                        Long.toHexString(lastCommittedZxid),
                        getSid());
                    queueOpPacket(Leader.DIFF, lastCommittedZxid);
                    needOpPacket = false;
                    continue;
                }

                if (isPeerNewEpochZxid) {
                    // Send diff and fall through if zxid is of a new-epoch
                    LOG.info(
                        ""Sending DIFF zxid=0x{}  for peer sid: {}"",
                        Long.toHexString(lastCommittedZxid),
                        getSid());
                    queueOpPacket(Leader.DIFF, lastCommittedZxid);
                    needOpPacket = false;
                } else if (packetZxid > peerLastZxid) {
                    // Peer have some proposals that the learnerMaster hasn't seen yet
                    // it may used to be a leader
                    if (ZxidUtils.getEpochFromZxid(packetZxid) != ZxidUtils.getEpochFromZxid(peerLastZxid)) {
                        // We cannot send TRUNC that cross epoch boundary.
                        // The learner will crash if it is asked to do so.
                        // We will send snapshot this those cases.
                        LOG.warn(""Cannot send TRUNC to peer sid: "" + getSid() + "" peer zxid is from different epoch"");
                        return queuedZxid;
                    }

                    LOG.info(
                        ""Sending TRUNC zxid=0x{}  for peer sid: {}"",
                        Long.toHexString(prevProposalZxid),
                        getSid());
                    queueOpPacket(Leader.TRUNC, prevProposalZxid);
                    needOpPacket = false;
                }
            }

            if (packetZxid <= queuedZxid) {
                // We can get here, if we don't have op packet to queue
                // or there is a duplicate txn in a given iterator
                continue;
            }

            // Since this is already a committed proposal, we need to follow
            // it by a commit packet
            queuePacket(propose.getQuorumPacket());
            queueOpPacket(Leader.COMMIT, packetZxid);
            queuedZxid = packetZxid;

        }

        if (needOpPacket && isPeerNewEpochZxid) {
            // We will send DIFF for this kind of zxid in any case. This if-block
            // is the catch when our history older than learner and there is
            // no new txn since then. So we need an empty diff
            LOG.info(
                ""Sending DIFF zxid=0x{}  for peer sid: {}"",
                Long.toHexString(lastCommittedZxid),
                getSid());
            queueOpPacket(Leader.DIFF, lastCommittedZxid);
            needOpPacket = false;
        }

        return queuedZxid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,shutdown,void shutdown(),"[1044, 1058]","{'A591': [(1044, 1044), (1058, 1058)], 'A647': [(1056, 1057)], 'A675': [(1047, 1047), (1052, 1054)], 'A596': [(1045, 1046), (1048, 1051), (1055, 1055)]}","{'A591': 0.13333333333333333, 'A647': 0.13333333333333333, 'A675': 0.26666666666666666, 'A596': 0.4666666666666667}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public void shutdown() {
        // Send the packet of death
        try {
            queuedPackets.clear();
            queuedPackets.put(proposalOfDeath);
        } catch (InterruptedException e) {
            LOG.warn(""Ignoring unexpected exception"", e);
        }

        closeSocket();

        this.interrupt();
        learnerMaster.removeLearnerHandler(this);
        learnerMaster.unregisterLearnerHandlerBean(this);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,tickOfNextAckDeadline,long tickOfNextAckDeadline(),"[1060, 1062]","{'A591': [(1062, 1062)], 'A597': [(1060, 1061)]}","{'A591': 0.3333333333333333, 'A597': 0.6666666666666666}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public long tickOfNextAckDeadline() {
        return tickOfNextAckDeadline;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,ping,void ping(),"[1067, 1082]","{'A591': [(1067, 1067), (1082, 1082)], 'A647': [(1075, 1075)], 'A648': [(1068, 1072)], 'A596': [(1073, 1073), (1081, 1081)], 'A597': [(1074, 1074), (1076, 1080)]}","{'A591': 0.125, 'A647': 0.0625, 'A648': 0.3125, 'A596': 0.125, 'A597': 0.375}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public void ping() {
        // If learner hasn't sync properly yet, don't send ping packet
        // otherwise, the learner will crash
        if (!sendingThreadStarted) {
            return;
        }
        long id;
        if (syncLimitCheck.check(System.nanoTime())) {
            id = learnerMaster.getLastProposed();
            QuorumPacket ping = new QuorumPacket(Leader.PING, id, null, null);
            queuePacket(ping);
        } else {
            LOG.warn(""Closing connection to peer due to transaction timeout."");
            shutdown();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,queueOpPacket,"void queueOpPacket(int,long)","[1089, 1092]","{'A648': [(1089, 1092)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    private void queueOpPacket(int type, long zxid) {
        QuorumPacket packet = new QuorumPacket(type, zxid, null, null);
        queuePacket(packet);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,queuePacket,void queuePacket(QuorumPacket),"[1094, 1101]","{'A583': [(1097, 1097)], 'A591': [(1094, 1095), (1101, 1101)], 'A647': [(1100, 1100)], 'A675': [(1096, 1096), (1098, 1099)]}","{'A583': 0.125, 'A591': 0.375, 'A647': 0.125, 'A675': 0.375}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    void queuePacket(QuorumPacket p) {
        queuedPackets.add(p);
        // Add a MarkerQuorumPacket at regular intervals.
        if (shouldSendMarkerPacketForLogging() && packetCounter.getAndIncrement() % markerPacketInterval == 0) {
            queuedPackets.add(new MarkerQuorumPacket(System.nanoTime()));
        }
        queuedPacketsSize.addAndGet(packetSize(p));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,packetSize,long packetSize(QuorumPacket),"[1103, 1111]","{'A647': [(1103, 1111)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    static long packetSize(QuorumPacket p) {
        /* Approximate base size of QuorumPacket: int + long + byte[] + List */
        long size = 4 + 8 + 8 + 8;
        byte[] data = p.getData();
        if (data != null) {
            size += data.length;
        }
        return size;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,synced,boolean synced(),"[1113, 1115]","{'A591': [(1113, 1113), (1115, 1115)], 'A647': [(1114, 1114)]}","{'A591': 0.6666666666666666, 'A647': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public boolean synced() {
        return isAlive() && learnerMaster.getCurrentTick() <= tickOfNextAckDeadline;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getLearnerHandlerInfo,"Map<String, Object> getLearnerHandlerInfo()","[1117, 1130]","{'A647': [(1117, 1130)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public synchronized Map<String, Object> getLearnerHandlerInfo() {
        Map<String, Object> info = new LinkedHashMap<>(9);
        info.put(""remote_socket_address"", getRemoteAddress());
        info.put(""sid"", getSid());
        info.put(""established"", getEstablished());
        info.put(""queued_packets"", queuedPackets.size());
        info.put(""queued_packets_size"", queuedPacketsSize.get());
        info.put(""packets_received"", packetsReceived.longValue());
        info.put(""packets_sent"", packetsSent.longValue());
        info.put(""requests"", requestsReceived.longValue());
        info.put(""last_zxid"", getLastZxid());

        return info;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,resetObserverConnectionStats,void resetObserverConnectionStats(),"[1132, 1138]","{'A647': [(1132, 1138)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public synchronized void resetObserverConnectionStats() {
        packetsReceived.set(0);
        packetsSent.set(0);
        requestsReceived.set(0);

        lastZxid = -1;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,getQueuedPackets,Queue<QuorumPacket> getQueuedPackets(),"[1143, 1145]","{'A648': [(1143, 1145)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public Queue<QuorumPacket> getQueuedPackets() {
        return queuedPackets;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,setFirstPacket,void setFirstPacket(boolean),"[1150, 1152]","{'A648': [(1150, 1152)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    public void setFirstPacket(boolean value) {
        needOpPacket = value;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,closeSocket,void closeSocket(),"[1154, 1164]","{'A675': [(1154, 1164)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    void closeSocket() {
        if (sock != null && !sock.isClosed() && sockBeingClosed.compareAndSet(false, true)) {
            if (closeSocketAsync) {
                LOG.info(""Asynchronously closing socket to learner {}."", getSid());
                closeSockAsync();
            } else {
                LOG.info(""Synchronously closing socket to learner {}."", getSid());
                closeSockSync();
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,closeSockAsync,void closeSockAsync(),"[1166, 1170]","{'A675': [(1166, 1170)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    void closeSockAsync() {
        final Thread closingThread = new Thread(() -> closeSockSync(), ""CloseSocketThread(sid:"" + this.sid);
        closingThread.setDaemon(true);
        closingThread.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandler.java,LearnerHandler,closeSockSync,void closeSockSync(),"[1172, 1182]","{'A675': [(1172, 1182)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerHandlerTest.java,"    void closeSockSync() {
        try {
            if (sock != null) {
                long startTime = Time.currentElapsedTime();
                sock.close();
                ServerMetrics.getMetrics().SOCKET_CLOSING_TIME.add(Time.currentElapsedTime() - startTime);
            }
        } catch (IOException e) {
            LOG.warn(""Ignoring error closing connection to learner {}"", getSid(), e);
        }
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,hashCode,int hashCode(),"[47, 50]","{'A590': [(47, 50)]}",{'A590': 1.0},A590,,"    public int hashCode() {
        assert false : ""hashCode not designed"";
        return 42; // any arbitrary constant will do
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,equals,boolean equals(Object),"[52, 70]","{'A583': [(57, 57), (59, 60), (62, 62), (65, 65), (67, 67)], 'A590': [(52, 56), (58, 58), (61, 61), (63, 64), (66, 66), (68, 70)]}","{'A583': 0.3157894736842105, 'A590': 0.6842105263157895}",A590,,"    public boolean equals(Object o) {
        if (!(o instanceof QuorumMaj)) {
            return false;
        }
        QuorumMaj qm = (QuorumMaj) o;
        if (qm.getVersion() == version) {
            return true;
        }
        if (allMembers.size() != qm.getAllMembers().size()) {
            return false;
        }
        for (QuorumServer qs : allMembers.values()) {
            QuorumServer qso = qm.getAllMembers().get(qs.id);
            if (qso == null || !qs.equals(qso)) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,getWeight,long getWeight(long),"[115, 117]","{'A583': [(116, 116)], 'A596': [(117, 117)], 'A590': [(115, 115)]}","{'A583': 0.3333333333333333, 'A596': 0.3333333333333333, 'A590': 0.3333333333333333}",A583,,"    public long getWeight(long id) {
        return 1;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,toString,String toString(),"[119, 134]","{'A583': [(134, 134)], 'A590': [(119, 133)]}","{'A583': 0.0625, 'A590': 0.9375}",A590,,"    public String toString() {
        StringBuilder sw = new StringBuilder();

        for (QuorumServer member : getAllMembers().values()) {
            String key = ""server."" + member.id;
            String value = member.toString();
            sw.append(key);
            sw.append('=');
            sw.append(value);
            sw.append('\n');
        }
        String hexVersion = Long.toHexString(version);
        sw.append(""version="");
        sw.append(hexVersion);
        return sw.toString();
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,containsQuorum,boolean containsQuorum(Set<Long>),"[140, 142]","{'A590': [(140, 142)]}",{'A590': 1.0},A590,,"    public boolean containsQuorum(Set<Long> ackSet) {
        return (ackSet.size() > half);
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,getAllMembers,"Map<Long, QuorumServer> getAllMembers()","[144, 146]","{'A590': [(144, 146)]}",{'A590': 1.0},A590,,"    public Map<Long, QuorumServer> getAllMembers() {
        return allMembers;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,getVotingMembers,"Map<Long, QuorumServer> getVotingMembers()","[148, 150]","{'A596': [(150, 150)], 'A590': [(148, 149)]}","{'A596': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public Map<Long, QuorumServer> getVotingMembers() {
        return votingMembers;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,getObservingMembers,"Map<Long, QuorumServer> getObservingMembers()","[152, 154]","{'A590': [(152, 154)]}",{'A590': 1.0},A590,,"    public Map<Long, QuorumServer> getObservingMembers() {
        return observingMembers;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,getVersion,long getVersion(),"[156, 158]","{'A590': [(156, 158)]}",{'A590': 1.0},A590,,"    public long getVersion() {
        return version;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumMaj.java,QuorumMaj,setVersion,void setVersion(long),"[160, 162]","{'A590': [(160, 162)]}",{'A590': 1.0},A590,,"    public void setVersion(long ver) {
        version = ver;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,hashCode,int hashCode(),"[81, 84]","{'A583': [(82, 84)], 'A590': [(81, 81)]}","{'A583': 0.75, 'A590': 0.25}",A583,,"    public int hashCode() {
        assert false : ""hashCode not designed"";
        return 42; // any arbitrary constant will do
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,equals,boolean equals(Object),"[86, 122]","{'A583': [(86, 121)], 'A590': [(122, 122)]}","{'A583': 0.972972972972973, 'A590': 0.02702702702702703}",A583,,"    public boolean equals(Object o) {
        if (!(o instanceof QuorumHierarchical)) {
            return false;
        }
        QuorumHierarchical qm = (QuorumHierarchical) o;
        if (qm.getVersion() == version) {
            return true;
        }
        if ((allMembers.size() != qm.getAllMembers().size())
            || (serverWeight.size() != qm.serverWeight.size())
            || (groupWeight.size() != qm.groupWeight.size())
            || (serverGroup.size() != qm.serverGroup.size())) {
            return false;
        }
        for (QuorumServer qs : allMembers.values()) {
            QuorumServer qso = qm.getAllMembers().get(qs.id);
            if (qso == null || !qs.equals(qso)) {
                return false;
            }
        }
        for (Entry<Long, Long> entry : serverWeight.entrySet()) {
            if (!entry.getValue().equals(qm.serverWeight.get(entry.getKey()))) {
                return false;
            }
        }
        for (Entry<Long, Long> entry : groupWeight.entrySet()) {
            if (!entry.getValue().equals(qm.groupWeight.get(entry.getKey()))) {
                return false;
            }
        }
        for (Entry<Long, Long> entry : serverGroup.entrySet()) {
            if (!entry.getValue().equals(qm.serverGroup.get(entry.getKey()))) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,getWeight,long getWeight(long),"[148, 150]","{'A583': [(148, 148)], 'A596': [(149, 150)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public long getWeight(long id) {
        return serverWeight.get(id);
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,readConfigFile,void readConfigFile(String),"[156, 181]","{'A583': [(156, 156), (159, 159), (163, 163), (165, 165), (173, 173), (180, 180)], 'A596': [(157, 158), (160, 162), (164, 164), (166, 172), (174, 179), (181, 181)]}","{'A583': 0.23076923076923078, 'A596': 0.7692307692307693}",A596,,"    private void readConfigFile(String filename) throws ConfigException {
        File configFile = new File(filename);

        LOG.info(""Reading configuration from: {}"", configFile);

        try {
            if (!configFile.exists()) {
                throw new IllegalArgumentException(configFile.toString() + "" file is missing"");
            }

            Properties cfg = new Properties();
            FileInputStream in = new FileInputStream(configFile);
            try {
                cfg.load(in);
            } finally {
                in.close();
            }

            parse(cfg);
        } catch (IOException e) {
            throw new ConfigException(""Error processing "" + filename, e);
        } catch (IllegalArgumentException e) {
            throw new ConfigException(""Error processing "" + filename, e);
        }

    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,parse,void parse(Properties),"[188, 241]","{'A583': [(188, 188), (191, 192), (197, 201), (206, 206), (208, 210), (212, 212), (214, 214), (216, 216), (218, 219), (223, 225), (227, 236), (239, 239)], 'A596': [(189, 190), (204, 205), (207, 207), (211, 211), (217, 217), (220, 222), (226, 226), (240, 241)], 'A590': [(193, 196), (202, 203), (213, 213), (215, 215), (237, 238)]}","{'A583': 0.5740740740740741, 'A596': 0.24074074074074073, 'A590': 0.18518518518518517}",A583,,"    private void parse(Properties quorumProp) throws ConfigException {
        for (Entry<Object, Object> entry : quorumProp.entrySet()) {
            String key = entry.getKey().toString();
            String value = entry.getValue().toString();

            if (key.startsWith(""server."")) {
                int dot = key.indexOf('.');
                long sid = Long.parseLong(key.substring(dot + 1));
                QuorumServer qs = new QuorumServer(sid, value);
                allMembers.put(Long.valueOf(sid), qs);
                if (qs.type == LearnerType.PARTICIPANT) {
                    participatingMembers.put(Long.valueOf(sid), qs);
                } else {
                    observingMembers.put(Long.valueOf(sid), qs);
                }
            } else if (key.startsWith(""group"")) {
                int dot = key.indexOf('.');
                long gid = Long.parseLong(key.substring(dot + 1));

                numGroups++;

                String[] parts = value.split("":"");
                for (String s : parts) {
                    long sid = Long.parseLong(s);
                    if (serverGroup.containsKey(sid)) {
                        throw new ConfigException(""Server "" + sid + ""is in multiple groups"");
                    } else {
                        serverGroup.put(sid, gid);
                    }
                }

            } else if (key.startsWith(""weight"")) {
                int dot = key.indexOf('.');
                long sid = Long.parseLong(key.substring(dot + 1));
                serverWeight.put(sid, Long.parseLong(value));
            } else if (key.equals(""version"")) {
                version = Long.parseLong(value, 16);
            }
        }

        for (QuorumServer qs : allMembers.values()) {
            Long id = qs.id;
            if (qs.type == LearnerType.PARTICIPANT) {
                if (!serverGroup.containsKey(id)) {
                    throw new ConfigException(""Server "" + id + ""is not in a group"");
                }
                if (!serverWeight.containsKey(id)) {
                    serverWeight.put(id, (long) 1);
                }
            }
        }

        computeGroupWeight();
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,getAllMembers,"Map<Long, QuorumServer> getAllMembers()","[243, 245]","{'A583': [(243, 244)], 'A590': [(245, 245)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    public Map<Long, QuorumServer> getAllMembers() {
        return allMembers;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,toString,String toString(),"[246, 294]","{'A583': [(246, 250), (255, 257), (259, 273), (278, 283), (288, 293)], 'A590': [(251, 254), (274, 277), (284, 287), (294, 294)], 'A605': [(258, 258)]}","{'A583': 0.7142857142857143, 'A590': 0.2653061224489796, 'A605': 0.02040816326530612}",A583,,"    public String toString() {
        StringWriter sw = new StringWriter();

        for (QuorumServer member : getAllMembers().values()) {
            String key = ""server."" + member.id;
            String value = member.toString();
            sw.append(key);
            sw.append('=');
            sw.append(value);
            sw.append('\n');
        }

        Map<Long, String> groups = new HashMap<>();
        for (Entry<Long, Long> pair : serverGroup.entrySet()) {
            Long sid = pair.getKey();
            Long gid = pair.getValue();
            String str = groups.get(gid);
            if (str == null) {
                str = sid.toString();
            } else {
                str = str.concat("":"").concat(sid.toString());
            }
            groups.put(gid, str);
        }

        for (Entry<Long, String> pair : groups.entrySet()) {
            Long gid = pair.getKey();
            String key = ""group."" + gid.toString();
            String value = pair.getValue();
            sw.append(key);
            sw.append('=');
            sw.append(value);
            sw.append('\n');
        }

        for (Entry<Long, Long> pair : serverWeight.entrySet()) {
            Long sid = pair.getKey();
            String key = ""weight."" + sid.toString();
            String value = pair.getValue().toString();
            sw.append(key);
            sw.append('=');
            sw.append(value);
            sw.append('\n');
        }

        sw.append(""version="" + Long.toHexString(version));

        return sw.toString();
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,computeGroupWeight,void computeGroupWeight(),"[301, 323]","{'A583': [(301, 301), (305, 305), (307, 307), (312, 312), (316, 316), (318, 318)], 'A596': [(306, 306), (308, 309), (313, 315), (319, 319), (321, 323)], 'A604': [(302, 304), (310, 311)], 'A620': [(317, 317), (320, 320)]}","{'A583': 0.2608695652173913, 'A596': 0.43478260869565216, 'A604': 0.21739130434782608, 'A620': 0.08695652173913043}",A596,,"    private void computeGroupWeight() {
        for (Entry<Long, Long> entry : serverGroup.entrySet()) {
            Long sid = entry.getKey();
            Long gid = entry.getValue();
            if (!groupWeight.containsKey(gid)) {
                groupWeight.put(gid, serverWeight.get(sid));
            } else {
                long totalWeight = serverWeight.get(sid) + groupWeight.get(gid);
                groupWeight.put(gid, totalWeight);
            }
        }

        /*
         * Do not consider groups with weight zero
         */
        for (long weight : groupWeight.values()) {
            LOG.debug(""Group weight: {}"", weight);
            if (weight == ((long) 0)) {
                numGroups--;
                LOG.debug(""One zero-weight group: 1, {}"", numGroups);
            }
        }
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,containsQuorum,boolean containsQuorum(Set<Long>),"[328, 372]","{'A583': [(328, 328), (330, 330), (335, 337), (339, 339), (341, 344), (346, 346), (351, 351), (359, 359), (361, 361), (365, 365)], 'A596': [(331, 333), (340, 340), (345, 345), (347, 350), (352, 355), (360, 360), (362, 362), (367, 367), (370, 371)], 'A605': [(329, 329)], 'A604': [(356, 358), (363, 364), (366, 366), (368, 369), (372, 372)], 'A620': [(334, 334), (338, 338)]}","{'A583': 0.3333333333333333, 'A596': 0.4, 'A605': 0.022222222222222223, 'A604': 0.2, 'A620': 0.044444444444444446}",A596,,"    public boolean containsQuorum(Set<Long> set) {
        HashMap<Long, Long> expansion = new HashMap<>();

        /*
         * Adds up weights per group
         */
        LOG.debug(""Set size: {}"", set.size());
        if (set.size() == 0) {
            return false;
        }

        for (long sid : set) {
            Long gid = serverGroup.get(sid);
            if (gid == null) {
                continue;
            }
            if (!expansion.containsKey(gid)) {
                expansion.put(gid, serverWeight.get(sid));
            } else {
                long totalWeight = serverWeight.get(sid) + expansion.get(gid);
                expansion.put(gid, totalWeight);
            }
        }

        /*
         * Check if all groups have majority
         */
        int majGroupCounter = 0;
        for (Entry<Long, Long> entry : expansion.entrySet()) {
            Long gid = entry.getKey();
            LOG.debug(""Group info: {}, {}, {}"", entry.getValue(), gid, groupWeight.get(gid));
            if (entry.getValue() > (groupWeight.get(gid) / 2)) {
                majGroupCounter++;
            }
        }

        LOG.debug(""Majority group counter: {}, {}"", majGroupCounter, numGroups);
        if ((majGroupCounter > (numGroups / 2))) {
            LOG.debug(""Positive set size: {}"", set.size());
            return true;
        } else {
            LOG.debug(""Negative set size: {}"", set.size());
            return false;
        }
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,getVotingMembers,"Map<Long, QuorumServer> getVotingMembers()","[373, 375]","{'A583': [(374, 375)], 'A604': [(373, 373)]}","{'A583': 0.6666666666666666, 'A604': 0.3333333333333333}",A583,,"    public Map<Long, QuorumServer> getVotingMembers() {
        return participatingMembers;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,getObservingMembers,"Map<Long, QuorumServer> getObservingMembers()","[377, 379]","{'A583': [(377, 379)]}",{'A583': 1.0},A583,,"    public Map<Long, QuorumServer> getObservingMembers() {
        return observingMembers;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,getVersion,long getVersion(),"[381, 383]","{'A583': [(381, 383)]}",{'A583': 1.0},A583,,"    public long getVersion() {
        return version;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumHierarchical.java,QuorumHierarchical,setVersion,void setVersion(long),"[385, 387]","{'A583': [(385, 387)]}",{'A583': 1.0},A583,,"    public void setVersion(long ver) {
        version = ver;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,updateNeedOracle,boolean updateNeedOracle(List<LearnerHandler>),"[51, 53]","{'A651': [(51, 53)]}",{'A651': 1.0},A651,,"    default boolean updateNeedOracle(List<LearnerHandler> forwardingFollowers) {
        return false;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,getNeedOracle,boolean getNeedOracle(),"[54, 56]","{'A651': [(54, 56)]}",{'A651': 1.0},A651,,"    default boolean getNeedOracle() {
        return false;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,askOracle,boolean askOracle(),"[58, 60]","{'A651': [(58, 60)]}",{'A651': 1.0},A651,,"    default boolean askOracle() {
        return false;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,overrideQuorumDecision,boolean overrideQuorumDecision(List<LearnerHandler>),"[62, 64]","{'A651': [(62, 64)]}",{'A651': 1.0},A651,,"    default boolean overrideQuorumDecision(List<LearnerHandler> forwardingFollowers) {
        return false;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,revalidateOutstandingProp,"boolean revalidateOutstandingProp(Leader,ArrayList<Leader.Proposal>,long)","[66, 68]","{'A651': [(66, 68)]}",{'A651': 1.0},A651,,"    default boolean revalidateOutstandingProp(Leader self, ArrayList<Leader.Proposal> outstandingProposal, long lastCommitted) {
        return false;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,revalidateVoteset,"boolean revalidateVoteset(SyncedLearnerTracker,boolean)","[70, 72]","{'A651': [(70, 72)]}",{'A651': 1.0},A651,,"    default boolean revalidateVoteset(SyncedLearnerTracker voteSet, boolean timeout) {
        return false;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumVerifier.java,,getOraclePath,String getOraclePath(),"[74, 76]","{'A651': [(74, 76)]}",{'A651': 1.0},A651,,"    default String getOraclePath() {
        return null;
    };
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,setOracle,void setOracle(String),"[63, 70]","{'A651': [(63, 70)]}",{'A651': 1.0},A651,,"    private void setOracle(String path) {
        if (oracle == null) {
            oracle = path;
            LOG.info(""Oracle is set to {}"", path);
        } else {
            LOG.warn(""Oracle is already set. Ignore:{}"", path);
        }
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,updateNeedOracle,boolean updateNeedOracle(List<LearnerHandler>),"[72, 77]","{'A651': [(72, 77)]}",{'A651': 1.0},A651,,"    @Override
    public boolean updateNeedOracle(List<LearnerHandler> forwardingFollowers) {
        // Do we have the quorum
        needOracle.set(forwardingFollowers.isEmpty() && super.getVotingMembers().size() == 2);
        return needOracle.get();
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,askOracle,boolean askOracle(),"[79, 104]","{'A651': [(79, 104)]}",{'A651': 1.0},A651,,"    @Override
    public boolean askOracle() {
        FileReader fr = null;
        try {
            int read;
            fr = new FileReader(FilenameUtils.getFullPath(oracle) + FilenameUtils.getName(oracle));
            read = fr.read();
            LOG.debug(""Oracle says:{}"", (char) read);
            fr.close();
            return (char) read == '1';
        } catch (Exception e) {
            e.printStackTrace();
            if (oracle == null) {
                LOG.error(""Oracle is not set, return false"");
            }
            return false;
        } finally {
            if (fr != null) {
                try {
                    fr.close();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,getNeedOracle,boolean getNeedOracle(),"[106, 109]","{'A651': [(106, 109)]}",{'A651': 1.0},A651,,"    @Override
    public boolean getNeedOracle() {
        return needOracle.get();
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,getOraclePath,String getOraclePath(),"[111, 114]","{'A651': [(111, 114)]}",{'A651': 1.0},A651,,"    @Override
    public String getOraclePath() {
        return oracle;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,overrideQuorumDecision,boolean overrideQuorumDecision(List<LearnerHandler>),"[116, 119]","{'A651': [(116, 117), (119, 119)], 'A719': [(118, 118)]}","{'A651': 0.75, 'A719': 0.25}",A651,,"    @Override
    public boolean overrideQuorumDecision(List<LearnerHandler> forwardingFollowers) {
        return updateNeedOracle(forwardingFollowers) && askOracle();
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,revalidateOutstandingProp,"boolean revalidateOutstandingProp(Leader,ArrayList<Leader.Proposal>,long)","[121, 150]","{'A651': [(121, 125), (127, 131), (135, 136), (138, 150)], 'A595': [(126, 126), (132, 134), (137, 137)]}","{'A651': 0.8333333333333334, 'A595': 0.16666666666666666}",A651,,"    @Override
    public boolean revalidateOutstandingProp(Leader self, ArrayList<Leader.Proposal> outstandingProposal, long lastCommitted) {
        LOG.debug(""Start Revalidation outstandingProposals"");
        try {
            while (outstandingProposal.size() >= 1) {
                outstandingProposal.sort((o1, o2) -> (int) (o1.getZxid() - o2.getZxid()));

                Leader.Proposal p;
                int i = 0;
                while (i < outstandingProposal.size()) {
                    p = outstandingProposal.get(i);
                    if (p.getZxid() > lastCommitted) {
                        LOG.debug(""Re-validate outstanding proposal: 0x{} size:{} lastCommitted:{}"", Long.toHexString(p.getZxid()), outstandingProposal.size(), Long.toHexString(lastCommitted));
                        if (!self.tryToCommit(p, p.getZxid(), null)) {
                            break;
                        } else {
                            lastCommitted = p.getZxid();
                            outstandingProposal.remove(p);
                        }
                    }
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }

        LOG.debug(""Finish Revalidation outstandingProposals"");
        return true;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,revalidateVoteset,"boolean revalidateVoteset(SyncedLearnerTracker,boolean)","[152, 155]","{'A651': [(152, 155)]}",{'A651': 1.0},A651,,"    @Override
    public boolean revalidateVoteset(SyncedLearnerTracker voteSet, boolean timeout) {
        return voteSet != null && voteSet.hasAllQuorums() && timeout;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,containsQuorum,boolean containsQuorum(Set<Long>),"[157, 171]","{'A651': [(157, 171)]}",{'A651': 1.0},A651,,"    @Override
    public boolean containsQuorum(Set<Long> ackSet) {
        if (oracle == null || getVotingMembers().size() > 2) {
            return super.containsQuorum(ackSet);
        } else if (!super.containsQuorum(ackSet)) {
            if (getNeedOracle()) {
                LOG.debug(""We lose the quorum, but we do not have any valid followers Oracle:{}"", askOracle());
                return askOracle();
            } else {
                return false;
            }
        } else {
            return true;
        }
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,equals,boolean equals(Object),"[173, 192]","{'A651': [(173, 192)]}",{'A651': 1.0},A651,,"    @Override
    public boolean equals(Object o) {
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        QuorumOracleMaj qm = (QuorumOracleMaj) o;
        if (qm.getVersion() == super.getVersion()) {
            return true;
        }
        if (super.getAllMembers().size() != qm.getAllMembers().size()) {
            return false;
        }
        for (QuorumPeer.QuorumServer qs : super.getAllMembers().values()) {
            QuorumPeer.QuorumServer qso = qm.getAllMembers().get(qs.id);
            if (qso == null || !qs.equals(qso)) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum.flexible,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/flexible/QuorumOracleMaj.java,QuorumOracleMaj,hashCode,int hashCode(),"[194, 198]","{'A651': [(194, 198)]}",{'A651': 1.0},A651,,"    @Override
    public int hashCode() {
        assert false : ""hashCode not designed"";
        return 43; // any arbitrary constant will do
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.Proposal,getQuorumPacket,QuorumPacket getQuorumPacket(),"[106, 108]","{'A595': [(106, 108)]}",{'A595': 1.0},A595,,"        public QuorumPacket getQuorumPacket() {
            return packet;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.Proposal,getRequest,Request getRequest(),"[110, 112]","{'A595': [(110, 112)]}",{'A595': 1.0},A595,,"        public Request getRequest() {
            return request;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.Proposal,getZxid,long getZxid(),"[114, 116]","{'A595': [(114, 116)]}",{'A595': 1.0},A595,,"        public long getZxid() {
            return packet.getZxid();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.Proposal,toString,String toString(),"[118, 121]","{'A590': [(118, 121)]}",{'A590': 1.0},A590,,"        @Override
        public String toString() {
            return packet.getType() + "", "" + packet.getZxid() + "", "" + request;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.PureRequestProposal,getQuorumPacket,QuorumPacket getQuorumPacket(),"[130, 134]","{'A595': [(130, 134)]}",{'A595': 1.0},A595,,"        @Override
        public QuorumPacket getQuorumPacket() {
            byte[] data = request.getSerializeData();
            return new QuorumPacket(Leader.PROPOSAL, request.zxid, data, null);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.PureRequestProposal,getZxid,long getZxid(),"[136, 139]","{'A595': [(136, 139)]}",{'A595': 1.0},A595,,"        @Override
        public long getZxid() {
            return request.zxid;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.PureRequestProposal,toString,String toString(),"[141, 144]","{'A595': [(141, 144)]}",{'A595': 1.0},A595,,"        @Override
        public String toString() {
            return request.toString();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,setAckLoggingFrequency,void setAckLoggingFrequency(int),"[156, 158]","{'A675': [(156, 158)]}",{'A675': 1.0},A675,,"    public static void setAckLoggingFrequency(int frequency) {
        ackLoggingFrequency = frequency;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getAckLoggingFrequency,int getAckLoggingFrequency(),"[160, 162]","{'A675': [(160, 162)]}",{'A675': 1.0},A675,,"    public static int getAckLoggingFrequency() {
        return ackLoggingFrequency;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getProposalStats,BufferStats getProposalStats(),"[179, 181]","{'A613': [(179, 179)], 'A628': [(180, 181)]}","{'A613': 0.3333333333333333, 'A628': 0.6666666666666666}",A628,,"    public BufferStats getProposalStats() {
        return proposalStats;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getLearners,List<LearnerHandler> getLearners(),"[189, 193]","{'A605': [(191, 191)], 'A639': [(189, 190), (192, 193)]}","{'A605': 0.2, 'A639': 0.8}",A639,,"    public List<LearnerHandler> getLearners() {
        synchronized (learners) {
            return new ArrayList<>(learners);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getForwardingFollowers,List<LearnerHandler> getForwardingFollowers(),"[201, 205]","{'A605': [(203, 203)], 'A639': [(201, 202), (204, 205)]}","{'A605': 0.2, 'A639': 0.8}",A639,,"    public List<LearnerHandler> getForwardingFollowers() {
        synchronized (forwardingFollowers) {
            return new ArrayList<>(forwardingFollowers);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getNonVotingFollowers,List<LearnerHandler> getNonVotingFollowers(),"[207, 217]","{'A612': [(207, 207), (209, 217)], 'A605': [(208, 208)]}","{'A612': 0.9090909090909091, 'A605': 0.09090909090909091}",A612,,"    public List<LearnerHandler> getNonVotingFollowers() {
        List<LearnerHandler> nonVotingFollowers = new ArrayList<>();
        synchronized (forwardingFollowers) {
            for (LearnerHandler lh : forwardingFollowers) {
                if (!isParticipant(lh.getSid())) {
                    nonVotingFollowers.add(lh);
                }
            }
        }
        return nonVotingFollowers;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,addForwardingFollower,void addForwardingFollower(LearnerHandler),"[219, 227]","{'A612': [(219, 219)], 'A639': [(220, 221), (226, 227)], 'A651': [(222, 225)]}","{'A612': 0.1111111111111111, 'A639': 0.4444444444444444, 'A651': 0.4444444444444444}",A639,,"    void addForwardingFollower(LearnerHandler lh) {
        synchronized (forwardingFollowers) {
            forwardingFollowers.add(lh);
            /*
            * Any changes on forwardiongFollowers could possible affect the need of Oracle.
            * */
            self.getQuorumVerifier().updateNeedOracle(new ArrayList<>(forwardingFollowers));
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getObservingLearners,List<LearnerHandler> getObservingLearners(),"[234, 238]","{'A605': [(236, 236)], 'A639': [(234, 235), (237, 238)]}","{'A605': 0.2, 'A639': 0.8}",A639,,"    public List<LearnerHandler> getObservingLearners() {
        synchronized (observingLearners) {
            return new ArrayList<>(observingLearners);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,addObserverLearnerHandler,void addObserverLearnerHandler(LearnerHandler),"[240, 244]","{'A639': [(240, 244)]}",{'A639': 1.0},A639,,"    private void addObserverLearnerHandler(LearnerHandler lh) {
        synchronized (observingLearners) {
            observingLearners.add(lh);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getObservingLearnersInfo,"Iterable<Map<String, Object>> getObservingLearnersInfo()","[246, 254]","{'A583': [(247, 247), (249, 249)], 'A647': [(246, 246), (248, 248), (250, 254)]}","{'A583': 0.2222222222222222, 'A647': 0.7777777777777778}",A647,,"    public Iterable<Map<String, Object>> getObservingLearnersInfo() {
        Set<Map<String, Object>> info = new HashSet<>();
        synchronized (observingLearners) {
            for (LearnerHandler lh : observingLearners) {
                info.add(lh.getLearnerHandlerInfo());
            }
        }
        return info;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,resetObserverConnectionStats,void resetObserverConnectionStats(),"[256, 262]","{'A647': [(256, 262)]}",{'A647': 1.0},A647,,"    public void resetObserverConnectionStats() {
        synchronized (observingLearners) {
            for (LearnerHandler lh : observingLearners) {
                lh.resetObserverConnectionStats();
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getNumPendingSyncs,int getNumPendingSyncs(),"[267, 269]","{'A583': [(267, 267)], 'A639': [(268, 269)]}","{'A583': 0.3333333333333333, 'A639': 0.6666666666666666}",A639,,"    public synchronized int getNumPendingSyncs() {
        return pendingSyncs.size();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,addLearnerHandler,void addLearnerHandler(LearnerHandler),"[280, 285]","{'A590': [(284, 285)], 'A647': [(280, 281)], 'A596': [(282, 283)]}","{'A590': 0.3333333333333333, 'A647': 0.3333333333333333, 'A596': 0.3333333333333333}",A590,,"    @Override
    public void addLearnerHandler(LearnerHandler learner) {
        synchronized (learners) {
            learners.add(learner);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,removeLearnerHandler,void removeLearnerHandler(LearnerHandler),"[292, 303]","{'A591': [(295, 296)], 'A590': [(294, 294), (299, 299), (303, 303)], 'A647': [(292, 293)], 'A596': [(297, 298)], 'A639': [(300, 302)]}","{'A591': 0.16666666666666666, 'A590': 0.25, 'A647': 0.16666666666666666, 'A596': 0.16666666666666666, 'A639': 0.25}",A590,,"    @Override
    public void removeLearnerHandler(LearnerHandler peer) {
        synchronized (forwardingFollowers) {
            forwardingFollowers.remove(peer);
        }
        synchronized (learners) {
            learners.remove(peer);
        }
        synchronized (observingLearners) {
            observingLearners.remove(peer);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,isLearnerSynced,boolean isLearnerSynced(LearnerHandler),"[305, 309]","{'A583': [(305, 305)], 'A591': [(308, 308)], 'A596': [(307, 307)], 'A688': [(306, 306), (309, 309)]}","{'A583': 0.2, 'A591': 0.2, 'A596': 0.2, 'A688': 0.4}",A688,,"    boolean isLearnerSynced(LearnerHandler peer) {
        synchronized (forwardingFollowers) {
            return forwardingFollowers.contains(peer);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,isQuorumSynced,boolean isQuorumSynced(QuorumVerifier),"[317, 330]","{'A583': [(321, 329)], 'A590': [(317, 317), (330, 330)], 'A605': [(318, 318)], 'A702': [(319, 320)]}","{'A583': 0.6428571428571429, 'A590': 0.14285714285714285, 'A605': 0.07142857142857142, 'A702': 0.14285714285714285}",A583,,"    public boolean isQuorumSynced(QuorumVerifier qv) {
        HashSet<Long> ids = new HashSet<>();
        if (qv.getVotingMembers().containsKey(self.getMyId())) {
            ids.add(self.getMyId());
        }
        synchronized (forwardingFollowers) {
            for (LearnerHandler learnerHandler : forwardingFollowers) {
                if (learnerHandler.synced() && qv.getVotingMembers().containsKey(learnerHandler.getSid())) {
                    ids.add(learnerHandler.getSid());
                }
            }
        }
        return qv.containsQuorum(ids);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,recreateInetSocketAddr,"InetSocketAddress recreateInetSocketAddr(String,int)","[358, 360]","{'A720': [(358, 360)]}",{'A720': 1.0},A720,,"    InetSocketAddress recreateInetSocketAddr(String hostString, int port) {
        return new InetSocketAddress(hostString, port);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,createServerSocket,"Optional<ServerSocket> createServerSocket(InetSocketAddress,boolean,boolean)","[362, 377]","{'A590': [(364, 364), (375, 375), (377, 377)], 'A653': [(362, 363), (365, 366), (368, 368), (370, 370), (372, 374), (376, 376)], 'A597': [(367, 367), (369, 369)], 'A720': [(371, 371)]}","{'A590': 0.1875, 'A653': 0.625, 'A597': 0.125, 'A720': 0.0625}",A653,,"    Optional<ServerSocket> createServerSocket(InetSocketAddress address, boolean portUnification, boolean sslQuorum) {
        ServerSocket serverSocket;
        try {
            if (portUnification || sslQuorum) {
                serverSocket = new UnifiedServerSocket(self.getX509Util(), portUnification);
            } else {
                serverSocket = new ServerSocket();
            }
            serverSocket.setReuseAddress(true);
            serverSocket.bind(recreateInetSocketAddr(address.getHostString(), address.getPort()));
            return Optional.of(serverSocket);
        } catch (IOException e) {
            LOG.error(""Couldn't bind to {}"", address.toString(), e);
        }
        return Optional.empty();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.LearnerCnxAcceptor,run,void run(),"[502, 527]","{'A590': [(502, 503), (524, 527)], 'A653': [(504, 517), (519, 520), (522, 523)], 'A627': [(518, 518), (521, 521)]}","{'A590': 0.23076923076923078, 'A653': 0.6923076923076923, 'A627': 0.07692307692307693}",A653,,"        @Override
        public void run() {
            if (!stop.get() && !serverSockets.isEmpty()) {
                ExecutorService executor = Executors.newFixedThreadPool(serverSockets.size());
                CountDownLatch latch = new CountDownLatch(serverSockets.size());

                serverSockets.forEach(serverSocket ->
                        executor.submit(new LearnerCnxAcceptorHandler(serverSocket, latch)));

                try {
                    latch.await();
                } catch (InterruptedException ie) {
                    LOG.error(""Interrupted while sleeping in LearnerCnxAcceptor."", ie);
                } finally {
                    closeSockets();
                    executor.shutdown();
                    try {
                        if (!executor.awaitTermination(1, TimeUnit.SECONDS)) {
                            LOG.error(""not all the LearnerCnxAcceptorHandler terminated properly"");
                        }
                    } catch (InterruptedException ie) {
                        LOG.error(""Interrupted while terminating LearnerCnxAcceptor."", ie);
                    }
                }
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.LearnerCnxAcceptor,halt,void halt(),"[529, 532]","{'A590': [(529, 529)], 'A653': [(530, 532)]}","{'A590': 0.25, 'A653': 0.75}",A653,,"        public void halt() {
            stop.set(true);
            closeSockets();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.LearnerCnxAcceptor.LearnerCnxAcceptorHandler,run,void run(),"[543, 560]","{'A653': [(543, 560)]}",{'A653': 1.0},A653,,"            @Override
            public void run() {
                try {
                    Thread.currentThread().setName(""LearnerCnxAcceptorHandler-"" + serverSocket.getLocalSocketAddress());

                    while (!stop.get()) {
                        acceptConnections();
                    }
                } catch (Exception e) {
                    LOG.warn(""Exception while accepting follower"", e);
                    if (fail.compareAndSet(false, true)) {
                        handleException(getName(), e);
                        halt();
                    }
                } finally {
                    latch.countDown();
                }
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.LearnerCnxAcceptor.LearnerCnxAcceptorHandler,acceptConnections,void acceptConnections(),"[562, 599]","{'A653': [(562, 599)]}",{'A653': 1.0},A653,,"            private void acceptConnections() throws IOException {
                Socket socket = null;
                boolean error = false;
                try {
                    socket = serverSocket.accept();

                    // start with the initLimit, once the ack is processed
                    // in LearnerHandler switch to the syncLimit
                    socket.setSoTimeout(self.tickTime * self.initLimit);
                    socket.setTcpNoDelay(nodelay);

                    BufferedInputStream is = new BufferedInputStream(socket.getInputStream());
                    LearnerHandler fh = new LearnerHandler(socket, is, Leader.this);
                    fh.start();
                } catch (SocketException e) {
                    error = true;
                    if (stop.get()) {
                        LOG.warn(""Exception while shutting down acceptor."", e);
                    } else {
                        throw e;
                    }
                } catch (SaslException e) {
                    LOG.error(""Exception while connecting to quorum learner"", e);
                    error = true;
                } catch (Exception e) {
                    error = true;
                    throw e;
                } finally {
                    // Don't leak sockets on errors
                    if (error && socket != null && !socket.isClosed()) {
                        try {
                            socket.close();
                        } catch (IOException e) {
                            LOG.warn(""Error closing socket: "" + socket, e);
                        }
                    }
                }
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getUptime,long getUptime(),"[619, 624]","{'A713': [(619, 624)]}",{'A713': 1.0},A713,,"    public long getUptime() {
        if (leaderStartTime > 0) {
            return Time.currentElapsedTime() - leaderStartTime;
        }
        return 0;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,lead,void lead(),"[632, 854]","{'A583': [(637, 637), (659, 659), (663, 663), (666, 666), (691, 691), (693, 698), (702, 703), (711, 711), (715, 715), (717, 720), (722, 741), (794, 795), (837, 838)], 'A591': [(641, 643), (645, 647), (650, 650), (654, 654), (656, 656), (658, 658), (662, 662), (665, 665), (706, 708), (743, 761), (763, 764), (766, 770), (773, 774), (783, 783), (785, 785), (851, 852)], 'A590': [(632, 632), (648, 649), (651, 653), (657, 657), (660, 661), (667, 672), (674, 675), (677, 678), (681, 681), (683, 683), (685, 685), (687, 690), (699, 699), (701, 701), (704, 704), (796, 796), (845, 846), (853, 854)], 'A647': [(644, 644), (713, 713), (765, 765)], 'A653': [(692, 692)], 'A597': [(638, 640), (806, 807), (811, 812)], 'A596': [(664, 664)], 'A593': [(633, 633), (775, 782), (784, 784), (786, 786), (788, 793), (797, 797), (799, 805), (834, 834), (840, 843)], 'A612': [(673, 673), (676, 676), (679, 680), (682, 682), (684, 684), (686, 686), (700, 700), (705, 705), (709, 709), (714, 714), (742, 742)], 'A605': [(721, 721)], 'A639': [(787, 787), (844, 844)], 'A651': [(813, 833)], 'A702': [(655, 655), (710, 710), (712, 712), (716, 716), (771, 772), (798, 798), (835, 836), (839, 839), (847, 850)], 'A630': [(634, 635), (762, 762)], 'A584': [(636, 636)], 'A592': [(808, 810)]}","{'A583': 0.19282511210762332, 'A591': 0.21076233183856502, 'A590': 0.15246636771300448, 'A647': 0.013452914798206279, 'A653': 0.004484304932735426, 'A597': 0.03139013452914798, 'A596': 0.004484304932735426, 'A593': 0.13452914798206278, 'A612': 0.053811659192825115, 'A605': 0.004484304932735426, 'A639': 0.008968609865470852, 'A651': 0.09417040358744394, 'A702': 0.06278026905829596, 'A630': 0.013452914798206279, 'A584': 0.004484304932735426, 'A592': 0.013452914798206279}",A591,,"    void lead() throws IOException, InterruptedException {
        self.end_fle = Time.currentElapsedTime();
        long electionTimeTaken = self.end_fle - self.start_fle;
        self.setElectionTimeTaken(electionTimeTaken);
        ServerMetrics.getMetrics().ELECTION_TIME.add(electionTimeTaken);
        LOG.info(""LEADING - LEADER ELECTION TOOK - {} {}"", electionTimeTaken, QuorumPeer.FLE_TIME_UNIT);
        self.start_fle = 0;
        self.end_fle = 0;

        zk.registerJMX(new LeaderBean(this, zk), self.jmxLocalPeerBean);

        try {
            self.setZabState(QuorumPeer.ZabState.DISCOVERY);
            self.tick.set(0);
            zk.loadData();

            leaderStateSummary = new StateSummary(self.getCurrentEpoch(), zk.getLastProcessedZxid());

            // Start thread that waits for connection requests from
            // new followers.
            cnxAcceptor = new LearnerCnxAcceptor();
            cnxAcceptor.start();

            long epoch = getEpochToPropose(self.getMyId(), self.getAcceptedEpoch());

            zk.setZxid(ZxidUtils.makeZxid(epoch, 0));

            synchronized (this) {
                lastProposed = zk.getZxid();
            }

            newLeaderProposal.packet = new QuorumPacket(NEWLEADER, zk.getZxid(), null, null);

            if ((newLeaderProposal.packet.getZxid() & 0xffffffffL) != 0) {
                LOG.info(""NEWLEADER proposal has Zxid of {}"", Long.toHexString(newLeaderProposal.packet.getZxid()));
            }

            QuorumVerifier lastSeenQV = self.getLastSeenQuorumVerifier();
            QuorumVerifier curQV = self.getQuorumVerifier();
            if (curQV.getVersion() == 0 && curQV.getVersion() == lastSeenQV.getVersion()) {
                // This was added in ZOOKEEPER-1783. The initial config has version 0 (not explicitly
                // specified by the user; the lack of version in a config file is interpreted as version=0).
                // As soon as a config is established we would like to increase its version so that it
                // takes presedence over other initial configs that were not established (such as a config
                // of a server trying to join the ensemble, which may be a partial view of the system, not the full config).
                // We chose to set the new version to the one of the NEWLEADER message. However, before we can do that
                // there must be agreement on the new version, so we can only change the version when sending/receiving UPTODATE,
                // not when sending/receiving NEWLEADER. In other words, we can't change curQV here since its the committed quorum verifier,
                // and there's still no agreement on the new version that we'd like to use. Instead, we use
                // lastSeenQuorumVerifier which is being sent with NEWLEADER message
                // so its a good way to let followers know about the new version. (The original reason for sending
                // lastSeenQuorumVerifier with NEWLEADER is so that the leader completes any potentially uncommitted reconfigs
                // that it finds before starting to propose operations. Here we're reusing the same code path for
                // reaching consensus on the new version number.)

                // It is important that this is done before the leader executes waitForEpochAck,
                // so before LearnerHandlers return from their waitForEpochAck
                // hence before they construct the NEWLEADER message containing
                // the last-seen-quorumverifier of the leader, which we change below
                try {
                    LOG.debug(String.format(""set lastSeenQuorumVerifier to currentQuorumVerifier (%s)"", curQV.toString()));
                    QuorumVerifier newQV = self.configFromString(curQV.toString());
                    newQV.setVersion(zk.getZxid());
                    self.setLastSeenQuorumVerifier(newQV, true);
                } catch (Exception e) {
                    throw new IOException(e);
                }
            }

            newLeaderProposal.addQuorumVerifier(self.getQuorumVerifier());
            if (self.getLastSeenQuorumVerifier().getVersion() > self.getQuorumVerifier().getVersion()) {
                newLeaderProposal.addQuorumVerifier(self.getLastSeenQuorumVerifier());
            }

            // We have to get at least a majority of servers in sync with
            // us. We do this by waiting for the NEWLEADER packet to get
            // acknowledged

            waitForEpochAck(self.getMyId(), leaderStateSummary);
            self.setCurrentEpoch(epoch);
            self.setLeaderAddressAndId(self.getQuorumAddress(), self.getMyId());
            self.setZabState(QuorumPeer.ZabState.SYNCHRONIZATION);

            try {
                waitForNewLeaderAck(self.getMyId(), zk.getZxid());
            } catch (InterruptedException e) {
                shutdown(""Waiting for a quorum of followers, only synced with sids: [ ""
                         + newLeaderProposal.ackSetsToString()
                         + "" ]"");
                HashSet<Long> followerSet = new HashSet<>();

                for (LearnerHandler f : getLearners()) {
                    if (self.getQuorumVerifier().getVotingMembers().containsKey(f.getSid())) {
                        followerSet.add(f.getSid());
                    }
                }
                boolean initTicksShouldBeIncreased = true;
                for (Proposal.QuorumVerifierAcksetPair qvAckset : newLeaderProposal.qvAcksetPairs) {
                    if (!qvAckset.getQuorumVerifier().containsQuorum(followerSet)) {
                        initTicksShouldBeIncreased = false;
                        break;
                    }
                }
                if (initTicksShouldBeIncreased) {
                    LOG.warn(""Enough followers present. Perhaps the initTicks need to be increased."");
                }
                return;
            }

            startZkServer();

            /**
             * WARNING: do not use this for anything other than QA testing
             * on a real cluster. Specifically to enable verification that quorum
             * can handle the lower 32bit roll-over issue identified in
             * ZOOKEEPER-1277. Without this option it would take a very long
             * time (on order of a month say) to see the 4 billion writes
             * necessary to cause the roll-over to occur.
             *
             * This field allows you to override the zxid of the server. Typically
             * you'll want to set it to something like 0xfffffff0 and then
             * start the quorum, run some operations and see the re-election.
             */
            String initialZxid = System.getProperty(""zookeeper.testingonly.initialZxid"");
            if (initialZxid != null) {
                long zxid = Long.parseLong(initialZxid);
                zk.setZxid((zk.getZxid() & 0xffffffff00000000L) | zxid);
            }

            if (!System.getProperty(""zookeeper.leaderServes"", ""yes"").equals(""no"")) {
                self.setZooKeeperServer(zk);
            }

            self.setZabState(QuorumPeer.ZabState.BROADCAST);
            self.adminServer.setZooKeeperServer(zk);

            // We ping twice a tick, so we only update the tick every other
            // iteration
            boolean tickSkip = true;
            // If not null then shutdown this leader
            String shutdownMessage = null;

            while (true) {
                synchronized (this) {
                    long start = Time.currentElapsedTime();
                    long cur = start;
                    long end = start + self.tickTime / 2;
                    while (cur < end) {
                        wait(end - cur);
                        cur = Time.currentElapsedTime();
                    }

                    if (!tickSkip) {
                        self.tick.incrementAndGet();
                    }

                    // We use an instance of SyncedLearnerTracker to
                    // track synced learners to make sure we still have a
                    // quorum of current (and potentially next pending) view.
                    SyncedLearnerTracker syncedAckSet = new SyncedLearnerTracker();
                    syncedAckSet.addQuorumVerifier(self.getQuorumVerifier());
                    if (self.getLastSeenQuorumVerifier() != null
                        && self.getLastSeenQuorumVerifier().getVersion() > self.getQuorumVerifier().getVersion()) {
                        syncedAckSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());
                    }

                    syncedAckSet.addAck(self.getMyId());

                    for (LearnerHandler f : getLearners()) {
                        if (f.synced()) {
                            syncedAckSet.addAck(f.getSid());
                        }
                    }

                    // check leader running status
                    if (!this.isRunning()) {
                        // set shutdown flag
                        shutdownMessage = ""Unexpected internal error"";
                        break;
                    }

                    /*
                     *
                     * We will need to re-validate the outstandingProposal to maintain the progress of ZooKeeper.
                     * It is likely a proposal is waiting for enough ACKs to be committed. The proposals are sent out, but the
                     * only follower goes away which makes the proposals will not be committed until the follower recovers back.
                     * An earlier proposal which is not committed will block any further proposals. So, We need to re-validate those
                     * outstanding proposal with the help from Oracle. A key point in the process of re-validation is that the proposals
                     * need to be processed in order.
                     *
                     * We make the whole method blocking to avoid any possible race condition on outstandingProposal and lastCommitted
                     * as well as to avoid nested synchronization.
                     *
                     * As a more generic approach, we pass the object of forwardingFollowers to QuorumOracleMaj to determine if we need
                     * the help from Oracle.
                     *
                     *
                     * the size of outstandingProposals can be 1. The only one outstanding proposal is the one waiting for the ACK from
                     * the leader itself.
                     * */
                    if (!tickSkip && !syncedAckSet.hasAllQuorums()
                        && !(self.getQuorumVerifier().overrideQuorumDecision(getForwardingFollowers()) && self.getQuorumVerifier().revalidateOutstandingProp(this, new ArrayList<>(outstandingProposals.values()), lastCommitted))) {
                        // Lost quorum of last committed and/or last proposed
                        // config, set shutdown flag
                        shutdownMessage = ""Not sufficient followers synced, only synced with sids: [ ""
                                          + syncedAckSet.ackSetsToString()
                                          + "" ]"";
                        break;
                    }
                    tickSkip = !tickSkip;
                }
                for (LearnerHandler f : getLearners()) {
                    f.ping();
                }
            }
            if (shutdownMessage != null) {
                shutdown(shutdownMessage);
                // leader goes in looking state
            }
        } finally {
            zk.unregisterJMX(this);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,shutdown,void shutdown(String),"[861, 892]","{'A583': [(868, 868), (885, 885)], 'A591': [(862, 863), (867, 867), (875, 875), (878, 878)], 'A590': [(861, 861), (864, 866), (869, 869), (880, 883), (887, 892)], 'A653': [(872, 873)], 'A596': [(870, 871), (874, 874), (884, 884), (886, 886)], 'A630': [(877, 877), (879, 879)], 'A589': [(876, 876)]}","{'A583': 0.0625, 'A591': 0.15625, 'A590': 0.46875, 'A653': 0.0625, 'A596': 0.15625, 'A630': 0.0625, 'A589': 0.03125}",A590,,"    void shutdown(String reason) {
        LOG.info(""Shutting down"");

        if (isShutdown) {
            return;
        }

        LOG.info(""Shutdown called. For the reason {}"", reason);

        if (cnxAcceptor != null) {
            cnxAcceptor.halt();
        } else {
            closeSockets();
        }

        // NIO should not accept connections
        self.setZooKeeperServer(null);
        self.adminServer.setZooKeeperServer(null);
        self.closeAllConnections();
        // shutdown the previous zk
        if (zk != null) {
            zk.shutdown();
        }
        synchronized (learners) {
            for (Iterator<LearnerHandler> it = learners.iterator(); it.hasNext(); ) {
                LearnerHandler f = it.next();
                it.remove();
                f.shutdown();
            }
        }
        isShutdown = true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,closeSockets,void closeSockets(),"[894, 904]","{'A653': [(894, 904)]}",{'A653': 1.0},A653,,"    synchronized void closeSockets() {
       for (ServerSocket serverSocket : serverSockets) {
           if (!serverSocket.isClosed()) {
               try {
                   serverSocket.close();
               } catch (IOException e) {
                   LOG.warn(""Ignoring unexpected exception during close {}"", serverSocket, e);
               }
           }
       }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,recreateSocketAddresses,MultipleAddresses recreateSocketAddresses(MultipleAddresses),"[906, 910]","{'A720': [(906, 910)]}",{'A720': 1.0},A720,,"    MultipleAddresses recreateSocketAddresses(MultipleAddresses addr) {
        return new MultipleAddresses(addr.getAllAddresses().stream()
                .map(address -> new InetSocketAddress(address.getHostString(), address.getPort()))
                .collect(Collectors.toSet()));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getDesignatedLeader,"long getDesignatedLeader(Proposal,long)","[922, 965]","{'A583': [(923, 927), (932, 935), (938, 964)], 'A590': [(965, 965)], 'A605': [(936, 936)], 'A702': [(928, 928), (931, 931), (937, 937)], 'A720': [(922, 922), (929, 930)]}","{'A583': 0.8181818181818182, 'A590': 0.022727272727272728, 'A605': 0.022727272727272728, 'A702': 0.06818181818181818, 'A720': 0.06818181818181818}",A583,,"    long getDesignatedLeader(Proposal reconfigProposal, long zxid) {
        //new configuration
        Proposal.QuorumVerifierAcksetPair newQVAcksetPair = reconfigProposal.qvAcksetPairs.get(reconfigProposal.qvAcksetPairs.size() - 1);

        //check if I'm in the new configuration with the same quorum address -
        // if so, I'll remain the leader
        if (newQVAcksetPair.getQuorumVerifier().getVotingMembers().containsKey(self.getMyId())
            && recreateSocketAddresses(newQVAcksetPair.getQuorumVerifier().getVotingMembers().get(self.getMyId()).addr)
                .equals(recreateSocketAddresses(self.getQuorumAddress()))) {
            return self.getMyId();
        }
        // start with an initial set of candidates that are voters from new config that
        // acknowledged the reconfig op (there must be a quorum). Choose one of them as
        // current leader candidate
        HashSet<Long> candidates = new HashSet<>(newQVAcksetPair.getAckset());
        candidates.remove(self.getMyId()); // if we're here, I shouldn't be the leader
        long curCandidate = candidates.iterator().next();

        //go over outstanding ops in order, and try to find a candidate that acked the most ops.
        //this way it will be the most up-to-date and we'll minimize the number of ops that get dropped

        long curZxid = zxid + 1;
        Proposal p = outstandingProposals.get(curZxid);

        while (p != null && !candidates.isEmpty()) {
            for (Proposal.QuorumVerifierAcksetPair qvAckset : p.qvAcksetPairs) {
                //reduce the set of candidates to those that acknowledged p
                candidates.retainAll(qvAckset.getAckset());
                //no candidate acked p, return the best candidate found so far
                if (candidates.isEmpty()) {
                    return curCandidate;
                }
                //update the current candidate, and if it is the only one remaining, return it
                curCandidate = candidates.iterator().next();
                if (candidates.size() == 1) {
                    return curCandidate;
                }
            }
            curZxid++;
            p = outstandingProposals.get(curZxid);
        }

        return curCandidate;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,tryToCommit,"boolean tryToCommit(Proposal,long,SocketAddress)","[970, 1043]","{'A583': [(970, 984), (986, 986), (990, 991), (993, 994), (1001, 1001), (1005, 1005), (1015, 1015), (1036, 1037), (1042, 1042)], 'A590': [(985, 985), (987, 987), (989, 989), (998, 998), (1000, 1000), (1002, 1002), (1030, 1030), (1034, 1034), (1043, 1043)], 'A653': [(1020, 1021)], 'A597': [(1003, 1004), (1010, 1011), (1013, 1014), (1017, 1017), (1022, 1023), (1027, 1029), (1032, 1033), (1035, 1035), (1038, 1038)], 'A675': [(1031, 1031)], 'A612': [(988, 988), (996, 997), (999, 999), (1006, 1006), (1008, 1009), (1012, 1012), (1016, 1016), (1024, 1026), (1039, 1041)], 'A651': [(995, 995)], 'A702': [(1018, 1019)], 'A589': [(992, 992)], 'A620': [(1007, 1007)]}","{'A583': 0.35135135135135137, 'A590': 0.12162162162162163, 'A653': 0.02702702702702703, 'A597': 0.21621621621621623, 'A675': 0.013513513513513514, 'A612': 0.20270270270270271, 'A651': 0.013513513513513514, 'A702': 0.02702702702702703, 'A589': 0.013513513513513514, 'A620': 0.013513513513513514}",A583,,"    public synchronized boolean tryToCommit(Proposal p, long zxid, SocketAddress followerAddr) {
        // make sure that ops are committed in order. With reconfigurations it is now possible
        // that different operations wait for different sets of acks, and we still want to enforce
        // that they are committed in order. Currently we only permit one outstanding reconfiguration
        // such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is
        // pending all wait for a quorum of old and new config, so it's not possible to get enough acks
        // for an operation without getting enough acks for preceding ops. But in the future if multiple
        // concurrent reconfigs are allowed, this can happen.
        if (outstandingProposals.containsKey(zxid - 1)) {
            return false;
        }

        // in order to be committed, a proposal must be accepted by a quorum.
        //
        // getting a quorum from all necessary configurations.
        if (!p.hasAllQuorums()) {
            return false;
        }

        // commit proposals in order
        if (zxid != lastCommitted + 1) {
            LOG.warn(
                ""Committing zxid 0x{} from {} not first!"",
                Long.toHexString(zxid),
                followerAddr);
            LOG.warn(""First is 0x{}"", Long.toHexString(lastCommitted + 1));
        }

        outstandingProposals.remove(zxid);

        if (p.request != null) {
            toBeApplied.add(p);
        }

        if (p.request == null) {
            LOG.warn(""Going to commit null: {}"", p);
        } else if (p.request.getHdr().getType() == OpCode.reconfig) {
            LOG.debug(""Committing a reconfiguration! {}"", outstandingProposals.size());

            //if this server is voter in new config with the same quorum address,
            //then it will remain the leader
            //otherwise an up-to-date follower will be designated as leader. This saves
            //leader election time, unless the designated leader fails
            Long designatedLeader = getDesignatedLeader(p, zxid);

            QuorumVerifier newQV = p.qvAcksetPairs.get(p.qvAcksetPairs.size() - 1).getQuorumVerifier();

            self.processReconfig(newQV, designatedLeader, zk.getZxid(), true);

            if (designatedLeader != self.getMyId()) {
                LOG.info(String.format(""Committing a reconfiguration (reconfigEnabled=%s); this leader is not the designated ""
                        + ""leader anymore, setting allowedToCommit=false"", self.isReconfigEnabled()));
                allowedToCommit = false;
            }

            // we're sending the designated leader, and if the leader is changing the followers are
            // responsible for closing the connection - this way we are sure that at least a majority of them
            // receive the commit message.
            commitAndActivate(zxid, designatedLeader);
            informAndActivate(p, designatedLeader);
        } else {
            p.request.logLatency(ServerMetrics.getMetrics().QUORUM_ACK_LATENCY);
            commit(zxid);
            inform(p);
        }
        zk.commitProcessor.commit(p.request);
        if (pendingSyncs.containsKey(zxid)) {
            for (LearnerSyncRequest r : pendingSyncs.remove(zxid)) {
                sendSync(r);
            }
        }

        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,processAck,"void processAck(long,long,SocketAddress)","[1053, 1122]","{'A583': [(1054, 1058), (1063, 1063), (1082, 1085), (1091, 1091), (1105, 1109), (1112, 1120)], 'A591': [(1059, 1059), (1065, 1065)], 'A590': [(1077, 1077), (1079, 1080), (1086, 1088), (1101, 1104), (1110, 1111), (1121, 1122)], 'A647': [(1053, 1053)], 'A597': [(1062, 1062), (1064, 1064), (1066, 1066), (1068, 1075)], 'A596': [(1060, 1061), (1081, 1081), (1089, 1090), (1092, 1093)], 'A675': [(1095, 1098)], 'A612': [(1067, 1067), (1076, 1076), (1094, 1094), (1099, 1100)], 'A620': [(1078, 1078)]}","{'A583': 0.35714285714285715, 'A591': 0.02857142857142857, 'A590': 0.2, 'A647': 0.014285714285714285, 'A597': 0.15714285714285714, 'A596': 0.1, 'A675': 0.05714285714285714, 'A612': 0.07142857142857142, 'A620': 0.014285714285714285}",A583,,"    @Override
    public synchronized void processAck(long sid, long zxid, SocketAddress followerAddr) {
        if (!allowedToCommit) {
            return; // last op committed was a leader change - from now on
        }
        // the new leader should commit
        if (LOG.isTraceEnabled()) {
            LOG.trace(""Ack zxid: 0x{}"", Long.toHexString(zxid));
            for (Proposal p : outstandingProposals.values()) {
                long packetZxid = p.packet.getZxid();
                LOG.trace(""outstanding proposal: 0x{}"", Long.toHexString(packetZxid));
            }
            LOG.trace(""outstanding proposals all"");
        }

        if ((zxid & 0xffffffffL) == 0) {
            /*
             * We no longer process NEWLEADER ack with this method. However,
             * the learner sends an ack back to the leader after it gets
             * UPTODATE, so we just ignore the message.
             */
            return;
        }

        if (outstandingProposals.size() == 0) {
            LOG.debug(""outstanding is 0"");
            return;
        }
        if (lastCommitted >= zxid) {
            LOG.debug(
                ""proposal has already been committed, pzxid: 0x{} zxid: 0x{}"",
                Long.toHexString(lastCommitted),
                Long.toHexString(zxid));
            // The proposal has already been committed
            return;
        }
        Proposal p = outstandingProposals.get(zxid);
        if (p == null) {
            LOG.warn(""Trying to commit future proposal: zxid 0x{} from {}"", Long.toHexString(zxid), followerAddr);
            return;
        }

        if (ackLoggingFrequency > 0 && (zxid % ackLoggingFrequency == 0)) {
            p.request.logLatency(ServerMetrics.getMetrics().ACK_LATENCY, Long.toString(sid));
        }

        p.addAck(sid);

        boolean hasCommitted = tryToCommit(p, zxid, followerAddr);

        // If p is a reconfiguration, multiple other operations may be ready to be committed,
        // since operations wait for different sets of acks.
        // Currently we only permit one outstanding reconfiguration at a time
        // such that the reconfiguration and subsequent outstanding ops proposed while the reconfig is
        // pending all wait for a quorum of old and new config, so its not possible to get enough acks
        // for an operation without getting enough acks for preceding ops. But in the future if multiple
        // concurrent reconfigs are allowed, this can happen and then we need to check whether some pending
        // ops may already have enough acks and can be committed, which is what this code does.

        if (hasCommitted && p.request != null && p.request.getHdr().getType() == OpCode.reconfig) {
            long curZxid = zxid;
            while (allowedToCommit && hasCommitted && p != null) {
                curZxid++;
                p = outstandingProposals.get(curZxid);
                if (p != null) {
                    hasCommitted = tryToCommit(p, curZxid, null);
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.ToBeAppliedRequestProcessor,processRequest,void processRequest(Request),"[1156, 1175]","{'A583': [(1173, 1173)], 'A591': [(1156, 1156), (1158, 1172)], 'A590': [(1157, 1157), (1174, 1175)]}","{'A583': 0.05, 'A591': 0.8, 'A590': 0.15}",A591,,"        public void processRequest(Request request) throws RequestProcessorException {
            next.processRequest(request);

            // The only requests that should be on toBeApplied are write
            // requests, for which we will have a hdr. We can't simply use
            // request.zxid here because that is set on read requests to equal
            // the zxid of the last write op.
            if (request.getHdr() != null) {
                long zxid = request.getHdr().getZxid();
                Iterator<Proposal> iter = leader.toBeApplied.iterator();
                if (iter.hasNext()) {
                    Proposal p = iter.next();
                    if (p.request != null && p.request.zxid == zxid) {
                        iter.remove();
                        return;
                    }
                }
                LOG.error(""Committed request not found on toBeApplied: {}"", request);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader.ToBeAppliedRequestProcessor,shutdown,void shutdown(),"[1182, 1185]","{'A591': [(1183, 1183)], 'A590': [(1182, 1182), (1184, 1185)]}","{'A591': 0.25, 'A590': 0.75}",A590,,"        public void shutdown() {
            LOG.info(""Shutting down"");
            next.shutdown();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,sendPacket,void sendPacket(QuorumPacket),"[1195, 1201]","{'A591': [(1197, 1197)], 'A590': [(1195, 1196), (1198, 1201)]}","{'A591': 0.14285714285714285, 'A590': 0.8571428571428571}",A590,,"    void sendPacket(QuorumPacket qp) {
        synchronized (forwardingFollowers) {
            for (LearnerHandler f : forwardingFollowers) {
                f.queuePacket(qp);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,sendObserverPacket,void sendObserverPacket(QuorumPacket),"[1206, 1210]","{'A591': [(1206, 1206)], 'A596': [(1209, 1210)], 'A639': [(1207, 1208)]}","{'A591': 0.2, 'A596': 0.4, 'A639': 0.4}",A596,,"    void sendObserverPacket(QuorumPacket qp) {
        for (LearnerHandler f : getObservingLearners()) {
            f.queuePacket(qp);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,commit,void commit(long),"[1219, 1226]","{'A583': [(1220, 1220)], 'A590': [(1219, 1219), (1221, 1224), (1226, 1226)], 'A584': [(1225, 1225)]}","{'A583': 0.125, 'A590': 0.75, 'A584': 0.125}",A590,,"    public void commit(long zxid) {
        synchronized (this) {
            lastCommitted = zxid;
        }
        QuorumPacket qp = new QuorumPacket(Leader.COMMIT, zxid, null, null);
        sendPacket(qp);
        ServerMetrics.getMetrics().COMMIT_COUNT.add(1);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,commitAndActivate,"void commitAndActivate(long,long)","[1229, 1240]","{'A583': [(1230, 1230), (1234, 1234), (1236, 1236)], 'A590': [(1229, 1229), (1231, 1232), (1238, 1240)], 'A612': [(1233, 1233), (1235, 1235), (1237, 1237)]}","{'A583': 0.25, 'A590': 0.5, 'A612': 0.25}",A590,,"    public void commitAndActivate(long zxid, long designatedLeader) {
        synchronized (this) {
            lastCommitted = zxid;
        }

        byte[] data = new byte[8];
        ByteBuffer buffer = ByteBuffer.wrap(data);
        buffer.putLong(designatedLeader);

        QuorumPacket qp = new QuorumPacket(Leader.COMMITANDACTIVATE, zxid, data, null);
        sendPacket(qp);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,inform,void inform(Proposal),"[1245, 1248]","{'A583': [(1246, 1246)], 'A591': [(1245, 1245)], 'A596': [(1247, 1248)]}","{'A583': 0.25, 'A591': 0.25, 'A596': 0.5}",A596,,"    public void inform(Proposal proposal) {
        QuorumPacket qp = new QuorumPacket(Leader.INFORM, proposal.request.zxid, proposal.packet.getData(), null);
        sendObserverPacket(qp);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,buildInformAndActivePacket,"QuorumPacket buildInformAndActivePacket(long,long,byte[])","[1250, 1257]","{'A583': [(1250, 1250)], 'A647': [(1251, 1257)]}","{'A583': 0.125, 'A647': 0.875}",A647,,"    public static QuorumPacket buildInformAndActivePacket(long zxid, long designatedLeader, byte[] proposalData) {
        byte[] data = new byte[proposalData.length + 8];
        ByteBuffer buffer = ByteBuffer.wrap(data);
        buffer.putLong(designatedLeader);
        buffer.put(proposalData);

        return new QuorumPacket(Leader.INFORMANDACTIVATE, zxid, data, null);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,informAndActivate,"void informAndActivate(Proposal,long)","[1262, 1264]","{'A583': [(1263, 1263)], 'A590': [(1262, 1262), (1264, 1264)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public void informAndActivate(Proposal proposal, long designatedLeader) {
        sendObserverPacket(buildInformAndActivePacket(proposal.request.zxid, designatedLeader, proposal.packet.getData()));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getLastProposed,long getLastProposed(),"[1268, 1271]","{'A583': [(1269, 1269)], 'A647': [(1268, 1268), (1270, 1271)]}","{'A583': 0.25, 'A647': 0.75}",A647,,"    @Override
    public synchronized long getLastProposed() {
        return lastProposed;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getEpoch,long getEpoch(),"[1276, 1278]","{'A583': [(1276, 1276)], 'A590': [(1277, 1278)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public long getEpoch() {
        return ZxidUtils.getEpochFromZxid(lastProposed);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,propose,Proposal propose(Request),"[1295, 1335]","{'A583': [(1305, 1305), (1316, 1317), (1319, 1321), (1323, 1325)], 'A591': [(1295, 1295), (1300, 1304), (1306, 1309), (1313, 1313)], 'A590': [(1329, 1329), (1331, 1332), (1334, 1335)], 'A597': [(1328, 1328)], 'A596': [(1330, 1330)], 'A675': [(1296, 1299), (1333, 1333)], 'A595': [(1310, 1310), (1314, 1314)], 'A612': [(1315, 1315), (1318, 1318), (1322, 1322), (1326, 1326)], 'A613': [(1311, 1311)], 'A628': [(1312, 1312)], 'A620': [(1327, 1327)]}","{'A583': 0.21951219512195122, 'A591': 0.2682926829268293, 'A590': 0.12195121951219512, 'A597': 0.024390243902439025, 'A596': 0.024390243902439025, 'A675': 0.12195121951219512, 'A595': 0.04878048780487805, 'A612': 0.0975609756097561, 'A613': 0.024390243902439025, 'A628': 0.024390243902439025, 'A620': 0.024390243902439025}",A591,,"    public Proposal propose(Request request) throws XidRolloverException {
        if (request.isThrottled()) {
            LOG.error(""Throttled request send as proposal: {}. Exiting."", request);
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
        /**
         * Address the rollover issue. All lower 32bits set indicate a new leader
         * election. Force a re-election instead. See ZOOKEEPER-1277
         */
        if ((request.zxid & 0xffffffffL) == 0xffffffffL) {
            String msg = ""zxid lower 32 bits have rolled over, forcing re-election, and therefore new epoch start"";
            shutdown(msg);
            throw new XidRolloverException(msg);
        }

        byte[] data = request.getSerializeData();
        proposalStats.setLastBufferSize(data.length);
        QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, request.zxid, data, null);

        Proposal p = new Proposal(request, pp);

        synchronized (this) {
            p.addQuorumVerifier(self.getQuorumVerifier());

            if (request.getHdr().getType() == OpCode.reconfig) {
                self.setLastSeenQuorumVerifier(request.qv, true);
            }

            if (self.getQuorumVerifier().getVersion() < self.getLastSeenQuorumVerifier().getVersion()) {
                p.addQuorumVerifier(self.getLastSeenQuorumVerifier());
            }

            LOG.debug(""Proposing:: {}"", request);

            lastProposed = p.packet.getZxid();
            outstandingProposals.put(lastProposed, p);
            sendPacket(pp);
        }
        ServerMetrics.getMetrics().PROPOSAL_COUNT.add(1);
        return p;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,processSync,void processSync(LearnerSyncRequest),"[1343, 1349]","{'A583': [(1343, 1344)], 'A590': [(1349, 1349)], 'A597': [(1345, 1346)], 'A688': [(1348, 1348)], 'A619': [(1347, 1347)]}","{'A583': 0.2857142857142857, 'A590': 0.14285714285714285, 'A597': 0.2857142857142857, 'A688': 0.14285714285714285, 'A619': 0.14285714285714285}",A583,,"    public synchronized void processSync(LearnerSyncRequest r) {
        if (outstandingProposals.isEmpty()) {
            sendSync(r);
        } else {
            pendingSyncs.computeIfAbsent(lastProposed, k -> new ArrayList<>()).add(r);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,sendSync,void sendSync(LearnerSyncRequest),"[1354, 1357]","{'A583': [(1354, 1354)], 'A590': [(1357, 1357)], 'A597': [(1355, 1356)]}","{'A583': 0.25, 'A590': 0.25, 'A597': 0.5}",A597,,"    public void sendSync(LearnerSyncRequest r) {
        QuorumPacket qp = new QuorumPacket(Leader.SYNC, 0, null, null);
        r.fh.queuePacket(qp);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,startForwarding,"long startForwarding(LearnerHandler,long)","[1366, 1400]","{'A583': [(1367, 1367), (1378, 1378), (1385, 1385)], 'A591': [(1398, 1398)], 'A590': [(1368, 1376), (1379, 1380), (1390, 1392), (1397, 1397), (1399, 1400)], 'A647': [(1366, 1366)], 'A596': [(1377, 1377), (1393, 1393), (1395, 1395)], 'A605': [(1383, 1383)], 'A639': [(1394, 1394), (1396, 1396)], 'A648': [(1381, 1382), (1384, 1384), (1386, 1389)]}","{'A583': 0.08571428571428572, 'A591': 0.02857142857142857, 'A590': 0.4857142857142857, 'A647': 0.02857142857142857, 'A596': 0.08571428571428572, 'A605': 0.02857142857142857, 'A639': 0.05714285714285714, 'A648': 0.2}",A590,,"    @Override
    public synchronized long startForwarding(LearnerHandler handler, long lastSeenZxid) {
        // Queue up any outstanding requests enabling the receipt of
        // new requests
        if (lastProposed > lastSeenZxid) {
            for (Proposal p : toBeApplied) {
                if (p.packet.getZxid() <= lastSeenZxid) {
                    continue;
                }
                handler.queuePacket(p.packet);
                // Since the proposal has been committed we need to send the
                // commit message also
                QuorumPacket qp = new QuorumPacket(Leader.COMMIT, p.packet.getZxid(), null, null);
                handler.queuePacket(qp);
            }
            // Only participant need to get outstanding proposals
            if (handler.getLearnerType() == LearnerType.PARTICIPANT) {
                List<Long> zxids = new ArrayList<>(outstandingProposals.keySet());
                Collections.sort(zxids);
                for (Long zxid : zxids) {
                    if (zxid <= lastSeenZxid) {
                        continue;
                    }
                    handler.queuePacket(outstandingProposals.get(zxid).packet);
                }
            }
        }
        if (handler.getLearnerType() == LearnerType.PARTICIPANT) {
            addForwardingFollower(handler);
        } else {
            addObserverLearnerHandler(handler);
        }

        return lastProposed;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,waitForStartup,void waitForStartup(),"[1402, 1409]","{'A583': [(1404, 1405)], 'A647': [(1402, 1403), (1406, 1409)]}","{'A583': 0.25, 'A647': 0.75}",A647,,"    @Override
    public void waitForStartup() throws InterruptedException {
        synchronized (zk) {
            while (!zk.isRunning() && !Thread.currentThread().isInterrupted()) {
                zk.wait(20);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,setMaxTimeToWaitForEpoch,void setMaxTimeToWaitForEpoch(int),"[1427, 1430]","{'A612': [(1427, 1430)]}",{'A612': 1.0},A612,,"    public static void setMaxTimeToWaitForEpoch(int maxTimeToWaitForEpoch) {
        Leader.maxTimeToWaitForEpoch = maxTimeToWaitForEpoch;
        LOG.info(""Set {} to {}ms"", MAX_TIME_TO_WAIT_FOR_EPOCH, Leader.maxTimeToWaitForEpoch);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,quitLeading,void quitLeading(),"[1443, 1450]","{'A583': [(1444, 1444)], 'A675': [(1448, 1448)], 'A612': [(1443, 1443), (1445, 1447), (1449, 1450)]}","{'A583': 0.125, 'A675': 0.125, 'A612': 0.75}",A612,,"    private void quitLeading() {
        synchronized (connectingFollowers) {
            quitWaitForEpoch = true;
            connectingFollowers.notifyAll();
        }
        ServerMetrics.getMetrics().QUIT_LEADING_DUE_TO_DISLOYAL_VOTER.add(1);
        LOG.info(""Quit leading due to voter changed mind."");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,setLeadingVoteSet,void setLeadingVoteSet(SyncedLearnerTracker),"[1452, 1454]","{'A612': [(1452, 1454)]}",{'A612': 1.0},A612,,"    public void setLeadingVoteSet(SyncedLearnerTracker voteSet) {
        this.voteSet = voteSet;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,reportLookingSid,void reportLookingSid(long),"[1456, 1466]","{'A583': [(1457, 1457)], 'A612': [(1456, 1456), (1458, 1466)]}","{'A583': 0.09090909090909091, 'A612': 0.9090909090909091}",A612,,"    public void reportLookingSid(long sid) {
        if (maxTimeToWaitForEpoch < 0 || timeStartWaitForEpoch < 0 || !waitingForNewEpoch) {
            return;
        }
        if (voteSet == null || !voteSet.hasSid(sid)) {
            return;
        }
        if (Time.currentElapsedTime() - timeStartWaitForEpoch > maxTimeToWaitForEpoch) {
            quitLeading();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getEpochToPropose,"long getEpochToPropose(long,long)","[1468, 1502]","{'A583': [(1470, 1470), (1475, 1475), (1491, 1492)], 'A591': [(1497, 1497)], 'A590': [(1469, 1469), (1471, 1474), (1476, 1476), (1480, 1480), (1482, 1485), (1490, 1490), (1493, 1493), (1495, 1496), (1498, 1502)], 'A647': [(1468, 1468)], 'A593': [(1486, 1486), (1494, 1494)], 'A617': [(1477, 1479)], 'A612': [(1488, 1489)], 'A702': [(1481, 1481), (1487, 1487)]}","{'A583': 0.11428571428571428, 'A591': 0.02857142857142857, 'A590': 0.5714285714285714, 'A647': 0.02857142857142857, 'A593': 0.05714285714285714, 'A617': 0.08571428571428572, 'A612': 0.05714285714285714, 'A702': 0.05714285714285714}",A590,,"    @Override
    public long getEpochToPropose(long sid, long lastAcceptedEpoch) throws InterruptedException, IOException {
        synchronized (connectingFollowers) {
            if (!waitingForNewEpoch) {
                return epoch;
            }
            if (lastAcceptedEpoch >= epoch) {
                epoch = lastAcceptedEpoch + 1;
            }
            if (isParticipant(sid)) {
                connectingFollowers.add(sid);
            }
            QuorumVerifier verifier = self.getQuorumVerifier();
            if (connectingFollowers.contains(self.getMyId()) && verifier.containsQuorum(connectingFollowers)) {
                waitingForNewEpoch = false;
                self.setAcceptedEpoch(epoch);
                connectingFollowers.notifyAll();
            } else {
                long start = Time.currentElapsedTime();
                if (sid == self.getMyId()) {
                    timeStartWaitForEpoch = start;
                }
                long cur = start;
                long end = start + self.getInitLimit() * self.getTickTime();
                while (waitingForNewEpoch && cur < end && !quitWaitForEpoch) {
                    connectingFollowers.wait(end - cur);
                    cur = Time.currentElapsedTime();
                }
                if (waitingForNewEpoch) {
                    throw new InterruptedException(""Timeout while waiting for epoch from quorum"");
                }
            }
            return epoch;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getZKDatabase,ZKDatabase getZKDatabase(),"[1504, 1507]","{'A647': [(1504, 1507)]}",{'A647': 1.0},A647,,"    @Override
    public ZKDatabase getZKDatabase() {
        return zk.getZKDatabase();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,waitForEpochAck,"void waitForEpochAck(long,StateSummary)","[1514, 1549]","{'A583': [(1516, 1516), (1523, 1526), (1539, 1540)], 'A591': [(1536, 1536)], 'A590': [(1515, 1515), (1517, 1521), (1527, 1527), (1531, 1532), (1534, 1535), (1538, 1538), (1541, 1541), (1543, 1549)], 'A647': [(1514, 1514), (1529, 1530)], 'A593': [(1537, 1537), (1542, 1542)], 'A617': [(1528, 1528)], 'A612': [(1522, 1522)], 'A702': [(1533, 1533)]}","{'A583': 0.19444444444444445, 'A591': 0.027777777777777776, 'A590': 0.5555555555555556, 'A647': 0.08333333333333333, 'A593': 0.05555555555555555, 'A617': 0.027777777777777776, 'A612': 0.027777777777777776, 'A702': 0.027777777777777776}",A590,,"    @Override
    public void waitForEpochAck(long id, StateSummary ss) throws IOException, InterruptedException {
        synchronized (electingFollowers) {
            if (electionFinished) {
                return;
            }
            if (ss.getCurrentEpoch() != -1) {
                if (ss.isMoreRecentThan(leaderStateSummary)) {
                    throw new IOException(""Follower is ahead of the leader, leader summary: ""
                                          + leaderStateSummary.getCurrentEpoch()
                                          + "" (current epoch), ""
                                          + leaderStateSummary.getLastZxid()
                                          + "" (last zxid)"");
                }
                if (ss.getLastZxid() != -1 && isParticipant(id)) {
                    electingFollowers.add(id);
                }
            }
            QuorumVerifier verifier = self.getQuorumVerifier();
            if (electingFollowers.contains(self.getMyId()) && verifier.containsQuorum(electingFollowers)) {
                electionFinished = true;
                electingFollowers.notifyAll();
            } else {
                long start = Time.currentElapsedTime();
                long cur = start;
                long end = start + self.getInitLimit() * self.getTickTime();
                while (!electionFinished && cur < end) {
                    electingFollowers.wait(end - cur);
                    cur = Time.currentElapsedTime();
                }
                if (!electionFinished) {
                    throw new InterruptedException(""Timeout while waiting for epoch to be acked by quorum"");
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getSidSetString,String getSidSetString(Set<Long>),"[1554, 1565]","{'A583': [(1560, 1560)], 'A597': [(1554, 1559), (1561, 1565)]}","{'A583': 0.08333333333333333, 'A597': 0.9166666666666666}",A597,,"    private String getSidSetString(Set<Long> sidSet) {
        StringBuilder sids = new StringBuilder();
        Iterator<Long> iter = sidSet.iterator();
        while (iter.hasNext()) {
            sids.append(iter.next());
            if (!iter.hasNext()) {
                break;
            }
            sids.append("","");
        }
        return sids.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,startZkServer,void startZkServer(),"[1570, 1610]","{'A583': [(1573, 1575)], 'A653': [(1577, 1585), (1587, 1587), (1589, 1589), (1591, 1595)], 'A597': [(1570, 1572), (1596, 1596), (1599, 1603), (1605, 1610)], 'A713': [(1598, 1598)], 'A612': [(1576, 1576), (1586, 1586), (1597, 1597), (1604, 1604)], 'A702': [(1588, 1588), (1590, 1590)]}","{'A583': 0.07317073170731707, 'A653': 0.3902439024390244, 'A597': 0.36585365853658536, 'A713': 0.024390243902439025, 'A612': 0.0975609756097561, 'A702': 0.04878048780487805}",A653,,"    private synchronized void startZkServer() {
        // Update lastCommitted and Db's zxid to a value representing the new epoch
        lastCommitted = zk.getZxid();
        LOG.info(""Have quorum of supporters, sids: [{}]; starting up and setting last processed zxid: 0x{}"",
                 newLeaderProposal.ackSetsToString(),
                 Long.toHexString(zk.getZxid()));

        if (self.isReconfigEnabled()) {
            /*
             * ZOOKEEPER-1324. the leader sends the new config it must complete
             *  to others inside a NEWLEADER message (see LearnerHandler where
             *  the NEWLEADER message is constructed), and once it has enough
             *  acks we must execute the following code so that it applies the
             *  config to itself.
             */
            QuorumVerifier newQV = self.getLastSeenQuorumVerifier();

            Long designatedLeader = getDesignatedLeader(newLeaderProposal, zk.getZxid());

            self.processReconfig(newQV, designatedLeader, zk.getZxid(), true);
            if (designatedLeader != self.getMyId()) {
                LOG.warn(""This leader is not the designated leader, it will be initialized with allowedToCommit = false"");
                allowedToCommit = false;
            }
        } else {
            LOG.info(""Dynamic reconfig feature is disabled, skip designatedLeader calculation and reconfig processing."");
        }

        leaderStartTime = Time.currentElapsedTime();
        zk.startup();
        /*
         * Update the election vote here to ensure that all members of the
         * ensemble report the same vote to new servers that start up and
         * send leader election notifications to the ensemble.
         *
         * @see https://issues.apache.org/jira/browse/ZOOKEEPER-1732
         */
        self.updateElectionVote(getEpoch());

        zk.getZKDatabase().setlastProcessedZxid(zk.getZxid());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,waitForNewLeaderAck,"void waitForNewLeaderAck(long,long)","[1619, 1660]","{'A583': [(1620, 1620), (1630, 1634), (1656, 1656)], 'A647': [(1619, 1619)], 'A597': [(1621, 1629), (1635, 1647), (1649, 1652), (1654, 1655), (1657, 1660)], 'A593': [(1648, 1648), (1653, 1653)]}","{'A583': 0.16666666666666666, 'A647': 0.023809523809523808, 'A597': 0.7619047619047619, 'A593': 0.047619047619047616}",A597,,"    @Override
    public void waitForNewLeaderAck(long sid, long zxid) throws InterruptedException {

        synchronized (newLeaderProposal.qvAcksetPairs) {

            if (quorumFormed) {
                return;
            }

            long currentZxid = newLeaderProposal.packet.getZxid();
            if (zxid != currentZxid) {
                LOG.error(
                    ""NEWLEADER ACK from sid: {} is from a different epoch - current 0x{} received 0x{}"",
                    sid,
                    Long.toHexString(currentZxid),
                    Long.toHexString(zxid));
                return;
            }

            /*
             * Note that addAck already checks that the learner
             * is a PARTICIPANT.
             */
            newLeaderProposal.addAck(sid);

            if (newLeaderProposal.hasAllQuorums()) {
                quorumFormed = true;
                newLeaderProposal.qvAcksetPairs.notifyAll();
            } else {
                long start = Time.currentElapsedTime();
                long cur = start;
                long end = start + self.getInitLimit() * self.getTickTime();
                while (!quorumFormed && cur < end) {
                    newLeaderProposal.qvAcksetPairs.wait(end - cur);
                    cur = Time.currentElapsedTime();
                }
                if (!quorumFormed) {
                    throw new InterruptedException(""Timeout while waiting for NEWLEADER to be acked by quorum"");
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getPacketType,String getPacketType(int),"[1667, 1710]","{'A590': [(1695, 1695), (1705, 1706)], 'A612': [(1696, 1696)], 'A639': [(1667, 1694), (1697, 1704), (1707, 1710)]}","{'A590': 0.06818181818181818, 'A612': 0.022727272727272728, 'A639': 0.9090909090909091}",A639,,"    public static String getPacketType(int packetType) {
        switch (packetType) {
        case DIFF:
            return ""DIFF"";
        case TRUNC:
            return ""TRUNC"";
        case SNAP:
            return ""SNAP"";
        case OBSERVERINFO:
            return ""OBSERVERINFO"";
        case NEWLEADER:
            return ""NEWLEADER"";
        case FOLLOWERINFO:
            return ""FOLLOWERINFO"";
        case UPTODATE:
            return ""UPTODATE"";
        case LEADERINFO:
            return ""LEADERINFO"";
        case ACKEPOCH:
            return ""ACKEPOCH"";
        case REQUEST:
            return ""REQUEST"";
        case PROPOSAL:
            return ""PROPOSAL"";
        case ACK:
            return ""ACK"";
        case COMMIT:
            return ""COMMIT"";
        case COMMITANDACTIVATE:
            return ""COMMITANDACTIVATE"";
        case PING:
            return ""PING"";
        case REVALIDATE:
            return ""REVALIDATE"";
        case SYNC:
            return ""SYNC"";
        case INFORM:
            return ""INFORM"";
        case INFORMANDACTIVATE:
            return ""INFORMANDACTIVATE"";
        default:
            return ""UNKNOWN"";
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,isRunning,boolean isRunning(),"[1712, 1714]","{'A597': [(1712, 1714)]}",{'A597': 1.0},A597,,"    private boolean isRunning() {
        return self.isRunning() && zk.isRunning();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,isParticipant,boolean isParticipant(long),"[1716, 1718]","{'A617': [(1716, 1718)]}",{'A617': 1.0},A617,,"    private boolean isParticipant(long sid) {
        return self.getQuorumVerifier().getVotingMembers().containsKey(sid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getCurrentTick,int getCurrentTick(),"[1720, 1723]","{'A647': [(1720, 1723)]}",{'A647': 1.0},A647,,"    @Override
    public int getCurrentTick() {
        return self.tick.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,syncTimeout,int syncTimeout(),"[1725, 1728]","{'A647': [(1725, 1728)]}",{'A647': 1.0},A647,,"    @Override
    public int syncTimeout() {
        return self.tickTime * self.syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getTickOfNextAckDeadline,int getTickOfNextAckDeadline(),"[1730, 1733]","{'A647': [(1730, 1733)]}",{'A647': 1.0},A647,,"    @Override
    public int getTickOfNextAckDeadline() {
        return self.tick.get() + self.syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getTickOfInitialAckDeadline,int getTickOfInitialAckDeadline(),"[1735, 1738]","{'A647': [(1735, 1738)]}",{'A647': 1.0},A647,,"    @Override
    public int getTickOfInitialAckDeadline() {
        return self.tick.get() + self.initLimit + self.syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getAndDecrementFollowerCounter,long getAndDecrementFollowerCounter(),"[1740, 1743]","{'A647': [(1740, 1743)]}",{'A647': 1.0},A647,,"    @Override
    public long getAndDecrementFollowerCounter() {
        return followerCounter.getAndDecrement();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,touch,"void touch(long,int)","[1745, 1748]","{'A647': [(1745, 1748)]}",{'A647': 1.0},A647,,"    @Override
    public void touch(long sess, int to) {
        zk.touch(sess, to);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,submitLearnerRequest,void submitLearnerRequest(Request),"[1750, 1753]","{'A647': [(1750, 1753)]}",{'A647': 1.0},A647,,"    @Override
    public void submitLearnerRequest(Request si) {
        zk.submitLearnerRequest(si);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getQuorumVerifierVersion,long getQuorumVerifierVersion(),"[1755, 1758]","{'A647': [(1755, 1758)]}",{'A647': 1.0},A647,,"    @Override
    public long getQuorumVerifierVersion() {
        return self.getQuorumVerifier().getVersion();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getPeerInfo,String getPeerInfo(long),"[1760, 1764]","{'A647': [(1760, 1764)]}",{'A647': 1.0},A647,,"    @Override
    public String getPeerInfo(long sid) {
        QuorumPeer.QuorumServer server = self.getView().get(sid);
        return server == null ? """" : server.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getQuorumVerifierBytes,byte[] getQuorumVerifierBytes(),"[1766, 1769]","{'A602': [(1768, 1768)], 'A647': [(1766, 1767), (1769, 1769)]}","{'A602': 0.25, 'A647': 0.75}",A647,,"    @Override
    public byte[] getQuorumVerifierBytes() {
        return self.getLastSeenQuorumVerifier().toString().getBytes(UTF_8);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,getQuorumAuthServer,QuorumAuthServer getQuorumAuthServer(),"[1771, 1774]","{'A647': [(1771, 1774)]}",{'A647': 1.0},A647,,"    @Override
    public QuorumAuthServer getQuorumAuthServer() {
        return (self == null) ? null : self.authServer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,revalidateSession,"void revalidateSession(QuorumPacket,LearnerHandler)","[1776, 1806]","{'A583': [(1791, 1794), (1798, 1801)], 'A647': [(1776, 1790), (1795, 1797), (1802, 1806)]}","{'A583': 0.25806451612903225, 'A647': 0.7419354838709677}",A647,,"    @Override
    public void revalidateSession(QuorumPacket qp, LearnerHandler learnerHandler) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(qp.getData());
        DataInputStream dis = new DataInputStream(bis);
        long id = dis.readLong();
        int to = dis.readInt();
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        dos.writeLong(id);
        boolean valid = zk.checkIfValidGlobalSession(id, to);
        if (valid) {
            try {
                // set the session owner as the follower that owns the session
                zk.setOwner(id, learnerHandler);
            } catch (KeeperException.SessionExpiredException e) {
                LOG.error(
                    ""Somehow session 0x{} expired right after being renewed! (impossible)"",
                    Long.toHexString(id),
                    e);
            }
        }
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""Session 0x"" + Long.toHexString(id) + "" is valid: "" + valid);
        }
        dos.writeBoolean(valid);
        qp.setData(bos.toByteArray());
        learnerHandler.queuePacket(qp);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,registerLearnerHandlerBean,"void registerLearnerHandlerBean(LearnerHandler,Socket)","[1808, 1814]","{'A647': [(1808, 1814)]}",{'A647': 1.0},A647,,"    @Override
    public void registerLearnerHandlerBean(final LearnerHandler learnerHandler, Socket socket) {
        LearnerHandlerBean bean = new LearnerHandlerBean(learnerHandler, socket);
        if (zk.registerJMX(bean)) {
            connectionBeans.put(learnerHandler, bean);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Leader.java,Leader,unregisterLearnerHandlerBean,void unregisterLearnerHandlerBean(LearnerHandler),"[1816, 1822]","{'A583': [(1819, 1819)], 'A647': [(1816, 1818), (1820, 1822)]}","{'A583': 0.14285714285714285, 'A647': 0.8571428571428571}",A647,,"    @Override
    public void unregisterLearnerHandlerBean(final LearnerHandler learnerHandler) {
        LearnerHandlerBean bean = connectionBeans.remove(learnerHandler);
        if (bean != null) {
            MBeanRegistry.getInstance().unregister(bean);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker,addQuorumVerifier,void addQuorumVerifier(QuorumVerifier),"[29, 31]","{'A583': [(30, 30)], 'A593': [(29, 29), (31, 31)]}","{'A583': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,,"    public void addQuorumVerifier(QuorumVerifier qv) {
        qvAcksetPairs.add(new QuorumVerifierAcksetPair(qv, new HashSet<Long>(qv.getVotingMembers().size())));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker,addAck,boolean addAck(Long),"[33, 42]","{'A593': [(33, 42)]}",{'A593': 1.0},A593,,"    public boolean addAck(Long sid) {
        boolean change = false;
        for (QuorumVerifierAcksetPair qvAckset : qvAcksetPairs) {
            if (qvAckset.getQuorumVerifier().getVotingMembers().containsKey(sid)) {
                qvAckset.getAckset().add(sid);
                change = true;
            }
        }
        return change;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker,hasSid,boolean hasSid(long),"[44, 51]","{'A612': [(44, 51)]}",{'A612': 1.0},A612,,"    public boolean hasSid(long sid) {
        for (QuorumVerifierAcksetPair qvAckset : qvAcksetPairs) {
            if (!qvAckset.getQuorumVerifier().getVotingMembers().containsKey(sid)) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker,hasAllQuorums,boolean hasAllQuorums(),"[53, 60]","{'A583': [(55, 55), (57, 57)], 'A593': [(53, 54), (56, 56), (58, 60)]}","{'A583': 0.25, 'A593': 0.75}",A593,,"    public boolean hasAllQuorums() {
        for (QuorumVerifierAcksetPair qvAckset : qvAcksetPairs) {
            if (!qvAckset.getQuorumVerifier().containsQuorum(qvAckset.getAckset())) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker,ackSetsToString,String ackSetsToString(),"[62, 70]","{'A583': [(62, 62), (69, 69)], 'A593': [(63, 63), (65, 67), (70, 70)], 'A612': [(64, 64), (68, 68)]}","{'A583': 0.2222222222222222, 'A593': 0.5555555555555556, 'A612': 0.2222222222222222}",A593,,"    public String ackSetsToString() {
        StringBuilder sb = new StringBuilder();

        for (QuorumVerifierAcksetPair qvAckset : qvAcksetPairs) {
            sb.append(qvAckset.getAckset().toString()).append("","");
        }

        return sb.substring(0, sb.length() - 1);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker.QuorumVerifierAcksetPair,getQuorumVerifier,QuorumVerifier getQuorumVerifier(),"[82, 84]","{'A593': [(82, 84)]}",{'A593': 1.0},A593,,"        public QuorumVerifier getQuorumVerifier() {
            return this.qv;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SyncedLearnerTracker.java,SyncedLearnerTracker.QuorumVerifierAcksetPair,getAckset,HashSet<Long> getAckset(),"[86, 88]","{'A593': [(86, 88)]}",{'A593': 1.0},A593,,"        public HashSet<Long> getAckset() {
            return this.ackset;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,setupRequestProcessors,void setupRequestProcessors(),"[64, 71]","{'A600': [(64, 71)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void setupRequestProcessors() {
        RequestProcessor finalProcessor = new FinalRequestProcessor(this);
        RequestProcessor prepProcessor = new PrepRequestProcessor(this, finalProcessor);
        ((PrepRequestProcessor) prepProcessor).start();
        firstProcessor = new ReadOnlyRequestProcessor(this, prepProcessor);
        ((ReadOnlyRequestProcessor) firstProcessor).start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,startup,void startup(),"[73, 85]","{'A600': [(73, 73), (80, 81), (85, 85)], 'A596': [(74, 79), (84, 84)], 'A630': [(82, 82)], 'A591': [(83, 83)]}","{'A600': 0.3076923076923077, 'A596': 0.5384615384615384, 'A630': 0.07692307692307693, 'A591': 0.07692307692307693}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    public synchronized void startup() {
        // check to avoid startup follows shutdown
        if (shutdown) {
            LOG.warn(""Not starting Read-only server as startup follows shutdown!"");
            return;
        }
        registerJMX(new ReadOnlyBean(this), self.jmxLocalPeerBean);
        super.startup();
        self.setZooKeeperServer(this);
        self.adminServer.setZooKeeperServer(this);
        LOG.info(""Read-only server started"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,createSessionTracker,void createSessionTracker(),"[87, 93]","{'A675': [(87, 90), (92, 93)], 'A702': [(91, 91)]}","{'A675': 0.8571428571428571, 'A702': 0.14285714285714285}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    public void createSessionTracker() {
        sessionTracker = new LearnerSessionTracker(
                this, getZKDatabase().getSessionWithTimeOuts(),
                this.tickTime, self.getMyId(), self.areLocalSessionsEnabled(),
                getZooKeeperServerListener());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,startSessionTracker,void startSessionTracker(),"[95, 98]","{'A675': [(95, 98)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void startSessionTracker() {
        ((LearnerSessionTracker) sessionTracker).start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,setLocalSessionFlag,void setLocalSessionFlag(Request),"[100, 119]","{'A675': [(100, 119)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void setLocalSessionFlag(Request si) {
        switch (si.type) {
            case OpCode.createSession:
                if (self.areLocalSessionsEnabled()) {
                    si.setLocalSession(true);
                }
                break;
            case OpCode.closeSession:
                if (((UpgradeableSessionTracker) sessionTracker).isLocalSession(si.sessionId)) {
                    si.setLocalSession(true);
                } else {
                    LOG.warn(""Submitting global closeSession request for session 0x{} in ReadOnly mode"",
                            Long.toHexString(si.sessionId));
                }
                break;
            default:
                break;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,validateSession,"void validateSession(ServerCnxn,long)","[121, 128]","{'A675': [(121, 128)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void validateSession(ServerCnxn cnxn, long sessionId) throws IOException {
        if (((LearnerSessionTracker) sessionTracker).isGlobalSession(sessionId)) {
            String msg = ""Refusing global session reconnection in RO mode "" + cnxn.getRemoteSocketAddress();
            LOG.info(msg);
            throw new ServerCnxn.CloseRequestException(msg, ServerCnxn.DisconnectReason.RENEW_GLOBAL_SESSION_IN_RO_MODE);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,registerJMX,void registerJMX(),"[130, 140]","{'A600': [(130, 140)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void registerJMX() {
        // register with JMX
        try {
            jmxDataTreeBean = new DataTreeBean(getZKDatabase().getDataTree());
            MBeanRegistry.getInstance().register(jmxDataTreeBean, jmxServerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxDataTreeBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,registerJMX,"void registerJMX(ZooKeeperServerBean,LocalPeerBean)","[142, 151]","{'A600': [(142, 151)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    public void registerJMX(ZooKeeperServerBean serverBean, LocalPeerBean localPeerBean) {
        // register with JMX
        try {
            jmxServerBean = serverBean;
            MBeanRegistry.getInstance().register(serverBean, localPeerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxServerBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,unregisterJMX,void unregisterJMX(),"[153, 164]","{'A600': [(153, 164)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void unregisterJMX() {
        // unregister from JMX
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxDataTreeBean = null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,unregisterJMX,void unregisterJMX(ZooKeeperServer),"[166, 176]","{'A600': [(166, 176)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    protected void unregisterJMX(ZooKeeperServer zks) {
        // unregister from JMX
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxServerBean = null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,getState,String getState(),"[178, 181]","{'A600': [(178, 181)]}",{'A600': 1.0},A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    public String getState() {
        return ""read-only"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,getServerId,long getServerId(),"[187, 190]","{'A600': [(187, 188), (190, 190)], 'A702': [(189, 189)]}","{'A600': 0.75, 'A702': 0.25}",A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    public long getServerId() {
        return self.getMyId();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,shutdownComponents,void shutdownComponents(),"[192, 206]","{'A600': [(192, 192), (195, 197), (199, 199), (201, 201), (204, 204), (206, 206)], 'A596': [(194, 194)], 'A630': [(198, 198), (200, 200)], 'A591': [(202, 203)], 'A695': [(193, 193), (205, 205)]}","{'A600': 0.5333333333333333, 'A596': 0.06666666666666667, 'A630': 0.13333333333333333, 'A591': 0.13333333333333333, 'A695': 0.13333333333333333}",A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void shutdownComponents() {
        shutdown = true;
        unregisterJMX(this);

        // set peer's server to null
        self.setZooKeeperServer(null);
        // clear all the connections
        self.closeAllConnections();

        self.adminServer.setZooKeeperServer(null);

        // shutdown the server itself
        super.shutdownComponents();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,dumpConf,void dumpConf(PrintWriter),"[208, 226]","{'A648': [(208, 218), (221, 221), (224, 226)], 'A653': [(219, 220), (222, 223)]}","{'A648': 0.7894736842105263, 'A653': 0.21052631578947367}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    public void dumpConf(PrintWriter pwriter) {
        super.dumpConf(pwriter);

        pwriter.print(""initLimit="");
        pwriter.println(self.getInitLimit());
        pwriter.print(""syncLimit="");
        pwriter.println(self.getSyncLimit());
        pwriter.print(""electionAlg="");
        pwriter.println(self.getElectionType());
        pwriter.print(""electionPort="");
        pwriter.println(self.getElectionAddress().getAllPorts()
                .stream().map(Objects::toString).collect(Collectors.joining(""|"")));
        pwriter.print(""quorumPort="");
        pwriter.println(self.getQuorumAddress().getAllPorts()
                .stream().map(Objects::toString).collect(Collectors.joining(""|"")));
        pwriter.print(""peerType="");
        pwriter.println(self.getLearnerType().ordinal());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServer.java,ReadOnlyZooKeeperServer,setState,void setState(State),"[228, 231]","{'A597': [(228, 231)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/ReadOnlyZooKeeperServerTest.java,"    @Override
    protected void setState(State state) {
        this.state = state;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getObserverMasterPort,int getObserverMasterPort(),"[172, 174]","{'A647': [(172, 174)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getObserverMasterPort() {
        return observerMasterPort;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setObserverMasterPort,void setObserverMasterPort(int),"[176, 178]","{'A647': [(176, 178)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setObserverMasterPort(int observerMasterPort) {
        this.observerMasterPort = observerMasterPort;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isMultiAddressEnabled,boolean isMultiAddressEnabled(),"[184, 186]","{'A653': [(184, 186)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean isMultiAddressEnabled() {
        return multiAddressEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMultiAddressEnabled,void setMultiAddressEnabled(boolean),"[188, 191]","{'A653': [(188, 191)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMultiAddressEnabled(boolean multiAddressEnabled) {
        this.multiAddressEnabled = multiAddressEnabled;
        LOG.info(""multiAddress.enabled set to {}"", multiAddressEnabled);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getMultiAddressReachabilityCheckTimeoutMs,int getMultiAddressReachabilityCheckTimeoutMs(),"[196, 198]","{'A653': [(196, 198)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getMultiAddressReachabilityCheckTimeoutMs() {
        return multiAddressReachabilityCheckTimeoutMs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMultiAddressReachabilityCheckTimeoutMs,void setMultiAddressReachabilityCheckTimeoutMs(int),"[200, 203]","{'A653': [(200, 203)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMultiAddressReachabilityCheckTimeoutMs(int multiAddressReachabilityCheckTimeoutMs) {
        this.multiAddressReachabilityCheckTimeoutMs = multiAddressReachabilityCheckTimeoutMs;
        LOG.info(""multiAddress.reachabilityCheckTimeoutMs set to {}"", multiAddressReachabilityCheckTimeoutMs);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isMultiAddressReachabilityCheckEnabled,boolean isMultiAddressReachabilityCheckEnabled(),"[209, 211]","{'A653': [(209, 211)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean isMultiAddressReachabilityCheckEnabled() {
        return multiAddressReachabilityCheckEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMultiAddressReachabilityCheckEnabled,void setMultiAddressReachabilityCheckEnabled(boolean),"[213, 216]","{'A653': [(213, 216)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMultiAddressReachabilityCheckEnabled(boolean multiAddressReachabilityCheckEnabled) {
        this.multiAddressReachabilityCheckEnabled = multiAddressReachabilityCheckEnabled;
        LOG.info(""multiAddress.reachabilityCheckEnabled set to {}"", multiAddressReachabilityCheckEnabled);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,getId,long getId(),"[261, 263]","{'A584': [(261, 263)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public long getId() {
            return id;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,recreateSocketAddresses,void recreateSocketAddresses(),"[271, 282]","{'A630': [(271, 271), (273, 275), (277, 279)], 'A653': [(272, 272), (276, 276), (280, 282)]}","{'A630': 0.5833333333333334, 'A653': 0.4166666666666667}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public void recreateSocketAddresses() {
            if (this.addr.isEmpty()) {
                LOG.warn(""Server address has not been initialized"");
                return;
            }
            if (this.electionAddr.isEmpty()) {
                LOG.warn(""Election address has not been initialized"");
                return;
            }
            this.addr.recreateSocketAddresses();
            this.electionAddr.recreateSocketAddresses();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,getType,LearnerType getType(String),"[284, 293]","{'A653': [(284, 291)], 'A702': [(292, 293)]}","{'A653': 0.8, 'A702': 0.2}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        private LearnerType getType(String s) throws ConfigException {
            switch (s.trim().toLowerCase()) {
                case ""observer"":
                    return LearnerType.OBSERVER;
                case ""participant"":
                    return LearnerType.PARTICIPANT;
                default:
                    throw new ConfigException(""Unrecognised peertype: "" + s);
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,initializeWithAddressString,"void initializeWithAddressString(String,Function<InetSocketAddress, InetAddress>)","[329, 444]","{'A583': [(331, 331), (335, 335), (442, 442)], 'A669': [(334, 334), (345, 360), (362, 363), (378, 379)], 'A590': [(333, 333), (336, 340), (342, 342), (344, 344), (361, 361), (364, 365), (444, 444)], 'A653': [(330, 330), (332, 332), (366, 368), (370, 371), (377, 377), (380, 381), (385, 388), (390, 391), (393, 394), (396, 397), (399, 399), (401, 402), (423, 435), (439, 441)], 'A637': [(329, 329), (341, 341), (343, 343), (369, 369), (372, 376), (383, 384), (389, 389), (392, 392), (395, 395), (398, 398), (403, 422), (436, 436)], 'A616': [(382, 382), (437, 438), (443, 443)], 'A609': [(400, 400)]}","{'A583': 0.02586206896551724, 'A669': 0.1810344827586207, 'A590': 0.10344827586206896, 'A653': 0.33620689655172414, 'A637': 0.3103448275862069, 'A616': 0.034482758620689655, 'A609': 0.008620689655172414}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        private void initializeWithAddressString(String addressStr, Function<InetSocketAddress, InetAddress> getInetAddress) throws ConfigException {
            LearnerType newType = null;
            String[] serverClientParts = addressStr.split("";"");
            String[] serverAddresses = serverClientParts[0].split(""\\|"");

            if (serverClientParts.length >= 2 && !serverClientParts[1].isEmpty()) {
                String[] clientParts = ConfigUtils.getHostAndPort(serverClientParts[1]);
                if (clientParts.length > 2) {
                    throw new ConfigException(addressStr + wrongFormat);
                }

                // is client_config a host:port or just a port
                String clientHostName = (clientParts.length == 2) ? clientParts[0] : ""0.0.0.0"";
                try {
                    clientAddr = new InetSocketAddress(clientHostName, Integer.parseInt(clientParts[clientParts.length - 1]));
                } catch (NumberFormatException e) {
                    throw new ConfigException(""Address unresolved: "" + clientHostName + "":"" + clientParts[clientParts.length - 1]);
                }
            }

            if (serverClientParts.length == 3 && !serverClientParts[2].isEmpty()) {
                String[] secureClientParts = ConfigUtils.getHostAndPort(serverClientParts[2]);
                if (secureClientParts.length > 2) {
                    throw new ConfigException(addressStr + wrongFormat);
                }

                // is secure client config a host:port or just a port
                String secureClientHostName = (secureClientParts.length == 2) ? secureClientParts[0] : ""0.0.0.0"";
                try {
                    secureClientAddr = new InetSocketAddress(secureClientHostName, Integer.parseInt(secureClientParts[secureClientParts.length - 1]));
                } catch (NumberFormatException e) {
                    throw new ConfigException(""Address unresolved: "" + secureClientHostName + "":"" + secureClientParts[secureClientParts.length - 1]);
                }
                // set x509 auth provider if not already set
                configureSSLAuth();
            }

            boolean multiAddressEnabled = Boolean.parseBoolean(
                System.getProperty(QuorumPeer.CONFIG_KEY_MULTI_ADDRESS_ENABLED, QuorumPeer.CONFIG_DEFAULT_MULTI_ADDRESS_ENABLED));
            if (!multiAddressEnabled && serverAddresses.length > 1) {
                throw new ConfigException(""Multiple address feature is disabled, but multiple addresses were specified for sid "" + this.id);
            }

            boolean canonicalize = Boolean.parseBoolean(
                System.getProperty(
                    CONFIG_KEY_KERBEROS_CANONICALIZE_HOST_NAMES,
                    CONFIG_DEFAULT_KERBEROS_CANONICALIZE_HOST_NAMES));

            for (String serverAddress : serverAddresses) {
                String[] serverParts = ConfigUtils.getHostAndPort(serverAddress);
                if ((serverParts.length < 3) || (serverParts.length > 4)) {
                    throw new ConfigException(addressStr + wrongFormat);
                }

                String serverHostName = serverParts[0];

                // server_config should be either host:port:port or host:port:port:type
                InetSocketAddress tempAddress;
                InetSocketAddress tempElectionAddress;
                try {
                    tempAddress = new InetSocketAddress(serverHostName, Integer.parseInt(serverParts[1]));
                    addr.addAddress(tempAddress);
                } catch (NumberFormatException e) {
                    throw new ConfigException(""Address unresolved: "" + serverHostName + "":"" + serverParts[1]);
                }
                try {
                    tempElectionAddress = new InetSocketAddress(serverHostName, Integer.parseInt(serverParts[2]));
                    electionAddr.addAddress(tempElectionAddress);
                } catch (NumberFormatException e) {
                    throw new ConfigException(""Address unresolved: "" + serverHostName + "":"" + serverParts[2]);
                }

                if (tempAddress.getPort() == tempElectionAddress.getPort()) {
                    throw new ConfigException(""Client and election port must be different! Please update the ""
                            + ""configuration file on server."" + this.id);
                }

                if (canonicalize) {
                    InetAddress ia = getInetAddress.apply(tempAddress);
                    if (ia == null) {
                        throw new ConfigException(""Unable to canonicalize address "" + serverHostName + "" because it's not resolvable"");
                    }

                    String canonicalHostName = ia.getCanonicalHostName();

                    if (!canonicalHostName.equals(serverHostName)
                        // Avoid using literal IP address when
                        // security check fails
                        && !canonicalHostName.equals(ia.getHostAddress())) {
                        LOG.info(""Host name for quorum server {} ""
                            + ""canonicalized from {} to {}"",
                            this.id, serverHostName, canonicalHostName);
                        serverHostName = canonicalHostName;
                    }
                }

                if (serverParts.length == 4) {
                    LearnerType tempType = getType(serverParts[3]);
                    if (newType == null) {
                        newType = tempType;
                    }

                    if (newType != tempType) {
                        throw new ConfigException(""Multiple addresses should have similar roles: "" + type + "" vs "" + tempType);
                    }
                }

                this.hostname = serverHostName;
            }

            if (newType != null) {
                type = newType;
            }

            setMyAddrs();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,getInetAddress,InetAddress getInetAddress(InetSocketAddress),"[446, 448]","{'A596': [(448, 448)], 'A637': [(446, 447)]}","{'A596': 0.3333333333333333, 'A637': 0.6666666666666666}",A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        private static InetAddress getInetAddress(InetSocketAddress addr) {
            return addr.getAddress();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,setMyAddrs,void setMyAddrs(),"[450, 457]","{'A669': [(454, 454)], 'A653': [(451, 452), (455, 455)], 'A616': [(450, 450), (453, 453), (456, 457)]}","{'A669': 0.125, 'A653': 0.375, 'A616': 0.5}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        private void setMyAddrs() {
            this.myAddrs = new ArrayList<>();
            this.myAddrs.addAll(this.addr.getAllAddresses());
            this.myAddrs.add(this.clientAddr);
            this.myAddrs.add(this.secureClientAddr);
            this.myAddrs.addAll(this.electionAddr.getAllAddresses());
            this.myAddrs = excludedSpecialAddresses(this.myAddrs);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,delimitedHostString,String delimitedHostString(InetSocketAddress),"[459, 466]","{'A583': [(459, 459)], 'A702': [(460, 466)]}","{'A583': 0.125, 'A702': 0.875}",A702,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public static String delimitedHostString(InetSocketAddress addr) {
            String host = addr.getHostString();
            if (host.contains("":"")) {
                return ""["" + host + ""]"";
            } else {
                return host;
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,toString,String toString(),"[468, 507]","{'A583': [(468, 468), (480, 480), (482, 486), (489, 489), (506, 506)], 'A669': [(488, 488), (490, 490), (497, 505)], 'A590': [(491, 491), (495, 495), (507, 507)], 'A653': [(470, 479), (481, 481), (487, 487), (496, 496)], 'A702': [(469, 469), (492, 492)], 'A639': [(493, 494)]}","{'A583': 0.225, 'A669': 0.275, 'A590': 0.075, 'A653': 0.325, 'A702': 0.05, 'A639': 0.05}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public String toString() {
            StringWriter sw = new StringWriter();

            List<InetSocketAddress> addrList = new LinkedList<>(addr.getAllAddresses());
            List<InetSocketAddress> electionAddrList = new LinkedList<>(electionAddr.getAllAddresses());

            if (addrList.size() > 0 && electionAddrList.size() > 0) {
                addrList.sort(Comparator.comparing(InetSocketAddress::getHostString));
                electionAddrList.sort(Comparator.comparing(InetSocketAddress::getHostString));
                sw.append(IntStream.range(0, addrList.size()).mapToObj(i -> String.format(""%s:%d:%d"",
                        delimitedHostString(addrList.get(i)), addrList.get(i).getPort(), electionAddrList.get(i).getPort()))
                        .collect(Collectors.joining(""|"")));
            }

            if (type == LearnerType.OBSERVER) {
                sw.append("":observer"");
            } else if (type == LearnerType.PARTICIPANT) {
                sw.append("":participant"");
            }

            boolean clientPortSpecAdded = false;
            if (clientAddr != null && !isClientAddrFromStatic) {
                clientPortSpecAdded = true;
                sw.append("";"");
                sw.append(delimitedHostString(clientAddr));
                sw.append("":"");
                sw.append(String.valueOf(clientAddr.getPort()));
            }

            if (secureClientAddr != null & !isSecureClientAddrFromStatic) {
                if (!clientPortSpecAdded) {
                    sw.append("";"");
                }
                sw.append("";"");
                sw.append(delimitedHostString(secureClientAddr));
                sw.append("":"");
                sw.append(String.valueOf(secureClientAddr.getPort()));
            }
            return sw.toString();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,hashCode,int hashCode(),"[509, 512]","{'A583': [(510, 511)], 'A590': [(509, 509), (512, 512)]}","{'A583': 0.5, 'A590': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public int hashCode() {
            assert false : ""hashCode not designed"";
            return 42; // any arbitrary constant will do
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,checkAddressesEqual,"boolean checkAddressesEqual(InetSocketAddress,InetSocketAddress)","[514, 518]","{'A583': [(515, 518)], 'A669': [(514, 514)]}","{'A583': 0.8, 'A669': 0.2}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        private static boolean checkAddressesEqual(InetSocketAddress addr1, InetSocketAddress addr2) {
            return (addr1 != null || addr2 == null)
                   && (addr1 == null || addr2 != null)
                   && (addr1 == null || addr2 == null || addr1.equals(addr2));
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,equals,boolean equals(Object),"[520, 538]","{'A583': [(520, 527), (529, 530), (532, 533)], 'A669': [(534, 537)], 'A590': [(538, 538)], 'A653': [(528, 528), (531, 531)]}","{'A583': 0.631578947368421, 'A669': 0.21052631578947367, 'A590': 0.05263157894736842, 'A653': 0.10526315789473684}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public boolean equals(Object o) {
            if (!(o instanceof QuorumServer)) {
                return false;
            }
            QuorumServer qs = (QuorumServer) o;
            if ((qs.id != id) || (qs.type != type)) {
                return false;
            }
            if (!addr.equals(qs.addr)) {
                return false;
            }
            if (!electionAddr.equals(qs.electionAddr)) {
                return false;
            }
            if (!checkAddressesEqual(clientAddr, qs.clientAddr)) {
                return false;
            }
            return checkAddressesEqual(secureClientAddr, qs.secureClientAddr);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,checkAddressDuplicate,void checkAddressDuplicate(QuorumServer),"[540, 556]","{'A583': [(547, 547), (549, 549)], 'A669': [(543, 543)], 'A653': [(541, 541), (544, 544)], 'A616': [(540, 540), (542, 542), (545, 546), (548, 548), (550, 556)]}","{'A583': 0.11764705882352941, 'A669': 0.058823529411764705, 'A653': 0.11764705882352941, 'A616': 0.7058823529411765}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        public void checkAddressDuplicate(QuorumServer s) throws BadArgumentsException {
            List<InetSocketAddress> otherAddrs = new ArrayList<>(s.addr.getAllAddresses());
            otherAddrs.add(s.clientAddr);
            otherAddrs.add(s.secureClientAddr);
            otherAddrs.addAll(s.electionAddr.getAllAddresses());
            otherAddrs = excludedSpecialAddresses(otherAddrs);

            for (InetSocketAddress my : this.myAddrs) {

                for (InetSocketAddress other : otherAddrs) {
                    if (my.equals(other)) {
                        String error = String.format(""%s of server.%d conflicts %s of server.%d"", my, this.id, other, s.id);
                        throw new BadArgumentsException(error);
                    }
                }
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.QuorumServer,excludedSpecialAddresses,List<InetSocketAddress> excludedSpecialAddresses(List<InetSocketAddress>),"[558, 574]","{'A647': [(559, 559)], 'A616': [(558, 558), (560, 566), (569, 574)], 'A690': [(567, 568)]}","{'A647': 0.058823529411764705, 'A616': 0.8235294117647058, 'A690': 0.11764705882352941}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        private List<InetSocketAddress> excludedSpecialAddresses(List<InetSocketAddress> addrs) {
            List<InetSocketAddress> included = new ArrayList<>();

            for (InetSocketAddress addr : addrs) {
                if (addr == null) {
                    continue;
                }
                InetAddress inetaddr = addr.getAddress();

                if (inetaddr == null || inetaddr.isAnyLocalAddress() // wildCard addresses (0.0.0.0 or [::])
                    || inetaddr.isLoopbackAddress()) { // loopback address(localhost/127.0.0.1)
                    continue;
                }
                included.add(addr);
            }
            return included;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getLearnerType,LearnerType getLearnerType(),"[640, 642]","{'A596': [(640, 642)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public LearnerType getLearnerType() {
        return learnerType;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setLearnerType,void setLearnerType(LearnerType),"[647, 649]","{'A590': [(649, 649)], 'A596': [(647, 648)]}","{'A590': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setLearnerType(LearnerType p) {
        learnerType = p;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setConfigFileName,void setConfigFileName(String),"[651, 653]","{'A590': [(651, 653)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected synchronized void setConfigFileName(String s) {
        configFilename = s;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getQuorumSize,int getQuorumSize(),"[657, 659]","{'A583': [(657, 657)], 'A591': [(659, 659)], 'A596': [(658, 658)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getQuorumSize() {
        return getVotingView().size();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setJvmPauseMonitor,void setJvmPauseMonitor(JvmPauseMonitor),"[661, 663]","{'A609': [(661, 663)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setJvmPauseMonitor(JvmPauseMonitor jvmPauseMonitor) {
        this.jvmPauseMonitor = jvmPauseMonitor;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getMyId,long getMyId(),"[686, 688]","{'A591': [(687, 688)], 'A702': [(686, 686)]}","{'A591': 0.6666666666666666, 'A702': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public long getMyId() {
        return myid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setId,void setId(long),"[691, 693]","{'A584': [(691, 693)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setId(long id) {
        this.myid = id;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isSslQuorum,boolean isSslQuorum(),"[698, 700]","{'A613': [(698, 700)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean isSslQuorum() {
        return sslQuorum;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,shouldUsePortUnification,boolean shouldUsePortUnification(),"[702, 704]","{'A613': [(702, 704)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean shouldUsePortUnification() {
        return shouldUsePortUnification;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getX509Util,QuorumX509Util getX509Util(),"[708, 710]","{'A627': [(708, 710)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    QuorumX509Util getX509Util() {
        return x509Util;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getCurrentVote,Vote getCurrentVote(),"[717, 719]","{'A583': [(717, 717)], 'A596': [(718, 719)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized Vote getCurrentVote() {
        return currentVote;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setCurrentVote,void setCurrentVote(Vote),"[721, 723]","{'A583': [(721, 721)], 'A591': [(723, 723)], 'A596': [(722, 722)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void setCurrentVote(Vote v) {
        currentVote = v;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer.ResponderThread,run,void run(),"[881, 940]","{'A583': [(884, 884), (890, 890), (905, 905), (934, 934), (936, 936)], 'A591': [(882, 883), (885, 886), (888, 889), (891, 894), (897, 897), (900, 903), (909, 914), (916, 921), (925, 925), (927, 932), (937, 940)], 'A590': [(881, 881), (898, 899), (915, 915)], 'A596': [(887, 887), (895, 896), (904, 904), (906, 908), (922, 924), (926, 926)], 'A593': [(933, 933), (935, 935)]}","{'A583': 0.08333333333333333, 'A591': 0.6333333333333333, 'A590': 0.06666666666666667, 'A596': 0.18333333333333332, 'A593': 0.03333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"        @Override
        public void run() {
            try {
                byte[] b = new byte[36];
                ByteBuffer responseBuffer = ByteBuffer.wrap(b);
                DatagramPacket packet = new DatagramPacket(b, b.length);
                while (running) {
                    udpSocket.receive(packet);
                    if (packet.getLength() != 4) {
                        LOG.warn(""Got more than just an xid! Len = {}"", packet.getLength());
                    } else {
                        responseBuffer.clear();
                        responseBuffer.getInt(); // Skip the xid
                        responseBuffer.putLong(myid);
                        Vote current = getCurrentVote();
                        switch (getPeerState()) {
                        case LOOKING:
                            responseBuffer.putLong(current.getId());
                            responseBuffer.putLong(current.getZxid());
                            break;
                        case LEADING:
                            responseBuffer.putLong(myid);
                            try {
                                long proposed;
                                synchronized (leader) {
                                    proposed = leader.lastProposed;
                                }
                                responseBuffer.putLong(proposed);
                            } catch (NullPointerException npe) {
                                // This can happen in state transitions,
                                // just ignore the request
                            }
                            break;
                        case FOLLOWING:
                            responseBuffer.putLong(current.getId());
                            try {
                                responseBuffer.putLong(follower.getZxid());
                            } catch (NullPointerException npe) {
                                // This can happen in state transitions,
                                // just ignore the request
                            }
                            break;
                        case OBSERVING:
                            // Do nothing, Observers keep themselves to
                            // themselves.
                            break;
                        }
                        packet.setData(b);
                        udpSocket.send(packet);
                    }
                    packet.setLength(b.length);
                }
            } catch (RuntimeException e) {
                LOG.warn(""Unexpected runtime exception in ResponderThread"", e);
            } catch (IOException e) {
                LOG.warn(""Unexpected IO exception in ResponderThread"", e);
            } finally {
                LOG.warn(""QuorumPeer responder thread exited"");
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setPeerState,void setPeerState(ServerState),"[953, 961]","{'A647': [(953, 961)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void setPeerState(ServerState newState) {
        state = newState;
        if (newState == ServerState.LOOKING) {
            setLeaderAddressAndId(null, -1);
            setZabState(ZabState.ELECTION);
        } else {
            LOG.info(""Peer state changed: {}"", getDetailedPeerState());
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setZabState,void setZabState(ZabState),"[963, 974]","{'A647': [(963, 963), (972, 974)], 'A675': [(964, 971)]}","{'A647': 0.3333333333333333, 'A675': 0.6666666666666666}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setZabState(ZabState zabState) {
        if ((zabState == ZabState.BROADCAST) && (unavailableStartTime != 0)) {
            long unavailableTime = Time.currentElapsedTime() - unavailableStartTime;
            ServerMetrics.getMetrics().UNAVAILABLE_TIME.add(unavailableTime);
            if (getPeerState() == ServerState.LEADING) {
                ServerMetrics.getMetrics().LEADER_UNAVAILABLE_TIME.add(unavailableTime);
            }
            unavailableStartTime = 0;
        }
        this.zabState.set(zabState);
        LOG.info(""Peer state changed: {}"", getDetailedPeerState());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setSyncMode,void setSyncMode(SyncMode),"[976, 979]","{'A647': [(976, 979)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setSyncMode(SyncMode syncMode) {
        this.syncMode.set(syncMode);
        LOG.info(""Peer state changed: {}"", getDetailedPeerState());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getZabState,ZabState getZabState(),"[981, 983]","{'A647': [(981, 983)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public ZabState getZabState() {
        return zabState.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getSyncMode,SyncMode getSyncMode(),"[985, 987]","{'A647': [(985, 987)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public SyncMode getSyncMode() {
        return syncMode.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setLeaderAddressAndId,"void setLeaderAddressAndId(MultipleAddresses,long)","[989, 996]","{'A653': [(989, 989), (991, 991)], 'A647': [(990, 990), (992, 996)]}","{'A653': 0.25, 'A647': 0.75}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setLeaderAddressAndId(MultipleAddresses addr, long newId) {
        if (addr != null) {
            leaderAddress.set(String.join(""|"", addr.getAllHostStrings()));
        } else {
            leaderAddress.set(null);
        }
        leaderId.set(newId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getLeaderAddress,String getLeaderAddress(),"[998, 1000]","{'A591': [(1000, 1000)], 'A647': [(998, 999)]}","{'A591': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public String getLeaderAddress() {
        return leaderAddress.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getLeaderId,long getLeaderId(),"[1002, 1004]","{'A647': [(1002, 1004)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public long getLeaderId() {
        return leaderId.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getDetailedPeerState,String getDetailedPeerState(),"[1006, 1017]","{'A647': [(1006, 1017)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public String getDetailedPeerState() {
        final StringBuilder sb = new StringBuilder(getPeerState().toString().toLowerCase());
        final ZabState zabState = getZabState();
        if (!ZabState.ELECTION.equals(zabState)) {
            sb.append("" - "").append(zabState.toString().toLowerCase());
        }
        final SyncMode syncMode = getSyncMode();
        if (!SyncMode.NONE.equals(syncMode)) {
            sb.append("" - "").append(syncMode.toString().toLowerCase());
        }
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,reconfigFlagSet,void reconfigFlagSet(),"[1019, 1021]","{'A583': [(1019, 1020)], 'A590': [(1021, 1021)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void reconfigFlagSet() {
        reconfigFlag = true;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,reconfigFlagClear,void reconfigFlagClear(),"[1022, 1024]","{'A583': [(1022, 1023)], 'A590': [(1024, 1024)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void reconfigFlagClear() {
        reconfigFlag = false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isReconfigStateChange,boolean isReconfigStateChange(),"[1025, 1027]","{'A583': [(1025, 1026)], 'A590': [(1027, 1027)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized boolean isReconfigStateChange() {
        return reconfigFlag;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getPeerState,ServerState getPeerState(),"[1028, 1030]","{'A583': [(1028, 1028)], 'A591': [(1029, 1030)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized ServerState getPeerState() {
        return state;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,recreateSocketAddresses,void recreateSocketAddresses(long),"[1043, 1061]","{'A669': [(1050, 1050)], 'A630': [(1043, 1048), (1051, 1061)], 'A702': [(1049, 1049)]}","{'A669': 0.05263157894736842, 'A630': 0.8947368421052632, 'A702': 0.05263157894736842}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void recreateSocketAddresses(long id) {
        QuorumVerifier qv = getQuorumVerifier();
        if (qv != null) {
            QuorumServer qs = qv.getAllMembers().get(id);
            if (qs != null) {
                qs.recreateSocketAddresses();
                if (id == getMyId()) {
                    setAddrs(qs.addr, qs.electionAddr, qs.clientAddr, qs.secureClientAddr);
                }
            }
        }
        qv = getLastSeenQuorumVerifier();
        if (qv != null) {
            QuorumServer qs = qv.getAllMembers().get(id);
            if (qs != null) {
                qs.recreateSocketAddresses();
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getAddrs,AddressTuple getAddrs(),"[1063, 1081]","{'A583': [(1063, 1063)], 'A590': [(1081, 1081)], 'A721': [(1064, 1066), (1068, 1079)], 'A604': [(1067, 1067), (1080, 1080)]}","{'A583': 0.05263157894736842, 'A590': 0.05263157894736842, 'A721': 0.7894736842105263, 'A604': 0.10526315789473684}",A721,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private AddressTuple getAddrs() {
        AddressTuple addrs = myAddrs.get();
        if (addrs != null) {
            return addrs;
        }
        try {
            synchronized (QV_LOCK) {
                addrs = myAddrs.get();
                while (addrs == null) {
                    QV_LOCK.wait();
                    addrs = myAddrs.get();
                }
                return addrs;
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException(e);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getQuorumAddress,MultipleAddresses getQuorumAddress(),"[1083, 1085]","{'A590': [(1085, 1085)], 'A653': [(1083, 1083)], 'A721': [(1084, 1084)]}","{'A590': 0.3333333333333333, 'A653': 0.3333333333333333, 'A721': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public MultipleAddresses getQuorumAddress() {
        return getAddrs().quorumAddr;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getElectionAddress,MultipleAddresses getElectionAddress(),"[1087, 1089]","{'A590': [(1089, 1089)], 'A653': [(1087, 1087)], 'A721': [(1088, 1088)]}","{'A590': 0.3333333333333333, 'A653': 0.3333333333333333, 'A721': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public MultipleAddresses getElectionAddress() {
        return getAddrs().electionAddr;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getClientAddress,InetSocketAddress getClientAddress(),"[1091, 1094]","{'A583': [(1091, 1091)], 'A590': [(1094, 1094)], 'A721': [(1092, 1093)]}","{'A583': 0.25, 'A590': 0.25, 'A721': 0.5}",A721,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public InetSocketAddress getClientAddress() {
        final AddressTuple addrs = myAddrs.get();
        return (addrs == null) ? null : addrs.clientAddr;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getSecureClientAddress,InetSocketAddress getSecureClientAddress(),"[1096, 1099]","{'A669': [(1096, 1099)]}",{'A669': 1.0},A669,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public InetSocketAddress getSecureClientAddress() {
        final AddressTuple addrs = myAddrs.get();
        return (addrs == null) ? null : addrs.secureClientAddr;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setAddrs,"void setAddrs(MultipleAddresses,MultipleAddresses,InetSocketAddress,InetSocketAddress)","[1101, 1107]","{'A669': [(1101, 1102), (1104, 1104)], 'A590': [(1107, 1107)], 'A721': [(1105, 1105)], 'A604': [(1103, 1103), (1106, 1106)]}","{'A669': 0.42857142857142855, 'A590': 0.14285714285714285, 'A721': 0.14285714285714285, 'A604': 0.2857142857142857}",A669,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void setAddrs(MultipleAddresses quorumAddr, MultipleAddresses electionAddr, InetSocketAddress clientAddr,
        InetSocketAddress secureClientAddr) {
        synchronized (QV_LOCK) {
            myAddrs.set(new AddressTuple(quorumAddr, electionAddr, clientAddr, secureClientAddr));
            QV_LOCK.notifyAll();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,testingQuorumPeer,QuorumPeer testingQuorumPeer(),"[1124, 1126]","{'A594': [(1124, 1126)]}",{'A594': 1.0},A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public static QuorumPeer testingQuorumPeer() throws SaslException {
        return new QuorumPeer();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,createX509Util,QuorumX509Util createX509Util(),"[1139, 1141]","{'A612': [(1139, 1141)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    QuorumX509Util createX509Util() {
        return new QuorumX509Util();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,initialize,void initialize(),"[1170, 1183]","{'A583': [(1177, 1178)], 'A594': [(1170, 1172), (1174, 1176), (1179, 1183)], 'A605': [(1173, 1173)]}","{'A583': 0.14285714285714285, 'A594': 0.7857142857142857, 'A605': 0.07142857142857142}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void initialize() throws SaslException {
        // init quorum auth server & learner
        if (isQuorumSaslAuthEnabled()) {
            Set<String> authzHosts = new HashSet<>();
            for (QuorumServer qs : getView().values()) {
                authzHosts.add(qs.hostname);
            }
            authServer = new SaslQuorumAuthServer(isQuorumServerSaslAuthRequired(), quorumServerLoginContext, authzHosts);
            authLearner = new SaslQuorumAuthLearner(isQuorumLearnerSaslAuthRequired(), quorumServicePrincipal, quorumLearnerLoginContext);
        } else {
            authServer = new NullQuorumAuthServer();
            authLearner = new NullQuorumAuthLearner();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,quorumStats,QuorumStats quorumStats(),"[1185, 1187]","{'A591': [(1185, 1186)], 'A590': [(1187, 1187)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    QuorumStats quorumStats() {
        return quorumStats;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,start,void start(),"[1189, 1204]","{'A583': [(1193, 1193)], 'A591': [(1196, 1200)], 'A590': [(1191, 1192), (1194, 1194), (1201, 1201), (1203, 1204)], 'A630': [(1195, 1195)], 'A596': [(1189, 1190)], 'A609': [(1202, 1202)]}","{'A583': 0.0625, 'A591': 0.3125, 'A590': 0.375, 'A630': 0.0625, 'A596': 0.125, 'A609': 0.0625}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    @Override
    public synchronized void start() {
        if (!getView().containsKey(myid)) {
            throw new RuntimeException(""My id "" + myid + "" not in the peer list"");
        }
        loadDataBase();
        startServerCnxnFactory();
        try {
            adminServer.start();
        } catch (AdminServerException e) {
            LOG.warn(""Problem starting AdminServer"", e);
        }
        startLeaderElection();
        startJvmPauseMonitor();
        super.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,loadDataBase,void loadDataBase(),"[1206, 1265]","{'A583': [(1215, 1225), (1243, 1253), (1256, 1259), (1261, 1261)], 'A591': [(1206, 1207), (1212, 1212), (1214, 1214), (1242, 1242), (1265, 1265)], 'A590': [(1209, 1211), (1213, 1213), (1226, 1227), (1240, 1241), (1254, 1255), (1260, 1260)], 'A596': [(1208, 1208), (1263, 1264)], 'A592': [(1228, 1239)], 'A593': [(1262, 1262)]}","{'A583': 0.45, 'A591': 0.1, 'A590': 0.18333333333333332, 'A596': 0.05, 'A592': 0.2, 'A593': 0.016666666666666666}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void loadDataBase() {
        try {
            zkDb.loadDataBase();

            // load the epochs
            long lastProcessedZxid = zkDb.getDataTree().lastProcessedZxid;
            long epochOfZxid = ZxidUtils.getEpochFromZxid(lastProcessedZxid);
            try {
                currentEpoch = readLongFromFile(CURRENT_EPOCH_FILENAME);
            } catch (FileNotFoundException e) {
                // pick a reasonable epoch number
                // this should only happen once when moving to a
                // new code version
                currentEpoch = epochOfZxid;
                LOG.info(
                    ""{} not found! Creating with a reasonable default of {}. ""
                        + ""This should only happen when you are upgrading your installation"",
                    CURRENT_EPOCH_FILENAME,
                    currentEpoch);
                writeLongToFile(CURRENT_EPOCH_FILENAME, currentEpoch);
            }
            if (epochOfZxid > currentEpoch) {
                // acceptedEpoch.tmp file in snapshot directory
                File currentTmp = new File(getTxnFactory().getSnapDir(),
                    CURRENT_EPOCH_FILENAME + AtomicFileOutputStream.TMP_EXTENSION);
                if (currentTmp.exists()) {
                    long epochOfTmp = readLongFromFile(currentTmp.getName());
                    LOG.info(""{} found. Setting current epoch to {}."", currentTmp, epochOfTmp);
                    setCurrentEpoch(epochOfTmp);
                } else {
                    throw new IOException(
                        ""The current epoch, "" + ZxidUtils.zxidToString(currentEpoch)
                            + "", is older than the last zxid, "" + lastProcessedZxid);
                }
            }
            try {
                acceptedEpoch = readLongFromFile(ACCEPTED_EPOCH_FILENAME);
            } catch (FileNotFoundException e) {
                // pick a reasonable epoch number
                // this should only happen once when moving to a
                // new code version
                acceptedEpoch = epochOfZxid;
                LOG.info(
                    ""{} not found! Creating with a reasonable default of {}. ""
                        + ""This should only happen when you are upgrading your installation"",
                    ACCEPTED_EPOCH_FILENAME,
                    acceptedEpoch);
                writeLongToFile(ACCEPTED_EPOCH_FILENAME, acceptedEpoch);
            }
            if (acceptedEpoch < currentEpoch) {
                throw new IOException(""The accepted epoch, ""
                                      + ZxidUtils.zxidToString(acceptedEpoch)
                                      + "" is less than the current epoch, ""
                                      + ZxidUtils.zxidToString(currentEpoch));
            }
        } catch (IOException ie) {
            LOG.error(""Unable to load database on disk"", ie);
            throw new RuntimeException(""Unable to run quorum server "", ie);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,stopLeaderElection,void stopLeaderElection(),"[1269, 1272]","{'A583': [(1269, 1269)], 'A596': [(1270, 1272)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void stopLeaderElection() {
        responder.running = false;
        responder.interrupt();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,startLeaderElection,void startLeaderElection(),"[1273, 1285]","{'A583': [(1273, 1273), (1278, 1278)], 'A591': [(1282, 1282), (1285, 1285)], 'A596': [(1277, 1277), (1284, 1284)], 'A604': [(1274, 1276), (1279, 1281), (1283, 1283)]}","{'A583': 0.15384615384615385, 'A591': 0.15384615384615385, 'A596': 0.15384615384615385, 'A604': 0.5384615384615384}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void startLeaderElection() {
        try {
            if (getPeerState() == ServerState.LOOKING) {
                currentVote = new Vote(myid, getLastLoggedZxid(), getCurrentEpoch());
            }
        } catch (IOException e) {
            RuntimeException re = new RuntimeException(e.getMessage());
            re.setStackTrace(e.getStackTrace());
            throw re;
        }

        this.electionAlg = createElectionAlgorithm(electionType);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,startJvmPauseMonitor,void startJvmPauseMonitor(),"[1287, 1291]","{'A609': [(1287, 1291)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void startJvmPauseMonitor() {
        if (this.jvmPauseMonitor != null) {
            this.jvmPauseMonitor.serviceStart();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,countParticipants,"int countParticipants(Map<Long, QuorumServer>)","[1298, 1306]","{'A583': [(1298, 1305)], 'A596': [(1306, 1306)]}","{'A583': 0.8888888888888888, 'A596': 0.1111111111111111}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected static int countParticipants(Map<Long, QuorumServer> peers) {
        int count = 0;
        for (QuorumServer q : peers.values()) {
            if (q.type == LearnerType.PARTICIPANT) {
                count++;
            }
        }
        return count;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getClientAddress,"InetSocketAddress getClientAddress(Map<Long, QuorumServer>,long,int)","[1364, 1379]","{'A583': [(1364, 1364), (1373, 1376)], 'A669': [(1367, 1367)], 'A616': [(1365, 1366), (1368, 1372), (1377, 1379)]}","{'A583': 0.3125, 'A669': 0.0625, 'A616': 0.625}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private static InetSocketAddress getClientAddress(Map<Long, QuorumServer> quorumPeers, long myid, int clientPort) throws IOException {
        QuorumServer quorumServer = quorumPeers.get(myid);
        if (null == quorumServer) {
            throw new IOException(""No QuorumServer corresponding to myid "" + myid);
        }
        if (null == quorumServer.clientAddr) {
            return new InetSocketAddress(clientPort);
        }
        if (quorumServer.clientAddr.getPort() != clientPort) {
            throw new IOException(""QuorumServer port ""
                                  + quorumServer.clientAddr.getPort()
                                  + "" does not match with given port ""
                                  + clientPort);
        }
        return quorumServer.clientAddr;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getLastLoggedZxid,long getLastLoggedZxid(),"[1386, 1391]","{'A591': [(1388, 1388), (1391, 1391)], 'A590': [(1387, 1387), (1390, 1390)], 'A596': [(1386, 1386), (1389, 1389)]}","{'A591': 0.3333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public long getLastLoggedZxid() {
        if (!zkDb.isInitialized()) {
            loadDataBase();
        }
        return zkDb.getDataTreeLastProcessedZxid();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,makeFollower,Follower makeFollower(FileTxnSnapLog),"[1397, 1399]","{'A591': [(1398, 1399)], 'A590': [(1397, 1397)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected Follower makeFollower(FileTxnSnapLog logFactory) throws IOException {
        return new Follower(this, new FollowerZooKeeperServer(logFactory, this, this.zkDb));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,makeLeader,Leader makeLeader(FileTxnSnapLog),"[1401, 1403]","{'A591': [(1402, 1403)], 'A613': [(1401, 1401)]}","{'A591': 0.6666666666666666, 'A613': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected Leader makeLeader(FileTxnSnapLog logFactory) throws IOException, X509Exception {
        return new Leader(this, new LeaderZooKeeperServer(logFactory, this, this.zkDb));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,makeObserver,Observer makeObserver(FileTxnSnapLog),"[1405, 1407]","{'A591': [(1406, 1406)], 'A596': [(1405, 1405), (1407, 1407)]}","{'A591': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected Observer makeObserver(FileTxnSnapLog logFactory) throws IOException {
        return new Observer(this, new ObserverZooKeeperServer(logFactory, this, this.zkDb));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,createElectionAlgorithm,Election createElectionAlgorithm(int),"[1409, 1440]","{'A583': [(1410, 1411), (1427, 1427)], 'A591': [(1409, 1409), (1412, 1414), (1438, 1440)], 'A721': [(1420, 1425)], 'A594': [(1415, 1415), (1417, 1417), (1419, 1419), (1426, 1426), (1428, 1437)], 'A650': [(1416, 1416), (1418, 1418)]}","{'A583': 0.09375, 'A591': 0.21875, 'A721': 0.1875, 'A594': 0.4375, 'A650': 0.0625}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    @SuppressWarnings(""deprecation"")
    protected Election createElectionAlgorithm(int electionAlgorithm) {
        Election le = null;

        //TODO: use a factory rather than a switch
        switch (electionAlgorithm) {
        case 1:
            throw new UnsupportedOperationException(""Election Algorithm 1 is not supported."");
        case 2:
            throw new UnsupportedOperationException(""Election Algorithm 2 is not supported."");
        case 3:
            QuorumCnxManager qcm = createCnxnManager();
            QuorumCnxManager oldQcm = qcmRef.getAndSet(qcm);
            if (oldQcm != null) {
                LOG.warn(""Clobbering already-set QuorumCnxManager (restarting leader election?)"");
                oldQcm.halt();
            }
            QuorumCnxManager.Listener listener = qcm.listener;
            if (listener != null) {
                listener.start();
                FastLeaderElection fle = new FastLeaderElection(this, qcm);
                fle.start();
                le = fle;
            } else {
                LOG.error(""Null listener when initializing cnx manager"");
            }
            break;
        default:
            assert false;
        }
        return le;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,makeLEStrategy,Election makeLEStrategy(),"[1442, 1446]","{'A583': [(1443, 1443)], 'A591': [(1442, 1442), (1445, 1446)], 'A596': [(1444, 1444)]}","{'A583': 0.2, 'A591': 0.6, 'A596': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    @SuppressWarnings(""deprecation"")
    protected Election makeLEStrategy() {
        LOG.debug(""Initializing leader election protocol..."");
        return electionAlg;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setLeader,void setLeader(Leader),"[1448, 1450]","{'A583': [(1448, 1449)], 'A591': [(1450, 1450)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected synchronized void setLeader(Leader newLeader) {
        leader = newLeader;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setFollower,void setFollower(Follower),"[1452, 1454]","{'A583': [(1452, 1453)], 'A591': [(1454, 1454)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected synchronized void setFollower(Follower newFollower) {
        follower = newFollower;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setObserver,void setObserver(Observer),"[1456, 1458]","{'A583': [(1456, 1457)], 'A596': [(1458, 1458)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected synchronized void setObserver(Observer newObserver) {
        observer = newObserver;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getActiveServer,ZooKeeperServer getActiveServer(),"[1460, 1469]","{'A583': [(1460, 1461), (1463, 1463), (1465, 1465), (1467, 1467)], 'A591': [(1462, 1462), (1464, 1464), (1468, 1469)], 'A596': [(1466, 1466)]}","{'A583': 0.5, 'A591': 0.4, 'A596': 0.1}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized ZooKeeperServer getActiveServer() {
        if (leader != null) {
            return leader.zk;
        } else if (follower != null) {
            return follower.zk;
        } else if (observer != null) {
            return observer.zk;
        }
        return null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setSuspended,void setSuspended(boolean),"[1473, 1475]","{'A584': [(1473, 1475)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setSuspended(boolean suspended) {
        this.suspended.set(suspended);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,checkSuspended,void checkSuspended(),"[1476, 1484]","{'A584': [(1476, 1484)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void checkSuspended() {
        try {
            while (suspended.get()) {
                Thread.sleep(10);
            }
        } catch (InterruptedException err) {
            Thread.currentThread().interrupt();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,run,void run(),"[1486, 1657]","{'A583': [(1494, 1494), (1537, 1538), (1580, 1580), (1583, 1585), (1590, 1590), (1599, 1599), (1614, 1614), (1618, 1618), (1620, 1622), (1632, 1632)], 'A591': [(1487, 1488), (1490, 1493), (1495, 1495), (1497, 1497), (1504, 1504), (1512, 1515), (1517, 1523), (1528, 1529), (1591, 1592), (1612, 1613), (1615, 1617), (1619, 1619), (1623, 1631), (1633, 1637), (1639, 1644), (1651, 1651), (1653, 1654), (1656, 1657)], 'A590': [(1486, 1486), (1562, 1566), (1582, 1582), (1638, 1638)], 'A596': [(1498, 1503), (1506, 1506), (1509, 1511), (1516, 1516), (1533, 1536), (1539, 1556), (1559, 1561), (1567, 1567), (1569, 1572), (1574, 1579), (1586, 1589), (1593, 1598), (1600, 1601), (1610, 1611)], 'A584': [(1505, 1505), (1531, 1531), (1568, 1568)], 'A647': [(1602, 1609)], 'A675': [(1524, 1527)], 'A593': [(1507, 1508), (1645, 1650), (1652, 1652), (1655, 1655)], 'A702': [(1496, 1496)], 'A597': [(1489, 1489)], 'A600': [(1530, 1530), (1532, 1532), (1557, 1558)], 'A722': [(1573, 1573)], 'A625': [(1581, 1581)]}","{'A583': 0.0872093023255814, 'A591': 0.31976744186046513, 'A590': 0.046511627906976744, 'A596': 0.3546511627906977, 'A584': 0.01744186046511628, 'A647': 0.046511627906976744, 'A675': 0.023255813953488372, 'A593': 0.05813953488372093, 'A702': 0.005813953488372093, 'A597': 0.005813953488372093, 'A600': 0.023255813953488372, 'A722': 0.005813953488372093, 'A625': 0.005813953488372093}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    @Override
    public void run() {
        updateThreadName();

        LOG.debug(""Starting quorum peer"");
        try {
            jmxQuorumBean = new QuorumBean(this);
            MBeanRegistry.getInstance().register(jmxQuorumBean, null);
            for (QuorumServer s : getView().values()) {
                ZKMBeanInfo p;
                if (getMyId() == s.id) {
                    p = jmxLocalPeerBean = new LocalPeerBean(this);
                    try {
                        MBeanRegistry.getInstance().register(p, jmxQuorumBean);
                    } catch (Exception e) {
                        LOG.warn(""Failed to register with JMX"", e);
                        jmxLocalPeerBean = null;
                    }
                } else {
                    RemotePeerBean rBean = new RemotePeerBean(this, s);
                    try {
                        MBeanRegistry.getInstance().register(rBean, jmxQuorumBean);
                        jmxRemotePeerBean.put(s.id, rBean);
                    } catch (Exception e) {
                        LOG.warn(""Failed to register with JMX"", e);
                    }
                }
            }
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxQuorumBean = null;
        }

        try {
            /*
             * Main loop
             */
            while (running) {
                if (unavailableStartTime == 0) {
                    unavailableStartTime = Time.currentElapsedTime();
                }

                switch (getPeerState()) {
                case LOOKING:
                    LOG.info(""LOOKING"");
                    ServerMetrics.getMetrics().LOOKING_COUNT.add(1);

                    if (Boolean.getBoolean(""readonlymode.enabled"")) {
                        LOG.info(""Attempting to start ReadOnlyZooKeeperServer"");

                        // Create read-only server but don't start it immediately
                        final ReadOnlyZooKeeperServer roZk = new ReadOnlyZooKeeperServer(logFactory, this, this.zkDb);

                        // Instead of starting roZk immediately, wait some grace
                        // period before we decide we're partitioned.
                        //
                        // Thread is used here because otherwise it would require
                        // changes in each of election strategy classes which is
                        // unnecessary code coupling.
                        Thread roZkMgr = new Thread() {
                            public void run() {
                                try {
                                    // lower-bound grace period to 2 secs
                                    sleep(Math.max(2000, tickTime));
                                    if (ServerState.LOOKING.equals(getPeerState())) {
                                        roZk.startup();
                                    }
                                } catch (InterruptedException e) {
                                    LOG.info(""Interrupted while attempting to start ReadOnlyZooKeeperServer, not started"");
                                } catch (Exception e) {
                                    LOG.error(""FAILED to start ReadOnlyZooKeeperServer"", e);
                                }
                            }
                        };
                        try {
                            roZkMgr.start();
                            reconfigFlagClear();
                            if (shuttingDownLE) {
                                shuttingDownLE = false;
                                startLeaderElection();
                            }
                            setCurrentVote(makeLEStrategy().lookForLeader());
                            checkSuspended();
                        } catch (Exception e) {
                            LOG.warn(""Unexpected exception"", e);
                            setPeerState(ServerState.LOOKING);
                        } finally {
                            // If the thread is in the grace period, interrupt
                            // to come out of waiting.
                            roZkMgr.interrupt();
                            roZk.shutdown();
                        }
                    } else {
                        try {
                            reconfigFlagClear();
                            checkSuspended();
                            if (shuttingDownLE) {
                                shuttingDownLE = false;
                                startLeaderElection();
                            }
                            setCurrentVote(makeLEStrategy().lookForLeader());
                        } catch (Exception e) {
                            LOG.warn(""Unexpected exception"", e);
                            setPeerState(ServerState.LOOKING);
                        }
                    }
                    break;
                case OBSERVING:
                    try {
                        LOG.info(""OBSERVING"");
                        setObserver(makeObserver(logFactory));
                        observer.observeLeader();
                    } catch (Exception e) {
                        LOG.warn(""Unexpected exception"", e);
                    } finally {
                        observer.shutdown();
                        setObserver(null);
                        updateServerState();

                        // Add delay jitter before we switch to LOOKING
                        // state to reduce the load of ObserverMaster
                        if (isRunning()) {
                            Observer.waitForObserverElectionDelay();
                        }
                    }
                    break;
                case FOLLOWING:
                    try {
                        LOG.info(""FOLLOWING"");
                        setFollower(makeFollower(logFactory));
                        follower.followLeader();
                    } catch (Exception e) {
                        LOG.warn(""Unexpected exception"", e);
                    } finally {
                        follower.shutdown();
                        setFollower(null);
                        updateServerState();
                    }
                    break;
                case LEADING:
                    LOG.info(""LEADING"");
                    try {
                        setLeader(makeLeader(logFactory));
                        leader.lead();
                        setLeader(null);
                    } catch (Exception e) {
                        LOG.warn(""Unexpected exception"", e);
                    } finally {
                        if (leader != null) {
                            leader.shutdown(""Forcing shutdown"");
                            setLeader(null);
                        }
                        updateServerState();
                    }
                    break;
                }
            }
        } finally {
            LOG.warn(""QuorumPeer main thread exited"");
            MBeanRegistry instance = MBeanRegistry.getInstance();
            instance.unregister(jmxQuorumBean);
            instance.unregister(jmxLocalPeerBean);

            for (RemotePeerBean remotePeerBean : jmxRemotePeerBean.values()) {
                instance.unregister(remotePeerBean);
            }

            jmxQuorumBean = null;
            jmxLocalPeerBean = null;
            jmxRemotePeerBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,run,void run(),"[1546, 1558]","{'A596': [(1546, 1556)], 'A600': [(1557, 1558)]}","{'A596': 0.8461538461538461, 'A600': 0.15384615384615385}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"                            public void run() {
                                try {
                                    // lower-bound grace period to 2 secs
                                    sleep(Math.max(2000, tickTime));
                                    if (ServerState.LOOKING.equals(getPeerState())) {
                                        roZk.startup();
                                    }
                                } catch (InterruptedException e) {
                                    LOG.info(""Interrupted while attempting to start ReadOnlyZooKeeperServer, not started"");
                                } catch (Exception e) {
                                    LOG.error(""FAILED to start ReadOnlyZooKeeperServer"", e);
                                }
                            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateServerState,void updateServerState(),"[1659, 1680]","{'A583': [(1659, 1665), (1667, 1680)], 'A702': [(1666, 1666)]}","{'A583': 0.9545454545454546, 'A702': 0.045454545454545456}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private synchronized void updateServerState() {
        if (!reconfigFlag) {
            setPeerState(ServerState.LOOKING);
            LOG.warn(""PeerState set to LOOKING"");
            return;
        }

        if (getMyId() == getCurrentVote().getId()) {
            setPeerState(ServerState.LEADING);
            LOG.debug(""PeerState set to LEADING"");
        } else if (getLearnerType() == LearnerType.PARTICIPANT) {
            setPeerState(ServerState.FOLLOWING);
            LOG.debug(""PeerState set to FOLLOWING"");
        } else if (getLearnerType() == LearnerType.OBSERVER) {
            setPeerState(ServerState.OBSERVING);
            LOG.debug(""PeerState set to OBSERVER"");
        } else { // currently shouldn't happen since there are only 2 learner types
            setPeerState(ServerState.LOOKING);
            LOG.debug(""Should not be here"");
        }
        reconfigFlag = false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,shutdown,void shutdown(),"[1682, 1714]","{'A583': [(1692, 1692), (1695, 1695), (1705, 1705)], 'A591': [(1682, 1683), (1685, 1690), (1698, 1704), (1707, 1708), (1713, 1714)], 'A590': [(1709, 1712)], 'A630': [(1691, 1691)], 'A596': [(1693, 1694)], 'A627': [(1684, 1684)], 'A609': [(1696, 1697)], 'A597': [(1706, 1706)]}","{'A583': 0.09090909090909091, 'A591': 0.5757575757575758, 'A590': 0.12121212121212122, 'A630': 0.030303030303030304, 'A596': 0.06060606060606061, 'A627': 0.030303030303030304, 'A609': 0.06060606060606061, 'A597': 0.030303030303030304}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void shutdown() {
        running = false;
        x509Util.close();
        if (leader != null) {
            leader.shutdown(""quorum Peer shutdown"");
        }
        if (follower != null) {
            follower.shutdown();
        }
        shutdownServerCnxnFactory();
        if (udpSocket != null) {
            udpSocket.close();
        }
        if (jvmPauseMonitor != null) {
            jvmPauseMonitor.serviceStop();
        }

        try {
            adminServer.shutdown();
        } catch (AdminServerException e) {
            LOG.warn(""Problem stopping AdminServer"", e);
        }

        if (getElectionAlg() != null) {
            this.interrupt();
            getElectionAlg().shutdown();
        }
        try {
            zkDb.close();
        } catch (IOException ie) {
            LOG.warn(""Error closing logs "", ie);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getView,"Map<Long, QuorumPeer.QuorumServer> getView()","[1720, 1722]","{'A583': [(1720, 1720)], 'A590': [(1721, 1721)], 'A596': [(1722, 1722)]}","{'A583': 0.3333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public Map<Long, QuorumPeer.QuorumServer> getView() {
        return Collections.unmodifiableMap(getQuorumVerifier().getAllMembers());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getVotingView,"Map<Long, QuorumPeer.QuorumServer> getVotingView()","[1728, 1730]","{'A583': [(1728, 1728)], 'A590': [(1729, 1729)], 'A596': [(1730, 1730)]}","{'A583': 0.3333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public Map<Long, QuorumPeer.QuorumServer> getVotingView() {
        return getQuorumVerifier().getVotingMembers();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getObservingView,"Map<Long, QuorumPeer.QuorumServer> getObservingView()","[1735, 1737]","{'A583': [(1735, 1736)], 'A596': [(1737, 1737)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public Map<Long, QuorumPeer.QuorumServer> getObservingView() {
        return getQuorumVerifier().getObservingMembers();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getCurrentAndNextConfigVoters,Set<Long> getCurrentAndNextConfigVoters(),"[1739, 1745]","{'A583': [(1742, 1742)], 'A590': [(1745, 1745)], 'A597': [(1739, 1739), (1741, 1741), (1743, 1744)], 'A605': [(1740, 1740)]}","{'A583': 0.14285714285714285, 'A590': 0.14285714285714285, 'A597': 0.5714285714285714, 'A605': 0.14285714285714285}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized Set<Long> getCurrentAndNextConfigVoters() {
        Set<Long> voterIds = new HashSet<>(getQuorumVerifier().getVotingMembers().keySet());
        if (getLastSeenQuorumVerifier() != null) {
            voterIds.addAll(getLastSeenQuorumVerifier().getVotingMembers().keySet());
        }
        return voterIds;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,viewContains,boolean viewContains(Long),"[1752, 1754]","{'A590': [(1753, 1753)], 'A596': [(1752, 1752), (1754, 1754)]}","{'A590': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean viewContains(Long sid) {
        return this.getView().containsKey(sid);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getQuorumPeers,String[] getQuorumPeers(),"[1759, 1777]","{'A583': [(1765, 1766), (1768, 1768), (1773, 1773)], 'A591': [(1759, 1759), (1761, 1762), (1767, 1767), (1769, 1772), (1774, 1777)], 'A639': [(1763, 1764)], 'A605': [(1760, 1760)]}","{'A583': 0.21052631578947367, 'A591': 0.631578947368421, 'A639': 0.10526315789473684, 'A605': 0.05263157894736842}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public String[] getQuorumPeers() {
        List<String> l = new ArrayList<>();
        synchronized (this) {
            if (leader != null) {
                for (LearnerHandler fh : leader.getLearners()) {
                    if (fh.getSocket() != null) {
                        String s = formatInetAddr((InetSocketAddress) fh.getSocket().getRemoteSocketAddress());
                        if (leader.isLearnerSynced(fh)) {
                            s += ""*"";
                        }
                        l.add(s);
                    }
                }
            } else if (follower != null) {
                l.add(formatInetAddr((InetSocketAddress) follower.sock.getRemoteSocketAddress()));
            }
        }
        return l.toArray(new String[0]);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getServerState,String getServerState(),"[1779, 1791]","{'A591': [(1779, 1779), (1781, 1786), (1789, 1791)], 'A596': [(1780, 1780), (1787, 1788)]}","{'A591': 0.7692307692307693, 'A596': 0.23076923076923078}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public String getServerState() {
        switch (getPeerState()) {
        case LOOKING:
            return QuorumStats.Provider.LOOKING_STATE;
        case LEADING:
            return QuorumStats.Provider.LEADING_STATE;
        case FOLLOWING:
            return QuorumStats.Provider.FOLLOWING_STATE;
        case OBSERVING:
            return QuorumStats.Provider.OBSERVING_STATE;
        }
        return QuorumStats.Provider.UNKNOWN_STATE;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMyid,void setMyid(long),"[1796, 1798]","{'A596': [(1796, 1798)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMyid(long myid) {
        this.myid = myid;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setInitialConfig,void setInitialConfig(String),"[1800, 1802]","{'A647': [(1800, 1802)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setInitialConfig(String initialConfig) {
        this.initialConfig = initialConfig;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getInitialConfig,String getInitialConfig(),"[1804, 1806]","{'A647': [(1804, 1806)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public String getInitialConfig() {
        return initialConfig;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getTickTime,int getTickTime(),"[1811, 1813]","{'A596': [(1811, 1813)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getTickTime() {
        return tickTime;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setTickTime,void setTickTime(int),"[1818, 1821]","{'A583': [(1819, 1819)], 'A596': [(1818, 1818), (1820, 1821)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setTickTime(int tickTime) {
        LOG.info(""tickTime set to {}"", tickTime);
        this.tickTime = tickTime;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[1824, 1832]","{'A591': [(1824, 1824), (1830, 1830), (1832, 1832)], 'A630': [(1825, 1829), (1831, 1831)]}","{'A591': 0.3333333333333333, 'A630': 0.6666666666666666}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getMaxClientCnxnsPerHost() {
        if (cnxnFactory != null) {
            return cnxnFactory.getMaxClientCnxnsPerHost();
        }
        if (secureCnxnFactory != null) {
            return secureCnxnFactory.getMaxClientCnxnsPerHost();
        }
        return -1;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,areLocalSessionsEnabled,boolean areLocalSessionsEnabled(),"[1835, 1837]","{'A648': [(1835, 1837)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean areLocalSessionsEnabled() {
        return localSessionsEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,enableLocalSessions,void enableLocalSessions(boolean),"[1840, 1843]","{'A583': [(1841, 1841)], 'A648': [(1840, 1840), (1842, 1843)]}","{'A583': 0.25, 'A648': 0.75}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void enableLocalSessions(boolean flag) {
        LOG.info(""Local sessions {}"", (flag ? ""enabled"" : ""disabled""));
        localSessionsEnabled = flag;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isLocalSessionsUpgradingEnabled,boolean isLocalSessionsUpgradingEnabled(),"[1846, 1848]","{'A648': [(1846, 1848)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean isLocalSessionsUpgradingEnabled() {
        return localSessionsUpgradingEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,enableLocalSessionsUpgrading,void enableLocalSessionsUpgrading(boolean),"[1851, 1854]","{'A583': [(1852, 1852)], 'A648': [(1851, 1851), (1853, 1854)]}","{'A583': 0.25, 'A648': 0.75}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void enableLocalSessionsUpgrading(boolean flag) {
        LOG.info(""Local session upgrading {}"", (flag ? ""enabled"" : ""disabled""));
        localSessionsUpgradingEnabled = flag;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getMinSessionTimeout,int getMinSessionTimeout(),"[1857, 1859]","{'A596': [(1857, 1857), (1859, 1859)], 'A593': [(1858, 1858)]}","{'A596': 0.6666666666666666, 'A593': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getMinSessionTimeout() {
        return minSessionTimeout;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMinSessionTimeout,void setMinSessionTimeout(int),"[1862, 1865]","{'A583': [(1863, 1863)], 'A596': [(1862, 1862), (1864, 1865)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMinSessionTimeout(int min) {
        LOG.info(""minSessionTimeout set to {}"", min);
        this.minSessionTimeout = min;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getMaxSessionTimeout,int getMaxSessionTimeout(),"[1868, 1870]","{'A596': [(1868, 1868), (1870, 1870)], 'A593': [(1869, 1869)]}","{'A596': 0.6666666666666666, 'A593': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getMaxSessionTimeout() {
        return maxSessionTimeout;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMaxSessionTimeout,void setMaxSessionTimeout(int),"[1873, 1876]","{'A583': [(1874, 1874)], 'A596': [(1873, 1873), (1875, 1876)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMaxSessionTimeout(int max) {
        LOG.info(""maxSessionTimeout set to {}"", max);
        this.maxSessionTimeout = max;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getClientPortListenBacklog,int getClientPortListenBacklog(),"[1879, 1881]","{'A689': [(1879, 1881)]}",{'A689': 1.0},A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getClientPortListenBacklog() {
        return this.clientPortListenBacklog;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setClientPortListenBacklog,void setClientPortListenBacklog(int),"[1884, 1886]","{'A689': [(1884, 1886)]}",{'A689': 1.0},A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setClientPortListenBacklog(int backlog) {
        this.clientPortListenBacklog = backlog;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getMaxClientCnxns,int getMaxClientCnxns(),"[1889, 1891]","{'A669': [(1889, 1891)]}",{'A669': 1.0},A669,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getMaxClientCnxns() {
        return maxClientCnxns;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setMaxClientCnxns,void setMaxClientCnxns(int),"[1894, 1896]","{'A669': [(1894, 1896)]}",{'A669': 1.0},A669,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setMaxClientCnxns(int maxClientCnxns) {
        this.maxClientCnxns = maxClientCnxns;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getInitLimit,int getInitLimit(),"[1901, 1903]","{'A596': [(1901, 1903)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getInitLimit() {
        return initLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setInitLimit,void setInitLimit(int),"[1908, 1911]","{'A583': [(1909, 1909)], 'A596': [(1908, 1908), (1910, 1911)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setInitLimit(int initLimit) {
        LOG.info(""initLimit set to {}"", initLimit);
        this.initLimit = initLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getTick,int getTick(),"[1916, 1918]","{'A591': [(1916, 1918)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getTick() {
        return tick.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,configFromString,QuorumVerifier configFromString(String),"[1920, 1924]","{'A583': [(1920, 1921)], 'A590': [(1922, 1922), (1924, 1924)], 'A651': [(1923, 1923)]}","{'A583': 0.4, 'A590': 0.4, 'A651': 0.2}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public QuorumVerifier configFromString(String s) throws IOException, ConfigException {
        Properties props = new Properties();
        props.load(new StringReader(s));
        return QuorumPeerConfig.parseDynamicConfig(props, electionType, false, false, getQuorumVerifier().getOraclePath());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getQuorumVerifier,QuorumVerifier getQuorumVerifier(),"[1929, 1933]","{'A583': [(1929, 1929)], 'A596': [(1933, 1933)], 'A604': [(1930, 1932)]}","{'A583': 0.2, 'A596': 0.2, 'A604': 0.6}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public QuorumVerifier getQuorumVerifier() {
        synchronized (QV_LOCK) {
            return quorumVerifier;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getLastSeenQuorumVerifier,QuorumVerifier getLastSeenQuorumVerifier(),"[1938, 1942]","{'A583': [(1938, 1938)], 'A590': [(1942, 1942)], 'A604': [(1939, 1941)]}","{'A583': 0.2, 'A590': 0.2, 'A604': 0.6}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public QuorumVerifier getLastSeenQuorumVerifier() {
        synchronized (QV_LOCK) {
            return lastSeenQuorumVerifier;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,restartLeaderElection,"void restartLeaderElection(QuorumVerifier,QuorumVerifier)","[1944, 1951]","{'A583': [(1944, 1944), (1950, 1950)], 'A590': [(1945, 1947), (1949, 1949), (1951, 1951)], 'A597': [(1948, 1948)]}","{'A583': 0.25, 'A590': 0.625, 'A597': 0.125}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void restartLeaderElection(QuorumVerifier qvOLD, QuorumVerifier qvNEW) {
        if (qvOLD == null || !qvOLD.equals(qvNEW)) {
            LOG.warn(""Restarting Leader Election"");
            getElectionAlg().shutdown();
            shuttingDownLE = false;
            startLeaderElection();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getNextDynamicConfigFilename,String getNextDynamicConfigFilename(),"[1953, 1959]","{'A604': [(1954, 1957)], 'A617': [(1953, 1953), (1958, 1959)]}","{'A604': 0.5714285714285714, 'A617': 0.42857142857142855}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public String getNextDynamicConfigFilename() {
        if (configFilename == null) {
            LOG.warn(""configFilename is null! This should only happen in tests."");
            return null;
        }
        return configFilename + QuorumPeerConfig.nextDynamicConfigFileSuffix;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,connectNewPeers,void connectNewPeers(QuorumCnxManager),"[1966, 1975]","{'A583': [(1966, 1966), (1972, 1972)], 'A721': [(1967, 1969), (1971, 1971), (1973, 1975)], 'A702': [(1970, 1970)]}","{'A583': 0.2, 'A721': 0.7, 'A702': 0.1}",A721,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void connectNewPeers(QuorumCnxManager qcm) {
        if (quorumVerifier != null && lastSeenQuorumVerifier != null) {
            Map<Long, QuorumServer> committedView = quorumVerifier.getAllMembers();
            for (Entry<Long, QuorumServer> e : lastSeenQuorumVerifier.getAllMembers().entrySet()) {
                if (e.getKey() != getMyId() && !committedView.containsKey(e.getKey())) {
                    qcm.connectOne(e.getKey());
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setLastSeenQuorumVerifier,"void setLastSeenQuorumVerifier(QuorumVerifier,boolean)","[1977, 2022]","{'A583': [(1977, 1977), (1995, 1998), (2002, 2002), (2017, 2017)], 'A590': [(2009, 2009), (2019, 2021)], 'A653': [(1978, 1982)], 'A721': [(1983, 1994), (1999, 2001), (2003, 2008), (2010, 2016), (2022, 2022)], 'A604': [(2018, 2018)]}","{'A583': 0.15217391304347827, 'A590': 0.08695652173913043, 'A653': 0.10869565217391304, 'A721': 0.6304347826086957, 'A604': 0.021739130434782608}",A721,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setLastSeenQuorumVerifier(QuorumVerifier qv, boolean writeToDisk) {
        if (!isReconfigEnabled()) {
            LOG.info(""Dynamic reconfig is disabled, we don't store the last seen config."");
            return;
        }

        // If qcm is non-null, we may call qcm.connectOne(), which will take the lock on qcm
        // and then take QV_LOCK.  Take the locks in the same order to ensure that we don't
        // deadlock against other callers of connectOne().  If qcmRef gets set in another
        // thread while we're inside the synchronized block, that does no harm; if we didn't
        // take a lock on qcm (because it was null when we sampled it), we won't call
        // connectOne() on it.  (Use of an AtomicReference is enough to guarantee visibility
        // of updates that provably happen in another thread before entering this method.)
        QuorumCnxManager qcm = qcmRef.get();
        Object outerLockObject = (qcm != null) ? qcm : QV_LOCK;
        synchronized (outerLockObject) {
            synchronized (QV_LOCK) {
                if (lastSeenQuorumVerifier != null && lastSeenQuorumVerifier.getVersion() > qv.getVersion()) {
                    LOG.error(""setLastSeenQuorumVerifier called with stale config ""
                              + qv.getVersion()
                              + "". Current version: ""
                              + quorumVerifier.getVersion());
                }
                // assuming that a version uniquely identifies a configuration, so if
                // version is the same, nothing to do here.
                if (lastSeenQuorumVerifier != null && lastSeenQuorumVerifier.getVersion() == qv.getVersion()) {
                    return;
                }
                lastSeenQuorumVerifier = qv;
                if (qcm != null) {
                    connectNewPeers(qcm);
                }

                if (writeToDisk) {
                    try {
                        String fileName = getNextDynamicConfigFilename();
                        if (fileName != null) {
                            QuorumPeerConfig.writeDynamicConfig(fileName, qv, true);
                        }
                    } catch (IOException e) {
                        LOG.error(""Error writing next dynamic config file to disk"", e);
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumVerifier,"QuorumVerifier setQuorumVerifier(QuorumVerifier,boolean)","[2024, 2076]","{'A583': [(2024, 2024), (2029, 2030), (2032, 2033), (2038, 2038), (2040, 2040), (2046, 2047), (2050, 2050)], 'A591': [(2056, 2056)], 'A669': [(2048, 2048), (2062, 2071)], 'A647': [(2073, 2073)], 'A604': [(2025, 2028), (2034, 2037), (2039, 2039), (2041, 2045), (2049, 2049), (2051, 2055), (2057, 2059), (2061, 2061), (2072, 2072), (2074, 2074)], 'A702': [(2031, 2031), (2060, 2060)], 'A617': [(2075, 2076)]}","{'A583': 0.18867924528301888, 'A591': 0.018867924528301886, 'A669': 0.20754716981132076, 'A647': 0.018867924528301886, 'A604': 0.49056603773584906, 'A702': 0.03773584905660377, 'A617': 0.03773584905660377}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public QuorumVerifier setQuorumVerifier(QuorumVerifier qv, boolean writeToDisk) {
        synchronized (QV_LOCK) {
            if ((quorumVerifier != null) && (quorumVerifier.getVersion() >= qv.getVersion())) {
                // this is normal. For example - server found out about new config through FastLeaderElection gossiping
                // and then got the same config in UPTODATE message so its already known
                LOG.debug(
                    ""{} setQuorumVerifier called with known or old config {}. Current version: {}"",
                    getMyId(),
                    qv.getVersion(),
                    quorumVerifier.getVersion());
                return quorumVerifier;
            }
            QuorumVerifier prevQV = quorumVerifier;
            quorumVerifier = qv;
            if (lastSeenQuorumVerifier == null || (qv.getVersion() > lastSeenQuorumVerifier.getVersion())) {
                lastSeenQuorumVerifier = qv;
            }

            if (writeToDisk) {
                // some tests initialize QuorumPeer without a static config file
                if (configFilename != null) {
                    try {
                        String dynamicConfigFilename = makeDynamicConfigFilename(qv.getVersion());
                        QuorumPeerConfig.writeDynamicConfig(dynamicConfigFilename, qv, false);
                        QuorumPeerConfig.editStaticConfig(configFilename, dynamicConfigFilename, needEraseClientInfoFromStaticConfig(), needEraseSecureClientInfoFromStaticConfig());
                    } catch (IOException e) {
                        LOG.error(""Error closing file"", e);
                    }
                } else {
                    LOG.info(""writeToDisk == true but configFilename == null"");
                }
            }

            if (qv.getVersion() == lastSeenQuorumVerifier.getVersion()) {
                QuorumPeerConfig.deleteFile(getNextDynamicConfigFilename());
            }
            QuorumServer qs = qv.getAllMembers().get(getMyId());
            if (qs != null) {
                setAddrs(qs.addr, qs.electionAddr, qs.clientAddr, qs.secureClientAddr);

                // we only set this once, because quorum verifier can change based on dynamic reconfig
                if (isClientAddrFromStatic == null) {
                    isClientAddrFromStatic = qs.isClientAddrFromStatic;
                }

                if (isSecureClientAddrFromStatic == null) {
                    isSecureClientAddrFromStatic = qs.isSecureClientAddrFromStatic;
                }
            }
            updateObserverMasterList();
            return prevQV;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,makeDynamicConfigFilename,String makeDynamicConfigFilename(long),"[2078, 2080]","{'A617': [(2078, 2080)]}",{'A617': 1.0},A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private String makeDynamicConfigFilename(long version) {
        return configFilename + "".dynamic."" + Long.toHexString(version);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,needEraseClientInfoFromStaticConfig,boolean needEraseClientInfoFromStaticConfig(),"[2082, 2085]","{'A694': [(2084, 2084)], 'A702': [(2083, 2083)], 'A617': [(2082, 2082), (2085, 2085)]}","{'A694': 0.25, 'A702': 0.25, 'A617': 0.5}",A617,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean needEraseClientInfoFromStaticConfig() {
        QuorumServer server = quorumVerifier.getAllMembers().get(getMyId());
        return (server != null && server.clientAddr != null && !server.isClientAddrFromStatic);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,needEraseSecureClientInfoFromStaticConfig,boolean needEraseSecureClientInfoFromStaticConfig(),"[2087, 2090]","{'A669': [(2087, 2090)]}",{'A669': 1.0},A669,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean needEraseSecureClientInfoFromStaticConfig() {
        QuorumServer server = quorumVerifier.getAllMembers().get(getMyId());
        return (server != null && server.secureClientAddr != null && !server.isSecureClientAddrFromStatic);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getElectionAlg,Election getElectionAlg(),"[2095, 2097]","{'A583': [(2095, 2095)], 'A590': [(2096, 2097)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public Election getElectionAlg() {
        return electionAlg;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getSyncLimit,int getSyncLimit(),"[2102, 2104]","{'A596': [(2102, 2104)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getSyncLimit() {
        return syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setSyncLimit,void setSyncLimit(int),"[2109, 2112]","{'A583': [(2110, 2110)], 'A596': [(2109, 2109), (2111, 2112)]}","{'A583': 0.25, 'A596': 0.75}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setSyncLimit(int syncLimit) {
        LOG.info(""syncLimit set to {}"", syncLimit);
        this.syncLimit = syncLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getConnectToLearnerMasterLimit,int getConnectToLearnerMasterLimit(),"[2117, 2119]","{'A618': [(2117, 2119)]}",{'A618': 1.0},A618,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getConnectToLearnerMasterLimit() {
        return connectToLearnerMasterLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setConnectToLearnerMasterLimit,void setConnectToLearnerMasterLimit(int),"[2124, 2127]","{'A583': [(2125, 2125)], 'A618': [(2124, 2124), (2126, 2127)]}","{'A583': 0.25, 'A618': 0.75}",A618,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setConnectToLearnerMasterLimit(int connectToLearnerMasterLimit) {
        LOG.info(""connectToLearnerMasterLimit set to {}"", connectToLearnerMasterLimit);
        this.connectToLearnerMasterLimit = connectToLearnerMasterLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getSyncEnabled,boolean getSyncEnabled(),"[2137, 2144]","{'A583': [(2139, 2139), (2141, 2141)], 'A648': [(2137, 2138), (2140, 2140), (2142, 2144)]}","{'A583': 0.25, 'A648': 0.75}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean getSyncEnabled() {
        if (System.getProperty(SYNC_ENABLED) != null) {
            LOG.info(""{}={}"", SYNC_ENABLED, Boolean.getBoolean(SYNC_ENABLED));
            return Boolean.getBoolean(SYNC_ENABLED);
        } else {
            return syncEnabled;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setSyncEnabled,void setSyncEnabled(boolean),"[2151, 2153]","{'A648': [(2151, 2153)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setSyncEnabled(boolean syncEnabled) {
        this.syncEnabled = syncEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getElectionType,int getElectionType(),"[2158, 2160]","{'A596': [(2158, 2160)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getElectionType() {
        return electionType;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setElectionType,void setElectionType(int),"[2165, 2167]","{'A596': [(2165, 2167)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setElectionType(int electionType) {
        this.electionType = electionType;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getQuorumListenOnAllIPs,boolean getQuorumListenOnAllIPs(),"[2169, 2171]","{'A597': [(2169, 2171)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean getQuorumListenOnAllIPs() {
        return quorumListenOnAllIPs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumListenOnAllIPs,void setQuorumListenOnAllIPs(boolean),"[2173, 2175]","{'A597': [(2173, 2175)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setQuorumListenOnAllIPs(boolean quorumListenOnAllIPs) {
        this.quorumListenOnAllIPs = quorumListenOnAllIPs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setCnxnFactory,void setCnxnFactory(ServerCnxnFactory),"[2177, 2179]","{'A591': [(2177, 2177)], 'A590': [(2178, 2179)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setCnxnFactory(ServerCnxnFactory cnxnFactory) {
        this.cnxnFactory = cnxnFactory;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setSecureCnxnFactory,void setSecureCnxnFactory(ServerCnxnFactory),"[2181, 2183]","{'A630': [(2181, 2183)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setSecureCnxnFactory(ServerCnxnFactory secureCnxnFactory) {
        this.secureCnxnFactory = secureCnxnFactory;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setSslQuorum,void setSslQuorum(boolean),"[2185, 2192]","{'A613': [(2185, 2192)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setSslQuorum(boolean sslQuorum) {
        if (sslQuorum) {
            LOG.info(""Using TLS encrypted quorum communication"");
        } else {
            LOG.info(""Using insecure (non-TLS) quorum communication"");
        }
        this.sslQuorum = sslQuorum;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setUsePortUnification,void setUsePortUnification(boolean),"[2194, 2197]","{'A613': [(2194, 2197)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setUsePortUnification(boolean shouldUsePortUnification) {
        LOG.info(""Port unification {}"", shouldUsePortUnification ? ""enabled"" : ""disabled"");
        this.shouldUsePortUnification = shouldUsePortUnification;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,startServerCnxnFactory,void startServerCnxnFactory(),"[2199, 2206]","{'A630': [(2199, 2206)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void startServerCnxnFactory() {
        if (cnxnFactory != null) {
            cnxnFactory.start();
        }
        if (secureCnxnFactory != null) {
            secureCnxnFactory.start();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,shutdownServerCnxnFactory,void shutdownServerCnxnFactory(),"[2208, 2215]","{'A630': [(2208, 2215)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void shutdownServerCnxnFactory() {
        if (cnxnFactory != null) {
            cnxnFactory.shutdown();
        }
        if (secureCnxnFactory != null) {
            secureCnxnFactory.shutdown();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setZooKeeperServer,void setZooKeeperServer(ZooKeeperServer),"[2218, 2225]","{'A630': [(2218, 2225)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setZooKeeperServer(ZooKeeperServer zks) {
        if (cnxnFactory != null) {
            cnxnFactory.setZooKeeperServer(zks);
        }
        if (secureCnxnFactory != null) {
            secureCnxnFactory.setZooKeeperServer(zks);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,closeAllConnections,void closeAllConnections(),"[2227, 2234]","{'A630': [(2227, 2228), (2230, 2231), (2233, 2234)], 'A604': [(2229, 2229), (2232, 2232)]}","{'A630': 0.75, 'A604': 0.25}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void closeAllConnections() {
        if (cnxnFactory != null) {
            cnxnFactory.closeAll(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);
        }
        if (secureCnxnFactory != null) {
            secureCnxnFactory.closeAll(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getClientPort,int getClientPort(),"[2236, 2241]","{'A630': [(2237, 2240)], 'A596': [(2236, 2236), (2241, 2241)]}","{'A630': 0.6666666666666666, 'A596': 0.3333333333333333}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getClientPort() {
        if (cnxnFactory != null) {
            return cnxnFactory.getLocalPort();
        }
        return -1;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getSecureClientPort,int getSecureClientPort(),"[2243, 2248]","{'A691': [(2243, 2248)]}",{'A691': 1.0},A691,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public int getSecureClientPort() {
        if (secureCnxnFactory != null) {
            return secureCnxnFactory.getLocalPort();
        }
        return -1;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setTxnFactory,void setTxnFactory(FileTxnSnapLog),"[2250, 2252]","{'A590': [(2250, 2252)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setTxnFactory(FileTxnSnapLog factory) {
        this.logFactory = factory;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getTxnFactory,FileTxnSnapLog getTxnFactory(),"[2254, 2256]","{'A590': [(2254, 2256)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public FileTxnSnapLog getTxnFactory() {
        return this.logFactory;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setZKDatabase,void setZKDatabase(ZKDatabase),"[2262, 2264]","{'A596': [(2262, 2264)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setZKDatabase(ZKDatabase database) {
        this.zkDb = database;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getZkDb,ZKDatabase getZkDb(),"[2266, 2268]","{'A702': [(2266, 2268)]}",{'A702': 1.0},A702,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected ZKDatabase getZkDb() {
        return zkDb;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,initConfigInZKDatabase,void initConfigInZKDatabase(),"[2270, 2274]","{'A583': [(2270, 2273)], 'A590': [(2274, 2274)]}","{'A583': 0.8, 'A590': 0.2}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public synchronized void initConfigInZKDatabase() {
        if (zkDb != null) {
            zkDb.initConfigInZKDatabase(getQuorumVerifier());
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isRunning,boolean isRunning(),"[2276, 2278]","{'A590': [(2276, 2278)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean isRunning() {
        return running;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getQuorumCnxManager,QuorumCnxManager getQuorumCnxManager(),"[2283, 2285]","{'A590': [(2283, 2283), (2285, 2285)], 'A721': [(2284, 2284)]}","{'A590': 0.6666666666666666, 'A721': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public QuorumCnxManager getQuorumCnxManager() {
        return qcmRef.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,readLongFromFile,long readLongFromFile(String),"[2286, 2298]","{'A583': [(2293, 2293)], 'A591': [(2287, 2292), (2294, 2297)], 'A590': [(2286, 2286), (2298, 2298)]}","{'A583': 0.07692307692307693, 'A591': 0.7692307692307693, 'A590': 0.15384615384615385}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private long readLongFromFile(String name) throws IOException {
        File file = new File(logFactory.getSnapDir(), name);
        BufferedReader br = new BufferedReader(new FileReader(file));
        String line = """";
        try {
            line = br.readLine();
            return Long.parseLong(line);
        } catch (NumberFormatException e) {
            throw new IOException(""Found "" + line + "" in "" + file);
        } finally {
            br.close();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,writeLongToFile,"void writeLongToFile(String,long)","[2315, 2323]","{'A591': [(2316, 2316), (2321, 2321)], 'A590': [(2323, 2323)], 'A630': [(2317, 2320), (2322, 2322)], 'A592': [(2315, 2315)]}","{'A591': 0.2222222222222222, 'A590': 0.1111111111111111, 'A630': 0.5555555555555556, 'A592': 0.1111111111111111}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"     void writeLongToFile(String name, final long value) throws IOException {
        File file = new File(logFactory.getSnapDir(), name);
        new AtomicFileWritingIdiom(file, new WriterStatement() {
            @Override
            public void write(Writer bw) throws IOException {
                bw.write(Long.toString(value));
            }
        });
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,write,void write(Writer),"[2318, 2321]","{'A591': [(2321, 2321)], 'A630': [(2318, 2320)]}","{'A591': 0.25, 'A630': 0.75}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"            @Override
            public void write(Writer bw) throws IOException {
                bw.write(Long.toString(value));
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getCurrentEpoch,long getCurrentEpoch(),"[2325, 2330]","{'A591': [(2326, 2330)], 'A590': [(2325, 2325)]}","{'A591': 0.8333333333333334, 'A590': 0.16666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public long getCurrentEpoch() throws IOException {
        if (currentEpoch == -1) {
            currentEpoch = readLongFromFile(CURRENT_EPOCH_FILENAME);
        }
        return currentEpoch;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getAcceptedEpoch,long getAcceptedEpoch(),"[2332, 2337]","{'A591': [(2332, 2337)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public long getAcceptedEpoch() throws IOException {
        if (acceptedEpoch == -1) {
            acceptedEpoch = readLongFromFile(ACCEPTED_EPOCH_FILENAME);
        }
        return acceptedEpoch;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setCurrentEpoch,void setCurrentEpoch(long),"[2339, 2343]","{'A591': [(2339, 2340), (2342, 2343)], 'A592': [(2341, 2341)]}","{'A591': 0.8, 'A592': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setCurrentEpoch(long e) throws IOException {
        writeLongToFile(CURRENT_EPOCH_FILENAME, e);
        currentEpoch = e;

    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setAcceptedEpoch,void setAcceptedEpoch(long),"[2345, 2348]","{'A591': [(2345, 2346), (2348, 2348)], 'A592': [(2347, 2347)]}","{'A591': 0.75, 'A592': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public void setAcceptedEpoch(long e) throws IOException {
        writeLongToFile(ACCEPTED_EPOCH_FILENAME, e);
        acceptedEpoch = e;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,recreateSocketAddressesFromQV,void recreateSocketAddressesFromQV(QuorumVerifier),"[2350, 2354]","{'A720': [(2350, 2354)]}",{'A720': 1.0},A720,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void recreateSocketAddressesFromQV(QuorumVerifier qv) {
        for (QuorumServer qs : qv.getAllMembers().values()) {
            qs.recreateSocketAddresses();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,processReconfig,"boolean processReconfig(QuorumVerifier,Long,Long,boolean)","[2356, 2462]","{'A583': [(2358, 2362), (2364, 2378), (2382, 2388), (2437, 2462)], 'A669': [(2363, 2363), (2390, 2436)], 'A653': [(2357, 2357)], 'A702': [(2356, 2356), (2389, 2389)], 'A720': [(2379, 2381)]}","{'A583': 0.4953271028037383, 'A669': 0.4485981308411215, 'A653': 0.009345794392523364, 'A702': 0.018691588785046728, 'A720': 0.028037383177570093}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean processReconfig(QuorumVerifier qv, Long suggestedLeaderId, Long zxid, boolean restartLE) {
        if (!isReconfigEnabled()) {
            LOG.debug(""Reconfig feature is disabled, skip reconfig processing."");
            return false;
        }

        InetSocketAddress oldClientAddr = getClientAddress();
        InetSocketAddress oldSecureClientAddr = getSecureClientAddress();

        // update last committed quorum verifier, write the new config to disk
        // and restart leader election if config changed.
        QuorumVerifier prevQV = setQuorumVerifier(qv, true);

        // There is no log record for the initial config, thus after syncing
        // with leader
        // /zookeeper/config is empty! it is also possible that last committed
        // config is propagated during leader election
        // without the propagation the corresponding log records.
        // so we should explicitly do this (this is not necessary when we're
        // already a Follower/Observer, only
        // for Learner):
        initConfigInZKDatabase();

        recreateSocketAddressesFromQV(prevQV);
        recreateSocketAddressesFromQV(qv);

        if (prevQV.getVersion() < qv.getVersion() && !prevQV.equals(qv)) {
            Map<Long, QuorumServer> newMembers = qv.getAllMembers();
            updateRemotePeerMXBeans(newMembers);
            if (restartLE) {
                restartLeaderElection(prevQV, qv);
            }

            QuorumServer myNewQS = newMembers.get(getMyId());
            if (myNewQS != null) {
                if (myNewQS.clientAddr == null) {
                    if (!isClientAddrFromStatic && oldClientAddr != null && cnxnFactory != null) {
                        // clientAddr omitted in new config, shutdown cnxnFactory
                         cnxnFactory.shutdown();
                         cnxnFactory = null;
                    }
                } else if (!myNewQS.clientAddr.equals(oldClientAddr)) {
                    // clientAddr has changed
                    if (cnxnFactory == null) {
                        // start cnxnFactory first
                        try {
                            cnxnFactory = ServerCnxnFactory.createFactory();
                            cnxnFactory.configure(myNewQS.clientAddr, getMaxClientCnxns(), getClientPortListenBacklog(), false);
                            cnxnFactory.start();
                        } catch (IOException e) {
                            throw new RuntimeException(e);
                        }
                    } else {
                        cnxnFactory.reconfigure(myNewQS.clientAddr);
                    }
                }

                if (myNewQS.secureClientAddr == null) {
                    if (!isSecureClientAddrFromStatic && oldSecureClientAddr != null && secureCnxnFactory != null) {
                        // secureClientAddr omitted in new config, shutdown secureCnxnFactory
                         secureCnxnFactory.shutdown();
                         secureCnxnFactory = null;
                    }
                } else if (!myNewQS.secureClientAddr.equals(oldSecureClientAddr)) {
                    // secureClientAddr has changed
                    if (secureCnxnFactory == null) {
                        // start secureCnxnFactory first
                        try {
                            configureSSLAuth();
                            secureCnxnFactory = ServerCnxnFactory.createFactory();
                            secureCnxnFactory.configure(myNewQS.secureClientAddr, getMaxClientCnxns(), getClientPortListenBacklog(), true);
                            secureCnxnFactory.start();

                        } catch (IOException | ConfigException e) {
                            throw new RuntimeException(e);
                        }
                    } else {
                        secureCnxnFactory.reconfigure(myNewQS.secureClientAddr);
                    }
                }

                updateThreadName();
            }

            boolean roleChange = updateLearnerType(qv);
            boolean leaderChange = false;
            if (suggestedLeaderId != null) {
                // zxid should be non-null too
                leaderChange = updateVote(suggestedLeaderId, zxid);
            } else {
                long currentLeaderId = getCurrentVote().getId();
                QuorumServer myleaderInCurQV = prevQV.getVotingMembers().get(currentLeaderId);
                QuorumServer myleaderInNewQV = qv.getVotingMembers().get(currentLeaderId);
                leaderChange = (myleaderInCurQV == null
                                || myleaderInCurQV.addr == null
                                || myleaderInNewQV == null
                                || !myleaderInCurQV.addr.equals(myleaderInNewQV.addr));
                // we don't have a designated leader - need to go into leader
                // election
                reconfigFlagClear();
            }

            return roleChange || leaderChange;
        }
        return false;

    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateRemotePeerMXBeans,"void updateRemotePeerMXBeans(Map<Long, QuorumServer>)","[2464, 2496]","{'A584': [(2477, 2477)], 'A593': [(2464, 2464), (2466, 2471), (2473, 2473), (2475, 2476), (2478, 2485), (2487, 2496)], 'A702': [(2474, 2474)], 'A605': [(2465, 2465), (2472, 2472), (2486, 2486)]}","{'A584': 0.030303030303030304, 'A593': 0.8484848484848485, 'A702': 0.030303030303030304, 'A605': 0.09090909090909091}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void updateRemotePeerMXBeans(Map<Long, QuorumServer> newMembers) {
        Set<Long> existingMembers = new HashSet<>(newMembers.keySet());
        existingMembers.retainAll(jmxRemotePeerBean.keySet());
        for (Long id : existingMembers) {
            RemotePeerBean rBean = jmxRemotePeerBean.get(id);
            rBean.setQuorumServer(newMembers.get(id));
        }

        Set<Long> joiningMembers = new HashSet<>(newMembers.keySet());
        joiningMembers.removeAll(jmxRemotePeerBean.keySet());
        joiningMembers.remove(getMyId()); // remove self as it is local bean
        for (Long id : joiningMembers) {
            QuorumServer qs = newMembers.get(id);
            RemotePeerBean rBean = new RemotePeerBean(this, qs);
            try {
                MBeanRegistry.getInstance().register(rBean, jmxQuorumBean);
                jmxRemotePeerBean.put(qs.id, rBean);
            } catch (Exception e) {
                LOG.warn(""Failed to register with JMX"", e);
            }
        }

        Set<Long> leavingMembers = new HashSet<>(jmxRemotePeerBean.keySet());
        leavingMembers.removeAll(newMembers.keySet());
        for (Long id : leavingMembers) {
            RemotePeerBean rBean = jmxRemotePeerBean.remove(id);
            try {
                MBeanRegistry.getInstance().unregister(rBean);
            } catch (Exception e) {
                LOG.warn(""Failed to unregister with JMX"", e);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateObserverMasterList,void updateObserverMasterList(),"[2499, 2516]","{'A653': [(2506, 2507)], 'A647': [(2499, 2505), (2508, 2516)]}","{'A653': 0.1111111111111111, 'A647': 0.8888888888888888}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void updateObserverMasterList() {
        if (observerMasterPort <= 0) {
            return; // observer masters not enabled
        }
        observerMasters.clear();
        StringBuilder sb = new StringBuilder();
        for (QuorumServer server : quorumVerifier.getVotingMembers().values()) {
            InetAddress address = server.addr.getReachableOrOne().getAddress();
            InetSocketAddress addr = new InetSocketAddress(address, observerMasterPort);
            observerMasters.add(new QuorumServer(server.id, addr));
            sb.append(addr).append("","");
        }
        LOG.info(""Updated learner master list to be {}"", sb.toString());
        Collections.shuffle(observerMasters);
        // Reset the internal index of the observerMaster when
        // the observerMaster List is refreshed
        nextObserverMaster = 0;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,useObserverMasters,boolean useObserverMasters(),"[2518, 2520]","{'A647': [(2518, 2520)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean useObserverMasters() {
        return getLearnerType() == LearnerType.OBSERVER && observerMasters.size() > 0;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,nextObserverMaster,QuorumServer nextObserverMaster(),"[2523, 2534]","{'A647': [(2523, 2534)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private QuorumServer nextObserverMaster() {
        if (nextObserverMaster >= observerMasters.size()) {
            nextObserverMaster = 0;
            // Add a reconnect delay only after the observer
            // has exhausted trying to connect to all the masters
            // from the observerMasterList
            if (isRunning()) {
                Observer.waitForReconnectDelay();
            }
        }
        return observerMasters.get(nextObserverMaster++);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,findLearnerMaster,QuorumServer findLearnerMaster(QuorumServer),"[2536, 2546]","{'A647': [(2536, 2546)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    QuorumServer findLearnerMaster(QuorumServer leader) {
        if (useObserverMasters()) {
            return nextObserverMaster();
        } else {
            // Add delay jitter to reduce the load on the leader
            if (isRunning()) {
                Observer.waitForReconnectDelay();
            }
            return leader;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,validateLearnerMaster,QuorumServer validateLearnerMaster(String),"[2552, 2583]","{'A653': [(2562, 2566)], 'A647': [(2552, 2561), (2567, 2583)]}","{'A653': 0.15625, 'A647': 0.84375}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    QuorumServer validateLearnerMaster(String desiredMaster) {
        if (useObserverMasters()) {
            Long sid;
            try {
                sid = Long.parseLong(desiredMaster);
            } catch (NumberFormatException e) {
                sid = null;
            }
            for (QuorumServer server : observerMasters) {
                if (sid == null) {
                    for (InetSocketAddress address : server.addr.getAllAddresses()) {
                        String serverAddr = address.getAddress().getHostAddress() + ':' + address.getPort();
                        if (serverAddr.startsWith(desiredMaster)) {
                            return server;
                        }
                    }
                } else {
                    if (sid.equals(server.id)) {
                        return server;
                    }
                }
            }
            if (sid == null) {
                LOG.info(""could not find learner master address={}"", desiredMaster);
            } else {
                LOG.warn(""could not find learner master sid={}"", sid);
            }
        } else {
            LOG.info(""cannot validate request, observer masters not enabled"");
        }
        return null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateLearnerType,boolean updateLearnerType(QuorumVerifier),"[2585, 2614]","{'A583': [(2585, 2586), (2588, 2595), (2597, 2614)], 'A702': [(2587, 2587), (2596, 2596)]}","{'A583': 0.9333333333333333, 'A702': 0.06666666666666667}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean updateLearnerType(QuorumVerifier newQV) {
        //check if I'm an observer in new config
        if (newQV.getObservingMembers().containsKey(getMyId())) {
            if (getLearnerType() != LearnerType.OBSERVER) {
                setLearnerType(LearnerType.OBSERVER);
                LOG.info(""Becoming an observer"");
                reconfigFlagSet();
                return true;
            } else {
                return false;
            }
        } else if (newQV.getVotingMembers().containsKey(getMyId())) {
            if (getLearnerType() != LearnerType.PARTICIPANT) {
                setLearnerType(LearnerType.PARTICIPANT);
                LOG.info(""Becoming a voting participant"");
                reconfigFlagSet();
                return true;
            } else {
                return false;
            }
        }
        // I'm not in the view
        if (getLearnerType() != LearnerType.PARTICIPANT) {
            setLearnerType(LearnerType.PARTICIPANT);
            LOG.info(""Becoming a non-voting participant"");
            reconfigFlagSet();
            return true;
        }
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateVote,"boolean updateVote(long,long)","[2616, 2625]","{'A583': [(2616, 2625)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean updateVote(long designatedLeader, long zxid) {
        Vote currentVote = getCurrentVote();
        if (currentVote != null && designatedLeader != currentVote.getId()) {
            setCurrentVote(new Vote(designatedLeader, zxid));
            reconfigFlagSet();
            LOG.warn(""Suggested leader: {}"", designatedLeader);
            return true;
        }
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateElectionVote,void updateElectionVote(long),"[2665, 2671]","{'A583': [(2668, 2669)], 'A597': [(2665, 2667), (2670, 2671)]}","{'A583': 0.2857142857142857, 'A597': 0.7142857142857143}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    protected void updateElectionVote(long newEpoch) {
        Vote currentVote = getCurrentVote();
        if (currentVote != null) {
            setCurrentVote(new Vote(currentVote.getId(), currentVote.getZxid(), currentVote.getElectionEpoch(), newEpoch, currentVote
                .getState()));
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,updateThreadName,void updateThreadName(),"[2673, 2681]","{'A583': [(2674, 2678)], 'A591': [(2673, 2673), (2681, 2681)], 'A682': [(2679, 2679)], 'A702': [(2680, 2680)]}","{'A583': 0.5555555555555556, 'A591': 0.2222222222222222, 'A682': 0.1111111111111111, 'A702': 0.1111111111111111}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private void updateThreadName() {
        String plain = cnxnFactory != null
                ? cnxnFactory.getLocalAddress() != null
                    ? formatInetAddr(cnxnFactory.getLocalAddress())
                    : ""disabled""
                : ""disabled"";
        String secure = secureCnxnFactory != null ? formatInetAddr(secureCnxnFactory.getLocalAddress()) : ""disabled"";
        setName(String.format(""QuorumPeer[myid=%d](plain=%s)(secure=%s)"", getMyId(), plain, secure));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setElectionTimeTaken,void setElectionTimeTaken(long),"[2688, 2690]","{'A630': [(2688, 2690)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setElectionTimeTaken(long electionTimeTaken) {
        this.electionTimeTaken = electionTimeTaken;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getElectionTimeTaken,long getElectionTimeTaken(),"[2695, 2697]","{'A630': [(2695, 2697)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    long getElectionTimeTaken() {
        return electionTimeTaken;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumServerSaslRequired,void setQuorumServerSaslRequired(boolean),"[2699, 2702]","{'A583': [(2701, 2701)], 'A594': [(2699, 2700), (2702, 2702)]}","{'A583': 0.25, 'A594': 0.75}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumServerSaslRequired(boolean serverSaslRequired) {
        quorumServerSaslAuthRequired = serverSaslRequired;
        LOG.info(""{} set to {}"", QuorumAuth.QUORUM_SERVER_SASL_AUTH_REQUIRED, serverSaslRequired);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumLearnerSaslRequired,void setQuorumLearnerSaslRequired(boolean),"[2704, 2707]","{'A583': [(2706, 2706)], 'A594': [(2704, 2705), (2707, 2707)]}","{'A583': 0.25, 'A594': 0.75}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumLearnerSaslRequired(boolean learnerSaslRequired) {
        quorumLearnerSaslAuthRequired = learnerSaslRequired;
        LOG.info(""{} set to {}"", QuorumAuth.QUORUM_LEARNER_SASL_AUTH_REQUIRED, learnerSaslRequired);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumSaslEnabled,void setQuorumSaslEnabled(boolean),"[2709, 2716]","{'A583': [(2714, 2714)], 'A594': [(2709, 2711), (2713, 2713), (2715, 2716)], 'A613': [(2712, 2712)]}","{'A583': 0.125, 'A594': 0.75, 'A613': 0.125}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumSaslEnabled(boolean enableAuth) {
        quorumSaslEnableAuth = enableAuth;
        if (!quorumSaslEnableAuth) {
            LOG.info(""QuorumPeer communication is not secured! (SASL auth disabled)"");
        } else {
            LOG.info(""{} set to {}"", QuorumAuth.QUORUM_SASL_AUTH_ENABLED, enableAuth);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumServicePrincipal,void setQuorumServicePrincipal(String),"[2718, 2721]","{'A583': [(2720, 2720)], 'A594': [(2718, 2719), (2721, 2721)]}","{'A583': 0.25, 'A594': 0.75}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumServicePrincipal(String servicePrincipal) {
        quorumServicePrincipal = servicePrincipal;
        LOG.info(""{} set to {}"", QuorumAuth.QUORUM_KERBEROS_SERVICE_PRINCIPAL, quorumServicePrincipal);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumLearnerLoginContext,void setQuorumLearnerLoginContext(String),"[2723, 2726]","{'A583': [(2725, 2725)], 'A594': [(2723, 2724), (2726, 2726)]}","{'A583': 0.25, 'A594': 0.75}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumLearnerLoginContext(String learnerContext) {
        quorumLearnerLoginContext = learnerContext;
        LOG.info(""{} set to {}"", QuorumAuth.QUORUM_LEARNER_SASL_LOGIN_CONTEXT, quorumLearnerLoginContext);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumServerLoginContext,void setQuorumServerLoginContext(String),"[2728, 2731]","{'A583': [(2730, 2730)], 'A594': [(2728, 2729), (2731, 2731)]}","{'A583': 0.25, 'A594': 0.75}",A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumServerLoginContext(String serverContext) {
        quorumServerLoginContext = serverContext;
        LOG.info(""{} set to {}"", QuorumAuth.QUORUM_SERVER_SASL_LOGIN_CONTEXT, quorumServerLoginContext);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,setQuorumCnxnThreadsSize,void setQuorumCnxnThreadsSize(int),"[2733, 2738]","{'A594': [(2733, 2738)]}",{'A594': 1.0},A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    void setQuorumCnxnThreadsSize(int qCnxnThreadsSize) {
        if (qCnxnThreadsSize > QUORUM_CNXN_THREADS_SIZE_DEFAULT_VALUE) {
            quorumCnxnThreadsSize = qCnxnThreadsSize;
        }
        LOG.info(""quorum.cnxn.threads.size set to {}"", quorumCnxnThreadsSize);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isQuorumSaslAuthEnabled,boolean isQuorumSaslAuthEnabled(),"[2740, 2742]","{'A594': [(2740, 2742)]}",{'A594': 1.0},A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    boolean isQuorumSaslAuthEnabled() {
        return quorumSaslEnableAuth;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isQuorumServerSaslAuthRequired,boolean isQuorumServerSaslAuthRequired(),"[2744, 2746]","{'A594': [(2744, 2746)]}",{'A594': 1.0},A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean isQuorumServerSaslAuthRequired() {
        return quorumServerSaslAuthRequired;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isQuorumLearnerSaslAuthRequired,boolean isQuorumLearnerSaslAuthRequired(),"[2748, 2750]","{'A594': [(2748, 2750)]}",{'A594': 1.0},A594,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    private boolean isQuorumLearnerSaslAuthRequired() {
        return quorumLearnerSaslAuthRequired;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,createCnxnManager,QuorumCnxManager createCnxnManager(),"[2752, 2765]","{'A583': [(2753, 2753), (2755, 2756), (2758, 2764)], 'A647': [(2754, 2754)], 'A594': [(2752, 2752), (2765, 2765)], 'A702': [(2757, 2757)]}","{'A583': 0.7142857142857143, 'A647': 0.07142857142857142, 'A594': 0.14285714285714285, 'A702': 0.07142857142857142}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public QuorumCnxManager createCnxnManager() {
        int timeout = quorumCnxnTimeoutMs > 0 ? quorumCnxnTimeoutMs : this.tickTime * this.syncLimit;
        LOG.info(""Using {}ms as the quorum cnxn socket timeout"", timeout);
        return new QuorumCnxManager(
            this,
            this.getMyId(),
            this.getView(),
            this.authServer,
            this.authLearner,
            timeout,
            this.getQuorumListenOnAllIPs(),
            this.quorumCnxnThreadsSize,
            this.isQuorumSaslAuthEnabled());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isLeader,boolean isLeader(long),"[2767, 2770]","{'A584': [(2767, 2770)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    boolean isLeader(long id) {
        Vote vote = getCurrentVote();
        return vote != null && id == vote.getId();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,isReconfigEnabled,boolean isReconfigEnabled(),"[2772, 2774]","{'A653': [(2772, 2774)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public boolean isReconfigEnabled() {
        return reconfigEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,getSynced_observers_metric,Integer getSynced_observers_metric(),"[2776, 2787]","{'A583': [(2779, 2779)], 'A584': [(2776, 2778), (2780, 2787)]}","{'A583': 0.08333333333333333, 'A584': 0.9166666666666666}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    @InterfaceAudience.Private
    /**
     * This is a metric that depends on the status of the peer.
     */ public Integer getSynced_observers_metric() {
        if (leader != null) {
            return leader.getObservingLearners().size();
        } else if (follower != null) {
            return follower.getSyncedObserverSize();
        } else {
            return null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeer.java,QuorumPeer,createFromConfig,QuorumPeer createFromConfig(QuorumPeerConfig),"[2799, 2850]","{'A669': [(2815, 2815)], 'A604': [(2799, 2814), (2816, 2850)]}","{'A669': 0.019230769230769232, 'A604': 0.9807692307692307}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerTest.java,"    public static QuorumPeer createFromConfig(QuorumPeerConfig config) throws IOException {
        QuorumPeer quorumPeer = new QuorumPeer();
        quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));
        quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());
        quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());
        quorumPeer.setElectionType(config.getElectionAlg());
        quorumPeer.setMyid(config.getServerId());
        quorumPeer.setTickTime(config.getTickTime());
        quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());
        quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());
        quorumPeer.setInitLimit(config.getInitLimit());
        quorumPeer.setSyncLimit(config.getSyncLimit());
        quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());
        quorumPeer.setObserverMasterPort(config.getObserverMasterPort());
        quorumPeer.setConfigFileName(config.getConfigFilename());
        quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());
        quorumPeer.setMaxClientCnxns(config.getMaxClientCnxns());
        quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));
        quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);
        if (config.getLastSeenQuorumVerifier() != null) {
            quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);
        }
        quorumPeer.initConfigInZKDatabase();
        quorumPeer.setSslQuorum(config.isSslQuorum());
        quorumPeer.setUsePortUnification(config.shouldUsePortUnification());
        quorumPeer.setLearnerType(config.getPeerType());
        quorumPeer.setSyncEnabled(config.getSyncEnabled());
        quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());
        if (config.sslQuorumReloadCertFiles) {
            quorumPeer.getX509Util().enableCertFileReloading();
        }
        quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());
        quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());
        quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());

        // sets quorum sasl authentication configurations
        quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);
        if (quorumPeer.isQuorumSaslAuthEnabled()) {
            quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);
            quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);
            quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);
            quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);
            quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);
        }
        quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);

        if (config.jvmPauseMonitorToRun) {
            quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));
        }

        return quorumPeer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,getTouchSnapshot,"Map<Long, Integer> getTouchSnapshot()","[60, 66]","{'A596': [(61, 63), (66, 66)], 'A648': [(60, 60), (64, 65)]}","{'A596': 0.5714285714285714, 'A648': 0.42857142857142855}",A596,,"    protected Map<Long, Integer> getTouchSnapshot() {
        if (sessionTracker != null) {
            return ((LearnerSessionTracker) sessionTracker).snapshot();
        }
        Map<Long, Integer> map = Collections.emptyMap();
        return map;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,getServerId,long getServerId(),"[72, 75]","{'A596': [(72, 73)], 'A648': [(75, 75)], 'A702': [(74, 74)]}","{'A596': 0.5, 'A648': 0.25, 'A702': 0.25}",A596,,"    @Override
    public long getServerId() {
        return self.getMyId();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,createSessionTracker,void createSessionTracker(),"[77, 86]","{'A583': [(80, 82), (84, 85)], 'A596': [(77, 78), (86, 86)], 'A648': [(79, 79)], 'A702': [(83, 83)]}","{'A583': 0.5, 'A596': 0.3, 'A648': 0.1, 'A702': 0.1}",A583,,"    @Override
    public void createSessionTracker() {
        sessionTracker = new LearnerSessionTracker(
            this,
            getZKDatabase().getSessionWithTimeOuts(),
            this.tickTime,
            self.getMyId(),
            self.areLocalSessionsEnabled(),
            getZooKeeperServerListener());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,revalidateSession,"void revalidateSession(ServerCnxn,long,int)","[88, 95]","{'A583': [(89, 89)], 'A596': [(88, 88), (95, 95)], 'A648': [(90, 94)]}","{'A583': 0.125, 'A596': 0.25, 'A648': 0.625}",A648,,"    @Override
    protected void revalidateSession(ServerCnxn cnxn, long sessionId, int sessionTimeout) throws IOException {
        if (upgradeableSessionTracker.isLocalSession(sessionId)) {
            super.revalidateSession(cnxn, sessionId, sessionTimeout);
        } else {
            getLearner().validateSession(cnxn, sessionId, sessionTimeout);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,registerJMX,void registerJMX(),"[97, 107]","{'A596': [(97, 107)]}",{'A596': 1.0},A596,,"    @Override
    protected void registerJMX() {
        // register with JMX
        try {
            jmxDataTreeBean = new DataTreeBean(getZKDatabase().getDataTree());
            MBeanRegistry.getInstance().register(jmxDataTreeBean, jmxServerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxDataTreeBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,registerJMX,"void registerJMX(ZooKeeperServerBean,LocalPeerBean)","[109, 127]","{'A583': [(109, 109)], 'A596': [(110, 127)]}","{'A583': 0.05263157894736842, 'A596': 0.9473684210526315}",A596,,"    public void registerJMX(ZooKeeperServerBean serverBean, LocalPeerBean localPeerBean) {
        // register with JMX
        if (self.jmxLeaderElectionBean != null) {
            try {
                MBeanRegistry.getInstance().unregister(self.jmxLeaderElectionBean);
            } catch (Exception e) {
                LOG.warn(""Failed to register with JMX"", e);
            }
            self.jmxLeaderElectionBean = null;
        }

        try {
            jmxServerBean = serverBean;
            MBeanRegistry.getInstance().register(serverBean, localPeerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxServerBean = null;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,unregisterJMX,void unregisterJMX(),"[129, 140]","{'A596': [(129, 140)]}",{'A596': 1.0},A596,,"    @Override
    protected void unregisterJMX() {
        // unregister from JMX
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxDataTreeBean = null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,unregisterJMX,void unregisterJMX(Learner),"[142, 152]","{'A596': [(142, 152)]}",{'A596': 1.0},A596,,"    protected void unregisterJMX(Learner peer) {
        // unregister from JMX
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxServerBean = null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerZooKeeperServer.java,LearnerZooKeeperServer,shutdownComponents,void shutdownComponents(),"[154, 168]","{'A583': [(161, 161)], 'A593': [(154, 154), (156, 160), (162, 162), (168, 168)], 'A695': [(155, 155), (163, 167)]}","{'A583': 0.06666666666666667, 'A593': 0.5333333333333333, 'A695': 0.4}",A593,,"    @Override
    protected void shutdownComponents() {
        try {
            if (syncProcessor != null) {
                syncProcessor.shutdown();
            }
        } catch (Exception e) {
            LOG.warn(""Ignoring unexpected exception in syncprocessor shutdown"", e);
        }
        try {
            super.shutdownComponents();
        } catch (Exception e) {
            LOG.warn(""Ignoring unexpected exception during shutdown"", e);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,toString,String toString(),"[57, 64]","{'A583': [(62, 62)], 'A591': [(57, 58), (60, 61), (63, 64)], 'A600': [(59, 59)]}","{'A583': 0.125, 'A591': 0.75, 'A600': 0.125}",A591,,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""Follower "").append(sock);
        sb.append("" lastQueuedZxid:"").append(lastQueued);
        sb.append("" pendingRevalidationCount:"").append(pendingRevalidations.size());
        return sb.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,followLeader,void followLeader(),"[71, 149]","{'A583': [(76, 76), (91, 93), (98, 101), (129, 129), (137, 137), (141, 145)], 'A591': [(71, 71), (87, 87), (121, 121), (123, 125), (127, 127), (130, 133), (148, 149)], 'A590': [(84, 84), (90, 90), (96, 97), (126, 126)], 'A647': [(85, 85), (112, 120), (128, 128), (134, 136)], 'A593': [(72, 72)], 'A713': [(104, 104)], 'A594': [(86, 86), (88, 88)], 'A596': [(79, 79), (94, 95), (102, 103)], 'A630': [(73, 74)], 'A584': [(75, 75)], 'A597': [(77, 78), (122, 122)], 'A604': [(80, 83), (89, 89), (138, 140), (146, 147)], 'A586': [(105, 111)]}","{'A583': 0.189873417721519, 'A591': 0.16455696202531644, 'A590': 0.06329113924050633, 'A647': 0.17721518987341772, 'A593': 0.012658227848101266, 'A713': 0.012658227848101266, 'A594': 0.02531645569620253, 'A596': 0.06329113924050633, 'A630': 0.02531645569620253, 'A584': 0.012658227848101266, 'A597': 0.0379746835443038, 'A604': 0.12658227848101267, 'A586': 0.08860759493670886}",A583,,"    void followLeader() throws InterruptedException {
        self.end_fle = Time.currentElapsedTime();
        long electionTimeTaken = self.end_fle - self.start_fle;
        self.setElectionTimeTaken(electionTimeTaken);
        ServerMetrics.getMetrics().ELECTION_TIME.add(electionTimeTaken);
        LOG.info(""FOLLOWING - LEADER ELECTION TOOK - {} {}"", electionTimeTaken, QuorumPeer.FLE_TIME_UNIT);
        self.start_fle = 0;
        self.end_fle = 0;
        fzk.registerJMX(new FollowerBean(this, zk), self.jmxLocalPeerBean);

        long connectionTime = 0;
        boolean completedSync = false;

        try {
            self.setZabState(QuorumPeer.ZabState.DISCOVERY);
            QuorumServer leaderServer = findLeader();
            try {
                connectToLeader(leaderServer.addr, leaderServer.hostname);
                connectionTime = System.currentTimeMillis();
                long newEpochZxid = registerWithLeader(Leader.FOLLOWERINFO);
                if (self.isReconfigStateChange()) {
                    throw new Exception(""learned about role change"");
                }
                //check to see if the leader zxid is lower than ours
                //this should never happen but is just a safety check
                long newEpoch = ZxidUtils.getEpochFromZxid(newEpochZxid);
                if (newEpoch < self.getAcceptedEpoch()) {
                    LOG.error(""Proposed leader epoch ""
                              + ZxidUtils.zxidToString(newEpochZxid)
                              + "" is less than our accepted epoch ""
                              + ZxidUtils.zxidToString(self.getAcceptedEpoch()));
                    throw new IOException(""Error: Epoch of leader is lower"");
                }
                long startTime = Time.currentElapsedTime();
                self.setLeaderAddressAndId(leaderServer.addr, leaderServer.getId());
                self.setZabState(QuorumPeer.ZabState.SYNCHRONIZATION);
                syncWithLeader(newEpochZxid);
                self.setZabState(QuorumPeer.ZabState.BROADCAST);
                completedSync = true;
                long syncTime = Time.currentElapsedTime() - startTime;
                ServerMetrics.getMetrics().FOLLOWER_SYNC_TIME.add(syncTime);
                if (self.getObserverMasterPort() > 0) {
                    LOG.info(""Starting ObserverMaster"");

                    om = new ObserverMaster(self, fzk, self.getObserverMasterPort());
                    om.start();
                } else {
                    om = null;
                }
                // create a reusable packet to reduce gc impact
                QuorumPacket qp = new QuorumPacket();
                while (this.isRunning()) {
                    readPacket(qp);
                    processPacket(qp);
                }
            } catch (Exception e) {
                LOG.warn(""Exception when following the leader"", e);
                closeSocket();

                // clear pending revalidations
                pendingRevalidations.clear();
            }
        } finally {
            if (om != null) {
                om.stop();
            }
            zk.unregisterJMX(this);

            if (connectionTime != 0) {
                long connectionDuration = System.currentTimeMillis() - connectionTime;
                LOG.info(
                    ""Disconnected from leader (with address: {}). Was connected for {}ms. Sync state: {}"",
                    leaderAddr,
                    connectionDuration,
                    completedSync);
                messageTracker.dumpToLog(leaderAddr.toString());
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,processPacket,void processPacket(QuorumPacket),"[156, 245]","{'A583': [(156, 156), (158, 159), (167, 170), (173, 175), (177, 177), (179, 179), (208, 208), (210, 212), (214, 221), (223, 229)], 'A591': [(241, 241), (243, 243), (245, 245)], 'A602': [(176, 176), (213, 213)], 'A590': [(178, 178), (209, 209), (231, 231)], 'A647': [(193, 197), (202, 206), (222, 222), (234, 236)], 'A612': [(163, 165)], 'A596': [(157, 157), (160, 160), (166, 166), (171, 172), (198, 199), (201, 201), (207, 207), (230, 230), (232, 233), (237, 240), (244, 244)], 'A675': [(161, 162), (181, 188), (190, 192), (200, 200)], 'A625': [(180, 180)], 'A653': [(189, 189)], 'A616': [(242, 242)]}","{'A583': 0.34444444444444444, 'A591': 0.03333333333333333, 'A602': 0.022222222222222223, 'A590': 0.03333333333333333, 'A647': 0.15555555555555556, 'A612': 0.03333333333333333, 'A596': 0.18888888888888888, 'A675': 0.15555555555555556, 'A625': 0.011111111111111112, 'A653': 0.011111111111111112, 'A616': 0.011111111111111112}",A583,,"    protected void processPacket(QuorumPacket qp) throws Exception {
        switch (qp.getType()) {
        case Leader.PING:
            ping(qp);
            break;
        case Leader.PROPOSAL:
            ServerMetrics.getMetrics().LEARNER_PROPOSAL_RECEIVED_COUNT.add(1);
            TxnLogEntry logEntry = SerializeUtils.deserializeTxn(qp.getData());
            TxnHeader hdr = logEntry.getHeader();
            Record txn = logEntry.getTxn();
            if (hdr.getZxid() != lastQueued + 1) {
                LOG.warn(
                    ""Got zxid 0x{} expected 0x{}"",
                    Long.toHexString(hdr.getZxid()),
                    Long.toHexString(lastQueued + 1));
            }
            lastQueued = hdr.getZxid();

            if (hdr.getType() == OpCode.reconfig) {
                SetDataTxn setDataTxn = (SetDataTxn) txn;
                QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData(), UTF_8));
                self.setLastSeenQuorumVerifier(qv, true);
            }

            fzk.logRequest(logEntry.toRequest());
            if (hdr != null) {
                /*
                 * Request header is created only by the leader, so this is only set
                 * for quorum packets. If there is a clock drift, the latency may be
                 * negative. Headers use wall time, not CLOCK_MONOTONIC.
                 */
                long now = Time.currentWallTime();
                long latency = now - hdr.getTime();
                if (latency >= 0) {
                    ServerMetrics.getMetrics().PROPOSAL_LATENCY.add(latency);
                }
            }
            if (om != null) {
                final long startTime = Time.currentElapsedTime();
                om.proposalReceived(qp);
                ServerMetrics.getMetrics().OM_PROPOSAL_PROCESS_TIME.add(Time.currentElapsedTime() - startTime);
            }
            break;
        case Leader.COMMIT:
            ServerMetrics.getMetrics().LEARNER_COMMIT_RECEIVED_COUNT.add(1);
            fzk.commit(qp.getZxid());
            if (om != null) {
                final long startTime = Time.currentElapsedTime();
                om.proposalCommitted(qp.getZxid());
                ServerMetrics.getMetrics().OM_COMMIT_PROCESS_TIME.add(Time.currentElapsedTime() - startTime);
            }
            break;

        case Leader.COMMITANDACTIVATE:
            // get the new configuration from the request
            Request request = fzk.pendingTxns.element();
            SetDataTxn setDataTxn = (SetDataTxn) request.getTxn();
            QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData(), UTF_8));

            // get new designated leader from (current) leader's message
            ByteBuffer buffer = ByteBuffer.wrap(qp.getData());
            long suggestedLeaderId = buffer.getLong();
            final long zxid = qp.getZxid();
            boolean majorChange = self.processReconfig(qv, suggestedLeaderId, zxid, true);
            // commit (writes the new config to ZK tree (/zookeeper/config)
            fzk.commit(zxid);

            if (om != null) {
                om.informAndActivate(zxid, suggestedLeaderId);
            }
            if (majorChange) {
                throw new Exception(""changes proposed in reconfig"");
            }
            break;
        case Leader.UPTODATE:
            LOG.error(""Received an UPTODATE message after Follower started"");
            break;
        case Leader.REVALIDATE:
            if (om == null || !om.revalidateLearnerSession(qp)) {
                revalidate(qp);
            }
            break;
        case Leader.SYNC:
            fzk.sync();
            break;
        default:
            LOG.warn(""Unknown packet type: {}"", LearnerHandler.packetToString(qp));
            break;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,getZxid,long getZxid(),"[251, 255]","{'A591': [(251, 251), (254, 255)], 'A602': [(252, 253)]}","{'A591': 0.6, 'A602': 0.4}",A591,,"    public long getZxid() {
        synchronized (fzk) {
            return fzk.getZxid();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,getLastQueued,long getLastQueued(),"[261, 263]","{'A591': [(262, 263)], 'A596': [(261, 261)]}","{'A591': 0.6666666666666666, 'A596': 0.3333333333333333}",A591,,"    protected long getLastQueued() {
        return lastQueued;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,getSyncedObserverSize,Integer getSyncedObserverSize(),"[265, 267]","{'A583': [(266, 266)], 'A647': [(265, 265), (267, 267)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,,"    public Integer getSyncedObserverSize() {
        return om == null ? null : om.getNumActiveObservers();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,getSyncedObserversInfo,"Iterable<Map<String, Object>> getSyncedObserversInfo()","[269, 274]","{'A647': [(269, 274)]}",{'A647': 1.0},A647,,"    public Iterable<Map<String, Object>> getSyncedObserversInfo() {
        if (om != null && om.getNumActiveObservers() > 0) {
            return om.getActiveObservers();
        }
        return Collections.emptySet();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,resetObserverConnectionStats,void resetObserverConnectionStats(),"[276, 280]","{'A647': [(276, 280)]}",{'A647': 1.0},A647,,"    public void resetObserverConnectionStats() {
        if (om != null && om.getNumActiveObservers() > 0) {
            om.resetObserverConnectionStats();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Follower.java,Follower,shutdown,void shutdown(),"[282, 286]","{'A583': [(283, 284)], 'A591': [(286, 286)], 'A596': [(282, 282), (285, 285)]}","{'A583': 0.4, 'A591': 0.2, 'A596': 0.4}",A583,,"    @Override
    public void shutdown() {
        LOG.info(""shutdown Follower"");
        super.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner.PacketInFlight,toRequest,Request toRequest(),"[85, 87]","{'A625': [(85, 87)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"        Request toRequest() {
            return new Request(hdr, rec, digest);
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,getSocket,Socket getSocket(),"[103, 105]","{'A596': [(103, 105)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    public Socket getSocket() {
        return sock;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,getPendingRevalidationsCount,int getPendingRevalidationsCount(),"[142, 144]","{'A596': [(142, 144)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    public int getPendingRevalidationsCount() {
        return pendingRevalidations.size();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,setAsyncSending,void setAsyncSending(boolean),"[147, 151]","{'A675': [(147, 151)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected static void setAsyncSending(boolean newMode) {
        asyncSending = newMode;
        LOG.info(""{} = {}"", LEARNER_ASYNC_SENDING, asyncSending);

    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,getAsyncSending,boolean getAsyncSending(),"[152, 154]","{'A675': [(152, 154)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected static boolean getAsyncSending() {
        return asyncSending;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,validateSession,"void validateSession(ServerCnxn,long,int)","[164, 180]","{'A583': [(164, 165), (171, 171), (174, 177), (180, 180)], 'A596': [(166, 170), (172, 173), (178, 179)]}","{'A583': 0.47058823529411764, 'A596': 0.5294117647058824}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    void validateSession(ServerCnxn cnxn, long clientId, int timeout) throws IOException {
        LOG.info(""Revalidating client: 0x{}"", Long.toHexString(clientId));
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(baos);
        dos.writeLong(clientId);
        dos.writeInt(timeout);
        dos.close();
        QuorumPacket qp = new QuorumPacket(Leader.REVALIDATE, -1, baos.toByteArray(), null);
        pendingRevalidations.put(clientId, cnxn);
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""To validate session 0x"" + Long.toHexString(clientId));
        }
        writePacket(qp, true);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,writePacket,"void writePacket(QuorumPacket,boolean)","[195, 201]","{'A596': [(195, 195)], 'A675': [(196, 201)]}","{'A596': 0.14285714285714285, 'A675': 0.8571428571428571}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    void writePacket(QuorumPacket pp, boolean flush) throws IOException {
        if (asyncSending) {
            sender.queuePacket(pp);
        } else {
            writePacketNow(pp, flush);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,writePacketNow,"void writePacketNow(QuorumPacket,boolean)","[203, 213]","{'A596': [(204, 205), (207, 213)], 'A675': [(203, 203)], 'A604': [(206, 206)]}","{'A596': 0.8181818181818182, 'A675': 0.09090909090909091, 'A604': 0.09090909090909091}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    void writePacketNow(QuorumPacket pp, boolean flush) throws IOException {
        synchronized (leaderOs) {
            if (pp != null) {
                messageTracker.trackSent(pp.getType());
                leaderOs.writeRecord(pp, ""packet"");
            }
            if (flush) {
                bufferedOutput.flush();
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,startSendingThread,void startSendingThread(),"[218, 221]","{'A675': [(218, 221)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected void startSendingThread() {
        sender = new LearnerSender(this);
        sender.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,readPacket,void readPacket(QuorumPacket),"[230, 242]","{'A596': [(230, 232), (234, 235), (240, 242)], 'A602': [(236, 239)], 'A604': [(233, 233)]}","{'A596': 0.6153846153846154, 'A602': 0.3076923076923077, 'A604': 0.07692307692307693}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    void readPacket(QuorumPacket pp) throws IOException {
        synchronized (leaderIs) {
            leaderIs.readRecord(pp, ""packet"");
            messageTracker.trackReceived(pp.getType());
        }
        if (LOG.isTraceEnabled()) {
            final long traceMask =
                (pp.getType() == Leader.PING) ? ZooTrace.SERVER_PING_TRACE_MASK
                    : ZooTrace.SERVER_PACKET_TRACE_MASK;

            ZooTrace.logQuorumPacket(LOG, traceMask, 'i', pp);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,request,void request(Request),"[251, 268]","{'A583': [(261, 263), (266, 266)], 'A596': [(251, 251), (256, 260), (264, 265), (267, 268)], 'A675': [(252, 255)]}","{'A583': 0.2222222222222222, 'A596': 0.5555555555555556, 'A675': 0.2222222222222222}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    void request(Request request) throws IOException {
        if (request.isThrottled()) {
            LOG.error(""Throttled request sent to leader: {}. Exiting"", request);
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        DataOutputStream oa = new DataOutputStream(baos);
        oa.writeLong(request.sessionId);
        oa.writeInt(request.cxid);
        oa.writeInt(request.type);
        byte[] payload = request.readRequestBytes();
        if (payload != null) {
            oa.write(payload);
        }
        oa.close();
        QuorumPacket qp = new QuorumPacket(Leader.REQUEST, -1, baos.toByteArray(), request.authInfo);
        writePacket(qp, true);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,findLeader,QuorumServer findLeader(),"[273, 290]","{'A583': [(287, 287)], 'A596': [(275, 277), (283, 285), (288, 288), (290, 290)], 'A590': [(278, 278)], 'A594': [(273, 274), (282, 282), (286, 286), (289, 289)], 'A723': [(279, 281)]}","{'A583': 0.05555555555555555, 'A596': 0.4444444444444444, 'A590': 0.05555555555555555, 'A594': 0.2777777777777778, 'A723': 0.16666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected QuorumServer findLeader() {
        QuorumServer leaderServer = null;
        // Find the leader by id
        Vote current = self.getCurrentVote();
        for (QuorumServer s : self.getView().values()) {
            if (s.id == current.getId()) {
                // Ensure we have the leader's correct IP address before
                // attempting to connect.
                s.recreateSocketAddresses();
                leaderServer = s;
                break;
            }
        }
        if (leaderServer == null) {
            LOG.warn(""Couldn't find the leader with id = {}"", current.getId());
        }
        return leaderServer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,nanoTime,long nanoTime(),"[296, 298]","{'A593': [(296, 298)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected long nanoTime() {
        return System.nanoTime();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,sockConnect,"void sockConnect(Socket,InetSocketAddress,int)","[304, 306]","{'A583': [(304, 304)], 'A593': [(305, 306)]}","{'A583': 0.3333333333333333, 'A593': 0.6666666666666666}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected void sockConnect(Socket sock, InetSocketAddress addr, int timeout) throws IOException {
        sock.connect(addr, timeout);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,connectToLeader,"void connectToLeader(MultipleAddresses,String)","[316, 362]","{'A653': [(316, 345), (347, 350), (354, 358), (362, 362)], 'A675': [(351, 351), (359, 361)], 'A618': [(346, 346), (352, 353)]}","{'A653': 0.851063829787234, 'A675': 0.0851063829787234, 'A618': 0.06382978723404255}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected void connectToLeader(MultipleAddresses multiAddr, String hostname) throws IOException {

        this.leaderAddr = multiAddr;
        Set<InetSocketAddress> addresses;
        if (self.isMultiAddressReachabilityCheckEnabled()) {
            // even if none of the addresses are reachable, we want to try to establish connection
            // see ZOOKEEPER-3758
            addresses = multiAddr.getAllReachableAddressesOrAll();
        } else {
            addresses = multiAddr.getAllAddresses();
        }
        ExecutorService executor = Executors.newFixedThreadPool(addresses.size());
        CountDownLatch latch = new CountDownLatch(addresses.size());
        AtomicReference<Socket> socket = new AtomicReference<>(null);
        addresses.stream().map(address -> new LeaderConnector(address, socket, latch)).forEach(executor::submit);

        try {
            latch.await();
        } catch (InterruptedException e) {
            LOG.warn(""Interrupted while trying to connect to Leader"", e);
        } finally {
            executor.shutdown();
            try {
                if (!executor.awaitTermination(1, TimeUnit.SECONDS)) {
                    LOG.error(""not all the LeaderConnector terminated properly"");
                }
            } catch (InterruptedException ie) {
                LOG.error(""Interrupted while terminating LeaderConnector executor."", ie);
            }
        }

        if (socket.get() == null) {
            throw new IOException(""Failed connect to "" + multiAddr);
        } else {
            sock = socket.get();
            sockBeingClosed.set(false);
        }

        self.authLearner.authenticate(sock, hostname);

        leaderIs = BinaryInputArchive.getArchive(new BufferedInputStream(sock.getInputStream()));
        bufferedOutput = new BufferedOutputStream(sock.getOutputStream());
        leaderOs = BinaryOutputArchive.getArchive(bufferedOutput);
        if (asyncSending) {
            startSendingThread();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner.LeaderConnector,run,void run(),"[376, 396]","{'A583': [(390, 390)], 'A596': [(378, 378), (395, 396)], 'A653': [(376, 377), (379, 388), (391, 394)], 'A593': [(389, 389)]}","{'A583': 0.047619047619047616, 'A596': 0.14285714285714285, 'A653': 0.7619047619047619, 'A593': 0.047619047619047616}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"        @Override
        public void run() {
            try {
                Thread.currentThread().setName(""LeaderConnector-"" + address);
                Socket sock = connectToLeader();

                if (sock != null && sock.isConnected()) {
                    if (socket.compareAndSet(null, sock)) {
                        LOG.info(""Successfully connected to leader, using address: {}"", address);
                    } else {
                        LOG.info(""Connection to the leader is already established, close the redundant connection"");
                        sock.close();
                    }
                }

            } catch (Exception e) {
                LOG.error(""Failed connect to {}"", address, e);
            } finally {
                latch.countDown();
            }
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner.LeaderConnector,connectToLeader,Socket connectToLeader(),"[398, 461]","{'A653': [(398, 399), (401, 461)], 'A594': [(400, 400)]}","{'A653': 0.984375, 'A594': 0.015625}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"        private Socket connectToLeader() throws IOException, X509Exception, InterruptedException {
            Socket sock = createSocket();

            // leader connection timeout defaults to tickTime * initLimit
            int connectTimeout = self.tickTime * self.initLimit;

            // but if connectToLearnerMasterLimit is specified, use that value to calculate
            // timeout instead of using the initLimit value
            if (self.connectToLearnerMasterLimit > 0) {
                connectTimeout = self.tickTime * self.connectToLearnerMasterLimit;
            }

            int remainingTimeout;
            long startNanoTime = nanoTime();

            for (int tries = 0; tries < 5 && socket.get() == null; tries++) {
                try {
                    // recalculate the init limit time because retries sleep for 1000 milliseconds
                    remainingTimeout = connectTimeout - (int) ((nanoTime() - startNanoTime) / 1_000_000);
                    if (remainingTimeout <= 0) {
                        LOG.error(""connectToLeader exceeded on retries."");
                        throw new IOException(""connectToLeader exceeded on retries."");
                    }

                    sockConnect(sock, address, Math.min(connectTimeout, remainingTimeout));
                    if (self.isSslQuorum()) {
                        ((SSLSocket) sock).startHandshake();
                    }
                    sock.setTcpNoDelay(nodelay);
                    break;
                } catch (IOException e) {
                    remainingTimeout = connectTimeout - (int) ((nanoTime() - startNanoTime) / 1_000_000);

                    if (remainingTimeout <= leaderConnectDelayDuringRetryMs) {
                        LOG.error(
                          ""Unexpected exception, connectToLeader exceeded. tries={}, remaining init limit={}, connecting to {}"",
                          tries,
                          remainingTimeout,
                          address,
                          e);
                        throw e;
                    } else if (tries >= 4) {
                        LOG.error(
                          ""Unexpected exception, retries exceeded. tries={}, remaining init limit={}, connecting to {}"",
                          tries,
                          remainingTimeout,
                          address,
                          e);
                        throw e;
                    } else {
                        LOG.warn(
                          ""Unexpected exception, tries={}, remaining init limit={}, connecting to {}"",
                          tries,
                          remainingTimeout,
                          address,
                          e);
                        sock = createSocket();
                    }
                }
                Thread.sleep(leaderConnectDelayDuringRetryMs);
            }

            return sock;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,createSocket,Socket createSocket(),"[468, 477]","{'A653': [(468, 468)], 'A613': [(469, 470), (472, 477)], 'A627': [(471, 471)]}","{'A653': 0.1, 'A613': 0.8, 'A627': 0.1}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected Socket createSocket() throws X509Exception, IOException {
        Socket sock;
        if (self.isSslQuorum()) {
            sock = self.getX509Util().createSSLSocket();
        } else {
            sock = new Socket();
        }
        sock.setSoTimeout(self.tickTime * self.initLimit);
        return sock;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,registerWithLeader,long registerWithLeader(int),"[486, 540]","{'A583': [(486, 486), (490, 491), (494, 494), (503, 503), (505, 505), (507, 519), (521, 528), (531, 533), (540, 540)], 'A596': [(487, 489), (492, 492), (495, 497), (499, 499), (502, 502), (504, 504), (529, 529), (534, 538)], 'A590': [(493, 493), (500, 501), (506, 506), (520, 520), (530, 530), (539, 539)], 'A702': [(498, 498)]}","{'A583': 0.5636363636363636, 'A596': 0.2909090909090909, 'A590': 0.12727272727272726, 'A702': 0.01818181818181818}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected long registerWithLeader(int pktType) throws IOException {
        /*
         * Send follower info, including last zxid and sid
         */
        long lastLoggedZxid = self.getLastLoggedZxid();
        QuorumPacket qp = new QuorumPacket();
        qp.setType(pktType);
        qp.setZxid(ZxidUtils.makeZxid(self.getAcceptedEpoch(), 0));

        /*
         * Add sid to payload
         */
        LearnerInfo li = new LearnerInfo(self.getMyId(), 0x10000, self.getQuorumVerifier().getVersion());
        ByteArrayOutputStream bsid = new ByteArrayOutputStream();
        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(bsid);
        boa.writeRecord(li, ""LearnerInfo"");
        qp.setData(bsid.toByteArray());

        writePacket(qp, true);
        readPacket(qp);
        final long newEpoch = ZxidUtils.getEpochFromZxid(qp.getZxid());
        if (qp.getType() == Leader.LEADERINFO) {
            // we are connected to a 1.0 server so accept the new epoch and read the next packet
            leaderProtocolVersion = ByteBuffer.wrap(qp.getData()).getInt();
            byte[] epochBytes = new byte[4];
            final ByteBuffer wrappedEpochBytes = ByteBuffer.wrap(epochBytes);
            if (newEpoch > self.getAcceptedEpoch()) {
                wrappedEpochBytes.putInt((int) self.getCurrentEpoch());
                self.setAcceptedEpoch(newEpoch);
            } else if (newEpoch == self.getAcceptedEpoch()) {
                // since we have already acked an epoch equal to the leaders, we cannot ack
                // again, but we still need to send our lastZxid to the leader so that we can
                // sync with it if it does assume leadership of the epoch.
                // the -1 indicates that this reply should not count as an ack for the new epoch
                wrappedEpochBytes.putInt(-1);
            } else {
                throw new IOException(""Leaders epoch, ""
                                      + newEpoch
                                      + "" is less than accepted epoch, ""
                                      + self.getAcceptedEpoch());
            }
            QuorumPacket ackNewEpoch = new QuorumPacket(Leader.ACKEPOCH, lastLoggedZxid, epochBytes, null);
            writePacket(ackNewEpoch, true);
            return ZxidUtils.makeZxid(newEpoch, 0);
        } else {
            if (newEpoch > self.getAcceptedEpoch()) {
                self.setAcceptedEpoch(newEpoch);
            }
            if (qp.getType() != Leader.NEWLEADER) {
                LOG.error(""First packet should have been NEWLEADER"");
                throw new IOException(""First packet should have been NEWLEADER"");
            }
            return qp.getZxid();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,enforceContinuousProposal,"long enforceContinuousProposal(long,PacketInFlight)","[542, 561]","{'A625': [(542, 561)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    long enforceContinuousProposal(long lastQueued, PacketInFlight pif) throws Exception {
        if (lastQueued == 0) {
            LOG.info(""DIFF sync got first proposal 0x{}"", Long.toHexString(pif.hdr.getZxid()));
        } else if (pif.hdr.getZxid() != lastQueued + 1) {
            if (ZxidUtils.getEpochFromZxid(pif.hdr.getZxid()) <= ZxidUtils.getEpochFromZxid(lastQueued)) {
                String msg = String.format(
                    ""DIFF sync got proposal 0x%s, last queued 0x%s, expected 0x%s"",
                    Long.toHexString(pif.hdr.getZxid()), Long.toHexString(lastQueued),
                    Long.toHexString(lastQueued + 1));
                LOG.error(msg);
                throw new Exception(msg);
            }
            // We can't tell whether it is a data loss. Given that new epoch is rare,
            // log at warn should not be too verbose.
            LOG.warn(""DIFF sync got new epoch proposal 0x{}, last queued 0x{}, expected 0x{}"",
                Long.toHexString(pif.hdr.getZxid()), Long.toHexString(lastQueued),
                Long.toHexString(lastQueued + 1));
        }
        return pif.hdr.getZxid();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,syncWithLeader,void syncWithLeader(long),"[570, 872]","{'A583': [(570, 570), (574, 574), (576, 576), (596, 596), (598, 598), (611, 612), (621, 622), (625, 625), (630, 631), (635, 636), (653, 653), (661, 663), (665, 665), (667, 667), (675, 678), (685, 688), (711, 711), (730, 730), (732, 737), (746, 746), (748, 750), (752, 762), (832, 832), (839, 839), (845, 845), (858, 861)], 'A596': [(571, 572), (585, 586), (599, 599), (601, 601), (609, 610), (613, 613), (618, 619), (623, 624), (627, 627), (629, 629), (633, 633), (640, 640), (643, 643), (742, 742), (819, 819), (821, 821), (824, 824), (826, 826), (872, 872)], 'A602': [(664, 664), (674, 674), (710, 710), (751, 751)], 'A590': [(575, 575), (634, 634), (639, 639), (649, 652), (654, 655), (666, 666), (669, 671), (693, 693), (695, 697), (704, 705), (712, 712), (714, 715), (721, 721), (731, 731), (738, 738), (745, 745), (822, 823), (825, 825), (871, 871)], 'A620': [(582, 582)], 'A648': [(698, 700), (702, 703), (713, 713), (723, 723), (725, 725), (727, 729), (849, 852), (854, 857), (862, 864), (866, 870)], 'A653': [(605, 605)], 'A612': [(648, 648), (656, 659), (706, 709), (716, 719)], 'A604': [(602, 604), (606, 608), (764, 765), (767, 768), (771, 771), (800, 800), (808, 809)], 'A584': [(626, 626), (632, 632)], 'A625': [(637, 638), (660, 660), (690, 690), (720, 720), (724, 724), (797, 799), (841, 841), (865, 865)], 'A593': [(600, 600)], 'A647': [(580, 580), (588, 588), (597, 597), (615, 617), (620, 620), (740, 740)], 'A639': [(573, 573), (684, 684), (689, 689), (692, 692), (694, 694), (741, 741), (837, 838), (842, 842), (846, 847)], 'A724': [(577, 579), (581, 581), (587, 587), (641, 642), (644, 647), (683, 683), (722, 722), (739, 739), (747, 747), (766, 766)], 'A725': [(583, 583), (668, 668), (672, 672), (691, 691), (726, 726), (769, 769), (772, 796), (802, 803), (805, 807), (810, 812), (815, 816), (818, 818), (827, 827), (840, 840), (843, 843), (853, 853)], 'A726': [(584, 584), (763, 763), (770, 770), (801, 801), (804, 804), (813, 814), (817, 817), (820, 820), (844, 844), (848, 848)], 'A727': [(589, 595)], 'A629': [(614, 614), (628, 628)], 'A591': [(673, 673), (679, 682), (744, 744)], 'A617': [(701, 701)], 'A630': [(743, 743)], 'A597': [(828, 831), (833, 836)]}","{'A583': 0.19141914191419143, 'A596': 0.07920792079207921, 'A602': 0.013201320132013201, 'A590': 0.09900990099009901, 'A620': 0.0033003300330033004, 'A648': 0.0891089108910891, 'A653': 0.0033003300330033004, 'A612': 0.0429042904290429, 'A604': 0.0462046204620462, 'A584': 0.006600660066006601, 'A625': 0.036303630363036306, 'A593': 0.0033003300330033004, 'A647': 0.026402640264026403, 'A639': 0.036303630363036306, 'A724': 0.052805280528052806, 'A725': 0.15181518151815182, 'A726': 0.036303630363036306, 'A727': 0.0231023102310231, 'A629': 0.006600660066006601, 'A591': 0.019801980198019802, 'A617': 0.0033003300330033004, 'A630': 0.0033003300330033004, 'A597': 0.026402640264026403}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected void syncWithLeader(long newLeaderZxid) throws Exception {
        QuorumPacket ack = new QuorumPacket(Leader.ACK, 0, null, null);
        QuorumPacket qp = new QuorumPacket();
        long newEpoch = ZxidUtils.getEpochFromZxid(newLeaderZxid);

        QuorumVerifier newLeaderQV = null;

        // In the DIFF case we don't need to do a snapshot because the transactions will sync on top of any existing snapshot
        // For SNAP and TRUNC the snapshot is needed to save that history
        boolean snapshotNeeded = true;
        boolean syncSnapshot = false;
        readPacket(qp);
        Deque<Long> packetsCommitted = new ArrayDeque<>();
        Deque<PacketInFlight> packetsNotLogged = new ArrayDeque<>();

        synchronized (zk) {
            if (qp.getType() == Leader.DIFF) {
                LOG.info(""Getting a diff from the leader 0x{}"", Long.toHexString(qp.getZxid()));
                self.setSyncMode(QuorumPeer.SyncMode.DIFF);
                if (zk.shouldForceWriteInitialSnapshotAfterLeaderElection()) {
                    LOG.info(""Forcing a snapshot write as part of upgrading from an older Zookeeper. This should only happen while upgrading."");
                    snapshotNeeded = true;
                    syncSnapshot = true;
                } else {
                    snapshotNeeded = false;
                }
            } else if (qp.getType() == Leader.SNAP) {
                self.setSyncMode(QuorumPeer.SyncMode.SNAP);
                LOG.info(""Getting a snapshot from leader 0x{}"", Long.toHexString(qp.getZxid()));
                // The leader is going to dump the database
                // db is clear as part of deserializeSnapshot()
                zk.getZKDatabase().deserializeSnapshot(leaderIs);
                // ZOOKEEPER-2819: overwrite config node content extracted
                // from leader snapshot with local config, to avoid potential
                // inconsistency of config node content during rolling restart.
                if (!self.isReconfigEnabled()) {
                    LOG.debug(""Reset config node content from local config after deserialization of snapshot."");
                    zk.getZKDatabase().initConfigInZKDatabase(self.getQuorumVerifier());
                }
                String signature = leaderIs.readString(""signature"");
                if (!signature.equals(""BenWasHere"")) {
                    LOG.error(""Missing signature. Got {}"", signature);
                    throw new IOException(""Missing signature"");
                }
                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());

                // immediately persist the latest snapshot when there is txn log gap
                syncSnapshot = true;
            } else if (qp.getType() == Leader.TRUNC) {
                //we need to truncate the log to the lastzxid of the leader
                self.setSyncMode(QuorumPeer.SyncMode.TRUNC);
                LOG.warn(""Truncating log to get in sync with the leader 0x{}"", Long.toHexString(qp.getZxid()));
                boolean truncated = zk.getZKDatabase().truncateLog(qp.getZxid());
                if (!truncated) {
                    // not able to truncate the log
                    LOG.error(""Not able to truncate the log 0x{}"", Long.toHexString(qp.getZxid()));
                    ServiceUtils.requestSystemExit(ExitCode.QUORUM_PACKET_ERROR.getValue());
                }
                zk.getZKDatabase().setlastProcessedZxid(qp.getZxid());

            } else {
                LOG.error(""Got unexpected packet from leader: {}, exiting ... "", LearnerHandler.packetToString(qp));
                ServiceUtils.requestSystemExit(ExitCode.QUORUM_PACKET_ERROR.getValue());
            }
            zk.getZKDatabase().initConfigInZKDatabase(self.getQuorumVerifier());
            zk.createSessionTracker();

            // TODO: Ideally, this should be lastProcessZxid(a.k.a. QuorumPacket::zxid from above), but currently
            // LearnerHandler does not guarantee this. So, let's be conservative and keep it unchange for now.
            long lastQueued = 0;

            // in Zab V1.0 (ZK 3.4+) we might take a snapshot when we get the NEWLEADER message, but in pre V1.0
            // we take the snapshot on the UPDATE message, since Zab V1.0 also gets the UPDATE (after the NEWLEADER)
            // we need to make sure that we don't take the snapshot twice.
            boolean isPreZAB1_0 = true;
            //If we are not going to take the snapshot be sure the transactions are not applied in memory
            // but written out to the transaction log
            boolean writeToTxnLog = !snapshotNeeded;
            TxnLogEntry logEntry;
            // we are now going to start getting transactions to apply followed by an UPTODATE
            outerLoop:
            while (self.isRunning()) {
                readPacket(qp);
                switch (qp.getType()) {
                case Leader.PROPOSAL:
                    PacketInFlight pif = new PacketInFlight();
                    logEntry = SerializeUtils.deserializeTxn(qp.getData());
                    pif.hdr = logEntry.getHeader();
                    pif.rec = logEntry.getTxn();
                    pif.digest = logEntry.getDigest();
                    lastQueued = enforceContinuousProposal(lastQueued, pif);

                    if (pif.hdr.getType() == OpCode.reconfig) {
                        SetDataTxn setDataTxn = (SetDataTxn) pif.rec;
                        QuorumVerifier qv = self.configFromString(new String(setDataTxn.getData(), UTF_8));
                        self.setLastSeenQuorumVerifier(qv, true);
                    }

                    packetsNotLogged.add(pif);
                    break;
                case Leader.COMMIT:
                case Leader.COMMITANDACTIVATE:
                    pif = packetsNotLogged.peekFirst();
                    if (pif.hdr.getZxid() == qp.getZxid() && qp.getType() == Leader.COMMITANDACTIVATE) {
                        QuorumVerifier qv = self.configFromString(new String(((SetDataTxn) pif.rec).getData(), UTF_8));
                        boolean majorChange = self.processReconfig(
                            qv,
                            ByteBuffer.wrap(qp.getData()).getLong(), qp.getZxid(),
                            true);
                        if (majorChange) {
                            throw new Exception(""changes proposed in reconfig"");
                        }
                    }
                    if (!writeToTxnLog) {
                        if (pif.hdr.getZxid() != qp.getZxid()) {
                            LOG.warn(
                                ""Committing 0x{}, but next proposal is 0x{}"",
                                Long.toHexString(qp.getZxid()),
                                Long.toHexString(pif.hdr.getZxid()));
                        } else {
                            zk.processTxn(pif.toRequest());
                            packetsNotLogged.remove();
                        }
                    } else {
                        packetsCommitted.add(qp.getZxid());
                    }
                    break;
                case Leader.INFORM:
                case Leader.INFORMANDACTIVATE:
                    PacketInFlight packet = new PacketInFlight();

                    if (qp.getType() == Leader.INFORMANDACTIVATE) {
                        ByteBuffer buffer = ByteBuffer.wrap(qp.getData());
                        long suggestedLeaderId = buffer.getLong();
                        byte[] remainingdata = new byte[buffer.remaining()];
                        buffer.get(remainingdata);
                        logEntry = SerializeUtils.deserializeTxn(remainingdata);
                        packet.hdr = logEntry.getHeader();
                        packet.rec = logEntry.getTxn();
                        packet.digest = logEntry.getDigest();
                        QuorumVerifier qv = self.configFromString(new String(((SetDataTxn) packet.rec).getData(), UTF_8));
                        boolean majorChange = self.processReconfig(qv, suggestedLeaderId, qp.getZxid(), true);
                        if (majorChange) {
                            throw new Exception(""changes proposed in reconfig"");
                        }
                    } else {
                        logEntry = SerializeUtils.deserializeTxn(qp.getData());
                        packet.rec = logEntry.getTxn();
                        packet.hdr = logEntry.getHeader();
                        packet.digest = logEntry.getDigest();
                        lastQueued = enforceContinuousProposal(lastQueued, packet);
                    }
                    if (!writeToTxnLog) {
                        // Apply to db directly if we haven't taken the snapshot
                        zk.processTxn(packet.toRequest());
                    } else {
                        packetsNotLogged.add(packet);
                        packetsCommitted.add(qp.getZxid());
                    }

                    break;
                case Leader.UPTODATE:
                    LOG.info(""Learner received UPTODATE message"");
                    if (newLeaderQV != null) {
                        boolean majorChange = self.processReconfig(newLeaderQV, null, null, true);
                        if (majorChange) {
                            throw new Exception(""changes proposed in reconfig"");
                        }
                    }
                    if (isPreZAB1_0) {
                        zk.takeSnapshot(syncSnapshot);
                        self.setCurrentEpoch(newEpoch);
                    }
                    self.setZooKeeperServer(zk);
                    self.adminServer.setZooKeeperServer(zk);
                    break outerLoop;
                case Leader.NEWLEADER: // Getting NEWLEADER here instead of in discovery
                    // means this is Zab 1.0
                    LOG.info(""Learner received NEWLEADER message"");
                    if (qp.getData() != null && qp.getData().length > 1) {
                        try {
                            QuorumVerifier qv = self.configFromString(new String(qp.getData(), UTF_8));
                            self.setLastSeenQuorumVerifier(qv, true);
                            newLeaderQV = qv;
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }

                    if (snapshotNeeded) {
                        zk.takeSnapshot(syncSnapshot);
                    }


                    writeToTxnLog = true;
                    //Anything after this needs to go to the transaction log, not applied directly in memory
                    isPreZAB1_0 = false;

                    // ZOOKEEPER-3911: make sure sync the uncommitted logs before commit them (ACK NEWLEADER).
                    if (zk instanceof FollowerZooKeeperServer && !packetsCommitted.isEmpty()) {
                        long startTime = Time.currentElapsedTime();
                        FollowerZooKeeperServer fzk = (FollowerZooKeeperServer) zk;

                        /*
                         * @see https://github.com/apache/zookeeper/pull/1848
                         * Persist and process the committed txns in ""packetsNotLogged""
                         * according to ""packetsCommitted"", which have been committed by
                         * the leader. For these committed proposals, there is no need to
                         * reply ack.
                         *
                         * @see https://issues.apache.org/jira/browse/ZOOKEEPER-4394
                         * Keep the outstanding proposals in ""packetsNotLogged"" to avoid
                         * NullPointerException when the follower receives COMMIT packet(s)
                         * right after replying NEWLEADER ack.
                         */
                        while (!packetsCommitted.isEmpty()) {
                            long zxid = packetsCommitted.removeFirst();
                            pif = packetsNotLogged.peekFirst();
                            if (pif == null) {
                                LOG.warn(""Committing 0x{}, but got no proposal"", Long.toHexString(zxid));
                                continue;
                            } else if (pif.hdr.getZxid() != zxid) {
                                LOG.warn(""Committing 0x{}, but next proposal is 0x{}"",
                                        Long.toHexString(zxid), Long.toHexString(pif.hdr.getZxid()));
                                continue;
                            }
                            packetsNotLogged.removeFirst();
                            Request request = pif.toRequest();
                            fzk.appendRequest(request);
                            fzk.processTxn(request);
                        }

                        // @see https://issues.apache.org/jira/browse/ZOOKEEPER-4646
                        // Make sure to persist the txns to disk before replying NEWLEADER ack.
                        fzk.getZKDatabase().commit();
                        LOG.info(""It took {}ms to persist and commit txns in packetsCommitted. ""
                                        + ""{} outstanding txns left in packetsNotLogged"",
                                Time.currentElapsedTime() - startTime, packetsNotLogged.size());
                    }

                    // @see https://issues.apache.org/jira/browse/ZOOKEEPER-4643
                    // @see https://issues.apache.org/jira/browse/ZOOKEEPER-4785
                    // Update current epoch after the committed txns are persisted
                    self.setCurrentEpoch(newEpoch);
                    LOG.info(""Set the current epoch to {}"", newEpoch);
                    sock.setSoTimeout(self.tickTime * self.syncLimit);
                    self.setSyncMode(QuorumPeer.SyncMode.NONE);

                    // send NEWLEADER ack after the committed txns are persisted
                    writePacket(new QuorumPacket(Leader.ACK, newLeaderZxid, null, null), true);
                    LOG.info(""Sent NEWLEADER ack to leader with zxid {}"", Long.toHexString(newLeaderZxid));
                    break;
                }
            }
        }
        ack.setZxid(ZxidUtils.makeZxid(newEpoch, 0));
        writePacket(ack, true);
        zk.startup();
        /*
         * Update the election vote here to ensure that all members of the
         * ensemble report the same vote to new servers that start up and
         * send leader election notifications to the ensemble.
         *
         * @see https://issues.apache.org/jira/browse/ZOOKEEPER-1732
         */
        self.updateElectionVote(newEpoch);

        // We need to log the stuff that came in between the snapshot and the uptodate
        if (zk instanceof FollowerZooKeeperServer) {
            FollowerZooKeeperServer fzk = (FollowerZooKeeperServer) zk;
            for (PacketInFlight p : packetsNotLogged) {
                fzk.logRequest(p.toRequest());
            }
            LOG.info(""{} txns have been logged asynchronously"", packetsNotLogged.size());

            for (Long zxid : packetsCommitted) {
                fzk.commit(zxid);
            }
            LOG.info(""{} txns have been committed"", packetsCommitted.size());
        } else if (zk instanceof ObserverZooKeeperServer) {
            // Similar to follower, we need to log requests between the snapshot
            // and UPTODATE
            ObserverZooKeeperServer ozk = (ObserverZooKeeperServer) zk;
            for (PacketInFlight p : packetsNotLogged) {
                Long zxid = packetsCommitted.peekFirst();
                if (p.hdr.getZxid() != zxid) {
                    // log warning message if there is no matching commit
                    // old leader send outstanding proposal to observer
                    LOG.warn(
                        ""Committing 0x{}, but next proposal is 0x{}"",
                        Long.toHexString(zxid),
                        Long.toHexString(p.hdr.getZxid()));
                    continue;
                }
                packetsCommitted.remove();
                Request request = p.toRequest();
                ozk.commitRequest(request);
            }
        } else {
            // New server type need to handle in-flight packets
            throw new UnsupportedOperationException(""Unknown server type"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,revalidate,void revalidate(QuorumPacket),"[874, 891]","{'A583': [(875, 875), (881, 881), (886, 889)], 'A596': [(874, 874), (876, 878), (884, 885), (890, 891)], 'A648': [(879, 879)], 'A591': [(880, 880), (882, 883)]}","{'A583': 0.3333333333333333, 'A596': 0.4444444444444444, 'A648': 0.05555555555555555, 'A591': 0.16666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected void revalidate(QuorumPacket qp) throws IOException {
        ByteArrayInputStream bis = new ByteArrayInputStream(qp.getData());
        DataInputStream dis = new DataInputStream(bis);
        long sessionId = dis.readLong();
        boolean valid = dis.readBoolean();
        ServerCnxn cnxn = pendingRevalidations.remove(sessionId);
        if (cnxn == null) {
            LOG.warn(""Missing session 0x{} for validation"", Long.toHexString(sessionId));
        } else {
            zk.finishSessionInit(cnxn, valid);
        }
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""Session 0x"" + Long.toHexString(sessionId) + "" is valid: "" + valid);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,ping,void ping(QuorumPacket),"[893, 905]","{'A596': [(893, 896), (898, 901), (905, 905)], 'A648': [(897, 897)], 'A675': [(902, 904)]}","{'A596': 0.6923076923076923, 'A648': 0.07692307692307693, 'A675': 0.23076923076923078}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    protected void ping(QuorumPacket qp) throws IOException {
        // Send back the ping with our session data
        ByteArrayOutputStream bos = new ByteArrayOutputStream();
        DataOutputStream dos = new DataOutputStream(bos);
        Map<Long, Integer> touchTable = zk.getTouchSnapshot();
        for (Entry<Long, Integer> entry : touchTable.entrySet()) {
            dos.writeLong(entry.getKey());
            dos.writeInt(entry.getValue());
        }

        QuorumPacket pingReply = new QuorumPacket(qp.getType(), qp.getZxid(), bos.toByteArray(), qp.getAuthinfo());
        writePacket(pingReply, true);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,shutdown,void shutdown(),"[910, 926]","{'A596': [(910, 910), (920, 921), (925, 926)], 'A675': [(914, 918)], 'A604': [(922, 924)], 'A647': [(919, 919)], 'A591': [(913, 913)], 'A630': [(911, 912)]}","{'A596': 0.29411764705882354, 'A675': 0.29411764705882354, 'A604': 0.17647058823529413, 'A647': 0.058823529411764705, 'A591': 0.058823529411764705, 'A630': 0.11764705882352941}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    public void shutdown() {
        self.setZooKeeperServer(null);
        self.closeAllConnections();
        self.adminServer.setZooKeeperServer(null);

        if (sender != null) {
            sender.shutdown();
        }

        closeSocket();
        // shutdown previous zookeeper
        if (zk != null) {
            // If we haven't finished SNAP sync, force fully shutdown
            // to avoid potential inconsistency
            zk.shutdown(self.getSyncMode().equals(QuorumPeer.SyncMode.SNAP));
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,isRunning,boolean isRunning(),"[928, 930]","{'A597': [(928, 930)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    boolean isRunning() {
        return self.isRunning() && zk.isRunning();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,closeSocket,void closeSocket(),"[932, 947]","{'A675': [(945, 947)], 'A647': [(932, 932)], 'A695': [(933, 944)]}","{'A675': 0.1875, 'A647': 0.0625, 'A695': 0.75}",A695,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    void closeSocket() {
        if (sockBeingClosed.compareAndSet(false, true)) {
            if (sock == null) { // Closing before establishing the connection is a noop
                return;
            }
            Socket socket = sock;
            sock = null;
            if (closeSocketAsync) {
                final Thread closingThread = new Thread(() -> closeSockSync(socket), ""CloseSocketThread(sid:"" + zk.getServerId());
                closingThread.setDaemon(true);
                closingThread.start();
            } else {
                closeSockSync(socket);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/Learner.java,Learner,closeSockSync,void closeSockSync(Socket),"[949, 957]","{'A675': [(951, 951), (953, 953)], 'A647': [(950, 950), (954, 957)], 'A695': [(949, 949), (952, 952)]}","{'A675': 0.2222222222222222, 'A647': 0.5555555555555556, 'A695': 0.2222222222222222}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerTest.java,"    private static void closeSockSync(Socket socket) {
        try {
            long startTime = Time.currentElapsedTime();
            socket.close();
            ServerMetrics.getMetrics().SOCKET_CLOSING_TIME.add(Time.currentElapsedTime() - startTime);
        } catch (IOException e) {
            LOG.warn(""Ignoring error closing connection to leader"", e);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandlerBean.java,LearnerHandlerBean,getName,String getName(),"[46, 53]","{'A583': [(48, 52)], 'A647': [(46, 47), (53, 53)]}","{'A583': 0.625, 'A647': 0.375}",A583,,"    @Override
    public String getName() {
        return MBeanRegistry.getInstance()
                            .makeFullPath(
                                ""Learner_Connections"",
                                ObjectName.quote(remoteAddr),
                                String.format(""\""id:%d\"""", learnerHandler.getSid()));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandlerBean.java,LearnerHandlerBean,isHidden,boolean isHidden(),"[55, 58]","{'A647': [(55, 58)]}",{'A647': 1.0},A647,,"    @Override
    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandlerBean.java,LearnerHandlerBean,terminateConnection,void terminateConnection(),"[60, 64]","{'A583': [(62, 62)], 'A647': [(60, 61), (63, 64)]}","{'A583': 0.2, 'A647': 0.8}",A647,,"    @Override
    public void terminateConnection() {
        LOG.info(""terminating learner handler connection on demand {}"", toString());
        learnerHandler.shutdown();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerHandlerBean.java,LearnerHandlerBean,toString,String toString(),"[66, 69]","{'A647': [(66, 69)]}",{'A647': 1.0},A647,,"    @Override
    public String toString() {
        return ""LearnerHandlerBean{remoteIP="" + remoteAddr + "",ServerId="" + learnerHandler.getSid() + ""}"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottler.java,LearnerSyncThrottler,beginSync,void beginSync(boolean),"[82, 91]","{'A583': [(88, 88)], 'A675': [(82, 87), (89, 91)]}","{'A583': 0.1, 'A675': 0.9}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottlerTest.java,"    protected void beginSync(boolean essential) throws SyncThrottleException, InterruptedException {

        synchronized (countSyncObject) {
            if (essential || syncInProgress < maxConcurrentSyncs) {
                syncInProgress++;
            } else {
                throw new SyncThrottleException(syncInProgress + 1, maxConcurrentSyncs, syncType);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottler.java,LearnerSyncThrottler,endSync,void endSync(),"[96, 108]","{'A583': [(105, 105)], 'A675': [(96, 104), (106, 108)]}","{'A583': 0.07692307692307693, 'A675': 0.9230769230769231}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottlerTest.java,"    public void endSync() {
        int newCount;
        synchronized (countSyncObject) {
            syncInProgress--;
            newCount = syncInProgress;
            countSyncObject.notify();
        }

        if (newCount < 0) {
            String errorMsg = ""endSync() called incorrectly; current sync count is "" + newCount;
            LOG.error(errorMsg);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottler.java,LearnerSyncThrottler,setMaxConcurrentSyncs,void setMaxConcurrentSyncs(int),"[110, 112]","{'A675': [(110, 112)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottlerTest.java,"    public void setMaxConcurrentSyncs(int maxConcurrentSyncs) {
        this.maxConcurrentSyncs = maxConcurrentSyncs;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottler.java,LearnerSyncThrottler,getSyncInProgress,int getSyncInProgress(),"[114, 116]","{'A583': [(114, 114)], 'A675': [(115, 116)]}","{'A583': 0.3333333333333333, 'A675': 0.6666666666666666}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/LearnerSyncThrottlerTest.java,"    public int getSyncInProgress() {
        return syncInProgress;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/PrependableSocket.java,PrependableSocket,getInputStream,InputStream getInputStream(),"[35, 42]","{'A583': [(35, 39), (41, 41)], 'A613': [(40, 40)], 'A627': [(42, 42)]}","{'A583': 0.75, 'A613': 0.125, 'A627': 0.125}",A583,,"    @Override
    public InputStream getInputStream() throws IOException {
        if (pushbackInputStream == null) {
            return super.getInputStream();
        }

        return pushbackInputStream;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/PrependableSocket.java,PrependableSocket,prependToInputStream,"void prependToInputStream(byte[],int,int)","[52, 62]","{'A583': [(52, 61)], 'A627': [(62, 62)]}","{'A583': 0.9090909090909091, 'A627': 0.09090909090909091}",A583,,"    public void prependToInputStream(byte[] bytes, int offset, int length) throws IOException {
        if (length == 0) {
            return; // nothing to prepend
        }
        if (pushbackInputStream != null) {
            throw new IOException(""prependToInputStream() called more than once"");
        }
        PushbackInputStream pushbackInputStream = new PushbackInputStream(getInputStream(), length);
        pushbackInputStream.unread(bytes, offset, length);
        this.pushbackInputStream = pushbackInputStream;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,start,void start(),"[43, 44]","{'A583': [(43, 44)]}",{'A583': 1.0},A583,,"    public void start() {
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,createLocalSessionTracker,"void createLocalSessionTracker(SessionExpirer,int,long,ZooKeeperServerListener)","[46, 50]","{'A583': [(46, 46), (48, 48)], 'A648': [(50, 50)], 'A605': [(47, 47), (49, 49)]}","{'A583': 0.4, 'A648': 0.2, 'A605': 0.4}",A583,,"    public void createLocalSessionTracker(SessionExpirer expirer, int tickTime, long id, ZooKeeperServerListener listener) {
        this.localSessionsWithTimeouts = new ConcurrentHashMap<>();
        this.localSessionTracker = new LocalSessionTracker(expirer, this.localSessionsWithTimeouts, tickTime, id, listener);
        this.upgradingSessions = new ConcurrentHashMap<>();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,isTrackingSession,boolean isTrackingSession(long),"[52, 54]","{'A648': [(52, 54)]}",{'A648': 1.0},A648,,"    public boolean isTrackingSession(long sessionId) {
        return isLocalSession(sessionId) || isGlobalSession(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,isLocalSession,boolean isLocalSession(long),"[56, 58]","{'A583': [(57, 57)], 'A648': [(56, 56), (58, 58)]}","{'A583': 0.3333333333333333, 'A648': 0.6666666666666666}",A648,,"    public boolean isLocalSession(long sessionId) {
        return localSessionTracker != null && localSessionTracker.isTrackingSession(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,isLocalSessionsEnabled,boolean isLocalSessionsEnabled(),"[60, 63]","{'A675': [(60, 63)]}",{'A675': 1.0},A675,,"    @Override
    public boolean isLocalSessionsEnabled() {
        return localSessionsEnabled;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,isUpgradingSession,boolean isUpgradingSession(long),"[65, 67]","{'A583': [(66, 66)], 'A612': [(65, 65), (67, 67)]}","{'A583': 0.3333333333333333, 'A612': 0.6666666666666666}",A612,,"    public boolean isUpgradingSession(long sessionId) {
        return upgradingSessions != null && upgradingSessions.containsKey(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,finishedUpgrading,void finishedUpgrading(long),"[69, 73]","{'A612': [(69, 73)]}",{'A612': 1.0},A612,,"    public void finishedUpgrading(long sessionId) {
        if (upgradingSessions != null) {
            upgradingSessions.remove(sessionId);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,upgradeSession,int upgradeSession(long),"[86, 107]","{'A583': [(94, 94)], 'A648': [(86, 93), (103, 107)], 'A612': [(95, 102)]}","{'A583': 0.045454545454545456, 'A648': 0.5909090909090909, 'A612': 0.36363636363636365}",A648,,"    public int upgradeSession(long sessionId) {
        if (localSessionsWithTimeouts == null) {
            return -1;
        }
        // We won't race another upgrade attempt because only one thread
        // will get the timeout from the map
        Integer timeout = localSessionsWithTimeouts.remove(sessionId);
        if (timeout != null) {
            LOG.info(""Upgrading session 0x{}"", Long.toHexString(sessionId));
            // Track global session, which will add to global session tracker
            // on leader and do nothing on learner. Need to start track global
            // session in leader now to update the session expire between
            // LeaderRequestProcessor and PrepRequestProcessor.
            trackSession(sessionId, timeout);
            // Track ongoing upgrading sessions, learner will use it to find
            // other sessions it has which are not in local and global sessions
            upgradingSessions.put(sessionId, timeout);
            localSessionTracker.removeSession(sessionId);
            return timeout;
        }
        return -1;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,removeLocalSession,void removeLocalSession(long),"[109, 114]","{'A583': [(110, 110)], 'A612': [(109, 109), (111, 114)]}","{'A583': 0.16666666666666666, 'A612': 0.8333333333333334}",A612,,"    protected void removeLocalSession(long sessionId) {
        if (localSessionTracker == null) {
            return;
        }
        localSessionTracker.removeSession(sessionId);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,checkGlobalSession,"void checkGlobalSession(long,Object)","[116, 119]","{'A648': [(118, 119)], 'A604': [(116, 117)]}","{'A648': 0.5, 'A604': 0.5}",A648,,"    public void checkGlobalSession(long sessionId, Object owner)
        throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException {
        throw new UnsupportedOperationException();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,getLocalSessionCount,long getLocalSessionCount(),"[121, 126]","{'A713': [(121, 126)]}",{'A713': 1.0},A713,,"    public long getLocalSessionCount() {
        if (localSessionsWithTimeouts == null) {
            return 0;
        }
        return localSessionsWithTimeouts.size();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/UpgradeableSessionTracker.java,UpgradeableSessionTracker,localSessions,Set<Long> localSessions(),"[128, 131]","{'A604': [(128, 131)]}",{'A604': 1.0},A604,,"    public Set<Long> localSessions() {
        return (localSessionTracker == null) ? Collections.<Long>emptySet()
            : localSessionTracker.localSessions();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ServerBean.java,ServerBean,isHidden,boolean isHidden(),"[31, 33]","{'A590': [(31, 33)]}",{'A590': 1.0},A590,,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/ServerBean.java,ServerBean,getStartTime,String getStartTime(),"[35, 37]","{'A590': [(35, 37)]}",{'A590': 1.0},A590,,"    public String getStartTime() {
        return startTime.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,getName,String getName(),"[34, 37]","{'A591': [(36, 36)], 'A590': [(35, 35), (37, 37)], 'A613': [(34, 34)]}","{'A591': 0.25, 'A590': 0.5, 'A613': 0.25}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public String getName() {
        return name;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,isHidden,boolean isHidden(),"[39, 42]","{'A590': [(40, 42)], 'A613': [(39, 39)]}","{'A590': 0.75, 'A613': 0.25}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,getQuorumSize,int getQuorumSize(),"[44, 47]","{'A590': [(45, 47)], 'A613': [(44, 44)]}","{'A590': 0.75, 'A613': 0.25}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public int getQuorumSize() {
        return peer.getQuorumSize();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,getSyncLimit,int getSyncLimit(),"[49, 51]","{'A675': [(49, 51)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    public int getSyncLimit() {
        return peer.getSyncLimit();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,getInitLimit,int getInitLimit(),"[53, 55]","{'A675': [(53, 55)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    public int getInitLimit() {
        return peer.getInitLimit();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,setInitLimit,void setInitLimit(int),"[57, 59]","{'A675': [(57, 59)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    public void setInitLimit(int initLimit) {
        peer.setInitLimit(initLimit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,setSyncLimit,void setSyncLimit(int),"[61, 63]","{'A675': [(61, 63)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    public void setSyncLimit(int syncLimit) {
        peer.setSyncLimit(syncLimit);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,isSslQuorum,boolean isSslQuorum(),"[65, 68]","{'A613': [(65, 68)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public boolean isSslQuorum() {
        return peer.isSslQuorum();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,isPortUnification,boolean isPortUnification(),"[70, 73]","{'A613': [(70, 73)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public boolean isPortUnification() {
        return peer.shouldUsePortUnification();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,getObserverElectionDelayMS,long getObserverElectionDelayMS(),"[75, 78]","{'A647': [(75, 78)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public long getObserverElectionDelayMS() {
        return Observer.getObserverElectionDelayMs();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,setObserverElectionDelayMS,void setObserverElectionDelayMS(long),"[80, 83]","{'A647': [(80, 83)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public void setObserverElectionDelayMS(long delayMS) {
        Observer.setObserverElectionDelayMs(delayMS);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,getDigestEnabled,boolean getDigestEnabled(),"[85, 88]","{'A612': [(85, 88)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public boolean getDigestEnabled() {
        return ZooKeeperServer.isDigestEnabled();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumBean.java,QuorumBean,disableDigest,void disableDigest(),"[90, 93]","{'A612': [(90, 93)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumBeanTest.java,"    @Override
    public void disableDigest() {
        ZooKeeperServer.setDigestEnabled(false);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/AckRequestProcessor.java,AckRequestProcessor,processRequest,void processRequest(Request),"[43, 51]","{'A583': [(45, 45)], 'A590': [(43, 44), (49, 49), (51, 51)], 'A675': [(46, 46), (48, 48), (50, 50)], 'A702': [(47, 47)]}","{'A583': 0.1111111111111111, 'A590': 0.4444444444444444, 'A675': 0.3333333333333333, 'A702': 0.1111111111111111}",A590,,"    public void processRequest(Request request) {
        QuorumPeer self = leader.self;
        if (self != null) {
            request.logLatency(ServerMetrics.getMetrics().PROPOSAL_ACK_CREATION_LATENCY);
            leader.processAck(self.getMyId(), request.zxid, null);
        } else {
            LOG.error(""Null QuorumPeer"");
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/AckRequestProcessor.java,AckRequestProcessor,shutdown,void shutdown(),"[53, 55]","{'A583': [(54, 54)], 'A590': [(53, 53), (55, 55)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public void shutdown() {
        // TODO No need to do anything
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,getFollower,Follower getFollower(),"[62, 64]","{'A583': [(62, 62)], 'A591': [(64, 64)], 'A688': [(63, 63)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A688': 0.3333333333333333}",A583,,"    public Follower getFollower() {
        return self.follower;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,setupRequestProcessors,void setupRequestProcessors(),"[66, 75]","{'A583': [(69, 69), (73, 73)], 'A590': [(66, 68), (70, 72), (74, 75)]}","{'A583': 0.2, 'A590': 0.8}",A590,,"    @Override
    protected void setupRequestProcessors() {
        RequestProcessor finalProcessor = new FinalRequestProcessor(this);
        commitProcessor = new CommitProcessor(finalProcessor, Long.toString(getServerId()), true, getZooKeeperServerListener());
        commitProcessor.start();
        firstProcessor = new FollowerRequestProcessor(this, commitProcessor);
        ((FollowerRequestProcessor) firstProcessor).start();
        syncProcessor = new SyncRequestProcessor(this, new SendAckRequestProcessor(getFollower()));
        syncProcessor.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,logRequest,void logRequest(Request),"[79, 84]","{'A590': [(83, 84)], 'A625': [(79, 82)]}","{'A590': 0.3333333333333333, 'A625': 0.6666666666666666}",A625,,"    public void logRequest(Request request) {
        if ((request.zxid & 0xffffffffL) != 0) {
            pendingTxns.add(request);
        }
        syncProcessor.processRequest(request);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,appendRequest,void appendRequest(Request),"[89, 91]","{'A625': [(89, 89)], 'A726': [(90, 91)]}","{'A625': 0.3333333333333333, 'A726': 0.6666666666666666}",A726,,"    public void appendRequest(Request request) throws IOException {
        getZKDatabase().append(request);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,commit,void commit(long),"[99, 113]","{'A583': [(101, 101), (107, 107)], 'A590': [(99, 100), (102, 105), (109, 110), (112, 113)], 'A584': [(108, 108)], 'A593': [(106, 106)], 'A675': [(111, 111)]}","{'A583': 0.13333333333333333, 'A590': 0.6666666666666666, 'A584': 0.06666666666666667, 'A593': 0.06666666666666667, 'A675': 0.06666666666666667}",A590,,"    public void commit(long zxid) {
        if (pendingTxns.size() == 0) {
            LOG.warn(""Committing "" + Long.toHexString(zxid) + "" without seeing txn"");
            return;
        }
        long firstElementZxid = pendingTxns.element().zxid;
        if (firstElementZxid != zxid) {
            LOG.error(""Committing zxid 0x"" + Long.toHexString(zxid)
                      + "" but next pending txn 0x"" + Long.toHexString(firstElementZxid));
            ServiceUtils.requestSystemExit(ExitCode.UNMATCHED_TXN_COMMIT.getValue());
        }
        Request request = pendingTxns.remove();
        request.logLatency(ServerMetrics.getMetrics().COMMIT_PROPAGATION_LATENCY);
        commitProcessor.commit(request);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,sync,void sync(),"[115, 127]","{'A583': [(115, 116), (123, 123)], 'A591': [(120, 120)], 'A590': [(117, 117), (127, 127)], 'A647': [(122, 122), (124, 126)], 'A688': [(118, 119)], 'A597': [(121, 121)]}","{'A583': 0.23076923076923078, 'A591': 0.07692307692307693, 'A590': 0.15384615384615385, 'A647': 0.3076923076923077, 'A688': 0.15384615384615385, 'A597': 0.07692307692307693}",A647,,"    public synchronized void sync() {
        if (pendingSyncs.size() == 0) {
            LOG.warn(""Not expecting a sync."");
            return;
        }

        Request r = pendingSyncs.remove();
        if (r instanceof LearnerSyncRequest) {
            LearnerSyncRequest lsr = (LearnerSyncRequest) r;
            lsr.fh.queuePacket(new QuorumPacket(Leader.SYNC, 0, null, null));
        }
        commitProcessor.commit(r);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,getGlobalOutstandingLimit,int getGlobalOutstandingLimit(),"[129, 134]","{'A613': [(129, 134)]}",{'A613': 1.0},A613,,"    @Override
    public int getGlobalOutstandingLimit() {
        int divisor = self.getQuorumSize() > 2 ? self.getQuorumSize() - 1 : 1;
        int globalOutstandingLimit = super.getGlobalOutstandingLimit() / divisor;
        return globalOutstandingLimit;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,getState,String getState(),"[136, 139]","{'A596': [(136, 139)]}",{'A596': 1.0},A596,,"    @Override
    public String getState() {
        return ""follower"";
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,getLearner,Learner getLearner(),"[141, 144]","{'A596': [(141, 144)]}",{'A596': 1.0},A596,,"    @Override
    public Learner getLearner() {
        return getFollower();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,processObserverRequest,void processObserverRequest(Request),"[153, 155]","{'A583': [(154, 154)], 'A647': [(153, 153), (155, 155)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,,"    void processObserverRequest(Request request) {
        ((FollowerRequestProcessor) firstProcessor).processRequest(request, false);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,registerJMX,boolean registerJMX(LearnerHandlerBean),"[157, 165]","{'A647': [(157, 165)]}",{'A647': 1.0},A647,,"    boolean registerJMX(LearnerHandlerBean handlerBean) {
        try {
            MBeanRegistry.getInstance().register(handlerBean, jmxServerBean);
            return true;
        } catch (JMException e) {
            LOG.warn(""Could not register connection"", e);
        }
        return false;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,registerMetrics,void registerMetrics(),"[167, 175]","{'A583': [(171, 171)], 'A584': [(167, 170), (172, 175)]}","{'A583': 0.1111111111111111, 'A584': 0.8888888888888888}",A584,,"    @Override
    protected void registerMetrics() {
        super.registerMetrics();

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();

        rootContext.registerGauge(""synced_observers"", self::getSynced_observers_metric);

    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FollowerZooKeeperServer.java,FollowerZooKeeperServer,unregisterMetrics,void unregisterMetrics(),"[177, 184]","{'A583': [(181, 181)], 'A584': [(177, 180), (182, 184)]}","{'A583': 0.125, 'A584': 0.875}",A584,,"    @Override
    protected void unregisterMetrics() {
        super.unregisterMetrics();

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();
        rootContext.unregisterGauge(""synced_observers"");

    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java,QuorumPeerMain,main,void main(String[]),"[88, 120]","{'A596': [(88, 92), (94, 95), (98, 98), (100, 100), (113, 113), (117, 118), (120, 120)], 'A591': [(108, 110)], 'A592': [(96, 96), (101, 101), (106, 106), (111, 111), (115, 115)], 'A584': [(97, 97), (102, 102), (107, 107), (112, 112), (116, 116), (119, 119)], 'A600': [(103, 105)], 'A593': [(93, 93), (99, 99), (114, 114)]}","{'A596': 0.3939393939393939, 'A591': 0.09090909090909091, 'A592': 0.15151515151515152, 'A584': 0.18181818181818182, 'A600': 0.09090909090909091, 'A593': 0.09090909090909091}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java,"    public static void main(String[] args) {
        QuorumPeerMain main = new QuorumPeerMain();
        try {
            main.initializeAndRun(args);
        } catch (IllegalArgumentException e) {
            LOG.error(""Invalid arguments, exiting abnormally"", e);
            LOG.info(USAGE);
            System.err.println(USAGE);
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        } catch (ConfigException e) {
            LOG.error(""Invalid config, exiting abnormally"", e);
            System.err.println(""Invalid config, exiting abnormally"");
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        } catch (DatadirException e) {
            LOG.error(""Unable to access datadir, exiting abnormally"", e);
            System.err.println(""Unable to access datadir, exiting abnormally"");
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.UNABLE_TO_ACCESS_DATADIR.getValue());
        } catch (AdminServerException e) {
            LOG.error(""Unable to start AdminServer, exiting abnormally"", e);
            System.err.println(""Unable to start AdminServer, exiting abnormally"");
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.ERROR_STARTING_ADMIN_SERVER.getValue());
        } catch (Exception e) {
            LOG.error(""Unexpected exception, exiting abnormally"", e);
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
        LOG.info(""Exiting normally"");
        ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java,QuorumPeerMain,initializeAndRun,void initializeAndRun(String[]),"[122, 143]","{'A583': [(122, 122), (129, 132), (139, 139)], 'A596': [(123, 127), (138, 138), (140, 143)], 'A591': [(134, 134)], 'A590': [(136, 137)], 'A722': [(128, 128)], 'A588': [(133, 133)], 'A648': [(135, 135)]}","{'A583': 0.2727272727272727, 'A596': 0.45454545454545453, 'A591': 0.045454545454545456, 'A590': 0.09090909090909091, 'A722': 0.045454545454545456, 'A588': 0.045454545454545456, 'A648': 0.045454545454545456}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java,"    protected void initializeAndRun(String[] args) throws ConfigException, IOException, AdminServerException {
        QuorumPeerConfig config = new QuorumPeerConfig();
        if (args.length == 1) {
            config.parse(args[0]);
        }

        // Start and schedule the purge task
        DatadirCleanupManager purgeMgr = new DatadirCleanupManager(
            config.getDataDir(),
            config.getDataLogDir(),
            config.getSnapRetainCount(),
            config.getPurgeIntervalInMs());
        purgeMgr.start();

        if (args.length == 1 && config.isDistributed()) {
            runFromConfig(config);
        } else {
            LOG.warn(""Either no config or no quorum defined in config, running in standalone mode"");
            // there is only server in the quorum -- run as standalone
            ZooKeeperServerMain.main(args);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java,QuorumPeerMain,runFromConfig,void runFromConfig(QuorumPeerConfig),"[145, 243]","{'A583': [(145, 151), (154, 162), (164, 192), (194, 209), (213, 230), (232, 236), (241, 242)], 'A592': [(231, 231)], 'A641': [(163, 163)], 'A590': [(243, 243)], 'A653': [(152, 152), (210, 212)], 'A690': [(153, 153), (237, 240)], 'A669': [(193, 193)]}","{'A583': 0.8686868686868687, 'A592': 0.010101010101010102, 'A641': 0.010101010101010102, 'A590': 0.010101010101010102, 'A653': 0.04040404040404041, 'A690': 0.050505050505050504, 'A669': 0.010101010101010102}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java,"    public void runFromConfig(QuorumPeerConfig config) throws IOException, AdminServerException {
        try {
            ManagedUtil.registerLog4jMBeans();
        } catch (JMException e) {
            LOG.warn(""Unable to register log4j JMX control"", e);
        }

        LOG.info(""Starting quorum peer, myid="" + config.getServerId());
        final MetricsProvider metricsProvider;
        try {
            metricsProvider = MetricsProviderBootstrap.startMetricsProvider(
                config.getMetricsProviderClassName(),
                config.getMetricsProviderConfiguration());
        } catch (MetricsProviderLifeCycleException error) {
            throw new IOException(""Cannot boot MetricsProvider "" + config.getMetricsProviderClassName(), error);
        }
        try {
            ServerMetrics.metricsProviderInitialized(metricsProvider);
            ProviderRegistry.initialize();
            ServerCnxnFactory cnxnFactory = null;
            ServerCnxnFactory secureCnxnFactory = null;

            if (config.getClientPortAddress() != null) {
                cnxnFactory = ServerCnxnFactory.createFactory();
                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);
            }

            if (config.getSecureClientPortAddress() != null) {
                secureCnxnFactory = ServerCnxnFactory.createFactory();
                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);
            }

            quorumPeer = getQuorumPeer();
            quorumPeer.setTxnFactory(new FileTxnSnapLog(config.getDataLogDir(), config.getDataDir()));
            quorumPeer.enableLocalSessions(config.areLocalSessionsEnabled());
            quorumPeer.enableLocalSessionsUpgrading(config.isLocalSessionsUpgradingEnabled());
            //quorumPeer.setQuorumPeers(config.getAllMembers());
            quorumPeer.setElectionType(config.getElectionAlg());
            quorumPeer.setMyid(config.getServerId());
            quorumPeer.setTickTime(config.getTickTime());
            quorumPeer.setMinSessionTimeout(config.getMinSessionTimeout());
            quorumPeer.setMaxSessionTimeout(config.getMaxSessionTimeout());
            quorumPeer.setInitLimit(config.getInitLimit());
            quorumPeer.setSyncLimit(config.getSyncLimit());
            quorumPeer.setConnectToLearnerMasterLimit(config.getConnectToLearnerMasterLimit());
            quorumPeer.setObserverMasterPort(config.getObserverMasterPort());
            quorumPeer.setConfigFileName(config.getConfigFilename());
            quorumPeer.setClientPortListenBacklog(config.getClientPortListenBacklog());
            quorumPeer.setMaxClientCnxns(config.getMaxClientCnxns());
            quorumPeer.setZKDatabase(new ZKDatabase(quorumPeer.getTxnFactory()));
            quorumPeer.setQuorumVerifier(config.getQuorumVerifier(), false);
            if (config.getLastSeenQuorumVerifier() != null) {
                quorumPeer.setLastSeenQuorumVerifier(config.getLastSeenQuorumVerifier(), false);
            }
            quorumPeer.initConfigInZKDatabase();
            quorumPeer.setCnxnFactory(cnxnFactory);
            quorumPeer.setSecureCnxnFactory(secureCnxnFactory);
            quorumPeer.setSslQuorum(config.isSslQuorum());
            quorumPeer.setUsePortUnification(config.shouldUsePortUnification());
            quorumPeer.setLearnerType(config.getPeerType());
            quorumPeer.setSyncEnabled(config.getSyncEnabled());
            quorumPeer.setQuorumListenOnAllIPs(config.getQuorumListenOnAllIPs());
            if (config.sslQuorumReloadCertFiles) {
                quorumPeer.getX509Util().enableCertFileReloading();
            }
            quorumPeer.setMultiAddressEnabled(config.isMultiAddressEnabled());
            quorumPeer.setMultiAddressReachabilityCheckEnabled(config.isMultiAddressReachabilityCheckEnabled());
            quorumPeer.setMultiAddressReachabilityCheckTimeoutMs(config.getMultiAddressReachabilityCheckTimeoutMs());

            // sets quorum sasl authentication configurations
            quorumPeer.setQuorumSaslEnabled(config.quorumEnableSasl);
            if (quorumPeer.isQuorumSaslAuthEnabled()) {
                quorumPeer.setQuorumServerSaslRequired(config.quorumServerRequireSasl);
                quorumPeer.setQuorumLearnerSaslRequired(config.quorumLearnerRequireSasl);
                quorumPeer.setQuorumServicePrincipal(config.quorumServicePrincipal);
                quorumPeer.setQuorumServerLoginContext(config.quorumServerLoginContext);
                quorumPeer.setQuorumLearnerLoginContext(config.quorumLearnerLoginContext);
            }
            quorumPeer.setQuorumCnxnThreadsSize(config.quorumCnxnThreadsSize);
            quorumPeer.initialize();

            if (config.jvmPauseMonitorToRun) {
                quorumPeer.setJvmPauseMonitor(new JvmPauseMonitor(config));
            }

            quorumPeer.start();
            ZKAuditProvider.addZKStartStopAuditLog();
            quorumPeer.join();
        } catch (InterruptedException e) {
            // warn, but generally this is ok
            LOG.warn(""Quorum Peer interrupted"", e);
        } finally {
            try {
                metricsProvider.stop();
            } catch (Throwable error) {
                LOG.warn(""Error while stopping metrics"", error);
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java,QuorumPeerMain,getQuorumPeer,QuorumPeer getQuorumPeer(),"[246, 248]","{'A594': [(246, 246)], 'A592': [(247, 248)]}","{'A594': 0.3333333333333333, 'A592': 0.6666666666666666}",A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java,"    protected QuorumPeer getQuorumPeer() throws SaslException {
        return new QuorumPeer();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java,QuorumPeerMain,close,void close(),"[253, 261]","{'A584': [(253, 261)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java,"    public void close() {
        if (quorumPeer != null) {
            try {
                quorumPeer.shutdown();
            } finally {
                quorumPeer = null;
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/QuorumPeerMain.java,QuorumPeerMain,toString,String toString(),"[263, 267]","{'A584': [(263, 267)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/QuorumPeerMainTest.java,"    @Override
    public String toString() {
        QuorumPeer peer = quorumPeer;
        return peer == null ? """" : peer.toString();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessor.java,SendAckRequestProcessor,processRequest,void processRequest(Request),"[40, 52]","{'A583': [(41, 42)], 'A590': [(40, 40), (52, 52)], 'A596': [(46, 46), (48, 48)], 'A688': [(43, 43), (47, 47), (50, 51)], 'A675': [(44, 45)], 'A695': [(49, 49)]}","{'A583': 0.15384615384615385, 'A590': 0.15384615384615385, 'A596': 0.15384615384615385, 'A688': 0.3076923076923077, 'A675': 0.15384615384615385, 'A695': 0.07692307692307693}",A688,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessorTest.java,"    public void processRequest(Request si) {
        if (si.type != OpCode.sync) {
            QuorumPacket qp = new QuorumPacket(Leader.ACK, si.getHdr().getZxid(), null, null);
            try {
                si.logLatency(ServerMetrics.getMetrics().PROPOSAL_ACK_CREATION_LATENCY);

                learner.writePacket(qp, false);
            } catch (IOException e) {
                LOG.warn(""Closing connection to leader, exception during packet send"", e);
                learner.closeSocket();
            }
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessor.java,SendAckRequestProcessor,flush,void flush(),"[54, 61]","{'A583': [(57, 57)], 'A596': [(54, 56), (58, 58), (60, 61)], 'A695': [(59, 59)]}","{'A583': 0.125, 'A596': 0.75, 'A695': 0.125}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessorTest.java,"    public void flush() throws IOException {
        try {
            learner.writePacket(null, true);
        } catch (IOException e) {
            LOG.warn(""Closing connection to leader, exception during packet send"", e);
            learner.closeSocket();
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessor.java,SendAckRequestProcessor,shutdown,void shutdown(),"[63, 65]","{'A590': [(63, 65)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/quorum/SendAckRequestProcessorTest.java,"    public void shutdown() {
        // Nothing needed
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection.Messenger.WorkerReceiver,run,void run(),"[232, 474]","{'A583': [(239, 241), (330, 330), (343, 343), (346, 353), (391, 402), (408, 408), (416, 417), (420, 427), (437, 437), (445, 448), (450, 453), (457, 463), (470, 470)], 'A591': [(233, 235), (339, 339), (342, 342), (344, 344), (355, 358), (360, 362), (364, 373), (378, 379), (383, 383), (388, 390), (403, 407), (409, 415), (418, 418), (429, 436), (456, 456), (465, 469), (471, 472)], 'A688': [(232, 232), (236, 236), (474, 474)], 'A602': [(306, 306), (354, 354)], 'A590': [(245, 245), (248, 249), (251, 252), (255, 255), (259, 259), (264, 268), (288, 288), (338, 338), (345, 345), (363, 363), (374, 375), (380, 382), (385, 385), (419, 419), (455, 455)], 'A653': [(243, 244), (246, 247), (254, 254), (257, 257), (271, 284), (286, 287), (290, 292), (294, 305), (307, 309), (311, 324), (327, 328), (331, 332), (334, 337)], 'A593': [(237, 237), (242, 242), (250, 250), (253, 253), (256, 256), (260, 263), (269, 270), (285, 285), (289, 289), (293, 293), (329, 329), (340, 341), (376, 377), (384, 384), (386, 387), (454, 454)], 'A612': [(258, 258), (333, 333), (438, 444)], 'A728': [(473, 473)], 'A597': [(238, 238)], 'A702': [(310, 310), (359, 359), (449, 449)], 'A616': [(325, 326)], 'A703': [(428, 428), (464, 464)]}","{'A583': 0.21810699588477367, 'A591': 0.23868312757201646, 'A688': 0.012345679012345678, 'A602': 0.00823045267489712, 'A590': 0.09876543209876543, 'A653': 0.2551440329218107, 'A593': 0.09465020576131687, 'A612': 0.037037037037037035, 'A728': 0.00411522633744856, 'A597': 0.00411522633744856, 'A702': 0.012345679012345678, 'A616': 0.00823045267489712, 'A703': 0.00823045267489712}",A653,,"            public void run() {

                Message response;
                while (!stop) {
                    // Sleeps on receive
                    try {
                        response = manager.pollRecvQueue(3000, TimeUnit.MILLISECONDS);
                        if (response == null) {
                            continue;
                        }

                        final int capacity = response.buffer.capacity();

                        // The current protocol and two previous generations all send at least 28 bytes
                        if (capacity < 28) {
                            LOG.error(""Got a short response from server {}: {}"", response.sid, capacity);
                            continue;
                        }

                        // this is the backwardCompatibility mode in place before ZK-107
                        // It is for a version of the protocol in which we didn't send peer epoch
                        // With peer epoch and version the message became 40 bytes
                        boolean backCompatibility28 = (capacity == 28);

                        // this is the backwardCompatibility mode for no version information
                        boolean backCompatibility40 = (capacity == 40);

                        response.buffer.clear();

                        // Instantiate Notification and set its attributes
                        Notification n = new Notification();

                        int rstate = response.buffer.getInt();
                        long rleader = response.buffer.getLong();
                        long rzxid = response.buffer.getLong();
                        long relectionEpoch = response.buffer.getLong();
                        long rpeerepoch;

                        int version = 0x0;
                        QuorumVerifier rqv = null;

                        try {
                            if (!backCompatibility28) {
                                rpeerepoch = response.buffer.getLong();
                                if (!backCompatibility40) {
                                    /*
                                     * Version added in 3.4.6
                                     */

                                    version = response.buffer.getInt();
                                } else {
                                    LOG.info(""Backward compatibility mode (36 bits), server id: {}"", response.sid);
                                }
                            } else {
                                LOG.info(""Backward compatibility mode (28 bits), server id: {}"", response.sid);
                                rpeerepoch = ZxidUtils.getEpochFromZxid(rzxid);
                            }

                            // check if we have a version that includes config. If so extract config info from message.
                            if (version > 0x1) {
                                int configLength = response.buffer.getInt();

                                // we want to avoid errors caused by the allocation of a byte array with negative length
                                // (causing NegativeArraySizeException) or huge length (causing e.g. OutOfMemoryError)
                                if (configLength < 0 || configLength > capacity) {
                                    throw new IOException(String.format(""Invalid configLength in notification message! sid=%d, capacity=%d, version=%d, configLength=%d"",
                                                                        response.sid, capacity, version, configLength));
                                }

                                byte[] b = new byte[configLength];
                                response.buffer.get(b);

                                synchronized (self) {
                                    try {
                                        rqv = self.configFromString(new String(b, UTF_8));
                                        QuorumVerifier curQV = self.getQuorumVerifier();
                                        if (rqv.getVersion() > curQV.getVersion()) {
                                            LOG.info(""{} Received version: {} my version: {}"",
                                                     self.getMyId(),
                                                     Long.toHexString(rqv.getVersion()),
                                                     Long.toHexString(self.getQuorumVerifier().getVersion()));
                                            if (self.getPeerState() == ServerState.LOOKING) {
                                                LOG.debug(""Invoking processReconfig(), state: {}"", self.getServerState());
                                                self.processReconfig(rqv, null, null, false);
                                                if (!rqv.equals(curQV)) {
                                                    LOG.info(""restarting leader election"");
                                                    self.shuttingDownLE = true;
                                                    self.getElectionAlg().shutdown();

                                                    break;
                                                }
                                            } else {
                                                LOG.debug(""Skip processReconfig(), state: {}"", self.getServerState());
                                            }
                                        }
                                    } catch (IOException | ConfigException e) {
                                        LOG.error(""Something went wrong while processing config received from {}"", response.sid);
                                    }
                                }
                            } else {
                                LOG.info(""Backward compatibility mode (before reconfig), server id: {}"", response.sid);
                            }
                        } catch (BufferUnderflowException | IOException e) {
                            LOG.warn(""Skipping the processing of a partial / malformed response message sent by sid={} (message length: {})"",
                                     response.sid, capacity, e);
                            continue;
                        }
                        /*
                         * If it is from a non-voting server (such as an observer or
                         * a non-voting follower), respond right away.
                         */
                        if (!validVoter(response.sid)) {
                            Vote current = self.getCurrentVote();
                            QuorumVerifier qv = self.getQuorumVerifier();
                            ToSend notmsg = new ToSend(
                                ToSend.mType.notification,
                                current.getId(),
                                current.getZxid(),
                                logicalclock.get(),
                                self.getPeerState(),
                                response.sid,
                                current.getPeerEpoch(),
                                qv.toString().getBytes(UTF_8));

                            sendqueue.offer(notmsg);
                        } else {
                            // Receive new message
                            LOG.debug(""Receive new notification message. My id = {}"", self.getMyId());

                            // State of peer that sent this message
                            QuorumPeer.ServerState ackstate = QuorumPeer.ServerState.LOOKING;
                            switch (rstate) {
                            case 0:
                                ackstate = QuorumPeer.ServerState.LOOKING;
                                break;
                            case 1:
                                ackstate = QuorumPeer.ServerState.FOLLOWING;
                                break;
                            case 2:
                                ackstate = QuorumPeer.ServerState.LEADING;
                                break;
                            case 3:
                                ackstate = QuorumPeer.ServerState.OBSERVING;
                                break;
                            default:
                                continue;
                            }

                            n.leader = rleader;
                            n.zxid = rzxid;
                            n.electionEpoch = relectionEpoch;
                            n.state = ackstate;
                            n.sid = response.sid;
                            n.peerEpoch = rpeerepoch;
                            n.version = version;
                            n.qv = rqv;
                            /*
                             * Print notification info
                             */
                            LOG.info(
                                ""Notification: my state:{}; n.sid:{}, n.state:{}, n.leader:{}, n.round:0x{}, ""
                                    + ""n.peerEpoch:0x{}, n.zxid:0x{}, message format version:0x{}, n.config version:0x{}"",
                                self.getPeerState(),
                                n.sid,
                                n.state,
                                n.leader,
                                Long.toHexString(n.electionEpoch),
                                Long.toHexString(n.peerEpoch),
                                Long.toHexString(n.zxid),
                                Long.toHexString(n.version),
                                (n.qv != null ? (Long.toHexString(n.qv.getVersion())) : ""0""));

                            /*
                             * If this server is looking, then send proposed leader
                             */

                            if (self.getPeerState() == QuorumPeer.ServerState.LOOKING) {
                                recvqueue.offer(n);

                                /*
                                 * Send a notification back if the peer that sent this
                                 * message is also looking and its logical clock is
                                 * lagging behind.
                                 */
                                if ((ackstate == QuorumPeer.ServerState.LOOKING)
                                    && (n.electionEpoch < logicalclock.get())) {
                                    Vote v = getVote();
                                    QuorumVerifier qv = self.getQuorumVerifier();
                                    ToSend notmsg = new ToSend(
                                        ToSend.mType.notification,
                                        v.getId(),
                                        v.getZxid(),
                                        logicalclock.get(),
                                        self.getPeerState(),
                                        response.sid,
                                        v.getPeerEpoch(),
                                        qv.toString().getBytes(UTF_8));
                                    sendqueue.offer(notmsg);
                                }
                            } else {
                                /*
                                 * If this server is not looking, but the one that sent the ack
                                 * is looking, then send back what it believes to be the leader.
                                 */
                                Vote current = self.getCurrentVote();
                                if (ackstate == QuorumPeer.ServerState.LOOKING) {
                                    if (self.leader != null) {
                                        if (leadingVoteSet != null) {
                                            self.leader.setLeadingVoteSet(leadingVoteSet);
                                            leadingVoteSet = null;
                                        }
                                        self.leader.reportLookingSid(response.sid);
                                    }


                                    LOG.debug(
                                        ""Sending new notification. My id ={} recipient={} zxid=0x{} leader={} config version = {}"",
                                        self.getMyId(),
                                        response.sid,
                                        Long.toHexString(current.getZxid()),
                                        current.getId(),
                                        Long.toHexString(self.getQuorumVerifier().getVersion()));

                                    QuorumVerifier qv = self.getQuorumVerifier();
                                    ToSend notmsg = new ToSend(
                                        ToSend.mType.notification,
                                        current.getId(),
                                        current.getZxid(),
                                        current.getElectionEpoch(),
                                        self.getPeerState(),
                                        response.sid,
                                        current.getPeerEpoch(),
                                        qv.toString().getBytes(UTF_8));
                                    sendqueue.offer(notmsg);
                                }
                            }
                        }
                    } catch (InterruptedException e) {
                        LOG.warn(""Interrupted Exception while waiting for new message"", e);
                    }
                }
                LOG.info(""{} is down"", getName());
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection.Messenger.WorkerSender,run,void run(),"[494, 508]","{'A583': [(498, 500)], 'A591': [(501, 501)], 'A688': [(494, 494), (496, 496), (502, 506), (508, 508)], 'A596': [(495, 495), (497, 497)], 'A728': [(507, 507)]}","{'A583': 0.2, 'A591': 0.06666666666666667, 'A688': 0.5333333333333333, 'A596': 0.13333333333333333, 'A728': 0.06666666666666667}",A688,,"            public void run() {
                while (!stop) {
                    try {
                        ToSend m = sendqueue.poll(3000, TimeUnit.MILLISECONDS);
                        if (m == null) {
                            continue;
                        }

                        process(m);
                    } catch (InterruptedException e) {
                        break;
                    }
                }
                LOG.info(""{} is down"", getName());
            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection.Messenger.WorkerSender,process,void process(ToSend),"[515, 520]","{'A583': [(516, 516)], 'A591': [(517, 517), (519, 519)], 'A688': [(520, 520)], 'A590': [(518, 518)], 'A593': [(515, 515)]}","{'A583': 0.16666666666666666, 'A591': 0.3333333333333333, 'A688': 0.16666666666666666, 'A590': 0.16666666666666666, 'A593': 0.16666666666666666}",A591,,"            void process(ToSend m) {
                ByteBuffer requestBuffer = buildMsg(m.state.ordinal(), m.leader, m.zxid, m.electionEpoch, m.peerEpoch, m.configData);

                manager.toSend(m.sid, requestBuffer);

            }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection.Messenger,start,void start(),"[544, 547]","{'A583': [(544, 544)], 'A688': [(547, 547)], 'A728': [(545, 546)]}","{'A583': 0.25, 'A688': 0.25, 'A728': 0.5}",A728,,"        void start() {
            this.ws.start();
            this.wr.start();
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection.Messenger,halt,void halt(),"[552, 555]","{'A583': [(552, 552)], 'A596': [(553, 555)]}","{'A583': 0.25, 'A596': 0.75}",A596,,"        void halt() {
            this.ws.stop = true;
            this.wr.stop = true;
        }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getLogicalClock,long getLogicalClock(),"[569, 571]","{'A583': [(569, 569)], 'A591': [(570, 570)], 'A590': [(571, 571)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A590': 0.3333333333333333}",A583,,"    public long getLogicalClock() {
        return logicalclock.get();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,buildMsg,"ByteBuffer buildMsg(int,long,long,long,long)","[573, 590]","{'A583': [(573, 574)], 'A593': [(575, 590)]}","{'A583': 0.1111111111111111, 'A593': 0.8888888888888888}",A593,,"    static ByteBuffer buildMsg(int state, long leader, long zxid, long electionEpoch, long epoch) {
        byte[] requestBytes = new byte[40];
        ByteBuffer requestBuffer = ByteBuffer.wrap(requestBytes);

        /*
         * Building notification packet to send, this is called directly only in tests
         */

        requestBuffer.clear();
        requestBuffer.putInt(state);
        requestBuffer.putLong(leader);
        requestBuffer.putLong(zxid);
        requestBuffer.putLong(electionEpoch);
        requestBuffer.putLong(epoch);
        requestBuffer.putInt(0x1);

        return requestBuffer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,buildMsg,"ByteBuffer buildMsg(int,long,long,long,long,byte[])","[592, 611]","{'A583': [(592, 593)], 'A593': [(594, 611)]}","{'A583': 0.1, 'A593': 0.9}",A593,,"    static ByteBuffer buildMsg(int state, long leader, long zxid, long electionEpoch, long epoch, byte[] configData) {
        byte[] requestBytes = new byte[44 + configData.length];
        ByteBuffer requestBuffer = ByteBuffer.wrap(requestBytes);

        /*
         * Building notification packet to send
         */

        requestBuffer.clear();
        requestBuffer.putInt(state);
        requestBuffer.putLong(leader);
        requestBuffer.putLong(zxid);
        requestBuffer.putLong(electionEpoch);
        requestBuffer.putLong(epoch);
        requestBuffer.putInt(Notification.CURRENTVERSION);
        requestBuffer.putInt(configData.length);
        requestBuffer.put(configData);

        return requestBuffer;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,starter,"void starter(QuorumPeer,QuorumCnxManager)","[638, 646]","{'A688': [(638, 642), (646, 646)], 'A596': [(645, 645)], 'A605': [(643, 644)]}","{'A688': 0.6666666666666666, 'A596': 0.1111111111111111, 'A605': 0.2222222222222222}",A688,,"    private void starter(QuorumPeer self, QuorumCnxManager manager) {
        this.self = self;
        proposedLeader = -1;
        proposedZxid = -1;

        sendqueue = new LinkedBlockingQueue<>();
        recvqueue = new LinkedBlockingQueue<>();
        this.messenger = new Messenger(manager);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,start,void start(),"[651, 653]","{'A593': [(651, 653)]}",{'A593': 1.0},A593,,"    public void start() {
        this.messenger.start();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,leaveInstance,void leaveInstance(Vote),"[655, 663]","{'A583': [(656, 659), (661, 661)], 'A688': [(662, 663)], 'A597': [(655, 655)], 'A702': [(660, 660)]}","{'A583': 0.5555555555555556, 'A688': 0.2222222222222222, 'A597': 0.1111111111111111, 'A702': 0.1111111111111111}",A583,,"    private void leaveInstance(Vote v) {
        LOG.debug(
            ""About to leave FLE instance: leader={}, zxid=0x{}, my id={}, my state={}"",
            v.getId(),
            Long.toHexString(v.getZxid()),
            self.getMyId(),
            self.getPeerState());
        recvqueue.clear();
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getCnxManager,QuorumCnxManager getCnxManager(),"[665, 667]","{'A583': [(665, 665)], 'A591': [(666, 666)], 'A596': [(667, 667)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,,"    public QuorumCnxManager getCnxManager() {
        return manager;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,shutdown,void shutdown(),"[670, 680]","{'A583': [(670, 670)], 'A590': [(676, 676), (680, 680)], 'A596': [(671, 671), (675, 675), (677, 679)], 'A612': [(674, 674)], 'A597': [(672, 673)]}","{'A583': 0.09090909090909091, 'A590': 0.18181818181818182, 'A596': 0.45454545454545453, 'A612': 0.09090909090909091, 'A597': 0.18181818181818182}",A596,,"    public void shutdown() {
        stop = true;
        proposedLeader = -1;
        proposedZxid = -1;
        leadingVoteSet = null;
        LOG.debug(""Shutting down connection manager"");
        manager.halt();
        LOG.debug(""Shutting down messenger"");
        messenger.halt();
        LOG.debug(""FLE is down"");
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,sendNotifications,void sendNotifications(),"[685, 710]","{'A583': [(688, 695), (697, 698), (701, 702), (704, 705), (707, 707)], 'A688': [(685, 685), (708, 710)], 'A602': [(696, 696)], 'A590': [(687, 687)], 'A597': [(686, 686)], 'A726': [(699, 700), (703, 703), (706, 706)]}","{'A583': 0.5769230769230769, 'A688': 0.15384615384615385, 'A602': 0.038461538461538464, 'A590': 0.038461538461538464, 'A597': 0.038461538461538464, 'A726': 0.15384615384615385}",A583,,"    private void sendNotifications() {
        for (long sid : self.getCurrentAndNextConfigVoters()) {
            QuorumVerifier qv = self.getQuorumVerifier();
            ToSend notmsg = new ToSend(
                ToSend.mType.notification,
                proposedLeader,
                proposedZxid,
                logicalclock.get(),
                QuorumPeer.ServerState.LOOKING,
                sid,
                proposedEpoch,
                qv.toString().getBytes(UTF_8));

            LOG.debug(
                ""Sending Notification: {} (n.leader), 0x{} (n.zxid), 0x{} (n.peerEpoch), 0x{} (n.round), {} (recipient),""
                    + "" {} (myid) "",
                proposedLeader,
                Long.toHexString(proposedZxid),
                Long.toHexString(proposedEpoch),
                Long.toHexString(logicalclock.get()),
                sid,
                self.getMyId());

            sendqueue.offer(notmsg);
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,totalOrderPredicate,"boolean totalOrderPredicate(long,long,long,long,long,long)","[717, 743]","{'A583': [(718, 718), (720, 722), (726, 726), (738, 742)], 'A688': [(743, 743)], 'A593': [(729, 729), (737, 737)], 'A596': [(727, 728)], 'A726': [(719, 719), (723, 725)], 'A639': [(717, 717), (730, 736)]}","{'A583': 0.37037037037037035, 'A688': 0.037037037037037035, 'A593': 0.07407407407407407, 'A596': 0.07407407407407407, 'A726': 0.14814814814814814, 'A639': 0.2962962962962963}",A583,,"    protected boolean totalOrderPredicate(long newId, long newZxid, long newEpoch, long curId, long curZxid, long curEpoch) {
        LOG.debug(
            ""id: {}, proposed id: {}, zxid: 0x{}, proposed zxid: 0x{}, epoch: 0x{}, proposed epoch: 0x{}"",
            newId,
            curId,
            Long.toHexString(newZxid),
            Long.toHexString(curZxid),
            Long.toHexString(newEpoch),
            Long.toHexString(curEpoch));
        if (self.getQuorumVerifier().getWeight(newId) == 0) {
            return false;
        }

        /*
         * We return true if one of the following three cases hold:
         * 1- New epoch is higher
         * 2- New epoch is the same as current epoch, but new zxid is higher
         * 3- New epoch is the same as current epoch, new zxid is the same
         *  as current zxid, but server id is higher.
         */

        return ((newEpoch > curEpoch)
                || ((newEpoch == curEpoch)
                    && ((newZxid > curZxid)
                        || ((newZxid == curZxid)
                            && (newId > curId)))));
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getVoteTracker,"SyncedLearnerTracker getVoteTracker(Map<Long, Vote>,Vote)","[755, 774]","{'A583': [(759, 759)], 'A591': [(762, 762), (772, 772)], 'A688': [(763, 763), (766, 766), (771, 771), (774, 774)], 'A596': [(770, 770)], 'A612': [(755, 755), (773, 773)], 'A597': [(756, 758), (760, 761), (764, 765), (767, 769)]}","{'A583': 0.05, 'A591': 0.1, 'A688': 0.2, 'A596': 0.05, 'A612': 0.1, 'A597': 0.5}",A597,,"    protected SyncedLearnerTracker getVoteTracker(Map<Long, Vote> votes, Vote vote) {
        SyncedLearnerTracker voteSet = new SyncedLearnerTracker();
        voteSet.addQuorumVerifier(self.getQuorumVerifier());
        if (self.getLastSeenQuorumVerifier() != null
            && self.getLastSeenQuorumVerifier().getVersion() > self.getQuorumVerifier().getVersion()) {
            voteSet.addQuorumVerifier(self.getLastSeenQuorumVerifier());
        }

        /*
         * First make the views consistent. Sometimes peers will have different
         * zxids for a server depending on timing.
         */
        for (Map.Entry<Long, Vote> entry : votes.entrySet()) {
            if (vote.equals(entry.getValue())) {
                voteSet.addAck(entry.getKey());
            }
        }

        return voteSet;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,checkLeader,"boolean checkLeader(Map<Long, Vote>,long,long)","[787, 809]","{'A583': [(787, 787), (799, 804)], 'A591': [(788, 789), (794, 795), (797, 797), (807, 809)], 'A593': [(806, 806)], 'A596': [(790, 793), (796, 796)], 'A702': [(798, 798)], 'A600': [(805, 805)]}","{'A583': 0.30434782608695654, 'A591': 0.34782608695652173, 'A593': 0.043478260869565216, 'A596': 0.21739130434782608, 'A702': 0.043478260869565216, 'A600': 0.043478260869565216}",A591,,"    protected boolean checkLeader(Map<Long, Vote> votes, long leader, long electionEpoch) {

        boolean predicate = true;

        /*
         * If everyone else thinks I'm the leader, I must be the leader.
         * The other two checks are just for the case in which I'm not the
         * leader. If I'm not the leader and I haven't received a message
         * from leader stating that it is leading, then predicate is false.
         */

        if (leader != self.getMyId()) {
            if (votes.get(leader) == null) {
                predicate = false;
            } else if (votes.get(leader).getState() != ServerState.LEADING) {
                predicate = false;
            }
        } else if (logicalclock.get() != electionEpoch) {
            predicate = false;
        }

        return predicate;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,updateProposal,"void updateProposal(long,long,long)","[811, 822]","{'A583': [(811, 818)], 'A590': [(819, 822)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    synchronized void updateProposal(long leader, long zxid, long epoch) {
        LOG.debug(
            ""Updating proposal: {} (newleader), 0x{} (newzxid), {} (oldleader), 0x{} (oldzxid)"",
            leader,
            Long.toHexString(zxid),
            proposedLeader,
            Long.toHexString(proposedZxid));

        proposedLeader = leader;
        proposedZxid = zxid;
        proposedEpoch = epoch;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getVote,Vote getVote(),"[824, 826]","{'A583': [(824, 824)], 'A590': [(825, 826)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public synchronized Vote getVote() {
        return new Vote(proposedLeader, proposedZxid, proposedEpoch);
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,learningState,ServerState learningState(),"[835, 843]","{'A583': [(835, 836), (839, 839)], 'A590': [(838, 838), (841, 843)], 'A702': [(837, 837), (840, 840)]}","{'A583': 0.3333333333333333, 'A590': 0.4444444444444444, 'A702': 0.2222222222222222}",A590,,"    private ServerState learningState() {
        if (self.getLearnerType() == LearnerType.PARTICIPANT) {
            LOG.debug(""I am a participant: {}"", self.getMyId());
            return ServerState.FOLLOWING;
        } else {
            LOG.debug(""I am an observer: {}"", self.getMyId());
            return ServerState.OBSERVING;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getInitId,long getInitId(),"[850, 856]","{'A583': [(850, 850), (853, 855)], 'A590': [(856, 856)], 'A702': [(851, 852)]}","{'A583': 0.5714285714285714, 'A590': 0.14285714285714285, 'A702': 0.2857142857142857}",A583,,"    private long getInitId() {
        if (self.getQuorumVerifier().getVotingMembers().containsKey(self.getMyId())) {
            return self.getMyId();
        } else {
            return Long.MIN_VALUE;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getInitLastLoggedZxid,long getInitLastLoggedZxid(),"[863, 869]","{'A583': [(863, 864), (866, 868)], 'A590': [(865, 865), (869, 869)]}","{'A583': 0.7142857142857143, 'A590': 0.2857142857142857}",A583,,"    private long getInitLastLoggedZxid() {
        if (self.getLearnerType() == LearnerType.PARTICIPANT) {
            return self.getLastLoggedZxid();
        } else {
            return Long.MIN_VALUE;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,getPeerEpoch,long getPeerEpoch(),"[876, 888]","{'A583': [(876, 887)], 'A590': [(888, 888)]}","{'A583': 0.9230769230769231, 'A590': 0.07692307692307693}",A583,,"    private long getPeerEpoch() {
        if (self.getLearnerType() == LearnerType.PARTICIPANT) {
            try {
                return self.getCurrentEpoch();
            } catch (IOException e) {
                RuntimeException re = new RuntimeException(e.getMessage());
                re.setStackTrace(e.getStackTrace());
                throw re;
            }
        } else {
            return Long.MIN_VALUE;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,setPeerState,"void setPeerState(long,SyncedLearnerTracker)","[894, 900]","{'A612': [(894, 894), (896, 900)], 'A702': [(895, 895)]}","{'A612': 0.8571428571428571, 'A702': 0.14285714285714285}",A612,,"    private void setPeerState(long proposedLeader, SyncedLearnerTracker voteSet) {
        ServerState ss = (proposedLeader == self.getMyId()) ? ServerState.LEADING : learningState();
        self.setPeerState(ss);
        if (ss == ServerState.LEADING) {
            leadingVoteSet = voteSet;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,lookForLeader,Vote lookForLeader(),"[907, 1138]","{'A583': [(910, 910), (936, 936), (941, 942), (944, 944), (953, 953), (958, 958), (964, 965), (993, 993), (1012, 1012), (1015, 1015), (1019, 1022), (1024, 1024), (1029, 1034), (1039, 1039), (1044, 1045), (1057, 1057), (1129, 1130), (1136, 1136)], 'A591': [(924, 924), (933, 933), (935, 935), (937, 937), (940, 940), (946, 946), (952, 952), (959, 959), (966, 973), (998, 998), (1009, 1010), (1018, 1018), (1028, 1028), (1035, 1035), (1038, 1038), (1050, 1050), (1116, 1116)], 'A688': [(907, 907), (949, 949), (951, 951), (1124, 1125), (1137, 1138)], 'A590': [(914, 914), (1013, 1013), (1025, 1025), (1037, 1037), (1063, 1063), (1065, 1065)], 'A596': [(908, 909), (911, 913), (917, 917), (939, 939), (945, 945), (950, 950), (954, 957), (960, 963), (999, 999), (1008, 1008), (1011, 1011), (1017, 1017), (1023, 1023), (1026, 1027), (1048, 1048), (1060, 1062), (1093, 1093), (1101, 1101), (1112, 1112), (1115, 1115), (1126, 1128), (1131, 1135)], 'A651': [(947, 947), (975, 982), (985, 990), (992, 992), (1066, 1070), (1072, 1091), (1094, 1100), (1102, 1102), (1104, 1111)], 'A647': [(934, 934), (996, 996), (1000, 1004), (1006, 1007), (1118, 1123)], 'A642': [(991, 991)], 'A612': [(948, 948), (1036, 1036), (1040, 1041), (1056, 1056)], 'A597': [(994, 995), (997, 997), (1014, 1014), (1016, 1016), (1042, 1043), (1046, 1047), (1049, 1049), (1051, 1055), (1058, 1059), (1092, 1092), (1103, 1103), (1113, 1113), (1117, 1117)], 'A702': [(943, 943)], 'A729': [(1114, 1114)], 'A605': [(923, 923), (932, 932)], 'A600': [(938, 938)], 'A730': [(915, 916), (918, 922), (925, 931)], 'A731': [(974, 974), (983, 984)], 'A620': [(1005, 1005), (1064, 1064)], 'A589': [(1071, 1071)]}","{'A583': 0.12931034482758622, 'A591': 0.10775862068965517, 'A688': 0.03017241379310345, 'A590': 0.02586206896551724, 'A596': 0.1724137931034483, 'A651': 0.24568965517241378, 'A647': 0.06465517241379311, 'A642': 0.004310344827586207, 'A612': 0.021551724137931036, 'A597': 0.09051724137931035, 'A702': 0.004310344827586207, 'A729': 0.004310344827586207, 'A605': 0.008620689655172414, 'A600': 0.004310344827586207, 'A730': 0.0603448275862069, 'A731': 0.01293103448275862, 'A620': 0.008620689655172414, 'A589': 0.004310344827586207}",A651,,"    public Vote lookForLeader() throws InterruptedException {
        try {
            self.jmxLeaderElectionBean = new LeaderElectionBean();
            MBeanRegistry.getInstance().register(self.jmxLeaderElectionBean, self.jmxLocalPeerBean);
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            self.jmxLeaderElectionBean = null;
        }

        self.start_fle = Time.currentElapsedTime();
        try {
            /*
             * The votes from the current leader election are stored in recvset. In other words, a vote v is in recvset
             * if v.electionEpoch == logicalclock. The current participant uses recvset to deduce on whether a majority
             * of participants has voted for it.
             */
            Map<Long, Vote> recvset = new HashMap<>();

            /*
             * The votes from previous leader elections, as well as the votes from the current leader election are
             * stored in outofelection. Note that notifications in a LOOKING state are not stored in outofelection.
             * Only FOLLOWING or LEADING notifications are stored in outofelection. The current participant could use
             * outofelection to learn which participant is the leader if it arrives late (i.e., higher logicalclock than
             * the electionEpoch of the received notifications) in a leader election.
             */
            Map<Long, Vote> outofelection = new HashMap<>();

            int notTimeout = minNotificationInterval;

            synchronized (this) {
                logicalclock.incrementAndGet();
                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());
            }

            LOG.info(
                ""New election. My id = {}, proposed zxid=0x{}"",
                self.getMyId(),
                Long.toHexString(proposedZxid));
            sendNotifications();

            SyncedLearnerTracker voteSet = null;

            /*
             * Loop in which we exchange notifications until we find a leader
             */

            while ((self.getPeerState() == ServerState.LOOKING) && (!stop)) {
                /*
                 * Remove next notification from queue, times out after 2 times
                 * the termination time
                 */
                Notification n = recvqueue.poll(notTimeout, TimeUnit.MILLISECONDS);

                /*
                 * Sends more notifications if haven't received enough.
                 * Otherwise processes new notification.
                 */
                if (n == null) {
                    if (manager.haveDelivered()) {
                        sendNotifications();
                    } else {
                        manager.connectAll();
                    }

                    /*
                     * Exponential backoff
                     */
                    notTimeout = Math.min(notTimeout << 1, maxNotificationInterval);

                    /*
                     * When a leader failure happens on a master, the backup will be supposed to receive the honour from
                     * Oracle and become a leader, but the honour is likely to be delay. We do a re-check once timeout happens
                     *
                     * The leader election algorithm does not provide the ability of electing a leader from a single instance
                     * which is in a configuration of 2 instances.
                     * */
                    if (self.getQuorumVerifier() instanceof QuorumOracleMaj
                            && self.getQuorumVerifier().revalidateVoteset(voteSet, notTimeout != minNotificationInterval)) {
                        setPeerState(proposedLeader, voteSet);
                        Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);
                        leaveInstance(endVote);
                        return endVote;
                    }

                    LOG.info(""Notification time out: {} ms"", notTimeout);

                } else if (validVoter(n.sid) && validVoter(n.leader)) {
                    /*
                     * Only proceed if the vote comes from a replica in the current or next
                     * voting view for a replica in the current or next voting view.
                     */
                    switch (n.state) {
                    case LOOKING:
                        if (getInitLastLoggedZxid() == -1) {
                            LOG.debug(""Ignoring notification as our zxid is -1"");
                            break;
                        }
                        if (n.zxid == -1) {
                            LOG.debug(""Ignoring notification from member with -1 zxid {}"", n.sid);
                            break;
                        }
                        // If notification > current, replace and send messages out
                        if (n.electionEpoch > logicalclock.get()) {
                            logicalclock.set(n.electionEpoch);
                            recvset.clear();
                            if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, getInitId(), getInitLastLoggedZxid(), getPeerEpoch())) {
                                updateProposal(n.leader, n.zxid, n.peerEpoch);
                            } else {
                                updateProposal(getInitId(), getInitLastLoggedZxid(), getPeerEpoch());
                            }
                            sendNotifications();
                        } else if (n.electionEpoch < logicalclock.get()) {
                                LOG.debug(
                                    ""Notification election epoch is smaller than logicalclock. n.electionEpoch = 0x{}, logicalclock=0x{}"",
                                    Long.toHexString(n.electionEpoch),
                                    Long.toHexString(logicalclock.get()));
                            break;
                        } else if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) {
                            updateProposal(n.leader, n.zxid, n.peerEpoch);
                            sendNotifications();
                        }

                        LOG.debug(
                            ""Adding vote: from={}, proposed leader={}, proposed zxid=0x{}, proposed election epoch=0x{}"",
                            n.sid,
                            n.leader,
                            Long.toHexString(n.zxid),
                            Long.toHexString(n.electionEpoch));

                        // don't care about the version if it's in LOOKING state
                        recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch));

                        voteSet = getVoteTracker(recvset, new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch));

                        if (voteSet.hasAllQuorums()) {

                            // Verify if there is any change in the proposed leader
                            while ((n = recvqueue.poll(finalizeWait, TimeUnit.MILLISECONDS)) != null) {
                                if (totalOrderPredicate(n.leader, n.zxid, n.peerEpoch, proposedLeader, proposedZxid, proposedEpoch)) {
                                    recvqueue.put(n);
                                    break;
                                }
                            }

                            /*
                             * This predicate is true once we don't read any new
                             * relevant message from the reception queue
                             */
                            if (n == null) {
                                setPeerState(proposedLeader, voteSet);
                                Vote endVote = new Vote(proposedLeader, proposedZxid, logicalclock.get(), proposedEpoch);
                                leaveInstance(endVote);
                                return endVote;
                            }
                        }
                        break;
                    case OBSERVING:
                        LOG.debug(""Notification from observer: {}"", n.sid);
                        break;

                        /*
                        * In ZOOKEEPER-3922, we separate the behaviors of FOLLOWING and LEADING.
                        * To avoid the duplication of codes, we create a method called followingBehavior which was used to
                        * shared by FOLLOWING and LEADING. This method returns a Vote. When the returned Vote is null, it follows
                        * the original idea to break switch statement; otherwise, a valid returned Vote indicates, a leader
                        * is generated.
                        *
                        * The reason why we need to separate these behaviors is to make the algorithm runnable for 2-node
                        * setting. An extra condition for generating leader is needed. Due to the majority rule, only when
                        * there is a majority in the voteset, a leader will be generated. However, in a configuration of 2 nodes,
                        * the number to achieve the majority remains 2, which means a recovered node cannot generate a leader which is
                        * the existed leader. Therefore, we need the Oracle to kick in this situation. In a two-node configuration, the Oracle
                        * only grants the permission to maintain the progress to one node. The oracle either grants the permission to the
                        * remained node and makes it a new leader when there is a faulty machine, which is the case to maintain the progress.
                        * Otherwise, the oracle does not grant the permission to the remained node, which further causes a service down.
                        *
                        * In the former case, when a failed server recovers and participate in the leader election, it would not locate a
                        * new leader because there does not exist a majority in the voteset. It fails on the containAllQuorum() infinitely due to
                        * two facts. First one is the fact that it does do not have a majority in the voteset. The other fact is the fact that
                        * the oracle would not give the permission since the oracle already gave the permission to the existed leader, the healthy machine.
                        * Logically, when the oracle replies with negative, it implies the existed leader which is LEADING notification comes from is a valid leader.
                        * To threat this negative replies as a permission to generate the leader is the purpose to separate these two behaviors.
                        *
                        *
                        * */
                    case FOLLOWING:
                        /*
                        * To avoid duplicate codes
                        * */
                        Vote resultFN = receivedFollowingNotification(recvset, outofelection, voteSet, n);
                        if (resultFN == null) {
                            break;
                        } else {
                            return resultFN;
                        }
                    case LEADING:
                        /*
                        * In leadingBehavior(), it performs followingBehvior() first. When followingBehavior() returns
                        * a null pointer, ask Oracle whether to follow this leader.
                        * */
                        Vote resultLN = receivedLeadingNotification(recvset, outofelection, voteSet, n);
                        if (resultLN == null) {
                            break;
                        } else {
                            return resultLN;
                        }
                    default:
                        LOG.warn(""Notification state unrecognized: {} (n.state), {}(n.sid)"", n.state, n.sid);
                        break;
                    }
                } else {
                    if (!validVoter(n.leader)) {
                        LOG.warn(""Ignoring notification for non-cluster member sid {} from sid {}"", n.leader, n.sid);
                    }
                    if (!validVoter(n.sid)) {
                        LOG.warn(""Ignoring notification for sid {} from non-quorum member sid {}"", n.leader, n.sid);
                    }
                }
            }
            return null;
        } finally {
            try {
                if (self.jmxLeaderElectionBean != null) {
                    MBeanRegistry.getInstance().unregister(self.jmxLeaderElectionBean);
                }
            } catch (Exception e) {
                LOG.warn(""Failed to unregister with JMX"", e);
            }
            self.jmxLeaderElectionBean = null;
            LOG.debug(""Number of connection processing threads: {}"", manager.getConnectionThreadCount());
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,receivedFollowingNotification,"Vote receivedFollowingNotification(Map<Long, Vote>,Map<Long, Vote>,SyncedLearnerTracker,Notification)","[1140, 1177]","{'A651': [(1140, 1177)]}",{'A651': 1.0},A651,,"    private Vote receivedFollowingNotification(Map<Long, Vote> recvset, Map<Long, Vote> outofelection, SyncedLearnerTracker voteSet, Notification n) {
        /*
         * Consider all notifications from the same epoch
         * together.
         */
        if (n.electionEpoch == logicalclock.get()) {
            recvset.put(n.sid, new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));
            voteSet = getVoteTracker(recvset, new Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));
            if (voteSet.hasAllQuorums() && checkLeader(recvset, n.leader, n.electionEpoch)) {
                setPeerState(n.leader, voteSet);
                Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);
                leaveInstance(endVote);
                return endVote;
            }
        }

        /*
         * Before joining an established ensemble, verify that
         * a majority are following the same leader.
         *
         * Note that the outofelection map also stores votes from the current leader election.
         * See ZOOKEEPER-1732 for more information.
         */
        outofelection.put(n.sid, new Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));
        voteSet = getVoteTracker(outofelection, new Vote(n.version, n.leader, n.zxid, n.electionEpoch, n.peerEpoch, n.state));

        if (voteSet.hasAllQuorums() && checkLeader(outofelection, n.leader, n.electionEpoch)) {
            synchronized (this) {
                logicalclock.set(n.electionEpoch);
                setPeerState(n.leader, voteSet);
            }
            Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);
            leaveInstance(endVote);
            return endVote;
        }

        return null;
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,receivedLeadingNotification,"Vote receivedLeadingNotification(Map<Long, Vote>,Map<Long, Vote>,SyncedLearnerTracker,Notification)","[1179, 1206]","{'A651': [(1179, 1206)]}",{'A651': 1.0},A651,,"    private Vote receivedLeadingNotification(Map<Long, Vote> recvset, Map<Long, Vote> outofelection, SyncedLearnerTracker voteSet, Notification n) {
        /*
        *
        * In a two-node configuration, a recovery nodes cannot locate a leader because of the lack of the majority in the voteset.
        * Therefore, it is the time for Oracle to take place as a tight breaker.
        *
        * */
        Vote result = receivedFollowingNotification(recvset, outofelection, voteSet, n);
        if (result == null) {
            /*
            * Ask Oracle to see if it is okay to follow this leader.
            *
            * We don't need the CheckLeader() because itself cannot be a leader candidate
            * */
            if (self.getQuorumVerifier().getNeedOracle() && !self.getQuorumVerifier().askOracle()) {
                LOG.info(""Oracle indicates to follow"");
                setPeerState(n.leader, voteSet);
                Vote endVote = new Vote(n.leader, n.zxid, n.electionEpoch, n.peerEpoch);
                leaveInstance(endVote);
                return endVote;
            } else {
                LOG.info(""Oracle indicates not to follow"");
                return null;
            }
        } else {
            return result;
        }
    }
"
org.apache.zookeeper.server.quorum,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/quorum/FastLeaderElection.java,FastLeaderElection,validVoter,boolean validVoter(long),"[1215, 1217]","{'A647': [(1215, 1217)]}",{'A647': 1.0},A647,,"    private boolean validVoter(long sid) {
        return self.getCurrentAndNextConfigVoters().contains(sid);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getSessionId,String getSessionId(),"[66, 68]","{'A590': [(66, 66), (68, 68)], 'A596': [(67, 67)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,,"    public String getSessionId() {
        return ""0x"" + Long.toHexString(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getSourceIP,String getSourceIP(),"[70, 76]","{'A583': [(75, 75)], 'A591': [(71, 71)], 'A590': [(70, 70), (76, 76)], 'A596': [(72, 74)]}","{'A583': 0.14285714285714285, 'A591': 0.14285714285714285, 'A590': 0.2857142857142857, 'A596': 0.42857142857142855}",A596,,"    public String getSourceIP() {
        InetSocketAddress sockAddr = connection.getRemoteSocketAddress();
        if (sockAddr == null) {
            return null;
        }
        return sockAddr.getAddress().getHostAddress() + "":"" + sockAddr.getPort();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getName,String getName(),"[78, 80]","{'A583': [(79, 79)], 'A590': [(78, 78), (80, 80)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public String getName() {
        return MBeanRegistry.getInstance().makeFullPath(""Connections"", remoteIP, getSessionId());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,isHidden,boolean isHidden(),"[82, 84]","{'A590': [(82, 84)]}",{'A590': 1.0},A590,,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getEphemeralNodes,String[] getEphemeralNodes(),"[86, 93]","{'A583': [(87, 88)], 'A590': [(86, 86), (89, 93)]}","{'A583': 0.25, 'A590': 0.75}",A590,,"    public String[] getEphemeralNodes() {
        if (zk.getZKDatabase() != null) {
            String[] res = zk.getZKDatabase().getEphemerals(sessionId).toArray(new String[0]);
            Arrays.sort(res);
            return res;
        }
        return null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getStartedTime,String getStartedTime(),"[95, 97]","{'A590': [(95, 97)]}",{'A590': 1.0},A590,,"    public String getStartedTime() {
        return stats.getEstablished().toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,terminateSession,void terminateSession(),"[99, 105]","{'A583': [(103, 103)], 'A590': [(99, 100), (102, 102), (104, 105)], 'A596': [(101, 101)]}","{'A583': 0.14285714285714285, 'A590': 0.7142857142857143, 'A596': 0.14285714285714285}",A590,,"    public void terminateSession() {
        try {
            zk.closeSession(sessionId);
        } catch (Exception e) {
            LOG.warn(""Unable to closeSession() for session: 0x{}"", getSessionId(), e);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,terminateConnection,void terminateConnection(),"[107, 109]","{'A590': [(107, 109)]}",{'A590': 1.0},A590,,"    public void terminateConnection() {
        connection.sendCloseSession();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,resetCounters,void resetCounters(),"[111, 113]","{'A591': [(112, 112)], 'A590': [(111, 111), (113, 113)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public void resetCounters() {
        stats.resetStats();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,toString,String toString(),"[115, 118]","{'A583': [(117, 117)], 'A590': [(115, 116), (118, 118)]}","{'A583': 0.25, 'A590': 0.75}",A590,,"    @Override
    public String toString() {
        return ""ConnectionBean{ClientIP="" + ObjectName.quote(getSourceIP()) + "",SessionId=0x"" + getSessionId() + ""}"";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getOutstandingRequests,long getOutstandingRequests(),"[120, 122]","{'A590': [(120, 122)]}",{'A590': 1.0},A590,,"    public long getOutstandingRequests() {
        return stats.getOutstandingRequests();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getPacketsReceived,long getPacketsReceived(),"[124, 126]","{'A590': [(124, 126)]}",{'A590': 1.0},A590,,"    public long getPacketsReceived() {
        return stats.getPacketsReceived();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getPacketsSent,long getPacketsSent(),"[128, 130]","{'A590': [(128, 130)]}",{'A590': 1.0},A590,,"    public long getPacketsSent() {
        return stats.getPacketsSent();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getSessionTimeout,int getSessionTimeout(),"[132, 134]","{'A590': [(132, 134)]}",{'A590': 1.0},A590,,"    public int getSessionTimeout() {
        return connection.getSessionTimeout();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getMinLatency,long getMinLatency(),"[136, 138]","{'A590': [(136, 138)]}",{'A590': 1.0},A590,,"    public long getMinLatency() {
        return stats.getMinLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getAvgLatency,long getAvgLatency(),"[140, 142]","{'A590': [(140, 142)]}",{'A590': 1.0},A590,,"    public long getAvgLatency() {
        return stats.getAvgLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getMaxLatency,long getMaxLatency(),"[144, 146]","{'A590': [(144, 146)]}",{'A590': 1.0},A590,,"    public long getMaxLatency() {
        return stats.getMaxLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getLastOperation,String getLastOperation(),"[148, 150]","{'A590': [(148, 150)]}",{'A590': 1.0},A590,,"    public String getLastOperation() {
        return stats.getLastOperation();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getLastCxid,String getLastCxid(),"[152, 154]","{'A590': [(152, 154)]}",{'A590': 1.0},A590,,"    public String getLastCxid() {
        return ""0x"" + Long.toHexString(stats.getLastCxid());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getLastZxid,String getLastZxid(),"[156, 158]","{'A590': [(156, 158)]}",{'A590': 1.0},A590,,"    public String getLastZxid() {
        return ""0x"" + Long.toHexString(stats.getLastZxid());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getLastResponseTime,String getLastResponseTime(),"[160, 162]","{'A590': [(160, 160), (162, 162)], 'A593': [(161, 161)]}","{'A590': 0.6666666666666666, 'A593': 0.3333333333333333}",A590,,"    public String getLastResponseTime() {
        return Time.elapsedTimeToDate(stats.getLastResponseTime()).toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ConnectionBean.java,ConnectionBean,getLastLatency,long getLastLatency(),"[164, 166]","{'A590': [(164, 166)]}",{'A590': 1.0},A590,,"    public long getLastLatency() {
        return stats.getLastLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnHelper.java,ServerCnxnHelper,getMaxCnxns,"int getMaxCnxns(ServerCnxnFactory,ServerCnxnFactory)","[24, 33]","{'A670': [(24, 33)]}",{'A670': 1.0},A670,,"    public static int getMaxCnxns(ServerCnxnFactory secureServerCnxnFactory, ServerCnxnFactory serverCnxnFactory) {
        if (serverCnxnFactory != null) {
            return serverCnxnFactory.getMaxCnxns();
        }
        if (secureServerCnxnFactory != null) {
            return secureServerCnxnFactory.getMaxCnxns();
        }
        // default
        return ServerCnxnFactory.ZOOKEEPER_MAX_CONNECTION_DEFAULT;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,isInitialized,boolean isInitialized(),"[165, 167]","{'A596': [(165, 167)]}",{'A596': 1.0},A596,,"    public boolean isInitialized() {
        return initialized;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,clear,void clear(),"[175, 192]","{'A596': [(175, 175), (177, 178), (181, 181), (185, 185), (190, 192)], 'A591': [(176, 176), (183, 183)], 'A590': [(182, 182), (184, 184), (188, 189)], 'A625': [(186, 187)], 'A612': [(179, 180)]}","{'A596': 0.4444444444444444, 'A591': 0.1111111111111111, 'A590': 0.2222222222222222, 'A625': 0.1111111111111111, 'A612': 0.1111111111111111}",A596,,"    public void clear() {
        /* to be safe we just create a new
         * datatree.
         */
        dataTree.shutdownWatcher();
        dataTree = createDataTree();
        sessionsWithTimeouts.clear();
        WriteLock lock = logLock.writeLock();
        try {
            lock.lock();
            committedLog.clear();
            minCommittedLog = 0;
            maxCommittedLog = 0;
        } finally {
            lock.unlock();
        }
        initialized = false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getDataTree,DataTree getDataTree(),"[198, 200]","{'A596': [(198, 200)]}",{'A596': 1.0},A596,,"    public DataTree getDataTree() {
        return this.dataTree;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getmaxCommittedLog,long getmaxCommittedLog(),"[206, 208]","{'A596': [(206, 208)]}",{'A596': 1.0},A596,,"    public long getmaxCommittedLog() {
        return maxCommittedLog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getminCommittedLog,long getminCommittedLog(),"[216, 218]","{'A596': [(216, 218)]}",{'A596': 1.0},A596,,"    public long getminCommittedLog() {
        return minCommittedLog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getLogLock,ReentrantReadWriteLock getLogLock(),"[224, 226]","{'A596': [(226, 226)], 'A590': [(224, 225)]}","{'A596': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public ReentrantReadWriteLock getLogLock() {
        return logLock;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getCommittedLog,Collection<Proposal> getCommittedLog(),"[228, 243]","{'A583': [(233, 233)], 'A620': [(228, 229), (231, 232), (234, 235), (237, 237), (242, 242)], 'A591': [(241, 241), (243, 243)], 'A590': [(230, 230), (236, 236), (238, 240)]}","{'A583': 0.0625, 'A620': 0.5, 'A591': 0.125, 'A590': 0.3125}",A620,,"    public synchronized Collection<Proposal> getCommittedLog() {
        final Collection<Proposal> result;
        ReadLock rl = logLock.readLock();
        // make a copy if this thread is not already holding a lock
        if (logLock.getReadHoldCount() > 0) {
            result = this.committedLog;
        } else {
            rl.lock();
            try {
                result = new ArrayList<>(this.committedLog);
            } finally {
                rl.unlock();
            }
        }
        return Collections.unmodifiableCollection(result);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getDataTreeLastProcessedZxid,long getDataTreeLastProcessedZxid(),"[249, 251]","{'A596': [(249, 251)]}",{'A596': 1.0},A596,,"    public long getDataTreeLastProcessedZxid() {
        return dataTree.lastProcessedZxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getSessions,Collection<Long> getSessions(),"[257, 259]","{'A596': [(257, 259)]}",{'A596': 1.0},A596,,"    public Collection<Long> getSessions() {
        return dataTree.getSessions();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getSessionCount,long getSessionCount(),"[264, 266]","{'A713': [(264, 266)]}",{'A713': 1.0},A713,,"    public long getSessionCount() {
        return sessionsWithTimeouts.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getSessionWithTimeOuts,"ConcurrentHashMap<Long, Integer> getSessionWithTimeOuts()","[272, 274]","{'A596': [(272, 274)]}",{'A596': 1.0},A596,,"    public ConcurrentHashMap<Long, Integer> getSessionWithTimeOuts() {
        return sessionsWithTimeouts;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,onTxnLoaded,"void onTxnLoaded(TxnHeader,Record,TxnDigest)","[277, 279]","{'A612': [(277, 278)], 'A664': [(279, 279)]}","{'A612': 0.6666666666666666, 'A664': 0.3333333333333333}",A612,,"        public void onTxnLoaded(TxnHeader hdr, Record txn, TxnDigest digest) {
            addCommittedProposal(hdr, txn, digest);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,loadDataBase,long loadDataBase(),"[288, 297]","{'A596': [(288, 288)], 'A612': [(294, 295)], 'A713': [(289, 289), (292, 292)], 'A664': [(290, 291), (296, 297)], 'A584': [(293, 293)]}","{'A596': 0.1, 'A612': 0.2, 'A713': 0.2, 'A664': 0.4, 'A584': 0.1}",A664,,"    public long loadDataBase() throws IOException {
        long startTime = Time.currentElapsedTime();
        long zxid = snapLog.restore(dataTree, sessionsWithTimeouts, commitProposalPlaybackListener);
        initialized = true;
        long loadTime = Time.currentElapsedTime() - startTime;
        ServerMetrics.getMetrics().DB_INIT_TIME.add(loadTime);
        LOG.info(""Snapshot loaded in {} ms, highest zxid is 0x{}, digest is {}"",
                loadTime, Long.toHexString(zxid), dataTree.getTreeDigest());
        return zxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,fastForwardDataBase,long fastForwardDataBase(),"[304, 308]","{'A596': [(306, 308)], 'A664': [(304, 305)]}","{'A596': 0.6, 'A664': 0.4}",A596,,"    public long fastForwardDataBase() throws IOException {
        long zxid = snapLog.fastForwardFromEdits(dataTree, sessionsWithTimeouts, commitProposalPlaybackListener);
        initialized = true;
        return zxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,addCommittedProposal,"void addCommittedProposal(TxnHeader,Record,TxnDigest)","[310, 314]","{'A612': [(310, 310), (312, 312)], 'A664': [(311, 311), (313, 314)]}","{'A612': 0.4, 'A664': 0.6}",A664,,"    private void addCommittedProposal(TxnHeader hdr, Record txn, TxnDigest digest) {
        Request r = new Request(0, hdr.getCxid(), hdr.getType(), hdr, txn, hdr.getZxid());
        r.setTxnDigest(digest);
        addCommittedProposal(r);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,addCommittedProposal,void addCommittedProposal(Request),"[322, 353]","{'A596': [(322, 322), (327, 328), (342, 342), (344, 344), (352, 353)], 'A591': [(326, 326)], 'A590': [(323, 325), (350, 351)], 'A595': [(343, 343), (345, 345)], 'A625': [(329, 341), (346, 349)]}","{'A596': 0.21875, 'A591': 0.03125, 'A590': 0.15625, 'A595': 0.0625, 'A625': 0.53125}",A625,,"    public void addCommittedProposal(Request request) {
        WriteLock wl = logLock.writeLock();
        try {
            wl.lock();
            if (committedLog.isEmpty()) {
                minCommittedLog = request.zxid;
                maxCommittedLog = request.zxid;
            } else if (request.zxid <= maxCommittedLog) {
                // This could happen if lastProcessedZxid is rewinded and database is re-synced.
                // Currently, it only happens in test codes, but it should also be safe for production path.
                return;
            } else if (!allowDiscontinuousProposals
                    && request.zxid != maxCommittedLog + 1
                    && ZxidUtils.getEpochFromZxid(request.zxid) <= ZxidUtils.getEpochFromZxid(maxCommittedLog)) {
                String msg = String.format(
                    ""Committed proposal cached out of order: 0x%s is not the next proposal of 0x%s"",
                    ZxidUtils.zxidToString(request.zxid),
                    ZxidUtils.zxidToString(maxCommittedLog));
                LOG.error(msg);
                throw new IllegalStateException(msg);
            }
            PureRequestProposal p = new PureRequestProposal(request);
            committedLog.add(p);
            maxCommittedLog = p.getZxid();
            if (committedLog.size() > commitLogCount) {
                committedLog.remove();
                minCommittedLog = committedLog.peek().getZxid();
            }
        } finally {
            wl.unlock();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,isTxnLogSyncEnabled,boolean isTxnLogSyncEnabled(),"[355, 363]","{'A583': [(358, 358)], 'A648': [(363, 363)], 'A612': [(355, 357), (359, 362)]}","{'A583': 0.1111111111111111, 'A648': 0.1111111111111111, 'A612': 0.7777777777777778}",A612,,"    public boolean isTxnLogSyncEnabled() {
        boolean enabled = snapshotSizeFactor >= 0;
        if (enabled) {
            LOG.info(""On disk txn sync enabled with snapshotSizeFactor {}"", snapshotSizeFactor);
        } else {
            LOG.info(""On disk txn sync disabled"");
        }
        return enabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,calculateTxnLogSizeLimit,long calculateTxnLogSizeLimit(),"[365, 376]","{'A611': [(368, 371)], 'A648': [(365, 367), (372, 376)]}","{'A611': 0.3333333333333333, 'A648': 0.6666666666666666}",A648,,"    public long calculateTxnLogSizeLimit() {
        long snapSize = 0;
        try {
            File snapFile = snapLog.findMostRecentSnapshot();
            if (snapFile != null) {
                snapSize = snapFile.length();
            }
        } catch (IOException e) {
            LOG.error(""Unable to get size of most recent snapshot"");
        }
        return (long) (snapSize * snapshotSizeFactor);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getProposalsFromTxnLog,"Iterator<Proposal> getProposalsFromTxnLog(long,long)","[386, 427]","{'A583': [(386, 386), (399, 402), (410, 410)], 'A596': [(394, 394)], 'A648': [(387, 393), (395, 395), (397, 398), (404, 409), (412, 416), (424, 427)], 'A591': [(396, 396)], 'A597': [(403, 403), (411, 411), (417, 423)]}","{'A583': 0.14285714285714285, 'A596': 0.023809523809523808, 'A648': 0.5952380952380952, 'A591': 0.023809523809523808, 'A597': 0.21428571428571427}",A648,,"    public Iterator<Proposal> getProposalsFromTxnLog(long startZxid, long sizeLimit) {
        if (sizeLimit < 0) {
            LOG.debug(""Negative size limit - retrieving proposal via txnlog is disabled"");
            return TxnLogProposalIterator.EMPTY_ITERATOR;
        }

        TxnIterator itr = null;
        try {

            itr = snapLog.readTxnLog(startZxid, false);

            // If we cannot guarantee that this is strictly the starting txn
            // after a given zxid, we should fail.
            if ((itr.getHeader() != null) && (itr.getHeader().getZxid() > startZxid)) {
                LOG.warn(
                    ""Unable to find proposals from txnlog for zxid: 0x{}"",
                    Long.toHexString(startZxid));
                itr.close();
                return TxnLogProposalIterator.EMPTY_ITERATOR;
            }

            if (sizeLimit > 0) {
                long txnSize = itr.getStorageSize();
                if (txnSize > sizeLimit) {
                    LOG.info(""Txnlog size: {} exceeds sizeLimit: {}"", txnSize, sizeLimit);
                    itr.close();
                    return TxnLogProposalIterator.EMPTY_ITERATOR;
                }
            }
        } catch (IOException e) {
            LOG.error(""Unable to read txnlog from disk"", e);
            try {
                if (itr != null) {
                    itr.close();
                }
            } catch (IOException ioe) {
                LOG.warn(""Error closing file iterator"", ioe);
            }
            return TxnLogProposalIterator.EMPTY_ITERATOR;
        }
        return new TxnLogProposalIterator(itr);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,aclForNode,List<ACL> aclForNode(DataNode),"[429, 431]","{'A639': [(429, 431)]}",{'A639': 1.0},A639,,"    public List<ACL> aclForNode(DataNode n) {
        return dataTree.getACL(n);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,removeCnxn,void removeCnxn(ServerCnxn),"[436, 438]","{'A596': [(436, 438)]}",{'A596': 1.0},A596,,"    public void removeCnxn(ServerCnxn cnxn) {
        dataTree.removeCnxn(cnxn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,killSession,"void killSession(long,long)","[445, 447]","{'A596': [(445, 447)]}",{'A596': 1.0},A596,,"    public void killSession(long sessionId, long zxid) {
        dataTree.killSession(sessionId, zxid);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,dumpEphemerals,void dumpEphemerals(PrintWriter),"[453, 455]","{'A596': [(453, 455)]}",{'A596': 1.0},A596,,"    public void dumpEphemerals(PrintWriter pwriter) {
        dataTree.dumpEphemerals(pwriter);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getEphemerals,"Map<Long, Set<String>> getEphemerals()","[457, 459]","{'A591': [(457, 459)]}",{'A591': 1.0},A591,,"    public Map<Long, Set<String>> getEphemerals() {
        return dataTree.getEphemerals();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getNodeCount,int getNodeCount(),"[465, 467]","{'A596': [(465, 467)]}",{'A596': 1.0},A596,,"    public int getNodeCount() {
        return dataTree.getNodeCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getEphemerals,Set<String> getEphemerals(long),"[474, 476]","{'A596': [(475, 476)], 'A591': [(474, 474)]}","{'A596': 0.6666666666666666, 'A591': 0.3333333333333333}",A596,,"    public Set<String> getEphemerals(long sessionId) {
        return dataTree.getEphemerals(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,setlastProcessedZxid,void setlastProcessedZxid(long),"[482, 484]","{'A596': [(482, 484)]}",{'A596': 1.0},A596,,"    public void setlastProcessedZxid(long zxid) {
        dataTree.lastProcessedZxid = zxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,processTxn,"ProcessTxnResult processTxn(TxnHeader,Record,TxnDigest)","[494, 496]","{'A596': [(496, 496)], 'A612': [(494, 495)]}","{'A596': 0.3333333333333333, 'A612': 0.6666666666666666}",A612,,"    public ProcessTxnResult processTxn(TxnHeader hdr, Record txn, TxnDigest digest) {
        return dataTree.processTxn(hdr, txn, digest);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,statNode,"Stat statNode(String,ServerCnxn)","[505, 507]","{'A596': [(505, 507)]}",{'A596': 1.0},A596,,"    public Stat statNode(String path, ServerCnxn serverCnxn) throws KeeperException.NoNodeException {
        return dataTree.statNode(path, serverCnxn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getNode,DataNode getNode(String),"[514, 516]","{'A583': [(515, 515)], 'A596': [(514, 514), (516, 516)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public DataNode getNode(String path) {
        return dataTree.getNode(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getData,"byte[] getData(String,Stat,Watcher)","[525, 527]","{'A583': [(525, 525)], 'A596': [(526, 527)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public byte[] getData(String path, Stat stat, Watcher watcher) throws KeeperException.NoNodeException {
        return dataTree.getData(path, stat, watcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,setWatches,"void setWatches(long,List<String>,List<String>,List<String>,List<String>,List<String>,Watcher)","[539, 542]","{'A636': [(539, 542)]}",{'A636': 1.0},A636,,"    public void setWatches(long relativeZxid, List<String> dataWatches, List<String> existWatches, List<String> childWatches,
                           List<String> persistentWatches, List<String> persistentRecursiveWatches, Watcher watcher) {
        dataTree.setWatches(relativeZxid, dataWatches, existWatches, childWatches, persistentWatches, persistentRecursiveWatches, watcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,addWatch,"void addWatch(String,Watcher,int)","[554, 556]","{'A596': [(556, 556)], 'A636': [(554, 555)]}","{'A596': 0.3333333333333333, 'A636': 0.6666666666666666}",A636,,"    public void addWatch(String basePath, Watcher watcher, int mode) {
        dataTree.addWatch(basePath, watcher, mode);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getACL,"List<ACL> getACL(String,Stat)","[565, 567]","{'A596': [(565, 567)]}",{'A596': 1.0},A596,,"    public List<ACL> getACL(String path, Stat stat) throws NoNodeException {
        return dataTree.getACL(path, stat);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getChildren,"List<String> getChildren(String,Stat,Watcher)","[577, 579]","{'A583': [(577, 577)], 'A596': [(578, 579)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public List<String> getChildren(String path, Stat stat, Watcher watcher) throws KeeperException.NoNodeException {
        return dataTree.getChildren(path, stat, watcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getAllChildrenNumber,int getAllChildrenNumber(String),"[584, 586]","{'A583': [(584, 584)], 'A641': [(585, 586)]}","{'A583': 0.3333333333333333, 'A641': 0.6666666666666666}",A641,,"    public int getAllChildrenNumber(String path) throws KeeperException.NoNodeException {
        return dataTree.getAllChildrenNumber(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,isSpecialPath,boolean isSpecialPath(String),"[593, 595]","{'A596': [(593, 595)]}",{'A596': 1.0},A596,,"    public boolean isSpecialPath(String path) {
        return dataTree.isSpecialPath(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getAclSize,int getAclSize(),"[601, 603]","{'A596': [(601, 601), (603, 603)], 'A639': [(602, 602)]}","{'A596': 0.6666666666666666, 'A639': 0.3333333333333333}",A596,,"    public int getAclSize() {
        return dataTree.aclCacheSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,truncateLog,boolean truncateLog(long),"[611, 623]","{'A596': [(611, 612), (621, 621), (623, 623)], 'A591': [(613, 620), (622, 622)]}","{'A596': 0.3076923076923077, 'A591': 0.6923076923076923}",A591,,"    public boolean truncateLog(long zxid) throws IOException {
        clear();

        // truncate the log
        boolean truncated = snapLog.truncateLog(zxid);

        if (!truncated) {
            return false;
        }

        loadDataBase();
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,deserializeSnapshot,void deserializeSnapshot(InputArchive),"[630, 634]","{'A583': [(632, 632)], 'A596': [(630, 631), (633, 633)], 'A591': [(634, 634)]}","{'A583': 0.2, 'A596': 0.6, 'A591': 0.2}",A596,,"    public void deserializeSnapshot(InputArchive ia) throws IOException {
        clear();
        SerializeUtils.deserializeSnapshot(getDataTree(), ia, getSessionWithTimeOuts());
        initialized = true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,deserializeSnapshot,"void deserializeSnapshot(InputArchive,CheckedInputStream)","[645, 669]","{'A583': [(650, 650)], 'A726': [(645, 649), (651, 669)]}","{'A583': 0.04, 'A726': 0.96}",A726,,"    public void deserializeSnapshot(final InputArchive ia, final CheckedInputStream is) throws IOException {
        clear();

        // deserialize data tree
        final DataTree dataTree = getDataTree();
        FileSnap.deserialize(dataTree, getSessionWithTimeOuts(), ia);
        SnapStream.checkSealIntegrity(is, ia);

        // deserialize digest and check integrity
        if (dataTree.deserializeZxidDigest(ia, 0)) {
            SnapStream.checkSealIntegrity(is, ia);
        }

        // deserialize lastProcessedZxid and check integrity
        if (dataTree.deserializeLastProcessedZxid(ia)) {
            SnapStream.checkSealIntegrity(is, ia);
        }

        // compare the digest to find inconsistency
        if (dataTree.getDigestFromLoadedSnapshot() != null) {
            dataTree.compareSnapshotDigests(dataTree.lastProcessedZxid);
        }

        initialized = true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,serializeSnapshot,void serializeSnapshot(OutputArchive),"[678, 680]","{'A583': [(678, 678)], 'A596': [(679, 680)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public void serializeSnapshot(OutputArchive oa) throws IOException, InterruptedException {
        SerializeUtils.serializeSnapshot(getDataTree(), oa, getSessionWithTimeOuts());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,append,boolean append(Request),"[687, 693]","{'A596': [(687, 687), (693, 693)], 'A733': [(688, 692)]}","{'A596': 0.2857142857142857, 'A733': 0.7142857142857143}",A733,,"    public boolean append(Request si) throws IOException {
        if (this.snapLog.append(si)) {
            txnCount.incrementAndGet();
            return true;
        }
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,rollLog,void rollLog(),"[698, 701]","{'A596': [(698, 699), (701, 701)], 'A647': [(700, 700)]}","{'A596': 0.75, 'A647': 0.25}",A596,,"    public void rollLog() throws IOException {
        this.snapLog.rollLog();
        resetTxnCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,commit,void commit(),"[707, 709]","{'A596': [(707, 709)]}",{'A596': 1.0},A596,,"    public void commit() throws IOException {
        this.snapLog.commit();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,close,void close(),"[715, 717]","{'A596': [(715, 717)]}",{'A596': 1.0},A596,,"    public void close() throws IOException {
        this.snapLog.close();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,initConfigInZKDatabase,void initConfigInZKDatabase(QuorumVerifier),"[719, 738]","{'A583': [(720, 722), (729, 730), (732, 734)], 'A602': [(731, 731)], 'A590': [(723, 723), (735, 735), (737, 738)], 'A593': [(719, 719), (724, 725), (727, 728), (736, 736)], 'A612': [(726, 726)]}","{'A583': 0.4, 'A602': 0.05, 'A590': 0.2, 'A593': 0.3, 'A612': 0.05}",A583,,"    public synchronized void initConfigInZKDatabase(QuorumVerifier qv) {
        if (qv == null) {
            return; // only happens during tests
        }
        try {
            if (this.dataTree.getNode(ZooDefs.CONFIG_NODE) == null) {
                // should only happen during upgrade
                LOG.warn(""configuration znode missing (should only happen during upgrade), creating the node"");
                this.dataTree.addConfigNode();
            }
            this.dataTree.setData(
                ZooDefs.CONFIG_NODE,
                qv.toString().getBytes(UTF_8),
                -1,
                qv.getVersion(),
                Time.currentWallTime());
        } catch (NoNodeException e) {
            System.out.println(""configuration node missing - should not happen"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,setSnapshotSizeFactor,void setSnapshotSizeFactor(double),"[744, 746]","{'A648': [(744, 746)]}",{'A648': 1.0},A648,,"    public void setSnapshotSizeFactor(double snapshotSizeFactor) {
        this.snapshotSizeFactor = snapshotSizeFactor;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,containsWatcher,"boolean containsWatcher(String,WatcherType,Watcher)","[758, 760]","{'A639': [(758, 760)]}",{'A639': 1.0},A639,,"    public boolean containsWatcher(String path, WatcherType type, Watcher watcher) {
        return dataTree.containsWatcher(path, type, watcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,removeWatch,"boolean removeWatch(String,WatcherType,Watcher)","[772, 774]","{'A591': [(774, 774)], 'A630': [(772, 773)]}","{'A591': 0.3333333333333333, 'A630': 0.6666666666666666}",A630,,"    public boolean removeWatch(String path, WatcherType type, Watcher watcher) {
        return dataTree.removeWatch(path, type, watcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,createDataTree,DataTree createDataTree(),"[777, 779]","{'A612': [(777, 779)]}",{'A612': 1.0},A612,,"    public DataTree createDataTree() {
        return new DataTree();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,resetTxnCount,void resetTxnCount(),"[784, 787]","{'A647': [(784, 787)]}",{'A647': 1.0},A647,,"    public void resetTxnCount() {
        txnCount.set(0);
        snapLog.setTotalLogSize(0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getTxnCount,int getTxnCount(),"[792, 794]","{'A647': [(792, 794)]}",{'A647': 1.0},A647,,"    public int getTxnCount() {
        return txnCount.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,getTxnSize,long getTxnSize(),"[799, 801]","{'A647': [(799, 801)]}",{'A647': 1.0},A647,,"    public long getTxnSize() {
        return snapLog.getTotalLogSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZKDatabase.java,ZKDatabase,compareDigest,"boolean compareDigest(TxnHeader,Record,TxnDigest)","[803, 805]","{'A612': [(803, 805)]}",{'A612': 1.0},A612,,"    public boolean compareDigest(TxnHeader header, Record txn, TxnDigest digest) {
        return dataTree.compareDigest(header, txn, digest);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ObserverBean.java,ObserverBean,getName,String getName(),"[39, 41]","{'A593': [(39, 41)]}",{'A593': 1.0},A593,,"    public String getName() {
        return ""Observer"";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ObserverBean.java,ObserverBean,getPendingRevalidationCount,int getPendingRevalidationCount(),"[43, 45]","{'A583': [(44, 44)], 'A596': [(43, 43), (45, 45)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,,"    public int getPendingRevalidationCount() {
        return this.observer.getPendingRevalidationsCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ObserverBean.java,ObserverBean,getQuorumAddress,String getQuorumAddress(),"[47, 49]","{'A596': [(47, 49)]}",{'A596': 1.0},A596,,"    public String getQuorumAddress() {
        return observer.getSocket().toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ObserverBean.java,ObserverBean,getLearnerMaster,String getLearnerMaster(),"[51, 58]","{'A653': [(53, 53), (56, 57)], 'A647': [(51, 52), (54, 55), (58, 58)]}","{'A653': 0.375, 'A647': 0.625}",A647,,"    public String getLearnerMaster() {
        QuorumPeer.QuorumServer learnerMaster = observer.getCurrentLearnerMaster();
        if (learnerMaster == null || learnerMaster.addr.isEmpty()) {
            return ""Unknown"";
        }
        InetSocketAddress address = learnerMaster.addr.getReachableOrOne();
        return address.getAddress().getHostAddress() + "":"" + address.getPort();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ObserverBean.java,ObserverBean,setLearnerMaster,void setLearnerMaster(String),"[60, 64]","{'A647': [(60, 64)]}",{'A647': 1.0},A647,,"    public void setLearnerMaster(String learnerMaster) {
        if (!observer.setLearnerMaster(learnerMaster)) {
            throw new IllegalArgumentException(""Not a valid learner master"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerListenerImpl.java,ZooKeeperServerListenerImpl,notifyStopping,"void notifyStopping(String,int)","[41, 45]","{'A597': [(41, 45)]}",{'A597': 1.0},A597,,"    @Override
    public void notifyStopping(String threadName, int exitCode) {
        LOG.info(""Thread {} exits, error code {}"", threadName, exitCode);
        zkServer.setState(State.ERROR);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,getLastSnapshotInfo,SnapshotInfo getLastSnapshotInfo(),"[65, 67]","{'A647': [(65, 67)]}",{'A647': 1.0},A647,,"    public SnapshotInfo getLastSnapshotInfo() {
        return this.lastSnapshotInfo;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,deserialize,"long deserialize(DataTree,Map<Long, Integer>)","[73, 126]","{'A583': [(73, 73), (86, 86), (111, 111)], 'A590': [(79, 80), (125, 126)], 'A591': [(74, 78), (81, 81), (83, 83), (85, 85), (108, 109), (113, 116)], 'A647': [(118, 118)], 'A646': [(84, 84), (90, 90), (110, 110), (112, 112)], 'A612': [(82, 82), (87, 87), (92, 102), (117, 117), (119, 124)], 'A694': [(88, 89), (91, 91)], 'A726': [(103, 107)]}","{'A583': 0.05555555555555555, 'A590': 0.07407407407407407, 'A591': 0.25925925925925924, 'A647': 0.018518518518518517, 'A646': 0.07407407407407407, 'A612': 0.37037037037037035, 'A694': 0.05555555555555555, 'A726': 0.09259259259259259}",A612,,"    public long deserialize(DataTree dt, Map<Long, Integer> sessions) throws IOException {
        // we run through 100 snapshots (not all of them)
        // if we cannot get it running within 100 snapshots
        // we should  give up
        List<File> snapList = findNValidSnapshots(100);
        if (snapList.size() == 0) {
            return -1L;
        }
        File snap = null;
        long snapZxid = -1;
        boolean foundValid = false;
        for (int i = 0, snapListSize = snapList.size(); i < snapListSize; i++) {
            snap = snapList.get(i);
            LOG.info(""Reading snapshot {}"", snap);
            snapZxid = Util.getZxidFromName(snap.getName(), SNAPSHOT_FILE_PREFIX);
            try (CheckedInputStream snapIS = SnapStream.getInputStream(snap)) {
                InputArchive ia = BinaryInputArchive.getArchive(snapIS);
                deserialize(dt, sessions, ia);
                SnapStream.checkSealIntegrity(snapIS, ia);

                // Digest feature was added after the CRC to make it backward
                // compatible, the older code can still read snapshots which
                // includes digest.
                //
                // To check the intact, after adding digest we added another
                // CRC check.
                if (dt.deserializeZxidDigest(ia, snapZxid)) {
                    SnapStream.checkSealIntegrity(snapIS, ia);
                }

                // deserialize lastProcessedZxid and check inconsistency
                if (dt.deserializeLastProcessedZxid(ia)) {
                    SnapStream.checkSealIntegrity(snapIS, ia);
                }

                foundValid = true;
                break;
            } catch (IOException e) {
                LOG.warn(""problem reading snap file {}"", snap, e);
            }
        }
        if (!foundValid) {
            throw new IOException(""Not able to find valid snapshots in "" + snapDir);
        }
        dt.lastProcessedZxid = snapZxid;
        lastSnapshotInfo = new SnapshotInfo(dt.lastProcessedZxid, snap.lastModified() / 1000);

        // compare the digest if this is not a fuzzy snapshot, we want to compare
        // and find inconsistent asap.
        if (dt.getDigestFromLoadedSnapshot() != null) {
            dt.compareSnapshotDigests(dt.lastProcessedZxid);
        }
        return dt.lastProcessedZxid;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,deserialize,"void deserialize(DataTree,Map<Long, Integer>,InputArchive)","[135, 142]","{'A583': [(135, 135), (139, 139), (141, 141)], 'A590': [(136, 137), (142, 142)], 'A591': [(138, 138), (140, 140)]}","{'A583': 0.375, 'A590': 0.375, 'A591': 0.25}",A583,,"    public static void deserialize(DataTree dt, Map<Long, Integer> sessions, InputArchive ia) throws IOException {
        FileHeader header = new FileHeader();
        header.deserialize(ia, ""fileheader"");
        if (header.getMagic() != SNAP_MAGIC) {
            throw new IOException(""mismatching magic headers "" + header.getMagic() + "" !=  "" + FileSnap.SNAP_MAGIC);
        }
        SerializeUtils.deserializeSnapshot(dt, ia, sessions);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,findMostRecentSnapshot,File findMostRecentSnapshot(),"[148, 154]","{'A591': [(149, 154)], 'A735': [(148, 148)]}","{'A591': 0.8571428571428571, 'A735': 0.14285714285714285}",A591,,"    public File findMostRecentSnapshot() {
        List<File> files = findNValidSnapshots(1);
        if (files.size() == 0) {
            return null;
        }
        return files.get(0);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,findNValidSnapshots,List<File> findNValidSnapshots(int),"[167, 188]","{'A583': [(184, 184)], 'A590': [(171, 171), (186, 186), (188, 188)], 'A591': [(169, 169), (172, 175), (177, 183), (185, 185), (187, 187)], 'A734': [(168, 168)], 'A694': [(176, 176)], 'A735': [(167, 167)], 'A605': [(170, 170)]}","{'A583': 0.045454545454545456, 'A590': 0.13636363636363635, 'A591': 0.6363636363636364, 'A734': 0.045454545454545456, 'A694': 0.045454545454545456, 'A735': 0.045454545454545456, 'A605': 0.045454545454545456}",A591,,"    protected List<File> findNValidSnapshots(int n) {
        List<File> files = Util.sortDataDir(snapDir.listFiles(), SNAPSHOT_FILE_PREFIX, false);
        int count = 0;
        List<File> list = new ArrayList<>();
        for (File f : files) {
            // we should catch the exceptions
            // from the valid snapshot and continue
            // until we find a valid one
            try {
                if (SnapStream.isValidSnapshot(f)) {
                    list.add(f);
                    count++;
                    if (count == n) {
                        break;
                    }
                }
            } catch (IOException e) {
                LOG.warn(""invalid snapshot {}"", f, e);
            }
        }
        return list;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,findNRecentSnapshots,List<File> findNRecentSnapshots(int),"[197, 211]","{'A583': [(201, 202), (204, 204)], 'A591': [(197, 197), (203, 203), (209, 211)], 'A734': [(198, 198), (205, 205)], 'A605': [(200, 200)], 'A736': [(199, 199), (206, 208)]}","{'A583': 0.2, 'A591': 0.3333333333333333, 'A734': 0.13333333333333333, 'A605': 0.06666666666666667, 'A736': 0.26666666666666666}",A591,,"    public List<File> findNRecentSnapshots(int n) throws IOException {
        List<File> files = Util.sortDataDir(snapDir.listFiles(), SNAPSHOT_FILE_PREFIX, false);
        int count = 0;
        List<File> list = new ArrayList<>();
        for (File f : files) {
            if (count == n) {
                break;
            }
            if (Util.getZxidFromName(f.getName(), SNAPSHOT_FILE_PREFIX) != -1) {
                count++;
                list.add(f);
            }
        }
        return list;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,serialize,"void serialize(DataTree,Map<Long, Integer>,OutputArchive,FileHeader)","[221, 233]","{'A583': [(221, 225), (228, 230), (232, 232)], 'A590': [(227, 227), (231, 231), (233, 233)], 'A591': [(226, 226)]}","{'A583': 0.6923076923076923, 'A590': 0.23076923076923078, 'A591': 0.07692307692307693}",A583,,"    protected void serialize(
        DataTree dt,
        Map<Long, Integer> sessions,
        OutputArchive oa,
        FileHeader header) throws IOException {
        // this is really a programmatic error and not something that can
        // happen at runtime
        if (header == null) {
            throw new IllegalStateException(""Snapshot's not open for writing: uninitialized header"");
        }
        header.serialize(oa, ""fileheader"");
        SerializeUtils.serializeSnapshot(dt, oa, sessions);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,serialize,"void serialize(DataTree,Map<Long, Integer>,File,boolean)","[242, 276]","{'A583': [(242, 246), (255, 255), (270, 271)], 'A647': [(269, 269)], 'A596': [(247, 247), (275, 276)], 'A646': [(250, 251), (272, 272)], 'A612': [(253, 254), (256, 263)], 'A694': [(249, 249), (252, 252)], 'A726': [(264, 268)], 'A658': [(248, 248)], 'A613': [(273, 274)]}","{'A583': 0.22857142857142856, 'A647': 0.02857142857142857, 'A596': 0.08571428571428572, 'A646': 0.08571428571428572, 'A612': 0.2857142857142857, 'A694': 0.05714285714285714, 'A726': 0.14285714285714285, 'A658': 0.02857142857142857, 'A613': 0.05714285714285714}",A612,,"    public synchronized void serialize(
        DataTree dt,
        Map<Long, Integer> sessions,
        File snapShot,
        boolean fsync) throws IOException {
        if (!close) {
            try (CheckedOutputStream snapOS = SnapStream.getOutputStream(snapShot, fsync)) {
                OutputArchive oa = BinaryOutputArchive.getArchive(snapOS);
                FileHeader header = new FileHeader(SNAP_MAGIC, VERSION, dbId);
                serialize(dt, sessions, oa, header);
                SnapStream.sealStream(snapOS, oa);

                // Digest feature was added after the CRC to make it backward
                // compatible, the older code cal still read snapshots which
                // includes digest.
                //
                // To check the intact, after adding digest we added another
                // CRC check.
                if (dt.serializeZxidDigest(oa)) {
                    SnapStream.sealStream(snapOS, oa);
                }

                // serialize the last processed zxid and add another CRC check
                if (dt.serializeLastProcessedZxid(oa)) {
                    SnapStream.sealStream(snapOS, oa);
                }

                lastSnapshotInfo = new SnapshotInfo(
                    Util.getZxidFromName(snapShot.getName(), SNAPSHOT_FILE_PREFIX),
                    snapShot.lastModified() / 1000);
            }
        } else {
            throw new IOException(""FileSnap has already been closed"");
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileSnap.java,FileSnap,close,void close(),"[283, 286]","{'A590': [(286, 286)], 'A596': [(283, 285)]}","{'A590': 0.25, 'A596': 0.75}",A596,,"    @Override
    public synchronized void close() throws IOException {
        close = true;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit.TxnLogToolkitException,getExitCode,int getExitCode(),"[82, 84]","{'A613': [(82, 84)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"        int getExitCode() {
            return exitCode;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit.TxnLogToolkitParseException,getOptions,Options getOptions(),"[98, 100]","{'A613': [(98, 100)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"        Options getOptions() {
            return options;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,main,void main(String[]),"[124, 139]","{'A613': [(124, 125), (132, 136), (138, 139)], 'A647': [(126, 131)], 'A584': [(137, 137)]}","{'A613': 0.5625, 'A647': 0.375, 'A584': 0.0625}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    public static void main(String[] args) throws Exception {
        try (final TxnLogToolkit lt = parseCommandLine(args)) {
            if (lt.isDumpMode()) {
                lt.dump(new Scanner(System.in));
                lt.printStat();
            } else {
                lt.chop();
            }
        } catch (TxnLogToolkitParseException e) {
            System.err.println(e.getMessage() + ""\n"");
            printHelpAndExit(e.getExitCode(), e.getOptions());
        } catch (TxnLogToolkitException e) {
            System.err.println(e.getMessage());
            ServiceUtils.requestSystemExit(e.getExitCode());
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,loadTxnFile,File loadTxnFile(String),"[171, 180]","{'A583': [(174, 177)], 'A647': [(171, 173), (178, 180)]}","{'A583': 0.4, 'A647': 0.6}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private File loadTxnFile(String txnLogFileName) throws TxnLogToolkitException {
        File logFile = new File(txnLogFileName);
        if (!logFile.exists() || !logFile.canRead()) {
            throw new TxnLogToolkitException(
                ExitCode.UNEXPECTED_ERROR.getValue(),
                ""File doesn't exist or not readable: %s"",
                logFile);
        }
        return logFile;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,dump,void dump(Scanner),"[182, 252]","{'A583': [(188, 191), (193, 194), (248, 248)], 'A613': [(182, 187), (192, 192), (195, 241), (243, 247), (249, 252)], 'A609': [(242, 242)]}","{'A583': 0.09859154929577464, 'A613': 0.8873239436619719, 'A609': 0.014084507042253521}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    public void dump(Scanner scanner) throws Exception {
        crcFixed = 0;

        FileHeader fhdr = new FileHeader();
        fhdr.deserialize(logStream, ""fileheader"");
        if (fhdr.getMagic() != TXNLOG_MAGIC) {
            throw new TxnLogToolkitException(
                ExitCode.INVALID_INVOCATION.getValue(),
                ""Invalid magic number for %s"",
                txnLogFile.getName());
        }
        System.out.println(""ZooKeeper Transactional Log File with dbid "" + fhdr.getDbid()
                           + "" txnlog format version "" + fhdr.getVersion());

        if (recoveryMode) {
            fhdr.serialize(recoveryOa, ""fileheader"");
            recoveryFos.flush();
            filePadding.setCurrentSize(recoveryFos.getChannel().position());
        }

        int count = 0;
        while (true) {
            long crcValue;
            byte[] bytes;
            try {
                crcValue = logStream.readLong(""crcvalue"");
                bytes = logStream.readBuffer(""txnEntry"");
            } catch (EOFException e) {
                System.out.println(""EOF reached after "" + count + "" txns."");
                return;
            }
            if (bytes.length == 0) {
                // Since we preallocate, we define EOF to be an
                // empty transaction
                System.out.println(""EOF reached after "" + count + "" txns."");
                return;
            }
            Checksum crc = new Adler32();
            crc.update(bytes, 0, bytes.length);
            if (crcValue != crc.getValue()) {
                if (recoveryMode) {
                    if (!force) {
                        printTxn(bytes, ""CRC ERROR"");
                        if (askForFix(scanner)) {
                            crcValue = crc.getValue();
                            ++crcFixed;
                        }
                    } else {
                        crcValue = crc.getValue();
                        printTxn(bytes, ""CRC FIXED"");
                        ++crcFixed;
                    }
                } else {
                    printTxn(bytes, ""CRC ERROR"");
                }
            }
            if (!recoveryMode || verbose) {
                printTxn(bytes);
            }
            if (logStream.readByte(""EOR"") != 'B') {
                throw new TxnLogToolkitException(ExitCode.UNEXPECTED_ERROR.getValue(), ""Last transaction was partial."");
            }
            if (recoveryMode) {
                filePadding.padFile(recoveryFos.getChannel());
                recoveryOa.writeLong(crcValue, ""crcvalue"");
                recoveryOa.writeBuffer(bytes, ""txnEntry"");
                recoveryOa.writeByte((byte) 'B', ""EOR"");
            }
            count++;
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,chop,void chop(),"[254, 267]","{'A583': [(256, 257), (259, 262)], 'A647': [(254, 255), (258, 258), (263, 267)]}","{'A583': 0.42857142857142855, 'A647': 0.5714285714285714}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    public void chop() {
        File targetFile = new File(txnLogFile.getParentFile(), txnLogFile.getName() + "".chopped"" + zxid);
        try (InputStream is = new BufferedInputStream(new FileInputStream(txnLogFile));
             OutputStream os = new BufferedOutputStream(new FileOutputStream(targetFile))) {
            if (!LogChopper.chop(is, os, zxid)) {
                throw new TxnLogToolkitException(
                    ExitCode.INVALID_INVOCATION.getValue(),
                    ""Failed to chop %s"",
                    txnLogFile.getName());
            }
        } catch (Exception e) {
            System.out.println(""Got exception: "" + e.getMessage());
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,isDumpMode,boolean isDumpMode(),"[269, 271]","{'A647': [(269, 271)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    public boolean isDumpMode() {
        return zxid < 0;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,askForFix,boolean askForFix(Scanner),"[273, 286]","{'A583': [(278, 283)], 'A613': [(273, 277), (284, 286)]}","{'A583': 0.42857142857142855, 'A613': 0.5714285714285714}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private boolean askForFix(Scanner scanner) throws TxnLogToolkitException {
        while (true) {
            System.out.print(""Would you like to fix it (Yes/No/Abort) ? "");
            char answer = Character.toUpperCase(scanner.next().charAt(0));
            switch (answer) {
            case 'Y':
                return true;
            case 'N':
                return false;
            case 'A':
                throw new TxnLogToolkitException(ExitCode.EXECUTION_FINISHED.getValue(), ""Recovery aborted."");
            }
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,printTxn,void printTxn(byte[]),"[288, 290]","{'A613': [(288, 290)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void printTxn(byte[] bytes) throws IOException {
        printTxn(bytes, """");
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,printTxn,"void printTxn(byte[],String)","[292, 313]","{'A583': [(297, 302), (304, 304)], 'A613': [(292, 292), (305, 313)], 'A641': [(296, 296), (303, 303)], 'A612': [(293, 295)]}","{'A583': 0.3181818181818182, 'A613': 0.45454545454545453, 'A641': 0.09090909090909091, 'A612': 0.13636363636363635}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void printTxn(byte[] bytes, String prefix) throws IOException {
        TxnLogEntry logEntry = SerializeUtils.deserializeTxn(bytes);
        TxnHeader hdr = logEntry.getHeader();
        Record txn = logEntry.getTxn();
        String txnStr = getFormattedTxnStr(txn);
        String txns = String.format(
            ""%s session 0x%s cxid 0x%s zxid 0x%s %s %s"",
            DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG).format(new Date(hdr.getTime())),
            Long.toHexString(hdr.getClientId()),
            Long.toHexString(hdr.getCxid()),
            Long.toHexString(hdr.getZxid()),
                Request.op2String(hdr.getType()),
            txnStr);
        if (prefix != null && !"""".equals(prefix.trim())) {
            System.out.print(prefix + "" - "");
        }
        if (txns.endsWith(""\n"")) {
            System.out.print(txns);
        } else {
            System.out.println(txns);
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,getFormattedTxnStr,String getFormattedTxnStr(Record),"[322, 372]","{'A583': [(354, 354)], 'A595': [(357, 357), (359, 363), (368, 368)], 'A652': [(322, 322), (345, 350), (364, 364)], 'A641': [(323, 344), (351, 353), (355, 356), (358, 358), (365, 367), (369, 372)]}","{'A583': 0.0196078431372549, 'A595': 0.13725490196078433, 'A652': 0.1568627450980392, 'A641': 0.6862745098039216}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    static String getFormattedTxnStr(Record txn) throws IOException {
        StringBuilder txnData = new StringBuilder();
        if (txn == null) {
            return txnData.toString();
        }
        if (txn instanceof CreateTxn) {
            CreateTxn createTxn = ((CreateTxn) txn);
            txnData.append(createTxn.getPath() + "","" + checkNullToEmpty(createTxn.getData()))
                   .append("","" + createTxn.getAcl() + "","" + createTxn.getEphemeral())
                   .append("","" + createTxn.getParentCVersion());
        } else if (txn instanceof SetDataTxn) {
            SetDataTxn setDataTxn = ((SetDataTxn) txn);
            txnData.append(setDataTxn.getPath() + "","" + checkNullToEmpty(setDataTxn.getData()))
                   .append("","" + setDataTxn.getVersion());
        } else if (txn instanceof CreateContainerTxn) {
            CreateContainerTxn createContainerTxn = ((CreateContainerTxn) txn);
            txnData.append(createContainerTxn.getPath() + "","" + checkNullToEmpty(createContainerTxn.getData()))
                   .append("","" + createContainerTxn.getAcl() + "","" + createContainerTxn.getParentCVersion());
        } else if (txn instanceof CreateTTLTxn) {
            CreateTTLTxn createTTLTxn = ((CreateTTLTxn) txn);
            txnData.append(createTTLTxn.getPath() + "","" + checkNullToEmpty(createTTLTxn.getData()))
                   .append("","" + createTTLTxn.getAcl() + "","" + createTTLTxn.getParentCVersion())
                   .append("","" + createTTLTxn.getTtl());
        } else if (txn instanceof DeleteTxn) {
            DeleteTxn deleteTxn = ((DeleteTxn) txn);
            txnData.append(deleteTxn.getPath());
        } else if (txn instanceof CheckVersionTxn) {
            CheckVersionTxn checkVersionTxn = ((CheckVersionTxn) txn);
            txnData.append(checkVersionTxn.getPath()).append("","").append(checkVersionTxn.getVersion());
        } else if (txn instanceof MultiTxn) {
            MultiTxn multiTxn = ((MultiTxn) txn);
            List<Txn> txnList = multiTxn.getTxns();
            for (int i = 0; i < txnList.size(); i++) {
                Txn t = txnList.get(i);
                if (i == 0) {
                    txnData.append(Request.op2String(t.getType())).append("":"");
                } else {
                    txnData.append("";"").append(Request.op2String(t.getType())).append("":"");
                }
                if (t.getType() == ZooDefs.OpCode.error) {
                    txnData.append(ByteBuffer.wrap(t.getData()).getInt());
                } else {
                    txnData.append(getFormattedTxnStr(deserializeSubTxn(t)));
                }
            }
        } else {
            txnData.append(txn);
        }

        return txnData.toString();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,deserializeSubTxn,Record deserializeSubTxn(Txn),"[374, 406]","{'A652': [(374, 406)]}",{'A652': 1.0},A652,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private static Record deserializeSubTxn(Txn txn) throws IOException {
        Record record;
        switch (txn.getType()) {
            case ZooDefs.OpCode.create:
            case ZooDefs.OpCode.create2:
                record = new CreateTxn();
                break;
            case ZooDefs.OpCode.createTTL:
                record = new CreateTTLTxn();
                break;
            case ZooDefs.OpCode.createContainer:
                record = new CreateContainerTxn();
                break;
            case ZooDefs.OpCode.delete:
            case ZooDefs.OpCode.deleteContainer:
                record = new DeleteTxn();
                break;
            case ZooDefs.OpCode.setData:
                record = new SetDataTxn();
                break;
            case ZooDefs.OpCode.error:
                record = new ErrorTxn();
                break;
            case ZooDefs.OpCode.check:
                record = new CheckVersionTxn();
                break;
            default:
                throw new IOException(""Unsupported Txn with type="" + txn.getType());
        }
        ByteBuffer bb = ByteBuffer.wrap(txn.getData());
        ByteBufferInputStream.byteBuffer2Record(bb, record);
        return record;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,checkNullToEmpty,String checkNullToEmpty(byte[]),"[408, 414]","{'A583': [(413, 413)], 'A595': [(408, 408)], 'A641': [(409, 412), (414, 414)]}","{'A583': 0.14285714285714285, 'A595': 0.14285714285714285, 'A641': 0.7142857142857143}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private static String checkNullToEmpty(byte[] data) {
        if (data == null || data.length == 0) {
            return """";
        }

        return new String(data, StandardCharsets.UTF_8);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,openTxnLogFile,void openTxnLogFile(),"[416, 419]","{'A613': [(416, 419)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void openTxnLogFile() throws FileNotFoundException {
        txnFis = new FileInputStream(txnLogFile);
        logStream = BinaryInputArchive.getArchive(txnFis);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,closeTxnLogFile,void closeTxnLogFile(),"[421, 425]","{'A613': [(421, 425)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void closeTxnLogFile() throws IOException {
        if (txnFis != null) {
            txnFis.close();
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,openRecoveryFile,void openRecoveryFile(),"[427, 430]","{'A613': [(427, 430)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void openRecoveryFile() throws FileNotFoundException {
        recoveryFos = new FileOutputStream(recoveryLogFile);
        recoveryOa = BinaryOutputArchive.getArchive(recoveryFos);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,closeRecoveryFile,void closeRecoveryFile(),"[432, 436]","{'A613': [(432, 436)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void closeRecoveryFile() throws IOException {
        if (recoveryFos != null) {
            recoveryFos.close();
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,parseCommandLine,TxnLogToolkit parseCommandLine(String[]),"[438, 478]","{'A613': [(438, 438), (440, 450), (452, 456), (463, 470), (474, 475), (477, 478)], 'A603': [(439, 439)], 'A609': [(476, 476)], 'A641': [(451, 451)], 'A647': [(457, 462), (471, 473)]}","{'A613': 0.7073170731707317, 'A603': 0.024390243902439025, 'A609': 0.024390243902439025, 'A641': 0.024390243902439025, 'A647': 0.21951219512195122}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private static TxnLogToolkit parseCommandLine(String[] args) throws TxnLogToolkitException, FileNotFoundException {
        CommandLineParser parser = new DefaultParser();
        Options options = new Options();

        Option helpOpt = new Option(""h"", ""help"", false, ""Print help message"");
        options.addOption(helpOpt);

        Option recoverOpt = new Option(""r"", ""recover"", false, ""Recovery mode. Re-calculate CRC for broken entries."");
        options.addOption(recoverOpt);

        Option quietOpt = new Option(""v"", ""verbose"", false, ""Be verbose in recovery mode: print all entries, not just fixed ones."");
        options.addOption(quietOpt);

        Option dumpOpt = new Option(""d"", ""dump"", false, ""Dump mode. Dump all entries of the log file with printing the content of a nodepath (default)"");
        options.addOption(dumpOpt);

        Option forceOpt = new Option(""y"", ""yes"", false, ""Non-interactive mode: repair all CRC errors without asking"");
        options.addOption(forceOpt);

        // Chop mode options
        Option chopOpt = new Option(""c"", ""chop"", false, ""Chop mode. Chop txn file to a zxid."");
        Option zxidOpt = new Option(""z"", ""zxid"", true, ""Used with chop. Zxid to which to chop."");
        options.addOption(chopOpt);
        options.addOption(zxidOpt);

        try {
            CommandLine cli = parser.parse(options, args);
            if (cli.hasOption(""help"")) {
                printHelpAndExit(0, options);
            }
            if (cli.getArgs().length < 1) {
                printHelpAndExit(1, options);
            }
            if (cli.hasOption(""chop"") && cli.hasOption(""zxid"")) {
                return new TxnLogToolkit(cli.getArgs()[0], cli.getOptionValue(""zxid""));
            }
            return new TxnLogToolkit(cli.hasOption(""recover""), cli.hasOption(""verbose""), cli.getArgs()[0], cli.hasOption(""yes""));
        } catch (ParseException e) {
            throw new TxnLogToolkitParseException(options, ExitCode.UNEXPECTED_ERROR.getValue(), e.getMessage());
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,printHelpAndExit,"void printHelpAndExit(int,Options)","[480, 484]","{'A583': [(482, 482)], 'A613': [(480, 481), (484, 484)], 'A584': [(483, 483)]}","{'A583': 0.2, 'A613': 0.6, 'A584': 0.2}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private static void printHelpAndExit(int exitCode, Options options) {
        HelpFormatter help = new HelpFormatter();
        help.printHelp(120, ""TxnLogToolkit [-dhrvc] <txn_log_file_name> (-z <zxid>)"", """", options, """");
        ServiceUtils.requestSystemExit(exitCode);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,printStat,void printStat(),"[486, 490]","{'A613': [(486, 490)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    private void printStat() {
        if (recoveryMode) {
            System.out.printf(""Recovery file %s has been written with %d fixed CRC error(s)%n"", recoveryLogFile, crcFixed);
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java,TxnLogToolkit,close,void close(),"[492, 498]","{'A613': [(492, 498)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/TxnLogToolkitTest.java,"    @Override
    public void close() throws IOException {
        if (recoveryMode) {
            closeRecoveryFile();
        }
        closeTxnLogFile();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java,FilePadding,getPreAllocSize,long getPreAllocSize(),"[51, 53]","{'A613': [(51, 53)]}",{'A613': 1.0},A613,,"    public static long getPreAllocSize() {
        return preAllocSize;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java,FilePadding,setPreallocSize,void setPreallocSize(long),"[61, 63]","{'A613': [(61, 63)]}",{'A613': 1.0},A613,,"    public static void setPreallocSize(long size) {
        preAllocSize = size;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java,FilePadding,setCurrentSize,void setCurrentSize(long),"[65, 67]","{'A613': [(65, 67)]}",{'A613': 1.0},A613,,"    public void setCurrentSize(long currentSize) {
        this.currentSize = currentSize;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java,FilePadding,padFile,long padFile(FileChannel),"[75, 77]","{'A613': [(75, 75)], 'A595': [(76, 77)]}","{'A613': 0.3333333333333333, 'A595': 0.6666666666666666}",A595,,"    long padFile(FileChannel fileChannel) throws IOException {
        return this.padFile(fileChannel, fileChannel.position());
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java,FilePadding,padFile,"long padFile(FileChannel,long)","[79, 86]","{'A613': [(81, 86)], 'A595': [(79, 80)]}","{'A613': 0.75, 'A595': 0.25}",A613,,"    long padFile(FileChannel fileChannel, long position) throws IOException {
        long newFileSize = calculateFileSizeWithPadding(position, currentSize, preAllocSize);
        if (currentSize != newFileSize) {
            fileChannel.write((ByteBuffer) fill.position(0), newFileSize - fill.remaining());
            currentSize = newFileSize;
        }
        return currentSize;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FilePadding.java,FilePadding,calculateFileSizeWithPadding,"long calculateFileSizeWithPadding(long,long,long)","[101, 115]","{'A613': [(101, 115)]}",{'A613': 1.0},A613,,"    public static long calculateFileSizeWithPadding(long position, long fileSize, long preAllocSize) {
        // If preAllocSize is positive and we are within 4KB of the known end of the file calculate a new file size
        if (preAllocSize > 0 && position + 4096 >= fileSize) {
            // If we have written more than we have previously preallocated we need to make sure the new
            // file size is larger than what we already have
            if (position > fileSize) {
                fileSize = position + preAllocSize;
                fileSize -= fileSize % preAllocSize;
            } else {
                fileSize += preAllocSize;
            }
        }

        return fileSize;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream.StreamMode,getName,String getName(),"[77, 79]","{'A694': [(77, 79)]}",{'A694': 1.0},A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"        public String getName() {
            return name;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream.StreamMode,getFileExtension,String getFileExtension(),"[81, 83]","{'A694': [(81, 83)]}",{'A694': 1.0},A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"        public String getFileExtension() {
            return name.isEmpty() ? """" : ""."" + name;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream.StreamMode,fromString,StreamMode fromString(String),"[85, 92]","{'A694': [(85, 92)]}",{'A694': 1.0},A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"        public static StreamMode fromString(String name) {
            for (StreamMode c : values()) {
                if (c.getName().compareToIgnoreCase(name) == 0) {
                    return c;
                }
            }
            return DEFAULT_MODE;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,getInputStream,CheckedInputStream getInputStream(File),"[102, 122]","{'A694': [(102, 104), (121, 122)], 'A737': [(105, 120)]}","{'A694': 0.23809523809523808, 'A737': 0.7619047619047619}",A737,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static CheckedInputStream getInputStream(File file) throws IOException {
        FileInputStream fis = new FileInputStream(file);
        InputStream is;
        try {
            switch (getStreamMode(file.getName())) {
                case GZIP:
                    is = new GZIPInputStream(fis);
                    break;
                case SNAPPY:
                    is = new SnappyInputStream(fis);
                    break;
                case CHECKED:
                default:
                    is = new BufferedInputStream(fis);
            }
            return new CheckedInputStream(is, new Adler32());
        } catch (IOException e) {
            fis.close();
            throw e;
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,getOutputStream,"CheckedOutputStream getOutputStream(File,boolean)","[132, 154]","{'A583': [(136, 136), (143, 144), (147, 151)], 'A694': [(134, 135), (152, 154)], 'A658': [(132, 133)], 'A737': [(137, 142), (145, 146)]}","{'A583': 0.34782608695652173, 'A694': 0.21739130434782608, 'A658': 0.08695652173913043, 'A737': 0.34782608695652173}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static CheckedOutputStream getOutputStream(File file, boolean fsync) throws IOException {
        OutputStream fos = fsync ? new AtomicFileOutputStream(file) : new FileOutputStream(file);
        OutputStream os;
        switch (streamMode) {
        case GZIP:
            try {
                os = new GZIPOutputStream(fos);
            } catch (IOException e) {
                fos.close();
                throw e;
            }
            break;
        case SNAPPY:
            // Unlike SnappyInputStream, the SnappyOutputStream
            // constructor cannot throw an IOException.
            os = new SnappyOutputStream(fos);
            break;
        case CHECKED:
        default:
            os = new BufferedOutputStream(fos);
        }
        return new CheckedOutputStream(os, new Adler32());
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,sealStream,"void sealStream(CheckedOutputStream,OutputArchive)","[162, 166]","{'A583': [(162, 162)], 'A694': [(163, 166)]}","{'A583': 0.2, 'A694': 0.8}",A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static void sealStream(CheckedOutputStream os, OutputArchive oa) throws IOException {
        long val = os.getChecksum().getValue();
        oa.writeLong(val, ""val"");
        oa.writeString(""/"", ""path"");
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,checkSealIntegrity,"void checkSealIntegrity(CheckedInputStream,InputArchive)","[173, 180]","{'A694': [(174, 175), (177, 180)], 'A726': [(173, 173)], 'A612': [(176, 176)]}","{'A694': 0.75, 'A726': 0.125, 'A612': 0.125}",A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static void checkSealIntegrity(CheckedInputStream is, InputArchive ia) throws IOException {
        long checkSum = is.getChecksum().getValue();
        long val = ia.readLong(""val"");
        ia.readString(""path"");  // Read and ignore ""/"" written by SealStream.
        if (val != checkSum) {
            throw new IOException(""CRC corruption"");
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,isValidSnapshot,boolean isValidSnapshot(File),"[193, 211]","{'A583': [(200, 208)], 'A694': [(193, 198), (209, 211)], 'A604': [(199, 199)]}","{'A583': 0.47368421052631576, 'A694': 0.47368421052631576, 'A604': 0.05263157894736842}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static boolean isValidSnapshot(File file) throws IOException {
        if (file == null || Util.getZxidFromName(file.getName(), FileSnap.SNAPSHOT_FILE_PREFIX) == -1) {
            return false;
        }

        boolean isValid = false;
        switch (getStreamMode(file.getName())) {
        case GZIP:
            isValid = isValidGZipStream(file);
            break;
        case SNAPPY:
            isValid = isValidSnappyStream(file);
            break;
        case CHECKED:
        default:
            isValid = isValidCheckedStream(file);
        }
        return isValid;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,setStreamMode,void setStreamMode(StreamMode),"[213, 215]","{'A694': [(213, 215)]}",{'A694': 1.0},A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static void setStreamMode(StreamMode mode) {
        streamMode = mode;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,getStreamMode,StreamMode getStreamMode(),"[217, 219]","{'A694': [(217, 219)]}",{'A694': 1.0},A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static StreamMode getStreamMode() {
        return streamMode;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,getStreamMode,StreamMode getStreamMode(String),"[227, 237]","{'A694': [(227, 237)]}",{'A694': 1.0},A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    public static StreamMode getStreamMode(String fileName) {
        String[] splitSnapName = fileName.split(""\\."");

        // Use file extension to detect format
        if (splitSnapName.length > 1) {
            String mode = splitSnapName[splitSnapName.length - 1];
            return StreamMode.fromString(mode);
        }

        return StreamMode.CHECKED;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,isValidGZipStream,boolean isValidGZipStream(File),"[247, 263]","{'A583': [(251, 251), (260, 260)], 'A694': [(247, 250), (252, 259), (261, 263)]}","{'A583': 0.11764705882352941, 'A694': 0.8823529411764706}",A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    private static boolean isValidGZipStream(File f) throws IOException {
        byte[] byteArray = new byte[2];
        try (FileInputStream fis = new FileInputStream(f)) {
            if (2 != fis.read(byteArray, 0, 2)) {
                LOG.error(""Read incorrect number of bytes from {}"", f.getName());
                return false;
            }
            ByteBuffer bb = ByteBuffer.wrap(byteArray);
            byte[] magicHeader = new byte[2];
            bb.get(magicHeader, 0, 2);
            int magic = magicHeader[0] & 0xff | ((magicHeader[1] << 8) & 0xff00);
            return magic == GZIPInputStream.GZIP_MAGIC;
        } catch (FileNotFoundException e) {
            LOG.error(""Unable to open file {}"", f.getName(), e);
            return false;
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,isValidSnappyStream,boolean isValidSnappyStream(File),"[273, 288]","{'A583': [(277, 277), (285, 285)], 'A694': [(273, 276), (278, 284), (286, 288)]}","{'A583': 0.125, 'A694': 0.875}",A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    private static boolean isValidSnappyStream(File f) throws IOException {
        byte[] byteArray = new byte[SnappyCodec.MAGIC_LEN];
        try (FileInputStream fis = new FileInputStream(f)) {
            if (SnappyCodec.MAGIC_LEN != fis.read(byteArray, 0, SnappyCodec.MAGIC_LEN)) {
                LOG.error(""Read incorrect number of bytes from {}"", f.getName());
                return false;
            }
            ByteBuffer bb = ByteBuffer.wrap(byteArray);
            byte[] magicHeader = new byte[SnappyCodec.MAGIC_LEN];
            bb.get(magicHeader, 0, SnappyCodec.MAGIC_LEN);
            return Arrays.equals(magicHeader, SnappyCodec.getMagicHeader());
        } catch (FileNotFoundException e) {
            LOG.error(""Unable to open file {}"", f.getName(), e);
            return false;
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/SnapStream.java,SnapStream,isValidCheckedStream,boolean isValidCheckedStream(File),"[298, 327]","{'A583': [(307, 307), (310, 310), (314, 314), (321, 321)], 'A694': [(298, 306), (308, 309), (311, 313), (315, 320), (322, 327)]}","{'A583': 0.13333333333333333, 'A694': 0.8666666666666667}",A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/SnapStreamTest.java,"    private static boolean isValidCheckedStream(File f) throws IOException {
        try (RandomAccessFile raf = new RandomAccessFile(f, ""r"")) {
            // including the header and the last / bytes
            // the snapshot should be at least 10 bytes
            if (raf.length() < 10) {
                return false;
            }

            raf.seek(raf.length() - 5);
            byte[] bytes = new byte[5];
            int readlen = 0;
            int l;
            while (readlen < 5 && (l = raf.read(bytes, readlen, bytes.length - readlen)) >= 0) {
                readlen += l;
            }
            if (readlen != bytes.length) {
                LOG.info(""Invalid snapshot {}. too short, len = {} bytes"", f.getName(), readlen);
                return false;
            }
            ByteBuffer bb = ByteBuffer.wrap(bytes);
            int len = bb.getInt();
            byte b = bb.get();
            if (len != 1 || b != '/') {
                LOG.info(""Invalid snapshot {}. len = {}, byte = {}"", f.getName(), len, (b & 0xff));
                return false;
            }
        }

        return true;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,setServerStats,void setServerStats(ServerStats),"[176, 178]","{'A609': [(176, 178)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public void setServerStats(ServerStats serverStats) {
        txnLog.setServerStats(serverStats);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,checkLogDir,void checkLogDir(),"[180, 191]","{'A583': [(188, 189)], 'A734': [(180, 187), (190, 191)]}","{'A583': 0.16666666666666666, 'A734': 0.8333333333333334}",A734,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    private void checkLogDir() throws LogDirContentCheckException {
        File[] files = this.dataDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return Util.isSnapshotFileName(name);
            }
        });
        if (files != null && files.length > 0) {
            throw new LogDirContentCheckException(
                ""Log directory has snapshot files. Check if dataLogDir and dataDir configuration is correct."");
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,accept,"boolean accept(File,String)","[182, 185]","{'A734': [(182, 185)]}",{'A734': 1.0},A734,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"            @Override
            public boolean accept(File dir, String name) {
                return Util.isSnapshotFileName(name);
            }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,checkSnapDir,void checkSnapDir(),"[193, 204]","{'A583': [(201, 202)], 'A734': [(193, 200), (203, 204)]}","{'A583': 0.16666666666666666, 'A734': 0.8333333333333334}",A734,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    private void checkSnapDir() throws SnapDirContentCheckException {
        File[] files = this.snapDir.listFiles(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return Util.isLogFileName(name);
            }
        });
        if (files != null && files.length > 0) {
            throw new SnapDirContentCheckException(
                ""Snapshot directory has log files. Check if dataLogDir and dataDir configuration is correct."");
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,accept,"boolean accept(File,String)","[195, 198]","{'A734': [(195, 198)]}",{'A734': 1.0},A734,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"            @Override
            public boolean accept(File dir, String name) {
                return Util.isLogFileName(name);
            }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getDataLogDir,File getDataLogDir(),"[211, 213]","{'A591': [(212, 213)], 'A726': [(211, 211)]}","{'A591': 0.6666666666666666, 'A726': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public File getDataLogDir() {
        return this.dataDir;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getSnapDir,File getSnapDir(),"[220, 222]","{'A591': [(220, 222)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public File getSnapDir() {
        return this.snapDir;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getLastSnapshotInfo,SnapshotInfo getLastSnapshotInfo(),"[228, 230]","{'A647': [(228, 230)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public SnapshotInfo getLastSnapshotInfo() {
        return this.snapLog.getLastSnapshotInfo();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,shouldForceWriteInitialSnapshotAfterLeaderElection,boolean shouldForceWriteInitialSnapshotAfterLeaderElection(),"[237, 239]","{'A727': [(237, 239)]}",{'A727': 1.0},A727,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public boolean shouldForceWriteInitialSnapshotAfterLeaderElection() {
        return trustEmptySnapshot && getLastSnapshotInfo() == null;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,restore,"long restore(DataTree,Map<Long, Integer>,PlayBackListener)","[252, 313]","{'A583': [(252, 252), (255, 255), (292, 292), (300, 300)], 'A590': [(254, 254), (256, 256), (283, 286), (295, 295), (310, 310)], 'A647': [(257, 264), (296, 299), (301, 309)], 'A675': [(253, 253)], 'A612': [(311, 311)], 'A604': [(265, 282), (287, 291), (293, 294), (312, 312)], 'A664': [(313, 313)]}","{'A583': 0.06451612903225806, 'A590': 0.12903225806451613, 'A647': 0.3387096774193548, 'A675': 0.016129032258064516, 'A612': 0.016129032258064516, 'A604': 0.41935483870967744, 'A664': 0.016129032258064516}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public long restore(DataTree dt, Map<Long, Integer> sessions, PlayBackListener listener) throws IOException {
        long snapLoadingStartTime = Time.currentElapsedTime();
        long deserializeResult = snapLog.deserialize(dt, sessions);
        ServerMetrics.getMetrics().STARTUP_SNAP_LOAD_TIME.add(Time.currentElapsedTime() - snapLoadingStartTime);
        FileTxnLog txnLog = new FileTxnLog(dataDir);
        boolean trustEmptyDB;
        File initFile = new File(dataDir.getParent(), ""initialize"");
        if (Files.deleteIfExists(initFile.toPath())) {
            LOG.info(""Initialize file found, an empty database will not block voting participation"");
            trustEmptyDB = true;
        } else {
            trustEmptyDB = autoCreateDB;
        }

        RestoreFinalizer finalizer = () -> {
            long highestZxid = fastForwardFromEdits(dt, sessions, listener);
            // The snapshotZxidDigest will reset after replaying the txn of the
            // zxid in the snapshotZxidDigest, if it's not reset to null after
            // restoring, it means either there are not enough txns to cover that
            // zxid or that txn is missing
            DataTree.ZxidDigest snapshotZxidDigest = dt.getDigestFromLoadedSnapshot();
            if (snapshotZxidDigest != null) {
                LOG.warn(
                        ""Highest txn zxid 0x{} is not covering the snapshot digest zxid 0x{}, ""
                                + ""which might lead to inconsistent state"",
                        Long.toHexString(highestZxid),
                        Long.toHexString(snapshotZxidDigest.getZxid()));
            }
            return highestZxid;
        };

        if (-1L == deserializeResult) {
            /* this means that we couldn't find any snapshot, so we need to
             * initialize an empty database (reported in ZOOKEEPER-2325) */
            if (txnLog.getLastLoggedZxid() != -1) {
                // ZOOKEEPER-3056: provides an escape hatch for users upgrading
                // from old versions of zookeeper (3.4.x, pre 3.5.3).
                if (!trustEmptySnapshot) {
                    throw new IOException(EMPTY_SNAPSHOT_WARNING + ""Something is broken!"");
                } else {
                    LOG.warn(""{}This should only be allowed during upgrading."", EMPTY_SNAPSHOT_WARNING);
                    return finalizer.run();
                }
            }

            if (trustEmptyDB) {
                /* TODO: (br33d) we should either put a ConcurrentHashMap on restore()
                 *       or use Map on save() */
                save(dt, (ConcurrentHashMap<Long, Integer>) sessions, false);

                /* return a zxid of 0, since we know the database is empty */
                return 0L;
            } else {
                /* return a zxid of -1, since we are possibly missing data */
                LOG.warn(""Unexpected empty data tree, setting zxid to -1"");
                dt.lastProcessedZxid = -1L;
                return -1L;
            }
        }

        return finalizer.run();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,fastForwardFromEdits,"long fastForwardFromEdits(DataTree,Map<Long, Integer>,PlayBackListener)","[326, 377]","{'A583': [(326, 330), (345, 345), (350, 350), (353, 358), (361, 361), (363, 363)], 'A590': [(331, 332), (364, 364), (368, 369), (376, 377)], 'A675': [(333, 334), (352, 352), (370, 375)], 'A612': [(351, 351), (360, 360)], 'A597': [(335, 344), (346, 349), (359, 359), (362, 362), (365, 367)]}","{'A583': 0.28846153846153844, 'A590': 0.1346153846153846, 'A675': 0.17307692307692307, 'A612': 0.038461538461538464, 'A597': 0.36538461538461536}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public long fastForwardFromEdits(
        DataTree dt,
        Map<Long, Integer> sessions,
        PlayBackListener listener) throws IOException {
        TxnIterator itr = txnLog.read(dt.lastProcessedZxid + 1);
        long highestZxid = dt.lastProcessedZxid;
        TxnHeader hdr;
        int txnLoaded = 0;
        long startTime = Time.currentElapsedTime();
        try {
            while (true) {
                // iterator points to
                // the first valid txn when initialized
                hdr = itr.getHeader();
                if (hdr == null) {
                    //empty logs
                    return dt.lastProcessedZxid;
                }
                if (hdr.getZxid() < highestZxid && highestZxid != 0) {
                    LOG.error(""{}(highestZxid) > {}(next log) for type {}"", highestZxid, hdr.getZxid(), hdr.getType());
                } else {
                    highestZxid = hdr.getZxid();
                }
                try {
                    processTransaction(hdr, dt, sessions, itr.getTxn());
                    dt.compareDigest(hdr, itr.getTxn(), itr.getDigest());
                    txnLoaded++;
                } catch (KeeperException.NoNodeException e) {
                    throw new IOException(""Failed to process transaction type: ""
                                          + hdr.getType()
                                          + "" error: ""
                                          + e.getMessage(),
                                          e);
                }
                listener.onTxnLoaded(hdr, itr.getTxn(), itr.getDigest());
                if (!itr.next()) {
                    break;
                }
            }
        } finally {
            if (itr != null) {
                itr.close();
            }
        }

        long loadTime = Time.currentElapsedTime() - startTime;
        LOG.info(""{} txns loaded in {} ms"", txnLoaded, loadTime);
        ServerMetrics.getMetrics().STARTUP_TXNS_LOADED.add(txnLoaded);
        ServerMetrics.getMetrics().STARTUP_TXNS_LOAD_TIME.add(loadTime);

        return highestZxid;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,readTxnLog,TxnIterator readTxnLog(long),"[386, 388]","{'A648': [(386, 388)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public TxnIterator readTxnLog(long zxid) throws IOException {
        return readTxnLog(zxid, true);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,readTxnLog,"TxnIterator readTxnLog(long,boolean)","[400, 403]","{'A583': [(400, 400)], 'A648': [(401, 403)]}","{'A583': 0.25, 'A648': 0.75}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public TxnIterator readTxnLog(long zxid, boolean fastForward) throws IOException {
        FileTxnLog txnLog = new FileTxnLog(dataDir);
        return txnLog.read(zxid, fastForward);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,processTransaction,"void processTransaction(TxnHeader,DataTree,Map<Long, Integer>,Record)","[412, 454]","{'A583': [(412, 416), (420, 420), (422, 426), (434, 437), (445, 445), (452, 452)], 'A590': [(418, 419), (428, 428), (430, 432), (440, 441), (454, 454)], 'A591': [(446, 449)], 'A639': [(417, 417), (429, 429), (439, 439), (442, 444)], 'A600': [(451, 451)], 'A596': [(421, 421), (427, 427), (433, 433), (438, 438), (450, 450), (453, 453)]}","{'A583': 0.3953488372093023, 'A590': 0.20930232558139536, 'A591': 0.09302325581395349, 'A639': 0.13953488372093023, 'A600': 0.023255813953488372, 'A596': 0.13953488372093023}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public void processTransaction(
        TxnHeader hdr,
        DataTree dt,
        Map<Long, Integer> sessions,
        Record txn) throws KeeperException.NoNodeException {
        ProcessTxnResult rc;
        switch (hdr.getType()) {
        case OpCode.createSession:
            sessions.put(hdr.getClientId(), ((CreateSessionTxn) txn).getTimeOut());
            if (LOG.isTraceEnabled()) {
                ZooTrace.logTraceMessage(
                    LOG,
                    ZooTrace.SESSION_TRACE_MASK,
                    ""playLog --- create session in log: 0x"" + Long.toHexString(hdr.getClientId())
                    + "" with timeout: "" + ((CreateSessionTxn) txn).getTimeOut());
            }
            // give dataTree a chance to sync its lastProcessedZxid
            rc = dt.processTxn(hdr, txn);
            break;
        case OpCode.closeSession:
            sessions.remove(hdr.getClientId());
            if (LOG.isTraceEnabled()) {
                ZooTrace.logTraceMessage(
                    LOG,
                    ZooTrace.SESSION_TRACE_MASK,
                    ""playLog --- close session in log: 0x"" + Long.toHexString(hdr.getClientId()));
            }
            rc = dt.processTxn(hdr, txn);
            break;
        default:
            rc = dt.processTxn(hdr, txn);
        }

        /*
         * Snapshots are lazily created. So when a snapshot is in progress,
         * there is a chance for later transactions to make into the
         * snapshot. Then when the snapshot is restored, NONODE/NODEEXISTS
         * errors could occur. It should be safe to ignore these.
         */
        if (rc.err != Code.OK.intValue()) {
            LOG.debug(""Ignoring processTxn failure hdr: {}, error: {}, path: {}"", hdr.getType(), rc.err, rc.path);
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getLastLoggedZxid,long getLastLoggedZxid(),"[460, 463]","{'A590': [(460, 463)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public long getLastLoggedZxid() {
        FileTxnLog txnLog = new FileTxnLog(dataDir);
        return txnLog.getLastLoggedZxid();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,save,"File save(DataTree,ConcurrentHashMap<Long, Integer>,boolean)","[474, 504]","{'A583': [(475, 477), (480, 480), (492, 492), (494, 494)], 'A590': [(478, 478), (504, 504)], 'A647': [(481, 482), (484, 491), (493, 493), (495, 503)], 'A596': [(479, 479)], 'A726': [(474, 474), (483, 483)]}","{'A583': 0.1935483870967742, 'A590': 0.06451612903225806, 'A647': 0.6451612903225806, 'A596': 0.03225806451612903, 'A726': 0.06451612903225806}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public File save(
        DataTree dataTree,
        ConcurrentHashMap<Long, Integer> sessionsWithTimeouts,
        boolean syncSnap) throws IOException {
        long lastZxid = dataTree.lastProcessedZxid;
        File snapshotFile = new File(snapDir, Util.makeSnapshotName(lastZxid));
        LOG.info(""Snapshotting: 0x{} to {}"", Long.toHexString(lastZxid), snapshotFile);
        try {
            snapLog.serialize(dataTree, sessionsWithTimeouts, snapshotFile, syncSnap);
            return snapshotFile;
        } catch (IOException e) {
            if (snapshotFile.length() == 0) {
                /* This may be caused by a full disk. In such a case, the server
                 * will get stuck in a loop where it tries to write a snapshot
                 * out to disk, and ends up creating an empty file instead.
                 * Doing so will eventually result in valid snapshots being
                 * removed during cleanup. */
                if (snapshotFile.delete()) {
                    LOG.info(""Deleted empty snapshot file: {}"", snapshotFile.getAbsolutePath());
                } else {
                    LOG.warn(""Could not delete empty snapshot file: {}"", snapshotFile.getAbsolutePath());
                }
            } else {
                /* Something else went wrong when writing the snapshot out to
                 * disk. If this snapshot file is invalid, when restarting,
                 * ZooKeeper will skip it, and find the last known good snapshot
                 * instead. */
            }
            throw e;
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,truncateLog,boolean truncateLog(long),"[513, 535]","{'A590': [(535, 535)], 'A613': [(513, 534)]}","{'A590': 0.043478260869565216, 'A613': 0.9565217391304348}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public boolean truncateLog(long zxid) {
        try {
            // close the existing txnLog and snapLog
            close();

            // truncate it
            try (FileTxnLog truncLog = new FileTxnLog(dataDir)) {
                boolean truncated = truncLog.truncate(zxid);

                // re-open the txnLog and snapLog
                // I'd rather just close/reopen this object itself, however that
                // would have a big impact outside ZKDatabase as there are other
                // objects holding a reference to this object.
                txnLog = new FileTxnLog(dataDir);
                snapLog = new FileSnap(snapDir);

                return truncated;
            }
        } catch (IOException e) {
            LOG.error(""Unable to truncate Txn log"", e);
            return false;
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,findMostRecentSnapshot,File findMostRecentSnapshot(),"[544, 547]","{'A590': [(544, 547)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public File findMostRecentSnapshot() throws IOException {
        FileSnap snaplog = new FileSnap(snapDir);
        return snaplog.findMostRecentSnapshot();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,findNRecentSnapshots,List<File> findNRecentSnapshots(int),"[556, 559]","{'A591': [(556, 559)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public List<File> findNRecentSnapshots(int n) throws IOException {
        FileSnap snaplog = new FileSnap(snapDir);
        return snaplog.findNRecentSnapshots(n);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,findNValidSnapshots,List<File> findNValidSnapshots(int),"[567, 570]","{'A641': [(568, 570)], 'A735': [(567, 567)]}","{'A641': 0.75, 'A735': 0.25}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public List<File> findNValidSnapshots(int n) {
        FileSnap snaplog = new FileSnap(snapDir);
        return snaplog.findNValidSnapshots(n);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getSnapshotLogs,File[] getSnapshotLogs(long),"[581, 583]","{'A590': [(581, 583)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public File[] getSnapshotLogs(long zxid) {
        return FileTxnLog.getLogFiles(dataDir.listFiles(), zxid);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,append,boolean append(Request),"[591, 593]","{'A590': [(591, 591), (593, 593)], 'A595': [(592, 592)]}","{'A590': 0.6666666666666666, 'A595': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public boolean append(Request si) throws IOException {
        return txnLog.append(si);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,commit,void commit(),"[599, 601]","{'A590': [(599, 601)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public void commit() throws IOException {
        txnLog.commit();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getTxnLogElapsedSyncTime,long getTxnLogElapsedSyncTime(),"[607, 609]","{'A611': [(607, 609)]}",{'A611': 1.0},A611,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public long getTxnLogElapsedSyncTime() {
        return txnLog.getTxnLogSyncElapsedTime();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,rollLog,void rollLog(),"[615, 617]","{'A590': [(616, 617)], 'A596': [(615, 615)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public void rollLog() throws IOException {
        txnLog.rollLog();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,close,void close(),"[623, 634]","{'A596': [(623, 623), (634, 634)], 'A613': [(627, 627), (632, 632)], 'A584': [(624, 626), (628, 631), (633, 633)]}","{'A596': 0.16666666666666666, 'A613': 0.16666666666666666, 'A584': 0.6666666666666666}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public void close() throws IOException {
        TxnLog txnLogToClose = txnLog;
        if (txnLogToClose != null) {
            txnLogToClose.close();
        }
        txnLog = null;
        SnapShot snapSlogToClose = snapLog;
        if (snapSlogToClose != null) {
            snapSlogToClose.close();
        }
        snapLog = null;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,setTotalLogSize,void setTotalLogSize(long),"[666, 668]","{'A647': [(666, 668)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public void setTotalLogSize(long size) {
        txnLog.setTotalLogSize(size);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnSnapLog.java,FileTxnSnapLog,getTotalLogSize,long getTotalLogSize(),"[670, 672]","{'A647': [(670, 672)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnSnapLogTest.java,"    public long getTotalLogSize() {
        return txnLog.getTotalLogSize();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,makeURIString,"String makeURIString(String,String,String)","[53, 59]","{'A583': [(53, 57)], 'A590': [(58, 59)]}","{'A583': 0.7142857142857143, 'A590': 0.2857142857142857}",A583,,"    public static String makeURIString(String dataDir, String dataLogDir, String convPolicy) {
        String uri = ""file:"" + SNAP_DIR + ""="" + dataDir + "";"" + LOG_DIR + ""="" + dataLogDir;
        if (convPolicy != null) {
            uri += "";"" + DB_FORMAT_CONV + ""="" + convPolicy;
        }
        return uri.replace('\\', '/');
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,makeFileLoggerURL,"URI makeFileLoggerURL(File,File)","[70, 72]","{'A583': [(70, 71)], 'A590': [(72, 72)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    public static URI makeFileLoggerURL(File dataDir, File dataLogDir) {
        return URI.create(makeURIString(dataDir.getPath(), dataLogDir.getPath(), null));
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,makeFileLoggerURL,"URI makeFileLoggerURL(File,File,String)","[74, 76]","{'A583': [(74, 75)], 'A590': [(76, 76)]}","{'A583': 0.6666666666666666, 'A590': 0.3333333333333333}",A583,,"    public static URI makeFileLoggerURL(File dataDir, File dataLogDir, String convPolicy) {
        return URI.create(makeURIString(dataDir.getPath(), dataLogDir.getPath(), convPolicy));
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,makeLogName,String makeLogName(long),"[84, 86]","{'A590': [(84, 84), (86, 86)], 'A734': [(85, 85)]}","{'A590': 0.6666666666666666, 'A734': 0.3333333333333333}",A590,,"    public static String makeLogName(long zxid) {
        return FileTxnLog.LOG_FILE_PREFIX + ""."" + Long.toHexString(zxid);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,makeSnapshotName,String makeSnapshotName(long),"[94, 98]","{'A583': [(95, 97)], 'A590': [(94, 94), (98, 98)]}","{'A583': 0.6, 'A590': 0.4}",A583,,"    public static String makeSnapshotName(long zxid) {
        return FileSnap.SNAPSHOT_FILE_PREFIX + "".""
               + Long.toHexString(zxid)
               + SnapStream.getStreamMode().getFileExtension();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,getSnapDir,File getSnapDir(Properties),"[106, 108]","{'A583': [(106, 106)], 'A590': [(107, 108)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public static File getSnapDir(Properties props) {
        return new File(props.getProperty(SNAP_DIR));
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,getLogDir,File getLogDir(Properties),"[116, 118]","{'A583': [(116, 116)], 'A590': [(117, 118)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public static File getLogDir(Properties props) {
        return new File(props.getProperty(LOG_DIR));
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,getFormatConversionPolicy,String getFormatConversionPolicy(Properties),"[126, 128]","{'A583': [(126, 126)], 'A590': [(127, 128)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,,"    public static String getFormatConversionPolicy(Properties props) {
        return props.getProperty(DB_FORMAT_CONV);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,getZxidFromName,"long getZxidFromName(String,String)","[138, 148]","{'A583': [(140, 140)], 'A590': [(138, 139), (142, 148)], 'A694': [(141, 141)]}","{'A583': 0.09090909090909091, 'A590': 0.8181818181818182, 'A694': 0.09090909090909091}",A590,,"    public static long getZxidFromName(String name, String prefix) {
        long zxid = -1;
        String[] nameParts = name.split(""\\."");
        if (nameParts.length >= 2 && nameParts[0].equals(prefix)) {
            try {
                zxid = Long.parseLong(nameParts[1], 16);
            } catch (NumberFormatException e) {
            }
        }
        return zxid;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,readTxnBytes,byte[] readTxnBytes(InputArchive),"[157, 173]","{'A583': [(158, 158), (162, 162), (164, 164), (170, 171)], 'A590': [(157, 157), (159, 161), (163, 163), (165, 169), (172, 173)]}","{'A583': 0.29411764705882354, 'A590': 0.7058823529411765}",A590,,"    public static byte[] readTxnBytes(InputArchive ia) throws IOException {
        try {
            byte[] bytes = ia.readBuffer(""txtEntry"");
            // Since we preallocate, we define EOF to be an
            // empty transaction
            if (bytes.length == 0) {
                return bytes;
            }
            if (ia.readByte(""EOF"") != 'B') {
                LOG.error(""Last transaction was partial."");
                return null;
            }
            return bytes;
        } catch (EOFException e) {
        }
        return null;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,marshallTxnEntry,"byte[] marshallTxnEntry(TxnHeader,Record,TxnDigest)","[185, 196]","{'A590': [(186, 191), (195, 196)], 'A612': [(192, 194)], 'A595': [(185, 185)]}","{'A590': 0.6666666666666666, 'A612': 0.25, 'A595': 0.08333333333333333}",A590,,"    public static byte[] marshallTxnEntry(TxnHeader hdr, Record txn, TxnDigest digest) throws IOException {
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        OutputArchive boa = BinaryOutputArchive.getArchive(baos);
        hdr.serialize(boa, ""hdr"");
        if (txn != null) {
            txn.serialize(boa, ""txn"");
        }
        if (digest != null) {
            digest.serialize(boa, ""digest"");
        }
        return baos.toByteArray();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,writeTxnBytes,"void writeTxnBytes(OutputArchive,byte[])","[205, 208]","{'A583': [(205, 205)], 'A590': [(206, 208)]}","{'A583': 0.25, 'A590': 0.75}",A590,,"    public static void writeTxnBytes(OutputArchive oa, byte[] bytes) throws IOException {
        oa.writeBuffer(bytes, ""txnEntry"");
        oa.writeByte((byte) 0x42, ""EOR""); // 'B'
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util.DataDirFileComparator,compare,"int compare(File,File)","[225, 230]","{'A590': [(225, 230)]}",{'A590': 1.0},A590,,"        public int compare(File o1, File o2) {
            long z1 = Util.getZxidFromName(o1.getName(), prefix);
            long z2 = Util.getZxidFromName(o2.getName(), prefix);
            int result = z1 < z2 ? -1 : (z1 > z2 ? 1 : 0);
            return ascending ? result : -result;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,sortDataDir,"List<File> sortDataDir(File[],String,boolean)","[245, 252]","{'A583': [(245, 246), (248, 248)], 'A590': [(249, 252)], 'A605': [(247, 247)]}","{'A583': 0.375, 'A590': 0.5, 'A605': 0.125}",A590,,"    public static List<File> sortDataDir(File[] files, String prefix, boolean ascending) {
        if (files == null) {
            return new ArrayList<>(0);
        }
        List<File> filelist = Arrays.asList(files);
        Collections.sort(filelist, new DataDirFileComparator(prefix, ascending));
        return filelist;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,isLogFileName,boolean isLogFileName(String),"[259, 261]","{'A734': [(259, 261)]}",{'A734': 1.0},A734,,"    public static boolean isLogFileName(String fileName) {
        return fileName.startsWith(FileTxnLog.LOG_FILE_PREFIX + ""."");
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/Util.java,Util,isSnapshotFileName,boolean isSnapshotFileName(String),"[268, 270]","{'A734': [(268, 270)]}",{'A734': 1.0},A734,,"    public static boolean isSnapshotFileName(String fileName) {
        return fileName.startsWith(FileSnap.SNAPSHOT_FILE_PREFIX + ""."");
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,setPreallocSize,void setPreallocSize(long),"[191, 193]","{'A613': [(191, 193)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public static void setPreallocSize(long size) {
        FilePadding.setPreallocSize(size);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,setServerStats,void setServerStats(ServerStats),"[199, 202]","{'A609': [(199, 199), (201, 202)], 'A584': [(200, 200)]}","{'A609': 0.75, 'A584': 0.25}",A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    @Override
    public synchronized void setServerStats(ServerStats serverStats) {
        this.serverStats = serverStats;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,setTxnLogSizeLimit,void setTxnLogSizeLimit(long),"[207, 209]","{'A741': [(207, 209)]}",{'A741': 1.0},A741,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public static void setTxnLogSizeLimit(long size) {
        txnLogSizeLimit = size;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getCurrentLogSize,long getCurrentLogSize(),"[215, 220]","{'A741': [(215, 216), (218, 220)], 'A595': [(217, 217)]}","{'A741': 0.8333333333333334, 'A595': 0.16666666666666666}",A741,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public synchronized long getCurrentLogSize() {
        if (logFileWrite != null) {
            return fileSize;
        }
        return 0;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,setTotalLogSize,void setTotalLogSize(long),"[222, 224]","{'A647': [(222, 224)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public synchronized void setTotalLogSize(long size) {
        prevLogsRunningTotal = size;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getTotalLogSize,long getTotalLogSize(),"[226, 228]","{'A647': [(226, 228)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public synchronized long getTotalLogSize() {
        return prevLogsRunningTotal + getCurrentLogSize();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getTxnLogSizeLimit,long getTxnLogSizeLimit(),"[233, 235]","{'A742': [(233, 235)]}",{'A742': 1.0},A742,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public static long getTxnLogSizeLimit() {
        return txnLogSizeLimit;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,makeChecksumAlgorithm,Checksum makeChecksumAlgorithm(),"[241, 243]","{'A583': [(241, 241)], 'A590': [(242, 243)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    protected Checksum makeChecksumAlgorithm() {
        return new Adler32();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,rollLog,void rollLog(),"[249, 260]","{'A590': [(260, 260)], 'A596': [(250, 251), (253, 254), (259, 259)], 'A591': [(249, 249)], 'A647': [(252, 252), (258, 258)], 'A595': [(255, 257)]}","{'A590': 0.08333333333333333, 'A596': 0.4166666666666667, 'A591': 0.08333333333333333, 'A647': 0.16666666666666666, 'A595': 0.25}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public synchronized void rollLog() throws IOException {
        if (logStream != null) {
            this.logStream.flush();
            prevLogsRunningTotal += getCurrentLogSize();
            this.logStream = null;
            oa = null;
            fileSize = 0;
            filePosition = 0;
            unFlushedSize = 0;
            // Roll over the current log file into the running total
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,close,void close(),"[266, 273]","{'A596': [(266, 273)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public synchronized void close() throws IOException {
        if (logStream != null) {
            logStream.close();
        }
        for (FileOutputStream log : streamsToFlush) {
            log.close();
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,append,boolean append(Request),"[275, 327]","{'A583': [(282, 285), (290, 297), (299, 301), (308, 308), (313, 313)], 'A590': [(327, 327)], 'A596': [(280, 280)], 'A740': [(286, 286)], 'A612': [(275, 275), (278, 279), (281, 281), (287, 289), (309, 309), (312, 312), (314, 314), (316, 319), (326, 326)], 'A595': [(276, 277), (298, 298), (302, 307), (310, 311), (315, 315), (320, 325)]}","{'A583': 0.32075471698113206, 'A590': 0.018867924528301886, 'A596': 0.018867924528301886, 'A740': 0.018867924528301886, 'A612': 0.2830188679245283, 'A595': 0.33962264150943394}",A595,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    @Override
    public synchronized boolean append(Request request) throws IOException {
        TxnHeader hdr = request.getHdr();
        if (hdr == null) {
            return false;
        }
        if (hdr.getZxid() <= lastZxidSeen) {
            LOG.warn(
                ""Current zxid {} is <= {} for {}"",
                hdr.getZxid(),
                lastZxidSeen,
                Request.op2String(hdr.getType()));
        } else {
            lastZxidSeen = hdr.getZxid();
        }
        if (logStream == null) {
            LOG.info(""Creating new log file: {}"", Util.makeLogName(hdr.getZxid()));

            logFileWrite = new File(logDir, Util.makeLogName(hdr.getZxid()));
            fos = new FileOutputStream(logFileWrite);
            logStream = new BufferedOutputStream(fos);
            oa = BinaryOutputArchive.getArchive(logStream);
            FileHeader fhdr = new FileHeader(TXNLOG_MAGIC, VERSION, dbId);
            long dataSize = oa.getDataSize();
            fhdr.serialize(oa, ""fileheader"");
            // Make sure that the magic number is written before padding.
            logStream.flush();
            // Before writing data, first obtain the size of the OutputArchive.
            // After writing the data, obtain the size of the OutputArchive again,
            // so we can obtain the size of the data written this time.
            // In this case, the data already flush into the channel, so add the size to filePosition.
            filePosition += oa.getDataSize() - dataSize;
            filePadding.setCurrentSize(filePosition);
            streamsToFlush.add(fos);
        }
        fileSize = filePadding.padFile(fos.getChannel(), filePosition);
        byte[] buf = request.getSerializeData();
        if (buf == null || buf.length == 0) {
            throw new IOException(""Faulty serialization for header "" + ""and txn"");
        }
        long dataSize = oa.getDataSize();
        Checksum crc = makeChecksumAlgorithm();
        crc.update(buf, 0, buf.length);
        oa.writeLong(crc.getValue(), ""txnEntryCRC"");
        Util.writeTxnBytes(oa, buf);
        // Before writing data, first obtain the size of the OutputArchive.
        // After writing the data, obtain the size of the OutputArchive again,
        // so we can obtain the size of the data written this time.
        // In this case, the data just write to the cache, not flushed, so add the size to unFlushedSize.
        // After flushed, the unFlushedSize will add to the filePosition.
        unFlushedSize += oa.getDataSize() - dataSize;
        return true;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getLogFiles,"File[] getLogFiles(File[],long)","[337, 363]","{'A583': [(337, 337)], 'A590': [(339, 342), (344, 344), (346, 346), (348, 352), (354, 354), (356, 361), (363, 363)], 'A596': [(347, 347), (362, 362)], 'A734': [(338, 338), (343, 343), (355, 355)], 'A743': [(345, 345)], 'A605': [(353, 353)]}","{'A583': 0.037037037037037035, 'A590': 0.7037037037037037, 'A596': 0.07407407407407407, 'A734': 0.1111111111111111, 'A743': 0.037037037037037035, 'A605': 0.037037037037037035}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public static File[] getLogFiles(File[] logDirList, long snapshotZxid) {
        List<File> files = Util.sortDataDir(logDirList, LOG_FILE_PREFIX, true);
        long logZxid = 0;
        // Find the log file that starts before or at the same time as the
        // zxid of the snapshot
        for (File f : files) {
            long fzxid = Util.getZxidFromName(f.getName(), LOG_FILE_PREFIX);
            if (fzxid > snapshotZxid) {
                break;
            }
            // the files
            // are sorted with zxid's
            if (fzxid > logZxid) {
                logZxid = fzxid;
            }
        }
        List<File> v = new ArrayList<>(5);
        for (File f : files) {
            long fzxid = Util.getZxidFromName(f.getName(), LOG_FILE_PREFIX);
            if (fzxid < logZxid) {
                continue;
            }
            v.add(f);
        }
        return v.toArray(new File[0]);

    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getLastLoggedZxid,long getLastLoggedZxid(),"[369, 388]","{'A583': [(371, 371), (378, 378), (380, 380)], 'A590': [(369, 370), (374, 375), (377, 377), (379, 379), (381, 388)], 'A596': [(372, 373)], 'A744': [(376, 376)]}","{'A583': 0.15, 'A590': 0.7, 'A596': 0.1, 'A744': 0.05}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public long getLastLoggedZxid() {
        File[] files = getLogFiles(logDir.listFiles(), 0);
        long maxLog = files.length > 0 ? Util.getZxidFromName(files[files.length - 1].getName(), LOG_FILE_PREFIX) : -1;

        // if a log file is more recent we must scan it to find
        // the highest zxid
        long zxid = maxLog;
        try (FileTxnLog txn = new FileTxnLog(logDir); TxnIterator itr = txn.read(maxLog)) {
            while (true) {
                if (!itr.next()) {
                    break;
                }
                TxnHeader hdr = itr.getHeader();
                zxid = hdr.getZxid();
            }
        } catch (IOException e) {
            LOG.warn(""Unexpected exception"", e);
        }
        return zxid;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,commit,void commit(),"[394, 443]","{'A583': [(415, 415), (418, 424), (426, 426), (435, 435)], 'A590': [(394, 394), (405, 407), (428, 430), (432, 432), (443, 443)], 'A596': [(395, 396), (404, 404)], 'A620': [(431, 431)], 'A639': [(408, 409), (412, 412), (414, 414), (425, 425)], 'A609': [(416, 417)], 'A741': [(433, 434), (436, 442)], 'A611': [(413, 413)], 'A595': [(397, 403)], 'A584': [(427, 427)], 'A715': [(410, 411)]}","{'A583': 0.2, 'A590': 0.18, 'A596': 0.06, 'A620': 0.02, 'A639': 0.1, 'A609': 0.04, 'A741': 0.18, 'A611': 0.02, 'A595': 0.14, 'A584': 0.02, 'A715': 0.04}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public synchronized void commit() throws IOException {
        if (logStream != null) {
            logStream.flush();
            filePosition += unFlushedSize;
            // If we have written more than we have previously preallocated,
            // we should override the fileSize by filePosition.
            if (filePosition > fileSize) {
                fileSize = filePosition;
            }
            unFlushedSize = 0;
        }
        for (FileOutputStream log : streamsToFlush) {
            log.flush();
            if (forceSync) {
                long startSyncNS = System.nanoTime();

                FileChannel channel = log.getChannel();
                channel.force(false);

                syncElapsedMS = TimeUnit.NANOSECONDS.toMillis(System.nanoTime() - startSyncNS);
                if (syncElapsedMS > fsyncWarningThresholdMS) {
                    if (serverStats != null) {
                        serverStats.incrementFsyncThresholdExceedCount();
                    }

                    LOG.warn(
                        ""fsync-ing the write ahead log in {} took {}ms which will adversely effect operation latency.""
                            + ""File size is {} bytes. See the ZooKeeper troubleshooting guide"",
                        Thread.currentThread().getName(),
                        syncElapsedMS,
                        channel.size());
                }

                ServerMetrics.getMetrics().FSYNC_TIME.add(syncElapsedMS);
            }
        }
        while (streamsToFlush.size() > 1) {
            streamsToFlush.poll().close();
        }

        // Roll the log file if we exceed the size limit
        if (txnLogSizeLimit > 0) {
            long logSize = getCurrentLogSize();

            if (logSize > txnLogSizeLimit) {
                LOG.debug(""Log size limit reached: {}"", logSize);
                rollLog();
            }
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getTxnLogSyncElapsedTime,long getTxnLogSyncElapsedTime(),"[449, 451]","{'A611': [(449, 451)]}",{'A611': 1.0},A611,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public long getTxnLogSyncElapsedTime() {
        return syncElapsedMS;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,read,TxnIterator read(long),"[459, 461]","{'A590': [(459, 459)], 'A648': [(460, 461)]}","{'A590': 0.3333333333333333, 'A648': 0.6666666666666666}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public TxnIterator read(long zxid) throws IOException {
        return read(zxid, true);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,read,"TxnIterator read(long,boolean)","[472, 474]","{'A596': [(474, 474)], 'A648': [(472, 473)]}","{'A596': 0.3333333333333333, 'A648': 0.6666666666666666}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public TxnIterator read(long zxid, boolean fastForward) throws IOException {
        return new FileTxnIterator(logDir, zxid, fastForward);
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,truncate,boolean truncate(long),"[481, 501]","{'A583': [(484, 487), (491, 491), (494, 494)], 'A590': [(481, 481), (499, 501)], 'A596': [(498, 498)], 'A744': [(482, 482)], 'A597': [(483, 483), (489, 490), (492, 493), (495, 497)], 'A617': [(488, 488)]}","{'A583': 0.2857142857142857, 'A590': 0.19047619047619047, 'A596': 0.047619047619047616, 'A744': 0.047619047619047616, 'A597': 0.38095238095238093, 'A617': 0.047619047619047616}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public boolean truncate(long zxid) throws IOException {
        try (FileTxnIterator itr = new FileTxnIterator(this.logDir, zxid)) {
            PositionInputStream input = itr.inputStream;
            if (input == null) {
                throw new IOException(""No log files found to truncate! This could ""
                                      + ""happen if you still have snapshots from an old setup or ""
                                      + ""log files were deleted accidentally or dataLogDir was changed in zoo.cfg."");
            }
            long pos = input.getPosition();
            // now, truncate at the current position
            RandomAccessFile raf = new RandomAccessFile(itr.logFile, ""rw"");
            raf.setLength(pos);
            raf.close();
            while (itr.goToNextLog()) {
                if (!itr.logFile.delete()) {
                    LOG.warn(""Unable to truncate {}"", itr.logFile);
                }
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,readHeader,FileHeader readHeader(File),"[509, 526]","{'A583': [(510, 510), (513, 513), (517, 525)], 'A590': [(509, 509), (512, 512), (514, 516), (526, 526)], 'A596': [(511, 511)]}","{'A583': 0.6111111111111112, 'A590': 0.3333333333333333, 'A596': 0.05555555555555555}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    private static FileHeader readHeader(File file) throws IOException {
        InputStream is = null;
        try {
            is = new BufferedInputStream(new FileInputStream(file));
            InputArchive ia = BinaryInputArchive.getArchive(is);
            FileHeader hdr = new FileHeader();
            hdr.deserialize(ia, ""fileheader"");
            return hdr;
        } finally {
            try {
                if (is != null) {
                    is.close();
                }
            } catch (IOException e) {
                LOG.warn(""Ignoring exception during close"", e);
            }
        }
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,getDbId,long getDbId(),"[532, 540]","{'A583': [(534, 534), (536, 536), (538, 538)], 'A590': [(532, 533), (535, 535), (537, 537), (539, 540)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public long getDbId() throws IOException {
        FileTxnIterator itr = new FileTxnIterator(logDir, 0);
        FileHeader fh = readHeader(itr.logFile);
        itr.close();
        if (fh == null) {
            throw new IOException(""Unsupported Format."");
        }
        return fh.getDbid();
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog,isForceSync,boolean isForceSync(),"[546, 548]","{'A590': [(546, 548)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"    public boolean isForceSync() {
        return forceSync;
    }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,read,int read(),"[565, 572]","{'A596': [(565, 567), (569, 572)], 'A639': [(568, 568)]}","{'A596': 0.875, 'A639': 0.125}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        @Override
        public int read() throws IOException {
            int rc = super.read();
            if (rc > -1) {
                position++;
            }
            return rc;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,read,int read(byte[]),"[574, 580]","{'A639': [(574, 578), (580, 580)], 'A612': [(579, 579)]}","{'A639': 0.8571428571428571, 'A612': 0.14285714285714285}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public int read(byte[] b) throws IOException {
            int rc = super.read(b);
            if (rc > 0) {
                position += rc;
            }
            return rc;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,read,"int read(byte[],int,int)","[582, 589]","{'A596': [(582, 584), (588, 589)], 'A639': [(585, 587)]}","{'A596': 0.625, 'A639': 0.375}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        @Override
        public int read(byte[] b, int off, int len) throws IOException {
            int rc = super.read(b, off, len);
            if (rc > 0) {
                position += rc;
            }
            return rc;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,skip,long skip(long),"[591, 598]","{'A596': [(591, 598)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        @Override
        public long skip(long n) throws IOException {
            long rc = super.skip(n);
            if (rc > 0) {
                position += rc;
            }
            return rc;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,getPosition,long getPosition(),"[599, 601]","{'A596': [(599, 601)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public long getPosition() {
            return position;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,markSupported,boolean markSupported(),"[603, 606]","{'A639': [(603, 606)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        @Override
        public boolean markSupported() {
            return false;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,mark,void mark(int),"[608, 611]","{'A639': [(608, 611)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        @Override
        public void mark(int readLimit) {
            throw new UnsupportedOperationException(""mark"");
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.PositionInputStream,reset,void reset(),"[613, 616]","{'A639': [(613, 616)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        @Override
        public void reset() {
            throw new UnsupportedOperationException(""reset"");
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,init,void init(),"[679, 696]","{'A583': [(680, 685), (688, 689)], 'A590': [(679, 679), (687, 687), (690, 694)], 'A734': [(686, 686)], 'A646': [(695, 695)], 'A648': [(696, 696)]}","{'A583': 0.4444444444444444, 'A590': 0.3888888888888889, 'A734': 0.05555555555555555, 'A646': 0.05555555555555555, 'A648': 0.05555555555555555}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        void init() throws IOException {
            storedFiles = new ArrayList<>();
            List<File> files = Util.sortDataDir(
                FileTxnLog.getLogFiles(logDir.listFiles(), 0),
                LOG_FILE_PREFIX,
                false);
            for (File f : files) {
                if (Util.getZxidFromName(f.getName(), LOG_FILE_PREFIX) >= zxid) {
                    storedFiles.add(f);
                } else if (Util.getZxidFromName(f.getName(), LOG_FILE_PREFIX) < zxid) {
                    // add the last logfile that is less than the zxid
                    storedFiles.add(f);
                    break;
                }
            }
            goToNextLog();
            next();
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,getStorageSize,long getStorageSize(),"[701, 707]","{'A590': [(705, 705), (707, 707)], 'A648': [(701, 704), (706, 706)]}","{'A590': 0.2857142857142857, 'A648': 0.7142857142857143}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public long getStorageSize() {
            long sum = 0;
            for (File f : storedFiles) {
                sum += f.length();
            }
            return sum;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,goToNextLog,boolean goToNextLog(),"[715, 737]","{'A583': [(717, 717)], 'A590': [(715, 715), (734, 737)], 'A742': [(716, 716), (718, 733)]}","{'A583': 0.043478260869565216, 'A590': 0.21739130434782608, 'A742': 0.7391304347826086}",A742,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        private boolean goToNextLog() throws IOException {
            if (!storedFiles.isEmpty()) {
                this.logFile = storedFiles.remove(storedFiles.size() - 1);
                try {
                    ia = createInputArchive(this.logFile);
                } catch (EOFException ex) {
                    // If this file is the last log file in the database and is empty,
                    // it means that the last time the file was created
                    // before the header was written.
                    if (storedFiles.isEmpty() && this.logFile.length() == 0) {
                        boolean deleted = this.logFile.delete();
                        if (!deleted) {
                            throw new IOException(""Failed to delete empty tail log file: "" + this.logFile.getName());
                        }
                        LOG.warn(""Delete empty tail log file to recover from corruption file: {}"", this.logFile.getName());
                        return false;
                    }
                    throw ex;
                }
                return true;
            }
            return false;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,inStreamCreated,"void inStreamCreated(InputArchive,InputStream)","[745, 753]","{'A583': [(745, 746), (749, 751)], 'A590': [(747, 747), (753, 753)], 'A596': [(752, 752)], 'A591': [(748, 748)]}","{'A583': 0.5555555555555556, 'A590': 0.2222222222222222, 'A596': 0.1111111111111111, 'A591': 0.1111111111111111}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        protected void inStreamCreated(InputArchive ia, InputStream is) throws IOException {
            FileHeader header = new FileHeader();
            header.deserialize(ia, ""fileheader"");
            if (header.getMagic() != FileTxnLog.TXNLOG_MAGIC) {
                throw new IOException(""Transaction log: "" + this.logFile
                                      + "" has invalid magic number ""
                                      + header.getMagic() + "" != "" + FileTxnLog.TXNLOG_MAGIC);
            }
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,createInputArchive,InputArchive createInputArchive(File),"[760, 769]","{'A583': [(761, 762), (764, 765)], 'A590': [(760, 760), (767, 769)], 'A620': [(763, 763), (766, 766)]}","{'A583': 0.4, 'A590': 0.4, 'A620': 0.2}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        protected InputArchive createInputArchive(File logFile) throws IOException {
            if (inputStream == null) {
                inputStream = new PositionInputStream(new BufferedInputStream(new FileInputStream(logFile)));
                LOG.debug(""Created new input stream: {}"", logFile);
                ia = BinaryInputArchive.getArchive(inputStream);
                inStreamCreated(ia, inputStream);
                LOG.debug(""Created new input archive: {}"", logFile);
            }
            return ia;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,makeChecksumAlgorithm,Checksum makeChecksumAlgorithm(),"[775, 777]","{'A583': [(775, 775)], 'A590': [(776, 777)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        protected Checksum makeChecksumAlgorithm() {
            return new Adler32();
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,next,boolean next(),"[784, 824]","{'A583': [(792, 792), (799, 799), (801, 801)], 'A590': [(784, 791), (795, 798), (800, 800), (806, 806), (808, 809), (814, 816), (822, 824)], 'A596': [(793, 794), (813, 813)], 'A620': [(807, 807)], 'A612': [(802, 805)], 'A593': [(819, 821)], 'A591': [(810, 810)], 'A597': [(811, 812), (817, 818)]}","{'A583': 0.07317073170731707, 'A590': 0.5365853658536586, 'A596': 0.07317073170731707, 'A620': 0.024390243902439025, 'A612': 0.0975609756097561, 'A593': 0.07317073170731707, 'A591': 0.024390243902439025, 'A597': 0.0975609756097561}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public boolean next() throws IOException {
            if (ia == null) {
                return false;
            }
            try {
                long crcValue = ia.readLong(""crcvalue"");
                byte[] bytes = Util.readTxnBytes(ia);
                // Since we preallocate, we define EOF to be an
                if (bytes == null || bytes.length == 0) {
                    throw new EOFException(""Failed to read "" + logFile);
                }
                // EOF or corrupted record
                // validate CRC
                Checksum crc = makeChecksumAlgorithm();
                crc.update(bytes, 0, bytes.length);
                if (crcValue != crc.getValue()) {
                    throw new IOException(CRC_ERROR);
                }
                TxnLogEntry logEntry = SerializeUtils.deserializeTxn(bytes);
                hdr = logEntry.getHeader();
                record = logEntry.getTxn();
                digest = logEntry.getDigest();
            } catch (EOFException e) {
                LOG.debug(""EOF exception"", e);
                inputStream.close();
                inputStream = null;
                ia = null;
                hdr = null;
                // this means that the file has ended
                // we should go to the next file
                if (!goToNextLog()) {
                    return false;
                }
                // if we went to the next log file, we should call next() again
                return next();
            } catch (IOException e) {
                inputStream.close();
                throw e;
            }
            return true;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,getHeader,TxnHeader getHeader(),"[831, 833]","{'A590': [(831, 833)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public TxnHeader getHeader() {
            return hdr;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,getTxn,Record getTxn(),"[840, 842]","{'A590': [(840, 842)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public Record getTxn() {
            return record;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,getDigest,TxnDigest getDigest(),"[844, 846]","{'A612': [(844, 846)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public TxnDigest getDigest() {
            return digest;
        }
"
org.apache.zookeeper.server.persistence,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/FileTxnLog.java,FileTxnLog.FileTxnIterator,close,void close(),"[852, 856]","{'A590': [(852, 852), (856, 856)], 'A597': [(853, 855)]}","{'A590': 0.4, 'A597': 0.6}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/persistence/FileTxnLogTest.java,"        public void close() throws IOException {
            if (inputStream != null) {
                inputStream.close();
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperSaslServer.java,ZooKeeperSaslServer,createSaslServer,SaslServer createSaslServer(Login),"[41, 46]","{'A596': [(41, 43), (45, 46)], 'A652': [(44, 44)]}","{'A596': 0.8333333333333334, 'A652': 0.16666666666666666}",A596,,"    private SaslServer createSaslServer(final Login login) {
        synchronized (login) {
            Subject subject = login.getSubject();
            return SecurityUtils.createSaslServer(subject, ""zookeeper"", ""zk-sasl-md5"", login.newCallbackHandler(), LOG);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperSaslServer.java,ZooKeeperSaslServer,evaluateResponse,byte[] evaluateResponse(byte[]),"[48, 50]","{'A596': [(48, 50)]}",{'A596': 1.0},A596,,"    public byte[] evaluateResponse(byte[] response) throws SaslException {
        return saslServer.evaluateResponse(response);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperSaslServer.java,ZooKeeperSaslServer,isComplete,boolean isComplete(),"[52, 54]","{'A596': [(52, 54)]}",{'A596': 1.0},A596,,"    public boolean isComplete() {
        return saslServer.isComplete();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperSaslServer.java,ZooKeeperSaslServer,getAuthorizationID,String getAuthorizationID(),"[56, 58]","{'A596': [(56, 58)]}",{'A596': 1.0},A596,,"    public String getAuthorizationID() {
        return saslServer.getAuthorizationID();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DigestCalculator.java,DigestCalculator,calculateDigest,"long calculateDigest(String,byte[],StatPersisted)","[57, 104]","{'A583': [(85, 85)], 'A612': [(58, 58), (60, 84), (86, 104)], 'A653': [(57, 57), (59, 59)]}","{'A583': 0.020833333333333332, 'A612': 0.9375, 'A653': 0.041666666666666664}",A612,,"    long calculateDigest(String path, byte[] data, StatPersisted stat) {

        if (!ZooKeeperServer.isDigestEnabled()) {
            return 0;
        }

        // Quota nodes are updated locally, there is inconsistent issue
        // when we tried to release digest feature at the beginning.
        //
        // Instead of taking time to fix that, we decided to disable digest
        // check for all the nodes under /zookeeper/ first.
        //
        // We can enable this after fixing that inconsistent problem. The
        // digest version in the protocol enables us to change the digest
        // calculation without disrupting the system.
        if (path.startsWith(ZooDefs.ZOOKEEPER_NODE_SUBTREE)) {
            return 0;
        }

        // """" and ""/"" are aliases to each other, in DataTree when adding child
        // under ""/"", it will use """" as the path, but when set data or change
        // ACL on ""/"", it will use ""/"" as the path. Always mapping ""/"" to """"
        // to avoid mismatch.
        if (path.equals(""/"")) {
            path = """";
        }

        // total = 8 * 6 + 4 * 3 = 60 bytes
        byte[] b = new byte[60];
        ByteBuffer bb = ByteBuffer.wrap(b);
        bb.putLong(stat.getCzxid());
        bb.putLong(stat.getMzxid());
        bb.putLong(stat.getPzxid());
        bb.putLong(stat.getCtime());
        bb.putLong(stat.getMtime());
        bb.putInt(stat.getVersion());
        bb.putInt(stat.getCversion());
        bb.putInt(stat.getAversion());
        bb.putLong(stat.getEphemeralOwner());

        CRC32 crc = new CRC32();
        crc.update(path.getBytes());
        if (data != null) {
            crc.update(data);
        }
        crc.update(b);
        return crc.getValue();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DigestCalculator.java,DigestCalculator,calculateDigest,"long calculateDigest(String,DataNode)","[109, 115]","{'A612': [(110, 115)], 'A653': [(109, 109)]}","{'A612': 0.8571428571428571, 'A653': 0.14285714285714285}",A612,,"    long calculateDigest(String path, DataNode node) {
        if (!node.isDigestCached()) {
            node.setDigest(calculateDigest(path, node.getData(), node.stat));
            node.setDigestCached(true);
        }
        return node.getDigest();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DigestCalculator.java,DigestCalculator,getDigestVersion,int getDigestVersion(),"[120, 122]","{'A612': [(122, 122)], 'A653': [(120, 121)]}","{'A612': 0.3333333333333333, 'A653': 0.6666666666666666}",A653,,"    int getDigestVersion() {
        return DIGEST_VERSION;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,maxValue,long maxValue(),"[81, 84]","{'A636': [(81, 84)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"        @Override
        public long maxValue() {
            return EXTENDED_FEATURE_VALUE_MASK;  // 12725 days, about 34 years
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,toEphemeralOwner,long toEphemeralOwner(long),"[86, 95]","{'A583': [(92, 94)], 'A636': [(86, 91), (95, 95)]}","{'A583': 0.3, 'A636': 0.7}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"        @Override
        public long toEphemeralOwner(long ttl) {
            if ((ttl > TTL.maxValue()) || (ttl <= 0)) {
                throw new IllegalArgumentException(""ttl must be positive and cannot be larger than: "" + TTL.maxValue());
            }
            //noinspection PointlessBitwiseExpression
            return EXTENDED_MASK
                   | EXTENDED_BIT_TTL
                   | ttl;  // TTL_RESERVED_BIT is actually zero - but it serves to document that the proper extended bit needs to be set
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,getValue,long getValue(long),"[97, 100]","{'A636': [(97, 100)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"        @Override
        public long getValue(long ephemeralOwner) {
            return getExtendedFeatureValue(ephemeralOwner);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,maxValue,long maxValue(),"[108, 110]","{'A636': [(108, 110)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    public long maxValue() {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,toEphemeralOwner,long toEphemeralOwner(long),"[117, 119]","{'A636': [(117, 119)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    public long toEphemeralOwner(long value) {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,getValue,long getValue(long),"[126, 128]","{'A636': [(126, 128)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    public long getValue(long ephemeralOwner) {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,extendedEphemeralTypesEnabled,boolean extendedEphemeralTypesEnabled(),"[157, 159]","{'A636': [(157, 159)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    public static boolean extendedEphemeralTypesEnabled() {
        return Boolean.getBoolean(EXTENDED_TYPES_ENABLED_PROPERTY);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,get,EphemeralType get(long),"[168, 189]","{'A639': [(168, 168), (185, 189)], 'A636': [(169, 170), (172, 184)], 'A613': [(171, 171)]}","{'A639': 0.2727272727272727, 'A636': 0.6818181818181818, 'A613': 0.045454545454545456}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    public static EphemeralType get(long ephemeralOwner) {
        if (extendedEphemeralTypesEnabled()) {
            if (Boolean.getBoolean(TTL_3_5_3_EMULATION_PROPERTY)) {
                if (EphemeralTypeEmulate353.get(ephemeralOwner) == EphemeralTypeEmulate353.TTL) {
                    return TTL;
                }
            }

            if ((ephemeralOwner & EXTENDED_MASK) == EXTENDED_MASK) {
                long extendedFeatureBit = getExtendedFeatureBit(ephemeralOwner);
                EphemeralType ephemeralType = extendedFeatureMap.get(extendedFeatureBit);
                if (ephemeralType == null) {
                    throw new IllegalArgumentException(String.format(""Invalid ephemeralOwner. [%s]"", Long.toHexString(ephemeralOwner)));
                }
                return ephemeralType;
            }
        }
        if (ephemeralOwner == CONTAINER_EPHEMERAL_OWNER) {
            return CONTAINER;
        }
        return (ephemeralOwner == 0) ? VOID : NORMAL;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,validateServerId,void validateServerId(long),"[197, 208]","{'A583': [(203, 205)], 'A636': [(197, 202), (206, 208)]}","{'A583': 0.25, 'A636': 0.75}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    public static void validateServerId(long serverId) {
        // TODO: in the future, serverId should be validated for all cases, not just the extendedEphemeralTypesEnabled case
        // TODO: however, for now, it would be too disruptive

        if (extendedEphemeralTypesEnabled()) {
            if (serverId > EphemeralType.MAX_EXTENDED_SERVER_ID) {
                throw new RuntimeException(
                    ""extendedTypesEnabled is true but Server ID is too large. Cannot be larger than ""
                    + EphemeralType.MAX_EXTENDED_SERVER_ID);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,validateTTL,"void validateTTL(CreateMode,long)","[217, 224]","{'A583': [(217, 217)], 'A639': [(218, 219), (221, 224)], 'A636': [(220, 220)]}","{'A583': 0.125, 'A639': 0.75, 'A636': 0.125}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    @SuppressFBWarnings(value = ""RV_RETURN_VALUE_IGNORED_NO_SIDE_EFFECT"", justification = ""toEphemeralOwner may throw IllegalArgumentException"")
    public static void validateTTL(CreateMode mode, long ttl) {
        if (mode.isTTL()) {
            TTL.toEphemeralOwner(ttl);
        } else if (ttl >= 0) {
            throw new IllegalArgumentException(""ttl not valid for mode: "" + mode);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,getExtendedFeatureBit,long getExtendedFeatureBit(long),"[226, 228]","{'A639': [(228, 228)], 'A636': [(226, 227)]}","{'A639': 0.3333333333333333, 'A636': 0.6666666666666666}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    private static long getExtendedFeatureBit(long ephemeralOwner) {
        return (ephemeralOwner & RESERVED_BITS_MASK) >> RESERVED_BITS_SHIFT;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralType.java,EphemeralType,getExtendedFeatureValue,long getExtendedFeatureValue(long),"[230, 232]","{'A639': [(232, 232)], 'A636': [(230, 231)]}","{'A639': 0.3333333333333333, 'A636': 0.6666666666666666}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/EphemeralTypeTest.java,"    private static long getExtendedFeatureValue(long ephemeralOwner) {
        return ephemeralOwner & EXTENDED_FEATURE_VALUE_MASK;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSet.java,AvgMinMaxCounterSet,getCounterForKey,AvgMinMaxCounter getCounterForKey(String),"[41, 43]","{'A675': [(41, 41), (43, 43)], 'A602': [(42, 42)]}","{'A675': 0.6666666666666666, 'A602': 0.3333333333333333}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSetTest.java,"    private AvgMinMaxCounter getCounterForKey(String key) {
        return counters.computeIfAbsent(key, k-> new AvgMinMaxCounter(k + ""_"" + name));
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSet.java,AvgMinMaxCounterSet,addDataPoint,"void addDataPoint(String,long)","[45, 47]","{'A675': [(45, 47)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSetTest.java,"    public void addDataPoint(String key, long value) {
        getCounterForKey(key).addDataPoint(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSet.java,AvgMinMaxCounterSet,resetMax,void resetMax(),"[49, 53]","{'A675': [(49, 53)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSetTest.java,"    public void resetMax() {
        for (Map.Entry<String, AvgMinMaxCounter> entry : counters.entrySet()) {
            entry.getValue().resetMax();
        }
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSet.java,AvgMinMaxCounterSet,reset,void reset(),"[55, 59]","{'A675': [(55, 59)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSetTest.java,"    public void reset() {
        for (Map.Entry<String, AvgMinMaxCounter> entry : counters.entrySet()) {
            entry.getValue().reset();
        }
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSet.java,AvgMinMaxCounterSet,add,"void add(String,long)","[61, 64]","{'A675': [(61, 64)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSetTest.java,"    @Override
    public void add(String key, long value) {
        addDataPoint(key, value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSet.java,AvgMinMaxCounterSet,values,"Map<String, Object> values()","[66, 73]","{'A675': [(66, 73)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxCounterSetTest.java,"    @Override
    public Map<String, Object> values() {
        Map<String, Object> m = new LinkedHashMap<>();
        for (Map.Entry<String, AvgMinMaxCounter> entry : counters.entrySet()) {
            m.putAll(entry.getValue().values());
        }
        return m;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,addDataPoint,void addDataPoint(long),"[44, 49]","{'A713': [(44, 49)]}",{'A713': 1.0},A713,,"    public void addDataPoint(long value) {
        total.addAndGet(value);
        count.incrementAndGet();
        setMin(value);
        setMax(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,setMax,void setMax(long),"[51, 56]","{'A583': [(53, 55)], 'A713': [(51, 52), (56, 56)]}","{'A583': 0.5, 'A713': 0.5}",A583,,"    private void setMax(long value) {
        long current;
        while (value > (current = max.get()) && !max.compareAndSet(current, value)) {
            // no op
        }
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,setMin,void setMin(long),"[58, 63]","{'A583': [(60, 62)], 'A713': [(58, 59), (63, 63)]}","{'A583': 0.5, 'A713': 0.5}",A583,,"    private void setMin(long value) {
        long current;
        while (value < (current = min.get()) && !min.compareAndSet(current, value)) {
            // no op
        }
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,getAvg,double getAvg(),"[65, 76]","{'A583': [(71, 71)], 'A713': [(66, 70), (74, 76)], 'A641': [(65, 65), (72, 72)], 'A584': [(73, 73)]}","{'A583': 0.08333333333333333, 'A713': 0.6666666666666666, 'A641': 0.16666666666666666, 'A584': 0.08333333333333333}",A713,,"    public double getAvg() {
        // There is possible race-condition but we don't need the stats to be
        // extremely accurate.
        long currentCount = count.get();
        long currentTotal = total.get();
        if (currentCount > 0) {
            double avgLatency = currentTotal / (double) currentCount;
            BigDecimal bg = new BigDecimal(avgLatency);
            return bg.setScale(4, RoundingMode.HALF_UP).doubleValue();
        }
        return 0;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,getCount,long getCount(),"[78, 80]","{'A713': [(78, 80)]}",{'A713': 1.0},A713,,"    public long getCount() {
        return count.get();
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,getMax,long getMax(),"[82, 85]","{'A583': [(84, 84)], 'A713': [(82, 83), (85, 85)]}","{'A583': 0.25, 'A713': 0.75}",A713,,"    public long getMax() {
        long current = max.get();
        return (current == Long.MIN_VALUE) ? 0 : current;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,getMin,long getMin(),"[87, 90]","{'A583': [(89, 89)], 'A713': [(87, 88), (90, 90)]}","{'A583': 0.25, 'A713': 0.75}",A713,,"    public long getMin() {
        long current = min.get();
        return (current == Long.MAX_VALUE) ? 0 : current;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,getTotal,long getTotal(),"[92, 94]","{'A713': [(92, 94)]}",{'A713': 1.0},A713,,"    public long getTotal() {
        return total.get();
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,resetMax,void resetMax(),"[96, 98]","{'A713': [(96, 98)]}",{'A713': 1.0},A713,,"    public void resetMax() {
        max.set(getMin());
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,reset,void reset(),"[100, 105]","{'A713': [(100, 105)]}",{'A713': 1.0},A713,,"    public void reset() {
        count.set(0);
        total.set(0);
        min.set(Long.MAX_VALUE);
        max.set(Long.MIN_VALUE);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,add,void add(long),"[107, 109]","{'A713': [(107, 109)]}",{'A713': 1.0},A713,,"    public void add(long value) {
        addDataPoint(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxCounter.java,AvgMinMaxCounter,values,"Map<String, Object> values()","[111, 119]","{'A713': [(113, 116), (118, 119)], 'A641': [(111, 111)], 'A605': [(112, 112)], 'A675': [(117, 117)]}","{'A713': 0.6666666666666666, 'A641': 0.1111111111111111, 'A605': 0.1111111111111111, 'A675': 0.1111111111111111}",A713,,"    public Map<String, Object> values() {
        Map<String, Object> m = new LinkedHashMap<>();
        m.put(""avg_"" + name, this.getAvg());
        m.put(""min_"" + name, this.getMin());
        m.put(""max_"" + name, this.getMax());
        m.put(""cnt_"" + name, this.getCount());
        m.put(""sum_"" + name, this.getTotal());
        return m;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounter.java,SimpleCounter,add,void add(long),"[35, 38]","{'A713': [(35, 38)]}",{'A713': 1.0},A713,,"    @Override
    public void add(long value) {
        counter.addAndGet(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounter.java,SimpleCounter,reset,void reset(),"[40, 43]","{'A713': [(40, 43)]}",{'A713': 1.0},A713,,"    @Override
    public void reset() {
        counter.set(0);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounter.java,SimpleCounter,get,long get(),"[45, 47]","{'A713': [(46, 47)], 'A584': [(45, 45)]}","{'A713': 0.6666666666666666, 'A584': 0.3333333333333333}",A713,,"    public long get() {
        return counter.get();
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounter.java,SimpleCounter,values,"Map<String, Object> values()","[49, 54]","{'A713': [(49, 49), (53, 54)], 'A584': [(52, 52)], 'A641': [(50, 50)], 'A605': [(51, 51)]}","{'A713': 0.5, 'A584': 0.16666666666666666, 'A641': 0.16666666666666666, 'A605': 0.16666666666666666}",A713,,"    @Override
    public Map<String, Object> values() {
        Map<String, Object> m = new LinkedHashMap<>();
        m.put(name, this.get());
        return m;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter.ResettableUniformReservoir,size,int size(),"[53, 60]","{'A675': [(53, 60)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"        @Override
        public int size() {
            final long c = count.get();
            if (c > values.length()) {
                return values.length();
            }
            return (int) c;
        }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter.ResettableUniformReservoir,update,void update(long),"[62, 73]","{'A675': [(62, 73)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"        @Override
        public void update(long value) {
            final long c = count.incrementAndGet();
            if (c <= values.length()) {
                values.set((int) c - 1, value);
            } else {
                final long r = nextLong(c);
                if (r < values.length()) {
                    values.set((int) r, value);
                }
            }
        }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter.ResettableUniformReservoir,nextLong,long nextLong(long),"[75, 82]","{'A675': [(75, 82)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"        private static long nextLong(long n) {
            long bits, val;
            do {
                bits = ThreadLocalRandom.current().nextLong() & (~(1L << BITS_PER_LONG));
                val = bits % n;
            } while (bits - val + (n - 1) < 0L);
            return val;
        }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter.ResettableUniformReservoir,getSnapshot,Snapshot getSnapshot(),"[84, 92]","{'A675': [(84, 86), (88, 92)], 'A605': [(87, 87)]}","{'A675': 0.8888888888888888, 'A605': 0.1111111111111111}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"        @Override
        public Snapshot getSnapshot() {
            final int s = size();
            final List<Long> copy = new ArrayList<>(s);
            for (int i = 0; i < s; i++) {
                copy.add(values.get(i));
            }
            return new UniformSnapshot(copy);
        }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter.ResettableUniformReservoir,reset,void reset(),"[94, 97]","{'A675': [(94, 97)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"        public void reset() {
            count.set(0);
            values = new AtomicLongArray(DEFAULT_SIZE);
        }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter,addDataPoint,void addDataPoint(long),"[109, 112]","{'A675': [(109, 112)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"    public void addDataPoint(long value) {
        counter.add(value);
        histogram.update(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter,resetMax,void resetMax(),"[114, 117]","{'A675': [(114, 117)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"    public void resetMax() {
        // To match existing behavior in upstream
        counter.resetMax();
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter,reset,void reset(),"[119, 122]","{'A675': [(119, 122)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"    public void reset() {
        counter.reset();
        reservoir.reset();
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter,add,void add(long),"[124, 126]","{'A675': [(124, 126)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"    public void add(long value) {
        addDataPoint(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounter.java,AvgMinMaxPercentileCounter,values,"Map<String, Object> values()","[128, 136]","{'A675': [(128, 136)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterTest.java,"    public Map<String, Object> values() {
        Map<String, Object> m = new LinkedHashMap<>();
        m.putAll(counter.values());
        m.put(""p50_"" + name, Math.round(this.histogram.getSnapshot().getMedian()));
        m.put(""p95_"" + name, Math.round(this.histogram.getSnapshot().get95thPercentile()));
        m.put(""p99_"" + name, Math.round(this.histogram.getSnapshot().get99thPercentile()));
        m.put(""p999_"" + name, Math.round(this.histogram.getSnapshot().get999thPercentile()));
        return m;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounterSet.java,SimpleCounterSet,add,"void add(String,long)","[38, 42]","{'A586': [(38, 42)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/SimpleCounterSetTest.java,"    @Override
    public void add(final String key, final long delta) {
        final SimpleCounter counter = counters.computeIfAbsent(key, (k) -> new SimpleCounter(k + ""_"" + name));
        counter.add(delta);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounterSet.java,SimpleCounterSet,reset,void reset(),"[44, 47]","{'A586': [(44, 47)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/SimpleCounterSetTest.java,"    @Override
    public void reset() {
        counters.values().forEach(SimpleCounter::reset);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/SimpleCounterSet.java,SimpleCounterSet,values,"Map<String, Object> values()","[49, 54]","{'A586': [(49, 54)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/SimpleCounterSetTest.java,"    @Override
    public Map<String, Object> values() {
        final Map<String, Object> m = new LinkedHashMap<>();
        counters.values().forEach(counter -> m.putAll(counter.values()));
        return m;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/Metric.java,Metric,add,void add(long),"[25, 26]","{'A583': [(25, 26)]}",{'A583': 1.0},A583,,"    public void add(long value) {
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/Metric.java,Metric,add,"void add(int,long)","[27, 28]","{'A583': [(27, 28)]}",{'A583': 1.0},A583,,"    public void add(int key, long value) {
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/Metric.java,Metric,add,"void add(String,long)","[29, 30]","{'A583': [(29, 30)]}",{'A583': 1.0},A583,,"    public void add(String key, long value) {
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/Metric.java,Metric,reset,void reset(),"[31, 32]","{'A583': [(31, 32)]}",{'A583': 1.0},A583,,"    public void reset() {
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSet.java,AvgMinMaxPercentileCounterSet,getCounterForKey,AvgMinMaxPercentileCounter getCounterForKey(String),"[41, 49]","{'A675': [(41, 49)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSetTest.java,"    private AvgMinMaxPercentileCounter getCounterForKey(String key) {
        AvgMinMaxPercentileCounter counter = counters.get(key);
        if (counter == null) {
            counters.putIfAbsent(key, new AvgMinMaxPercentileCounter(key + ""_"" + name));
            counter = counters.get(key);
        }

        return counter;
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSet.java,AvgMinMaxPercentileCounterSet,addDataPoint,"void addDataPoint(String,long)","[51, 53]","{'A675': [(51, 53)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSetTest.java,"    public void addDataPoint(String key, long value) {
        getCounterForKey(key).addDataPoint(value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSet.java,AvgMinMaxPercentileCounterSet,resetMax,void resetMax(),"[55, 59]","{'A675': [(55, 59)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSetTest.java,"    public void resetMax() {
        for (Map.Entry<String, AvgMinMaxPercentileCounter> entry : counters.entrySet()) {
            entry.getValue().resetMax();
        }
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSet.java,AvgMinMaxPercentileCounterSet,reset,void reset(),"[61, 65]","{'A675': [(61, 65)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSetTest.java,"    public void reset() {
        for (Map.Entry<String, AvgMinMaxPercentileCounter> entry : counters.entrySet()) {
            entry.getValue().reset();
        }
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSet.java,AvgMinMaxPercentileCounterSet,add,"void add(String,long)","[67, 70]","{'A675': [(67, 70)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSetTest.java,"    @Override
    public void add(String key, long value) {
        addDataPoint(key, value);
    }
"
org.apache.zookeeper.server.metric,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSet.java,AvgMinMaxPercentileCounterSet,values,"Map<String, Object> values()","[72, 79]","{'A675': [(72, 79)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/metric/AvgMinMaxPercentileCounterSetTest.java,"    @Override
    public Map<String, Object> values() {
        Map<String, Object> m = new LinkedHashMap<>();
        for (Map.Entry<String, AvgMinMaxPercentileCounter> entry : counters.entrySet()) {
            m.putAll(entry.getValue().values());
        }
        return m;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandClient.java,CommandClient,close,void close(),"[70, 79]","{'A604': [(70, 79)]}",{'A604': 1.0},A604,,"    public synchronized void close() {
        try {
            if (client != null) {
                client.stop();
                client = null;
            }
        } catch (Exception ex) {
            LOG.warn(""Exception during shutdown"", ex);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandClient.java,CommandClient,trySendCommand,boolean trySendCommand(ControlCommand.Action),"[85, 87]","{'A604': [(85, 87)]}",{'A604': 1.0},A604,,"    public boolean trySendCommand(ControlCommand.Action action) {
        return trySendCommand(action, null);
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandClient.java,CommandClient,trySendCommand,"boolean trySendCommand(ControlCommand.Action,String)","[95, 111]","{'A604': [(95, 111)]}",{'A604': 1.0},A604,,"    public boolean trySendCommand(ControlCommand.Action action, String commandParameter)  {
        try {
            if (!started) {
                client.start();
                started = true;
            }
            ContentResponse response = sendCommand(action, commandParameter);
            LOG.info(""Received {} response from the server"", response);
            return (response.getStatus() == 200);
        } catch (InterruptedException | IOException ex) {
            LOG.warn(""Failed to get response from server"", ex);
        } catch (Exception ex) {
            LOG.error(""Unknown exception when sending command"", ex);
        }

        return false;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandClient.java,CommandClient,sendCommand,"ContentResponse sendCommand(ControlCommand.Action,String)","[121, 130]","{'A604': [(121, 130)]}",{'A604': 1.0},A604,,"    public ContentResponse sendCommand(ControlCommand.Action action,
                                       String commandParameter) throws Exception {
        String command = String.format(""%s%s:%s/%s"", ""http://"",
            this.hostName, this.hostPort, ControlCommand.createCommandUri(action, commandParameter));
        ContentResponse response = this.client.newRequest(command).timeout(this.requestTimeoutInMs,
            TimeUnit.MILLISECONDS).send();
        LOG.info(""Sent command {}"", command);
        LOG.info(""Response body {}"", new String(response.getContent(), StandardCharsets.UTF_8));
        return response;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java,ControllerServerConfig,getControllerAddress,InetSocketAddress getControllerAddress(),"[41, 43]","{'A604': [(41, 43)]}",{'A604': 1.0},A604,,"    public InetSocketAddress getControllerAddress() {
        return controllerAddress;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java,ControllerServerConfig,getZooKeeperServerConfig,ServerConfig getZooKeeperServerConfig(),"[79, 83]","{'A604': [(79, 83)]}",{'A604': 1.0},A604,,"    public ServerConfig getZooKeeperServerConfig() {
        ServerConfig serverConfig = new ServerConfig();
        serverConfig.readFrom(this);
        return serverConfig;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java,ControllerServerConfig,parse,void parse(String),"[85, 104]","{'A604': [(85, 104)]}",{'A604': 1.0},A604,,"    @Override
    public void parse(String configFile) throws ConfigException {
        super.parse(configFile);
        for (String key : System.getProperties().stringPropertyNames()) {
            if (CONTROLLER_PORT_KEY.equalsIgnoreCase(key)) {
                setControllerAddress(System.getProperty(key));
            }
            if (CLIENT_PORT_KEY.equals(key)) {
                setClientAddress(System.getProperty(key));
            }
        }

        if (controllerAddress == null) {
            throw new ConfigException(""Missing required parameter "" + CONTROLLER_PORT_KEY);
        }

        if (clientPortAddress == null) {
            throw new ConfigException(""Missing required parameter "" + CLIENT_PORT_KEY);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java,ControllerServerConfig,setControllerAddress,void setControllerAddress(String),"[106, 112]","{'A604': [(106, 112)]}",{'A604': 1.0},A604,,"    private void setControllerAddress(String port) {
        try {
            controllerAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), Integer.parseInt(port));
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException(""Invalid port"", ex);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java,ControllerServerConfig,setClientAddress,void setClientAddress(String),"[114, 120]","{'A604': [(114, 120)]}",{'A604': 1.0},A604,,"    private void setClientAddress(String port) {
        try {
            clientPortAddress = new InetSocketAddress(InetAddress.getLoopbackAddress(), Integer.parseInt(port));
        } catch (NumberFormatException ex) {
            throw new IllegalArgumentException(""Invalid port"", ex);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerServerConfig.java,ControllerServerConfig,ensureComplete,void ensureComplete(),"[128, 155]","{'A604': [(128, 155)]}",{'A604': 1.0},A604,,"    public void ensureComplete() throws IOException {
        if (this.quorumVerifier != null && this.quorumVerifier.getAllMembers().size() > 0) {
            return;
        }

        // QuorumPeer requires a QuorumVerifier.
        // We will use majority strategy with only this host in the quorum.
        // We need to provide 2 more ports: one for elections and one for quorum communications.
        // We will also mark this host as the leader.
        ServerSocket randomSocket1 = new ServerSocket(0);
        int quorumPort = randomSocket1.getLocalPort();

        ServerSocket randomSocket2 = new ServerSocket(0);
        int electionPort = randomSocket2.getLocalPort();

        randomSocket1.close();
        randomSocket2.close();

        QuorumPeer.QuorumServer selfAsPeer = new QuorumPeer.QuorumServer(
                0,
                new InetSocketAddress(quorumPort),
                new InetSocketAddress(electionPort),
                this.clientPortAddress
        );
        Map<Long, QuorumPeer.QuorumServer> peers = new HashMap<>();
        peers.put(selfAsPeer.id, selfAsPeer);
        this.quorumVerifier = new QuorumMaj(peers);
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,main,void main(String[]),"[49, 63]","{'A604': [(49, 63)]}",{'A604': 1.0},A604,,"    public static void main(String[] args) {
        ControllerServerConfig config;
        try {
            if (args.length != 1) {
                throw new IllegalArgumentException(""Require config file as cmd line argument"");
            } else {
                config = new ControllerServerConfig(args[0]);
            }
            new ControllerService().start(config);
        } catch (Exception ex) {
            System.err.println(ex.getMessage());
            System.err.println(""Usage: TestControllerMain controller-port configfile"");
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,start,Thread start(ControllerServerConfig),"[69, 82]","{'A604': [(69, 82)]}",{'A604': 1.0},A604,,"    public Thread start(ControllerServerConfig controllerConfig) {
        this.config = controllerConfig;
        final ControllerService svc = this;

        Thread runner = new Thread(() -> {
            try {
                svc.run();
            } catch (Exception e) {
            }
        });
        runner.setDaemon(true);
        runner.start();
        return runner;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,shutdown,void shutdown(),"[84, 94]","{'A604': [(84, 94)]}",{'A604': 1.0},A604,,"    public synchronized void shutdown() {
        if (listener != null) {
            listener.close();
            listener = null;
        }

        if (controller != null) {
            controller.shutdown();
            controller = null;
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,initService,void initService(),"[100, 106]","{'A604': [(100, 106)]}",{'A604': 1.0},A604,,"    protected void initService() throws IOException {
        ControllerServerConfig controllerConfig = (ControllerServerConfig) config;
        controllerConfig.ensureComplete();
        this.controller = new ZooKeeperServerController(controllerConfig);
        this.listener = new CommandListener(controller, controllerConfig);
        this.serverCnxnFactory = controller.getCnxnFactory();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,runServices,void runServices(),"[108, 110]","{'A604': [(108, 110)]}",{'A604': 1.0},A604,,"    protected void runServices() {
        this.controller.run();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,cleanup,void cleanup(),"[112, 117]","{'A604': [(112, 117)]}",{'A604': 1.0},A604,,"    protected void cleanup() {
        if (listener != null) {
            listener.close();
            listener = null;
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,initializeAndRun,void initializeAndRun(String[]),"[122, 125]","{'A604': [(122, 125)]}",{'A604': 1.0},A604,,"    public void initializeAndRun(String[] args) throws QuorumPeerConfig.ConfigException {
        initConfig(args);
        run();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,initConfig,void initConfig(String[]),"[130, 134]","{'A604': [(130, 134)]}",{'A604': 1.0},A604,,"    protected void initConfig(String[] args) throws QuorumPeerConfig.ConfigException {
        if (args.length == 1) {
            config.parse(args[0]);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,runFromConfig,void runFromConfig(QuorumPeerConfig),"[141, 145]","{'A604': [(141, 145)]}",{'A604': 1.0},A604,,"    public void runFromConfig(QuorumPeerConfig config) {
        LOG.info(""Starting quorum peer from peer config"");
        this.config = config;
        run();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,run,void run(),"[147, 157]","{'A604': [(147, 157)]}",{'A604': 1.0},A604,,"    protected void run() {
        try {
            initService();
        } catch (Exception ex) {
            LOG.error(""Failed to start ControllerService."", ex);
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());

        }
        runServices();
        cleanup();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllerService.java,ControllerService,isReady,boolean isReady(),"[164, 166]","{'A604': [(164, 166)]}",{'A604': 1.0},A604,,"    public boolean isReady() {
        return controller != null && controller.isReady();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,run,void run(),"[59, 67]","{'A604': [(59, 67)]}",{'A604': 1.0},A604,,"    public void run() {
        try {
            quorumPeer.start();
            quorumPeer.join();
        } catch (Exception ex) {
            LOG.error(""Fatal error starting quorum peer"", ex);
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,getCnxnFactory,ServerCnxnFactory getCnxnFactory(),"[69, 71]","{'A604': [(69, 71)]}",{'A604': 1.0},A604,,"    protected ServerCnxnFactory getCnxnFactory() {
        return cnxnFactory;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,shutdown,void shutdown(),"[73, 83]","{'A604': [(73, 83)]}",{'A604': 1.0},A604,,"    public synchronized void shutdown() {
        if (this.cnxnFactory != null) {
            this.cnxnFactory.shutdown();
            this.cnxnFactory = null;
        }

        if (this.quorumPeer != null && this.quorumPeer.isRunning()) {
            this.quorumPeer.shutdown();
            this.quorumPeer = null;
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,isReady,boolean isReady(),"[85, 90]","{'A604': [(85, 90)]}",{'A604': 1.0},A604,,"    public synchronized boolean isReady() {
        return this.cnxnFactory != null
                && this.quorumPeer != null
                && this.quorumPeer.isRunning()
                && this.quorumPeer.getActiveServer() != null;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,processCommand,void processCommand(ControlCommand),"[95, 165]","{'A604': [(95, 165)]}",{'A604': 1.0},A604,,"    public void processCommand(ControlCommand command) {
        if (command == null) {
            throw new IllegalArgumentException(""Invalid command parameter!"");
        }

        LOG.info(""processing command {}{}"", command.getAction(),
                command.getParameter() == null ? """" : ""["" + command.getParameter() + ""]"");

        // Don't process command if we are shutting down or still initializing.
        if (!isReady()) {
            throw new IllegalStateException(""Service is not ready. It has already been shutdown or is still initializing."");
        }

        switch (command.getAction()) {
            case PING:
                // NO-OP
                break;
            case SHUTDOWN:
                shutdown();
                break;
            case CLOSECONNECTION:
                if (command.getParameter() == null) {
                    cnxnFactory.closeAll(ServerCnxn.DisconnectReason.CLOSE_ALL_CONNECTIONS_FORCED);
                } else {
                    // A single parameter should be a session id as long.
                    // Parse failure exceptions will be sent to the caller.
                    cnxnFactory.closeSession(Long.decode(command.getParameter()),
                            ServerCnxn.DisconnectReason.CONNECTION_CLOSE_FORCED);
                }
                break;
            case EXPIRESESSION:
                if (command.getParameter() == null) {
                    expireAllSessions();
                } else {
                    // A single parameter should be a session id as long.
                    // Parse failure exceptions will be sent to the caller
                    expireSession(Long.decode(command.getParameter()));
                }
                break;
            case REJECTCONNECTIONS:
                // TODO: (hanm) implement once dependent feature is ready.
                //cnxnFactory.rejectNewConnections();
                break;
            case ADDDELAY:
                cnxnFactory.delayResponses(command.getParameter() == null
                        ? DEFAULT_DELAY_MS : Long.decode(command.getParameter()));
                break;
            case NORESPONSE:
                if (command.getParameter() == null) {
                    cnxnFactory.holdAllFutureResponses();
                } else {
                    cnxnFactory.holdFutureResponses(Long.decode(command.getParameter()));
                }
                break;
            case FAILREQUESTS:
                if (command.getParameter() == null) {
                    cnxnFactory.failAllFutureRequests();
                } else {
                    cnxnFactory.failFutureRequests(Long.decode(command.getParameter()));
                }
                break;
            case RESET:
                cnxnFactory.resetBadBehavior();
                break;
            case ELECTNEWLEADER:
                quorumPeer.startLeaderElection();
                break;
            default:
                throw new IllegalArgumentException(""Unknown command: "" + command);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,getServer,ZooKeeperServer getServer(),"[167, 169]","{'A604': [(167, 169)]}",{'A604': 1.0},A604,,"    private ZooKeeperServer getServer() {
        return quorumPeer.getActiveServer();
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,expireSession,void expireSession(long),"[171, 173]","{'A604': [(171, 173)]}",{'A604': 1.0},A604,,"    private void expireSession(long sessionId) {
        getServer().expire(sessionId);
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ZooKeeperServerController.java,ZooKeeperServerController,expireAllSessions,void expireAllSessions(),"[175, 183]","{'A604': [(175, 183)]}",{'A604': 1.0},A604,,"    private void expireAllSessions() {
        for (Long sessionId : getServer().getSessionTracker().localSessions()) {
            expireSession(sessionId);
        }

        for (Long sessionId : getServer().getSessionTracker().globalSessions()) {
            expireSession(sessionId);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java,CommandListener,close,void close(),"[59, 68]","{'A604': [(59, 68)]}",{'A604': 1.0},A604,,"    public void close() {
        try {
            if (server != null) {
                server.stop();
                server = null;
            }
        } catch (Exception ex) {
            LOG.warn(""Exception during shutdown CommandListener server"", ex);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/CommandListener.java,CommandListener.CommandHandler,handle,"void handle(String,Request,HttpServletRequest,HttpServletResponse)","[71, 94]","{'A604': [(71, 94)]}",{'A604': 1.0},A604,,"        @Override
        public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
                throws IOException {
            // Extract command string from request path. Remove leading '/'.
            String commandStr = request.getPathInfo().substring(1);
            int responseCode;
            response.setContentType(""text/html;charset=utf-8"");

            try {
                ControlCommand command = ControlCommand.parseUri(commandStr);
                controller.processCommand(command);
                baseRequest.setHandled(true);
                responseCode = HttpServletResponse.SC_OK;
            } catch (IllegalArgumentException ex) {
                LOG.error(""Bad argument or command"", ex);
                responseCode = HttpServletResponse.SC_BAD_REQUEST;
            } catch (Exception ex) {
                LOG.error(""Failed processing the request"", ex);
                throw ex;
            }
            response.setStatus(responseCode);
            response.getWriter().println(commandStr);
            LOG.info(""CommandListener processed command {} with response code {}"", commandStr, responseCode);
        }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnection.java,ControllableConnection,sendResponse,"int sendResponse(ReplyHeader,Record,String)","[53, 65]","{'A604': [(53, 65)]}",{'A604': 1.0},A604,,"    @Override
    public int sendResponse(ReplyHeader header, Record record, String tag) {
        if (controller.shouldSendResponse()) {
            try {
                return super.sendResponse(header, record, tag);
            } catch (IOException ex) {
                LOG.warn(""IO Exception occurred"", ex);
            }
        } else {
            LOG.warn(""Controller is configured to NOT sending response back to client."");
        }
        return -1;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnection.java,ControllableConnection,readRequest,void readRequest(),"[67, 80]","{'A604': [(67, 80)]}",{'A604': 1.0},A604,,"    @Override
    protected void readRequest() throws IOException {
        if (controller.shouldFailNextRequest()) {
            ByteBuffer buffer = incomingBuffer.slice();
            BinaryInputArchive bia = BinaryInputArchive.getArchive(new ByteBufferInputStream(buffer));
            RequestHeader h = new RequestHeader();
            h.deserialize(bia, ""header"");
            super.sendResponse(new ReplyHeader(h.getXid(), 0, KeeperException.Code.APIERROR.intValue()),
                    null, null);
        } else {
            controller.delayRequestIfNeeded();
            super.readRequest();
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControlCommand.java,ControlCommand,getAction,Action getAction(),"[66, 68]","{'A604': [(66, 68)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/controller/ControlCommandTest.java,"    public Action getAction() {
        return action;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControlCommand.java,ControlCommand,getParameter,String getParameter(),"[71, 73]","{'A604': [(71, 73)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/controller/ControlCommandTest.java,"    protected String getParameter() {
        return parameter;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControlCommand.java,ControlCommand,createCommandUri,"String createCommandUri(Action,String)","[90, 92]","{'A604': [(90, 92)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/controller/ControlCommandTest.java,"    public static String createCommandUri(Action action, String parameter) {
        return ENDPOINT_PREFIX + action.toString() + (parameter != null && !parameter.isEmpty() ? ""/"" + parameter : """");
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControlCommand.java,ControlCommand,parseUri,ControlCommand parseUri(String),"[98, 121]","{'A604': [(98, 121)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/controller/ControlCommandTest.java,"    public static ControlCommand parseUri(String commandUri) {
        if (commandUri == null) {
            throw new IllegalArgumentException(""commandUri can't be null."");
        }

        if (!commandUri.startsWith(ENDPOINT_PREFIX)) {
            throw new IllegalArgumentException(""Missing required prefix: "" + ENDPOINT_PREFIX);
        }

        String uri = commandUri.substring(ENDPOINT_PREFIX.length());
        String name;
        String param;

        int separatorIndex = uri.indexOf('/');
        if (separatorIndex < 0) {
            name = uri;
            param = null;
        } else {
            name = uri.substring(0, separatorIndex);
            param = uri.substring(separatorIndex + 1);
        }

        return new ControlCommand(Action.valueOf(name.toUpperCase()), param);
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,createConnection,"NIOServerCnxn createConnection(SocketChannel,SelectionKey,SelectorThread)","[44, 48]","{'A604': [(44, 48)]}",{'A604': 1.0},A604,,"    @Override
    protected NIOServerCnxn createConnection(SocketChannel sock, SelectionKey sk, SelectorThread selectorThread)
            throws IOException {
        return new ControllableConnection(zkServer, sock, sk, this, selectorThread);
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,delayRequestIfNeeded,void delayRequestIfNeeded(),"[53, 61]","{'A604': [(53, 61)]}",{'A604': 1.0},A604,,"    public synchronized void delayRequestIfNeeded() {
        try {
            if (responseDelayInMs > 0) {
                Thread.sleep(responseDelayInMs);
            }
        } catch (InterruptedException ex) {
            LOG.warn(""Interrupted while delaying requests"", ex);
        }
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,shouldFailNextRequest,boolean shouldFailNextRequest(),"[67, 78]","{'A604': [(67, 78)]}",{'A604': 1.0},A604,,"    public synchronized boolean shouldFailNextRequest() {
        if (remainingRequestsToFail == 0) {
            return false;
        }

        // Value < 0 indicates fail all requests.
        if (remainingRequestsToFail > 0) {
            remainingRequestsToFail--;
        }

        return true;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,shouldSendResponse,boolean shouldSendResponse(),"[85, 95]","{'A604': [(85, 95)]}",{'A604': 1.0},A604,,"    public synchronized boolean shouldSendResponse() {
        if (remainingResponsesToHold == 0) {
            return true;
        }

        // Value < 0 indicates hold all the responses.
        if (remainingResponsesToHold > 0) {
            remainingResponsesToHold--;
        }
        return false;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,delayResponses,void delayResponses(long),"[97, 102]","{'A604': [(97, 102)]}",{'A604': 1.0},A604,,"    public synchronized void delayResponses(long delayInMs) {
        if (delayInMs < 0) {
            throw new IllegalArgumentException(""delay must be non-negative"");
        }
        responseDelayInMs = delayInMs;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,resetBadBehavior,void resetBadBehavior(),"[104, 108]","{'A604': [(104, 108)]}",{'A604': 1.0},A604,,"    public synchronized void resetBadBehavior() {
        responseDelayInMs = 0;
        remainingRequestsToFail = 0;
        remainingResponsesToHold = 0;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,failAllFutureRequests,void failAllFutureRequests(),"[110, 112]","{'A604': [(110, 112)]}",{'A604': 1.0},A604,,"    public synchronized void failAllFutureRequests() {
        this.remainingRequestsToFail = -1;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,failFutureRequests,void failFutureRequests(long),"[114, 116]","{'A604': [(114, 116)]}",{'A604': 1.0},A604,,"    public synchronized void failFutureRequests(long requestsToFail) {
        this.remainingRequestsToFail = requestsToFail;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,holdAllFutureResponses,void holdAllFutureResponses(),"[118, 120]","{'A604': [(118, 120)]}",{'A604': 1.0},A604,,"    public synchronized void holdAllFutureResponses() {
        this.remainingResponsesToHold = -1;
    }
"
org.apache.zookeeper.server.controller,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/controller/ControllableConnectionFactory.java,ControllableConnectionFactory,holdFutureResponses,void holdFutureResponses(long),"[122, 124]","{'A604': [(122, 124)]}",{'A604': 1.0},A604,,"    public synchronized void holdFutureResponses(long requestsToHold) {
        this.remainingResponsesToHold = requestsToHold;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java,ZooTrace,getTextTraceLevel,long getTextTraceLevel(),"[62, 64]","{'A591': [(62, 64)]}",{'A591': 1.0},A591,,"    public static synchronized long getTextTraceLevel() {
        return traceMask;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java,ZooTrace,setTextTraceLevel,void setTextTraceLevel(long),"[66, 70]","{'A583': [(69, 69)], 'A591': [(66, 67), (70, 70)], 'A593': [(68, 68)]}","{'A583': 0.2, 'A591': 0.6, 'A593': 0.2}",A591,,"    public static synchronized void setTextTraceLevel(long mask) {
        traceMask = mask;
        final Logger LOG = LoggerFactory.getLogger(ZooTrace.class);
        LOG.info(""Set text trace mask to 0x{}"", Long.toHexString(mask));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java,ZooTrace,isTraceEnabled,"boolean isTraceEnabled(Logger,long)","[72, 74]","{'A591': [(72, 74)]}",{'A591': 1.0},A591,,"    public static synchronized boolean isTraceEnabled(Logger log, long mask) {
        return log.isTraceEnabled() && (mask & traceMask) != 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java,ZooTrace,logTraceMessage,"void logTraceMessage(Logger,long,String)","[76, 80]","{'A591': [(76, 80)]}",{'A591': 1.0},A591,,"    public static void logTraceMessage(Logger log, long mask, String msg) {
        if (isTraceEnabled(log, mask)) {
            log.trace(msg);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java,ZooTrace,logQuorumPacket,"void logQuorumPacket(Logger,long,char,QuorumPacket)","[82, 86]","{'A583': [(82, 85)], 'A591': [(86, 86)]}","{'A583': 0.8, 'A591': 0.2}",A583,,"    public static void logQuorumPacket(Logger log, long mask, char direction, QuorumPacket qp) {
        if (isTraceEnabled(log, mask)) {
            logTraceMessage(log, mask, direction + "" "" + LearnerHandler.packetToString(qp));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooTrace.java,ZooTrace,logRequest,"void logRequest(Logger,long,char,Request,String)","[88, 92]","{'A583': [(88, 88)], 'A591': [(89, 92)]}","{'A583': 0.2, 'A591': 0.8}",A591,,"    public static void logRequest(Logger log, long mask, char rp, Request request, String header) {
        if (isTraceEnabled(log, mask)) {
            log.trace(header + "":"" + rp + request.toString());
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TraceFormatter.java,TraceFormatter,main,void main(String[]),"[36, 84]","{'A583': [(62, 62)], 'A590': [(36, 38), (40, 61), (63, 66), (83, 84)], 'A584': [(39, 39)], 'A641': [(67, 82)]}","{'A583': 0.02040816326530612, 'A590': 0.6326530612244898, 'A584': 0.02040816326530612, 'A641': 0.32653061224489793}",A590,,"    public static void main(String[] args) throws IOException {
        if (args.length != 1) {
            System.err.println(""USAGE: TraceFormatter trace_file"");
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        }
        FileChannel fc = new FileInputStream(args[0]).getChannel();
        while (true) {
            ByteBuffer bb = ByteBuffer.allocate(41);
            fc.read(bb);
            bb.flip();

            byte app = bb.get();
            long time = bb.getLong();
            long id = bb.getLong();
            int cxid = bb.getInt();
            long zxid = bb.getLong();
            int txnType = bb.getInt();
            int type = bb.getInt();
            int len = bb.getInt();
            bb = ByteBuffer.allocate(len);
            fc.read(bb);
            bb.flip();
            String path = ""n/a"";
            if (bb.remaining() > 0) {
                if (type != OpCode.createSession) {
                    int pathLen = bb.getInt();
                    byte[] b = new byte[pathLen];
                    bb.get(b);
                    path = new String(b);
                }
            }
            System.out.println(DateFormat.getDateTimeInstance(DateFormat.SHORT,
                    DateFormat.LONG).format(new Date(time))
                    + "": ""
                    + (char) app
                    + "" id=0x""
                    + Long.toHexString(id)
                    + "" cxid=""
                    + cxid
                    + "" op=""
                    + Request.op2String(type)
                    + "" zxid=0x""
                    + Long.toHexString(zxid)
                    + "" txnType=""
                    + txnType
                    + "" len=""
                    + len + "" path="" + path);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isEnableEagerACLCheck,boolean isEnableEagerACLCheck(),"[175, 177]","{'A625': [(175, 177)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static boolean isEnableEagerACLCheck() {
        return enableEagerACLCheck;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setEnableEagerACLCheck,void setEnableEagerACLCheck(boolean),"[180, 183]","{'A625': [(180, 183)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static void setEnableEagerACLCheck(boolean enabled) {
        ZooKeeperServer.enableEagerACLCheck = enabled;
        LOG.info(""Update {} to {}"", ENABLE_EAGER_ACL_CHECK, enabled);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isCloseSessionTxnEnabled,boolean isCloseSessionTxnEnabled(),"[185, 187]","{'A612': [(185, 187)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static boolean isCloseSessionTxnEnabled() {
        return closeSessionTxnEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setCloseSessionTxnEnabled,void setCloseSessionTxnEnabled(boolean),"[189, 193]","{'A596': [(193, 193)], 'A612': [(189, 192)]}","{'A596': 0.2, 'A612': 0.8}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static void setCloseSessionTxnEnabled(boolean enabled) {
        ZooKeeperServer.closeSessionTxnEnabled = enabled;
        LOG.info(""Update {} to {}"", CLOSE_SESSION_TXN_ENABLED,
                ZooKeeperServer.closeSessionTxnEnabled);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,removeCnxn,void removeCnxn(ServerCnxn),"[332, 334]","{'A590': [(332, 332), (334, 334)], 'A596': [(333, 333)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    void removeCnxn(ServerCnxn cnxn) {
        zkDb.removeCnxn(cnxn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getInitialConfig,String getInitialConfig(),"[403, 405]","{'A647': [(403, 405)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public String getInitialConfig() {
        return initialConfig;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,serverStats,ServerStats serverStats(),"[430, 432]","{'A591': [(430, 432)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ServerStats serverStats() {
        return serverStats;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getRequestPathMetricsCollector,RequestPathMetricsCollector getRequestPathMetricsCollector(),"[434, 436]","{'A604': [(434, 436)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public RequestPathMetricsCollector getRequestPathMetricsCollector() {
        return requestPathMetricsCollector;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,connThrottle,BlueThrottle connThrottle(),"[438, 440]","{'A675': [(438, 440)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public BlueThrottle connThrottle() {
        return connThrottle;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,dumpConf,void dumpConf(PrintWriter),"[442, 468]","{'A726': [(452, 452)], 'A596': [(442, 444), (447, 447), (455, 457), (459, 462), (465, 468)], 'A689': [(463, 464)], 'A630': [(445, 446), (458, 458)], 'A749': [(448, 448)], 'A616': [(449, 451), (453, 454)]}","{'A726': 0.037037037037037035, 'A596': 0.5555555555555556, 'A689': 0.07407407407407407, 'A630': 0.1111111111111111, 'A749': 0.037037037037037035, 'A616': 0.18518518518518517}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void dumpConf(PrintWriter pwriter) {
        pwriter.print(""clientPort="");
        pwriter.println(getClientPort());
        pwriter.print(""secureClientPort="");
        pwriter.println(getSecureClientPort());
        pwriter.print(""dataDir="");
        pwriter.println(zkDb.snapLog.getSnapDir().getAbsolutePath());
        pwriter.print(""dataDirSize="");
        pwriter.println(getDataDirSize());
        pwriter.print(""dataLogDir="");
        pwriter.println(zkDb.snapLog.getDataLogDir().getAbsolutePath());
        pwriter.print(""dataLogSize="");
        pwriter.println(getLogDirSize());
        pwriter.print(""tickTime="");
        pwriter.println(getTickTime());
        pwriter.print(""maxClientCnxns="");
        pwriter.println(getMaxClientCnxnsPerHost());
        pwriter.print(""minSessionTimeout="");
        pwriter.println(getMinSessionTimeout());
        pwriter.print(""maxSessionTimeout="");
        pwriter.println(getMaxSessionTimeout());
        pwriter.print(""clientPortListenBacklog="");
        pwriter.println(getClientPortListenBacklog());

        pwriter.print(""serverId="");
        pwriter.println(getServerId());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getConf,ZooKeeperServerConf getConf(),"[470, 481]","{'A583': [(471, 473), (475, 475), (477, 480)], 'A591': [(470, 470), (481, 481)], 'A726': [(474, 474)], 'A653': [(476, 476)]}","{'A583': 0.6666666666666666, 'A591': 0.16666666666666666, 'A726': 0.08333333333333333, 'A653': 0.08333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ZooKeeperServerConf getConf() {
        return new ZooKeeperServerConf(
            getClientPort(),
            zkDb.snapLog.getSnapDir().getAbsolutePath(),
            zkDb.snapLog.getDataLogDir().getAbsolutePath(),
            getTickTime(),
            getMaxClientCnxnsPerHost(),
            getMinSessionTimeout(),
            getMaxSessionTimeout(),
            getServerId(),
            getClientPortListenBacklog());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getZKDatabase,ZKDatabase getZKDatabase(),"[505, 507]","{'A596': [(505, 507)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ZKDatabase getZKDatabase() {
        return this.zkDb;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setZKDatabase,void setZKDatabase(ZKDatabase),"[513, 515]","{'A583': [(514, 514)], 'A596': [(513, 513), (515, 515)]}","{'A583': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setZKDatabase(ZKDatabase zkDb) {
        this.zkDb = zkDb;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,loadData,void loadData(),"[520, 552]","{'A583': [(539, 539), (541, 541)], 'A590': [(520, 520), (545, 545), (549, 552)], 'A612': [(522, 522), (528, 528), (531, 531), (534, 534), (536, 536), (544, 544)], 'A639': [(521, 521), (523, 527), (529, 530), (532, 533), (535, 535), (537, 538), (540, 540), (542, 543)], 'A750': [(546, 548)]}","{'A583': 0.06060606060606061, 'A590': 0.18181818181818182, 'A612': 0.18181818181818182, 'A639': 0.48484848484848486, 'A750': 0.09090909090909091}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void loadData() throws IOException, InterruptedException {
        /*
         * When a new leader starts executing Leader#lead, it
         * invokes this method. The database, however, has been
         * initialized before running leader election so that
         * the server could pick its zxid for its initial vote.
         * It does it by invoking QuorumPeer#getLastLoggedZxid.
         * Consequently, we don't need to initialize it once more
         * and avoid the penalty of loading it a second time. Not
         * reloading it is particularly important for applications
         * that host a large database.
         *
         * The following if block checks whether the database has
         * been initialized or not. Note that this method is
         * invoked by at least one other method:
         * ZooKeeperServer#startdata.
         *
         * See ZOOKEEPER-1642 for more detail.
         */
        if (zkDb.isInitialized()) {
            setZxid(zkDb.getDataTreeLastProcessedZxid());
        } else {
            setZxid(zkDb.loadDataBase());
        }

        // Clean up dead sessions
        zkDb.getSessions().stream()
                        .filter(session -> zkDb.getSessionWithTimeOuts().get(session) == null)
                        .forEach(session -> killSession(session, zkDb.getDataTreeLastProcessedZxid()));

        // Make a clean snapshot
        takeSnapshot();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,takeSnapshot,File takeSnapshot(),"[554, 556]","{'A726': [(554, 555)], 'A647': [(556, 556)]}","{'A726': 0.6666666666666666, 'A647': 0.3333333333333333}",A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public File takeSnapshot() throws IOException {
        return takeSnapshot(false);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,takeSnapshot,File takeSnapshot(boolean),"[558, 560]","{'A726': [(558, 560)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public File takeSnapshot(boolean syncSnap) throws IOException {
        return takeSnapshot(syncSnap, true);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,takeSnapshot,"File takeSnapshot(boolean,boolean)","[570, 591]","{'A583': [(588, 588)], 'A590': [(573, 573), (577, 577), (586, 586), (591, 591)], 'A726': [(570, 570), (572, 572), (574, 576), (578, 585), (590, 590)], 'A584': [(589, 589)], 'A713': [(571, 571), (587, 587)]}","{'A583': 0.045454545454545456, 'A590': 0.18181818181818182, 'A726': 0.6363636363636364, 'A584': 0.045454545454545456, 'A713': 0.09090909090909091}",A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public File takeSnapshot(boolean syncSnap, boolean isSevere) throws IOException {
        long start = Time.currentElapsedTime();
        File snapFile = null;
        try {
            synchronized (snapshotAndRestoreLock) {
                snapFile = txnLogFactory.save(zkDb.getDataTree(), zkDb.getSessionWithTimeOuts(), syncSnap);
            }
        } catch (IOException e) {
            if (isSevere) {
                LOG.error(""Severe unrecoverable error, exiting"", e);
                // This is a severe error that we cannot recover from,
                // so we need to exit
                ServiceUtils.requestSystemExit(ExitCode.TXNLOG_ERROR_TAKING_SNAPSHOT.getValue());
            } else {
                throw e;
            }
        }
        long elapsed = Time.currentElapsedTime() - start;
        LOG.info(""Snapshot taken in {} ms"", elapsed);
        ServerMetrics.getMetrics().SNAPSHOT_TIME.add(elapsed);
        return snapFile;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,restoreFromSnapshot,long restoreFromSnapshot(InputStream),"[600, 647]","{'A726': [(600, 647)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public long restoreFromSnapshot(final InputStream inputStream) throws IOException {
        if (inputStream == null) {
            throw new IllegalArgumentException(""InputStream can not be null when restoring from snapshot"");
        }

        long start = Time.currentElapsedTime();
        LOG.info(""Before restore database. lastProcessedZxid={}, nodeCount={}，sessionCount={}"",
            getZKDatabase().getDataTreeLastProcessedZxid(),
            getZKDatabase().dataTree.getNodeCount(),
            getZKDatabase().getSessionCount());

        // restore to a new zkDatabase
        final ZKDatabase newZKDatabase = new ZKDatabase(this.txnLogFactory);
        final CheckedInputStream cis = new CheckedInputStream(new BufferedInputStream(inputStream), new Adler32());
        final InputArchive ia = BinaryInputArchive.getArchive(cis);
        newZKDatabase.deserializeSnapshot(ia, cis);
        LOG.info(""Restored to a new database. lastProcessedZxid={}, nodeCount={}, sessionCount={}"",
            newZKDatabase.getDataTreeLastProcessedZxid(),
            newZKDatabase.dataTree.getNodeCount(),
            newZKDatabase.getSessionCount());

        // create a CountDownLatch
        restoreLatch = new CountDownLatch(1);

        try {
            synchronized (snapshotAndRestoreLock) {
                // set to the new zkDatabase
                setZKDatabase(newZKDatabase);
            }
            // re-create SessionTrack
            createSessionTracker();
        } finally {
            // unblock request submission
            restoreLatch.countDown();
            restoreLatch = null;
        }

        LOG.info(""After restore database. lastProcessedZxid={}, nodeCount={}, sessionCount={}"",
                getZKDatabase().getDataTreeLastProcessedZxid(),
                getZKDatabase().dataTree.getNodeCount(),
                getZKDatabase().getSessionCount());

        long elapsed = Time.currentElapsedTime() - start;
        LOG.info(""Restore taken in {} ms"", elapsed);
        ServerMetrics.getMetrics().RESTORE_TIME.add(elapsed);

        return getLastProcessedZxid();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,shouldForceWriteInitialSnapshotAfterLeaderElection,boolean shouldForceWriteInitialSnapshotAfterLeaderElection(),"[649, 651]","{'A727': [(649, 651)]}",{'A727': 1.0},A727,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean shouldForceWriteInitialSnapshotAfterLeaderElection() {
        return txnLogFactory.shouldForceWriteInitialSnapshotAfterLeaderElection();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getDataDirSize,long getDataDirSize(),"[653, 660]","{'A616': [(653, 657), (659, 660)], 'A738': [(658, 658)]}","{'A616': 0.875, 'A738': 0.125}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    @Override
    public long getDataDirSize() {
        if (zkDb == null) {
            return 0L;
        }
        File path = zkDb.snapLog.getSnapDir();
        return getDirSize(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getLogDirSize,long getLogDirSize(),"[662, 669]","{'A726': [(667, 667)], 'A616': [(662, 666), (668, 669)]}","{'A726': 0.125, 'A616': 0.875}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    @Override
    public long getLogDirSize() {
        if (zkDb == null) {
            return 0L;
        }
        File path = zkDb.snapLog.getDataLogDir();
        return getDirSize(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getDirSize,long getDirSize(File),"[671, 684]","{'A604': [(674, 678)], 'A616': [(671, 673), (679, 684)]}","{'A604': 0.35714285714285715, 'A616': 0.6428571428571429}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private long getDirSize(File file) {
        long size = 0L;
        if (file.isDirectory()) {
            File[] files = file.listFiles();
            if (files != null) {
                for (File f : files) {
                    size += getDirSize(f);
                }
            }
        } else {
            size = file.length();
        }
        return size;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getZxid,long getZxid(),"[686, 688]","{'A591': [(686, 687)], 'A590': [(688, 688)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public long getZxid() {
        return hzxid.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getSessionTracker,SessionTracker getSessionTracker(),"[690, 692]","{'A648': [(690, 692)]}",{'A648': 1.0},A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public SessionTracker getSessionTracker() {
        return sessionTracker;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getNextZxid,long getNextZxid(),"[694, 696]","{'A591': [(694, 695)], 'A590': [(696, 696)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    long getNextZxid() {
        return hzxid.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setZxid,void setZxid(long),"[698, 700]","{'A591': [(698, 699)], 'A590': [(700, 700)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setZxid(long zxid) {
        hzxid.set(zxid);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,close,void close(long),"[702, 705]","{'A590': [(702, 702), (705, 705)], 'A648': [(703, 704)]}","{'A590': 0.5, 'A648': 0.5}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private void close(long sessionId) {
        Request si = new Request(null, sessionId, 0, OpCode.closeSession, null, null);
        submitRequest(si);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,closeSession,void closeSession(long),"[707, 713]","{'A583': [(708, 708)], 'A591': [(709, 709)], 'A590': [(707, 707), (710, 713)]}","{'A583': 0.14285714285714285, 'A591': 0.14285714285714285, 'A590': 0.7142857142857143}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void closeSession(long sessionId) {
        LOG.info(""Closing session 0x{}"", Long.toHexString(sessionId));

        // we do not want to wait for a session close. send it as soon as we
        // detect it!
        close(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,killSession,"void killSession(long,long)","[715, 726]","{'A583': [(718, 721)], 'A590': [(723, 726)], 'A596': [(715, 717), (722, 722)]}","{'A583': 0.3333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void killSession(long sessionId, long zxid) {
        zkDb.killSession(sessionId, zxid);
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""ZooKeeperServer --- killSession: 0x"" + Long.toHexString(sessionId));
        }
        if (sessionTracker != null) {
            sessionTracker.removeSession(sessionId);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,expire,void expire(Session),"[728, 735]","{'A583': [(730, 733)], 'A590': [(728, 729), (734, 735)]}","{'A583': 0.5, 'A590': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void expire(Session session) {
        long sessionId = session.getSessionId();
        LOG.info(
            ""Expiring session 0x{}, timeout of {}ms exceeded"",
            Long.toHexString(sessionId),
            session.getTimeout());
        close(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,expire,void expire(long),"[737, 741]","{'A604': [(737, 741)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void expire(long sessionId) {
        LOG.info(""forcibly expiring session 0x{}"", Long.toHexString(sessionId));

        close(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,touch,void touch(ServerCnxn),"[753, 764]","{'A583': [(760, 762)], 'A590': [(753, 759), (763, 764)]}","{'A583': 0.25, 'A590': 0.75}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    void touch(ServerCnxn cnxn) throws MissingSessionException {
        if (cnxn == null) {
            return;
        }
        long id = cnxn.getSessionId();
        int to = cnxn.getSessionTimeout();
        if (!sessionTracker.touchSession(id, to)) {
            throw new MissingSessionException(""No session with sessionid 0x""
                                              + Long.toHexString(id)
                                              + "" exists, probably expired and removed"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,registerJMX,void registerJMX(),"[766, 783]","{'A591': [(766, 771), (779, 780), (782, 783)], 'A596': [(772, 778), (781, 781)]}","{'A591': 0.5555555555555556, 'A596': 0.4444444444444444}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void registerJMX() {
        // register with JMX
        try {
            jmxServerBean = new ZooKeeperServerBean(this);
            MBeanRegistry.getInstance().register(jmxServerBean, null);

            try {
                jmxDataTreeBean = new DataTreeBean(zkDb.getDataTree());
                MBeanRegistry.getInstance().register(jmxDataTreeBean, jmxServerBean);
            } catch (Exception e) {
                LOG.warn(""Failed to register with JMX"", e);
                jmxDataTreeBean = null;
            }
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
            jmxServerBean = null;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,startdata,void startdata(),"[785, 793]","{'A583': [(785, 785)], 'A591': [(789, 789)], 'A590': [(791, 792)], 'A596': [(786, 788), (790, 790), (793, 793)]}","{'A583': 0.1111111111111111, 'A591': 0.1111111111111111, 'A590': 0.2222222222222222, 'A596': 0.5555555555555556}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void startdata() throws IOException, InterruptedException {
        //check to see if zkDb is not null
        if (zkDb == null) {
            zkDb = new ZKDatabase(this.txnLogFactory);
        }
        if (!zkDb.isInitialized()) {
            loadData();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,startup,void startup(),"[795, 817]","{'A591': [(801, 801), (804, 805)], 'A590': [(800, 800), (817, 817)], 'A596': [(796, 799)], 'A584': [(808, 809)], 'A604': [(812, 812), (815, 815)], 'A609': [(806, 807)], 'A593': [(795, 795), (816, 816)], 'A675': [(802, 803), (811, 811), (813, 814)], 'A725': [(810, 810)]}","{'A591': 0.13043478260869565, 'A590': 0.08695652173913043, 'A596': 0.17391304347826086, 'A584': 0.08695652173913043, 'A604': 0.08695652173913043, 'A609': 0.08695652173913043, 'A593': 0.08695652173913043, 'A675': 0.21739130434782608, 'A725': 0.043478260869565216}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public synchronized void startup() {
        if (sessionTracker == null) {
            createSessionTracker();
        }
        startSessionTracker();
        setupRequestProcessors();

        startRequestThrottler();

        registerJMX();

        startJvmPauseMonitor();

        registerMetrics();

        setState(State.RUNNING);

        requestPathMetricsCollector.start();

        localSessionEnabled = sessionTracker.isLocalSessionsEnabled();

        notifyAll();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,startJvmPauseMonitor,void startJvmPauseMonitor(),"[819, 823]","{'A609': [(819, 823)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void startJvmPauseMonitor() {
        if (this.jvmPauseMonitor != null) {
            this.jvmPauseMonitor.serviceStart();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,startRequestThrottler,void startRequestThrottler(),"[825, 828]","{'A625': [(826, 826), (828, 828)], 'A675': [(825, 825), (827, 827)]}","{'A625': 0.5, 'A675': 0.5}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void startRequestThrottler() {
        requestThrottler = createRequestThrottler();
        requestThrottler.start();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,createRequestThrottler,RequestThrottler createRequestThrottler(),"[830, 832]","{'A625': [(830, 831)], 'A675': [(832, 832)]}","{'A625': 0.6666666666666666, 'A675': 0.3333333333333333}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected RequestThrottler createRequestThrottler() {
        return new RequestThrottler(this);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setupRequestProcessors,void setupRequestProcessors(),"[834, 840]","{'A583': [(836, 837), (839, 839)], 'A590': [(834, 835), (838, 838), (840, 840)]}","{'A583': 0.42857142857142855, 'A590': 0.5714285714285714}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void setupRequestProcessors() {
        RequestProcessor finalProcessor = new FinalRequestProcessor(this);
        RequestProcessor syncProcessor = new SyncRequestProcessor(this, finalProcessor);
        ((SyncRequestProcessor) syncProcessor).start();
        firstProcessor = new PrepRequestProcessor(this, syncProcessor);
        ((PrepRequestProcessor) firstProcessor).start();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getZooKeeperServerListener,ZooKeeperServerListener getZooKeeperServerListener(),"[842, 844]","{'A593': [(842, 844)]}",{'A593': 1.0},A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ZooKeeperServerListener getZooKeeperServerListener() {
        return listener;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setCreateSessionTrackerServerId,void setCreateSessionTrackerServerId(int),"[852, 854]","{'A636': [(852, 854)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setCreateSessionTrackerServerId(int newId) {
        createSessionTrackerServerId = newId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,createSessionTracker,void createSessionTracker(),"[856, 858]","{'A583': [(857, 857)], 'A590': [(856, 856)], 'A596': [(858, 858)]}","{'A583': 0.3333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void createSessionTracker() {
        sessionTracker = new SessionTrackerImpl(this, zkDb.getSessionWithTimeOuts(), tickTime, createSessionTrackerServerId, getZooKeeperServerListener());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,startSessionTracker,void startSessionTracker(),"[860, 862]","{'A583': [(861, 861)], 'A590': [(862, 862)], 'A596': [(860, 860)]}","{'A583': 0.3333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void startSessionTracker() {
        ((SessionTrackerImpl) sessionTracker).start();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setState,void setState(State),"[884, 894]","{'A583': [(890, 892)], 'A597': [(884, 889), (893, 894)]}","{'A583': 0.2727272727272727, 'A597': 0.7272727272727273}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void setState(State state) {
        this.state = state;
        // Notify server state changes to the registered shutdown handler, if any.
        if (zkShutdownHandler != null) {
            zkShutdownHandler.handle(state);
        } else {
            LOG.debug(
                ""ZKShutdownHandler is not registered, so ZooKeeper server""
                    + "" won't take any action on ERROR or SHUTDOWN server state changes"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,canShutdown,boolean canShutdown(),"[903, 905]","{'A597': [(904, 905)], 'A695': [(903, 903)]}","{'A597': 0.6666666666666666, 'A695': 0.3333333333333333}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private boolean canShutdown() {
        return state == State.RUNNING || state == State.ERROR;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isRunning,boolean isRunning(),"[910, 912]","{'A590': [(910, 910), (912, 912)], 'A593': [(911, 911)]}","{'A590': 0.6666666666666666, 'A593': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean isRunning() {
        return state == State.RUNNING;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,shutdown,void shutdown(),"[914, 916]","{'A695': [(914, 914)], 'A724': [(915, 916)]}","{'A695': 0.3333333333333333, 'A724': 0.6666666666666666}",A724,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public final void shutdown() {
        shutdown(false);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,shutdown,void shutdown(boolean),"[922, 949]","{'A604': [(941, 941)], 'A593': [(944, 945)], 'A695': [(922, 940), (942, 943), (946, 949)]}","{'A604': 0.03571428571428571, 'A593': 0.07142857142857142, 'A695': 0.8928571428571429}",A695,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public final synchronized void shutdown(boolean fullyShutDown) {
        if (canShutdown()) {
            LOG.info(""Shutting down"");

            shutdownComponents();

            if (zkDb != null && !fullyShutDown) {
                // There is no need to clear the database if we are going to reuse it:
                //  * When a new quorum is established we can still apply the diff
                //    on top of the same zkDb data
                //  * If we fetch a new snapshot from leader, the zkDb will be
                //    cleared anyway before loading the snapshot
                try {
                    // This will fast-forward the database to the last recorded transaction
                    zkDb.fastForwardDataBase();
                } catch (IOException e) {
                    LOG.error(""Error updating DB"", e);
                    fullyShutDown = true;
                }
            }
            setState(State.SHUTDOWN);
        } else {
            LOG.debug(""ZooKeeper server is not running, so not proceeding to shutdown!"");
        }
        if (zkDb != null && fullyShutDown) {
            zkDb.clear();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,shutdownComponents,void shutdownComponents(),"[956, 979]","{'A583': [(973, 973)], 'A591': [(978, 979)], 'A590': [(967, 972)], 'A584': [(957, 960)], 'A604': [(977, 977)], 'A609': [(974, 975)], 'A675': [(961, 964)], 'A695': [(956, 956), (965, 966)], 'A724': [(976, 976)]}","{'A583': 0.041666666666666664, 'A591': 0.08333333333333333, 'A590': 0.25, 'A584': 0.16666666666666666, 'A604': 0.041666666666666664, 'A609': 0.08333333333333333, 'A675': 0.16666666666666666, 'A695': 0.125, 'A724': 0.041666666666666664}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void shutdownComponents() {
        // unregister all metrics that are keeping a strong reference to this object
        // subclasses will do their specific clean up
        unregisterMetrics();

        if (requestThrottler != null) {
            requestThrottler.shutdown();
        }

        // Since sessionTracker and syncThreads poll we just have to set running to false,
        // and they will detect it during the poll interval.
        if (sessionTracker != null) {
            sessionTracker.shutdown();
        }
        if (firstProcessor != null) {
            firstProcessor.shutdown();
        }
        if (jvmPauseMonitor != null) {
            jvmPauseMonitor.serviceStop();
        }

        requestPathMetricsCollector.shutdown();
        unregisterJMX();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,unregisterJMX,void unregisterJMX(),"[981, 999]","{'A591': [(981, 986), (991, 998)], 'A590': [(999, 999)], 'A596': [(987, 990)]}","{'A591': 0.7368421052631579, 'A590': 0.05263157894736842, 'A596': 0.21052631578947367}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void unregisterJMX() {
        // unregister from JMX
        try {
            if (jmxDataTreeBean != null) {
                MBeanRegistry.getInstance().unregister(jmxDataTreeBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        try {
            if (jmxServerBean != null) {
                MBeanRegistry.getInstance().unregister(jmxServerBean);
            }
        } catch (Exception e) {
            LOG.warn(""Failed to unregister with JMX"", e);
        }
        jmxServerBean = null;
        jmxDataTreeBean = null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,incInProcess,void incInProcess(),"[1001, 1003]","{'A591': [(1001, 1002)], 'A590': [(1003, 1003)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void incInProcess() {
        requestsInProcess.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,decInProcess,void decInProcess(),"[1005, 1010]","{'A591': [(1005, 1006)], 'A590': [(1010, 1010)], 'A675': [(1007, 1009)]}","{'A591': 0.3333333333333333, 'A590': 0.16666666666666666, 'A675': 0.5}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void decInProcess() {
        requestsInProcess.decrementAndGet();
        if (requestThrottler != null) {
            requestThrottler.throttleWake();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getInProcess,int getInProcess(),"[1012, 1014]","{'A591': [(1013, 1013)], 'A590': [(1012, 1012), (1014, 1014)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getInProcess() {
        return requestsInProcess.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getInflight,int getInflight(),"[1016, 1018]","{'A675': [(1016, 1018)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getInflight() {
        return requestThrottleInflight();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,requestThrottleInflight,int requestThrottleInflight(),"[1020, 1025]","{'A675': [(1020, 1025)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private int requestThrottleInflight() {
        if (requestThrottler != null) {
            return requestThrottler.getInflight();
        }
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer.ChangeRecord,duplicate,ChangeRecord duplicate(long),"[1064, 1074]","{'A591': [(1065, 1065), (1067, 1067)], 'A590': [(1064, 1064), (1066, 1066), (1068, 1068), (1074, 1074)], 'A612': [(1069, 1073)]}","{'A591': 0.18181818181818182, 'A590': 0.36363636363636365, 'A612': 0.45454545454545453}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"        ChangeRecord duplicate(long zxid) {
            StatPersisted stat = new StatPersisted();
            if (this.stat != null) {
                DataTree.copyStatPersisted(this.stat, stat);
            }
            ChangeRecord changeRecord = new ChangeRecord(zxid, path, stat, childCount,
                    acl == null ? new ArrayList<>() : new ArrayList<>(acl));
            changeRecord.precalculatedDigest = precalculatedDigest;
            changeRecord.data = data;
            return changeRecord;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,generatePasswd,byte[] generatePasswd(long),"[1078, 1083]","{'A583': [(1080, 1080)], 'A590': [(1078, 1079), (1081, 1083)]}","{'A583': 0.16666666666666666, 'A590': 0.8333333333333334}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    byte[] generatePasswd(long id) {
        Random r = new Random(id ^ superSecret);
        byte[] p = new byte[16];
        r.nextBytes(p);
        return p;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,checkPasswd,"boolean checkPasswd(long,byte[])","[1085, 1087]","{'A583': [(1086, 1086)], 'A590': [(1085, 1085), (1087, 1087)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected boolean checkPasswd(long sessionId, byte[] passwd) {
        return sessionId != 0 && Arrays.equals(passwd, generatePasswd(sessionId));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,createSession,"long createSession(ServerCnxn,byte[],int)","[1089, 1102]","{'A583': [(1089, 1089), (1097, 1097), (1099, 1099)], 'A590': [(1094, 1096), (1098, 1098), (1101, 1102)], 'A648': [(1090, 1093), (1100, 1100)]}","{'A583': 0.21428571428571427, 'A590': 0.42857142857142855, 'A648': 0.35714285714285715}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    long createSession(ServerCnxn cnxn, byte[] passwd, int timeout) {
        if (passwd == null) {
            // Possible since it's just deserialized from a packet on the wire.
            passwd = new byte[0];
        }
        long sessionId = sessionTracker.createSession(timeout);
        Random r = new Random(sessionId ^ superSecret);
        r.nextBytes(passwd);
        CreateSessionTxn txn = new CreateSessionTxn(timeout);
        cnxn.setSessionId(sessionId);
        Request si = new Request(cnxn, sessionId, 0, OpCode.createSession, RequestRecord.fromRecord(txn), null);
        submitRequest(si);
        return sessionId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setOwner,"void setOwner(long,Object)","[1110, 1112]","{'A596': [(1110, 1112)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setOwner(long id, Object owner) throws SessionExpiredException {
        sessionTracker.setOwner(id, owner);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,revalidateSession,"void revalidateSession(ServerCnxn,long,int)","[1114, 1123]","{'A583': [(1114, 1114), (1117, 1120)], 'A591': [(1122, 1122)], 'A590': [(1115, 1115), (1123, 1123)], 'A596': [(1116, 1116), (1121, 1121)]}","{'A583': 0.5, 'A591': 0.1, 'A590': 0.2, 'A596': 0.2}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void revalidateSession(ServerCnxn cnxn, long sessionId, int sessionTimeout) throws IOException {
        boolean rc = sessionTracker.touchSession(sessionId, sessionTimeout);
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""Session 0x"" + Long.toHexString(sessionId) + "" is valid: "" + rc);
        }
        finishSessionInit(cnxn, rc);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,reopenSession,"void reopenSession(ServerCnxn,long,byte[],int)","[1125, 1135]","{'A583': [(1125, 1125), (1129, 1132)], 'A591': [(1126, 1126), (1128, 1128), (1133, 1133)], 'A590': [(1127, 1127), (1134, 1135)]}","{'A583': 0.45454545454545453, 'A591': 0.2727272727272727, 'A590': 0.2727272727272727}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void reopenSession(ServerCnxn cnxn, long sessionId, byte[] passwd, int sessionTimeout) throws IOException {
        if (checkPasswd(sessionId, passwd)) {
            revalidateSession(cnxn, sessionId, sessionTimeout);
        } else {
            LOG.warn(
                ""Incorrect password from {} for session 0x{}"",
                cnxn.getRemoteSocketAddress(),
                Long.toHexString(sessionId));
            finishSessionInit(cnxn, false);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,finishSessionInit,"void finishSessionInit(ServerCnxn,boolean)","[1137, 1188]","{'A583': [(1152, 1158), (1169, 1173), (1177, 1180)], 'A591': [(1137, 1140), (1146, 1147), (1149, 1151), (1159, 1161), (1163, 1168), (1175, 1176), (1181, 1185), (1187, 1188)], 'A637': [(1162, 1162)], 'A604': [(1186, 1186)], 'A630': [(1141, 1145), (1148, 1148)], 'A639': [(1174, 1174)]}","{'A583': 0.3076923076923077, 'A591': 0.5192307692307693, 'A637': 0.019230769230769232, 'A604': 0.019230769230769232, 'A630': 0.11538461538461539, 'A639': 0.019230769230769232}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void finishSessionInit(ServerCnxn cnxn, boolean valid) {
        // register with JMX
        try {
            if (valid) {
                if (serverCnxnFactory != null && serverCnxnFactory.cnxns.contains(cnxn)) {
                    serverCnxnFactory.registerConnection(cnxn);
                } else if (secureServerCnxnFactory != null && secureServerCnxnFactory.cnxns.contains(cnxn)) {
                    secureServerCnxnFactory.registerConnection(cnxn);
                }
            }
        } catch (Exception e) {
            LOG.warn(""Failed to register with JMX"", e);
        }

        try {
            ConnectResponse rsp = new ConnectResponse(
                0,
                valid ? cnxn.getSessionTimeout() : 0,
                valid ? cnxn.getSessionId() : 0, // send 0 if session is no
                // longer valid
                valid ? generatePasswd(cnxn.getSessionId()) : new byte[16],
                this instanceof ReadOnlyZooKeeperServer);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            BinaryOutputArchive bos = BinaryOutputArchive.getArchive(baos);
            bos.writeInt(-1, ""len"");
            cnxn.protocolManager.serializeConnectResponse(rsp, bos);
            baos.close();
            ByteBuffer bb = ByteBuffer.wrap(baos.toByteArray());
            bb.putInt(bb.remaining() - 4).rewind();
            cnxn.sendBuffer(bb);

            if (valid) {
                LOG.debug(
                    ""Established session 0x{} with negotiated timeout {} for client {}"",
                    Long.toHexString(cnxn.getSessionId()),
                    cnxn.getSessionTimeout(),
                    cnxn.getRemoteSocketAddress());
                cnxn.enableRecv();
            } else {

                LOG.info(
                    ""Invalid session 0x{} for client {}, probably expired"",
                    Long.toHexString(cnxn.getSessionId()),
                    cnxn.getRemoteSocketAddress());
                cnxn.sendBuffer(ServerCnxnFactory.closeConn);
            }

        } catch (Exception e) {
            LOG.warn(""Exception while establishing session, closing"", e);
            cnxn.close(ServerCnxn.DisconnectReason.IO_EXCEPTION_IN_SESSION_INIT);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,closeSession,"void closeSession(ServerCnxn,RequestHeader)","[1190, 1192]","{'A590': [(1190, 1192)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void closeSession(ServerCnxn cnxn, RequestHeader requestHeader) {
        closeSession(cnxn.getSessionId());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getServerId,long getServerId(),"[1194, 1196]","{'A590': [(1194, 1196)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public long getServerId() {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setLocalSessionFlag,void setLocalSessionFlag(Request),"[1205, 1206]","{'A597': [(1206, 1206)], 'A648': [(1205, 1205)]}","{'A597': 0.5, 'A648': 0.5}",A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void setLocalSessionFlag(Request si) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,submitRequest,void submitRequest(Request),"[1208, 1218]","{'A726': [(1209, 1216)], 'A675': [(1217, 1218)], 'A597': [(1208, 1208)]}","{'A726': 0.7272727272727273, 'A675': 0.18181818181818182, 'A597': 0.09090909090909091}",A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void submitRequest(Request si) {
        if (restoreLatch != null) {
            try {
                LOG.info(""Blocking request submission while restore is in progress"");
                restoreLatch.await();
            } catch (final InterruptedException e) {
                LOG.warn(""Unexpected interruption"", e);
            }
        }
        enqueueRequest(si);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,enqueueRequest,void enqueueRequest(Request),"[1220, 1240]","{'A675': [(1220, 1240)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void enqueueRequest(Request si) {
        if (requestThrottler == null) {
            synchronized (this) {
                try {
                    // Since all requests are passed to the request
                    // processor it should wait for setting up the request
                    // processor chain. The state will be updated to RUNNING
                    // after the setup.
                    while (state == State.INITIAL) {
                        wait(1000);
                    }
                } catch (InterruptedException e) {
                    LOG.warn(""Unexpected interruption"", e);
                }
                if (requestThrottler == null) {
                    throw new RuntimeException(""Not started"");
                }
            }
        }
        requestThrottler.submitRequest(si);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,submitRequestNow,void submitRequestNow(Request),"[1242, 1285]","{'A583': [(1271, 1271), (1277, 1277), (1281, 1281)], 'A591': [(1274, 1274), (1280, 1280)], 'A590': [(1243, 1245), (1251, 1255), (1257, 1261), (1264, 1264), (1266, 1266), (1268, 1270), (1275, 1276), (1284, 1285)], 'A612': [(1265, 1265)], 'A593': [(1246, 1250), (1256, 1256)], 'A675': [(1242, 1242), (1272, 1273), (1278, 1279), (1282, 1283)], 'A597': [(1262, 1263), (1267, 1267)]}","{'A583': 0.06818181818181818, 'A591': 0.045454545454545456, 'A590': 0.5, 'A612': 0.022727272727272728, 'A593': 0.13636363636363635, 'A675': 0.1590909090909091, 'A597': 0.06818181818181818}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void submitRequestNow(Request si) {
        if (firstProcessor == null) {
            synchronized (this) {
                try {
                    // Since all requests are passed to the request
                    // processor it should wait for setting up the request
                    // processor chain. The state will be updated to RUNNING
                    // after the setup.
                    while (state == State.INITIAL) {
                        wait(1000);
                    }
                } catch (InterruptedException e) {
                    LOG.warn(""Unexpected interruption"", e);
                }
                if (firstProcessor == null || state != State.RUNNING) {
                    throw new RuntimeException(""Not started"");
                }
            }
        }
        try {
            touch(si.cnxn);
            boolean validpacket = Request.isValid(si.type);
            if (validpacket) {
                setLocalSessionFlag(si);
                firstProcessor.processRequest(si);
                if (si.cnxn != null) {
                    incInProcess();
                }
            } else {
                LOG.warn(""Received packet at server of unknown type {}"", si.type);
                // Update request accounting/throttling limits
                requestFinished(si);
                new UnimplementedRequestProcessor().processRequest(si);
            }
        } catch (MissingSessionException e) {
            LOG.debug(""Dropping request."", e);
            // Update request accounting/throttling limits
            requestFinished(si);
        } catch (RequestProcessorException e) {
            LOG.error(""Unable to process request"", e);
            // Update request accounting/throttling limits
            requestFinished(si);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getSnapCount,int getSnapCount(),"[1287, 1295]","{'A590': [(1287, 1287), (1293, 1293), (1295, 1295)], 'A746': [(1288, 1292), (1294, 1294)]}","{'A590': 0.3333333333333333, 'A746': 0.6666666666666666}",A746,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static int getSnapCount() {
        int snapCount = Integer.getInteger(SNAP_COUNT, DEFAULT_SNAP_COUNT);
        // snapCount must be 2 or more. See org.apache.zookeeper.server.SyncRequestProcessor
        if (snapCount < 2) {
            LOG.warn(""SnapCount should be 2 or more. Now, snapCount is reset to 2"");
            snapCount = 2;
        }
        return snapCount;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getGlobalOutstandingLimit,int getGlobalOutstandingLimit(),"[1297, 1299]","{'A746': [(1298, 1298)], 'A613': [(1297, 1297), (1299, 1299)]}","{'A746': 0.3333333333333333, 'A613': 0.6666666666666666}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getGlobalOutstandingLimit() {
        return Integer.getInteger(GLOBAL_OUTSTANDING_LIMIT, DEFAULT_GLOBAL_OUTSTANDING_LIMIT);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getSnapSizeInBytes,long getSnapSizeInBytes(),"[1301, 1307]","{'A647': [(1301, 1307)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static long getSnapSizeInBytes() {
        long size = Long.getLong(""zookeeper.snapSizeLimitInKb"", 4194304L); // 4GB by default
        if (size <= 0) {
            LOG.info(""zookeeper.snapSizeLimitInKb set to a non-positive value {}; disabling feature"", size);
        }
        return size * 1024; // Convert to bytes
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setServerCnxnFactory,void setServerCnxnFactory(ServerCnxnFactory),"[1309, 1311]","{'A591': [(1309, 1309)], 'A590': [(1310, 1311)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setServerCnxnFactory(ServerCnxnFactory factory) {
        serverCnxnFactory = factory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getServerCnxnFactory,ServerCnxnFactory getServerCnxnFactory(),"[1313, 1315]","{'A591': [(1313, 1313)], 'A590': [(1314, 1315)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ServerCnxnFactory getServerCnxnFactory() {
        return serverCnxnFactory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getSecureServerCnxnFactory,ServerCnxnFactory getSecureServerCnxnFactory(),"[1317, 1319]","{'A613': [(1317, 1319)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ServerCnxnFactory getSecureServerCnxnFactory() {
        return secureServerCnxnFactory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setSecureServerCnxnFactory,void setSecureServerCnxnFactory(ServerCnxnFactory),"[1321, 1323]","{'A630': [(1321, 1323)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setSecureServerCnxnFactory(ServerCnxnFactory factory) {
        secureServerCnxnFactory = factory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getLastProcessedZxid,long getLastProcessedZxid(),"[1329, 1331]","{'A590': [(1329, 1329), (1331, 1331)], 'A596': [(1330, 1330)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public long getLastProcessedZxid() {
        return zkDb.getDataTreeLastProcessedZxid();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getOutstandingRequests,long getOutstandingRequests(),"[1338, 1340]","{'A590': [(1338, 1340)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public long getOutstandingRequests() {
        return getInProcess();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getNumAliveConnections,int getNumAliveConnections(),"[1346, 1358]","{'A630': [(1347, 1357)], 'A639': [(1346, 1346), (1358, 1358)]}","{'A630': 0.8461538461538461, 'A639': 0.15384615384615385}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getNumAliveConnections() {
        int numAliveConnections = 0;

        if (serverCnxnFactory != null) {
            numAliveConnections += serverCnxnFactory.getNumAliveConnections();
        }

        if (secureServerCnxnFactory != null) {
            numAliveConnections += secureServerCnxnFactory.getNumAliveConnections();
        }

        return numAliveConnections;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,truncateLog,void truncateLog(long),"[1367, 1369]","{'A590': [(1367, 1367), (1369, 1369)], 'A596': [(1368, 1368)]}","{'A590': 0.6666666666666666, 'A596': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void truncateLog(long zxid) throws IOException {
        this.zkDb.truncateLog(zxid);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getTickTime,int getTickTime(),"[1371, 1373]","{'A596': [(1371, 1373)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getTickTime() {
        return tickTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setTickTime,void setTickTime(int),"[1375, 1378]","{'A596': [(1375, 1375), (1377, 1378)], 'A642': [(1376, 1376)]}","{'A596': 0.75, 'A642': 0.25}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setTickTime(int tickTime) {
        LOG.info(""tickTime set to {} ms"", tickTime);
        this.tickTime = tickTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getThrottledOpWaitTime,int getThrottledOpWaitTime(),"[1380, 1382]","{'A675': [(1380, 1382)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static int getThrottledOpWaitTime() {
        return throttledOpWaitTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setThrottledOpWaitTime,void setThrottledOpWaitTime(int),"[1384, 1387]","{'A675': [(1384, 1384), (1386, 1387)], 'A642': [(1385, 1385)]}","{'A675': 0.75, 'A642': 0.25}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static void setThrottledOpWaitTime(int time) {
        LOG.info(""throttledOpWaitTime set to {} ms"", time);
        throttledOpWaitTime = time;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getMinSessionTimeout,int getMinSessionTimeout(),"[1389, 1391]","{'A596': [(1389, 1389), (1391, 1391)], 'A593': [(1390, 1390)]}","{'A596': 0.6666666666666666, 'A593': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getMinSessionTimeout() {
        return minSessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setMinSessionTimeout,void setMinSessionTimeout(int),"[1393, 1396]","{'A596': [(1393, 1393), (1396, 1396)], 'A593': [(1394, 1394)], 'A642': [(1395, 1395)]}","{'A596': 0.5, 'A593': 0.25, 'A642': 0.25}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setMinSessionTimeout(int min) {
        this.minSessionTimeout = min == -1 ? tickTime * 2 : min;
        LOG.info(""minSessionTimeout set to {} ms"", this.minSessionTimeout);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getMaxSessionTimeout,int getMaxSessionTimeout(),"[1398, 1400]","{'A596': [(1398, 1398), (1400, 1400)], 'A593': [(1399, 1399)]}","{'A596': 0.6666666666666666, 'A593': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getMaxSessionTimeout() {
        return maxSessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setMaxSessionTimeout,void setMaxSessionTimeout(int),"[1402, 1405]","{'A596': [(1402, 1402), (1405, 1405)], 'A593': [(1403, 1403)], 'A642': [(1404, 1404)]}","{'A596': 0.5, 'A593': 0.25, 'A642': 0.25}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setMaxSessionTimeout(int max) {
        this.maxSessionTimeout = max == -1 ? tickTime * 20 : max;
        LOG.info(""maxSessionTimeout set to {} ms"", this.maxSessionTimeout);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getClientPortListenBacklog,int getClientPortListenBacklog(),"[1407, 1409]","{'A689': [(1407, 1409)]}",{'A689': 1.0},A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getClientPortListenBacklog() {
        return listenBacklog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setClientPortListenBacklog,void setClientPortListenBacklog(int),"[1411, 1414]","{'A583': [(1413, 1413)], 'A689': [(1411, 1412), (1414, 1414)]}","{'A583': 0.25, 'A689': 0.75}",A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setClientPortListenBacklog(int backlog) {
        this.listenBacklog = backlog;
        LOG.info(""clientPortListenBacklog set to {}"", backlog);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getClientPort,int getClientPort(),"[1416, 1418]","{'A591': [(1417, 1417)], 'A596': [(1416, 1416), (1418, 1418)]}","{'A591': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getClientPort() {
        return serverCnxnFactory != null ? serverCnxnFactory.getLocalPort() : -1;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getSecureClientPort,int getSecureClientPort(),"[1420, 1422]","{'A630': [(1420, 1422)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getSecureClientPort() {
        return secureServerCnxnFactory != null ? secureServerCnxnFactory.getLocalPort() : -1;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[1425, 1433]","{'A630': [(1425, 1433)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getMaxClientCnxnsPerHost() {
        if (serverCnxnFactory != null) {
            return serverCnxnFactory.getMaxClientCnxnsPerHost();
        }
        if (secureServerCnxnFactory != null) {
            return secureServerCnxnFactory.getMaxClientCnxnsPerHost();
        }
        return -1;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setTxnLogFactory,void setTxnLogFactory(FileTxnSnapLog),"[1435, 1437]","{'A590': [(1435, 1437)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setTxnLogFactory(FileTxnSnapLog txnLog) {
        this.txnLogFactory = txnLog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getTxnLogFactory,FileTxnSnapLog getTxnLogFactory(),"[1439, 1441]","{'A590': [(1439, 1441)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public FileTxnSnapLog getTxnLogFactory() {
        return this.txnLogFactory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getTxnLogElapsedSyncTime,long getTxnLogElapsedSyncTime(),"[1446, 1448]","{'A611': [(1446, 1448)]}",{'A611': 1.0},A611,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public long getTxnLogElapsedSyncTime() {
        return txnLogFactory.getTxnLogElapsedSyncTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getState,String getState(),"[1450, 1452]","{'A596': [(1450, 1452)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public String getState() {
        return ""standalone"";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,dumpEphemerals,void dumpEphemerals(PrintWriter),"[1454, 1456]","{'A591': [(1455, 1455)], 'A596': [(1454, 1454), (1456, 1456)]}","{'A591': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void dumpEphemerals(PrintWriter pwriter) {
        zkDb.dumpEphemerals(pwriter);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getEphemerals,"Map<Long, Set<String>> getEphemerals()","[1458, 1460]","{'A591': [(1458, 1460)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public Map<Long, Set<String>> getEphemerals() {
        return zkDb.getEphemerals();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getConnectionDropChance,double getConnectionDropChance(),"[1462, 1464]","{'A675': [(1462, 1464)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public double getConnectionDropChance() {
        return connThrottle.getDropChance();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,processConnectRequest,"void processConnectRequest(ServerCnxn,ConnectRequest)","[1466, 1559]","{'A583': [(1467, 1473), (1493, 1496), (1498, 1500), (1504, 1504), (1508, 1513), (1518, 1519), (1534, 1539), (1545, 1546)], 'A591': [(1514, 1515), (1517, 1517), (1520, 1532), (1540, 1540), (1554, 1555), (1558, 1559)], 'A584': [(1491, 1491)], 'A604': [(1549, 1549), (1552, 1552)], 'A600': [(1497, 1497), (1501, 1501), (1503, 1503)], 'A675': [(1466, 1466), (1474, 1490), (1492, 1492), (1541, 1544), (1547, 1547), (1556, 1557)], 'A647': [(1533, 1533)], 'A630': [(1548, 1548), (1550, 1551), (1553, 1553)], 'A751': [(1502, 1502), (1516, 1516)], 'A595': [(1505, 1507)]}","{'A583': 0.32978723404255317, 'A591': 0.22340425531914893, 'A584': 0.010638297872340425, 'A604': 0.02127659574468085, 'A600': 0.031914893617021274, 'A675': 0.2765957446808511, 'A647': 0.010638297872340425, 'A630': 0.0425531914893617, 'A751': 0.02127659574468085, 'A595': 0.031914893617021274}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    @SuppressFBWarnings(value = ""IS2_INCONSISTENT_SYNC"", justification = ""the value won't change after startup"")
    public void processConnectRequest(ServerCnxn cnxn, ConnectRequest request) throws IOException, ClientCnxnLimitException {
        LOG.debug(
            ""Session establishment request from client {} client's lastZxid is 0x{}"",
            cnxn.getRemoteSocketAddress(),
            Long.toHexString(request.getLastZxidSeen()));

        long sessionId = request.getSessionId();
        int tokensNeeded = 1;
        if (connThrottle.isConnectionWeightEnabled()) {
            if (sessionId == 0) {
                if (localSessionEnabled) {
                    tokensNeeded = connThrottle.getRequiredTokensForLocal();
                } else {
                    tokensNeeded = connThrottle.getRequiredTokensForGlobal();
                }
            } else {
                tokensNeeded = connThrottle.getRequiredTokensForRenew();
            }
        }

        if (!connThrottle.checkLimit(tokensNeeded)) {
            throw new ClientCnxnLimitException();
        }
        ServerMetrics.getMetrics().CONNECTION_TOKEN_DEFICIT.add(connThrottle.getDeficit());
        ServerMetrics.getMetrics().CONNECTION_REQUEST_COUNT.add(1);

        if (!cnxn.protocolManager.isReadonlyAvailable()) {
            LOG.warn(
                ""Connection request from old client {}; will be dropped if server is in r-o mode"",
                cnxn.getRemoteSocketAddress());
        }

        if (!request.getReadOnly() && this instanceof ReadOnlyZooKeeperServer) {
            String msg = ""Refusing session request for not-read-only client "" + cnxn.getRemoteSocketAddress();
            LOG.info(msg);
            throw new CloseRequestException(msg, ServerCnxn.DisconnectReason.NOT_READ_ONLY_CLIENT);
        }
        if (request.getLastZxidSeen() > zkDb.dataTree.lastProcessedZxid) {
            String msg = ""Refusing session(0x""
                         + Long.toHexString(sessionId)
                         + "") request for client ""
                         + cnxn.getRemoteSocketAddress()
                         + "" as it has seen zxid 0x""
                         + Long.toHexString(request.getLastZxidSeen())
                         + "" our last zxid is 0x""
                         + Long.toHexString(getZKDatabase().getDataTreeLastProcessedZxid())
                         + "" client must try another server"";

            LOG.info(msg);
            throw new CloseRequestException(msg, ServerCnxn.DisconnectReason.CLIENT_ZXID_AHEAD);
        }
        int sessionTimeout = request.getTimeOut();
        byte[] passwd = request.getPasswd();
        int minSessionTimeout = getMinSessionTimeout();
        if (sessionTimeout < minSessionTimeout) {
            sessionTimeout = minSessionTimeout;
        }
        int maxSessionTimeout = getMaxSessionTimeout();
        if (sessionTimeout > maxSessionTimeout) {
            sessionTimeout = maxSessionTimeout;
        }
        cnxn.setSessionTimeout(sessionTimeout);
        // We don't want to receive any packets until we are sure that the
        // session is setup
        cnxn.disableRecv();
        if (sessionId == 0) {
            long id = createSession(cnxn, passwd, sessionTimeout);
            LOG.debug(
                ""Client attempting to establish new session: session = 0x{}, zxid = 0x{}, timeout = {}, address = {}"",
                Long.toHexString(id),
                Long.toHexString(request.getLastZxidSeen()),
                request.getTimeOut(),
                cnxn.getRemoteSocketAddress());
        } else {
            validateSession(cnxn, sessionId);
            LOG.debug(
                ""Client attempting to renew session: session = 0x{}, zxid = 0x{}, timeout = {}, address = {}"",
                Long.toHexString(sessionId),
                Long.toHexString(request.getLastZxidSeen()),
                request.getTimeOut(),
                cnxn.getRemoteSocketAddress());
            if (serverCnxnFactory != null) {
                serverCnxnFactory.closeSession(sessionId, ServerCnxn.DisconnectReason.CLIENT_RECONNECT);
            }
            if (secureServerCnxnFactory != null) {
                secureServerCnxnFactory.closeSession(sessionId, ServerCnxn.DisconnectReason.CLIENT_RECONNECT);
            }
            cnxn.setSessionId(sessionId);
            reopenSession(cnxn, sessionId, passwd, sessionTimeout);
            ServerMetrics.getMetrics().CONNECTION_REVALIDATE_COUNT.add(1);

        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,validateSession,"void validateSession(ServerCnxn,long)","[1567, 1570]","{'A675': [(1567, 1570)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void validateSession(ServerCnxn cnxn, long sessionId)
            throws IOException {
        // do nothing
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,shouldThrottle,boolean shouldThrottle(long),"[1572, 1578]","{'A591': [(1572, 1572), (1575, 1578)], 'A604': [(1573, 1574)]}","{'A591': 0.7142857142857143, 'A604': 0.2857142857142857}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean shouldThrottle(long outStandingCount) {
        int globalOutstandingLimit = getGlobalOutstandingLimit();
        if (globalOutstandingLimit < getInflight() || globalOutstandingLimit < getInProcess()) {
            return outStandingCount > 0;
        }
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getFlushDelay,long getFlushDelay(),"[1580, 1582]","{'A647': [(1580, 1582)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    long getFlushDelay() {
        return flushDelay;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setFlushDelay,void setFlushDelay(long),"[1584, 1587]","{'A647': [(1584, 1584), (1586, 1587)], 'A642': [(1585, 1585)]}","{'A647': 0.75, 'A642': 0.25}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    static void setFlushDelay(long delay) {
        LOG.info(""{} = {} ms"", FLUSH_DELAY, delay);
        flushDelay = delay;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getMaxWriteQueuePollTime,long getMaxWriteQueuePollTime(),"[1589, 1591]","{'A647': [(1589, 1591)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    long getMaxWriteQueuePollTime() {
        return maxWriteQueuePollTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setMaxWriteQueuePollTime,void setMaxWriteQueuePollTime(long),"[1593, 1596]","{'A647': [(1593, 1593), (1595, 1596)], 'A642': [(1594, 1594)]}","{'A647': 0.75, 'A642': 0.25}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    static void setMaxWriteQueuePollTime(long maxTime) {
        LOG.info(""{} = {} ms"", MAX_WRITE_QUEUE_POLL_SIZE, maxTime);
        maxWriteQueuePollTime = maxTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getMaxBatchSize,int getMaxBatchSize(),"[1598, 1600]","{'A647': [(1598, 1600)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    int getMaxBatchSize() {
        return maxBatchSize;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setMaxBatchSize,void setMaxBatchSize(int),"[1602, 1605]","{'A647': [(1602, 1605)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    static void setMaxBatchSize(int size) {
        LOG.info(""{}={}"", MAX_BATCH_SIZE, size);
        maxBatchSize = size;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,initLargeRequestThrottlingSettings,void initLargeRequestThrottlingSettings(),"[1607, 1610]","{'A675': [(1607, 1610)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private void initLargeRequestThrottlingSettings() {
        setLargeRequestMaxBytes(Integer.getInteger(""zookeeper.largeRequestMaxBytes"", largeRequestMaxBytes));
        setLargeRequestThreshold(Integer.getInteger(""zookeeper.largeRequestThreshold"", -1));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getLargeRequestMaxBytes,int getLargeRequestMaxBytes(),"[1612, 1614]","{'A675': [(1612, 1614)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getLargeRequestMaxBytes() {
        return largeRequestMaxBytes;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setLargeRequestMaxBytes,void setLargeRequestMaxBytes(int),"[1616, 1624]","{'A675': [(1616, 1624)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setLargeRequestMaxBytes(int bytes) {
        if (bytes <= 0) {
            LOG.warn(""Invalid max bytes for all large requests {}. It should be a positive number."", bytes);
            LOG.warn(""Will not change the setting. The max bytes stay at {}"", largeRequestMaxBytes);
        } else {
            largeRequestMaxBytes = bytes;
            LOG.info(""The max bytes for all large requests are set to {}"", largeRequestMaxBytes);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getLargeRequestThreshold,int getLargeRequestThreshold(),"[1626, 1628]","{'A675': [(1626, 1628)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getLargeRequestThreshold() {
        return largeRequestThreshold;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setLargeRequestThreshold,void setLargeRequestThreshold(int),"[1630, 1638]","{'A675': [(1630, 1638)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setLargeRequestThreshold(int threshold) {
        if (threshold == 0 || threshold < -1) {
            LOG.warn(""Invalid large request threshold {}. It should be -1 or positive. Setting to -1 "", threshold);
            largeRequestThreshold = -1;
        } else {
            largeRequestThreshold = threshold;
            LOG.info(""The large request threshold is set to {}"", largeRequestThreshold);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getLargeRequestBytes,int getLargeRequestBytes(),"[1640, 1642]","{'A675': [(1640, 1642)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getLargeRequestBytes() {
        return currentLargeRequestBytes.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isLargeRequest,boolean isLargeRequest(int),"[1644, 1650]","{'A675': [(1644, 1650)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private boolean isLargeRequest(int length) {
        // The large request limit is disabled when threshold is -1
        if (largeRequestThreshold == -1) {
            return false;
        }
        return length > largeRequestThreshold;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,checkRequestSizeWhenReceivingMessage,boolean checkRequestSizeWhenReceivingMessage(int),"[1652, 1663]","{'A675': [(1652, 1663)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean checkRequestSizeWhenReceivingMessage(int length) throws IOException {
        if (!isLargeRequest(length)) {
            return true;
        }
        if (currentLargeRequestBytes.get() + length <= largeRequestMaxBytes) {
            return true;
        } else {
            ServerMetrics.getMetrics().LARGE_REQUESTS_REJECTED.add(1);
            throw new IOException(""Rejecting large request"");
        }

    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,checkRequestSizeWhenMessageReceived,boolean checkRequestSizeWhenMessageReceived(int),"[1665, 1677]","{'A675': [(1665, 1677)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private boolean checkRequestSizeWhenMessageReceived(int length) throws IOException {
        if (!isLargeRequest(length)) {
            return true;
        }

        int bytes = currentLargeRequestBytes.addAndGet(length);
        if (bytes > largeRequestMaxBytes) {
            currentLargeRequestBytes.addAndGet(-length);
            ServerMetrics.getMetrics().LARGE_REQUESTS_REJECTED.add(1);
            throw new IOException(""Rejecting large request"");
        }
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,requestFinished,void requestFinished(Request),"[1679, 1684]","{'A675': [(1679, 1684)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void requestFinished(Request request) {
        int largeRequestLength = request.getLargeRequestSize();
        if (largeRequestLength != -1) {
            currentLargeRequestBytes.addAndGet(-largeRequestLength);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,processPacket,"void processPacket(ServerCnxn,RequestHeader,RequestRecord)","[1686, 1758]","{'A583': [(1686, 1686), (1699, 1700), (1704, 1704), (1708, 1712), (1720, 1720), (1724, 1727), (1729, 1729), (1732, 1732), (1740, 1740), (1746, 1748), (1754, 1758)], 'A591': [(1698, 1698), (1701, 1701), (1713, 1713), (1716, 1716), (1721, 1723), (1728, 1728), (1730, 1731), (1733, 1738), (1741, 1741)], 'A590': [(1703, 1703), (1705, 1705), (1714, 1715)], 'A584': [(1691, 1691)], 'A636': [(1702, 1702)], 'A612': [(1687, 1690), (1692, 1697)], 'A675': [(1706, 1707), (1749, 1753)], 'A592': [(1742, 1745)], 'A655': [(1717, 1719)], 'A752': [(1739, 1739)]}","{'A583': 0.3424657534246575, 'A591': 0.2328767123287671, 'A590': 0.0547945205479452, 'A584': 0.0136986301369863, 'A636': 0.0136986301369863, 'A612': 0.136986301369863, 'A675': 0.0958904109589041, 'A592': 0.0547945205479452, 'A655': 0.0410958904109589, 'A752': 0.0136986301369863}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void processPacket(ServerCnxn cnxn, RequestHeader h, RequestRecord request) throws IOException {
        // Need to increase the outstanding request count first, otherwise
        // there might be a race condition that it enabled recv after
        // processing request and then disabled when check throttling.
        //
        // Be aware that we're actually checking the global outstanding
        // request before this request.
        //
        // It's fine if the IOException thrown before we decrease the count
        // in cnxn, since it will close the cnxn anyway.
        cnxn.incrOutstandingAndCheckThrottle(h);

        if (h.getType() == OpCode.auth) {
            LOG.info(""got auth packet {}"", cnxn.getRemoteSocketAddress());
            AuthPacket authPacket = request.readRecord(AuthPacket::new);
            String scheme = authPacket.getScheme();
            ServerAuthenticationProvider ap = ProviderRegistry.getServerProvider(scheme);
            Code authReturn = KeeperException.Code.AUTHFAILED;
            if (ap != null) {
                try {
                    // handleAuthentication may close the connection, to allow the client to choose
                    // a different server to connect to.
                    authReturn = ap.handleAuthentication(
                        new ServerAuthenticationProvider.ServerObjs(this, cnxn),
                        authPacket.getAuth());
                } catch (RuntimeException e) {
                    LOG.warn(""Caught runtime exception from AuthenticationProvider: {}"", scheme, e);
                    authReturn = KeeperException.Code.AUTHFAILED;
                }
            }
            if (authReturn == KeeperException.Code.OK) {
                LOG.info(""Session 0x{}: auth success for scheme {} and address {}"",
                        Long.toHexString(cnxn.getSessionId()), scheme,
                        cnxn.getRemoteSocketAddress());
                ReplyHeader rh = new ReplyHeader(h.getXid(), 0, KeeperException.Code.OK.intValue());
                cnxn.sendResponse(rh, null, null);
            } else {
                if (ap == null) {
                    LOG.warn(
                        ""No authentication provider for scheme: {} has {}"",
                        scheme,
                        ProviderRegistry.listProviders());
                } else {
                    LOG.warn(""Authentication failed for scheme: {}"", scheme);
                }
                // send a response...
                ReplyHeader rh = new ReplyHeader(h.getXid(), 0, KeeperException.Code.AUTHFAILED.intValue());
                cnxn.sendResponse(rh, null, null);
                // ... and close connection
                cnxn.sendBuffer(ServerCnxnFactory.closeConn);
                cnxn.disableRecv();
            }
            return;
        } else if (h.getType() == OpCode.sasl) {
            processSasl(request, cnxn, h);
        } else {
            if (!authHelper.enforceAuthentication(cnxn, h.getXid())) {
                // Authentication enforcement is failed
                // Already sent response to user about failure and closed the session, lets return
                return;
            } else {
                Request si = new Request(cnxn, cnxn.getSessionId(), h.getXid(), h.getType(), request, cnxn.getAuthInfo());
                int length = request.limit();
                if (isLargeRequest(length)) {
                    // checkRequestSize will throw IOException if request is rejected
                    checkRequestSizeWhenMessageReceived(length);
                    si.setLargeRequestSize(length);
                }
                si.setOwner(ServerCnxn.me);
                submitRequest(si);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isSaslSuperUser,boolean isSaslSuperUser(String),"[1760, 1780]","{'A637': [(1760, 1780)]}",{'A637': 1.0},A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private static boolean isSaslSuperUser(String id) {
        if (id == null || id.isEmpty()) {
            return false;
        }

        Properties properties = System.getProperties();
        int prefixLen = SASL_SUPER_USER.length();

        for (String k : properties.stringPropertyNames()) {
            if (k.startsWith(SASL_SUPER_USER)
                && (k.length() == prefixLen || k.charAt(prefixLen) == '.')) {
                String value = properties.getProperty(k);

                if (value != null && value.equals(id)) {
                    return true;
                }
            }
        }

        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,shouldAllowSaslFailedClientsConnect,boolean shouldAllowSaslFailedClientsConnect(),"[1782, 1784]","{'A583': [(1782, 1784)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private static boolean shouldAllowSaslFailedClientsConnect() {
        return Boolean.getBoolean(ALLOW_SASL_FAILED_CLIENTS);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,processSasl,"void processSasl(RequestRecord,ServerCnxn,RequestHeader)","[1786, 1847]","{'A583': [(1786, 1786), (1788, 1788), (1793, 1793), (1803, 1803), (1816, 1816), (1818, 1818), (1820, 1820), (1822, 1834)], 'A591': [(1799, 1799)], 'A596': [(1787, 1787), (1789, 1789), (1791, 1792), (1794, 1798), (1800, 1800), (1812, 1812), (1817, 1817), (1835, 1836), (1838, 1840), (1842, 1842), (1847, 1847)], 'A637': [(1804, 1805), (1807, 1810)], 'A604': [(1813, 1813), (1837, 1837), (1843, 1846)], 'A589': [(1821, 1821)], 'A592': [(1815, 1815), (1819, 1819)], 'A655': [(1801, 1802)], 'A620': [(1790, 1790), (1841, 1841)], 'A664': [(1806, 1806), (1811, 1811)], 'A601': [(1814, 1814)]}","{'A583': 0.3225806451612903, 'A591': 0.016129032258064516, 'A596': 0.3064516129032258, 'A637': 0.0967741935483871, 'A604': 0.0967741935483871, 'A589': 0.016129032258064516, 'A592': 0.03225806451612903, 'A655': 0.03225806451612903, 'A620': 0.03225806451612903, 'A664': 0.03225806451612903, 'A601': 0.016129032258064516}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private void processSasl(RequestRecord request, ServerCnxn cnxn, RequestHeader requestHeader) throws IOException {
        LOG.debug(""Responding to client SASL token."");
        GetSASLRequest clientTokenRecord = request.readRecord(GetSASLRequest::new);
        byte[] clientToken = clientTokenRecord.getToken();
        LOG.debug(""Size of client SASL token: {}"", clientToken.length);
        byte[] responseToken = null;
        try {
            ZooKeeperSaslServer saslServer = cnxn.zooKeeperSaslServer;
            try {
                // note that clientToken might be empty (clientToken.length == 0):
                // if using the DIGEST-MD5 mechanism, clientToken will be empty at the beginning of the
                // SASL negotiation process.
                responseToken = saslServer.evaluateResponse(clientToken);
                if (saslServer.isComplete()) {
                    String authorizationID = saslServer.getAuthorizationID();
                    LOG.info(""Session 0x{}: adding SASL authorization for authorizationID: {}"",
                            Long.toHexString(cnxn.getSessionId()), authorizationID);
                    cnxn.addAuthInfo(new Id(""sasl"", authorizationID));

                    if (isSaslSuperUser(authorizationID)) {
                        cnxn.addAuthInfo(new Id(""super"", """"));
                        LOG.info(
                            ""Session 0x{}: Authenticated Id '{}' as super user"",
                            Long.toHexString(cnxn.getSessionId()),
                            authorizationID);
                    }
                }
            } catch (SaslException e) {
                LOG.warn(""Client {} failed to SASL authenticate"", cnxn.getRemoteSocketAddress(), e);
                if (shouldAllowSaslFailedClientsConnect() && !authHelper.isSaslAuthRequired()) {
                    LOG.warn(""Maintaining client connection despite SASL authentication failure."");
                } else {
                    int error;
                    if (authHelper.isSaslAuthRequired()) {
                        LOG.warn(
                            ""Closing client connection due to server requires client SASL authentication,""
                                + ""but client SASL authentication has failed, or client is not configured with SASL ""
                                + ""authentication."");
                        error = Code.SESSIONCLOSEDREQUIRESASLAUTH.intValue();
                    } else {
                        LOG.warn(""Closing client connection due to SASL authentication failure."");
                        error = Code.AUTHFAILED.intValue();
                    }

                    ReplyHeader replyHeader = new ReplyHeader(requestHeader.getXid(), 0, error);
                    cnxn.sendResponse(replyHeader, new SetSASLResponse(null), ""response"");
                    cnxn.sendCloseSession();
                    cnxn.disableRecv();
                    return;
                }
            }
        } catch (NullPointerException e) {
            LOG.error(""cnxn.saslServer is null: cnxn object did not initialize its saslServer properly."");
        }
        if (responseToken != null) {
            LOG.debug(""Size of server SASL response: {}"", responseToken.length);
        }

        ReplyHeader replyHeader = new ReplyHeader(requestHeader.getXid(), 0, Code.OK.intValue());
        Record record = new SetSASLResponse(responseToken);
        cnxn.sendResponse(replyHeader, record, ""response"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,processTxn,ProcessTxnResult processTxn(Request),"[1849, 1891]","{'A583': [(1874, 1877)], 'A694': [(1850, 1859), (1862, 1862), (1864, 1873), (1878, 1883), (1885, 1885), (1889, 1889)], 'A625': [(1860, 1861), (1863, 1863), (1884, 1884), (1886, 1888), (1890, 1890)], 'A648': [(1849, 1849), (1891, 1891)]}","{'A583': 0.09302325581395349, 'A694': 0.6744186046511628, 'A625': 0.18604651162790697, 'A648': 0.046511627906976744}",A694,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ProcessTxnResult processTxn(Request request) {
        TxnHeader hdr = request.getHdr();
        processTxnForSessionEvents(request, hdr, request.getTxn());

        final boolean writeRequest = (hdr != null);
        final boolean quorumRequest = request.isQuorum();

        // return fast w/o synchronization when we get a read
        if (!writeRequest && !quorumRequest) {
            return new ProcessTxnResult();
        }

        ProcessTxnResult rc;
        synchronized (outstandingChanges) {
            rc = processTxnInDB(hdr, request.getTxn(), request.getTxnDigest());

            // request.hdr is set for write requests, which are the only ones
            // that add to outstandingChanges.
            if (writeRequest) {
                long zxid = hdr.getZxid();
                while (!outstandingChanges.isEmpty()
                        && outstandingChanges.peek().zxid <= zxid) {
                    ChangeRecord cr = outstandingChanges.remove();
                    ServerMetrics.getMetrics().OUTSTANDING_CHANGES_REMOVED.add(1);
                    if (cr.zxid < zxid) {
                        LOG.warn(
                            ""Zxid outstanding 0x{} is less than current 0x{}"",
                            Long.toHexString(cr.zxid),
                            Long.toHexString(zxid));
                    }
                    if (outstandingChangesForPath.get(cr.path) == cr) {
                        outstandingChangesForPath.remove(cr.path);
                    }
                }
            }
        }

        // do not add non quorum packets to the queue.
        if (quorumRequest) {
            getZKDatabase().addCommittedProposal(request);
        }
        return rc;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,processTxnForSessionEvents,"void processTxnForSessionEvents(Request,TxnHeader,Record)","[1893, 1907]","{'A583': [(1902, 1902)], 'A596': [(1897, 1897), (1899, 1899), (1903, 1906)], 'A694': [(1893, 1895), (1907, 1907)], 'A612': [(1896, 1896), (1900, 1901)], 'A648': [(1898, 1898)]}","{'A583': 0.06666666666666667, 'A596': 0.4, 'A694': 0.26666666666666666, 'A612': 0.2, 'A648': 0.06666666666666667}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private void processTxnForSessionEvents(Request request, TxnHeader hdr, Record txn) {
        int opCode = (request == null) ? hdr.getType() : request.type;
        long sessionId = (request == null) ? hdr.getClientId() : request.sessionId;

        if (opCode == OpCode.createSession) {
            if (hdr != null && txn instanceof CreateSessionTxn) {
                CreateSessionTxn cst = (CreateSessionTxn) txn;
                sessionTracker.commitSession(sessionId, cst.getTimeOut());
            } else if (request == null || !request.isLocalSession()) {
                LOG.warn(""*****>>>>> Got {} {}"",  txn.getClass(), txn.toString());
            }
        } else if (opCode == OpCode.closeSession) {
            sessionTracker.removeSession(sessionId);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,processTxnInDB,"ProcessTxnResult processTxnInDB(TxnHeader,Record,TxnDigest)","[1909, 1915]","{'A596': [(1915, 1915)], 'A694': [(1910, 1911)], 'A612': [(1909, 1909), (1912, 1914)]}","{'A596': 0.14285714285714285, 'A694': 0.2857142857142857, 'A612': 0.5714285714285714}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private ProcessTxnResult processTxnInDB(TxnHeader hdr, Record txn, TxnDigest digest) {
        if (hdr == null) {
            return new ProcessTxnResult();
        } else {
            return getZKDatabase().processTxn(hdr, txn, digest);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getSessionExpiryMap,"Map<Long, Set<Long>> getSessionExpiryMap()","[1917, 1919]","{'A591': [(1917, 1919)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public Map<Long, Set<Long>> getSessionExpiryMap() {
        return sessionTracker.getSessionExpiryMap();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,registerServerShutdownHandler,void registerServerShutdownHandler(ZooKeeperServerShutdownHandler),"[1929, 1931]","{'A597': [(1929, 1931)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    void registerServerShutdownHandler(ZooKeeperServerShutdownHandler zkShutdownHandler) {
        this.zkShutdownHandler = zkShutdownHandler;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isResponseCachingEnabled,boolean isResponseCachingEnabled(),"[1933, 1935]","{'A647': [(1933, 1935)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean isResponseCachingEnabled() {
        return isResponseCachingEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setResponseCachingEnabled,void setResponseCachingEnabled(boolean),"[1937, 1939]","{'A647': [(1937, 1939)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void setResponseCachingEnabled(boolean isEnabled) {
        isResponseCachingEnabled = isEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getReadResponseCache,ResponseCache getReadResponseCache(),"[1941, 1943]","{'A647': [(1941, 1943)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ResponseCache getReadResponseCache() {
        return isResponseCachingEnabled ? readResponseCache : null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getGetChildrenResponseCache,ResponseCache getGetChildrenResponseCache(),"[1945, 1947]","{'A604': [(1945, 1947)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ResponseCache getGetChildrenResponseCache() {
        return isResponseCachingEnabled ? getChildrenResponseCache : null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,registerMetrics,void registerMetrics(),"[1949, 1999]","{'A583': [(1950, 1950), (1975, 1975)], 'A584': [(1949, 1949), (1951, 1974), (1976, 1985), (1999, 1999)], 'A586': [(1990, 1998)], 'A612': [(1986, 1986)], 'A753': [(1987, 1989)]}","{'A583': 0.0392156862745098, 'A584': 0.7058823529411765, 'A586': 0.17647058823529413, 'A612': 0.0196078431372549, 'A753': 0.058823529411764705}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void registerMetrics() {
        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();

        final ZKDatabase zkdb = this.getZKDatabase();
        final ServerStats stats = this.serverStats();

        rootContext.registerGauge(""avg_latency"", stats::getAvgLatency);

        rootContext.registerGauge(""max_latency"", stats::getMaxLatency);
        rootContext.registerGauge(""min_latency"", stats::getMinLatency);

        rootContext.registerGauge(""packets_received"", stats::getPacketsReceived);
        rootContext.registerGauge(""packets_sent"", stats::getPacketsSent);
        rootContext.registerGauge(""num_alive_connections"", stats::getNumAliveClientConnections);

        rootContext.registerGauge(""outstanding_requests"", stats::getOutstandingRequests);
        rootContext.registerGauge(""uptime"", stats::getUptime);

        rootContext.registerGauge(""znode_count"", zkdb::getNodeCount);

        rootContext.registerGauge(""watch_count"", zkdb.getDataTree()::getWatchCount);
        rootContext.registerGauge(""ephemerals_count"", zkdb.getDataTree()::getEphemeralsCount);

        rootContext.registerGauge(""approximate_data_size"", zkdb.getDataTree()::cachedApproximateDataSize);

        rootContext.registerGauge(""global_sessions"", zkdb::getSessionCount);
        rootContext.registerGauge(""local_sessions"", this.getSessionTracker()::getLocalSessionCount);

        OSMXBean osMbean = new OSMXBean();
        rootContext.registerGauge(""open_file_descriptor_count"", osMbean::getOpenFileDescriptorCount);
        rootContext.registerGauge(""max_file_descriptor_count"", osMbean::getMaxFileDescriptorCount);
        rootContext.registerGauge(""connection_drop_probability"", this::getConnectionDropChance);

        rootContext.registerGauge(""last_client_response_size"", stats.getClientResponseStats()::getLastBufferSize);
        rootContext.registerGauge(""max_client_response_size"", stats.getClientResponseStats()::getMaxBufferSize);
        rootContext.registerGauge(""min_client_response_size"", stats.getClientResponseStats()::getMinBufferSize);

        rootContext.registerGauge(""outstanding_tls_handshake"", this::getOutstandingHandshakeNum);
        rootContext.registerGauge(""auth_failed_count"", stats::getAuthFailedCount);
        rootContext.registerGauge(""non_mtls_remote_conn_count"", stats::getNonMTLSRemoteConnCount);
        rootContext.registerGauge(""non_mtls_local_conn_count"", stats::getNonMTLSLocalConnCount);

        rootContext.registerGaugeSet(QuotaMetricsUtils.QUOTA_COUNT_LIMIT_PER_NAMESPACE,
                () -> QuotaMetricsUtils.getQuotaCountLimit(zkDb.getDataTree()));
        rootContext.registerGaugeSet(QuotaMetricsUtils.QUOTA_BYTES_LIMIT_PER_NAMESPACE,
                () -> QuotaMetricsUtils.getQuotaBytesLimit(zkDb.getDataTree()));
        rootContext.registerGaugeSet(QuotaMetricsUtils.QUOTA_COUNT_USAGE_PER_NAMESPACE,
                () -> QuotaMetricsUtils.getQuotaCountUsage(zkDb.getDataTree()));
        rootContext.registerGaugeSet(QuotaMetricsUtils.QUOTA_BYTES_USAGE_PER_NAMESPACE,
                () -> QuotaMetricsUtils.getQuotaBytesUsage(zkDb.getDataTree()));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,unregisterMetrics,void unregisterMetrics(),"[2001, 2042]","{'A583': [(2003, 2003)], 'A584': [(2001, 2002), (2004, 2033), (2042, 2042)], 'A586': [(2038, 2041)], 'A753': [(2034, 2037)]}","{'A583': 0.023809523809523808, 'A584': 0.7857142857142857, 'A586': 0.09523809523809523, 'A753': 0.09523809523809523}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    protected void unregisterMetrics() {

        MetricsContext rootContext = ServerMetrics.getMetrics().getMetricsProvider().getRootContext();

        rootContext.unregisterGauge(""avg_latency"");

        rootContext.unregisterGauge(""max_latency"");
        rootContext.unregisterGauge(""min_latency"");

        rootContext.unregisterGauge(""packets_received"");
        rootContext.unregisterGauge(""packets_sent"");
        rootContext.unregisterGauge(""num_alive_connections"");

        rootContext.unregisterGauge(""outstanding_requests"");
        rootContext.unregisterGauge(""uptime"");

        rootContext.unregisterGauge(""znode_count"");

        rootContext.unregisterGauge(""watch_count"");
        rootContext.unregisterGauge(""ephemerals_count"");
        rootContext.unregisterGauge(""approximate_data_size"");

        rootContext.unregisterGauge(""global_sessions"");
        rootContext.unregisterGauge(""local_sessions"");

        rootContext.unregisterGauge(""open_file_descriptor_count"");
        rootContext.unregisterGauge(""max_file_descriptor_count"");
        rootContext.unregisterGauge(""connection_drop_probability"");

        rootContext.unregisterGauge(""last_client_response_size"");
        rootContext.unregisterGauge(""max_client_response_size"");
        rootContext.unregisterGauge(""min_client_response_size"");

        rootContext.unregisterGauge(""auth_failed_count"");
        rootContext.unregisterGauge(""non_mtls_remote_conn_count"");
        rootContext.unregisterGauge(""non_mtls_local_conn_count"");

        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_COUNT_LIMIT_PER_NAMESPACE);
        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_BYTES_LIMIT_PER_NAMESPACE);
        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_COUNT_USAGE_PER_NAMESPACE);
        rootContext.unregisterGaugeSet(QuotaMetricsUtils.QUOTA_BYTES_USAGE_PER_NAMESPACE);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,dumpMonitorValues,"void dumpMonitorValues(BiConsumer<String, Object>)","[2050, 2054]","{'A583': [(2051, 2053)], 'A584': [(2050, 2050), (2054, 2054)]}","{'A583': 0.6, 'A584': 0.4}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void dumpMonitorValues(BiConsumer<String, Object> response) {
        ServerStats stats = serverStats();
        response.accept(""version"", Version.getFullVersion());
        response.accept(""server_state"", stats.getServerState());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,checkACL,"void checkACL(ServerCnxn,List<ACL>,int,List<Id>,String,List<ACL>)","[2065, 2102]","{'A583': [(2065, 2065), (2085, 2085), (2088, 2088), (2092, 2094)], 'A604': [(2066, 2084), (2086, 2087), (2089, 2091), (2095, 2102)]}","{'A583': 0.15789473684210525, 'A604': 0.8421052631578947}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void checkACL(ServerCnxn cnxn, List<ACL> acl, int perm, List<Id> ids, String path, List<ACL> setAcls) throws KeeperException.NoAuthException {
        if (skipACL) {
            return;
        }

        LOG.debug(""Permission requested: {} "", perm);
        LOG.debug(""ACLs for node: {}"", acl);
        LOG.debug(""Client credentials: {}"", ids);

        if (acl == null || acl.size() == 0) {
            return;
        }
        for (Id authId : ids) {
            if (authId.getScheme().equals(""super"")) {
                return;
            }
        }
        for (ACL a : acl) {
            Id id = a.getId();
            if ((a.getPerms() & perm) != 0) {
                if (id.getScheme().equals(""world"") && id.getId().equals(""anyone"")) {
                    return;
                }
                ServerAuthenticationProvider ap = ProviderRegistry.getServerProvider(id.getScheme());
                if (ap != null) {
                    for (Id authId : ids) {
                        if (authId.getScheme().equals(id.getScheme())
                            && ap.matches(
                                new ServerAuthenticationProvider.ServerObjs(this, cnxn),
                                new ServerAuthenticationProvider.MatchValues(path, authId.getId(), id.getId(), perm, setAcls))) {
                            return;
                        }
                    }
                }
            }
        }
        throw new KeeperException.NoAuthException();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,checkQuota,"void checkQuota(String,byte[],byte[],int)","[2116, 2138]","{'A637': [(2116, 2116)], 'A641': [(2117, 2126), (2128, 2129), (2131, 2132), (2134, 2138)], 'A586': [(2127, 2127), (2130, 2130), (2133, 2133)]}","{'A637': 0.043478260869565216, 'A641': 0.8260869565217391, 'A586': 0.13043478260869565}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public void checkQuota(String path, byte[] lastData, byte[] data, int type) throws KeeperException.QuotaExceededException {
        if (!enforceQuota) {
            return;
        }
        long dataBytes = (data == null) ? 0 : data.length;
        ZKDatabase zkDatabase = getZKDatabase();
        String lastPrefix = zkDatabase.getDataTree().getMaxPrefixWithQuota(path);
        if (StringUtils.isEmpty(lastPrefix)) {
            return;
        }

        final String namespace = PathUtils.getTopNamespace(path);
        switch (type) {
            case OpCode.create:
                checkQuota(lastPrefix, dataBytes, 1, namespace);
                break;
            case OpCode.setData:
                checkQuota(lastPrefix, dataBytes - (lastData == null ? 0 : lastData.length), 0, namespace);
                break;
             default:
                 throw new IllegalArgumentException(""Unsupported OpCode for checkQuota: "" + type);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,checkQuota,"void checkQuota(String,long,long,String)","[2152, 2220]","{'A641': [(2153, 2192), (2194, 2199), (2201, 2208), (2210, 2214), (2216, 2220)], 'A586': [(2152, 2152), (2200, 2200), (2215, 2215)], 'A690': [(2193, 2193), (2209, 2209)]}","{'A641': 0.927536231884058, 'A586': 0.043478260869565216, 'A690': 0.028985507246376812}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private void checkQuota(String lastPrefix, long bytesDiff, long countDiff, String namespace)
            throws KeeperException.QuotaExceededException {
        LOG.debug(""checkQuota: lastPrefix={}, bytesDiff={}, countDiff={}"", lastPrefix, bytesDiff, countDiff);

        // now check the quota we set
        String limitNode = Quotas.limitPath(lastPrefix);
        DataNode node = getZKDatabase().getNode(limitNode);
        StatsTrack limitStats;
        if (node == null) {
            // should not happen
            LOG.error(""Missing limit node for quota {}"", limitNode);
            return;
        }
        synchronized (node) {
            limitStats = new StatsTrack(node.data);
        }
        //check the quota
        boolean checkCountQuota = countDiff != 0 && (limitStats.getCount() > -1 || limitStats.getCountHardLimit() > -1);
        boolean checkByteQuota = bytesDiff != 0 && (limitStats.getBytes() > -1 || limitStats.getByteHardLimit() > -1);

        if (!checkCountQuota && !checkByteQuota) {
            return;
        }

        //check the statPath quota
        String statNode = Quotas.statPath(lastPrefix);
        node = getZKDatabase().getNode(statNode);

        StatsTrack currentStats;
        if (node == null) {
            // should not happen
            LOG.error(""Missing node for stat {}"", statNode);
            return;
        }
        synchronized (node) {
            currentStats = new StatsTrack(node.data);
        }

        //check the Count Quota
        if (checkCountQuota) {
            long newCount = currentStats.getCount() + countDiff;
            boolean isCountHardLimit = limitStats.getCountHardLimit() > -1;
            long countLimit = isCountHardLimit ? limitStats.getCountHardLimit() : limitStats.getCount();

            if (newCount > countLimit) {
                String msg = ""Quota exceeded: "" + lastPrefix + "" [current count="" + newCount + "", "" + (isCountHardLimit ? ""hard"" : ""soft"") + ""CountLimit="" + countLimit + ""]"";
                RATE_LOGGER.rateLimitLog(msg);
                if (isCountHardLimit) {
                    updateQuotaExceededMetrics(namespace);
                    throw new KeeperException.QuotaExceededException(lastPrefix);
                }
            }
        }

        //check the Byte Quota
        if (checkByteQuota) {
            long newBytes = currentStats.getBytes() + bytesDiff;
            boolean isByteHardLimit = limitStats.getByteHardLimit() > -1;
            long byteLimit = isByteHardLimit ? limitStats.getByteHardLimit() : limitStats.getBytes();
            if (newBytes > byteLimit) {
                String msg = ""Quota exceeded: "" + lastPrefix + "" [current bytes="" + newBytes + "", "" + (isByteHardLimit ? ""hard"" : ""soft"") + ""ByteLimit="" + byteLimit + ""]"";
                RATE_LOGGER.rateLimitLog(msg);
                if (isByteHardLimit) {
                    updateQuotaExceededMetrics(namespace);
                    throw new KeeperException.QuotaExceededException(lastPrefix);
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isDigestEnabled,boolean isDigestEnabled(),"[2222, 2224]","{'A653': [(2222, 2224)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static boolean isDigestEnabled() {
        return digestEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setDigestEnabled,void setDigestEnabled(boolean),"[2226, 2229]","{'A653': [(2226, 2229)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static void setDigestEnabled(boolean digestEnabled) {
        LOG.info(""{} = {}"", ZOOKEEPER_DIGEST_ENABLED, digestEnabled);
        ZooKeeperServer.digestEnabled = digestEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isSerializeLastProcessedZxidEnabled,boolean isSerializeLastProcessedZxidEnabled(),"[2231, 2233]","{'A726': [(2231, 2233)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static boolean isSerializeLastProcessedZxidEnabled() {
        return serializeLastProcessedZxidEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,setSerializeLastProcessedZxidEnabled,void setSerializeLastProcessedZxidEnabled(boolean),"[2235, 2238]","{'A726': [(2235, 2238)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public static void setSerializeLastProcessedZxidEnabled(boolean serializeLastZxidEnabled) {
        serializeLastProcessedZxidEnabled = serializeLastZxidEnabled;
        LOG.info(""{} = {}"", ZOOKEEPER_SERIALIZE_LAST_PROCESSED_ZXID_ENABLED, serializeLastZxidEnabled);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,parentPath,String parentPath(String),"[2247, 2253]","{'A583': [(2247, 2247), (2249, 2249)], 'A604': [(2248, 2248), (2250, 2253)]}","{'A583': 0.2857142857142857, 'A604': 0.7142857142857143}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private String parentPath(String path) throws KeeperException.BadArgumentsException {
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash == -1 || path.indexOf('\0') != -1 || getZKDatabase().isSpecialPath(path)) {
            throw new KeeperException.BadArgumentsException(path);
        }
        return lastSlash == 0 ? ""/"" : path.substring(0, lastSlash);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,effectiveACLPath,String effectiveACLPath(Request),"[2255, 2305]","{'A583': [(2255, 2255), (2261, 2267), (2269, 2274), (2276, 2281), (2283, 2290), (2292, 2293)], 'A604': [(2256, 2260), (2268, 2268), (2275, 2275), (2282, 2282), (2291, 2291), (2294, 2305)]}","{'A583': 0.5882352941176471, 'A604': 0.4117647058823529}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private String effectiveACLPath(Request request) throws KeeperException.BadArgumentsException, KeeperException.InvalidACLException {
        boolean mustCheckACL = false;
        String path = null;
        List<ACL> acl = null;

        switch (request.type) {
        case OpCode.create:
        case OpCode.create2: {
            CreateRequest req = request.readRequestRecordNoException(CreateRequest::new);
            if (req != null) {
                mustCheckACL = true;
                acl = req.getAcl();
                path = parentPath(req.getPath());
            }
            break;
        }
        case OpCode.delete: {
            DeleteRequest req = request.readRequestRecordNoException(DeleteRequest::new);
            if (req != null) {
                path = parentPath(req.getPath());
            }
            break;
        }
        case OpCode.setData: {
            SetDataRequest req = request.readRequestRecordNoException(SetDataRequest::new);
            if (req != null) {
                path = req.getPath();
            }
            break;
        }
        case OpCode.setACL: {
            SetACLRequest req = request.readRequestRecordNoException(SetACLRequest::new);
            if (req != null) {
                mustCheckACL = true;
                acl = req.getAcl();
                path = req.getPath();
            }
            break;
        }
        }

        if (mustCheckACL) {
            /* we ignore the extrapolated ACL returned by fixupACL because
             * we only care about it being well-formed (and if it isn't, an
             * exception will be raised).
             */
            PrepRequestProcessor.fixupACL(path, request.authInfo, acl);
        }

        return path;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,effectiveACLPerms,int effectiveACLPerms(Request),"[2307, 2321]","{'A583': [(2309, 2319)], 'A604': [(2307, 2308), (2320, 2321)]}","{'A583': 0.7333333333333333, 'A604': 0.26666666666666666}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    private int effectiveACLPerms(Request request) {
        switch (request.type) {
        case OpCode.create:
        case OpCode.create2:
            return ZooDefs.Perms.CREATE;
        case OpCode.delete:
            return ZooDefs.Perms.DELETE;
        case OpCode.setData:
            return ZooDefs.Perms.WRITE;
        case OpCode.setACL:
            return ZooDefs.Perms.ADMIN;
        default:
            return ZooDefs.Perms.ALL;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,authWriteRequest,boolean authWriteRequest(Request),"[2337, 2379]","{'A583': [(2350, 2350)], 'A604': [(2337, 2349), (2351, 2372), (2374, 2379)], 'A601': [(2373, 2373)]}","{'A583': 0.023255813953488372, 'A604': 0.9534883720930233, 'A601': 0.023255813953488372}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean authWriteRequest(Request request) {
        int err;
        String pathToCheck;

        if (!enableEagerACLCheck) {
            return true;
        }

        err = KeeperException.Code.OK.intValue();

        try {
            pathToCheck = effectiveACLPath(request);
            if (pathToCheck != null) {
                checkACL(request.cnxn, zkDb.getACL(pathToCheck, null), effectiveACLPerms(request), request.authInfo, pathToCheck, null);
            }
        } catch (KeeperException.NoAuthException e) {
            LOG.debug(""Request failed ACL check"", e);
            err = e.code().intValue();
        } catch (KeeperException.InvalidACLException e) {
            LOG.debug(""Request has an invalid ACL check"", e);
            err = e.code().intValue();
        } catch (KeeperException.NoNodeException e) {
            LOG.debug(""ACL check against non-existent node: {}"", e.getMessage());
        } catch (KeeperException.BadArgumentsException e) {
            LOG.debug(""ACL check against illegal node path: {}"", e.getMessage());
        } catch (Throwable t) {
            LOG.error(""Uncaught exception in authWriteRequest with: "", t);
            throw t;
        } finally {
            if (err != KeeperException.Code.OK.intValue()) {
                /*  This request has a bad ACL, so we are dismissing it early. */
                decInProcess();
                ReplyHeader rh = new ReplyHeader(request.cxid, 0, err);
                try {
                    request.cnxn.sendResponse(rh, null, null);
                } catch (IOException e) {
                    LOG.warn(""IOException"", e);
                }
            }
        }

        return err == KeeperException.Code.OK.intValue();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getOutstandingHandshakeNum,int getOutstandingHandshakeNum(),"[2381, 2387]","{'A612': [(2381, 2387)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public int getOutstandingHandshakeNum() {
        if (serverCnxnFactory instanceof NettyServerCnxnFactory) {
            return ((NettyServerCnxnFactory) serverCnxnFactory).getOutstandingHandshakeNum();
        } else {
            return 0;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,isReconfigEnabled,boolean isReconfigEnabled(),"[2389, 2391]","{'A653': [(2389, 2391)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public boolean isReconfigEnabled() {
        return this.reconfigEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,getZkShutdownHandler,ZooKeeperServerShutdownHandler getZkShutdownHandler(),"[2393, 2395]","{'A584': [(2393, 2395)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    public ZooKeeperServerShutdownHandler getZkShutdownHandler() {
        return zkShutdownHandler;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java,ZooKeeperServer,updateQuotaExceededMetrics,void updateQuotaExceededMetrics(String),"[2397, 2402]","{'A586': [(2397, 2402)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerTest.java,"    static void updateQuotaExceededMetrics(final String namespace) {
        if (namespace == null) {
            return;
        }
        ServerMetrics.getMetrics().QUOTA_EXCEEDED_ERROR_PER_NAMESPACE.add(namespace, 1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperThread.java,ZooKeeperThread,handleException,"void handleException(String,Throwable)","[48, 50]","{'A593': [(48, 48), (50, 50)], 'A611': [(49, 49)]}","{'A593': 0.6666666666666666, 'A611': 0.3333333333333333}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperThreadTest.java,"    protected void handleException(String thName, Throwable e) {
        LOG.warn(""Exception occurred from thread {}"", thName, e);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,setSnapCount,void setSnapCount(int),"[100, 102]","{'A596': [(100, 102)]}",{'A596': 1.0},A596,,"    public static void setSnapCount(int count) {
        snapCount = count;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,getSnapCount,int getSnapCount(),"[108, 110]","{'A596': [(108, 110)]}",{'A596': 1.0},A596,,"    public static int getSnapCount() {
        return snapCount;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,getRemainingDelay,long getRemainingDelay(),"[112, 119]","{'A647': [(112, 119)]}",{'A647': 1.0},A647,,"    private long getRemainingDelay() {
        long flushDelay = zks.getFlushDelay();
        long duration = Time.currentElapsedTime() - lastFlushTime;
        if (duration < flushDelay) {
            return flushDelay - duration;
        }
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,shouldFlush,boolean shouldFlush(),"[125, 132]","{'A647': [(125, 132)]}",{'A647': 1.0},A647,,"    private boolean shouldFlush() {
        long flushDelay = zks.getFlushDelay();
        long maxBatchSize = zks.getMaxBatchSize();
        if ((flushDelay > 0) && (getRemainingDelay() == 0)) {
            return true;
        }
        return (maxBatchSize > 0) && (toFlush.size() >= maxBatchSize);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,setSnapSizeInBytes,void setSnapSizeInBytes(long),"[139, 141]","{'A647': [(139, 141)]}",{'A647': 1.0},A647,,"    public static void setSnapSizeInBytes(long size) {
        snapSizeInBytes = size;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,shouldSnapshot,boolean shouldSnapshot(),"[143, 148]","{'A583': [(146, 147)], 'A647': [(143, 145), (148, 148)]}","{'A583': 0.3333333333333333, 'A647': 0.6666666666666666}",A647,,"    private boolean shouldSnapshot() {
        int logCount = zks.getZKDatabase().getTxnCount();
        long logSize = zks.getZKDatabase().getTxnSize();
        return (logCount > (snapCount / 2 + randRoll))
               || (snapSizeInBytes > 0 && logSize > (snapSizeInBytes / 2 + randSize));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,resetSnapshotStats,void resetSnapshotStats(),"[150, 153]","{'A583': [(151, 152)], 'A647': [(150, 150), (153, 153)]}","{'A583': 0.5, 'A647': 0.5}",A583,,"    private void resetSnapshotStats() {
        randRoll = ThreadLocalRandom.current().nextInt(snapCount / 2);
        randSize = Math.abs(ThreadLocalRandom.current().nextLong() % (snapSizeInBytes / 2));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,run,void run(),"[155, 225]","{'A583': [(172, 172), (178, 178), (197, 197), (210, 210)], 'A591': [(156, 157), (162, 162), (170, 171), (174, 175), (212, 212), (218, 218), (220, 220), (223, 223), (225, 225)], 'A620': [(167, 167), (169, 169), (173, 173), (176, 176), (180, 180), (184, 196), (198, 200), (203, 204), (207, 209), (211, 211), (213, 215), (217, 217)], 'A647': [(160, 161), (165, 166), (168, 168), (182, 183), (216, 216)], 'A593': [(222, 222)], 'A590': [(155, 155), (158, 159), (201, 202), (221, 221), (224, 224)], 'A675': [(163, 164), (177, 177), (179, 179), (181, 181), (205, 206), (219, 219)]}","{'A583': 0.056338028169014086, 'A591': 0.16901408450704225, 'A620': 0.43661971830985913, 'A647': 0.11267605633802817, 'A593': 0.014084507042253521, 'A590': 0.09859154929577464, 'A675': 0.11267605633802817}",A620,,"    @Override
    public void run() {
        try {
            // we do this in an attempt to ensure that not all of the servers
            // in the ensemble take a snapshot at the same time
            resetSnapshotStats();
            lastFlushTime = Time.currentElapsedTime();
            while (true) {
                ServerMetrics.getMetrics().SYNC_PROCESSOR_QUEUE_SIZE.add(queuedRequests.size());

                long pollTime = Math.min(zks.getMaxWriteQueuePollTime(), getRemainingDelay());
                Request si = queuedRequests.poll(pollTime, TimeUnit.MILLISECONDS);
                if (si == null) {
                    /* We timed out looking for more writes to batch, go ahead and flush immediately */
                    flush();
                    si = queuedRequests.take();
                }

                if (si == REQUEST_OF_DEATH) {
                    break;
                }

                long startProcessTime = Time.currentElapsedTime();
                ServerMetrics.getMetrics().SYNC_PROCESSOR_QUEUE_TIME.add(startProcessTime - si.syncQueueStartTime);

                // track the number of records written to the log
                if (!si.isThrottled() && zks.getZKDatabase().append(si)) {
                    if (shouldSnapshot()) {
                        resetSnapshotStats();
                        // roll the log
                        zks.getZKDatabase().rollLog();
                        // take a snapshot
                        if (!snapThreadMutex.tryAcquire()) {
                            LOG.warn(""Too busy to snap, skipping"");
                        } else {
                            new ZooKeeperThread(""Snapshot Thread"") {
                                public void run() {
                                    try {
                                        zks.takeSnapshot();
                                    } catch (Exception e) {
                                        LOG.warn(""Unexpected exception"", e);
                                    } finally {
                                        snapThreadMutex.release();
                                    }
                                }
                            }.start();
                        }
                    }
                } else if (toFlush.isEmpty()) {
                    // optimization for read heavy workloads
                    // iff this is a read or a throttled request(which doesn't need to be written to the disk),
                    // and there are no pending flushes (writes), then just pass this to the next processor
                    if (nextProcessor != null) {
                        nextProcessor.processRequest(si);
                        if (nextProcessor instanceof Flushable) {
                            ((Flushable) nextProcessor).flush();
                        }
                    }
                    continue;
                }
                toFlush.add(si);
                if (shouldFlush()) {
                    flush();
                }
                ServerMetrics.getMetrics().SYNC_PROCESS_TIME.add(Time.currentElapsedTime() - startProcessTime);
            }
        } catch (Throwable t) {
            handleException(this.getName(), t);
        }
        LOG.info(""SyncRequestProcessor exited!"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,run,void run(),"[191, 199]","{'A583': [(197, 197)], 'A620': [(191, 196), (198, 199)]}","{'A583': 0.1111111111111111, 'A620': 0.8888888888888888}",A620,,"                                public void run() {
                                    try {
                                        zks.takeSnapshot();
                                    } catch (Exception e) {
                                        LOG.warn(""Unexpected exception"", e);
                                    } finally {
                                        snapThreadMutex.release();
                                    }
                                }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,flush,void flush(),"[227, 252]","{'A583': [(228, 250)], 'A591': [(252, 252)], 'A620': [(227, 227)], 'A754': [(251, 251)]}","{'A583': 0.8846153846153846, 'A591': 0.038461538461538464, 'A620': 0.038461538461538464, 'A754': 0.038461538461538464}",A583,,"    private void flush() throws IOException, RequestProcessorException {
        if (this.toFlush.isEmpty()) {
            return;
        }

        ServerMetrics.getMetrics().BATCH_SIZE.add(toFlush.size());

        long flushStartTime = Time.currentElapsedTime();
        zks.getZKDatabase().commit();
        ServerMetrics.getMetrics().SYNC_PROCESSOR_FLUSH_TIME.add(Time.currentElapsedTime() - flushStartTime);

        if (this.nextProcessor == null) {
            this.toFlush.clear();
        } else {
            while (!this.toFlush.isEmpty()) {
                final Request i = this.toFlush.remove();
                long latency = Time.currentElapsedTime() - i.syncQueueStartTime;
                ServerMetrics.getMetrics().SYNC_PROCESSOR_QUEUE_AND_FLUSH_TIME.add(latency);
                this.nextProcessor.processRequest(i);
            }
            if (this.nextProcessor instanceof Flushable) {
                ((Flushable) this.nextProcessor).flush();
            }
        }
        lastFlushTime = Time.currentElapsedTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,shutdown,void shutdown(),"[254, 271]","{'A591': [(254, 255), (271, 271)], 'A596': [(257, 257), (267, 267)], 'A620': [(256, 256), (258, 260), (262, 262)], 'A648': [(263, 266), (268, 270)], 'A589': [(261, 261)]}","{'A591': 0.16666666666666666, 'A596': 0.1111111111111111, 'A620': 0.2777777777777778, 'A648': 0.3888888888888889, 'A589': 0.05555555555555555}",A648,,"    public void shutdown() {
        LOG.info(""Shutting down"");
        queuedRequests.add(REQUEST_OF_DEATH);
        try {
            this.join();
            this.flush();
        } catch (InterruptedException e) {
            LOG.warn(""Interrupted while waiting for {} to finish"", this);
            Thread.currentThread().interrupt();
        } catch (IOException e) {
            LOG.warn(""Got IO exception during shutdown"");
        } catch (RequestProcessorException e) {
            LOG.warn(""Got request processor exception during shutdown"");
        }
        if (nextProcessor != null) {
            nextProcessor.shutdown();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SyncRequestProcessor.java,SyncRequestProcessor,processRequest,void processRequest(Request),"[273, 279]","{'A591': [(277, 277), (279, 279)], 'A620': [(273, 274)], 'A675': [(275, 276), (278, 278)]}","{'A591': 0.2857142857142857, 'A620': 0.2857142857142857, 'A675': 0.42857142857142855}",A675,,"    public void processRequest(final Request request) {
        Objects.requireNonNull(request, ""Request cannot be null"");

        request.syncQueueStartTime = Time.currentElapsedTime();
        queuedRequests.add(request);
        ServerMetrics.getMetrics().SYNC_PROCESSOR_QUEUED.add(1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperCriticalThread.java,ZooKeeperCriticalThread,handleException,"void handleException(String,Throwable)","[47, 52]","{'A593': [(47, 49), (52, 52)], 'A609': [(50, 50)], 'A584': [(51, 51)]}","{'A593': 0.6666666666666666, 'A609': 0.16666666666666666, 'A584': 0.16666666666666666}",A593,,"    @Override
    protected void handleException(String threadName, Throwable e) {
        LOG.error(""Severe unrecoverable error, from thread : {}"", threadName, e);
        listener.notifyStopping(threadName, ExitCode.UNEXPECTED_ERROR.getValue());
        ServerMetrics.getMetrics().UNRECOVERABLE_ERROR_COUNT.add(1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogProposalIterator.java,TxnLogProposalIterator,hasNext,boolean hasNext(),"[49, 52]","{'A648': [(49, 52)]}",{'A648': 1.0},A648,,"    @Override
    public boolean hasNext() {
        return hasNext;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogProposalIterator.java,TxnLogProposalIterator,next,Proposal next(),"[58, 77]","{'A648': [(58, 60), (62, 62), (64, 64), (67, 72), (74, 77)], 'A612': [(63, 63), (65, 65)], 'A595': [(61, 61), (66, 66), (73, 73)]}","{'A648': 0.75, 'A612': 0.1, 'A595': 0.15}",A648,,"    @Override
    public Proposal next() {

        Proposal p;
        try {
            byte[] serializedData = Util.marshallTxnEntry(itr.getHeader(), itr.getTxn(), itr.getDigest());

            QuorumPacket pp = new QuorumPacket(Leader.PROPOSAL, itr.getHeader().getZxid(), serializedData, null);
            p = new Proposal(pp);
            // This is the only place that can throw IO exception
            hasNext = itr.next();

        } catch (IOException e) {
            LOG.error(""Unable to read txnlog from disk"", e);
            hasNext = false;
            p = new Proposal();
        }

        return p;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogProposalIterator.java,TxnLogProposalIterator,remove,void remove(),"[79, 82]","{'A648': [(79, 82)]}",{'A648': 1.0},A648,,"    @Override
    public void remove() {
        throw new UnsupportedOperationException();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogProposalIterator.java,TxnLogProposalIterator,close,void close(),"[88, 96]","{'A583': [(89, 89)], 'A597': [(88, 88), (90, 96)]}","{'A583': 0.1111111111111111, 'A597': 0.8888888888888888}",A597,,"    public void close() {
        if (itr != null) {
            try {
                itr.close();
            } catch (IOException ioe) {
                LOG.warn(""Error closing file iterator"", ioe);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,readRequestRecord,T readRequestRecord(Supplier<T>),"[102, 107]","{'A583': [(102, 107)]}",{'A583': 1.0},A583,,"    public <T extends Record> T readRequestRecord(Supplier<T> constructor) throws IOException {
        if (request != null) {
            return request.readRecord(constructor);
        }
        throw new IOException(new NullPointerException(""request""));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,readRequestRecordNoException,T readRequestRecordNoException(Supplier<T>),"[109, 115]","{'A583': [(109, 115)]}",{'A583': 1.0},A583,,"    public <T extends Record> T readRequestRecordNoException(Supplier<T> constructor) {
        try {
            return readRequestRecord(constructor);
        } catch (IOException e) {
            return null;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,readRequestBytes,byte[] readRequestBytes(),"[117, 122]","{'A583': [(117, 122)]}",{'A583': 1.0},A583,,"    public byte[] readRequestBytes() {
        if (request != null) {
            return request.readBytes();
        }
        return null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,requestDigest,String requestDigest(),"[124, 134]","{'A583': [(124, 134)]}",{'A583': 1.0},A583,,"    public String requestDigest() {
        if (request != null) {
            final StringBuilder sb = new StringBuilder();
            final byte[] payload = request.readBytes();
            for (byte b : payload) {
                sb.append(String.format(""%02x"", (0xff & b)));
            }
            return sb.toString();
        }
        return ""request buffer is null"";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isThrottled,boolean isThrottled(),"[170, 172]","{'A675': [(170, 172)]}",{'A675': 1.0},A675,,"    public boolean isThrottled() {
      return isThrottledFlag;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setIsThrottled,void setIsThrottled(boolean),"[174, 176]","{'A675': [(174, 176)]}",{'A675': 1.0},A675,,"    public void setIsThrottled(boolean val) {
      isThrottledFlag = val;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isThrottlable,boolean isThrottlable(),"[178, 182]","{'A675': [(178, 182)]}",{'A675': 1.0},A675,,"    public boolean isThrottlable() {
        return this.type != OpCode.ping
                && this.type != OpCode.closeSession
                && this.type != OpCode.createSession;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getSerializeData,byte[] getSerializeData(),"[184, 194]","{'A595': [(184, 194)]}",{'A595': 1.0},A595,,"    public byte[] getSerializeData() {
        if (this.hdr == null) {
            return null;
        }
        try {
            return Util.marshallTxnEntry(this.hdr, this.txn, this.txnDigest);
        } catch (IOException e) {
            LOG.error(""This really should be impossible."", e);
            return new byte[32];
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isLocalSession,boolean isLocalSession(),"[203, 205]","{'A648': [(203, 205)]}",{'A648': 1.0},A648,,"    public boolean isLocalSession() {
        return isLocalSession;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setLocalSession,void setLocalSession(boolean),"[207, 209]","{'A648': [(207, 209)]}",{'A648': 1.0},A648,,"    public void setLocalSession(boolean isLocalSession) {
        this.isLocalSession = isLocalSession;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setLargeRequestSize,void setLargeRequestSize(int),"[211, 213]","{'A675': [(211, 213)]}",{'A675': 1.0},A675,,"    public void setLargeRequestSize(int size) {
        largeRequestSize = size;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getLargeRequestSize,int getLargeRequestSize(),"[215, 217]","{'A675': [(215, 217)]}",{'A675': 1.0},A675,,"    public int getLargeRequestSize() {
        return largeRequestSize;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getOwner,Object getOwner(),"[219, 221]","{'A596': [(219, 221)]}",{'A596': 1.0},A596,,"    public Object getOwner() {
        return owner;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setOwner,void setOwner(Object),"[223, 225]","{'A596': [(223, 225)]}",{'A596': 1.0},A596,,"    public void setOwner(Object owner) {
        this.owner = owner;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getHdr,TxnHeader getHdr(),"[227, 229]","{'A591': [(227, 229)]}",{'A591': 1.0},A591,,"    public TxnHeader getHdr() {
        return hdr;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setHdr,void setHdr(TxnHeader),"[231, 233]","{'A591': [(231, 233)]}",{'A591': 1.0},A591,,"    public void setHdr(TxnHeader hdr) {
        this.hdr = hdr;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getTxn,Record getTxn(),"[235, 237]","{'A591': [(235, 237)]}",{'A591': 1.0},A591,,"    public Record getTxn() {
        return txn;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setTxn,void setTxn(Record),"[239, 241]","{'A591': [(239, 241)]}",{'A591': 1.0},A591,,"    public void setTxn(Record txn) {
        this.txn = txn;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getConnection,ServerCnxn getConnection(),"[243, 245]","{'A675': [(243, 245)]}",{'A675': 1.0},A675,,"    public ServerCnxn getConnection() {
        return cnxn;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getStaleLatencyCheck,boolean getStaleLatencyCheck(),"[247, 249]","{'A675': [(247, 249)]}",{'A675': 1.0},A675,,"    public static boolean getStaleLatencyCheck() {
        return staleLatencyCheck;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setStaleLatencyCheck,void setStaleLatencyCheck(boolean),"[251, 253]","{'A675': [(251, 253)]}",{'A675': 1.0},A675,,"    public static void setStaleLatencyCheck(boolean check) {
        staleLatencyCheck = check;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getStaleConnectionCheck,boolean getStaleConnectionCheck(),"[255, 257]","{'A675': [(255, 257)]}",{'A675': 1.0},A675,,"    public static boolean getStaleConnectionCheck() {
        return staleConnectionCheck;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setStaleConnectionCheck,void setStaleConnectionCheck(boolean),"[259, 261]","{'A675': [(259, 261)]}",{'A675': 1.0},A675,,"    public static void setStaleConnectionCheck(boolean check) {
        staleConnectionCheck = check;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isStale,boolean isStale(),"[263, 289]","{'A583': [(285, 285)], 'A675': [(263, 284), (286, 289)]}","{'A583': 0.037037037037037035, 'A675': 0.9629629629629629}",A675,,"    public boolean isStale() {
        if (cnxn == null) {
            return false;
        }

        // closeSession requests should be able to outlive the session in order
        // to clean-up state.
        if (type == OpCode.closeSession) {
            return false;
        }

        if (staleConnectionCheck) {
            // If the connection is closed, consider the request stale.
            if (cnxn.isStale() || cnxn.isInvalid()) {
                return true;
            }
        }

        if (staleLatencyCheck) {
            // If the request latency is higher than session timeout, consider
            // the request stale.
            long currentTime = Time.currentElapsedTime();
            return (currentTime - createTime) > cnxn.getSessionTimeout();
        }

        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,mustDrop,boolean mustDrop(),"[296, 298]","{'A675': [(296, 298)]}",{'A675': 1.0},A675,,"    public boolean mustDrop() {
        return ((cnxn != null) && cnxn.isInvalid());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isValid,boolean isValid(int),"[307, 345]","{'A591': [(315, 315), (338, 338)], 'A590': [(307, 310), (314, 314), (318, 318), (321, 323), (330, 331), (341, 345)], 'A596': [(325, 325)], 'A592': [(340, 340)], 'A625': [(312, 312)], 'A648': [(311, 311), (313, 313), (319, 319), (326, 326), (328, 328), (332, 334), (336, 336)], 'A639': [(316, 316), (337, 337)], 'A616': [(317, 317), (320, 320)], 'A641': [(324, 324)], 'A644': [(327, 327)], 'A626': [(329, 329)], 'A636': [(335, 335), (339, 339)]}","{'A591': 0.05128205128205128, 'A590': 0.41025641025641024, 'A596': 0.02564102564102564, 'A592': 0.02564102564102564, 'A625': 0.02564102564102564, 'A648': 0.23076923076923078, 'A639': 0.05128205128205128, 'A616': 0.05128205128205128, 'A641': 0.02564102564102564, 'A644': 0.02564102564102564, 'A626': 0.02564102564102564, 'A636': 0.05128205128205128}",A590,,"    static boolean isValid(int type) {
        // make sure this is always synchronized with Zoodefs!!
        switch (type) {
        case OpCode.notification:
        case OpCode.check:
            return false;
        case OpCode.closeSession:
        case OpCode.create:
        case OpCode.create2:
        case OpCode.createTTL:
        case OpCode.createContainer:
        case OpCode.createSession:
        case OpCode.delete:
        case OpCode.deleteContainer:
        case OpCode.exists:
        case OpCode.getACL:
        case OpCode.getChildren:
        case OpCode.getAllChildrenNumber:
        case OpCode.getChildren2:
        case OpCode.getData:
        case OpCode.getEphemerals:
        case OpCode.multi:
        case OpCode.multiRead:
        case OpCode.ping:
        case OpCode.reconfig:
        case OpCode.setACL:
        case OpCode.setData:
        case OpCode.setWatches:
        case OpCode.setWatches2:
        case OpCode.sync:
        case OpCode.checkWatches:
        case OpCode.removeWatches:
        case OpCode.addWatch:
        case OpCode.whoAmI:
            return true;
        default:
            return false;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isQuorum,boolean isQuorum(),"[347, 378]","{'A591': [(360, 360)], 'A590': [(369, 370)], 'A598': [(349, 351), (354, 354), (358, 359), (364, 364), (366, 367), (371, 371), (375, 378)], 'A596': [(353, 353)], 'A592': [(357, 357)], 'A625': [(368, 368)], 'A648': [(347, 348), (363, 363), (372, 374)], 'A639': [(361, 361)], 'A616': [(362, 362), (365, 365)], 'A641': [(352, 352)], 'A644': [(355, 355)], 'A626': [(356, 356)]}","{'A591': 0.03125, 'A590': 0.0625, 'A598': 0.4375, 'A596': 0.03125, 'A592': 0.03125, 'A625': 0.03125, 'A648': 0.1875, 'A639': 0.03125, 'A616': 0.0625, 'A641': 0.03125, 'A644': 0.03125, 'A626': 0.03125}",A598,,"    public boolean isQuorum() {
        switch (this.type) {
        case OpCode.exists:
        case OpCode.getACL:
        case OpCode.getChildren:
        case OpCode.getAllChildrenNumber:
        case OpCode.getChildren2:
        case OpCode.getData:
        case OpCode.getEphemerals:
        case OpCode.multiRead:
        case OpCode.whoAmI:
            return false;
        case OpCode.create:
        case OpCode.create2:
        case OpCode.createTTL:
        case OpCode.createContainer:
        case OpCode.error:
        case OpCode.delete:
        case OpCode.deleteContainer:
        case OpCode.setACL:
        case OpCode.setData:
        case OpCode.check:
        case OpCode.multi:
        case OpCode.reconfig:
            return true;
        case OpCode.closeSession:
        case OpCode.createSession:
            return !this.isLocalSession;
        default:
            return false;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,op2String,String op2String(int),"[380, 451]","{'A590': [(381, 381), (450, 451)], 'A592': [(446, 447)], 'A625': [(423, 423), (432, 433)], 'A641': [(382, 422), (424, 429), (434, 445), (448, 449)], 'A636': [(430, 431)], 'A604': [(380, 380)]}","{'A590': 0.041666666666666664, 'A592': 0.027777777777777776, 'A625': 0.041666666666666664, 'A641': 0.8472222222222222, 'A636': 0.027777777777777776, 'A604': 0.013888888888888888}",A641,,"    public static String op2String(int op) {
        switch (op) {
            case OpCode.notification:
                return ""notification"";
            case OpCode.create:
                return ""create"";
            case OpCode.delete:
                return ""delete"";
            case OpCode.exists:
                return ""exists"";
            case OpCode.getData:
                return ""getData"";
            case OpCode.setData:
                return ""setData"";
            case OpCode.getACL:
                return ""getACL"";
            case OpCode.setACL:
                return ""setACL"";
            case OpCode.getChildren:
                return ""getChildren"";
            case OpCode.sync:
                return ""sync"";
            case OpCode.ping:
                return ""ping"";
            case OpCode.getChildren2:
                return ""getChildren2"";
            case OpCode.check:
                return ""check"";
            case OpCode.multi:
                return ""multi"";
            case OpCode.create2:
                return ""create2"";
            case OpCode.reconfig:
                return ""reconfig"";
            case OpCode.checkWatches:
                return ""checkWatches"";
            case OpCode.removeWatches:
                return ""removeWatches"";
            case OpCode.createContainer:
                return ""createContainer"";
            case OpCode.deleteContainer:
                return ""deleteContainer"";
            case OpCode.createTTL:
                return ""createTTL"";
            case OpCode.multiRead:
                return ""multiRead"";
            case OpCode.auth:
                return ""auth"";
            case OpCode.setWatches:
                return ""setWatches"";
            case OpCode.setWatches2:
                return ""setWatches2"";
            case OpCode.addWatch:
                return ""addWatch"";
            case OpCode.sasl:
                return ""sasl"";
            case OpCode.getEphemerals:
                return ""getEphemerals"";
            case OpCode.getAllChildrenNumber:
                return ""getAllChildrenNumber"";
            case OpCode.createSession:
                return ""createSession"";
            case OpCode.closeSession:
                return ""closeSession"";
            case OpCode.error:
                return ""error"";
            case OpCode.whoAmI:
                return ""whoAmI"";
            default:
                return ""unknown "" + op;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,toString,String toString(),"[453, 489]","{'A583': [(457, 460), (465, 465), (467, 468), (471, 480)], 'A590': [(453, 454), (456, 456), (461, 464), (469, 470), (481, 486), (488, 489)], 'A636': [(466, 466)], 'A600': [(455, 455)], 'A597': [(487, 487)]}","{'A583': 0.4594594594594595, 'A590': 0.4594594594594595, 'A636': 0.02702702702702703, 'A600': 0.02702702702702703, 'A597': 0.02702702702702703}",A583,,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""sessionid:0x"").append(Long.toHexString(sessionId))
          .append("" type:"").append(op2String(type))
          .append("" cxid:0x"").append(Long.toHexString(cxid))
          .append("" zxid:0x"").append(Long.toHexString(hdr == null ? -2 : hdr.getZxid()))
          .append("" txntype:"").append(hdr == null ? ""unknown"" : """" + hdr.getType());

        // best effort to print the path assoc with this request
        String path = ""n/a"";
        if (type != OpCode.createSession
            && type != OpCode.setWatches
            && type != OpCode.setWatches2
            && type != OpCode.closeSession
            && request != null) {
            try {
                // make sure we don't mess with request itself
                byte[] bytes = request.readBytes();
                if (bytes != null && bytes.length >= 4) {
                    ByteBuffer buf = ByteBuffer.wrap(bytes);
                    int pathLen = buf.getInt();
                    // sanity check
                    if (pathLen >= 0 && pathLen < 4096 && buf.remaining() >= pathLen) {
                        byte[] b = new byte[pathLen];
                        buf.get(b);
                        path = new String(b, UTF_8);
                    }
                }
            } catch (Exception e) {
                // ignore - can't find the path, will output ""n/a"" instead
            }
        }
        sb.append("" reqpath:"").append(path);

        return sb.toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setException,void setException(KeeperException),"[491, 493]","{'A596': [(491, 493)]}",{'A596': 1.0},A596,,"    public void setException(KeeperException e) {
        this.e = e;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getException,KeeperException getException(),"[495, 497]","{'A596': [(495, 497)]}",{'A596': 1.0},A596,,"    public KeeperException getException() {
        return e;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,logLatency,void logLatency(Summary),"[499, 501]","{'A675': [(499, 501)]}",{'A675': 1.0},A675,,"    public void logLatency(Summary metric) {
        logLatency(metric, Time.currentWallTime());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,logLatency,"void logLatency(Summary,long)","[503, 514]","{'A583': [(503, 503)], 'A675': [(504, 509), (511, 514)], 'A653': [(510, 510)]}","{'A583': 0.08333333333333333, 'A675': 0.8333333333333334, 'A653': 0.08333333333333333}",A675,,"    public void logLatency(Summary metric, long currentTime) {
        if (hdr != null) {
            /* Request header is created by leader. If there is clock drift
             * latency might be negative. Headers use wall time, not
             * CLOCK_MONOTONIC.
             */
            long latency = currentTime - hdr.getTime();
            if (latency >= 0) {
                metric.add(latency);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,logLatency,"void logLatency(SummarySet,String,long)","[516, 527]","{'A675': [(516, 522), (524, 527)], 'A653': [(523, 523)]}","{'A675': 0.9166666666666666, 'A653': 0.08333333333333333}",A675,,"    public void logLatency(SummarySet metric, String key, long currentTime) {
        if (hdr != null) {
            /* Request header is created by leader. If there is clock drift
             * latency might be negative. Headers use wall time, not
             * CLOCK_MONOTONIC.
             */
            long latency = currentTime - hdr.getTime();
            if (latency >= 0) {
                metric.add(key, latency);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,logLatency,"void logLatency(SummarySet,String)","[529, 531]","{'A675': [(529, 531)]}",{'A675': 1.0},A675,,"    public void logLatency(SummarySet metric, String key) {
        logLatency(metric, key, Time.currentWallTime());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getUsersForAudit,String getUsersForAudit(),"[546, 548]","{'A592': [(548, 548)], 'A637': [(546, 547)]}","{'A592': 0.3333333333333333, 'A637': 0.6666666666666666}",A637,,"    public String getUsersForAudit() {
        return AuthUtil.getUsers(authInfo);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,getTxnDigest,TxnDigest getTxnDigest(),"[550, 552]","{'A612': [(550, 552)]}",{'A612': 1.0},A612,,"    public TxnDigest getTxnDigest() {
        return txnDigest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,setTxnDigest,void setTxnDigest(TxnDigest),"[554, 556]","{'A612': [(554, 556)]}",{'A612': 1.0},A612,,"    public void setTxnDigest(TxnDigest txnDigest) {
        this.txnDigest = txnDigest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/Request.java,Request,isFromLearner,boolean isFromLearner(),"[558, 560]","{'A696': [(558, 560)]}",{'A696': 1.0},A696,,"    public boolean isFromLearner() {
        return owner instanceof LearnerHandler;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,main,void main(String[]),"[65, 97]","{'A596': [(65, 69), (71, 72), (75, 75), (77, 77), (90, 90), (94, 95), (97, 97)], 'A591': [(85, 87)], 'A592': [(73, 73), (78, 78), (83, 83), (88, 88), (92, 92)], 'A584': [(74, 74), (79, 79), (84, 84), (89, 89), (93, 93), (96, 96)], 'A600': [(80, 82)], 'A593': [(70, 70), (76, 76), (91, 91)]}","{'A596': 0.3939393939393939, 'A591': 0.09090909090909091, 'A592': 0.15151515151515152, 'A584': 0.18181818181818182, 'A600': 0.09090909090909091, 'A593': 0.09090909090909091}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    public static void main(String[] args) {
        ZooKeeperServerMain main = new ZooKeeperServerMain();
        try {
            main.initializeAndRun(args);
        } catch (IllegalArgumentException e) {
            LOG.error(""Invalid arguments, exiting abnormally"", e);
            LOG.info(USAGE);
            System.err.println(USAGE);
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        } catch (ConfigException e) {
            LOG.error(""Invalid config, exiting abnormally"", e);
            System.err.println(""Invalid config, exiting abnormally"");
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        } catch (DatadirException e) {
            LOG.error(""Unable to access datadir, exiting abnormally"", e);
            System.err.println(""Unable to access datadir, exiting abnormally"");
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.UNABLE_TO_ACCESS_DATADIR.getValue());
        } catch (AdminServerException e) {
            LOG.error(""Unable to start AdminServer, exiting abnormally"", e);
            System.err.println(""Unable to start AdminServer, exiting abnormally"");
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.ERROR_STARTING_ADMIN_SERVER.getValue());
        } catch (Exception e) {
            LOG.error(""Unexpected exception, exiting abnormally"", e);
            ZKAuditProvider.addServerStartFailureAuditLog();
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
        LOG.info(""Exiting normally"");
        ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,initializeAndRun,void initializeAndRun(String[]),"[99, 114]","{'A583': [(99, 99)], 'A596': [(106, 112)], 'A591': [(100, 105)], 'A590': [(113, 114)]}","{'A583': 0.0625, 'A596': 0.4375, 'A591': 0.375, 'A590': 0.125}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    protected void initializeAndRun(String[] args) throws ConfigException, IOException, AdminServerException {
        try {
            ManagedUtil.registerLog4jMBeans();
        } catch (JMException e) {
            LOG.warn(""Unable to register log4j JMX control"", e);
        }

        ServerConfig config = new ServerConfig();
        if (args.length == 1) {
            config.parse(args[0]);
        } else {
            config.parse(args);
        }

        runFromConfig(config);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,runFromConfig,void runFromConfig(ServerConfig),"[122, 211]","{'A583': [(122, 122), (127, 129), (131, 131), (141, 141), (144, 144), (150, 150), (160, 160), (167, 167), (171, 174)], 'A596': [(123, 123), (125, 125), (135, 138), (146, 146), (196, 198), (210, 211)], 'A597': [(124, 124), (139, 139), (147, 149), (151, 151), (183, 188), (199, 202)], 'A616': [(178, 178), (180, 180)], 'A591': [(152, 156)], 'A592': [(179, 179)], 'A584': [(126, 126), (130, 130), (132, 133), (181, 182), (203, 209)], 'A641': [(134, 134)], 'A609': [(140, 140), (142, 143), (145, 145)], 'A630': [(157, 159), (161, 166), (168, 170), (189, 194)], 'A636': [(175, 177)], 'A695': [(195, 195)]}","{'A583': 0.15555555555555556, 'A596': 0.13333333333333333, 'A597': 0.17777777777777778, 'A616': 0.022222222222222223, 'A591': 0.05555555555555555, 'A592': 0.011111111111111112, 'A584': 0.14444444444444443, 'A641': 0.011111111111111112, 'A609': 0.044444444444444446, 'A630': 0.2, 'A636': 0.03333333333333333, 'A695': 0.011111111111111112}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    public void runFromConfig(ServerConfig config) throws IOException, AdminServerException {
        LOG.info(""Starting server"");
        FileTxnSnapLog txnLog = null;
        try {
            try {
                metricsProvider = MetricsProviderBootstrap.startMetricsProvider(
                    config.getMetricsProviderClassName(),
                    config.getMetricsProviderConfiguration());
            } catch (MetricsProviderLifeCycleException error) {
                throw new IOException(""Cannot boot MetricsProvider "" + config.getMetricsProviderClassName(), error);
            }
            ServerMetrics.metricsProviderInitialized(metricsProvider);
            ProviderRegistry.initialize();
            // Note that this thread isn't going to be doing anything else,
            // so rather than spawning another thread, we will just call
            // run() in this thread.
            // create a file logger url from the command line args
            txnLog = new FileTxnSnapLog(config.dataLogDir, config.dataDir);
            JvmPauseMonitor jvmPauseMonitor = null;
            if (config.jvmPauseMonitorToRun) {
                jvmPauseMonitor = new JvmPauseMonitor(config);
            }
            final ZooKeeperServer zkServer = new ZooKeeperServer(jvmPauseMonitor, txnLog, config.tickTime, config.minSessionTimeout, config.maxSessionTimeout, config.listenBacklog, null, config.initialConfig);
            txnLog.setServerStats(zkServer.serverStats());

            // Registers shutdown handler which will be used to know the
            // server error or shutdown state changes.
            final CountDownLatch shutdownLatch = new CountDownLatch(1);
            zkServer.registerServerShutdownHandler(new ZooKeeperServerShutdownHandler(shutdownLatch));

            // Start Admin server
            adminServer = AdminServerFactory.createAdminServer();
            adminServer.setZooKeeperServer(zkServer);
            adminServer.start();

            boolean needStartZKServer = true;
            if (config.getClientPortAddress() != null) {
                cnxnFactory = ServerCnxnFactory.createFactory();
                cnxnFactory.configure(config.getClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), false);
                cnxnFactory.startup(zkServer);
                // zkServer has been started. So we don't need to start it again in secureCnxnFactory.
                needStartZKServer = false;
            }
            if (config.getSecureClientPortAddress() != null) {
                secureCnxnFactory = ServerCnxnFactory.createFactory();
                secureCnxnFactory.configure(config.getSecureClientPortAddress(), config.getMaxClientCnxns(), config.getClientPortListenBacklog(), true);
                secureCnxnFactory.startup(zkServer, needStartZKServer);
            }

            containerManager = new ContainerManager(
                zkServer.getZKDatabase(),
                zkServer.firstProcessor,
                Integer.getInteger(""znode.container.checkIntervalMs"", (int) TimeUnit.MINUTES.toMillis(1)),
                Integer.getInteger(""znode.container.maxPerMinute"", 10000),
                Long.getLong(""znode.container.maxNeverUsedIntervalMs"", 0)
            );
            containerManager.start();
            ZKAuditProvider.addZKStartStopAuditLog();

            serverStarted();

            // Watch status of ZooKeeper server. It will do a graceful shutdown
            // if the server is not running or hits an internal error.
            shutdownLatch.await();

            shutdown();

            if (cnxnFactory != null) {
                cnxnFactory.join();
            }
            if (secureCnxnFactory != null) {
                secureCnxnFactory.join();
            }
            zkServer.shutdown(true);
        } catch (InterruptedException e) {
            // warn, but generally this is ok
            LOG.warn(""Server interrupted"", e);
        } finally {
            if (txnLog != null) {
                txnLog.close();
            }
            if (metricsProvider != null) {
                try {
                    metricsProvider.stop();
                } catch (Throwable error) {
                    LOG.warn(""Error while stopping metrics"", error);
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,shutdown,void shutdown(),"[216, 233]","{'A596': [(216, 216), (233, 233)], 'A597': [(227, 229)], 'A616': [(217, 219)], 'A591': [(226, 226), (230, 232)], 'A630': [(220, 225)]}","{'A596': 0.1111111111111111, 'A597': 0.16666666666666666, 'A616': 0.16666666666666666, 'A591': 0.2222222222222222, 'A630': 0.3333333333333333}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    protected void shutdown() {
        if (containerManager != null) {
            containerManager.stop();
        }
        if (cnxnFactory != null) {
            cnxnFactory.shutdown();
        }
        if (secureCnxnFactory != null) {
            secureCnxnFactory.shutdown();
        }
        try {
            if (adminServer != null) {
                adminServer.shutdown();
            }
        } catch (AdminServerException e) {
            LOG.warn(""Problem stopping AdminServer"", e);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,getCnxnFactory,ServerCnxnFactory getCnxnFactory(),"[236, 238]","{'A597': [(236, 238)]}",{'A597': 1.0},A597,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    ServerCnxnFactory getCnxnFactory() {
        return cnxnFactory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,getSecureCnxnFactory,ServerCnxnFactory getSecureCnxnFactory(),"[241, 243]","{'A753': [(241, 243)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    ServerCnxnFactory getSecureCnxnFactory() {
        return secureCnxnFactory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,getClientPort,int getClientPort(),"[246, 251]","{'A691': [(246, 251)]}",{'A691': 1.0},A691,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    public int getClientPort() {
        if (cnxnFactory != null) {
            return cnxnFactory.getLocalPort();
        }
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,getSecureClientPort,int getSecureClientPort(),"[254, 259]","{'A691': [(254, 259)]}",{'A691': 1.0},A691,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    public int getSecureClientPort() {
        if (secureCnxnFactory != null) {
            return secureCnxnFactory.getLocalPort();
        }
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,close,void close(),"[265, 294]","{'A584': [(265, 294)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    public void close() {
        ServerCnxnFactory primaryCnxnFactory = this.cnxnFactory;
        ServerCnxnFactory secondaryCnxnFactory = this.secureCnxnFactory;
        try {
            if (primaryCnxnFactory == null) {
                // in case of pure TLS we can hook into secureCnxnFactory
                primaryCnxnFactory = secondaryCnxnFactory;
            }
            if (primaryCnxnFactory == null || primaryCnxnFactory.getZooKeeperServer() == null) {
                LOG.info(""Connection factory did not start"");
                return;
            }
            ZooKeeperServerShutdownHandler zkShutdownHandler = primaryCnxnFactory.getZooKeeperServer().getZkShutdownHandler();
            zkShutdownHandler.handle(ZooKeeperServer.State.SHUTDOWN);
            try {
                // ServerCnxnFactory will call the shutdown
                primaryCnxnFactory.join();
            } catch (InterruptedException ex) {
                Thread.currentThread().interrupt();
            }
        } finally {
            // ensure that we are closing the sockets
            if (primaryCnxnFactory != null) {
                primaryCnxnFactory.shutdown();
            }
            if (secondaryCnxnFactory != null) {
                secondaryCnxnFactory.shutdown();
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerMain.java,ZooKeeperServerMain,serverStarted,void serverStarted(),"[296, 297]","{'A584': [(296, 297)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerMainTest.java,"    protected void serverStarted() {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,convertAcls,Long convertAcls(List<ACL>),"[59, 75]","{'A583': [(60, 60), (62, 62)], 'A639': [(59, 59), (61, 61), (63, 75)]}","{'A583': 0.11764705882352941, 'A639': 0.8823529411764706}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public synchronized Long convertAcls(List<ACL> acls) {
        if (acls == null) {
            return OPEN_UNSAFE_ACL_ID;
        }

        // get the value from the map
        Long ret = aclKeyMap.get(acls);
        if (ret == null) {
            ret = incrementIndex();
            longKeyMap.put(ret, acls);
            aclKeyMap.put(acls, ret);
        }

        addUsage(ret);

        return ret;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,convertLong,List<ACL> convertLong(Long),"[83, 96]","{'A583': [(84, 84), (86, 87), (89, 89), (92, 92)], 'A639': [(83, 83), (85, 85), (88, 88), (90, 91), (93, 96)]}","{'A583': 0.35714285714285715, 'A639': 0.6428571428571429}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public synchronized List<ACL> convertLong(Long longVal) {
        if (longVal == null) {
            return null;
        }
        if (longVal == OPEN_UNSAFE_ACL_ID) {
            return ZooDefs.Ids.OPEN_ACL_UNSAFE;
        }
        List<ACL> acls = longKeyMap.get(longVal);
        if (acls == null) {
            LOG.error(""ERROR: ACL not available for long {}"", longVal);
            throw new RuntimeException(""Failed to fetch acls for "" + longVal);
        }
        return acls;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,incrementIndex,long incrementIndex(),"[98, 100]","{'A639': [(98, 100)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    private long incrementIndex() {
        return ++aclIndex;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,deserialize,void deserialize(InputArchive),"[102, 139]","{'A639': [(103, 104), (108, 109), (111, 111), (115, 120), (123, 124), (139, 139)], 'A756': [(102, 102), (105, 107), (121, 122), (125, 138)], 'A605': [(110, 110)], 'A757': [(112, 112), (114, 114)], 'A589': [(113, 113)]}","{'A639': 0.3684210526315789, 'A756': 0.5263157894736842, 'A605': 0.02631578947368421, 'A757': 0.05263157894736842, 'A589': 0.02631578947368421}",A756,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public void deserialize(InputArchive ia) throws IOException {
        clear();
        int i = ia.readInt(""map"");

        LinkedHashMap<Long, List<ACL>> deserializedMap = new LinkedHashMap<>();
        // keep read operations out of synchronization block
        while (i > 0) {
            Long val = ia.readLong(""long"");
            List<ACL> aclList = new ArrayList<>();
            Index j = ia.startVector(""acls"");
            if (j == null) {
                throw new RuntimeException(""Incorrect format of InputArchive when deserialize DataTree - missing acls"");
            }
            while (!j.done()) {
                ACL acl = new ACL();
                acl.deserialize(ia, ""acl"");
                aclList.add(acl);
                j.incr();
            }

            deserializedMap.put(val, aclList);
            i--;
        }

        synchronized (this) {
            for (Map.Entry<Long, List<ACL>> entry : deserializedMap.entrySet()) {
                Long val = entry.getKey();
                List<ACL> aclList = entry.getValue();
                if (aclIndex < val) {
                    aclIndex = val;
                }

                longKeyMap.put(val, aclList);
                aclKeyMap.put(aclList, val);
                referenceCounter.put(val, new AtomicLongWithEquals(0));
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,serialize,void serialize(OutputArchive),"[141, 156]","{'A639': [(148, 156)], 'A756': [(141, 147)]}","{'A639': 0.5625, 'A756': 0.4375}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public void serialize(OutputArchive oa) throws IOException {
        Map<Long, List<ACL>> clonedLongKeyMap;
        synchronized (this) {
            clonedLongKeyMap = new HashMap<>(longKeyMap);
        }
        oa.writeInt(clonedLongKeyMap.size(), ""map"");
        for (Map.Entry<Long, List<ACL>> val : clonedLongKeyMap.entrySet()) {
            oa.writeLong(val.getKey(), ""long"");
            List<ACL> aclList = val.getValue();
            oa.startVector(aclList, ""acls"");
            for (ACL acl : aclList) {
                acl.serialize(oa, ""acl"");
            }
            oa.endVector(aclList, ""acls"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,size,int size(),"[158, 160]","{'A639': [(158, 160)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public int size() {
        return aclKeyMap.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,clear,void clear(),"[162, 166]","{'A639': [(162, 166)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    private void clear() {
        aclKeyMap.clear();
        longKeyMap.clear();
        referenceCounter.clear();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,addUsage,void addUsage(Long),"[168, 184]","{'A583': [(174, 174)], 'A639': [(168, 173), (175, 184)]}","{'A583': 0.058823529411764705, 'A639': 0.9411764705882353}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public synchronized void addUsage(Long acl) {
        if (acl == OPEN_UNSAFE_ACL_ID) {
            return;
        }

        if (!longKeyMap.containsKey(acl)) {
            LOG.info(""Ignoring acl {} as it does not exist in the cache"", acl);
            return;
        }

        AtomicLong count = referenceCounter.get(acl);
        if (count == null) {
            referenceCounter.put(acl, new AtomicLongWithEquals(1));
        } else {
            count.incrementAndGet();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,removeUsage,void removeUsage(Long),"[186, 202]","{'A583': [(192, 192)], 'A639': [(186, 191), (193, 202)]}","{'A583': 0.058823529411764705, 'A639': 0.9411764705882353}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public synchronized void removeUsage(Long acl) {
        if (acl == OPEN_UNSAFE_ACL_ID) {
            return;
        }

        if (!longKeyMap.containsKey(acl)) {
            LOG.info(""Ignoring acl {} as it does not exist in the cache"", acl);
            return;
        }

        long newCount = referenceCounter.get(acl).decrementAndGet();
        if (newCount <= 0) {
            referenceCounter.remove(acl);
            aclKeyMap.remove(longKeyMap.get(acl));
            longKeyMap.remove(acl);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache,purgeUnused,void purgeUnused(),"[204, 215]","{'A639': [(204, 215)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"    public synchronized void purgeUnused() {
        Iterator<Map.Entry<Long, AtomicLongWithEquals>> refCountIter = referenceCounter.entrySet().iterator();
        while (refCountIter.hasNext()) {
            Map.Entry<Long, AtomicLongWithEquals> entry = refCountIter.next();
            if (entry.getValue().get() <= 0) {
                Long acl = entry.getKey();
                aclKeyMap.remove(longKeyMap.get(acl));
                longKeyMap.remove(acl);
                refCountIter.remove();
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache.AtomicLongWithEquals,equals,boolean equals(Object),"[225, 235]","{'A583': [(227, 232)], 'A639': [(225, 226), (233, 235)]}","{'A583': 0.5454545454545454, 'A639': 0.45454545454545453}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"        @Override
        public boolean equals(Object o) {
            if (this == o) {
                return true;
            }
            if (o == null || getClass() != o.getClass()) {
                return false;
            }

            return equals((AtomicLongWithEquals) o);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache.AtomicLongWithEquals,equals,boolean equals(AtomicLongWithEquals),"[237, 239]","{'A639': [(237, 239)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"        public boolean equals(AtomicLongWithEquals that) {
            return get() == that.get();
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ReferenceCountedACLCache.java,ReferenceCountedACLCache.AtomicLongWithEquals,hashCode,int hashCode(),"[241, 244]","{'A639': [(241, 244)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ReferenceCountedACLCacheTest.java,"        @Override
        public int hashCode() {
            return 31 * Long.valueOf(get()).hashCode();
        }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/FourLetterCommands.java,FourLetterCommands,resetWhiteList,void resetWhiteList(),"[161, 164]","{'A583': [(161, 161)], 'A604': [(162, 164)]}","{'A583': 0.25, 'A604': 0.75}",A604,,"    public static synchronized void resetWhiteList() {
        whiteListInitialized = false;
        whiteListedCommands.clear();
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/FourLetterCommands.java,FourLetterCommands,getCommandString,String getCommandString(int),"[169, 171]","{'A604': [(169, 171)]}",{'A604': 1.0},A604,,"    public static String getCommandString(int command) {
        return cmd2String.get(command);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/FourLetterCommands.java,FourLetterCommands,isKnown,boolean isKnown(int),"[179, 181]","{'A604': [(179, 181)]}",{'A604': 1.0},A604,,"    public static boolean isKnown(int command) {
        return cmd2String.containsKey(command);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/FourLetterCommands.java,FourLetterCommands,isEnabled,boolean isEnabled(String),"[194, 226]","{'A583': [(194, 194)], 'A616': [(214, 214)], 'A604': [(195, 213), (215, 226)]}","{'A583': 0.030303030303030304, 'A616': 0.030303030303030304, 'A604': 0.9393939393939394}",A604,,"    public static synchronized boolean isEnabled(String command) {
        if (whiteListInitialized) {
            return whiteListedCommands.contains(command);
        }

        String commands = System.getProperty(ZOOKEEPER_4LW_COMMANDS_WHITELIST);
        if (commands != null) {
            String[] list = commands.split("","");
            for (String cmd : list) {
                if (cmd.trim().equals(""*"")) {
                    for (Map.Entry<Integer, String> entry : cmd2String.entrySet()) {
                        whiteListedCommands.add(entry.getValue());
                    }
                    break;
                }
                if (!cmd.trim().isEmpty()) {
                    whiteListedCommands.add(cmd.trim());
                }
            }
        }

        // It is sad that isro and srvr are used by ZooKeeper itself. Need fix this
        // before deprecating 4lw.
        if (System.getProperty(""readonlymode.enabled"", ""false"").equals(""true"")) {
            whiteListedCommands.add(""isro"");
        }
        // zkServer.sh depends on ""srvr"".
        whiteListedCommands.add(""srvr"");
        whiteListInitialized = true;
        LOG.info(""The list of known four letter word commands is : {}"", Arrays.asList(cmd2String));
        LOG.info(""The list of enabled four letter word commands is : {}"", Arrays.asList(whiteListedCommands));
        return whiteListedCommands.contains(command);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/NopCommand.java,NopCommand,commandRun,void commandRun(),"[37, 40]","{'A604': [(37, 40)]}",{'A604': 1.0},A604,,"    @Override
    public void commandRun() {
        pw.println(msg);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/WatchCommand.java,WatchCommand,commandRun,void commandRun(),"[33, 48]","{'A616': [(33, 34), (36, 48)], 'A630': [(35, 35)]}","{'A616': 0.9375, 'A630': 0.0625}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            DataTree dt = zkServer.getZKDatabase().getDataTree();
            if (len == FourLetterCommands.wchsCmd) {
                dt.dumpWatchesSummary(pw);
            } else if (len == FourLetterCommands.wchpCmd) {
                dt.dumpWatches(pw, true);
            } else {
                dt.dumpWatches(pw, false);
            }
            pw.println();
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/RuokCommand.java,RuokCommand,commandRun,void commandRun(),"[30, 33]","{'A616': [(30, 33)]}",{'A616': 1.0},A616,,"    @Override
    public void commandRun() {
        pw.print(""imok"");
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/AbstractFourLetterCommand.java,AbstractFourLetterCommand,start,void start(),"[50, 52]","{'A616': [(50, 52)]}",{'A616': 1.0},A616,,"    public void start() {
        run();
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/AbstractFourLetterCommand.java,AbstractFourLetterCommand,run,void run(),"[54, 62]","{'A616': [(54, 62)]}",{'A616': 1.0},A616,,"    public void run() {
        try {
            commandRun();
        } catch (IOException ie) {
            LOG.error(""Error in running command "", ie);
        } finally {
            serverCnxn.cleanupWriterSocket(pw);
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/AbstractFourLetterCommand.java,AbstractFourLetterCommand,setZkServer,void setZkServer(ZooKeeperServer),"[64, 66]","{'A616': [(64, 66)]}",{'A616': 1.0},A616,,"    public void setZkServer(ZooKeeperServer zkServer) {
        this.zkServer = zkServer;
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/AbstractFourLetterCommand.java,AbstractFourLetterCommand,isZKServerRunning,boolean isZKServerRunning(),"[71, 73]","{'A630': [(71, 73)]}",{'A630': 1.0},A630,,"    boolean isZKServerRunning() {
        return zkServer != null && zkServer.isRunning();
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/AbstractFourLetterCommand.java,AbstractFourLetterCommand,setFactory,void setFactory(ServerCnxnFactory),"[75, 77]","{'A616': [(75, 77)]}",{'A616': 1.0},A616,,"    public void setFactory(ServerCnxnFactory factory) {
        this.factory = factory;
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/ConfCommand.java,ConfCommand,commandRun,void commandRun(),"[30, 37]","{'A616': [(30, 31), (33, 37)], 'A630': [(32, 32)]}","{'A616': 0.875, 'A630': 0.125}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            zkServer.dumpConf(pw);
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/DumpCommand.java,DumpCommand,commandRun,void commandRun(),"[31, 46]","{'A583': [(43, 43)], 'A616': [(31, 32), (34, 42), (44, 46)], 'A630': [(33, 33)]}","{'A583': 0.0625, 'A616': 0.875, 'A630': 0.0625}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            pw.println(""SessionTracker dump:"");
            zkServer.getSessionTracker().dumpSessions(pw);
            pw.println(""ephemeral nodes dump:"");
            zkServer.dumpEphemerals(pw);
            pw.println(""Connections dump:"");
            //dumpConnections connection is implemented only in NIOServerCnxnFactory
            if (factory instanceof NIOServerCnxnFactory) {
                ((NIOServerCnxnFactory) factory).dumpConnections(pw);
            }
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/DirsCommand.java,DirsCommand,commandRun,void commandRun(),"[31, 39]","{'A616': [(31, 32), (34, 39)], 'A630': [(33, 33)]}","{'A616': 0.8888888888888888, 'A630': 0.1111111111111111}",A616,,"    @Override
    public void commandRun() throws IOException {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
            return;
        }
        pw.println(""datadir_size: "" + zkServer.getDataDirSize());
        pw.println(""logdir_size: "" + zkServer.getLogDirSize());
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/TraceMaskCommand.java,TraceMaskCommand,commandRun,void commandRun(),"[31, 35]","{'A616': [(31, 35)]}",{'A616': 1.0},A616,,"    @Override
    public void commandRun() {
        long traceMask = ZooTrace.getTextTraceLevel();
        pw.print(traceMask);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/CnxnStatResetCommand.java,CnxnStatResetCommand,commandRun,void commandRun(),"[30, 38]","{'A616': [(30, 31), (33, 38)], 'A630': [(32, 32)]}","{'A616': 0.8888888888888888, 'A630': 0.1111111111111111}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            factory.resetAllConnectionStats();
            pw.println(""Connection stats reset."");
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/IsroCommand.java,IsroCommand,commandRun,void commandRun(),"[31, 40]","{'A616': [(31, 32), (34, 40)], 'A630': [(33, 33)]}","{'A616': 0.9, 'A630': 0.1}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.print(""null"");
        } else if (zkServer instanceof ReadOnlyZooKeeperServer) {
            pw.print(""ro"");
        } else {
            pw.print(""rw"");
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/DigestCommand.java,DigestCommand,commandRun,void commandRun(),"[35, 45]","{'A583': [(40, 40), (42, 42)], 'A612': [(35, 39), (41, 41), (43, 45)]}","{'A583': 0.18181818181818182, 'A612': 0.8181818181818182}",A612,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.print(ZK_NOT_SERVING);
        } else {
            List<ZxidDigest> digestLog = zkServer.getZKDatabase().getDataTree().getDigestLog();
            for (ZxidDigest zd : digestLog) {
                pw.println(Long.toHexString(zd.getZxid()) + "": "" + zd.getDigest());
            }
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/MonitorCommand.java,MonitorCommand,commandRun,void commandRun(),"[31, 42]","{'A583': [(41, 41)], 'A616': [(31, 32), (34, 37), (42, 42)], 'A584': [(38, 40)], 'A630': [(33, 33)]}","{'A583': 0.08333333333333333, 'A616': 0.5833333333333334, 'A584': 0.25, 'A630': 0.08333333333333333}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
            return;
        }

        // non metrics
        zkServer.dumpMonitorValues(this::print);

        ServerMetrics.getMetrics().getMetricsProvider().dump(this::print);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/MonitorCommand.java,MonitorCommand,print,"void print(String,Object)","[44, 56]","{'A583': [(47, 47)], 'A584': [(44, 46), (48, 55)], 'A641': [(56, 56)]}","{'A583': 0.07692307692307693, 'A584': 0.8461538461538461, 'A641': 0.07692307692307693}",A584,,"    private void print(String key, Object value) {
        if (value == null) {
            output(key, null);
        } else if (value instanceof Long || value instanceof Integer) {
            // format as integers
            output(key, value + """");
        } else if (value instanceof Number) {
            // format as floating point
            output(key, ((Number) value).doubleValue() + """");
        } else {
            output(key, value.toString());
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/MonitorCommand.java,MonitorCommand,output,"void output(String,String)","[58, 63]","{'A616': [(59, 63)], 'A584': [(58, 58)]}","{'A616': 0.8333333333333334, 'A584': 0.16666666666666666}",A616,,"    private void output(String key, String value) {
        pw.print(""zk_"");
        pw.print(key);
        pw.print(""\t"");
        pw.println(value);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/StatResetCommand.java,StatResetCommand,commandRun,void commandRun(),"[32, 44]","{'A583': [(40, 40)], 'A616': [(32, 33), (35, 36), (42, 44)], 'A628': [(37, 39), (41, 41)], 'A630': [(34, 34)]}","{'A583': 0.07692307692307693, 'A616': 0.5384615384615384, 'A628': 0.3076923076923077, 'A630': 0.07692307692307693}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            ServerStats serverStats = zkServer.serverStats();
            serverStats.reset();
            if (serverStats.getServerState().equals(""leader"")) {
                ((LeaderZooKeeperServer) zkServer).getLeader().getProposalStats().reset();
            }
            pw.println(""Server stats reset."");
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/CommandExecutor.java,CommandExecutor,execute,"boolean execute(ServerCnxn,PrintWriter,int,ZooKeeperServer,ServerCnxnFactory)","[31, 47]","{'A583': [(31, 37)], 'A616': [(38, 47)]}","{'A583': 0.4117647058823529, 'A616': 0.5882352941176471}",A616,,"    public boolean execute(
        ServerCnxn serverCnxn,
        PrintWriter pwriter,
        final int commandCode,
        ZooKeeperServer zkServer,
        ServerCnxnFactory factory) {
        AbstractFourLetterCommand command = getCommand(serverCnxn, pwriter, commandCode);

        if (command == null) {
            return false;
        }

        command.setZkServer(zkServer);
        command.setFactory(factory);
        command.start();
        return true;
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/CommandExecutor.java,CommandExecutor,getCommand,"AbstractFourLetterCommand getCommand(ServerCnxn,PrintWriter,int)","[49, 87]","{'A583': [(49, 52), (70, 70), (75, 76)], 'A616': [(53, 69), (71, 74), (77, 81), (84, 84), (86, 87)], 'A612': [(82, 83), (85, 85)]}","{'A583': 0.1794871794871795, 'A616': 0.7435897435897436, 'A612': 0.07692307692307693}",A616,,"    private AbstractFourLetterCommand getCommand(
        ServerCnxn serverCnxn,
        PrintWriter pwriter,
        final int commandCode) {
        AbstractFourLetterCommand command = null;
        if (commandCode == FourLetterCommands.ruokCmd) {
            command = new RuokCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.getTraceMaskCmd) {
            command = new TraceMaskCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.enviCmd) {
            command = new EnvCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.confCmd) {
            command = new ConfCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.srstCmd) {
            command = new StatResetCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.crstCmd) {
            command = new CnxnStatResetCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.dirsCmd) {
            command = new DirsCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.dumpCmd) {
            command = new DumpCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.statCmd || commandCode == FourLetterCommands.srvrCmd) {
            command = new StatCommand(pwriter, serverCnxn, commandCode);
        } else if (commandCode == FourLetterCommands.consCmd) {
            command = new ConsCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.wchpCmd
                   || commandCode == FourLetterCommands.wchcCmd
                   || commandCode == FourLetterCommands.wchsCmd) {
            command = new WatchCommand(pwriter, serverCnxn, commandCode);
        } else if (commandCode == FourLetterCommands.mntrCmd) {
            command = new MonitorCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.isroCmd) {
            command = new IsroCommand(pwriter, serverCnxn);
        } else if (commandCode == FourLetterCommands.hashCmd) {
            command = new DigestCommand(pwriter, serverCnxn);
        }

        return command;
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/StatCommand.java,StatCommand,commandRun,void commandRun(),"[41, 70]","{'A583': [(54, 54), (65, 65)], 'A616': [(41, 42), (44, 53), (55, 59), (62, 63), (69, 70)], 'A628': [(60, 61), (64, 64), (67, 68)], 'A630': [(43, 43)], 'A613': [(66, 66)]}","{'A583': 0.06666666666666667, 'A616': 0.7, 'A628': 0.16666666666666666, 'A630': 0.03333333333333333, 'A613': 0.03333333333333333}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            pw.print(""Zookeeper version: "");
            pw.println(Version.getFullVersion());
            if (zkServer instanceof ReadOnlyZooKeeperServer) {
                pw.println(""READ-ONLY mode; serving only read-only clients"");
            }
            if (len == FourLetterCommands.statCmd) {
                LOG.info(""Stat command output"");
                pw.println(""Clients:"");
                for (ServerCnxn c : factory.getConnections()) {
                    c.dumpConnectionInfo(pw, true);
                    pw.println();
                }
                pw.println();
            }
            ServerStats serverStats = zkServer.serverStats();
            pw.print(serverStats.toString());
            pw.print(""Node count: "");
            pw.println(zkServer.getZKDatabase().getNodeCount());
            if (serverStats.getServerState().equals(""leader"")) {
                Leader leader = ((LeaderZooKeeperServer) zkServer).getLeader();
                BufferStats proposalStats = leader.getProposalStats();
                pw.printf(""Proposal sizes last/min/max: %s%n"", proposalStats.toString());
            }
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/SetTraceMaskCommand.java,SetTraceMaskCommand,commandRun,void commandRun(),"[32, 35]","{'A616': [(32, 35)]}",{'A616': 1.0},A616,,"    @Override
    public void commandRun() {
        pw.print(trace);
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/ConsCommand.java,ConsCommand,commandRun,void commandRun(),"[30, 41]","{'A616': [(30, 31), (33, 41)], 'A630': [(32, 32)]}","{'A616': 0.9166666666666666, 'A630': 0.08333333333333333}",A616,,"    @Override
    public void commandRun() {
        if (!isZKServerRunning()) {
            pw.println(ZK_NOT_SERVING);
        } else {
            for (ServerCnxn c : factory.getConnections()) {
                c.dumpConnectionInfo(pw, false);
                pw.println();
            }
            pw.println();
        }
    }
"
org.apache.zookeeper.server.command,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/command/EnvCommand.java,EnvCommand,commandRun,void commandRun(),"[32, 42]","{'A616': [(32, 42)]}",{'A616': 1.0},A616,,"    @Override
    public void commandRun() {
        List<Environment.Entry> env = Environment.list();

        pw.println(""Environment:"");
        for (Environment.Entry e : env) {
            pw.print(e.getKey());
            pw.print(""="");
            pw.println(e.getValue());
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java,ResponseCache,getCacheSize,int getCacheSize(),"[53, 55]","{'A647': [(55, 55)], 'A604': [(53, 54)]}","{'A647': 0.3333333333333333, 'A604': 0.6666666666666666}",A604,,"    public int getCacheSize() {
        return cacheSize;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java,ResponseCache,put,"void put(String,byte[],Stat)","[57, 59]","{'A647': [(57, 57), (59, 59)], 'A758': [(58, 58)]}","{'A647': 0.6666666666666666, 'A758': 0.3333333333333333}",A647,,"    public void put(String path, byte[] data, Stat stat) {
        cache.put(path, new Entry(stat, data));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java,ResponseCache,get,"byte[] get(String,Stat)","[61, 73]","{'A647': [(61, 73)]}",{'A647': 1.0},A647,,"    public byte[] get(String key, Stat stat) {
        Entry entry = cache.get(key);
        if (entry == null) {
            return null;
        }
        if (!stat.equals(entry.stat)) {
            // The node has been modified, invalidate cache.
            cache.remove(key);
            return null;
        } else {
            return entry.data;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java,ResponseCache,isEnabled,boolean isEnabled(),"[75, 77]","{'A647': [(77, 77)], 'A604': [(75, 76)]}","{'A647': 0.3333333333333333, 'A604': 0.6666666666666666}",A604,,"    public boolean isEnabled() {
        return cacheSize > 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ResponseCache.java,ResponseCache.LRUCache,removeEldestEntry,"boolean removeEldestEntry(Map.Entry<K, V>)","[88, 90]","{'A647': [(88, 90)]}",{'A647': 1.0},A647,,"        protected boolean removeEldestEntry(Map.Entry<K, V> eldest) {
            return size() >= cacheSize;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getClientPort,int getClientPort(),"[109, 111]","{'A591': [(109, 111)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public int getClientPort() {
        return clientPort;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getDataDir,String getDataDir(),"[118, 120]","{'A591': [(118, 120)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public String getDataDir() {
        return dataDir;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getDataLogDir,String getDataLogDir(),"[127, 129]","{'A591': [(127, 129)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public String getDataLogDir() {
        return dataLogDir;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getTickTime,int getTickTime(),"[136, 138]","{'A591': [(136, 138)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public int getTickTime() {
        return tickTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[145, 147]","{'A591': [(145, 147)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public int getMaxClientCnxnsPerHost() {
        return maxClientCnxnsPerHost;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getMinSessionTimeout,int getMinSessionTimeout(),"[154, 156]","{'A591': [(154, 156)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public int getMinSessionTimeout() {
        return minSessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getMaxSessionTimeout,int getMaxSessionTimeout(),"[163, 165]","{'A591': [(163, 165)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public int getMaxSessionTimeout() {
        return maxSessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getServerId,long getServerId(),"[172, 174]","{'A591': [(172, 174)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public long getServerId() {
        return serverId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,getClientPortListenBacklog,int getClientPortListenBacklog(),"[179, 181]","{'A689': [(179, 181)]}",{'A689': 1.0},A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public int getClientPortListenBacklog() {
        return clientPortListenBacklog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerConf.java,ZooKeeperServerConf,toMap,"Map<String, Object> toMap()","[189, 201]","{'A591': [(189, 189), (191, 198), (200, 201)], 'A689': [(199, 199)], 'A605': [(190, 190)]}","{'A591': 0.8461538461538461, 'A689': 0.07692307692307693, 'A605': 0.07692307692307693}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerConfTest.java,"    public Map<String, Object> toMap() {
        Map<String, Object> conf = new LinkedHashMap<>();
        conf.put(KEY_CLIENT_PORT, clientPort);
        conf.put(KEY_DATA_DIR, dataDir);
        conf.put(KEY_DATA_LOG_DIR, dataLogDir);
        conf.put(KEY_TICK_TIME, tickTime);
        conf.put(KEY_MAX_CLIENT_CNXNS, maxClientCnxnsPerHost);
        conf.put(KEY_MIN_SESSION_TIMEOUT, minSessionTimeout);
        conf.put(KEY_MAX_SESSION_TIMEOUT, maxSessionTimeout);
        conf.put(KEY_SERVER_ID, serverId);
        conf.put(KEY_CLIENT_PORT_LISTEN_BACKLOG, clientPortListenBacklog);
        return conf;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralTypeEmulate353.java,EphemeralTypeEmulate353,get,EphemeralTypeEmulate353 get(long),"[51, 59]","{'A636': [(52, 59)], 'A613': [(51, 51)]}","{'A636': 0.8888888888888888, 'A613': 0.1111111111111111}",A636,,"    public static EphemeralTypeEmulate353 get(long ephemeralOwner) {
        if (ephemeralOwner == CONTAINER_EPHEMERAL_OWNER) {
            return CONTAINER;
        }
        if (ephemeralOwner < 0) {
            return TTL;
        }
        return (ephemeralOwner == 0) ? VOID : NORMAL;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/EphemeralTypeEmulate353.java,EphemeralTypeEmulate353,ttlToEphemeralOwner,long ttlToEphemeralOwner(long),"[61, 66]","{'A636': [(61, 66)]}",{'A636': 1.0},A636,,"    public static long ttlToEphemeralOwner(long ttl) {
        if ((ttl > MAX_TTL) || (ttl <= 0)) {
            throw new IllegalArgumentException(""ttl must be positive and cannot be larger than: "" + MAX_TTL);
        }
        return TTL_MASK | ttl;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService.WorkRequest,cleanup,void cleanup(),"[88, 89]","{'A591': [(88, 89)]}",{'A591': 1.0},A591,,"        public void cleanup() {
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService,schedule,void schedule(WorkRequest),"[99, 101]","{'A591': [(99, 101)]}",{'A591': 1.0},A591,,"    public void schedule(WorkRequest workRequest) {
        schedule(workRequest, 0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService,schedule,"void schedule(WorkRequest,long)","[109, 135]","{'A583': [(115, 115)], 'A591': [(109, 114), (116, 130), (134, 135)], 'A593': [(131, 132)], 'A612': [(133, 133)]}","{'A583': 0.037037037037037035, 'A591': 0.8518518518518519, 'A593': 0.07407407407407407, 'A612': 0.037037037037037035}",A591,,"    public void schedule(WorkRequest workRequest, long id) {
        if (stopped) {
            workRequest.cleanup();
            return;
        }

        ScheduledWorkRequest scheduledWorkRequest = new ScheduledWorkRequest(workRequest);

        // If we have a worker thread pool, use that; otherwise, do the work
        // directly.
        int size = workers.size();
        if (size > 0) {
            try {
                // make sure to map negative ids as well to [0, size-1]
                int workerNum = ((int) (id % size) + size) % size;
                ExecutorService worker = workers.get(workerNum);
                worker.execute(scheduledWorkRequest);
            } catch (RejectedExecutionException e) {
                LOG.warn(""ExecutorService rejected execution"", e);
                workRequest.cleanup();
            }
        } else {
            // When there is no worker thread pool, do the work directly
            // and wait for its completion
            scheduledWorkRequest.run();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService.ScheduledWorkRequest,run,void run(),"[145, 158]","{'A591': [(145, 158)]}",{'A591': 1.0},A591,,"        @Override
        public void run() {
            try {
                // Check if stopped while request was on queue
                if (stopped) {
                    workRequest.cleanup();
                    return;
                }
                workRequest.doWork();
            } catch (Exception e) {
                LOG.warn(""Unexpected exception"", e);
                workRequest.cleanup();
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService.DaemonThreadFactory,newThread,Thread newThread(Runnable),"[185, 194]","{'A583': [(186, 187), (189, 190), (192, 192)], 'A591': [(185, 185), (188, 188), (191, 191), (193, 194)]}","{'A583': 0.5, 'A591': 0.5}",A583,,"        public Thread newThread(Runnable r) {
            Thread t = new Thread(group, r, namePrefix + threadNumber.getAndIncrement(), 0);
            if (!t.isDaemon()) {
                t.setDaemon(true);
            }
            if (t.getPriority() != Thread.NORM_PRIORITY) {
                t.setPriority(Thread.NORM_PRIORITY);
            }
            return t;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService,start,void start(),"[198, 209]","{'A583': [(201, 202), (205, 205)], 'A591': [(198, 200), (203, 204), (206, 209)]}","{'A583': 0.25, 'A591': 0.75}",A591,,"    public void start() {
        if (numWorkerThreads > 0) {
            if (threadsAreAssignable) {
                for (int i = 1; i <= numWorkerThreads; ++i) {
                    workers.add(Executors.newFixedThreadPool(1, new DaemonThreadFactory(threadNamePrefix, i)));
                }
            } else {
                workers.add(Executors.newFixedThreadPool(numWorkerThreads, new DaemonThreadFactory(threadNamePrefix)));
            }
        }
        stopped = false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService,stop,void stop(),"[211, 218]","{'A583': [(215, 215)], 'A591': [(211, 214), (216, 218)]}","{'A583': 0.125, 'A591': 0.875}",A591,,"    public void stop() {
        stopped = true;

        // Signal for graceful shutdown
        for (ExecutorService worker : workers) {
            worker.shutdown();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/WorkerService.java,WorkerService,join,void join(long),"[220, 239]","{'A583': [(224, 224), (228, 228)], 'A591': [(220, 221), (223, 223), (225, 225), (227, 227), (229, 239)], 'A593': [(222, 222), (226, 226)]}","{'A583': 0.1, 'A591': 0.8, 'A593': 0.1}",A591,,"    public void join(long shutdownTimeoutMS) {
        // Give the worker threads time to finish executing
        long now = Time.currentElapsedTime();
        long endTime = now + shutdownTimeoutMS;
        for (ExecutorService worker : workers) {
            boolean terminated = false;
            while ((now = Time.currentElapsedTime()) <= endTime) {
                try {
                    terminated = worker.awaitTermination(endTime - now, TimeUnit.MILLISECONDS);
                    break;
                } catch (InterruptedException e) {
                    // ignore
                }
            }
            if (!terminated) {
                // If we've timed out, do a hard shutdown
                worker.shutdownNow();
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,start,void start(),"[94, 110]","{'A591': [(94, 99), (101, 106), (108, 110)], 'A588': [(100, 100), (107, 107)]}","{'A591': 0.8823529411764706, 'A588': 0.11764705882352941}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public void start() {
        if (PurgeTaskStatus.STARTED == purgeTaskStatus) {
            LOG.warn(""Purge task is already running."");
            return;
        }
        // Don't schedule the purge task with zero or negative purge interval.
        if (purgeIntervalInMs <= 0) {
            LOG.info(""Purge task is not scheduled."");
            return;
        }

        timer = new Timer(""PurgeTask"", true);
        TimerTask task = new PurgeTask(dataLogDir, snapDir, snapRetainCount);
        timer.scheduleAtFixedRate(task, 0, purgeIntervalInMs);

        purgeTaskStatus = PurgeTaskStatus.STARTED;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,shutdown,void shutdown(),"[115, 123]","{'A591': [(115, 123)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public void shutdown() {
        if (PurgeTaskStatus.STARTED == purgeTaskStatus) {
            LOG.info(""Shutting down purge task."");
            timer.cancel();
            purgeTaskStatus = PurgeTaskStatus.COMPLETED;
        } else {
            LOG.warn(""Purge task not started. Ignoring shutdown!"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager.PurgeTask,run,void run(),"[137, 146]","{'A591': [(137, 142), (144, 146)], 'A611': [(143, 143)]}","{'A591': 0.9, 'A611': 0.1}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"        @Override
        public void run() {
            LOG.info(""Purge task started."");
            try {
                PurgeTxnLog.purge(logsDir, snapsDir, snapRetainCount);
            } catch (Exception e) {
                LOG.error(""Error occurred while purging."", e);
            }
            LOG.info(""Purge task completed."");
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,getPurgeTaskStatus,PurgeTaskStatus getPurgeTaskStatus(),"[155, 157]","{'A591': [(155, 157)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public PurgeTaskStatus getPurgeTaskStatus() {
        return purgeTaskStatus;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,getSnapDir,File getSnapDir(),"[164, 166]","{'A591': [(164, 166)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public File getSnapDir() {
        return snapDir;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,getDataLogDir,File getDataLogDir(),"[173, 175]","{'A591': [(173, 175)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public File getDataLogDir() {
        return dataLogDir;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,getPurgeIntervalInMs,int getPurgeIntervalInMs(),"[182, 184]","{'A591': [(184, 184)], 'A588': [(182, 183)]}","{'A591': 0.3333333333333333, 'A588': 0.6666666666666666}",A588,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public int getPurgeIntervalInMs() {
        return purgeIntervalInMs;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DatadirCleanupManager.java,DatadirCleanupManager,getSnapRetainCount,int getSnapRetainCount(),"[191, 193]","{'A591': [(191, 193)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DatadirCleanupManagerTest.java,"    public int getSnapRetainCount() {
        return snapRetainCount;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getClientPort,String getClientPort(),"[43, 45]","{'A590': [(43, 43), (45, 45)], 'A616': [(44, 44)]}","{'A590': 0.6666666666666666, 'A616': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public String getClientPort() {
        return Integer.toString(zks.getClientPort());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getName,String getName(),"[47, 49]","{'A591': [(48, 48)], 'A590': [(47, 47), (49, 49)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public String getName() {
        return name;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,isHidden,boolean isHidden(),"[51, 53]","{'A590': [(51, 53)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getStartTime,String getStartTime(),"[55, 57]","{'A590': [(55, 57)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public String getStartTime() {
        return startTime.toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getVersion,String getVersion(),"[59, 61]","{'A590': [(59, 61)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public String getVersion() {
        return Version.getFullVersion();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getAvgRequestLatency,double getAvgRequestLatency(),"[63, 65]","{'A591': [(64, 64)], 'A590': [(65, 65)], 'A641': [(63, 63)]}","{'A591': 0.3333333333333333, 'A590': 0.3333333333333333, 'A641': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public double getAvgRequestLatency() {
        return zks.serverStats().getAvgLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxRequestLatency,long getMaxRequestLatency(),"[67, 69]","{'A591': [(68, 68)], 'A590': [(67, 67), (69, 69)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getMaxRequestLatency() {
        return zks.serverStats().getMaxLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMinRequestLatency,long getMinRequestLatency(),"[71, 73]","{'A591': [(72, 72)], 'A590': [(71, 71), (73, 73)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getMinRequestLatency() {
        return zks.serverStats().getMinLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getOutstandingRequests,long getOutstandingRequests(),"[75, 77]","{'A591': [(76, 77)], 'A590': [(75, 75)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getOutstandingRequests() {
        return zks.serverStats().getOutstandingRequests();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getTickTime,int getTickTime(),"[79, 81]","{'A591': [(79, 80)], 'A590': [(81, 81)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getTickTime() {
        return zks.getTickTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setTickTime,void setTickTime(int),"[83, 85]","{'A591': [(83, 85)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setTickTime(int tickTime) {
        zks.setTickTime(tickTime);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[87, 89]","{'A596': [(87, 87), (89, 89)], 'A630': [(88, 88)]}","{'A596': 0.6666666666666666, 'A630': 0.3333333333333333}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getMaxClientCnxnsPerHost() {
        return zks.getMaxClientCnxnsPerHost();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setMaxClientCnxnsPerHost,void setMaxClientCnxnsPerHost(int),"[91, 98]","{'A596': [(91, 91), (98, 98)], 'A630': [(92, 97)]}","{'A596': 0.25, 'A630': 0.75}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setMaxClientCnxnsPerHost(int max) {
        if (zks.serverCnxnFactory != null) {
            zks.serverCnxnFactory.setMaxClientCnxnsPerHost(max);
        }
        if (zks.secureServerCnxnFactory != null) {
            zks.secureServerCnxnFactory.setMaxClientCnxnsPerHost(max);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMinSessionTimeout,int getMinSessionTimeout(),"[100, 102]","{'A596': [(100, 102)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getMinSessionTimeout() {
        return zks.getMinSessionTimeout();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setMinSessionTimeout,void setMinSessionTimeout(int),"[104, 106]","{'A596': [(104, 106)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setMinSessionTimeout(int min) {
        zks.setMinSessionTimeout(min);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxSessionTimeout,int getMaxSessionTimeout(),"[108, 110]","{'A596': [(108, 110)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getMaxSessionTimeout() {
        return zks.getMaxSessionTimeout();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setMaxSessionTimeout,void setMaxSessionTimeout(int),"[112, 114]","{'A596': [(112, 114)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setMaxSessionTimeout(int max) {
        zks.setMaxSessionTimeout(max);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getDataDirSize,long getDataDirSize(),"[116, 118]","{'A616': [(116, 118)]}",{'A616': 1.0},A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getDataDirSize() {
        return zks.getDataDirSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getLogDirSize,long getLogDirSize(),"[120, 122]","{'A616': [(120, 122)]}",{'A616': 1.0},A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getLogDirSize() {
        return zks.getLogDirSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getPacketsReceived,long getPacketsReceived(),"[124, 126]","{'A591': [(125, 125)], 'A590': [(124, 124), (126, 126)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getPacketsReceived() {
        return zks.serverStats().getPacketsReceived();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getPacketsSent,long getPacketsSent(),"[128, 130]","{'A591': [(129, 129)], 'A590': [(128, 128), (130, 130)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getPacketsSent() {
        return zks.serverStats().getPacketsSent();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getFsyncThresholdExceedCount,long getFsyncThresholdExceedCount(),"[132, 134]","{'A609': [(132, 134)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getFsyncThresholdExceedCount() {
        return zks.serverStats().getFsyncThresholdExceedCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getAuthFailedCount,long getAuthFailedCount(),"[136, 138]","{'A753': [(136, 138)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getAuthFailedCount() {
        return zks.serverStats().getAuthFailedCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getNonMTLSRemoteConnCount,long getNonMTLSRemoteConnCount(),"[140, 142]","{'A753': [(140, 142)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getNonMTLSRemoteConnCount() {
        return zks.serverStats().getNonMTLSRemoteConnCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getNonMTLSLocalConnCount,long getNonMTLSLocalConnCount(),"[144, 146]","{'A753': [(144, 146)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getNonMTLSLocalConnCount() {
        return zks.serverStats().getNonMTLSLocalConnCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,resetLatency,void resetLatency(),"[148, 150]","{'A591': [(149, 149)], 'A590': [(148, 148), (150, 150)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void resetLatency() {
        zks.serverStats().resetLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,resetMaxLatency,void resetMaxLatency(),"[152, 154]","{'A591': [(153, 153)], 'A590': [(152, 152), (154, 154)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void resetMaxLatency() {
        zks.serverStats().resetMaxLatency();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,resetFsyncThresholdExceedCount,void resetFsyncThresholdExceedCount(),"[156, 158]","{'A609': [(156, 158)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void resetFsyncThresholdExceedCount() {
        zks.serverStats().resetFsyncThresholdExceedCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,resetAuthFailedCount,void resetAuthFailedCount(),"[160, 162]","{'A753': [(160, 162)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void resetAuthFailedCount() {
        zks.serverStats().resetAuthFailedCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,resetNonMTLSConnCount,void resetNonMTLSConnCount(),"[164, 167]","{'A753': [(164, 167)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void resetNonMTLSConnCount() {
        zks.serverStats().resetNonMTLSRemoteConnCount();
        zks.serverStats().resetNonMTLSLocalConnCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,resetStatistics,void resetStatistics(),"[169, 177]","{'A591': [(170, 172)], 'A590': [(169, 169)], 'A596': [(177, 177)], 'A609': [(173, 173)], 'A753': [(174, 176)]}","{'A591': 0.3333333333333333, 'A590': 0.1111111111111111, 'A596': 0.1111111111111111, 'A609': 0.1111111111111111, 'A753': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void resetStatistics() {
        ServerStats serverStats = zks.serverStats();
        serverStats.resetRequestCounters();
        serverStats.resetLatency();
        serverStats.resetFsyncThresholdExceedCount();
        serverStats.resetAuthFailedCount();
        serverStats.resetNonMTLSRemoteConnCount();
        serverStats.resetNonMTLSLocalConnCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getNumAliveConnections,long getNumAliveConnections(),"[179, 181]","{'A639': [(179, 181)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public long getNumAliveConnections() {
        return zks.getNumAliveConnections();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getSecureClientPort,String getSecureClientPort(),"[183, 189]","{'A616': [(183, 189)]}",{'A616': 1.0},A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public String getSecureClientPort() {
        if (zks.secureServerCnxnFactory != null) {
            return Integer.toString(zks.secureServerCnxnFactory.getLocalPort());
        }
        return """";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getSecureClientAddress,String getSecureClientAddress(),"[191, 199]","{'A583': [(194, 196)], 'A616': [(191, 193), (197, 199)]}","{'A583': 0.3333333333333333, 'A616': 0.6666666666666666}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public String getSecureClientAddress() {
        if (zks.secureServerCnxnFactory != null) {
            return String.format(""%s:%d"",
                                 zks.secureServerCnxnFactory.getLocalAddress().getHostString(),
                                 zks.secureServerCnxnFactory.getLocalPort());
        }
        return """";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getTxnLogElapsedSyncTime,long getTxnLogElapsedSyncTime(),"[201, 204]","{'A611': [(201, 204)]}",{'A611': 1.0},A611,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public long getTxnLogElapsedSyncTime() {
        return zks.getTxnLogElapsedSyncTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getJuteMaxBufferSize,int getJuteMaxBufferSize(),"[206, 209]","{'A628': [(206, 209)]}",{'A628': 1.0},A628,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public int getJuteMaxBufferSize() {
        return BinaryInputArchive.maxBuffer;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getLastClientResponseSize,int getLastClientResponseSize(),"[211, 214]","{'A613': [(211, 214)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public int getLastClientResponseSize() {
        return zks.serverStats().getClientResponseStats().getLastBufferSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMinClientResponseSize,int getMinClientResponseSize(),"[216, 219]","{'A613': [(216, 219)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public int getMinClientResponseSize() {
        return zks.serverStats().getClientResponseStats().getMinBufferSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxClientResponseSize,int getMaxClientResponseSize(),"[221, 224]","{'A613': [(221, 224)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public int getMaxClientResponseSize() {
        return zks.serverStats().getClientResponseStats().getMaxBufferSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getResponseCachingEnabled,boolean getResponseCachingEnabled(),"[226, 229]","{'A647': [(226, 229)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public boolean getResponseCachingEnabled() {
        return zks.isResponseCachingEnabled();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setResponseCachingEnabled,void setResponseCachingEnabled(boolean),"[231, 234]","{'A647': [(231, 234)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public void setResponseCachingEnabled(boolean isEnabled) {
        zks.setResponseCachingEnabled(isEnabled);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionMaxTokens,int getConnectionMaxTokens(),"[239, 241]","{'A675': [(239, 241)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getConnectionMaxTokens() {
        return zks.connThrottle().getMaxTokens();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionMaxTokens,void setConnectionMaxTokens(int),"[243, 245]","{'A675': [(243, 245)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionMaxTokens(int val) {
        zks.connThrottle().setMaxTokens(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionTokenFillTime,int getConnectionTokenFillTime(),"[249, 251]","{'A675': [(249, 251)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getConnectionTokenFillTime() {
        return zks.connThrottle().getFillTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionTokenFillTime,void setConnectionTokenFillTime(int),"[253, 255]","{'A675': [(253, 255)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionTokenFillTime(int val) {
        zks.connThrottle().setFillTime(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionTokenFillCount,int getConnectionTokenFillCount(),"[259, 261]","{'A675': [(259, 261)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getConnectionTokenFillCount() {
        return zks.connThrottle().getFillCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionTokenFillCount,void setConnectionTokenFillCount(int),"[263, 265]","{'A675': [(263, 265)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionTokenFillCount(int val) {
        zks.connThrottle().setFillCount(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionFreezeTime,int getConnectionFreezeTime(),"[269, 271]","{'A675': [(269, 271)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getConnectionFreezeTime() {
        return zks.connThrottle().getFreezeTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionFreezeTime,void setConnectionFreezeTime(int),"[273, 275]","{'A675': [(273, 275)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionFreezeTime(int val) {
        zks.connThrottle().setFreezeTime(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionDropIncrease,double getConnectionDropIncrease(),"[279, 281]","{'A675': [(279, 281)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public double getConnectionDropIncrease() {
        return zks.connThrottle().getDropIncrease();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionDropIncrease,void setConnectionDropIncrease(double),"[283, 285]","{'A675': [(283, 285)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionDropIncrease(double val) {
        zks.connThrottle().setDropIncrease(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionDropDecrease,double getConnectionDropDecrease(),"[289, 291]","{'A675': [(289, 291)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public double getConnectionDropDecrease() {
        return zks.connThrottle().getDropDecrease();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionDropDecrease,void setConnectionDropDecrease(double),"[293, 295]","{'A675': [(293, 295)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionDropDecrease(double val) {
        zks.connThrottle().setDropDecrease(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getConnectionDecreaseRatio,double getConnectionDecreaseRatio(),"[299, 301]","{'A675': [(299, 301)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public double getConnectionDecreaseRatio() {
        return zks.connThrottle().getDecreasePoint();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setConnectionDecreaseRatio,void setConnectionDecreaseRatio(double),"[303, 305]","{'A675': [(303, 305)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setConnectionDecreaseRatio(double val) {
        zks.connThrottle().setDecreasePoint(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getCommitProcMaxReadBatchSize,int getCommitProcMaxReadBatchSize(),"[309, 311]","{'A583': [(309, 311)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getCommitProcMaxReadBatchSize() {
        return CommitProcessor.getMaxReadBatchSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setCommitProcMaxReadBatchSize,void setCommitProcMaxReadBatchSize(int),"[313, 315]","{'A583': [(313, 315)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setCommitProcMaxReadBatchSize(int size) {
        CommitProcessor.setMaxReadBatchSize(size);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getCommitProcMaxCommitBatchSize,int getCommitProcMaxCommitBatchSize(),"[319, 321]","{'A583': [(319, 321)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getCommitProcMaxCommitBatchSize() {
        return CommitProcessor.getMaxCommitBatchSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setCommitProcMaxCommitBatchSize,void setCommitProcMaxCommitBatchSize(int),"[323, 325]","{'A583': [(323, 325)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setCommitProcMaxCommitBatchSize(int size) {
        CommitProcessor.setMaxCommitBatchSize(size);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getFlushDelay,long getFlushDelay(),"[329, 332]","{'A647': [(329, 332)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public long getFlushDelay() {
        return zks.getFlushDelay();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setFlushDelay,void setFlushDelay(long),"[334, 337]","{'A647': [(334, 337)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public void setFlushDelay(long delay) {
        ZooKeeperServer.setFlushDelay(delay);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getThrottledOpWaitTime,int getThrottledOpWaitTime(),"[342, 344]","{'A675': [(342, 342), (344, 344)], 'A759': [(343, 343)]}","{'A675': 0.6666666666666666, 'A759': 0.3333333333333333}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getThrottledOpWaitTime() {
        return ZooKeeperServer.getThrottledOpWaitTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setThrottledOpWaitTime,void setThrottledOpWaitTime(int),"[346, 348]","{'A675': [(346, 346), (348, 348)], 'A759': [(347, 347)]}","{'A675': 0.6666666666666666, 'A759': 0.3333333333333333}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setThrottledOpWaitTime(int val) {
        ZooKeeperServer.setThrottledOpWaitTime(val);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getRequestThrottleLimit,int getRequestThrottleLimit(),"[352, 354]","{'A675': [(352, 354)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getRequestThrottleLimit() {
        return RequestThrottler.getMaxRequests();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setRequestThrottleLimit,void setRequestThrottleLimit(int),"[356, 358]","{'A675': [(356, 358)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setRequestThrottleLimit(int requests) {
        RequestThrottler.setMaxRequests(requests);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getRequestThrottleStallTime,int getRequestThrottleStallTime(),"[362, 364]","{'A675': [(362, 364)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getRequestThrottleStallTime() {
        return RequestThrottler.getStallTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setRequestThrottleStallTime,void setRequestThrottleStallTime(int),"[366, 368]","{'A675': [(366, 368)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setRequestThrottleStallTime(int time) {
        RequestThrottler.setStallTime(time);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getRequestThrottleDropStale,boolean getRequestThrottleDropStale(),"[372, 374]","{'A675': [(372, 374)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public boolean getRequestThrottleDropStale() {
        return RequestThrottler.getDropStaleRequests();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setRequestThrottleDropStale,void setRequestThrottleDropStale(boolean),"[376, 378]","{'A675': [(376, 378)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setRequestThrottleDropStale(boolean drop) {
        RequestThrottler.setDropStaleRequests(drop);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxWriteQueuePollTime,long getMaxWriteQueuePollTime(),"[382, 385]","{'A647': [(382, 385)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public long getMaxWriteQueuePollTime() {
        return zks.getMaxWriteQueuePollTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setMaxWriteQueuePollTime,void setMaxWriteQueuePollTime(long),"[387, 390]","{'A647': [(387, 390)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public void setMaxWriteQueuePollTime(long delay) {
        ZooKeeperServer.setMaxWriteQueuePollTime(delay);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getRequestStaleLatencyCheck,boolean getRequestStaleLatencyCheck(),"[392, 394]","{'A675': [(392, 394)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public boolean getRequestStaleLatencyCheck() {
        return Request.getStaleLatencyCheck();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setRequestStaleLatencyCheck,void setRequestStaleLatencyCheck(boolean),"[396, 398]","{'A675': [(396, 398)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setRequestStaleLatencyCheck(boolean check) {
        Request.setStaleLatencyCheck(check);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxBatchSize,int getMaxBatchSize(),"[402, 405]","{'A647': [(402, 405)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public int getMaxBatchSize() {
        return zks.getMaxBatchSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setMaxBatchSize,void setMaxBatchSize(int),"[407, 410]","{'A647': [(407, 410)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    @Override
    public void setMaxBatchSize(int size) {
        ZooKeeperServer.setMaxBatchSize(size);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getRequestStaleConnectionCheck,boolean getRequestStaleConnectionCheck(),"[412, 414]","{'A675': [(412, 414)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public boolean getRequestStaleConnectionCheck() {
        return Request.getStaleConnectionCheck();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setRequestStaleConnectionCheck,void setRequestStaleConnectionCheck(boolean),"[416, 418]","{'A675': [(416, 418)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setRequestStaleConnectionCheck(boolean check) {
        Request.setStaleConnectionCheck(check);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getLargeRequestMaxBytes,int getLargeRequestMaxBytes(),"[423, 425]","{'A675': [(423, 425)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getLargeRequestMaxBytes() {
        return zks.getLargeRequestMaxBytes();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setLargeRequestMaxBytes,void setLargeRequestMaxBytes(int),"[427, 429]","{'A675': [(427, 429)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setLargeRequestMaxBytes(int bytes) {
        zks.setLargeRequestMaxBytes(bytes);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getLargeRequestThreshold,int getLargeRequestThreshold(),"[433, 435]","{'A675': [(433, 435)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getLargeRequestThreshold() {
        return zks.getLargeRequestThreshold();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,setLargeRequestThreshold,void setLargeRequestThreshold(int),"[437, 439]","{'A675': [(437, 439)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public void setLargeRequestThreshold(int threshold) {
        zks.setLargeRequestThreshold(threshold);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerBean.java,ZooKeeperServerBean,getMaxCnxns,int getMaxCnxns(),"[441, 443]","{'A670': [(441, 443)]}",{'A670': 1.0},A670,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerBeanTest.java,"    public int getMaxCnxns() {
        return ServerCnxnHelper.getMaxCnxns(zks.secureServerCnxnFactory, zks.serverCnxnFactory);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,getScheme,String getScheme(),"[35, 37]","{'A590': [(35, 37)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    public String getScheme() {
        return ""ip"";
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerCnxn,byte[])","[39, 43]","{'A583': [(39, 39)], 'A591': [(40, 41)], 'A590': [(43, 43)], 'A596': [(42, 42)]}","{'A583': 0.2, 'A591': 0.4, 'A590': 0.2, 'A596': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) {
        String id = cnxn.getRemoteSocketAddress().getAddress().getHostAddress();
        cnxn.addAuthInfo(new Id(getScheme(), id));
        return KeeperException.Code.OK;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,handleAuthentication,"List<Id> handleAuthentication(HttpServletRequest,byte[])","[45, 53]","{'A726': [(45, 53)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    @Override
    public List<Id> handleAuthentication(HttpServletRequest request, byte[] authData) {
        final List<Id> ids = new ArrayList<>();

        final String ip = getClientIPAddress(request);
        ids.add(new Id(getScheme(), ip));

        return Collections.unmodifiableList(ids);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,addr2Bytes,byte[] addr2Bytes(String),"[57, 61]","{'A583': [(58, 58)], 'A590': [(57, 57), (59, 61)]}","{'A583': 0.2, 'A590': 0.8}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    private byte[] addr2Bytes(String addr) {
        byte[] b = v4addr2Bytes(addr);
        // TODO Write the v6addr2Bytes
        return b;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,v4addr2Bytes,byte[] v4addr2Bytes(String),"[63, 82]","{'A583': [(64, 64), (68, 68)], 'A590': [(63, 63), (65, 67), (69, 82)]}","{'A583': 0.1, 'A590': 0.9}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    private byte[] v4addr2Bytes(String addr) {
        String[] parts = addr.split(""\\."", -1);
        if (parts.length != 4) {
            return null;
        }
        byte[] b = new byte[4];
        for (int i = 0; i < 4; i++) {
            try {
                int v = Integer.parseInt(parts[i]);
                if (v >= 0 && v <= 255) {
                    b[i] = (byte) v;
                } else {
                    return null;
                }
            } catch (NumberFormatException e) {
                return null;
            }
        }
        return b;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,mask,"void mask(byte[],int)","[84, 93]","{'A583': [(84, 84)], 'A590': [(85, 93)]}","{'A583': 0.1, 'A590': 0.9}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    private void mask(byte[] b, int bits) {
        int start = bits / 8;
        int startMask = (1 << (8 - (bits % 8))) - 1;
        startMask = ~startMask;
        while (start < b.length) {
            b[start] &= startMask;
            startMask = 0;
            start++;
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,matches,"boolean matches(String,String)","[95, 124]","{'A583': [(96, 97), (113, 113)], 'A590': [(95, 95), (98, 112), (114, 124)]}","{'A583': 0.1, 'A590': 0.9}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    public boolean matches(String id, String aclExpr) {
        String[] parts = aclExpr.split(""/"", 2);
        byte[] aclAddr = addr2Bytes(parts[0]);
        if (aclAddr == null) {
            return false;
        }
        int bits = aclAddr.length * 8;
        if (parts.length == 2) {
            try {
                bits = Integer.parseInt(parts[1]);
                if (bits < 0 || bits > aclAddr.length * 8) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }
        }
        mask(aclAddr, bits);
        byte[] remoteAddr = addr2Bytes(id);
        if (remoteAddr == null) {
            return false;
        }
        mask(remoteAddr, bits);
        for (int i = 0; i < remoteAddr.length; i++) {
            if (remoteAddr[i] != aclAddr[i]) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[126, 128]","{'A590': [(126, 128)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    public boolean isAuthenticated() {
        return false;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,isValid,boolean isValid(String),"[130, 147]","{'A583': [(131, 132)], 'A590': [(130, 130), (147, 147)], 'A593': [(133, 146)]}","{'A583': 0.1111111111111111, 'A590': 0.1111111111111111, 'A593': 0.7777777777777778}",A593,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    public boolean isValid(String id) {
        String[] parts = id.split(""/"", 2);
        byte[] aclAddr = addr2Bytes(parts[0]);
        if (aclAddr == null) {
            return false;
        }
        if (parts.length == 2) {
            try {
                int bits = Integer.parseInt(parts[1]);
                if (bits < 0 || bits > aclAddr.length * 8) {
                    return false;
                }
            } catch (NumberFormatException e) {
                return false;
            }
        }
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/IPAuthenticationProvider.java,IPAuthenticationProvider,getClientIPAddress,String getClientIPAddress(HttpServletRequest),"[154, 166]","{'A726': [(154, 154), (159, 166)], 'A628': [(155, 158)]}","{'A726': 0.6923076923076923, 'A628': 0.3076923076923077}",A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/auth/IPAuthenticationProviderTest.java,"    public static String getClientIPAddress(final HttpServletRequest request) {
        if (!Boolean.getBoolean(USE_X_FORWARDED_FOR_KEY)) {
            return request.getRemoteAddr();
        }

        // to handle the case that a HTTP(s) client connects via a proxy or load balancer
        final String xForwardedForHeader = request.getHeader(X_FORWARDED_FOR_HEADER_NAME);
        if (xForwardedForHeader == null) {
            return request.getRemoteAddr();
        }
        // the format of the field is: X-Forwarded-For: client, proxy1, proxy2 ...
        return new StringTokenizer(xForwardedForHeader, "","").nextToken().trim();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,getScheme,String getScheme(),"[147, 150]","{'A630': [(147, 150)]}",{'A630': 1.0},A630,,"    @Override
    public String getScheme() {
        return ""x509"";
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerCnxn,byte[])","[152, 167]","{'A583': [(153, 153)], 'A630': [(152, 152), (156, 156), (160, 162), (165, 167)], 'A628': [(154, 155)], 'A726': [(157, 159), (163, 164)]}","{'A583': 0.0625, 'A630': 0.5, 'A628': 0.125, 'A726': 0.3125}",A630,,"    @Override
    public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) {
        List<Certificate> certs = Arrays.asList(cnxn.getClientCertificateChain());
        X509Certificate[] certChain = certs.toArray(new X509Certificate[certs.size()]);

        final Collection<Id> ids = handleAuthentication(certChain);
        if (ids.isEmpty()) {
            LOG.error(""Failed to authenticate session 0x{}"", Long.toHexString(cnxn.getSessionId()));
            return KeeperException.Code.AUTHFAILED;
        }

        for (Id id : ids) {
            cnxn.addAuthInfo(id);
        }
        return KeeperException.Code.OK;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,handleAuthentication,"List<Id> handleAuthentication(HttpServletRequest,byte[])","[169, 174]","{'A726': [(169, 174)]}",{'A726': 1.0},A726,,"    @Override
    public List<Id> handleAuthentication(HttpServletRequest request, byte[] authData) {
        final X509Certificate[] certChain =
                (X509Certificate[]) request.getAttribute(X509_CERTIFICATE_ATTRIBUTE_NAME);
        return handleAuthentication(certChain);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,getClientId,String getClientId(X509Certificate),"[186, 188]","{'A630': [(186, 188)]}",{'A630': 1.0},A630,,"    protected String getClientId(X509Certificate clientCert) {
        return clientCert.getSubjectX500Principal().getName();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,matches,"boolean matches(String,String)","[190, 198]","{'A583': [(193, 194), (197, 197)], 'A630': [(190, 192), (195, 196), (198, 198)]}","{'A583': 0.3333333333333333, 'A630': 0.6666666666666666}",A630,,"    @Override
    public boolean matches(String id, String aclExpr) {
        if (System.getProperty(ZOOKEEPER_X509AUTHENTICATIONPROVIDER_SUPERUSER) != null) {
            return id.equals(System.getProperty(ZOOKEEPER_X509AUTHENTICATIONPROVIDER_SUPERUSER))
                   || id.equals(aclExpr);
        }

        return id.equals(aclExpr);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[200, 203]","{'A630': [(200, 203)]}",{'A630': 1.0},A630,,"    @Override
    public boolean isAuthenticated() {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,isValid,boolean isValid(String),"[205, 213]","{'A630': [(205, 213)]}",{'A630': 1.0},A630,,"    @Override
    public boolean isValid(String id) {
        try {
            new X500Principal(id);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,getTrustManager,X509TrustManager getTrustManager(),"[222, 227]","{'A630': [(222, 227)]}",{'A630': 1.0},A630,,"    public X509TrustManager getTrustManager() throws TrustManagerException {
        if (trustManager == null) {
            throw new TrustManagerException(""No trust manager available"");
        }
        return trustManager;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,getKeyManager,X509KeyManager getKeyManager(),"[235, 240]","{'A630': [(235, 240)]}",{'A630': 1.0},A630,,"    public X509KeyManager getKeyManager() throws KeyManagerException {
        if (keyManager == null) {
            throw new KeyManagerException(""No key manager available"");
        }
        return keyManager;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/X509AuthenticationProvider.java,X509AuthenticationProvider,handleAuthentication,List<Id> handleAuthentication(X509Certificate[]),"[242, 273]","{'A726': [(242, 273)]}",{'A726': 1.0},A726,,"    private List<Id> handleAuthentication(final X509Certificate[] certChain) {
        final List<Id> ids = new ArrayList<>();
        if (certChain == null || certChain.length == 0) {
            LOG.warn(""No certificate chain available to authenticate"");
            return ids;
        }

        if (trustManager == null) {
            LOG.error(""No trust manager available to authenticate"");
            return ids;
        }

        final X509Certificate clientCert = certChain[0];
        try {
            // Authenticate client certificate
            trustManager.checkClientTrusted(certChain, clientCert.getPublicKey().getAlgorithm());
        } catch (CertificateException ce) {
            LOG.error(""Failed to trust certificate"", ce);
            return ids;
        }

        final String clientId = getClientId(clientCert);
        if (clientId.equals(System.getProperty(ZOOKEEPER_X509AUTHENTICATIONPROVIDER_SUPERUSER))) {
            ids.add(new Id(""super"", clientId));
            LOG.info(""Authenticated Id '{}' as super user"", clientId);
        }

        final Id id = new Id(getScheme(), clientId);
        ids.add(id);
        LOG.info(""Authenticated Id '{}' for scheme '{}'"", id.getId(), id.getScheme());
        return Collections.unmodifiableList(ids);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/AuthenticationProvider.java,,handleAuthentication,"List<Id> handleAuthentication(HttpServletRequest,byte[])","[67, 69]","{'A726': [(67, 69)]}",{'A726': 1.0},A726,,"    default List<Id> handleAuthentication(HttpServletRequest request, byte[] authData) {
        return new ArrayList<>();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/AuthenticationProvider.java,,getUserName,String getUserName(String),"[111, 114]","{'A592': [(111, 114)]}",{'A592': 1.0},A592,,"    default String getUserName(String id) {
        // Most of the authentication providers id contains only user name.
        return id;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,wrap,ServerAuthenticationProvider wrap(AuthenticationProvider),"[35, 42]","{'A583': [(39, 41)], 'A636': [(35, 38), (42, 42)]}","{'A583': 0.375, 'A636': 0.625}",A636,,"    static ServerAuthenticationProvider wrap(AuthenticationProvider provider) {
        if (provider == null) {
            return null;
        }
        return (provider instanceof ServerAuthenticationProvider)
            ? (ServerAuthenticationProvider) provider
            : new WrappedAuthenticationProvider(provider);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerObjs,byte[])","[53, 56]","{'A636': [(53, 56)]}",{'A636': 1.0},A636,,"    @Override
    public KeeperException.Code handleAuthentication(ServerObjs serverObjs, byte[] authData) {
        return implementation.handleAuthentication(serverObjs.getCnxn(), authData);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,handleAuthentication,"List<Id> handleAuthentication(HttpServletRequest,byte[])","[64, 67]","{'A726': [(64, 67)]}",{'A726': 1.0},A726,,"    @Override
    public List<Id> handleAuthentication(HttpServletRequest request, byte[] authData) {
        return implementation.handleAuthentication(request, authData);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,matches,"boolean matches(ServerObjs,MatchValues)","[74, 77]","{'A636': [(74, 77)]}",{'A636': 1.0},A636,,"    @Override
    public boolean matches(ServerObjs serverObjs, MatchValues matchValues) {
        return implementation.matches(matchValues.getId(), matchValues.getAclExpr());
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,getScheme,String getScheme(),"[79, 82]","{'A636': [(79, 82)]}",{'A636': 1.0},A636,,"    @Override
    public String getScheme() {
        return implementation.getScheme();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[84, 87]","{'A636': [(84, 87)]}",{'A636': 1.0},A636,,"    @Override
    public boolean isAuthenticated() {
        return implementation.isAuthenticated();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/WrappedAuthenticationProvider.java,WrappedAuthenticationProvider,isValid,boolean isValid(String),"[89, 92]","{'A636': [(89, 92)]}",{'A636': 1.0},A636,,"    @Override
    public boolean isValid(String id) {
        return implementation.isValid(id);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.ServerObjs,getZks,ZooKeeperServer getZks(),"[49, 51]","{'A636': [(49, 51)]}",{'A636': 1.0},A636,,"        public ZooKeeperServer getZks() {
            return zks;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.ServerObjs,getCnxn,ServerCnxn getCnxn(),"[53, 55]","{'A636': [(53, 55)]}",{'A636': 1.0},A636,,"        public ServerCnxn getCnxn() {
            return cnxn;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.MatchValues,getPath,String getPath(),"[87, 89]","{'A636': [(87, 89)]}",{'A636': 1.0},A636,,"        public String getPath() {
            return path;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.MatchValues,getId,String getId(),"[91, 93]","{'A636': [(91, 93)]}",{'A636': 1.0},A636,,"        public String getId() {
            return id;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.MatchValues,getAclExpr,String getAclExpr(),"[95, 97]","{'A636': [(95, 97)]}",{'A636': 1.0},A636,,"        public String getAclExpr() {
            return aclExpr;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.MatchValues,getPerm,int getPerm(),"[99, 101]","{'A636': [(99, 101)]}",{'A636': 1.0},A636,,"        public int getPerm() {
            return perm;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider.MatchValues,getSetAcls,List<ACL> getSetAcls(),"[103, 105]","{'A636': [(103, 105)]}",{'A636': 1.0},A636,,"        public List<ACL> getSetAcls() {
            return setAcls;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerCnxn,byte[])","[135, 138]","{'A636': [(135, 138)]}",{'A636': 1.0},A636,,"    @Override
    public final KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) {
        throw new UnsupportedOperationException();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ServerAuthenticationProvider.java,ServerAuthenticationProvider,matches,"boolean matches(String,String)","[140, 143]","{'A636': [(140, 143)]}",{'A636': 1.0},A636,,"    @Override
    public final boolean matches(String id, String aclExpr) {
        throw new UnsupportedOperationException();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,isEnabled,boolean isEnabled(),"[63, 67]","{'A637': [(63, 67)]}",{'A637': 1.0},A637,,"    public static boolean isEnabled() {
        boolean enabled = Boolean.parseBoolean(System.getProperty(DIGEST_AUTH_ENABLED, ""true""));
        LOG.info(""{} = {}"", DIGEST_AUTH_ENABLED, enabled);
        return enabled;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,getScheme,String getScheme(),"[69, 71]","{'A591': [(69, 71)]}",{'A591': 1.0},A591,,"    public String getScheme() {
        return ""digest"";
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,base64Encode,String base64Encode(byte[]),"[73, 102]","{'A583': [(73, 73), (75, 75)], 'A591': [(76, 102)], 'A600': [(74, 74)]}","{'A583': 0.06666666666666667, 'A591': 0.9, 'A600': 0.03333333333333333}",A591,,"    private static String base64Encode(byte[] b) {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < b.length; ) {
            int pad = 0;
            int v = (b[i++] & 0xff) << 16;
            if (i < b.length) {
                v |= (b[i++] & 0xff) << 8;
            } else {
                pad++;
            }
            if (i < b.length) {
                v |= (b[i++] & 0xff);
            } else {
                pad++;
            }
            sb.append(encode(v >> 18));
            sb.append(encode(v >> 12));
            if (pad < 2) {
                sb.append(encode(v >> 6));
            } else {
                sb.append('=');
            }
            if (pad < 1) {
                sb.append(encode(v));
            } else {
                sb.append('=');
            }
        }
        return sb.toString();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,encode,char encode(int),"[104, 116]","{'A583': [(104, 104)], 'A591': [(105, 116)]}","{'A583': 0.07692307692307693, 'A591': 0.9230769230769231}",A591,,"    private static char encode(int i) {
        i &= 0x3f;
        if (i < 26) {
            return (char) ('A' + i);
        }
        if (i < 52) {
            return (char) ('a' + i - 26);
        }
        if (i < 62) {
            return (char) ('0' + i - 52);
        }
        return i == 62 ? '+' : '/';
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,generateDigest,String generateDigest(String),"[118, 122]","{'A583': [(118, 119)], 'A591': [(121, 122)], 'A641': [(120, 120)]}","{'A583': 0.4, 'A591': 0.4, 'A641': 0.2}",A583,,"    public static String generateDigest(String idPassword) throws NoSuchAlgorithmException {
        String[] parts = idPassword.split("":"", 2);
        byte[] digest = digest(idPassword);
        return parts[0] + "":"" + base64Encode(digest);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,digest,byte[] digest(String),"[125, 127]","{'A641': [(125, 127)]}",{'A641': 1.0},A641,,"    public static byte[] digest(String idPassword) throws NoSuchAlgorithmException {
        return MessageDigest.getInstance(DIGEST_ALGORITHM).digest(idPassword.getBytes(UTF_8));
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerCnxn,byte[])","[129, 138]","{'A583': [(129, 129)], 'A591': [(136, 136)], 'A726': [(130, 135), (137, 138)]}","{'A583': 0.1, 'A591': 0.1, 'A726': 0.8}",A726,,"    public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) {
        final List<Id> ids = handleAuthentication(authData);
        if (ids.isEmpty()) {
            return KeeperException.Code.AUTHFAILED;
        }
        for (Id id : ids) {
            cnxn.addAuthInfo(id);
        }
        return KeeperException.Code.OK;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,handleAuthentication,"List<Id> handleAuthentication(HttpServletRequest,byte[])","[140, 143]","{'A591': [(143, 143)], 'A726': [(140, 142)]}","{'A591': 0.25, 'A726': 0.75}",A726,,"    @Override
    public List<Id> handleAuthentication(HttpServletRequest request, byte[] authData) {
        return handleAuthentication(authData);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[145, 147]","{'A591': [(145, 147)]}",{'A591': 1.0},A591,,"    public boolean isAuthenticated() {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,isValid,boolean isValid(String),"[149, 152]","{'A583': [(150, 150)], 'A591': [(149, 149), (151, 152)]}","{'A583': 0.25, 'A591': 0.75}",A591,,"    public boolean isValid(String id) {
        String[] parts = id.split("":"");
        return parts.length == 2;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,matches,"boolean matches(String,String)","[154, 156]","{'A591': [(154, 156)]}",{'A591': 1.0},A591,,"    public boolean matches(String id, String aclExpr) {
        return id.equals(aclExpr);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,getUserName,String getUserName(String),"[158, 165]","{'A592': [(158, 165)]}",{'A592': 1.0},A592,,"    @Override
    public String getUserName(String id) {
        /**
         * format is already enforced in server code. so no need to check it
         * again, just assume it is in correct format
         */
        return id.split("":"")[0];
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,main,void main(String[]),"[172, 176]","{'A583': [(172, 172)], 'A591': [(173, 176)]}","{'A583': 0.2, 'A591': 0.8}",A591,,"    public static void main(String[] args) throws NoSuchAlgorithmException {
        for (int i = 0; i < args.length; i++) {
            System.out.println(args[i] + ""->"" + generateDigest(args[i]));
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestAuthenticationProvider.java,DigestAuthenticationProvider,handleAuthentication,List<Id> handleAuthentication(byte[]),"[178, 191]","{'A726': [(178, 191)]}",{'A726': 1.0},A726,,"    private List<Id> handleAuthentication(final byte[] authData) {
        final List<Id> ids = new ArrayList<>();
        final String id = new String(authData);
        try {
            final String digest = generateDigest(id);
            if (digest.equals(superDigest)) {
                ids.add(new Id(""super"", """"));
            }
            ids.add(new Id(getScheme(), digest));
        } catch (final NoSuchAlgorithmException e) {
            LOG.error(""Missing algorithm"", e);
        }
        return Collections.unmodifiableList(ids);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestLoginModule.java,DigestLoginModule,abort,boolean abort(),"[30, 32]","{'A596': [(30, 32)]}",{'A596': 1.0},A596,,"    public boolean abort() {
        return false;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestLoginModule.java,DigestLoginModule,commit,boolean commit(),"[34, 36]","{'A596': [(34, 36)]}",{'A596': 1.0},A596,,"    public boolean commit() {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestLoginModule.java,DigestLoginModule,initialize,"void initialize(Subject,CallbackHandler,Map<String, ?>,Map<String, ?>)","[38, 52]","{'A583': [(38, 42), (46, 49)], 'A596': [(43, 45), (50, 52)]}","{'A583': 0.6, 'A596': 0.4}",A583,,"    public void initialize(
        Subject subject,
        CallbackHandler callbackHandler,
        Map<String, ?> sharedState,
        Map<String, ?> options) {
        if (options.containsKey(""username"")) {
            // Zookeeper client: get username and password from JAAS conf (only used if using DIGEST-MD5).
            this.subject = subject;
            String username = (String) options.get(""username"");
            this.subject.getPublicCredentials().add(username);
            String password = (String) options.get(""password"");
            this.subject.getPrivateCredentials().add(password);
        }
        return;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestLoginModule.java,DigestLoginModule,logout,boolean logout(),"[54, 56]","{'A596': [(54, 56)]}",{'A596': 1.0},A596,,"    public boolean logout() {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/DigestLoginModule.java,DigestLoginModule,login,boolean login(),"[58, 62]","{'A596': [(58, 62)]}",{'A596': 1.0},A596,,"    public boolean login() {
        // Unlike with Krb5LoginModule, we don't do any actual login or credential passing here: authentication to Zookeeper
        // is done later, through the SASLClient object.
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,getDefaultRealm,String getDefaultRealm(),"[128, 130]","{'A583': [(128, 129)], 'A596': [(130, 130)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public String getDefaultRealm() {
        return defaultRealm;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,toString,String toString(),"[135, 148]","{'A583': [(137, 141), (143, 145), (147, 147)], 'A596': [(135, 136), (142, 142), (146, 146), (148, 148)]}","{'A583': 0.6428571428571429, 'A596': 0.35714285714285715}",A583,,"    @Override
    public String toString() {
        StringBuilder result = new StringBuilder();
        result.append(serviceName);
        if (hostName != null) {
            result.append('/');
            result.append(hostName);
        }
        if (realm != null) {
            result.append('@');
            result.append(realm);
        }
        return result.toString();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,getServiceName,String getServiceName(),"[154, 156]","{'A583': [(154, 156)]}",{'A583': 1.0},A583,,"    public String getServiceName() {
        return serviceName;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,getHostName,String getHostName(),"[162, 164]","{'A583': [(162, 163)], 'A596': [(164, 164)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public String getHostName() {
        return hostName;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,getRealm,String getRealm(),"[170, 172]","{'A583': [(170, 171)], 'A596': [(172, 172)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,,"    public String getRealm() {
        return realm;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName.Rule,toString,String toString(),"[207, 235]","{'A583': [(207, 235)]}",{'A583': 1.0},A583,,"        @Override
        public String toString() {
            StringBuilder buf = new StringBuilder();
            if (isDefault) {
                buf.append(""DEFAULT"");
            } else {
                buf.append(""RULE:["");
                buf.append(numOfComponents);
                buf.append(':');
                buf.append(format);
                buf.append(']');
                if (match != null) {
                    buf.append('(');
                    buf.append(match);
                    buf.append(')');
                }
                if (fromPattern != null) {
                    buf.append(""s/"");
                    buf.append(fromPattern);
                    buf.append('/');
                    buf.append(toPattern);
                    buf.append('/');
                    if (repeat) {
                        buf.append('g');
                    }
                }
            }
            return buf.toString();
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName.Rule,replaceParameters,"String replaceParameters(String,String[])","[246, 272]","{'A583': [(246, 272)]}",{'A583': 1.0},A583,,"        static String replaceParameters(String format, String[] params) throws BadFormatString {
            Matcher match = parameterPattern.matcher(format);
            int start = 0;
            StringBuilder result = new StringBuilder();
            while (start < format.length() && match.find(start)) {
                result.append(match.group(1));
                String paramNum = match.group(3);
                if (paramNum != null) {
                    try {
                        int num = Integer.parseInt(paramNum);
                        if (num < 0 || num > params.length) {
                            throw new BadFormatString(String.format(
                                ""index %d from %s is outside of the valid range 0 to %d"",
                                num,
                                format,
                                (params.length - 1)));
                        }
                        result.append(params[num]);
                    } catch (NumberFormatException nfe) {
                        throw new BadFormatString(""bad format in username mapping in "" + paramNum, nfe);
                    }

                }
                start = match.end();
            }
            return result.toString();
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName.Rule,replaceSubstitution,"String replaceSubstitution(String,Pattern,String,boolean)","[283, 290]","{'A583': [(283, 290)]}",{'A583': 1.0},A583,,"        static String replaceSubstitution(String base, Pattern from, String to, boolean repeat) {
            Matcher match = from.matcher(base);
            if (repeat) {
                return match.replaceAll(to);
            } else {
                return match.replaceFirst(to);
            }
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName.Rule,apply,String apply(String[]),"[300, 320]","{'A583': [(300, 320)]}",{'A583': 1.0},A583,,"        String apply(String[] params) throws IOException {
            String result = null;
            if (isDefault) {
                if (defaultRealm.equals(params[0])) {
                    result = params[1];
                }
            } else if (params.length - 1 == numOfComponents) {
                String base = replaceParameters(format, params);
                if (match == null || match.matcher(base).matches()) {
                    if (fromPattern == null) {
                        result = base;
                    } else {
                        result = replaceSubstitution(base, fromPattern, toPattern, repeat);
                    }
                }
            }
            if (result != null && nonSimplePattern.matcher(result).find()) {
                throw new NoMatchingRule(""Non-simple name "" + result + "" after auth_to_local rule "" + this);
            }
            return result;
        }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,parseRules,List<Rule> parseRules(String),"[324, 346]","{'A583': [(324, 324), (326, 345)], 'A596': [(346, 346)], 'A605': [(325, 325)]}","{'A583': 0.9130434782608695, 'A596': 0.043478260869565216, 'A605': 0.043478260869565216}",A583,,"    static List<Rule> parseRules(String rules) {
        List<Rule> result = new ArrayList<>();
        String remaining = rules.trim();
        while (remaining.length() > 0) {
            Matcher matcher = ruleParser.matcher(remaining);
            if (!matcher.lookingAt()) {
                throw new IllegalArgumentException(""Invalid rule: "" + remaining);
            }
            if (matcher.group(2) != null) {
                result.add(new Rule());
            } else {
                result.add(new Rule(
                    Integer.parseInt(matcher.group(4)),
                    matcher.group(5),
                    matcher.group(7),
                    matcher.group(9),
                    matcher.group(10),
                    ""g"".equals(matcher.group(11))));
            }
            remaining = remaining.substring(matcher.end());
        }
        return result;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,setConfiguration,void setConfiguration(),"[352, 355]","{'A583': [(352, 354)], 'A596': [(355, 355)]}","{'A583': 0.75, 'A596': 0.25}",A583,,"    public static void setConfiguration() throws IOException {
        String ruleString = System.getProperty(""zookeeper.security.auth_to_local"", ""DEFAULT"");
        rules = parseRules(ruleString);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,getShortName,String getShortName(),"[384, 402]","{'A583': [(384, 401)], 'A596': [(402, 402)]}","{'A583': 0.9473684210526315, 'A596': 0.05263157894736842}",A583,,"    public String getShortName() throws IOException {
        String[] params;
        if (hostName == null) {
            // if it is already simple, just return it
            if (realm == null) {
                return serviceName;
            }
            params = new String[]{realm, serviceName};
        } else {
            params = new String[]{realm, serviceName, hostName};
        }
        for (Rule r : rules) {
            String result = r.apply(params);
            if (result != null) {
                return result;
            }
        }
        throw new NoMatchingRule(""No rules applied to "" + toString());
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,printRules,void printRules(),"[404, 409]","{'A583': [(404, 408)], 'A596': [(409, 409)]}","{'A583': 0.8333333333333334, 'A596': 0.16666666666666666}",A583,,"    static void printRules() throws IOException {
        int i = 0;
        for (Rule r : rules) {
            System.out.println(++i + "" "" + r);
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KerberosName.java,KerberosName,main,void main(String[]),"[411, 416]","{'A583': [(411, 415)], 'A596': [(416, 416)]}","{'A583': 0.8333333333333334, 'A596': 0.16666666666666666}",A583,,"    public static void main(String[] args) throws Exception {
        for (String arg : args) {
            KerberosName name = new KerberosName(arg);
            System.out.println(""Name: "" + name + "" to "" + name.getShortName());
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,reset,void reset(),"[38, 43]","{'A636': [(38, 43)]}",{'A636': 1.0},A636,,"    public static void reset() {
        synchronized (ProviderRegistry.class) {
            initialized = false;
            authenticationProviders.clear();
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,initialize,void initialize(),"[45, 62]","{'A591': [(45, 48), (55, 57), (59, 59), (61, 62)], 'A637': [(49, 54)], 'A684': [(58, 58)], 'A597': [(60, 60)]}","{'A591': 0.5555555555555556, 'A637': 0.3333333333333333, 'A684': 0.05555555555555555, 'A597': 0.05555555555555555}",A591,,"    public static void initialize() {
        synchronized (ProviderRegistry.class) {
            IPAuthenticationProvider ipp = new IPAuthenticationProvider();
            authenticationProviders.put(ipp.getScheme(), ipp);

            if (DigestAuthenticationProvider.isEnabled()) {
                DigestAuthenticationProvider digp = new DigestAuthenticationProvider();
                authenticationProviders.put(digp.getScheme(), digp);
            }

            Enumeration<Object> en = System.getProperties().keys();
            while (en.hasMoreElements()) {
                String k = (String) en.nextElement();
                addOrUpdateProvider(k);
            }
            initialized = true;
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,addOrUpdateProvider,void addOrUpdateProvider(String),"[64, 77]","{'A684': [(64, 77)]}",{'A684': 1.0},A684,,"    public static void addOrUpdateProvider(String authKey) {
        synchronized (ProviderRegistry.class) {
            if (authKey.startsWith(AUTHPROVIDER_PROPERTY_PREFIX)) {
                String className = System.getProperty(authKey);
                try {
                    Class<?> c = ZooKeeperServer.class.getClassLoader().loadClass(className);
                    AuthenticationProvider ap = (AuthenticationProvider) c.getDeclaredConstructor().newInstance();
                    authenticationProviders.put(ap.getScheme(), ap);
                } catch (Exception e) {
                    LOG.warn(""Problems loading {}"", className, e);
                }
            }
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,getServerProvider,ServerAuthenticationProvider getServerProvider(String),"[79, 81]","{'A636': [(79, 81)]}",{'A636': 1.0},A636,,"    public static ServerAuthenticationProvider getServerProvider(String scheme) {
        return WrappedAuthenticationProvider.wrap(getProvider(scheme));
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,getProvider,AuthenticationProvider getProvider(String),"[83, 88]","{'A583': [(84, 84), (86, 86)], 'A591': [(83, 83), (85, 85), (87, 88)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    public static AuthenticationProvider getProvider(String scheme) {
        if (!initialized) {
            initialize();
        }
        return authenticationProviders.get(scheme);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,removeProvider,void removeProvider(String),"[90, 92]","{'A675': [(90, 92)]}",{'A675': 1.0},A675,,"    public static void removeProvider(String scheme) {
        authenticationProviders.remove(scheme);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/ProviderRegistry.java,ProviderRegistry,listProviders,String listProviders(),"[94, 100]","{'A583': [(96, 96)], 'A636': [(97, 98)], 'A597': [(94, 95), (99, 100)]}","{'A583': 0.14285714285714285, 'A636': 0.2857142857142857, 'A597': 0.5714285714285714}",A597,,"    public static String listProviders() {
        StringBuilder sb = new StringBuilder();
        for (String s : authenticationProviders.keySet()) {
            sb.append(s).append("" "");
        }
        return sb.toString();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,getScheme,String getScheme(),"[58, 60]","{'A636': [(58, 60)]}",{'A636': 1.0},A636,,"    public String getScheme() {
        return ""key"";
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,getKey,byte[] getKey(ZooKeeperServer),"[62, 73]","{'A636': [(62, 73)]}",{'A636': 1.0},A636,,"    private byte[] getKey(ZooKeeperServer zks) {
        ZKDatabase db = zks.getZKDatabase();
        if (db != null) {
            try {
                Stat stat = new Stat();
                return db.getData(""/key"", stat, null);
            } catch (NoNodeException e) {
                LOG.error(""getData failed"", e);
            }
        }
        return null;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,validate,"boolean validate(byte[],byte[])","[75, 90]","{'A583': [(82, 83), (85, 85), (87, 87)], 'A636': [(75, 77), (80, 81), (84, 84), (86, 86), (88, 90)], 'A602': [(78, 79)]}","{'A583': 0.25, 'A636': 0.625, 'A602': 0.125}",A636,,"    private boolean validate(byte[] key, byte[] auth) {
        // perform arbitrary function (auth is a multiple of key)
        try {
            String keyStr = new String(key, UTF_8);
            String authStr = new String(auth, UTF_8);
            int keyVal = Integer.parseInt(keyStr);
            int authVal = Integer.parseInt(authStr);
            if (keyVal != 0 && ((authVal % keyVal) != 0)) {
                return false;
            }
        } catch (NumberFormatException nfe) {
            LOG.error(""bad formatting"", nfe);
            return false;
        }
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerObjs,byte[])","[92, 113]","{'A583': [(100, 100)], 'A636': [(92, 94), (96, 98), (101, 113)], 'A602': [(95, 95), (99, 99)]}","{'A583': 0.045454545454545456, 'A636': 0.8636363636363636, 'A602': 0.09090909090909091}",A636,,"    @Override
    public KeeperException.Code handleAuthentication(ServerObjs serverObjs, byte[] authData) {
        byte[] key = getKey(serverObjs.getZks());
        String authStr = new String(authData, UTF_8);
        String keyStr = """";
        if (key != null) {
            if (!validate(key, authData)) {
                keyStr = new String(key, UTF_8);
                LOG.debug(""KeyAuthenticationProvider handleAuthentication ({}, {}) -> FAIL.\n"", keyStr, authStr);
                return KeeperException.Code.AUTHFAILED;
            }
        }
        // default to allow, so the key can be initially written
        LOG.debug(""KeyAuthenticationProvider handleAuthentication -> OK.\n"");
        // NOTE: keyStr in addAuthInfo() sticks with the created node ACLs.
        //   For transient keys or certificates, this presents a problem.
        //   In that case, replace it with something non-ephemeral (or punt with null).
        //
        // BOTH addAuthInfo and an OK return-code are needed for authentication.
        serverObjs.getCnxn().addAuthInfo(new Id(getScheme(), keyStr));
        return KeeperException.Code.OK;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,matches,"boolean matches(ServerObjs,MatchValues)","[115, 118]","{'A636': [(115, 118)]}",{'A636': 1.0},A636,,"    @Override
    public boolean matches(ServerObjs serverObjs, MatchValues matchValues) {
        return matchValues.getId().equals(matchValues.getAclExpr());
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[120, 123]","{'A636': [(120, 123)]}",{'A636': 1.0},A636,,"    @Override
    public boolean isAuthenticated() {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/KeyAuthenticationProvider.java,KeyAuthenticationProvider,isValid,boolean isValid(String),"[125, 128]","{'A636': [(125, 128)]}",{'A636': 1.0},A636,,"    @Override
    public boolean isValid(String id) {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java,EnsembleAuthenticationProvider,setEnsembleNames,void setEnsembleNames(String),"[54, 59]","{'A583': [(56, 57)], 'A675': [(54, 54), (58, 59)], 'A605': [(55, 55)]}","{'A583': 0.3333333333333333, 'A675': 0.5, 'A605': 0.16666666666666666}",A675,,"    public void setEnsembleNames(String namesCSV) {
        ensembleNames = new HashSet<>();
        for (String name : namesCSV.split("","")) {
            ensembleNames.add(name.trim());
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java,EnsembleAuthenticationProvider,getScheme,String getScheme(),"[62, 65]","{'A675': [(62, 65)]}",{'A675': 1.0},A675,,"    @Override
    public String getScheme() {
        return ""ensemble"";
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java,EnsembleAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerCnxn,byte[])","[73, 107]","{'A583': [(74, 74)], 'A675': [(73, 73), (75, 75), (77, 79), (81, 82), (84, 87), (89, 103), (106, 107)], 'A602': [(80, 80)], 'A584': [(76, 76), (83, 83), (88, 88), (104, 104)], 'A604': [(105, 105)]}","{'A583': 0.02857142857142857, 'A675': 0.8, 'A602': 0.02857142857142857, 'A584': 0.11428571428571428, 'A604': 0.02857142857142857}",A675,,"    @Override
    public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) {
        if (authData == null || authData.length == 0) {
            ServerMetrics.getMetrics().ENSEMBLE_AUTH_SKIP.add(1);
            return KeeperException.Code.OK;
        }

        String receivedEnsembleName = new String(authData, StandardCharsets.UTF_8);

        if (ensembleNames == null) {
            ServerMetrics.getMetrics().ENSEMBLE_AUTH_SKIP.add(1);
            return KeeperException.Code.OK;
        }

        if (ensembleNames.contains(receivedEnsembleName)) {
            ServerMetrics.getMetrics().ENSEMBLE_AUTH_SUCCESS.add(1);
            return KeeperException.Code.OK;
        }

        long currentTime = System.currentTimeMillis();
        if (lastFailureLogged + MIN_LOGGING_INTERVAL_MS < currentTime) {
            String id = cnxn.getRemoteSocketAddress().getAddress().getHostAddress();
            LOG.warn(""Unexpected ensemble name: ensemble name: {} client ip: {}"", receivedEnsembleName, id);
            lastFailureLogged = currentTime;
        }
        /*
         * we are doing a close here rather than returning some other error
         * since we want the client to choose another server to connect to. if
         * we return an error, the client will get a fatal auth error and
         * shutdown.
         */
        ServerMetrics.getMetrics().ENSEMBLE_AUTH_FAIL.add(1);
        cnxn.close(ServerCnxn.DisconnectReason.FAILED_HANDSHAKE);
        return KeeperException.Code.BADARGUMENTS;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java,EnsembleAuthenticationProvider,matches,"boolean matches(String,String)","[113, 116]","{'A675': [(113, 116)]}",{'A675': 1.0},A675,,"    @Override
    public boolean matches(String id, String aclExpr) {
        return false;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java,EnsembleAuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[118, 121]","{'A675': [(118, 121)]}",{'A675': 1.0},A675,,"    @Override
    public boolean isAuthenticated() {
        return false;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/EnsembleAuthenticationProvider.java,EnsembleAuthenticationProvider,isValid,boolean isValid(String),"[123, 126]","{'A675': [(123, 126)]}",{'A675': 1.0},A675,,"    @Override
    public boolean isValid(String id) {
        return false;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,handle,void handle(Callback[]),"[47, 59]","{'A596': [(47, 59)]}",{'A596': 1.0},A596,,"    public void handle(Callback[] callbacks) throws UnsupportedCallbackException {
        for (Callback callback : callbacks) {
            if (callback instanceof NameCallback) {
                handleNameCallback((NameCallback) callback);
            } else if (callback instanceof PasswordCallback) {
                handlePasswordCallback((PasswordCallback) callback);
            } else if (callback instanceof RealmCallback) {
                handleRealmCallback((RealmCallback) callback);
            } else if (callback instanceof AuthorizeCallback) {
                handleAuthorizeCallback((AuthorizeCallback) callback);
            }
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,handleNameCallback,void handleNameCallback(NameCallback),"[61, 69]","{'A583': [(64, 64)], 'A596': [(61, 63), (65, 69)]}","{'A583': 0.1111111111111111, 'A596': 0.8888888888888888}",A596,,"    private void handleNameCallback(NameCallback nc) {
        // check to see if this user is in the user password database.
        if (credentials.get(nc.getDefaultName()) == null) {
            LOG.warn(""User '{}' not found in list of DIGEST-MD5 authenticateable users."", nc.getDefaultName());
            return;
        }
        nc.setName(nc.getDefaultName());
        userName = nc.getDefaultName();
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,handlePasswordCallback,void handlePasswordCallback(PasswordCallback),"[71, 80]","{'A583': [(75, 75), (78, 78)], 'A596': [(71, 74), (76, 77), (79, 80)]}","{'A583': 0.2, 'A596': 0.8}",A596,,"    private void handlePasswordCallback(PasswordCallback pc) {
        if (""super"".equals(this.userName) && System.getProperty(SYSPROP_SUPER_PASSWORD) != null) {
            // superuser: use Java system property for password, if available.
            pc.setPassword(System.getProperty(SYSPROP_SUPER_PASSWORD).toCharArray());
        } else if (credentials.containsKey(userName)) {
            pc.setPassword(credentials.get(userName).toCharArray());
        } else {
            LOG.warn(""No password found for user: {}"", userName);
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,handleRealmCallback,void handleRealmCallback(RealmCallback),"[82, 85]","{'A596': [(82, 82), (84, 85)], 'A620': [(83, 83)]}","{'A596': 0.75, 'A620': 0.25}",A596,,"    private void handleRealmCallback(RealmCallback rc) {
        LOG.debug(""client supplied realm: {}"", rc.getDefaultText());
        rc.setText(rc.getDefaultText());
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,handleAuthorizeCallback,void handleAuthorizeCallback(AuthorizeCallback),"[87, 112]","{'A583': [(91, 92), (107, 107)], 'A596': [(87, 90), (93, 106), (108, 109), (111, 112)], 'A760': [(110, 110)]}","{'A583': 0.11538461538461539, 'A596': 0.8461538461538461, 'A760': 0.038461538461538464}",A596,,"    private void handleAuthorizeCallback(AuthorizeCallback ac) {
        String authenticationID = ac.getAuthenticationID();
        String authorizationID = ac.getAuthorizationID();

        LOG.info(""Successfully authenticated client: authenticationID={};  authorizationID={}."",
                 authenticationID, authorizationID);
        ac.setAuthorized(true);

        // canonicalize authorization id according to system properties:
        // zookeeper.kerberos.removeRealmFromPrincipal(={true,false})
        // zookeeper.kerberos.removeHostFromPrincipal(={true,false})
        KerberosName kerberosName = new KerberosName(authenticationID);
        try {
            StringBuilder userNameBuilder = new StringBuilder(kerberosName.getShortName());
            if (shouldAppendHost(kerberosName)) {
                userNameBuilder.append(""/"").append(kerberosName.getHostName());
            }
            if (shouldAppendRealm(kerberosName)) {
                userNameBuilder.append(""@"").append(kerberosName.getRealm());
            }
            LOG.info(""Setting authorizedID: {}"", userNameBuilder);
            ac.setAuthorizedID(userNameBuilder.toString());
        } catch (IOException e) {
            LOG.error(""Failed to set name based on Kerberos authentication rules."", e);
        }
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,shouldAppendRealm,boolean shouldAppendRealm(KerberosName),"[114, 116]","{'A596': [(114, 116)]}",{'A596': 1.0},A596,,"    private boolean shouldAppendRealm(KerberosName kerberosName) {
        return !isSystemPropertyTrue(SYSPROP_REMOVE_REALM) && kerberosName.getRealm() != null;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,shouldAppendHost,boolean shouldAppendHost(KerberosName),"[118, 120]","{'A596': [(118, 120)]}",{'A596': 1.0},A596,,"    private boolean shouldAppendHost(KerberosName kerberosName) {
        return !isSystemPropertyTrue(SYSPROP_REMOVE_HOST) && kerberosName.getHostName() != null;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SaslServerCallbackHandler.java,SaslServerCallbackHandler,isSystemPropertyTrue,boolean isSystemPropertyTrue(String),"[122, 124]","{'A596': [(122, 124)]}",{'A596': 1.0},A596,,"    private boolean isSystemPropertyTrue(String propertyName) {
        return ""true"".equals(System.getProperty(propertyName));
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java,SASLAuthenticationProvider,getScheme,String getScheme(),"[26, 28]","{'A596': [(26, 28)]}",{'A596': 1.0},A596,,"    public String getScheme() {
        return ""sasl"";
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java,SASLAuthenticationProvider,handleAuthentication,"KeeperException.Code handleAuthentication(ServerCnxn,byte[])","[30, 36]","{'A583': [(30, 30)], 'A596': [(31, 36)]}","{'A583': 0.14285714285714285, 'A596': 0.8571428571428571}",A596,,"    public KeeperException.Code handleAuthentication(ServerCnxn cnxn, byte[] authData) {
        // Should never call this: SASL authentication is negotiated at session initiation.
        // TODO: consider substituting current implementation of direct ClientCnxn manipulation with
        // a call to this method (SASLAuthenticationProvider:handleAuthentication()) at session initiation.
        return KeeperException.Code.AUTHFAILED;

    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java,SASLAuthenticationProvider,matches,"boolean matches(String,String)","[38, 44]","{'A583': [(38, 38), (40, 40), (43, 43)], 'A596': [(44, 44)], 'A639': [(39, 39), (41, 42)]}","{'A583': 0.42857142857142855, 'A596': 0.14285714285714285, 'A639': 0.42857142857142855}",A583,,"    public boolean matches(String id, String aclExpr) {
        if ((id.equals(""super"") || id.equals(aclExpr))) {
            return true;
        }
        String readAccessUser = System.getProperty(""zookeeper.letAnySaslUserDoX"");
        return readAccessUser != null && aclExpr.equals(readAccessUser);
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java,SASLAuthenticationProvider,isAuthenticated,boolean isAuthenticated(),"[46, 48]","{'A596': [(46, 48)]}",{'A596': 1.0},A596,,"    public boolean isAuthenticated() {
        return true;
    }
"
org.apache.zookeeper.server.auth,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/auth/SASLAuthenticationProvider.java,SASLAuthenticationProvider,isValid,boolean isValid(String),"[50, 65]","{'A583': [(62, 62), (65, 65)], 'A596': [(50, 61), (63, 64)]}","{'A583': 0.125, 'A596': 0.875}",A596,,"    public boolean isValid(String id) {
        // Since the SASL authenticator will usually be used with Kerberos authentication,
        // it should enforce that these names are valid according to Kerberos's
        // syntax for principals.
        //
        // Use the KerberosName(id) constructor to define validity:
        // if KerberosName(id) throws IllegalArgumentException, then id is invalid.
        // otherwise, it is valid.
        //
        try {
            new KerberosName(id);
            return true;
        } catch (IllegalArgumentException e) {
            return false;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,getNodeCount,int getNodeCount(),"[34, 36]","{'A590': [(34, 36)]}",{'A590': 1.0},A590,,"    public int getNodeCount() {
        return dataTree.getNodeCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,approximateDataSize,long approximateDataSize(),"[38, 40]","{'A591': [(38, 38)], 'A590': [(40, 40)], 'A612': [(39, 39)]}","{'A591': 0.3333333333333333, 'A590': 0.3333333333333333, 'A612': 0.3333333333333333}",A591,,"    public long approximateDataSize() {
        return dataTree.cachedApproximateDataSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,countEphemerals,int countEphemerals(),"[42, 44]","{'A591': [(42, 43)], 'A590': [(44, 44)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,,"    public int countEphemerals() {
        return dataTree.getEphemeralsCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,getWatchCount,int getWatchCount(),"[46, 48]","{'A590': [(46, 48)]}",{'A590': 1.0},A590,,"    public int getWatchCount() {
        return dataTree.getWatchCount();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,getName,String getName(),"[50, 52]","{'A590': [(50, 52)]}",{'A590': 1.0},A590,,"    public String getName() {
        return ""InMemoryDataTree"";
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,isHidden,boolean isHidden(),"[54, 56]","{'A590': [(54, 56)]}",{'A590': 1.0},A590,,"    public boolean isHidden() {
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTreeBean.java,DataTreeBean,getLastZxid,String getLastZxid(),"[58, 60]","{'A591': [(58, 59)], 'A590': [(60, 60)]}","{'A591': 0.6666666666666666, 'A590': 0.3333333333333333}",A591,,"    public String getLastZxid() {
        return ""0x"" + Long.toHexString(dataTree.lastProcessedZxid);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerMetrics.java,ServerMetrics,getMetrics,ServerMetrics getMetrics(),"[59, 61]","{'A584': [(59, 61)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerMetricsTest.java,"    public static ServerMetrics getMetrics() {
        return CURRENT;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerMetrics.java,ServerMetrics,metricsProviderInitialized,void metricsProviderInitialized(MetricsProvider),"[63, 66]","{'A584': [(63, 66)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerMetricsTest.java,"    public static void metricsProviderInitialized(MetricsProvider metricsProvider) {
        LOG.info(""ServerMetrics initialized with provider {}"", metricsProvider);
        CURRENT = new ServerMetrics(metricsProvider);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerMetrics.java,ServerMetrics,resetAll,void resetAll(),"[559, 561]","{'A713': [(561, 561)], 'A584': [(559, 560)]}","{'A713': 0.3333333333333333, 'A584': 0.6666666666666666}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerMetricsTest.java,"    public void resetAll() {
        metricsProvider.resetAllValues();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerMetrics.java,ServerMetrics,getMetricsProvider,MetricsProvider getMetricsProvider(),"[563, 565]","{'A713': [(565, 565)], 'A584': [(563, 564)]}","{'A713': 0.3333333333333333, 'A584': 0.6666666666666666}",A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerMetricsTest.java,"    public MetricsProvider getMetricsProvider() {
        return metricsProvider;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RateLogger.java,RateLogger,flush,void flush(),"[47, 62]","{'A591': [(47, 47), (50, 50), (56, 56), (58, 59), (61, 62)], 'A612': [(48, 49), (51, 55), (57, 57), (60, 60)]}","{'A591': 0.4375, 'A612': 0.5625}",A612,,"    public void flush() {
        if (msg != null && count > 0) {
            String log = """";
            if (count > 1) {
                log = ""["" + count + "" times] "";
            }
            log += ""Message: "" + msg;
            if (value != null) {
                log += "" Last value:"" + value;
            }
            LOG.warn(log);
        }
        msg = null;
        value = null;
        count = 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RateLogger.java,RateLogger,rateLimitLog,void rateLimitLog(String),"[64, 66]","{'A591': [(64, 64)], 'A612': [(65, 66)]}","{'A591': 0.3333333333333333, 'A612': 0.6666666666666666}",A612,,"    public void rateLimitLog(String newMsg) {
        rateLimitLog(newMsg, null);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RateLogger.java,RateLogger,rateLimitLog,"void rateLimitLog(String,String)","[71, 89]","{'A591': [(74, 74), (77, 79), (81, 84), (86, 86), (88, 89)], 'A735': [(71, 71), (73, 73), (75, 75), (80, 80), (85, 85)], 'A593': [(72, 72)], 'A612': [(76, 76), (87, 87)]}","{'A591': 0.5789473684210527, 'A735': 0.2631578947368421, 'A593': 0.05263157894736842, 'A612': 0.10526315789473684}",A591,,"    public void rateLimitLog(String newMsg, String newValue) {
        long now = Time.currentElapsedTime();
        if (Objects.equals(newMsg, msg)) {
            ++count;
            value = newValue;
            if (now - timestamp >= LOG_INTERVAL) {
                flush();
                msg = newMsg;
                timestamp = now;
                value = newValue;
            }
        } else {
            flush();
            msg = newMsg;
            value = newValue;
            timestamp = now;
            LOG.warn(""Message:{} Value:{}"", msg, value);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java,SnapshotRecursiveSummary,main,void main(String[]),"[49, 63]","{'A761': [(49, 63)]}",{'A761': 1.0},A761,,"  public static void main(String[] args) throws Exception {
    if (args.length != 3) {
      System.err.println(getUsage());
      System.exit(2);
    }
    int maxDepth = 0;
    try {
      maxDepth = Integer.parseInt(args[2]);
    } catch (NumberFormatException e) {
      System.err.println(getUsage());
      System.exit(2);
    }

    new SnapshotRecursiveSummary().run(args[0], args[1], maxDepth);
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java,SnapshotRecursiveSummary,run,"void run(String,String,int)","[65, 76]","{'A761': [(65, 70), (73, 76)], 'A605': [(71, 71)], 'A583': [(72, 72)]}","{'A761': 0.8333333333333334, 'A605': 0.08333333333333333, 'A583': 0.08333333333333333}",A761,,"  public void run(String snapshotFileName, String startingNode, int maxDepth) throws IOException {
    File snapshotFile = new File(snapshotFileName);
    try (InputStream is = SnapStream.getInputStream(snapshotFile)) {
      InputArchive ia = BinaryInputArchive.getArchive(is);

      DataTree dataTree = new DataTree();
      Map<Long, Integer> sessions = new HashMap<>();
      FileSnap.deserialize(dataTree, sessions, ia);

      printZnodeDetails(dataTree, startingNode, maxDepth);
    }
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java,SnapshotRecursiveSummary,printZnodeDetails,"void printZnodeDetails(DataTree,String,int)","[78, 82]","{'A761': [(78, 82)]}",{'A761': 1.0},A761,,"  private void printZnodeDetails(DataTree dataTree, String startingNode, int maxDepth) {
    StringBuilder builder = new StringBuilder();
    printZnode(dataTree, startingNode, builder, 0, maxDepth);
    System.out.println(builder);
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java,SnapshotRecursiveSummary,printZnode,"long[] printZnode(DataTree,String,StringBuilder,int,int)","[84, 117]","{'A761': [(84, 117)]}",{'A761': 1.0},A761,,"  private long[] printZnode(DataTree dataTree, String name, StringBuilder builder, int level,
      int maxDepth) {
    DataNode n = dataTree.getNode(name);
    Set<String> children;
    long dataSum = 0L;
    synchronized (n) { // keep findbugs happy
      if (n.data != null) {
        dataSum += n.data.length;
      }
      children = n.getChildren();
    }

    long[] result = {1L, dataSum};
    if (children.size() == 0) {
      return result;
    }
    StringBuilder childBuilder = new StringBuilder();
    for (String child : children) {
      long[] childResult =
          printZnode(dataTree, name + (name.equals(""/"") ? """" : ""/"") + child, childBuilder,
              level + 1, maxDepth);
      result[0] = result[0] + childResult[0];
      result[1] = result[1] + childResult[1];
    }

    if (maxDepth == 0 || level <= maxDepth) {
      String tab = String.join("""", Collections.nCopies(level, ""--""));
      builder.append(tab + "" "" + name + ""\n"");
      builder.append(tab + ""   children: "" + (result[0] - 1) + ""\n"");
      builder.append(tab + ""   data: "" + result[1] + ""\n"");
      builder.append(childBuilder);
    }
    return result;
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotRecursiveSummary.java,SnapshotRecursiveSummary,getUsage,String getUsage(),"[119, 133]","{'A761': [(119, 133)]}",{'A761': 1.0},A761,,"  public static String getUsage() {
    String newLine = System.getProperty(""line.separator"");
    return String.join(newLine,
        ""USAGE:"",
        newLine,
        ""SnapshotRecursiveSummary  <snapshot_file>  <starting_node>  <max_depth>"",
        newLine,
        ""snapshot_file:    path to the zookeeper snapshot"",
        ""starting_node:    the path in the zookeeper tree where the traversal should begin"",
        ""max_depth:        defines the depth where the tool still writes to the output. ""
            + ""0 means there is no depth limit, every non-leaf node's stats will be displayed, ""
            + ""1 means it will only contain the starting node's and it's children's stats, ""
            + ""2 ads another level and so on. This ONLY affects the level of details displayed, ""
            + ""NOT the calculation."");
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogEntry.java,TxnLogEntry,getTxn,Record getTxn(),"[39, 41]","{'A612': [(39, 41)]}",{'A612': 1.0},A612,,"    public Record getTxn() {
        return txn;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogEntry.java,TxnLogEntry,getHeader,TxnHeader getHeader(),"[43, 45]","{'A612': [(43, 45)]}",{'A612': 1.0},A612,,"    public TxnHeader getHeader() {
        return header;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogEntry.java,TxnLogEntry,getDigest,TxnDigest getDigest(),"[47, 49]","{'A612': [(47, 49)]}",{'A612': 1.0},A612,,"    public TxnDigest getDigest() {
        return digest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/TxnLogEntry.java,TxnLogEntry,toRequest,Request toRequest(),"[51, 53]","{'A625': [(51, 53)]}",{'A625': 1.0},A625,,"    public Request toRequest() {
        return new Request(header, txn, digest);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,addSession,"void addSession(long,ServerCnxn)","[68, 70]","{'A612': [(68, 70)]}",{'A612': 1.0},A612,,"    public void addSession(long sessionId, ServerCnxn cnxn) {
        sessionMap.put(sessionId, cnxn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,removeCnxnFromSessionMap,void removeCnxnFromSessionMap(ServerCnxn),"[72, 77]","{'A612': [(72, 77)]}",{'A612': 1.0},A612,,"    public void removeCnxnFromSessionMap(ServerCnxn cnxn) {
        long sessionId = cnxn.getSessionId();
        if (sessionId != 0) {
            sessionMap.remove(sessionId);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,closeSession,"boolean closeSession(long,ServerCnxn.DisconnectReason)","[83, 94]","{'A612': [(84, 86), (88, 94)], 'A604': [(83, 83), (87, 87)]}","{'A612': 0.8333333333333334, 'A604': 0.16666666666666666}",A612,,"    public boolean closeSession(long sessionId, ServerCnxn.DisconnectReason reason) {
        ServerCnxn cnxn = sessionMap.remove(sessionId);
        if (cnxn != null) {
            try {
                cnxn.close(reason);
            } catch (Exception e) {
                LOG.warn(""exception during session close"", e);
            }
            return true;
        }
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,getNumAliveConnections,int getNumAliveConnections(),"[100, 102]","{'A591': [(101, 101)], 'A639': [(100, 100), (102, 102)]}","{'A591': 0.3333333333333333, 'A639': 0.6666666666666666}",A639,,"    public int getNumAliveConnections() {
        return cnxns.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,getZooKeeperServer,ZooKeeperServer getZooKeeperServer(),"[104, 106]","{'A591': [(105, 106)], 'A604': [(104, 104)]}","{'A591': 0.6666666666666666, 'A604': 0.3333333333333333}",A591,,"    public final ZooKeeperServer getZooKeeperServer() {
        return zkServer;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,configure,"void configure(InetSocketAddress,int)","[108, 110]","{'A630': [(108, 108), (110, 110)], 'A689': [(109, 109)]}","{'A630': 0.6666666666666666, 'A689': 0.3333333333333333}",A630,,"    public void configure(InetSocketAddress addr, int maxcc) throws IOException {
        configure(addr, maxcc, -1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,configure,"void configure(InetSocketAddress,int,int)","[112, 114]","{'A689': [(112, 114)]}",{'A689': 1.0},A689,,"    public void configure(InetSocketAddress addr, int maxcc, int backlog) throws IOException {
        configure(addr, maxcc, backlog, false);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,isSecure,boolean isSecure(),"[128, 130]","{'A630': [(128, 130)]}",{'A630': 1.0},A630,,"    public boolean isSecure() {
        return secure;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,startup,void startup(ZooKeeperServer),"[132, 134]","{'A630': [(132, 134)]}",{'A630': 1.0},A630,,"    public void startup(ZooKeeperServer zkServer) throws IOException, InterruptedException {
        startup(zkServer, true);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,setZooKeeperServer,void setZooKeeperServer(ZooKeeperServer),"[150, 159]","{'A583': [(150, 150)], 'A591': [(158, 159)], 'A630': [(151, 157)]}","{'A583': 0.1, 'A591': 0.2, 'A630': 0.7}",A630,,"    public final void setZooKeeperServer(ZooKeeperServer zks) {
        this.zkServer = zks;
        if (zks != null) {
            if (secure) {
                zks.setSecureServerCnxnFactory(this);
            } else {
                zks.setServerCnxnFactory(this);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,createFactory,ServerCnxnFactory createFactory(),"[163, 178]","{'A583': [(163, 164), (170, 171), (175, 175)], 'A591': [(165, 168), (174, 174), (176, 178)], 'A613': [(169, 169)], 'A594': [(172, 173)]}","{'A583': 0.3125, 'A591': 0.5, 'A613': 0.0625, 'A594': 0.125}",A591,,"    public static ServerCnxnFactory createFactory() throws IOException {
        String serverCnxnFactoryName = System.getProperty(ZOOKEEPER_SERVER_CNXN_FACTORY);
        if (serverCnxnFactoryName == null) {
            serverCnxnFactoryName = NIOServerCnxnFactory.class.getName();
        }
        try {
            ServerCnxnFactory serverCnxnFactory = (ServerCnxnFactory) Class.forName(serverCnxnFactoryName)
                                                                           .getDeclaredConstructor()
                                                                           .newInstance();
            LOG.info(""Using {} as server connection factory"", serverCnxnFactoryName);
            return serverCnxnFactory;
        } catch (Exception e) {
            IOException ioe = new IOException(""Couldn't instantiate "" + serverCnxnFactoryName, e);
            throw ioe;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,createFactory,"ServerCnxnFactory createFactory(int,int)","[180, 182]","{'A583': [(180, 180)], 'A689': [(181, 182)]}","{'A583': 0.3333333333333333, 'A689': 0.6666666666666666}",A689,,"    public static ServerCnxnFactory createFactory(int clientPort, int maxClientCnxns) throws IOException {
        return createFactory(new InetSocketAddress(clientPort), maxClientCnxns, -1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,createFactory,"ServerCnxnFactory createFactory(int,int,int)","[184, 186]","{'A583': [(184, 184)], 'A591': [(186, 186)], 'A689': [(185, 185)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A689': 0.3333333333333333}",A583,,"    public static ServerCnxnFactory createFactory(int clientPort, int maxClientCnxns, int backlog) throws IOException {
        return createFactory(new InetSocketAddress(clientPort), maxClientCnxns, backlog);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,createFactory,"ServerCnxnFactory createFactory(InetSocketAddress,int)","[188, 190]","{'A583': [(188, 188)], 'A689': [(189, 190)]}","{'A583': 0.3333333333333333, 'A689': 0.6666666666666666}",A689,,"    public static ServerCnxnFactory createFactory(InetSocketAddress addr, int maxClientCnxns) throws IOException {
        return createFactory(addr, maxClientCnxns, -1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,createFactory,"ServerCnxnFactory createFactory(InetSocketAddress,int,int)","[192, 196]","{'A583': [(192, 192)], 'A591': [(193, 193), (195, 196)], 'A689': [(194, 194)]}","{'A583': 0.2, 'A591': 0.6, 'A689': 0.2}",A591,,"    public static ServerCnxnFactory createFactory(InetSocketAddress addr, int maxClientCnxns, int backlog) throws IOException {
        ServerCnxnFactory factory = createFactory();
        factory.configure(addr, maxClientCnxns, backlog);
        return factory;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,unregisterConnection,void unregisterConnection(ServerCnxn),"[209, 214]","{'A583': [(211, 211)], 'A591': [(209, 210), (212, 214)]}","{'A583': 0.16666666666666666, 'A591': 0.8333333333333334}",A591,,"    public void unregisterConnection(ServerCnxn serverCnxn) {
        ConnectionBean jmxConnectionBean = connectionBeans.remove(serverCnxn);
        if (jmxConnectionBean != null) {
            MBeanRegistry.getInstance().unregister(jmxConnectionBean);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,registerConnection,void registerConnection(ServerCnxn),"[216, 227]","{'A591': [(216, 227)]}",{'A591': 1.0},A591,,"    public void registerConnection(ServerCnxn serverCnxn) {
        if (zkServer != null) {
            ConnectionBean jmxConnectionBean = new ConnectionBean(serverCnxn, zkServer);
            try {
                MBeanRegistry.getInstance().register(jmxConnectionBean, zkServer.jmxServerBean);
                connectionBeans.put(serverCnxn, jmxConnectionBean);
            } catch (JMException e) {
                LOG.warn(""Could not register connection"", e);
            }
        }

    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,configureSaslLogin,void configureSaslLogin(),"[239, 287]","{'A583': [(240, 240), (243, 243), (260, 260), (284, 285)], 'A591': [(239, 239), (241, 242), (244, 259), (261, 261), (263, 266), (268, 274), (281, 283), (286, 287)], 'A652': [(275, 279)], 'A592': [(280, 280)], 'A762': [(262, 262)], 'A702': [(267, 267)]}","{'A583': 0.10204081632653061, 'A591': 0.7346938775510204, 'A652': 0.10204081632653061, 'A592': 0.02040816326530612, 'A762': 0.02040816326530612, 'A702': 0.02040816326530612}",A591,,"    protected void configureSaslLogin() throws IOException {
        String serverSection = System.getProperty(ZooKeeperSaslServer.LOGIN_CONTEXT_NAME_KEY, ZooKeeperSaslServer.DEFAULT_LOGIN_CONTEXT_NAME);

        // Note that 'Configuration' here refers to javax.security.auth.login.Configuration.
        AppConfigurationEntry[] entries = null;
        SecurityException securityException = null;
        try {
            entries = Configuration.getConfiguration().getAppConfigurationEntry(serverSection);
        } catch (SecurityException e) {
            // handle below: might be harmless if the user doesn't intend to use JAAS authentication.
            securityException = e;
        }

        // No entries in jaas.conf
        // If there's a configuration exception fetching the jaas section and
        // the user has required sasl by specifying a LOGIN_CONTEXT_NAME_KEY or a jaas file
        // we throw an exception otherwise we continue without authentication.
        if (entries == null) {
            String jaasFile = System.getProperty(Environment.JAAS_CONF_KEY);
            String loginContextName = System.getProperty(ZooKeeperSaslServer.LOGIN_CONTEXT_NAME_KEY);
            if (securityException != null && (loginContextName != null || jaasFile != null)) {
                String errorMessage = ""No JAAS configuration section named '"" + serverSection + ""' was found"";
                if (jaasFile != null) {
                    errorMessage += "" in '"" + jaasFile + ""'."";
                }
                if (loginContextName != null) {
                    errorMessage += "" But "" + ZooKeeperSaslServer.LOGIN_CONTEXT_NAME_KEY + "" was set."";
                }
                LOG.error(errorMessage, securityException);
                throw new IOException(errorMessage);
            }
            return;
        }

        // jaas.conf entry available
        try {
            Map<String, String> credentials = getDigestMd5Credentials(entries);
            Supplier<CallbackHandler> callbackHandlerSupplier = () -> {
                return new SaslServerCallbackHandler(credentials);
            };
            login = new Login(serverSection, callbackHandlerSupplier, new ZKConfig());
            setLoginUser(login.getUserName());
            login.startThreadIfNeeded();
        } catch (LoginException e) {
            throw new IOException(""Could not configure server because SASL configuration did not allow the ""
                                  + "" ZooKeeper server to authenticate itself properly: ""
                                  + e);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,getDigestMd5Credentials,"Map<String, String> getDigestMd5Credentials(AppConfigurationEntry[])","[294, 309]","{'A652': [(294, 309)]}",{'A652': 1.0},A652,,"    private static Map<String, String> getDigestMd5Credentials(final  AppConfigurationEntry[] appConfigurationEntries) {
        Map<String, String> credentials = new HashMap<>();
        for (AppConfigurationEntry entry : appConfigurationEntries) {
            Map<String, ?> options = entry.getOptions();
            // Populate DIGEST-MD5 user -> password map with JAAS configuration entries from the ""Server"" section.
            // Usernames are distinguished from other options by prefixing the username with a ""user_"" prefix.
            for (Map.Entry<String, ?> pair : options.entrySet()) {
                String key = pair.getKey();
                if (key.startsWith(DIGEST_MD5_USER_PREFIX)) {
                    String userName = key.substring(DIGEST_MD5_USER_PREFIX.length());
                    credentials.put(userName, (String) pair.getValue());
                }
            }
        }
        return credentials;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,setLoginUser,void setLoginUser(String),"[311, 314]","{'A592': [(311, 314)]}",{'A592': 1.0},A592,,"    private static void setLoginUser(String name) {
        //Created this method to avoid ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD find bug issue
        loginUser = name;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,getUserName,String getUserName(),"[319, 321]","{'A592': [(319, 321)]}",{'A592': 1.0},A592,,"    public static String getUserName() {
        return loginUser;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,getMaxCnxns,int getMaxCnxns(),"[326, 328]","{'A670': [(326, 328)]}",{'A670': 1.0},A670,,"    public int getMaxCnxns() {
        return maxCnxns;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,initMaxCnxns,void initMaxCnxns(),"[330, 342]","{'A670': [(330, 333), (335, 342)], 'A763': [(334, 334)]}","{'A670': 0.9230769230769231, 'A763': 0.07692307692307693}",A670,,"    protected void initMaxCnxns() {
        maxCnxns = Integer.getInteger(ZOOKEEPER_MAX_CONNECTION, ZOOKEEPER_MAX_CONNECTION_DEFAULT);
        if (maxCnxns < 0) {
            maxCnxns = ZOOKEEPER_MAX_CONNECTION_DEFAULT;
            LOG.warn(""maxCnxns should be greater than or equal to 0, using default value {}."",
                    ZOOKEEPER_MAX_CONNECTION_DEFAULT);
        } else if (maxCnxns == ZOOKEEPER_MAX_CONNECTION_DEFAULT) {
            LOG.warn(""maxCnxns is not configured, using default value {}."",
                    ZOOKEEPER_MAX_CONNECTION_DEFAULT);
        } else {
            LOG.info(""maxCnxns configured value is {}."", maxCnxns);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxnFactory.java,ServerCnxnFactory,limitTotalNumberOfCnxns,boolean limitTotalNumberOfCnxns(),"[347, 358]","{'A670': [(347, 358)]}",{'A670': 1.0},A670,,"    protected boolean limitTotalNumberOfCnxns() {
        if (maxCnxns <= 0) {
            // maxCnxns limit is disabled
            return false;
        }
        int cnxns = getNumAliveConnections();
        if (cnxns >= maxCnxns) {
            LOG.error(""Too many connections "" + cnxns + "" - max is "" + maxCnxns);
            return true;
        }
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,put,"DataNode put(String,DataNode)","[46, 54]","{'A612': [(46, 54)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public DataNode put(String path, DataNode node) {
        DataNode oldNode = nodes.put(path, node);
        addDigest(path, node);
        if (oldNode != null) {
            removeDigest(path, oldNode);
        }
        return oldNode;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,putWithoutDigest,"DataNode putWithoutDigest(String,DataNode)","[56, 59]","{'A612': [(56, 59)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public DataNode putWithoutDigest(String path, DataNode node) {
        return nodes.put(path, node);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,get,DataNode get(String),"[61, 64]","{'A612': [(61, 64)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public DataNode get(String path) {
        return nodes.get(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,remove,DataNode remove(String),"[66, 73]","{'A612': [(66, 73)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public DataNode remove(String path) {
        DataNode oldNode = nodes.remove(path);
        if (oldNode != null) {
            removeDigest(path, oldNode);
        }
        return oldNode;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,entrySet,"Set<Map.Entry<String, DataNode>> entrySet()","[75, 78]","{'A612': [(75, 78)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public Set<Map.Entry<String, DataNode>> entrySet() {
        return nodes.entrySet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,clear,void clear(),"[80, 84]","{'A612': [(80, 84)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public void clear() {
        nodes.clear();
        hash.clear();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,size,int size(),"[86, 89]","{'A612': [(86, 89)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public int size() {
        return nodes.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,preChange,"void preChange(String,DataNode)","[91, 94]","{'A612': [(91, 94)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public void preChange(String path, DataNode node) {
        removeDigest(path, node);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,postChange,"void postChange(String,DataNode)","[96, 102]","{'A612': [(96, 102)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public void postChange(String path, DataNode node) {
        // we just made a change, so make sure the digest is
        // invalidated
        node.digestCached = false;
        addDigest(path, node);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,addDigest,"void addDigest(String,DataNode)","[104, 112]","{'A612': [(104, 109), (111, 112)], 'A653': [(110, 110)]}","{'A612': 0.8888888888888888, 'A653': 0.1111111111111111}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    private void addDigest(String path, DataNode node) {
        // Excluding everything under '/zookeeper/' for digest calculation.
        if (path.startsWith(ZooDefs.ZOOKEEPER_NODE_SUBTREE)) {
            return;
        }
        if (digestEnabled) {
            hash.addDigest(digestCalculator.calculateDigest(path, node));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,removeDigest,"void removeDigest(String,DataNode)","[114, 122]","{'A612': [(114, 119), (121, 122)], 'A653': [(120, 120)]}","{'A612': 0.8888888888888888, 'A653': 0.1111111111111111}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    private void removeDigest(String path, DataNode node) {
        // Excluding everything under '/zookeeper/' for digest calculation.
        if (path.startsWith(ZooDefs.ZOOKEEPER_NODE_SUBTREE)) {
            return;
        }
        if (digestEnabled) {
            hash.removeDigest(digestCalculator.calculateDigest(path, node));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NodeHashMapImpl.java,NodeHashMapImpl,getDigest,long getDigest(),"[124, 127]","{'A612': [(124, 127)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NodeHashMapImplTest.java,"    @Override
    public long getDigest() {
        return hash.getHash();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,applyRequest,ProcessTxnResult applyRequest(Request),"[110, 144]","{'A583': [(122, 123)], 'A590': [(112, 112), (125, 127)], 'A675': [(110, 110), (124, 124), (143, 144)], 'A694': [(111, 111)], 'A630': [(113, 121)], 'A713': [(128, 137), (140, 142)], 'A653': [(138, 138)], 'A584': [(139, 139)]}","{'A583': 0.05714285714285714, 'A590': 0.11428571428571428, 'A675': 0.11428571428571428, 'A694': 0.02857142857142857, 'A630': 0.2571428571428571, 'A713': 0.37142857142857144, 'A653': 0.02857142857142857, 'A584': 0.02857142857142857}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    private ProcessTxnResult applyRequest(Request request) {
        ProcessTxnResult rc = zks.processTxn(request);

        // ZOOKEEPER-558:
        // In some cases the server does not close the connection (e.g., closeconn buffer
        // was not being queued — ZOOKEEPER-558) properly. This happens, for example,
        // when the client closes the connection. The server should still close the session, though.
        // Calling closeSession() after losing the cnxn, results in the client close session response being dropped.
        if (request.type == OpCode.closeSession && connClosedByClient(request)) {
            // We need to check if we can close the session id.
            // Sometimes the corresponding ServerCnxnFactory could be null because
            // we are just playing diffs from the leader.
            if (closeSession(zks.serverCnxnFactory, request.sessionId)
                || closeSession(zks.secureServerCnxnFactory, request.sessionId)) {
                return rc;
            }
        }

        if (request.getHdr() != null) {
            /*
             * Request header is created only by the leader, so this must be
             * a quorum request. Since we're comparing timestamps across hosts,
             * this metric may be incorrect. However, it's still a very useful
             * metric to track in the happy case. If there is clock drift,
             * the latency can go negative. Note: headers use wall time, not
             * CLOCK_MONOTONIC.
             */
            long propagationLatency = Time.currentWallTime() - request.getHdr().getTime();
            if (propagationLatency >= 0) {
                ServerMetrics.getMetrics().PROPAGATION_LATENCY.add(propagationLatency);
            }
        }

        return rc;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,processRequest,void processRequest(Request),"[146, 627]","{'A583': [(189, 189), (201, 201), (230, 230), (234, 234), (237, 262), (265, 265), (272, 272), (275, 275), (278, 289), (294, 294), (330, 330), (332, 332), (350, 350), (363, 363), (378, 378), (385, 385), (393, 393), (395, 400), (403, 403), (408, 408), (421, 421), (428, 428), (434, 438), (441, 441), (445, 451), (470, 470), (478, 478), (484, 490), (494, 494), (497, 497), (504, 511), (518, 518), (521, 521), (523, 523), (531, 531), (534, 534), (536, 536), (549, 549), (556, 557), (582, 584), (588, 588), (623, 623)], 'A591': [(177, 177), (225, 225), (308, 310), (312, 313), (529, 530), (532, 532), (540, 541), (571, 571), (619, 619)], 'A590': [(160, 164), (167, 167), (170, 170), (173, 173), (176, 176), (191, 192), (197, 197), (213, 213), (215, 215), (217, 217), (219, 219), (222, 222), (224, 224), (226, 226), (228, 229), (231, 233), (235, 236), (263, 264), (266, 269), (299, 300), (303, 303), (316, 316), (319, 319), (322, 323), (326, 326), (328, 328), (333, 334), (338, 338), (341, 341), (344, 344), (346, 346), (349, 349), (351, 351), (353, 353), (355, 356), (359, 360), (362, 362), (365, 367), (379, 379), (381, 381), (384, 384), (389, 389), (392, 392), (427, 427), (466, 466), (469, 469), (474, 475), (496, 496), (566, 570), (572, 577), (579, 581), (586, 587), (589, 589), (591, 592), (620, 622), (626, 627)], 'A602': [(331, 331)], 'A613': [(430, 433), (439, 440), (444, 444), (452, 453), (455, 465)], 'A636': [(401, 402), (406, 407), (409, 420), (422, 425)], 'A641': [(476, 477), (479, 483), (491, 493)], 'A616': [(305, 305), (307, 307), (314, 315)], 'A626': [(270, 271), (273, 274), (276, 277), (290, 293), (295, 297), (387, 387), (472, 472)], 'A592': [(178, 178), (211, 211), (542, 546)], 'A639': [(306, 306), (327, 327), (329, 329), (516, 517), (519, 519), (522, 522), (524, 525), (527, 528)], 'A644': [(547, 548), (550, 552), (554, 555), (558, 564)], 'A596': [(172, 172), (193, 193), (198, 199), (214, 214), (220, 221), (227, 227), (298, 298), (301, 301), (304, 304), (317, 317), (320, 321), (324, 324), (335, 337), (339, 339), (342, 343), (345, 345), (347, 348), (354, 354), (361, 361), (382, 383), (390, 391), (394, 394), (404, 405), (426, 426), (467, 468), (495, 495), (498, 498), (501, 503), (512, 512), (514, 515), (565, 565), (578, 578), (585, 585)], 'A604': [(302, 302), (311, 311), (318, 318), (325, 325), (340, 340), (352, 352), (380, 380), (388, 388), (442, 443), (473, 473), (513, 513), (526, 526), (539, 539), (593, 593), (595, 596), (598, 604), (606, 610), (612, 614), (618, 618)], 'A675': [(146, 149), (154, 159), (168, 169), (171, 171), (175, 175), (202, 210), (212, 212), (218, 218), (594, 594), (605, 605), (611, 611), (615, 615), (624, 625)], 'A630': [(535, 535), (537, 538)], 'A713': [(165, 166), (216, 216), (223, 223), (590, 590)], 'A764': [(150, 153)], 'A647': [(174, 174), (364, 364), (386, 386), (429, 429), (471, 471), (499, 500), (520, 520), (533, 533), (597, 597), (616, 617)], 'A648': [(179, 188), (190, 190)], 'A612': [(194, 196)], 'A597': [(200, 200)], 'A625': [(357, 358)], 'A628': [(368, 377)], 'A605': [(454, 454)], 'A603': [(553, 553)]}","{'A583': 0.22614107883817428, 'A591': 0.029045643153526972, 'A590': 0.19294605809128632, 'A602': 0.002074688796680498, 'A613': 0.04149377593360996, 'A636': 0.04149377593360996, 'A641': 0.02074688796680498, 'A616': 0.008298755186721992, 'A626': 0.03112033195020747, 'A592': 0.014522821576763486, 'A639': 0.022821576763485476, 'A644': 0.029045643153526972, 'A596': 0.0975103734439834, 'A604': 0.06846473029045644, 'A675': 0.06431535269709543, 'A630': 0.006224066390041493, 'A713': 0.01037344398340249, 'A764': 0.008298755186721992, 'A647': 0.024896265560165973, 'A648': 0.022821576763485476, 'A612': 0.006224066390041493, 'A597': 0.002074688796680498, 'A625': 0.004149377593360996, 'A628': 0.02074688796680498, 'A605': 0.002074688796680498, 'A603': 0.002074688796680498}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    public void processRequest(Request request) {
        LOG.debug(""Processing request:: {}"", request);

        if (LOG.isTraceEnabled()) {
            long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;
            if (request.type == OpCode.ping) {
                traceMask = ZooTrace.SERVER_PING_TRACE_MASK;
            }
            ZooTrace.logRequest(LOG, traceMask, 'E', request, """");
        }
        ProcessTxnResult rc = null;
        if (!request.isThrottled()) {
          rc = applyRequest(request);
        }
        if (request.cnxn == null) {
            return;
        }
        ServerCnxn cnxn = request.cnxn;

        long lastZxid = zks.getZKDatabase().getDataTreeLastProcessedZxid();

        String lastOp = ""NA"";
        // Notify ZooKeeperServer that the request has finished so that it can
        // update any request accounting/throttling limits
        zks.decInProcess();
        zks.requestFinished(request);
        Code err = Code.OK;
        Record rsp = null;
        String path = null;
        int responseSize = 0;
        try {
            if (request.getHdr() != null && request.getHdr().getType() == OpCode.error) {
                AuditHelper.addAuditLog(request, rc, true);
                /*
                 * When local session upgrading is disabled, leader will
                 * reject the ephemeral node creation due to session expire.
                 * However, if this is the follower that issue the request,
                 * it will have the correct error code, so we should use that
                 * and report to user
                 */
                if (request.getException() != null) {
                    throw request.getException();
                } else {
                    throw KeeperException.create(KeeperException.Code.get(((ErrorTxn) request.getTxn()).getErr()));
                }
            }

            KeeperException ke = request.getException();
            if (ke instanceof SessionMovedException) {
                throw ke;
            }
            if (ke != null && request.type != OpCode.multi) {
                throw ke;
            }

            LOG.debug(""{}"", request);

            if (request.isStale()) {
                ServerMetrics.getMetrics().STALE_REPLIES.add(1);
            }

            if (request.isThrottled()) {
              throw KeeperException.create(Code.THROTTLEDOP);
            }

            AuditHelper.addAuditLog(request, rc);

            switch (request.type) {
            case OpCode.ping: {
                lastOp = ""PING"";
                updateStats(request, lastOp, lastZxid);

                responseSize = cnxn.sendResponse(new ReplyHeader(ClientCnxn.PING_XID, lastZxid, 0), null, ""response"");
                return;
            }
            case OpCode.createSession: {
                lastOp = ""SESS"";
                updateStats(request, lastOp, lastZxid);

                zks.finishSessionInit(request.cnxn, true);
                return;
            }
            case OpCode.multi: {
                lastOp = ""MULT"";
                rsp = new MultiResponse();

                for (ProcessTxnResult subTxnResult : rc.multiResult) {

                    OpResult subResult;

                    switch (subTxnResult.type) {
                    case OpCode.check:
                        subResult = new CheckResult();
                        break;
                    case OpCode.create:
                        subResult = new CreateResult(subTxnResult.path);
                        break;
                    case OpCode.create2:
                    case OpCode.createTTL:
                    case OpCode.createContainer:
                        subResult = new CreateResult(subTxnResult.path, subTxnResult.stat);
                        break;
                    case OpCode.delete:
                    case OpCode.deleteContainer:
                        subResult = new DeleteResult();
                        break;
                    case OpCode.setData:
                        subResult = new SetDataResult(subTxnResult.stat);
                        break;
                    case OpCode.error:
                        subResult = new ErrorResult(subTxnResult.err);
                        if (subTxnResult.err == Code.SESSIONMOVED.intValue()) {
                            throw new SessionMovedException();
                        }
                        break;
                    default:
                        throw new IOException(""Invalid type of op"");
                    }

                    ((MultiResponse) rsp).add(subResult);
                }

                break;
            }
            case OpCode.multiRead: {
                lastOp = ""MLTR"";
                MultiOperationRecord multiReadRecord = request.readRequestRecord(MultiOperationRecord::new);
                rsp = new MultiResponse();
                OpResult subResult;
                for (Op readOp : multiReadRecord) {
                    try {
                        Record rec;
                        switch (readOp.getType()) {
                        case OpCode.getChildren:
                            rec = handleGetChildrenRequest(readOp.toRequestRecord(), cnxn, request.authInfo);
                            subResult = new GetChildrenResult(((GetChildrenResponse) rec).getChildren());
                            break;
                        case OpCode.getData:
                            rec = handleGetDataRequest(readOp.toRequestRecord(), cnxn, request.authInfo);
                            GetDataResponse gdr = (GetDataResponse) rec;
                            subResult = new GetDataResult(gdr.getData(), gdr.getStat());
                            break;
                        default:
                            throw new IOException(""Invalid type of readOp"");
                        }
                    } catch (KeeperException e) {
                        subResult = new ErrorResult(e.code().intValue());
                    }
                    ((MultiResponse) rsp).add(subResult);
                }
                break;
            }
            case OpCode.create: {
                lastOp = ""CREA"";
                rsp = new CreateResponse(rc.path);
                err = Code.get(rc.err);
                requestPathMetricsCollector.registerRequest(request.type, rc.path);
                break;
            }
            case OpCode.create2:
            case OpCode.createTTL:
            case OpCode.createContainer: {
                lastOp = ""CREA"";
                rsp = new Create2Response(rc.path, rc.stat);
                err = Code.get(rc.err);
                requestPathMetricsCollector.registerRequest(request.type, rc.path);
                break;
            }
            case OpCode.delete:
            case OpCode.deleteContainer: {
                lastOp = ""DELE"";
                err = Code.get(rc.err);
                requestPathMetricsCollector.registerRequest(request.type, rc.path);
                break;
            }
            case OpCode.setData: {
                lastOp = ""SETD"";
                rsp = new SetDataResponse(rc.stat);
                err = Code.get(rc.err);
                requestPathMetricsCollector.registerRequest(request.type, rc.path);
                break;
            }
            case OpCode.reconfig: {
                lastOp = ""RECO"";
                rsp = new GetDataResponse(
                    ((QuorumZooKeeperServer) zks).self.getQuorumVerifier().toString().getBytes(UTF_8),
                    rc.stat);
                err = Code.get(rc.err);
                break;
            }
            case OpCode.setACL: {
                lastOp = ""SETA"";
                rsp = new SetACLResponse(rc.stat);
                err = Code.get(rc.err);
                requestPathMetricsCollector.registerRequest(request.type, rc.path);
                break;
            }
            case OpCode.closeSession: {
                lastOp = ""CLOS"";
                err = Code.get(rc.err);
                break;
            }
            case OpCode.sync: {
                lastOp = ""SYNC"";
                SyncRequest syncRequest = request.readRequestRecord(SyncRequest::new);
                rsp = new SyncResponse(syncRequest.getPath());
                requestPathMetricsCollector.registerRequest(request.type, syncRequest.getPath());
                break;
            }
            case OpCode.check: {
                lastOp = ""CHEC"";
                rsp = new SetDataResponse(rc.stat);
                err = Code.get(rc.err);
                break;
            }
            case OpCode.exists: {
                lastOp = ""EXIS"";
                ExistsRequest existsRequest = request.readRequestRecord(ExistsRequest::new);
                path = existsRequest.getPath();
                if (path.indexOf('\0') != -1) {
                    throw new KeeperException.BadArgumentsException();
                }
                DataNode n = zks.getZKDatabase().getNode(path);
                if (n != null) {
                    zks.checkACL(
                        request.cnxn,
                        zks.getZKDatabase().aclForNode(n),
                        ZooDefs.Perms.READ,
                        request.authInfo,
                        path,
                        null);
                }
                Stat stat = zks.getZKDatabase().statNode(path, existsRequest.getWatch() ? cnxn : null);
                rsp = new ExistsResponse(stat);
                requestPathMetricsCollector.registerRequest(request.type, path);
                break;
            }
            case OpCode.getData: {
                lastOp = ""GETD"";
                GetDataRequest getDataRequest = request.readRequestRecord(GetDataRequest::new);
                path = getDataRequest.getPath();
                rsp = handleGetDataRequest(getDataRequest, cnxn, request.authInfo);
                requestPathMetricsCollector.registerRequest(request.type, path);
                break;
            }
            case OpCode.setWatches: {
                lastOp = ""SETW"";
                SetWatches setWatches = request.readRequestRecord(SetWatches::new);
                long relativeZxid = setWatches.getRelativeZxid();
                zks.getZKDatabase()
                   .setWatches(
                       relativeZxid,
                       setWatches.getDataWatches(),
                       setWatches.getExistWatches(),
                       setWatches.getChildWatches(),
                       Collections.emptyList(),
                       Collections.emptyList(),
                       cnxn);
                break;
            }
            case OpCode.setWatches2: {
                lastOp = ""STW2"";
                SetWatches2 setWatches = request.readRequestRecord(SetWatches2::new);
                long relativeZxid = setWatches.getRelativeZxid();
                zks.getZKDatabase().setWatches(relativeZxid,
                        setWatches.getDataWatches(),
                        setWatches.getExistWatches(),
                        setWatches.getChildWatches(),
                        setWatches.getPersistentWatches(),
                        setWatches.getPersistentRecursiveWatches(),
                        cnxn);
                break;
            }
            case OpCode.addWatch: {
                lastOp = ""ADDW"";
                AddWatchRequest addWatcherRequest = request.readRequestRecord(AddWatchRequest::new);
                zks.getZKDatabase().addWatch(addWatcherRequest.getPath(), cnxn, addWatcherRequest.getMode());
                rsp = new ErrorResponse(0);
                break;
            }
            case OpCode.getACL: {
                lastOp = ""GETA"";
                GetACLRequest getACLRequest = request.readRequestRecord(GetACLRequest::new);
                path = getACLRequest.getPath();
                DataNode n = zks.getZKDatabase().getNode(path);
                if (n == null) {
                    throw new KeeperException.NoNodeException();
                }
                zks.checkACL(
                    request.cnxn,
                    zks.getZKDatabase().aclForNode(n),
                    ZooDefs.Perms.READ | ZooDefs.Perms.ADMIN, request.authInfo, path,
                    null);

                Stat stat = new Stat();
                List<ACL> acl = zks.getZKDatabase().getACL(path, stat);
                requestPathMetricsCollector.registerRequest(request.type, getACLRequest.getPath());

                try {
                    zks.checkACL(
                        request.cnxn,
                        zks.getZKDatabase().aclForNode(n),
                        ZooDefs.Perms.ADMIN,
                        request.authInfo,
                        path,
                        null);
                    rsp = new GetACLResponse(acl, stat);
                } catch (KeeperException.NoAuthException e) {
                    List<ACL> acl1 = new ArrayList<>(acl.size());
                    for (ACL a : acl) {
                        if (""digest"".equals(a.getId().getScheme())) {
                            Id id = a.getId();
                            Id id1 = new Id(id.getScheme(), id.getId().replaceAll("":.*"", "":x""));
                            acl1.add(new ACL(a.getPerms(), id1));
                        } else {
                            acl1.add(a);
                        }
                    }
                    rsp = new GetACLResponse(acl1, stat);
                }
                break;
            }
            case OpCode.getChildren: {
                lastOp = ""GETC"";
                GetChildrenRequest getChildrenRequest = request.readRequestRecord(GetChildrenRequest::new);
                path = getChildrenRequest.getPath();
                rsp = handleGetChildrenRequest(getChildrenRequest, cnxn, request.authInfo);
                requestPathMetricsCollector.registerRequest(request.type, path);
                break;
            }
            case OpCode.getAllChildrenNumber: {
                lastOp = ""GETACN"";
                GetAllChildrenNumberRequest getAllChildrenNumberRequest = request.readRequestRecord(GetAllChildrenNumberRequest::new);
                path = getAllChildrenNumberRequest.getPath();
                DataNode n = zks.getZKDatabase().getNode(path);
                if (n == null) {
                    throw new KeeperException.NoNodeException();
                }
                zks.checkACL(
                    request.cnxn,
                    zks.getZKDatabase().aclForNode(n),
                    ZooDefs.Perms.READ,
                    request.authInfo,
                    path,
                    null);
                int number = zks.getZKDatabase().getAllChildrenNumber(path);
                rsp = new GetAllChildrenNumberResponse(number);
                break;
            }
            case OpCode.getChildren2: {
                lastOp = ""GETC"";
                GetChildren2Request getChildren2Request = request.readRequestRecord(GetChildren2Request::new);
                Stat stat = new Stat();
                path = getChildren2Request.getPath();
                DataNode n = zks.getZKDatabase().getNode(path);
                if (n == null) {
                    throw new KeeperException.NoNodeException();
                }
                zks.checkACL(
                    request.cnxn,
                    zks.getZKDatabase().aclForNode(n),
                    ZooDefs.Perms.READ,
                    request.authInfo, path,
                    null);
                List<String> children = zks.getZKDatabase()
                                           .getChildren(path, stat, getChildren2Request.getWatch() ? cnxn : null);
                rsp = new GetChildren2Response(children, stat);
                requestPathMetricsCollector.registerRequest(request.type, path);
                break;
            }
            case OpCode.checkWatches: {
                lastOp = ""CHKW"";
                CheckWatchesRequest checkWatches = request.readRequestRecord(CheckWatchesRequest::new);
                WatcherType type = WatcherType.fromInt(checkWatches.getType());
                path = checkWatches.getPath();
                boolean containsWatcher = zks.getZKDatabase().containsWatcher(path, type, cnxn);
                if (!containsWatcher) {
                    String msg = String.format(Locale.ENGLISH, ""%s (type: %s)"", path, type);
                    throw new KeeperException.NoWatcherException(msg);
                }
                requestPathMetricsCollector.registerRequest(request.type, checkWatches.getPath());
                break;
            }
            case OpCode.removeWatches: {
                lastOp = ""REMW"";
                RemoveWatchesRequest removeWatches = request.readRequestRecord(RemoveWatchesRequest::new);
                WatcherType type = WatcherType.fromInt(removeWatches.getType());
                path = removeWatches.getPath();
                boolean removed = zks.getZKDatabase().removeWatch(path, type, cnxn);
                if (!removed) {
                    String msg = String.format(Locale.ENGLISH, ""%s (type: %s)"", path, type);
                    throw new KeeperException.NoWatcherException(msg);
                }
                requestPathMetricsCollector.registerRequest(request.type, removeWatches.getPath());
                break;
            }
            case OpCode.whoAmI: {
                lastOp = ""HOMI"";
                rsp = new WhoAmIResponse(AuthUtil.getClientInfos(request.authInfo));
                break;
             }
            case OpCode.getEphemerals: {
                lastOp = ""GETE"";
                GetEphemeralsRequest getEphemerals = request.readRequestRecord(GetEphemeralsRequest::new);
                String prefixPath = getEphemerals.getPrefixPath();
                Set<String> allEphems = zks.getZKDatabase().getDataTree().getEphemerals(request.sessionId);
                List<String> ephemerals = new ArrayList<>();
                if (prefixPath == null || prefixPath.trim().isEmpty() || ""/"".equals(prefixPath.trim())) {
                    ephemerals.addAll(allEphems);
                } else {
                    for (String p : allEphems) {
                        if (p.startsWith(prefixPath)) {
                            ephemerals.add(p);
                        }
                    }
                }
                rsp = new GetEphemeralsResponse(ephemerals);
                break;
            }
            }
        } catch (SessionMovedException e) {
            // session moved is a connection level error, we need to tear
            // down the connection otw ZOOKEEPER-710 might happen
            // ie client on slow follower starts to renew session, fails
            // before this completes, then tries the fast follower (leader)
            // and is successful, however the initial renew is then
            // successfully fwd/processed by the leader and as a result
            // the client and leader disagree on where the client is most
            // recently attached (and therefore invalid SESSION MOVED generated)
            cnxn.sendCloseSession();
            return;
        } catch (KeeperException e) {
            err = e.code();
        } catch (Exception e) {
            // log at error level as we are returning a marshalling
            // error to the user
            LOG.error(""Failed to process {}"", request, e);
            String digest = request.requestDigest();
            LOG.error(""Dumping request buffer for request type {}: 0x{}"", Request.op2String(request.type), digest);
            err = Code.MARSHALLINGERROR;
        }

        ReplyHeader hdr = new ReplyHeader(request.cxid, lastZxid, err.intValue());

        updateStats(request, lastOp, lastZxid);

        try {
            if (path == null || rsp == null) {
                responseSize = cnxn.sendResponse(hdr, rsp, ""response"");
            } else {
                int opCode = request.type;
                Stat stat = null;
                // Serialized read and get children responses could be cached by the connection
                // object. Cache entries are identified by their path and last modified zxid,
                // so these values are passed along with the response.
                switch (opCode) {
                    case OpCode.getData : {
                        GetDataResponse getDataResponse = (GetDataResponse) rsp;
                        stat = getDataResponse.getStat();
                        responseSize = cnxn.sendResponse(hdr, rsp, ""response"", path, stat, opCode);
                        break;
                    }
                    case OpCode.getChildren2 : {
                        GetChildren2Response getChildren2Response = (GetChildren2Response) rsp;
                        stat = getChildren2Response.getStat();
                        responseSize = cnxn.sendResponse(hdr, rsp, ""response"", path, stat, opCode);
                        break;
                    }
                    default:
                        responseSize = cnxn.sendResponse(hdr, rsp, ""response"");
                }
            }

            if (request.type == OpCode.closeSession) {
                cnxn.sendCloseSession();
            }
        } catch (IOException e) {
            LOG.error(""FIXMSG"", e);
        } finally {
            ServerMetrics.getMetrics().RESPONSE_BYTES.add(responseSize);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,handleGetChildrenRequest,"Record handleGetChildrenRequest(Record,ServerCnxn,List<Id>)","[629, 640]","{'A583': [(629, 629), (636, 638)], 'A626': [(630, 635), (639, 640)]}","{'A583': 0.3333333333333333, 'A626': 0.6666666666666666}",A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    private Record handleGetChildrenRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {
        GetChildrenRequest getChildrenRequest = (GetChildrenRequest) request;
        String path = getChildrenRequest.getPath();
        DataNode n = zks.getZKDatabase().getNode(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);
        List<String> children = zks.getZKDatabase()
                                   .getChildren(path, null, getChildrenRequest.getWatch() ? cnxn : null);
        return new GetChildrenResponse(children);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,handleGetDataRequest,"Record handleGetDataRequest(Record,ServerCnxn,List<Id>)","[642, 653]","{'A583': [(642, 642), (649, 649), (651, 651)], 'A626': [(643, 648), (650, 650), (652, 653)]}","{'A583': 0.25, 'A626': 0.75}",A626,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    private Record handleGetDataRequest(Record request, ServerCnxn cnxn, List<Id> authInfo) throws KeeperException, IOException {
        GetDataRequest getDataRequest = (GetDataRequest) request;
        String path = getDataRequest.getPath();
        DataNode n = zks.getZKDatabase().getNode(path);
        if (n == null) {
            throw new KeeperException.NoNodeException();
        }
        zks.checkACL(cnxn, zks.getZKDatabase().aclForNode(n), ZooDefs.Perms.READ, authInfo, path, null);
        Stat stat = new Stat();
        byte[] b = zks.getZKDatabase().getData(path, stat, getDataRequest.getWatch() ? cnxn : null);
        return new GetDataResponse(b, stat);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,closeSession,"boolean closeSession(ServerCnxnFactory,long)","[655, 660]","{'A604': [(659, 659)], 'A630': [(655, 658), (660, 660)]}","{'A604': 0.16666666666666666, 'A630': 0.8333333333333334}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    private boolean closeSession(ServerCnxnFactory serverCnxnFactory, long sessionId) {
        if (serverCnxnFactory == null) {
            return false;
        }
        return serverCnxnFactory.closeSession(sessionId, ServerCnxn.DisconnectReason.CLIENT_CLOSED_SESSION);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,connClosedByClient,boolean connClosedByClient(Request),"[662, 664]","{'A630': [(662, 664)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    private boolean connClosedByClient(Request request) {
        return request.cnxn == null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,shutdown,void shutdown(),"[666, 669]","{'A590': [(666, 669)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    public void shutdown() {
        // we are the final link in the chain
        LOG.info(""shutdown of request processor complete"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/FinalRequestProcessor.java,FinalRequestProcessor,updateStats,"void updateStats(Request,String,long)","[671, 678]","{'A583': [(677, 677)], 'A713': [(671, 676), (678, 678)]}","{'A583': 0.125, 'A713': 0.875}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/FinalRequestProcessorTest.java,"    private void updateStats(Request request, String lastOp, long lastZxid) {
        if (request.cnxn == null) {
            return;
        }
        long currentTime = Time.currentElapsedTime();
        zks.serverStats().updateLatency(request, currentTime);
        request.cnxn.updateStatsForResponse(request.cxid, lastZxid, lastOp, request.createTime, currentTime);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferRequestRecord.java,ByteBufferRequestRecord,readRecord,T readRecord(Supplier<T>),"[36, 48]","{'A583': [(36, 48)]}",{'A583': 1.0},A583,,"    @SuppressWarnings(""unchecked"")
    @Override
    public <T extends Record> T readRecord(Supplier<T> constructor) throws IOException {
        if (record != null) {
            return (T) record;
        }

        record = constructor.get();
        request.rewind();
        ByteBufferInputStream.byteBuffer2Record(request, record);
        request.rewind();
        return (T) record;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferRequestRecord.java,ByteBufferRequestRecord,readBytes,byte[] readBytes(),"[50, 58]","{'A583': [(50, 58)]}",{'A583': 1.0},A583,,"    @Override
    public byte[] readBytes() {
        request.rewind();
        int len = request.remaining();
        byte[] b = new byte[len];
        request.get(b);
        request.rewind();
        return b;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferRequestRecord.java,ByteBufferRequestRecord,limit,int limit(),"[60, 63]","{'A583': [(60, 63)]}",{'A583': 1.0},A583,,"    @Override
    public int limit() {
        return request.limit();
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbedded.java,ZookKeeperServerEmbeddedBuilder,baseDir,ZookKeeperServerEmbeddedBuilder baseDir(Path),"[60, 63]","{'A584': [(60, 63)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerEmbeddedTest.java,"        public ZookKeeperServerEmbeddedBuilder baseDir(Path baseDir) {
            this.baseDir = Objects.requireNonNull(baseDir);
            return this;
        }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbedded.java,ZookKeeperServerEmbeddedBuilder,configuration,ZookKeeperServerEmbeddedBuilder configuration(Properties),"[70, 73]","{'A584': [(70, 73)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerEmbeddedTest.java,"        public ZookKeeperServerEmbeddedBuilder configuration(Properties configuration) {
            this.configuration = Objects.requireNonNull(configuration);
            return this;
        }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbedded.java,ZookKeeperServerEmbeddedBuilder,exitHandler,ZookKeeperServerEmbeddedBuilder exitHandler(ExitHandler),"[80, 83]","{'A584': [(80, 83)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerEmbeddedTest.java,"        public ZookKeeperServerEmbeddedBuilder exitHandler(ExitHandler exitHandler) {
            this.exitHandler = Objects.requireNonNull(exitHandler);
            return this;
        }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbedded.java,ZookKeeperServerEmbeddedBuilder,build,ZooKeeperServerEmbedded build(),"[91, 99]","{'A584': [(91, 99)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerEmbeddedTest.java,"        public ZooKeeperServerEmbedded build() throws Exception {
            if (baseDir == null) {
                throw new IllegalStateException(""baseDir is null"");
            }
            if (configuration == null) {
                throw new IllegalStateException(""configuration is null"");
            }
            return new ZooKeeperServerEmbeddedImpl(configuration, baseDir, exitHandler);
        }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbedded.java,,builder,ZookKeeperServerEmbeddedBuilder builder(),"[102, 104]","{'A584': [(102, 104)]}",{'A584': 1.0},A584,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/embedded/ZookeeperServerEmbeddedTest.java,"    static ZookKeeperServerEmbeddedBuilder builder() {
        return new ZookKeeperServerEmbeddedBuilder();
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,start,void start(),"[81, 84]","{'A584': [(81, 84)]}",{'A584': 1.0},A584,,"    @Override
    public void start() throws Exception {
        start(Integer.MAX_VALUE);
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,start,void start(long),"[86, 191]","{'A584': [(86, 109), (112, 118), (120, 121), (123, 130), (132, 150), (153, 157), (159, 191)], 'A691': [(110, 111), (151, 152)], 'A722': [(119, 119)], 'A588': [(122, 122), (158, 158)], 'A589': [(131, 131)]}","{'A584': 0.9245283018867925, 'A691': 0.03773584905660377, 'A722': 0.009433962264150943, 'A588': 0.018867924528301886, 'A589': 0.009433962264150943}",A584,,"    @Override
    public void start(long startupTimeout) throws Exception {
        switch (exitHandler) {
            case EXIT:
                ServiceUtils.setSystemExitProcedure(ServiceUtils.SYSTEM_EXIT);
                break;
            case LOG_ONLY:
                ServiceUtils.setSystemExitProcedure(ServiceUtils.LOG_ONLY);
                break;
            default:
                ServiceUtils.setSystemExitProcedure(ServiceUtils.SYSTEM_EXIT);
                break;
        }
        final CompletableFuture<String> started = new CompletableFuture<>();

        if (config.getServers().size() > 1 || config.isDistributed()) {
            LOG.info(""Running ZK Server in single Quorum MODE"");

            maincluster = new QuorumPeerMain() {
                protected QuorumPeer getQuorumPeer() throws SaslException {
                    return new QuorumPeer() {
                        @Override
                        public void start() {
                            super.start();
                            boundClientPort = getClientPort();
                            boundSecureClientPort = getSecureClientPort();
                            LOG.info(""ZK Server {} started"", this);
                            started.complete(null);
                        }
                    };
                }
            };

            // Start and schedule the purge task
            purgeMgr = new DatadirCleanupManager(config
                    .getDataDir(), config.getDataLogDir(), config
                    .getSnapRetainCount(), config.getPurgeIntervalInMs());
            purgeMgr.start();

            thread = new Thread(""zkservermainrunner"") {
                @Override
                public void run() {
                    try {
                        maincluster.runFromConfig(config);
                        maincluster.close();
                        LOG.info(""ZK server died. Requesting stop on JVM"");
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
                        }
                    } catch (Throwable t) {
                        LOG.error(""error during server lifecycle"", t);
                        maincluster.close();
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
                        }
                    }
                }
            };
            thread.start();
        } else {
            LOG.info(""Running ZK Server in single STANDALONE MODE"");
            mainsingle = new ZooKeeperServerMain() {
                @Override
                public void serverStarted() {
                    LOG.info(""ZK Server started"");
                    boundClientPort = getClientPort();
                    boundSecureClientPort = getSecureClientPort();
                    started.complete(null);
                }
            };
            purgeMgr = new DatadirCleanupManager(config
                    .getDataDir(), config.getDataLogDir(), config
                    .getSnapRetainCount(), config.getPurgeIntervalInMs());
            purgeMgr.start();
            thread = new Thread(""zkservermainrunner"") {
                @Override
                public void run() {
                    try {
                        ServerConfig cc = new ServerConfig();
                        cc.readFrom(config);
                        LOG.info(""ZK server starting"");
                        mainsingle.runFromConfig(cc);
                        LOG.info(""ZK server died. Requesting stop on JVM"");
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
                        }
                    } catch (Throwable t) {
                        LOG.error(""error during server lifecycle"", t);
                        mainsingle.close();
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
                        }
                    }
                }
            };
            thread.start();
        }

        try {
            started.get(startupTimeout, TimeUnit.MILLISECONDS);
        } catch (TimeoutException err) {
            LOG.info(""Startup timed out, trying to close"");
            close();
            throw err;
        }
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,getQuorumPeer,QuorumPeer getQuorumPeer(),"[105, 116]","{'A584': [(105, 109), (112, 116)], 'A691': [(110, 111)]}","{'A584': 0.8333333333333334, 'A691': 0.16666666666666666}",A584,,"                protected QuorumPeer getQuorumPeer() throws SaslException {
                    return new QuorumPeer() {
                        @Override
                        public void start() {
                            super.start();
                            boundClientPort = getClientPort();
                            boundSecureClientPort = getSecureClientPort();
                            LOG.info(""ZK Server {} started"", this);
                            started.complete(null);
                        }
                    };
                }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,start,void start(),"[107, 114]","{'A584': [(107, 109), (112, 114)], 'A691': [(110, 111)]}","{'A584': 0.75, 'A691': 0.25}",A584,,"                        @Override
                        public void start() {
                            super.start();
                            boundClientPort = getClientPort();
                            boundSecureClientPort = getSecureClientPort();
                            LOG.info(""ZK Server {} started"", this);
                            started.complete(null);
                        }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,run,void run(),"[126, 142]","{'A584': [(126, 130), (132, 142)], 'A589': [(131, 131)]}","{'A584': 0.9411764705882353, 'A589': 0.058823529411764705}",A584,,"                @Override
                public void run() {
                    try {
                        maincluster.runFromConfig(config);
                        maincluster.close();
                        LOG.info(""ZK server died. Requesting stop on JVM"");
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
                        }
                    } catch (Throwable t) {
                        LOG.error(""error during server lifecycle"", t);
                        maincluster.close();
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
                        }
                    }
                }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,serverStarted,void serverStarted(),"[148, 154]","{'A584': [(148, 150), (153, 154)], 'A691': [(151, 152)]}","{'A584': 0.7142857142857143, 'A691': 0.2857142857142857}",A584,,"                @Override
                public void serverStarted() {
                    LOG.info(""ZK Server started"");
                    boundClientPort = getClientPort();
                    boundSecureClientPort = getSecureClientPort();
                    started.complete(null);
                }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,run,void run(),"[161, 179]","{'A584': [(161, 179)]}",{'A584': 1.0},A584,,"                @Override
                public void run() {
                    try {
                        ServerConfig cc = new ServerConfig();
                        cc.readFrom(config);
                        LOG.info(""ZK server starting"");
                        mainsingle.runFromConfig(cc);
                        LOG.info(""ZK server died. Requesting stop on JVM"");
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.EXECUTION_FINISHED.getValue());
                        }
                    } catch (Throwable t) {
                        LOG.error(""error during server lifecycle"", t);
                        mainsingle.close();
                        if (!stopping) {
                            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
                        }
                    }
                }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,getConnectionString,String getConnectionString(),"[193, 196]","{'A584': [(193, 194), (196, 196)], 'A691': [(195, 195)]}","{'A584': 0.75, 'A691': 0.25}",A584,,"    @Override
    public String getConnectionString() {
        return prettifyConnectionString(config.getClientPortAddress(), boundClientPort);
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,getSecureConnectionString,String getSecureConnectionString(),"[198, 201]","{'A584': [(198, 199)], 'A691': [(200, 201)]}","{'A584': 0.5, 'A691': 0.5}",A584,,"    @Override
    public String getSecureConnectionString() {
        return prettifyConnectionString(config.getSecureClientPortAddress(), boundSecureClientPort);
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,prettifyConnectionString,"String prettifyConnectionString(InetSocketAddress,int)","[203, 211]","{'A584': [(209, 209), (211, 211)], 'A691': [(203, 208), (210, 210)]}","{'A584': 0.2222222222222222, 'A691': 0.7777777777777778}",A691,,"    private String prettifyConnectionString(InetSocketAddress confAddress, int boundPort) {
        if (confAddress != null) {
            return confAddress.getHostString()
                .replace(""0.0.0.0"", ""localhost"")
                .replace(""0:0:0:0:0:0:0:0"", ""localhost"")
                + "":"" + boundPort;
        }
        throw new IllegalStateException(""No client address is configured"");
    }
"
org.apache.zookeeper.server.embedded,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/embedded/ZooKeeperServerEmbeddedImpl.java,ZooKeeperServerEmbeddedImpl,close,void close(),"[213, 223]","{'A584': [(213, 223)]}",{'A584': 1.0},A584,,"    @Override
    public void close() {
        LOG.info(""Stopping ZK Server"");
        stopping = true;
        if (mainsingle != null) {
            mainsingle.close();
        }
        if (maincluster != null) {
            maincluster.close();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java,ByteBufferInputStream,read,int read(),"[36, 42]","{'A590': [(36, 42)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java,"    @Override
    public int read() throws IOException {
        if (bb.remaining() == 0) {
            return -1;
        }
        return bb.get() & 0xff;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java,ByteBufferInputStream,available,int available(),"[44, 47]","{'A590': [(44, 47)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java,"    @Override
    public int available() throws IOException {
        return bb.remaining();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java,ByteBufferInputStream,read,"int read(byte[],int,int)","[49, 59]","{'A583': [(50, 50)], 'A590': [(49, 49), (51, 59)]}","{'A583': 0.09090909090909091, 'A590': 0.9090909090909091}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java,"    @Override
    public int read(@Nonnull byte[] b, int off, int len) throws IOException {
        if (bb.remaining() == 0) {
            return -1;
        }
        if (len > bb.remaining()) {
            len = bb.remaining();
        }
        bb.get(b, off, len);
        return len;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java,ByteBufferInputStream,read,int read(byte[]),"[61, 64]","{'A583': [(62, 62)], 'A590': [(61, 61), (63, 64)]}","{'A583': 0.25, 'A590': 0.75}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java,"    @Override
    public int read(@Nonnull byte[] b) throws IOException {
        return read(b, 0, b.length);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java,ByteBufferInputStream,skip,long skip(long),"[66, 74]","{'A590': [(66, 67), (70, 70), (72, 74)], 'A593': [(68, 69), (71, 71)]}","{'A590': 0.6666666666666666, 'A593': 0.3333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java,"    @Override
    public long skip(long n) throws IOException {
        if (n < 0L) {
            return 0;
        }
        n = Math.min(n, bb.remaining());
        bb.position(bb.position() + (int) n);
        return n;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ByteBufferInputStream.java,ByteBufferInputStream,byteBuffer2Record,"void byteBuffer2Record(ByteBuffer,Record)","[76, 80]","{'A583': [(76, 76)], 'A596': [(77, 80)]}","{'A583': 0.2, 'A596': 0.8}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ByteBufferInputStreamTest.java,"    public static void byteBuffer2Record(ByteBuffer bb, Record record) throws IOException {
        BinaryInputArchive ia;
        ia = BinaryInputArchive.getArchive(new ByteBufferInputStream(bb));
        record.deserialize(ia, ""request"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getMinLatency,long getMinLatency(),"[69, 71]","{'A688': [(71, 71)], 'A713': [(69, 70)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getMinLatency() {
        return requestLatency.getMin();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getAvgLatency,double getAvgLatency(),"[73, 75]","{'A688': [(75, 75)], 'A713': [(74, 74)], 'A641': [(73, 73)]}","{'A688': 0.3333333333333333, 'A713': 0.3333333333333333, 'A641': 0.3333333333333333}",A688,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public double getAvgLatency() {
        return requestLatency.getAvg();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getMaxLatency,long getMaxLatency(),"[77, 79]","{'A688': [(79, 79)], 'A713': [(77, 78)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getMaxLatency() {
        return requestLatency.getMax();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getOutstandingRequests,long getOutstandingRequests(),"[81, 83]","{'A591': [(82, 82)], 'A688': [(81, 81), (83, 83)]}","{'A591': 0.3333333333333333, 'A688': 0.6666666666666666}",A688,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getOutstandingRequests() {
        return provider.getOutstandingRequests();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getLastProcessedZxid,long getLastProcessedZxid(),"[85, 87]","{'A583': [(85, 85)], 'A591': [(86, 86)], 'A688': [(87, 87)]}","{'A583': 0.3333333333333333, 'A591': 0.3333333333333333, 'A688': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getLastProcessedZxid() {
        return provider.getLastProcessedZxid();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getDataDirSize,long getDataDirSize(),"[89, 91]","{'A616': [(89, 91)]}",{'A616': 1.0},A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getDataDirSize() {
        return provider.getDataDirSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getLogDirSize,long getLogDirSize(),"[93, 95]","{'A616': [(93, 95)]}",{'A616': 1.0},A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getLogDirSize() {
        return provider.getLogDirSize();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getPacketsReceived,long getPacketsReceived(),"[97, 99]","{'A688': [(99, 99)], 'A713': [(97, 98)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getPacketsReceived() {
        return packetsReceived.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getPacketsSent,long getPacketsSent(),"[101, 103]","{'A688': [(103, 103)], 'A713': [(101, 102)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getPacketsSent() {
        return packetsSent.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getServerState,String getServerState(),"[105, 107]","{'A591': [(105, 105)], 'A639': [(106, 107)]}","{'A591': 0.3333333333333333, 'A639': 0.6666666666666666}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public String getServerState() {
        return provider.getState();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getNumAliveClientConnections,int getNumAliveClientConnections(),"[110, 112]","{'A583': [(111, 111)], 'A639': [(110, 110), (112, 112)]}","{'A583': 0.3333333333333333, 'A639': 0.6666666666666666}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public int getNumAliveClientConnections() {
        return provider.getNumAliveConnections();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getUptime,long getUptime(),"[114, 116]","{'A713': [(114, 116)]}",{'A713': 1.0},A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getUptime() {
        return Time.currentElapsedTime() - startTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,isProviderNull,boolean isProviderNull(),"[118, 120]","{'A591': [(118, 120)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public boolean isProviderNull() {
        return provider == null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,toString,String toString(),"[122, 136]","{'A583': [(123, 123), (125, 125), (132, 132)], 'A591': [(134, 134)], 'A688': [(124, 124), (126, 127), (130, 131), (133, 133), (135, 136)], 'A639': [(128, 129)], 'A590': [(122, 122)]}","{'A583': 0.2, 'A591': 0.06666666666666667, 'A688': 0.5333333333333333, 'A639': 0.13333333333333333, 'A590': 0.06666666666666667}",A688,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(""Latency min/avg/max: "" + getMinLatency() + ""/"" + getAvgLatency() + ""/"" + getMaxLatency() + ""\n"");
        sb.append(""Received: "" + getPacketsReceived() + ""\n"");
        sb.append(""Sent: "" + getPacketsSent() + ""\n"");
        sb.append(""Connections: "" + getNumAliveClientConnections() + ""\n"");

        if (provider != null) {
            sb.append(""Outstanding: "" + getOutstandingRequests() + ""\n"");
            sb.append(""Zxid: 0x"" + Long.toHexString(getLastProcessedZxid()) + ""\n"");
        }
        sb.append(""Mode: "" + getServerState() + ""\n"");
        return sb.toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,updateLatency,"void updateLatency(Request,long)","[142, 155]","{'A688': [(146, 146), (154, 155)], 'A713': [(142, 145), (147, 149), (151, 152)], 'A584': [(150, 150), (153, 153)]}","{'A688': 0.21428571428571427, 'A713': 0.6428571428571429, 'A584': 0.14285714285714285}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void updateLatency(Request request, long currentTime) {
        long latency = currentTime - request.createTime;
        if (latency < 0) {
            return;
        }
        requestLatency.addDataPoint(latency);
        if (request.getHdr() != null) {
            // Only quorum request should have header
            ServerMetrics.getMetrics().UPDATE_LATENCY.add(latency);
        } else {
            // All read request should goes here
            ServerMetrics.getMetrics().READ_LATENCY.add(latency);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetLatency,void resetLatency(),"[157, 159]","{'A688': [(159, 159)], 'A713': [(157, 158)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetLatency() {
        requestLatency.reset();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetMaxLatency,void resetMaxLatency(),"[161, 163]","{'A688': [(163, 163)], 'A713': [(161, 162)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetMaxLatency() {
        requestLatency.resetMax();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,incrementPacketsReceived,void incrementPacketsReceived(),"[165, 167]","{'A688': [(167, 167)], 'A713': [(165, 166)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void incrementPacketsReceived() {
        packetsReceived.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,incrementPacketsSent,void incrementPacketsSent(),"[169, 171]","{'A688': [(171, 171)], 'A713': [(169, 170)]}","{'A688': 0.3333333333333333, 'A713': 0.6666666666666666}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void incrementPacketsSent() {
        packetsSent.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetRequestCounters,void resetRequestCounters(),"[173, 176]","{'A583': [(173, 173)], 'A688': [(176, 176)], 'A713': [(174, 175)]}","{'A583': 0.25, 'A688': 0.25, 'A713': 0.5}",A713,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetRequestCounters() {
        packetsReceived.set(0);
        packetsSent.set(0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getFsyncThresholdExceedCount,long getFsyncThresholdExceedCount(),"[178, 180]","{'A609': [(178, 180)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getFsyncThresholdExceedCount() {
        return fsyncThresholdExceedCount.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,incrementFsyncThresholdExceedCount,void incrementFsyncThresholdExceedCount(),"[182, 184]","{'A609': [(182, 184)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void incrementFsyncThresholdExceedCount() {
        fsyncThresholdExceedCount.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetFsyncThresholdExceedCount,void resetFsyncThresholdExceedCount(),"[186, 188]","{'A609': [(186, 188)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetFsyncThresholdExceedCount() {
        fsyncThresholdExceedCount.set(0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getNonMTLSLocalConnCount,long getNonMTLSLocalConnCount(),"[190, 192]","{'A753': [(190, 192)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getNonMTLSLocalConnCount() {
        return nonMTLSLocalConnCntr.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,incrementNonMTLSLocalConnCount,void incrementNonMTLSLocalConnCount(),"[194, 196]","{'A753': [(194, 196)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void incrementNonMTLSLocalConnCount() {
        nonMTLSLocalConnCntr.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetNonMTLSLocalConnCount,void resetNonMTLSLocalConnCount(),"[198, 200]","{'A753': [(198, 200)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetNonMTLSLocalConnCount() {
        nonMTLSLocalConnCntr.set(0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getNonMTLSRemoteConnCount,long getNonMTLSRemoteConnCount(),"[202, 204]","{'A753': [(202, 204)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getNonMTLSRemoteConnCount() {
        return nonMTLSRemoteConnCntr.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,incrementNonMTLSRemoteConnCount,void incrementNonMTLSRemoteConnCount(),"[206, 208]","{'A753': [(206, 208)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void incrementNonMTLSRemoteConnCount() {
        nonMTLSRemoteConnCntr.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetNonMTLSRemoteConnCount,void resetNonMTLSRemoteConnCount(),"[210, 212]","{'A753': [(210, 212)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetNonMTLSRemoteConnCount() {
        nonMTLSRemoteConnCntr.set(0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getAuthFailedCount,long getAuthFailedCount(),"[214, 216]","{'A753': [(214, 216)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public long getAuthFailedCount() {
        return authFailedCntr.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,incrementAuthFailedCount,void incrementAuthFailedCount(),"[218, 220]","{'A753': [(218, 220)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void incrementAuthFailedCount() {
        authFailedCntr.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,resetAuthFailedCount,void resetAuthFailedCount(),"[222, 224]","{'A753': [(222, 224)]}",{'A753': 1.0},A753,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void resetAuthFailedCount() {
        authFailedCntr.set(0);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,reset,void reset(),"[226, 231]","{'A713': [(226, 226)], 'A613': [(229, 229)], 'A584': [(230, 230)], 'A596': [(227, 228), (231, 231)]}","{'A713': 0.16666666666666666, 'A613': 0.16666666666666666, 'A584': 0.16666666666666666, 'A596': 0.5}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void reset() {
        resetLatency();
        resetRequestCounters();
        clientResponseStats.reset();
        ServerMetrics.getMetrics().resetAll();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,updateClientResponseSize,void updateClientResponseSize(int),"[233, 235]","{'A613': [(233, 235)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public void updateClientResponseSize(int size) {
        clientResponseStats.setLastBufferSize(size);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerStats.java,ServerStats,getClientResponseStats,BufferStats getClientResponseStats(),"[237, 239]","{'A613': [(237, 239)]}",{'A613': 1.0},A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/ServerStatsTest.java,"    public BufferStats getClientResponseStats() {
        return clientResponseStats;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,start,void start(),"[90, 110]","{'A583': [(101, 101), (107, 107)], 'A616': [(90, 100), (102, 106), (108, 110)]}","{'A583': 0.09523809523809523, 'A616': 0.9047619047619048}",A616,,"    public void start() {
        if (task.get() == null) {
            TimerTask timerTask = new TimerTask() {
                @Override
                public void run() {
                    try {
                        checkContainers();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        LOG.info(""interrupted"");
                        cancel();
                    } catch (Throwable e) {
                        LOG.error(""Error checking containers"", e);
                    }
                }
            };
            if (task.compareAndSet(null, timerTask)) {
                timer.scheduleAtFixedRate(timerTask, checkIntervalMs, checkIntervalMs);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,run,void run(),"[93, 104]","{'A583': [(101, 101)], 'A616': [(93, 100), (102, 104)]}","{'A583': 0.08333333333333333, 'A616': 0.9166666666666666}",A616,,"                @Override
                public void run() {
                    try {
                        checkContainers();
                    } catch (InterruptedException e) {
                        Thread.currentThread().interrupt();
                        LOG.info(""interrupted"");
                        cancel();
                    } catch (Throwable e) {
                        LOG.error(""Error checking containers"", e);
                    }
                }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,stop,void stop(),"[115, 121]","{'A616': [(115, 119), (121, 121)], 'A597': [(120, 120)]}","{'A616': 0.8571428571428571, 'A597': 0.14285714285714285}",A616,,"    public void stop() {
        TimerTask timerTask = task.getAndSet(null);
        if (timerTask != null) {
            timerTask.cancel();
        }
        timer.cancel();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,checkContainers,void checkContainers(),"[126, 146]","{'A583': [(126, 126), (131, 132), (134, 134), (137, 137)], 'A616': [(127, 130), (133, 133), (136, 136), (138, 146)], 'A636': [(135, 135)]}","{'A583': 0.23809523809523808, 'A616': 0.7142857142857143, 'A636': 0.047619047619047616}",A616,,"    public void checkContainers() throws InterruptedException {
        long minIntervalMs = getMinIntervalMs();
        for (String containerPath : getCandidates()) {
            long startMs = Time.currentElapsedTime();

            DeleteContainerRequest record = new DeleteContainerRequest(containerPath);
            Request request = new Request(null, 0, 0, ZooDefs.OpCode.deleteContainer, RequestRecord.fromRecord(record), null);
            try {
                LOG.info(""Attempting to delete candidate container: {}"", containerPath);
                postDeleteRequest(request);
            } catch (Exception e) {
                LOG.error(""Could not delete container: {}"", containerPath, e);
            }

            long elapsedMs = Time.currentElapsedTime() - startMs;
            long waitMs = minIntervalMs - elapsedMs;
            if (waitMs > 0) {
                Thread.sleep(waitMs);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,postDeleteRequest,void postDeleteRequest(Request),"[149, 151]","{'A636': [(149, 151)]}",{'A636': 1.0},A636,,"    protected void postDeleteRequest(Request request) throws RequestProcessor.RequestProcessorException {
        requestProcessor.processRequest(request);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,getMinIntervalMs,long getMinIntervalMs(),"[154, 156]","{'A616': [(154, 156)]}",{'A616': 1.0},A616,,"    protected long getMinIntervalMs() {
        return TimeUnit.MINUTES.toMillis(1) / maxPerMinute;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,getCandidates,Collection<String> getCandidates(),"[159, 199]","{'A583': [(189, 189)], 'A616': [(159, 159), (161, 162), (183, 183), (198, 199)], 'A636': [(163, 182), (190, 193)], 'A605': [(160, 160)], 'A639': [(184, 187), (194, 197)], 'A592': [(188, 188)]}","{'A583': 0.024390243902439025, 'A616': 0.14634146341463414, 'A636': 0.5853658536585366, 'A605': 0.024390243902439025, 'A639': 0.1951219512195122, 'A592': 0.024390243902439025}",A636,,"    protected Collection<String> getCandidates() {
        Set<String> candidates = new HashSet<>();
        for (String containerPath : zkDb.getDataTree().getContainers()) {
            DataNode node = zkDb.getDataTree().getNode(containerPath);
            if ((node != null) && node.getChildren().isEmpty()) {
                /*
                    cversion > 0: keep newly created containers from being deleted
                    before any children have been added. If you were to create the
                    container just before a container cleaning period the container
                    would be immediately be deleted.
                 */
                if (node.stat.getCversion() > 0) {
                    candidates.add(containerPath);
                } else {
                    /*
                        Users may not want unused containers to live indefinitely. Allow a system
                        property to be set that sets the max time for a cversion-0 container
                        to stay before being deleted
                     */
                    if ((maxNeverUsedIntervalMs != 0) && (getElapsed(node) > maxNeverUsedIntervalMs)) {
                        candidates.add(containerPath);
                    }
                }
            }
        }
        for (String ttlPath : zkDb.getDataTree().getTtls()) {
            DataNode node = zkDb.getDataTree().getNode(ttlPath);
            if (node != null) {
                Set<String> children = node.getChildren();
                if (children.isEmpty()) {
                    if (EphemeralType.get(node.stat.getEphemeralOwner()) == EphemeralType.TTL) {
                        long ttl = EphemeralType.TTL.getValue(node.stat.getEphemeralOwner());
                        if ((ttl != 0) && (getElapsed(node) > ttl)) {
                            candidates.add(ttlPath);
                        }
                    }
                }
            }
        }
        return candidates;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ContainerManager.java,ContainerManager,getElapsed,long getElapsed(DataNode),"[202, 204]","{'A639': [(202, 204)]}",{'A639': 1.0},A639,,"    protected long getElapsed(DataNode node) {
        return Time.currentWallTime() - node.stat.getMtime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setConnectionWeightEnabled,void setConnectionWeightEnabled(boolean),"[125, 128]","{'A675': [(125, 128)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    protected  static void setConnectionWeightEnabled(boolean enabled) {
        connectionWeightEnabled = enabled;
        logWeighedThrottlingSetting();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,logWeighedThrottlingSetting,void logWeighedThrottlingSetting(),"[130, 143]","{'A675': [(130, 143)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    private static void logWeighedThrottlingSetting() {
        if (connectionWeightEnabled) {
            LOG.info(""Weighed connection throttling is enabled. ""
                    + ""But it will only be effective if connection throttling is enabled"");
            LOG.info(
                    ""The weights for different session types are: global {} renew {} local {}"",
                    DEFAULT_GLOBAL_SESSION_WEIGHT,
                    DEFAULT_RENEW_SESSION_WEIGHT,
                    DEFAULT_LOCAL_SESSION_WEIGHT
            );
        } else {
            LOG.info(""Weighed connection throttling is disabled"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getDoubleProp,"double getDoubleProp(String,double)","[208, 215]","{'A583': [(210, 210), (212, 212)], 'A675': [(208, 209), (211, 211), (213, 215)]}","{'A583': 0.25, 'A675': 0.75}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    private static double getDoubleProp(String name, double def) {
        String val = System.getProperty(name);
        if (val != null) {
            return Double.parseDouble(val);
        } else {
            return def;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setMaxTokens,void setMaxTokens(int),"[236, 240]","{'A675': [(236, 240)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setMaxTokens(int max) {
        int deficit = maxTokens - tokens;
        maxTokens = max;
        tokens = max - deficit;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setFillTime,void setFillTime(int),"[242, 244]","{'A675': [(242, 244)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setFillTime(int time) {
        fillTime = time;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setFillCount,void setFillCount(int),"[246, 248]","{'A675': [(246, 248)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setFillCount(int count) {
        fillCount = count;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setFreezeTime,void setFreezeTime(int),"[250, 252]","{'A675': [(250, 252)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setFreezeTime(int time) {
        freezeTime = time;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setDropIncrease,void setDropIncrease(double),"[254, 256]","{'A675': [(254, 256)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setDropIncrease(double increase) {
        dropIncrease = increase;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setDropDecrease,void setDropDecrease(double),"[258, 260]","{'A675': [(258, 260)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setDropDecrease(double decrease) {
        dropDecrease = decrease;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,setDecreasePoint,void setDecreasePoint(double),"[262, 264]","{'A675': [(262, 264)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized void setDecreasePoint(double ratio) {
        decreasePoint = ratio;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getMaxTokens,int getMaxTokens(),"[266, 268]","{'A675': [(266, 268)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized int getMaxTokens() {
        return maxTokens;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getFillTime,int getFillTime(),"[270, 272]","{'A675': [(270, 272)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized int getFillTime() {
        return fillTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getFillCount,int getFillCount(),"[274, 276]","{'A675': [(274, 276)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized int getFillCount() {
        return fillCount;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getFreezeTime,int getFreezeTime(),"[278, 280]","{'A675': [(278, 280)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized int getFreezeTime() {
        return freezeTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getDropIncrease,double getDropIncrease(),"[282, 284]","{'A675': [(282, 284)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized double getDropIncrease() {
        return dropIncrease;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getDropDecrease,double getDropDecrease(),"[286, 288]","{'A675': [(286, 288)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized double getDropDecrease() {
        return dropDecrease;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getDecreasePoint,double getDecreasePoint(),"[290, 292]","{'A675': [(290, 292)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized double getDecreasePoint() {
        return decreasePoint;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getDropChance,double getDropChance(),"[294, 296]","{'A675': [(294, 296)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized double getDropChance() {
        return drop;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getDeficit,int getDeficit(),"[298, 300]","{'A675': [(298, 300)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized int getDeficit() {
        return maxTokens - tokens;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getRequiredTokensForGlobal,int getRequiredTokensForGlobal(),"[302, 304]","{'A675': [(302, 304)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public int getRequiredTokensForGlobal() {
        return BlueThrottle.DEFAULT_GLOBAL_SESSION_WEIGHT;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getRequiredTokensForLocal,int getRequiredTokensForLocal(),"[306, 308]","{'A675': [(306, 308)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public int getRequiredTokensForLocal() {
        return BlueThrottle.DEFAULT_LOCAL_SESSION_WEIGHT;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,getRequiredTokensForRenew,int getRequiredTokensForRenew(),"[310, 312]","{'A675': [(310, 312)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public int getRequiredTokensForRenew() {
        return BlueThrottle.DEFAULT_RENEW_SESSION_WEIGHT;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,isConnectionWeightEnabled,boolean isConnectionWeightEnabled(),"[314, 316]","{'A675': [(314, 316)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public boolean isConnectionWeightEnabled() {
        return BlueThrottle.connectionWeightEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,checkLimit,boolean checkLimit(int),"[318, 351]","{'A583': [(320, 320), (322, 322), (339, 340)], 'A675': [(318, 319), (321, 321), (323, 327), (335, 338), (341, 351)], 'A765': [(328, 334)]}","{'A583': 0.11764705882352941, 'A675': 0.6764705882352942, 'A765': 0.20588235294117646}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized boolean checkLimit(int need) {
        // A maxTokens setting of zero disables throttling
        if (maxTokens == 0) {
            return true;
        }

        long now = Time.currentElapsedTime();
        long diff = now - lastTime;

        if (diff > fillTime) {
            long refill = diff * fillCount / fillTime;
            tokens = (int) Math.min(tokens + refill, maxTokens);
            if (tokens < 0) {
                tokens = maxTokens;
                LOG.error(""Throttle config values {}({}) and {}({}) are insane and cause long integer overflow after {}ms"",
                        CONNECTION_THROTTLE_FILL_TIME, fillTime, CONNECTION_THROTTLE_FILL_COUNT, fillCount, diff);
            }
            lastTime = now;
        }

        // A freeze time of -1 disables BLUE randomized throttling
        if (freezeTime != -1) {
            if (!checkBlue(now)) {
                return false;
            }
        }

        if (tokens < need) {
            return false;
        }

        tokens -= need;
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/BlueThrottle.java,BlueThrottle,checkBlue,boolean checkBlue(long),"[353, 369]","{'A583': [(360, 360), (362, 362), (368, 368)], 'A675': [(353, 359), (361, 361), (363, 367), (369, 369)]}","{'A583': 0.17647058823529413, 'A675': 0.8235294117647058}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/BlueThrottleTest.java,"    public synchronized boolean checkBlue(long now) {
        int length = maxTokens - tokens;
        int limit = maxTokens;
        long diff = now - lastFreeze;
        long threshold = Math.round(maxTokens * decreasePoint);

        if (diff > freezeTime) {
            if ((length == limit) && (drop < 1)) {
                drop = Math.min(drop + dropIncrease, 1);
            } else if ((length <= threshold) && (drop > 0)) {
                drop = Math.max(drop - dropDecrease, 0);
            }
            lastFreeze = now;
        }

        return !(rng.nextDouble() < drop);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,parse,void parse(String[]),"[73, 87]","{'A591': [(79, 79)], 'A688': [(76, 76), (87, 87)], 'A590': [(74, 74), (78, 78), (84, 86)], 'A596': [(73, 73), (77, 77), (80, 80), (82, 83)], 'A611': [(75, 75), (81, 81)]}","{'A591': 0.06666666666666667, 'A688': 0.13333333333333333, 'A590': 0.3333333333333333, 'A596': 0.3333333333333333, 'A611': 0.13333333333333333}",A590,,"    public void parse(String[] args) {
        if (args.length < 2 || args.length > 4) {
            throw new IllegalArgumentException(""Invalid number of arguments:"" + Arrays.toString(args));
        }

        clientPortAddress = new InetSocketAddress(Integer.parseInt(args[0]));
        dataDir = new File(args[1]);
        dataLogDir = dataDir;
        if (args.length >= 3) {
            tickTime = Integer.parseInt(args[2]);
        }
        if (args.length == 4) {
            maxClientCnxns = Integer.parseInt(args[3]);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,parse,void parse(String),"[94, 101]","{'A590': [(100, 101)], 'A596': [(94, 99)]}","{'A590': 0.25, 'A596': 0.75}",A596,,"    public void parse(String path) throws ConfigException {
        QuorumPeerConfig config = new QuorumPeerConfig();
        config.parse(path);

        // let qpconfig parse the file and then pull the stuff we are
        // interested in
        readFrom(config);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,readFrom,void readFrom(QuorumPeerConfig),"[107, 124]","{'A590': [(107, 107)], 'A596': [(124, 124)], 'A584': [(120, 121)], 'A630': [(108, 115)], 'A689': [(122, 122)], 'A647': [(123, 123)], 'A609': [(116, 119)]}","{'A590': 0.05555555555555555, 'A596': 0.05555555555555555, 'A584': 0.1111111111111111, 'A630': 0.4444444444444444, 'A689': 0.05555555555555555, 'A647': 0.05555555555555555, 'A609': 0.2222222222222222}",A630,,"    public void readFrom(QuorumPeerConfig config) {
        clientPortAddress = config.getClientPortAddress();
        secureClientPortAddress = config.getSecureClientPortAddress();
        dataDir = config.getDataDir();
        dataLogDir = config.getDataLogDir();
        tickTime = config.getTickTime();
        maxClientCnxns = config.getMaxClientCnxns();
        minSessionTimeout = config.getMinSessionTimeout();
        maxSessionTimeout = config.getMaxSessionTimeout();
        jvmPauseMonitorToRun = config.isJvmPauseMonitorToRun();
        jvmPauseInfoThresholdMs = config.getJvmPauseInfoThresholdMs();
        jvmPauseWarnThresholdMs = config.getJvmPauseWarnThresholdMs();
        jvmPauseSleepTimeMs = config.getJvmPauseSleepTimeMs();
        metricsProviderClassName = config.getMetricsProviderClassName();
        metricsProviderConfiguration = config.getMetricsProviderConfiguration();
        listenBacklog = config.getClientPortListenBacklog();
        initialConfig = config.getInitialConfig();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getClientPortAddress,InetSocketAddress getClientPortAddress(),"[126, 128]","{'A590': [(126, 128)]}",{'A590': 1.0},A590,,"    public InetSocketAddress getClientPortAddress() {
        return clientPortAddress;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getSecureClientPortAddress,InetSocketAddress getSecureClientPortAddress(),"[129, 131]","{'A630': [(129, 131)]}",{'A630': 1.0},A630,,"    public InetSocketAddress getSecureClientPortAddress() {
        return secureClientPortAddress;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getDataDir,File getDataDir(),"[132, 134]","{'A583': [(132, 134)]}",{'A583': 1.0},A583,,"    public File getDataDir() {
        return dataDir;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getDataLogDir,File getDataLogDir(),"[135, 137]","{'A583': [(135, 137)]}",{'A583': 1.0},A583,,"    public File getDataLogDir() {
        return dataLogDir;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getTickTime,int getTickTime(),"[138, 140]","{'A583': [(138, 140)]}",{'A583': 1.0},A583,,"    public int getTickTime() {
        return tickTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getMaxClientCnxns,int getMaxClientCnxns(),"[141, 143]","{'A583': [(141, 143)]}",{'A583': 1.0},A583,,"    public int getMaxClientCnxns() {
        return maxClientCnxns;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getMinSessionTimeout,int getMinSessionTimeout(),"[145, 147]","{'A583': [(145, 147)]}",{'A583': 1.0},A583,,"    public int getMinSessionTimeout() {
        return minSessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getMaxSessionTimeout,int getMaxSessionTimeout(),"[149, 151]","{'A583': [(149, 151)]}",{'A583': 1.0},A583,,"    public int getMaxSessionTimeout() {
        return maxSessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getJvmPauseInfoThresholdMs,long getJvmPauseInfoThresholdMs(),"[153, 155]","{'A609': [(153, 155)]}",{'A609': 1.0},A609,,"    public long getJvmPauseInfoThresholdMs() {
        return jvmPauseInfoThresholdMs;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getJvmPauseWarnThresholdMs,long getJvmPauseWarnThresholdMs(),"[156, 158]","{'A609': [(156, 158)]}",{'A609': 1.0},A609,,"    public long getJvmPauseWarnThresholdMs() {
        return jvmPauseWarnThresholdMs;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getJvmPauseSleepTimeMs,long getJvmPauseSleepTimeMs(),"[159, 161]","{'A609': [(159, 161)]}",{'A609': 1.0},A609,,"    public long getJvmPauseSleepTimeMs() {
        return jvmPauseSleepTimeMs;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,isJvmPauseMonitorToRun,boolean isJvmPauseMonitorToRun(),"[162, 164]","{'A609': [(162, 164)]}",{'A609': 1.0},A609,,"    public boolean isJvmPauseMonitorToRun() {
        return jvmPauseMonitorToRun;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getMetricsProviderClassName,String getMetricsProviderClassName(),"[165, 167]","{'A583': [(165, 167)]}",{'A583': 1.0},A583,,"    public String getMetricsProviderClassName() {
        return metricsProviderClassName;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getMetricsProviderConfiguration,Properties getMetricsProviderConfiguration(),"[168, 170]","{'A583': [(168, 170)]}",{'A583': 1.0},A583,,"    public Properties getMetricsProviderConfiguration() {
        return metricsProviderConfiguration;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerConfig.java,ServerConfig,getClientPortListenBacklog,int getClientPortListenBacklog(),"[172, 174]","{'A583': [(172, 174)]}",{'A583': 1.0},A583,,"    public int getClientPortListenBacklog() {
        return listenBacklog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,main,void main(String[]),"[55, 92]","{'A583': [(79, 79), (85, 85)], 'A593': [(55, 55), (78, 78), (92, 92)], 'A647': [(56, 75), (86, 87), (89, 91)], 'A641': [(80, 82), (84, 84)], 'A584': [(76, 77), (83, 83), (88, 88)]}","{'A583': 0.05263157894736842, 'A593': 0.07894736842105263, 'A647': 0.6578947368421053, 'A641': 0.10526315789473684, 'A584': 0.10526315789473684}",A647,,"    public static void main(String[] args) throws Exception {
        String snapshotFile = null;
        boolean dumpData = false;
        boolean dumpJson = false;

        int i;
        for (i = 0; i < args.length; i++) {
            if (args[i].equals(""-d"")) {
                dumpData = true;
            } else if (args[i].equals(""-json"")) {
                dumpJson = true;
            } else {
                snapshotFile = args[i];
                i++;
                break;
            }
        }
        if (args.length != i || snapshotFile == null) {
            System.err.println(""USAGE: SnapshotFormatter [-d|-json] snapshot_file"");
            System.err.println(""       -d dump the data for each znode"");
            System.err.println(""       -json dump znode info in json format"");
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
            return;
        }

        String error = ZKUtil.validateFileInput(snapshotFile);
        if (null != error) {
            System.err.println(error);
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        }

        if (dumpData && dumpJson) {
            System.err.println(""Cannot specify both data dump (-d) and json mode (-json) in same call"");
            ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
        }

        new SnapshotFormatter().run(snapshotFile, dumpData, dumpJson);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,run,"void run(String,boolean,boolean)","[94, 111]","{'A583': [(94, 94), (102, 102)], 'A593': [(101, 101), (104, 104), (111, 111)], 'A647': [(95, 95), (97, 99), (103, 103), (105, 110)], 'A694': [(96, 96)], 'A605': [(100, 100)]}","{'A583': 0.1111111111111111, 'A593': 0.16666666666666666, 'A647': 0.6111111111111112, 'A694': 0.05555555555555555, 'A605': 0.05555555555555555}",A647,,"    public void run(String snapshotFileName, boolean dumpData, boolean dumpJson) throws IOException {
        File snapshotFile = new File(snapshotFileName);
        try (InputStream is = SnapStream.getInputStream(snapshotFile)) {
            InputArchive ia = BinaryInputArchive.getArchive(is);

            DataTree dataTree = new DataTree();
            Map<Long, Integer> sessions = new HashMap<>();

            FileSnap.deserialize(dataTree, sessions, ia);
            long fileNameZxid = Util.getZxidFromName(snapshotFile.getName(), SNAPSHOT_FILE_PREFIX);

            if (dumpJson) {
                printSnapshotJson(dataTree);
            } else {
                printDetails(dataTree, sessions, dumpData, fileNameZxid);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printDetails,"void printDetails(DataTree,Map<Long, Integer>,boolean,long)","[113, 122]","{'A583': [(113, 113)], 'A593': [(115, 115), (122, 122)], 'A647': [(114, 114), (121, 121)], 'A612': [(116, 120)]}","{'A583': 0.1, 'A593': 0.2, 'A647': 0.2, 'A612': 0.5}",A612,,"    private void printDetails(DataTree dataTree, Map<Long, Integer> sessions, boolean dumpData, long fileNameZxid) {
        long dtZxid = printZnodeDetails(dataTree, dumpData);
        printSessionDetails(dataTree, sessions);
        DataTree.ZxidDigest targetZxidDigest = dataTree.getDigestFromLoadedSnapshot();
        if (targetZxidDigest != null) {
            System.out.println(String.format(""Target zxid digest is: %s, %s"",
                    Long.toHexString(targetZxidDigest.zxid), targetZxidDigest.digest));
        }
        System.out.println(String.format(""----%nLast zxid: 0x%s"", Long.toHexString(Math.max(fileNameZxid, dtZxid))));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printZnodeDetails,"long printZnodeDetails(DataTree,boolean)","[124, 130]","{'A583': [(125, 125)], 'A593': [(128, 128), (130, 130)], 'A647': [(124, 124), (126, 127), (129, 129)]}","{'A583': 0.14285714285714285, 'A593': 0.2857142857142857, 'A647': 0.5714285714285714}",A647,,"    private long printZnodeDetails(DataTree dataTree, boolean dumpData) {
        System.out.println(String.format(""ZNode Details (count=%d):"", dataTree.getNodeCount()));

        final long zxid = printZnode(dataTree, ""/"", dumpData);
        System.out.println(""----"");
        return zxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printZnode,"long printZnode(DataTree,String,boolean)","[132, 155]","{'A583': [(142, 142), (144, 144), (150, 150)], 'A593': [(133, 135), (138, 139), (143, 143), (145, 147), (153, 153), (155, 155)], 'A647': [(132, 132), (136, 137), (140, 141), (148, 149), (151, 152), (154, 154)]}","{'A583': 0.125, 'A593': 0.4583333333333333, 'A647': 0.4166666666666667}",A593,,"    private long printZnode(DataTree dataTree, String name, boolean dumpData) {
        System.out.println(""----"");
        DataNode n = dataTree.getNode(name);
        Set<String> children;
        long zxid;
        synchronized (n) { // keep findbugs happy
            System.out.println(name);
            printStat(n.stat);
            zxid = Math.max(n.stat.getMzxid(), n.stat.getPzxid());
            if (dumpData) {
                System.out.println(""  data = "" + (n.data == null ? """" : Base64.getEncoder().encodeToString(n.data)));
            } else {
                System.out.println(""  dataLength = "" + (n.data == null ? 0 : n.data.length));
            }
            children = n.getChildren();
        }
        if (children != null) {
            for (String child : children) {
                long cxid = printZnode(dataTree, name + (name.equals(""/"") ? """" : ""/"") + child, dumpData);
                zxid = Math.max(zxid, cxid);
            }
        }
        return zxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printSessionDetails,"void printSessionDetails(DataTree,Map<Long, Integer>)","[157, 163]","{'A583': [(161, 161)], 'A593': [(157, 160), (162, 163)]}","{'A583': 0.14285714285714285, 'A593': 0.8571428571428571}",A593,,"    private void printSessionDetails(DataTree dataTree, Map<Long, Integer> sessions) {
        System.out.println(""Session Details (sid, timeout, ephemeralCount):"");
        for (Map.Entry<Long, Integer> e : sessions.entrySet()) {
            long sid = e.getKey();
            System.out.println(String.format(""%#016x, %d, %d"", sid, e.getValue(), dataTree.getEphemerals(sid).size()));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printStat,void printStat(StatPersisted),"[165, 175]","{'A593': [(165, 175)]}",{'A593': 1.0},A593,,"    private void printStat(StatPersisted stat) {
        printHex(""cZxid"", stat.getCzxid());
        System.out.println(""  ctime = "" + new Date(stat.getCtime()).toString());
        printHex(""mZxid"", stat.getMzxid());
        System.out.println(""  mtime = "" + new Date(stat.getMtime()).toString());
        printHex(""pZxid"", stat.getPzxid());
        System.out.println(""  cversion = "" + stat.getCversion());
        System.out.println(""  dataVersion = "" + stat.getVersion());
        System.out.println(""  aclVersion = "" + stat.getAversion());
        printHex(""ephemeralOwner"", stat.getEphemeralOwner());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printHex,"void printHex(String,long)","[177, 179]","{'A593': [(177, 179)]}",{'A593': 1.0},A593,,"    private void printHex(String prefix, long value) {
        System.out.println(String.format(""  %s = %#016x"", prefix, value));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printSnapshotJson,void printSnapshotJson(DataTree),"[181, 188]","{'A583': [(183, 185)], 'A647': [(181, 181), (187, 188)], 'A603': [(182, 182), (186, 186)]}","{'A583': 0.375, 'A647': 0.375, 'A603': 0.25}",A583,,"    private void printSnapshotJson(final DataTree dataTree) {
        JsonStringEncoder encoder = JsonStringEncoder.getInstance();
        System.out.printf(
            ""[1,0,{\""progname\"":\""SnapshotFormatter.java\"",\""progver\"":\""0.01\"",\""timestamp\"":%d}"",
            System.currentTimeMillis());
        printZnodeJson(dataTree, ""/"", encoder);
        System.out.print(""]"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotFormatter.java,SnapshotFormatter,printZnodeJson,"void printZnodeJson(DataTree,String,JsonStringEncoder)","[190, 232]","{'A583': [(200, 202)], 'A647': [(192, 199), (203, 211), (213, 225), (227, 232)], 'A603': [(190, 191), (212, 212), (226, 226)]}","{'A583': 0.06976744186046512, 'A647': 0.8372093023255814, 'A603': 0.09302325581395349}",A647,,"    private void printZnodeJson(final DataTree dataTree, final String fullPath, JsonStringEncoder encoder) {


        final DataNode n = dataTree.getNode(fullPath);

        if (null == n) {
            System.err.println(""DataTree Node for "" + fullPath + "" doesn't exist"");
            return;
        }

        final String name = fullPath.equals(""/"")
            ? fullPath
            : fullPath.substring(fullPath.lastIndexOf(""/"") + 1);

        System.out.print("","");

        int dataLen;
        synchronized (n) { // keep findbugs happy
            dataLen = (n.data == null) ? 0 : n.data.length;
        }
        StringBuilder nodeSB = new StringBuilder();
        nodeSB.append(""{"");
        nodeSB.append(""\""name\"":\"""").append(encoder.quoteAsString(name)).append(""\"""").append("","");
        nodeSB.append(""\""asize\"":"").append(dataLen).append("","");
        nodeSB.append(""\""dsize\"":"").append(dataLen).append("","");
        nodeSB.append(""\""dev\"":"").append(0).append("","");
        nodeSB.append(""\""ino\"":"").append(++INODE_IDX);
        nodeSB.append(""}"");

        Set<String> children;
        synchronized (n) { // keep findbugs happy
            children = n.getChildren();
        }
        if (children != null && children.size() > 0) {
            System.out.print(""["" + nodeSB);
            for (String child : children) {
                printZnodeJson(dataTree, fullPath + (fullPath.equals(""/"") ? """" : ""/"") + child, encoder);
            }
            System.out.print(""]"");
        } else {
            System.out.print(nodeSB);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getEphemerals,Set<String> getEphemerals(long),"[192, 201]","{'A583': [(194, 195), (198, 199)], 'A591': [(193, 193)], 'A590': [(192, 192), (197, 197), (200, 201)], 'A605': [(196, 196)]}","{'A583': 0.4, 'A591': 0.1, 'A590': 0.4, 'A605': 0.1}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    @SuppressWarnings(""unchecked"")
    public Set<String> getEphemerals(long sessionId) {
        HashSet<String> ret = ephemerals.get(sessionId);
        if (ret == null) {
            return new HashSet<>();
        }
        synchronized (ret) {
            return (HashSet<String>) ret.clone();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getContainers,Set<String> getContainers(),"[203, 205]","{'A616': [(203, 203), (205, 205)], 'A605': [(204, 204)]}","{'A616': 0.6666666666666666, 'A605': 0.3333333333333333}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Set<String> getContainers() {
        return new HashSet<>(containers);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getTtls,Set<String> getTtls(),"[207, 209]","{'A639': [(207, 207), (209, 209)], 'A605': [(208, 208)]}","{'A639': 0.6666666666666666, 'A605': 0.3333333333333333}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Set<String> getTtls() {
        return new HashSet<>(ttls);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getSessions,Collection<Long> getSessions(),"[211, 213]","{'A590': [(211, 213)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Collection<Long> getSessions() {
        return ephemerals.keySet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getNode,DataNode getNode(String),"[215, 217]","{'A590': [(215, 217)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public DataNode getNode(String path) {
        return nodes.get(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getNodeCount,int getNodeCount(),"[219, 221]","{'A596': [(219, 219)], 'A688': [(220, 221)]}","{'A596': 0.3333333333333333, 'A688': 0.6666666666666666}",A688,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public int getNodeCount() {
        return nodes.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getWatchCount,int getWatchCount(),"[223, 225]","{'A591': [(225, 225)], 'A596': [(223, 224)]}","{'A591': 0.3333333333333333, 'A596': 0.6666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public int getWatchCount() {
        return dataWatches.size() + childWatches.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getEphemeralsCount,int getEphemeralsCount(),"[227, 233]","{'A591': [(227, 233)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public int getEphemeralsCount() {
        int result = 0;
        for (HashSet<String> set : ephemerals.values()) {
            result += set.size();
        }
        return result;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,approximateDataSize,long approximateDataSize(),"[240, 249]","{'A591': [(240, 242), (247, 249)], 'A612': [(245, 245)], 'A596': [(246, 246)], 'A600': [(243, 244)]}","{'A591': 0.6, 'A612': 0.1, 'A596': 0.1, 'A600': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public long approximateDataSize() {
        long result = 0;
        for (Map.Entry<String, DataNode> entry : nodes.entrySet()) {
            DataNode value = entry.getValue();
            synchronized (value) {
                result += getNodeSize(entry.getKey(), value.data);
            }
        }
        return result;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getNodeSize,"long getNodeSize(String,byte[])","[254, 256]","{'A583': [(255, 255)], 'A612': [(254, 254), (256, 256)]}","{'A583': 0.3333333333333333, 'A612': 0.6666666666666666}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private static long getNodeSize(String path, byte[] data) {
        return (path == null ? 0 : path.length()) + (data == null ? 0 : data.length);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,cachedApproximateDataSize,long cachedApproximateDataSize(),"[258, 260]","{'A612': [(258, 260)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public long cachedApproximateDataSize() {
        return nodeDataSize.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,addConfigNode,void addConfigNode(),"[314, 329]","{'A583': [(326, 327)], 'A612': [(322, 322)], 'A604': [(314, 321), (323, 325), (328, 329)]}","{'A583': 0.125, 'A612': 0.0625, 'A604': 0.8125}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void addConfigNode() {
        DataNode zookeeperZnode = nodes.get(procZookeeper);
        if (zookeeperZnode != null) { // should always be the case
            zookeeperZnode.addChild(configChildZookeeper);
        } else {
            assert false : ""There's no /zookeeper znode - this should never happen."";
        }

        nodes.put(configZookeeper, new DataNode(new byte[0], -1L, new StatPersisted()));
        try {
            // Reconfig node is access controlled by default (ZOOKEEPER-2014).
            setACL(configZookeeper, ZooDefs.Ids.READ_ACL_UNSAFE, -1);
        } catch (NoNodeException e) {
            assert false : ""There's no "" + configZookeeper + "" znode - this should never happen."";
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,isSpecialPath,boolean isSpecialPath(String),"[338, 343]","{'A583': [(339, 342)], 'A596': [(338, 338), (343, 343)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    boolean isSpecialPath(String path) {
        return rootZookeeper.equals(path)
               || procZookeeper.equals(path)
               || quotaZookeeper.equals(path)
               || configZookeeper.equals(path);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,copyStatPersisted,"void copyStatPersisted(StatPersisted,StatPersisted)","[345, 355]","{'A583': [(345, 345)], 'A591': [(346, 351), (353, 355)], 'A596': [(352, 352)]}","{'A583': 0.09090909090909091, 'A591': 0.8181818181818182, 'A596': 0.09090909090909091}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public static void copyStatPersisted(StatPersisted from, StatPersisted to) {
        to.setAversion(from.getAversion());
        to.setCtime(from.getCtime());
        to.setCversion(from.getCversion());
        to.setCzxid(from.getCzxid());
        to.setMtime(from.getMtime());
        to.setMzxid(from.getMzxid());
        to.setPzxid(from.getPzxid());
        to.setVersion(from.getVersion());
        to.setEphemeralOwner(from.getEphemeralOwner());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,copyStat,"void copyStat(Stat,Stat)","[357, 369]","{'A583': [(357, 357)], 'A591': [(367, 368)], 'A590': [(358, 363), (365, 366), (369, 369)], 'A596': [(364, 364)]}","{'A583': 0.07692307692307693, 'A591': 0.15384615384615385, 'A590': 0.6923076923076923, 'A596': 0.07692307692307693}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public static void copyStat(Stat from, Stat to) {
        to.setAversion(from.getAversion());
        to.setCtime(from.getCtime());
        to.setCversion(from.getCversion());
        to.setCzxid(from.getCzxid());
        to.setMtime(from.getMtime());
        to.setMzxid(from.getMzxid());
        to.setPzxid(from.getPzxid());
        to.setVersion(from.getVersion());
        to.setEphemeralOwner(from.getEphemeralOwner());
        to.setDataLength(from.getDataLength());
        to.setNumChildren(from.getNumChildren());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,updateQuotaStat,"void updateQuotaStat(String,long,int)","[381, 397]","{'A583': [(390, 390), (392, 392)], 'A596': [(386, 386), (388, 389), (396, 397)], 'A641': [(381, 385), (387, 387), (391, 391), (395, 395)], 'A647': [(393, 394)]}","{'A583': 0.11764705882352941, 'A596': 0.29411764705882354, 'A641': 0.47058823529411764, 'A647': 0.11764705882352941}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void updateQuotaStat(String lastPrefix, long bytesDiff, int countDiff) {
        String statNodePath = Quotas.statPath(lastPrefix);
        DataNode statNode = nodes.get(statNodePath);

        if (statNode == null) {
            // should not happen
            LOG.error(""Missing node for stat {}"", statNodePath);
            return;
        }

        synchronized (statNode) {
            StatsTrack updatedStat = new StatsTrack(statNode.data);
            updatedStat.setCount(updatedStat.getCount() + countDiff);
            updatedStat.setBytes(updatedStat.getBytes() + bytesDiff);
            statNode.data = updatedStat.getStatsBytes();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,createNode,"void createNode(String,byte[],List<ACL>,long,int,long,long)","[416, 418]","{'A583': [(416, 417)], 'A591': [(418, 418)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void createNode(final String path, byte[] data, List<ACL> acl, long ephemeralOwner, int parentCVersion, long zxid, long time) throws NoNodeException, NodeExistsException {
        createNode(path, data, acl, ephemeralOwner, parentCVersion, zxid, time, null);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,createNode,"void createNode(String,byte[],List<ACL>,long,int,long,long,Stat)","[439, 528]","{'A583': [(439, 439), (446, 446), (456, 456), (463, 463), (468, 468), (485, 485), (496, 496), (502, 502), (507, 507)], 'A591': [(470, 470), (475, 475), (501, 501), (503, 503), (518, 518)], 'A590': [(440, 442), (444, 445), (447, 447), (449, 449), (469, 469), (489, 489), (498, 500), (504, 504), (528, 528)], 'A612': [(443, 443), (452, 455), (457, 462), (464, 464), (471, 471), (476, 484), (487, 488)], 'A596': [(486, 486), (497, 497), (505, 506), (508, 510), (512, 513), (515, 516), (523, 523)], 'A616': [(492, 492), (495, 495)], 'A639': [(472, 474), (490, 491), (493, 494)], 'A675': [(524, 524)], 'A641': [(511, 511), (514, 514), (517, 517), (520, 522)], 'A647': [(519, 519)], 'A613': [(448, 448), (450, 451), (525, 527)], 'A628': [(465, 467)]}","{'A583': 0.1, 'A591': 0.05555555555555555, 'A590': 0.15555555555555556, 'A612': 0.26666666666666666, 'A596': 0.13333333333333333, 'A616': 0.022222222222222223, 'A639': 0.07777777777777778, 'A675': 0.011111111111111112, 'A641': 0.06666666666666667, 'A647': 0.011111111111111112, 'A613': 0.06666666666666667, 'A628': 0.03333333333333333}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void createNode(final String path, byte[] data, List<ACL> acl, long ephemeralOwner, int parentCVersion, long zxid, long time, Stat outputStat) throws NoNodeException, NodeExistsException {
        int lastSlash = path.lastIndexOf('/');
        String parentName = path.substring(0, lastSlash);
        String childName = path.substring(lastSlash + 1);
        StatPersisted stat = createStat(zxid, time, ephemeralOwner);
        DataNode parent = nodes.get(parentName);
        if (parent == null) {
            throw new NoNodeException();
        }
        List<ACL> parentAcl;
        synchronized (parent) {
            parentAcl = getACL(parent);

            // Add the ACL to ACL cache first, to avoid the ACL not being
            // created race condition during fuzzy snapshot sync.
            //
            // This is the simplest fix, which may add ACL reference count
            // again if it's already counted in the ACL map of fuzzy
            // snapshot, which might also happen for deleteNode txn, but
            // at least it won't cause the ACL not exist issue.
            //
            // Later we can audit and delete all non-referenced ACLs from
            // ACL map when loading the snapshot/txns from disk, like what
            // we did for the global sessions.
            Long acls = aclCache.convertAcls(acl);

            DataNode existingChild = nodes.get(path);
            if (existingChild != null) {
                existingChild.acl = acls;
                throw new NodeExistsException();
            }

            nodes.preChange(parentName, parent);
            if (parentCVersion == -1) {
                parentCVersion = parent.stat.getCversion();
                parentCVersion++;
            }
            // There is possibility that we'll replay txns for a node which
            // was created and then deleted in the fuzzy range, and it's not
            // exist in the snapshot, so replay the creation might revert the
            // cversion and pzxid, need to check and only update when it's
            // larger.
            if (parentCVersion > parent.stat.getCversion()) {
                parent.stat.setCversion(parentCVersion);
                parent.stat.setPzxid(zxid);
            }
            DataNode child = new DataNode(data, acls, stat);
            parent.addChild(childName);
            nodes.postChange(parentName, parent);
            nodeDataSize.addAndGet(getNodeSize(path, child.data));
            nodes.put(path, child);
            EphemeralType ephemeralType = EphemeralType.get(ephemeralOwner);
            if (ephemeralType == EphemeralType.CONTAINER) {
                containers.add(path);
            } else if (ephemeralType == EphemeralType.TTL) {
                ttls.add(path);
            } else if (ephemeralOwner != 0) {
                HashSet<String> list = ephemerals.computeIfAbsent(ephemeralOwner, k -> new HashSet<>());
                synchronized (list) {
                    list.add(path);
                }
            }
            if (outputStat != null) {
                child.copyStat(outputStat);
            }
        }
        // now check if its one of the zookeeper node child
        if (parentName.startsWith(quotaZookeeper)) {
            // now check if it's the limit node
            if (Quotas.limitNode.equals(childName)) {
                // this is the limit node
                // get the parent and add it to the trie
                pTrie.addPath(Quotas.trimQuotaPath(parentName));
            }
            if (Quotas.statNode.equals(childName)) {
                updateQuotaForPath(Quotas.trimQuotaPath(parentName));
            }
        }

        String lastPrefix = getMaxPrefixWithQuota(path);
        long bytes = data == null ? 0 : data.length;
        // also check to update the quotas for this node
        if (lastPrefix != null) {    // ok we have some match and need to update
            updateQuotaStat(lastPrefix, bytes, 1);
        }
        updateWriteStat(path, bytes);
        dataWatches.triggerWatch(path, Event.EventType.NodeCreated, zxid, acl);
        childWatches.triggerWatch(parentName.equals("""") ? ""/"" : parentName,
            Event.EventType.NodeChildrenChanged, zxid, parentAcl);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,deleteNode,"void deleteNode(String,long)","[539, 632]","{'A583': [(539, 539), (549, 549), (555, 556), (565, 565), (581, 582), (588, 589), (606, 606), (608, 608), (618, 627)], 'A591': [(598, 598), (600, 600), (605, 605)], 'A590': [(540, 542), (563, 564), (566, 566), (568, 568), (579, 579), (590, 590), (592, 596), (632, 632)], 'A612': [(543, 548), (550, 554), (557, 562), (572, 572), (574, 577), (597, 597)], 'A596': [(591, 591), (599, 599), (602, 604), (607, 607), (609, 611), (613, 613), (617, 617)], 'A616': [(584, 584)], 'A639': [(569, 569), (571, 571), (573, 573), (583, 583), (585, 586)], 'A675': [(614, 616)], 'A641': [(601, 601), (612, 612)], 'A613': [(567, 567), (570, 570), (578, 578), (580, 580), (628, 631)], 'A726': [(587, 587)]}","{'A583': 0.22340425531914893, 'A591': 0.031914893617021274, 'A590': 0.1595744680851064, 'A612': 0.24468085106382978, 'A596': 0.11702127659574468, 'A616': 0.010638297872340425, 'A639': 0.06382978723404255, 'A675': 0.031914893617021274, 'A641': 0.02127659574468085, 'A613': 0.0851063829787234, 'A726': 0.010638297872340425}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void deleteNode(String path, long zxid) throws NoNodeException {
        int lastSlash = path.lastIndexOf('/');
        String parentName = path.substring(0, lastSlash);
        String childName = path.substring(lastSlash + 1);

        // The child might already be deleted during taking fuzzy snapshot,
        // but we still need to update the pzxid here before throw exception
        // for no such child
        DataNode parent = nodes.get(parentName);
        if (parent == null) {
            throw new NoNodeException();
        }
        synchronized (parent) {
            nodes.preChange(parentName, parent);
            parent.removeChild(childName);
            // Only update pzxid when the zxid is larger than the current pzxid,
            // otherwise we might override some higher pzxid set by a CreateTxn,
            // which could cause the cversion and pzxid inconsistent
            if (zxid > parent.stat.getPzxid()) {
                parent.stat.setPzxid(zxid);
            }
            nodes.postChange(parentName, parent);
        }

        DataNode node = nodes.get(path);
        if (node == null) {
            throw new NoNodeException();
        }
        List<ACL> acl;
        nodes.remove(path);
        synchronized (node) {
            acl = getACL(node);
            aclCache.removeUsage(node.acl);
            nodeDataSize.addAndGet(-getNodeSize(path, node.data));
        }

        // Synchronized to sync the containers and ttls change, probably
        // only need to sync on containers and ttls, will update it in a
        // separate patch.
        List<ACL> parentAcl;
        synchronized (parent) {
            parentAcl = getACL(parent);
            long owner = node.stat.getEphemeralOwner();
            EphemeralType ephemeralType = EphemeralType.get(owner);
            if (ephemeralType == EphemeralType.CONTAINER) {
                containers.remove(path);
            } else if (ephemeralType == EphemeralType.TTL) {
                ttls.remove(path);
                ServerMetrics.getMetrics().TTL_NODE_DELETED_COUNT.add(1);
            } else if (owner != 0) {
                Set<String> nodes = ephemerals.get(owner);
                if (nodes != null) {
                    synchronized (nodes) {
                        nodes.remove(path);
                    }
                }
            }
        }

        if (parentName.startsWith(procZookeeper) && Quotas.limitNode.equals(childName)) {
            // delete the node in the trie.
            // we need to update the trie as well
            pTrie.deletePath(Quotas.trimQuotaPath(parentName));
        }

        // also check to update the quotas for this node
        String lastPrefix = getMaxPrefixWithQuota(path);
        if (lastPrefix != null) {
            // ok we have some match and need to update
            long bytes;
            synchronized (node) {
                bytes = (node.data == null ? 0 : -(node.data.length));
            }
            updateQuotaStat(lastPrefix, bytes, -1);
        }

        updateWriteStat(path, 0L);

        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                ""dataWatches.triggerWatch "" + path);
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                ""childWatches.triggerWatch "" + parentName);
        }

        WatcherOrBitSet processed = dataWatches.triggerWatch(path, EventType.NodeDeleted, zxid, acl);
        childWatches.triggerWatch(path, EventType.NodeDeleted, zxid, acl, processed);
        childWatches.triggerWatch("""".equals(parentName) ? ""/"" : parentName,
            EventType.NodeChildrenChanged, zxid, parentAcl);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,setData,"Stat setData(String,byte[],int,long,long)","[634, 667]","{'A583': [(634, 634), (638, 638), (641, 641), (644, 644), (656, 656), (659, 659), (662, 662)], 'A591': [(650, 650), (655, 655)], 'A590': [(635, 637), (639, 639), (642, 642), (646, 649), (652, 652)], 'A612': [(645, 645), (651, 651)], 'A675': [(658, 658), (663, 664)], 'A600': [(661, 661), (666, 667)], 'A641': [(653, 654), (657, 657), (660, 660)], 'A613': [(640, 640), (643, 643), (665, 665)]}","{'A583': 0.20588235294117646, 'A591': 0.058823529411764705, 'A590': 0.29411764705882354, 'A612': 0.058823529411764705, 'A675': 0.08823529411764706, 'A600': 0.08823529411764706, 'A641': 0.11764705882352941, 'A613': 0.08823529411764706}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Stat setData(String path, byte[] data, int version, long zxid, long time) throws NoNodeException {
        Stat s = new Stat();
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new NoNodeException();
        }
        List<ACL> acl;
        byte[] lastData;
        synchronized (n) {
            acl = getACL(n);
            lastData = n.data;
            nodes.preChange(path, n);
            n.data = data;
            n.stat.setMtime(time);
            n.stat.setMzxid(zxid);
            n.stat.setVersion(version);
            n.copyStat(s);
            nodes.postChange(path, n);
        }

        // first do a quota check if the path is in a quota subtree.
        String lastPrefix = getMaxPrefixWithQuota(path);
        long bytesDiff = (data == null ? 0 : data.length) - (lastData == null ? 0 : lastData.length);
        // now update if the path is in a quota subtree.
        long dataBytes = data == null ? 0 : data.length;
        if (lastPrefix != null) {
            updateQuotaStat(lastPrefix, bytesDiff, 0);
        }
        nodeDataSize.addAndGet(getNodeSize(path, data) - getNodeSize(path, lastData));

        updateWriteStat(path, dataBytes);
        dataWatches.triggerWatch(path, EventType.NodeDataChanged, zxid, acl);
        return s;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getMaxPrefixWithQuota,String getMaxPrefixWithQuota(String),"[675, 686]","{'A591': [(682, 682), (684, 684)], 'A590': [(686, 686)], 'A596': [(676, 678), (685, 685)], 'A600': [(675, 675), (679, 680)], 'A620': [(681, 681), (683, 683)]}","{'A591': 0.16666666666666666, 'A590': 0.08333333333333333, 'A596': 0.3333333333333333, 'A600': 0.25, 'A620': 0.16666666666666666}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public String getMaxPrefixWithQuota(String path) {
        // do nothing for the root.
        // we are not keeping a quota on the zookeeper
        // root node for now.
        String lastPrefix = pTrie.findMaxPrefix(path);

        if (rootZookeeper.equals(lastPrefix) || lastPrefix.isEmpty()) {
            return null;
        } else {
            return lastPrefix;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,addWatch,"void addWatch(String,Watcher,int)","[688, 694]","{'A636': [(688, 690), (694, 694)], 'A625': [(691, 693)]}","{'A636': 0.5714285714285714, 'A625': 0.42857142857142855}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void addWatch(String basePath, Watcher watcher, int mode) {
        WatcherMode watcherMode = WatcherMode.fromZooDef(mode);
        dataWatches.addWatch(basePath, watcher, watcherMode);
        if (watcherMode != WatcherMode.PERSISTENT_RECURSIVE) {
            childWatches.addWatch(basePath, watcher, watcherMode);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getData,"byte[] getData(String,Stat,Watcher)","[696, 711]","{'A583': [(696, 696), (699, 699), (701, 701)], 'A591': [(703, 703)], 'A590': [(697, 698), (700, 700), (702, 702), (704, 706), (708, 708), (711, 711)], 'A675': [(707, 707), (709, 710)]}","{'A583': 0.1875, 'A591': 0.0625, 'A590': 0.5625, 'A675': 0.1875}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public byte[] getData(String path, Stat stat, Watcher watcher) throws NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new NoNodeException();
        }
        byte[] data;
        synchronized (n) {
            n.copyStat(stat);
            if (watcher != null) {
                dataWatches.addWatch(path, watcher);
            }
            data = n.data;
        }
        updateReadStat(path, data == null ? 0 : data.length);
        return data;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,statNode,"Stat statNode(String,Watcher)","[713, 727]","{'A583': [(713, 713), (717, 717), (719, 719), (721, 721)], 'A591': [(723, 723)], 'A590': [(714, 716), (718, 718), (720, 720), (722, 722), (724, 724), (727, 727)], 'A675': [(725, 726)]}","{'A583': 0.26666666666666666, 'A591': 0.06666666666666667, 'A590': 0.5333333333333333, 'A675': 0.13333333333333333}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Stat statNode(String path, Watcher watcher) throws NoNodeException {
        if (watcher != null) {
            dataWatches.addWatch(path, watcher);
        }
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new NoNodeException();
        }
        Stat stat = new Stat();
        synchronized (n) {
            n.copyStat(stat);
        }
        updateReadStat(path, 0L);
        return stat;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getChildren,"List<String> getChildren(String,Stat,Watcher)","[729, 753]","{'A583': [(729, 729), (732, 732)], 'A590': [(730, 731), (733, 733), (735, 735), (741, 744), (753, 753)], 'A596': [(736, 738), (740, 740)], 'A675': [(734, 734), (745, 752)], 'A605': [(739, 739)]}","{'A583': 0.08, 'A590': 0.36, 'A596': 0.16, 'A675': 0.36, 'A605': 0.04}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public List<String> getChildren(String path, Stat stat, Watcher watcher) throws NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new NoNodeException();
        }
        List<String> children;
        synchronized (n) {
            if (stat != null) {
                n.copyStat(stat);
            }
            children = new ArrayList<>(n.getChildren());

            if (watcher != null) {
                childWatches.addWatch(path, watcher);
            }
        }

        int bytes = 0;
        for (String child : children) {
            bytes += child.length();
        }
        updateReadStat(path, bytes);

        return children;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getAllChildrenNumber,int getAllChildrenNumber(String),"[755, 762]","{'A583': [(756, 756)], 'A612': [(761, 761)], 'A641': [(755, 755), (757, 760), (762, 762)]}","{'A583': 0.125, 'A612': 0.125, 'A641': 0.75}",A641,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public int getAllChildrenNumber(String path) {
        // cull out these two keys:"""", ""/""
        if (""/"".equals(path)) {
            return nodes.size() - 2;
        }

        return (int) nodes.entrySet().parallelStream().filter(entry -> entry.getKey().startsWith(path + ""/"")).count();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,setACL,"Stat setACL(String,List<ACL>,int)","[764, 779]","{'A583': [(764, 764), (767, 767), (770, 770)], 'A591': [(775, 775)], 'A590': [(765, 766), (768, 769), (773, 773), (777, 779)], 'A612': [(772, 772), (776, 776)], 'A639': [(771, 771), (774, 774)]}","{'A583': 0.1875, 'A591': 0.0625, 'A590': 0.5, 'A612': 0.125, 'A639': 0.125}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Stat setACL(String path, List<ACL> acl, int version) throws NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new NoNodeException();
        }
        synchronized (n) {
            Stat stat = new Stat();
            aclCache.removeUsage(n.acl);
            nodes.preChange(path, n);
            n.stat.setAversion(version);
            n.acl = aclCache.convertAcls(acl);
            n.copyStat(stat);
            nodes.postChange(path, n);
            return stat;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getACL,"List<ACL> getACL(String,Stat)","[781, 792]","{'A583': [(781, 781), (784, 784)], 'A590': [(782, 783), (785, 786), (791, 792)], 'A605': [(790, 790)], 'A604': [(787, 789)]}","{'A583': 0.16666666666666666, 'A590': 0.5, 'A605': 0.08333333333333333, 'A604': 0.25}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public List<ACL> getACL(String path, Stat stat) throws NoNodeException {
        DataNode n = nodes.get(path);
        if (n == null) {
            throw new NoNodeException();
        }
        synchronized (n) {
            if (stat != null) {
                n.copyStat(stat);
            }
            return new ArrayList<>(aclCache.convertLong(n.acl));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getACL,List<ACL> getACL(DataNode),"[794, 798]","{'A639': [(794, 798)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public List<ACL> getACL(DataNode node) {
        synchronized (node) {
            return aclCache.convertLong(node.acl);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,aclCacheSize,int aclCacheSize(),"[800, 802]","{'A639': [(800, 802)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public int aclCacheSize() {
        return aclCache.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ProcessTxnResult,equals,boolean equals(Object),"[828, 835]","{'A590': [(828, 835)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        @Override
        public boolean equals(Object o) {
            if (o instanceof ProcessTxnResult) {
                ProcessTxnResult other = (ProcessTxnResult) o;
                return other.clientId == clientId && other.cxid == cxid;
            }
            return false;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ProcessTxnResult,hashCode,int hashCode(),"[843, 846]","{'A590': [(843, 846)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        @Override
        public int hashCode() {
            return (int) ((clientId ^ cxid) % Integer.MAX_VALUE);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,processTxn,"ProcessTxnResult processTxn(TxnHeader,Record,TxnDigest)","[852, 856]","{'A612': [(852, 856)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public ProcessTxnResult processTxn(TxnHeader header, Record txn, TxnDigest digest) {
        ProcessTxnResult result = processTxn(header, txn);
        compareDigest(header, txn, digest);
        return result;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,processTxn,"ProcessTxnResult processTxn(TxnHeader,Record)","[858, 860]","{'A612': [(858, 860)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public ProcessTxnResult processTxn(TxnHeader header, Record txn) {
        return this.processTxn(header, txn, false);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,processTxn,"ProcessTxnResult processTxn(TxnHeader,Record,boolean)","[862, 1123]","{'A583': [(862, 862), (873, 953), (962, 973), (975, 987), (989, 1021), (1024, 1035), (1037, 1038), (1044, 1044), (1057, 1057), (1065, 1066), (1069, 1069), (1071, 1073), (1077, 1077)], 'A590': [(863, 872), (1022, 1023), (1036, 1036), (1039, 1040), (1043, 1043), (1045, 1045), (1080, 1080), (1083, 1083), (1094, 1094), (1122, 1123)], 'A612': [(954, 961), (1046, 1056), (1058, 1064), (1067, 1068), (1070, 1070), (1074, 1076), (1078, 1079), (1081, 1082), (1084, 1093), (1095, 1112), (1114, 1118), (1121, 1121)], 'A596': [(1042, 1042), (1113, 1113), (1119, 1120)], 'A605': [(974, 974)], 'A620': [(1041, 1041)], 'A625': [(988, 988)]}","{'A583': 0.6221374045801527, 'A590': 0.08396946564885496, 'A612': 0.26717557251908397, 'A596': 0.015267175572519083, 'A605': 0.003816793893129771, 'A620': 0.003816793893129771, 'A625': 0.003816793893129771}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public ProcessTxnResult processTxn(TxnHeader header, Record txn, boolean isSubTxn) {
        ProcessTxnResult rc = new ProcessTxnResult();

        try {
            rc.clientId = header.getClientId();
            rc.cxid = header.getCxid();
            rc.zxid = header.getZxid();
            rc.type = header.getType();
            rc.err = 0;
            rc.multiResult = null;
            switch (header.getType()) {
            case OpCode.create:
                CreateTxn createTxn = (CreateTxn) txn;
                rc.path = createTxn.getPath();
                createNode(
                    createTxn.getPath(),
                    createTxn.getData(),
                    createTxn.getAcl(),
                    createTxn.getEphemeral() ? header.getClientId() : 0,
                    createTxn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    null);
                break;
            case OpCode.create2:
                CreateTxn create2Txn = (CreateTxn) txn;
                rc.path = create2Txn.getPath();
                Stat stat = new Stat();
                createNode(
                    create2Txn.getPath(),
                    create2Txn.getData(),
                    create2Txn.getAcl(),
                    create2Txn.getEphemeral() ? header.getClientId() : 0,
                    create2Txn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    stat);
                rc.stat = stat;
                break;
            case OpCode.createTTL:
                CreateTTLTxn createTtlTxn = (CreateTTLTxn) txn;
                rc.path = createTtlTxn.getPath();
                stat = new Stat();
                createNode(
                    createTtlTxn.getPath(),
                    createTtlTxn.getData(),
                    createTtlTxn.getAcl(),
                    EphemeralType.TTL.toEphemeralOwner(createTtlTxn.getTtl()),
                    createTtlTxn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    stat);
                rc.stat = stat;
                break;
            case OpCode.createContainer:
                CreateContainerTxn createContainerTxn = (CreateContainerTxn) txn;
                rc.path = createContainerTxn.getPath();
                stat = new Stat();
                createNode(
                    createContainerTxn.getPath(),
                    createContainerTxn.getData(),
                    createContainerTxn.getAcl(),
                    EphemeralType.CONTAINER_EPHEMERAL_OWNER,
                    createContainerTxn.getParentCVersion(),
                    header.getZxid(),
                    header.getTime(),
                    stat);
                rc.stat = stat;
                break;
            case OpCode.delete:
            case OpCode.deleteContainer:
                DeleteTxn deleteTxn = (DeleteTxn) txn;
                rc.path = deleteTxn.getPath();
                deleteNode(deleteTxn.getPath(), header.getZxid());
                break;
            case OpCode.reconfig:
            case OpCode.setData:
                SetDataTxn setDataTxn = (SetDataTxn) txn;
                rc.path = setDataTxn.getPath();
                rc.stat = setData(
                    setDataTxn.getPath(),
                    setDataTxn.getData(),
                    setDataTxn.getVersion(),
                    header.getZxid(),
                    header.getTime());
                break;
            case OpCode.setACL:
                SetACLTxn setACLTxn = (SetACLTxn) txn;
                rc.path = setACLTxn.getPath();
                rc.stat = setACL(setACLTxn.getPath(), setACLTxn.getAcl(), setACLTxn.getVersion());
                break;
            case OpCode.closeSession:
                long sessionId = header.getClientId();
                if (txn != null) {
                    killSession(sessionId, header.getZxid(),
                            ephemerals.remove(sessionId),
                            ((CloseSessionTxn) txn).getPaths2Delete());
                } else {
                    killSession(sessionId, header.getZxid());
                }
                break;
            case OpCode.error:
                ErrorTxn errTxn = (ErrorTxn) txn;
                rc.err = errTxn.getErr();
                break;
            case OpCode.check:
                CheckVersionTxn checkTxn = (CheckVersionTxn) txn;
                rc.path = checkTxn.getPath();
                break;
            case OpCode.multi:
                MultiTxn multiTxn = (MultiTxn) txn;
                List<Txn> txns = multiTxn.getTxns();
                rc.multiResult = new ArrayList<>();
                boolean failed = false;
                for (Txn subtxn : txns) {
                    if (subtxn.getType() == OpCode.error) {
                        failed = true;
                        break;
                    }
                }

                boolean post_failed = false;
                for (Txn subtxn : txns) {
                    final Supplier<Record> supplier;
                    switch (subtxn.getType()) {
                    case OpCode.create:
                    case OpCode.create2:
                        supplier = CreateTxn::new;
                        break;
                    case OpCode.createTTL:
                        supplier = CreateTTLTxn::new;
                        break;
                    case OpCode.createContainer:
                        supplier = CreateContainerTxn::new;
                        break;
                    case OpCode.delete:
                    case OpCode.deleteContainer:
                        supplier = DeleteTxn::new;
                        break;
                    case OpCode.setData:
                        supplier = SetDataTxn::new;
                        break;
                    case OpCode.error:
                        supplier = ErrorTxn::new;
                        post_failed = true;
                        break;
                    case OpCode.check:
                        supplier = CheckVersionTxn::new;
                        break;
                    default:
                        throw new IOException(""Invalid type of op: "" + subtxn.getType());
                    }

                    final Record record;
                    if (failed && subtxn.getType() != OpCode.error) {
                        int ec = post_failed ? Code.RUNTIMEINCONSISTENCY.intValue() : Code.OK.intValue();
                        subtxn.setType(OpCode.error);
                        record = new ErrorTxn(ec);
                    } else {
                        record = RequestRecord.fromBytes(subtxn.getData()).readRecord(supplier);
                    }

                    assert !failed || (subtxn.getType() == OpCode.error);

                    TxnHeader subHdr = new TxnHeader(
                        header.getClientId(),
                        header.getCxid(),
                        header.getZxid(),
                        header.getTime(),
                        subtxn.getType());
                    ProcessTxnResult subRc = processTxn(subHdr, record, true);
                    rc.multiResult.add(subRc);
                    if (subRc.err != 0 && rc.err == 0) {
                        rc.err = subRc.err;
                    }
                }
                break;
            }
        } catch (KeeperException e) {
            LOG.debug(""Failed: {}:{}"", header, txn, e);
            rc.err = e.code().intValue();
        } catch (IOException e) {
            LOG.debug(""Failed: {}:{}"", header, txn, e);
        }

        /*
         * Snapshots are taken lazily. When serializing a node, it's data
         * and children copied in a synchronization block on that node,
         * which means newly created node won't be in the snapshot, so
         * we won't have mismatched cversion and pzxid when replaying the
         * createNode txn.
         *
         * But there is a tricky scenario that if the child is deleted due
         * to session close and re-created in a different global session
         * after that the parent is serialized, then when replay the txn
         * because the node belongs to a different session, replay the
         * closeSession txn won't delete it anymore, and we'll get NODEEXISTS
         * error when replay the createNode txn. In this case, we need to
         * update the cversion and pzxid to the new value.
         *
         * Note, such failures on DT should be seen only during
         * restore.
         */
        if (header.getType() == OpCode.create && rc.err == Code.NODEEXISTS.intValue()) {
            LOG.debug(""Adjusting parent cversion for Txn: {} path: {} err: {}"", header.getType(), rc.path, rc.err);
            int lastSlash = rc.path.lastIndexOf('/');
            String parentName = rc.path.substring(0, lastSlash);
            CreateTxn cTxn = (CreateTxn) txn;
            try {
                setCversionPzxid(parentName, cTxn.getParentCVersion(), header.getZxid());
            } catch (NoNodeException e) {
                LOG.error(""Failed to set parent cversion for: {}"", parentName, e);
                rc.err = e.code().intValue();
            }
        } else if (rc.err != Code.OK.intValue()) {
            LOG.debug(""Ignoring processTxn failure hdr: {} : error: {}"", header.getType(), rc.err);
        }

        /*
         * Things we can only update after the whole txn is applied to data
         * tree.
         *
         * If we update the lastProcessedZxid with the first sub txn in multi
         * and there is a snapshot in progress, it's possible that the zxid
         * associated with the snapshot only include partial of the multi op.
         *
         * When loading snapshot, it will only load the txns after the zxid
         * associated with snapshot file, which could cause data inconsistency
         * due to missing sub txns.
         *
         * To avoid this, we only update the lastProcessedZxid when the whole
         * multi-op txn is applied to DataTree.
         */
        if (!isSubTxn) {
            /*
             * A snapshot might be in progress while we are modifying the data
             * tree. If we set lastProcessedZxid prior to making corresponding
             * change to the tree, then the zxid associated with the snapshot
             * file will be ahead of its contents. Thus, while restoring from
             * the snapshot, the restore method will not apply the transaction
             * for zxid associated with the snapshot file, since the restore
             * method assumes that transaction to be present in the snapshot.
             *
             * To avoid this, we first apply the transaction and then modify
             * lastProcessedZxid.  During restore, we correctly handle the
             * case where the snapshot contains data ahead of the zxid associated
             * with the file.
             */
            if (rc.zxid > lastProcessedZxid) {
                lastProcessedZxid = rc.zxid;
            }

            if (digestFromLoadedSnapshot != null) {
                compareSnapshotDigests(rc.zxid);
            } else {
                // only start recording digest when we're not in fuzzy state
                logZxidDigest(rc.zxid, getTreeDigest());
            }
        }

        return rc;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,killSession,"void killSession(long,long)","[1125, 1133]","{'A583': [(1126, 1126)], 'A590': [(1127, 1131)], 'A612': [(1132, 1133)], 'A596': [(1125, 1125)]}","{'A583': 0.1111111111111111, 'A590': 0.5555555555555556, 'A612': 0.2222222222222222, 'A596': 0.1111111111111111}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    void killSession(long session, long zxid) {
        // The list is already removed from the ephemerals,
        // so we do not have to worry about synchronizing on
        // the list. This is only called from FinalRequestProcessor
        // so there is no need for synchronization. The list is not
        // changed here. Only create and delete change the list which
        // are again called from FinalRequestProcessor in sequence.
        killSession(session, zxid, ephemerals.remove(session), null);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,killSession,"void killSession(long,long,Set<String>,List<String>)","[1135, 1160]","{'A583': [(1152, 1155)], 'A612': [(1135, 1151), (1156, 1160)]}","{'A583': 0.15384615384615385, 'A612': 0.8461538461538461}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    void killSession(long session, long zxid, Set<String> paths2DeleteLocal,
            List<String> paths2DeleteInTxn) {
        if (paths2DeleteInTxn != null) {
            deleteNodes(session, zxid, paths2DeleteInTxn);
        }

        if (paths2DeleteLocal == null) {
            return;
        }

        if (paths2DeleteInTxn != null) {
            // explicitly check and remove to avoid potential performance
            // issue when using removeAll
            for (String path: paths2DeleteInTxn) {
                paths2DeleteLocal.remove(path);
            }
            if (!paths2DeleteLocal.isEmpty()) {
                LOG.warn(
                    ""Unexpected extra paths under session {} which are not in txn 0x{}"",
                    paths2DeleteLocal,
                    Long.toHexString(zxid));
            }
        }

        deleteNodes(session, zxid, paths2DeleteLocal);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,deleteNodes,"void deleteNodes(long,long,Iterable<String>)","[1162, 1187]","{'A583': [(1171, 1171)], 'A590': [(1185, 1187)], 'A612': [(1162, 1163), (1166, 1167), (1170, 1170)], 'A592': [(1164, 1165), (1168, 1169), (1172, 1184)]}","{'A583': 0.038461538461538464, 'A590': 0.11538461538461539, 'A612': 0.19230769230769232, 'A592': 0.6538461538461539}",A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    void deleteNodes(long session, long zxid, Iterable<String> paths2Delete) {
        for (String path : paths2Delete) {
            boolean deleted = false;
            String sessionHex = ""0x"" + Long.toHexString(session);
            try {
                deleteNode(path, zxid);
                deleted = true;
                LOG.debug(""Deleting ephemeral node {} for session {}"", path, sessionHex);
            } catch (NoNodeException e) {
                LOG.warn(
                    ""Ignoring NoNodeException for path {} while removing ephemeral for dead session {}"",
                        path, sessionHex);
            }
            if (ZKAuditProvider.isAuditEnabled()) {
                if (deleted) {
                    ZKAuditProvider.log(ZKAuditProvider.getZKUser(),
                            AuditConstants.OP_DEL_EZNODE_EXP, path, null, null,
                            sessionHex, null, Result.SUCCESS);
                } else {
                    ZKAuditProvider.log(ZKAuditProvider.getZKUser(),
                            AuditConstants.OP_DEL_EZNODE_EXP, path, null, null,
                            sessionHex, null, Result.FAILURE);
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getCounts,"void getCounts(String,Counts)","[1203, 1220]","{'A583': [(1208, 1209), (1211, 1211)], 'A596': [(1203, 1207), (1210, 1210), (1212, 1220)]}","{'A583': 0.16666666666666666, 'A596': 0.8333333333333334}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void getCounts(String path, Counts counts) {
        DataNode node = getNode(path);
        if (node == null) {
            return;
        }
        String[] children;
        int len;
        synchronized (node) {
            children = node.getChildren().toArray(new String[0]);
            len = (node.data == null ? 0 : node.data.length);
        }
        // add itself
        counts.count += 1;
        counts.bytes += len;
        for (String child : children) {
            getCounts(path + ""/"" + child, counts);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,updateQuotaForPath,void updateQuotaForPath(String),"[1227, 1245]","{'A583': [(1230, 1232), (1237, 1237), (1242, 1242)], 'A612': [(1241, 1241), (1243, 1243)], 'A596': [(1227, 1229), (1234, 1236), (1238, 1240), (1244, 1245)], 'A641': [(1233, 1233)]}","{'A583': 0.2631578947368421, 'A612': 0.10526315789473684, 'A596': 0.5789473684210527, 'A641': 0.05263157894736842}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void updateQuotaForPath(String path) {
        Counts c = new Counts();
        getCounts(path, c);
        StatsTrack statsTrack = new StatsTrack();
        statsTrack.setBytes(c.bytes);
        statsTrack.setCount(c.count);
        String statPath = Quotas.statPath(path);
        DataNode node = getNode(statPath);
        // it should exist
        if (node == null) {
            LOG.warn(""Missing quota stat node {}"", statPath);
            return;
        }
        synchronized (node) {
            nodes.preChange(statPath, node);
            node.data = statsTrack.getStatsBytes();
            nodes.postChange(statPath, node);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,traverseNode,void traverseNode(String),"[1252, 1276]","{'A583': [(1254, 1254), (1256, 1256), (1261, 1261), (1267, 1267)], 'A596': [(1252, 1253), (1255, 1255), (1257, 1257), (1270, 1270), (1275, 1276)], 'A592': [(1258, 1258)], 'A600': [(1259, 1260), (1262, 1266), (1268, 1269), (1271, 1274)]}","{'A583': 0.16, 'A596': 0.28, 'A592': 0.04, 'A600': 0.52}",A600,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void traverseNode(String path) {
        DataNode node = getNode(path);
        String[] children;
        synchronized (node) {
            children = node.getChildren().toArray(new String[0]);
        }
        if (children.length == 0) {
            // this node does not have a child
            // is the leaf node
            // check if it's the leaf node
            String endString = ""/"" + Quotas.limitNode;
            if (path.endsWith(endString)) {
                // ok this is the limit node
                // get the real node and update
                // the count and the bytes
                String realPath = path.substring(Quotas.quotaZookeeper.length(), path.indexOf(endString));
                updateQuotaForPath(realPath);
                this.pTrie.addPath(realPath);
            }
            return;
        }
        for (String child : children) {
            traverseNode(path + ""/"" + child);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,setupQuota,void setupQuota(),"[1281, 1288]","{'A596': [(1281, 1288)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void setupQuota() {
        String quotaPath = Quotas.quotaZookeeper;
        DataNode node = getNode(quotaPath);
        if (node == null) {
            return;
        }
        traverseNode(quotaPath);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serializeNode,"void serializeNode(OutputArchive,StringBuilder)","[1298, 1323]","{'A583': [(1304, 1304), (1312, 1312), (1318, 1318)], 'A590': [(1298, 1303), (1306, 1306), (1313, 1313), (1315, 1316), (1322, 1323)], 'A612': [(1314, 1314)], 'A616': [(1305, 1305), (1307, 1311)], 'A592': [(1317, 1317), (1319, 1321)]}","{'A583': 0.11538461538461539, 'A590': 0.46153846153846156, 'A612': 0.038461538461538464, 'A616': 0.23076923076923078, 'A592': 0.15384615384615385}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    void serializeNode(OutputArchive oa, StringBuilder path) throws IOException {
        String pathString = path.toString();
        DataNode node = getNode(pathString);
        if (node == null) {
            return;
        }
        String[] children;
        DataNode nodeCopy;
        synchronized (node) {
            StatPersisted statCopy = new StatPersisted();
            copyStatPersisted(node.stat, statCopy);
            //we do not need to make a copy of node.data because the contents
            //are never changed
            nodeCopy = new DataNode(node.data, node.acl, statCopy);
            children = node.getChildren().toArray(new String[0]);
        }
        serializeNodeData(oa, pathString, nodeCopy);
        path.append('/');
        int off = path.length();
        for (String child : children) {
            // Since this is single buffer being reused, we need to truncate the previous bytes of string.
            path.delete(off, Integer.MAX_VALUE);
            path.append(child);
            serializeNode(oa, path);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serializeNodeData,"void serializeNodeData(OutputArchive,String,DataNode)","[1326, 1329]","{'A612': [(1326, 1329)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void serializeNodeData(OutputArchive oa, String path, DataNode node) throws IOException {
        oa.writeString(path, ""path"");
        oa.writeRecord(node, ""node"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serializeAcls,void serializeAcls(OutputArchive),"[1331, 1333]","{'A583': [(1331, 1331)], 'A612': [(1333, 1333)], 'A639': [(1332, 1332)]}","{'A583': 0.3333333333333333, 'A612': 0.3333333333333333, 'A639': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void serializeAcls(OutputArchive oa) throws IOException {
        aclCache.serialize(oa);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serializeNodes,void serializeNodes(OutputArchive),"[1335, 1342]","{'A583': [(1335, 1336)], 'A590': [(1337, 1342)]}","{'A583': 0.25, 'A590': 0.75}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void serializeNodes(OutputArchive oa) throws IOException {
        serializeNode(oa, new StringBuilder());
        // / marks end of stream
        // we need to check if clear had been called in between the snapshot.
        if (root != null) {
            oa.writeString(""/"", ""path"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serialize,"void serialize(OutputArchive,String)","[1344, 1347]","{'A612': [(1344, 1347)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void serialize(OutputArchive oa, String tag) throws IOException {
        serializeAcls(oa);
        serializeNodes(oa);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,deserialize,"void deserialize(InputArchive,String)","[1349, 1398]","{'A583': [(1369, 1370), (1373, 1374), (1379, 1380), (1392, 1392)], 'A591': [(1355, 1355), (1367, 1368), (1372, 1372)], 'A590': [(1349, 1349), (1351, 1351), (1354, 1354), (1356, 1358), (1362, 1366), (1381, 1385), (1398, 1398)], 'A612': [(1353, 1353), (1386, 1391)], 'A596': [(1371, 1371), (1393, 1395)], 'A616': [(1376, 1376)], 'A639': [(1350, 1350), (1359, 1361), (1375, 1375), (1377, 1378), (1396, 1397)], 'A597': [(1352, 1352)]}","{'A583': 0.14, 'A591': 0.08, 'A590': 0.34, 'A612': 0.14, 'A596': 0.08, 'A616': 0.02, 'A639': 0.18, 'A597': 0.02}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void deserialize(InputArchive ia, String tag) throws IOException {
        aclCache.deserialize(ia);
        nodes.clear();
        pTrie.clear();
        nodeDataSize.set(0);
        String path = ia.readString(""path"");
        while (!""/"".equals(path)) {
            DataNode node = new DataNode();
            ia.readRecord(node, ""node"");
            nodes.put(path, node);
            synchronized (node) {
                aclCache.addUsage(node.acl);
            }
            int lastSlash = path.lastIndexOf('/');
            if (lastSlash == -1) {
                root = node;
            } else {
                String parentPath = path.substring(0, lastSlash);
                DataNode parent = nodes.get(parentPath);
                if (parent == null) {
                    throw new IOException(
                            ""Invalid Datatree, unable to find parent "" + parentPath + "" of path "" + path);
                }
                parent.addChild(path.substring(lastSlash + 1));
                long owner = node.stat.getEphemeralOwner();
                EphemeralType ephemeralType = EphemeralType.get(owner);
                if (ephemeralType == EphemeralType.CONTAINER) {
                    containers.add(path);
                } else if (ephemeralType == EphemeralType.TTL) {
                    ttls.add(path);
                } else if (owner != 0) {
                    HashSet<String> list = ephemerals.computeIfAbsent(owner, k -> new HashSet<>());
                    list.add(path);
                }
            }
            path = ia.readString(""path"");
        }
        // have counted digest for root node with """", ignore here to avoid
        // counting twice for root node
        nodes.putWithoutDigest(""/"", root);

        nodeDataSize.set(approximateDataSize());

        // we are done with deserializing the datatree
        // update the quotas - create path trie
        // and also update the stat nodes
        setupQuota();

        aclCache.purgeUnused();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,dumpWatchesSummary,void dumpWatchesSummary(PrintWriter),"[1404, 1406]","{'A583': [(1404, 1405)], 'A596': [(1406, 1406)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public synchronized void dumpWatchesSummary(PrintWriter writer) {
        writer.print(dataWatches.toString());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,dumpWatches,"void dumpWatches(PrintWriter,boolean)","[1413, 1415]","{'A583': [(1413, 1414)], 'A596': [(1415, 1415)]}","{'A583': 0.6666666666666666, 'A596': 0.3333333333333333}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public synchronized void dumpWatches(PrintWriter writer, boolean byPath) {
        dataWatches.dumpWatches(writer, byPath);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getWatches,WatchesReport getWatches(),"[1423, 1425]","{'A591': [(1423, 1425)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public synchronized WatchesReport getWatches() {
        return dataWatches.getWatches();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getWatchesByPath,WatchesPathReport getWatchesByPath(),"[1433, 1435]","{'A591': [(1433, 1435)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public synchronized WatchesPathReport getWatchesByPath() {
        return dataWatches.getWatchesByPath();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getWatchesSummary,WatchesSummary getWatchesSummary(),"[1443, 1445]","{'A591': [(1443, 1445)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public synchronized WatchesSummary getWatchesSummary() {
        return dataWatches.getWatchesSummary();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,dumpEphemerals,void dumpEphemerals(PrintWriter),"[1451, 1465]","{'A583': [(1451, 1452), (1454, 1455), (1460, 1460)], 'A590': [(1462, 1465)], 'A639': [(1457, 1459), (1461, 1461)], 'A604': [(1453, 1453)], 'A603': [(1456, 1456)]}","{'A583': 0.3333333333333333, 'A590': 0.26666666666666666, 'A639': 0.26666666666666666, 'A604': 0.06666666666666667, 'A603': 0.06666666666666667}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void dumpEphemerals(PrintWriter writer) {
        writer.println(""Sessions with Ephemerals ("" + ephemerals.keySet().size() + ""):"");
        for (Entry<Long, HashSet<String>> entry : ephemerals.entrySet()) {
            writer.print(""0x"" + Long.toHexString(entry.getKey()));
            writer.println("":"");
            Set<String> tmp = entry.getValue();
            if (tmp != null) {
                synchronized (tmp) {
                    for (String path : tmp) {
                        writer.println(""\t"" + path);
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,shutdownWatcher,void shutdownWatcher(),"[1467, 1470]","{'A612': [(1467, 1470)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void shutdownWatcher() {
        dataWatches.shutdown();
        childWatches.shutdown();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getEphemerals,"Map<Long, Set<String>> getEphemerals()","[1477, 1485]","{'A591': [(1477, 1477), (1479, 1480), (1482, 1485)], 'A605': [(1478, 1478), (1481, 1481)]}","{'A591': 0.7777777777777778, 'A605': 0.2222222222222222}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public Map<Long, Set<String>> getEphemerals() {
        Map<Long, Set<String>> ephemeralsCopy = new HashMap<>();
        for (Entry<Long, HashSet<String>> e : ephemerals.entrySet()) {
            synchronized (e.getValue()) {
                ephemeralsCopy.put(e.getKey(), new HashSet<>(e.getValue()));
            }
        }
        return ephemeralsCopy;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,removeCnxn,void removeCnxn(Watcher),"[1487, 1490]","{'A590': [(1487, 1490)]}",{'A590': 1.0},A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void removeCnxn(Watcher watcher) {
        dataWatches.removeWatcher(watcher);
        childWatches.removeWatcher(watcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,setWatches,"void setWatches(long,List<String>,List<String>,List<String>,List<String>,List<String>,Watcher)","[1492, 1529]","{'A583': [(1497, 1497), (1499, 1499), (1507, 1507), (1515, 1515), (1517, 1517)], 'A591': [(1500, 1500), (1518, 1518)], 'A612': [(1502, 1503), (1510, 1511), (1520, 1521), (1529, 1529)], 'A596': [(1494, 1496), (1498, 1498), (1504, 1505), (1508, 1509), (1512, 1514), (1516, 1516)], 'A636': [(1492, 1493), (1522, 1528)], 'A597': [(1501, 1501), (1506, 1506), (1519, 1519)]}","{'A583': 0.13157894736842105, 'A591': 0.05263157894736842, 'A612': 0.18421052631578946, 'A596': 0.3157894736842105, 'A636': 0.23684210526315788, 'A597': 0.07894736842105263}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void setWatches(long relativeZxid, List<String> dataWatches, List<String> existWatches, List<String> childWatches,
                           List<String> persistentWatches, List<String> persistentRecursiveWatches, Watcher watcher) {
        for (String path : dataWatches) {
            DataNode node = getNode(path);
            if (node == null) {
                watcher.process(new WatchedEvent(EventType.NodeDeleted, KeeperState.SyncConnected, path));
            } else if (node.stat.getMzxid() > relativeZxid) {
                watcher.process(new WatchedEvent(EventType.NodeDataChanged, KeeperState.SyncConnected, path));
            } else {
                this.dataWatches.addWatch(path, watcher);
            }
        }
        for (String path : existWatches) {
            DataNode node = getNode(path);
            if (node != null) {
                watcher.process(new WatchedEvent(EventType.NodeCreated, KeeperState.SyncConnected, path));
            } else {
                this.dataWatches.addWatch(path, watcher);
            }
        }
        for (String path : childWatches) {
            DataNode node = getNode(path);
            if (node == null) {
                watcher.process(new WatchedEvent(EventType.NodeDeleted, KeeperState.SyncConnected, path));
            } else if (node.stat.getPzxid() > relativeZxid) {
                watcher.process(new WatchedEvent(EventType.NodeChildrenChanged, KeeperState.SyncConnected, path));
            } else {
                this.childWatches.addWatch(path, watcher);
            }
        }
        for (String path : persistentWatches) {
            this.childWatches.addWatch(path, watcher, WatcherMode.PERSISTENT);
            this.dataWatches.addWatch(path, watcher, WatcherMode.PERSISTENT);
        }
        for (String path : persistentRecursiveWatches) {
            this.dataWatches.addWatch(path, watcher, WatcherMode.PERSISTENT_RECURSIVE);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,setCversionPzxid,"void setCversionPzxid(String,int,long)","[1547, 1566]","{'A583': [(1547, 1547), (1549, 1549), (1553, 1553), (1556, 1556)], 'A612': [(1560, 1560), (1563, 1563)], 'A639': [(1548, 1548), (1550, 1552), (1554, 1555), (1557, 1559), (1561, 1562), (1564, 1566)]}","{'A583': 0.2, 'A612': 0.1, 'A639': 0.7}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void setCversionPzxid(String path, int newCversion, long zxid) throws NoNodeException {
        if (path.endsWith(""/"")) {
            path = path.substring(0, path.length() - 1);
        }
        DataNode node = nodes.get(path);
        if (node == null) {
            throw new NoNodeException(path);
        }
        synchronized (node) {
            if (newCversion == -1) {
                newCversion = node.stat.getCversion() + 1;
            }
            if (newCversion > node.stat.getCversion()) {
                nodes.preChange(path, node);
                node.stat.setCversion(newCversion);
                node.stat.setPzxid(zxid);
                nodes.postChange(path, node);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,containsWatcher,"boolean containsWatcher(String,WatcherType,Watcher)","[1568, 1592]","{'A639': [(1568, 1571), (1573, 1574), (1576, 1576), (1583, 1583), (1585, 1585), (1587, 1592)], 'A625': [(1572, 1572), (1575, 1575), (1577, 1582), (1584, 1584), (1586, 1586)]}","{'A639': 0.6, 'A625': 0.4}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean containsWatcher(String path, WatcherType type, Watcher watcher) {
        boolean containsWatcher = false;
        switch (type) {
        case Children:
            containsWatcher = this.childWatches.containsWatcher(path, watcher, WatcherMode.STANDARD);
            break;
        case Data:
            containsWatcher = this.dataWatches.containsWatcher(path, watcher, WatcherMode.STANDARD);
            break;
        case Persistent:
            containsWatcher = this.dataWatches.containsWatcher(path, watcher, WatcherMode.PERSISTENT);
            break;
        case PersistentRecursive:
            containsWatcher = this.dataWatches.containsWatcher(path, watcher, WatcherMode.PERSISTENT_RECURSIVE);
            break;
        case Any:
            if (this.childWatches.containsWatcher(path, watcher, null)) {
                containsWatcher = true;
            } else if (this.dataWatches.containsWatcher(path, watcher, null)) {
                containsWatcher = true;
            }
            break;
        }
        return containsWatcher;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,removeWatch,"boolean removeWatch(String,WatcherType,Watcher)","[1594, 1624]","{'A591': [(1596, 1597), (1599, 1600), (1602, 1602), (1614, 1614), (1621, 1622), (1624, 1624)], 'A625': [(1598, 1598), (1601, 1601), (1603, 1613), (1615, 1615), (1618, 1618)], 'A630': [(1594, 1595), (1616, 1617), (1619, 1620), (1623, 1623)]}","{'A591': 0.2903225806451613, 'A625': 0.4838709677419355, 'A630': 0.22580645161290322}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean removeWatch(String path, WatcherType type, Watcher watcher) {
        boolean removed = false;
        switch (type) {
        case Children:
            removed = this.childWatches.removeWatcher(path, watcher, WatcherMode.STANDARD);
            break;
        case Data:
            removed = this.dataWatches.removeWatcher(path, watcher, WatcherMode.STANDARD);
            break;
        case Persistent:
            if (this.childWatches.removeWatcher(path, watcher, WatcherMode.PERSISTENT)) {
                removed = true;
            }
            if (this.dataWatches.removeWatcher(path, watcher, WatcherMode.PERSISTENT)) {
                removed = true;
            }
            break;
        case PersistentRecursive:
            removed = this.dataWatches.removeWatcher(path, watcher, WatcherMode.PERSISTENT_RECURSIVE);
            break;
        case Any:
            if (this.childWatches.removeWatcher(path, watcher, null)) {
                removed = true;
            }
            if (this.dataWatches.removeWatcher(path, watcher, null)) {
                removed = true;
            }
            break;
        }
        return removed;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getReferenceCountedAclCache,ReferenceCountedACLCache getReferenceCountedAclCache(),"[1627, 1629]","{'A612': [(1627, 1629)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public ReferenceCountedACLCache getReferenceCountedAclCache() {
        return aclCache;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,updateReadStat,"void updateReadStat(String,long)","[1631, 1638]","{'A586': [(1632, 1632)], 'A584': [(1637, 1637)], 'A675': [(1631, 1631), (1633, 1636), (1638, 1638)]}","{'A586': 0.125, 'A584': 0.125, 'A675': 0.75}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void updateReadStat(String path, long bytes) {
        final String namespace = PathUtils.getTopNamespace(path);
        if (namespace == null) {
            return;
        }
        long totalBytes = path.length() + bytes + STAT_OVERHEAD_BYTES;
        ServerMetrics.getMetrics().READ_PER_NAMESPACE.add(namespace, totalBytes);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,updateWriteStat,"void updateWriteStat(String,long)","[1640, 1646]","{'A586': [(1641, 1641)], 'A584': [(1645, 1645)], 'A675': [(1640, 1640), (1642, 1644), (1646, 1646)]}","{'A586': 0.14285714285714285, 'A584': 0.14285714285714285, 'A675': 0.7142857142857143}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void updateWriteStat(String path, long bytes) {
        final String namespace = PathUtils.getTopNamespace(path);
        if (namespace == null) {
            return;
        }
        ServerMetrics.getMetrics().WRITE_PER_NAMESPACE.add(namespace, path.length() + bytes);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,logZxidDigest,"void logZxidDigest(long,long)","[1651, 1662]","{'A612': [(1651, 1651), (1653, 1662)], 'A653': [(1652, 1652)]}","{'A612': 0.9166666666666666, 'A653': 0.08333333333333333}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    private void logZxidDigest(long zxid, long digest) {
        ZxidDigest zxidDigest = new ZxidDigest(zxid, digestCalculator.getDigestVersion(), digest);
        lastProcessedZxidDigest = zxidDigest;
        if (zxidDigest.zxid % DIGEST_LOG_INTERVAL == 0) {
            synchronized (digestLog) {
                digestLog.add(zxidDigest);
                if (digestLog.size() > DIGEST_LOG_LIMIT) {
                    digestLog.poll();
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serializeZxidDigest,boolean serializeZxidDigest(OutputArchive),"[1672, 1684]","{'A612': [(1672, 1672), (1674, 1684)], 'A653': [(1673, 1673)]}","{'A612': 0.9230769230769231, 'A653': 0.07692307692307693}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean serializeZxidDigest(OutputArchive oa) throws IOException {
        if (!ZooKeeperServer.isDigestEnabled()) {
            return false;
        }

        ZxidDigest zxidDigest = lastProcessedZxidDigest;
        if (zxidDigest == null) {
            // write an empty digest
            zxidDigest = new ZxidDigest();
        }
        zxidDigest.serialize(oa);
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,deserializeZxidDigest,"boolean deserializeZxidDigest(InputArchive,long)","[1694, 1744]","{'A583': [(1699, 1699), (1723, 1723), (1728, 1728), (1741, 1741)], 'A612': [(1694, 1694), (1696, 1698), (1700, 1704), (1706, 1722), (1724, 1727), (1729, 1740), (1742, 1744)], 'A653': [(1695, 1695)], 'A677': [(1705, 1705)]}","{'A583': 0.0784313725490196, 'A612': 0.8823529411764706, 'A653': 0.0196078431372549, 'A677': 0.0196078431372549}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean deserializeZxidDigest(InputArchive ia, long startZxidOfSnapshot) throws IOException {
        if (!ZooKeeperServer.isDigestEnabled()) {
            return false;
        }

        try {
            ZxidDigest zxidDigest = new ZxidDigest();
            zxidDigest.deserialize(ia);
            if (zxidDigest.zxid > 0) {
                digestFromLoadedSnapshot = zxidDigest;
                LOG.info(""The digest in the snapshot has digest version of {}, ""
                        + ""with zxid as 0x{}, and digest value as {}"",
                        digestFromLoadedSnapshot.digestVersion,
                        Long.toHexString(digestFromLoadedSnapshot.zxid),
                        digestFromLoadedSnapshot.digest);
            } else {
                digestFromLoadedSnapshot = null;
                LOG.info(""The digest value is empty in snapshot"");
            }

            // There is possibility that the start zxid of a snapshot might
            // be larger than the digest zxid in snapshot.
            //
            // Known cases:
            //
            // The new leader set the last processed zxid to be the new
            // epoch + 0, which is not mapping to any txn, and it uses
            // this to take snapshot, which is possible if we don't
            // clean database before switching to LOOKING. In this case
            // the currentZxidDigest will be the zxid of last epoch, and
            // it's smaller than the zxid of the snapshot file.
            //
            // It's safe to reset the targetZxidDigest to null and start
            // to compare digest when replaying the first txn, since it's
            // a non-fuzzy snapshot.
            if (digestFromLoadedSnapshot != null && digestFromLoadedSnapshot.zxid < startZxidOfSnapshot) {
                LOG.info(""The zxid of snapshot digest 0x{} is smaller ""
                        + ""than the known snapshot highest zxid, the snapshot ""
                        + ""started with zxid 0x{}. It will be invalid to use ""
                        + ""this snapshot digest associated with this zxid, will ""
                        + ""ignore comparing it."", Long.toHexString(digestFromLoadedSnapshot.zxid),
                        Long.toHexString(startZxidOfSnapshot));
                digestFromLoadedSnapshot = null;
            }

            return true;
        } catch (EOFException e) {
            LOG.warn(""Got EOF exception while reading the digest, likely due to the reading an older snapshot."");
            return false;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,serializeLastProcessedZxid,boolean serializeLastProcessedZxid(OutputArchive),"[1754, 1760]","{'A726': [(1754, 1760)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean serializeLastProcessedZxid(final OutputArchive oa) throws IOException {
        if (!ZooKeeperServer.isSerializeLastProcessedZxidEnabled()) {
            return false;
        }
        oa.writeLong(lastProcessedZxid, ""lastZxid"");
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,deserializeLastProcessedZxid,boolean deserializeLastProcessedZxid(InputArchive),"[1769, 1780]","{'A726': [(1769, 1780)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean deserializeLastProcessedZxid(final InputArchive ia)  throws IOException {
        if (!ZooKeeperServer.isSerializeLastProcessedZxidEnabled()) {
            return false;
        }
        try {
            lastProcessedZxid = ia.readLong(""lastZxid"");
        } catch (final EOFException e) {
            LOG.warn(""Got EOFException while reading the last processed zxid, likely due to reading an older snapshot."");
            return false;
        }
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,compareSnapshotDigests,void compareSnapshotDigests(long),"[1788, 1807]","{'A583': [(1791, 1794), (1803, 1805)], 'A612': [(1788, 1789), (1795, 1802), (1806, 1807)], 'A653': [(1790, 1790)]}","{'A583': 0.35, 'A612': 0.6, 'A653': 0.05}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void compareSnapshotDigests(long zxid) {
        if (zxid == digestFromLoadedSnapshot.zxid) {
            if (digestCalculator.getDigestVersion() != digestFromLoadedSnapshot.digestVersion) {
                LOG.info(
                    ""Digest version changed, local: {}, new: {}, skip comparing digest now."",
                    digestFromLoadedSnapshot.digestVersion,
                    digestCalculator.getDigestVersion());
                digestFromLoadedSnapshot = null;
                return;
            }
            if (getTreeDigest() != digestFromLoadedSnapshot.getDigest()) {
                reportDigestMismatch(zxid);
            }
            digestFromLoadedSnapshot = null;
        } else if (digestFromLoadedSnapshot.zxid != 0 && zxid > digestFromLoadedSnapshot.zxid) {
            RATE_LOGGER.rateLimitLog(
                    ""The txn 0x{} of snapshot digest does not exist."",
                    Long.toHexString(digestFromLoadedSnapshot.zxid));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,compareDigest,"boolean compareDigest(TxnHeader,Record,TxnDigest)","[1819, 1854]","{'A583': [(1831, 1831), (1841, 1842), (1849, 1851)], 'A612': [(1819, 1830), (1832, 1840), (1843, 1848), (1852, 1854)]}","{'A583': 0.16666666666666666, 'A612': 0.8333333333333334}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public boolean compareDigest(TxnHeader header, Record txn, TxnDigest digest) {
        long zxid = header.getZxid();

        if (!ZooKeeperServer.isDigestEnabled() || digest == null) {
            return true;
        }
        // do not compare digest if we're still in fuzzy state
        if (digestFromLoadedSnapshot != null) {
            return true;
        }
        // do not compare digest if there is digest version change
        if (digestCalculator.getDigestVersion() != digest.getVersion()) {
            RATE_LOGGER.rateLimitLog(""Digest version not the same on zxid."", String.valueOf(zxid));
            return true;
        }

        long logDigest = digest.getTreeDigest();
        long actualDigest = getTreeDigest();
        if (logDigest != actualDigest) {
            reportDigestMismatch(zxid);
            LOG.debug(""Digest in log: {}, actual tree: {}"", logDigest, actualDigest);
            if (firstMismatchTxn) {
                LOG.error(
                        ""First digest mismatch on txn: {}, {}, expected digest is {}, actual digest is {}, "",
                        header, txn, digest, actualDigest);
                firstMismatchTxn = false;
            }
            return false;
        } else {
            RATE_LOGGER.flush();
            LOG.debug(
                    ""Digests are matching for Zxid: {}, Digest in log and actual tree: {}"",
                    Long.toHexString(zxid), logDigest);
            return true;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,reportDigestMismatch,void reportDigestMismatch(long),"[1860, 1867]","{'A583': [(1862, 1862), (1864, 1864)], 'A612': [(1860, 1861), (1863, 1863), (1865, 1867)]}","{'A583': 0.25, 'A612': 0.75}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void reportDigestMismatch(long zxid) {
        ServerMetrics.getMetrics().DIGEST_MISMATCHES_COUNT.add(1);
        RATE_LOGGER.rateLimitLog(""Digests are not matching. Value is Zxid."", String.valueOf(zxid));

        for (DigestWatcher watcher : digestWatchers) {
            watcher.process(zxid);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getTreeDigest,long getTreeDigest(),"[1869, 1871]","{'A612': [(1869, 1871)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public long getTreeDigest() {
        return nodes.getDigest();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getLastProcessedZxidDigest,ZxidDigest getLastProcessedZxidDigest(),"[1873, 1875]","{'A612': [(1873, 1875)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public ZxidDigest getLastProcessedZxidDigest() {
        return lastProcessedZxidDigest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getDigestFromLoadedSnapshot,ZxidDigest getDigestFromLoadedSnapshot(),"[1877, 1879]","{'A612': [(1877, 1879)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public ZxidDigest getDigestFromLoadedSnapshot() {
        return digestFromLoadedSnapshot;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,addDigestWatcher,void addDigestWatcher(DigestWatcher),"[1886, 1888]","{'A612': [(1886, 1888)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public void addDigestWatcher(DigestWatcher digestWatcher) {
        digestWatchers.add(digestWatcher);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,getDigestLog,List<ZxidDigest> getDigestLog(),"[1893, 1898]","{'A612': [(1893, 1895), (1897, 1898)], 'A605': [(1896, 1896)]}","{'A612': 0.8333333333333334, 'A605': 0.16666666666666666}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public List<ZxidDigest> getDigestLog() {
        synchronized (digestLog) {
            // Return a copy of current digest log
            return new LinkedList<>(digestLog);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ZxidDigest,serialize,void serialize(OutputArchive),"[1921, 1925]","{'A612': [(1921, 1925)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        public void serialize(OutputArchive oa) throws IOException {
            oa.writeLong(zxid, ""zxid"");
            oa.writeInt(digestVersion, ""digestVersion"");
            oa.writeLong(digest, ""digest"");
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ZxidDigest,deserialize,void deserialize(InputArchive),"[1927, 1939]","{'A612': [(1927, 1939)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        public void deserialize(InputArchive ia) throws IOException {
            zxid = ia.readLong(""zxid"");
            digestVersion = ia.readInt(""digestVersion"");
            // the old version is using hex string as the digest
            if (digestVersion < 2) {
                String d = ia.readString(""digest"");
                if (d != null) {
                    digest = Long.parseLong(d, 16);
                }
            } else {
                digest = ia.readLong(""digest"");
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ZxidDigest,getZxid,long getZxid(),"[1941, 1943]","{'A612': [(1941, 1943)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        public long getZxid() {
            return zxid;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ZxidDigest,getDigestVersion,int getDigestVersion(),"[1945, 1947]","{'A583': [(1947, 1947)], 'A612': [(1945, 1946)]}","{'A583': 0.3333333333333333, 'A612': 0.6666666666666666}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        public int getDigestVersion() {
            return digestVersion;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree.ZxidDigest,getDigest,long getDigest(),"[1949, 1951]","{'A612': [(1949, 1951)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"        public long getDigest() {
            return digest;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,createStat,"StatPersisted createStat(long,long,long)","[1963, 1974]","{'A612': [(1963, 1974)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    public static StatPersisted createStat(long zxid, long time, long ephemeralOwner) {
        StatPersisted stat = new StatPersisted();
        stat.setCtime(time);
        stat.setMtime(time);
        stat.setCzxid(zxid);
        stat.setMzxid(zxid);
        stat.setPzxid(zxid);
        stat.setVersion(0);
        stat.setAversion(0);
        stat.setEphemeralOwner(ephemeralOwner);
        return stat;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataTree.java,DataTree,createStat,StatPersisted createStat(int),"[1977, 1988]","{'A766': [(1977, 1988)]}",{'A766': 1.0},A766,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataTreeTest.java,"    static StatPersisted createStat(int version) {
        StatPersisted stat = new StatPersisted();
        stat.setCtime(0);
        stat.setMtime(0);
        stat.setCzxid(0);
        stat.setMzxid(0);
        stat.setPzxid(0);
        stat.setVersion(version);
        stat.setAversion(0);
        stat.setEphemeralOwner(0);
        return stat;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/UnimplementedRequestProcessor.java,UnimplementedRequestProcessor,processRequest,void processRequest(Request),"[32, 43]","{'A591': [(32, 43)]}",{'A591': 1.0},A591,,"    public void processRequest(Request request) throws RequestProcessorException {
        KeeperException ke = new KeeperException.UnimplementedException();
        request.setException(ke);
        ReplyHeader rh = new ReplyHeader(request.cxid, request.zxid, ke.code().intValue());
        try {
            request.cnxn.sendResponse(rh, null, ""response"");
        } catch (IOException e) {
            throw new RequestProcessorException(""Can't send the response"", e);
        }

        request.cnxn.sendCloseSession();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/UnimplementedRequestProcessor.java,UnimplementedRequestProcessor,shutdown,void shutdown(),"[45, 46]","{'A591': [(45, 46)]}",{'A591': 1.0},A591,,"    public void shutdown() {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,sendCloseSession,void sendCloseSession(),"[116, 118]","{'A591': [(117, 117)], 'A590': [(116, 116), (118, 118)]}","{'A591': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public void sendCloseSession() {
        sendBuffer(ServerCnxnFactory.closeConn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,sendBufferSync,void sendBufferSync(ByteBuffer),"[125, 141]","{'A583': [(126, 140)], 'A596': [(125, 125), (141, 141)]}","{'A583': 0.8823529411764706, 'A596': 0.11764705882352941}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    void sendBufferSync(ByteBuffer bb) {
        try {
            /* configure socket to be blocking
             * so that we dont have to do write in
             * a tight while loop
             */
            if (bb != ServerCnxnFactory.closeConn) {
                if (sock.isOpen()) {
                    sock.configureBlocking(true);
                    sock.write(bb);
                }
                packetSent();
            }
        } catch (IOException ie) {
            LOG.error(""Error sending data synchronously "", ie);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,sendBuffer,void sendBuffer(),"[147, 159]","{'A583': [(148, 150)], 'A591': [(158, 159)], 'A647': [(147, 147), (152, 157)], 'A620': [(151, 151)]}","{'A583': 0.23076923076923078, 'A591': 0.15384615384615385, 'A647': 0.5384615384615384, 'A620': 0.07692307692307693}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public void sendBuffer(ByteBuffer... buffers) {
        if (LOG.isTraceEnabled()) {
            LOG.trace(""Add a buffer to outgoingBuffers, sk {} is valid: {}"", sk, sk.isValid());
        }

        synchronized (outgoingBuffers) {
            for (ByteBuffer buffer : buffers) {
                outgoingBuffers.add(buffer);
            }
            outgoingBuffers.add(packetSentinel);
        }
        requestInterestOpsUpdate();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,handleFailedRead,void handleFailedRead(),"[169, 177]","{'A583': [(172, 176)], 'A675': [(169, 171), (177, 177)]}","{'A583': 0.5555555555555556, 'A675': 0.4444444444444444}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private void handleFailedRead() throws EndOfStreamException {
        setStale();
        ServerMetrics.getMetrics().CONNECTION_DROP_COUNT.add(1);
        throw new EndOfStreamException(""Unable to read additional data from client,""
                                       + "" it probably closed the socket:""
                                       + "" address = "" + sock.socket().getRemoteSocketAddress() + "",""
                                       + "" session = 0x"" + Long.toHexString(sessionId),
                                       DisconnectReason.UNABLE_TO_READ_FROM_CLIENT);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,readPayload,void readPayload(),"[180, 199]","{'A590': [(181, 183), (185, 189), (191, 199)], 'A675': [(180, 180), (184, 184)], 'A713': [(190, 190)]}","{'A590': 0.85, 'A675': 0.1, 'A713': 0.05}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private void readPayload() throws IOException, InterruptedException, ClientCnxnLimitException {
        if (incomingBuffer.remaining() != 0) { // have we read length bytes?
            int rc = sock.read(incomingBuffer); // sock is non-blocking, so ok
            if (rc < 0) {
                handleFailedRead();
            }
        }

        if (incomingBuffer.remaining() == 0) { // have we read length bytes?
            incomingBuffer.flip();
            packetReceived(4 + incomingBuffer.remaining());
            if (!initialized) {
                readConnectRequest();
            } else {
                readRequest();
            }
            lenBuffer.clear();
            incomingBuffer = lenBuffer;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,isSelectable,boolean isSelectable(),"[209, 211]","{'A591': [(209, 211)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public boolean isSelectable() {
        return sk.isValid() && selectable.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,disableSelectable,void disableSelectable(),"[213, 215]","{'A591': [(213, 215)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public void disableSelectable() {
        selectable.set(false);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,enableSelectable,void enableSelectable(),"[217, 219]","{'A591': [(217, 219)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public void enableSelectable() {
        selectable.set(true);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,requestInterestOpsUpdate,void requestInterestOpsUpdate(),"[221, 225]","{'A591': [(221, 225)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private void requestInterestOpsUpdate() {
        if (isSelectable()) {
            selectorThread.addInterestOpsUpdateRequest(sk);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,handleWrite,void handleWrite(SelectionKey),"[227, 316]","{'A583': [(227, 227), (249, 249), (259, 259), (269, 269), (298, 298)], 'A591': [(228, 248), (250, 250), (254, 258), (260, 268), (270, 297), (299, 299), (303, 316)], 'A647': [(251, 253), (300, 302)]}","{'A583': 0.05555555555555555, 'A591': 0.8777777777777778, 'A647': 0.06666666666666667}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    void handleWrite(SelectionKey k) throws IOException {
        if (outgoingBuffers.isEmpty()) {
            return;
        }

        /*
         * This is going to reset the buffer position to 0 and the
         * limit to the size of the buffer, so that we can fill it
         * with data from the non-direct buffers that we need to
         * send.
         */
        ByteBuffer directBuffer = NIOServerCnxnFactory.getDirectBuffer();
        if (directBuffer == null) {
            ByteBuffer[] bufferList = new ByteBuffer[outgoingBuffers.size()];
            // Use gathered write call. This updates the positions of the
            // byte buffers to reflect the bytes that were written out.
            sock.write(outgoingBuffers.toArray(bufferList));

            // Remove the buffers that we have sent
            ByteBuffer bb;
            while ((bb = outgoingBuffers.peek()) != null) {
                if (bb == ServerCnxnFactory.closeConn) {
                    throw new CloseRequestException(""close requested"", DisconnectReason.CLIENT_CLOSED_CONNECTION);
                }
                if (bb == packetSentinel) {
                    packetSent();
                }
                if (bb.remaining() > 0) {
                    break;
                }
                outgoingBuffers.remove();
            }
        } else {
            directBuffer.clear();

            for (ByteBuffer b : outgoingBuffers) {
                if (directBuffer.remaining() < b.remaining()) {
                    /*
                     * When we call put later, if the directBuffer is to
                     * small to hold everything, nothing will be copied,
                     * so we've got to slice the buffer if it's too big.
                     */
                    b = (ByteBuffer) b.slice().limit(directBuffer.remaining());
                }
                /*
                 * put() is going to modify the positions of both
                 * buffers, put we don't want to change the position of
                 * the source buffers (we'll do that after the send, if
                 * needed), so we save and reset the position after the
                 * copy
                 */
                int p = b.position();
                directBuffer.put(b);
                b.position(p);
                if (directBuffer.remaining() == 0) {
                    break;
                }
            }
            /*
             * Do the flip: limit becomes position, position gets set to
             * 0. This sets us up for the write.
             */
            directBuffer.flip();

            int sent = sock.write(directBuffer);

            ByteBuffer bb;

            // Remove the buffers that we have sent
            while ((bb = outgoingBuffers.peek()) != null) {
                if (bb == ServerCnxnFactory.closeConn) {
                    throw new CloseRequestException(""close requested"", DisconnectReason.CLIENT_CLOSED_CONNECTION);
                }
                if (bb == packetSentinel) {
                    packetSent();
                }
                if (sent < bb.remaining()) {
                    /*
                     * We only partially sent this buffer, so we update
                     * the position and exit the loop.
                     */
                    bb.position(bb.position() + sent);
                    break;
                }
                /* We've sent the whole buffer, so drop the buffer */
                sent -= bb.remaining();
                outgoingBuffers.remove();
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,isSocketOpen,boolean isSocketOpen(),"[321, 323]","{'A639': [(321, 323)]}",{'A639': 1.0},A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    protected boolean isSocketOpen() {
        return sock.isOpen();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,doIO,void doIO(SelectionKey),"[328, 396]","{'A583': [(330, 331), (360, 360), (371, 371), (375, 375), (384, 384), (390, 390), (393, 393)], 'A591': [(328, 329), (333, 337), (347, 348), (354, 354), (365, 370), (372, 374), (392, 392), (395, 396)], 'A596': [(332, 332), (353, 353), (361, 364)], 'A604': [(379, 379), (386, 386), (391, 391), (394, 394)], 'A590': [(349, 352), (355, 359), (380, 383), (385, 385)], 'A620': [(376, 378)], 'A675': [(387, 388)], 'A584': [(338, 346), (389, 389)]}","{'A583': 0.11594202898550725, 'A591': 0.3188405797101449, 'A596': 0.08695652173913043, 'A604': 0.057971014492753624, 'A590': 0.2028985507246377, 'A620': 0.043478260869565216, 'A675': 0.028985507246376812, 'A584': 0.14492753623188406}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    void doIO(SelectionKey k) throws InterruptedException {
        try {
            if (!isSocketOpen()) {
                LOG.warn(""trying to do i/o on a null socket for session: 0x{}"", Long.toHexString(sessionId));

                return;
            }
            if (k.isReadable()) {
                int rc = sock.read(incomingBuffer);
                if (rc < 0) {
                    try {
                        handleFailedRead();
                    } catch (EndOfStreamException e) {
                        // no stacktrace. this case is very common, and it is usually not a problem.
                        LOG.info(""{}"", e.getMessage());
                        // expecting close to log session closure
                        close(e.getReason());
                        return;
                    }
                }
                if (incomingBuffer.remaining() == 0) {
                    boolean isPayload;
                    if (incomingBuffer == lenBuffer) { // start of next request
                        incomingBuffer.flip();
                        isPayload = readLength(k);
                        incomingBuffer.clear();
                    } else {
                        // continuation
                        isPayload = true;
                    }
                    if (isPayload) { // not the case for 4letterword
                        readPayload();
                    } else {
                        // four letter words take care
                        // need not do anything else
                        return;
                    }
                }
            }
            if (k.isWritable()) {
                handleWrite(k);

                if (!initialized && !getReadInterest() && !getWriteInterest()) {
                    throw new CloseRequestException(""responded to info probe"", DisconnectReason.INFO_PROBE);
                }
            }
        } catch (CancelledKeyException e) {
            LOG.warn(""CancelledKeyException causing close of session: 0x{}"", Long.toHexString(sessionId));

            LOG.debug(""CancelledKeyException stack trace"", e);

            close(DisconnectReason.CANCELLED_KEY_EXCEPTION);
        } catch (CloseRequestException e) {
            // expecting close to log session closure
            close();
        } catch (EndOfStreamException e) {
            LOG.warn(""Unexpected exception"", e);
            // expecting close to log session closure
            close(e.getReason());
        } catch (ClientCnxnLimitException e) {
            // Common case exception, print at debug level
            ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
            LOG.warn(""Closing session 0x{}"", Long.toHexString(sessionId), e);
            close(DisconnectReason.CLIENT_CNX_LIMIT);
        } catch (IOException e) {
            LOG.warn(""Close of session 0x{}"", Long.toHexString(sessionId), e);
            close(DisconnectReason.IO_EXCEPTION);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,readRequest,void readRequest(),"[398, 403]","{'A583': [(399, 402)], 'A591': [(403, 403)], 'A604': [(398, 398)]}","{'A583': 0.6666666666666666, 'A591': 0.16666666666666666, 'A604': 0.16666666666666666}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    protected void readRequest() throws IOException {
        RequestHeader h = new RequestHeader();
        ByteBufferInputStream.byteBuffer2Record(incomingBuffer, h);
        RequestRecord request = RequestRecord.fromBytes(incomingBuffer.slice());
        zkServer.processPacket(this, h, request);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getWriteInterest,boolean getWriteInterest(),"[407, 409]","{'A591': [(407, 409)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private boolean getWriteInterest() {
        return !outgoingBuffers.isEmpty();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getReadInterest,boolean getReadInterest(),"[413, 415]","{'A591': [(413, 415)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private boolean getReadInterest() {
        return !throttled.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,disableRecv,void disableRecv(boolean),"[423, 427]","{'A591': [(424, 427)], 'A612': [(423, 423)]}","{'A591': 0.8, 'A612': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public void disableRecv(boolean waitDisableRecv) {
        if (throttled.compareAndSet(false, true)) {
            requestInterestOpsUpdate();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,enableRecv,void enableRecv(),"[432, 436]","{'A591': [(432, 436)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public void enableRecv() {
        if (throttled.compareAndSet(true, false)) {
            requestInterestOpsUpdate();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,readConnectRequest,void readConnectRequest(),"[438, 446]","{'A583': [(438, 438), (442, 444)], 'A591': [(440, 441), (445, 446)], 'A630': [(439, 439)]}","{'A583': 0.4444444444444444, 'A591': 0.4444444444444444, 'A630': 0.1111111111111111}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private void readConnectRequest() throws IOException, ClientCnxnLimitException {
        if (!isZKServerRunning()) {
            throw new IOException(""ZooKeeperServer not running"");
        }
        BinaryInputArchive bia = BinaryInputArchive.getArchive(new ByteBufferInputStream(incomingBuffer));
        ConnectRequest request = protocolManager.deserializeConnectRequest(bia);
        zkServer.processConnectRequest(this, request);
        initialized = true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn.SendBufferWriter,checkFlush,void checkFlush(boolean),"[462, 468]","{'A602': [(464, 464)], 'A596': [(462, 463), (465, 466), (468, 468)], 'A590': [(467, 467)]}","{'A602': 0.14285714285714285, 'A596': 0.7142857142857143, 'A590': 0.14285714285714285}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"        private void checkFlush(boolean force) {
            if ((force && sb.length() > 0) || sb.length() > 2048) {
                sendBufferSync(ByteBuffer.wrap(sb.toString().getBytes(UTF_8)));
                // clear our internal buffer
                sb.setLength(0);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn.SendBufferWriter,close,void close(),"[470, 477]","{'A583': [(472, 474)], 'A596': [(470, 471), (475, 477)]}","{'A583': 0.375, 'A596': 0.625}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"        @Override
        public void close() throws IOException {
            if (sb == null) {
                return;
            }
            checkFlush(true);
            sb = null; // clear out the ref to ensure no reuse
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn.SendBufferWriter,flush,void flush(),"[479, 482]","{'A596': [(479, 482)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"        @Override
        public void flush() throws IOException {
            checkFlush(true);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn.SendBufferWriter,write,"void write(char[],int,int)","[484, 488]","{'A596': [(484, 488)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"        @Override
        public void write(char[] cbuf, int off, int len) throws IOException {
            sb.append(cbuf, off, len);
            checkFlush(false);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,checkFourLetterWord,"boolean checkFourLetterWord(SelectionKey,int)","[492, 550]","{'A583': [(492, 492), (514, 515), (519, 519), (524, 527), (532, 532)], 'A591': [(505, 505)], 'A596': [(493, 494), (496, 497), (502, 504), (506, 513), (516, 518), (536, 542), (544, 545)], 'A616': [(534, 535), (543, 543), (546, 548)], 'A604': [(495, 495), (498, 499), (520, 523), (528, 531), (533, 533)], 'A590': [(501, 501), (549, 550)], 'A713': [(500, 500)]}","{'A583': 0.15254237288135594, 'A591': 0.01694915254237288, 'A596': 0.4576271186440678, 'A616': 0.1016949152542373, 'A604': 0.2033898305084746, 'A590': 0.05084745762711865, 'A713': 0.01694915254237288}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private boolean checkFourLetterWord(final SelectionKey k, final int len) throws IOException {
        // We take advantage of the limited size of the length to look
        // for cmds. They are all 4-bytes which fits inside of an int
        if (!FourLetterCommands.isKnown(len)) {
            return false;
        }

        String cmd = FourLetterCommands.getCommandString(len);
        packetReceived(4);

        /** cancel the selection key to remove the socket handling
         * from selector. This is to prevent netcat problem wherein
         * netcat immediately closes the sending side after sending the
         * commands and still keeps the receiving channel open.
         * The idea is to remove the selectionkey from the selector
         * so that the selector does not notice the closed read on the
         * socket channel and keep the socket alive to write the data to
         * and makes sure to close the socket after its done writing the data
         */
        if (k != null) {
            try {
                k.cancel();
            } catch (Exception e) {
                LOG.error(""Error cancelling command selection key"", e);
            }
        }

        final PrintWriter pwriter = new PrintWriter(new BufferedWriter(new SendBufferWriter()));

        // ZOOKEEPER-2693: don't execute 4lw if it's not enabled.
        if (!FourLetterCommands.isEnabled(cmd)) {
            LOG.debug(""Command {} is not executed because it is not in the whitelist."", cmd);
            NopCommand nopCmd = new NopCommand(
                pwriter,
                this,
                cmd + "" is not executed because it is not in the whitelist."");
            nopCmd.start();
            return true;
        }

        LOG.info(""Processing {} command from {}"", cmd, sock.socket().getRemoteSocketAddress());

        if (len == FourLetterCommands.setTraceMaskCmd) {
            incomingBuffer = ByteBuffer.allocate(8);
            int rc = sock.read(incomingBuffer);
            if (rc < 0) {
                throw new IOException(""Read error"");
            }
            incomingBuffer.flip();
            long traceMask = incomingBuffer.getLong();
            ZooTrace.setTextTraceLevel(traceMask);
            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);
            setMask.start();
            return true;
        } else {
            CommandExecutor commandExecutor = new CommandExecutor();
            return commandExecutor.execute(this, pwriter, len, zkServer, factory);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,readLength,boolean readLength(SelectionKey),"[559, 578]","{'A591': [(562, 562), (564, 565), (570, 570), (572, 573), (576, 576), (578, 578)], 'A630': [(571, 571)], 'A590': [(559, 561), (563, 563), (577, 577)], 'A675': [(574, 575)], 'A767': [(566, 569)]}","{'A591': 0.4, 'A630': 0.05, 'A590': 0.25, 'A675': 0.1, 'A767': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private boolean readLength(SelectionKey k) throws IOException {
        // Read the length, now get the buffer
        int len = lenBuffer.getInt();
        if (!initialized && checkFourLetterWord(sk, len)) {
            return false;
        }
        if (len < 0 || len > BinaryInputArchive.maxBuffer) {
            throw new IOException(""Len error. ""
                    + ""A message from "" +  this.getRemoteSocketAddress() + "" with advertised length of "" + len
                    + "" is either a malformed message or too large to process""
                    + "" (length is greater than jute.maxbuffer="" + BinaryInputArchive.maxBuffer + "")"");
        }
        if (!isZKServerRunning()) {
            throw new IOException(""ZooKeeperServer not running"");
        }
        // checkRequestSize will throw IOException if request is rejected
        zkServer.checkRequestSizeWhenReceivingMessage(len);
        incomingBuffer = ByteBuffer.allocate(len);
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getSessionTimeout,int getSessionTimeout(),"[585, 587]","{'A591': [(585, 587)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public int getSessionTimeout() {
        return sessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,toString,String toString(),"[593, 596]","{'A583': [(595, 595)], 'A591': [(594, 594), (596, 596)], 'A590': [(593, 593)]}","{'A583': 0.25, 'A591': 0.5, 'A590': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public String toString() {
        return ""ip: "" + sock.socket().getRemoteSocketAddress() + "" sessionId: 0x"" + Long.toHexString(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,close,void close(DisconnectReason),"[601, 605]","{'A591': [(601, 601)], 'A604': [(602, 605)]}","{'A591': 0.2, 'A604': 0.8}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public void close(DisconnectReason reason) {
        disconnectReason = reason;
        close();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,close,void close(),"[607, 627]","{'A591': [(609, 611), (613, 621), (624, 626)], 'A596': [(612, 612), (623, 623), (627, 627)], 'A604': [(607, 607)], 'A612': [(608, 608)], 'A620': [(622, 622)]}","{'A591': 0.7142857142857143, 'A596': 0.14285714285714285, 'A604': 0.047619047619047616, 'A612': 0.047619047619047616, 'A620': 0.047619047619047616}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private void close() {
        setStale();
        if (!factory.removeCnxn(this)) {
            return;
        }

        if (zkServer != null) {
            zkServer.removeCnxn(this);
        }

        if (sk != null) {
            try {
                // need to cancel this selection key from the selector
                sk.cancel();
            } catch (Exception e) {
                LOG.debug(""ignoring exception during selectionkey cancel"", e);
            }
        }

        closeSock();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,closeSock,void closeSock(),"[632, 647]","{'A583': [(633, 633), (637, 644)], 'A591': [(635, 636), (646, 647)], 'A596': [(632, 632), (634, 634)], 'A620': [(645, 645)]}","{'A583': 0.5625, 'A591': 0.25, 'A596': 0.125, 'A620': 0.0625}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    private void closeSock() {
        if (!sock.isOpen()) {
            return;
        }

        String logMsg = String.format(
            ""Closed socket connection for client %s %s"",
            sock.socket().getRemoteSocketAddress(),
            sessionId != 0
                ? ""which had sessionid 0x"" + Long.toHexString(sessionId)
                : ""(no session established for client)""
            );
        LOG.debug(logMsg);

        closeSock(sock);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,closeSock,void closeSock(SocketChannel),"[652, 685]","{'A583': [(653, 653), (667, 667)], 'A591': [(652, 652), (654, 666), (668, 671), (674, 677), (679, 682), (684, 685)], 'A590': [(672, 672)], 'A620': [(673, 673), (678, 678), (683, 683)]}","{'A583': 0.058823529411764705, 'A591': 0.8235294117647058, 'A590': 0.029411764705882353, 'A620': 0.08823529411764706}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public static void closeSock(SocketChannel sock) {
        if (!sock.isOpen()) {
            return;
        }

        try {
            /*
             * The following sequence of code is stupid! You would think that
             * only sock.close() is needed, but alas, it doesn't work that way.
             * If you just do sock.close() there are cases where the socket
             * doesn't actually close...
             */
            sock.socket().shutdownOutput();
        } catch (IOException e) {
            // This is a relatively common exception that we can't avoid
            LOG.debug(""ignoring exception during output shutdown"", e);
        }
        try {
            sock.socket().shutdownInput();
        } catch (IOException e) {
            // This is a relatively common exception that we can't avoid
            LOG.debug(""ignoring exception during input shutdown"", e);
        }
        try {
            sock.socket().close();
        } catch (IOException e) {
            LOG.debug(""ignoring exception during socket close"", e);
        }
        try {
            sock.close();
        } catch (IOException e) {
            LOG.debug(""ignoring exception during socketchannel close"", e);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,sendResponse,"int sendResponse(ReplyHeader,Record,String,String,Stat,int)","[689, 702]","{'A583': [(693, 693), (698, 698), (700, 700)], 'A591': [(689, 689), (692, 692), (702, 702)], 'A596': [(699, 699)], 'A612': [(697, 697)], 'A675': [(690, 691), (694, 696), (701, 701)]}","{'A583': 0.21428571428571427, 'A591': 0.21428571428571427, 'A596': 0.07142857142857142, 'A612': 0.07142857142857142, 'A675': 0.42857142857142855}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public int sendResponse(ReplyHeader h, Record r, String tag, String cacheKey, Stat stat, int opCode) {
        int responseSize = 0;
        try {
            ByteBuffer[] bb = serialize(h, r, cacheKey, stat, opCode);
            responseSize = bb[0].getInt();
            bb[0].rewind();
            sendBuffer(bb);
            decrOutstandingAndCheckThrottle(h);
        } catch (Exception e) {
            LOG.warn(""Unexpected exception. Destruction averted."", e);
        }
        return responseSize;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,process,"void process(WatchedEvent,List<ACL>)","[709, 738]","{'A583': [(724, 727)], 'A591': [(709, 709), (729, 732), (738, 738)], 'A596': [(723, 723), (728, 728)], 'A613': [(710, 721)], 'A604': [(733, 735)], 'A675': [(736, 737)], 'A634': [(722, 722)]}","{'A583': 0.13333333333333333, 'A591': 0.2, 'A596': 0.06666666666666667, 'A613': 0.4, 'A604': 0.1, 'A675': 0.06666666666666667, 'A634': 0.03333333333333333}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public void process(WatchedEvent event, List<ACL> znodeAcl) {
        try {
            zkServer.checkACL(this, znodeAcl, ZooDefs.Perms.READ, getAuthInfo(), event.getPath(), null);
        } catch (KeeperException.NoAuthException e) {
            if (LOG.isTraceEnabled()) {
                ZooTrace.logTraceMessage(
                    LOG,
                    ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                    ""Not delivering event "" + event + "" to 0x"" + Long.toHexString(this.sessionId) + "" (filtered by ACL)"");
            }
            return;
        }
        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, event.getZxid(), 0);
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                ""Deliver event "" + event + "" to 0x"" + Long.toHexString(this.sessionId) + "" through "" + this);
        }

        // Convert WatchedEvent to a type that can be sent over the wire
        WatcherEvent e = event.getWrapper();

        // The last parameter OpCode here is used to select the response cache.
        // Passing OpCode.error (with a value of -1) means we don't care, as we don't need
        // response cache on delivering watcher events.
        int responseSize = sendResponse(h, e, ""notification"", null, null, ZooDefs.OpCode.error);
        ServerMetrics.getMetrics().WATCH_BYTES.add(responseSize);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getSessionId,long getSessionId(),"[745, 748]","{'A591': [(745, 748)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public long getSessionId() {
        return sessionId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,setSessionId,void setSessionId(long),"[750, 754]","{'A591': [(750, 754)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public void setSessionId(long sessionId) {
        this.sessionId = sessionId;
        factory.addSession(sessionId, this);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,setSessionTimeout,void setSessionTimeout(int),"[756, 760]","{'A591': [(756, 760)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public void setSessionTimeout(int sessionTimeout) {
        this.sessionTimeout = sessionTimeout;
        factory.touchCnxn(this);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getInterestOps,int getInterestOps(),"[762, 775]","{'A591': [(762, 775)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public int getInterestOps() {
        if (!isSelectable()) {
            return 0;
        }
        int interestOps = 0;
        if (getReadInterest()) {
            interestOps |= SelectionKey.OP_READ;
        }
        if (getWriteInterest()) {
            interestOps |= SelectionKey.OP_WRITE;
        }
        return interestOps;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getRemoteSocketAddress,InetSocketAddress getRemoteSocketAddress(),"[777, 783]","{'A583': [(779, 779)], 'A591': [(777, 778), (782, 783)], 'A596': [(780, 781)]}","{'A583': 0.14285714285714285, 'A591': 0.5714285714285714, 'A596': 0.2857142857142857}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public InetSocketAddress getRemoteSocketAddress() {
        if (!sock.isOpen()) {
            return null;
        }
        return (InetSocketAddress) sock.socket().getRemoteSocketAddress();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getSocketAddress,InetAddress getSocketAddress(),"[785, 790]","{'A583': [(786, 786)], 'A591': [(785, 785), (787, 790)]}","{'A583': 0.16666666666666666, 'A591': 0.8333333333333334}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    public InetAddress getSocketAddress() {
        if (!sock.isOpen()) {
            return null;
        }
        return sock.socket().getInetAddress();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,serverStats,ServerStats serverStats(),"[792, 798]","{'A591': [(792, 798)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    protected ServerStats serverStats() {
        if (zkServer == null) {
            return null;
        }
        return zkServer.serverStats();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,isSecure,boolean isSecure(),"[800, 803]","{'A630': [(800, 803)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public boolean isSecure() {
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,getClientCertificateChain,Certificate[] getClientCertificateChain(),"[805, 808]","{'A583': [(807, 807)], 'A630': [(805, 806), (808, 808)]}","{'A583': 0.25, 'A630': 0.75}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public Certificate[] getClientCertificateChain() {
        throw new UnsupportedOperationException(""SSL is unsupported in NIOServerCnxn"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxn.java,NIOServerCnxn,setClientCertificateChain,void setClientCertificateChain(Certificate[]),"[810, 813]","{'A583': [(812, 812)], 'A630': [(810, 811), (813, 813)]}","{'A583': 0.25, 'A630': 0.75}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnTest.java,"    @Override
    public void setClientCertificateChain(Certificate[] chain) {
        throw new UnsupportedOperationException(""SSL is unsupported in NIOServerCnxn"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,addChild,boolean addChild(String),"[101, 107]","{'A596': [(101, 103), (105, 107)], 'A605': [(104, 104)]}","{'A596': 0.8571428571428571, 'A605': 0.14285714285714285}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized boolean addChild(String child) {
        if (children == null) {
            // let's be conservative on the typical number of children
            children = new HashSet<>(8);
        }
        return children.add(child);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,removeChild,boolean removeChild(String),"[115, 120]","{'A596': [(115, 120)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized boolean removeChild(String child) {
        if (children == null) {
            return false;
        }
        return children.remove(child);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,setChildren,void setChildren(HashSet<String>),"[127, 129]","{'A591': [(128, 129)], 'A596': [(127, 127)]}","{'A591': 0.6666666666666666, 'A596': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized void setChildren(HashSet<String> children) {
        this.children = children;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,getChildren,Set<String> getChildren(),"[137, 143]","{'A591': [(143, 143)], 'A596': [(137, 137)], 'A592': [(139, 139)], 'A616': [(138, 138), (140, 142)]}","{'A591': 0.14285714285714285, 'A596': 0.14285714285714285, 'A592': 0.14285714285714285, 'A616': 0.5714285714285714}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized Set<String> getChildren() {
        if (children == null) {
            return EMPTY_SET;
        }

        return Collections.unmodifiableSet(children);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,copyStat,void copyStat(Stat),"[145, 164]","{'A583': [(145, 145), (162, 162)], 'A591': [(146, 150), (152, 152), (164, 164)], 'A596': [(151, 151), (154, 154), (158, 158)], 'A616': [(153, 153)], 'A639': [(155, 157), (159, 161), (163, 163)]}","{'A583': 0.1, 'A591': 0.35, 'A596': 0.15, 'A616': 0.05, 'A639': 0.35}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized void copyStat(Stat to) {
        to.setAversion(stat.getAversion());
        to.setCtime(stat.getCtime());
        to.setCzxid(stat.getCzxid());
        to.setMtime(stat.getMtime());
        to.setMzxid(stat.getMzxid());
        to.setPzxid(stat.getPzxid());
        to.setVersion(stat.getVersion());
        to.setEphemeralOwner(getClientEphemeralOwner(stat));
        to.setDataLength(data == null ? 0 : data.length);
        int numChildren = 0;
        if (this.children != null) {
            numChildren = children.size();
        }
        // when we do the Cversion we need to translate from the count of the creates
        // to the count of the changes (v3 semantics)
        // for every create there is a delete except for the children still present
        to.setCversion(stat.getCversion() * 2 - numChildren);
        to.setNumChildren(numChildren);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,getClientEphemeralOwner,long getClientEphemeralOwner(StatPersisted),"[166, 172]","{'A616': [(166, 166), (172, 172)], 'A639': [(167, 171)]}","{'A616': 0.2857142857142857, 'A639': 0.7142857142857143}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    private static long getClientEphemeralOwner(StatPersisted stat) {
        EphemeralType ephemeralType = EphemeralType.get(stat.getEphemeralOwner());
        if (ephemeralType != EphemeralType.NORMAL) {
            return 0;
        }
        return stat.getEphemeralOwner();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,deserialize,"void deserialize(InputArchive,String)","[174, 181]","{'A583': [(174, 174)], 'A591': [(178, 179)], 'A590': [(175, 176), (180, 181)], 'A596': [(177, 177)]}","{'A583': 0.125, 'A591': 0.25, 'A590': 0.5, 'A596': 0.125}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized void deserialize(InputArchive archive, String tag) throws IOException {
        archive.startRecord(""node"");
        data = archive.readBuffer(""data"");
        acl = archive.readLong(""acl"");
        stat = new StatPersisted();
        stat.deserialize(archive, ""statpersisted"");
        archive.endRecord(""node"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,serialize,"void serialize(OutputArchive,String)","[183, 189]","{'A583': [(183, 183)], 'A591': [(187, 187)], 'A590': [(184, 185), (188, 189)], 'A596': [(186, 186)]}","{'A583': 0.14285714285714285, 'A591': 0.14285714285714285, 'A590': 0.5714285714285714, 'A596': 0.14285714285714285}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized void serialize(OutputArchive archive, String tag) throws IOException {
        archive.startRecord(this, ""node"");
        archive.writeBuffer(data, ""data"");
        archive.writeLong(acl, ""acl"");
        stat.serialize(archive, ""statpersisted"");
        archive.endRecord(this, ""node"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,isDigestCached,boolean isDigestCached(),"[191, 193]","{'A612': [(191, 193)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public boolean isDigestCached() {
        return digestCached;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,setDigestCached,void setDigestCached(boolean),"[195, 197]","{'A612': [(195, 197)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public void setDigestCached(boolean digestCached) {
        this.digestCached = digestCached;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,getDigest,long getDigest(),"[199, 201]","{'A612': [(199, 201)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public long getDigest() {
        return digest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,setDigest,void setDigest(long),"[203, 205]","{'A612': [(203, 205)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public void setDigest(long digest) {
        this.digest = digest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DataNode.java,DataNode,getData,byte[] getData(),"[207, 209]","{'A612': [(207, 209)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/DataNodeTest.java,"    public synchronized byte[] getData() {
        return data;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,setFailCreate,void setFailCreate(boolean),"[130, 132]","{'A596': [(130, 132)]}",{'A596': 1.0},A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    public static void setFailCreate(boolean b) {
        failCreate = b;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,run,void run(),"[133, 160]","{'A583': [(140, 141)], 'A591': [(156, 156)], 'A590': [(133, 134), (136, 137), (139, 139), (149, 151), (154, 155), (158, 160)], 'A596': [(142, 142), (147, 148)], 'A593': [(157, 157)], 'A653': [(135, 135)], 'A675': [(138, 138), (152, 153)], 'A697': [(143, 146)]}","{'A583': 0.07142857142857142, 'A591': 0.03571428571428571, 'A590': 0.4642857142857143, 'A596': 0.10714285714285714, 'A593': 0.03571428571428571, 'A653': 0.03571428571428571, 'A675': 0.10714285714285714, 'A697': 0.14285714285714285}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    @Override
    public void run() {
        LOG.info(String.format(""PrepRequestProcessor (sid:%d) started, reconfigEnabled=%s"", zks.getServerId(), zks.reconfigEnabled));
        try {
            while (true) {
                ServerMetrics.getMetrics().PREP_PROCESSOR_QUEUE_SIZE.add(submittedRequests.size());
                Request request = submittedRequests.take();
                ServerMetrics.getMetrics().PREP_PROCESSOR_QUEUE_TIME
                    .add(Time.currentElapsedTime() - request.prepQueueStartTime);
                if (LOG.isTraceEnabled()) {
                    long traceMask = ZooTrace.CLIENT_REQUEST_TRACE_MASK;
                    if (request.type == OpCode.ping) {
                        traceMask = ZooTrace.CLIENT_PING_TRACE_MASK;
                    }
                    ZooTrace.logRequest(LOG, traceMask, 'P', request, """");
                }
                if (Request.requestOfDeath == request) {
                    break;
                }

                request.prepStartTime = Time.currentElapsedTime();
                pRequest(request);
            }
        } catch (Exception e) {
            handleException(this.getName(), e);
        }
        LOG.info(""PrepRequestProcessor exited loop!"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,getRecordForPath,ChangeRecord getRecordForPath(String),"[162, 187]","{'A583': [(170, 170), (173, 173)], 'A590': [(163, 164), (166, 166), (168, 168), (180, 187)], 'A596': [(165, 165), (167, 167), (169, 169), (171, 172)], 'A639': [(162, 162)], 'A612': [(174, 179)]}","{'A583': 0.07692307692307693, 'A590': 0.46153846153846156, 'A596': 0.19230769230769232, 'A639': 0.038461538461538464, 'A612': 0.23076923076923078}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private ChangeRecord getRecordForPath(String path) throws KeeperException.NoNodeException {
        ChangeRecord lastChange = null;
        synchronized (zks.outstandingChanges) {
            lastChange = zks.outstandingChangesForPath.get(path);
            if (lastChange == null) {
                DataNode n = zks.getZKDatabase().getNode(path);
                if (n != null) {
                    Set<String> children;
                    synchronized (n) {
                        children = n.getChildren();
                    }
                    lastChange = new ChangeRecord(-1, path, n.stat, children.size(), zks.getZKDatabase().aclForNode(n));

                    if (digestEnabled) {
                        lastChange.precalculatedDigest = new PrecalculatedDigest(
                                digestCalculator.calculateDigest(path, n), 0);
                    }
                    lastChange.data = n.getData();
                }
            }
        }
        if (lastChange == null || lastChange.stat == null) {
            throw new KeeperException.NoNodeException(path);
        }
        return lastChange;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,getOutstandingChange,ChangeRecord getOutstandingChange(String),"[189, 193]","{'A630': [(189, 193)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private ChangeRecord getOutstandingChange(String path) {
        synchronized (zks.outstandingChanges) {
            return zks.outstandingChangesForPath.get(path);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,addChangeRecord,void addChangeRecord(ChangeRecord),"[195, 201]","{'A590': [(196, 197), (200, 201)], 'A596': [(198, 198)], 'A675': [(195, 195), (199, 199)]}","{'A590': 0.5714285714285714, 'A596': 0.14285714285714285, 'A675': 0.2857142857142857}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    protected void addChangeRecord(ChangeRecord c) {
        synchronized (zks.outstandingChanges) {
            zks.outstandingChanges.add(c);
            zks.outstandingChangesForPath.put(c.path, c);
            ServerMetrics.getMetrics().OUTSTANDING_CHANGES_QUEUED.add(1);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,getPendingChanges,"Map<String, ChangeRecord> getPendingChanges(MultiOperationRecord)","[213, 245]","{'A591': [(215, 215), (243, 243)], 'A590': [(244, 245)], 'A626': [(213, 213)], 'A639': [(217, 217), (223, 223), (241, 242)], 'A630': [(216, 216), (218, 222), (224, 240)], 'A605': [(214, 214)]}","{'A591': 0.06060606060606061, 'A590': 0.06060606060606061, 'A626': 0.030303030303030304, 'A639': 0.12121212121212122, 'A630': 0.696969696969697, 'A605': 0.030303030303030304}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private Map<String, ChangeRecord> getPendingChanges(MultiOperationRecord multiRequest) {
        Map<String, ChangeRecord> pendingChangeRecords = new HashMap<>();

        for (Op op : multiRequest) {
            String path = op.getPath();
            ChangeRecord cr = getOutstandingChange(path);
            // only previously existing records need to be rolled back.
            if (cr != null) {
                pendingChangeRecords.put(path, cr);
            }

            /*
             * ZOOKEEPER-1624 - We need to store for parent's ChangeRecord
             * of the parent node of a request. So that if this is a
             * sequential node creation request, rollbackPendingChanges()
             * can restore previous parent's ChangeRecord correctly.
             *
             * Otherwise, sequential node name generation will be incorrect
             * for a subsequent request.
             */
            int lastSlash = path.lastIndexOf('/');
            if (lastSlash == -1 || path.indexOf('\0') != -1) {
                continue;
            }
            String parentPath = path.substring(0, lastSlash);
            ChangeRecord parentCr = getOutstandingChange(parentPath);
            if (parentCr != null) {
                pendingChangeRecords.put(parentPath, parentCr);
            }
        }

        return pendingChangeRecords;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,rollbackPendingChanges,"void rollbackPendingChanges(long,Map<String, ChangeRecord>)","[257, 292]","{'A583': [(257, 257)], 'A591': [(272, 272), (279, 279)], 'A590': [(258, 259), (263, 264), (267, 271), (276, 277), (285, 287), (289, 292)], 'A630': [(265, 266), (273, 275), (280, 284), (288, 288)], 'A694': [(260, 262), (278, 278)]}","{'A583': 0.027777777777777776, 'A591': 0.05555555555555555, 'A590': 0.5, 'A630': 0.3055555555555556, 'A694': 0.1111111111111111}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    void rollbackPendingChanges(long zxid, Map<String, ChangeRecord> pendingChangeRecords) {
        synchronized (zks.outstandingChanges) {
            // Grab a list iterator starting at the END of the list so we can iterate in reverse
            Iterator<ChangeRecord> iter = zks.outstandingChanges.descendingIterator();
            while (iter.hasNext()) {
                ChangeRecord c = iter.next();
                if (c.zxid == zxid) {
                    iter.remove();
                    // Remove all outstanding changes for paths of this multi.
                    // Previous records will be added back later.
                    zks.outstandingChangesForPath.remove(c.path);
                } else {
                    break;
                }
            }

            // we don't need to roll back any records because there is nothing left.
            if (zks.outstandingChanges.isEmpty()) {
                return;
            }

            long firstZxid = zks.outstandingChanges.peek().zxid;

            for (ChangeRecord c : pendingChangeRecords.values()) {
                // Don't apply any prior change records less than firstZxid.
                // Note that previous outstanding requests might have been removed
                // once they are completed.
                if (c.zxid < firstZxid) {
                    continue;
                }

                // add previously existing records back.
                zks.outstandingChangesForPath.put(c.path, c);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,validatePathForCreate,"String validatePathForCreate(String,long)","[299, 306]","{'A583': [(299, 299), (302, 302)], 'A591': [(300, 301), (303, 306)]}","{'A583': 0.25, 'A591': 0.75}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private String validatePathForCreate(String path, long sessionId) throws BadArgumentsException {
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash == -1 || path.indexOf('\0') != -1 || failCreate) {
            LOG.info(""Invalid path {} with session 0x{}"", path, Long.toHexString(sessionId));
            throw new KeeperException.BadArgumentsException(path);
        }
        return path.substring(0, lastSlash);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,pRequest2Txn,"void pRequest2Txn(int,long,Request,Record)","[312, 634]","{'A583': [(312, 312), (319, 332), (334, 340), (344, 344), (350, 366), (370, 370), (376, 383), (385, 388), (395, 397), (399, 400), (403, 437), (440, 441), (443, 445), (447, 448), (450, 453), (456, 459), (463, 465), (468, 472), (475, 484), (487, 499), (501, 503), (511, 521), (523, 530), (533, 534), (543, 543), (545, 557), (561, 576), (582, 588), (590, 590), (605, 605), (609, 626)], 'A591': [(333, 333)], 'A590': [(317, 318), (446, 446), (454, 455), (466, 466), (473, 474), (500, 500), (589, 589), (627, 627), (634, 634)], 'A616': [(401, 401)], 'A639': [(522, 522)], 'A612': [(313, 316), (341, 343), (345, 349), (367, 369), (371, 375), (389, 394), (449, 449), (460, 461), (531, 532), (535, 542), (544, 544), (558, 560), (577, 581), (591, 604), (606, 608), (628, 633)], 'A651': [(442, 442), (462, 462), (504, 510)], 'A593': [(439, 439)], 'A653': [(398, 398)], 'A605': [(467, 467)], 'A637': [(384, 384)], 'A604': [(402, 402), (438, 438)], 'A669': [(485, 486)]}","{'A583': 0.6811145510835913, 'A591': 0.0030959752321981426, 'A590': 0.03715170278637771, 'A616': 0.0030959752321981426, 'A639': 0.0030959752321981426, 'A612': 0.21981424148606812, 'A651': 0.02786377708978328, 'A593': 0.0030959752321981426, 'A653': 0.0030959752321981426, 'A605': 0.0030959752321981426, 'A637': 0.0030959752321981426, 'A604': 0.006191950464396285, 'A669': 0.006191950464396285}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    protected void pRequest2Txn(int type, long zxid, Request request, Record record) throws KeeperException, IOException, RequestProcessorException {
        if (request.getHdr() == null) {
            request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,
                    Time.currentWallTime(), type));
        }

        switch (type) {
        case OpCode.create:
        case OpCode.create2:
        case OpCode.createTTL:
        case OpCode.createContainer: {
            pRequest2TxnCreate(type, request, record);
            break;
        }
        case OpCode.deleteContainer: {
            DeleteContainerRequest txn = (DeleteContainerRequest) record;
            String path = txn.getPath();
            String parentPath = getParentPathAndValidate(path);
            ChangeRecord nodeRecord = getRecordForPath(path);
            if (nodeRecord.childCount > 0) {
                throw new KeeperException.NotEmptyException(path);
            }
            if (EphemeralType.get(nodeRecord.stat.getEphemeralOwner()) == EphemeralType.NORMAL) {
                throw new KeeperException.BadVersionException(path);
            }
            ChangeRecord parentRecord = getRecordForPath(parentPath);
            request.setTxn(new DeleteTxn(path));
            parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
            parentRecord.childCount--;
            parentRecord.stat.setPzxid(request.getHdr().getZxid());
            parentRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
            addChangeRecord(parentRecord);

            nodeRecord = new ChangeRecord(request.getHdr().getZxid(), path, null, -1, null);
            nodeRecord.precalculatedDigest = precalculateDigest(DigestOpCode.REMOVE, path);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        }
        case OpCode.delete:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            DeleteRequest deleteRequest = (DeleteRequest) record;
            String path = deleteRequest.getPath();
            String parentPath = getParentPathAndValidate(path);
            ChangeRecord parentRecord = getRecordForPath(parentPath);
            zks.checkACL(request.cnxn, parentRecord.acl, ZooDefs.Perms.DELETE, request.authInfo, path, null);
            ChangeRecord nodeRecord = getRecordForPath(path);
            checkAndIncVersion(nodeRecord.stat.getVersion(), deleteRequest.getVersion(), path);
            if (nodeRecord.childCount > 0) {
                throw new KeeperException.NotEmptyException(path);
            }
            request.setTxn(new DeleteTxn(path));
            parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
            parentRecord.childCount--;
            parentRecord.stat.setPzxid(request.getHdr().getZxid());
            parentRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
            addChangeRecord(parentRecord);

            nodeRecord = new ChangeRecord(request.getHdr().getZxid(), path, null, -1, null);
            nodeRecord.precalculatedDigest = precalculateDigest(DigestOpCode.REMOVE, path);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        case OpCode.setData:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            SetDataRequest setDataRequest = (SetDataRequest) record;
            path = setDataRequest.getPath();
            validatePath(path, request.sessionId);
            nodeRecord = getRecordForPath(path);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, path, null);
            zks.checkQuota(path, nodeRecord.data, setDataRequest.getData(), OpCode.setData);
            int newVersion = checkAndIncVersion(nodeRecord.stat.getVersion(), setDataRequest.getVersion(), path);
            request.setTxn(new SetDataTxn(path, setDataRequest.getData(), newVersion));
            nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
            nodeRecord.stat.setVersion(newVersion);
            nodeRecord.stat.setMtime(request.getHdr().getTime());
            nodeRecord.stat.setMzxid(zxid);
            nodeRecord.data = setDataRequest.getData();
            nodeRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, path, nodeRecord.data, nodeRecord.stat);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        case OpCode.reconfig:
            if (!zks.isReconfigEnabled()) {
                LOG.error(""Reconfig operation requested but reconfig feature is disabled."");
                throw new KeeperException.ReconfigDisabledException();
            }

            if (ZooKeeperServer.skipACL) {
                LOG.warn(""skipACL is set, reconfig operation will skip ACL checks!"");
            }

            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            LeaderZooKeeperServer lzks;
            try {
                lzks = (LeaderZooKeeperServer) zks;
            } catch (ClassCastException e) {
                // standalone mode - reconfiguration currently not supported
                throw new KeeperException.UnimplementedException();
            }
            QuorumVerifier lastSeenQV = lzks.self.getLastSeenQuorumVerifier();
            // check that there's no reconfig in progress
            if (lastSeenQV.getVersion() != lzks.self.getQuorumVerifier().getVersion()) {
                throw new KeeperException.ReconfigInProgress();
            }
            ReconfigRequest reconfigRequest = (ReconfigRequest) record;
            long configId = reconfigRequest.getCurConfigId();

            if (configId != -1 && configId != lzks.self.getLastSeenQuorumVerifier().getVersion()) {
                String msg = ""Reconfiguration from version ""
                             + configId
                             + "" failed -- last seen version is ""
                             + lzks.self.getLastSeenQuorumVerifier().getVersion();
                throw new KeeperException.BadVersionException(msg);
            }

            String newMembers = reconfigRequest.getNewMembers();

            if (newMembers != null) { //non-incremental membership change
                LOG.info(""Non-incremental reconfig"");

                // Input may be delimited by either commas or newlines so convert to common newline separated format
                newMembers = newMembers.replaceAll("","", ""\n"");

                try {
                    Properties props = new Properties();
                    props.load(new StringReader(newMembers));
                    request.qv = QuorumPeerConfig.parseDynamicConfig(props, lzks.self.getElectionType(), true, false, lastSeenQV.getOraclePath());
                    request.qv.setVersion(request.getHdr().getZxid());
                } catch (IOException | ConfigException e) {
                    throw new KeeperException.BadArgumentsException(e.getMessage());
                }
            } else { //incremental change - must be a majority quorum system
                LOG.info(""Incremental reconfig"");

                List<String> joiningServers = null;
                String joiningServersString = reconfigRequest.getJoiningServers();
                if (joiningServersString != null) {
                    joiningServers = StringUtils.split(joiningServersString, "","");
                }

                List<String> leavingServers = null;
                String leavingServersString = reconfigRequest.getLeavingServers();
                if (leavingServersString != null) {
                    leavingServers = StringUtils.split(leavingServersString, "","");
                }

                if (!(lastSeenQV instanceof QuorumMaj) && !(lastSeenQV instanceof QuorumOracleMaj)) {
                    String msg = ""Incremental reconfiguration requested but last configuration seen has a non-majority quorum system"";
                    LOG.warn(msg);
                    throw new KeeperException.BadArgumentsException(msg);
                }
                Map<Long, QuorumServer> nextServers = new HashMap<>(lastSeenQV.getAllMembers());
                try {
                    if (leavingServers != null) {
                        for (String leaving : leavingServers) {
                            long sid = Long.parseLong(leaving);
                            nextServers.remove(sid);
                        }
                    }
                    if (joiningServers != null) {
                        for (String joiner : joiningServers) {
                            // joiner should have the following format: server.x = server_spec;client_spec
                            String[] parts = StringUtils.split(joiner, ""="").toArray(new String[0]);
                            if (parts.length != 2) {
                                throw new KeeperException.BadArgumentsException(""Wrong format of server string"");
                            }
                            // extract server id x from first part of joiner: server.x
                            Long sid = Long.parseLong(parts[0].substring(parts[0].lastIndexOf('.') + 1));
                            QuorumServer qs = new QuorumServer(sid, parts[1]);
                            if ((qs.clientAddr == null && qs.secureClientAddr == null) || qs.electionAddr == null || qs.addr == null) {
                                throw new KeeperException.BadArgumentsException(""Wrong format of server string - each server should have at least 3 ports specified"");
                            }

                            // check duplication of addresses and ports
                            for (QuorumServer nqs : nextServers.values()) {
                                if (qs.id == nqs.id) {
                                    continue;
                                }
                                qs.checkAddressDuplicate(nqs);
                            }

                            nextServers.remove(qs.id);
                            nextServers.put(qs.id, qs);
                        }
                    }
                } catch (ConfigException e) {
                    throw new KeeperException.BadArgumentsException(""Reconfiguration failed"");
                }

                if (lastSeenQV instanceof QuorumMaj) {
                    request.qv = new QuorumMaj(nextServers);
                } else {
                    request.qv = new QuorumOracleMaj(nextServers, lastSeenQV.getOraclePath());
                }

                request.qv.setVersion(request.getHdr().getZxid());
            }
            if (QuorumPeerConfig.isStandaloneEnabled() && request.qv.getVotingMembers().size() < 2) {
                String msg = ""Reconfig failed - new configuration must include at least 2 followers"";
                LOG.warn(msg);
                throw new KeeperException.BadArgumentsException(msg);
            } else if (request.qv.getVotingMembers().size() < 1) {
                String msg = ""Reconfig failed - new configuration must include at least 1 follower"";
                LOG.warn(msg);
                throw new KeeperException.BadArgumentsException(msg);
            }

            if (!lzks.getLeader().isQuorumSynced(request.qv)) {
                String msg2 = ""Reconfig failed - there must be a connected and synced quorum in new configuration"";
                LOG.warn(msg2);
                throw new KeeperException.NewConfigNoQuorum();
            }

            nodeRecord = getRecordForPath(ZooDefs.CONFIG_NODE);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.WRITE, request.authInfo, null, null);
            SetDataTxn setDataTxn = new SetDataTxn(ZooDefs.CONFIG_NODE, request.qv.toString().getBytes(), -1);
            request.setTxn(setDataTxn);
            nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
            nodeRecord.stat.setVersion(-1);
            nodeRecord.stat.setMtime(request.getHdr().getTime());
            nodeRecord.stat.setMzxid(zxid);
            nodeRecord.data = setDataTxn.getData();
            // Reconfig is currently a noop from digest computation
            // perspective since config node is not covered by the digests.
            nodeRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.NOOP, ZooDefs.CONFIG_NODE, nodeRecord.data, nodeRecord.stat);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);

            break;
        case OpCode.setACL:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            SetACLRequest setAclRequest = (SetACLRequest) record;
            path = setAclRequest.getPath();
            validatePath(path, request.sessionId);
            List<ACL> listACL = fixupACL(path, request.authInfo, setAclRequest.getAcl());
            nodeRecord = getRecordForPath(path);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.ADMIN, request.authInfo, path, listACL);
            newVersion = checkAndIncVersion(nodeRecord.stat.getAversion(), setAclRequest.getVersion(), path);
            request.setTxn(new SetACLTxn(path, listACL, newVersion));
            nodeRecord = nodeRecord.duplicate(request.getHdr().getZxid());
            nodeRecord.stat.setAversion(newVersion);
            nodeRecord.precalculatedDigest = precalculateDigest(
                    DigestOpCode.UPDATE, path, nodeRecord.data, nodeRecord.stat);
            setTxnDigest(request, nodeRecord.precalculatedDigest);
            addChangeRecord(nodeRecord);
            break;
        case OpCode.createSession:
            CreateSessionTxn createSessionTxn = request.readRequestRecord(CreateSessionTxn::new);
            request.setTxn(createSessionTxn);
            // only add the global session tracker but not to ZKDb
            zks.sessionTracker.trackSession(request.sessionId, createSessionTxn.getTimeOut());
            zks.setOwner(request.sessionId, request.getOwner());
            break;
        case OpCode.closeSession:
            // We don't want to do this check since the session expiration thread
            // queues up this operation without being the session owner.
            // this request is the last of the session so it should be ok
            //zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            long startTime = Time.currentElapsedTime();
            synchronized (zks.outstandingChanges) {
                // need to move getEphemerals into zks.outstandingChanges
                // synchronized block, otherwise there will be a race
                // condition with the on flying deleteNode txn, and we'll
                // delete the node again here, which is not correct
                Set<String> es = zks.getZKDatabase().getEphemerals(request.sessionId);
                for (ChangeRecord c : zks.outstandingChanges) {
                    if (c.stat == null) {
                        // Doing a delete
                        es.remove(c.path);
                    } else if (c.stat.getEphemeralOwner() == request.sessionId) {
                        es.add(c.path);
                    }
                }
                for (String path2Delete : es) {
                    if (digestEnabled) {
                        parentPath = getParentPathAndValidate(path2Delete);
                        parentRecord = getRecordForPath(parentPath);
                        parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
                        parentRecord.stat.setPzxid(request.getHdr().getZxid());
                        parentRecord.precalculatedDigest = precalculateDigest(
                                DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
                        addChangeRecord(parentRecord);
                    }
                    nodeRecord = new ChangeRecord(
                            request.getHdr().getZxid(), path2Delete, null, 0, null);
                    nodeRecord.precalculatedDigest = precalculateDigest(
                            DigestOpCode.REMOVE, path2Delete);
                    addChangeRecord(nodeRecord);
                }
                if (ZooKeeperServer.isCloseSessionTxnEnabled()) {
                    request.setTxn(new CloseSessionTxn(new ArrayList<String>(es)));
                }
                zks.sessionTracker.setSessionClosing(request.sessionId);
            }
            ServerMetrics.getMetrics().CLOSE_SESSION_PREP_TIME.add(Time.currentElapsedTime() - startTime);
            break;
        case OpCode.check:
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
            CheckVersionRequest checkVersionRequest = (CheckVersionRequest) record;
            path = checkVersionRequest.getPath();
            validatePath(path, request.sessionId);
            nodeRecord = getRecordForPath(path);
            zks.checkACL(request.cnxn, nodeRecord.acl, ZooDefs.Perms.READ, request.authInfo, path, null);
            request.setTxn(new CheckVersionTxn(
                path,
                checkAndIncVersion(nodeRecord.stat.getVersion(), checkVersionRequest.getVersion(), path)));
            break;
        default:
            LOG.warn(""unknown type {}"", type);
            break;
        }

        // If the txn is not going to mutate anything, like createSession,
        // we just set the current tree digest in it
        if (request.getTxnDigest() == null && digestEnabled) {
            setTxnDigest(request);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,pRequest2TxnCreate,"void pRequest2TxnCreate(int,Request,Record)","[636, 715]","{'A583': [(636, 636), (643, 643), (650, 650), (681, 681), (688, 688)], 'A639': [(637, 642), (644, 649), (651, 654), (656, 657), (659, 663), (665, 680), (683, 687), (689, 689), (699, 699), (701, 703), (707, 707), (715, 715)], 'A612': [(690, 698), (700, 700), (704, 706), (708, 714)], 'A637': [(682, 682)], 'A604': [(664, 664)], 'A768': [(655, 655), (658, 658)]}","{'A583': 0.0625, 'A639': 0.6375, 'A612': 0.25, 'A637': 0.0125, 'A604': 0.0125, 'A768': 0.025}",A639,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private void pRequest2TxnCreate(int type, Request request, Record record) throws IOException, KeeperException {
        int flags;
        String path;
        List<ACL> acl;
        byte[] data;
        long ttl;
        if (type == OpCode.createTTL) {
            CreateTTLRequest createTtlRequest = (CreateTTLRequest) record;
            flags = createTtlRequest.getFlags();
            path = createTtlRequest.getPath();
            acl = createTtlRequest.getAcl();
            data = createTtlRequest.getData();
            ttl = createTtlRequest.getTtl();
        } else {
            CreateRequest createRequest = (CreateRequest) record;
            flags = createRequest.getFlags();
            path = createRequest.getPath();
            acl = createRequest.getAcl();
            data = createRequest.getData();
            ttl = -1;
        }
        CreateMode createMode = CreateMode.fromFlag(flags);
        validateCreateRequest(path, createMode, request, ttl);
        String parentPath = validatePathForCreate(path, request.sessionId);

        List<ACL> listACL = fixupACL(path, request.authInfo, acl);
        ChangeRecord parentRecord = getRecordForPath(parentPath);

        zks.checkACL(request.cnxn, parentRecord.acl, ZooDefs.Perms.CREATE, request.authInfo, path, listACL);
        int parentCVersion = parentRecord.stat.getCversion();
        if (createMode.isSequential()) {
            path = path + String.format(Locale.ENGLISH, ""%010d"", parentCVersion);
        }
        validatePath(path, request.sessionId);
        try {
            if (getRecordForPath(path) != null) {
                throw new KeeperException.NodeExistsException(path);
            }
        } catch (KeeperException.NoNodeException e) {
            // ignore this one
        }
        boolean ephemeralParent = EphemeralType.get(parentRecord.stat.getEphemeralOwner()) == EphemeralType.NORMAL;
        if (ephemeralParent) {
            throw new KeeperException.NoChildrenForEphemeralsException(path);
        }
        int newCversion = parentRecord.stat.getCversion() + 1;
        zks.checkQuota(path, null, data, OpCode.create);
        if (type == OpCode.createContainer) {
            request.setTxn(new CreateContainerTxn(path, data, listACL, newCversion));
        } else if (type == OpCode.createTTL) {
            request.setTxn(new CreateTTLTxn(path, data, listACL, newCversion, ttl));
        } else {
            request.setTxn(new CreateTxn(path, data, listACL, createMode.isEphemeral(), newCversion));
        }

        TxnHeader hdr = request.getHdr();
        long ephemeralOwner = 0;
        if (createMode.isContainer()) {
            ephemeralOwner = EphemeralType.CONTAINER_EPHEMERAL_OWNER;
        } else if (createMode.isTTL()) {
            ephemeralOwner = EphemeralType.TTL.toEphemeralOwner(ttl);
        } else if (createMode.isEphemeral()) {
            ephemeralOwner = request.sessionId;
        }
        StatPersisted s = DataTree.createStat(hdr.getZxid(), hdr.getTime(), ephemeralOwner);
        parentRecord = parentRecord.duplicate(request.getHdr().getZxid());
        parentRecord.childCount++;
        parentRecord.stat.setCversion(newCversion);
        parentRecord.stat.setPzxid(request.getHdr().getZxid());
        parentRecord.precalculatedDigest = precalculateDigest(
                DigestOpCode.UPDATE, parentPath, parentRecord.data, parentRecord.stat);
        addChangeRecord(parentRecord);
        ChangeRecord nodeRecord = new ChangeRecord(
                request.getHdr().getZxid(), path, s, 0, listACL);
        nodeRecord.data = data;
        nodeRecord.precalculatedDigest = precalculateDigest(
                DigestOpCode.ADD, path, nodeRecord.data, s);
        setTxnDigest(request, nodeRecord.precalculatedDigest);
        addChangeRecord(nodeRecord);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,validatePath,"void validatePath(String,long)","[717, 724]","{'A583': [(720, 721)], 'A616': [(717, 719), (722, 724)]}","{'A583': 0.25, 'A616': 0.75}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private void validatePath(String path, long sessionId) throws BadArgumentsException {
        try {
            PathUtils.validatePath(path);
        } catch (IllegalArgumentException ie) {
            LOG.info(""Invalid path {} with session 0x{}, reason: {}"", path, Long.toHexString(sessionId), ie.getMessage());
            throw new BadArgumentsException(path);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,getParentPathAndValidate,String getParentPathAndValidate(String),"[726, 732]","{'A583': [(726, 726), (728, 728)], 'A616': [(727, 727), (729, 732)]}","{'A583': 0.2857142857142857, 'A616': 0.7142857142857143}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private String getParentPathAndValidate(String path) throws BadArgumentsException {
        int lastSlash = path.lastIndexOf('/');
        if (lastSlash == -1 || path.indexOf('\0') != -1 || zks.getZKDatabase().isSpecialPath(path)) {
            throw new BadArgumentsException(path);
        }
        return path.substring(0, lastSlash);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,checkAndIncVersion,"int checkAndIncVersion(int,int,String)","[734, 750]","{'A583': [(734, 734)], 'A639': [(735, 737), (750, 750)], 'A766': [(738, 749)]}","{'A583': 0.058823529411764705, 'A639': 0.23529411764705882, 'A766': 0.7058823529411765}",A766,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private static int checkAndIncVersion(int currentVersion, int expectedVersion, String path) throws KeeperException.BadVersionException {
        if (expectedVersion != -1 && expectedVersion != currentVersion) {
            throw new KeeperException.BadVersionException(path);
        }
        // Increase once more when going back to -1 from Integer.MIN_VALUE. Otherwise, the client will
        // receive a new data version -1. And Now, if the client wants to check the data version, it can
        // only pass -1 as the next expected version, but -1 as the expected version means do not check
        // the data version. So the client is unable to express the expected manner.
        //
        // See also https://issues.apache.org/jira/browse/ZOOKEEPER-4743.
        int nextVersion = currentVersion + 1;
        if (nextVersion == -1) {
            return 0;
        } else {
            return nextVersion;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,pRequest,void pRequest(Request),"[758, 771]","{'A591': [(758, 761)], 'A675': [(762, 771)]}","{'A591': 0.2857142857142857, 'A675': 0.7142857142857143}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    protected void pRequest(Request request) throws RequestProcessorException {
        request.setHdr(null);
        request.setTxn(null);

        if (!request.isThrottled()) {
          pRequestHelper(request);
        }

        request.zxid = zks.getZxid();
        long timeFinishedPrepare = Time.currentElapsedTime();
        ServerMetrics.getMetrics().PREP_PROCESS_TIME.add(timeFinishedPrepare - request.prepStartTime);
        nextProcessor.processRequest(request);
        ServerMetrics.getMetrics().PROPOSAL_PROCESS_TIME.add(Time.currentElapsedTime() - timeFinishedPrepare);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,pRequestHelper,void pRequestHelper(Request),"[776, 941]","{'A583': [(776, 776), (782, 783), (786, 787), (790, 792), (794, 795), (798, 799), (802, 803), (806, 807), (814, 814), (816, 818), (821, 821), (831, 831), (843, 844), (846, 846), (855, 859), (869, 869), (872, 873), (887, 887), (908, 908), (911, 911), (921, 925), (931, 935), (937, 939)], 'A591': [(780, 781), (784, 784), (832, 834), (841, 842), (848, 848), (850, 852), (870, 870), (876, 876), (880, 880), (890, 896), (898, 900), (903, 903), (909, 910), (912, 912), (915, 917)], 'A590': [(777, 778), (793, 793), (796, 797), (800, 801), (804, 805), (808, 808), (813, 813), (822, 826), (830, 830), (835, 840), (845, 845), (849, 849), (862, 868), (871, 871), (874, 875), (881, 885), (889, 889), (913, 914), (918, 918), (928, 930), (936, 936), (940, 941)], 'A616': [(779, 779), (789, 789)], 'A626': [(905, 905)], 'A596': [(853, 853), (861, 861), (927, 927)], 'A639': [(785, 785), (788, 788), (815, 815), (820, 820), (827, 827), (902, 902)], 'A612': [(828, 829), (847, 847), (877, 879)], 'A636': [(901, 901), (906, 906)], 'A593': [(819, 819)], 'A625': [(809, 812)], 'A647': [(854, 854), (860, 860), (919, 920), (926, 926)], 'A648': [(886, 886), (888, 888)], 'A641': [(897, 897)], 'A644': [(904, 904)], 'A592': [(907, 907)]}","{'A583': 0.29518072289156627, 'A591': 0.1927710843373494, 'A590': 0.30120481927710846, 'A616': 0.012048192771084338, 'A626': 0.006024096385542169, 'A596': 0.018072289156626505, 'A639': 0.03614457831325301, 'A612': 0.03614457831325301, 'A636': 0.012048192771084338, 'A593': 0.006024096385542169, 'A625': 0.024096385542168676, 'A647': 0.030120481927710843, 'A648': 0.012048192771084338, 'A641': 0.006024096385542169, 'A644': 0.006024096385542169, 'A592': 0.006024096385542169}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private void pRequestHelper(Request request) {
        try {
            switch (request.type) {
            case OpCode.createContainer:
            case OpCode.create:
            case OpCode.create2:
                CreateRequest create2Request = request.readRequestRecord(CreateRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, create2Request);
                break;
            case OpCode.createTTL:
                CreateTTLRequest createTtlRequest = request.readRequestRecord(CreateTTLRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, createTtlRequest);
                break;
            case OpCode.deleteContainer:
                DeleteContainerRequest deleteContainerRequest = request.readRequestRecord(DeleteContainerRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, deleteContainerRequest);
                break;
            case OpCode.delete:
                DeleteRequest deleteRequest = request.readRequestRecord(DeleteRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, deleteRequest);
                break;
            case OpCode.setData:
                SetDataRequest setDataRequest = request.readRequestRecord(SetDataRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, setDataRequest);
                break;
            case OpCode.reconfig:
                ReconfigRequest reconfigRequest = request.readRequestRecord(ReconfigRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, reconfigRequest);
                break;
            case OpCode.setACL:
                SetACLRequest setAclRequest = request.readRequestRecord(SetACLRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, setAclRequest);
                break;
            case OpCode.check:
                CheckVersionRequest checkRequest = request.readRequestRecord(CheckVersionRequest::new);
                pRequest2Txn(request.type, zks.getNextZxid(), request, checkRequest);
                break;
            case OpCode.multi:
                MultiOperationRecord multiRequest;
                try {
                    multiRequest = request.readRequestRecord(MultiOperationRecord::new);
                } catch (IOException e) {
                    request.setHdr(new TxnHeader(request.sessionId, request.cxid, zks.getNextZxid(), Time.currentWallTime(), OpCode.multi));
                    throw e;
                }
                List<Txn> txns = new ArrayList<>();
                //Each op in a multi-op must have the same zxid!
                long zxid = zks.getNextZxid();
                KeeperException ke = null;

                //Store off current pending change records in case we need to rollback
                Map<String, ChangeRecord> pendingChanges = getPendingChanges(multiRequest);
                request.setHdr(new TxnHeader(request.sessionId, request.cxid, zxid,
                        Time.currentWallTime(), request.type));

                for (Op op : multiRequest) {
                    Record subrequest = op.toRequestRecord();
                    int type;
                    Record txn;

                    /* If we've already failed one of the ops, don't bother
                     * trying the rest as we know it's going to fail and it
                     * would be confusing in the logfiles.
                     */
                    if (ke != null) {
                        type = OpCode.error;
                        txn = new ErrorTxn(Code.RUNTIMEINCONSISTENCY.intValue());
                    } else {
                        /* Prep the request and convert to a Txn */
                        try {
                            pRequest2Txn(op.getType(), zxid, request, subrequest);
                            type = op.getType();
                            txn = request.getTxn();
                        } catch (KeeperException e) {
                            ke = e;
                            type = OpCode.error;
                            txn = new ErrorTxn(e.code().intValue());

                            if (e.code().intValue() > Code.APIERROR.intValue()) {
                                LOG.info(""Got user-level KeeperException when processing {} aborting""
                                         + "" remaining multi ops. Error Path:{} Error:{}"",
                                         request.toString(),
                                         e.getPath(),
                                         e.getMessage());
                            }

                            request.setException(e);

                            /* Rollback change records from failed multi-op */
                            rollbackPendingChanges(zxid, pendingChanges);
                        }
                    }

                    // TODO: I don't want to have to serialize it here and then
                    //       immediately deserialize in next processor. But I'm
                    //       not sure how else to get the txn stored into our list.
                    byte[] bb = RequestRecord.fromRecord(txn).readBytes();
                    txns.add(new Txn(type, bb));
                }

                request.setTxn(new MultiTxn(txns));
                if (digestEnabled) {
                    setTxnDigest(request);
                }

                break;

            //create/close session don't require request record
            case OpCode.createSession:
            case OpCode.closeSession:
                if (!request.isLocalSession()) {
                    pRequest2Txn(request.type, zks.getNextZxid(), request, null);
                }
                break;

            //All the rest don't need to create a Txn - just verify session
            case OpCode.sync:
            case OpCode.exists:
            case OpCode.getData:
            case OpCode.getACL:
            case OpCode.getChildren:
            case OpCode.getAllChildrenNumber:
            case OpCode.getChildren2:
            case OpCode.ping:
            case OpCode.setWatches:
            case OpCode.setWatches2:
            case OpCode.checkWatches:
            case OpCode.removeWatches:
            case OpCode.getEphemerals:
            case OpCode.multiRead:
            case OpCode.addWatch:
            case OpCode.whoAmI:
                zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
                break;
            default:
                LOG.warn(""unknown type {}"", request.type);
                break;
            }
        } catch (KeeperException e) {
            if (request.getHdr() != null) {
                request.getHdr().setType(OpCode.error);
                request.setTxn(new ErrorTxn(e.code().intValue()));
            }

            if (e.code().intValue() > Code.APIERROR.intValue()) {
                LOG.info(
                    ""Got user-level KeeperException when processing {} Error Path:{} Error:{}"",
                    request.toString(),
                    e.getPath(),
                    e.getMessage());
            }
            request.setException(e);
        } catch (Exception e) {
            // log at error level as we are returning a marshalling
            // error to the user
            LOG.error(""Failed to process {}"", request, e);
            String digest = request.requestDigest();
            LOG.error(""Dumping request buffer for request type {}: 0x{}"", Request.op2String(request.type), digest);
            if (request.getHdr() == null) {
                request.setHdr(new TxnHeader(request.sessionId, request.cxid, zks.getZxid(), Time.currentWallTime(), request.type));
            }

            request.getHdr().setType(OpCode.error);
            request.setTxn(new ErrorTxn(Code.MARSHALLINGERROR.intValue()));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,removeDuplicates,List<ACL> removeDuplicates(List<ACL>),"[943, 957]","{'A583': [(945, 945), (953, 953)], 'A596': [(947, 947), (954, 957)], 'A604': [(943, 943)], 'A620': [(944, 944), (946, 946), (948, 952)]}","{'A583': 0.13333333333333333, 'A596': 0.3333333333333333, 'A604': 0.06666666666666667, 'A620': 0.4666666666666667}",A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private static List<ACL> removeDuplicates(final List<ACL> acls) {
        if (acls == null || acls.isEmpty()) {
            return Collections.emptyList();
        }

        // This would be done better with a Set but ACL hashcode/equals do not
        // allow for null values
        final ArrayList<ACL> retval = new ArrayList<>(acls.size());
        for (final ACL acl : acls) {
            if (!retval.contains(acl)) {
                retval.add(acl);
            }
        }
        return retval;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,validateCreateRequest,"void validateCreateRequest(String,CreateMode,Request,long)","[959, 978]","{'A583': [(959, 959), (974, 974), (976, 976)], 'A636': [(960, 962)], 'A715': [(966, 966)], 'A768': [(963, 965), (967, 967)], 'A648': [(968, 973), (975, 975), (977, 978)]}","{'A583': 0.15, 'A636': 0.15, 'A715': 0.05, 'A768': 0.2, 'A648': 0.45}",A648,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private void validateCreateRequest(String path, CreateMode createMode, Request request, long ttl) throws KeeperException {
        if (createMode.isTTL() && !EphemeralType.extendedEphemeralTypesEnabled()) {
            throw new KeeperException.UnimplementedException();
        }
        try {
            EphemeralType.validateTTL(createMode, ttl);
        } catch (IllegalArgumentException e) {
            throw new BadArgumentsException(path);
        }
        if (createMode.isEphemeral()) {
            // Exception is set when local session failed to upgrade
            // so we just need to report the error
            if (request.getException() != null) {
                throw request.getException();
            }
            zks.sessionTracker.checkGlobalSession(request.sessionId, request.getOwner());
        } else {
            zks.sessionTracker.checkSession(request.sessionId, request.getOwner());
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,fixupACL,"List<ACL> fixupACL(String,List<Id>,List<ACL>)","[990, 1034]","{'A583': [(990, 990), (998, 998), (1014, 1014), (1016, 1016)], 'A591': [(991, 995), (999, 1002), (1004, 1006), (1008, 1008), (1010, 1010), (1012, 1012), (1018, 1019), (1022, 1024), (1027, 1028), (1030, 1030), (1033, 1033)], 'A590': [(996, 996), (1003, 1003), (1007, 1007), (1009, 1009), (1013, 1013), (1015, 1015), (1017, 1017), (1020, 1021), (1025, 1025), (1029, 1029), (1031, 1032), (1034, 1034)], 'A636': [(1026, 1026)], 'A620': [(997, 997)], 'A589': [(1011, 1011)]}","{'A583': 0.08888888888888889, 'A591': 0.5333333333333333, 'A590': 0.3111111111111111, 'A636': 0.022222222222222223, 'A620': 0.022222222222222223, 'A589': 0.022222222222222223}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    public static List<ACL> fixupACL(String path, List<Id> authInfo, List<ACL> acls) throws KeeperException.InvalidACLException {
        // check for well formed ACLs
        // This resolves https://issues.apache.org/jira/browse/ZOOKEEPER-1877
        List<ACL> uniqacls = removeDuplicates(acls);
        if (uniqacls == null || uniqacls.size() == 0) {
            throw new KeeperException.InvalidACLException(path);
        }
        List<ACL> rv = new ArrayList<>();
        for (ACL a : uniqacls) {
            LOG.debug(""Processing ACL: {}"", a);
            if (a == null) {
                throw new KeeperException.InvalidACLException(path);
            }
            Id id = a.getId();
            if (id == null || id.getScheme() == null) {
                throw new KeeperException.InvalidACLException(path);
            }
            if (id.getScheme().equals(""world"") && id.getId().equals(""anyone"")) {
                rv.add(a);
            } else if (id.getScheme().equals(""auth"")) {
                // This is the ""auth"" id, so we have to expand it to the
                // authenticated ids of the requester
                boolean authIdValid = false;
                for (Id cid : authInfo) {
                    ServerAuthenticationProvider ap = ProviderRegistry.getServerProvider(cid.getScheme());
                    if (ap == null) {
                        LOG.error(""Missing AuthenticationProvider for {}"", cid.getScheme());
                    } else if (ap.isAuthenticated()) {
                        authIdValid = true;
                        rv.add(new ACL(a.getPerms(), cid));
                    }
                }
                if (!authIdValid) {
                    throw new KeeperException.InvalidACLException(path);
                }
            } else {
                ServerAuthenticationProvider ap = ProviderRegistry.getServerProvider(id.getScheme());
                if (ap == null || !ap.isValid(id.getId())) {
                    throw new KeeperException.InvalidACLException(path);
                }
                rv.add(a);
            }
        }
        return rv;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,processRequest,void processRequest(Request),"[1036, 1040]","{'A583': [(1037, 1037)], 'A590': [(1036, 1036), (1038, 1038), (1040, 1040)], 'A675': [(1039, 1039)]}","{'A583': 0.2, 'A590': 0.6, 'A675': 0.2}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    public void processRequest(Request request) {
        request.prepQueueStartTime = Time.currentElapsedTime();
        submittedRequests.add(request);
        ServerMetrics.getMetrics().PREP_PROCESSOR_QUEUED.add(1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,shutdown,void shutdown(),"[1042, 1047]","{'A591': [(1043, 1043)], 'A590': [(1042, 1042), (1044, 1047)]}","{'A591': 0.16666666666666666, 'A590': 0.8333333333333334}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    public void shutdown() {
        LOG.info(""Shutting down"");
        submittedRequests.clear();
        submittedRequests.add(Request.requestOfDeath);
        nextProcessor.shutdown();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,precalculateDigest,"PrecalculatedDigest precalculateDigest(DigestOpCode,String,byte[],StatPersisted)","[1059, 1090]","{'A612': [(1059, 1090)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private PrecalculatedDigest precalculateDigest(DigestOpCode type, String path,
            byte[] data, StatPersisted s) throws KeeperException.NoNodeException {

        if (!digestEnabled) {
            return null;
        }

        long prevNodeDigest;
        long newNodeDigest;

        switch (type) {
            case ADD:
                prevNodeDigest = 0;
                newNodeDigest = digestCalculator.calculateDigest(path, data, s);
                break;
            case REMOVE:
                prevNodeDigest = getRecordForPath(path).precalculatedDigest.nodeDigest;
                newNodeDigest = 0;
                break;
            case UPDATE:
                prevNodeDigest = getRecordForPath(path).precalculatedDigest.nodeDigest;
                newNodeDigest = digestCalculator.calculateDigest(path, data, s);
                break;
            case NOOP:
                newNodeDigest = prevNodeDigest = 0;
                break;
            default:
                return null;
        }
        long treeDigest = getCurrentTreeDigest() - prevNodeDigest + newNodeDigest;
        return new PrecalculatedDigest(newNodeDigest, treeDigest);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,precalculateDigest,"PrecalculatedDigest precalculateDigest(DigestOpCode,String)","[1092, 1095]","{'A612': [(1092, 1095)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private PrecalculatedDigest precalculateDigest(
            DigestOpCode type, String path) throws KeeperException.NoNodeException {
        return precalculateDigest(type, path, null, null);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,getCurrentTreeDigest,long getCurrentTreeDigest(),"[1102, 1114]","{'A612': [(1102, 1114)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private long getCurrentTreeDigest() {
        long digest;
        synchronized (zks.outstandingChanges) {
            if (zks.outstandingChanges.isEmpty()) {
                digest = zks.getZKDatabase().getDataTree().getTreeDigest();
                LOG.debug(""Digest got from data tree is: {}"", digest);
            } else {
                digest = zks.outstandingChanges.peekLast().precalculatedDigest.treeDigest;
                LOG.debug(""Digest got from outstandingChanges is: {}"", digest);
            }
        }
        return digest;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,setTxnDigest,void setTxnDigest(Request),"[1116, 1118]","{'A612': [(1116, 1118)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private void setTxnDigest(Request request) {
        request.setTxnDigest(new TxnDigest(digestCalculator.getDigestVersion(), getCurrentTreeDigest()));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PrepRequestProcessor.java,PrepRequestProcessor,setTxnDigest,"void setTxnDigest(Request,PrecalculatedDigest)","[1120, 1125]","{'A612': [(1120, 1125)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/PrepRequestProcessorTest.java,"    private void setTxnDigest(Request request, PrecalculatedDigest preCalculatedDigest) {
        if (preCalculatedDigest == null) {
            return;
        }
        request.setTxnDigest(new TxnDigest(digestCalculator.getDigestVersion(), preCalculatedDigest.treeDigest));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestRecord.java,,fromBytes,RequestRecord fromBytes(ByteBuffer),"[28, 30]","{'A583': [(28, 30)]}",{'A583': 1.0},A583,,"    static RequestRecord fromBytes(ByteBuffer buffer) {
        return new ByteBufferRequestRecord(buffer);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestRecord.java,,fromBytes,RequestRecord fromBytes(byte[]),"[32, 34]","{'A583': [(32, 34)]}",{'A583': 1.0},A583,,"    static RequestRecord fromBytes(byte[] bytes) {
        return fromBytes(ByteBuffer.wrap(bytes));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestRecord.java,,fromRecord,RequestRecord fromRecord(Record),"[36, 38]","{'A583': [(36, 38)]}",{'A583': 1.0},A583,,"    static RequestRecord fromRecord(Record record) {
        return new SimpleRequestRecord(record);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,close,void close(DisconnectReason),"[104, 108]","{'A591': [(104, 104)], 'A604': [(105, 108)]}","{'A591': 0.2, 'A604': 0.8}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void close(DisconnectReason reason) {
        disconnectReason = reason;
        close();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,close,void close(),"[110, 155]","{'A583': [(113, 114), (124, 124), (130, 131), (135, 135)], 'A591': [(110, 110), (132, 132), (155, 155)], 'A627': [(122, 123), (128, 129), (133, 133), (145, 151), (153, 153)], 'A613': [(125, 127)], 'A604': [(116, 121)], 'A593': [(136, 136), (141, 141), (154, 154)], 'A612': [(112, 112), (115, 115), (134, 134), (137, 140)], 'A594': [(111, 111), (142, 144)], 'A675': [(152, 152)]}","{'A583': 0.13043478260869565, 'A591': 0.06521739130434782, 'A627': 0.2826086956521739, 'A613': 0.06521739130434782, 'A604': 0.13043478260869565, 'A593': 0.06521739130434782, 'A612': 0.15217391304347827, 'A594': 0.08695652173913043, 'A675': 0.021739130434782608}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    public void close() {
        closingChannel = true;

        LOG.debug(""close called for session id: 0x{}"", Long.toHexString(sessionId));

        setStale();

        // ZOOKEEPER-2743:
        // Always unregister connection upon close to prevent
        // connection bean leak under certain race conditions.
        factory.unregisterConnection(this);

        // if this is not in cnxns then it's already closed
        if (!factory.cnxns.remove(this)) {
            LOG.debug(""cnxns size:{}"", factory.cnxns.size());
            if (channel.isOpen()) {
                channel.close();
            }
            return;
        }

        LOG.debug(""close in progress for session id: 0x{}"", Long.toHexString(sessionId));

        factory.removeCnxnFromSessionMap(this);

        factory.removeCnxnFromIpMap(this, ((InetSocketAddress) channel.remoteAddress()).getAddress());

        if (zkServer != null) {
            zkServer.removeCnxn(this);
        }

        if (channel.isOpen()) {
            // Since we don't check on the futures created by write calls to the channel complete we need to make sure
            // that all writes have been completed before closing the channel or we risk data loss
            // See: http://lists.jboss.org/pipermail/netty-users/2009-August/001122.html
            channel.writeAndFlush(Unpooled.EMPTY_BUFFER).addListener(new ChannelFutureListener() {
                @Override
                public void operationComplete(ChannelFuture future) {
                    future.channel().close().addListener(f -> releaseQueuedBuffer());
                }
            });
        } else {
            ServerMetrics.getMetrics().CONNECTION_DROP_COUNT.add(1);
            channel.eventLoop().execute(this::releaseQueuedBuffer);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,operationComplete,void operationComplete(ChannelFuture),"[146, 149]","{'A627': [(146, 149)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"                @Override
                public void operationComplete(ChannelFuture future) {
                    future.channel().close().addListener(f -> releaseQueuedBuffer());
                }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getSessionId,long getSessionId(),"[157, 160]","{'A591': [(157, 160)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public long getSessionId() {
        return sessionId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getSessionTimeout,int getSessionTimeout(),"[162, 165]","{'A591': [(162, 165)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public int getSessionTimeout() {
        return sessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,process,"void process(WatchedEvent,List<ACL>)","[167, 198]","{'A583': [(182, 185), (195, 195)], 'A591': [(167, 167), (181, 181), (186, 191), (194, 194), (196, 198)], 'A613': [(168, 179)], 'A675': [(192, 193)], 'A634': [(180, 180)]}","{'A583': 0.15625, 'A591': 0.375, 'A613': 0.375, 'A675': 0.0625, 'A634': 0.03125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void process(WatchedEvent event, List<ACL> znodeAcl) {
        try {
            zkServer.checkACL(this, znodeAcl, ZooDefs.Perms.READ, getAuthInfo(), event.getPath(), null);
        } catch (KeeperException.NoAuthException e) {
            if (LOG.isTraceEnabled()) {
                ZooTrace.logTraceMessage(
                    LOG,
                    ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                    ""Not delivering event "" + event + "" to 0x"" + Long.toHexString(this.sessionId) + "" (filtered by ACL)"");
            }
            return;
        }
        ReplyHeader h = new ReplyHeader(ClientCnxn.NOTIFICATION_XID, event.getZxid(), 0);
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.EVENT_DELIVERY_TRACE_MASK,
                ""Deliver event "" + event + "" to 0x"" + Long.toHexString(this.sessionId) + "" through "" + this);
        }

        // Convert WatchedEvent to a type that can be sent over the wire
        WatcherEvent e = event.getWrapper();

        try {
            int responseSize = sendResponse(h, e, ""notification"");
            ServerMetrics.getMetrics().WATCH_BYTES.add(responseSize);
        } catch (IOException e1) {
            LOG.debug(""Problem sending to {}"", getRemoteSocketAddress(), e1);
            close();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,sendResponse,"int sendResponse(ReplyHeader,Record,String,String,Stat,int)","[200, 214]","{'A583': [(208, 208)], 'A591': [(200, 200), (207, 207), (214, 214)], 'A647': [(203, 204)], 'A604': [(202, 202)], 'A612': [(212, 212)], 'A594': [(205, 205)], 'A675': [(201, 201), (206, 206), (209, 211), (213, 213)]}","{'A583': 0.06666666666666667, 'A591': 0.2, 'A647': 0.13333333333333333, 'A604': 0.06666666666666667, 'A612': 0.06666666666666667, 'A594': 0.06666666666666667, 'A675': 0.4}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public int sendResponse(ReplyHeader h, Record r, String tag,
                             String cacheKey, Stat stat, int opCode) throws IOException {
        // cacheKey and stat are used in caching, which is not
        // implemented here. Implementation example can be found in NIOServerCnxn.
        if (closingChannel || !channel.isOpen()) {
            return 0;
        }
        ByteBuffer[] bb = serialize(h, r, cacheKey, stat, opCode);
        int responseSize = bb[0].getInt();
        bb[0].rewind();
        sendBuffer(bb);
        decrOutstandingAndCheckThrottle(h);
        return responseSize;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,setSessionId,void setSessionId(long),"[216, 220]","{'A591': [(216, 218), (220, 220)], 'A612': [(219, 219)]}","{'A591': 0.8, 'A612': 0.2}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void setSessionId(long sessionId) {
        this.sessionId = sessionId;
        factory.addSession(sessionId, this);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,sendBuffer,void sendBuffer(),"[229, 236]","{'A591': [(229, 229), (233, 234), (236, 236)], 'A647': [(230, 231)], 'A627': [(235, 235)], 'A604': [(232, 232)]}","{'A591': 0.5, 'A647': 0.25, 'A627': 0.125, 'A604': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void sendBuffer(ByteBuffer... buffers) {
        if (buffers.length == 1 && buffers[0] == ServerCnxnFactory.closeConn) {
            close(DisconnectReason.CLIENT_CLOSED_CONNECTION);
            return;
        }
        channel.writeAndFlush(Unpooled.wrappedBuffer(buffers)).addListener(onSendBufferDoneListener);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn.SendBufferWriter,checkFlush,void checkFlush(boolean),"[252, 258]","{'A591': [(252, 253), (255, 258)], 'A602': [(254, 254)]}","{'A591': 0.8571428571428571, 'A602': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"        private void checkFlush(boolean force) {
            if ((force && sb.length() > 0) || sb.length() > 2048) {
                sendBuffer(ByteBuffer.wrap(sb.toString().getBytes(UTF_8)));
                // clear our internal buffer
                sb.setLength(0);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn.SendBufferWriter,close,void close(),"[260, 267]","{'A583': [(262, 264)], 'A591': [(260, 261), (265, 267)]}","{'A583': 0.375, 'A591': 0.625}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"        @Override
        public void close() throws IOException {
            if (sb == null) {
                return;
            }
            checkFlush(true);
            sb = null; // clear out the ref to ensure no reuse
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn.SendBufferWriter,flush,void flush(),"[269, 272]","{'A591': [(269, 272)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"        @Override
        public void flush() throws IOException {
            checkFlush(true);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn.SendBufferWriter,write,"void write(char[],int,int)","[274, 278]","{'A591': [(274, 278)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"        @Override
        public void write(char[] cbuf, int off, int len) throws IOException {
            sb.append(cbuf, off, len);
            checkFlush(false);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,checkFourLetterWord,"boolean checkFourLetterWord(Channel,ByteBuf,int)","[283, 326]","{'A583': [(298, 298), (303, 306), (313, 313), (324, 324)], 'A591': [(284, 285), (287, 288), (297, 297), (315, 315), (317, 318), (320, 321), (325, 326)], 'A627': [(283, 283), (292, 295), (311, 311)], 'A616': [(314, 314), (316, 316), (319, 319), (322, 323)], 'A604': [(286, 286), (289, 291), (299, 302), (307, 310), (312, 312)], 'A713': [(296, 296)]}","{'A583': 0.1590909090909091, 'A591': 0.2727272727272727, 'A627': 0.13636363636363635, 'A616': 0.11363636363636363, 'A604': 0.29545454545454547, 'A713': 0.022727272727272728}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    private boolean checkFourLetterWord(final Channel channel, ByteBuf message, final int len) {
        // We take advantage of the limited size of the length to look
        // for cmds. They are all 4-bytes which fits inside of an int
        if (!FourLetterCommands.isKnown(len)) {
            return false;
        }

        String cmd = FourLetterCommands.getCommandString(len);

        // Stops automatic reads of incoming data on this channel. We don't
        // expect any more traffic from the client when processing a 4LW
        // so this shouldn't break anything.
        channel.config().setAutoRead(false);
        packetReceived(4);

        final PrintWriter pwriter = new PrintWriter(new BufferedWriter(new SendBufferWriter()));

        // ZOOKEEPER-2693: don't execute 4lw if it's not enabled.
        if (!FourLetterCommands.isEnabled(cmd)) {
            LOG.debug(""Command {} is not executed because it is not in the whitelist."", cmd);
            NopCommand nopCmd = new NopCommand(
                pwriter,
                this,
                cmd + "" is not executed because it is not in the whitelist."");
            nopCmd.start();
            return true;
        }

        LOG.info(""Processing {} command from {}"", cmd, channel.remoteAddress());

        if (len == FourLetterCommands.setTraceMaskCmd) {
            ByteBuffer mask = ByteBuffer.allocate(8);
            message.readBytes(mask);
            mask.flip();
            long traceMask = mask.getLong();
            ZooTrace.setTextTraceLevel(traceMask);
            SetTraceMaskCommand setMask = new SetTraceMaskCommand(pwriter, this, traceMask);
            setMask.start();
            return true;
        } else {
            CommandExecutor commandExecutor = new CommandExecutor();
            return commandExecutor.execute(this, pwriter, len, zkServer, factory);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,checkIsInEventLoop,void checkIsInEventLoop(String),"[333, 337]","{'A583': [(335, 335)], 'A627': [(333, 334), (336, 337)]}","{'A583': 0.2, 'A627': 0.8}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    private void checkIsInEventLoop(String callerMethodName) {
        if (!channel.eventLoop().inEventLoop()) {
            throw new IllegalStateException(callerMethodName + ""() called from non-EventLoop thread"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,appendToQueuedBuffer,void appendToQueuedBuffer(ByteBuf),"[348, 356]","{'A627': [(348, 354), (356, 356)], 'A612': [(355, 355)]}","{'A627': 0.8888888888888888, 'A612': 0.1111111111111111}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    private void appendToQueuedBuffer(ByteBuf buf) {
        checkIsInEventLoop(""appendToQueuedBuffer"");
        if (queuedBuffer.numComponents() == queuedBuffer.maxNumComponents()) {
            // queuedBuffer has reached its component limit, so combine the existing components.
            queuedBuffer.consolidate();
        }
        queuedBuffer.addComponent(true, buf);
        ServerMetrics.getMetrics().NETTY_QUEUED_BUFFER.add(queuedBuffer.capacity());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,processMessage,void processMessage(ByteBuf),"[366, 415]","{'A583': [(368, 368), (376, 376), (388, 388), (400, 402), (410, 410)], 'A627': [(366, 367), (369, 369), (375, 375), (377, 387), (389, 399), (404, 409), (411, 415)], 'A769': [(370, 374)], 'A620': [(403, 403)]}","{'A583': 0.14, 'A627': 0.74, 'A769': 0.1, 'A620': 0.02}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    void processMessage(ByteBuf buf) {
        checkIsInEventLoop(""processMessage"");
        LOG.debug(""0x{} queuedBuffer: {}"", Long.toHexString(sessionId), queuedBuffer);

        if (closingChannel) {
            LOG.debug(""Drop incoming message during connection closing for session 0x{}"", Long.toHexString(sessionId));
            return;
        }

        if (LOG.isTraceEnabled()) {
            LOG.trace(""0x{} buf {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(buf));
        }

        if (throttled.get()) {
            LOG.debug(""Received message while throttled"");
            // we are throttled, so we need to queue
            if (queuedBuffer == null) {
                LOG.debug(""allocating queue"");
                queuedBuffer = channel.alloc().compositeBuffer();
            }
            appendToQueuedBuffer(buf.retainedDuplicate());
            if (LOG.isTraceEnabled()) {
                LOG.trace(""0x{} queuedBuffer {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(queuedBuffer));
            }
        } else {
            LOG.debug(""not throttled"");
            if (queuedBuffer != null) {
                appendToQueuedBuffer(buf.retainedDuplicate());
                processQueuedBuffer();
            } else {
                receiveMessage(buf);
                // Have to check !closingChannel, because an error in
                // receiveMessage() could have led to close() being called.
                if (!closingChannel && buf.isReadable()) {
                    if (LOG.isTraceEnabled()) {
                        LOG.trace(""Before copy {}"", buf);
                    }

                    if (queuedBuffer == null) {
                        queuedBuffer = channel.alloc().compositeBuffer();
                    }
                    appendToQueuedBuffer(buf.retainedSlice(buf.readerIndex(), buf.readableBytes()));
                    if (LOG.isTraceEnabled()) {
                        LOG.trace(""Copy is {}"", queuedBuffer);
                        LOG.trace(""0x{} queuedBuffer {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(queuedBuffer));
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,processQueuedBuffer,void processQueuedBuffer(),"[421, 443]","{'A583': [(425, 425)], 'A627': [(421, 424), (426, 443)]}","{'A583': 0.043478260869565216, 'A627': 0.9565217391304348}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    void processQueuedBuffer() {
        checkIsInEventLoop(""processQueuedBuffer"");
        if (queuedBuffer != null) {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""processing queue 0x{} queuedBuffer {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(queuedBuffer));
            }
            receiveMessage(queuedBuffer);
            if (closingChannel) {
                // close() could have been called if receiveMessage() failed
                LOG.debug(""Processed queue - channel closed, dropping remaining bytes"");
            } else if (!queuedBuffer.isReadable()) {
                LOG.debug(""Processed queue - no bytes remaining"");
                releaseQueuedBuffer();
            } else {
                LOG.debug(""Processed queue - bytes remaining"");
                // Try to reduce memory consumption by freeing up buffer space
                // which is no longer needed.
                queuedBuffer.discardReadComponents();
            }
        } else {
            LOG.debug(""queue empty"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,releaseQueuedBuffer,void releaseQueuedBuffer(),"[449, 455]","{'A627': [(449, 455)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    private void releaseQueuedBuffer() {
        checkIsInEventLoop(""releaseQueuedBuffer"");
        if (queuedBuffer != null) {
            queuedBuffer.release();
            queuedBuffer = null;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,receiveMessage,void receiveMessage(ByteBuf),"[466, 571]","{'A583': [(469, 469), (472, 472), (475, 475), (486, 486), (490, 491), (502, 505), (507, 510), (517, 517), (520, 520), (532, 532), (536, 536), (561, 562), (564, 564), (568, 568)], 'A591': [(468, 468), (470, 471), (473, 474), (476, 485), (487, 488), (492, 494), (496, 497), (499, 501), (506, 506), (511, 516), (518, 519), (521, 531), (533, 535), (537, 547), (557, 560), (570, 571)], 'A627': [(466, 467), (489, 489)], 'A630': [(498, 498)], 'A604': [(563, 563), (569, 569)], 'A675': [(555, 555), (565, 565)], 'A713': [(495, 495)], 'A620': [(567, 567)], 'A653': [(548, 549), (554, 554), (556, 556)], 'A770': [(550, 551)], 'A584': [(552, 553), (566, 566)]}","{'A583': 0.20754716981132076, 'A591': 0.6132075471698113, 'A627': 0.02830188679245283, 'A630': 0.009433962264150943, 'A604': 0.018867924528301886, 'A675': 0.018867924528301886, 'A713': 0.009433962264150943, 'A620': 0.009433962264150943, 'A653': 0.03773584905660377, 'A770': 0.018867924528301886, 'A584': 0.02830188679245283}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    private void receiveMessage(ByteBuf message) {
        checkIsInEventLoop(""receiveMessage"");
        try {
            while (message.isReadable() && !throttled.get()) {
                if (bb != null) {
                    if (LOG.isTraceEnabled()) {
                        LOG.trace(""message readable {} bb len {} {}"", message.readableBytes(), bb.remaining(), bb);
                        ByteBuffer dat = bb.duplicate();
                        dat.flip();
                        LOG.trace(""0x{} bb {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(Unpooled.wrappedBuffer(dat)));
                    }

                    if (bb.remaining() > message.readableBytes()) {
                        int newLimit = bb.position() + message.readableBytes();
                        bb.limit(newLimit);
                    }
                    message.readBytes(bb);
                    bb.limit(bb.capacity());

                    if (LOG.isTraceEnabled()) {
                        LOG.trace(""after readBytes message readable {} bb len {} {}"", message.readableBytes(), bb.remaining(), bb);
                        ByteBuffer dat = bb.duplicate();
                        dat.flip();
                        LOG.trace(""after readbytes 0x{} bb {}"",
                                  Long.toHexString(sessionId),
                                  ByteBufUtil.hexDump(Unpooled.wrappedBuffer(dat)));
                    }
                    if (bb.remaining() == 0) {
                        bb.flip();
                        packetReceived(4 + bb.remaining());

                        ZooKeeperServer zks = this.zkServer;
                        if (zks == null || !zks.isRunning()) {
                            throw new IOException(""ZK down"");
                        }
                        if (initialized) {
                            RequestHeader h = new RequestHeader();
                            ByteBufferInputStream.byteBuffer2Record(bb, h);
                            RequestRecord request = RequestRecord.fromBytes(bb.slice());
                            zks.processPacket(this, h, request);
                        } else {
                            LOG.debug(""got conn req request from {}"", getRemoteSocketAddress());
                            BinaryInputArchive bia = BinaryInputArchive.getArchive(new ByteBufferInputStream(bb));
                            ConnectRequest request = protocolManager.deserializeConnectRequest(bia);
                            zks.processConnectRequest(this, request);
                            initialized = true;
                        }
                        bb = null;
                    }
                } else {
                    if (LOG.isTraceEnabled()) {
                        LOG.trace(""message readable {} bblenrem {}"", message.readableBytes(), bbLen.remaining());
                        ByteBuffer dat = bbLen.duplicate();
                        dat.flip();
                        LOG.trace(""0x{} bbLen {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(Unpooled.wrappedBuffer(dat)));
                    }

                    if (message.readableBytes() < bbLen.remaining()) {
                        bbLen.limit(bbLen.position() + message.readableBytes());
                    }
                    message.readBytes(bbLen);
                    bbLen.limit(bbLen.capacity());
                    if (bbLen.remaining() == 0) {
                        bbLen.flip();

                        if (LOG.isTraceEnabled()) {
                            LOG.trace(""0x{} bbLen {}"", Long.toHexString(sessionId), ByteBufUtil.hexDump(Unpooled.wrappedBuffer(bbLen)));
                        }
                        int len = bbLen.getInt();
                        if (LOG.isTraceEnabled()) {
                            LOG.trace(""0x{} bbLen len is {}"", Long.toHexString(sessionId), len);
                        }

                        bbLen.clear();
                        if (!initialized) {
                            if (checkFourLetterWord(channel, message, len)) {
                                return;
                            }
                        }
                        if (len < 0 || len > BinaryInputArchive.maxBuffer) {
                            throw new IOException(""Len error "" + len);
                        }
                        ZooKeeperServer zks = this.zkServer;
                        if (zks == null || !zks.isRunning()) {
                            LOG.info(""Closing connection to {} because the server is not ready (server state is: {})"",
                                getRemoteSocketAddress(), zks == null ? ""unknown"" : zks.getState());
                            close(DisconnectReason.IO_EXCEPTION);
                            return;
                        }
                        // checkRequestSize will throw IOException if request is rejected
                        zks.checkRequestSizeWhenReceivingMessage(len);
                        bb = ByteBuffer.allocate(len);
                    }
                }
            }
        } catch (IOException e) {
            LOG.warn(""Closing connection to {}"", getRemoteSocketAddress(), e);
            close(DisconnectReason.IO_EXCEPTION);
        } catch (ClientCnxnLimitException e) {
            // Common case exception, print at debug level
            ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);

            LOG.debug(""Closing connection to {}"", getRemoteSocketAddress(), e);
            close(DisconnectReason.CLIENT_RATE_LIMIT);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,disableRecv,void disableRecv(boolean),"[588, 594]","{'A591': [(588, 588), (593, 593)], 'A627': [(590, 590), (594, 594)], 'A612': [(589, 589), (592, 592)], 'A620': [(591, 591)]}","{'A591': 0.2857142857142857, 'A627': 0.2857142857142857, 'A612': 0.2857142857142857, 'A620': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void disableRecv(boolean waitDisableRecv) {
        if (throttled.compareAndSet(false, true)) {
            LOG.debug(""Throttling - disabling recv {}"", this);
            channel.pipeline().fireUserEventTriggered(ReadEvent.DISABLE);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,enableRecv,void enableRecv(),"[596, 602]","{'A591': [(602, 602)], 'A627': [(596, 598)], 'A612': [(600, 601)], 'A620': [(599, 599)]}","{'A591': 0.14285714285714285, 'A627': 0.42857142857142855, 'A612': 0.2857142857142857, 'A620': 0.14285714285714285}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void enableRecv() {
        if (throttled.compareAndSet(true, false)) {
            LOG.debug(""Sending unthrottle event {}"", this);
            channel.pipeline().fireUserEventTriggered(ReadEvent.ENABLE);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,setSessionTimeout,void setSessionTimeout(int),"[604, 607]","{'A591': [(604, 607)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void setSessionTimeout(int sessionTimeout) {
        this.sessionTimeout = sessionTimeout;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getInterestOps,int getInterestOps(),"[609, 626]","{'A591': [(609, 610), (626, 626)], 'A627': [(611, 625)]}","{'A591': 0.16666666666666666, 'A627': 0.8333333333333334}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public int getInterestOps() {
        // This might not be 100% right, but it's only used for printing
        // connection info in the netty implementation so it's probably ok.
        if (channel == null || !channel.isOpen()) {
            return 0;
        }
        int interestOps = 0;
        if (!throttled.get()) {
            interestOps |= SelectionKey.OP_READ;
        }
        if (!channel.isWritable()) {
            // OP_READ means ""can read"", but OP_WRITE means ""cannot write"",
            // it's weird.
            interestOps |= SelectionKey.OP_WRITE;
        }
        return interestOps;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getRemoteSocketAddress,InetSocketAddress getRemoteSocketAddress(),"[628, 631]","{'A583': [(630, 630)], 'A591': [(628, 629), (631, 631)]}","{'A583': 0.25, 'A591': 0.75}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public InetSocketAddress getRemoteSocketAddress() {
        return (InetSocketAddress) channel.remoteAddress();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,sendCloseSession,void sendCloseSession(),"[635, 638]","{'A591': [(635, 638)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void sendCloseSession() {
        sendBuffer(ServerCnxnFactory.closeConn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,serverStats,ServerStats serverStats(),"[640, 646]","{'A591': [(640, 646)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    protected ServerStats serverStats() {
        if (zkServer == null) {
            return null;
        }
        return zkServer.serverStats();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,isSecure,boolean isSecure(),"[648, 651]","{'A630': [(648, 651)]}",{'A630': 1.0},A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public boolean isSecure() {
        return factory.secure;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getClientCertificateChain,Certificate[] getClientCertificateChain(),"[653, 659]","{'A583': [(655, 655)], 'A630': [(653, 654), (656, 659)]}","{'A583': 0.14285714285714285, 'A630': 0.8571428571428571}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public Certificate[] getClientCertificateChain() {
        if (clientChain == null) {
            return null;
        }
        return Arrays.copyOf(clientChain, clientChain.length);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,setClientCertificateChain,void setClientCertificateChain(Certificate[]),"[661, 668]","{'A583': [(663, 663)], 'A630': [(661, 662), (664, 668)]}","{'A583': 0.125, 'A630': 0.875}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    @Override
    public void setClientCertificateChain(Certificate[] chain) {
        if (chain == null) {
            clientChain = null;
        } else {
            clientChain = Arrays.copyOf(chain, chain.length);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getChannel,Channel getChannel(),"[671, 673]","{'A627': [(671, 673)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    Channel getChannel() {
        return channel;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getQueuedReadableBytes,int getQueuedReadableBytes(),"[675, 681]","{'A612': [(675, 681)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    public int getQueuedReadableBytes() {
        checkIsInEventLoop(""getQueuedReadableBytes"");
        if (queuedBuffer != null) {
            return queuedBuffer.readableBytes();
        }
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,setHandshakeState,void setHandshakeState(HandshakeState),"[683, 685]","{'A612': [(683, 685)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    public void setHandshakeState(HandshakeState state) {
        this.handshakeState = state;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxn.java,NettyServerCnxn,getHandshakeState,HandshakeState getHandshakeState(),"[687, 689]","{'A612': [(687, 689)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnTest.java,"    public HandshakeState getHandshakeState() {
        return this.handshakeState;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServerShutdownHandler.java,ZooKeeperServerShutdownHandler,handle,void handle(State),"[42, 46]","{'A597': [(43, 46)], 'A584': [(42, 42)]}","{'A597': 0.8, 'A584': 0.2}",A597,,"    public void handle(State state) {
        if (state == State.ERROR || state == State.SHUTDOWN) {
            shutdownLatch.countDown();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,setSessionTimeout,void setSessionTimeout(int),"[51, 53]","{'A583': [(52, 53)], 'A612': [(51, 51)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    void setSessionTimeout(int sessionTimeout) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,process,"void process(WatchedEvent,List<ACL>)","[55, 60]","{'A583': [(60, 60)], 'A612': [(55, 55)], 'A613': [(56, 56)], 'A634': [(57, 59)]}","{'A583': 0.16666666666666666, 'A612': 0.16666666666666666, 'A613': 0.16666666666666666, 'A634': 0.5}",A634,,"    @Override
    public void process(WatchedEvent event, List<ACL> znodeAcl) {
        mostRecentEventType = event.getType();
        mostRecentZxid = event.getZxid();
        mostRecentPath = event.getPath();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getMostRecentPath,String getMostRecentPath(),"[62, 64]","{'A634': [(62, 64)]}",{'A634': 1.0},A634,,"    public String getMostRecentPath() {
        return mostRecentPath;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getMostRecentEventType,Event.EventType getMostRecentEventType(),"[66, 68]","{'A634': [(66, 68)]}",{'A634': 1.0},A634,,"    public Event.EventType getMostRecentEventType() {
        return mostRecentEventType;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getMostRecentZxid,long getMostRecentZxid(),"[70, 72]","{'A634': [(70, 72)]}",{'A634': 1.0},A634,,"    public long getMostRecentZxid() {
        return mostRecentZxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getSessionTimeout,int getSessionTimeout(),"[75, 78]","{'A583': [(76, 78)], 'A612': [(75, 75)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    int getSessionTimeout() {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,close,void close(DisconnectReason),"[80, 82]","{'A583': [(81, 82)], 'A612': [(80, 80)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    public void close(DisconnectReason reason) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,sendResponse,"int sendResponse(ReplyHeader,Record,String,String,Stat,int)","[84, 88]","{'A583': [(88, 88)], 'A612': [(84, 84)], 'A675': [(85, 85), (87, 87)], 'A604': [(86, 86)]}","{'A583': 0.2, 'A612': 0.2, 'A675': 0.4, 'A604': 0.2}",A675,,"    @Override
    public int sendResponse(ReplyHeader h, Record r, String tag,
                             String cacheKey, Stat stat, int opCode) throws IOException {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,sendCloseSession,void sendCloseSession(),"[90, 92]","{'A583': [(91, 92)], 'A612': [(90, 90)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    public void sendCloseSession() {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getSessionId,long getSessionId(),"[94, 97]","{'A583': [(95, 97)], 'A612': [(94, 94)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    public long getSessionId() {
        return sessionId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,setSessionId,void setSessionId(long),"[99, 101]","{'A583': [(100, 101)], 'A612': [(99, 99)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    void setSessionId(long sessionId) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,sendBuffer,void sendBuffer(),"[103, 105]","{'A583': [(104, 105)], 'A612': [(103, 103)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    void sendBuffer(ByteBuffer... closeConn) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,enableRecv,void enableRecv(),"[107, 109]","{'A583': [(108, 109)], 'A612': [(107, 107)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    void enableRecv() {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,disableRecv,void disableRecv(boolean),"[111, 113]","{'A583': [(112, 113)], 'A612': [(111, 111)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    void disableRecv(boolean waitDisableRecv) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,serverStats,ServerStats serverStats(),"[115, 118]","{'A583': [(116, 118)], 'A612': [(115, 115)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    protected ServerStats serverStats() {
        return null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getOutstandingRequests,long getOutstandingRequests(),"[120, 123]","{'A583': [(121, 123)], 'A612': [(120, 120)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    public long getOutstandingRequests() {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getRemoteSocketAddress,InetSocketAddress getRemoteSocketAddress(),"[125, 128]","{'A583': [(126, 128)], 'A612': [(125, 125)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    public InetSocketAddress getRemoteSocketAddress() {
        return null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getInterestOps,int getInterestOps(),"[130, 133]","{'A583': [(131, 133)], 'A612': [(130, 130)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    public int getInterestOps() {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,isSecure,boolean isSecure(),"[135, 138]","{'A583': [(136, 138)], 'A612': [(135, 135)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    public boolean isSecure() {
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,getClientCertificateChain,Certificate[] getClientCertificateChain(),"[140, 143]","{'A583': [(141, 143)], 'A612': [(140, 140)]}","{'A583': 0.75, 'A612': 0.25}",A583,,"    @Override
    public Certificate[] getClientCertificateChain() {
        return null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/DumbWatcher.java,DumbWatcher,setClientCertificateChain,void setClientCertificateChain(Certificate[]),"[145, 147]","{'A583': [(146, 147)], 'A612': [(145, 145)]}","{'A583': 0.6666666666666666, 'A612': 0.3333333333333333}",A583,,"    @Override
    public void setClientCertificateChain(Certificate[] chain) {
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,initConfigurations,void initConfigurations(),"[52, 70]","{'A592': [(52, 70)]}",{'A592': 1.0},A592,,"    private void initConfigurations() {
        if (Boolean.parseBoolean(System.getProperty(SESSION_REQUIRE_CLIENT_SASL_AUTH, ""false""))) {
            enforceAuthEnabled = true;
            enforceAuthSchemes.add(SASL_AUTH_SCHEME);
        } else {
            enforceAuthEnabled =
                Boolean.parseBoolean(System.getProperty(ENFORCE_AUTH_ENABLED, ""false""));
            String enforceAuthSchemesProp = System.getProperty(ENFORCE_AUTH_SCHEMES);
            if (enforceAuthSchemesProp != null) {
                Arrays.stream(enforceAuthSchemesProp.split("","")).forEach(s -> {
                    enforceAuthSchemes.add(s.trim());
                });
            }
        }
        LOG.info(""{} = {}"", ENFORCE_AUTH_ENABLED, enforceAuthEnabled);
        LOG.info(""{} = {}"", ENFORCE_AUTH_SCHEMES, enforceAuthSchemes);
        validateConfiguredProperties();
        saslAuthRequired = enforceAuthEnabled && enforceAuthSchemes.contains(SASL_AUTH_SCHEME);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,validateConfiguredProperties,void validateConfiguredProperties(),"[72, 89]","{'A592': [(72, 89)]}",{'A592': 1.0},A592,,"    private void validateConfiguredProperties() {
        if (enforceAuthEnabled) {
            if (enforceAuthSchemes.isEmpty()) {
                String msg =
                    ENFORCE_AUTH_ENABLED + "" is true "" + ENFORCE_AUTH_SCHEMES + "" must be  ""
                        + ""configured."";
                LOG.error(msg);
                throw new IllegalArgumentException(msg);
            }
            enforceAuthSchemes.forEach(scheme -> {
                if (ProviderRegistry.getProvider(scheme) == null) {
                    String msg = ""Authentication scheme "" + scheme + "" is not available."";
                    LOG.error(msg);
                    throw new IllegalArgumentException(msg);
                }
            });
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,isCnxnAuthenticated,boolean isCnxnAuthenticated(ServerCnxn),"[97, 104]","{'A592': [(97, 104)]}",{'A592': 1.0},A592,,"    private boolean isCnxnAuthenticated(ServerCnxn cnxn) {
        for (Id id : cnxn.getAuthInfo()) {
            if (enforceAuthSchemes.contains(id.getScheme())) {
                return true;
            }
        }
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,isEnforceAuthEnabled,boolean isEnforceAuthEnabled(),"[106, 108]","{'A592': [(106, 108)]}",{'A592': 1.0},A592,,"    public boolean isEnforceAuthEnabled() {
        return enforceAuthEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,enforceAuthentication,"boolean enforceAuthentication(ServerCnxn,int)","[118, 132]","{'A592': [(118, 132)]}",{'A592': 1.0},A592,,"    public boolean enforceAuthentication(ServerCnxn connection, int xid) throws IOException {
        if (isEnforceAuthEnabled() && !isCnxnAuthenticated(connection)) {
            //Un authenticated connection, lets inform user with response and then close the session
            LOG.error(""Client authentication scheme(s) {} does not match with any of the expected ""
                    + ""authentication scheme {}, closing session."", getAuthSchemes(connection),
                enforceAuthSchemes);
            ReplyHeader replyHeader = new ReplyHeader(xid, 0,
                KeeperException.Code.SESSIONCLOSEDREQUIRESASLAUTH.intValue());
            connection.sendResponse(replyHeader, null, ""response"");
            connection.sendCloseSession();
            connection.disableRecv();
            return false;
        }
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,getAuthSchemes,List<String> getAuthSchemes(ServerCnxn),"[134, 136]","{'A592': [(134, 136)]}",{'A592': 1.0},A592,,"    private List<String> getAuthSchemes(ServerCnxn connection) {
        return connection.getAuthInfo().stream().map(Id::getScheme).collect(Collectors.toList());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/AuthenticationHelper.java,AuthenticationHelper,isSaslAuthRequired,boolean isSaslAuthRequired(),"[138, 140]","{'A592': [(138, 140)]}",{'A592': 1.0},A592,,"    public boolean isSaslAuthRequired() {
        return saslAuthRequired;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer,start,void start(),"[187, 202]","{'A583': [(194, 199), (201, 201)], 'A591': [(187, 193), (200, 200), (202, 202)]}","{'A583': 0.4375, 'A591': 0.5625}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"    @Override
    public void start() throws AdminServerException {
        try {
            server.start();
        } catch (Exception e) {
            // Server.start() only throws Exception, so let's at least wrap it
            // in an identifiable subclass
            String message = String.format(
                ""Problem starting AdminServer on address %s, port %d and command URL %s"",
                address,
                port,
                commandUrl);
            throw new AdminServerException(message, e);
        }
        LOG.info(""Started AdminServer on address {}, port {} and command URL {}"", address, port, commandUrl);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer,shutdown,void shutdown(),"[211, 223]","{'A583': [(216, 221)], 'A591': [(211, 215), (222, 223)]}","{'A583': 0.46153846153846156, 'A591': 0.5384615384615384}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"    @Override
    public void shutdown() throws AdminServerException {
        try {
            server.stop();
        } catch (Exception e) {
            String message = String.format(
                ""Problem stopping AdminServer on address %s, port %d and command URL %s"",
                address,
                port,
                commandUrl);
            throw new AdminServerException(message, e);
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer,setZooKeeperServer,void setZooKeeperServer(ZooKeeperServer),"[234, 237]","{'A591': [(234, 237)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"    @Override
    public void setZooKeeperServer(ZooKeeperServer zkServer) {
        this.zkServer = zkServer;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer.CommandServlet,doGet,"void doGet(HttpServletRequest,HttpServletResponse)","[243, 288]","{'A583': [(244, 246), (261, 261)], 'A591': [(247, 260), (263, 265), (267, 268), (271, 271), (288, 288)], 'A726': [(243, 243), (266, 266), (269, 270), (272, 287)], 'A605': [(262, 262)]}","{'A583': 0.08695652173913043, 'A591': 0.45652173913043476, 'A726': 0.43478260869565216, 'A605': 0.021739130434782608}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"        @Override
        protected void doGet(
            HttpServletRequest request,
            HttpServletResponse response) throws ServletException, IOException {
            // Capture the command name from the URL
            String cmd = request.getPathInfo();
            if (cmd == null || cmd.equals(""/"")) {
                // No command specified, print links to all commands instead
                for (String link : commandLinks()) {
                    response.getWriter().println(link);
                    response.getWriter().println(""<br/>"");
                }
                return;
            }
            // Strip leading ""/""
            cmd = cmd.substring(1);

            // Extract keyword arguments to command from request parameters
            @SuppressWarnings(""unchecked"") Map<String, String[]> parameterMap = request.getParameterMap();
            Map<String, String> kwargs = new HashMap<>();
            for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {
                kwargs.put(entry.getKey(), entry.getValue()[0]);
            }
            final String authInfo = request.getHeader(HttpHeader.AUTHORIZATION.asString());

            // Run the command
            final CommandResponse cmdResponse = Commands.runGetCommand(cmd, zkServer, kwargs, authInfo, request);
            response.setStatus(cmdResponse.getStatusCode());

            final Map<String, String> headers = cmdResponse.getHeaders();
            for (final Map.Entry<String, String> header : headers.entrySet()) {
                response.addHeader(header.getKey(), header.getValue());
            }
            final String clientIP = IPAuthenticationProvider.getClientIPAddress(request);
            if (cmdResponse.getInputStream() == null) {
                // Format and print the output of the command
                CommandOutputter outputter = new JsonOutputter(clientIP);
                response.setContentType(outputter.getContentType());
                outputter.output(cmdResponse, response.getWriter());
            } else {
                // Stream out the output of the command
                CommandOutputter outputter = new StreamOutputter(clientIP);
                response.setContentType(outputter.getContentType());
                outputter.output(cmdResponse, response.getOutputStream());
            }
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer.CommandServlet,doPost,"void doPost(HttpServletRequest,HttpServletResponse)","[296, 306]","{'A726': [(296, 306)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"        @Override
        protected void doPost(final HttpServletRequest request,
                              final HttpServletResponse response) throws ServletException, IOException {
            final String cmdName = extractCommandNameFromURL(request, response);
            if (cmdName != null) {
                final String authInfo = request.getHeader(HttpHeader.AUTHORIZATION.asString());
                final CommandResponse cmdResponse = Commands.runPostCommand(cmdName, zkServer, request.getInputStream(), authInfo, request);
                final String clientIP = IPAuthenticationProvider.getClientIPAddress(request);
                sendJSONResponse(response, cmdResponse, clientIP);
            }
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer.CommandServlet,extractCommandNameFromURL,"String extractCommandNameFromURL(HttpServletRequest,HttpServletResponse)","[311, 320]","{'A726': [(311, 320)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"        private String extractCommandNameFromURL(final HttpServletRequest request,
                                                 final HttpServletResponse response) throws IOException {
            String cmd = request.getPathInfo();
            if (cmd == null || cmd.equals(""/"")) {
                printCommandLinks(response);
                return null;
            }
            // Strip leading ""/""
            return cmd.substring(1);
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer.CommandServlet,printCommandLinks,void printCommandLinks(HttpServletResponse),"[325, 330]","{'A726': [(325, 330)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"        private void printCommandLinks(final HttpServletResponse response) throws IOException {
            for (final String link : commandLinks()) {
                response.getWriter().println(link);
                response.getWriter().println(""<br/>"");
            }
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer.CommandServlet,sendJSONResponse,"void sendJSONResponse(HttpServletResponse,CommandResponse,String)","[335, 343]","{'A726': [(335, 343)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"        private void sendJSONResponse(final HttpServletResponse response,
                                      final CommandResponse cmdResponse,
                                      final String clientIP) throws IOException {
            final CommandOutputter outputter = new JsonOutputter(clientIP);

            response.setStatus(cmdResponse.getStatusCode());
            response.setContentType(outputter.getContentType());
            outputter.output(cmdResponse, response.getWriter());
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer,commandLinks,List<String> commandLinks(),"[349, 351]","{'A591': [(349, 349), (351, 351)], 'A750': [(350, 350)]}","{'A591': 0.6666666666666666, 'A750': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"    private List<String> commandLinks() {
        return Commands.getPrimaryNames().stream().sorted().map(command -> String.format(""<a href=\""%s\"">%s</a>"", commandUrl + ""/"" + command , command)).collect(Collectors.toList());
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer,constrainTraceMethod,void constrainTraceMethod(ServletContextHandler),"[357, 370]","{'A662': [(357, 370)]}",{'A662': 1.0},A662,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"    private void constrainTraceMethod(ServletContextHandler ctxHandler) {
        Constraint c = new Constraint();
        c.setAuthenticate(true);

        ConstraintMapping cmt = new ConstraintMapping();
        cmt.setConstraint(c);
        cmt.setMethod(""TRACE"");
        cmt.setPathSpec(""/*"");

        ConstraintSecurityHandler securityHandler = new ConstraintSecurityHandler();
        securityHandler.setConstraintMappings(new ConstraintMapping[] {cmt});

        ctxHandler.setSecurityHandler(securityHandler);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JettyAdminServer.java,JettyAdminServer,getPasswordFromSystemPropertyOrFile,"String getPasswordFromSystemPropertyOrFile(String,String)","[379, 387]","{'A586': [(379, 387)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/JettyAdminServerTest.java,"    private String getPasswordFromSystemPropertyOrFile(final String propertyName,
                                                       final String pathPropertyName) {
        String value = System.getProperty(propertyName, """");
        final String pathValue = System.getProperty(pathPropertyName, """");
        if (!pathValue.isEmpty()) {
            value = String.valueOf(SecretUtils.readSecret(pathValue));
        }
        return value;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/PostCommand.java,PostCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[33, 36]","{'A726': [(33, 36)]}",{'A726': 1.0},A726,,"    @Override
    public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
        return null;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java,UnifiedConnectionFactory,doStart,void doStart(),"[58, 67]","{'A686': [(58, 67)]}",{'A686': 1.0},A686,,"    @Override
    protected void doStart() throws Exception {
        super.doStart();
        SSLEngine engine = this.sslContextFactory.newSSLEngine();
        SSLSession session = engine.getSession();
        engine.setUseClientMode(false);
        if (session.getPacketBufferSize() > this.getInputBufferSize()) {
            this.setInputBufferSize(session.getPacketBufferSize());
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java,UnifiedConnectionFactory,newConnection,"Connection newConnection(Connector,EndPoint)","[69, 106]","{'A686': [(69, 97), (99, 106)], 'A675': [(98, 98)]}","{'A686': 0.9736842105263158, 'A675': 0.02631578947368421}",A686,,"    @Override
    public Connection newConnection(Connector connector, EndPoint realEndPoint) {
        ReadAheadEndpoint aheadEndpoint = new ReadAheadEndpoint(realEndPoint, 1);
        byte[] bytes = aheadEndpoint.getBytes();
        boolean isSSL;

        if (bytes == null || bytes.length == 0) {
            isSSL = false;
            LOG.warn(""Incoming connection has no data"");
        } else {
            byte b = bytes[0]; // TLS first byte is 0x16, let's not support SSLv3 and below
            isSSL = b == 0x16; // matches SSL detection in NettyServerCnxnFactory.java
        }

        LOG.debug(String.format(""UnifiedConnectionFactory: newConnection() with SSL = %b"", isSSL));

        EndPoint plainEndpoint;
        SslConnection sslConnection;

        if (isSSL) {
            SSLEngine engine = this.sslContextFactory.newSSLEngine(aheadEndpoint.getRemoteAddress());
            engine.setUseClientMode(false);
            sslConnection = this.newSslConnection(connector, aheadEndpoint, engine);
            sslConnection.setRenegotiationAllowed(this.sslContextFactory.isRenegotiationAllowed());
            this.configure(sslConnection, connector, aheadEndpoint);
            plainEndpoint = sslConnection.getDecryptedEndPoint();
        } else {
            sslConnection = null;
            plainEndpoint = aheadEndpoint;
            ServerMetrics.getMetrics().INSECURE_ADMIN.add(1);
        }

        ConnectionFactory next = connector.getConnectionFactory(nextProtocol);
        Connection connection = next.newConnection(connector, plainEndpoint);
        plainEndpoint.setConnection(connection);

        return (sslConnection == null) ? connection : sslConnection;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java,UnifiedConnectionFactory,newSslConnection,"SslConnection newSslConnection(Connector,EndPoint,SSLEngine)","[108, 113]","{'A583': [(108, 111)], 'A686': [(112, 113)]}","{'A583': 0.6666666666666666, 'A686': 0.3333333333333333}",A583,,"    protected SslConnection newSslConnection(
        final Connector connector,
        final EndPoint endPoint,
        final SSLEngine engine) {
        return new SslConnection(connector.getByteBufferPool(), connector.getExecutor(), endPoint, engine);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/UnifiedConnectionFactory.java,UnifiedConnectionFactory,toString,String toString(),"[115, 123]","{'A583': [(117, 122)], 'A686': [(115, 116), (123, 123)]}","{'A583': 0.6666666666666666, 'A686': 0.3333333333333333}",A583,,"    @Override
    public String toString() {
        return String.format(
            ""%s@%x{%s->%s}"",
            this.getClass().getSimpleName(),
            this.hashCode(),
            this.getProtocol(),
            this.nextProtocol);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getLocalAddress,InetSocketAddress getLocalAddress(),"[41, 44]","{'A583': [(41, 44)]}",{'A583': 1.0},A583,,"    @Override
    public InetSocketAddress getLocalAddress() {
        return endPoint.getLocalAddress();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getRemoteAddress,InetSocketAddress getRemoteAddress(),"[45, 48]","{'A583': [(45, 48)]}",{'A583': 1.0},A583,,"    @Override
    public InetSocketAddress getRemoteAddress() {
        return endPoint.getRemoteAddress();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,isOpen,boolean isOpen(),"[49, 52]","{'A583': [(49, 52)]}",{'A583': 1.0},A583,,"    @Override
    public boolean isOpen() {
        return endPoint.isOpen();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getCreatedTimeStamp,long getCreatedTimeStamp(),"[53, 56]","{'A583': [(53, 56)]}",{'A583': 1.0},A583,,"    @Override
    public long getCreatedTimeStamp() {
        return endPoint.getCreatedTimeStamp();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,isOutputShutdown,boolean isOutputShutdown(),"[57, 60]","{'A583': [(57, 60)]}",{'A583': 1.0},A583,,"    @Override
    public boolean isOutputShutdown() {
        return endPoint.isOutputShutdown();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,isInputShutdown,boolean isInputShutdown(),"[61, 64]","{'A583': [(61, 64)]}",{'A583': 1.0},A583,,"    @Override
    public boolean isInputShutdown() {
        return endPoint.isInputShutdown();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,shutdownOutput,void shutdownOutput(),"[65, 68]","{'A583': [(65, 68)]}",{'A583': 1.0},A583,,"    @Override
    public void shutdownOutput() {
        endPoint.shutdownOutput();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,close,void close(),"[69, 72]","{'A583': [(69, 72)]}",{'A583': 1.0},A583,,"    @Override
    public void close() {
        endPoint.close();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getTransport,Object getTransport(),"[73, 76]","{'A583': [(73, 76)]}",{'A583': 1.0},A583,,"    @Override
    public Object getTransport() {
        return endPoint.getTransport();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getIdleTimeout,long getIdleTimeout(),"[77, 80]","{'A583': [(77, 80)]}",{'A583': 1.0},A583,,"    @Override
    public long getIdleTimeout() {
        return endPoint.getIdleTimeout();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getConnection,Connection getConnection(),"[81, 84]","{'A583': [(81, 84)]}",{'A583': 1.0},A583,,"    @Override
    public Connection getConnection() {
        return endPoint.getConnection();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,onOpen,void onOpen(),"[85, 88]","{'A583': [(85, 88)]}",{'A583': 1.0},A583,,"    @Override
    public void onOpen() {
        endPoint.onOpen();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,onClose,void onClose(),"[89, 92]","{'A583': [(89, 92)]}",{'A583': 1.0},A583,,"    @Override
    public void onClose() {
        endPoint.onClose();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,isOptimizedForDirectBuffers,boolean isOptimizedForDirectBuffers(),"[93, 96]","{'A583': [(93, 96)]}",{'A583': 1.0},A583,,"    @Override
    public boolean isOptimizedForDirectBuffers() {
        return endPoint.isOptimizedForDirectBuffers();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,isFillInterested,boolean isFillInterested(),"[97, 100]","{'A583': [(97, 100)]}",{'A583': 1.0},A583,,"    @Override
    public boolean isFillInterested() {
        return endPoint.isFillInterested();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,tryFillInterested,boolean tryFillInterested(Callback),"[101, 104]","{'A583': [(101, 104)]}",{'A583': 1.0},A583,,"    @Override
    public boolean tryFillInterested(Callback v) {
        return endPoint.tryFillInterested(v);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,flush,boolean flush(),"[105, 108]","{'A583': [(105, 108)]}",{'A583': 1.0},A583,,"    @Override
    public boolean flush(ByteBuffer... v) throws IOException {
        return endPoint.flush(v);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,setIdleTimeout,void setIdleTimeout(long),"[109, 112]","{'A583': [(109, 112)]}",{'A583': 1.0},A583,,"    @Override
    public void setIdleTimeout(long v) {
        endPoint.setIdleTimeout(v);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,write,void write(Callback),"[113, 116]","{'A583': [(113, 116)]}",{'A583': 1.0},A583,,"    @Override
    public void write(Callback v, ByteBuffer... b) throws WritePendingException {
        endPoint.write(v, b);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,setConnection,void setConnection(Connection),"[117, 120]","{'A583': [(117, 120)]}",{'A583': 1.0},A583,,"    @Override
    public void setConnection(Connection v) {
        endPoint.setConnection(v);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,upgrade,void upgrade(Connection),"[121, 124]","{'A583': [(121, 124)]}",{'A583': 1.0},A583,,"    @Override
    public void upgrade(Connection v) {
        endPoint.upgrade(v);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,fillInterested,void fillInterested(Callback),"[125, 128]","{'A583': [(125, 128)]}",{'A583': 1.0},A583,,"    @Override
    public void fillInterested(Callback v) throws ReadPendingException {
        endPoint.fillInterested(v);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,readAhead,void readAhead(),"[141, 156]","{'A583': [(152, 154)], 'A686': [(141, 151), (155, 156)]}","{'A583': 0.1875, 'A686': 0.8125}",A686,,"    private synchronized void readAhead() throws IOException {
        if (leftToRead > 0) {
            int n = 0;
            do {
                n = endPoint.fill(start);
            } while (n == 0 && endPoint.isOpen() && !endPoint.isInputShutdown());
            if (n == -1) {
                leftToRead = -1;
            } else {
                leftToRead -= n;
            }
            if (leftToRead <= 0) {
                start.rewind();
            }
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,readFromStart,int readFromStart(ByteBuffer),"[158, 166]","{'A583': [(160, 160)], 'A686': [(158, 159), (161, 166)]}","{'A583': 0.1111111111111111, 'A686': 0.8888888888888888}",A686,,"    private int readFromStart(final ByteBuffer dst) throws IOException {
        final int n = Math.min(dst.remaining(), start.remaining());
        if (n > 0) {
            dst.put(bytes, start.position(), n);
            start.position(start.position() + n);
            dst.flip();
        }
        return n;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,fill,int fill(ByteBuffer),"[168, 186]","{'A583': [(171, 176), (181, 183)], 'A686': [(168, 170), (177, 180), (184, 186)]}","{'A583': 0.47368421052631576, 'A686': 0.5263157894736842}",A686,,"    @Override
    public synchronized int fill(final ByteBuffer dst) throws IOException {
        throwPendingException();
        if (leftToRead > 0) {
            readAhead();
        }
        if (leftToRead > 0) {
            return 0;
        }
        final int sr = start.remaining();
        if (sr > 0) {
            dst.compact();
            final int n = readFromStart(dst);
            if (n < sr) {
                return n;
            }
        }
        return sr + endPoint.fill(dst);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,getBytes,byte[] getBytes(),"[188, 199]","{'A686': [(188, 199)]}",{'A686': 1.0},A686,,"    public byte[] getBytes() {
        if (pendingException == null) {
            try {
                readAhead();
            } catch (IOException e) {
                pendingException = e;
            }
        }
        byte[] ret = new byte[bytes.length];
        System.arraycopy(bytes, 0, ret, 0, ret.length);
        return ret;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/ReadAheadEndpoint.java,ReadAheadEndpoint,throwPendingException,void throwPendingException(),"[201, 207]","{'A686': [(201, 207)]}",{'A686': 1.0},A686,,"    private void throwPendingException() throws IOException {
        if (pendingException != null) {
            IOException e = pendingException;
            pendingException = null;
            throw e;
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/StreamOutputter.java,StreamOutputter,getContentType,String getContentType(),"[39, 42]","{'A726': [(39, 42)]}",{'A726': 1.0},A726,,"    @Override
    public String getContentType() {
        return ""application/octet-stream"";
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/StreamOutputter.java,StreamOutputter,output,"void output(CommandResponse,OutputStream)","[44, 51]","{'A726': [(44, 51)]}",{'A726': 1.0},A726,,"    @Override
    public void output(final CommandResponse response, final OutputStream os) {
        try (final InputStream is = response.getInputStream()){
            IOUtils.copyBytes(is, os, 1024, true);
        } catch (final IOException e) {
            LOG.warn(""Exception streaming out data to {}"", clientIP, e);
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandBase.java,CommandBase,getPrimaryName,String getPrimaryName(),"[52, 55]","{'A591': [(52, 55)]}",{'A591': 1.0},A591,,"    @Override
    public String getPrimaryName() {
        return primaryName;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandBase.java,CommandBase,getNames,Set<String> getNames(),"[57, 60]","{'A591': [(57, 60)]}",{'A591': 1.0},A591,,"    @Override
    public Set<String> getNames() {
        return names;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandBase.java,CommandBase,isServerRequired,boolean isServerRequired(),"[63, 66]","{'A647': [(63, 66)]}",{'A647': 1.0},A647,,"    @Override
    public boolean isServerRequired() {
        return serverRequired;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandBase.java,CommandBase,getAuthRequest,AuthRequest getAuthRequest(),"[68, 71]","{'A726': [(68, 71)]}",{'A726': 1.0},A726,,"    @Override
    public AuthRequest getAuthRequest() {
        return authRequest;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandBase.java,CommandBase,initializeResponse,CommandResponse initializeResponse(),"[78, 80]","{'A591': [(78, 80)]}",{'A591': 1.0},A591,,"    protected CommandResponse initializeResponse() {
        return new CommandResponse(primaryName);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/AdminServerFactory.java,AdminServerFactory,createAdminServer,AdminServer createAdminServer(),"[40, 62]","{'A591': [(40, 62)]}",{'A591': 1.0},A591,,"    public static AdminServer createAdminServer() {
        if (!""false"".equals(System.getProperty(""zookeeper.admin.enableServer""))) {
            try {
                Class<?> jettyAdminServerC = Class.forName(""org.apache.zookeeper.server.admin.JettyAdminServer"");
                Object adminServer = jettyAdminServerC.getConstructor().newInstance();
                return (AdminServer) adminServer;

            } catch (ClassNotFoundException e) {
                LOG.warn(""Unable to start JettyAdminServer"", e);
            } catch (InstantiationException e) {
                LOG.warn(""Unable to start JettyAdminServer"", e);
            } catch (IllegalAccessException e) {
                LOG.warn(""Unable to start JettyAdminServer"", e);
            } catch (InvocationTargetException e) {
                LOG.warn(""Unable to start JettyAdminServer"", e);
            } catch (NoSuchMethodException e) {
                LOG.warn(""Unable to start JettyAdminServer"", e);
            } catch (NoClassDefFoundError e) {
                LOG.warn(""Unable to load jetty, not starting JettyAdminServer"", e);
            }
        }
        return new DummyAdminServer();
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,getCommand,String getCommand(),"[89, 91]","{'A591': [(89, 91)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public String getCommand() {
        return command;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,getError,String getError(),"[98, 100]","{'A591': [(98, 100)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public String getError() {
        return error;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,getStatusCode,int getStatusCode(),"[107, 109]","{'A726': [(107, 109)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public int getStatusCode() {
        return statusCode;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,setStatusCode,void setStatusCode(int),"[114, 116]","{'A726': [(114, 116)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public void setStatusCode(int statusCode) {
        this.statusCode = statusCode;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,getInputStream,InputStream getInputStream(),"[123, 125]","{'A726': [(123, 125)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public InputStream getInputStream() {
        return inputStream;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,setInputStream,void setInputStream(InputStream),"[130, 132]","{'A726': [(130, 132)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public void setInputStream(final InputStream inputStream) {
         this.inputStream = inputStream;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,put,"Object put(String,Object)","[141, 143]","{'A591': [(141, 143)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public Object put(String key, Object value) {
        return data.put(key, value);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,putAll,"void putAll(Map<? extends String, ?>)","[150, 152]","{'A591': [(151, 152)], 'A583': [(150, 150)]}","{'A591': 0.6666666666666666, 'A583': 0.3333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public void putAll(Map<? extends String, ?> m) {
        data.putAll(m);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,addHeader,"void addHeader(String,String)","[160, 162]","{'A726': [(160, 162)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public void addHeader(final String name, final String value) {
        headers.put(name, value);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,getHeaders,"Map<String, String> getHeaders()","[169, 171]","{'A726': [(169, 171)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public Map<String, String> getHeaders() {
        return headers;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandResponse.java,CommandResponse,toMap,"Map<String, Object> toMap()","[179, 185]","{'A591': [(179, 179), (181, 185)], 'A605': [(180, 180)]}","{'A591': 0.8571428571428571, 'A605': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandResponseTest.java,"    public Map<String, Object> toMap() {
        Map<String, Object> m = new LinkedHashMap<>(data);
        m.put(KEY_COMMAND, command);
        m.put(KEY_ERROR, error);
        m.putAll(data);
        return m;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JsonOutputter.java,JsonOutputter,getContentType,String getContentType(),"[48, 51]","{'A591': [(48, 51)]}",{'A591': 1.0},A591,,"    @Override
    public String getContentType() {
        return ""application/json"";
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/JsonOutputter.java,JsonOutputter,output,"void output(CommandResponse,PrintWriter)","[53, 67]","{'A591': [(53, 63), (65, 67)], 'A726': [(64, 64)]}","{'A591': 0.9333333333333333, 'A726': 0.06666666666666667}",A591,,"    @Override
    public void output(CommandResponse response, PrintWriter pw) {
        try {
            mapper.writeValue(pw, response.toMap());
        } catch (JsonGenerationException e) {
            LOG.warn(""Exception writing command response to JSON:"", e);
            pw.write(ERROR_RESPONSE);
        } catch (JsonMappingException e) {
            LOG.warn(""Exception writing command response to JSON:"", e);
            pw.write(ERROR_RESPONSE);
        } catch (IOException e) {
            LOG.warn(""Exception writing command response as JSON to {}"", clientIP, e);
            pw.write(ERROR_RESPONSE);
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/DummyAdminServer.java,DummyAdminServer,start,void start(),"[32, 34]","{'A583': [(33, 34)], 'A591': [(32, 32)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,,"    @Override
    public void start() throws AdminServerException {
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/DummyAdminServer.java,DummyAdminServer,shutdown,void shutdown(),"[36, 38]","{'A583': [(37, 38)], 'A591': [(36, 36)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,,"    @Override
    public void shutdown() throws AdminServerException {
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/DummyAdminServer.java,DummyAdminServer,setZooKeeperServer,void setZooKeeperServer(ZooKeeperServer),"[40, 42]","{'A583': [(41, 42)], 'A591': [(40, 40)]}","{'A583': 0.6666666666666666, 'A591': 0.3333333333333333}",A583,,"    @Override
    public void setZooKeeperServer(ZooKeeperServer zkServer) {
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/GetCommand.java,GetCommand,runPost,"CommandResponse runPost(ZooKeeperServer,InputStream)","[43, 46]","{'A726': [(43, 46)]}",{'A726': 1.0},A726,,"    @Override
    public CommandResponse runPost(ZooKeeperServer zkServer, InputStream inputStream) {
        return null;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,registerCommand,void registerCommand(Command),"[102, 110]","{'A583': [(106, 106)], 'A591': [(102, 105), (107, 110)]}","{'A583': 0.1111111111111111, 'A591': 0.8888888888888888}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    public static void registerCommand(Command command) {
        for (String name : command.getNames()) {
            Command prev = commands.put(name, command);
            if (prev != null) {
                LOG.warn(""Re-registering command {} (primary name = {})"", name, command.getPrimaryName());
            }
        }
        primaryNames.add(command.getPrimaryName());
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,runGetCommand,"CommandResponse runGetCommand(String,ZooKeeperServer,Map<String, String>,String,HttpServletRequest)","[129, 136]","{'A726': [(129, 136)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    public static CommandResponse runGetCommand(
            String cmdName,
            ZooKeeperServer zkServer,
            Map<String, String> kwargs,
            String authInfo,
            HttpServletRequest request) {
        return runCommand(cmdName, zkServer, kwargs, null, authInfo, request, true);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,runPostCommand,"CommandResponse runPostCommand(String,ZooKeeperServer,InputStream,String,HttpServletRequest)","[151, 158]","{'A726': [(151, 158)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    public static CommandResponse runPostCommand(
            String cmdName,
            ZooKeeperServer zkServer,
            InputStream inputStream,
            String authInfo,
            HttpServletRequest request) {
        return runCommand(cmdName, zkServer, null, inputStream, authInfo, request, false);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,runCommand,"CommandResponse runCommand(String,ZooKeeperServer,Map<String, String>,InputStream,String,HttpServletRequest,boolean)","[160, 199]","{'A726': [(160, 199)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    private static CommandResponse runCommand(
            String cmdName,
            ZooKeeperServer zkServer,
            Map<String, String> kwargs,
            InputStream inputStream,
            String authInfo,
            HttpServletRequest request,
            boolean isGet) {
        Command command = getCommand(cmdName);
        if (command == null) {
            // set the status code to 200 to keep the current behavior of existing commands
            LOG.warn(""Unknown command"");
            return new CommandResponse(cmdName, ""Unknown command: "" + cmdName, HttpServletResponse.SC_OK);
        }
        if (command.isServerRequired() && (zkServer == null || !zkServer.isRunning())) {
            // set the status code to 200 to keep the current behavior of existing commands
            LOG.warn(""This ZooKeeper instance is not currently serving requests for command"");
            return new CommandResponse(cmdName, ""This ZooKeeper instance is not currently serving requests"", HttpServletResponse.SC_OK);
        }

        final AuthRequest authRequest = command.getAuthRequest();
        if (authRequest != null) {
            if (authInfo == null) {
                LOG.warn(""Auth info is missing for command"");
                return new CommandResponse(cmdName, ""Auth info is missing for the command"", HttpServletResponse.SC_UNAUTHORIZED);
            }
            try {
                final List<Id> ids = handleAuthentication(request, authInfo);
                handleAuthorization(zkServer, ids, authRequest.getPermission(), authRequest.getPath());
            } catch (final KeeperException.AuthFailedException e) {
                return new CommandResponse(cmdName, ""Not authenticated"", HttpServletResponse.SC_UNAUTHORIZED);
            } catch (final KeeperException.NoAuthException e) {
                return new CommandResponse(cmdName, ""Not authorized"", HttpServletResponse.SC_FORBIDDEN);
            } catch (final Exception e) {
                LOG.warn(""Error occurred during auth for command"", e);
                return new CommandResponse(cmdName, ""Error occurred during auth"", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            }
        }
        return isGet ? command.runGet(zkServer, kwargs) : command.runPost(zkServer, inputStream);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,handleAuthentication,"List<Id> handleAuthentication(HttpServletRequest,String)","[201, 228]","{'A726': [(201, 228)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    private static List<Id> handleAuthentication(final HttpServletRequest request, final String authInfo) throws KeeperException.AuthFailedException {
        final String[] authData = authInfo.split(AUTH_INFO_SEPARATOR);
        // for IP and x509, auth info only contains the schema and Auth Id will be extracted from HTTP request
        if (authData.length != 1 && authData.length != 2) {
            LOG.warn(""Invalid auth info length"");
            throw new KeeperException.AuthFailedException();
        }

        final String schema = authData[0];
        final ServerAuthenticationProvider authProvider = ProviderRegistry.getServerProvider(schema);
        if (authProvider != null) {
            try {
                final byte[] auth = authData.length == 2 ? authData[1].getBytes(StandardCharsets.UTF_8) : null;
                final List<Id> ids = authProvider.handleAuthentication(request, auth);
                if (ids.isEmpty()) {
                    LOG.warn(""Auth Id list is empty"");
                    throw new KeeperException.AuthFailedException();
                }
                return ids;
            } catch (final RuntimeException e) {
                LOG.warn(""Caught runtime exception from AuthenticationProvider"", e);
                throw new KeeperException.AuthFailedException();
            }
        } else {
            LOG.warn(""Auth provider not found for schema"");
            throw new KeeperException.AuthFailedException();
        }
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,handleAuthorization,"void handleAuthorization(ZooKeeperServer,List<Id>,int,String)","[230, 241]","{'A591': [(241, 241)], 'A726': [(230, 240)]}","{'A591': 0.08333333333333333, 'A726': 0.9166666666666666}",A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    private static void handleAuthorization(final ZooKeeperServer zkServer,
                                            final List<Id> ids,
                                            final int perm,
                                            final String path)
            throws KeeperException.NoNodeException, KeeperException.NoAuthException {
        final DataNode dataNode = zkServer.getZKDatabase().getNode(path);
        if (dataNode == null) {
            throw new KeeperException.NoNodeException(path);
        }
        final List<ACL> acls = zkServer.getZKDatabase().aclForNode(dataNode);
        zkServer.checkACL(null, acls, perm, ids, path, null);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,getPrimaryNames,Set<String> getPrimaryNames(),"[246, 248]","{'A591': [(246, 248)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    public static Set<String> getPrimaryNames() {
        return primaryNames;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands,getCommand,Command getCommand(String),"[254, 256]","{'A591': [(254, 256)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"    public static Command getCommand(String cmdName) {
        return commands.get(cmdName);
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.CnxnStatResetCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[298, 304]","{'A591': [(298, 298), (300, 304)], 'A726': [(299, 299)]}","{'A591': 0.8571428571428571, 'A726': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            zkServer.getServerCnxnFactory().resetAllConnectionStats();
            return response;

        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.ConfCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[318, 323]","{'A591': [(318, 318), (320, 323)], 'A726': [(319, 319)]}","{'A591': 0.8333333333333334, 'A726': 0.16666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.putAll(zkServer.getConf().toMap());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.ConsCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[338, 354]","{'A591': [(338, 338), (340, 340), (353, 354)], 'A726': [(339, 339)], 'A613': [(341, 352)]}","{'A591': 0.23529411764705882, 'A726': 0.058823529411764705, 'A613': 0.7058823529411765}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            ServerCnxnFactory serverCnxnFactory = zkServer.getServerCnxnFactory();
            if (serverCnxnFactory != null) {
                response.put(""connections"", serverCnxnFactory.getAllConnectionInfo(false));
            } else {
                response.put(""connections"", Collections.emptyList());
            }
            ServerCnxnFactory secureServerCnxnFactory = zkServer.getSecureServerCnxnFactory();
            if (secureServerCnxnFactory != null) {
                response.put(""secure_connections"", secureServerCnxnFactory.getAllConnectionInfo(false));
            } else {
                response.put(""secure_connections"", Collections.emptyList());
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.DirsCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[367, 373]","{'A726': [(368, 368)], 'A616': [(367, 367), (369, 373)]}","{'A726': 0.14285714285714285, 'A616': 0.8571428571428571}",A616,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.put(""datadir_size"", zkServer.getDataDirSize());
            response.put(""logdir_size"", zkServer.getLogDirSize());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.DumpCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[392, 398]","{'A591': [(392, 392), (394, 398)], 'A726': [(393, 393)]}","{'A591': 0.8571428571428571, 'A726': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.put(""expiry_time_to_session_ids"", zkServer.getSessionExpiryMap());
            response.put(""session_id_to_ephemeral_paths"", zkServer.getEphemerals());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.EnvCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[411, 418]","{'A591': [(411, 411), (413, 418)], 'A726': [(412, 412)]}","{'A591': 0.875, 'A726': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            for (Entry e : Environment.list()) {
                response.put(e.getKey(), e.getValue());
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.DigestCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[431, 436]","{'A726': [(432, 432)], 'A612': [(431, 431), (433, 436)]}","{'A726': 0.16666666666666666, 'A612': 0.8333333333333334}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.put(""digests"", zkServer.getZKDatabase().getDataTree().getDigestLog());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.GetTraceMaskCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[450, 455]","{'A591': [(450, 450), (452, 455)], 'A726': [(451, 451)]}","{'A591': 0.8333333333333334, 'A726': 0.16666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.put(""tracemask"", ZooTrace.getTextTraceLevel());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.InitialConfigurationCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[465, 470]","{'A726': [(466, 466)], 'A647': [(465, 465), (467, 470)]}","{'A726': 0.16666666666666666, 'A647': 0.8333333333333334}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.put(""initial_configuration"", zkServer.getInitialConfig());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.IsroCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[484, 489]","{'A591': [(484, 484), (486, 489)], 'A726': [(485, 485)]}","{'A591': 0.8333333333333334, 'A726': 0.16666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            response.put(""read_only"", zkServer instanceof ReadOnlyZooKeeperServer);
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.LastSnapshotCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[508, 515]","{'A726': [(509, 509)], 'A647': [(508, 508), (510, 515)]}","{'A726': 0.125, 'A647': 0.875}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            SnapshotInfo info = zkServer.getTxnLogFactory().getLastSnapshotInfo();
            response.put(""zxid"", Long.toHexString(info == null ? -1L : info.zxid));
            response.put(""timestamp"", info == null ? -1L : info.timestamp);
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.LeaderCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[528, 541]","{'A726': [(529, 529)], 'A647': [(528, 528), (530, 541)]}","{'A726': 0.07142857142857142, 'A647': 0.9285714285714286}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            if (zkServer instanceof QuorumZooKeeperServer) {
                response.put(""is_leader"", zkServer instanceof LeaderZooKeeperServer);
                QuorumPeer peer = ((QuorumZooKeeperServer) zkServer).self;
                response.put(""leader_id"", peer.getLeaderId());
                String leaderAddress = peer.getLeaderAddress();
                response.put(""leader_ip"", leaderAddress != null ? leaderAddress : """");
            } else {
                response.put(""error"", ""server is not initialized"");
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.MonitorCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[578, 585]","{'A583': [(582, 582), (585, 585)], 'A591': [(578, 578), (580, 580), (583, 584)], 'A726': [(579, 579)], 'A584': [(581, 581)]}","{'A583': 0.25, 'A591': 0.5, 'A726': 0.125, 'A584': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            zkServer.dumpMonitorValues(response::put);
            ServerMetrics.getMetrics().getMetricsProvider().dump(response::put);
            return response;

        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.ObserverCnxnStatResetCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[598, 609]","{'A726': [(599, 599)], 'A647': [(598, 598), (600, 609)]}","{'A726': 0.08333333333333333, 'A647': 0.9166666666666666}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            if (zkServer instanceof LeaderZooKeeperServer) {
                Leader leader = ((LeaderZooKeeperServer) zkServer).getLeader();
                leader.resetObserverConnectionStats();
            } else if (zkServer instanceof FollowerZooKeeperServer) {
                Follower follower = ((FollowerZooKeeperServer) zkServer).getFollower();
                follower.resetObserverConnectionStats();
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.RestoreCommand,runPost,"CommandResponse runPost(ZooKeeperServer,InputStream)","[630, 672]","{'A726': [(630, 672)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runPost(final ZooKeeperServer zkServer, final InputStream inputStream) {
            final CommandResponse response = initializeResponse();

            // check feature flag
            final boolean restoreEnabled = Boolean.parseBoolean(System.getProperty(ADMIN_RESTORE_ENABLED, ""true""));
            if (!restoreEnabled) {
                response.setStatusCode(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
                LOG.warn(""Restore command is disabled"");
                return response;
            }

            if (!zkServer.isSerializeLastProcessedZxidEnabled()) {
                response.setStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                LOG.warn(""Restore command requires serializeLastProcessedZxidEnable flag is set to true"");
                return response;
            }

            if (inputStream == null){
                response.setStatusCode(HttpServletResponse.SC_BAD_REQUEST);
                LOG.warn(""InputStream from restore request is null"");
                return response;
            }

            // check rate limiting
            if (!rateLimiter.allow()) {
                response.setStatusCode(HttpStatus.TOO_MANY_REQUESTS_429);
                ServerMetrics.getMetrics().RESTORE_RATE_LIMITED_COUNT.add(1);
                LOG.warn(""Restore request was rate limited"");
                return response;
            }

            // restore from snapshot InputStream
            try {
                final long lastZxid = zkServer.restoreFromSnapshot(inputStream);
                response.put(RESPONSE_DATA_LAST_ZXID, lastZxid);
            } catch (final Exception e) {
                response.setStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                ServerMetrics.getMetrics().RESTORE_ERROR_COUNT.add(1);
                LOG.warn(""Exception occurred when restore snapshot via the restore command"", e);
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.RuokCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[684, 687]","{'A591': [(684, 684), (686, 687)], 'A726': [(685, 685)]}","{'A591': 0.75, 'A726': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            return initializeResponse();
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.SetTraceMaskCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[703, 721]","{'A583': [(714, 714)], 'A591': [(703, 703), (705, 713), (715, 721)], 'A726': [(704, 704)]}","{'A583': 0.05263157894736842, 'A591': 0.8947368421052632, 'A726': 0.05263157894736842}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            long traceMask;
            if (!kwargs.containsKey(""traceMask"")) {
                response.put(""error"", ""setTraceMask requires long traceMask argument"");
                return response;
            }
            try {
                traceMask = Long.parseLong(kwargs.get(""traceMask""));
            } catch (NumberFormatException e) {
                response.put(""error"", ""setTraceMask requires long traceMask argument, got "" + kwargs.get(""traceMask""));
                return response;
            }

            ZooTrace.setTextTraceLevel(traceMask);
            response.put(""tracemask"", traceMask);
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.SnapshotCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[750, 806]","{'A726': [(750, 806)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @SuppressFBWarnings(value = ""OBL_UNSATISFIED_OBLIGATION"",
                justification = ""FileInputStream is passed to CommandResponse and closed in StreamOutputter"")
        @Override
        public CommandResponse runGet(final ZooKeeperServer zkServer, final Map<String, String> kwargs) {
            final CommandResponse response = initializeResponse();

            // check feature flag
            final boolean snapshotEnabled = Boolean.parseBoolean(System.getProperty(ADMIN_SNAPSHOT_ENABLED, ""true""));
            if (!snapshotEnabled) {
                response.setStatusCode(HttpServletResponse.SC_SERVICE_UNAVAILABLE);
                LOG.warn(""Snapshot command is disabled"");
                return response;
            }

            if (!zkServer.isSerializeLastProcessedZxidEnabled()) {
                response.setStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                LOG.warn(""Snapshot command requires serializeLastProcessedZxidEnable flag is set to true"");
                return response;
            }

            // check rate limiting
            if (!rateLimiter.allow()) {
                response.setStatusCode(HttpStatus.TOO_MANY_REQUESTS_429);
                ServerMetrics.getMetrics().SNAPSHOT_RATE_LIMITED_COUNT.add(1);
                LOG.warn(""Snapshot request was rate limited"");
                return response;
            }

            // check the streaming query param
            boolean streaming = true;
            if (kwargs.containsKey(REQUEST_QUERY_PARAM_STREAMING)) {
                streaming = Boolean.parseBoolean(kwargs.get(REQUEST_QUERY_PARAM_STREAMING));
            }

            // take snapshot and stream out data if needed
            try {
                final File snapshotFile = zkServer.takeSnapshot(false, false);
                final long lastZxid = Util.getZxidFromName(snapshotFile.getName(), SNAPSHOT_FILE_PREFIX);
                response.addHeader(RESPONSE_HEADER_LAST_ZXID, ""0x"" + ZxidUtils.zxidToString(lastZxid));

                final long size = snapshotFile.length();
                response.addHeader(RESPONSE_HEADER_SNAPSHOT_SIZE, String.valueOf(size));

                if (size == 0) {
                    response.setStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                    ServerMetrics.getMetrics().SNAPSHOT_ERROR_COUNT.add(1);
                    LOG.warn(""Snapshot file {} is empty"", snapshotFile);
                } else if (streaming) {
                    response.setInputStream(new FileInputStream(snapshotFile));
                }
            } catch (final Exception e) {
                response.setStatusCode(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
                ServerMetrics.getMetrics().SNAPSHOT_ERROR_COUNT.add(1);
                LOG.warn(""Exception occurred when taking the snapshot via the snapshot admin command"", e);
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.SrvrCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[829, 843]","{'A583': [(838, 838)], 'A591': [(829, 829), (831, 835), (841, 843)], 'A726': [(830, 830)], 'A613': [(836, 837), (839, 840)]}","{'A583': 0.06666666666666667, 'A591': 0.6, 'A726': 0.06666666666666667, 'A613': 0.26666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            LOG.info(""running stat"");
            response.put(""version"", Version.getFullVersion());
            response.put(""read_only"", zkServer instanceof ReadOnlyZooKeeperServer);
            response.put(""server_stats"", zkServer.serverStats());
            response.put(""client_response"", zkServer.serverStats().getClientResponseStats());
            if (zkServer instanceof LeaderZooKeeperServer) {
                Leader leader = ((LeaderZooKeeperServer) zkServer).getLeader();
                response.put(""proposal_stats"", leader.getProposalStats());
            }
            response.put(""node_count"", zkServer.getZKDatabase().getNodeCount());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.StatCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[856, 876]","{'A591': [(856, 856), (875, 876)], 'A726': [(857, 858)], 'A653': [(859, 874)]}","{'A591': 0.14285714285714285, 'A726': 0.09523809523809523, 'A653': 0.7619047619047619}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = super.runGet(zkServer, kwargs);

            final Iterable<Map<String, Object>> connections;
            if (zkServer.getServerCnxnFactory() != null) {
                connections = zkServer.getServerCnxnFactory().getAllConnectionInfo(true);
            } else {
                connections = Collections.emptyList();
            }
            response.put(""connections"", connections);

            final Iterable<Map<String, Object>> secureConnections;
            if (zkServer.getSecureServerCnxnFactory() != null) {
                secureConnections = zkServer.getSecureServerCnxnFactory().getAllConnectionInfo(true);
            } else {
                secureConnections = Collections.emptyList();
            }
            response.put(""secure_connections"", secureConnections);
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.StatResetCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[889, 894]","{'A591': [(889, 889), (891, 894)], 'A726': [(890, 890)]}","{'A591': 0.8333333333333334, 'A726': 0.16666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            zkServer.serverStats().reset();
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.SyncedObserverConsCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[910, 934]","{'A726': [(911, 911)], 'A647': [(910, 910), (912, 934)]}","{'A726': 0.04, 'A647': 0.96}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {

            CommandResponse response = initializeResponse();

            if (zkServer instanceof LeaderZooKeeperServer) {
                Leader leader = ((LeaderZooKeeperServer) zkServer).getLeader();

                response.put(""synced_observers"", leader.getObservingLearners().size());
                response.put(""observers"", leader.getObservingLearnersInfo());
                return response;
            } else if (zkServer instanceof FollowerZooKeeperServer) {
                Follower follower = ((FollowerZooKeeperServer) zkServer).getFollower();
                Integer syncedObservers = follower.getSyncedObserverSize();
                if (syncedObservers != null) {
                    response.put(""synced_observers"", syncedObservers);
                    response.put(""observers"", follower.getSyncedObserversInfo());
                    return response;
                }
            }

            response.put(""synced_observers"", 0);
            response.put(""observers"", Collections.emptySet());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.SystemPropertiesCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[947, 955]","{'A726': [(948, 948)], 'A647': [(947, 947), (949, 955)]}","{'A726': 0.1111111111111111, 'A647': 0.8888888888888888}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            Properties systemProperties = System.getProperties();
            SortedMap<String, String> sortedSystemProperties = new TreeMap<>();
            systemProperties.forEach((k, v) -> sortedSystemProperties.put(k.toString(), v.toString()));
            response.putAll(sortedSystemProperties);
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.VotingViewCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[969, 981]","{'A726': [(970, 970)], 'A653': [(974, 975)], 'A647': [(969, 969), (971, 973), (976, 981)]}","{'A726': 0.07692307692307693, 'A653': 0.15384615384615385, 'A647': 0.7692307692307693}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            if (zkServer instanceof QuorumZooKeeperServer) {
                QuorumPeer peer = ((QuorumZooKeeperServer) zkServer).self;
                Map<Long, QuorumServerView> votingView = peer.getVotingView().entrySet().stream()
                        .collect(Collectors.toMap(Map.Entry::getKey, e -> new QuorumServerView(e.getValue())));
                response.put(""current_config"", votingView);
            } else {
                response.put(""current_config"", Collections.emptyMap());
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.VotingViewCommand.QuorumServerView,getMultiAddressString,List<String> getMultiAddressString(MultipleAddresses),"[1005, 1013]","{'A653': [(1005, 1012)], 'A647': [(1013, 1013)]}","{'A653': 0.8888888888888888, 'A647': 0.1111111111111111}",A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"            private static List<String> getMultiAddressString(MultipleAddresses multipleAddresses) {
                if (multipleAddresses == null) {
                    return Collections.emptyList();
                }

                return multipleAddresses.getAllAddresses().stream()
                        .map(QuorumServerView::getAddressString)
                        .collect(Collectors.toList());
            }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.VotingViewCommand.QuorumServerView,getAddressString,String getAddressString(InetSocketAddress),"[1015, 1020]","{'A653': [(1015, 1020)]}",{'A653': 1.0},A653,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"            private static String getAddressString(InetSocketAddress address) {
                if (address == null) {
                    return """";
                }
                return String.format(""%s:%d"", QuorumPeer.QuorumServer.delimitedHostString(address), address.getPort());
            }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.WatchCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[1037, 1043]","{'A591': [(1037, 1037), (1039, 1043)], 'A726': [(1038, 1038)]}","{'A591': 0.8571428571428571, 'A726': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            DataTree dt = zkServer.getZKDatabase().getDataTree();
            CommandResponse response = initializeResponse();
            response.put(""session_id_to_watched_paths"", dt.getWatches().toMap());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.WatchesByPathCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[1058, 1064]","{'A591': [(1058, 1058), (1060, 1064)], 'A726': [(1059, 1059)]}","{'A591': 0.8571428571428571, 'A726': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            DataTree dt = zkServer.getZKDatabase().getDataTree();
            CommandResponse response = initializeResponse();
            response.put(""path_to_session_ids"", dt.getWatchesByPath().toMap());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.WatchSummaryCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[1078, 1084]","{'A591': [(1078, 1078), (1080, 1084)], 'A726': [(1079, 1079)]}","{'A591': 0.8571428571428571, 'A726': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            DataTree dt = zkServer.getZKDatabase().getDataTree();
            CommandResponse response = initializeResponse();
            response.putAll(dt.getWatchesSummary().toMap());
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java,Commands.ZabStateCommand,runGet,"CommandResponse runGet(ZooKeeperServer,Map<String, String>)","[1098, 1128]","{'A583': [(1127, 1127)], 'A726': [(1099, 1099)], 'A647': [(1098, 1098), (1100, 1105), (1117, 1117), (1122, 1126), (1128, 1128)], 'A641': [(1107, 1116), (1118, 1121)], 'A702': [(1106, 1106)]}","{'A583': 0.03225806451612903, 'A726': 0.03225806451612903, 'A647': 0.45161290322580644, 'A641': 0.45161290322580644, 'A702': 0.03225806451612903}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java,"        @Override
        public CommandResponse runGet(ZooKeeperServer zkServer, Map<String, String> kwargs) {
            CommandResponse response = initializeResponse();
            if (zkServer instanceof QuorumZooKeeperServer) {
                QuorumPeer peer = ((QuorumZooKeeperServer) zkServer).self;
                QuorumPeer.ZabState zabState = peer.getZabState();
                QuorumVerifier qv = peer.getQuorumVerifier();

                QuorumPeer.QuorumServer voter = qv.getVotingMembers().get(peer.getMyId());
                boolean voting = (
                        voter != null
                                && voter.addr.equals(peer.getQuorumAddress())
                                && voter.electionAddr.equals(peer.getElectionAddress())
                );
                response.put(""myid"", zkServer.getConf().getServerId());
                response.put(""is_leader"", zkServer instanceof LeaderZooKeeperServer);
                response.put(""quorum_address"", peer.getQuorumAddress());
                response.put(""election_address"", peer.getElectionAddress());
                response.put(""client_address"", peer.getClientAddress());
                response.put(""voting"", voting);
                long lastProcessedZxid = zkServer.getZKDatabase().getDataTreeLastProcessedZxid();
                response.put(""last_zxid"", ""0x"" + ZxidUtils.zxidToString(lastProcessedZxid));
                response.put(""zab_epoch"", ZxidUtils.getEpochFromZxid(lastProcessedZxid));
                response.put(""zab_counter"", ZxidUtils.getCounterFromZxid(lastProcessedZxid));
                response.put(""zabstate"", zabState.name().toLowerCase());
            } else {
                response.put(""voting"", false);
                response.put(""zabstate"", """");
            }
            return response;
        }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandOutputter.java,,output,"void output(CommandResponse,PrintWriter)","[36, 36]","{'A726': [(36, 36)]}",{'A726': 1.0},A726,,"    default void output(CommandResponse response, PrintWriter pw) {}
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/CommandOutputter.java,,output,"void output(CommandResponse,OutputStream)","[39, 39]","{'A726': [(39, 39)]}",{'A726': 1.0},A726,,"    default void output(final CommandResponse response, final OutputStream os) {}
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/AuthRequest.java,AuthRequest,getPermission,int getPermission(),"[48, 50]","{'A726': [(48, 50)]}",{'A726': 1.0},A726,,"    public int getPermission() {
        return permission;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/AuthRequest.java,AuthRequest,getPath,String getPath(),"[55, 57]","{'A726': [(55, 57)]}",{'A726': 1.0},A726,,"    public String getPath() {
        return path;
    }
"
org.apache.zookeeper.server.admin,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/AuthRequest.java,AuthRequest,toString,String toString(),"[59, 65]","{'A726': [(59, 65)]}",{'A726': 1.0},A726,,"    @Override
    public String toString() {
        return ""AuthRequest{""
        + ""permission="" + permission
        + "", path='"" + path + '\''
        + '}';
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,printUsage,void printUsage(),"[52, 59]","{'A583': [(52, 52), (57, 58)], 'A591': [(54, 55), (59, 59)], 'A590': [(56, 56)], 'A616': [(53, 53)]}","{'A583': 0.375, 'A591': 0.375, 'A590': 0.125, 'A616': 0.125}",A583,,"    static void printUsage() {
        System.out.println(""Usage:"");
        System.out.println(""PurgeTxnLog dataLogDir [snapDir] -n count"");
        System.out.println(""\tdataLogDir -- path to the txn log directory"");
        System.out.println(""\tsnapDir -- path to the snapshot directory"");
        System.out.println(""\tcount -- the number of old snaps/logs you want ""
                           + ""to keep, value should be greater than or equal to 3"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,purge,"void purge(File,File,int)","[75, 87]","{'A591': [(75, 76), (78, 79)], 'A590': [(80, 80)], 'A736': [(83, 86)], 'A616': [(77, 77)], 'A593': [(81, 81), (87, 87)], 'A641': [(82, 82)]}","{'A591': 0.3076923076923077, 'A590': 0.07692307692307693, 'A736': 0.3076923076923077, 'A616': 0.07692307692307693, 'A593': 0.15384615384615385, 'A641': 0.07692307692307693}",A591,,"    public static void purge(File dataDir, File snapDir, int num) throws IOException {
        if (num < 3) {
            throw new IllegalArgumentException(COUNT_ERR_MSG);
        }

        FileTxnSnapLog txnLog = new FileTxnSnapLog(dataDir, snapDir);

        List<File> snaps = txnLog.findNValidSnapshots(num);
        int numSnaps = snaps.size();
        if (numSnaps > 0) {
            purgeOlderSnapshots(txnLog, snaps.get(numSnaps - 1));
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,purgeOlderSnapshots,"void purgeOlderSnapshots(FileTxnSnapLog,File)","[90, 165]","{'A583': [(91, 91), (119, 120), (122, 123), (125, 126), (128, 128), (133, 133), (135, 135), (151, 156), (159, 161)], 'A591': [(92, 92), (150, 150), (162, 165)], 'A590': [(121, 121), (124, 124), (134, 134), (136, 137), (144, 144)], 'A736': [(90, 90), (93, 111), (113, 118), (129, 131), (157, 158)], 'A593': [(127, 127), (132, 132)], 'A605': [(112, 112)], 'A726': [(138, 138)], 'A604': [(139, 143), (145, 149)]}","{'A583': 0.25, 'A591': 0.07894736842105263, 'A590': 0.07894736842105263, 'A736': 0.40789473684210525, 'A593': 0.02631578947368421, 'A605': 0.013157894736842105, 'A726': 0.013157894736842105, 'A604': 0.13157894736842105}",A736,,"    static void purgeOlderSnapshots(FileTxnSnapLog txnLog, File snapShot) {
        final long leastZxidToBeRetain = Util.getZxidFromName(snapShot.getName(), PREFIX_SNAPSHOT);

        /**
         * We delete all files with a zxid in their name that is less than leastZxidToBeRetain.
         * This rule applies to both snapshot files as well as log files, with the following
         * exception for log files.
         *
         * A log file with zxid less than X may contain transactions with zxid larger than X.  More
         * precisely, a log file named log.(X-a) may contain transactions newer than snapshot.X if
         * there are no other log files with starting zxid in the interval (X-a, X].  Assuming the
         * latter condition is true, log.(X-a) must be retained to ensure that snapshot.X is
         * recoverable.  In fact, this log file may very well extend beyond snapshot.X to newer
         * snapshot files if these newer snapshots were not accompanied by log rollover (possible in
         * the learner state machine at the time of this writing).  We can make more precise
         * determination of whether log.(leastZxidToBeRetain-a) for the smallest 'a' is actually
         * needed or not (e.g. not needed if there's a log file named log.(leastZxidToBeRetain+1)),
         * but the complexity quickly adds up with gains only in uncommon scenarios.  It's safe and
         * simple to just preserve log.(leastZxidToBeRetain-a) for the smallest 'a' to ensure
         * recoverability of all snapshots being retained.  We determine that log file here by
         * calling txnLog.getSnapshotLogs().
         */
        final Set<File> retainedTxnLogs = new HashSet<>();
        retainedTxnLogs.addAll(Arrays.asList(txnLog.getSnapshotLogs(leastZxidToBeRetain)));

        /**
         * Finds all candidates for deletion, which are files with a zxid in their name that is less
         * than leastZxidToBeRetain.  There's an exception to this rule, as noted above.
         */
        class MyFileFilter implements FileFilter {

            private final String prefix;
            MyFileFilter(String prefix) {
                this.prefix = prefix;
            }
            public boolean accept(File f) {
                if (!f.getName().startsWith(prefix + ""."")) {
                    return false;
                }
                if (retainedTxnLogs.contains(f)) {
                    return false;
                }
                long fZxid = Util.getZxidFromName(f.getName(), prefix);
                return fZxid < leastZxidToBeRetain;
            }

        }
        // add all non-excluded log files
        File[] logs = txnLog.getDataLogDir().listFiles(new MyFileFilter(PREFIX_LOG));
        List<File> files = new ArrayList<>();
        if (logs != null) {
            files.addAll(Arrays.asList(logs));
        }

        // add all non-excluded snapshot files to the deletion list
        File[] snapshots = txnLog.getSnapDir().listFiles(new MyFileFilter(PREFIX_SNAPSHOT));
        if (snapshots != null) {
            files.addAll(Arrays.asList(snapshots));
        }

        // remove the old files
        for (File f : files) {
            final String msg = String.format(
                ""Removing file: %s\t%s"",
                DateFormat.getDateTimeInstance().format(f.lastModified()),
                f.getPath());

            LOG.info(msg);
            System.out.println(msg);

            if (!f.delete()) {
                System.err.println(""Failed to remove "" + f.getPath());
            }
        }

    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog.MyFileFilter,accept,boolean accept(File),"[125, 134]","{'A583': [(125, 126), (128, 128), (133, 133)], 'A590': [(134, 134)], 'A736': [(129, 131)], 'A593': [(127, 127), (132, 132)]}","{'A583': 0.4, 'A590': 0.1, 'A736': 0.3, 'A593': 0.2}",A583,,"            public boolean accept(File f) {
                if (!f.getName().startsWith(prefix + ""."")) {
                    return false;
                }
                if (retainedTxnLogs.contains(f)) {
                    return false;
                }
                long fZxid = Util.getZxidFromName(f.getName(), prefix);
                return fZxid < leastZxidToBeRetain;
            }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,main,void main(String[]),"[173, 193]","{'A591': [(173, 173), (191, 193)], 'A616': [(174, 190)]}","{'A591': 0.19047619047619047, 'A616': 0.8095238095238095}",A616,,"    public static void main(String[] args) throws IOException {
        if (args.length < 3 || args.length > 4) {
            printUsageThenExit();
        }
        File dataDir = validateAndGetFile(args[0]);
        File snapDir = dataDir;
        int num = -1;
        String countOption = """";
        if (args.length == 3) {
            countOption = args[1];
            num = validateAndGetCount(args[2]);
        } else {
            snapDir = validateAndGetFile(args[1]);
            countOption = args[2];
            num = validateAndGetCount(args[3]);
        }
        if (!""-n"".equals(countOption)) {
            printUsageThenExit();
        }
        purge(dataDir, snapDir, num);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,validateAndGetFile,File validateAndGetFile(String),"[201, 208]","{'A583': [(204, 204)], 'A616': [(201, 203), (205, 208)]}","{'A583': 0.125, 'A616': 0.875}",A616,,"    private static File validateAndGetFile(String path) {
        File file = new File(path);
        if (!file.exists()) {
            System.err.println(""Path '"" + file.getAbsolutePath() + ""' does not exist. "");
            printUsageThenExit();
        }
        return file;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,validateAndGetCount,int validateAndGetCount(String),"[217, 230]","{'A583': [(226, 226)], 'A616': [(217, 225), (227, 230)]}","{'A583': 0.07142857142857142, 'A616': 0.9285714285714286}",A616,,"    private static int validateAndGetCount(String number) {
        int result = 0;
        try {
            result = Integer.parseInt(number);
            if (result < 3) {
                System.err.println(COUNT_ERR_MSG);
                printUsageThenExit();
            }
        } catch (NumberFormatException e) {
            System.err.println(""'"" + number + ""' can not be parsed to integer."");
            printUsageThenExit();
        }
        return result;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/PurgeTxnLog.java,PurgeTxnLog,printUsageThenExit,void printUsageThenExit(),"[232, 235]","{'A584': [(234, 234)], 'A616': [(232, 233), (235, 235)]}","{'A584': 0.25, 'A616': 0.75}",A616,,"    private static void printUsageThenExit() {
        printUsage();
        ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn.DisconnectReason,toDisconnectReasonString,String toDisconnectReasonString(),"[109, 111]","{'A604': [(109, 111)]}",{'A604': 1.0},A604,,"        public String toDisconnectReasonString() {
            return disconnectReason;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,incrOutstandingAndCheckThrottle,void incrOutstandingAndCheckThrottle(RequestHeader),"[136, 143]","{'A612': [(136, 143)]}",{'A612': 1.0},A612,,"    public void incrOutstandingAndCheckThrottle(RequestHeader h) {
        if (h.getXid() <= 0) {
            return;
        }
        if (zkServer.shouldThrottle(outstandingCount.incrementAndGet())) {
            disableRecv(false);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,decrOutstandingAndCheckThrottle,void decrOutstandingAndCheckThrottle(ReplyHeader),"[146, 153]","{'A612': [(146, 153)]}",{'A612': 1.0},A612,,"    public void decrOutstandingAndCheckThrottle(ReplyHeader h) {
        if (h.getXid() <= 0) {
            return;
        }
        if (!zkServer.shouldThrottle(outstandingCount.decrementAndGet())) {
            enableRecv();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,sendResponse,"int sendResponse(ReplyHeader,Record,String)","[189, 191]","{'A647': [(191, 191)], 'A675': [(189, 190)]}","{'A647': 0.3333333333333333, 'A675': 0.6666666666666666}",A675,,"    public int sendResponse(ReplyHeader h, Record r, String tag) throws IOException {
        return sendResponse(h, r, tag, null, null, -1);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,serialize,"ByteBuffer[] serialize(ReplyHeader,Record,String,Stat,int)","[193, 252]","{'A583': [(193, 194), (216, 216), (220, 220), (224, 224), (231, 231)], 'A647': [(195, 196), (217, 219), (221, 223), (225, 225), (227, 227), (229, 230), (234, 251)], 'A604': [(197, 215), (226, 226), (228, 228)], 'A613': [(232, 233), (252, 252)]}","{'A583': 0.1, 'A647': 0.5, 'A604': 0.35, 'A613': 0.05}",A647,,"    protected ByteBuffer[] serialize(ReplyHeader h, Record r, String cacheKey, Stat stat, int opCode) throws IOException {
        byte[] header = RequestRecord.fromRecord(h).readBytes();
        byte[] data = null;
        if (r != null) {
            ResponseCache cache = null;
            Counter cacheHit = null, cacheMiss = null;
            switch (opCode) {
                case OpCode.getData : {
                    cache = zkServer.getReadResponseCache();
                    cacheHit = ServerMetrics.getMetrics().RESPONSE_PACKET_CACHE_HITS;
                    cacheMiss = ServerMetrics.getMetrics().RESPONSE_PACKET_CACHE_MISSING;
                    break;
                }
                case OpCode.getChildren2 : {
                    cache = zkServer.getGetChildrenResponseCache();
                    cacheHit = ServerMetrics.getMetrics().RESPONSE_PACKET_GET_CHILDREN_CACHE_HITS;
                    cacheMiss = ServerMetrics.getMetrics().RESPONSE_PACKET_GET_CHILDREN_CACHE_MISSING;
                    break;
                }
                default:
                    // op codes where response cache is not supported.
            }

            if (cache != null && stat != null && cacheKey != null && !cacheKey.endsWith(Quotas.statNode)) {
                // Use cache to get serialized data.
                //
                // NB: Tag is ignored both during cache lookup and serialization,
                // since it is not used in read responses, which are being cached.
                data = cache.get(cacheKey, stat);
                if (data == null) {
                    // Cache miss, serialize the response and put it in cache.
                    data = RequestRecord.fromRecord(r).readBytes();
                    cache.put(cacheKey, data, stat);
                    cacheMiss.add(1);
                } else {
                    cacheHit.add(1);
                }
            } else {
                data = RequestRecord.fromRecord(r).readBytes();
            }
        }
        int dataLength = data == null ? 0 : data.length;
        int packetLength = header.length + dataLength;
        ServerStats serverStats = serverStats();
        if (serverStats != null) {
            serverStats.updateClientResponseSize(packetLength);
        }
        ByteBuffer lengthBuffer = ByteBuffer.allocate(4).putInt(packetLength);
        lengthBuffer.rewind();

        int bufferLen = data != null ? 3 : 2;
        ByteBuffer[] buffers = new ByteBuffer[bufferLen];

        buffers[0] = lengthBuffer;
        buffers[1] = ByteBuffer.wrap(header);
        if (data != null) {
            buffers[2] = ByteBuffer.wrap(data);
        }
        return buffers;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,process,void process(WatchedEvent),"[257, 259]","{'A613': [(257, 259)]}",{'A613': 1.0},A613,,"    public void process(WatchedEvent event) {
        process(event, null);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getAuthInfo,List<Id> getAuthInfo(),"[268, 270]","{'A591': [(268, 268), (270, 270)], 'A636': [(269, 269)]}","{'A591': 0.6666666666666666, 'A636': 0.3333333333333333}",A591,,"    public List<Id> getAuthInfo() {
        return Collections.unmodifiableList(new ArrayList<>(authInfo));
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,addAuthInfo,void addAuthInfo(Id),"[272, 274]","{'A591': [(272, 272), (274, 274)], 'A636': [(273, 273)]}","{'A591': 0.6666666666666666, 'A636': 0.3333333333333333}",A591,,"    public void addAuthInfo(Id id) {
        authInfo.add(id);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,removeAuthInfo,boolean removeAuthInfo(Id),"[276, 278]","{'A591': [(276, 278)]}",{'A591': 1.0},A591,,"    public boolean removeAuthInfo(Id id) {
        return authInfo.remove(id);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,disableRecv,void disableRecv(),"[284, 286]","{'A612': [(284, 286)]}",{'A612': 1.0},A612,,"    void disableRecv() {
        disableRecv(true);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn.CloseRequestException,getReason,DisconnectReason getReason(),"[303, 305]","{'A583': [(303, 305)]}",{'A583': 1.0},A583,,"        public DisconnectReason getReason() {
            return reason;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn.EndOfStreamException,toString,String toString(),"[319, 321]","{'A591': [(319, 321)]}",{'A591': 1.0},A591,,"        public String toString() {
            return ""EndOfStreamException: "" + getMessage();
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn.EndOfStreamException,getReason,DisconnectReason getReason(),"[322, 324]","{'A583': [(322, 324)]}",{'A583': 1.0},A583,,"        public DisconnectReason getReason() {
            return reason;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,isStale,boolean isStale(),"[328, 330]","{'A612': [(328, 330)]}",{'A612': 1.0},A612,,"    public boolean isStale() {
        return stale;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,setStale,void setStale(),"[332, 334]","{'A612': [(332, 334)]}",{'A612': 1.0},A612,,"    public void setStale() {
        stale = true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,isInvalid,boolean isInvalid(),"[336, 338]","{'A675': [(336, 338)]}",{'A675': 1.0},A675,,"    public boolean isInvalid() {
        return invalid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,setInvalid,void setInvalid(),"[340, 347]","{'A675': [(340, 347)]}",{'A675': 1.0},A675,,"    public void setInvalid() {
        if (!invalid) {
            if (!stale) {
                sendCloseSession();
            }
            invalid = true;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,packetReceived,void packetReceived(long),"[349, 356]","{'A591': [(350, 354), (356, 356)], 'A713': [(349, 349)], 'A584': [(355, 355)]}","{'A591': 0.75, 'A713': 0.125, 'A584': 0.125}",A591,,"    protected void packetReceived(long bytes) {
        incrPacketsReceived();
        ServerStats serverStats = serverStats();
        if (serverStats != null) {
            serverStats().incrementPacketsReceived();
        }
        ServerMetrics.getMetrics().BYTES_RECEIVED_COUNT.add(bytes);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,packetSent,void packetSent(),"[358, 364]","{'A591': [(358, 361), (363, 364)], 'A613': [(362, 362)]}","{'A591': 0.8571428571428571, 'A613': 0.14285714285714285}",A591,,"    protected void packetSent() {
        incrPacketsSent();
        ServerStats serverStats = serverStats();
        if (serverStats != null) {
            serverStats.incrementPacketsSent();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,resetStats,void resetStats(),"[385, 399]","{'A591': [(385, 385), (387, 399)], 'A604': [(386, 386)]}","{'A591': 0.9333333333333333, 'A604': 0.06666666666666667}",A591,,"    public synchronized void resetStats() {
        disconnectReason = DisconnectReason.RESET_COMMAND;
        packetsReceived.set(0);
        packetsSent.set(0);
        minLatency = Long.MAX_VALUE;
        maxLatency = 0;
        lastOp = ""NA"";
        lastCxid = -1;
        lastZxid = -1;
        lastResponseTime = 0;
        lastLatency = 0;

        count = 0;
        totalLatency = 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,incrPacketsReceived,long incrPacketsReceived(),"[401, 403]","{'A591': [(401, 403)]}",{'A591': 1.0},A591,,"    protected long incrPacketsReceived() {
        return packetsReceived.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,incrPacketsSent,long incrPacketsSent(),"[405, 407]","{'A591': [(405, 407)]}",{'A591': 1.0},A591,,"    protected long incrPacketsSent() {
        return packetsSent.incrementAndGet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,updateStatsForResponse,"void updateStatsForResponse(long,long,String,long,long)","[409, 428]","{'A583': [(409, 409)], 'A591': [(410, 428)]}","{'A583': 0.05, 'A591': 0.95}",A591,,"    protected synchronized void updateStatsForResponse(long cxid, long zxid, String op, long start, long end) {
        // don't overwrite with ""special"" xids - we're interested
        // in the clients last real operation
        if (cxid >= 0) {
            lastCxid = cxid;
        }
        lastZxid = zxid;
        lastOp = op;
        lastResponseTime = end;
        long elapsed = end - start;
        lastLatency = elapsed;
        if (elapsed < minLatency) {
            minLatency = elapsed;
        }
        if (elapsed > maxLatency) {
            maxLatency = elapsed;
        }
        count++;
        totalLatency += elapsed;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getEstablished,Date getEstablished(),"[430, 432]","{'A583': [(431, 431)], 'A591': [(430, 430), (432, 432)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,,"    public Date getEstablished() {
        return (Date) established.clone();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getOutstandingRequests,long getOutstandingRequests(),"[434, 436]","{'A612': [(434, 436)]}",{'A612': 1.0},A612,,"    public long getOutstandingRequests() {
        return outstandingCount.longValue();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getPacketsReceived,long getPacketsReceived(),"[438, 440]","{'A591': [(438, 440)]}",{'A591': 1.0},A591,,"    public long getPacketsReceived() {
        return packetsReceived.longValue();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getPacketsSent,long getPacketsSent(),"[442, 444]","{'A591': [(442, 444)]}",{'A591': 1.0},A591,,"    public long getPacketsSent() {
        return packetsSent.longValue();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getMinLatency,long getMinLatency(),"[446, 448]","{'A591': [(446, 448)]}",{'A591': 1.0},A591,,"    public synchronized long getMinLatency() {
        return minLatency == Long.MAX_VALUE ? 0 : minLatency;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getAvgLatency,long getAvgLatency(),"[450, 452]","{'A591': [(450, 452)]}",{'A591': 1.0},A591,,"    public synchronized long getAvgLatency() {
        return count == 0 ? 0 : totalLatency / count;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getMaxLatency,long getMaxLatency(),"[454, 456]","{'A591': [(454, 456)]}",{'A591': 1.0},A591,,"    public synchronized long getMaxLatency() {
        return maxLatency;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getLastOperation,String getLastOperation(),"[458, 460]","{'A591': [(458, 460)]}",{'A591': 1.0},A591,,"    public synchronized String getLastOperation() {
        return lastOp;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getLastCxid,long getLastCxid(),"[462, 464]","{'A591': [(462, 464)]}",{'A591': 1.0},A591,,"    public synchronized long getLastCxid() {
        return lastCxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getLastZxid,long getLastZxid(),"[466, 468]","{'A591': [(466, 468)]}",{'A591': 1.0},A591,,"    public synchronized long getLastZxid() {
        return lastZxid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getLastResponseTime,long getLastResponseTime(),"[470, 472]","{'A591': [(470, 472)]}",{'A591': 1.0},A591,,"    public synchronized long getLastResponseTime() {
        return lastResponseTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getLastLatency,long getLastLatency(),"[474, 476]","{'A591': [(474, 476)]}",{'A591': 1.0},A591,,"    public synchronized long getLastLatency() {
        return lastLatency;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,toString,String toString(),"[483, 491]","{'A591': [(483, 491)]}",{'A591': 1.0},A591,,"    @Override
    public String toString() {
        StringWriter sw = new StringWriter();
        PrintWriter pwriter = new PrintWriter(sw);
        dumpConnectionInfo(pwriter, false);
        pwriter.flush();
        pwriter.close();
        return sw.toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,dumpConnectionInfo,"void dumpConnectionInfo(PrintWriter,boolean)","[503, 547]","{'A583': [(503, 503)], 'A591': [(504, 545), (547, 547)], 'A596': [(546, 546)]}","{'A583': 0.022222222222222223, 'A591': 0.9555555555555556, 'A596': 0.022222222222222223}",A591,,"    public synchronized void dumpConnectionInfo(PrintWriter pwriter, boolean brief) {
        pwriter.print("" "");
        pwriter.print(getRemoteSocketAddress());
        pwriter.print(""["");
        int interestOps = getInterestOps();
        pwriter.print(interestOps == 0 ? ""0"" : Integer.toHexString(interestOps));
        pwriter.print(""](queued="");
        pwriter.print(getOutstandingRequests());
        pwriter.print("",recved="");
        pwriter.print(getPacketsReceived());
        pwriter.print("",sent="");
        pwriter.print(getPacketsSent());

        if (!brief) {
            long sessionId = getSessionId();
            if (sessionId != 0) {
                pwriter.print("",sid=0x"");
                pwriter.print(Long.toHexString(sessionId));
                pwriter.print("",lop="");
                pwriter.print(getLastOperation());
                pwriter.print("",est="");
                pwriter.print(getEstablished().getTime());
                pwriter.print("",to="");
                pwriter.print(getSessionTimeout());
                long lastCxid = getLastCxid();
                if (lastCxid >= 0) {
                    pwriter.print("",lcxid=0x"");
                    pwriter.print(Long.toHexString(lastCxid));
                }
                pwriter.print("",lzxid=0x"");
                pwriter.print(Long.toHexString(getLastZxid()));
                pwriter.print("",lresp="");
                pwriter.print(getLastResponseTime());
                pwriter.print("",llat="");
                pwriter.print(getLastLatency());
                pwriter.print("",minlat="");
                pwriter.print(getMinLatency());
                pwriter.print("",avglat="");
                pwriter.print(getAvgLatency());
                pwriter.print("",maxlat="");
                pwriter.print(getMaxLatency());
            }
        }
        pwriter.print("")"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getConnectionInfo,"Map<String, Object> getConnectionInfo(boolean)","[549, 570]","{'A591': [(549, 549), (551, 570)], 'A605': [(550, 550)]}","{'A591': 0.9545454545454546, 'A605': 0.045454545454545456}",A591,,"    public synchronized Map<String, Object> getConnectionInfo(boolean brief) {
        Map<String, Object> info = new LinkedHashMap<>();
        info.put(""remote_socket_address"", getRemoteSocketAddress());
        info.put(""interest_ops"", getInterestOps());
        info.put(""outstanding_requests"", getOutstandingRequests());
        info.put(""packets_received"", getPacketsReceived());
        info.put(""packets_sent"", getPacketsSent());
        if (!brief) {
            info.put(""session_id"", getSessionId());
            info.put(""last_operation"", getLastOperation());
            info.put(""established"", getEstablished());
            info.put(""session_timeout"", getSessionTimeout());
            info.put(""last_cxid"", getLastCxid());
            info.put(""last_zxid"", getLastZxid());
            info.put(""last_response_time"", getLastResponseTime());
            info.put(""last_latency"", getLastLatency());
            info.put(""min_latency"", getMinLatency());
            info.put(""avg_latency"", getAvgLatency());
            info.put(""max_latency"", getMaxLatency());
        }
        return info;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,cleanupWriterSocket,void cleanupWriterSocket(PrintWriter),"[579, 594]","{'A604': [(589, 589)], 'A616': [(579, 588), (590, 594)]}","{'A604': 0.0625, 'A616': 0.9375}",A616,,"    public void cleanupWriterSocket(PrintWriter pwriter) {
        try {
            if (pwriter != null) {
                pwriter.flush();
                pwriter.close();
            }
        } catch (Exception e) {
            LOG.info(""Error closing PrintWriter "", e);
        } finally {
            try {
                close(DisconnectReason.CLOSE_CONNECTION_COMMAND);
            } catch (Exception e) {
                LOG.error(""Error closing a command socket "", e);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,isZKServerRunning,boolean isZKServerRunning(),"[599, 601]","{'A675': [(599, 601)]}",{'A675': 1.0},A675,,"    public boolean isZKServerRunning() {
        return zkServer != null && zkServer.isRunning();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getHostAddress,String getHostAddress(),"[606, 616]","{'A592': [(606, 616)]}",{'A592': 1.0},A592,,"    public String getHostAddress() {
        InetSocketAddress remoteSocketAddress = getRemoteSocketAddress();
        if (remoteSocketAddress == null) {
            return """";
        }
        InetAddress address = remoteSocketAddress.getAddress();
        if (address == null) {
            return """";
        }
        return address.getHostAddress();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ServerCnxn.java,ServerCnxn,getSessionIdHex,String getSessionIdHex(),"[621, 623]","{'A592': [(621, 623)]}",{'A592': 1.0},A592,,"    public String getSessionIdHex() {
        return ""0x"" + Long.toHexString(getSessionId());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SimpleRequestRecord.java,SimpleRequestRecord,readRecord,T readRecord(Supplier<T>),"[40, 44]","{'A583': [(40, 44)]}",{'A583': 1.0},A583,,"    @SuppressWarnings(""unchecked"")
    @Override
    public <T extends Record> T readRecord(Supplier<T> constructor) {
        return (T) record;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SimpleRequestRecord.java,SimpleRequestRecord,readBytes,byte[] readBytes(),"[46, 62]","{'A583': [(46, 62)]}",{'A583': 1.0},A583,,"    @SuppressFBWarnings(""EI_EXPOSE_REP"")
    @Override
    public byte[] readBytes() {
        if (bytes != null) {
            return bytes;
        }

        try (ByteArrayOutputStream baos = new ByteArrayOutputStream(
                ZooKeeperServer.intBufferStartingSizeBytes)) {
            BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);
            record.serialize(boa, ""request"");
            bytes = baos.toByteArray();
            return bytes;
        } catch (IOException e) {
            throw new UncheckedIOException(e);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SimpleRequestRecord.java,SimpleRequestRecord,limit,int limit(),"[64, 68]","{'A583': [(64, 68)]}",{'A583': 1.0},A583,,"    @Override
    public int limit() {
        byte[] bytes = readBytes();
        return ByteBuffer.wrap(bytes).limit();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,shouldThrottleOp,"boolean shouldThrottleOp(Request,long)","[101, 105]","{'A675': [(101, 102), (105, 105)], 'A759': [(103, 104)]}","{'A675': 0.6, 'A759': 0.4}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    protected boolean shouldThrottleOp(Request request, long elapsedTime) {
        return request.isThrottlable()
                && ZooKeeperServer.getThrottledOpWaitTime() > 0
                && elapsedTime > ZooKeeperServer.getThrottledOpWaitTime();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,getMaxRequests,int getMaxRequests(),"[115, 117]","{'A675': [(115, 117)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public static int getMaxRequests() {
        return maxRequests;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,setMaxRequests,void setMaxRequests(int),"[119, 121]","{'A675': [(119, 121)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public static void setMaxRequests(int requests) {
        maxRequests = requests;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,getStallTime,int getStallTime(),"[123, 125]","{'A675': [(123, 125)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public static int getStallTime() {
        return stallTime;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,setStallTime,void setStallTime(int),"[127, 129]","{'A675': [(127, 129)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public static void setStallTime(int time) {
        stallTime = time;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,getDropStaleRequests,boolean getDropStaleRequests(),"[131, 133]","{'A675': [(131, 133)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public static boolean getDropStaleRequests() {
        return dropStaleRequests;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,setDropStaleRequests,void setDropStaleRequests(boolean),"[135, 137]","{'A675': [(135, 137)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public static void setDropStaleRequests(boolean drop) {
        dropStaleRequests = drop;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,run,void run(),"[139, 196]","{'A675': [(139, 196)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    @Override
    public void run() {
        try {
            while (true) {
                if (killed) {
                    break;
                }

                Request request = submittedRequests.take();
                if (Request.requestOfDeath == request) {
                    break;
                }

                if (request.mustDrop()) {
                    continue;
                }

                // Throttling is disabled when maxRequests = 0
                if (maxRequests > 0) {
                    while (!killed) {
                        if (dropStaleRequests && request.isStale()) {
                            // Note: this will close the connection
                            dropRequest(request);
                            ServerMetrics.getMetrics().STALE_REQUESTS_DROPPED.add(1);
                            request = null;
                            break;
                        }
                        if (zks.getInProcess() < maxRequests) {
                            break;
                        }
                        throttleSleep(stallTime);
                    }
                }

                if (killed) {
                    break;
                }

                // A dropped stale request will be null
                if (request != null) {
                    if (request.isStale()) {
                        ServerMetrics.getMetrics().STALE_REQUESTS.add(1);
                    }
                    final long elapsedTime = Time.currentElapsedTime() - request.requestThrottleQueueTime;
                    ServerMetrics.getMetrics().REQUEST_THROTTLE_QUEUE_TIME.add(elapsedTime);
                    if (shouldThrottleOp(request, elapsedTime)) {
                      request.setIsThrottled(true);
                      ServerMetrics.getMetrics().THROTTLED_OPS.add(1);
                    }
                    zks.submitRequestNow(request);
                }
            }
        } catch (InterruptedException e) {
            LOG.error(""Unexpected interruption"", e);
        }
        int dropped = drainQueue();
        LOG.info(""RequestThrottler shutdown. Dropped {} requests"", dropped);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,throttleSleep,void throttleSleep(int),"[200, 203]","{'A675': [(203, 203)], 'A625': [(200, 202)]}","{'A675': 0.25, 'A625': 0.75}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    synchronized void throttleSleep(int stallTime) throws InterruptedException {
        ServerMetrics.getMetrics().REQUEST_THROTTLE_WAIT_COUNT.add(1);
        this.wait(stallTime);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,throttleWake,void throttleWake(),"[205, 208]","{'A583': [(205, 205)], 'A675': [(206, 208)]}","{'A583': 0.25, 'A675': 0.75}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    @SuppressFBWarnings(value = ""NN_NAKED_NOTIFY"", justification = ""state change is in ZooKeeperServer.decInProgress() "")
    public synchronized void throttleWake() {
        this.notify();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,drainQueue,int drainQueue(),"[210, 223]","{'A675': [(210, 223)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    private int drainQueue() {
        // If the throttler shutdown gracefully, the queue will be empty.
        // However, if the shutdown time limit was reached and the throttler
        // was killed, we have no other option than to drop all remaining
        // requests on the floor.
        int dropped = 0;
        Request request;
        LOG.info(""Draining request throttler queue"");
        while ((request = submittedRequests.poll()) != null) {
            dropped += 1;
            dropRequest(request);
        }
        return dropped;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,dropRequest,void dropRequest(Request),"[225, 238]","{'A675': [(225, 238)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    private void dropRequest(Request request) {
        // Since we're dropping a request on the floor, we must mark the
        // connection as invalid to ensure any future requests from this
        // connection are also dropped in order to ensure ordering
        // semantics.
        ServerCnxn conn = request.getConnection();
        if (conn != null) {
            // Note: this will close the connection
            conn.setInvalid();
        }
        // Notify ZooKeeperServer that the request has finished so that it can
        // update any request accounting/throttling limits.
        zks.requestFinished(request);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,submitRequest,void submitRequest(Request),"[240, 248]","{'A675': [(240, 248)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public void submitRequest(Request request) {
        if (stopping) {
            LOG.debug(""Shutdown in progress. Request cannot be processed"");
            dropRequest(request);
        } else {
            request.requestThrottleQueueTime = Time.currentElapsedTime();
            submittedRequests.add(request);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,getInflight,int getInflight(),"[250, 252]","{'A675': [(250, 252)]}",{'A675': 1.0},A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public int getInflight() {
        return submittedRequests.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/RequestThrottler.java,RequestThrottler,shutdown,void shutdown(),"[254, 275]","{'A675': [(254, 272), (274, 275)], 'A584': [(273, 273)]}","{'A675': 0.9545454545454546, 'A584': 0.045454545454545456}",A675,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/RequestThrottlerTest.java,"    public void shutdown() {
        // Try to shutdown gracefully
        LOG.info(""Shutting down"");
        stopping = true;
        submittedRequests.add(Request.requestOfDeath);
        try {
            this.join(shutdownTimeout);
        } catch (InterruptedException e) {
            LOG.warn(""Interrupted while waiting for {} to finish"", this);
        }

        // Forcibly shutdown if necessary in order to ensure request
        // queue is drained.
        killed = true;
        try {
            this.join();
        } catch (InterruptedException e) {
            LOG.warn(""Interrupted while waiting for {} to finish"", this);
            //TODO apply ZOOKEEPER-575 and remove this line.
            ServiceUtils.requestSystemExit(ExitCode.UNEXPECTED_ERROR.getValue());
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AbstractSelectThread,wakeupSelector,void wakeupSelector(),"[112, 114]","{'A591': [(112, 114)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public void wakeupSelector() {
            selector.wakeup();
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AbstractSelectThread,closeSelector,void closeSelector(),"[121, 127]","{'A583': [(125, 125)], 'A591': [(121, 124), (126, 127)]}","{'A583': 0.14285714285714285, 'A591': 0.8571428571428571}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        protected void closeSelector() {
            try {
                selector.close();
            } catch (IOException e) {
                LOG.warn(""ignored exception during selector close."", e);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AbstractSelectThread,cleanupSelectionKey,void cleanupSelectionKey(SelectionKey),"[129, 137]","{'A591': [(129, 133), (135, 137)], 'A620': [(134, 134)]}","{'A591': 0.8888888888888888, 'A620': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        protected void cleanupSelectionKey(SelectionKey key) {
            if (key != null) {
                try {
                    key.cancel();
                } catch (Exception ex) {
                    LOG.debug(""ignoring exception during selectionkey cancel"", ex);
                }
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AbstractSelectThread,fastCloseSock,void fastCloseSock(SocketChannel),"[139, 149]","{'A583': [(145, 145)], 'A591': [(139, 144), (146, 149)]}","{'A583': 0.09090909090909091, 'A591': 0.9090909090909091}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        protected void fastCloseSock(SocketChannel sc) {
            if (sc != null) {
                try {
                    // Hard close immediately, discarding buffers
                    sc.socket().setSoLinger(true, 0);
                } catch (SocketException e) {
                    LOG.warn(""Unable to set socket linger to 0, socket close may stall in CLOSE_WAIT"", e);
                }
                NIOServerCnxn.closeSock(sc);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AcceptThread,run,void run(),"[177, 197]","{'A583': [(192, 192)], 'A591': [(177, 191), (196, 197)], 'A590': [(193, 194)], 'A589': [(195, 195)]}","{'A583': 0.047619047619047616, 'A591': 0.8095238095238095, 'A590': 0.09523809523809523, 'A589': 0.047619047619047616}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public void run() {
            try {
                while (!stopped && !acceptSocket.socket().isClosed()) {
                    try {
                        select();
                    } catch (RuntimeException e) {
                        LOG.warn(""Ignoring unexpected runtime exception"", e);
                    } catch (Exception e) {
                        LOG.warn(""Ignoring unexpected exception"", e);
                    }
                }
            } finally {
                closeSelector();
                // This will wake up the selector threads, and tell the
                // worker thread pool to begin shutdown.
                if (!reconfiguring) {
                    NIOServerCnxnFactory.this.stop();
                }
                LOG.info(""accept thread exited run method"");
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AcceptThread,setReconfiguring,void setReconfiguring(),"[199, 201]","{'A583': [(200, 200)], 'A590': [(199, 199), (201, 201)]}","{'A583': 0.3333333333333333, 'A590': 0.6666666666666666}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public void setReconfiguring() {
            reconfiguring = true;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AcceptThread,select,void select(),"[203, 230]","{'A583': [(207, 207), (224, 224)], 'A591': [(203, 206), (208, 223), (225, 230)]}","{'A583': 0.07142857142857142, 'A591': 0.9285714285714286}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private void select() {
            try {
                selector.select();

                Iterator<SelectionKey> selectedKeys = selector.selectedKeys().iterator();
                while (!stopped && selectedKeys.hasNext()) {
                    SelectionKey key = selectedKeys.next();
                    selectedKeys.remove();

                    if (!key.isValid()) {
                        continue;
                    }
                    if (key.isAcceptable()) {
                        if (!doAccept()) {
                            // If unable to pull a new connection off the accept
                            // queue, pause accepting to give us time to free
                            // up file descriptors and so the accept thread
                            // doesn't spin in a tight loop.
                            pauseAccept(10);
                        }
                    } else {
                        LOG.warn(""Unexpected ops in accept select {}"", key.readyOps());
                    }
                }
            } catch (IOException e) {
                LOG.warn(""Ignoring IOException while selecting"", e);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AcceptThread,pauseAccept,void pauseAccept(long),"[237, 246]","{'A591': [(237, 246)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private void pauseAccept(long millisecs) {
            acceptKey.interestOps(0);
            try {
                selector.select(millisecs);
            } catch (IOException e) {
                // ignore
            } finally {
                acceptKey.interestOps(SelectionKey.OP_ACCEPT);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.AcceptThread,doAccept,boolean doAccept(),"[256, 293]","{'A583': [(268, 269), (272, 272), (282, 283), (289, 289)], 'A591': [(256, 261), (265, 267), (270, 271), (274, 281), (284, 287), (290, 293)], 'A620': [(273, 273)], 'A670': [(262, 264)], 'A584': [(288, 288)]}","{'A583': 0.15789473684210525, 'A591': 0.7105263157894737, 'A620': 0.02631578947368421, 'A670': 0.07894736842105263, 'A584': 0.02631578947368421}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private boolean doAccept() {
            boolean accepted = false;
            SocketChannel sc = null;
            try {
                sc = acceptSocket.accept();
                accepted = true;
                if (limitTotalNumberOfCnxns()) {
                    throw new IOException(""Too many connections max allowed is "" + maxCnxns);
                }
                InetAddress ia = sc.socket().getInetAddress();
                int cnxncount = getClientCnxnCount(ia);

                if (maxClientCnxns > 0 && cnxncount >= maxClientCnxns) {
                    throw new IOException(""Too many connections from "" + ia + "" - max is "" + maxClientCnxns);
                }

                LOG.debug(""Accepted socket connection from {}"", sc.socket().getRemoteSocketAddress());

                sc.configureBlocking(false);

                // Round-robin assign this connection to a selector thread
                if (!selectorIterator.hasNext()) {
                    selectorIterator = selectorThreads.iterator();
                }
                SelectorThread selectorThread = selectorIterator.next();
                if (!selectorThread.addAcceptedConnection(sc)) {
                    throw new IOException(""Unable to add connection to selector queue""
                                          + (stopped ? "" (shutdown in progress)"" : """"));
                }
                acceptErrorLogger.flush();
            } catch (IOException e) {
                // accept, maxClientCnxns, configureBlocking
                ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
                acceptErrorLogger.rateLimitLog(""Error accepting new connection: "" + e.getMessage());
                fastCloseSock(sc);
            }
            return accepted;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,addAcceptedConnection,boolean addAcceptedConnection(SocketChannel),"[336, 342]","{'A591': [(336, 342)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public boolean addAcceptedConnection(SocketChannel accepted) {
            if (stopped || !acceptedQueue.offer(accepted)) {
                return false;
            }
            wakeupSelector();
            return true;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,addInterestOpsUpdateRequest,boolean addInterestOpsUpdateRequest(SelectionKey),"[350, 356]","{'A591': [(350, 356)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public boolean addInterestOpsUpdateRequest(SelectionKey sk) {
            if (stopped || !updateQueue.offer(sk)) {
                return false;
            }
            wakeupSelector();
            return true;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,run,void run(),"[364, 399]","{'A591': [(364, 382), (384, 396), (398, 399)], 'A589': [(397, 397)], 'A604': [(383, 383)]}","{'A591': 0.9444444444444444, 'A589': 0.027777777777777776, 'A604': 0.027777777777777776}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public void run() {
            try {
                while (!stopped) {
                    try {
                        select();
                        processAcceptedConnections();
                        processInterestOpsUpdateRequests();
                    } catch (RuntimeException e) {
                        LOG.warn(""Ignoring unexpected runtime exception"", e);
                    } catch (Exception e) {
                        LOG.warn(""Ignoring unexpected exception"", e);
                    }
                }

                // Close connections still pending on the selector. Any others
                // with in-flight work, let drain out of the work queue.
                for (SelectionKey key : selector.keys()) {
                    NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();
                    if (cnxn.isSelectable()) {
                        cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);
                    }
                    cleanupSelectionKey(key);
                }
                SocketChannel accepted;
                while ((accepted = acceptedQueue.poll()) != null) {
                    fastCloseSock(accepted);
                }
                updateQueue.clear();
            } finally {
                closeSelector();
                // This will wake up the accept thread and the other selector
                // threads, and tell the worker thread pool to begin shutdown.
                NIOServerCnxnFactory.this.stop();
                LOG.info(""selector thread exited run method"");
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,select,void select(),"[401, 426]","{'A583': [(409, 409), (420, 420)], 'A591': [(401, 405), (407, 408), (410, 419), (421, 426)], 'A605': [(406, 406)]}","{'A583': 0.07692307692307693, 'A591': 0.8846153846153846, 'A605': 0.038461538461538464}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private void select() {
            try {
                selector.select();

                Set<SelectionKey> selected = selector.selectedKeys();
                ArrayList<SelectionKey> selectedList = new ArrayList<>(selected);
                Collections.shuffle(selectedList);
                Iterator<SelectionKey> selectedKeys = selectedList.iterator();
                while (!stopped && selectedKeys.hasNext()) {
                    SelectionKey key = selectedKeys.next();
                    selected.remove(key);

                    if (!key.isValid()) {
                        cleanupSelectionKey(key);
                        continue;
                    }
                    if (key.isReadable() || key.isWritable()) {
                        handleIO(key);
                    } else {
                        LOG.warn(""Unexpected ops in select {}"", key.readyOps());
                    }
                }
            } catch (IOException e) {
                LOG.warn(""Ignoring IOException while selecting"", e);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,handleIO,void handleIO(SelectionKey),"[433, 443]","{'A591': [(433, 443)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private void handleIO(SelectionKey key) {
            IOWorkRequest workRequest = new IOWorkRequest(this, key);
            NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();

            // Stop selecting this key while processing on its
            // connection
            cnxn.disableSelectable();
            key.interestOps(0);
            touchCnxn(cnxn);
            workerPool.schedule(workRequest);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,processAcceptedConnections,void processAcceptedConnections(),"[449, 464]","{'A591': [(449, 464)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private void processAcceptedConnections() {
            SocketChannel accepted;
            while (!stopped && (accepted = acceptedQueue.poll()) != null) {
                SelectionKey key = null;
                try {
                    key = accepted.register(selector, SelectionKey.OP_READ);
                    NIOServerCnxn cnxn = createConnection(accepted, key, this);
                    key.attach(cnxn);
                    addCnxn(cnxn);
                } catch (IOException e) {
                    // register, createConnection
                    cleanupSelectionKey(key);
                    fastCloseSock(accepted);
                }
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.SelectorThread,processInterestOpsUpdateRequests,void processInterestOpsUpdateRequests(),"[470, 481]","{'A591': [(470, 481)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        private void processInterestOpsUpdateRequests() {
            SelectionKey key;
            while (!stopped && (key = updateQueue.poll()) != null) {
                if (!key.isValid()) {
                    cleanupSelectionKey(key);
                }
                NIOServerCnxn cnxn = (NIOServerCnxn) key.attachment();
                if (cnxn.isSelectable()) {
                    key.interestOps(cnxn.getInterestOps());
                }
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.IOWorkRequest,doWork,void doWork(),"[501, 530]","{'A591': [(501, 511), (513, 527), (529, 530)], 'A604': [(512, 512), (528, 528)]}","{'A591': 0.9333333333333333, 'A604': 0.06666666666666667}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public void doWork() throws InterruptedException {
            if (!key.isValid()) {
                selectorThread.cleanupSelectionKey(key);
                return;
            }

            if (key.isReadable() || key.isWritable()) {
                cnxn.doIO(key);

                // Check if we shutdown or doIO() closed this connection
                if (stopped) {
                    cnxn.close(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);
                    return;
                }
                if (!key.isValid()) {
                    selectorThread.cleanupSelectionKey(key);
                    return;
                }
                touchCnxn(cnxn);
            }

            // Mark this connection as once again ready for selection
            cnxn.enableSelectable();
            // Push an update request on the queue to resume selecting
            // on the current set of interest ops, which may have changed
            // as a result of the I/O operations we just performed.
            if (!selectorThread.addInterestOpsUpdateRequest(key)) {
                cnxn.close(ServerCnxn.DisconnectReason.CONNECTION_MODE_CHANGED);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.IOWorkRequest,cleanup,void cleanup(),"[532, 535]","{'A591': [(532, 533), (535, 535)], 'A604': [(534, 534)]}","{'A591': 0.75, 'A604': 0.25}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        @Override
        public void cleanup() {
            cnxn.close(ServerCnxn.DisconnectReason.CLEAN_UP);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory.ConnectionExpirerThread,run,void run(),"[549, 566]","{'A591': [(549, 557), (560, 563), (565, 566)], 'A589': [(564, 564)], 'A604': [(559, 559)], 'A675': [(558, 558)]}","{'A591': 0.8333333333333334, 'A589': 0.05555555555555555, 'A604': 0.05555555555555555, 'A675': 0.05555555555555555}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        public void run() {
            try {
                while (!stopped) {
                    long waitTime = cnxnExpiryQueue.getWaitTime();
                    if (waitTime > 0) {
                        Thread.sleep(waitTime);
                        continue;
                    }
                    for (NIOServerCnxn conn : cnxnExpiryQueue.poll()) {
                        ServerMetrics.getMetrics().SESSIONLESS_CONNECTIONS_EXPIRED.add(1);
                        conn.close(ServerCnxn.DisconnectReason.CONNECTION_EXPIRED);
                    }
                }

            } catch (InterruptedException e) {
                LOG.info(""ConnectionExpirerThread interrupted"");
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,initialValue,ByteBuffer initialValue(),"[579, 582]","{'A583': [(579, 582)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"        @Override
        protected ByteBuffer initialValue() {
            return ByteBuffer.allocateDirect(directBufferBytes);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getDirectBuffer,ByteBuffer getDirectBuffer(),"[585, 587]","{'A591': [(585, 587)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public static ByteBuffer getDirectBuffer() {
        return directBufferBytes > 0 ? directBuffer.get() : null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,configure,"void configure(InetSocketAddress,int,int,boolean)","[618, 672]","{'A583': [(627, 627), (639, 639), (644, 645), (647, 653), (660, 660), (662, 662), (664, 664)], 'A591': [(618, 618), (623, 625), (628, 631), (633, 638), (640, 643), (646, 646), (654, 656), (658, 659), (670, 672)], 'A670': [(626, 626)], 'A605': [(632, 632)], 'A689': [(619, 619), (657, 657), (661, 661), (663, 663), (665, 665)], 'A630': [(620, 622)], 'A691': [(666, 669)]}","{'A583': 0.2545454545454545, 'A591': 0.4909090909090909, 'A670': 0.01818181818181818, 'A605': 0.01818181818181818, 'A689': 0.09090909090909091, 'A630': 0.05454545454545454, 'A691': 0.07272727272727272}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public void configure(InetSocketAddress addr, int maxcc, int backlog, boolean secure) throws IOException {
        if (secure) {
            throw new UnsupportedOperationException(""SSL isn't supported in NIOServerCnxn"");
        }
        configureSaslLogin();

        maxClientCnxns = maxcc;
        initMaxCnxns();
        sessionlessCnxnTimeout = Integer.getInteger(ZOOKEEPER_NIO_SESSIONLESS_CNXN_TIMEOUT, 10000);
        // We also use the sessionlessCnxnTimeout as expiring interval for
        // cnxnExpiryQueue. These don't need to be the same, but the expiring
        // interval passed into the ExpiryQueue() constructor below should be
        // less than or equal to the timeout.
        cnxnExpiryQueue = new ExpiryQueue<>(sessionlessCnxnTimeout);
        expirerThread = new ConnectionExpirerThread();

        int numCores = Runtime.getRuntime().availableProcessors();
        // 32 cores sweet spot seems to be 4 selector threads
        numSelectorThreads = Integer.getInteger(
            ZOOKEEPER_NIO_NUM_SELECTOR_THREADS,
            Math.max((int) Math.sqrt((float) numCores / 2), 1));
        if (numSelectorThreads < 1) {
            throw new IOException(""numSelectorThreads must be at least 1"");
        }

        numWorkerThreads = Integer.getInteger(ZOOKEEPER_NIO_NUM_WORKER_THREADS, 2 * numCores);
        workerShutdownTimeoutMS = Long.getLong(ZOOKEEPER_NIO_SHUTDOWN_TIMEOUT, 5000);

        String logMsg = ""Configuring NIO connection handler with ""
            + (sessionlessCnxnTimeout / 1000) + ""s sessionless connection timeout, ""
            + numSelectorThreads + "" selector thread(s), ""
            + (numWorkerThreads > 0 ? numWorkerThreads : ""no"") + "" worker threads, and ""
            + (directBufferBytes == 0 ? ""gathered writes."" : ("""" + (directBufferBytes / 1024) + "" kB direct buffers.""));
        LOG.info(logMsg);
        for (int i = 0; i < numSelectorThreads; ++i) {
            selectorThreads.add(new SelectorThread(i));
        }

        listenBacklog = backlog;
        this.ss = ServerSocketChannel.open();
        ss.socket().setReuseAddress(true);
        LOG.info(""binding to port {}"", addr);
        if (listenBacklog == -1) {
            ss.socket().bind(addr);
        } else {
            ss.socket().bind(addr, listenBacklog);
        }
        if (addr.getPort() == 0) {
            // We're likely bound to a different port than was requested, so log that too
            LOG.info(""bound to port {}"", ss.getLocalAddress());
        }
        ss.configureBlocking(false);
        acceptThread = new AcceptThread(ss, addr, selectorThreads);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,tryClose,void tryClose(ServerSocketChannel),"[674, 680]","{'A702': [(674, 680)]}",{'A702': 1.0},A702,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    private void tryClose(ServerSocketChannel s) {
        try {
            s.close();
        } catch (IOException sse) {
            LOG.error(""Error while closing server socket."", sse);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,reconfigure,void reconfigure(InetSocketAddress),"[682, 706]","{'A583': [(684, 684), (692, 692), (697, 697), (702, 703)], 'A590': [(682, 682), (685, 685), (705, 706)], 'A702': [(683, 683), (686, 691), (693, 694), (700, 701), (704, 704)], 'A613': [(695, 696), (698, 699)]}","{'A583': 0.2, 'A590': 0.16, 'A702': 0.48, 'A613': 0.16}",A702,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public void reconfigure(InetSocketAddress addr) {
        ServerSocketChannel oldSS = ss;
        try {
            acceptThread.setReconfiguring();
            tryClose(oldSS);
            acceptThread.wakeupSelector();
            try {
                acceptThread.join();
            } catch (InterruptedException e) {
                LOG.error(""Error joining old acceptThread when reconfiguring client port."", e);
                Thread.currentThread().interrupt();
            }
            this.ss = ServerSocketChannel.open();
            ss.socket().setReuseAddress(true);
            LOG.info(""binding to port {}"", addr);
            ss.socket().bind(addr);
            ss.configureBlocking(false);
            acceptThread = new AcceptThread(ss, addr, selectorThreads);
            acceptThread.start();
        } catch (IOException e) {
            LOG.error(""Error reconfiguring client port to {}"", addr, e);
            tryClose(oldSS);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[709, 711]","{'A591': [(709, 711)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public int getMaxClientCnxnsPerHost() {
        return maxClientCnxns;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,setMaxClientCnxnsPerHost,void setMaxClientCnxnsPerHost(int),"[714, 716]","{'A591': [(714, 716)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public void setMaxClientCnxnsPerHost(int max) {
        maxClientCnxns = max;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getSocketListenBacklog,int getSocketListenBacklog(),"[719, 721]","{'A689': [(719, 721)]}",{'A689': 1.0},A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public int getSocketListenBacklog() {
        return listenBacklog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,start,void start(),"[723, 741]","{'A583': [(727, 727), (729, 729)], 'A591': [(723, 726), (728, 728), (730, 741)]}","{'A583': 0.10526315789473684, 'A591': 0.8947368421052632}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public void start() {
        stopped = false;
        if (workerPool == null) {
            workerPool = new WorkerService(""NIOWorker"", numWorkerThreads, false);
        }
        for (SelectorThread thread : selectorThreads) {
            if (thread.getState() == Thread.State.NEW) {
                thread.start();
            }
        }
        // ensure thread is started once and only once
        if (acceptThread.getState() == Thread.State.NEW) {
            acceptThread.start();
        }
        if (expirerThread.getState() == Thread.State.NEW) {
            expirerThread.start();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,startup,"void startup(ZooKeeperServer,boolean)","[743, 751]","{'A583': [(744, 744)], 'A591': [(743, 743), (745, 745), (751, 751)], 'A630': [(746, 750)]}","{'A583': 0.1111111111111111, 'A591': 0.3333333333333333, 'A630': 0.5555555555555556}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public void startup(ZooKeeperServer zks, boolean startServer) throws IOException, InterruptedException {
        start();
        setZooKeeperServer(zks);
        if (startServer) {
            zks.startdata();
            zks.startup();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getLocalAddress,InetSocketAddress getLocalAddress(),"[753, 756]","{'A583': [(754, 755)], 'A591': [(753, 753), (756, 756)]}","{'A583': 0.5, 'A591': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public InetSocketAddress getLocalAddress() {
        return (InetSocketAddress) ss.socket().getLocalSocketAddress();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getLocalPort,int getLocalPort(),"[758, 761]","{'A583': [(759, 759)], 'A591': [(758, 758), (760, 761)]}","{'A583': 0.25, 'A591': 0.75}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public int getLocalPort() {
        return ss.socket().getLocalPort();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,removeCnxn,boolean removeCnxn(NIOServerCnxn),"[767, 789]","{'A591': [(767, 773), (775, 789)], 'A612': [(774, 774)]}","{'A591': 0.9565217391304348, 'A612': 0.043478260869565216}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public boolean removeCnxn(NIOServerCnxn cnxn) {
        // If the connection is not in the master list it's already been closed
        if (!cnxns.remove(cnxn)) {
            return false;
        }
        cnxnExpiryQueue.remove(cnxn);

        removeCnxnFromSessionMap(cnxn);

        InetAddress addr = cnxn.getSocketAddress();
        if (addr != null) {
            Set<NIOServerCnxn> set = ipMap.get(addr);
            if (set != null) {
                set.remove(cnxn);
                // Note that we make no effort here to remove empty mappings
                // from ipMap.
            }
        }

        // unregister from JMX
        unregisterConnection(cnxn);
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,touchCnxn,void touchCnxn(NIOServerCnxn),"[795, 797]","{'A591': [(795, 797)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public void touchCnxn(NIOServerCnxn cnxn) {
        cnxnExpiryQueue.update(cnxn, cnxn.getSessionTimeout());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,addCnxn,void addCnxn(NIOServerCnxn),"[799, 824]","{'A591': [(800, 800), (804, 811), (813, 824)], 'A605': [(812, 812)], 'A772': [(799, 799), (801, 803)]}","{'A591': 0.8076923076923077, 'A605': 0.038461538461538464, 'A772': 0.15384615384615385}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    private void addCnxn(NIOServerCnxn cnxn) throws IOException {
        InetAddress addr = cnxn.getSocketAddress();
        if (addr == null) {
            throw new IOException(""Socket of "" + cnxn + "" has been closed"");
        }
        Set<NIOServerCnxn> set = ipMap.get(addr);
        if (set == null) {
            // in general we will see 1 connection from each
            // host, setting the initial cap to 2 allows us
            // to minimize mem usage in the common case
            // of 1 entry --  we need to set the initial cap
            // to 2 to avoid rehash when the first entry is added
            // Construct a ConcurrentHashSet using a ConcurrentHashMap
            set = Collections.newSetFromMap(new ConcurrentHashMap<>(2));
            // Put the new set in the map, but only if another thread
            // hasn't beaten us to it
            Set<NIOServerCnxn> existingSet = ipMap.putIfAbsent(addr, set);
            if (existingSet != null) {
                set = existingSet;
            }
        }
        set.add(cnxn);

        cnxns.add(cnxn);
        touchCnxn(cnxn);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,createConnection,"NIOServerCnxn createConnection(SocketChannel,SelectionKey,SelectorThread)","[826, 828]","{'A583': [(826, 826)], 'A591': [(827, 828)]}","{'A583': 0.3333333333333333, 'A591': 0.6666666666666666}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    protected NIOServerCnxn createConnection(SocketChannel sock, SelectionKey sk, SelectorThread selectorThread) throws IOException {
        return new NIOServerCnxn(zkServer, sock, sk, this, selectorThread);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getClientCnxnCount,int getClientCnxnCount(InetAddress),"[830, 836]","{'A583': [(832, 834)], 'A591': [(830, 831), (835, 836)]}","{'A583': 0.42857142857142855, 'A591': 0.5714285714285714}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    private int getClientCnxnCount(InetAddress cl) {
        Set<NIOServerCnxn> s = ipMap.get(cl);
        if (s == null) {
            return 0;
        }
        return s.size();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,closeAll,void closeAll(ServerCnxn.DisconnectReason),"[842, 857]","{'A583': [(851, 854)], 'A591': [(842, 843), (845, 848), (850, 850), (855, 857)], 'A604': [(844, 844), (849, 849)]}","{'A583': 0.25, 'A591': 0.625, 'A604': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    @SuppressWarnings(""unchecked"")
    public void closeAll(ServerCnxn.DisconnectReason reason) {
        // clear all the connections on which we are selecting
        for (ServerCnxn cnxn : cnxns) {
            try {
                // This will remove the cnxn from cnxns
                cnxn.close(reason);
            } catch (Exception e) {
                LOG.warn(
                    ""Ignoring exception closing cnxn session id 0x{}"",
                    Long.toHexString(cnxn.getSessionId()),
                    e);
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,stop,void stop(),"[859, 889]","{'A591': [(859, 869), (875, 879), (885, 889)], 'A613': [(870, 874), (880, 884)]}","{'A591': 0.6774193548387096, 'A613': 0.3225806451612903}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public void stop() {
        stopped = true;

        // Stop queuing connection attempts
        try {
            ss.close();
        } catch (IOException e) {
            LOG.warn(""Error closing listen socket"", e);
        }

        if (acceptThread != null) {
            if (acceptThread.isAlive()) {
                acceptThread.wakeupSelector();
            } else {
                acceptThread.closeSelector();
            }
        }
        if (expirerThread != null) {
            expirerThread.interrupt();
        }
        for (SelectorThread thread : selectorThreads) {
            if (thread.isAlive()) {
                thread.wakeupSelector();
            } else {
                thread.closeSelector();
            }
        }
        if (workerPool != null) {
            workerPool.stop();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,shutdown,void shutdown(),"[891, 914]","{'A591': [(891, 899), (901, 901), (905, 914)], 'A604': [(900, 900)], 'A596': [(902, 904)]}","{'A591': 0.8333333333333334, 'A604': 0.041666666666666664, 'A596': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public void shutdown() {
        try {
            // close listen socket and signal selector threads to stop
            stop();

            // wait for selector and worker threads to shutdown
            join();

            // close all open connections
            closeAll(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);

            if (login != null) {
                login.shutdown();
            }
        } catch (InterruptedException e) {
            LOG.warn(""Ignoring interrupted exception during shutdown"", e);
        } catch (Exception e) {
            LOG.warn(""Ignoring unexpected exception during shutdown"", e);
        }

        if (zkServer != null) {
            zkServer.shutdown();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,join,void join(),"[916, 927]","{'A591': [(916, 927)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public void join() throws InterruptedException {
        if (acceptThread != null) {
            acceptThread.join();
        }
        for (SelectorThread thread : selectorThreads) {
            thread.join();
        }
        if (workerPool != null) {
            workerPool.join(workerShutdownTimeoutMS);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getConnections,Iterable<ServerCnxn> getConnections(),"[929, 932]","{'A591': [(929, 932)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public Iterable<ServerCnxn> getConnections() {
        return cnxns;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,dumpConnections,void dumpConnections(PrintWriter),"[934, 937]","{'A591': [(934, 937)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    public void dumpConnections(PrintWriter pwriter) {
        pwriter.print(""Connections "");
        cnxnExpiryQueue.dump(pwriter);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,resetAllConnectionStats,void resetAllConnectionStats(),"[939, 945]","{'A583': [(942, 942)], 'A591': [(939, 941), (943, 945)]}","{'A583': 0.14285714285714285, 'A591': 0.8571428571428571}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public void resetAllConnectionStats() {
        // No need to synchronize since cnxns is backed by a ConcurrentHashMap
        for (ServerCnxn c : cnxns) {
            c.resetStats();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NIOServerCnxnFactory.java,NIOServerCnxnFactory,getAllConnectionInfo,"Iterable<Map<String, Object>> getAllConnectionInfo(boolean)","[947, 955]","{'A591': [(947, 948), (950, 955)], 'A605': [(949, 949)]}","{'A591': 0.8888888888888888, 'A605': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NIOServerCnxnFactoryTest.java,"    @Override
    public Iterable<Map<String, Object>> getAllConnectionInfo(boolean brief) {
        HashSet<Map<String, Object>> info = new HashSet<>();
        // No need to synchronize since cnxns is backed by a ConcurrentHashMap
        for (ServerCnxn c : cnxns) {
            info.add(c.getConnectionInfo(brief));
        }
        return info;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,usage,void usage(),"[101, 110]","{'A604': [(101, 110)]}",{'A604': 1.0},A604,,"  private void usage() {
    HelpFormatter help = new HelpFormatter();

    help.printHelp(
        120,
        ""java -cp <classPath> "" + SnapshotComparer.class.getName(),
        """",
        options,
        """");
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,main,void main(String[]),"[112, 115]","{'A604': [(112, 115)]}",{'A604': 1.0},A604,,"  public static void main(String[] args) throws Exception {
    SnapshotComparer app = new SnapshotComparer();
    app.compareSnapshots(args);
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,compareSnapshots,void compareSnapshots(String[]),"[117, 142]","{'A604': [(117, 119), (121, 142)], 'A603': [(120, 120)]}","{'A604': 0.9615384615384616, 'A603': 0.038461538461538464}",A604,,"  private void compareSnapshots(String[] args) throws Exception {
    CommandLine parsedOptions;
    try {
      parsedOptions = new DefaultParser().parse(options, args);
    } catch (ParseException e) {
      System.err.println(e.getMessage());
      usage();
      ServiceUtils.requestSystemExit(ExitCode.INVALID_INVOCATION.getValue());
      return;
    }

    File left = (File) parsedOptions.getParsedOptionValue(leftOption);
    File right = (File) parsedOptions.getParsedOptionValue(rightOption);
    int byteThreshold = Integer.parseInt((String) parsedOptions.getParsedOptionValue(byteThresholdOption));
    int nodeThreshold = Integer.parseInt((String) parsedOptions.getParsedOptionValue(nodeThresholdOption));
    boolean debug = parsedOptions.hasOption(debugOption);
    boolean interactive = parsedOptions.hasOption(interactiveOption);
    System.out.println(""Successfully parsed options!"");
    TreeInfo leftTree = new TreeInfo(left);
    TreeInfo rightTree = new TreeInfo(right);

    System.out.println(leftTree.toString());
    System.out.println(rightTree.toString());

    compareTrees(leftTree, rightTree, byteThreshold, nodeThreshold, debug, interactive);
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer.TreeInfo.TreeNode.AlphabeticComparator,compare,"int compare(TreeNode,TreeNode)","[155, 166]","{'A604': [(155, 166)]}",{'A604': 1.0},A604,,"        public int compare(TreeNode left, TreeNode right) {
          if (left == right) {
            return 0;
          }
          if (left == null) {
            return -1;
          }
          if (right == null) {
            return 1;
          }
          return left.label.compareTo(right.label);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer.TreeInfo.TreeNode,populateChildren,"void populateChildren(String,DataTree,TreeInfo)","[175, 177]","{'A604': [(175, 177)]}",{'A604': 1.0},A604,,"      void populateChildren(String path, DataTree dataTree, TreeInfo treeInfo) throws Exception {
        populateChildren(path, dataTree, treeInfo, 1);
      }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer.TreeInfo.TreeNode,populateChildren,"void populateChildren(String,DataTree,TreeInfo,int)","[179, 206]","{'A604': [(179, 206)]}",{'A604': 1.0},A604,,"      void populateChildren(String path, DataTree dataTree, TreeInfo treeInfo, int currentDepth) throws Exception {
        List<String> childLabels = null;
        childLabels = dataTree.getChildren(path, null, null);

        if (childLabels != null && !childLabels.isEmpty()) {
          for (String childName : childLabels){
            String childPath = path + ""/"" + childName;
            DataNode childNode = dataTree.getNode(childPath);
            long size;
            synchronized (childNode) {
              size = childNode.data == null ? 0 : childNode.data.length;
            }
            TreeNode childTreeNode = new TreeNode(childPath, size);
            childTreeNode.populateChildren(childPath, dataTree, treeInfo, currentDepth + 1);
            children.add(childTreeNode);
          }
        }
        descendantSize = 0;
        descendantCount = 0;
        for (TreeNode child : children) {
          descendantSize += child.descendantSize;
          descendantCount += child.descendantCount;
        }
        descendantSize += this.size;
        descendantCount += this.children.size();

        treeInfo.registerNode(this, currentDepth);
      }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer.TreeInfo,registerNode,"void registerNode(TreeNode,int)","[230, 238]","{'A604': [(230, 231), (233, 238)], 'A605': [(232, 232)]}","{'A604': 0.8888888888888888, 'A605': 0.1111111111111111}",A604,,"    void registerNode(TreeNode node, int depth) {
      while (depth > nodesAtDepths.size()) {
        nodesAtDepths.add(new ArrayList<>());
      }
      nodesAtDepths.get(depth - 1).add(node);
      nodesByName.put(node.label, node);

      this.count++;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer.TreeInfo,toString,String toString(),"[240, 249]","{'A604': [(240, 249)]}",{'A604': 1.0},A604,,"    public String toString() {
      StringBuilder builder = new StringBuilder();
      builder.append(String.format(""Node count: %d%n"", count));
      builder.append(String.format(""Total size: %d%n"", root.descendantSize));
      builder.append(String.format(""Max depth: %d%n"", nodesAtDepths.size()));
      for (int i = 0; i < nodesAtDepths.size(); i++) {
        builder.append(String.format(""Count of nodes at depth %d: %d%n"", i, nodesAtDepths.get(i).size()));
      }
      return builder.toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer.TreeInfo,MakeAlphabeticComparator,Comparator<TreeNode> MakeAlphabeticComparator(),"[251, 253]","{'A604': [(251, 253)]}",{'A604': 1.0},A604,,"    public static Comparator<TreeNode> MakeAlphabeticComparator() {
      return new TreeNode.AlphabeticComparator();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,getSnapshot,DataTree getSnapshot(File),"[261, 273]","{'A604': [(261, 262), (264, 267), (269, 273)], 'A605': [(263, 263)], 'A583': [(268, 268)]}","{'A604': 0.8461538461538461, 'A605': 0.07692307692307693, 'A583': 0.07692307692307693}",A604,,"  private static DataTree getSnapshot(File file) throws Exception {
    DataTree dataTree = new DataTree();
    Map<Long, Integer> sessions = new HashMap<>();
    CheckedInputStream snapIS = SnapStream.getInputStream(file);

    long beginning = System.nanoTime();
    InputArchive ia = BinaryInputArchive.getArchive(snapIS);
    FileSnap.deserialize(dataTree, sessions, ia);
    long end = System.nanoTime();
    System.out.println(String.format(""Deserialized snapshot in %s in %f seconds"", file.getName(),
        (((double) (end - beginning) / 1000000)) / 1000));
    return dataTree;
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,printThresholdInfo,"void printThresholdInfo(int,int)","[275, 277]","{'A604': [(275, 277)]}",{'A604': 1.0},A604,,"  private static void printThresholdInfo(int byteThreshold, int nodeThreshold) {
    System.out.println(String.format(""Printing analysis for nodes difference larger than %d bytes or node count difference larger than %d."", byteThreshold, nodeThreshold));
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,compareTrees,"void compareTrees(TreeInfo,TreeInfo,int,int,boolean,boolean)","[279, 328]","{'A604': [(279, 328)]}",{'A604': 1.0},A604,,"  private static void compareTrees(TreeInfo left, TreeInfo right, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    int maxDepth = Math.max(left.nodesAtDepths.size(), right.nodesAtDepths.size());

    if (!interactive) {
      printThresholdInfo(byteThreshold, nodeThreshold);
      for (int i = 0; i < maxDepth; i++) {
        System.out.println(String.format(""Analysis for depth %d"", i));
        compareLine(left, right, i, byteThreshold, nodeThreshold, debug, interactive);
      }
    } else {
      // interactive mode
      Scanner scanner = new Scanner(System.in);
      int currentDepth = 0;
      while (currentDepth < maxDepth) {
        System.out.println(String.format(""Current depth is %d"", currentDepth));
        System.out.println(""- Press enter to move to print current depth layer;\n- Type a number to jump to and print all nodes at a given depth;\n- Enter an ABSOLUTE path to print the immediate subtree of a node. Path must start with '/'."");
        String input = scanner.nextLine();
        printThresholdInfo(byteThreshold, nodeThreshold);
        if (input.isEmpty()) {
          // input is Enter
          System.out.println(String.format(""Analysis for depth %d"", currentDepth));
          compareLine(left, right, currentDepth, byteThreshold, nodeThreshold, debug, interactive);
          currentDepth++;
        } else {
          // input is a path
          if (input.startsWith(""/"")){
            System.out.println(String.format(""Analysis for node %s"", input));
            compareSubtree(left, right, input, byteThreshold, nodeThreshold, debug, interactive);
          } else {
            // input is a number
            try {
              int depth = Integer.parseInt(input);
              if (depth < 0 || depth >= maxDepth) {
                System.out.println(String.format(""Depth must be in range [%d, %d]"", 0, maxDepth - 1));
                continue;
              }
              currentDepth = depth;
              System.out.println(String.format(""Analysis for depth %d"", currentDepth));
              compareLine(left, right, currentDepth, byteThreshold, nodeThreshold, debug, interactive);
            } catch (NumberFormatException ex) {
              // input is invalid
              System.out.println(String.format(""Input %s is not valid. Depth must be in range [%d, %d]. Path must be an absolute path which starts with '/'."", input, 0, maxDepth - 1));
            }
          }
        }
        System.out.println("""");
      }
    }
    System.out.println(""All layers compared."");
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,compareSubtree,"void compareSubtree(TreeInfo,TreeInfo,String,int,int,boolean,boolean)","[330, 342]","{'A604': [(330, 342)]}",{'A604': 1.0},A604,,"  private static void compareSubtree(TreeInfo left, TreeInfo right, String path, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    TreeInfo.TreeNode leftRoot = left.nodesByName.get(path);
    TreeInfo.TreeNode rightRoot = right.nodesByName.get(path);

    List<TreeInfo.TreeNode> leftList = leftRoot == null ? new ArrayList<TreeInfo.TreeNode>() : leftRoot.children;
    List<TreeInfo.TreeNode> rightList = rightRoot == null ? new ArrayList<TreeInfo.TreeNode>() : rightRoot.children;

    if (leftRoot == null && rightRoot == null) {
      System.out.println(String.format(""Path %s is neither found in left tree nor right tree."", path));
    } else {
      compareNodes(leftList, rightList, byteThreshold, nodeThreshold, debug, interactive);
    }
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,compareLine,"void compareLine(TreeInfo,TreeInfo,int,int,int,boolean,boolean)","[354, 359]","{'A604': [(354, 359)]}",{'A604': 1.0},A604,,"  private static void compareLine(TreeInfo left, TreeInfo right, int depth, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    List<TreeInfo.TreeNode> leftList = depth >= left.nodesAtDepths.size() ? new ArrayList<>() : left.nodesAtDepths.get(depth);
    List<TreeInfo.TreeNode> rightList = depth >= right.nodesAtDepths.size() ? new ArrayList<>() : right.nodesAtDepths.get(depth);

    compareNodes(leftList, rightList, byteThreshold, nodeThreshold, debug, interactive);
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,compareNodes,"void compareNodes(List<TreeInfo.TreeNode>,List<TreeInfo.TreeNode>,int,int,boolean,boolean)","[361, 418]","{'A604': [(361, 418)]}",{'A604': 1.0},A604,,"  private static void compareNodes(List<TreeInfo.TreeNode> leftList, List<TreeInfo.TreeNode> rightList, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    Comparator<TreeInfo.TreeNode> alphabeticComparator = TreeInfo.MakeAlphabeticComparator();
    Collections.sort(leftList, alphabeticComparator);
    Collections.sort(rightList, alphabeticComparator);

    int leftIndex = 0;
    int rightIndex = 0;

    boolean leftRemaining = leftList.size() > leftIndex;
    boolean rightRemaining = rightList.size() > rightIndex;
    while (leftRemaining || rightRemaining) {
      TreeInfo.TreeNode leftNode = null;
      if (leftRemaining) {
        leftNode = leftList.get(leftIndex);
      }

      TreeInfo.TreeNode rightNode = null;
      if (rightRemaining) {
        rightNode = rightList.get(rightIndex);
      }

      if (leftNode != null && rightNode != null) {
        if (debug) {
          System.out.println(String.format(""Comparing %s to %s"", leftNode.label, rightNode.label));
        }
        int result = leftNode.label.compareTo(rightNode.label);
        if (result < 0) {
          if (debug) {
            System.out.println(""left is less"");
          }
          printLeftOnly(leftNode, byteThreshold, nodeThreshold, debug, interactive);
          leftIndex++;
        } else if (result > 0) {
          if (debug) {
            System.out.println(""right is less"");
          }
          printRightOnly(rightNode, byteThreshold, nodeThreshold, debug, interactive);
          rightIndex++;
        } else {
          if (debug) {
            System.out.println(""same"");
          }
          printBoth(leftNode, rightNode, byteThreshold, nodeThreshold, debug, interactive);
          leftIndex++;
          rightIndex++;
        }
      } else if (leftNode != null) {
        printLeftOnly(leftNode, byteThreshold, nodeThreshold, debug, interactive);
        leftIndex++;
      } else {
        printRightOnly(rightNode, byteThreshold, nodeThreshold, debug, interactive);
        rightIndex++;
      }

      leftRemaining = leftList.size() > leftIndex;
      rightRemaining = rightList.size() > rightIndex;
    }
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,printLeftOnly,"void printLeftOnly(TreeInfo.TreeNode,int,int,boolean,boolean)","[420, 429]","{'A604': [(420, 429)]}",{'A604': 1.0},A604,,"  static void printLeftOnly(TreeInfo.TreeNode node, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    if (node.descendantSize > byteThreshold || node.descendantCount > nodeThreshold) {
      StringBuilder builder = new StringBuilder();
      builder.append(String.format(""Node %s found only in left tree. "", node.label));
      printNode(node, builder);
      System.out.println(builder.toString());
    } else if (debug || interactive) {
      System.out.println(String.format(""Filtered left node %s of size %d"", node.label, node.descendantSize));
    }
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,printRightOnly,"void printRightOnly(TreeInfo.TreeNode,int,int,boolean,boolean)","[431, 440]","{'A604': [(431, 440)]}",{'A604': 1.0},A604,,"  static void printRightOnly(TreeInfo.TreeNode node, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    if (node.descendantSize > byteThreshold || node.descendantCount > nodeThreshold) {
      StringBuilder builder = new StringBuilder();
      builder.append(String.format(""Node %s found only in right tree. "", node.label));
      printNode(node, builder);
      System.out.println(builder.toString());
    } else if (debug || interactive) {
      System.out.println(String.format(""Filtered right node %s of size %d"", node.label, node.descendantSize));
    }
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,printBoth,"void printBoth(TreeInfo.TreeNode,TreeInfo.TreeNode,int,int,boolean,boolean)","[442, 453]","{'A604': [(442, 453)]}",{'A604': 1.0},A604,,"  static void printBoth(TreeInfo.TreeNode leftNode, TreeInfo.TreeNode rightNode, int byteThreshold, int nodeThreshold, boolean debug, boolean interactive) {
    if (Math.abs(rightNode.descendantSize - leftNode.descendantSize) > byteThreshold
        || Math.abs(rightNode.descendantCount - leftNode.descendantCount) > nodeThreshold) {
      System.out.println(String.format(
          ""Node %s found in both trees. Delta: %d bytes, %d descendants"",
          leftNode.label,
          rightNode.descendantSize - leftNode.descendantSize,
          rightNode.descendantCount - leftNode.descendantCount));
    } else if (debug || interactive) {
      System.out.println(String.format(""Filtered node %s of left size %d, right size %d"", leftNode.label, leftNode.descendantSize, rightNode.descendantSize));
    }
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SnapshotComparer.java,SnapshotComparer,printNode,"void printNode(TreeInfo.TreeNode,StringBuilder)","[455, 457]","{'A604': [(455, 457)]}",{'A604': 1.0},A604,,"  static void printNode(TreeInfo.TreeNode node, StringBuilder builder) {
    builder.append(String.format(""Descendant size: %d. Descendant count: %d"", node.descendantSize, node.descendantCount));
  }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl.SessionImpl,getSessionId,long getSessionId(),"[70, 72]","{'A583': [(70, 72)]}",{'A583': 1.0},A583,,"        public long getSessionId() {
            return sessionId;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl.SessionImpl,getTimeout,int getTimeout(),"[73, 75]","{'A583': [(73, 75)]}",{'A583': 1.0},A583,,"        public int getTimeout() {
            return timeout;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl.SessionImpl,isClosing,boolean isClosing(),"[76, 78]","{'A583': [(76, 78)]}",{'A583': 1.0},A583,,"        public boolean isClosing() {
            return isClosing;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl.SessionImpl,toString,String toString(),"[80, 82]","{'A591': [(80, 82)]}",{'A591': 1.0},A591,,"        public String toString() {
            return ""0x"" + Long.toHexString(sessionId);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,initializeNextSessionId,long initializeNextSessionId(long),"[98, 106]","{'A583': [(101, 101)], 'A591': [(99, 99)], 'A593': [(100, 100)], 'A688': [(105, 105)], 'A641': [(98, 98)], 'A636': [(102, 104)], 'A598': [(106, 106)]}","{'A583': 0.1111111111111111, 'A591': 0.1111111111111111, 'A593': 0.1111111111111111, 'A688': 0.1111111111111111, 'A641': 0.1111111111111111, 'A636': 0.3333333333333333, 'A598': 0.1111111111111111}",A636,,"    public static long initializeNextSessionId(long id) {
        long nextSid;
        nextSid = (Time.currentElapsedTime() << 24) >>> 8;
        nextSid = nextSid | (id << 56);
        if (nextSid == EphemeralType.CONTAINER_EPHEMERAL_OWNER) {
            ++nextSid;  // this is an unlikely edge case, but check it just in case
        }
        return nextSid;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,dumpSessions,void dumpSessions(PrintWriter),"[125, 128]","{'A591': [(125, 127)], 'A596': [(128, 128)]}","{'A591': 0.75, 'A596': 0.25}",A591,,"    public void dumpSessions(PrintWriter pwriter) {
        pwriter.print(""Session "");
        sessionExpiryQueue.dump(pwriter);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,getSessionExpiryMap,"Map<Long, Set<Long>> getSessionExpiryMap()","[133, 145]","{'A583': [(133, 133)], 'A591': [(134, 135), (137, 137), (139, 145)], 'A605': [(136, 136), (138, 138)]}","{'A583': 0.07692307692307693, 'A591': 0.7692307692307693, 'A605': 0.15384615384615385}",A591,,"    public synchronized Map<Long, Set<Long>> getSessionExpiryMap() {
        // Convert time -> sessions map to time -> session IDs map
        Map<Long, Set<SessionImpl>> expiryMap = sessionExpiryQueue.getExpiryMap();
        Map<Long, Set<Long>> sessionExpiryMap = new TreeMap<>();
        for (Entry<Long, Set<SessionImpl>> e : expiryMap.entrySet()) {
            Set<Long> ids = new HashSet<>();
            sessionExpiryMap.put(e.getKey(), ids);
            for (SessionImpl s : e.getValue()) {
                ids.add(s.sessionId);
            }
        }
        return sessionExpiryMap;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,toString,String toString(),"[147, 155]","{'A591': [(148, 148)], 'A590': [(155, 155)], 'A596': [(147, 147), (149, 154)]}","{'A591': 0.1111111111111111, 'A590': 0.1111111111111111, 'A596': 0.7777777777777778}",A596,,"    @Override
    public String toString() {
        StringWriter sw = new StringWriter();
        PrintWriter pwriter = new PrintWriter(sw);
        dumpSessions(pwriter);
        pwriter.flush();
        pwriter.close();
        return sw.toString();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,run,void run(),"[157, 177]","{'A591': [(158, 158), (161, 163), (166, 167), (169, 170)], 'A590': [(157, 157), (159, 160), (164, 165), (171, 173), (175, 177)], 'A593': [(174, 174)], 'A675': [(168, 168)]}","{'A591': 0.38095238095238093, 'A590': 0.5238095238095238, 'A593': 0.047619047619047616, 'A675': 0.047619047619047616}",A590,,"    @Override
    public void run() {
        try {
            while (running) {
                long waitTime = sessionExpiryQueue.getWaitTime();
                if (waitTime > 0) {
                    Thread.sleep(waitTime);
                    continue;
                }

                for (SessionImpl s : sessionExpiryQueue.poll()) {
                    ServerMetrics.getMetrics().STALE_SESSIONS_EXPIRED.add(1);
                    setSessionClosing(s.sessionId);
                    expirer.expire(s);
                }
            }
        } catch (InterruptedException e) {
            handleException(this.getName(), e);
        }
        LOG.info(""SessionTrackerImpl exited loop!"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,touchSession,"boolean touchSession(long,int)","[179, 194]","{'A583': [(179, 179)], 'A591': [(181, 183), (186, 192)], 'A590': [(180, 180), (184, 185), (193, 194)]}","{'A583': 0.0625, 'A591': 0.625, 'A590': 0.3125}",A591,,"    public synchronized boolean touchSession(long sessionId, int timeout) {
        SessionImpl s = sessionsById.get(sessionId);

        if (s == null) {
            logTraceTouchInvalidSession(sessionId, timeout);
            return false;
        }

        if (s.isClosing()) {
            logTraceTouchClosingSession(sessionId, timeout);
            return false;
        }

        updateSessionExpiry(s, timeout);
        return true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,updateSessionExpiry,"void updateSessionExpiry(SessionImpl,int)","[196, 199]","{'A591': [(196, 199)]}",{'A591': 1.0},A591,,"    private void updateSessionExpiry(SessionImpl s, int timeout) {
        logTraceTouchSession(s.sessionId, timeout, """");
        sessionExpiryQueue.update(s, timeout);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,logTraceTouchSession,"void logTraceTouchSession(long,int,String)","[201, 211]","{'A583': [(201, 207), (209, 210)], 'A591': [(208, 208), (211, 211)]}","{'A583': 0.8181818181818182, 'A591': 0.18181818181818182}",A583,,"    private void logTraceTouchSession(long sessionId, int timeout, String sessionStatus) {
        if (LOG.isTraceEnabled()) {
            String msg = MessageFormat.format(
                ""SessionTrackerImpl --- Touch {0}session: 0x{1} with timeout {2}"",
                sessionStatus,
                Long.toHexString(sessionId),
                Integer.toString(timeout));

            ZooTrace.logTraceMessage(LOG, ZooTrace.CLIENT_PING_TRACE_MASK, msg);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,logTraceTouchInvalidSession,"void logTraceTouchInvalidSession(long,int)","[213, 215]","{'A591': [(213, 215)]}",{'A591': 1.0},A591,,"    private void logTraceTouchInvalidSession(long sessionId, int timeout) {
        logTraceTouchSession(sessionId, timeout, ""invalid "");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,logTraceTouchClosingSession,"void logTraceTouchClosingSession(long,int)","[217, 219]","{'A591': [(217, 219)]}",{'A591': 1.0},A591,,"    private void logTraceTouchClosingSession(long sessionId, int timeout) {
        logTraceTouchSession(sessionId, timeout, ""closing "");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,getSessionTimeout,int getSessionTimeout(long),"[221, 223]","{'A648': [(221, 223)]}",{'A648': 1.0},A648,,"    public int getSessionTimeout(long sessionId) {
        return sessionsWithTimeout.get(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,setSessionClosing,void setSessionClosing(long),"[225, 235]","{'A583': [(225, 225), (227, 227), (229, 229)], 'A639': [(226, 226), (228, 228), (230, 235)]}","{'A583': 0.2727272727272727, 'A639': 0.7272727272727273}",A639,,"    public synchronized void setSessionClosing(long sessionId) {
        if (LOG.isTraceEnabled()) {
            LOG.trace(""Session closing: 0x{}"", Long.toHexString(sessionId));
        }

        SessionImpl s = sessionsById.get(sessionId);
        if (s == null) {
            return;
        }
        s.isClosing = true;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,removeSession,void removeSession(long),"[237, 250]","{'A583': [(237, 238), (242, 245)], 'A591': [(248, 248)], 'A590': [(239, 240), (247, 247), (249, 250)], 'A596': [(241, 241), (246, 246)]}","{'A583': 0.42857142857142855, 'A591': 0.07142857142857142, 'A590': 0.35714285714285715, 'A596': 0.14285714285714285}",A583,,"    public synchronized void removeSession(long sessionId) {
        LOG.debug(""Removing session 0x{}"", Long.toHexString(sessionId));
        SessionImpl s = sessionsById.remove(sessionId);
        sessionsWithTimeout.remove(sessionId);
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""SessionTrackerImpl --- Removing session 0x"" + Long.toHexString(sessionId));
        }
        if (s != null) {
            sessionExpiryQueue.remove(s);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,shutdown,void shutdown(),"[252, 259]","{'A583': [(257, 257)], 'A591': [(253, 254)], 'A590': [(252, 252), (255, 255), (259, 259)], 'A596': [(256, 256), (258, 258)]}","{'A583': 0.125, 'A591': 0.25, 'A590': 0.375, 'A596': 0.25}",A590,,"    public void shutdown() {
        LOG.info(""Shutting down"");

        running = false;
        if (LOG.isTraceEnabled()) {
            ZooTrace.logTraceMessage(LOG, ZooTrace.getTextTraceLevel(), ""Shutdown SessionTrackerImpl!"");
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,createSession,long createSession(int),"[261, 265]","{'A591': [(261, 262), (264, 264)], 'A590': [(265, 265)], 'A612': [(263, 263)]}","{'A591': 0.6, 'A590': 0.2, 'A612': 0.2}",A591,,"    public long createSession(int sessionTimeout) {
        long sessionId = nextSessionId.getAndIncrement();
        trackSession(sessionId, sessionTimeout);
        return sessionId;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,trackSession,"boolean trackSession(long,int)","[267, 298]","{'A583': [(272, 272), (284, 284), (289, 293)], 'A591': [(271, 271), (273, 282), (286, 286), (295, 296)], 'A590': [(294, 294)], 'A648': [(269, 270), (283, 283), (285, 285), (287, 288), (297, 298)], 'A612': [(267, 268)]}","{'A583': 0.21875, 'A591': 0.4375, 'A590': 0.03125, 'A648': 0.25, 'A612': 0.0625}",A591,,"    @Override
    public synchronized boolean trackSession(long id, int sessionTimeout) {
        boolean added = false;

        SessionImpl session = sessionsById.get(id);
        if (session == null) {
            session = new SessionImpl(id, sessionTimeout);
        }

        // findbugs2.0.3 complains about get after put.
        // long term strategy would be use computeIfAbsent after JDK 1.8
        SessionImpl existedSession = sessionsById.putIfAbsent(id, session);

        if (existedSession != null) {
            session = existedSession;
        } else {
            added = true;
            LOG.debug(""Adding session 0x{}"", Long.toHexString(id));
        }

        if (LOG.isTraceEnabled()) {
            String actionStr = added ? ""Adding"" : ""Existing"";
            ZooTrace.logTraceMessage(
                LOG,
                ZooTrace.SESSION_TRACE_MASK,
                ""SessionTrackerImpl --- "" + actionStr
                + "" session 0x"" + Long.toHexString(id) + "" "" + sessionTimeout);
        }

        updateSessionExpiry(session, sessionTimeout);
        return added;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,commitSession,"boolean commitSession(long,int)","[300, 302]","{'A612': [(300, 302)]}",{'A612': 1.0},A612,,"    public synchronized boolean commitSession(long id, int sessionTimeout) {
        return sessionsWithTimeout.put(id, sessionTimeout) == null;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,isTrackingSession,boolean isTrackingSession(long),"[304, 306]","{'A590': [(306, 306)], 'A648': [(304, 305)]}","{'A590': 0.3333333333333333, 'A648': 0.6666666666666666}",A648,,"    public boolean isTrackingSession(long sessionId) {
        return sessionsById.containsKey(sessionId);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,checkSession,"void checkSession(long,Object)","[308, 325]","{'A583': [(308, 309)], 'A590': [(310, 310), (317, 318), (325, 325)], 'A596': [(320, 324)], 'A648': [(311, 316), (319, 319)]}","{'A583': 0.1111111111111111, 'A590': 0.2222222222222222, 'A596': 0.2777777777777778, 'A648': 0.3888888888888889}",A648,,"    public synchronized void checkSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException, KeeperException.UnknownSessionException {
        LOG.debug(""Checking session 0x{}"", Long.toHexString(sessionId));
        SessionImpl session = sessionsById.get(sessionId);

        if (session == null) {
            throw new KeeperException.UnknownSessionException();
        }

        if (session.isClosing()) {
            throw new KeeperException.SessionExpiredException();
        }

        if (session.owner == null) {
            session.owner = owner;
        } else if (session.owner != owner) {
            throw new KeeperException.SessionMovedException();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,setOwner,"void setOwner(long,Object)","[327, 333]","{'A583': [(327, 327)], 'A596': [(328, 333)]}","{'A583': 0.14285714285714285, 'A596': 0.8571428571428571}",A596,,"    public synchronized void setOwner(long id, Object owner) throws SessionExpiredException {
        SessionImpl session = sessionsById.get(id);
        if (session == null || session.isClosing()) {
            throw new KeeperException.SessionExpiredException();
        }
        session.owner = owner;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,checkGlobalSession,"void checkGlobalSession(long,Object)","[335, 341]","{'A583': [(335, 335)], 'A648': [(336, 341)]}","{'A583': 0.14285714285714285, 'A648': 0.8571428571428571}",A648,,"    public void checkGlobalSession(long sessionId, Object owner) throws KeeperException.SessionExpiredException, KeeperException.SessionMovedException {
        try {
            checkSession(sessionId, owner);
        } catch (KeeperException.UnknownSessionException e) {
            throw new KeeperException.SessionExpiredException();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,getLocalSessionCount,long getLocalSessionCount(),"[343, 345]","{'A713': [(343, 345)]}",{'A713': 1.0},A713,,"    public long getLocalSessionCount() {
        return 0;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,isLocalSessionsEnabled,boolean isLocalSessionsEnabled(),"[347, 350]","{'A675': [(347, 350)]}",{'A675': 1.0},A675,,"    @Override
    public boolean isLocalSessionsEnabled() {
        return false;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,globalSessions,Set<Long> globalSessions(),"[352, 354]","{'A604': [(352, 354)]}",{'A604': 1.0},A604,,"    public Set<Long> globalSessions() {
        return sessionsById.keySet();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/SessionTrackerImpl.java,SessionTrackerImpl,localSessions,Set<Long> localSessions(),"[356, 358]","{'A604': [(356, 358)]}",{'A604': 1.0},A604,,"    public Set<Long> localSessions() {
        return Collections.emptySet();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherMode.java,WatcherMode,fromZooDef,WatcherMode fromZooDef(int),"[31, 39]","{'A636': [(31, 39)]}",{'A636': 1.0},A636,,"    public static WatcherMode fromZooDef(int mode) {
        switch (mode) {
            case ZooDefs.AddWatchModes.persistent:
                return PERSISTENT;
            case ZooDefs.AddWatchModes.persistentRecursive:
                return PERSISTENT_RECURSIVE;
        }
        throw new IllegalArgumentException(""Unsupported mode: "" + mode);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherMode.java,WatcherMode,isPersistent,boolean isPersistent(),"[49, 51]","{'A636': [(49, 51)]}",{'A636': 1.0},A636,,"    public boolean isPersistent() {
        return isPersistent;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherMode.java,WatcherMode,isRecursive,boolean isRecursive(),"[53, 55]","{'A636': [(53, 55)]}",{'A636': 1.0},A636,,"    public boolean isRecursive() {
        return isRecursive;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,forAll,PathParentIterator forAll(String),"[39, 41]","{'A636': [(39, 41)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    public static PathParentIterator forAll(String path) {
        return new PathParentIterator(path, Integer.MAX_VALUE);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,forPathOnly,PathParentIterator forPathOnly(String),"[49, 51]","{'A636': [(49, 51)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    public static PathParentIterator forPathOnly(String path) {
        return new PathParentIterator(path, 0);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,asIterable,Iterable<String> asIterable(),"[64, 66]","{'A636': [(64, 66)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    public Iterable<String> asIterable() {
        return () -> PathParentIterator.this;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,hasNext,boolean hasNext(),"[68, 71]","{'A636': [(68, 71)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    @Override
    public boolean hasNext() {
        return !path.isEmpty() && (level < maxLevel);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,atParentPath,boolean atParentPath(),"[79, 81]","{'A636': [(79, 81)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    public boolean atParentPath() {
        return level > 0;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,next,String next(),"[83, 100]","{'A636': [(83, 100)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    @Override
    public String next() {
        if (!hasNext()) {
            throw new NoSuchElementException();
        }

        String localPath = path;
        ++level;
        if (path.equals(""/"")) {
            path = """";
        } else {
            path = path.substring(0, path.lastIndexOf('/'));
            if (path.length() == 0) {
                path = ""/"";
            }
        }
        return localPath;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/PathParentIterator.java,PathParentIterator,remove,void remove(),"[102, 105]","{'A636': [(102, 105)]}",{'A636': 1.0},A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/PathParentIteratorTest.java,"    @Override
    public void remove() {
        throw new UnsupportedOperationException();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherOrBitSet.java,WatcherOrBitSet,contains,boolean contains(Watcher),"[38, 43]","{'A612': [(38, 43)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherOrBitSetTest.java,"    public boolean contains(Watcher watcher) {
        if (watchers == null) {
            return false;
        }
        return watchers.contains(watcher);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherOrBitSet.java,WatcherOrBitSet,contains,boolean contains(int),"[45, 50]","{'A612': [(45, 50)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherOrBitSetTest.java,"    public boolean contains(int watcherBit) {
        if (watcherBits == null) {
            return false;
        }
        return watcherBits.contains(watcherBit);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherOrBitSet.java,WatcherOrBitSet,size,int size(),"[52, 60]","{'A612': [(52, 60)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherOrBitSetTest.java,"    public int size() {
        if (watchers != null) {
            return watchers.size();
        }
        if (watcherBits != null) {
            return watcherBits.size();
        }
        return 0;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesSummary.java,WatchesSummary,getNumConnections,int getNumConnections(),"[65, 67]","{'A591': [(65, 67)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesSummaryTest.java,"    public int getNumConnections() {
        return numConnections;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesSummary.java,WatchesSummary,getNumPaths,int getNumPaths(),"[73, 75]","{'A591': [(73, 75)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesSummaryTest.java,"    public int getNumPaths() {
        return numPaths;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesSummary.java,WatchesSummary,getTotalWatches,int getTotalWatches(),"[81, 83]","{'A591': [(81, 83)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesSummaryTest.java,"    public int getTotalWatches() {
        return totalWatches;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesSummary.java,WatchesSummary,toMap,"Map<String, Object> toMap()","[91, 97]","{'A591': [(91, 91), (93, 97)], 'A605': [(92, 92)]}","{'A591': 0.8571428571428571, 'A605': 0.14285714285714285}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesSummaryTest.java,"    public Map<String, Object> toMap() {
        Map<String, Object> summary = new LinkedHashMap<>();
        summary.put(KEY_NUM_CONNECTIONS, numConnections);
        summary.put(KEY_NUM_PATHS, numPaths);
        summary.put(KEY_NUM_TOTAL_WATCHES, totalWatches);
        return summary;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesReport.java,WatchesReport,deepCopy,"Map<Long, Set<String>> deepCopy(Map<Long, Set<String>>)","[44, 50]","{'A591': [(44, 44), (46, 46), (48, 50)], 'A605': [(45, 45), (47, 47)]}","{'A591': 0.7142857142857143, 'A605': 0.2857142857142857}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesReportTest.java,"    private static Map<Long, Set<String>> deepCopy(Map<Long, Set<String>> m) {
        Map<Long, Set<String>> m2 = new HashMap<>();
        for (Map.Entry<Long, Set<String>> e : m.entrySet()) {
            m2.put(e.getKey(), new HashSet<>(e.getValue()));
        }
        return m2;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesReport.java,WatchesReport,hasPaths,boolean hasPaths(long),"[58, 60]","{'A591': [(58, 60)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesReportTest.java,"    public boolean hasPaths(long sessionId) {
        return id2paths.containsKey(sessionId);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesReport.java,WatchesReport,getPaths,Set<String> getPaths(long),"[69, 72]","{'A591': [(69, 72)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesReportTest.java,"    public Set<String> getPaths(long sessionId) {
        Set<String> s = id2paths.get(sessionId);
        return s != null ? Collections.unmodifiableSet(s) : null;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesReport.java,WatchesReport,toMap,"Map<Long, Set<String>> toMap()","[80, 82]","{'A591': [(80, 82)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesReportTest.java,"    public Map<Long, Set<String>> toMap() {
        return deepCopy(id2paths);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherCleaner.java,WatcherCleaner,addDeadWatcher,void addDeadWatcher(int),"[95, 124]","{'A583': [(99, 99), (103, 103), (109, 109)], 'A612': [(95, 98), (100, 101), (105, 105), (108, 108), (111, 115), (117, 124)], 'A675': [(102, 102), (106, 106)], 'A773': [(104, 104), (110, 110)], 'A584': [(107, 107), (116, 116)]}","{'A583': 0.1, 'A612': 0.7, 'A675': 0.06666666666666667, 'A773': 0.06666666666666667, 'A584': 0.06666666666666667}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherCleanerTest.java,"    public void addDeadWatcher(int watcherBit) {
        // Wait if there are too many watchers waiting to be closed,
        // this is will slow down the socket packet processing and
        // the adding watches in the ZK pipeline.
        while (maxInProcessingDeadWatchers > 0 && !stopped && totalDeadWatchers.get() >= maxInProcessingDeadWatchers) {
            try {
                RATE_LOGGER.rateLimitLog(""Waiting for dead watchers cleaning"");
                long startTime = Time.currentElapsedTime();
                synchronized (processingCompletedEvent) {
                    processingCompletedEvent.wait(100);
                }
                long latency = Time.currentElapsedTime() - startTime;
                ServerMetrics.getMetrics().ADD_DEAD_WATCHER_STALL_TIME.add(latency);
            } catch (InterruptedException e) {
                LOG.info(""Got interrupted while waiting for dead watches queue size"");
                break;
            }
        }
        synchronized (this) {
            if (deadWatchers.add(watcherBit)) {
                totalDeadWatchers.incrementAndGet();
                ServerMetrics.getMetrics().DEAD_WATCHERS_QUEUED.add(1);
                if (deadWatchers.size() >= watcherCleanThreshold) {
                    synchronized (cleanEvent) {
                        cleanEvent.notifyAll();
                    }
                }
            }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherCleaner.java,WatcherCleaner,run,void run(),"[126, 176]","{'A583': [(134, 134), (139, 139), (149, 152), (168, 168)], 'A612': [(126, 132), (136, 138), (140, 148), (153, 153), (155, 164), (167, 167), (170, 176)], 'A602': [(135, 135)], 'A773': [(133, 133), (169, 169)], 'A605': [(154, 154)], 'A584': [(165, 166)]}","{'A583': 0.13725490196078433, 'A612': 0.7450980392156863, 'A602': 0.0196078431372549, 'A773': 0.0392156862745098, 'A605': 0.0196078431372549, 'A584': 0.0392156862745098}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherCleanerTest.java,"    @Override
    public void run() {
        while (!stopped) {
            synchronized (cleanEvent) {
                try {
                    // add some jitter to avoid cleaning dead watchers at the
                    // same time in the quorum
                    if (!stopped && deadWatchers.size() < watcherCleanThreshold) {
                        int maxWaitMs = (watcherCleanIntervalInSeconds
                                         + ThreadLocalRandom.current().nextInt(watcherCleanIntervalInSeconds / 2 + 1)) * 1000;
                        cleanEvent.wait(maxWaitMs);
                    }
                } catch (InterruptedException e) {
                    LOG.info(""Received InterruptedException while waiting for cleanEvent"");
                    break;
                }
            }

            if (deadWatchers.isEmpty()) {
                continue;
            }

            synchronized (this) {
                // Clean the dead watchers need to go through all the current
                // watches, which is pretty heavy and may take a second if
                // there are millions of watches, that's why we're doing lazily
                // batch clean up in a separate thread with a snapshot of the
                // current dead watchers.
                final Set<Integer> snapshot = new HashSet<>(deadWatchers);
                deadWatchers.clear();
                int total = snapshot.size();
                LOG.info(""Processing {} dead watchers"", total);
                cleaners.schedule(new WorkRequest() {
                    @Override
                    public void doWork() throws Exception {
                        long startTime = Time.currentElapsedTime();
                        listener.processDeadWatchers(snapshot);
                        long latency = Time.currentElapsedTime() - startTime;
                        LOG.info(""Takes {} to process {} watches"", latency, total);
                        ServerMetrics.getMetrics().DEAD_WATCHERS_CLEANER_LATENCY.add(latency);
                        ServerMetrics.getMetrics().DEAD_WATCHERS_CLEARED.add(total);
                        totalDeadWatchers.addAndGet(-total);
                        synchronized (processingCompletedEvent) {
                            processingCompletedEvent.notifyAll();
                        }
                    }
                });
            }
        }
        LOG.info(""WatcherCleaner thread exited"");
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherCleaner.java,WatcherCleaner,doWork,void doWork(),"[159, 171]","{'A583': [(168, 168)], 'A612': [(159, 164), (167, 167), (170, 171)], 'A773': [(169, 169)], 'A584': [(165, 166)]}","{'A583': 0.07692307692307693, 'A612': 0.6923076923076923, 'A773': 0.07692307692307693, 'A584': 0.15384615384615385}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherCleanerTest.java,"                    @Override
                    public void doWork() throws Exception {
                        long startTime = Time.currentElapsedTime();
                        listener.processDeadWatchers(snapshot);
                        long latency = Time.currentElapsedTime() - startTime;
                        LOG.info(""Takes {} to process {} watches"", latency, total);
                        ServerMetrics.getMetrics().DEAD_WATCHERS_CLEANER_LATENCY.add(latency);
                        ServerMetrics.getMetrics().DEAD_WATCHERS_CLEARED.add(total);
                        totalDeadWatchers.addAndGet(-total);
                        synchronized (processingCompletedEvent) {
                            processingCompletedEvent.notifyAll();
                        }
                    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatcherCleaner.java,WatcherCleaner,shutdown,void shutdown(),"[178, 186]","{'A612': [(178, 181), (186, 186)], 'A773': [(182, 185)]}","{'A612': 0.5555555555555556, 'A773': 0.4444444444444444}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatcherCleanerTest.java,"    public void shutdown() {
        stopped = true;
        deadWatchers.clear();
        cleaners.stop();
        this.interrupt();
        if (LOG.isInfoEnabled()) {
            LOG.info(""WatcherCleaner thread shutdown is initiated"");
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchStats.java,WatchStats,modeToFlag,int modeToFlag(WatcherMode),"[49, 51]","{'A625': [(49, 51)]}",{'A625': 1.0},A625,,"    private static int modeToFlag(WatcherMode mode) {
        return 1 << mode.ordinal();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchStats.java,WatchStats,addMode,WatchStats addMode(WatcherMode),"[59, 62]","{'A625': [(59, 62)]}",{'A625': 1.0},A625,,"    public WatchStats addMode(WatcherMode mode) {
        int flags = this.flags | modeToFlag(mode);
        return WATCH_STATS[flags];
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchStats.java,WatchStats,removeMode,WatchStats removeMode(WatcherMode),"[70, 77]","{'A625': [(70, 77)]}",{'A625': 1.0},A625,,"    public WatchStats removeMode(WatcherMode mode) {
        int mask = ~modeToFlag(mode);
        int flags = this.flags & mask;
        if (flags == 0) {
            return NONE;
        }
        return WATCH_STATS[flags];
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchStats.java,WatchStats,hasMode,boolean hasMode(WatcherMode),"[85, 88]","{'A625': [(85, 88)]}",{'A625': 1.0},A625,,"    public boolean hasMode(WatcherMode mode) {
        int flags = modeToFlag(mode);
        return (this.flags & flags) != 0;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesPathReport.java,WatchesPathReport,deepCopy,"Map<String, Set<Long>> deepCopy(Map<String, Set<Long>>)","[44, 50]","{'A591': [(44, 44), (46, 46), (48, 50)], 'A605': [(45, 45), (47, 47)]}","{'A591': 0.7142857142857143, 'A605': 0.2857142857142857}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesPathReportTest.java,"    private static Map<String, Set<Long>> deepCopy(Map<String, Set<Long>> m) {
        Map<String, Set<Long>> m2 = new HashMap<>();
        for (Map.Entry<String, Set<Long>> e : m.entrySet()) {
            m2.put(e.getKey(), new HashSet<>(e.getValue()));
        }
        return m2;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesPathReport.java,WatchesPathReport,hasSessions,boolean hasSessions(String),"[58, 60]","{'A591': [(58, 60)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesPathReportTest.java,"    public boolean hasSessions(String path) {
        return path2Ids.containsKey(path);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesPathReport.java,WatchesPathReport,getSessions,Set<Long> getSessions(String),"[69, 72]","{'A591': [(69, 72)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesPathReportTest.java,"    public Set<Long> getSessions(String path) {
        Set<Long> s = path2Ids.get(path);
        return s != null ? Collections.unmodifiableSet(s) : null;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchesPathReport.java,WatchesPathReport,toMap,"Map<String, Set<Long>> toMap()","[80, 82]","{'A591': [(80, 82)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchesPathReportTest.java,"    public Map<String, Set<Long>> toMap() {
        return deepCopy(path2Ids);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,size,int size(),"[56, 63]","{'A583': [(57, 57), (59, 59)], 'A591': [(58, 58), (60, 62)], 'A612': [(56, 56)], 'A688': [(63, 63)]}","{'A583': 0.25, 'A591': 0.5, 'A612': 0.125, 'A688': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized int size() {
        int result = 0;
        for (Set<Watcher> watches : watchTable.values()) {
            result += watches.size();
        }
        return result;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,isDeadWatcher,boolean isDeadWatcher(Watcher),"[65, 67]","{'A612': [(66, 67)], 'A636': [(65, 65)]}","{'A612': 0.6666666666666666, 'A636': 0.3333333333333333}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    private boolean isDeadWatcher(Watcher watcher) {
        return watcher instanceof ServerCnxn && ((ServerCnxn) watcher).isStale();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,addWatch,"boolean addWatch(String,Watcher)","[69, 72]","{'A612': [(69, 69)], 'A636': [(70, 72)]}","{'A612': 0.25, 'A636': 0.75}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public boolean addWatch(String path, Watcher watcher) {
        return addWatch(path, watcher, WatcherMode.DEFAULT_WATCHER_MODE);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,addWatch,"boolean addWatch(String,Watcher,WatcherMode)","[74, 110]","{'A590': [(82, 82), (87, 90), (92, 92), (95, 96), (110, 110)], 'A612': [(76, 80)], 'A596': [(83, 85), (93, 93)], 'A625': [(91, 91), (94, 94), (98, 99), (101, 109)], 'A636': [(74, 75), (86, 86), (97, 97), (100, 100)], 'A603': [(81, 81)]}","{'A590': 0.24324324324324326, 'A612': 0.13513513513513514, 'A596': 0.10810810810810811, 'A625': 0.35135135135135137, 'A636': 0.13513513513513514, 'A603': 0.02702702702702703}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized boolean addWatch(String path, Watcher watcher, WatcherMode watcherMode) {
        if (isDeadWatcher(watcher)) {
            LOG.debug(""Ignoring addWatch with closed cnxn"");
            return false;
        }

        Set<Watcher> list = watchTable.get(path);
        if (list == null) {
            // don't waste memory if there are few watches on a node
            // rehash when the 4th entry is added, doubling size thereafter
            // seems like a good compromise
            list = new HashSet<>(4);
            watchTable.put(path, list);
        }
        list.add(watcher);

        Map<String, WatchStats> paths = watch2Paths.get(watcher);
        if (paths == null) {
            // cnxns typically have many watches, so use default cap here
            paths = new HashMap<>();
            watch2Paths.put(watcher, paths);
        }

        WatchStats stats = paths.getOrDefault(path, WatchStats.NONE);
        WatchStats newStats = stats.addMode(watcherMode);

        if (newStats != stats) {
            paths.put(path, newStats);
            if (watcherMode.isRecursive()) {
                ++recursiveWatchQty;
            }
            return true;
        }

        return false;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,removeWatcher,void removeWatcher(Watcher),"[112, 132]","{'A590': [(115, 117), (120, 121), (123, 125), (131, 132)], 'A612': [(112, 113), (122, 122)], 'A625': [(114, 114), (118, 118), (126, 130)], 'A603': [(119, 119)]}","{'A590': 0.47619047619047616, 'A612': 0.14285714285714285, 'A625': 0.3333333333333333, 'A603': 0.047619047619047616}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized void removeWatcher(Watcher watcher) {
        Map<String, WatchStats> paths = watch2Paths.remove(watcher);
        if (paths == null) {
            return;
        }
        for (String p : paths.keySet()) {
            Set<Watcher> list = watchTable.get(p);
            if (list != null) {
                list.remove(watcher);
                if (list.isEmpty()) {
                    watchTable.remove(p);
                }
            }
        }
        for (WatchStats stats : paths.values()) {
            if (stats.hasMode(WatcherMode.PERSISTENT_RECURSIVE)) {
                --recursiveWatchQty;
            }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,triggerWatch,"WatcherOrBitSet triggerWatch(String,EventType,long,List<ACL>)","[134, 137]","{'A590': [(137, 137)], 'A612': [(134, 134)], 'A613': [(135, 136)]}","{'A590': 0.25, 'A612': 0.25, 'A613': 0.5}",A613,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List<ACL> acl) {
        return triggerWatch(path, type, zxid, acl, null);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,triggerWatch,"WatcherOrBitSet triggerWatch(String,EventType,long,List<ACL>,WatcherOrBitSet)","[139, 217]","{'A590': [(143, 143), (174, 176), (184, 184), (186, 187), (193, 193), (217, 217)], 'A612': [(139, 139), (216, 216)], 'A596': [(149, 149)], 'A625': [(144, 144), (153, 159), (161, 162), (164, 166), (168, 169)], 'A636': [(142, 142), (145, 148), (150, 152), (160, 160), (163, 163), (167, 167), (170, 173), (177, 183), (196, 213)], 'A613': [(188, 192)], 'A675': [(194, 195), (214, 215)], 'A589': [(140, 140), (185, 185)], 'A634': [(141, 141)]}","{'A590': 0.11392405063291139, 'A612': 0.02531645569620253, 'A596': 0.012658227848101266, 'A625': 0.189873417721519, 'A636': 0.5063291139240507, 'A613': 0.06329113924050633, 'A675': 0.05063291139240506, 'A589': 0.02531645569620253, 'A634': 0.012658227848101266}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List<ACL> acl, WatcherOrBitSet suppress) {
        WatchedEvent e = new WatchedEvent(type, KeeperState.SyncConnected, path, zxid);
        Set<Watcher> watchers = new HashSet<>();
        synchronized (this) {
            PathParentIterator pathParentIterator = getPathParentIterator(path);
            for (String localPath : pathParentIterator.asIterable()) {
                Set<Watcher> thisWatchers = watchTable.get(localPath);
                if (thisWatchers == null || thisWatchers.isEmpty()) {
                    continue;
                }
                Iterator<Watcher> iterator = thisWatchers.iterator();
                while (iterator.hasNext()) {
                    Watcher watcher = iterator.next();
                    Map<String, WatchStats> paths = watch2Paths.getOrDefault(watcher, Collections.emptyMap());
                    WatchStats stats = paths.get(localPath);
                    if (stats == null) {
                        LOG.warn(""inconsistent watch table for watcher {}, {} not in path list"", watcher, localPath);
                        continue;
                    }
                    if (!pathParentIterator.atParentPath()) {
                        watchers.add(watcher);
                        WatchStats newStats = stats.removeMode(WatcherMode.STANDARD);
                        if (newStats == WatchStats.NONE) {
                            iterator.remove();
                            paths.remove(localPath);
                        } else if (newStats != stats) {
                            paths.put(localPath, newStats);
                        }
                    } else if (stats.hasMode(WatcherMode.PERSISTENT_RECURSIVE)) {
                        watchers.add(watcher);
                    }
                }
                if (thisWatchers.isEmpty()) {
                    watchTable.remove(localPath);
                }
            }
        }
        if (watchers.isEmpty()) {
            if (LOG.isTraceEnabled()) {
                ZooTrace.logTraceMessage(LOG, ZooTrace.EVENT_DELIVERY_TRACE_MASK, ""No watchers for "" + path);
            }
            return null;
        }

        for (Watcher w : watchers) {
            if (suppress != null && suppress.contains(w)) {
                continue;
            }
            if (w instanceof ServerWatcher) {
                ((ServerWatcher) w).process(e, acl);
            } else {
                w.process(e);
            }
        }

        switch (type) {
            case NodeCreated:
                ServerMetrics.getMetrics().NODE_CREATED_WATCHER.add(watchers.size());
                break;

            case NodeDeleted:
                ServerMetrics.getMetrics().NODE_DELETED_WATCHER.add(watchers.size());
                break;

            case NodeDataChanged:
                ServerMetrics.getMetrics().NODE_CHANGED_WATCHER.add(watchers.size());
                break;

            case NodeChildrenChanged:
                ServerMetrics.getMetrics().NODE_CHILDREN_WATCHER.add(watchers.size());
                break;
            default:
                // Other types not logged.
                break;
        }

        return new WatcherOrBitSet(watchers);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,toString,String toString(),"[219, 232]","{'A583': [(223, 223)], 'A596': [(219, 222), (224, 225), (227, 232)], 'A625': [(226, 226)]}","{'A583': 0.07142857142857142, 'A596': 0.8571428571428571, 'A625': 0.07142857142857142}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized String toString() {
        StringBuilder sb = new StringBuilder();

        sb.append(watch2Paths.size()).append("" connections watching "").append(watchTable.size()).append("" paths\n"");

        int total = 0;
        for (Map<String, WatchStats> paths : watch2Paths.values()) {
            total += paths.size();
        }
        sb.append(""Total watches:"").append(total);

        return sb.toString();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,dumpWatches,"void dumpWatches(PrintWriter,boolean)","[234, 255]","{'A583': [(241, 241), (248, 248)], 'A612': [(234, 235)], 'A596': [(236, 236), (238, 240), (242, 245), (247, 247), (250, 255)], 'A625': [(246, 246), (249, 249)], 'A603': [(237, 237)]}","{'A583': 0.09090909090909091, 'A612': 0.09090909090909091, 'A596': 0.6818181818181818, 'A625': 0.09090909090909091, 'A603': 0.045454545454545456}",A596,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized void dumpWatches(PrintWriter pwriter, boolean byPath) {
        if (byPath) {
            for (Entry<String, Set<Watcher>> e : watchTable.entrySet()) {
                pwriter.println(e.getKey());
                for (Watcher w : e.getValue()) {
                    pwriter.print(""\t0x"");
                    pwriter.print(Long.toHexString(((ServerCnxn) w).getSessionId()));
                    pwriter.print(""\n"");
                }
            }
        } else {
            for (Entry<Watcher, Map<String, WatchStats>> e : watch2Paths.entrySet()) {
                pwriter.print(""0x"");
                pwriter.println(Long.toHexString(((ServerCnxn) e.getKey()).getSessionId()));
                for (String path : e.getValue().keySet()) {
                    pwriter.print(""\t"");
                    pwriter.println(path);
                }
            }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,containsWatcher,"boolean containsWatcher(String,Watcher)","[257, 260]","{'A612': [(257, 258)], 'A625': [(259, 259)], 'A639': [(260, 260)]}","{'A612': 0.5, 'A625': 0.25, 'A639': 0.25}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized boolean containsWatcher(String path, Watcher watcher) {
        return containsWatcher(path, watcher, null);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,containsWatcher,"boolean containsWatcher(String,Watcher,WatcherMode)","[262, 270]","{'A591': [(267, 267)], 'A612': [(262, 262)], 'A625': [(263, 265), (268, 270)], 'A630': [(266, 266)]}","{'A591': 0.1111111111111111, 'A612': 0.1111111111111111, 'A625': 0.6666666666666666, 'A630': 0.1111111111111111}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized boolean containsWatcher(String path, Watcher watcher, WatcherMode watcherMode) {
        Map<String, WatchStats> paths = watch2Paths.get(watcher);
        if (paths == null) {
            return false;
        }
        WatchStats stats = paths.get(path);
        return stats != null && (watcherMode == null || stats.hasMode(watcherMode));
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,unwatch,"WatchStats unwatch(String,Watcher,Map<String, WatchStats>,Set<Watcher>)","[272, 285]","{'A625': [(272, 285)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    private WatchStats unwatch(String path, Watcher watcher, Map<String, WatchStats> paths, Set<Watcher> watchers) {
        WatchStats stats = paths.remove(path);
        if (stats == null) {
            return WatchStats.NONE;
        }
        if (paths.isEmpty()) {
            watch2Paths.remove(watcher);
        }
        watchers.remove(watcher);
        if (watchers.isEmpty()) {
            watchTable.remove(path);
        }
        return stats;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,removeWatcher,"boolean removeWatcher(String,Watcher,WatcherMode)","[287, 317]","{'A591': [(293, 293), (310, 310)], 'A625': [(287, 291), (295, 309), (312, 317)], 'A630': [(292, 292), (294, 294), (311, 311)]}","{'A591': 0.06451612903225806, 'A625': 0.8387096774193549, 'A630': 0.0967741935483871}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized boolean removeWatcher(String path, Watcher watcher, WatcherMode watcherMode) {
        Map<String, WatchStats> paths = watch2Paths.get(watcher);
        Set<Watcher> watchers = watchTable.get(path);
        if (paths == null || watchers == null) {
            return false;
        }

        WatchStats oldStats;
        WatchStats newStats;
        if (watcherMode != null) {
            oldStats = paths.getOrDefault(path, WatchStats.NONE);
            newStats = oldStats.removeMode(watcherMode);
            if (newStats != WatchStats.NONE) {
                if (newStats != oldStats) {
                    paths.put(path, newStats);
                }
            } else if (oldStats != WatchStats.NONE) {
                unwatch(path, watcher, paths, watchers);
            }
        } else {
            oldStats = unwatch(path, watcher, paths, watchers);
            newStats = WatchStats.NONE;
        }

        if (oldStats.hasMode(WatcherMode.PERSISTENT_RECURSIVE) && !newStats.hasMode(WatcherMode.PERSISTENT_RECURSIVE)) {
            --recursiveWatchQty;
        }

        return oldStats != newStats;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,removeWatcher,"boolean removeWatcher(String,Watcher)","[319, 322]","{'A591': [(322, 322)], 'A625': [(319, 321)]}","{'A591': 0.25, 'A625': 0.75}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized boolean removeWatcher(String path, Watcher watcher) {
        return removeWatcher(path, watcher, null);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,getWatch2Paths,"Map<Watcher, Map<String, WatchStats>> getWatch2Paths()","[325, 327]","{'A625': [(325, 327)]}",{'A625': 1.0},A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    Map<Watcher, Map<String, WatchStats>> getWatch2Paths() {
        return watch2Paths;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,getWatches,WatchesReport getWatches(),"[329, 338]","{'A591': [(333, 333), (335, 338)], 'A612': [(329, 330)], 'A625': [(332, 332), (334, 334)], 'A636': [(331, 331)]}","{'A591': 0.5, 'A612': 0.2, 'A625': 0.2, 'A636': 0.1}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized WatchesReport getWatches() {
        Map<Long, Set<String>> id2paths = new HashMap<>();
        for (Entry<Watcher, Map<String, WatchStats>> e : watch2Paths.entrySet()) {
            Long id = ((ServerCnxn) e.getKey()).getSessionId();
            Set<String> paths = new HashSet<>(e.getValue().keySet());
            id2paths.put(id, paths);
        }
        return new WatchesReport(id2paths);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,getWatchesByPath,WatchesPathReport getWatchesByPath(),"[340, 351]","{'A591': [(345, 351)], 'A612': [(340, 341)], 'A636': [(342, 342), (344, 344)], 'A603': [(343, 343)]}","{'A591': 0.5833333333333334, 'A612': 0.16666666666666666, 'A636': 0.16666666666666666, 'A603': 0.08333333333333333}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized WatchesPathReport getWatchesByPath() {
        Map<String, Set<Long>> path2ids = new HashMap<>();
        for (Entry<String, Set<Watcher>> e : watchTable.entrySet()) {
            Set<Long> ids = new HashSet<>(e.getValue().size());
            path2ids.put(e.getKey(), ids);
            for (Watcher watcher : e.getValue()) {
                ids.add(((ServerCnxn) watcher).getSessionId());
            }
        }
        return new WatchesPathReport(path2ids);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,getWatchesSummary,WatchesSummary getWatchesSummary(),"[353, 360]","{'A583': [(359, 359)], 'A591': [(355, 355), (357, 358), (360, 360)], 'A612': [(353, 354)], 'A625': [(356, 356)]}","{'A583': 0.125, 'A591': 0.5, 'A612': 0.25, 'A625': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public synchronized WatchesSummary getWatchesSummary() {
        int totalWatches = 0;
        for (Map<String, WatchStats> paths : watch2Paths.values()) {
            totalWatches += paths.size();
        }
        return new WatchesSummary(watch2Paths.size(), watchTable.size(), totalWatches);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,shutdown,void shutdown(),"[362, 363]","{'A612': [(362, 363)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    @Override
    public void shutdown() { /* do nothing */ }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,getRecursiveWatchQty,int getRecursiveWatchQty(),"[366, 368]","{'A625': [(366, 367)], 'A636': [(368, 368)]}","{'A625': 0.6666666666666666, 'A636': 0.3333333333333333}",A625,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    synchronized int getRecursiveWatchQty() {
        return recursiveWatchQty;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManager.java,WatchManager,getPathParentIterator,PathParentIterator getPathParentIterator(String),"[370, 375]","{'A625': [(371, 371)], 'A636': [(370, 370), (372, 375)]}","{'A625': 0.16666666666666666, 'A636': 0.8333333333333334}",A636,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/watch/WatchManagerTest.java,"    private PathParentIterator getPathParentIterator(String path) {
        if (getRecursiveWatchQty() == 0) {
            return PathParentIterator.forPathOnly(path);
        }
        return PathParentIterator.forAll(path);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/IWatchManager.java,,addWatch,"boolean addWatch(String,Watcher,WatcherMode)","[49, 54]","{'A636': [(49, 54)]}",{'A636': 1.0},A636,,"    default boolean addWatch(String path, Watcher watcher, WatcherMode watcherMode) {
        if (watcherMode == WatcherMode.DEFAULT_WATCHER_MODE) {
            return addWatch(path, watcher);
        }
        throw new UnsupportedOperationException();  // custom implementations must defeat this
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/IWatchManager.java,,containsWatcher,"boolean containsWatcher(String,Watcher,WatcherMode)","[74, 79]","{'A625': [(74, 79)]}",{'A625': 1.0},A625,,"    default boolean containsWatcher(String path, Watcher watcher, @Nullable WatcherMode watcherMode) {
        if (watcherMode == null || watcherMode == WatcherMode.DEFAULT_WATCHER_MODE) {
            return containsWatcher(path, watcher);
        }
        throw new UnsupportedOperationException(""persistent watch"");
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/IWatchManager.java,,removeWatcher,"boolean removeWatcher(String,Watcher,WatcherMode)","[99, 104]","{'A625': [(99, 104)]}",{'A625': 1.0},A625,,"    default boolean removeWatcher(String path, Watcher watcher, WatcherMode watcherMode) {
        if (watcherMode == null || watcherMode == WatcherMode.DEFAULT_WATCHER_MODE) {
            return removeWatcher(path, watcher);
        }
        throw new UnsupportedOperationException(""persistent watch"");
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,addWatch,"boolean addWatch(String,Watcher)","[76, 108]","{'A583': [(79, 80), (82, 82), (95, 96)], 'A612': [(76, 78), (81, 81), (83, 94), (97, 108)]}","{'A583': 0.15151515151515152, 'A612': 0.8484848484848485}",A612,,"    @Override
    public boolean addWatch(String path, Watcher watcher) {
        boolean result = false;
        // Need readLock to exclusively lock with removeWatcher, otherwise we
        // may add a dead watch whose connection was just closed.
        //
        // Creating new watcher bit and adding it to the BitHashSet has it's
        // own lock to minimize the write lock scope
        addRemovePathRWLock.readLock().lock();
        try {
            // avoid race condition of adding a on flying dead watcher
            if (isDeadWatcher(watcher)) {
                LOG.debug(""Ignoring addWatch with closed cnxn"");
            } else {
                Integer bit = watcherBitIdMap.add(watcher);
                BitHashSet watchers = pathWatches.get(path);
                if (watchers == null) {
                    watchers = new BitHashSet();
                    BitHashSet existingWatchers = pathWatches.putIfAbsent(path, watchers);
                    // it's possible multiple thread might add to pathWatches
                    // while we're holding read lock, so we need this check
                    // here
                    if (existingWatchers != null) {
                        watchers = existingWatchers;
                    }
                }
                result = watchers.add(bit);
            }
        } finally {
            addRemovePathRWLock.readLock().unlock();
        }
        return result;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,containsWatcher,"boolean containsWatcher(String,Watcher)","[123, 127]","{'A583': [(126, 126)], 'A612': [(123, 125), (127, 127)]}","{'A583': 0.2, 'A612': 0.8}",A612,,"    @Override
    public boolean containsWatcher(String path, Watcher watcher) {
        BitHashSet watchers = pathWatches.get(path);
        return watchers != null && watchers.contains(watcherBitIdMap.getBit(watcher));
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,removeWatcher,"boolean removeWatcher(String,Watcher)","[129, 149]","{'A583': [(131, 134)], 'A612': [(129, 130), (135, 149)]}","{'A583': 0.19047619047619047, 'A612': 0.8095238095238095}",A612,,"    @Override
    public boolean removeWatcher(String path, Watcher watcher) {
        // Hold write lock directly because removeWatcher request is more
        // likely to be invoked when the watcher is actually exist and
        // haven't fired yet, so instead of having read lock to check existence
        // before switching to write one, it's actually cheaper to hold write
        // lock directly here.
        addRemovePathRWLock.writeLock().lock();
        try {
            BitHashSet list = pathWatches.get(path);
            if (list == null || !list.remove(watcherBitIdMap.getBit(watcher))) {
                return false;
            }
            if (list.isEmpty()) {
                pathWatches.remove(path);
            }
            return true;
        } finally {
            addRemovePathRWLock.writeLock().unlock();
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,removeWatcher,void removeWatcher(Watcher),"[151, 178]","{'A583': [(155, 155), (167, 169), (171, 171), (173, 173), (175, 175)], 'A612': [(151, 154), (156, 166), (170, 170), (172, 172), (174, 174), (176, 178)]}","{'A583': 0.25, 'A612': 0.75}",A612,,"    @Override
    public void removeWatcher(Watcher watcher) {
        Integer watcherBit;
        // Use exclusive lock with addWatcher to guarantee that we won't add
        // watch for a cnxn which is already closed.
        addRemovePathRWLock.writeLock().lock();
        try {
            // do nothing if the watcher is not tracked
            watcherBit = watcherBitIdMap.getBit(watcher);
            if (watcherBit == null) {
                return;
            }
        } finally {
            addRemovePathRWLock.writeLock().unlock();
        }

        // We can guarantee that when this line is executed, the cnxn of this
        // watcher has already been marked as stale (this method is only called
        // from ServerCnxn.close after we set stale), which means no watches
        // will be added to the watcher manager with this watcher, so that we
        // can safely clean up this dead watcher.
        //
        // So it's not necessary to have this line in the addRemovePathRWLock.
        // And moving the addDeadWatcher out of the locking block to avoid
        // holding the write lock while we're blocked on adding dead watchers
        // into the watcherCleaner.
        watcherCleaner.addDeadWatcher(watcherBit);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,processDeadWatchers,void processDeadWatchers(Set<Integer>),"[185, 205]","{'A583': [(187, 188), (191, 191), (196, 196), (202, 202)], 'A612': [(185, 186), (189, 190), (192, 195), (197, 201), (203, 205)]}","{'A583': 0.23809523809523808, 'A612': 0.7619047619047619}",A612,,"    @Override
    public void processDeadWatchers(Set<Integer> deadWatchers) {
        // All the watchers being processed here are guaranteed to be dead,
        // no watches will be added for those dead watchers, that's why I
        // don't need to have addRemovePathRWLock here.
        BitSet bits = new BitSet();
        for (int dw : deadWatchers) {
            bits.set(dw);
        }
        // The value iterator will reflect the state when it was
        // created, don't need to synchronize.
        for (BitHashSet watchers : pathWatches.values()) {
            watchers.remove(deadWatchers, bits);
        }
        // Better to remove the empty path from pathWatches, but it will add
        // lot of lock contention and affect the throughput of addWatch,
        // let's rely on the triggerWatch to delete it.
        for (Integer wbit : deadWatchers) {
            watcherBitIdMap.remove(wbit);
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,triggerWatch,"WatcherOrBitSet triggerWatch(String,EventType,long,List<ACL>)","[207, 210]","{'A612': [(207, 207), (210, 210)], 'A613': [(208, 209)]}","{'A612': 0.5, 'A613': 0.5}",A612,,"    @Override
    public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List<ACL> acl) {
        return triggerWatch(path, type, zxid, acl, null);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,triggerWatch,"WatcherOrBitSet triggerWatch(String,EventType,long,List<ACL>,WatcherOrBitSet)","[212, 249]","{'A612': [(212, 212), (215, 220), (223, 237), (244, 246), (248, 249)], 'A613': [(213, 213), (238, 242)], 'A675': [(221, 222), (243, 243), (247, 247)], 'A634': [(214, 214)]}","{'A612': 0.7105263157894737, 'A613': 0.15789473684210525, 'A675': 0.10526315789473684, 'A634': 0.02631578947368421}",A612,,"    @Override
    public WatcherOrBitSet triggerWatch(String path, EventType type, long zxid, List<ACL> acl, WatcherOrBitSet suppress) {
        WatchedEvent e = new WatchedEvent(type, KeeperState.SyncConnected, path, zxid);

        BitHashSet watchers = remove(path);
        if (watchers == null) {
            return null;
        }

        int triggeredWatches = 0;

        // Avoid race condition between dead watcher cleaner in
        // WatcherCleaner and iterating here
        synchronized (watchers) {
            for (Integer wBit : watchers) {
                if (suppress != null && suppress.contains(wBit)) {
                    continue;
                }

                Watcher w = watcherBitIdMap.get(wBit);

                // skip dead watcher
                if (w == null || isDeadWatcher(w)) {
                    continue;
                }

                if (w instanceof ServerWatcher) {
                    ((ServerWatcher) w).process(e, acl);
                } else {
                    w.process(e);
                }
                triggeredWatches++;
            }
        }

        updateMetrics(type, triggeredWatches);
        return new WatcherOrBitSet(watchers);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,size,int size(),"[251, 258]","{'A583': [(254, 254)], 'A612': [(251, 253), (255, 258)]}","{'A583': 0.125, 'A612': 0.875}",A612,,"    @Override
    public int size() {
        int size = 0;
        for (BitHashSet watches : pathWatches.values()) {
            size += watches.size();
        }
        return size;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,shutdown,void shutdown(),"[260, 265]","{'A612': [(260, 265)]}",{'A612': 1.0},A612,,"    @Override
    public void shutdown() {
        if (watcherCleaner != null) {
            watcherCleaner.shutdown();
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,remove,BitHashSet remove(String),"[267, 274]","{'A612': [(267, 274)]}",{'A612': 1.0},A612,,"    private BitHashSet remove(String path) {
        addRemovePathRWLock.writeLock().lock();
        try {
            return pathWatches.remove(path);
        } finally {
            addRemovePathRWLock.writeLock().unlock();
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,updateMetrics,"void updateMetrics(EventType,int)","[276, 297]","{'A675': [(276, 278), (280, 282), (284, 286), (288, 290), (292, 297)], 'A584': [(279, 279), (283, 283), (287, 287), (291, 291)]}","{'A675': 0.8181818181818182, 'A584': 0.18181818181818182}",A675,,"    void updateMetrics(final EventType type, int size) {
        switch (type) {
        case NodeCreated:
            ServerMetrics.getMetrics().NODE_CREATED_WATCHER.add(size);
            break;

        case NodeDeleted:
            ServerMetrics.getMetrics().NODE_DELETED_WATCHER.add(size);
            break;

        case NodeDataChanged:
            ServerMetrics.getMetrics().NODE_CHANGED_WATCHER.add(size);
            break;

        case NodeChildrenChanged:
            ServerMetrics.getMetrics().NODE_CHILDREN_WATCHER.add(size);
            break;
        default:
            // Other types not logged.
            break;
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,isDeadWatcher,boolean isDeadWatcher(Watcher),"[299, 301]","{'A612': [(299, 301)]}",{'A612': 1.0},A612,,"    boolean isDeadWatcher(Watcher watcher) {
        return watcher instanceof ServerCnxn && ((ServerCnxn) watcher).isStale();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,pathSize,int pathSize(),"[303, 305]","{'A612': [(303, 305)]}",{'A612': 1.0},A612,,"    int pathSize() {
        return pathWatches.size();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,getWatchesSummary,WatchesSummary getWatchesSummary(),"[307, 310]","{'A583': [(309, 309)], 'A612': [(307, 308), (310, 310)]}","{'A583': 0.25, 'A612': 0.75}",A612,,"    @Override
    public WatchesSummary getWatchesSummary() {
        return new WatchesSummary(watcherBitIdMap.size(), pathSize(), size());
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,getWatches,WatchesReport getWatches(),"[312, 321]","{'A583': [(315, 315)], 'A612': [(312, 313), (316, 316), (318, 321)], 'A605': [(314, 314), (317, 317)]}","{'A583': 0.1, 'A612': 0.7, 'A605': 0.2}",A612,,"    @Override
    public WatchesReport getWatches() {
        Map<Long, Set<String>> id2paths = new HashMap<>();
        for (Entry<Watcher, Set<String>> e : getWatcher2PathesMap().entrySet()) {
            Long id = ((ServerCnxn) e.getKey()).getSessionId();
            Set<String> paths = new HashSet<>(e.getValue());
            id2paths.put(id, paths);
        }
        return new WatchesReport(id2paths);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,getWatchesByPath,WatchesPathReport getWatchesByPath(),"[329, 346]","{'A612': [(329, 330), (332, 334), (336, 346)], 'A605': [(331, 331), (335, 335)]}","{'A612': 0.8888888888888888, 'A605': 0.1111111111111111}",A612,,"    @Override
    public WatchesPathReport getWatchesByPath() {
        Map<String, Set<Long>> path2ids = new HashMap<>();
        for (Entry<String, BitHashSet> e : pathWatches.entrySet()) {
            BitHashSet watchers = e.getValue();
            synchronized (watchers) {
                Set<Long> ids = new HashSet<>(watchers.size());
                path2ids.put(e.getKey(), ids);
                for (Integer wbit : watchers) {
                    Watcher watcher = watcherBitIdMap.get(wbit);
                    if (watcher instanceof ServerCnxn) {
                        ids.add(((ServerCnxn) watcher).getSessionId());
                    }
                }
            }
        }
        return new WatchesPathReport(path2ids);
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,getWatcher2PathesMap,"Map<Watcher, Set<String>> getWatcher2PathesMap()","[352, 372]","{'A583': [(359, 359)], 'A612': [(352, 352), (354, 358), (360, 364), (366, 372)], 'A605': [(353, 353), (365, 365)]}","{'A583': 0.047619047619047616, 'A612': 0.8571428571428571, 'A605': 0.09523809523809523}",A612,,"    public Map<Watcher, Set<String>> getWatcher2PathesMap() {
        Map<Watcher, Set<String>> watcher2paths = new HashMap<>();
        for (Entry<String, BitHashSet> e : pathWatches.entrySet()) {
            String path = e.getKey();
            BitHashSet watchers = e.getValue();
            // avoid race condition with add/remove
            synchronized (watchers) {
                for (Integer wbit : watchers) {
                    Watcher w = watcherBitIdMap.get(wbit);
                    if (w == null) {
                        continue;
                    }
                    if (!watcher2paths.containsKey(w)) {
                        watcher2paths.put(w, new HashSet<>());
                    }
                    watcher2paths.get(w).add(path);
                }
            }
        }
        return watcher2paths;
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,dumpWatches,"void dumpWatches(PrintWriter,boolean)","[374, 402]","{'A583': [(387, 387), (395, 395)], 'A612': [(374, 386), (388, 394), (396, 402)]}","{'A583': 0.06896551724137931, 'A612': 0.9310344827586207}",A612,,"    @Override
    public void dumpWatches(PrintWriter pwriter, boolean byPath) {
        if (byPath) {
            for (Entry<String, BitHashSet> e : pathWatches.entrySet()) {
                pwriter.println(e.getKey());
                BitHashSet watchers = e.getValue();
                synchronized (watchers) {
                    for (Integer wbit : watchers) {
                        Watcher w = watcherBitIdMap.get(wbit);
                        if (!(w instanceof ServerCnxn)) {
                            continue;
                        }
                        pwriter.print(""\t0x"");
                        pwriter.print(Long.toHexString(((ServerCnxn) w).getSessionId()));
                        pwriter.print(""\n"");
                    }
                }
            }
        } else {
            for (Entry<Watcher, Set<String>> e : getWatcher2PathesMap().entrySet()) {
                pwriter.print(""0x"");
                pwriter.println(Long.toHexString(((ServerCnxn) e.getKey()).getSessionId()));
                for (String path : e.getValue()) {
                    pwriter.print(""\t"");
                    pwriter.println(path);
                }
            }
        }
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerOptimized.java,WatchManagerOptimized,toString,String toString(),"[404, 410]","{'A583': [(407, 407)], 'A612': [(404, 406), (408, 410)]}","{'A583': 0.14285714285714285, 'A612': 0.8571428571428571}",A612,,"    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append(watcherBitIdMap.size()).append("" connections watching "").append(pathSize()).append("" paths\n"");
        sb.append(""Total watches:"").append(size());
        return sb.toString();
    }
"
org.apache.zookeeper.server.watch,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/watch/WatchManagerFactory.java,WatchManagerFactory,createWatchManager,IWatchManager createWatchManager(),"[35, 48]","{'A583': [(41, 41), (45, 45)], 'A612': [(35, 40), (42, 44), (46, 48)]}","{'A583': 0.14285714285714285, 'A612': 0.8571428571428571}",A612,,"    public static IWatchManager createWatchManager() throws IOException {
        String watchManagerName = System.getProperty(ZOOKEEPER_WATCH_MANAGER_NAME);
        if (watchManagerName == null) {
            watchManagerName = WatchManager.class.getName();
        }
        try {
            IWatchManager watchManager = (IWatchManager) Class.forName(watchManagerName).getConstructor().newInstance();
            LOG.info(""Using {} as watch manager"", watchManagerName);
            return watchManager;
        } catch (Exception e) {
            IOException ioe = new IOException(""Couldn't instantiate "" + watchManagerName, e);
            throw ioe;
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,trackSent,void trackSent(long),"[55, 59]","{'A604': [(55, 59)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public void trackSent(long timestamp) {
        if (enabled) {
            sentBuffer.write(new BufferedMessage(timestamp));
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,trackSent,void trackSent(int),"[61, 65]","{'A604': [(61, 65)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public void trackSent(int packetType) {
        if (enabled) {
            sentBuffer.write(new BufferedMessage(packetType));
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,trackReceived,void trackReceived(long),"[67, 71]","{'A604': [(67, 71)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public void trackReceived(long timestamp) {
        if (enabled) {
            receivedBuffer.write(new BufferedMessage(timestamp));
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,trackReceived,void trackReceived(int),"[73, 77]","{'A604': [(73, 77)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public void trackReceived(int packetType) {
        if (enabled) {
            receivedBuffer.write(new BufferedMessage(packetType));
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,peekSent,BufferedMessage peekSent(),"[79, 81]","{'A604': [(79, 81)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public final BufferedMessage peekSent() {
        return sentBuffer.peek();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,peekReceived,BufferedMessage peekReceived(),"[83, 85]","{'A604': [(83, 85)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public final BufferedMessage peekReceived() {
        return receivedBuffer.peek();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,peekSentTimestamp,long peekSentTimestamp(),"[87, 89]","{'A604': [(87, 89)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public final long peekSentTimestamp() {
        return enabled ? sentBuffer.peek().getTimestamp() : 0;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,peekReceivedTimestamp,long peekReceivedTimestamp(),"[91, 93]","{'A604': [(91, 93)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public final long peekReceivedTimestamp() {
        return enabled ? receivedBuffer.peek().getTimestamp() : 0;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,dumpToLog,void dumpToLog(String),"[95, 101]","{'A604': [(95, 101)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    public void dumpToLog(String serverAddress) {
        if (!enabled) {
            return;
        }
        logMessages(serverAddress, receivedBuffer, Direction.RECEIVED);
        logMessages(serverAddress, sentBuffer, Direction.SENT);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker,logMessages,"void logMessages(String,CircularBuffer<BufferedMessage>,Direction)","[103, 117]","{'A604': [(103, 111), (113, 113), (115, 117)], 'A583': [(112, 112), (114, 114)]}","{'A604': 0.8666666666666667, 'A583': 0.13333333333333333}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"    private static void logMessages(
        String serverAddr,
        CircularBuffer<BufferedMessage> messages,
        Direction direction) {
        String sentOrReceivedText = direction == Direction.SENT ? ""sentBuffer to"" : ""receivedBuffer from"";

        if (messages.isEmpty()) {
            LOG.info(""No buffered timestamps for messages {} {}"", sentOrReceivedText, serverAddr);
        } else {
            LOG.warn(""Last {} timestamps for messages {} {}:"", messages.size(), sentOrReceivedText, serverAddr);
            while (!messages.isEmpty()) {
                LOG.warn(""{} {}  {}"", sentOrReceivedText, serverAddr, messages.take().toString());
            }
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker.BufferedMessage,getTimestamp,long getTimestamp(),"[131, 133]","{'A604': [(131, 133)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"        private long getTimestamp() {
            return timestamp;
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/MessageTracker.java,MessageTracker.BufferedMessage,toString,String toString(),"[145, 159]","{'A604': [(145, 159)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/MessageTrackerTest.java,"        @Override
        /**
         * ToString examples are as follows:
         * TimeStamp: 2016-06-06 11:07:58,594 Type: PROPOSAL
         * TimeStamp: 2016-06-06 11:07:58,187
         */
        public String toString() {
            if (messageType == -1) {
                return ""TimeStamp: "" + new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss,SSS"")
                    .format(new Date(timestamp));
            } else {
                return ""TimeStamp: "" + new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss,SSS"")
                    .format(new Date(timestamp)) + "" Type: "" + Leader.getPacketType(messageType);
            }
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AuthUtil.java,AuthUtil,getUser,String getUser(Id),"[39, 42]","{'A592': [(39, 42)]}",{'A592': 1.0},A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AuthUtilTest.java,"    public static String getUser(Id id) {
        AuthenticationProvider provider = ProviderRegistry.getProvider(id.getScheme());
        return provider == null ? null : provider.getUserName(id.getId());
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AuthUtil.java,AuthUtil,getUsers,String getUsers(List<Id>),"[57, 68]","{'A637': [(57, 68)]}",{'A637': 1.0},A637,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AuthUtilTest.java,"    public static String getUsers(List<Id> authInfo) {
        if (authInfo == null) {
            return null;
        }

        String formatted = authInfo.stream()
            .map(AuthUtil::getUser)
            .filter(name -> name != null && !name.trim().isEmpty())
            .collect(Collectors.joining("",""));

        return formatted.isEmpty() ? null : formatted;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AuthUtil.java,AuthUtil,getClientInfos,List<ClientInfo> getClientInfos(List<Id>),"[76, 83]","{'A592': [(76, 78), (80, 83)], 'A637': [(79, 79)]}","{'A592': 0.875, 'A637': 0.125}",A592,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AuthUtilTest.java,"    public static List<ClientInfo> getClientInfos(List<Id> authInfo) {
        List<ClientInfo> clientAuthInfo = new ArrayList<>(authInfo.size());
        authInfo.forEach(id -> {
            String user = getUser(id);
            clientAuthInfo.add(new ClientInfo(id.getScheme(), user == null ? """" : user));
        });
        return clientAuthInfo;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory,create,File create(String),"[37, 40]","{'A591': [(37, 38)], 'A597': [(39, 40)]}","{'A591': 0.5, 'A597': 0.5}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"    public File create(String path) {
        File file = new File(path);
        return validate(file);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory,validate,File validate(File),"[42, 50]","{'A583': [(43, 48)], 'A591': [(49, 50)], 'A597': [(42, 42)]}","{'A583': 0.6666666666666666, 'A591': 0.2222222222222222, 'A597': 0.1111111111111111}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"    public File validate(File file) {
        if (warnForRelativePath) {
            doWarnForRelativePath(file);
        }
        if (failForNonExistingPath) {
            doFailForNonExistingPath(file);
        }
        return file;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory,doFailForNonExistingPath,void doFailForNonExistingPath(File),"[52, 56]","{'A583': [(54, 54)], 'A591': [(52, 53), (55, 56)]}","{'A583': 0.2, 'A591': 0.8}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"    private void doFailForNonExistingPath(File file) {
        if (!file.exists()) {
            throw new IllegalArgumentException(file.toString() + "" file is missing"");
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory,doWarnForRelativePath,void doWarnForRelativePath(File),"[58, 66]","{'A583': [(59, 65)], 'A591': [(58, 58), (66, 66)]}","{'A583': 0.7777777777777778, 'A591': 0.2222222222222222}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"    private void doWarnForRelativePath(File file) {
        if (file.isAbsolute()) {
            return;
        }
        if (file.getPath().substring(0, 2).equals(""."" + File.separator)) {
            return;
        }
        log.warn(file.getPath() + "" is relative. Prepend ."" + File.separator + "" to indicate that you're sure!"");
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory.Builder,warnForRelativePath,Builder warnForRelativePath(),"[78, 81]","{'A591': [(78, 81)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"        public Builder warnForRelativePath() {
            warnForRelativePathOption = true;
            return this;
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory.Builder,failForNonExistingPath,Builder failForNonExistingPath(),"[83, 86]","{'A591': [(83, 86)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"        public Builder failForNonExistingPath() {
            failForNonExistingPathOption = true;
            return this;
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/VerifyingFileFactory.java,VerifyingFileFactory.Builder,build,VerifyingFileFactory build(),"[88, 90]","{'A591': [(88, 90)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/VerifyingFileFactoryTest.java,"        public VerifyingFileFactory build() {
            return new VerifyingFileFactory(this);
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,write,void write(T),"[52, 62]","{'A604': [(52, 62)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public synchronized void write(T element) {
        int newSize = numberOfElements.incrementAndGet();
        if (newSize > capacity) {
            buffer[oldest] = element;
            oldest = ++oldest % capacity;
            numberOfElements.decrementAndGet();
        } else {
            int index = (oldest + numberOfElements.get() - 1) % capacity;
            buffer[index] = element;
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,take,T take(),"[70, 79]","{'A604': [(70, 79)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public synchronized T take() {
        int newSize = numberOfElements.decrementAndGet();
        if (newSize < 0) {
            numberOfElements.incrementAndGet();
            return null;
        }
        T polled = buffer[oldest];
        oldest = ++oldest % capacity;
        return polled;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,peek,T peek(),"[81, 86]","{'A604': [(81, 86)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public synchronized T peek() {
        if (numberOfElements.get() <= 0) {
            return null;
        }
        return buffer[oldest];
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,size,int size(),"[88, 90]","{'A604': [(88, 90)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public int size() {
        return numberOfElements.get();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,isEmpty,boolean isEmpty(),"[92, 94]","{'A604': [(92, 94)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public boolean isEmpty() {
        return numberOfElements.get() <= 0;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,isFull,boolean isFull(),"[96, 98]","{'A604': [(96, 98)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public boolean isFull() {
        return numberOfElements.get() >= capacity;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/CircularBuffer.java,CircularBuffer,reset,void reset(),"[100, 102]","{'A604': [(100, 102)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/CircularBufferTest.java,"    public synchronized void  reset() {
        numberOfElements.set(0);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RateLimiter.java,RateLimiter,allow,boolean allow(),"[41, 59]","{'A726': [(41, 59)]}",{'A726': 1.0},A726,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RateLimiterTest.java,"    public boolean allow() {
        final long now = Time.currentElapsedTime();

        // reset the rate if interval passed
        if (now > lastTimeReset + intervalInMs) {
            remained.set(rate);
            lastTimeReset = now;
        }

        int value = remained.get();
        boolean allowed = false;

        // to handle race condition
        while (!allowed && value > 0) {
            allowed = remained.compareAndSet(value, value - 1);
            value = remained.get();
        }
        return allowed;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,addDigest,AdHash addDigest(long),"[40, 43]","{'A612': [(40, 43)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    public AdHash addDigest(long digest) {
        hash += digest;
        return this;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,removeDigest,AdHash removeDigest(long),"[51, 54]","{'A612': [(51, 54)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    public AdHash removeDigest(long digest) {
        hash -= digest;
        return this;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,getHash,long getHash(),"[59, 61]","{'A612': [(59, 61)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    public long getHash() {
        return hash;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,equals,boolean equals(Object),"[63, 66]","{'A612': [(63, 66)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    @Override
    public boolean equals(Object other) {
        return other instanceof AdHash && ((AdHash) other).hash == this.hash;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,hashCode,int hashCode(),"[68, 71]","{'A612': [(68, 71)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    @Override
    public int hashCode() {
        return Long.hashCode(hash);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,toString,String toString(),"[73, 76]","{'A612': [(73, 76)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    @Override
    public String toString() {
        return Long.toHexString(hash);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/AdHash.java,AdHash,clear,void clear(),"[78, 80]","{'A612': [(78, 80)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/AdHashTest.java,"    public void clear() {
        hash = 0;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,isWriteOp,boolean isWriteOp(int),"[138, 154]","{'A583': [(140, 149), (151, 151)], 'A604': [(138, 139), (152, 154)], 'A625': [(150, 150)]}","{'A583': 0.6470588235294118, 'A604': 0.29411764705882354, 'A625': 0.058823529411764705}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    static boolean isWriteOp(int requestType) {
        switch (requestType) {
        case ZooDefs.OpCode.sync:
        case ZooDefs.OpCode.create:
        case ZooDefs.OpCode.create2:
        case ZooDefs.OpCode.createContainer:
        case ZooDefs.OpCode.delete:
        case ZooDefs.OpCode.deleteContainer:
        case ZooDefs.OpCode.setData:
        case ZooDefs.OpCode.reconfig:
        case ZooDefs.OpCode.setACL:
        case ZooDefs.OpCode.multi:
        case ZooDefs.OpCode.check:
            return true;
        }
        return false;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,trimPathDepth,"String trimPathDepth(String,int)","[156, 166]","{'A604': [(156, 158), (160, 160), (162, 166)], 'A589': [(159, 159), (161, 161)]}","{'A604': 0.8181818181818182, 'A589': 0.18181818181818182}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    static String trimPathDepth(String path, int maxDepth) {
        int count = 0;
        StringBuilder sb = new StringBuilder();
        StringTokenizer pathTokenizer = new StringTokenizer(path, PATH_SEPARATOR);
        while (pathTokenizer.hasMoreElements() && count++ < maxDepth) {
            sb.append(PATH_SEPARATOR);
            sb.append(pathTokenizer.nextToken());
        }
        path = sb.toString();
        return path;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,shutdown,void shutdown(),"[168, 175]","{'A583': [(168, 171)], 'A604': [(172, 175)]}","{'A583': 0.5, 'A604': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void shutdown() {
        if (!enabled) {
            return;
        }

        LOG.info(""shutdown scheduledExecutor"");
        scheduledExecutor.shutdownNow();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,start,void start(),"[177, 194]","{'A583': [(178, 180), (184, 184), (189, 189), (192, 192)], 'A604': [(177, 177), (181, 183), (185, 188), (190, 191), (193, 194)]}","{'A583': 0.3333333333333333, 'A604': 0.6666666666666666}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void start() {
        if (!enabled) {
            return;
        }

        LOG.info(""Start the RequestPath collector"");
        immutableRequestsMap.forEach((opType, pathStatsQueue) -> pathStatsQueue.start());

        // Schedule to log the top used read/write paths every 5 mins
        scheduledExecutor.scheduleWithFixedDelay(() -> {
            LOG.info(""%nHere are the top Read paths:"");
            logTopPaths(aggregatePaths(4, queue -> !queue.isWriteOperation()),
                        entry -> LOG.info(""{} : {}"", entry.getKey(), entry.getValue()));
            LOG.info(""%nHere are the top Write paths:"");
            logTopPaths(aggregatePaths(4, queue -> queue.isWriteOperation()),
                        entry -> LOG.info(""{} : {}"", entry.getKey(), entry.getValue()));
        }, COLLECTOR_INITIAL_DELAY, COLLECTOR_DELAY, TimeUnit.MINUTES);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,registerRequest,"void registerRequest(int,String)","[201, 213]","{'A583': [(202, 204)], 'A604': [(201, 201), (206, 213)], 'A602': [(205, 205)]}","{'A583': 0.23076923076923078, 'A604': 0.6923076923076923, 'A602': 0.07692307692307693}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void registerRequest(int type, String path) {
        if (!enabled) {
            return;
        }
        if (ThreadLocalRandom.current().nextFloat() <= REQUEST_PREPROCESS_SAMPLE_RATE) {
            PathStatsQueue pathStatsQueue = immutableRequestsMap.get(Request.op2String(type));
            if (pathStatsQueue != null) {
                pathStatsQueue.registerRequest(path);
            } else {
                LOG.error(""We should not handle {}"", type);
            }
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,dumpTopRequestPath,"void dumpTopRequestPath(PrintWriter,String,int)","[215, 230]","{'A604': [(215, 230)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void dumpTopRequestPath(PrintWriter pwriter, String requestTypeName, int queryMaxDepth) {
        if (queryMaxDepth < 1) {
            return;
        }
        PathStatsQueue pathStatsQueue = immutableRequestsMap.get(requestTypeName);
        if (pathStatsQueue == null) {
            pwriter.println(""Can not find path stats for type: "" + requestTypeName);
            return;
        } else {
            pwriter.println(""The top requests of type: "" + requestTypeName);
        }
        Map<String, Integer> combinedMap;
        final int maxDepth = Math.min(queryMaxDepth, REQUEST_PREPROCESS_PATH_DEPTH);
        combinedMap = pathStatsQueue.collectStats(maxDepth);
        logTopPaths(combinedMap, entry -> pwriter.println(entry.getKey() + "" : "" + entry.getValue()));
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,dumpTopReadPaths,"void dumpTopReadPaths(PrintWriter,int)","[232, 235]","{'A604': [(232, 235)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void dumpTopReadPaths(PrintWriter pwriter, int queryMaxDepth) {
        pwriter.println(""The top read requests are"");
        dumpTopAggregatedPaths(pwriter, queryMaxDepth, queue -> !queue.isWriteOperation);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,dumpTopWritePaths,"void dumpTopWritePaths(PrintWriter,int)","[237, 240]","{'A604': [(237, 240)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void dumpTopWritePaths(PrintWriter pwriter, int queryMaxDepth) {
        pwriter.println(""The top write requests are"");
        dumpTopAggregatedPaths(pwriter, queryMaxDepth, queue -> queue.isWriteOperation);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,dumpTopPaths,"void dumpTopPaths(PrintWriter,int)","[242, 245]","{'A604': [(242, 245)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    public void dumpTopPaths(PrintWriter pwriter, int queryMaxDepth) {
        pwriter.println(""The top requests are"");
        dumpTopAggregatedPaths(pwriter, queryMaxDepth, queue -> true);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,dumpTopAggregatedPaths,"void dumpTopAggregatedPaths(PrintWriter,int,Predicate<PathStatsQueue>)","[251, 257]","{'A583': [(251, 254)], 'A604': [(255, 257)]}","{'A583': 0.5714285714285714, 'A604': 0.42857142857142855}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    private void dumpTopAggregatedPaths(PrintWriter pwriter, int queryMaxDepth, final Predicate<PathStatsQueue> predicate) {
        if (!enabled) {
            return;
        }
        final Map<String, Integer> combinedMap = aggregatePaths(queryMaxDepth, predicate);
        logTopPaths(combinedMap, entry -> pwriter.println(entry.getKey() + "" : "" + entry.getValue()));
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,aggregatePaths,"Map<String, Integer> aggregatePaths(int,Predicate<PathStatsQueue>)","[259, 268]","{'A583': [(262, 266)], 'A604': [(259, 261), (267, 268)]}","{'A583': 0.5, 'A604': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    Map<String, Integer> aggregatePaths(int queryMaxDepth, Predicate<PathStatsQueue> predicate) {
        final Map<String, Integer> combinedMap = new HashMap<>(REQUEST_PREPROCESS_TOPPATH_MAX);
        final int maxDepth = Math.min(queryMaxDepth, REQUEST_PREPROCESS_PATH_DEPTH);
        immutableRequestsMap.values()
                            .stream()
                            .filter(predicate)
                            .forEach(pathStatsQueue -> pathStatsQueue.collectStats(maxDepth).forEach(
                                (path, count) -> combinedMap.put(path, combinedMap.getOrDefault(path, 0) + count)));
        return combinedMap;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector,logTopPaths,"void logTopPaths(Map<String, Integer>,Consumer<Map.Entry<String, Integer>>)","[270, 276]","{'A583': [(271, 275)], 'A604': [(270, 270), (276, 276)]}","{'A583': 0.7142857142857143, 'A604': 0.2857142857142857}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"    void logTopPaths(Map<String, Integer> combinedMap, final Consumer<Map.Entry<String, Integer>> output) {
        combinedMap.entrySet()
                   .stream()
                   // sort by path count
                   .sorted(Comparator.comparing(Map.Entry<String, Integer>::getValue).reversed())
                   .limit(REQUEST_PREPROCESS_TOPPATH_MAX).forEach(output);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector.PathStatsQueue,registerRequest,void registerRequest(String),"[296, 301]","{'A583': [(297, 299)], 'A604': [(296, 296), (300, 301)]}","{'A583': 0.5, 'A604': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"        public void registerRequest(String path) {
            if (!enabled) {
                return;
            }
            currentSlot.get().offer(path);
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector.PathStatsQueue,getCurrentSlot,ConcurrentLinkedQueue<String> getCurrentSlot(),"[303, 305]","{'A604': [(303, 305)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"        ConcurrentLinkedQueue<String> getCurrentSlot() {
            return currentSlot.get();
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector.PathStatsQueue,mapReducePaths,"Map<String, Integer> mapReducePaths(int,Collection<String>)","[315, 322]","{'A583': [(317, 320)], 'A604': [(315, 316), (321, 322)]}","{'A583': 0.5, 'A604': 0.5}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"        Map<String, Integer> mapReducePaths(int maxDepth, Collection<String> tobeProcessedSlot) {
            Map<String, Integer> newSlot = new ConcurrentHashMap<>();
            tobeProcessedSlot.stream().filter(path -> path != null).forEach((path) -> {
                path = trimPathDepth(path, maxDepth);
                newSlot.put(path, newSlot.getOrDefault(path, 0) + 1);
            });
            return newSlot;
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector.PathStatsQueue,collectStats,"Map<String, Integer> collectStats(int)","[329, 348]","{'A583': [(333, 334), (339, 342), (344, 345)], 'A604': [(329, 332), (335, 338), (343, 343), (346, 348)]}","{'A583': 0.4, 'A604': 0.6}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"        public Map<String, Integer> collectStats(int maxDepth) {
            Map<String, Integer> combinedMap;
            // Take a snapshot of the current slot and convert it to map.
            // Set the initial size as 0 since we don't want it to padding nulls in the end.
            Map<String, Integer> snapShot = mapReducePaths(
                maxDepth,
                Arrays.asList(currentSlot.get().toArray(new String[0])));
            // Starting from the snapshot and go through the queue to reduce them into one map
            // the iterator can run concurrently with write but we want to use a real lock in the test
            synchronized (accurateMode ? requestPathStats : new Object()) {
                combinedMap = requestPathStats.stream().reduce(snapShot, (firstMap, secondMap) -> {
                    secondMap.forEach((key, value) -> {
                        String trimmedPath = trimPathDepth(key, maxDepth);
                        firstMap.put(trimmedPath, firstMap.getOrDefault(trimmedPath, 0) + value);
                    });
                    return firstMap;
                });
            }
            return combinedMap;
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector.PathStatsQueue,start,void start(),"[353, 380]","{'A583': [(354, 356), (363, 363), (367, 367), (377, 377)], 'A604': [(353, 353), (357, 357), (359, 362), (364, 366), (368, 376), (378, 380)], 'A602': [(358, 358)]}","{'A583': 0.21428571428571427, 'A604': 0.75, 'A602': 0.03571428571428571}",A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"        public void start() {
            if (!enabled) {
                return;
            }
            // Staggered start and then run every 15 seconds no matter what
            int delay = ThreadLocalRandom.current().nextInt(REQUEST_STATS_SLOT_DURATION);
            // We need to use fixed Delay as the fixed rate will start the next one right
            // after the previous one finishes if it runs overtime instead of overlapping it.
            scheduledExecutor.scheduleWithFixedDelay(() -> {
                // Generate new slot so new requests will go here.
                ConcurrentLinkedQueue<String> tobeProcessedSlot = currentSlot.getAndSet(new ConcurrentLinkedQueue<>());
                try {
                    // pre process the last slot and queue it up, only one thread scheduled modified
                    // this but we can mess up the collect part so we put a lock in the test.
                    Map<String, Integer> latestSlot = mapReducePaths(REQUEST_PREPROCESS_PATH_DEPTH, tobeProcessedSlot);
                    synchronized (accurateMode ? requestPathStats : new Object()) {
                        if (requestPathStats.remainingCapacity() <= 0) {
                            requestPathStats.poll();
                        }
                        if (!requestPathStats.offer(latestSlot)) {
                            LOG.error(""Failed to insert the new request path stats for {}"", requestTypeName);
                        }
                    }
                } catch (Exception e) {
                    LOG.error(""Failed to insert the new request path stats for {} with exception {}"", requestTypeName, e);
                }
            }, delay, REQUEST_STATS_SLOT_DURATION, TimeUnit.SECONDS);
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/RequestPathMetricsCollector.java,RequestPathMetricsCollector.PathStatsQueue,isWriteOperation,boolean isWriteOperation(),"[382, 384]","{'A604': [(382, 384)]}",{'A604': 1.0},A604,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/RequestPathMetricsCollectorTest.java,"        boolean isWriteOperation() {
            return isWriteOperation;
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java,BitMap,add,Integer add(T),"[41, 74]","{'A583': [(41, 41)], 'A612': [(42, 74)]}","{'A583': 0.029411764705882353, 'A612': 0.9705882352941176}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java,"    @SuppressFBWarnings(value = ""DLS_DEAD_LOCAL_STORE"", justification = ""SpotBugs false positive"")
    public Integer add(T value) {
        /*
         * Optimized for code which will add the same value again and again,
         * more specifically this is used to add new bit for watcher, and
         * the same watcher may watching thousands or even millions of nodes,
         * which will call add the same value of this function, check exist
         * using read lock will optimize the performance here.
         */
        Integer bit = getBit(value);
        if (bit != null) {
            return bit;
        }

        rwLock.writeLock().lock();
        try {
            bit = value2Bit.get(value);
            if (bit != null) {
                return bit;
            }
            bit = freedBitSet.nextSetBit(0);
            if (bit > -1) {
                freedBitSet.clear(bit);
            } else {
                bit = nextBit++;
            }

            value2Bit.put(value, bit);
            bit2Value.put(bit, value);
            return bit;
        } finally {
            rwLock.writeLock().unlock();
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java,BitMap,get,T get(int),"[76, 83]","{'A612': [(76, 83)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java,"    public T get(int bit) {
        rwLock.readLock().lock();
        try {
            return bit2Value.get(bit);
        } finally {
            rwLock.readLock().unlock();
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java,BitMap,getBit,Integer getBit(T),"[85, 92]","{'A612': [(85, 92)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java,"    public Integer getBit(T value) {
        rwLock.readLock().lock();
        try {
            return value2Bit.get(value);
        } finally {
            rwLock.readLock().unlock();
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java,BitMap,remove,int remove(T),"[94, 112]","{'A583': [(96, 96)], 'A612': [(94, 95), (97, 112)]}","{'A583': 0.05263157894736842, 'A612': 0.9473684210526315}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java,"    public int remove(T value) {
        /*
         * remove only called once when the session is closed, so use write
         * lock directly without checking read lock.
         */
        rwLock.writeLock().lock();
        try {
            Integer bit = value2Bit.get(value);
            if (bit == null) {
                return -1;
            }
            value2Bit.remove(value);
            bit2Value.remove(bit);
            freedBitSet.set(bit);
            return bit;
        } finally {
            rwLock.writeLock().unlock();
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java,BitMap,remove,T remove(int),"[114, 128]","{'A612': [(114, 128)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java,"    public T remove(int bit) {
        rwLock.writeLock().lock();
        try {
            T value = bit2Value.get(bit);
            if (value == null) {
                return null;
            }
            value2Bit.remove(value);
            bit2Value.remove(bit);
            freedBitSet.set(bit);
            return value;
        } finally {
            rwLock.writeLock().unlock();
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitMap.java,BitMap,size,int size(),"[130, 137]","{'A612': [(130, 137)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitMapTest.java,"    public int size() {
        rwLock.readLock().lock();
        try {
            return value2Bit.size();
        } finally {
            rwLock.readLock().unlock();
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/KerberosUtil.java,KerberosUtil,getDefaultRealm,String getDefaultRealm(),"[25, 27]","{'A583': [(25, 27)]}",{'A583': 1.0},A583,,"    public static String getDefaultRealm() throws IllegalArgumentException {
        return new KerberosPrincipal(""tmp"", 1).getRealm();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,serviceStart,void serviceStart(),"[86, 90]","{'A609': [(86, 90)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    public void serviceStart() {
        monitorThread = new Thread(new JVMMonitor());
        monitorThread.setDaemon(true);
        monitorThread.start();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,serviceStop,void serviceStop(),"[92, 102]","{'A609': [(92, 102)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    public void serviceStop() {
        shouldRun = false;
        if (monitorThread != null) {
            monitorThread.interrupt();
            try {
                monitorThread.join();
            } catch (InterruptedException e) {
                Thread.currentThread().interrupt();
            }
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,isStarted,boolean isStarted(),"[104, 106]","{'A609': [(104, 106)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    public boolean isStarted() {
        return monitorThread != null;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,getNumGcWarnThresholdExceeded,long getNumGcWarnThresholdExceeded(),"[108, 110]","{'A609': [(108, 110)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    public long getNumGcWarnThresholdExceeded() {
        return numGcWarnThresholdExceeded;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,getNumGcInfoThresholdExceeded,long getNumGcInfoThresholdExceeded(),"[112, 114]","{'A609': [(112, 114)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    public long getNumGcInfoThresholdExceeded() {
        return numGcInfoThresholdExceeded;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,getTotalGcExtraSleepTime,long getTotalGcExtraSleepTime(),"[116, 118]","{'A609': [(116, 118)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    public long getTotalGcExtraSleepTime() {
        return totalGcExtraSleepTime;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,formatMessage,"String formatMessage(long,Map<String, GcTimes>,Map<String, GcTimes>)","[120, 144]","{'A583': [(120, 120), (133, 137)], 'A609': [(121, 132), (138, 144)]}","{'A583': 0.24, 'A609': 0.76}",A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    private String formatMessage(long extraSleepTime, Map<String, GcTimes> gcTimesAfterSleep, Map<String, GcTimes> gcTimesBeforeSleep) {

        Set<String> gcBeanNames = new HashSet<>(gcTimesAfterSleep.keySet());
        gcBeanNames.retainAll(gcTimesBeforeSleep.keySet());
        List<String> gcDiffs = new ArrayList<>();

        for (String name : gcBeanNames) {
            GcTimes diff = gcTimesAfterSleep.get(name).subtract(gcTimesBeforeSleep.get(name));
            if (diff.gcCount != 0) {
                gcDiffs.add(""GC pool '"" + name + ""' had collection(s): "" + diff.toString());
            }
        }

        String ret = String.format(""Detected pause in JVM or host machine (eg GC): pause of approximately %d ms, ""
                                   + ""total pause: info level: %d, warn level: %d %n"",
                                   extraSleepTime,
                                   numGcInfoThresholdExceeded,
                                   numGcWarnThresholdExceeded);
        if (gcDiffs.isEmpty()) {
            ret += (""No GCs detected"");
        } else {
            ret += String.join(""\n"", gcDiffs);
        }
        return ret;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor,getGcTimes,"Map<String, GcTimes> getGcTimes()","[146, 153]","{'A609': [(146, 153)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"    private Map<String, GcTimes> getGcTimes() {
        Map<String, GcTimes> map = new HashMap<>();
        List<GarbageCollectorMXBean> gcBeans = ManagementFactory.getGarbageCollectorMXBeans();
        for (GarbageCollectorMXBean gcBean : gcBeans) {
            map.put(gcBean.getName(), new GcTimes(gcBean));
        }
        return map;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor.GcTimes,subtract,GcTimes subtract(GcTimes),"[170, 172]","{'A583': [(171, 171)], 'A609': [(170, 170), (172, 172)]}","{'A583': 0.3333333333333333, 'A609': 0.6666666666666666}",A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"        private GcTimes subtract(GcTimes other) {
            return new GcTimes(this.gcCount - other.gcCount, this.gcTimeMillis - other.gcTimeMillis);
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor.GcTimes,toString,String toString(),"[174, 176]","{'A609': [(174, 176)]}",{'A609': 1.0},A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"        public String toString() {
            return ""count="" + gcCount + "" time="" + gcTimeMillis + ""ms"";
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/JvmPauseMonitor.java,JvmPauseMonitor.JVMMonitor,run,void run(),"[182, 209]","{'A583': [(185, 185)], 'A609': [(182, 184), (186, 194), (198, 209)], 'A675': [(195, 197)]}","{'A583': 0.03571428571428571, 'A609': 0.8571428571428571, 'A675': 0.10714285714285714}",A609,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/JvmPauseMonitorTest.java,"        @Override
        public void run() {
            Map<String, GcTimes> gcTimesBeforeSleep = getGcTimes();
            LOG.info(""Starting JVM Pause Monitor with infoThresholdMs:{} warnThresholdMs:{} and sleepTimeMs:{}"", infoThresholdMs, warnThresholdMs, sleepTimeMs);
            while (shouldRun) {
                long startTime = Instant.now().toEpochMilli();
                try {
                    Thread.sleep(sleepTimeMs);
                } catch (InterruptedException ie) {
                    return;
                }
                long endTime = Instant.now().toEpochMilli();
                long extraSleepTime = (endTime - startTime) - sleepTimeMs;
                if (extraSleepTime >= 0) {
                    ServerMetrics.getMetrics().JVM_PAUSE_TIME.add(extraSleepTime);
                }
                Map<String, GcTimes> gcTimesAfterSleep = getGcTimes();
                if (extraSleepTime > warnThresholdMs) {
                    ++numGcWarnThresholdExceeded;
                    LOG.warn(formatMessage(extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));
                } else if (extraSleepTime > infoThresholdMs) {
                    ++numGcInfoThresholdExceeded;
                    LOG.info(formatMessage(extraSleepTime, gcTimesAfterSleep, gcTimesBeforeSleep));
                }
                totalGcExtraSleepTime += extraSleepTime;
                gcTimesBeforeSleep = gcTimesAfterSleep;
            }
        }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaCountLimit,"Map<String, Number> getQuotaCountLimit(DataTree)","[50, 52]","{'A586': [(50, 52)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    public static Map<String, Number> getQuotaCountLimit(final DataTree dataTree) {
        return getQuotaLimitOrUsage(dataTree, QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_COUNT_LIMIT);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaBytesLimit,"Map<String, Number> getQuotaBytesLimit(DataTree)","[61, 63]","{'A586': [(61, 63)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    public static Map<String, Number> getQuotaBytesLimit(final DataTree dataTree) {
        return getQuotaLimitOrUsage(dataTree, QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_BYTES_LIMIT);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaCountUsage,"Map<String, Number> getQuotaCountUsage(DataTree)","[72, 74]","{'A586': [(72, 74)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    public static Map<String, Number> getQuotaCountUsage(final DataTree dataTree) {
        return getQuotaLimitOrUsage(dataTree, QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_COUNT_USAGE);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaBytesUsage,"Map<String, Number> getQuotaBytesUsage(DataTree)","[83, 85]","{'A586': [(83, 85)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    public static Map<String, Number> getQuotaBytesUsage(final DataTree dataTree) {
        return getQuotaLimitOrUsage(dataTree, QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_BYTES_USAGE);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaLimitOrUsage,"Map<String, Number> getQuotaLimitOrUsage(DataTree,QUOTA_LIMIT_USAGE_METRIC_TYPE)","[88, 95]","{'A586': [(88, 95)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    private static Map<String, Number> getQuotaLimitOrUsage(final DataTree dataTree,
                                                            final QUOTA_LIMIT_USAGE_METRIC_TYPE type) {
        final Map<String, Number> metricsMap = new ConcurrentHashMap<>();
        if (dataTree != null) {
            getQuotaLimitOrUsage(Quotas.quotaZookeeper, metricsMap, type, dataTree);
        }
        return metricsMap;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaLimitOrUsage,"void getQuotaLimitOrUsage(String,Map<String, Number>,QUOTA_LIMIT_USAGE_METRIC_TYPE,DataTree)","[97, 118]","{'A586': [(97, 118)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    private static void getQuotaLimitOrUsage(final String path,
                                     final Map<String, Number> metricsMap,
                                     final QUOTA_LIMIT_USAGE_METRIC_TYPE type,
                                     final DataTree dataTree) {
        final DataNode node = dataTree.getNode(path);
        if (node == null) {
            return;
        }
        final String[] children;
        synchronized (node) {
            children = node.getChildren().toArray(new String[0]);
        }
        if (children.length == 0) {
            if (shouldCollect(path, type)) {
                collectQuotaLimitOrUsage(path, node, metricsMap, type);
            }
            return;
        }
        for (final String child : children) {
            getQuotaLimitOrUsage(path + ""/"" + child, metricsMap, type, dataTree);
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,shouldCollect,"boolean shouldCollect(String,QUOTA_LIMIT_USAGE_METRIC_TYPE)","[120, 125]","{'A586': [(120, 125)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    static boolean shouldCollect(final String path, final QUOTA_LIMIT_USAGE_METRIC_TYPE type) {
        return path.endsWith(LIMIT_END_STRING)
                && (QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_COUNT_LIMIT == type || QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_BYTES_LIMIT == type)
                || path.endsWith(STATS_END_STRING)
                && (QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_COUNT_USAGE == type || QUOTA_LIMIT_USAGE_METRIC_TYPE.QUOTA_BYTES_USAGE == type);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,collectQuotaLimitOrUsage,"void collectQuotaLimitOrUsage(String,DataNode,Map<String, Number>,QUOTA_LIMIT_USAGE_METRIC_TYPE)","[127, 155]","{'A586': [(127, 155)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    static void collectQuotaLimitOrUsage(final String path,
                                         final DataNode node,
                                         final Map<String, Number> metricsMap,
                                         final QUOTA_LIMIT_USAGE_METRIC_TYPE type) {
        final String namespace = PathUtils.getTopNamespace(Quotas.trimQuotaPath(path));
        if (namespace == null) {
            return;
        }
        final byte[] data = node.getData();
        if (data == null) {
            return;
        }
        final StatsTrack statsTrack = new StatsTrack(data);
        switch (type) {
            case QUOTA_COUNT_LIMIT:
                aggregateQuotaLimitOrUsage(namespace, metricsMap, getQuotaLimit(statsTrack.getCountHardLimit(), statsTrack.getCount()));
                break;
            case QUOTA_BYTES_LIMIT:
                aggregateQuotaLimitOrUsage(namespace, metricsMap, getQuotaLimit(statsTrack.getByteHardLimit(), statsTrack.getBytes()));
                break;
            case QUOTA_COUNT_USAGE:
                aggregateQuotaLimitOrUsage(namespace, metricsMap, statsTrack.getCount());
                break;
            case QUOTA_BYTES_USAGE:
                aggregateQuotaLimitOrUsage(namespace, metricsMap, statsTrack.getBytes());
                break;
            default:
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,getQuotaLimit,"long getQuotaLimit(long,long)","[158, 160]","{'A586': [(158, 160)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    static long getQuotaLimit(final long hardLimit, final long limit) {
        return hardLimit > -1 ? hardLimit : limit;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/QuotaMetricsUtils.java,QuotaMetricsUtils,aggregateQuotaLimitOrUsage,"void aggregateQuotaLimitOrUsage(String,Map<String, Number>,long)","[162, 166]","{'A586': [(162, 166)]}",{'A586': 1.0},A586,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/QuotaMetricsUtilsTest.java,"    private static void aggregateQuotaLimitOrUsage(final String namespace,
                                           final Map<String, Number> metricsMap,
                                           final long limitOrUsage) {
        metricsMap.put(namespace, metricsMap.getOrDefault(namespace, 0).longValue() + limitOrUsage);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,add,boolean add(Integer),"[71, 81]","{'A612': [(71, 81)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized boolean add(Integer elementBit) {
        if (elementBit == null || elementBits.get(elementBit)) {
            return false;
        }
        if (cache.size() < cacheSize) {
            cache.add(elementBit);
        }
        elementBits.set(elementBit);
        elementCount++;
        return true;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,remove,"int remove(Set<Integer>,BitSet)","[86, 92]","{'A612': [(86, 92)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized int remove(Set<Integer> bitSet, BitSet bits) {
        cache.removeAll(bitSet);
        elementBits.andNot(bits);
        int elementCountBefore = elementCount;
        elementCount = elementBits.cardinality();
        return elementCountBefore - elementCount;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,remove,boolean remove(Integer),"[94, 103]","{'A612': [(94, 103)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized boolean remove(Integer elementBit) {
        if (elementBit == null || !elementBits.get(elementBit)) {
            return false;
        }

        cache.remove(elementBit);
        elementBits.clear(elementBit);
        elementCount--;
        return true;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,contains,boolean contains(Integer),"[105, 110]","{'A612': [(105, 110)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized boolean contains(Integer elementBit) {
        if (elementBit == null) {
            return false;
        }
        return elementBits.get(elementBit);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,size,int size(),"[112, 114]","{'A612': [(112, 114)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized int size() {
        return elementCount;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,iterator,Iterator<Integer> iterator(),"[120, 151]","{'A612': [(120, 121), (126, 134), (136, 151)], 'A584': [(122, 125), (135, 135)]}","{'A612': 0.84375, 'A584': 0.15625}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    @Override
    public Iterator<Integer> iterator() {
        // sample current size at the beginning
        int currentSize = size();

        if (cache.size() == currentSize) {
            return cache.iterator();
        }

        return new Iterator<Integer>() {
            int returnedCount = 0;
            int bitIndex = 0;

            @Override
            public boolean hasNext() {
                return returnedCount < currentSize;
            }

            @Override
            public Integer next() {
                int bit = elementBits.nextSetBit(bitIndex);
                bitIndex = bit + 1;
                returnedCount++;
                return bit;
            }

            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }
        };
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,hasNext,boolean hasNext(),"[133, 136]","{'A612': [(133, 134), (136, 136)], 'A584': [(135, 135)]}","{'A612': 0.75, 'A584': 0.25}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"            @Override
            public boolean hasNext() {
                return returnedCount < currentSize;
            }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,next,Integer next(),"[138, 144]","{'A612': [(138, 144)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"            @Override
            public Integer next() {
                int bit = elementBits.nextSetBit(bitIndex);
                bitIndex = bit + 1;
                returnedCount++;
                return bit;
            }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,remove,void remove(),"[146, 149]","{'A612': [(146, 149)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"            @Override
            public void remove() {
                throw new UnsupportedOperationException();
            }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,cachedSize,int cachedSize(),"[154, 156]","{'A612': [(154, 156)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized int cachedSize() {
        return cache.size();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/BitHashSet.java,BitHashSet,isEmpty,boolean isEmpty(),"[158, 160]","{'A612': [(158, 160)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/BitHashSetTest.java,"    public synchronized boolean isEmpty() {
        return elementCount == 0;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java,LogChopper,main,void main(String[]),"[48, 69]","{'A583': [(48, 48), (59, 59)], 'A647': [(49, 53), (55, 58), (60, 67), (69, 69)], 'A584': [(54, 54), (68, 68)]}","{'A583': 0.09090909090909091, 'A647': 0.8181818181818182, 'A584': 0.09090909090909091}",A647,,"    public static void main(String[] args) {
        ExitCode rc = ExitCode.INVALID_INVOCATION;
        if (args.length != 3) {
            System.out.println(""Usage: LogChopper zxid_to_chop_to txn_log_to_chop chopped_filename"");
            System.out.println(""    this program will read the txn_log_to_chop file and copy all the transactions"");
            System.out.println(""    from it up to (and including) the given zxid into chopped_filename."");
            ServiceUtils.requestSystemExit(rc.getValue());
        }
        String txnLog = args[1];
        String choppedLog = args[2];

        try (InputStream is = new BufferedInputStream(new FileInputStream(txnLog)); OutputStream os = new BufferedOutputStream(new FileOutputStream(choppedLog))) {
            long zxid = Long.decode(args[0]);

            if (chop(is, os, zxid)) {
                rc = ExitCode.EXECUTION_FINISHED;
            }
        } catch (Exception e) {
            System.out.println(""Got exception: "" + e.getMessage());
        }
        ServiceUtils.requestSystemExit(rc.getValue());
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/LogChopper.java,LogChopper,chop,"boolean chop(InputStream,OutputStream,long)","[71, 156]","{'A583': [(82, 84), (113, 113), (134, 134), (136, 136), (152, 152)], 'A647': [(71, 81), (85, 112), (114, 114), (118, 133), (135, 135), (137, 151), (153, 156)], 'A612': [(115, 117)]}","{'A583': 0.08139534883720931, 'A647': 0.8837209302325582, 'A612': 0.03488372093023256}",A647,,"    public static boolean chop(InputStream is, OutputStream os, long zxid) throws IOException {
        BinaryInputArchive logStream = BinaryInputArchive.getArchive(is);
        BinaryOutputArchive choppedStream = BinaryOutputArchive.getArchive(os);
        FileHeader fhdr = new FileHeader();
        fhdr.deserialize(logStream, ""fileheader"");

        if (fhdr.getMagic() != FileTxnLog.TXNLOG_MAGIC) {
            System.err.println(""Invalid magic number in txn log file"");
            return false;
        }
        System.out.println(""ZooKeeper Transactional Log File with dbid ""
                           + fhdr.getDbid()
                           + "" txnlog format version ""
                           + fhdr.getVersion());

        fhdr.serialize(choppedStream, ""fileheader"");
        int count = 0;
        boolean hasZxid = false;
        long previousZxid = -1;
        while (true) {
            long crcValue;
            byte[] bytes;
            try {
                crcValue = logStream.readLong(""crcvalue"");

                bytes = logStream.readBuffer(""txnEntry"");
            } catch (EOFException e) {
                System.out.println(""EOF reached after "" + count + "" txns."");
                // returning false because nothing was chopped
                return false;
            }
            if (bytes.length == 0) {
                // Since we preallocate, we define EOF to be an
                // empty transaction
                System.out.println(""EOF reached after "" + count + "" txns."");
                // returning false because nothing was chopped
                return false;
            }

            Checksum crc = new Adler32();
            crc.update(bytes, 0, bytes.length);
            if (crcValue != crc.getValue()) {
                throw new IOException(""CRC doesn't match "" + crcValue + "" vs "" + crc.getValue());
            }
            TxnLogEntry entry = SerializeUtils.deserializeTxn(bytes);
            TxnHeader hdr = entry.getHeader();
            Record txn = entry.getTxn();
            if (logStream.readByte(""EOR"") != 'B') {
                System.out.println(""Last transaction was partial."");
                throw new EOFException(""Last transaction was partial."");
            }

            final long txnZxid = hdr.getZxid();
            if (txnZxid == zxid) {
                hasZxid = true;
            }

            // logging the gap to make the inconsistency investigation easier
            if (previousZxid != -1 && txnZxid != previousZxid + 1) {
                long txnEpoch = ZxidUtils.getEpochFromZxid(txnZxid);
                long txnCounter = ZxidUtils.getCounterFromZxid(txnZxid);
                long previousEpoch = ZxidUtils.getEpochFromZxid(previousZxid);
                if (txnEpoch == previousEpoch) {
                    System.out.println(String.format(""There is intra-epoch gap between %x and %x"", previousZxid, txnZxid));
                } else if (txnCounter != 1) {
                    System.out.println(String.format(""There is inter-epoch gap between %x and %x"", previousZxid, txnZxid));
                }
            }
            previousZxid = txnZxid;

            if (txnZxid > zxid) {
                if (count == 0 || !hasZxid) {
                    System.out.println(String.format(""This log does not contain zxid %x"", zxid));
                    return false;
                }
                System.out.println(String.format(""Chopping at %x new log has %d records"", zxid, count));
                return true;
            }

            choppedStream.writeLong(crcValue, ""crcvalue"");
            choppedStream.writeBuffer(bytes, ""txnEntry"");
            choppedStream.writeByte((byte) 'B', ""EOR"");

            count++;
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ZxidUtils.java,ZxidUtils,getEpochFromZxid,long getEpochFromZxid(long),"[23, 25]","{'A583': [(23, 25)]}",{'A583': 1.0},A583,,"    public static long getEpochFromZxid(long zxid) {
        return zxid >> 32L;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ZxidUtils.java,ZxidUtils,getCounterFromZxid,long getCounterFromZxid(long),"[26, 28]","{'A583': [(26, 28)]}",{'A583': 1.0},A583,,"    public static long getCounterFromZxid(long zxid) {
        return zxid & 0xffffffffL;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ZxidUtils.java,ZxidUtils,makeZxid,"long makeZxid(long,long)","[29, 31]","{'A583': [(29, 31)]}",{'A583': 1.0},A583,,"    public static long makeZxid(long epoch, long counter) {
        return (epoch << 32L) | (counter & 0xffffffffL);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ZxidUtils.java,ZxidUtils,zxidToString,String zxidToString(long),"[32, 34]","{'A583': [(32, 34)]}",{'A583': 1.0},A583,,"    public static String zxidToString(long zxid) {
        return Long.toHexString(zxid);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/OSMXBean.java,OSMXBean,getUnix,boolean getUnix(),"[61, 66]","{'A583': [(65, 65)], 'A591': [(61, 64), (66, 66)]}","{'A583': 0.16666666666666666, 'A591': 0.8333333333333334}",A591,,"    public boolean getUnix() {
        if (windows) {
            return false;
        }
        return (!ibmvendor || linux);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/OSMXBean.java,OSMXBean,getOSUnixMXBeanMethod,Long getOSUnixMXBeanMethod(String),"[74, 90]","{'A583': [(74, 74), (82, 82), (84, 84), (86, 86)], 'A591': [(75, 81), (83, 83), (85, 85), (88, 90)], 'A589': [(87, 87)]}","{'A583': 0.23529411764705882, 'A591': 0.7058823529411765, 'A589': 0.058823529411764705}",A591,,"    private Long getOSUnixMXBeanMethod(String mBeanMethodName) {
        Object unixos;
        Class<?> classRef;
        Method mBeanMethod;

        try {
            classRef = Class.forName(""com.sun.management.UnixOperatingSystemMXBean"");
            if (classRef.isInstance(osMbean)) {
                mBeanMethod = classRef.getDeclaredMethod(mBeanMethodName);
                unixos = classRef.cast(osMbean);
                return (Long) mBeanMethod.invoke(unixos);
            }
        } catch (Exception e) {
            LOG.warn(""Not able to load class or method for com.sun.management.UnixOperatingSystemMXBean."", e);
        }
        return null;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/OSMXBean.java,OSMXBean,getOpenFileDescriptorCount,long getOpenFileDescriptorCount(),"[98, 132]","{'A583': [(98, 98), (100, 100), (103, 103), (105, 105), (113, 114), (116, 116)], 'A591': [(99, 99), (101, 102), (104, 104), (106, 112), (115, 115), (117, 132)]}","{'A583': 0.2, 'A591': 0.8}",A591,,"    public long getOpenFileDescriptorCount() {
        Long ofdc;

        if (!ibmvendor) {
            ofdc = getOSUnixMXBeanMethod(""getOpenFileDescriptorCount"");
            return (ofdc != null ? ofdc.longValue() : -1);
        }

        try {
            //need to get the PID number of the process first
            RuntimeMXBean rtmbean = ManagementFactory.getRuntimeMXBean();
            String rtname = rtmbean.getName();
            String[] pidhost = rtname.split(""@"");

            //using linux bash commands to retrieve info
            Process p = Runtime.getRuntime()
                               .exec(new String[]{""bash"", ""-c"", ""ls /proc/"" + pidhost[0] + ""/fdinfo | wc -l""});
            InputStream in = p.getInputStream();
            BufferedReader output = new BufferedReader(new InputStreamReader(in));

            try {
                String openFileDesCount;
                if ((openFileDesCount = output.readLine()) != null) {
                    return Long.parseLong(openFileDesCount);
                }
            } finally {
                if (output != null) {
                    output.close();
                }
            }
        } catch (IOException ie) {
            LOG.warn(""Not able to get the number of open file descriptors"", ie);
        }
        return -1;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/OSMXBean.java,OSMXBean,getMaxFileDescriptorCount,long getMaxFileDescriptorCount(),"[140, 168]","{'A583': [(140, 140), (145, 145), (147, 147), (150, 150), (152, 152), (168, 168)], 'A591': [(141, 144), (146, 146), (148, 149), (151, 151), (153, 167)]}","{'A583': 0.20689655172413793, 'A591': 0.7931034482758621}",A591,,"    public long getMaxFileDescriptorCount() {
        Long mfdc;

        if (!ibmvendor) {
            mfdc = getOSUnixMXBeanMethod(""getMaxFileDescriptorCount"");
            return (mfdc != null ? mfdc.longValue() : -1);
        }

        try {
            //using linux bash commands to retrieve info
            Process p = Runtime.getRuntime().exec(new String[]{""bash"", ""-c"", ""ulimit -n""});
            InputStream in = p.getInputStream();
            BufferedReader output = new BufferedReader(new InputStreamReader(in));

            try {
                String maxFileDesCount;
                if ((maxFileDesCount = output.readLine()) != null) {
                    return Long.parseLong(maxFileDesCount);
                }
            } finally {
                if (output != null) {
                    output.close();
                }
            }
        } catch (IOException ie) {
            LOG.warn(""Not able to get the max number of file descriptors"", ie);
        }
        return -1;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ConfigUtils.java,ConfigUtils,getClientConfigStr,String getClientConfigStr(String),"[30, 67]","{'A583': [(30, 31), (33, 33), (42, 64)], 'A590': [(32, 32), (35, 41), (65, 67)], 'A591': [(34, 34)]}","{'A583': 0.6842105263157895, 'A590': 0.2894736842105263, 'A591': 0.02631578947368421}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/ConfigUtilsTest.java,"    public static String getClientConfigStr(String configData) {
        Properties props = new Properties();
        try {
            props.load(new StringReader(configData));
        } catch (IOException e) {
            e.printStackTrace();
            return """";
        }
        StringBuffer sb = new StringBuffer();
        boolean first = true;
        String version = """";
        for (Entry<Object, Object> entry : props.entrySet()) {
            String key = entry.getKey().toString().trim();
            String value = entry.getValue().toString().trim();
            if (key.equals(""version"")) {
                version = value;
            }
            if (!key.startsWith(""server."")) {
                continue;
            }
            QuorumPeer.QuorumServer qs;
            try {
                qs = new QuorumPeer.QuorumServer(-1, value);
            } catch (ConfigException e) {
                e.printStackTrace();
                continue;
            }
            if (!first) {
                sb.append("","");
            } else {
                first = false;
            }
            if (null != qs.clientAddr) {
                sb.append(qs.clientAddr.getHostString() + "":"" + qs.clientAddr.getPort());
            }
        }
        return version + "" "" + sb.toString();
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ConfigUtils.java,ConfigUtils,getHostAndPort,String[] getHostAndPort(String),"[76, 96]","{'A583': [(76, 76), (86, 90), (92, 92)], 'A682': [(77, 77), (79, 81), (93, 96)], 'A641': [(78, 78), (82, 85), (91, 91)]}","{'A583': 0.3333333333333333, 'A682': 0.38095238095238093, 'A641': 0.2857142857142857}",A682,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/ConfigUtilsTest.java,"    public static String[] getHostAndPort(String s) throws ConfigException {
        if (s.startsWith(""["")) {
            int i = s.indexOf(""]"");
            if (i < 0) {
                throw new ConfigException(s + "" starts with '[' but has no matching ']:'"");
            }
            if (i + 2 == s.length()) {
                throw new ConfigException(s + "" doesn't have a port after colon"");
            }
            if (i + 2 < s.length()) {
                String[] sa = s.substring(i + 2).split("":"");
                String[] nsa = new String[sa.length + 1];
                nsa[0] = s.substring(1, i);
                System.arraycopy(sa, 0, nsa, 1, sa.length);
                return nsa;
            }
            return new String[]{s.replaceAll(""\\[|\\]"", """")};
        } else {
            return s.split("":"");
        }
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/ConfigUtils.java,ConfigUtils,getPropertyBackwardCompatibleWay,String getPropertyBackwardCompatibleWay(String),"[109, 121]","{'A714': [(109, 121)]}",{'A714': 1.0},A714,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/ConfigUtilsTest.java,"    public static String getPropertyBackwardCompatibleWay(String newPropertyKey) {
        String newKeyValue = System.getProperty(newPropertyKey);
        if (newKeyValue != null) {
            return newKeyValue.trim();
        }
        String oldPropertyKey = newPropertyKey.replace(""zookeeper."", """");
        String oldKeyValue = System.getProperty(oldPropertyKey);

        if (oldKeyValue != null) {
            return oldKeyValue.trim();
        }
        return null;
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/SerializeUtils.java,SerializeUtils,deserializeTxn,TxnLogEntry deserializeTxn(byte[]),"[56, 143]","{'A583': [(102, 102), (107, 107), (110, 110)], 'A590': [(61, 61), (63, 70), (74, 74), (76, 77), (84, 84), (86, 101), (103, 104), (129, 129), (143, 143)], 'A639': [(58, 60), (62, 62), (78, 80), (105, 106), (108, 109), (111, 120), (125, 128)], 'A612': [(56, 57), (71, 73), (121, 124), (130, 142)], 'A616': [(81, 83), (85, 85)], 'A591': [(75, 75)]}","{'A583': 0.03409090909090909, 'A590': 0.375, 'A639': 0.2840909090909091, 'A612': 0.25, 'A616': 0.045454545454545456, 'A591': 0.011363636363636364}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/SerializeUtilsTest.java,"    public static TxnLogEntry deserializeTxn(byte[] txnBytes) throws IOException {
        TxnHeader hdr = new TxnHeader();
        final ByteArrayInputStream bais = new ByteArrayInputStream(txnBytes);
        InputArchive ia = BinaryInputArchive.getArchive(bais);

        hdr.deserialize(ia, ""hdr"");
        bais.mark(bais.available());
        Record txn = null;
        switch (hdr.getType()) {
        case OpCode.createSession:
            // This isn't really an error txn; it just has the same
            // format. The error represents the timeout
            txn = new CreateSessionTxn();
            break;
        case OpCode.closeSession:
            txn = ZooKeeperServer.isCloseSessionTxnEnabled()
                    ?  new CloseSessionTxn() : null;
            break;
        case OpCode.create:
        case OpCode.create2:
            txn = new CreateTxn();
            break;
        case OpCode.createTTL:
            txn = new CreateTTLTxn();
            break;
        case OpCode.createContainer:
            txn = new CreateContainerTxn();
            break;
        case OpCode.delete:
        case OpCode.deleteContainer:
            txn = new DeleteTxn();
            break;
        case OpCode.reconfig:
        case OpCode.setData:
            txn = new SetDataTxn();
            break;
        case OpCode.setACL:
            txn = new SetACLTxn();
            break;
        case OpCode.error:
            txn = new ErrorTxn();
            break;
        case OpCode.multi:
            txn = new MultiTxn();
            break;
        default:
            throw new IOException(""Unsupported Txn with type="" + hdr.getType());
        }
        if (txn != null) {
            try {
                txn.deserialize(ia, ""txn"");
            } catch (EOFException e) {
                // perhaps this is a V0 Create
                if (hdr.getType() == OpCode.create) {
                    CreateTxn create = (CreateTxn) txn;
                    bais.reset();
                    CreateTxnV0 createv0 = new CreateTxnV0();
                    createv0.deserialize(ia, ""txn"");
                    // cool now make it V1. a -1 parentCVersion will
                    // trigger fixup processing in processTxn
                    create.setPath(createv0.getPath());
                    create.setData(createv0.getData());
                    create.setAcl(createv0.getAcl());
                    create.setEphemeral(createv0.getEphemeral());
                    create.setParentCVersion(-1);
                } else if (hdr.getType() == OpCode.closeSession) {
                    // perhaps this is before CloseSessionTxn was added,
                    // ignore it and reset txn to null
                    txn = null;
                } else {
                    throw e;
                }
            }
        }
        TxnDigest digest = null;

        if (ZooKeeperServer.isDigestEnabled()) {
            digest = new TxnDigest();
            try {
                digest.deserialize(ia, ""digest"");
            } catch (EOFException exception) {
                // may not have digest in the txn
                digest = null;
            }
        }

        return new TxnLogEntry(txn, hdr, digest);
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/SerializeUtils.java,SerializeUtils,deserializeSnapshot,"void deserializeSnapshot(DataTree,InputArchive,Map<Long, Integer>)","[145, 160]","{'A583': [(145, 145), (152, 155)], 'A590': [(158, 158), (160, 160)], 'A591': [(146, 150), (157, 157), (159, 159)], 'A596': [(151, 151), (156, 156)]}","{'A583': 0.3125, 'A590': 0.125, 'A591': 0.4375, 'A596': 0.125}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/SerializeUtilsTest.java,"    public static void deserializeSnapshot(DataTree dt, InputArchive ia, Map<Long, Integer> sessions) throws IOException {
        int count = ia.readInt(""count"");
        while (count > 0) {
            long id = ia.readLong(""id"");
            int to = ia.readInt(""timeout"");
            sessions.put(id, to);
            if (LOG.isTraceEnabled()) {
                ZooTrace.logTraceMessage(
                    LOG,
                    ZooTrace.SESSION_TRACE_MASK,
                    ""loadData --- session in archive: "" + id + "" with timeout: "" + to);
            }
            count--;
        }
        dt.deserialize(ia, ""tree"");
    }
"
org.apache.zookeeper.server.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/util/SerializeUtils.java,SerializeUtils,serializeSnapshot,"void serializeSnapshot(DataTree,OutputArchive,Map<Long, Integer>)","[162, 170]","{'A583': [(162, 162)], 'A590': [(164, 170)], 'A605': [(163, 163)]}","{'A583': 0.1111111111111111, 'A590': 0.7777777777777778, 'A605': 0.1111111111111111}",A590,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/util/SerializeUtilsTest.java,"    public static void serializeSnapshot(DataTree dt, OutputArchive oa, Map<Long, Integer> sessions) throws IOException {
        HashMap<Long, Integer> sessSnap = new HashMap<>(sessions);
        oa.writeInt(sessSnap.size(), ""count"");
        for (Entry<Long, Integer> entry : sessSnap.entrySet()) {
            oa.writeLong(entry.getKey().longValue(), ""id"");
            oa.writeInt(entry.getValue().intValue(), ""timeout"");
        }
        dt.serialize(oa, ""tree"");
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,setOutstandingHandshakeLimit,void setOutstandingHandshakeLimit(int),"[100, 105]","{'A612': [(100, 105)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public void setOutstandingHandshakeLimit(int limit) {
        outstandingHandshakeLimit = limit;
        handshakeThrottlingEnabled = (secure || shouldUsePortUnification) && outstandingHandshakeLimit > 0;
        LOG.info(""handshakeThrottlingEnabled = {}, {} = {}"",
                handshakeThrottlingEnabled, OUTSTANDING_HANDSHAKE_LIMIT, outstandingHandshakeLimit);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.DualModeSslHandler,decode,"void decode(ChannelHandlerContext,ByteBuf,List<Object>)","[138, 151]","{'A647': [(138, 151)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        protected void decode(ChannelHandlerContext context, ByteBuf in, List<Object> out) throws Exception {
            if (in.readableBytes() >= 5) {
                super.decode(context, in, out);
            } else if (in.readableBytes() > 0) {
                // It requires 5 bytes to detect a proper ssl connection. In the
                // case that the server receives fewer, check if we can fail to plaintext.
                // This will occur when for any four letter work commands.
                if (TLS_HANDSHAKE_RECORD_TYPE != in.getByte(0)) {
                    LOG.debug(""first byte {} does not match TLS handshake, failing to plaintext"", in.getByte(0));
                    handleNonSsl(context);
                }
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.DualModeSslHandler,handleNonSsl,void handleNonSsl(ChannelHandlerContext),"[157, 164]","{'A647': [(157, 164)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        private void handleNonSsl(ChannelHandlerContext context) {
            ChannelHandler handler = this.newNonSslHandler(context);
            if (handler != null) {
                context.pipeline().replace(this, this.newNonSslHandlerName(), handler);
            } else {
                context.pipeline().remove(this);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.DualModeSslHandler,newSslHandler,"SslHandler newSslHandler(ChannelHandlerContext,SslContext)","[166, 174]","{'A647': [(166, 174)]}",{'A647': 1.0},A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        protected SslHandler newSslHandler(ChannelHandlerContext context, SslContext sslContext) {
            NettyServerCnxn cnxn = Objects.requireNonNull(context.channel().attr(CONNECTION_ATTRIBUTE).get());
            LOG.debug(""creating ssl handler for session {}"", cnxn.getSessionId());
            SslHandler handler = super.newSslHandler(context, sslContext);
            Future<Channel> handshakeFuture = handler.handshakeFuture();
            handshakeFuture.addListener(new CertificateVerifier(handler, cnxn));
            return handler;
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.DualModeSslHandler,newNonSslHandler,ChannelHandler newNonSslHandler(ChannelHandlerContext),"[176, 185]","{'A647': [(176, 179), (182, 185)], 'A612': [(180, 181)]}","{'A647': 0.8, 'A612': 0.2}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        protected ChannelHandler newNonSslHandler(ChannelHandlerContext context) {
            NettyServerCnxn cnxn = Objects.requireNonNull(context.channel().attr(CONNECTION_ATTRIBUTE).get());
            LOG.debug(""creating plaintext handler for session {}"", cnxn.getSessionId());
            // Mark handshake finished if it's a insecure cnxn
            updateHandshakeCountIfStarted(cnxn);
            allChannels.add(context.channel());
            addCnxn(cnxn);
            return super.newNonSslHandler(context);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,updateHandshakeCountIfStarted,void updateHandshakeCountIfStarted(NettyServerCnxn),"[189, 194]","{'A612': [(189, 194)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    private void updateHandshakeCountIfStarted(NettyServerCnxn cnxn) {
        if (cnxn != null && cnxn.getHandshakeState() == HandshakeState.STARTED) {
            cnxn.setHandshakeState(HandshakeState.FINISHED);
            outstandingHandshake.addAndGet(-1);
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,channelActive,void channelActive(ChannelHandlerContext),"[204, 281]","{'A583': [(216, 216), (219, 219), (224, 224)], 'A591': [(204, 204), (206, 206), (208, 208), (281, 281)], 'A627': [(205, 205), (207, 207), (210, 210), (225, 225), (258, 259), (262, 262)], 'A647': [(261, 261)], 'A753': [(266, 266), (276, 276), (279, 280)], 'A612': [(217, 217), (220, 223), (240, 256)], 'A584': [(218, 218), (229, 237), (265, 265), (267, 275), (277, 278)], 'A630': [(209, 209), (226, 226), (257, 257), (260, 260), (263, 264)], 'A670': [(211, 215)], 'A675': [(227, 228), (238, 239)]}","{'A583': 0.038461538461538464, 'A591': 0.05128205128205128, 'A627': 0.08974358974358974, 'A647': 0.01282051282051282, 'A753': 0.05128205128205128, 'A612': 0.28205128205128205, 'A584': 0.28205128205128205, 'A630': 0.07692307692307693, 'A670': 0.0641025641025641, 'A675': 0.05128205128205128}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void channelActive(ChannelHandlerContext ctx) throws Exception {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Channel active {}"", ctx.channel());
            }

            final Channel channel = ctx.channel();
            if (limitTotalNumberOfCnxns()) {
                ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
                channel.close();
                return;
            }
            InetAddress addr = ((InetSocketAddress) channel.remoteAddress()).getAddress();
            if (maxClientCnxns > 0 && getClientCnxnCount(addr) >= maxClientCnxns) {
                ServerMetrics.getMetrics().CONNECTION_REJECTED.add(1);
                LOG.warn(""Too many connections from {} - max is {}"", addr, maxClientCnxns);
                channel.close();
                return;
            }

            NettyServerCnxn cnxn = new NettyServerCnxn(channel, zkServer, NettyServerCnxnFactory.this);
            ctx.channel().attr(CONNECTION_ATTRIBUTE).set(cnxn);

            // Check the zkServer assigned to the cnxn is still running,
            // close it before starting the heavy TLS handshake
            if (secure && !cnxn.isZKServerRunning()) {
                boolean earlyDropSecureConnectionHandshakes = Boolean.getBoolean(EARLY_DROP_SECURE_CONNECTION_HANDSHAKES);
                if (earlyDropSecureConnectionHandshakes) {
                    LOG.info(""Zookeeper server is not running, close the connection to {} before starting the TLS handshake"",
                            cnxn.getChannel().remoteAddress());
                    ServerMetrics.getMetrics().CNXN_CLOSED_WITHOUT_ZK_SERVER_RUNNING.add(1);
                    channel.close();
                    return;
                }
            }

            if (handshakeThrottlingEnabled) {
                // Favor to check and throttling even in dual mode which
                // accepts both secure and insecure connections, since
                // it's more efficient than throttling when we know it's
                // a secure connection in DualModeSslHandler.
                //
                // From benchmark, this reduced around 15% reconnect time.
                int outstandingHandshakesNum = outstandingHandshake.addAndGet(1);
                if (outstandingHandshakesNum > outstandingHandshakeLimit) {
                    outstandingHandshake.addAndGet(-1);
                    channel.close();
                    ServerMetrics.getMetrics().TLS_HANDSHAKE_EXCEEDED.add(1);
                } else {
                    cnxn.setHandshakeState(HandshakeState.STARTED);
                }
            }

            if (secure) {
                SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);
                Future<Channel> handshakeFuture = sslHandler.handshakeFuture();
                handshakeFuture.addListener(new CertificateVerifier(sslHandler, cnxn));
            } else if (!shouldUsePortUnification) {
                allChannels.add(ctx.channel());
                addCnxn(cnxn);
            }

            if (ctx.channel().pipeline().get(SslHandler.class) == null) {
                if (zkServer != null) {
                    SocketAddress remoteAddress = cnxn.getChannel().remoteAddress();
                    if (remoteAddress != null
                            && !((InetSocketAddress) remoteAddress).getAddress().isLoopbackAddress()) {
                        LOG.trace(""NettyChannelHandler channelActive: remote={} local={}"", remoteAddress, cnxn.getChannel().localAddress());
                        zkServer.serverStats().incrementNonMTLSRemoteConnCount();
                    } else {
                        zkServer.serverStats().incrementNonMTLSLocalConnCount();
                    }
                } else {
                    LOG.trace(""Opened non-TLS connection from {} but zkServer is not running"",
                            cnxn.getChannel().remoteAddress());
                }
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,channelInactive,void channelInactive(ChannelHandlerContext),"[283, 298]","{'A583': [(288, 288)], 'A591': [(283, 283), (285, 285), (287, 287), (291, 292), (294, 294), (297, 298)], 'A627': [(284, 284), (286, 286), (289, 290), (293, 293)], 'A612': [(295, 295)], 'A604': [(296, 296)]}","{'A583': 0.0625, 'A591': 0.5, 'A627': 0.3125, 'A612': 0.0625, 'A604': 0.0625}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void channelInactive(ChannelHandlerContext ctx) throws Exception {
            if (LOG.isTraceEnabled()) {
                LOG.trace(""Channel inactive {}"", ctx.channel());
            }

            allChannels.remove(ctx.channel());
            NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).getAndSet(null);
            if (cnxn != null) {
                if (LOG.isTraceEnabled()) {
                    LOG.trace(""Channel inactive caused close {}"", cnxn);
                }
                updateHandshakeCountIfStarted(cnxn);
                cnxn.close(ServerCnxn.DisconnectReason.CHANNEL_DISCONNECTED);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,exceptionCaught,"void exceptionCaught(ChannelHandlerContext,Throwable)","[300, 309]","{'A591': [(300, 300), (304, 304), (308, 309)], 'A627': [(301, 303)], 'A612': [(306, 306)], 'A620': [(305, 305)], 'A604': [(307, 307)]}","{'A591': 0.4, 'A627': 0.3, 'A612': 0.1, 'A620': 0.1, 'A604': 0.1}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {
            LOG.warn(""Exception caught"", cause);
            NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).getAndSet(null);
            if (cnxn != null) {
                LOG.debug(""Closing {}"", cnxn);
                updateHandshakeCountIfStarted(cnxn);
                cnxn.close(ServerCnxn.DisconnectReason.CHANNEL_CLOSED_EXCEPTION);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,userEventTriggered,"void userEventTriggered(ChannelHandlerContext,Object)","[311, 341]","{'A583': [(317, 317), (323, 323)], 'A591': [(311, 311), (313, 313), (337, 337), (340, 341)], 'A627': [(312, 312), (316, 316), (318, 320), (333, 333), (336, 336), (338, 339)], 'A612': [(314, 315), (321, 322), (324, 326), (328, 332), (334, 335)], 'A620': [(327, 327)]}","{'A583': 0.06451612903225806, 'A591': 0.16129032258064516, 'A627': 0.2903225806451613, 'A612': 0.45161290322580644, 'A620': 0.03225806451612903}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {
            try {
                if (evt == NettyServerCnxn.ReadEvent.ENABLE) {
                    LOG.debug(""Received ReadEvent.ENABLE"");
                    NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).get();
                    // TODO: Not sure if cnxn can be null here. It becomes null if channelInactive()
                    // or exceptionCaught() trigger, but it's unclear to me if userEventTriggered() can run
                    // after either of those. Check for null just to be safe ...
                    if (cnxn != null) {
                        if (cnxn.getQueuedReadableBytes() > 0) {
                            cnxn.processQueuedBuffer();
                            if (advancedFlowControlEnabled && cnxn.getQueuedReadableBytes() == 0) {
                                // trigger a read if we have consumed all
                                // backlog
                                ctx.read();
                                LOG.debug(""Issued a read after queuedBuffer drained"");
                            }
                        }
                    }
                    if (!advancedFlowControlEnabled) {
                        ctx.channel().config().setAutoRead(true);
                    }
                } else if (evt == NettyServerCnxn.ReadEvent.DISABLE) {
                    LOG.debug(""Received ReadEvent.DISABLE"");
                    ctx.channel().config().setAutoRead(false);
                }
            } finally {
                ReferenceCountUtil.release(evt);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,channelRead,"void channelRead(ChannelHandlerContext,Object)","[343, 364]","{'A583': [(346, 348)], 'A591': [(354, 354), (356, 356), (360, 360), (363, 364)], 'A627': [(343, 345), (349, 349), (351, 353), (355, 355), (357, 359), (361, 362)], 'A620': [(350, 350)]}","{'A583': 0.13636363636363635, 'A591': 0.22727272727272727, 'A627': 0.5909090909090909, 'A620': 0.045454545454545456}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {
            try {
                if (LOG.isTraceEnabled()) {
                    LOG.trace(""message received called {}"", msg);
                }
                try {
                    LOG.debug(""New message {} from {}"", msg, ctx.channel());
                    NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).get();
                    if (cnxn == null) {
                        LOG.error(""channelRead() on a closed or closing NettyServerCnxn"");
                    } else {
                        cnxn.processMessage((ByteBuf) msg);
                    }
                } catch (Exception ex) {
                    LOG.error(""Unexpected exception in receive"", ex);
                    throw ex;
                }
            } finally {
                ReferenceCountUtil.release(msg);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,channelReadComplete,void channelReadComplete(ChannelHandlerContext),"[366, 377]","{'A583': [(370, 370), (372, 372)], 'A612': [(366, 369), (371, 371), (373, 377)]}","{'A583': 0.16666666666666666, 'A612': 0.8333333333333334}",A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
            if (advancedFlowControlEnabled) {
                NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).get();
                if (cnxn != null && cnxn.getQueuedReadableBytes() == 0 && cnxn.readIssuedAfterReadComplete == 0) {
                    ctx.read();
                    LOG.debug(""Issued a read since we do not have anything to consume after channelReadComplete"");
                }
            }

            ctx.fireChannelReadComplete();
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CnxnChannelHandler,write,"void write(ChannelHandlerContext,Object,ChannelPromise)","[388, 394]","{'A591': [(394, 394)], 'A627': [(388, 393)]}","{'A591': 0.14285714285714285, 'A627': 0.8571428571428571}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {
            if (LOG.isTraceEnabled()) {
                promise.addListener(onWriteCompletedTracer);
            }
            super.write(ctx, msg, promise);
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.CertificateVerifier,operationComplete,void operationComplete(Future<Channel>),"[411, 470]","{'A583': [(415, 415), (442, 442), (444, 444), (455, 455), (466, 466)], 'A647': [(411, 411), (414, 414), (416, 418), (420, 440), (447, 447), (460, 464)], 'A753': [(452, 454), (465, 465)], 'A612': [(412, 413)], 'A630': [(419, 419), (441, 441), (443, 443), (445, 446), (449, 451), (457, 459), (469, 470)], 'A675': [(467, 467)], 'A604': [(448, 448), (456, 456), (468, 468)]}","{'A583': 0.08333333333333333, 'A647': 0.5333333333333333, 'A753': 0.06666666666666667, 'A612': 0.03333333333333333, 'A630': 0.21666666666666667, 'A675': 0.016666666666666666, 'A604': 0.05}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        public void operationComplete(Future<Channel> future) {
            updateHandshakeCountIfStarted(cnxn);

            if (future.isSuccess()) {
                LOG.debug(""Successful handshake with session 0x{}"", Long.toHexString(cnxn.getSessionId()));
                SSLEngine eng = sslHandler.engine();
                // Don't try to verify certificate if we didn't ask client to present one
                if (eng.getNeedClientAuth() || eng.getWantClientAuth()) {
                    SSLSession session = eng.getSession();
                    try {
                        cnxn.setClientCertificateChain(session.getPeerCertificates());
                    } catch (SSLPeerUnverifiedException e) {
                        if (eng.getNeedClientAuth()) {
                            // Certificate was requested but not present
                            LOG.error(""Error getting peer certificates"", e);
                            cnxn.close();
                            return;
                        } else {
                            // Certificate was requested but was optional
                            // TODO: what auth info should we set on the connection?
                            final Channel futureChannel = future.getNow();
                            allChannels.add(Objects.requireNonNull(futureChannel));
                            addCnxn(cnxn);
                            return;
                        }
                    } catch (Exception e) {
                        LOG.error(""Error getting peer certificates"", e);
                        cnxn.close();
                        return;
                    }

                    String authProviderProp = System.getProperty(x509Util.getSslAuthProviderProperty(), ""x509"");

                    X509AuthenticationProvider authProvider = (X509AuthenticationProvider) ProviderRegistry.getProvider(authProviderProp);

                    if (authProvider == null) {
                        LOG.error(""X509 Auth provider not found: {}"", authProviderProp);
                        cnxn.close(ServerCnxn.DisconnectReason.AUTH_PROVIDER_NOT_FOUND);
                        return;
                    }

                    KeeperException.Code code = authProvider.handleAuthentication(cnxn, null);
                    if (KeeperException.Code.OK != code) {
                        zkServer.serverStats().incrementAuthFailedCount();
                        LOG.error(""Authentication failed for session 0x{}"", Long.toHexString(cnxn.getSessionId()));
                        cnxn.close(ServerCnxn.DisconnectReason.SASL_AUTH_FAILURE);
                        return;
                    }
                }

                final Channel futureChannel = future.getNow();
                allChannels.add(Objects.requireNonNull(futureChannel));
                addCnxn(cnxn);
            } else {
                zkServer.serverStats().incrementAuthFailedCount();
                LOG.error(""Unsuccessful handshake with session 0x{}"", Long.toHexString(cnxn.getSessionId()));
                ServerMetrics.getMetrics().UNSUCCESSFUL_HANDSHAKE.add(1);
                cnxn.close(ServerCnxn.DisconnectReason.FAILED_HANDSHAKE);
            }
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.ReadIssuedTrackingHandler,read,void read(ChannelHandlerContext),"[477, 485]","{'A612': [(477, 485)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void read(ChannelHandlerContext ctx) throws Exception {
            NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).get();
            if (cnxn != null) {
                cnxn.readIssuedAfterReadComplete++;
            }

            ctx.read();
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory.ReadIssuedTrackingHandler,channelReadComplete,void channelReadComplete(ChannelHandlerContext),"[487, 495]","{'A612': [(487, 495)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"        @Override
        public void channelReadComplete(ChannelHandlerContext ctx) throws Exception {
            NettyServerCnxn cnxn = ctx.channel().attr(CONNECTION_ATTRIBUTE).get();
            if (cnxn != null) {
                cnxn.readIssuedAfterReadComplete = 0;
            }

            ctx.fireChannelReadComplete();
        }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,configureBootstrapAllocator,ServerBootstrap configureBootstrapAllocator(ServerBootstrap),"[502, 510]","{'A583': [(505, 506)], 'A627': [(502, 504), (507, 510)]}","{'A583': 0.2222222222222222, 'A627': 0.7777777777777778}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    private ServerBootstrap configureBootstrapAllocator(ServerBootstrap bootstrap) {
        ByteBufAllocator testAllocator = TEST_ALLOCATOR.get();
        if (testAllocator != null) {
            return bootstrap.option(ChannelOption.ALLOCATOR, testAllocator)
                            .childOption(ChannelOption.ALLOCATOR, testAllocator);
        } else {
            return bootstrap;
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,initChannel,void initChannel(SocketChannel),"[554, 566]","{'A583': [(554, 566)]}",{'A583': 1.0},A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"                                                             @Override
                                                             protected void initChannel(SocketChannel ch) throws Exception {
                                                                 ChannelPipeline pipeline = ch.pipeline();
                                                                 if (advancedFlowControlEnabled) {
                                                                     pipeline.addLast(readIssuedTrackingHandler);
                                                                 }
                                                                 if (secure) {
                                                                     initSSL(pipeline, false);
                                                                 } else if (shouldUsePortUnification) {
                                                                     initSSL(pipeline, true);
                                                                 }
                                                                 pipeline.addLast(""servercnxnfactory"", channelHandler);
                                                             }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,initSSL,"void initSSL(ChannelPipeline,boolean)","[572, 598]","{'A583': [(579, 580), (584, 584)], 'A647': [(575, 575), (582, 582), (591, 597)], 'A628': [(572, 573), (577, 577), (587, 588)], 'A613': [(574, 574)], 'A630': [(576, 576), (578, 578), (581, 581), (583, 583), (585, 586), (589, 590), (598, 598)]}","{'A583': 0.1111111111111111, 'A647': 0.3333333333333333, 'A628': 0.18518518518518517, 'A613': 0.037037037037037035, 'A630': 0.3333333333333333}",A647,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    private synchronized void initSSL(ChannelPipeline p, boolean supportPlaintext)
        throws X509Exception, SSLException {
        String authProviderProp = System.getProperty(x509Util.getSslAuthProviderProperty());
        SslContext nettySslContext;
        if (authProviderProp == null) {
            nettySslContext = x509Util.createNettySslContextForServer(new ZKConfig());
        } else {
            X509AuthenticationProvider authProvider = (X509AuthenticationProvider) ProviderRegistry.getProvider(
                System.getProperty(x509Util.getSslAuthProviderProperty(), ""x509""));

            if (authProvider == null) {
                LOG.error(""Auth provider not found: {}"", authProviderProp);
                throw new SSLContextException(""Could not create SSLContext with specified auth provider: "" + authProviderProp);
            }

            nettySslContext = x509Util.createNettySslContextForServer(
                new ZKConfig(), authProvider.getKeyManager(), authProvider.getTrustManager());
        }

        if (supportPlaintext) {
            p.addLast(""ssl"", new DualModeSslHandler(nettySslContext));
            LOG.debug(""dual mode SSL handler added for channel: {}"", p.channel());
        } else {
            p.addLast(""ssl"", nettySslContext.newHandler(p.channel().alloc()));
            LOG.debug(""SSL handler added for channel: {}"", p.channel());
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,closeAll,void closeAll(ServerCnxn.DisconnectReason),"[600, 616]","{'A583': [(611, 611), (615, 615)], 'A591': [(600, 600), (604, 606), (608, 608), (612, 613), (616, 616)], 'A593': [(607, 607), (610, 610)], 'A620': [(602, 603), (614, 614)], 'A604': [(601, 601), (609, 609)]}","{'A583': 0.11764705882352941, 'A591': 0.47058823529411764, 'A593': 0.11764705882352941, 'A620': 0.17647058823529413, 'A604': 0.11764705882352941}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void closeAll(ServerCnxn.DisconnectReason reason) {
        LOG.debug(""closeAll()"");

        // clear all the connections on which we are selecting
        int length = cnxns.size();
        for (ServerCnxn cnxn : cnxns) {
            try {
                // This will remove the cnxn from cnxns
                cnxn.close(reason);
            } catch (Exception e) {
                LOG.warn(""Ignoring exception closing cnxn sessionid 0x{}"", Long.toHexString(cnxn.getSessionId()), e);
            }
        }

        LOG.debug(""allChannels size: {} cnxns size: {}"", allChannels.size(), length);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,configure,"void configure(InetSocketAddress,int,int,boolean)","[618, 627]","{'A583': [(619, 619)], 'A591': [(618, 618), (620, 620), (622, 623), (627, 627)], 'A584': [(626, 626)], 'A689': [(625, 625)], 'A630': [(624, 624)], 'A670': [(621, 621)]}","{'A583': 0.1, 'A591': 0.5, 'A584': 0.1, 'A689': 0.1, 'A630': 0.1, 'A670': 0.1}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void configure(InetSocketAddress addr, int maxClientCnxns, int backlog, boolean secure) throws IOException {
        configureSaslLogin();
        initMaxCnxns();
        localAddress = addr;
        this.maxClientCnxns = maxClientCnxns;
        this.secure = secure;
        this.listenBacklog = backlog;
        LOG.info(""configure {} secure: {} on addr {}"", this, secure, addr);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getMaxClientCnxnsPerHost,int getMaxClientCnxnsPerHost(),"[630, 632]","{'A591': [(630, 632)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public int getMaxClientCnxnsPerHost() {
        return maxClientCnxns;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,setMaxClientCnxnsPerHost,void setMaxClientCnxnsPerHost(int),"[635, 637]","{'A591': [(635, 637)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public void setMaxClientCnxnsPerHost(int max) {
        maxClientCnxns = max;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getSocketListenBacklog,int getSocketListenBacklog(),"[640, 642]","{'A689': [(640, 642)]}",{'A689': 1.0},A689,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public int getSocketListenBacklog() {
        return listenBacklog;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getLocalPort,int getLocalPort(),"[644, 647]","{'A591': [(644, 647)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public int getLocalPort() {
        return localAddress.getPort();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,join,void join(),"[650, 657]","{'A583': [(652, 653)], 'A591': [(650, 651), (654, 657)]}","{'A583': 0.25, 'A591': 0.75}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void join() throws InterruptedException {
        synchronized (this) {
            while (!killed) {
                wait();
            }
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,shutdown,void shutdown(),"[659, 708]","{'A583': [(704, 704)], 'A591': [(659, 660), (677, 678), (699, 703), (705, 708)], 'A627': [(661, 670), (674, 676), (679, 684), (686, 698)], 'A604': [(685, 685)], 'A596': [(671, 673)]}","{'A583': 0.02, 'A591': 0.26, 'A627': 0.64, 'A604': 0.02, 'A596': 0.06}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void shutdown() {
        synchronized (this) {
            if (killed) {
                LOG.info(""already shutdown {}"", localAddress);
                return;
            }
        }
        LOG.info(""shutdown called {}"", localAddress);

        x509Util.close();

        if (login != null) {
            login.shutdown();
        }

        final EventLoopGroup bossGroup = bootstrap.config().group();
        final EventLoopGroup workerGroup = bootstrap.config().childGroup();
        // null if factory never started
        if (parentChannel != null) {
            ChannelFuture parentCloseFuture = parentChannel.close();
            if (bossGroup != null) {
                parentCloseFuture.addListener(future -> {
                    bossGroup.shutdownGracefully();
                });
            }
            closeAll(ServerCnxn.DisconnectReason.SERVER_SHUTDOWN);
            ChannelGroupFuture allChannelsCloseFuture = allChannels.close();
            if (workerGroup != null) {
                allChannelsCloseFuture.addListener(future -> {
                    workerGroup.shutdownGracefully();
                });
            }
        } else {
            if (bossGroup != null) {
                bossGroup.shutdownGracefully();
            }
            if (workerGroup != null) {
                workerGroup.shutdownGracefully();
            }
        }

        if (zkServer != null) {
            zkServer.shutdown();
        }
        synchronized (this) {
            killed = true;
            notifyAll();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,start,void start(),"[710, 721]","{'A591': [(710, 711), (721, 721)], 'A627': [(715, 719)], 'A620': [(720, 720)], 'A689': [(712, 714)]}","{'A591': 0.25, 'A627': 0.4166666666666667, 'A620': 0.08333333333333333, 'A689': 0.25}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void start() {
        if (listenBacklog != -1) {
            bootstrap.option(ChannelOption.SO_BACKLOG, listenBacklog);
        }
        LOG.info(""binding to port {}"", localAddress);
        parentChannel = bootstrap.bind(localAddress).syncUninterruptibly().channel();
        // Port changes after bind() if the original port was 0, update
        // localAddress to get the real port.
        localAddress = (InetSocketAddress) parentChannel.localAddress();
        LOG.info(""bound to port {}"", getLocalPort());
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,reconfigure,void reconfigure(InetSocketAddress),"[723, 746]","{'A583': [(734, 745)], 'A612': [(724, 733)], 'A702': [(723, 723)], 'A590': [(746, 746)]}","{'A583': 0.5, 'A612': 0.4166666666666667, 'A702': 0.041666666666666664, 'A590': 0.041666666666666664}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public void reconfigure(InetSocketAddress addr) {
        LOG.info(""binding to port {}, {}"", addr, localAddress);
        if (addr != null && localAddress != null) {
            if (addr.equals(localAddress) || (addr.getAddress().isAnyLocalAddress()
                    && localAddress.getAddress().isAnyLocalAddress()
                    && addr.getPort() == localAddress.getPort())) {
                 LOG.info(""address is the same, skip rebinding"");
                 return;
            }
        }

        Channel oldChannel = parentChannel;
        try {
            parentChannel = bootstrap.bind(addr).syncUninterruptibly().channel();
            // Port changes after bind() if the original port was 0, update
            // localAddress to get the real port.
            localAddress = (InetSocketAddress) parentChannel.localAddress();
            LOG.info(""bound to port {}"", getLocalPort());
        } catch (Exception e) {
            LOG.error(""Error while reconfiguring"", e);
        } finally {
            oldChannel.close();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,startup,"void startup(ZooKeeperServer,boolean)","[748, 756]","{'A583': [(749, 749)], 'A591': [(748, 748), (750, 750), (756, 756)], 'A630': [(751, 755)]}","{'A583': 0.1111111111111111, 'A591': 0.3333333333333333, 'A630': 0.5555555555555556}",A630,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void startup(ZooKeeperServer zks, boolean startServer) throws IOException, InterruptedException {
        start();
        setZooKeeperServer(zks);
        if (startServer) {
            zks.startdata();
            zks.startup();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getConnections,Iterable<ServerCnxn> getConnections(),"[758, 761]","{'A591': [(758, 761)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public Iterable<ServerCnxn> getConnections() {
        return cnxns;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getLocalAddress,InetSocketAddress getLocalAddress(),"[763, 766]","{'A591': [(763, 766)]}",{'A591': 1.0},A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public InetSocketAddress getLocalAddress() {
        return localAddress;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,addCnxn,void addCnxn(NettyServerCnxn),"[768, 779]","{'A583': [(770, 770), (774, 774)], 'A591': [(769, 769), (775, 775)], 'A627': [(779, 779)], 'A620': [(768, 768), (771, 773), (776, 778)]}","{'A583': 0.16666666666666666, 'A591': 0.16666666666666666, 'A627': 0.08333333333333333, 'A620': 0.5833333333333334}",A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    private void addCnxn(final NettyServerCnxn cnxn) {
        cnxns.add(cnxn);
        InetAddress addr = ((InetSocketAddress) cnxn.getChannel().remoteAddress()).getAddress();

        ipMap.compute(addr, (a, cnxnCount) -> {
            if (cnxnCount == null) {
                cnxnCount = new AtomicInteger();
            }
            cnxnCount.incrementAndGet();
            return cnxnCount;
        });
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,removeCnxnFromIpMap,"void removeCnxnFromIpMap(NettyServerCnxn,InetAddress)","[781, 790]","{'A583': [(783, 789)], 'A591': [(790, 790)], 'A627': [(781, 781)], 'A620': [(782, 782)]}","{'A583': 0.7, 'A591': 0.1, 'A627': 0.1, 'A620': 0.1}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    void removeCnxnFromIpMap(NettyServerCnxn cnxn, InetAddress remoteAddress) {
        ipMap.compute(remoteAddress, (addr, cnxnCount) -> {
            if (cnxnCount == null) {
                LOG.error(""Unexpected remote address {} when removing cnxn {}"", remoteAddress, cnxn);
                return null;
            }
            final int newValue = cnxnCount.decrementAndGet();
            return newValue == 0 ? null : cnxnCount;
        });
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getClientCnxnCount,int getClientCnxnCount(InetAddress),"[792, 795]","{'A583': [(793, 794)], 'A612': [(795, 795)], 'A620': [(792, 792)]}","{'A583': 0.5, 'A612': 0.25, 'A620': 0.25}",A583,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    private int getClientCnxnCount(final InetAddress addr) {
        final AtomicInteger count = ipMap.get(addr);
        return count == null ? 0 : count.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,resetAllConnectionStats,void resetAllConnectionStats(),"[797, 803]","{'A583': [(800, 800)], 'A591': [(797, 799), (801, 803)]}","{'A583': 0.14285714285714285, 'A591': 0.8571428571428571}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public void resetAllConnectionStats() {
        // No need to synchronize since cnxns is backed by a ConcurrentHashMap
        for (ServerCnxn c : cnxns) {
            c.resetStats();
        }
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getAllConnectionInfo,"Iterable<Map<String, Object>> getAllConnectionInfo(boolean)","[805, 813]","{'A591': [(805, 806), (808, 813)], 'A605': [(807, 807)]}","{'A591': 0.8888888888888888, 'A605': 0.1111111111111111}",A591,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    @Override
    public Iterable<Map<String, Object>> getAllConnectionInfo(boolean brief) {
        Set<Map<String, Object>> info = new HashSet<>();
        // No need to synchronize since cnxns is backed by a ConcurrentHashMap
        for (ServerCnxn c : cnxns) {
            info.add(c.getConnectionInfo(brief));
        }
        return info;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,setTestAllocator,void setTestAllocator(ByteBufAllocator),"[822, 824]","{'A627': [(822, 824)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    static void setTestAllocator(ByteBufAllocator allocator) {
        TEST_ALLOCATOR.set(allocator);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,clearTestAllocator,void clearTestAllocator(),"[831, 833]","{'A627': [(831, 833)]}",{'A627': 1.0},A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    static void clearTestAllocator() {
        TEST_ALLOCATOR.set(null);
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,setAdvancedFlowControlEnabled,void setAdvancedFlowControlEnabled(boolean),"[836, 838]","{'A612': [(836, 838)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public void setAdvancedFlowControlEnabled(boolean advancedFlowControlEnabled) {
        this.advancedFlowControlEnabled = advancedFlowControlEnabled;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,setSecure,void setSecure(boolean),"[841, 843]","{'A612': [(841, 843)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public void setSecure(boolean secure) {
        this.secure = secure;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getParentChannel,Channel getParentChannel(),"[846, 848]","{'A612': [(846, 848)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public Channel getParentChannel() {
        return parentChannel;
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/NettyServerCnxnFactory.java,NettyServerCnxnFactory,getOutstandingHandshakeNum,int getOutstandingHandshakeNum(),"[850, 852]","{'A612': [(850, 852)]}",{'A612': 1.0},A612,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/server/NettyServerCnxnFactoryTest.java,"    public int getOutstandingHandshakeNum() {
        return outstandingHandshake.get();
    }
"
org.apache.zookeeper.server,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/server/ExitCode.java,ExitCode,getValue,int getValue(),"[59, 61]","{'A609': [(59, 61)]}",{'A609': 1.0},A609,,"    public int getValue() {
        return value;
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,loadTrustStore,KeyStore loadTrustStore(File),"[90, 100]","{'A583': [(90, 90)], 'A627': [(91, 100)]}","{'A583': 0.09090909090909091, 'A627': 0.9090909090909091}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static KeyStore loadTrustStore(File certificateChainFile) throws IOException, GeneralSecurityException {
        KeyStore keyStore = KeyStore.getInstance(""JKS"");
        keyStore.load(null, null);

        List<X509Certificate> certificateChain = readCertificateChain(certificateChainFile);
        for (X509Certificate certificate : certificateChain) {
            X500Principal principal = certificate.getSubjectX500Principal();
            keyStore.setCertificateEntry(principal.getName(""RFC2253""), certificate);
        }
        return keyStore;
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,loadKeyStore,"KeyStore loadKeyStore(File,File,Optional<String>)","[102, 118]","{'A583': [(102, 102), (107, 108), (113, 116)], 'A627': [(103, 106), (109, 112), (117, 118)]}","{'A583': 0.4117647058823529, 'A627': 0.5882352941176471}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static KeyStore loadKeyStore(File certificateChainFile, File privateKeyFile, Optional<String> keyPassword) throws IOException, GeneralSecurityException {
        PrivateKey key = loadPrivateKey(privateKeyFile, keyPassword);

        List<X509Certificate> certificateChain = readCertificateChain(certificateChainFile);
        if (certificateChain.isEmpty()) {
            throw new CertificateException(""Certificate file does not contain any certificates: ""
                                           + certificateChainFile);
        }

        KeyStore keyStore = KeyStore.getInstance(""JKS"");
        keyStore.load(null, null);
        keyStore.setKeyEntry(""key"",
                             key,
                             keyPassword.orElse("""").toCharArray(),
                             certificateChain.toArray(new Certificate[0]));
        return keyStore;
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,readCertificateChain,List<X509Certificate> readCertificateChain(File),"[120, 123]","{'A583': [(120, 120)], 'A627': [(121, 123)]}","{'A583': 0.25, 'A627': 0.75}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static List<X509Certificate> readCertificateChain(File certificateChainFile) throws IOException, GeneralSecurityException {
        String contents = new String(Files.readAllBytes(certificateChainFile.toPath()), US_ASCII);
        return readCertificateChain(contents);
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,readCertificateChain,List<X509Certificate> readCertificateChain(String),"[125, 138]","{'A583': [(125, 125)], 'A627': [(126, 138)]}","{'A583': 0.07142857142857142, 'A627': 0.9285714285714286}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static List<X509Certificate> readCertificateChain(String certificateChain) throws CertificateException {
        Matcher matcher = CERT_PATTERN.matcher(certificateChain);
        CertificateFactory certificateFactory = CertificateFactory.getInstance(""X.509"");
        List<X509Certificate> certificates = new ArrayList<>();

        int start = 0;
        while (matcher.find(start)) {
            byte[] buffer = base64Decode(matcher.group(1));
            certificates.add((X509Certificate) certificateFactory.generateCertificate(new ByteArrayInputStream(buffer)));
            start = matcher.end();
        }

        return certificates;
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,loadPrivateKey,"PrivateKey loadPrivateKey(File,Optional<String>)","[140, 143]","{'A583': [(140, 140)], 'A627': [(141, 143)]}","{'A583': 0.25, 'A627': 0.75}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static PrivateKey loadPrivateKey(File privateKeyFile, Optional<String> keyPassword) throws IOException, GeneralSecurityException {
        String privateKey = new String(Files.readAllBytes(privateKeyFile.toPath()), US_ASCII);
        return loadPrivateKey(privateKey, keyPassword);
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,loadPrivateKey,"PrivateKey loadPrivateKey(String,Optional<String>)","[145, 182]","{'A583': [(145, 145), (162, 162), (171, 171), (177, 177)], 'A627': [(146, 161), (163, 170), (172, 176), (178, 182)]}","{'A583': 0.10526315789473684, 'A627': 0.8947368421052632}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static PrivateKey loadPrivateKey(String privateKey, Optional<String> keyPassword) throws IOException, GeneralSecurityException {
        Matcher matcher = PRIVATE_KEY_PATTERN.matcher(privateKey);
        if (!matcher.find()) {
            throw new KeyStoreException(""did not find a private key"");
        }
        byte[] encodedKey = base64Decode(matcher.group(1));

        PKCS8EncodedKeySpec encodedKeySpec;
        if (keyPassword.isPresent()) {
            EncryptedPrivateKeyInfo encryptedPrivateKeyInfo = new EncryptedPrivateKeyInfo(encodedKey);
            SecretKeyFactory keyFactory = SecretKeyFactory.getInstance(encryptedPrivateKeyInfo.getAlgName());
            SecretKey secretKey = keyFactory.generateSecret(new PBEKeySpec(keyPassword.get().toCharArray()));

            Cipher cipher = Cipher.getInstance(encryptedPrivateKeyInfo.getAlgName());
            cipher.init(DECRYPT_MODE, secretKey, encryptedPrivateKeyInfo.getAlgParameters());

            encodedKeySpec = encryptedPrivateKeyInfo.getKeySpec(cipher);
        } else {
            encodedKeySpec = new PKCS8EncodedKeySpec(encodedKey);
        }

        // this code requires a key in PKCS8 format which is not the default openssl format
        // to convert to the PKCS8 format you use : openssl pkcs8 -topk8 ...
        try {
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            return keyFactory.generatePrivate(encodedKeySpec);
        } catch (InvalidKeySpecException ignore) {
        }

        try {
            KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
            return keyFactory.generatePrivate(encodedKeySpec);
        } catch (InvalidKeySpecException ignore) {
        }

        KeyFactory keyFactory = KeyFactory.getInstance(""DSA"");
        return keyFactory.generatePrivate(encodedKeySpec);
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,loadPublicKey,PublicKey loadPublicKey(File),"[184, 187]","{'A583': [(184, 184)], 'A627': [(185, 187)]}","{'A583': 0.25, 'A627': 0.75}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static PublicKey loadPublicKey(File publicKeyFile) throws IOException, GeneralSecurityException {
        String publicKey = new String(Files.readAllBytes(publicKeyFile.toPath()), US_ASCII);
        return loadPublicKey(publicKey);
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,loadPublicKey,PublicKey loadPublicKey(String),"[189, 212]","{'A583': [(189, 189), (201, 201), (207, 207)], 'A627': [(190, 200), (202, 206), (208, 212)]}","{'A583': 0.125, 'A627': 0.875}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    public static PublicKey loadPublicKey(String publicKey) throws GeneralSecurityException {
        Matcher matcher = PUBLIC_KEY_PATTERN.matcher(publicKey);
        if (!matcher.find()) {
            throw new KeyStoreException(""did not find a public key"");
        }
        String data = matcher.group(1);
        byte[] encodedKey = base64Decode(data);

        X509EncodedKeySpec encodedKeySpec = new X509EncodedKeySpec(encodedKey);
        try {
            KeyFactory keyFactory = KeyFactory.getInstance(""RSA"");
            return keyFactory.generatePublic(encodedKeySpec);
        } catch (InvalidKeySpecException ignore) {
        }

        try {
            KeyFactory keyFactory = KeyFactory.getInstance(""EC"");
            return keyFactory.generatePublic(encodedKeySpec);
        } catch (InvalidKeySpecException ignore) {
        }

        KeyFactory keyFactory = KeyFactory.getInstance(""DSA"");
        return keyFactory.generatePublic(encodedKeySpec);
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/PemReader.java,PemReader,base64Decode,byte[] base64Decode(String),"[214, 216]","{'A583': [(214, 214)], 'A627': [(215, 216)]}","{'A583': 0.3333333333333333, 'A627': 0.6666666666666666}",A627,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/PemReaderTest.java,"    private static byte[] base64Decode(String base64) {
        return getMimeDecoder().decode(base64.getBytes(US_ASCII));
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/ServiceUtils.java,ServiceUtils,setSystemExitProcedure,void setSystemExitProcedure(Consumer<Integer>),"[73, 76]","{'A584': [(73, 76)]}",{'A584': 1.0},A584,,"    public static void setSystemExitProcedure(Consumer<Integer> systemExitProcedure) {
        Objects.requireNonNull(systemExitProcedure);
        ServiceUtils.systemExitProcedure = systemExitProcedure;
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/ServiceUtils.java,ServiceUtils,requestSystemExit,void requestSystemExit(int),"[84, 86]","{'A584': [(84, 86)]}",{'A584': 1.0},A584,,"    public static void requestSystemExit(int code) {
        systemExitProcedure.accept(code);
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,createSaslClient,"SaslClient createSaslClient(ZKConfig,Subject,String,String,String,Logger,String)","[59, 151]","{'A583': [(59, 59), (61, 66), (79, 81), (83, 83), (89, 89), (103, 103), (105, 105), (107, 107), (110, 110), (114, 114), (125, 144)], 'A594': [(67, 72), (78, 78), (82, 82), (84, 88), (90, 102), (104, 104), (106, 106), (108, 109), (111, 113), (121, 124), (145, 151)], 'A628': [(60, 60), (73, 77)], 'A670': [(115, 120)]}","{'A583': 0.3978494623655914, 'A594': 0.4731182795698925, 'A628': 0.06451612903225806, 'A670': 0.06451612903225806}",A594,,"    public static SaslClient createSaslClient(
        ZKConfig config,
        final Subject subject,
        final String servicePrincipal,
        final String protocol,
        final String serverName,
        final Logger LOG,
        final String entity) throws SaslException {
        SaslClient saslClient;
        // Use subject.getPrincipals().isEmpty() as an indication of which SASL
        // mechanism to use: if empty, use DIGEST-MD5; otherwise, use GSSAPI.
        if (subject.getPrincipals().isEmpty()) {
            // no principals: must not be GSSAPI: use DIGEST-MD5 mechanism
            // instead.
            // FIPS-mode: don't try DIGEST-MD5, just return error
            if (X509Util.getFipsMode(config)) {
                LOG.warn(""{} will not use DIGEST-MD5 as SASL mechanism, because FIPS mode is enabled."", entity);
                return null;
            }
            LOG.info(""{} will use DIGEST-MD5 as SASL mechanism."", entity);
            String[] mechs = {""DIGEST-MD5""};
            String username = (String) (subject.getPublicCredentials().toArray()[0]);
            String password = (String) (subject.getPrivateCredentials().toArray()[0]);
            // 'domain' parameter is hard-wired between the server and client
            saslClient = Sasl.createSaslClient(mechs, username, protocol, serverName, null, new SaslClientCallbackHandler(password, entity));
            return saslClient;
        } else { // GSSAPI.
            final Object[] principals = subject.getPrincipals().toArray();
            // determine client principal from subject.
            final Principal clientPrincipal = (Principal) principals[0];
            boolean usingNativeJgss = Boolean.getBoolean(""sun.security.jgss.native"");
            if (usingNativeJgss) {
                // http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/jgss-features.html
                // """"""
                // In addition, when performing operations as a particular
                // Subject, e.g. Subject.doAs(...) or
                // Subject.doAsPrivileged(...),
                // the to-be-used GSSCredential should be added to Subject's
                // private credential set. Otherwise, the GSS operations will
                // fail since no credential is found.
                // """"""
                try {
                    GSSManager manager = GSSManager.getInstance();
                    Oid krb5Mechanism = new Oid(""1.2.840.113554.1.2.2"");
                    GSSCredential cred = manager.createCredential(null, GSSContext.DEFAULT_LIFETIME, krb5Mechanism, GSSCredential.INITIATE_ONLY);
                    subject.getPrivateCredentials().add(cred);
                    LOG.debug(""Added private credential to {} principal name: '{}'"", entity, clientPrincipal);
                } catch (GSSException ex) {
                    LOG.warn(""Cannot add private credential to subject; authentication at the server may fail"", ex);
                }
            }
            final KerberosName clientKerberosName = new KerberosName(clientPrincipal.getName());
            // assume that server and client are in the same realm (by default;
            // unless the system property
            // ""zookeeper.server.realm"" is set).
            String serverRealm = System.getProperty(""zookeeper.server.realm"", clientKerberosName.getRealm());
            String modifiedServerPrincipal = servicePrincipal;
            // If service principal does not contain realm, then add it
            if (!modifiedServerPrincipal.contains(""@"")) {
                modifiedServerPrincipal = modifiedServerPrincipal + ""@"" + serverRealm;
            }
            KerberosName serviceKerberosName = new KerberosName(modifiedServerPrincipal);
            final String serviceName = serviceKerberosName.getServiceName();
            final String serviceHostname = serviceKerberosName.getHostName();
            final String clientPrincipalName = clientKerberosName.toString();
            try {
                saslClient = Subject.doAs(subject, new PrivilegedExceptionAction<SaslClient>() {
                    public SaslClient run() throws SaslException {
                        LOG.info(""{} will use GSSAPI as SASL mechanism."", entity);
                        String[] mechs = {""GSSAPI""};
                        LOG.debug(
                            ""creating sasl client: {}={};service={};serviceHostname={}"",
                            entity,
                            clientPrincipalName,
                            serviceName,
                            serviceHostname);
                        SaslClient saslClient = Sasl.createSaslClient(
                            mechs,
                            clientPrincipalName,
                            serviceName,
                            serviceHostname,
                            null,
                            new SaslClientCallbackHandler(null, entity));
                        return saslClient;
                    }
                });
                return saslClient;
            } catch (Exception e) {
                LOG.error(""Exception while trying to create SASL client"", e);
                return null;
            }
        }
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,run,SaslClient run(),"[126, 143]","{'A583': [(126, 143)]}",{'A583': 1.0},A583,,"                    public SaslClient run() throws SaslException {
                        LOG.info(""{} will use GSSAPI as SASL mechanism."", entity);
                        String[] mechs = {""GSSAPI""};
                        LOG.debug(
                            ""creating sasl client: {}={};service={};serviceHostname={}"",
                            entity,
                            clientPrincipalName,
                            serviceName,
                            serviceHostname);
                        SaslClient saslClient = Sasl.createSaslClient(
                            mechs,
                            clientPrincipalName,
                            serviceName,
                            serviceHostname,
                            null,
                            new SaslClientCallbackHandler(null, entity));
                        return saslClient;
                    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,createSaslServer,"SaslServer createSaslServer(Subject,String,String,CallbackHandler,Logger)","[163, 263]","{'A583': [(163, 168), (174, 174), (179, 179), (184, 184), (188, 188), (192, 192), (202, 202), (218, 220), (222, 225), (227, 227), (231, 242), (245, 245), (248, 248), (255, 255)], 'A594': [(169, 173), (175, 178), (180, 183), (185, 187), (189, 191), (193, 197), (201, 201), (203, 217), (221, 221), (226, 226), (228, 230), (243, 244), (246, 247), (249, 254), (256, 263)], 'A620': [(198, 200)]}","{'A583': 0.3465346534653465, 'A594': 0.6237623762376238, 'A620': 0.0297029702970297}",A594,,"    public static SaslServer createSaslServer(
        final Subject subject,
        final String protocol,
        final String serverName,
        final CallbackHandler callbackHandler,
        final Logger LOG) {
        if (subject != null) {
            // server is using a JAAS-authenticated subject: determine service
            // principal name and hostname from zk server's subject.
            if (subject.getPrincipals().size() > 0) {
                try {
                    final Object[] principals = subject.getPrincipals().toArray();
                    final Principal servicePrincipal = (Principal) principals[0];

                    // e.g. servicePrincipalNameAndHostname :=
                    // ""zookeeper/myhost.foo.com@FOO.COM""
                    final String servicePrincipalNameAndHostname = servicePrincipal.getName();

                    int indexOf = servicePrincipalNameAndHostname.indexOf(""/"");

                    // e.g. servicePrincipalName := ""zookeeper""
                    final String servicePrincipalName = servicePrincipalNameAndHostname.substring(0, indexOf);

                    // e.g. serviceHostnameAndKerbDomain :=
                    // ""myhost.foo.com@FOO.COM""
                    final String serviceHostnameAndKerbDomain = servicePrincipalNameAndHostname.substring(indexOf + 1);

                    indexOf = serviceHostnameAndKerbDomain.indexOf(""@"");
                    // e.g. serviceHostname := ""myhost.foo.com""
                    final String serviceHostname = serviceHostnameAndKerbDomain.substring(0, indexOf);

                    // TODO: should depend on zoo.cfg specified mechs, but if
                    // subject is non-null, it can be assumed to be GSSAPI.
                    final String mech = ""GSSAPI"";

                    LOG.debug(""serviceHostname is '{}'"", serviceHostname);
                    LOG.debug(""servicePrincipalName is '{}'"", servicePrincipalName);
                    LOG.debug(""SASL mechanism(mech) is '{}'"", mech);

                    boolean usingNativeJgss = Boolean.getBoolean(""sun.security.jgss.native"");
                    if (usingNativeJgss) {
                        // http://docs.oracle.com/javase/6/docs/technotes/guides/security/jgss/jgss-features.html
                        // """"""
                        // In addition, when performing operations as a
                        // particular
                        // Subject, e.g. Subject.doAs(...) or
                        // Subject.doAsPrivileged(...), the to-be-used
                        // GSSCredential should be added to Subject's
                        // private credential set. Otherwise, the GSS operations
                        // will fail since no credential is found.
                        // """"""
                        try {
                            GSSManager manager = GSSManager.getInstance();
                            Oid krb5Mechanism = new Oid(""1.2.840.113554.1.2.2"");
                            GSSName gssName = manager.createName(
                                servicePrincipalName + ""@"" + serviceHostname,
                                GSSName.NT_HOSTBASED_SERVICE);
                            GSSCredential cred = manager.createCredential(gssName, GSSContext.DEFAULT_LIFETIME, krb5Mechanism, GSSCredential.ACCEPT_ONLY);
                            subject.getPrivateCredentials().add(cred);
                            LOG.debug(
                                ""Added private credential to service principal name: '{}', GSSCredential name: {}"",
                                servicePrincipalName,
                                cred.getName());
                        } catch (GSSException ex) {
                            LOG.warn(""Cannot add private credential to subject; clients authentication may fail"", ex);
                        }
                    }
                    try {
                        return Subject.doAs(subject, new PrivilegedExceptionAction<SaslServer>() {
                            public SaslServer run() {
                                try {
                                    SaslServer saslServer;
                                    saslServer = Sasl.createSaslServer(mech, servicePrincipalName, serviceHostname, null, callbackHandler);
                                    return saslServer;
                                } catch (SaslException e) {
                                    LOG.error(""Zookeeper Server failed to create a SaslServer to interact with a client during session initiation"", e);
                                    return null;
                                }
                            }
                        });
                    } catch (PrivilegedActionException e) {
                        // TODO: exit server at this point(?)
                        LOG.error(""Zookeeper Quorum member experienced a PrivilegedActionException exception while creating a SaslServer using a JAAS principal context"", e);
                    }
                } catch (IndexOutOfBoundsException e) {
                    LOG.error(""server principal name/hostname determination error"", e);
                }
            } else {
                // JAAS non-GSSAPI authentication: assuming and supporting only
                // DIGEST-MD5 mechanism for now.
                // TODO: use 'authMech=' value in zoo.cfg.
                try {
                    SaslServer saslServer = Sasl.createSaslServer(""DIGEST-MD5"", protocol, serverName, null, callbackHandler);
                    return saslServer;
                } catch (SaslException e) {
                    LOG.error(""Zookeeper Quorum member failed to create a SaslServer to interact with a client during session initiation"", e);
                }
            }
        }
        return null;
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,run,SaslServer run(),"[232, 241]","{'A583': [(232, 241)]}",{'A583': 1.0},A583,,"                            public SaslServer run() {
                                try {
                                    SaslServer saslServer;
                                    saslServer = Sasl.createSaslServer(mech, servicePrincipalName, serviceHostname, null, callbackHandler);
                                    return saslServer;
                                } catch (SaslException e) {
                                    LOG.error(""Zookeeper Server failed to create a SaslServer to interact with a client during session initiation"", e);
                                    return null;
                                }
                            }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,getServerPrincipal,"String getServerPrincipal(String,String)","[276, 283]","{'A583': [(276, 276), (278, 278)], 'A594': [(277, 277), (279, 283)]}","{'A583': 0.25, 'A594': 0.75}",A594,,"    public static String getServerPrincipal(String principalConfig, String hostname) {
        String[] components = getComponents(principalConfig);
        if (components == null || components.length != 2 || !components[1].equals(QUORUM_HOSTNAME_PATTERN)) {
            return principalConfig;
        } else {
            return replacePattern(components, hostname);
        }
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,getComponents,String[] getComponents(String),"[285, 290]","{'A583': [(286, 286), (288, 288)], 'A594': [(285, 285), (287, 287), (289, 290)]}","{'A583': 0.3333333333333333, 'A594': 0.6666666666666666}",A594,,"    private static String[] getComponents(String principalConfig) {
        if (principalConfig == null) {
            return null;
        }
        return principalConfig.split(""[/]"");
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/SecurityUtils.java,SecurityUtils,replacePattern,"String replacePattern(String[],String)","[292, 294]","{'A594': [(292, 294)]}",{'A594': 1.0},A594,,"    private static String replacePattern(String[] components, String hostname) {
        return components[0] + ""/"" + hostname.toLowerCase();
    }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,offer,boolean offer(E),"[75, 93]","{'A620': [(75, 93)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean offer(E e) {
      Objects.requireNonNull(e);
      final ReentrantLock lock = this.lock;
      lock.lock();
      try {
          if (this.queue.size() == this.maxSize) {
              final E discard = this.queue.remove();
              this.droppedCount++;
              LOG.debug(""Queue is full. Discarding oldest element [count={}]: {}"",
                  this.droppedCount, discard);
          }
          this.queue.add(e);
          this.notEmpty.signal();
      } finally {
          lock.unlock();
      }
      return true;
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,poll,"E poll(long,TimeUnit)","[95, 111]","{'A620': [(95, 111)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public E poll(long timeout, TimeUnit unit) throws InterruptedException {
      long nanos = unit.toNanos(timeout);
      final ReentrantLock lock = this.lock;
      lock.lockInterruptibly();
      try {
          while (this.queue.isEmpty()) {
              if (nanos <= 0) {
                  return null;
              }
              nanos = this.notEmpty.awaitNanos(nanos);
          }
          return this.queue.poll();
      } finally {
          lock.unlock();
      }
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,take,E take(),"[113, 125]","{'A620': [(113, 125)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public E take() throws InterruptedException {
      final ReentrantLock lock = this.lock;
      lock.lockInterruptibly();
      try {
          while (this.queue.isEmpty()) {
            this.notEmpty.await();
          }
          return this.queue.poll();
      } finally {
          lock.unlock();
      }
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,isEmpty,boolean isEmpty(),"[127, 136]","{'A620': [(127, 136)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean isEmpty() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
      return this.queue.isEmpty();
    } finally {
      lock.unlock();
    }
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,size,int size(),"[138, 147]","{'A620': [(138, 147)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public int size() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
      return this.queue.size();
    } finally {
      lock.unlock();
    }
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,getDroppedCount,long getDroppedCount(),"[155, 157]","{'A620': [(155, 157)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  public long getDroppedCount() {
    return this.droppedCount;
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,isConsumerThreadBlocked,boolean isConsumerThreadBlocked(),"[165, 173]","{'A620': [(165, 173)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  boolean isConsumerThreadBlocked() {
    final ReentrantLock lock = this.lock;
    lock.lock();
    try {
      return lock.getWaitQueueLength(this.notEmpty) > 0;
    } finally {
      lock.unlock();
    }
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,drainTo,int drainTo(Collection<? super E>),"[175, 178]","{'A620': [(175, 178)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public int drainTo(Collection<? super E> c) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,poll,E poll(),"[181, 184]","{'A620': [(181, 184)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public E poll() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,element,E element(),"[186, 189]","{'A620': [(186, 189)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public E element() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,peek,E peek(),"[191, 194]","{'A620': [(191, 194)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public E peek() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,remove,E remove(),"[196, 199]","{'A620': [(196, 199)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public E remove() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,addAll,boolean addAll(Collection<? extends E>),"[201, 204]","{'A620': [(201, 204)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean addAll(Collection<? extends E> arg0) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,clear,void clear(),"[206, 209]","{'A620': [(206, 209)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public void clear() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,containsAll,boolean containsAll(Collection<?>),"[211, 214]","{'A620': [(211, 214)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean containsAll(Collection<?> arg0) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,iterator,Iterator<E> iterator(),"[216, 219]","{'A620': [(216, 219)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public Iterator<E> iterator() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,removeAll,boolean removeAll(Collection<?>),"[221, 224]","{'A620': [(221, 224)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean removeAll(Collection<?> arg0) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,retainAll,boolean retainAll(Collection<?>),"[226, 229]","{'A620': [(226, 229)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean retainAll(Collection<?> arg0) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,toArray,Object[] toArray(),"[231, 234]","{'A620': [(231, 234)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public Object[] toArray() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,toArray,T[] toArray(T[]),"[236, 239]","{'A620': [(236, 239)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public <T> T[] toArray(T[] arg0) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,add,boolean add(E),"[241, 244]","{'A620': [(241, 244)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean add(E e) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,contains,boolean contains(Object),"[246, 249]","{'A620': [(246, 249)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean contains(Object o) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,drainTo,"int drainTo(Collection<? super E>,int)","[251, 254]","{'A620': [(251, 254)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public int drainTo(Collection<? super E> c, int maxElements) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,offer,"boolean offer(E,long,TimeUnit)","[256, 260]","{'A620': [(256, 260)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean offer(E e, long timeout, TimeUnit unit)
      throws InterruptedException {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,put,void put(E),"[262, 265]","{'A620': [(262, 265)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public void put(E e) throws InterruptedException {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,remainingCapacity,int remainingCapacity(),"[267, 270]","{'A620': [(267, 270)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public int remainingCapacity() {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper.util,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/util/CircularBlockingQueue.java,CircularBlockingQueue,remove,boolean remove(Object),"[272, 275]","{'A620': [(272, 275)]}",{'A620': 1.0},A620,../projects/zookeeper/zookeeper-server/src/test/java/org/apache/zookeeper/util/TestCircularBlockingQueue.java,"  @Override
  public boolean remove(Object o) {
    throw new UnsupportedOperationException();
  }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/JLineZNodeCompleter.java,JLineZNodeCompleter,complete,"int complete(String,int,List)","[33, 49]","{'A583': [(33, 33), (36, 36), (41, 41), (45, 46)], 'A596': [(34, 35), (37, 40), (42, 44), (47, 49)]}","{'A583': 0.29411764705882354, 'A596': 0.7058823529411765}",A596,,"    @SuppressWarnings({""unchecked"", ""rawtypes""})
    public int complete(String buffer, int cursor, List candidates) {
        // Guarantee that the final token is the one we're expanding
        buffer = buffer.substring(0, cursor);
        String token = """";
        if (!buffer.endsWith("" "")) {
            String[] tokens = buffer.split("" "");
            if (tokens.length != 0) {
                token = tokens[tokens.length - 1];
            }
        }

        if (token.startsWith(""/"")) {
            return completeZNode(buffer, token, candidates);
        }
        return completeCommand(buffer, token, candidates);
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/JLineZNodeCompleter.java,JLineZNodeCompleter,completeCommand,"int completeCommand(String,String,List<String>)","[51, 58]","{'A583': [(51, 51), (53, 53), (57, 57)], 'A596': [(52, 52), (54, 56), (58, 58)]}","{'A583': 0.375, 'A596': 0.625}",A596,,"    private int completeCommand(String buffer, String token, List<String> candidates) {
        for (String cmd : ZooKeeperMain.getCommands()) {
            if (cmd.startsWith(token)) {
                candidates.add(cmd);
            }
        }
        return buffer.lastIndexOf("" "") + 1;
    }
"
org.apache.zookeeper,../projects/zookeeper/zookeeper-server/src/main/java/org/apache/zookeeper/JLineZNodeCompleter.java,JLineZNodeCompleter,completeZNode,"int completeZNode(String,String,List<String>)","[60, 80]","{'A583': [(60, 60), (66, 66), (70, 70), (73, 73), (75, 75)], 'A596': [(61, 65), (67, 69), (71, 72), (74, 74), (76, 77), (79, 80)], 'A593': [(78, 78)]}","{'A583': 0.23809523809523808, 'A596': 0.7142857142857143, 'A593': 0.047619047619047616}",A596,,"    private int completeZNode(String buffer, String token, List<String> candidates) {
        String path = token;
        int idx = path.lastIndexOf(""/"") + 1;
        String prefix = path.substring(idx);
        try {
            // Only the root path can end in a /, so strip it off every other prefix
            String dir = idx == 1 ? ""/"" : path.substring(0, idx - 1);
            List<String> children = zk.getChildren(dir, false);
            for (String child : children) {
                if (child.startsWith(prefix)) {
                    candidates.add(child);
                }
            }
        } catch (InterruptedException e) {
            return 0;
        } catch (KeeperException e) {
            return 0;
        }
        Collections.sort(candidates);
        return candidates.size() == 0 ? buffer.length() : buffer.lastIndexOf(""/"") + 1;
    }
"
